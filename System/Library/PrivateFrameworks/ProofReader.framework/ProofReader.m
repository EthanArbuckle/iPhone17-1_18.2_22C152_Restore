void sub_20CBA25EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void _freeDatabaseConnection(void *a1)
{
  v2 = (void **)a1[5];
  if (v2)
  {
    if (*v2)
    {
      free(*v2);
      v2 = (void **)a1[5];
    }
    free(v2);
  }
  v3 = (void **)a1[9];
  if (v3)
  {
    if (*v3)
    {
      free(*v3);
      v3 = (void **)a1[9];
    }
    free(v3);
  }
  free(a1);
}

void _releaseDatabaseConnection(uint64_t a1, unsigned __int8 *a2)
{
  PRdb(a2, 2, 0);
  _freeDatabaseConnection(a2);
}

uint64_t _appIdentifierFromOptions(void *a1)
{
  uint64_t result = [a1 objectForKey:@"AppIdentifier"];
  if (result)
  {
    uint64_t v2 = result;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SLLngToA(unsigned int a1)
{
  if ((SLLngToA_LToANotDef & 1) == 0)
  {
    SLLngToA_SLLangToAttr[0] = (uint64_t)&SLatt1_tab;
    unk_26AA71490 = &SLatt2_tab;
    qword_26AA71498 = (uint64_t)&SLatt5_tab;
    unk_26AA714A0 = &SLatt1_tab;
    qword_26AA714A8 = (uint64_t)&SLatt2_tab;
    unk_26AA714B0 = &SLatt1_tab;
    qword_26AA714B8 = (uint64_t)&SLatt1_tab;
    unk_26AA714C0 = &SLatt1_tab;
    qword_26AA714C8 = (uint64_t)&SLatt1_tab;
    unk_26AA714D0 = &SLatt1_tab;
    qword_26AA714D8 = (uint64_t)&SLatt1_tab;
    unk_26AA714E0 = &SLatt1_tab;
    qword_26AA714E8 = (uint64_t)&SLatt1_tab;
    unk_26AA714F0 = &SLatt1_tab;
    qword_26AA714F8 = (uint64_t)&SLatt1_tab;
    unk_26AA71500 = &SLatt7_tab;
    qword_26AA71508 = (uint64_t)&SLatt1_tab;
    unk_26AA71510 = &SLatt1_tab;
    qword_26AA71518 = (uint64_t)&SLatt2_tab;
    unk_26AA71520 = &SLatt1_tab;
    SLLngToA_LToANotDef = 1;
  }
  if (a1 > 0x25) {
    return 0;
  }
  else {
    return SLLngToA_SLLangToAttr[a1];
  }
}

uint64_t SLcap(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  *a4 = 0;
  if (a2 > a3) {
    return 0;
  }
  __int16 v6 = 0;
  __int16 v7 = 0;
  __int16 v8 = 0;
  __int16 v9 = a2;
  LOWORD(v10) = a2;
  do
  {
    if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + (__int16)v10)) & 0x40000000) != 0)
    {
      ++v7;
      *((_DWORD *)a4 + ((unsigned __int16)(v10 - v9) >> 5)) |= 1 << ~(v10 - v9);
      if ((unsigned __int16)v10 == (unsigned __int16)a2) {
        ++v6;
      }
    }
    else if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + (__int16)v10)) & 0x60000040) != 0)
    {
      ++v8;
    }
    else
    {
      LOWORD(a2) = a2 + 1;
    }
    int v10 = (__int16)(v10 + 1);
  }
  while (v10 <= a3);
  if (v6 && v7 == 1) {
    return 1;
  }
  if (v8 && v7) {
    return 3;
  }
  if (!v7) {
    return 0;
  }
  return 2;
}

uint64_t SLstrcmp(unsigned char *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  if (*a1)
  {
    v3 = a1 + 1;
    do
    {
      if (v2 != *a2) {
        break;
      }
      ++a2;
      int v4 = *v3++;
      int v2 = v4;
    }
    while (v4);
  }
  return v2 - *a2;
}

uint64_t SLstrncmp(unsigned char *a1, unsigned __int8 *a2, int a3)
{
  v3 = &a1[a3];
  if (a3 >= 1)
  {
    do
    {
      if (!*a1) {
        break;
      }
      if (*a1 != *a2) {
        break;
      }
      ++a1;
      ++a2;
    }
    while (a1 < v3);
  }
  if (a1 == v3) {
    return 0;
  }
  else {
    return *a1 - *a2;
  }
}

uint64_t SLc2pasc(char *a1)
{
  int v2 = strlen(a1);
  if (v2 << 16 <= 16711680) {
    __int16 v3 = v2;
  }
  else {
    __int16 v3 = 255;
  }
  LOWORD(v4) = v3 - 1;
  if (((v3 - 1) & 0x8000) == 0)
  {
    int v4 = (__int16)v4;
    do
      a1[(unsigned __int16)v4 + 1] = a1[(unsigned __int16)v4];
    while ((unsigned __int16)v4--);
  }
  *a1 = v3;
  return v3;
}

uint64_t SLpasc2c(unsigned __int8 *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    int v3 = 1;
    int v4 = 1;
    do
    {
      a1[v3 - 1] = a1[(__int16)v4++];
      int v3 = (__int16)v4;
    }
    while ((__int16)v4 <= (int)result);
  }
  a1[result] = 0;
  return result;
}

void sub_20CBA7000(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_20CBA7980(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t _setLanguageModel(void *a1, uint64_t a2, __CFString *a3, uint64_t a4)
{
  uint64_t v8 = [a1 objectForKey:a2];
  uint64_t v9 = v8;
  if (!a3) {
    a3 = &stru_26C1C71A8;
  }
  if (v8)
  {
    if (a4)
    {
LABEL_5:
      int v10 = (void *)v9;
      uint64_t v11 = a4;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = [MEMORY[0x263EFF9A0] dictionary];
    [a1 setObject:v9 forKey:a2];
    if (a4) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = [MEMORY[0x263EFF9D0] null];
  int v10 = (void *)v9;
LABEL_8:
  return [v10 setObject:v11 forKey:a3];
}

void sub_20CBA7E28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL _allowModelUsage()
{
  if (_allowModelUsage_onceToken != -1) {
    dispatch_once(&_allowModelUsage_onceToken, &__block_literal_global_363);
  }
  return (_allowModelUsage_kbdProcess | _allowModelUsage_inputuiProcess) == 0;
}

void sub_20CBA840C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_20CBA8720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBA8F30(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_20CBA9948(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_20CBA9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_20CBAC918(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___allowModelUsage_block_invoke()
{
  v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F08AB0], "processInfo"), "processName");
  _allowModelUsage_kbdProcess = [v0 isEqualToString:@"kbd"];
  uint64_t result = [v0 isEqualToString:@"InputUI"];
  _allowModelUsage_inputuiProcess = result;
  return result;
}

uint64_t descendingDoubleValueComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  [a2 doubleValue];
  double v5 = v4;
  [a3 doubleValue];
  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

uint64_t descendingScoreComparator_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  [a2 score];
  double v5 = v4;
  [a3 score];
  if (v5 > v6) {
    return -1;
  }
  else {
    return v5 < v6;
  }
}

void sub_20CBAE6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t SLchk(unsigned __int8 *a1, int a2, unsigned int a3, int *a4, unsigned int a5, _DWORD *a6)
{
  if (a3 > 2)
  {
    if (a3 > a5) {
      return 8;
    }
    int v8 = *a4;
    if (*a4 == *a6 && a4[1] == a6[1]) {
      return 0;
    }
    if (a2 < 1) {
      return 8;
    }
    uint64_t v9 = (unsigned __int16)a2;
    while (1)
    {
      int v10 = *a1++;
      if (v10 == 45) {
        break;
      }
      if (!--v9) {
        return 8;
      }
    }
    if (((*a6 ^ v8) & 0x7FFFFFFF) != 0 || (v8 & 0x80000000) == 0) {
      return 8;
    }
LABEL_21:
    if (a4[1] != a6[1]) {
      return 8;
    }
    return 0;
  }
  if (a3 >= a5) {
    return 0;
  }
  if (a3 == 2 && a5 == 3)
  {
    if (a2 >= 1)
    {
      uint64_t v6 = (unsigned __int16)a2;
      do
      {
        int v7 = *a1++;
        if (v7 == 45) {
          return 0;
        }
      }
      while (--v6);
    }
    if (*a4 == *a6) {
      goto LABEL_21;
    }
  }
  return 8;
}

uint64_t SLLngToC(int a1, unsigned int a2)
{
  if ((LtoCNotDef & 1) == 0) {
    SLLtoCInit();
  }
  return SLLangToChar[2 * a2 + a1];
}

uint64_t SLLtoCInit()
{
  SLLangToChar = (uint64_t)&SLToNat1ChrSet;
  *(void *)algn_26AA71228 = &SLToDef1ChrSet;
  qword_26AA71240 = (uint64_t)&SLToNat5ChrSet;
  unk_26AA71248 = &SLToDef5ChrSet;
  qword_26AA71310 = (uint64_t)&SLToNat7ChrSet;
  unk_26AA71318 = &SLToDef7ChrSet;
  qword_26AA71230 = (uint64_t)&SLToNat2ChrSet;
  unk_26AA71238 = &SLToDef2ChrSet;
  qword_26AA71250 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71258 = &SLToDef1ChrSet;
  qword_26AA71260 = (uint64_t)&SLToNat2ChrSet;
  unk_26AA71268 = &SLToDef2ChrSet;
  qword_26AA71270 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71278 = &SLToDef1ChrSet;
  qword_26AA71280 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71288 = &SLToDef1ChrSet;
  qword_26AA71290 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71298 = &SLToDef1ChrSet;
  qword_26AA712A0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712A8 = &SLToDef1ChrSet;
  qword_26AA712B0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712B8 = &SLToDef1ChrSet;
  qword_26AA712C0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712C8 = &SLToDef1ChrSet;
  qword_26AA712D0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712D8 = &SLToDef1ChrSet;
  qword_26AA712E0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712E8 = &SLToDef1ChrSet;
  qword_26AA712F0 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA712F8 = &SLToDef1ChrSet;
  qword_26AA71300 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71308 = &SLToDef1ChrSet;
  qword_26AA71320 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71328 = &SLToDef1ChrSet;
  qword_26AA71330 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71338 = &SLToDef1ChrSet;
  qword_26AA71340 = (uint64_t)&SLToNat2ChrSet;
  unk_26AA71348 = &SLToDef2ChrSet;
  qword_26AA71350 = (uint64_t)&SLToNat1ChrSet;
  unk_26AA71358 = &SLToDef1ChrSet;
  LtoCNotDef = 1;
  return 0;
}

uint64_t SLchcnv(char *a1, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  if ((LtoCNotDef & 1) == 0) {
    SLLtoCInit();
  }
  uint64_t result = 8;
  if (a5 <= 0x25)
  {
    uint64_t v11 = SLLangToChar[2 * a5 + a4];
    if (v11)
    {
      if (a2 < 1)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = (unsigned __int16)a2;
        uint64_t v13 = (unsigned __int16)a2;
        v14 = a3;
        do
        {
          int v16 = *a1++;
          unsigned __int8 v15 = v16;
          if (v16 < 0) {
            unsigned __int8 v15 = *(unsigned char *)(v11 + v15 - 128);
          }
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      uint64_t result = 0;
      a3[v12] = 0;
    }
  }
  return result;
}

uint64_t SLcrypt(unsigned char *a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a2)
  {
    unsigned __int16 v4 = 0;
    uint64_t v5 = a2;
    do
    {
      if (a4 == v4) {
        unsigned __int16 v4 = 0;
      }
      if (*a1)
      {
        int v6 = *(unsigned __int8 *)(a3 + v4) ^ *a1;
        if (v6) {
          *a1 = v6;
        }
      }
      ++v4;
      ++a1;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t SLOpen(uint64_t a1, uint64_t a2, int *a3, unsigned int a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  __strcpy_chk();
  __strcat_chk();
  char v6 = a4;
  uint64_t v15 = 0;
  int v7 = open(v17, a4 & 0xFFF, 511, 0, 0);
  *a3 = v7;
  if (v7 == -1) {
    return 8;
  }
  int v8 = (a4 >> 12) & 3;
  if (v8 == 3) {
    __int16 v9 = 1;
  }
  else {
    __int16 v9 = v8;
  }
  if (v8) {
    __int16 v10 = v9;
  }
  else {
    __int16 v10 = 1;
  }
  WORD2(v15) = v10;
  if (fcntl(v7, 7, &v14) < 0) {
    goto LABEL_18;
  }
  if (v8 && WORD2(v15) == 2)
  {
    WORD2(v15) = v8;
    if (fcntl(*a3, 8, &v14) < 0)
    {
      if (close(*a3) == -1) {
        return 8;
      }
      else {
        return 4;
      }
    }
    goto LABEL_21;
  }
  if (v8 && v15)
  {
LABEL_18:
    if (close(*a3) == -1) {
      return 8;
    }
    else {
      return 4;
    }
  }
LABEL_21:
  uint64_t result = 0;
  if ((v6 & 3) == 0)
  {
    uint64_t v12 = *a3;
    if (v12 <= 0x3F)
    {
      memset(&v16, 0, sizeof(v16));
      if (!fstat(v12, &v16) && v16.st_size >= 1 && (v16.st_mode & 0xF000) == 0x8000)
      {
        uint64_t v13 = mmap(0, v16.st_size, 1, 2, v12, 0);
        if (v13 != (void *)-1)
        {
          mapped_file_buffers[v12] = v13;
          mapped_file_sizes[v12] = v16.st_size;
          mapped_file_offsets[v12] = 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t SLfulfspec(char *__src, const char *a2, char *__dst)
{
  return 0;
}

uint64_t SLClose(unsigned int a1)
{
  if (a1 <= 0x3F)
  {
    int v2 = (void *)mapped_file_buffers[a1];
    if (v2)
    {
      int64_t v3 = mapped_file_sizes[a1];
      if (v3 >= 1)
      {
        munmap(v2, v3);
        mapped_file_buffers[a1] = 0;
        mapped_file_sizes[a1] = 0;
        mapped_file_offsets[a1] = 0;
      }
    }
  }
  return 8 * (close(a1) == -1);
}

uint64_t SLSeek(unsigned int a1, int a2, unsigned int a3)
{
  if (a3 > 2) {
    return 8;
  }
  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1) {
    uint64_t v3 = seek_file_map(a1, a2, a3);
  }
  else {
    uint64_t v3 = lseek(a1, a2, a3);
  }
  return 8 * (v3 == -1);
}

uint64_t seek_file_map(unsigned int a1, unint64_t a2, int a3)
{
  if (a1 > 0x3F) {
    return -1;
  }
  if (!mapped_file_buffers[a1]) {
    return -1;
  }
  uint64_t v3 = a1;
  uint64_t v4 = mapped_file_sizes[a1];
  if (v4 < 1) {
    return -1;
  }
  if (a3 == 2)
  {
    unint64_t v5 = v4 + a2;
  }
  else
  {
    unint64_t v5 = mapped_file_offsets[a1];
    if (a3 == 1)
    {
      v5 += a2;
    }
    else if (!a3)
    {
      unint64_t v5 = a2;
    }
  }
  uint64_t result = -1;
  if ((v5 & 0x8000000000000000) == 0 && v5 <= v4)
  {
    mapped_file_offsets[v3] = v5;
    return v5;
  }
  return result;
}

uint64_t SLFpos(unsigned int a1, _DWORD *a2)
{
  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t v3 = mapped_file_sizes[a1], v3 >= 1))
  {
    unint64_t v4 = mapped_file_offsets[a1];
    uint64_t result = 8;
    if ((v4 & 0x8000000000000000) == 0)
    {
      BOOL v6 = v4 > v3 || v4 == -1;
      int v7 = v4;
      if (!v6) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    int v7 = lseek(a1, 0, 1);
    if (v7 != -1)
    {
LABEL_12:
      uint64_t result = 0;
      *a2 = v7;
      return result;
    }
    return 8;
  }
  return result;
}

uint64_t SLRead(unsigned int a1, unsigned int a2, void *__dst, _DWORD *a4)
{
  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1) {
    int file_map = read_file_map(a1, __dst, (int)a2);
  }
  else {
    int file_map = read(a1, __dst, a2);
  }
  *a4 = file_map;
  return 8 * (file_map == -1);
}

size_t read_file_map(unsigned int a1, void *__dst, size_t a3)
{
  if (a1 > 0x3F) {
    return -1;
  }
  uint64_t v3 = mapped_file_buffers[a1];
  if (!v3) {
    return -1;
  }
  uint64_t v4 = a1;
  uint64_t v5 = mapped_file_sizes[a1];
  if (v5 < 1) {
    return -1;
  }
  uint64_t v6 = mapped_file_offsets[a1];
  if (v6 + a3 <= v5) {
    size_t v7 = a3;
  }
  else {
    size_t v7 = v5 - v6;
  }
  memmove(__dst, (const void *)(v3 + v6), v7);
  mapped_file_offsets[v4] += v7;
  return v7;
}

uint64_t SLFRead(unsigned int a1, int a2, void *__dst, unsigned int *a4)
{
  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1) {
    unsigned int file_map = read_file_map(a1, __dst, a2);
  }
  else {
    unsigned int file_map = read(a1, __dst, a2);
  }
  *a4 = file_map;
  return (file_map >> 28) & 8;
}

uint64_t SLHRead(unsigned int a1, int a2, char *__dst, _DWORD *a4)
{
  *a4 = 0;
  if (!a2) {
    return 0;
  }
  int v6 = a2;
  while (1)
  {
    int v8 = v6 >= 4096 ? 4096 : v6;
    int v11 = v8;
    if (SLFRead(a1, v8, __dst, (unsigned int *)&v11)) {
      break;
    }
    int v9 = v11;
    __dst += v11;
    *a4 += v11;
    v6 -= v9;
    if (!v6) {
      return 0;
    }
  }
  return 8;
}

uint64_t SLFWrite(int a1, int a2, void *__buf, unsigned int *a4)
{
  unsigned int v5 = write(a1, __buf, a2);
  *a4 = v5;
  return (v5 >> 28) & 8;
}

uint64_t SLtmpnam(unsigned char *a1, char *a2)
{
  uint64_t v4 = (const char *)malloc_type_malloc(0x1FEuLL, 0x100004077774924uLL);
  unsigned int v5 = (char *)malloc_type_malloc(8uLL, 0x100004077774924uLL);
  if (!*a2) {
    goto LABEL_6;
  }
  if (*a1)
  {
    __strcpy_chk();
    __strcat_chk();
  }
  else
  {
    __strcpy_chk();
  }
  if (access(v4, 0) == -1)
  {
    uint64_t v9 = 0;
LABEL_18:
    __int16 v10 = (void *)v4;
  }
  else
  {
LABEL_6:
    __dst = a2;
    int v6 = time(0) ^ 0x75BD924;
    int v7 = 308915776;
    while (1)
    {
      int v8 = -2836 * (v6 / 127773) + 16807 * (v6 % 127773);
      int v6 = v8 >= 0 ? -2836 * (v6 / 127773) + 16807 * (v6 % 127773) : v8 + 0x7FFFFFFF;
      snprintf(v5, 8uLL, "%06d", (unsigned __int16)(v6 % 308915776));
      if (*a1)
      {
        __strcpy_chk();
        __strcat_chk();
      }
      else
      {
        __strcpy_chk();
      }
      if (access(v4, 0) == -1) {
        break;
      }
      if (!--v7)
      {
        uint64_t v9 = 8;
        goto LABEL_18;
      }
    }
    strcpy(__dst, v5);
    uint64_t v9 = 0;
    __int16 v10 = v5;
    unsigned int v5 = (char *)v4;
  }
  free(v10);
  free(v5);
  return v9;
}

uint64_t SLRand(_DWORD *a1)
{
  LODWORD(v1) = -2836 * ((*a1 ^ 0x75BD924) / 127773) + 16807 * ((*a1 ^ 0x75BD924) % 127773);
  if ((int)v1 >= 0) {
    uint64_t v1 = v1;
  }
  else {
    uint64_t v1 = (v1 + 0x7FFFFFFF);
  }
  *a1 = v1 ^ 0x75BD924;
  return v1;
}

uint64_t SLremove()
{
  v0 = (char *)malloc_type_calloc(1uLL, 0x1FEuLL, 0xABFD737CuLL);
  if (!v0) {
    return 8;
  }
  uint64_t v1 = v0;
  __strcpy_chk();
  __strcat_chk();
  BOOL v2 = unlink(v1) == -1;
  free(v1);
  return (8 * v2);
}

uint64_t SLpthcmp(unsigned char *a1, unsigned __int8 *a2)
{
  return 8 * (SLstrcmp(a1, a2) != 0);
}

uint64_t SLpthcpy(char *a1, const char *a2)
{
  return 0;
}

uint64_t SLfun(uint64_t a1, int a2, int a3, unsigned __int16 *a4, _WORD *a5)
{
  __int16 v5 = *(unsigned __int8 *)(a1 + a2);
  int v6 = (__int16)(a2 + 1);
  if (v6 <= a3)
  {
    unsigned __int16 v7 = *(unsigned __int8 *)(a1 + a2);
    do
    {
      unsigned __int16 v7 = ((v7 & 0x7F) << 8) + 19 * (v7 >> 7) + *(unsigned __int8 *)(a1 + (__int16)v6);
      if (v7 > 0x7FECu) {
        v7 -= 32749;
      }
      v5 ^= v7;
      int v6 = (__int16)(v6 + 1);
    }
    while (v6 <= a3);
  }
  else
  {
    unsigned __int16 v7 = *(unsigned __int8 *)(a1 + a2);
  }
  *a5 = v5 & 0x7FFF;
  *a4 = v7;
  return 0;
}

uint64_t SLisint(unsigned char *a1, uint64_t a2)
{
  unsigned int v2 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v3 = a1 + 1;
  while ((*(_DWORD *)(a2 + 4 * v2) & 0x8000000) != 0)
  {
    unsigned int v4 = *v3++;
    unsigned int v2 = v4;
    if (!v4) {
      return 1;
    }
  }
  return 0;
}

uint64_t SLlisten(const char *a1)
{
  uint64_t v1 = a1 + 1;
  __darwin_ct_rune_t v2 = *(unsigned __int8 *)a1;
  signed int v3 = strlen(a1) << 16;
  if (v3 >= 0x20000)
  {
    if (v3 == 0x20000)
    {
      if (v2 == 45)
      {
        if (*v1 == 45)
        {
          LOBYTE(v4) = 2;
          return (char)v4;
        }
      }
      else if ((v2 - 65) <= 0x19 && *v1 == 46)
      {
LABEL_18:
        LOBYTE(v4) = 0;
        return (char)v4;
      }
    }
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x263EF8318];
    while (1)
    {
      if (v2 <= 85)
      {
        if (v2 <= 66)
        {
          if (v2 > 40)
          {
            if (v2 == 41)
            {
              uint64_t v8 = 3;
              goto LABEL_42;
            }
            if (v2 == 46)
            {
              uint64_t v8 = 6;
              goto LABEL_42;
            }
          }
          else
          {
            if (!v2)
            {
              uint64_t v8 = 11;
              goto LABEL_42;
            }
            if (v2 == 40)
            {
              uint64_t v8 = 2;
              goto LABEL_42;
            }
          }
        }
        else if ((v2 - 67) < 2 || (v2 - 76) < 2 || v2 == 73)
        {
LABEL_28:
          uint64_t v8 = 4;
          goto LABEL_42;
        }
LABEL_45:
        if ((v2 & 0x80) != 0)
        {
          if (__maskrune(v2, 0x100uLL))
          {
LABEL_47:
            uint64_t v8 = 0;
            goto LABEL_42;
          }
        }
        else if ((*(_DWORD *)(v7 + 4 * v2 + 60) & 0x100) != 0)
        {
          goto LABEL_47;
        }
        if ((v2 - 48) > 9) {
          goto LABEL_18;
        }
        uint64_t v8 = 1;
      }
      else
      {
        if (v2 <= 107)
        {
          switch(v2)
          {
            case 'V':
            case 'X':
              goto LABEL_28;
            case 'W':
            case 'Y':
            case 'Z':
            case '\\':
            case '^':
            case '_':
            case 'a':
            case 'b':
              goto LABEL_45;
            case '[':
              uint64_t v8 = 7;
              goto LABEL_42;
            case ']':
              uint64_t v8 = 8;
              goto LABEL_42;
            case 'c':
            case 'd':
              goto LABEL_41;
            default:
              if (v2 == 105) {
                goto LABEL_41;
              }
              goto LABEL_45;
          }
        }
        switch(v2)
        {
          case 'v':
          case 'x':
            goto LABEL_41;
          case 'w':
          case 'y':
          case 'z':
          case '|':
            goto LABEL_45;
          case '{':
            uint64_t v8 = 9;
            break;
          case '}':
            uint64_t v8 = 10;
            break;
          default:
            if ((v2 - 108) >= 2) {
              goto LABEL_45;
            }
LABEL_41:
            uint64_t v8 = 5;
            break;
        }
      }
LABEL_42:
      LODWORD(v6) = state_table[12 * v6 + v8];
      if ((v6 + 2) < 3u)
      {
        int v4 = -(int)v6;
        return (char)v4;
      }
      __darwin_ct_rune_t v9 = *v1++;
      __darwin_ct_rune_t v2 = v9;
    }
  }
  LOBYTE(v4) = 2;
  BOOL v5 = v2 > 0x3D || ((1 << v2) & 0x20006C0000000000) == 0;
  if (v5 && ((v2 - 126) > 0x39 || ((1 << (v2 - 126)) & 0x200000002000001) == 0))
  {
    if (v2 == 111) {
      LOBYTE(v4) = 2;
    }
    else {
      LOBYTE(v4) = 0;
    }
  }
  return (char)v4;
}

uint64_t SLmap(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6, void *a7)
{
  *a7 = 0;
  *a6 = 0;
  *a5 = 0;
  *a4 = 0;
  if (a2 < a3)
  {
    __int16 v7 = a2;
    do
    {
      unsigned int v8 = *(unsigned __int8 *)(a1 + (__int16)a2);
      if (v8 > 0x2E)
      {
        int v11 = a5;
        if (v8 != 47)
        {
          int v11 = a6;
          if (v8 != 151) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v8 != 45)
        {
          BOOL v9 = v8 != 46 || a3 - 2 <= (__int16)a2;
          if (!v9 && *(unsigned char *)((__int16)a2 + a1 + 1) == 46 && *(unsigned char *)((__int16)a2 + a1 + 2) == 46)
          {
            int v10 = a2;
            do
            {
              LOWORD(a2) = v10;
              *((_DWORD *)a7 + ((unsigned __int16)(v10 - v7) >> 5)) |= 1 << ~(v10 - v7);
              ++v10;
            }
            while (*(unsigned char *)(a1 + (__int16)(a2 + 1)) == 46);
          }
          goto LABEL_23;
        }
        int v11 = a4;
        if (a3 - 1 > (__int16)a2)
        {
          int v11 = a4;
          if (*(unsigned char *)((__int16)a2 + a1 + 1) == 45)
          {
            int v12 = a2;
            do
            {
              LOWORD(a2) = v12;
              *((_DWORD *)a6 + ((unsigned __int16)(v12 - v7) >> 5)) |= 1 << ~(v12 - v7);
              ++v12;
            }
            while (*(unsigned char *)(a1 + (__int16)(a2 + 1)) == 45);
            goto LABEL_23;
          }
        }
      }
      *((_DWORD *)v11 + ((unsigned __int16)(a2 - v7) >> 5)) |= 1 << ~(a2 - v7);
LABEL_23:
      a2 = (__int16)(a2 + 1);
    }
    while (a2 < a3);
  }
  return 0;
}

uint64_t SLInitMutex(int a1, pthread_mutex_t *a2)
{
  return 8 * (pthread_mutex_init(a2, 0) != 0);
}

uint64_t SLTermMutex(pthread_mutex_t *a1)
{
  return 8 * (pthread_mutex_destroy(a1) != 0);
}

uint64_t SLord(uint64_t a1, char *__dst, int a3, int a4, uint64_t a5)
{
  __int16 v6 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  char *__dst = 0;
  if (a3 <= a4)
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(a1 + (__int16)a3);
      if ((*(_DWORD *)(a5 + 4 * v8) & 0x40000000) != 0) {
        char v9 = v8 + 32;
      }
      else {
        char v9 = *(unsigned char *)(a1 + (__int16)a3);
      }
      __int16 v6 = v7 + 1;
      __src[(__int16)v7] = v9;
      a3 = (__int16)(a3 + 1);
      ++v7;
    }
    while (a3 <= a4);
  }
  __int16 v10 = 0;
  __src[v6] = 0;
  do
  {
    size_t v11 = v10;
    int v12 = __src[v10];
    int v13 = *(_DWORD *)(a5 + 4 * __src[v10++]);
  }
  while ((v13 & 0x8000000) != 0);
  if (!v11) {
    return 0;
  }
  __int16 v14 = v6 - 1;
  size_t v15 = v11 + 1;
  if (v11 + 1 != v14) {
    return 0;
  }
  if (v12 == 116)
  {
    if (__src[v15] == 104)
    {
      char v16 = 1;
LABEL_23:
      char v18 = 1;
      goto LABEL_24;
    }
    return 0;
  }
  if (v12 != 110 && v12 != 114)
  {
    if (v12 == 115)
    {
      uint64_t result = 0;
      if (__src[v15] == 116)
      {
        char v18 = 0;
        char v16 = 1;
LABEL_24:
        if ((int)v11 < 2
          || __src[(v11 - 2)] != 49
          || __src[(v11 - 1)] - 49 > 2)
        {
          int v19 = __src[v11 - 1];
          switch(v19)
          {
            case '3':
              if (v12 == 114) {
                char v23 = v16;
              }
              else {
                char v23 = 1;
              }
              if ((v23 & 1) == 0) {
                return 1;
              }
              char v21 = 100;
              char v22 = 114;
              goto LABEL_47;
            case '2':
              if (v12 == 110) {
                char v24 = v16;
              }
              else {
                char v24 = 1;
              }
              if ((v24 & 1) == 0) {
                return 1;
              }
              char v21 = 100;
              char v22 = 110;
              goto LABEL_47;
            case '1':
              if (v12 == 115) {
                char v20 = v18;
              }
              else {
                char v20 = 1;
              }
              if ((v20 & 1) == 0) {
                return 1;
              }
              char v21 = 116;
              char v22 = 115;
              goto LABEL_47;
          }
        }
        if (v12 == 116) {
          return 1;
        }
        char v21 = 104;
        char v22 = 116;
LABEL_47:
        strncpy(__dst, __src, v11);
        __dst[v11] = v22;
        __dst[v10] = v21;
        __dst[(__int16)(v11 + 2)] = 0;
        return 1;
      }
      return result;
    }
    return 0;
  }
  uint64_t result = 0;
  if (__src[v15] == 100)
  {
    char v16 = 0;
    goto LABEL_23;
  }
  return result;
}

uint64_t SLpar(const char *a1, unsigned __int16 *a2, __int16 *a3, _WORD *a4, uint64_t a5)
{
  *a2 = 0;
  __int16 v10 = strlen(a1);
  int v11 = (__int16)(v10 - 1);
  *a3 = v10 - 1;
  if (v11 >= 1)
  {
    int v12 = &a1[(unsigned __int16)v11];
    if (*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0x1000400)
    {
      do
      {
        --*a3;
        if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0xA00000) == 0) {
          *a4 |= 0x100u;
        }
        if ((__int16)v11 <= 1) {
          break;
        }
        LOWORD(v11) = v11 - 1;
        int v12 = &a1[(unsigned __int16)v11];
      }
      while ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0x1000400) != 0);
      uint64_t v14 = *a3;
      int v15 = a1[v14 + 1];
      switch(v15)
      {
        case '.':
          __int16 v16 = 512;
          goto LABEL_14;
        case '-':
          if (a1[v14 + 2] != 45)
          {
            __int16 v16 = 1024;
            goto LABEL_14;
          }
          break;
        case '\'':
          __int16 v16 = 4096;
LABEL_14:
          *a4 |= v16;
          break;
      }
    }
    LOWORD(v11) = *a3;
  }
  if (!(_WORD)v11) {
    return 8;
  }
  int v17 = (__int16)*a2;
  if (v17 <= (__int16)v11)
  {
    uint64_t v18 = (__int16)*a2;
    int v19 = &a1[v18];
    int v20 = *(_DWORD *)(a5 + 4 * a1[v18]) & 0x1000400;
    unsigned int v21 = *a2;
    if (v20)
    {
      while (1)
      {
        *a2 = v21 + 1;
        uint64_t v22 = *(unsigned __int8 *)v19;
        if ((*(_DWORD *)(a5 + 4 * v22) & 0x400000) == 0
          && (v22 != 46 || *a3 <= (__int16)v17 || a1[v18 + 1] - 48 >= 0xA))
        {
          *a4 |= 0x100u;
        }
        int v17 = (__int16)(v17 + 1);
        if (v17 > *a3) {
          break;
        }
        uint64_t v18 = v17;
        int v19 = &a1[v17];
        unsigned int v21 = *a2;
        if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v19) & 0x1000400) == 0) {
          goto LABEL_26;
        }
      }
      unsigned int v21 = *a2;
    }
    else
    {
LABEL_26:
      if (!v20) {
        return 8 * (*a2 == (unsigned __int16)*a3);
      }
    }
    if ((__int16)v21 >= 1)
    {
      if (a1[v21 - 1] == 39)
      {
        __int16 v24 = 0x2000;
      }
      else
      {
        if (a1[v21 - 1] != 45 || v21 >= 2 && a1[v21 - 2] == 45) {
          return 8 * (*a2 == (unsigned __int16)*a3);
        }
        __int16 v24 = 2048;
      }
      *a4 |= v24;
    }
  }
  return 8 * (*a2 == (unsigned __int16)*a3);
}

uint64_t SLrecap(unsigned __int8 *a1, int a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if (a1 && *a1)
  {
    if (a5 <= a3 || a5 == 3) {
      unsigned int v7 = a3;
    }
    else {
      unsigned int v7 = a5;
    }
    if (v7 >= 3)
    {
      if (a2 >= 1)
      {
        unint64_t v10 = 0;
        do
        {
          if (v10 <= 0x3F && (*(_DWORD *)(a4 + 4 * ((unsigned __int16)v10 >> 5)) & (1 << ~(_BYTE)v10)) != 0)
          {
            uint64_t v11 = a1[v10];
            if ((*(_DWORD *)(a6 + 4 * v11) & 0x20000000) != 0) {
              LOBYTE(v11) = v11 - 32;
            }
            a1[v10] = v11;
          }
          ++v10;
        }
        while ((unsigned __int16)a2 != v10);
      }
    }
    else if (v7 == 1)
    {
      if (a2 >= 1)
      {
        uint64_t v13 = (unsigned __int16)a2;
        while (1)
        {
          uint64_t v14 = *a1;
          int v15 = *(_DWORD *)(a6 + 4 * v14);
          if ((v15 & 0x60000040) != 0) {
            break;
          }
          ++a1;
          if (!--v13) {
            return 0;
          }
        }
        unsigned __int8 v16 = v14 - 32;
        if ((v15 & 0x20000000) == 0) {
          unsigned __int8 v16 = *a1;
        }
        *a1 = v16;
      }
    }
    else if (v7 == 2 && a2 >= 1)
    {
      uint64_t v8 = (unsigned __int16)a2;
      do
      {
        uint64_t v9 = *a1;
        if ((*(_DWORD *)(a6 + 4 * v9) & 0x20000000) != 0) {
          LOBYTE(v9) = v9 - 32;
        }
        *a1++ = v9;
        --v8;
      }
      while (v8);
    }
  }
  return 0;
}

uint64_t SLwldcmp(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  int v7 = *a3;
  if (v7 != 42 && a4 >= 1)
  {
    uint64_t v11 = 0;
    while (v7 == 63 || v7 == *(unsigned __int8 *)(a1 + v11))
    {
      unint64_t v9 = v11 + 1;
      int v7 = a3[v11 + 1];
      BOOL v12 = v7 == 42 || v9 >= (unsigned __int16)a4;
      ++v11;
      if (v12)
      {
        unsigned __int16 v10 = v9;
        goto LABEL_15;
      }
    }
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int16 v10 = 0;
LABEL_15:
  if (v10 == (unsigned __int16)a4 && v10 == (unsigned __int16)a2) {
    return 1;
  }
  uint64_t v14 = a4 - 1;
  int v15 = a3[v14];
  int v16 = 1;
  if (v15 == 42 || a4 < 1)
  {
LABEL_29:
    int v20 = (__int16)v10;
    int v21 = v16 + (__int16)v10;
    if (v21 <= a4 + 1 && v21 <= a2 + 1)
    {
      if (v21 == a4) {
        return 1;
      }
      if (a2 - v16 >= (__int16)v10)
      {
        int v28 = a2 - v16;
        int v29 = a3[(__int16)v10 + 1];
        uint64_t v27 = (int)v14 - 1;
        uint64_t v31 = (uint64_t)&a3[v9 + 1];
        unsigned int v30 = (__int16)(v14 + ~v10);
        while (1)
        {
          if (*(unsigned __int8 *)(a1 + (__int16)v10) == v29)
          {
            int v22 = a2 - v20;
            if (a2 - v20 >= v16) {
              break;
            }
          }
LABEL_41:
          uint64_t result = 0;
          int v20 = (__int16)++v10;
          if (v28 < (__int16)v10) {
            return result;
          }
        }
        int v23 = a3[v27];
        int v24 = v16;
        int v25 = v16;
        while (1)
        {
          uint64_t v26 = a2 - (uint64_t)v24;
          if (*(unsigned __int8 *)(a1 + v26) == v23)
          {
            if (SLwldcmp(a1 + (__int16)v10, (__int16)(v26 - v10 + 1), v31, v30)) {
              return 1;
            }
          }
          int v24 = (__int16)++v25;
          if (v22 < (__int16)v25) {
            goto LABEL_41;
          }
        }
      }
    }
  }
  else
  {
    while (v15 == 63 || a2 >= (__int16)v16 && v15 == *(unsigned __int8 *)(a1 - v16 + a2))
    {
      __int16 v18 = v16 + 1;
      int v16 = (__int16)(v16 + 1);
      uint64_t v14 = a4 - (uint64_t)v18;
      int v15 = a3[v14];
      if (v15 == 42 || v16 > a4) {
        goto LABEL_29;
      }
    }
  }
  return 0;
}

BOOL SLWildCmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 v4 = *a1;
  if (*a1)
  {
    BOOL v5 = a1;
    while (1)
    {
      unsigned __int8 v6 = *a2;
      if (!*a2) {
        break;
      }
      if (a3 == 2)
      {
        if ((v6 + 127) < 0x1Fu)
        {
          if (*a2 != 129) {
            goto LABEL_15;
          }
          int v9 = a2[1];
          uint64_t v7 = 2;
          if (v9 != 72)
          {
            if (v9 == 150) {
              goto LABEL_39;
            }
LABEL_15:
            if (*a2 != v4) {
              return 0;
            }
            if ((v4 + 127) < 0x1Fu)
            {
              if (a2[1] != v5[1]) {
                return 0;
              }
              LOBYTE(v10) = v4 & 0xF0;
              goto LABEL_22;
            }
            if ((v4 & 0xF0) == 0xE0)
            {
              if (a2[1] != v5[1]) {
                return 0;
              }
              LOBYTE(v10) = -32;
LABEL_22:
              uint64_t v7 = 2;
            }
            else
            {
              LOBYTE(v10) = v4 & 0xF0;
              uint64_t v7 = 1;
            }
            unsigned int v11 = (v4 + 127);
            int v10 = v10;
LABEL_28:
            if (v10 != 224 && v11 >= 0x1F) {
              uint64_t v8 = 1;
            }
            else {
              uint64_t v8 = 2;
            }
            goto LABEL_34;
          }
LABEL_25:
          unsigned int v11 = (v4 + 127);
          int v10 = v4 & 0xF0;
          goto LABEL_28;
        }
        if ((v6 & 0xF0) == 0xE0) {
          goto LABEL_15;
        }
        if (*a2 == 63)
        {
          uint64_t v7 = 1;
          goto LABEL_25;
        }
        if (*a2 != 42 || (v6 & 0xF0) == 0xE0) {
          goto LABEL_15;
        }
        uint64_t v7 = 1;
LABEL_39:
        uint64_t v13 = &a2[v7];
        int v14 = a2[v7];
        if (a2[v7])
        {
          BOOL v17 = (v14 + 96) < 0xE1u && (v14 & 0xF0) != 224 || a3 != 2;
          while (1)
          {
            if (v14 == v4)
            {
              if (!v17 && v5[1] != v13[1])
              {
LABEL_55:
                if ((v4 & 0xF0) != 0xE0 && (v4 + 127) >= 0x1Fu) {
                  uint64_t v18 = 1;
                }
                else {
                  uint64_t v18 = 2;
                }
                goto LABEL_61;
              }
              if (SLWildCmp(v5, v13, a3)) {
                return 1;
              }
            }
            if (a3 == 2) {
              goto LABEL_55;
            }
            uint64_t v18 = 1;
LABEL_61:
            v5 += v18;
            unsigned __int8 v4 = *v5;
            if (!*v5) {
              return 0;
            }
          }
        }
        return 1;
      }
      if (*a2 != 63)
      {
        uint64_t v7 = 1;
        if (*a2 == 42) {
          goto LABEL_39;
        }
        if (*a2 != v4) {
          return 0;
        }
      }
      uint64_t v8 = 1;
      uint64_t v7 = 1;
LABEL_34:
      a2 += v7;
      v5 += v8;
      unsigned __int8 v4 = *v5;
      if (!*v5) {
        goto LABEL_63;
      }
    }
    char v20 = 0;
  }
  else
  {
LABEL_63:
    unsigned __int8 v6 = *a2;
    char v20 = 1;
  }
  if (v6)
  {
    while (a3 == 2)
    {
      if ((v6 + 127) >= 0x1Fu)
      {
        if (v6 != 42 || (v6 & 0xF0) == 0xE0) {
          return 0;
        }
        goto LABEL_75;
      }
      if (v6 != 129 || a2[1] != 150) {
        return 0;
      }
      uint64_t v21 = 2;
LABEL_76:
      a2 += v21;
      unsigned __int8 v6 = *a2;
      if (!*a2) {
        return (v20 & 1) != 0;
      }
    }
    if (v6 != 42) {
      return 0;
    }
LABEL_75:
    uint64_t v21 = 1;
    goto LABEL_76;
  }
  return (v20 & 1) != 0;
}

uint64_t SLwldfix(uint64_t a1, unsigned __int16 a2)
{
  while (1)
  {
    if ((__int16)a2 >= 1)
    {
      uint64_t v2 = 0;
      while (1)
      {
        if (*(unsigned char *)(a1 + v2) == 42)
        {
          int v3 = *(unsigned __int8 *)(a1 + v2 + 1);
          if (v3 == 42)
          {
            *(unsigned char *)(a1 + v2) = 1;
          }
          else
          {
            if (v3 != 63)
            {
              __int16 v4 = v2;
              goto LABEL_12;
            }
            *(unsigned char *)(a1 + v2) = 63;
            *(unsigned char *)(a1 + v2 + 1) = 42;
          }
        }
        if (a2 == ++v2) {
          return 1;
        }
      }
    }
    __int16 v4 = 0;
    uint64_t v2 = 0;
LABEL_12:
    if ((unsigned __int16)v4 == a2) {
      return 1;
    }
    LOWORD(v5) = a2 - 1;
    if ((__int16)(a2 - 1) > v4)
    {
      uint64_t v5 = (__int16)(a2 - 1);
      do
      {
        if (*(unsigned char *)(a1 + v5) == 42)
        {
          uint64_t v6 = (__int16)(a2 - 2);
          int v7 = *(unsigned __int8 *)(a1 + v6);
          if (v7 == 42)
          {
            *(unsigned char *)(a1 + v5) = 1;
          }
          else
          {
            if (v7 != 63) {
              goto LABEL_22;
            }
            *(unsigned char *)(a1 + v5) = 63;
            *(unsigned char *)(a1 + v6) = 42;
          }
        }
        a2 = v5--;
      }
      while (v5 > v4);
      LOWORD(v5) = v4;
    }
LABEL_22:
    if ((unsigned __int16)v4 == (unsigned __int16)v5) {
      return 1;
    }
    a1 += v2 + 1;
    a2 = v5 + ~v4;
  }
}

uint64_t SLwldpro(const char *a1, _WORD *a2, _WORD *a3, __int16 a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned __int16 v8 = strlen(a1);
  unsigned __int16 v9 = v8;
  *a3 = 0;
  *a2 = 0;
  unsigned int v10 = v8;
  if (v8)
  {
    uint64_t v11 = v8;
    BOOL v12 = a1;
    do
    {
      int v13 = *(unsigned __int8 *)v12++;
      __int16 v14 = a4;
      if (v13 != 42)
      {
        ++*a2;
        __int16 v14 = *a3 + 1;
      }
      *a3 = v14;
      --v11;
    }
    while (v11);
  }
  strncpy(__dst, a1, 0x7EuLL);
  __dst[126] = 0;
  unsigned __int16 v15 = strlen(__dst);
  SLwldfix((uint64_t)__dst, v15);
  unsigned __int16 v16 = 0;
  int v17 = 0;
  do
  {
    unsigned int v18 = __dst[v16];
    if (v18 >= 2)
    {
      uint64_t v19 = (unsigned __int16)v17++;
      a1[v19] = v18;
    }
    ++v16;
  }
  while (v18);
  if (v10 >= 0x7F)
  {
    char v20 = (char *)(a1 + 126);
    uint64_t v21 = v9 - 126;
    int v22 = v17;
    do
    {
      char v23 = *v20++;
      LOWORD(v17) = v22 + 1;
      a1[(unsigned __int16)v22++] = v23;
      --v21;
    }
    while (v21);
  }
  a1[(unsigned __int16)v17] = 0;
  return 1;
}

uint64_t SLWildPro(const char *a1, _WORD *a2, _WORD *a3, __int16 a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned __int16 v10 = strlen(a1);
  *a3 = 0;
  *a2 = 0;
  unsigned __int8 v11 = *a1;
  if (*a1)
  {
    BOOL v12 = (unsigned __int8 *)a1;
    do
    {
      if (a5 != 2)
      {
        if (v11 == 42)
        {
          *a3 = a4;
        }
        else
        {
          ++*a2;
          ++*a3;
        }
        uint64_t v16 = 1;
        goto LABEL_30;
      }
      if ((v11 + 127) >= 0x1Fu)
      {
        if ((v11 & 0xF0) == 0xE0 || (v14 = v11, __int16 v13 = a4, v14 != 42))
        {
LABEL_12:
          ++*a2;
          int v15 = *v12;
          if ((v15 + 127) >= 0x1Fu)
          {
            if ((v15 & 0xF0) == 0xE0 || v15 != 63) {
              goto LABEL_19;
            }
          }
          else
          {
            if (v15 == 129) {
              goto LABEL_22;
            }
LABEL_19:
            if ((v15 + 127) >= 0x1Fu && (v15 & 0xF0) != 0xE0)
            {
              __int16 v17 = 1;
LABEL_23:
              __int16 v13 = *a3 + v17;
              goto LABEL_24;
            }
          }
LABEL_22:
          __int16 v17 = 2;
          goto LABEL_23;
        }
      }
      else
      {
        if (v11 != 129) {
          goto LABEL_12;
        }
        __int16 v13 = a4;
        if (v12[1] != 150) {
          goto LABEL_12;
        }
      }
LABEL_24:
      *a3 = v13;
      if ((*v12 & 0xF0) != 0xE0 && (*v12 + 127) >= 0x1Fu) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = 2;
      }
LABEL_30:
      v12 += v16;
      unsigned __int8 v11 = *v12;
    }
    while (*v12);
  }
  strncpy(__dst, a1, 0x7EuLL);
  __dst[126] = 0;
  unsigned __int8 v19 = __dst[0];
  if (__dst[0])
  {
    char v20 = __dst;
    do
    {
      int v21 = v20[1];
      if (!v20[1]) {
        break;
      }
      if (a5 == 2)
      {
        if ((v19 + 127) >= 0x1Fu)
        {
          if ((v19 & 0xF0) == 0xE0 || v19 != 42)
          {
LABEL_65:
            char v25 = v19;
            goto LABEL_66;
          }
          int v22 = v20[1];
          uint64_t v23 = 1;
        }
        else
        {
          if (v19 != 129 || v21 != 150) {
            goto LABEL_65;
          }
          int v22 = v20[2];
          uint64_t v23 = 2;
        }
        if ((v22 + 127) >= 0x1Fu)
        {
          if ((v22 & 0xF0) != 0xE0 && v22 == 63) {
            goto LABEL_56;
          }
          if ((v22 & 0xF0) == 0xE0 || v22 != 42) {
            goto LABEL_65;
          }
          if (v19 > 0x80u) {
            goto LABEL_64;
          }
        }
        else
        {
          if (v22 != 129) {
            goto LABEL_65;
          }
          int v24 = v20[v23 + 1];
          if (v24 == 72)
          {
LABEL_56:
            if (v19 > 0x80u)
            {
              char v25 = v20[2];
              *char v20 = v25;
              if ((v25 + 127) < 0x1Fu || (v25 & 0xF0) == 0xE0) {
                v20[1] = v20[3];
              }
              v20[2] = v19;
              v20[3] = v21;
              goto LABEL_66;
            }
            if ((v21 + 127) < 0x1Fu || (v21 & 0xF0) == 0xE0)
            {
              *char v20 = v21;
              v20[1] = v19;
              char v25 = v21;
              goto LABEL_66;
            }
LABEL_42:
            *char v20 = v21;
            v20[1] = v19;
            goto LABEL_52;
          }
          if (v24 != 150) {
            goto LABEL_65;
          }
          if (v19 >= 0x81u)
          {
LABEL_64:
            *(_WORD *)char v20 = 257;
            char v25 = 1;
LABEL_66:
            if ((v25 & 0xF0) != 0xE0 && (v25 + 127) >= 0x1Fu) {
              uint64_t v26 = 1;
            }
            else {
              uint64_t v26 = 2;
            }
            goto LABEL_72;
          }
        }
      }
      else
      {
        if (v19 != 42) {
          goto LABEL_53;
        }
        if (v21 != 42)
        {
          if (v21 != 63) {
            goto LABEL_53;
          }
          goto LABEL_42;
        }
      }
      LOBYTE(v21) = 1;
      *char v20 = 1;
LABEL_52:
      char v25 = v21;
      if (a5 == 2) {
        goto LABEL_66;
      }
LABEL_53:
      uint64_t v26 = 1;
LABEL_72:
      v20 += v26;
      unsigned __int8 v19 = *v20;
    }
    while (*v20);
  }
  unsigned __int16 v28 = 0;
  int v29 = 0;
  do
  {
    unsigned int v30 = __dst[v28];
    if (v30 >= 2)
    {
      uint64_t v31 = (unsigned __int16)v29++;
      a1[v31] = v30;
    }
    ++v28;
  }
  while (v30);
  if (v10 >= 0x7FuLL)
  {
    v32 = (char *)(a1 + 126);
    uint64_t v33 = v10 - 126;
    int v34 = v29;
    do
    {
      char v35 = *v32++;
      LOWORD(v29) = v34 + 1;
      a1[(unsigned __int16)v34++] = v35;
      --v33;
    }
    while (v33);
  }
  a1[(unsigned __int16)v29] = 0;
  return 1;
}

uint64_t SLparcmp(uint64_t a1, unsigned char *a2, _WORD *a3, int a4, uint64_t a5)
{
  unint64_t v5 = 0;
  *a3 = 0;
  *a2 = 0;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(a1 + v5);
    if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + v5)) & 0x400) == 0 || !a4 && (v6 == 42 || v6 == 63)) {
      break;
    }
    ++v5;
    if (!v6) {
      return 0;
    }
  }
  unsigned __int16 v8 = (unsigned __int8 *)(a1 + v5);
  if (!v5) {
    goto LABEL_21;
  }
  int v9 = *(v8 - 1);
  if (v9 == 39)
  {
    __int16 v10 = 0x2000;
    if (v5 != 1)
    {
      __int16 v10 = *(unsigned char *)(a1 + v5 - 2) == 45 ? 2048 : 0x2000;
      if (*(unsigned char *)(a1 + v5 - 2) == 45) {
        --v8;
      }
    }
  }
  else
  {
    if (v9 != 45 || v5 >= 2 && *(unsigned char *)(a1 + v5 - 2) == 45) {
      goto LABEL_21;
    }
    __int16 v10 = 2048;
  }
  *a3 |= v10;
LABEL_21:
  for (__int16 i = 0; ; ++i)
  {
    int v12 = *v8;
    if (v12 != 10 && v12 != 32) {
      break;
    }
    a2[i] = 32;
    do
    {
      int v14 = *++v8;
      int v13 = v14;
    }
    while (v14 == 32 || v13 == 10);
LABEL_34:
    ;
  }
  if (*v8)
  {
    a2[i] = v12;
    if (*v8 == 45 && v8[1] == 10) {
      ++v8;
    }
    ++v8;
    goto LABEL_34;
  }
  uint64_t v16 = &a2[i];
  *uint64_t v16 = 0;
  uint64_t v17 = *(v16 - 1);
  if ((*(_DWORD *)(a5 + 4 * v17) & 0x400) == 0) {
    goto LABEL_49;
  }
  do
  {
    if (!a4 && (v17 == 42 || v17 == 63)) {
      break;
    }
    uint64_t v16 = &a2[--i];
    uint64_t v17 = *(v16 - 1);
  }
  while ((*(_DWORD *)(a5 + 4 * v17) & 0x400) != 0);
  int v18 = *v16;
  if (v18 == 39)
  {
    __int16 v19 = 4096;
LABEL_48:
    *a3 |= v19;
    goto LABEL_49;
  }
  if (v18 == 45)
  {
    if (v16[1] == 45) {
      goto LABEL_49;
    }
    __int16 v19 = 1024;
    goto LABEL_48;
  }
  if (v18 == 46 && v16[1] != 46)
  {
    __int16 v19 = 512;
    goto LABEL_48;
  }
LABEL_49:
  uint64_t result = i;
  *uint64_t v16 = 0;
  return result;
}

uint64_t SLtokenz(unsigned __int8 **a1, unsigned char *a2, __int16 *a3, int a4, uint64_t a5)
{
  LOWORD(v5) = 0;
  int v6 = *a1;
  *a2 = 0;
  if ((*(_DWORD *)(a5 + 4 * *v6) & 0x400) != 0) {
    return (__int16)v5;
  }
  *a3 = 0;
  int v7 = *(v6 - 1);
  if (v7 == 39)
  {
    __int16 v8 = 0x2000;
  }
  else
  {
    if (v7 != 45 || *(v6 - 2) == 45) {
      goto LABEL_8;
    }
    __int16 v8 = 2048;
  }
  *a3 = v8;
LABEL_8:
  int v5 = 0;
  int v9 = 0;
  unsigned int v10 = *v6;
  int v11 = *(_DWORD *)(a5 + 4 * *v6);
  __int16 v12 = 1;
  do
  {
    for (i = v6; (v11 & 0x400) == 0; int v11 = *(_DWORD *)(a5 + 4 * v14))
    {
      a2[(__int16)v5] = v10;
      if ((v11 & 0x60000040) != 0) {
        __int16 v12 = 0;
      }
      unsigned int v14 = *++i;
      unsigned int v10 = v14;
      ++v5;
    }
    int v6 = i + 1;
    unsigned int v15 = i[1];
    if (v10 == 45 && v15 == 10)
    {
      if ((*(_DWORD *)(a5 + 4 * i[2]) & 0x400) == 0)
      {
        *a3 |= ++v9;
        __int16 v16 = v5++;
        a2[v16] = *i;
        int v6 = i + 2;
        goto LABEL_44;
      }
      unsigned int v15 = 10;
    }
    if ((*(_DWORD *)(a5 + 4 * v15) & 0x400) == 0)
    {
      if (v10 <= 0x2E && ((1 << v10) & 0x608000000000) != 0)
      {
        if (v10 == 45)
        {
          *a3 |= 0x8000u;
          ++v9;
          LOBYTE(v10) = *i;
        }
LABEL_33:
        __int16 v18 = v5++;
        a2[v18] = v10;
        goto LABEL_44;
      }
      if (a4 == 7 && v10 == 58) {
        goto LABEL_33;
      }
      if (v10 == 47)
      {
        __int16 v19 = v5++;
        a2[v19] = 47;
        *a3 |= 0x4000u;
        goto LABEL_44;
      }
LABEL_36:
      if (v10 == 44)
      {
        if (v12)
        {
          int v20 = 1;
          do
          {
            __int16 v21 = v20;
            int v22 = *(_DWORD *)(a5 + 4 * i[(__int16)v20++]);
          }
          while ((v22 & 0x8000400) == 0x8000000);
          if (v21 >= 2 && (v22 & 0x400) != 0)
          {
            __int16 v23 = v5++;
            a2[v23] = 44;
            goto LABEL_44;
          }
        }
      }
LABEL_43:
      int v6 = i;
      goto LABEL_44;
    }
    if (v10 == 47) {
      goto LABEL_43;
    }
    if (v10 != 46) {
      goto LABEL_36;
    }
    if (v15 != 45 && v15 != 39 || (*(_DWORD *)(a5 + 4 * i[2]) & 0x400) != 0) {
      goto LABEL_43;
    }
    if (v15 == 45) {
      ++v9;
    }
    __int16 v17 = v5 + 1;
    a2[(__int16)v5] = 46;
    v5 += 2;
    a2[v17] = *v6;
    int v6 = i + 2;
LABEL_44:
    unsigned int v10 = *v6;
    int v11 = *(_DWORD *)(a5 + 4 * *v6);
  }
  while ((v11 & 0x400) == 0);
  if (v10 == 39)
  {
    __int16 v24 = 4096;
    goto LABEL_53;
  }
  if (v10 == 45)
  {
    if (v6[1] == 45) {
      goto LABEL_54;
    }
    __int16 v24 = 1024;
LABEL_53:
    *a3 |= v24;
    goto LABEL_54;
  }
  if (v10 == 46 && v6[1] != 46)
  {
    __int16 v24 = 512;
    goto LABEL_53;
  }
LABEL_54:
  a2[(__int16)v5] = 0;
  *a1 = v6;
  if (v12) {
    int v5 = -v5;
  }
  return (__int16)v5;
}

uint64_t SFaccent(unsigned __int8 *a1, int a2, uint64_t a3, __int16 *a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  BOOL v6 = *(unsigned char *)(a3 + 55) == 8 && (a4[1745] & 0x40) != 0 && *a4 == 3;
  __int16 v106 = 0;
  uint64_t v7 = *(void *)(a3 + 56);
  __int16 v8 = *(unsigned __int8 **)(*((void *)a4 + 4) + 24);
  uint64_t v9 = *(unsigned __int8 *)(a3 + 136);
  a4[1066] = 0;
  if (a2 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = (unsigned __int16)a2;
    uint64_t v11 = (unsigned __int16)a2;
    __int16 v12 = v8;
    do
    {
      unsigned int v14 = *a1++;
      uint64_t v13 = v14;
      int v15 = *(_DWORD *)(v7 + 4 * v14);
      if ((v15 & 0x4064000) != 0 && (!v6 || (*(void *)&v15 & 0x40000) == 0))
      {
        if (*(unsigned char *)(a3 + 55) == 15)
        {
          if ((_BYTE)v13 == 1)
          {
            LOBYTE(v13) = 1;
          }
          else if ((v15 & 0x4020000) != 0)
          {
            LOBYTE(v13) = v13 - 1;
          }
        }
        else if ((_BYTE)v13 != 0xE0 && Lat_1_acc_0[v13 - 224])
        {
          LOBYTE(v13) = Lat_1_acc_0[v13 - 224];
        }
      }
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  __int16 v16 = 0;
  v8[v10] = 0;
  memset(v108, 0, 224);
  memset(v107, 0, sizeof(v107));
  *((unsigned char *)v107 + v8[1]) = 1;
  memset(&v108[14], 0, 32);
  *((unsigned char *)v108 + *v8) = 1;
  if (!*(_WORD *)(a3 + 104) || a2 < 1) {
    return v16;
  }
  BOOL v97 = v6;
  uint64_t v96 = v9;
  v98 = v8;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  uint64_t v19 = (unsigned __int16)a2;
  LOWORD(v20) = a4[1085];
  do
  {
    __int16 v21 = 0;
    int v22 = &v98[v17];
    do
    {
      if ((int)SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)((v21 + (__int16)v20) >> 1)), v22, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)((v21 + (__int16)v20) >> 1))) < 0)__int16 v21 = (v21 + (__int16)v20) >> 1; {
      else
      }
        LOWORD(v20) = (v21 + (__int16)v20) >> 1;
    }
    while ((__int16)v20 - v21 > 1);
    do
    {
      uint64_t v23 = (__int16)v20;
      if (*(unsigned char *)(*(void *)(a3 + 176) + (__int16)v20) == 1
        && *(unsigned char *)(*(void *)(a3 + 168) + (__int16)v20) == 1
        && (uint64_t v24 = **(unsigned __int8 **)(*(void *)(a3 + 160) + 8 * (__int16)v20), v24 == *v22)
        && (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) & 0x4064000) != (unint64_t)(*(_DWORD *)(v7 + 4 * v24) & 0x4064000)
        && (*(_DWORD *)&v97 & (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) >> 18) & 1) == 0)
      {
        char v25 = a4 + 1086;
        LOBYTE(v25[v18]) = a2 - v17;
        __int16 v26 = v18 * 2 + 1;
        ++v18;
        *((unsigned char *)v25 + v26) = v20;
        if ((_WORD)v17)
        {
          if ((unsigned __int16)v17 != 1) {
            goto LABEL_35;
          }
          uint64_t v27 = v107;
        }
        else
        {
          uint64_t v27 = v108;
        }
        *((unsigned char *)v27 + **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) = 1;
      }
      else
      {
        int v20 = a4[1085];
        if ((int)v23 >= v20 || **(unsigned __int8 **)(*(void *)(a3 + 160) + 8 * v23) > *v22) {
          goto LABEL_42;
        }
      }
LABEL_35:
      int v20 = (__int16)(v23 + 1);
    }
    while (v20 < a4[1085]);
    LOWORD(v20) = a4[1085];
LABEL_42:
    ++v17;
  }
  while (v17 != v19);
  if (v18 * 2)
  {
    unsigned __int16 v28 = a4 + 1086;
    LOBYTE(v28[v18]) = -1;
    *((unsigned char *)v28 + (__int16)(v18 * 2 + 1)) = -1;
    char v105 = 0;
    uint64_t v29 = *(void *)(a3 + 1184);
    uint64_t v30 = (unsigned __int16)a4[1068];
    uint64_t v31 = (unsigned __int16)a4[1067];
    v32 = (unsigned __int8 *)(v31 + v30 + v29);
    int v33 = *v32;
    int v34 = (unsigned __int8 *)(v29 + v30);
    int v35 = *v34;
    int v36 = v32[1];
    int v37 = v34[1];
    uint64_t v38 = (unsigned __int16)a4[1069];
    uint64_t v39 = *(unsigned __int8 *)(v29 + v38);
    unsigned int v40 = *(unsigned __int8 *)(v29 + v38 + v31);
    char v101 = *(unsigned char *)(v29 + v38);
    char v102 = v40;
    if (v31 >= 2)
    {
      int v41 = 0;
      int v42 = 0;
      int v43 = (v36 | (v37 << 8)) - 1;
      int v44 = (v33 | (v35 << 8)) - 1;
      LODWORD(v45) = 1;
      do
      {
        uint64_t v46 = *(void *)(a3 + 1184);
        if ((unsigned __int16)v44 >= (unsigned __int16)v43)
        {
          uint64_t v47 = (unsigned __int16)a4[1069];
          uint64_t v48 = v47 + v45;
          uint64_t v49 = (v45 + v31);
          uint64_t v45 = (v45 + 1);
          uint64_t v39 = *(unsigned __int8 *)(v46 + v48);
          unsigned int v40 = *(unsigned __int8 *)(v46 + v49 + v47);
          char v101 = v39;
          uint64_t v50 = (unsigned __int16)a4[1068];
          int v51 = *(unsigned __int8 *)(v46 + (v31 + v45) + v50);
          LODWORD(v50) = *(unsigned __int8 *)(v46 + v50 + v45);
          char v102 = v40;
          int v52 = v51 | (v50 << 8);
          int v44 = v43;
          int v43 = v52 - 1;
        }
        int v53 = v44 + 1;
        int v54 = *(unsigned __int8 *)(v46 + (unsigned __int16)(v44 + 1) - 1);
        if (v54 == 255)
        {
          v44 += 3;
          int v56 = (unsigned __int16)v44 - 2;
          uint64_t v57 = (unsigned __int16)v44 - 1;
        }
        else
        {
          int v55 = (unsigned __int16)a4[1070] + v54;
          int v56 = v55 - 1;
          uint64_t v57 = (v55 + 255);
          int v44 = v53;
        }
        int v58 = *(unsigned __int8 *)(v46 + v57);
        int v59 = *(unsigned __int8 *)(v46 + v56);
        if (v59) {
          int v41 = v59;
        }
        char v103 = v41;
        if (v58) {
          int v42 = v58;
        }
        char v104 = v42;
        BOOL v62 = v42 == 32 && v41 == 32 && v40 != 32;
        if (*((unsigned char *)v108 + v39) && *((unsigned char *)v107 + v40))
        {
          if (v62) {
            goto LABEL_82;
          }
          int v63 = *((unsigned __int8 *)a4 + 2172);
          if (v63 == 255) {
            goto LABEL_80;
          }
          __int16 v64 = 0;
          __int16 v65 = 0;
          do
          {
            unsigned __int16 v66 = a2 - v63;
            if ((v66 & 0xFFFE) == 2
              && *(&v101 + v66) == **(unsigned char **)(*(void *)(a3 + 152)
                                              + 8 * *((unsigned __int8 *)a4 + ((v65 * 2) | 1) + 2172)))
            {
              ++v64;
            }
            int v63 = LOBYTE(a4[++v65 + 1086]);
          }
          while (v63 != 255);
          if (!v64)
          {
LABEL_80:
            if (v42 != 32 && v42 != v98[3]) {
              continue;
            }
          }
          else if (v42 == 32 || v64 != 1 || v42 == v98[3])
          {
LABEL_82:
            if (a4[1066] > 499) {
              break;
            }
            for (uint64_t i = 0; i != 4; ++i)
              *((unsigned char *)&a4[2 * a4[1066] + 64] + i) = *(&v101 + i);
            ++a4[1066];
            LODWORD(v31) = (unsigned __int16)a4[1067];
            continue;
          }
          if (v41 == v98[2]) {
            goto LABEL_82;
          }
        }
        else
        {
          int v44 = v43;
        }
      }
      while (v45 < v31);
    }
    int v68 = *a4;
    if (v68 <= 99)
    {
      *a4 = 101;
      a4[1746] |= 0x200u;
      uint64_t v69 = *(void *)(a3 + 128);
      int v70 = 255;
      do
      {
        *((unsigned char *)a4 + 2156) = ++v70;
        v71 = (unsigned __int8 *)(v69 + (char)v70);
        __int16 v72 = *v71;
        v73 = &v71[v96];
        a4[1076] = v72;
        int v74 = *v73;
        a4[1077] = v74;
        v75 = &v73[v96];
        __int16 v76 = *v75;
        v77 = &v75[v96];
        a4[1072] = v76;
        a4[1073] = *v77;
        v78 = &v77[v96];
        __int16 v79 = *v78;
        v80 = &v78[v96];
        a4[1074] = v79;
        a4[1075] = *v80;
        v81 = &v80[v96];
        __int16 v82 = *v81;
        v83 = &v81[v96];
        a4[1071] = v82;
        a4[1081] = *v83;
        v84 = &v83[v96];
        __int16 v85 = *v84;
        v86 = &v84[v96];
        a4[1082] = v85;
        a4[1083] = *v86;
        a4[1084] = v86[v96];
      }
      while (v74 != 4);
    }
    *((void *)a4 + 15) = a4 + 64;
    if (a4[1066] >= 1)
    {
      uint64_t v87 = 0;
      do
      {
        v88 = &a4[2 * v87];
        if ((int)SLstrncmp(*((unsigned char **)a4 + 15), (unsigned __int8 *)v88 + 128, 4) <= 0)
        {
          *((void *)a4 + 15) = v88 + 64;
          v100[0] = *((_DWORD *)v88 + 32);
          unsigned int v89 = *(unsigned __int8 *)(a3 + 54);
          if (v89 >= 5)
          {
            int v90 = 4;
            do
              *((unsigned char *)v100 + (__int16)v90++) = 0;
            while ((int)v89 > (__int16)v90);
          }
          int v91 = SFbisrch((uint64_t)v100, 0, v89 - 1, &v106, a3);
          unsigned int v92 = *(unsigned __int8 *)(a3 + 54);
          if (v92 >= 5)
          {
            int v93 = 4;
            do
              *((unsigned char *)v100 + (__int16)v93++) = -1;
            while ((int)v92 > (__int16)v93);
          }
          __int16 v94 = SFbisrch((uint64_t)v100, 0, v92 - 1, &v106, a3);
          v106 += v94 - v91;
          if (*((unsigned char *)a4 + 3202) == 1) {
            PDdecod2(v98, a2, v91, v106, a3, (unsigned __int16 *)a4);
          }
          else {
            SFdecode(v98, a2, v91, v106, a3, (unsigned __int16 *)a4);
          }
        }
        ++v87;
      }
      while (v87 < a4[1066]);
    }
    *a4 = v68;
    if (v68 == 3) {
      a4[1746] &= ~0x200u;
    }
    return a4[20];
  }
  else
  {
    return 0;
  }
}

uint64_t SFadd(char *a1, int a2, __int16 *a3, __int16 *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a3;
  if (v8 >= a5) {
    return 8;
  }
  __int16 v11 = *a4;
  if (a6 <= (__int16)(*a4 + a2)) {
    return 8;
  }
  if (v8 < 1)
  {
    uint64_t v19 = *a3;
LABEL_13:
    *a3 = v8 + 1;
    *(_WORD *)(a8 + 2 * v19) = v11;
    if (a2 >= 1)
    {
      uint64_t v21 = (unsigned __int16)a2;
      do
      {
        char v22 = *a1++;
        uint64_t v23 = *a4;
        *a4 = v23 + 1;
        *(unsigned char *)(a7 + v23) = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = *a4;
    *a4 = v24 + 1;
    *(unsigned char *)(a7 + v24) = 0;
    return 10;
  }
  else
  {
    uint64_t v16 = 0;
    while (1)
    {
      int v17 = (__int16)strlen((const char *)(a7 + *(__int16 *)(a8 + 2 * v16)));
      int v18 = v17 <= a2 ? a2 : v17;
      if (!SLstrncmp(a1, (unsigned __int8 *)(a7 + *(__int16 *)(a8 + 2 * v16)), v18)) {
        return 11;
      }
      ++v16;
      uint64_t v19 = *a3;
      if (v16 >= v19)
      {
        LOWORD(v8) = *a3;
        __int16 v11 = *a4;
        goto LABEL_13;
      }
    }
  }
}

uint64_t SFadd1(char *a1, int a2, uint64_t a3, int a4)
{
  LODWORD(v4) = *(__int16 *)(a3 + 40);
  if ((int)v4 >= *(__int16 *)(a3 + 42)
    || *(unsigned __int16 *)(a3 + 56) <= (unsigned __int16)(*(_WORD *)(a3 + 44) + a2))
  {
    return 8;
  }
  if (a4 == 2)
  {
    if ((int)v4 >= 1)
    {
      __int16 v12 = (char *)(*(void *)(a3 + 48) + *(__int16 *)(*(void *)(a3 + 64) + 2 * (unsigned __int16)(v4 - 1)));
      int v13 = (__int16)strlen(v12);
      if (v13 <= a2) {
        int v14 = a2;
      }
      else {
        int v14 = v13;
      }
      if (!SLstrncmp(a1, (unsigned __int8 *)v12, v14)) {
        return 11;
      }
      LOWORD(v4) = *(_WORD *)(a3 + 40);
    }
  }
  else if (a4 == 1 && (int)v4 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (__int16)strlen((const char *)(*(void *)(a3 + 48) + *(__int16 *)(*(void *)(a3 + 64) + 2 * v8)));
      int v10 = v9 <= a2 ? a2 : v9;
      if (!SLstrncmp(a1, (unsigned __int8 *)(*(void *)(a3 + 48) + *(__int16 *)(*(void *)(a3 + 64) + 2 * v8)), v10))return 11; {
      ++v8;
      }
      uint64_t v4 = *(__int16 *)(a3 + 40);
    }
    while (v8 < v4);
  }
  __int16 v15 = *(_WORD *)(a3 + 44);
  uint64_t v16 = *(void *)(a3 + 64);
  *(_WORD *)(a3 + 40) = v4 + 1;
  *(_WORD *)(v16 + 2 * (__int16)v4) = v15;
  int v17 = (unsigned char *)(*(void *)(a3 + 48) + *(__int16 *)(a3 + 44));
  if (a2 >= 1)
  {
    LOWORD(v18) = 0;
    do
    {
      char v19 = *a1++;
      *v17++ = v19;
      int v18 = (__int16)(v18 + 1);
    }
    while (v18 < a2);
  }
  *int v17 = 0;
  *(_WORD *)(a3 + 44) += a2 + 1;
  return 10;
}

uint64_t SFanachk(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  if (!a2) {
    return 1;
  }
  int v3 = (unsigned __int8 *)(a1 + a2 - 1);
  while (1)
  {
    unsigned int v4 = *v3--;
    unsigned __int8 v5 = *((unsigned char *)v7 + v4) + 1;
    *((unsigned char *)v7 + v4) = v5;
    if (*(unsigned __int8 *)(a3 + v4) < v5) {
      break;
    }
    if (!(_WORD)--a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t SFanagrm(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int16 *)(a4 + 68) < (unsigned __int16)a2) {
    return 8;
  }
  *(_OWORD *)(a3 + 3431) = 0u;
  *(_OWORD *)(a3 + 3447) = 0u;
  *(_OWORD *)(a3 + 3399) = 0u;
  *(_OWORD *)(a3 + 3415) = 0u;
  *(_OWORD *)(a3 + 3367) = 0u;
  *(_OWORD *)(a3 + 3383) = 0u;
  *(_OWORD *)(a3 + 3335) = 0u;
  *(_OWORD *)(a3 + 3351) = 0u;
  *(_OWORD *)(a3 + 3303) = 0u;
  *(_OWORD *)(a3 + 3319) = 0u;
  *(_OWORD *)(a3 + 3271) = 0u;
  *(_OWORD *)(a3 + 3287) = 0u;
  *(_OWORD *)(a3 + 3239) = 0u;
  *(_OWORD *)(a3 + 3255) = 0u;
  *(_OWORD *)(a3 + 3207) = 0u;
  *(_OWORD *)(a3 + 3223) = 0u;
  if (a2 < 1) {
    goto LABEL_11;
  }
  uint64_t v9 = 0;
  unsigned __int8 v10 = *a1;
  unsigned __int8 v11 = *a1;
  do
  {
    uint64_t v12 = a1[v9];
    if (v12 < v11) {
      unsigned __int8 v11 = a1[v9];
    }
    if (v12 > v10) {
      unsigned __int8 v10 = a1[v9];
    }
    ++*(unsigned char *)(a3 + v12 + 3207);
    ++v9;
  }
  while ((unsigned __int16)a2 != v9);
  if (a2 > 24)
  {
    __int16 v20 = 0;
    **(unsigned char **)(*(void *)(a3 + 32) + 16) = v11;
    unsigned int v13 = *(unsigned __int8 *)(a4 + 54);
    if (v13 >= 2)
    {
      int v14 = 1;
      do
      {
        *(unsigned char *)(*(void *)(*(void *)(a3 + 32) + 16) + (__int16)v14++) = 0;
        unsigned int v13 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v13 > (__int16)v14);
    }
    int v15 = SFbisrch(*(void *)(*(void *)(a3 + 32) + 16), 0, v13 - 1, &v20, a4);
    **(unsigned char **)(*(void *)(a3 + 32) + 16) = v10;
    unsigned int v16 = *(unsigned __int8 *)(a4 + 54);
    if (v16 >= 2)
    {
      int v17 = 1;
      do
      {
        *(unsigned char *)(*(void *)(*(void *)(a3 + 32) + 16) + (__int16)v17++) = -1;
        unsigned int v16 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v16 > (__int16)v17);
    }
    __int16 v18 = SFbisrch(*(void *)(*(void *)(a3 + 32) + 16), 0, v16 - 1, &v20, a4);
    v20 += v18 - v15;
    __int16 v19 = v20;
    *(_WORD *)(a3 + 40) = 0;
    *(_WORD *)(a3 + 44) = 0;
    if (*(unsigned char *)(a3 + 3202) == 1) {
      PDdecod2(a1, a2, v15, v19, a4, (unsigned __int16 *)a3);
    }
    else {
      SFdecode(a1, a2, v15, v19, a4, (unsigned __int16 *)a3);
    }
  }
  else
  {
LABEL_11:
    SFanaqua((uint64_t)a1, a2, (_WORD *)a3, a4);
  }
  if (*(_WORD *)(a3 + 40)) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t SFanaqua(uint64_t a1, int a2, _WORD *a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  memset(v53, 0, 256);
  if (a2 >= 1)
  {
    uint64_t v8 = (unsigned __int16)a2;
    uint64_t v9 = (unsigned __int8 *)a1;
    do
    {
      int v10 = *v9++;
      ++v53[v10];
      --v8;
    }
    while (v8);
  }
  a3[1066] = 0;
  char v51 = 0;
  uint64_t v11 = *(void *)(a4 + 1184);
  uint64_t v12 = (unsigned __int16)a3[1068];
  uint64_t v13 = (unsigned __int16)a3[1067];
  int v14 = (unsigned __int8 *)(v13 + v12 + v11);
  int v15 = *v14;
  uint64_t v16 = v11 + v12;
  int v17 = *(unsigned __int8 *)(v11 + v12);
  int v18 = v14[1];
  uint64_t v19 = (unsigned __int16)a3[1069];
  uint64_t v20 = *(unsigned __int8 *)(v11 + v19);
  int v21 = *(unsigned __int8 *)(v16 + 1);
  uint64_t v22 = *(unsigned __int8 *)(v11 + v19 + v13);
  char v47 = *(unsigned char *)(v11 + v19);
  char v48 = v22;
  if (v13)
  {
    uint64_t v23 = (v18 | (v21 << 8)) - 1;
    int v24 = (v15 | (v17 << 8)) - 1;
    int v25 = 32;
    unsigned __int16 v26 = 1;
    long long v27 = 0uLL;
    int v28 = 32;
    while (1)
    {
      int v29 = v24 + 1;
      uint64_t v30 = *(void *)(a4 + 1184);
      int v31 = *(unsigned __int8 *)(v30 + (unsigned __int16)(v24 + 1) - 1);
      if (v31 == 255)
      {
        int v29 = v24 + 3;
        int v33 = (unsigned __int16)(v24 + 3) - 2;
        uint64_t v34 = (unsigned __int16)v29 - 1;
      }
      else
      {
        int v32 = (unsigned __int16)a3[1070] + v31;
        int v33 = v32 - 1;
        uint64_t v34 = (v32 + 255);
      }
      if (!v53[v20] || !v53[v22]) {
        goto LABEL_39;
      }
      int v35 = *(unsigned __int8 *)(v30 + v34);
      int v36 = *(unsigned __int8 *)(v30 + v33);
      if (v36) {
        int v25 = v36;
      }
      char v49 = v25;
      if (v35) {
        int v28 = v35;
      }
      char v50 = v28;
      if ((v25 == 32 || v53[v25]) && (v28 == 32 || v53[v28]))
      {
        uint64_t v37 = 0;
        v52[14] = v27;
        v52[15] = v27;
        v52[12] = v27;
        v52[13] = v27;
        v52[10] = v27;
        v52[11] = v27;
        v52[8] = v27;
        v52[9] = v27;
        v52[6] = v27;
        v52[7] = v27;
        v52[4] = v27;
        v52[5] = v27;
        v52[2] = v27;
        v52[3] = v27;
        v52[0] = v27;
        v52[1] = v27;
        while (1)
        {
          uint64_t v38 = *(&v47 + v37);
          if (v38 == 32) {
            break;
          }
          ++*((unsigned char *)v52 + v38);
          if (++v37 == 4) {
            goto LABEL_28;
          }
        }
        if ((unsigned __int16)v37 == 4 || (unsigned __int16)v37 == (unsigned __int16)a2)
        {
LABEL_28:
          uint64_t v37 = 0;
          while (*((unsigned __int8 *)v52 + v37) <= v53[v37])
          {
            if (++v37 == 256) {
              goto LABEL_31;
            }
          }
          goto LABEL_26;
        }
        if ((unsigned __int16)v37 == 256) {
          goto LABEL_31;
        }
LABEL_26:
        if (*(&v47 + (__int16)v37) != 32) {
          goto LABEL_36;
        }
LABEL_31:
        if ((__int16)a3[1066] > 498)
        {
          uint64_t v43 = v22;
          uint64_t v44 = v20;
          int v45 = v28;
          int v46 = v25;
          icgetana(a1, a2, (uint64_t)a3, a4);
          uint64_t v22 = v43;
          uint64_t v20 = v44;
          int v28 = v45;
          int v25 = v46;
          long long v27 = 0uLL;
        }
        else
        {
          for (uint64_t i = 0; i != 4; ++i)
            *((unsigned char *)&a3[2 * (__int16)a3[1066] + 64] + i) = *(&v47 + i);
          ++a3[1066];
        }
      }
LABEL_36:
      LOWORD(v13) = a3[1067];
      if ((unsigned __int16)v29 >= (unsigned __int16)v23) {
        break;
      }
      uint64_t v40 = v23;
      LODWORD(v23) = v29;
LABEL_40:
      int v24 = v23;
      uint64_t v23 = v40;
      if (v26 > (unsigned __int16)v13) {
        goto LABEL_41;
      }
    }
    uint64_t v30 = *(void *)(a4 + 1184);
LABEL_39:
    unint64_t v41 = (unsigned __int16)a3[1069] + (unint64_t)++v26 - 1;
    uint64_t v20 = *(unsigned __int8 *)(v30 + v41);
    uint64_t v22 = *(unsigned __int8 *)(v30 + (int)(v41 + (unsigned __int16)v13));
    char v47 = *(unsigned char *)(v30 + v41);
    char v48 = v22;
    uint64_t v40 = (*(unsigned __int8 *)(v30
                              + (unsigned __int16)v13
                              + v26
                              + (unint64_t)(unsigned __int16)a3[1068]) | (*(unsigned __int8 *)(v30 + (unsigned __int16)a3[1068] + (unint64_t)v26) << 8))
        - 1;
    goto LABEL_40;
  }
LABEL_41:
  icgetana(a1, a2, (uint64_t)a3, a4);
  return 10;
}

uint64_t icgetana(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132)) = 0;
  int v5 = *(__int16 *)(a3 + 2132);
  *(void *)(a3 + 120) = a3 + 128;
  if (v5 >= 1)
  {
    uint64_t v8 = (unsigned __int8 *)result;
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int16)v5;
    __int16 v18 = 0;
    do
    {
      uint64_t v11 = a3 + 4 * v9;
      uint64_t result = SLstrncmp(*(unsigned char **)(a3 + 120), (unsigned __int8 *)(v11 + 128), 4);
      if ((int)result <= 0)
      {
        *(void *)(a3 + 120) = v11 + 128;
        v19[0] = *(_DWORD *)(v11 + 128);
        unsigned int v12 = *(unsigned __int8 *)(a4 + 54);
        if (v12 >= 5)
        {
          int v13 = 4;
          do
            *((unsigned char *)v19 + (__int16)v13++) = 0;
          while ((int)v12 > (__int16)v13);
        }
        int v14 = SFbisrch((uint64_t)v19, 0, v12 - 1, &v18, a4);
        unsigned int v15 = *(unsigned __int8 *)(a4 + 54);
        if (v15 >= 5)
        {
          int v16 = 4;
          do
            *((unsigned char *)v19 + (__int16)v16++) = -1;
          while ((int)v15 > (__int16)v16);
        }
        __int16 v17 = SFbisrch((uint64_t)v19, 0, v15 - 1, &v18, a4);
        v18 += v17 - v14;
        if (*(unsigned char *)(a3 + 3202) == 1) {
          uint64_t result = PDdecod2(v8, a2, v14, v18, a4, (unsigned __int16 *)a3);
        }
        else {
          uint64_t result = SFdecode(v8, a2, v14, v18, a4, (unsigned __int16 *)a3);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *(_WORD *)(a3 + 2132) = 0;
  return result;
}

uint64_t SFbisrch(uint64_t a1, int a2, int a3, _WORD *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 54);
  if (*(unsigned char *)(a5 + 54)) {
    BOOL v8 = a2 <= a3;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    LOWORD(v9) = 0;
    do
    {
      v35[(__int16)v9] = *(unsigned char *)(a1 + (__int16)a2);
      LOWORD(v9) = v9 + 1;
      int v10 = (__int16)v9;
      if ((__int16)v9 >= (int)v7) {
        break;
      }
      a2 = (__int16)(a2 + 1);
    }
    while (a2 <= a3);
    uint64_t v9 = (__int16)v9;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
  }
  memset(&v35[v9], 32, v7 - v10);
  v35[v7] = 0;
  int v11 = *(__int16 *)(a5 + 48);
  if (v11 < 2)
  {
    unsigned int v16 = 0;
    unsigned int v13 = 0;
    __int16 v15 = *(_WORD *)(a5 + 48);
  }
  else
  {
    int v12 = 0;
    unsigned int v13 = 0;
    int v14 = *(unsigned __int16 *)(a5 + 48);
    __int16 v15 = *(_WORD *)(a5 + 48);
    do
    {
      unsigned int v16 = (v14 + v12) >> 1;
      if (v7)
      {
        int v17 = 4 * v16;
        uint64_t v18 = *(void *)(a5 + 40);
        unsigned int v19 = *(unsigned __int8 *)(v18 + (__int16)(4 * v16));
        if (v35[0] >= v19)
        {
          __int16 v21 = 0;
          int v20 = 0;
          unsigned int v22 = v35[0];
          while (v22 <= v19)
          {
            int v20 = ++v21;
            if (v21 >= (int)v7) {
              goto LABEL_22;
            }
            ++v17;
            unsigned int v22 = v35[v21];
            unsigned int v19 = *(unsigned __int8 *)(v18 + (__int16)v17);
            if (v22 < v19) {
              goto LABEL_20;
            }
          }
          unsigned int v13 = v16;
        }
        else
        {
          int v20 = 0;
LABEL_20:
          __int16 v15 = v16;
        }
      }
      else
      {
        int v20 = 0;
      }
LABEL_22:
      if (v20 == v7) {
        break;
      }
      int v14 = v15;
      int v12 = (__int16)v13;
    }
    while (v15 - (__int16)v13 >= 2);
  }
  if (v15 - (__int16)v13 >= 2) {
    unsigned int v13 = v16;
  }
  if ((_WORD)v13)
  {
    __int16 v23 = 0;
    unsigned int v24 = v13;
    while (1)
    {
      if (v7
        && (v25 = 4 * v24, uint64_t v26 = *(void *)(a5 + 40), v35[0] == *(unsigned __int8 *)(v26 + (__int16)(4 * v24))))
      {
        __int16 v27 = 0;
        do
        {
          int v28 = ++v27;
          if (v27 >= (int)v7) {
            break;
          }
          ++v25;
        }
        while (v35[v27] == *(unsigned char *)(v26 + (__int16)v25));
      }
      else
      {
        int v28 = 0;
      }
      if (v28 != v7) {
        break;
      }
      --v24;
      ++v23;
      if (!(_WORD)v24)
      {
        LOWORD(v24) = 0;
        goto LABEL_42;
      }
    }
    LOWORD(v13) = v23;
  }
  else
  {
    LOWORD(v24) = 0;
    LOWORD(v13) = 0;
  }
LABEL_42:
  uint64_t result = (__int16)v24;
  for (int i = result + 1 + (__int16)v13; i != v11; int i = result + 1 + (__int16)v13)
  {
    if (v7 && (int v31 = 4 * i, v32 = *(void *)(a5 + 40), v35[0] == *(unsigned __int8 *)(v32 + (__int16)v31)))
    {
      __int16 v33 = 0;
      do
      {
        int v34 = ++v33;
        if (v33 >= (int)v7) {
          break;
        }
        ++v31;
      }
      while (v35[v33] == *(unsigned char *)(v32 + (__int16)v31));
    }
    else
    {
      int v34 = 0;
    }
    if (v34 != v7) {
      break;
    }
    LOWORD(v13) = v13 + 1;
  }
  *a4 = v13;
  return result;
}

uint64_t SFchkwrd(uint64_t a1, uint64_t a2, char *__src, int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v7 = a5;
  __int16 v8 = a4;
  uint64_t v9 = __src;
  uint64_t v12 = *(void *)(a2 + 112);
  unsigned int v13 = *(void **)(a2 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a2 + 3192);
  unsigned int v16 = (char *)v13[4];
  int v46 = (char *)v13[6];
  __dst = (char *)v13[5];
  if (!*(_WORD *)(a2 + 2))
  {
    if (*(unsigned char *)(a1 + 55) == 2 && *(_WORD *)(a2 + 3490) == 64 && **(unsigned char **)(a2 + 3496)) {
      __src[a4 - **(unsigned __int8 **)(a2 + 3496)] = -95;
    }
    __int16 v22 = *(_WORD *)(a2 + 18);
    if ((v22 & 0x40) != 0 && !*(_DWORD *)(a2 + 3472)) {
      return 11;
    }
    int v23 = *(unsigned __int8 *)(a1 + 55);
    if (v23 == 5 && (**(unsigned char **)(a2 + 3496) & 0x30) != 0)
    {
      __int16 v24 = *(_WORD *)(a2 + 3490);
      if ((v24 & 0x30) != 0
        && ((**(unsigned char **)(a2 + 3496) & 0x10) == 0 && (v24 & 0x10) != 0
         || (**(unsigned char **)(a2 + 3496) & 0x20) == 0 && (v24 & 0x20) != 0))
      {
        return 11;
      }
    }
    if ((v22 & 1) != 0 || (a5 & 0xFFFFFFFB) == 0 && (v22 & 0x20) != 0) {
      return 11;
    }
    if (v23 == 1 && *(unsigned char *)(a2 + 3512))
    {
      if (!**(unsigned char **)(a2 + 3496)) {
        return 11;
      }
      uint64_t v44 = v14;
      int v25 = *(char **)(*(void *)(a2 + 32) + 24);
      strcpy(v25, "ne");
      strcpy(v25 + 2, __src);
      v8 += 2;
      uint64_t v9 = v25;
      uint64_t v14 = v44;
    }
  }
  if (*(unsigned char *)(a2 + 3184) && *(unsigned char *)(a2 + 3206))
  {
    strcpy(*(char **)(v15 + 8), v9);
    *(unsigned char *)(v15 + 17) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(a2 + 96);
    *(_WORD *)(v15 + 2) = *(_WORD *)(a2 + 3204);
    *(_WORD *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 42) = 1;
    uint64_t v17 = 1 << (*(unsigned char *)(a1 + 55) - 1);
    if (!*(unsigned char *)(a1 + 55)) {
      LODWORD(v17) = -1;
    }
    *(_DWORD *)(v15 + 36) = v17;
    PDword((unsigned __int16 *)v15, 1u, 1);
    uint64_t v18 = *(unsigned __int16 *)(v15 + 50);
    if (*(_WORD *)(v15 + 50))
    {
      *(_WORD *)(a2 + 102) = v18;
      if ((__int16)v18 >= 1)
      {
        uint64_t v19 = *(void *)(v15 + 104);
        while (*(unsigned __int8 *)(*(void *)v19 + 71) != v7 || !*(unsigned char *)(*(void *)v19 + 70))
        {
          v19 += 8;
          if (!--v18) {
            goto LABEL_12;
          }
        }
        return 11;
      }
    }
  }
LABEL_12:
  if (!*(_WORD *)(a2 + 2))
  {
    if (!v12)
    {
      uint64_t v45 = v14;
      uint64_t v26 = (unsigned char *)(a2 + 88);
      if (v7 || *(unsigned char *)(a2 + 88) != 3)
      {
        strcpy(v16, v9);
        goto LABEL_63;
      }
      unsigned __int16 v27 = 0;
      goto LABEL_49;
    }
    if (!*(unsigned char *)(v12 + 34) && !*(unsigned char *)(v12 + 44)
      || (*(_WORD *)(a2 + 3492) & 0x200) != 0
      || SFcltcmp(a1, a2) == 10 && SFcltscr((unsigned __int8 *)v9, v8, a1, v12) == 10)
    {
      uint64_t v45 = v14;
      uint64_t v26 = (unsigned char *)(a2 + 88);
      if (v7 || *(unsigned char *)(a2 + 88) != 3)
      {
        strcpy(v16, v9);
LABEL_56:
        if (*(_WORD *)v12 && (*(unsigned char *)(v12 + 34) || *(unsigned char *)(v12 + 44)))
        {
          if (v7 == 4) {
            unsigned int v29 = 0;
          }
          else {
            unsigned int v29 = v7;
          }
          uint64_t v30 = v12 + 80;
          unsigned int v31 = *(unsigned __int8 *)(v12 + 76);
          int v32 = v8;
          __int16 v33 = (unsigned __int8 *)v16;
LABEL_67:
          SLrecap(v33, v32, v29, v30, v31, v45);
          int v34 = *(unsigned __int8 *)(a1 + 55);
          switch(v34)
          {
            case 5:
              goto LABEL_70;
            case 15:
              if (*v26 == 2 || (*(_WORD *)(a2 + 3490) & 0x40) != 0 && (*(_DWORD *)(a2 + 92) & 0x80000000) != 0) {
                SFremacc(v16, v45, 15);
              }
              uint64_t v35 = v8 - 1;
              if (v9[v35] == 253 && *v26 == 2) {
                v16[v35] = -81;
              }
              break;
            case 8:
LABEL_70:
              if ((*(_WORD *)(a2 + 3490) & 0x40) != 0) {
                SFremacc(v16, v45, v34);
              }
              break;
          }
          if (v12 && (*(_WORD *)(a2 + 3492) & 0x200) == 0)
          {
            if (*(unsigned char *)(v12 + 34))
            {
              int v36 = __dst;
              strcpy(__dst, (const char *)(v12 + 34));
              unsigned int v37 = *(unsigned __int8 *)(v12 + 16);
              uint64_t v38 = v45;
              if (v37 != 3)
              {
                __int16 v39 = strlen(__dst);
                if (v37 == 4) {
                  unsigned int v40 = 0;
                }
                else {
                  unsigned int v40 = *(unsigned __int8 *)(v12 + 16);
                }
                SLrecap((unsigned __int8 *)__dst, v39, v40, 0, v37, v45);
              }
              strcat(__dst, v16);
            }
            else
            {
              int v36 = __dst;
              strcpy(__dst, v16);
              uint64_t v38 = v45;
            }
            if (*(unsigned char *)(v12 + 44))
            {
              strcpy(v46, (const char *)(v12 + 44));
              unsigned int v41 = *(unsigned __int8 *)(v12 + 17);
              if (v41 != 3)
              {
                __int16 v42 = strlen(v46);
                if (v41 == 4) {
                  unsigned int v43 = 0;
                }
                else {
                  unsigned int v43 = *(unsigned __int8 *)(v12 + 17);
                }
                SLrecap((unsigned __int8 *)v46, v42, v43, 0, v41, v38);
              }
              strcat(v36, v46);
            }
            strcpy(v16, v36);
          }
          int v21 = (__int16)strlen(v16);
          int v20 = v16;
          goto LABEL_98;
        }
LABEL_63:
        if (v7 == 4) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = v7;
        }
        unsigned int v31 = *v26;
        int v32 = v8;
        __int16 v33 = (unsigned __int8 *)v16;
        uint64_t v30 = a6;
        goto LABEL_67;
      }
      unsigned __int16 v27 = strlen((const char *)(v12 + 34));
LABEL_49:
      if ((*(_DWORD *)(a2 + 92 + 4 * (v27 >> 5)) >> ~(_BYTE)v27))
      {
        if ((*(_DWORD *)(a2 + 92 + 4 * ((unsigned __int16)(v27 + 1) >> 5)) >> ~(v27 + 1))) {
          unsigned int v7 = 1;
        }
      }
      else
      {
        unsigned int v7 = 0;
      }
      strcpy(v16, v9);
      if (!v12) {
        goto LABEL_63;
      }
      goto LABEL_56;
    }
    return 11;
  }
  if (v7) {
    SLrecap((unsigned __int8 *)v9, v8, v7, a6, v7, v14);
  }
  int v20 = v9;
  int v21 = v8;
LABEL_98:
  return SFadd1(v20, v21, a2, 1);
}

uint64_t SFcltchk(uint64_t a1, int a2, int a3, unsigned __int16 *a4, _WORD *a5, unsigned int a6, uint64_t a7)
{
  SLfun(a1, a2, a3, a4, a5);
  unsigned int v11 = 0;
  unsigned int v12 = (unsigned __int16)*a5 & (((a6 - 1) & 0xFFFC) >> 2);
  *a5 &= ((a6 - 1) & 0xFFFC) >> 2;
  int v13 = *a4 & 7;
  int v14 = 3 - v13;
  int v15 = 2 * v13;
  while (1)
  {
    unsigned int v16 = bswap32(*(_DWORD *)(a7 + 4 * (unsigned __int16)v12));
    if (!v16) {
      return 11;
    }
    if ((v16 & 0x7FFF) == *a4) {
      break;
    }
    v14 += v15;
    unsigned int v17 = v12 + v14;
    if ((unsigned __int16)(a6 - 1) >> 2 >= (unsigned __int16)v17) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = a6 >> 2;
    }
    unsigned int v12 = v17 - v18;
    *a5 = v12;
    if (v11++ >= 0xA) {
      return 11;
    }
  }
  return 10;
}

uint64_t SFcltcmp(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 112);
  __strcpy_chk();
  unsigned int v5 = *(unsigned __int8 *)(a1 + 55);
  BOOL v6 = 1;
  if (v5 > 0xC || ((1 << v5) & 0x1228) == 0) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(v4 + 34)) {
    BOOL v6 = (unsigned __int16)(*(_WORD *)(v4 + 88) & *(_WORD *)(v4 + 58)) != 0;
  }
  if (!*(unsigned char *)(v4 + 44))
  {
LABEL_13:
    BOOL v9 = 1;
  }
  else
  {
    int v8 = (unsigned __int16)(*(_WORD *)(v4 + 90) & *(_WORD *)(v4 + 60));
    BOOL v9 = v8 != 0;
    if (v5 == 5
      && (*(_WORD *)(a2 + 3490) & 0x40) != 0
      && *(unsigned char *)(a2 + 88) == 2
      && !SLstrcmp(v11, "-la"))
    {
      BOOL v9 = (*(_WORD *)(v4 + 60) & 0x1A00 | v8) != 0;
    }
  }
  if (v6 && v9) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t SFcltdb(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 55);
  uint64_t v3 = *(void *)(a2 + 112);
  if ((*(_WORD *)(a2 + 3492) & 0x200) == 0 || *(__int16 *)(a2 + 40) <= 0) {
    *(_DWORD *)(v3 + 58) = 0;
  }
  switch(v2)
  {
    case 3:
      unsigned int v4 = *(unsigned __int16 *)(v3 + 62);
      unsigned int v5 = (v4 & 0xF) - 1;
      if (v5 <= 3) {
        *(_WORD *)(v3 + 58) |= 0x400020000020001uLL >> (16 * v5);
      }
      int v6 = (v4 >> 4) & 7;
      if (v6 == 2)
      {
        __int16 v7 = *(_WORD *)(v3 + 60) | 2;
        goto LABEL_30;
      }
      if (v6 == 1)
      {
        __int16 v7 = *(_WORD *)(v3 + 60) | 1;
        goto LABEL_30;
      }
      break;
    case 5:
      unsigned int v8 = *(unsigned __int16 *)(v3 + 62);
      uint64_t v9 = (v8 & 0xF) - 1;
      if v9 <= 7 && ((0xEFu >> v9)) {
        *(_WORD *)(v3 + 58) |= word_20CC61B50[v9];
      }
      switch((v8 >> 4) & 7)
      {
        case 1u:
          goto LABEL_24;
        case 2u:
          goto LABEL_26;
        case 3u:
          goto LABEL_27;
        case 4u:
          goto LABEL_28;
        case 5u:
          goto LABEL_29;
        case 6u:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x1000;
          goto LABEL_30;
        default:
          return 1;
      }
    case 8:
      int v10 = *(unsigned __int16 *)(v3 + 62);
      *(unsigned char *)(v3 + 92) = v10 & 0xF;
      int v11 = (32 * v10) & 0xE00;
      *(_WORD *)(v3 + 60) = (32 * v10) & 0xE00;
      unint64_t v12 = *(unsigned __int16 *)(a2 + 40);
      if (v12 <= 2)
      {
        if ((v10 & 0xF) != 0)
        {
          *(_WORD *)(v3 + 2 * v12 + 64) |= (_WORD)v10 << 12;
          int v11 = *(unsigned __int16 *)(v3 + 60);
        }
        if (v11)
        {
          uint64_t v13 = v3 + 2 * *(__int16 *)(a2 + 40);
          *(_WORD *)(v13 + 64) |= (__int16)v11 >> 8;
        }
      }
      break;
    case 9:
      __int16 v14 = *(_WORD *)(v3 + 62);
      int v15 = (v14 & 0xF) - 1;
      if (v15 <= 0xA) {
        *(_WORD *)(v3 + 58) |= word_20CC61B60[v15];
      }
      __int16 v7 = *(_WORD *)(v3 + 60) | (16 * v14) & 0x100;
LABEL_30:
      *(_WORD *)(v3 + 60) = v7;
      break;
    case 12:
      switch(*(_WORD *)(v3 + 62) & 7)
      {
        case 0:
LABEL_24:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x80;
          goto LABEL_30;
        case 1:
LABEL_26:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x100;
          goto LABEL_30;
        case 2:
LABEL_27:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x200;
          goto LABEL_30;
        case 3:
LABEL_28:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x400;
          goto LABEL_30;
        case 4:
LABEL_29:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x800;
          goto LABEL_30;
        default:
          return 1;
      }
    default:
      return 1;
  }
  return 1;
}

uint64_t SFcltscr(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (unsigned char *)(a4 + 34);
  uint64_t v9 = *(void *)(a3 + 56);
  if (*(unsigned char *)(a4 + 34)
    && ((uint64_t v10 = *a1, v10 != 104) ? (v4 = 1, v5 = (*(_DWORD *)(v9 + 4 * v10) & 0x10000000) == 0) : (v4 = 0, v5 = 0), v5))
  {
    if (*(unsigned char *)(a3 + 55) == 5 && !SLstrcmp(v8, "d'"))
    {
      unsigned int v18 = "yeux";
      uint64_t v19 = a1;
LABEL_28:
      if (!SLstrcmp(v19, (unsigned __int8 *)v18)) {
        return 10;
      }
    }
  }
  else
  {
    int v11 = (unsigned char *)(a4 + 44);
    switch(*(unsigned char *)(a3 + 55))
    {
      case 3:
        if (*v11)
        {
          int v12 = *(unsigned __int16 *)(a4 + 60);
          if (v12 != 3)
          {
            uint64_t v13 = a1[a2 - 1];
            BOOL v14 = (*(_DWORD *)(v9 + 4 * v13) & 0x10000000) == 0 || v13 == 117;
            BOOL v15 = v14 || v13 == 249;
            BOOL v16 = v15;
            if ((v12 & 1) == 0 && !v16) {
              return 11;
            }
            if ((v12 & 2) == 0 && v16) {
              return 11;
            }
          }
        }
        return 10;
      case 5:
        if (!*v11 || (*(__int16 *)(a4 + 90) & 0x80000000) == 0) {
          return 10;
        }
        uint64_t v20 = a2 - 1;
        uint64_t result = 11;
        if (!(!v5 & v4))
        {
          switch(a1[v20])
          {
            case 'a':
            case 'c':
            case 'e':
              if (!SLstrcmp(v11, "-t-il") || !SLstrcmp(v11, "-t-elle")) {
                return 10;
              }
              unsigned int v18 = "-t-on";
              break;
            case 'b':
            case 'f':
            case 'g':
            case 'h':
              return result;
            case 'd':
              goto LABEL_68;
            case 'i':
              int v29 = SLstrcmp(v11, "-je");
              uint64_t result = 11;
              if (a2 < 2 || v29 || a1[a2 - 2] != 97) {
                return result;
              }
              return 10;
            default:
              JUMPOUT(0);
          }
LABEL_67:
          uint64_t v19 = v11;
          goto LABEL_28;
        }
        switch(a1[v20])
        {
          case 's':
            if (!SLstrcmp(v11, "-je") || !SLstrcmp(v11, "-tu")) {
              return 10;
            }
            goto LABEL_37;
          case 't':
LABEL_68:
            if (!SLstrcmp(v11, "-il")
              || !SLstrcmp(v11, "-elle")
              || !SLstrcmp(v11, "-on"))
            {
              return 10;
            }
            if (SLstrcmp(v11, "-ils"))
            {
              int v28 = SLstrcmp(v11, "-elles");
              uint64_t result = 11;
              if (a2 < 2 || v28) {
                return result;
              }
            }
            else if (a2 < 2)
            {
              return 11;
            }
            if (a1[a2 - 2] == 110) {
              return 10;
            }
            break;
          case 'u':
          case 'v':
          case 'w':
          case 'y':
            return result;
          case 'x':
            goto LABEL_76;
          case 'z':
LABEL_37:
            if (!SLstrcmp(v11, "-y") || !SLstrcmp(v11, "-en")) {
              return 10;
            }
            unsigned int v18 = "-y-en";
            goto LABEL_67;
          default:
            if (a1[v20] != 233) {
              return result;
            }
LABEL_76:
            if (SLstrcmp(v11, "-je") && (SLstrcmp(v11, "-tu") || a1[v20] != 120)) {
              return 11;
            }
            return 10;
        }
        return 11;
      case 9:
        if (*(unsigned char *)(a4 + 34)) {
          BOOL v22 = (*(_WORD *)(a4 + 88) & 0x40) == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22 && *a1 != 105 && (*(_DWORD *)(v9 + 4 * a1[1]) & 0x10000000) != 0
          || !SLstrcmp(v8, "c'") && (*(_DWORD *)(v9 + 4 * *a1) & 0x800) == 0)
        {
          return 11;
        }
        return 10;
      case 0xC:
        int v23 = *(__int16 *)(a4 + 90);
        if ((v23 & 0x80000000) == 0) {
          return 10;
        }
        if ((v23 & 0x20) == 0)
        {
          int v24 = a1[a2 - 1];
          uint64_t result = 10;
          if ((v24 - 224) > 0x14 || ((1 << (v24 + 32)) & 0x101401) == 0)
          {
            if (v24 == 105) {
              return 10;
            }
            else {
              return 11;
            }
          }
          return result;
        }
        if (a1[a2 - 1] == 114)
        {
          unsigned __int8 v26 = a1[a2 - 2] - 97;
          unsigned __int8 v27 = (v26 >> 1) | (v26 << 7);
          if (v27 < 8u) {
            return dword_20CC61B78[(char)v27];
          }
        }
        break;
      default:
        return 10;
    }
  }
  return 11;
}

uint64_t SFcor1qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[148];
  unsigned int v6 = *(unsigned __int16 *)(a3 + 2134);
  uint64_t v7 = *(unsigned __int16 *)(a3 + 2136);
  unsigned __int16 v8 = *(_WORD *)(a3 + 2138) - 1;
  __int16 v9 = *(_WORD *)(a3 + 2140);
  unsigned __int16 v10 = v8 + v6;
  __int16 v11 = strlen(a1);
  char v66 = 0;
  int v12 = (unsigned __int8 *)(v5 + (unsigned __int16)(v7 + v6));
  int v13 = *v12;
  int v14 = *(unsigned __int8 *)(v5 + v7);
  int v15 = v12[1];
  int v16 = *(unsigned __int8 *)(v5 + v7 + 1);
  int v17 = *(unsigned __int8 *)(v5 + v8 + 1);
  int v18 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v8 + v6) + 1);
  unsigned __int8 v62 = *(unsigned char *)(v5 + v8 + 1);
  unsigned __int8 v63 = v18;
  if (v6 >= 2)
  {
    unsigned int v19 = v8;
    int v20 = (unsigned __int16)(v9 - 1);
    unsigned int v21 = (unsigned __int16)(v7 + v6);
    unsigned int v22 = v10;
    int v23 = (unsigned __int16)(v9 + 255);
    int v24 = (v15 | (v16 << 8)) - 1;
    int v25 = (v13 | (v14 << 8)) - 1;
    uint64_t v26 = a3 + 128;
    uint64_t v27 = v11;
    unsigned __int16 v28 = 1;
    int v29 = 32;
    int v30 = 32;
    do
    {
      int v31 = *((unsigned __int8 *)a1 + 1);
      int v32 = *(unsigned __int8 *)a1;
      while (1)
      {
        if ((unsigned __int16)v25 >= (unsigned __int16)v24)
        {
          int v17 = *(unsigned __int8 *)(v5 + ++v28 + (unint64_t)v19);
          int v18 = *(unsigned __int8 *)(v5 + v28 + (unint64_t)v22);
          unsigned __int8 v62 = *(unsigned char *)(v5 + v28 + (unint64_t)v19);
          unsigned __int8 v63 = v18;
          int v25 = v24;
          int v24 = (*(unsigned __int8 *)(v5 + v28 + (unint64_t)v21) | (*(unsigned __int8 *)(v5 + v7 + v28) << 8))
              - 1;
        }
        int v33 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v25 + 1) - 1);
        uint64_t v34 = (unsigned __int16)(v25 + 3) - 2;
        BOOL v35 = v33 == 255;
        if (v33 == 255)
        {
          uint64_t v36 = (unsigned __int16)(v25 + 3) - 1;
        }
        else
        {
          uint64_t v34 = (v33 + v20);
          uint64_t v36 = (v33 + v23);
        }
        if (v35) {
          v25 += 3;
        }
        else {
          ++v25;
        }
        int v37 = *(unsigned __int8 *)(v5 + v36);
        int v38 = *(unsigned __int8 *)(v5 + v34);
        if (v17 == v31 && v18 == v32)
        {
          int v39 = v17;
          goto LABEL_22;
        }
        if (v17 == v32 && (v18 == v31 || v18 == *((unsigned __int8 *)a1 + 2) || v18 == v17)) {
          break;
        }
        int v25 = v24;
        if (v6 <= v28) {
          return 10;
        }
      }
      int v39 = v31;
LABEL_22:
      if (v38) {
        int v29 = v38;
      }
      char v64 = v29;
      if (v37) {
        int v30 = v37;
      }
      char v65 = v30;
      if (v30 == 32)
      {
        if (v29 == 32)
        {
          BOOL v40 = v18 != 32;
          if (v18 == 32) {
            __int16 v41 = 1;
          }
          else {
            __int16 v41 = 2;
          }
        }
        else
        {
          BOOL v40 = 0;
          __int16 v41 = 3;
        }
      }
      else
      {
        BOOL v40 = 0;
        __int16 v41 = 4;
      }
      if (v17 == v32)
      {
        BOOL v42 = v18 == v17 && v29 == v39;
        int v43 = *((unsigned __int8 *)a1 + 2);
        BOOL v45 = v42 && v30 == v43;
        if (v18 == v39)
        {
          if (v30 == v43 && v29 == v18) {
            BOOL v45 = 1;
          }
          if (v29 == v43 && (v30 == v29 || v30 == *((unsigned __int8 *)a1 + 4) || v30 == *((unsigned __int8 *)a1 + 3))) {
            BOOL v45 = 1;
          }
          if (v29 == *((unsigned __int8 *)a1 + 3) && (v30 == v43 || v30 == *((unsigned __int8 *)a1 + 4))) {
            BOOL v45 = 1;
          }
        }
        if (v18 == v43)
        {
          int v47 = *((unsigned __int8 *)a1 + 3);
          if ((v30 == v47 || v30 == 32) && v29 == v39) {
            BOOL v45 = 1;
          }
LABEL_79:
          if (v29 == v47 && v30 == *((unsigned __int8 *)a1 + 4))
          {
LABEL_82:
            int v54 = v30;
            int v55 = v29;
            unsigned int v58 = v22;
            unsigned int v59 = v21;
            uint64_t v60 = v7;
            unsigned int v57 = v19;
            uint64_t v56 = v26;
            uint64_t v50 = v27;
            int v51 = SFcorqbr(a2, a3, (uint64_t)&v62, v41, (uint64_t)a1, v27, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166)));
            uint64_t v27 = v50;
            uint64_t v26 = v56;
            unsigned int v22 = v58;
            unsigned int v21 = v59;
            unsigned int v19 = v57;
            uint64_t v7 = v60;
            BOOL v35 = v51 == 10;
            int v30 = v54;
            int v29 = v55;
            if (v35)
            {
              if (*(__int16 *)(a3 + 2132) > 499) {
                return 10;
              }
              for (uint64_t i = 0; i != 4; ++i)
                *(unsigned char *)(v56 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v62 + i);
              ++*(_WORD *)(a3 + 2132);
            }
            goto LABEL_88;
          }
        }
      }
      else
      {
        if (v17 != v31) {
          goto LABEL_88;
        }
        BOOL v45 = v18 == v32
           && (v40 || v29 == *((unsigned __int8 *)a1 + 2) && (v30 == 32 || v30 == *((unsigned __int8 *)a1 + 3)));
        if (v18 == *((unsigned __int8 *)a1 + 2))
        {
          int v47 = *((unsigned __int8 *)a1 + 3);
          goto LABEL_79;
        }
      }
      if (v45) {
        goto LABEL_82;
      }
LABEL_88:
      int v17 = v62;
      int v18 = v63;
    }
    while (v6 > v28);
  }
  return 10;
}

uint64_t SFcor2qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[148];
  uint64_t v6 = *(unsigned __int16 *)(a3 + 2134);
  uint64_t v7 = *(unsigned __int16 *)(a3 + 2136);
  unsigned __int16 v8 = *(_WORD *)(a3 + 2138) - 1;
  __int16 v9 = *(_WORD *)(a3 + 2140);
  __int16 v10 = strlen(a1);
  char v68 = 0;
  __int16 v11 = (unsigned __int8 *)(v5 + (unsigned __int16)(v7 + v6));
  int v12 = *v11;
  int v13 = *(unsigned __int8 *)(v5 + v7);
  int v14 = v11[1];
  int v15 = *(unsigned __int8 *)(v5 + v7 + 1);
  unsigned __int8 v16 = *(unsigned char *)(v5 + (unsigned __int16)(v8 + v6) + 1);
  unsigned __int8 v64 = *(unsigned char *)(v5 + v8 + 1);
  unsigned __int8 v65 = v16;
  if (v6 >= 2)
  {
    int v17 = a1;
    uint64_t v18 = v7;
    uint64_t v19 = v6;
    uint64_t v20 = v8;
    uint64_t v21 = (unsigned __int16)(v9 - 1);
    unsigned int v22 = (unsigned __int16)(v7 + v6);
    unsigned int v23 = (unsigned __int16)(v8 + v6);
    int v24 = (v14 | (v15 << 8)) - 1;
    int v25 = (v12 | (v13 << 8)) - 1;
    int v26 = (unsigned __int16)(v9 + 255);
    int v27 = 32;
    unsigned int v57 = v23;
    int v58 = v10;
    uint64_t v28 = 1;
    int v29 = 32;
    int v56 = v26;
    do
    {
      if ((unsigned __int16)v25 >= (unsigned __int16)v24)
      {
        uint64_t v28 = (v28 + 1);
        unsigned __int8 v30 = *(unsigned char *)(v5 + (unsigned __int16)v28 + (unint64_t)v23);
        unsigned __int8 v64 = *(unsigned char *)(v5 + (unsigned __int16)v28 + (unint64_t)v20);
        unsigned __int8 v65 = v30;
        int v25 = v24;
        int v24 = (*(unsigned __int8 *)(v5 + (unsigned __int16)v28 + (unint64_t)v22) | (*(unsigned __int8 *)(v5 + v18 + (unsigned __int16)v28) << 8))
            - 1;
      }
      int v31 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v25 + 1) - 1);
      uint64_t v32 = (unsigned __int16)(v25 + 3) - 2;
      BOOL v33 = v31 == 255;
      if (v31 == 255)
      {
        uint64_t v34 = (unsigned __int16)(v25 + 3) - 1;
      }
      else
      {
        uint64_t v32 = (v31 + v21);
        uint64_t v34 = (v31 + v26);
      }
      int v35 = *(unsigned __int8 *)(v5 + v34);
      if (v33) {
        v25 += 3;
      }
      else {
        ++v25;
      }
      int v36 = *(unsigned __int8 *)(v5 + v32);
      unsigned int v37 = *(unsigned __int16 *)(a3 + 2152);
      if (*(__int16 *)(a3 + 2152) >= 1)
      {
        unsigned int v38 = *(unsigned __int8 *)v17;
        if (v64 < v38) {
          goto LABEL_13;
        }
        if (v64 > v38) {
          return 10;
        }
        unsigned int v39 = *((unsigned __int8 *)v17 + 1);
        if (v37 < 2)
        {
          if (v65 == v39) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v65 < v39) {
            goto LABEL_13;
          }
          if (v65 > v39) {
            return 10;
          }
        }
      }
      if (v36) {
        int v27 = v36;
      }
      char v66 = v27;
      if (v35) {
        int v29 = v35;
      }
      char v67 = v29;
      if (!v37
        && v64 == *(unsigned __int8 *)v17
        && v65 == *((unsigned __int8 *)v17 + 1)
        && v27 == *((unsigned __int8 *)v17 + 2))
      {
        continue;
      }
      if (v29 == 32)
      {
        if (v27 == 32)
        {
          char v40 = 0;
          if (v65 == 32) {
            __int16 v41 = 1;
          }
          else {
            __int16 v41 = 2;
          }
        }
        else
        {
          __int16 v41 = 3;
          char v40 = 1;
        }
      }
      else
      {
        char v40 = 0;
        __int16 v41 = 4;
      }
      if ((__int16)v37 >= 3)
      {
        if (v27 == *((unsigned __int8 *)v17 + 2) && (v37 < 4 || v29 == *((unsigned __int8 *)v17 + 3))) {
          goto LABEL_44;
        }
      }
      else if (v37 == 2)
      {
        if (v27 != *((unsigned __int8 *)v17 + 2)) {
          goto LABEL_44;
        }
      }
      else
      {
        if (v37) {
          goto LABEL_44;
        }
        int v48 = *(unsigned __int8 *)v17;
        if (v64 == v48)
        {
LABEL_13:
          int v25 = v24;
          continue;
        }
        int v49 = *((unsigned __int8 *)v17 + 1);
        if (v65 == v48)
        {
          int v50 = *((unsigned __int8 *)v17 + 2);
          BOOL v51 = v29 == v50;
          if (v27 != v49) {
            BOOL v51 = 0;
          }
        }
        else
        {
          BOOL v51 = 0;
          int v50 = *((unsigned __int8 *)v17 + 2);
        }
        if (v65 == v49 && v27 == v50 && ((v40 & 1) != 0 || v29 == *((unsigned __int8 *)v17 + 3))) {
          BOOL v51 = 1;
        }
        if (v64 == v49 && v65 == v50 && v27 == *((unsigned __int8 *)v17 + 3))
        {
          if (v29 == *((unsigned __int8 *)v17 + 4) || v51)
          {
LABEL_44:
            int v60 = v29;
            uint64_t v61 = v28;
            int v62 = v27;
            int v63 = v24;
            uint64_t v42 = v21;
            uint64_t v43 = v20;
            uint64_t v44 = v18;
            uint64_t v45 = v19;
            int v46 = v17;
            if (SFcorqbr(a2, a3, (uint64_t)&v64, v41, (uint64_t)v17, v58, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166))) == 10)
            {
              uint64_t v18 = v44;
              uint64_t v21 = v42;
              int v26 = v56;
              unsigned int v23 = v57;
              int v27 = v62;
              int v24 = v63;
              uint64_t v28 = v61;
              int v29 = v60;
              if (*(__int16 *)(a3 + 2132) > 499) {
                return 10;
              }
              uint64_t v19 = v45;
              int v17 = v46;
              uint64_t v20 = v43;
              for (uint64_t i = 0; i != 4; ++i)
                *(unsigned char *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v64 + i);
              ++*(_WORD *)(a3 + 2132);
            }
            else
            {
              uint64_t v19 = v45;
              uint64_t v18 = v44;
              int v17 = v46;
              uint64_t v20 = v43;
              uint64_t v21 = v42;
              int v26 = v56;
              unsigned int v23 = v57;
              int v27 = v62;
              int v24 = v63;
              uint64_t v28 = v61;
              int v29 = v60;
            }
            continue;
          }
        }
        else if (v51)
        {
          goto LABEL_44;
        }
        if (v65 != v50 && v65 != v49 && v65 != v48) {
          int v25 = v24;
        }
      }
    }
    while (v19 > (unsigned __int16)v28);
  }
  return 10;
}

uint64_t SFcor3qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[148];
  unsigned int v7 = *(unsigned __int16 *)(a3 + 2134);
  uint64_t v8 = *(unsigned __int16 *)(a3 + 2136);
  __int16 v9 = *(_WORD *)(a3 + 2138);
  __int16 v10 = *(_WORD *)(a3 + 2140);
  __int16 v11 = strlen(a1);
  __int16 v12 = v11;
  int v13 = v11;
  int v14 = *(unsigned __int8 *)(a3 + 2172);
  if (v11 - v14 > 1) {
    return 10;
  }
  uint64_t v15 = v8;
  unsigned int v16 = v7;
  unsigned int v17 = (unsigned __int16)(v9 - 1);
  memset(v79, 0, 256);
  memset(v78, 0, sizeof(v78));
  if (v14 != 255)
  {
    __int16 v18 = 0;
    do
    {
      if (v14 == v11)
      {
        uint64_t v19 = *(unsigned __int8 *)(a3 + (v18 | 1) + 2172);
        int v20 = *(unsigned __int8 *)(a2[21] + v19);
        uint64_t v21 = *(unsigned __int8 *)(a2[22] + v19);
        unsigned int v22 = *(unsigned __int8 **)(a2[19] + 8 * v19);
        v79[*v22] = 1;
        if (v20 == 1) {
          unsigned int v23 = &a1[v21];
        }
        else {
          unsigned int v23 = (const char *)(v22 + 1);
        }
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1) {
          break;
        }
        v79[*(unsigned __int8 *)a1] = 1;
        unsigned int v23 = *(const char **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v18 | 1) + 2172));
      }
      *((unsigned char *)v78 + *(unsigned __int8 *)v23) = 1;
      v18 += 2;
      int v14 = *(unsigned __int8 *)(a3 + v18 + 2172);
    }
    while (v14 != 255);
  }
  char v77 = 0;
  int v24 = (unsigned __int8 *)(v6 + (unsigned __int16)(v8 + v7));
  int v25 = *v24;
  int v26 = *(unsigned __int8 *)(v6 + v8);
  int v27 = v24[1];
  int v28 = *(unsigned __int8 *)(v8 + v6 + 1);
  unsigned __int8 v29 = *(unsigned char *)(v6 + (unsigned __int16)(v9 - 1 + v7) + 1);
  unsigned __int8 v73 = *(unsigned char *)(v6 + (unsigned __int16)(v9 - 1) + 1);
  unsigned __int8 v74 = v29;
  if (v7 < 2) {
    return 10;
  }
  int v30 = (unsigned __int16)(v10 - 1);
  unsigned int v70 = (unsigned __int16)(v8 + v7);
  unsigned int v68 = v7;
  unsigned int v69 = (unsigned __int16)(v9 - 1 + v7);
  int v31 = (v27 | (v28 << 8)) - 1;
  int v32 = (v25 | (v26 << 8)) - 1;
  int v71 = (unsigned __int16)(v10 + 255);
  int v33 = 32;
  unsigned __int16 v34 = 1;
  int v35 = 32;
  __int16 v67 = v11;
  unsigned int v65 = v17;
  int v66 = v11;
  do
  {
    if ((unsigned __int16)v32 >= (unsigned __int16)v31)
    {
      unsigned __int8 v36 = *(unsigned char *)(v6 + ++v34 + (unint64_t)v69);
      unsigned __int8 v73 = *(unsigned char *)(v6 + v34 + (unint64_t)v17);
      unsigned __int8 v74 = v36;
      int v32 = v31;
      int v31 = (*(unsigned __int8 *)(v6 + v34 + (unint64_t)v70) | (*(unsigned __int8 *)(v6 + v15 + v34) << 8)) - 1;
    }
    int v37 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v32 + 1) - 1);
    uint64_t v38 = (v37 + v71);
    BOOL v39 = v37 == 255;
    if (v37 == 255) {
      uint64_t v40 = (unsigned __int16)(v32 + 3) - 2;
    }
    else {
      uint64_t v40 = (v37 + v30);
    }
    if (v39) {
      uint64_t v41 = (unsigned __int16)(v32 + 3) - 1;
    }
    else {
      uint64_t v41 = v38;
    }
    if (v39) {
      int v42 = v32 + 3;
    }
    else {
      int v42 = v32 + 1;
    }
    int v43 = *(unsigned __int8 *)(v6 + v41);
    int v44 = *(unsigned __int8 *)(v6 + v40);
    if (v44) {
      int v33 = v44;
    }
    char v75 = v33;
    if (v43) {
      int v35 = v43;
    }
    char v76 = v35;
    int v72 = v42;
    if (v35 == 32)
    {
      if (v33 == 32)
      {
        if (v74 == 32) {
          unsigned __int16 v45 = 1;
        }
        else {
          unsigned __int16 v45 = 2;
        }
      }
      else
      {
        unsigned __int16 v45 = 3;
      }
    }
    else
    {
      unsigned __int16 v45 = 4;
    }
    int v32 = v31;
    if (!v79[v73]) {
      continue;
    }
    int v32 = v31;
    if (!*((unsigned char *)v78 + v74)) {
      continue;
    }
    int v46 = *(unsigned __int8 *)(a3 + 2172);
    int v32 = v31;
    if (v46 == 255) {
      continue;
    }
    unsigned __int16 v47 = 0;
    __int16 v48 = 0;
    do
    {
      int v49 = (__int16)(v12 - v46);
      if (v49 > 1) {
        break;
      }
      if (v49 == 1 && *(unsigned __int8 *)a1 != v73) {
        goto LABEL_68;
      }
      uint64_t v50 = *(unsigned __int8 *)(a3 + (v48 | 1) + 2172);
      uint64_t v51 = a2[21];
      unsigned int v52 = *(unsigned __int8 *)(v51 + v50);
      uint64_t v53 = *(unsigned __int8 *)(a2[22] + v50);
      if (!*(unsigned char *)(v51 + v50))
      {
        if ((unsigned __int16)v49 == v45) {
          goto LABEL_62;
        }
        int v54 = 0;
LABEL_54:
        int v58 = v49 + (__int16)v54;
        if (v58 < v45)
        {
          uint64_t v59 = v53 - v52;
          do
          {
            if (*(&v73 + v58) != a1[v59 + v58]) {
              break;
            }
            int v58 = v49 + (__int16)++v54;
          }
          while (v58 < v45);
        }
        if (v58 == v45) {
          goto LABEL_62;
        }
        goto LABEL_59;
      }
      if (v49 >= (__int16)v45)
      {
        int v54 = 0;
        int v55 = 0;
      }
      else
      {
        int v54 = 0;
        int v55 = 0;
        uint64_t v56 = *(void *)(a2[19] + 8 * v50);
        int v57 = v49;
        do
        {
          if (*(&v73 + v57) != *(unsigned __int8 *)(v56 + (__int16)v54)) {
            break;
          }
          int v55 = (__int16)++v54;
          unsigned __int16 v47 = 1;
          if ((__int16)v54 >= (int)v52) {
            break;
          }
          int v57 = v49 + (__int16)v54;
        }
        while (v57 < v45);
      }
      if (v55 + v49 == v45) {
        goto LABEL_62;
      }
      if (v55 == v52) {
        goto LABEL_54;
      }
LABEL_59:
      v48 += 2;
      int v46 = *(unsigned __int8 *)(a3 + v48 + 2172);
    }
    while (v46 != 255);
    int v60 = v47;
    if (v47 == 1) {
      goto LABEL_68;
    }
    int v32 = v31;
    if (!v60) {
      continue;
    }
LABEL_62:
    if (v35 != 32
      || (v61 = SFcorqbr(a2, a3, (uint64_t)&v73, (__int16)v45, (uint64_t)a1, v13, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166))), v30 = v64, v17 = v65, v13 = v66, __int16 v12 = v67, v15 = v8, v16 = v68, v61 == 10))
    {
      if (*(__int16 *)(a3 + 2132) > 499) {
        return 10;
      }
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v73 + i);
      ++*(_WORD *)(a3 + 2132);
    }
LABEL_68:
    int v32 = v72;
  }
  while (v16 > v34);
  return 10;
}

uint64_t SFcor6qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[7];
  uint64_t v6 = a2[148];
  unsigned int v92 = *(unsigned __int16 *)(a3 + 2134);
  uint64_t v91 = *(unsigned __int16 *)(a3 + 2136);
  __int16 v7 = *(_WORD *)(a3 + 2138);
  __int16 v8 = *(_WORD *)(a3 + 2140);
  int v9 = (__int16)strlen(a1);
  int v10 = *(unsigned __int8 *)(a3 + 2172);
  unint64_t v11 = *(unsigned __int8 *)a1;
  int v12 = *(_DWORD *)(v5 + 4 * v11);
  if (v9 <= v10)
  {
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    int v13 = a2;
    unsigned int v14 = v92;
    uint64_t v15 = v91;
    if ((v12 & 0x10000000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = a2;
    unsigned int v14 = v92;
    uint64_t v15 = v91;
    if ((v12 & 0x10000000) == 0) {
      return 10;
    }
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
  }
  uint64_t v16 = 0;
  int64x2_t v17 = vdupq_n_s64(v11);
  int64x2_t v18 = (int64x2_t)xmmword_20CC61BA0;
  int64x2_t v19 = (int64x2_t)xmmword_20CC61BB0;
  int v20 = (char *)&v116 + 1;
  v21.i64[0] = 0x1000000010000000;
  v21.i64[1] = 0x1000000010000000;
  int64x2_t v22 = vdupq_n_s64(4uLL);
  do
  {
    int16x4_t v23 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, v17), (int32x4_t)vceqq_s64(v18, v17))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v16), v21))));
    if (v23.i8[0]) {
      *(v20 - 1) = 1;
    }
    if (v23.i8[2]) {
      *int v20 = 1;
    }
    if (v23.i8[4]) {
      v20[1] = 1;
    }
    if (v23.i8[6]) {
      v20[2] = 1;
    }
    int64x2_t v18 = vaddq_s64(v18, v22);
    int64x2_t v19 = vaddq_s64(v19, v22);
    v20 += 4;
    v16 += 16;
  }
  while (v16 != 1024);
  *((unsigned char *)&v100 + *((unsigned __int8 *)a1 + 1)) = 1;
LABEL_16:
  unsigned int v90 = (unsigned __int16)(v7 - 1);
  unsigned __int16 v24 = v7 - 1 + v14;
  if (v10 != 255 && v9 == v10)
  {
    __int16 v25 = 0;
    uint64_t v26 = v13[21];
    uint64_t v27 = v13[22];
    v28.i64[0] = 0x1000000010000000;
    v28.i64[1] = 0x1000000010000000;
    int64x2_t v29 = vdupq_n_s64(4uLL);
    uint64_t v30 = v13[19];
    do
    {
      uint64_t v31 = *(unsigned __int8 *)(a3 + (v25 | 1) + 2172);
      int v32 = *(unsigned __int8 *)(v26 + v31);
      uint64_t v33 = *(unsigned __int8 *)(v27 + v31);
      unsigned __int16 v34 = *(unsigned __int8 **)(v30 + 8 * v31);
      *((unsigned char *)&v116 + *v34) = 1;
      if (v33 == 1)
      {
        unint64_t v35 = *((unsigned __int8 *)a1 + 1);
        if ((*(_DWORD *)(v5 + 4 * v35) & 0x10000000) != 0)
        {
          uint64_t v36 = 0;
          int64x2_t v37 = vdupq_n_s64(v35);
          uint64_t v38 = (char *)&v100 + 1;
          int64x2_t v39 = (int64x2_t)xmmword_20CC61BB0;
          int64x2_t v40 = (int64x2_t)xmmword_20CC61BA0;
          do
          {
            int16x4_t v41 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v39, v37), (int32x4_t)vceqq_s64(v40, v37))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v36), v28))));
            if (v41.i8[0]) {
              *(v38 - 1) = 1;
            }
            if (v41.i8[2]) {
              *uint64_t v38 = 1;
            }
            if (v41.i8[4]) {
              v38[1] = 1;
            }
            if (v41.i8[6]) {
              v38[2] = 1;
            }
            int64x2_t v40 = vaddq_s64(v40, v29);
            int64x2_t v39 = vaddq_s64(v39, v29);
            v38 += 4;
            v36 += 16;
          }
          while (v36 != 1024);
        }
      }
      int v42 = (unsigned __int8 *)&a1[v33];
      if (v32 == 1) {
        int v43 = v42;
      }
      else {
        int v43 = v34 + 1;
      }
      *((unsigned char *)&v100 + *v43) = 1;
      v25 += 2;
      int v44 = *(unsigned __int8 *)(a3 + v25 + 2172);
    }
    while (v44 != 255 && v9 == v44);
  }
  int v94 = v9;
  char v99 = 0;
  int v46 = (unsigned __int8 *)(v6 + (unsigned __int16)(v15 + v14));
  int v47 = *v46;
  int v48 = *(unsigned __int8 *)(v6 + v15);
  int v49 = v46[1];
  int v50 = *(unsigned __int8 *)(v15 + v6 + 1);
  unsigned int v51 = (unsigned __int16)(v7 - 1);
  unsigned __int8 v52 = *(unsigned char *)(v6 + v24 + 1);
  unsigned __int8 v95 = *(unsigned char *)(v6 + (unsigned __int16)(v7 - 1) + 1);
  unsigned __int8 v96 = v52;
  if (v14 >= 2)
  {
    int v53 = (unsigned __int16)(v8 - 1);
    unsigned int v54 = (unsigned __int16)(v15 + v14);
    unsigned int v55 = (unsigned __int16)(v7 - 1 + v14);
    int v56 = (v49 | (v50 << 8)) - 1;
    int v57 = (v47 | (v48 << 8)) - 1;
    int v58 = (unsigned __int16)(v8 + 255);
    int v59 = 32;
    unsigned __int16 v60 = 1;
    int v61 = 32;
    unsigned int v87 = v54;
    int v88 = v53;
    unsigned int v86 = v24;
    int v89 = v58;
    do
    {
      if ((unsigned __int16)v57 >= (unsigned __int16)v56)
      {
        unsigned __int8 v62 = *(unsigned char *)(v6 + ++v60 + (unint64_t)v55);
        unsigned __int8 v95 = *(unsigned char *)(v6 + v60 + (unint64_t)v51);
        unsigned __int8 v96 = v62;
        int v57 = v56;
        int v56 = (*(unsigned __int8 *)(v6 + v60 + (unint64_t)v54) | (*(unsigned __int8 *)(v6 + v15 + v60) << 8)) - 1;
      }
      int v63 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v57 + 1) - 1);
      uint64_t v64 = (unsigned __int16)(v57 + 3) - 2;
      BOOL v65 = v63 == 255;
      if (v63 == 255)
      {
        uint64_t v66 = (unsigned __int16)(v57 + 3) - 1;
      }
      else
      {
        uint64_t v64 = (v63 + v53);
        uint64_t v66 = (v63 + v58);
      }
      int v67 = *(unsigned __int8 *)(v6 + v66);
      if (v65) {
        v57 += 3;
      }
      else {
        ++v57;
      }
      int v68 = *(unsigned __int8 *)(v6 + v64);
      unsigned int v69 = *(unsigned __int16 *)(a3 + 2152);
      if (*(__int16 *)(a3 + 2152) >= 1)
      {
        unsigned int v70 = *(unsigned __int8 *)a1;
        if (v95 < v70) {
          goto LABEL_77;
        }
        if (v95 > v70) {
          return 10;
        }
        unsigned int v71 = *((unsigned __int8 *)a1 + 1);
        if (v69 < 2)
        {
          if (v96 == v71) {
            goto LABEL_77;
          }
        }
        else
        {
          if (v96 < v71) {
            goto LABEL_77;
          }
          if (v96 > v71) {
            return 10;
          }
        }
      }
      if (v68) {
        int v59 = v68;
      }
      char v97 = v59;
      if (v67) {
        int v61 = v67;
      }
      char v98 = v61;
      if (!v69
        && v95 == *(unsigned __int8 *)a1
        && v96 == *((unsigned __int8 *)a1 + 1)
        && v59 == *((unsigned __int8 *)a1 + 2))
      {
        continue;
      }
      if (v61 == 32)
      {
        if (v59 == 32)
        {
          if (v96 == 32) {
            __int16 v72 = 1;
          }
          else {
            __int16 v72 = 2;
          }
        }
        else
        {
          __int16 v72 = 3;
        }
      }
      else
      {
        __int16 v72 = 4;
      }
      if (!*((unsigned char *)&v116 + v95) || !*((unsigned char *)&v100 + v96))
      {
LABEL_77:
        int v57 = v56;
        continue;
      }
      if ((*(_DWORD *)(v5 + 4 * v95) & 0x10000000) == 0
        || (*(_DWORD *)(v5 + 4 * *(unsigned __int8 *)a1) & 0x10000000) == 0)
      {
        int v73 = *(unsigned __int8 *)(a3 + 2172);
        if (v73 == 255) {
          goto LABEL_76;
        }
        __int16 v74 = 0;
        __int16 v75 = 0;
        do
        {
          int v76 = (__int16)(v94 - v73);
          if (v76 > 1) {
            break;
          }
          if (v76 == 1 && *(unsigned __int8 *)a1 != v95) {
            goto LABEL_101;
          }
          int v77 = 0;
          uint64_t v78 = v13[21];
          uint64_t v79 = *(unsigned __int8 *)(a3 + (v75 | 1) + 2172);
          int v80 = *(unsigned __int8 *)(v78 + v79);
          if (*(unsigned char *)(v78 + v79) && v76 < v72)
          {
            __int16 v81 = 0;
            int v77 = 0;
            uint64_t v82 = *(void *)(v13[19] + 8 * v79);
            int v83 = v76;
            do
            {
              if (*(&v95 + v83) != *(unsigned __int8 *)(v82 + v81)) {
                break;
              }
              int v77 = ++v81;
              __int16 v74 = 1;
              if (v81 >= v80) {
                break;
              }
              int v83 = v76 + v81;
            }
            while (v83 < (unsigned __int16)v72);
          }
          if (v77 == v80 || v77 + v76 == (unsigned __int16)v72) {
            goto LABEL_95;
          }
          v75 += 2;
          int v73 = *(unsigned __int8 *)(a3 + v75 + 2172);
        }
        while (v73 != 255);
        if (v74 == 1) {
          goto LABEL_101;
        }
        if (!v74)
        {
LABEL_76:
          int v57 = v56;
LABEL_101:
          int v58 = v89;
          continue;
        }
      }
LABEL_95:
      if (SFcorqbr(v13, a3, (uint64_t)&v95, v72, (uint64_t)a1, v94, *(__int16 *)(a3 + 2144), *(__int16 *)(a3 + 2146), *(_DWORD *)(a3 + 2148), HIWORD(*(_DWORD *)(a3 + 2148))) != 10)
      {
        int v13 = a2;
        unsigned int v14 = v92;
        uint64_t v15 = v91;
        unsigned int v51 = v90;
        unsigned int v54 = v87;
        int v53 = v88;
        unsigned int v55 = v86;
        goto LABEL_101;
      }
      int v13 = a2;
      unsigned int v14 = v92;
      uint64_t v15 = v91;
      int v58 = v89;
      unsigned int v51 = v90;
      unsigned int v54 = v87;
      int v53 = v88;
      unsigned int v55 = v86;
      if (*(__int16 *)(a3 + 2132) > 499) {
        return 10;
      }
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v95 + i);
      ++*(_WORD *)(a3 + 2132);
    }
    while (v14 > v60);
  }
  return 10;
}

uint64_t SFcor8qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[148];
  unsigned int v7 = *(unsigned __int16 *)(a3 + 2134);
  uint64_t v8 = *(unsigned __int16 *)(a3 + 2136);
  __int16 v9 = *(_WORD *)(a3 + 2140);
  unsigned int v64 = (unsigned __int16)(*(_WORD *)(a3 + 2138) - 1);
  unsigned __int16 v10 = *(_WORD *)(a3 + 2138) - 1 + v7;
  __int16 v11 = strlen(a1);
  memset(v85, 0, 256);
  memset(v70, 0, sizeof(v70));
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v12 = *((unsigned __int8 *)a1 + 1);
  *((unsigned char *)v70 + v12) = 1;
  uint64_t v13 = *(unsigned __int8 *)a1;
  v85[v13] = 1;
  *((unsigned char *)v70 + *((unsigned __int8 *)a1 + 2)) = 1;
  v85[v12] = 1;
  BYTE14(v71) = 1;
  int v14 = *(unsigned __int8 *)(a3 + 2172);
  if (v14 != 255)
  {
    __int16 v15 = 0;
    do
    {
      if (v14 == v11)
      {
        uint64_t v16 = *(unsigned __int8 *)(a3 + (v15 | 1) + 2172);
        int v17 = *(unsigned __int8 *)(a2[21] + v16);
        uint64_t v18 = *(unsigned __int8 *)(a2[22] + v16);
        int64x2_t v19 = *(unsigned __int8 **)(a2[19] + 8 * v16);
        v85[*v19] = 1;
        if (v17 == 1) {
          int v20 = (unsigned __int8 *)&a1[v18];
        }
        else {
          int v20 = v19 + 1;
        }
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1) {
          break;
        }
        v85[v13] = 1;
        int v20 = *(unsigned __int8 **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v15 | 1) + 2172));
      }
      *((unsigned char *)v70 + *v20) = 1;
      v15 += 2;
      int v14 = *(unsigned __int8 *)(a3 + v15 + 2172);
    }
    while (v14 != 255);
  }
  char v69 = 0;
  int8x16_t v21 = (unsigned __int8 *)(v6 + (unsigned __int16)(v8 + v7));
  int v22 = *v21;
  int v23 = *(unsigned __int8 *)(v6 + v8);
  int v24 = v21[1];
  int v25 = *(unsigned __int8 *)(v8 + v6 + 1);
  uint64_t v26 = *(unsigned __int8 *)(v6 + v64 + 1);
  unsigned int v27 = *(unsigned __int8 *)(v6 + v10 + 1);
  char v65 = *(unsigned char *)(v6 + v64 + 1);
  char v66 = v27;
  if (v7 < 2) {
    return 10;
  }
  int v28 = (unsigned __int16)(v9 - 1);
  unsigned int v63 = v10;
  int v29 = (v24 | (v25 << 8)) - 1;
  int v30 = (v22 | (v23 << 8)) - 1;
  int v31 = (unsigned __int16)(v9 + 255);
  int v32 = 32;
  unsigned __int16 v33 = 1;
  int v34 = 32;
  while (1)
  {
    if ((unsigned __int16)v30 >= (unsigned __int16)v29)
    {
      uint64_t v26 = *(unsigned __int8 *)(v6 + ++v33 + (unint64_t)v64);
      unsigned int v27 = *(unsigned __int8 *)(v6 + v33 + (unint64_t)v63);
      char v65 = *(unsigned char *)(v6 + v33 + (unint64_t)v64);
      char v66 = v27;
      int v30 = v29;
      int v29 = (*(unsigned __int8 *)(v6 + v33 + (unint64_t)(unsigned __int16)(v8 + v7)) | (*(unsigned __int8 *)(v6 + v8 + v33) << 8))
          - 1;
    }
    int v35 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v30 + 1) - 1);
    uint64_t v36 = (v35 + v31);
    BOOL v37 = v35 == 255;
    if (v35 == 255) {
      uint64_t v38 = (unsigned __int16)(v30 + 3) - 2;
    }
    else {
      uint64_t v38 = (v35 + v28);
    }
    if (v37) {
      uint64_t v39 = (unsigned __int16)(v30 + 3) - 1;
    }
    else {
      uint64_t v39 = v36;
    }
    if (v37) {
      int v40 = v30 + 3;
    }
    else {
      int v40 = v30 + 1;
    }
    int v41 = *(unsigned __int8 *)(v6 + v39);
    int v42 = *(unsigned __int8 *)(v6 + v38);
    if (v42) {
      int v32 = v42;
    }
    char v67 = v32;
    if (v41) {
      int v34 = v41;
    }
    char v68 = v34;
    if (v34 == 32)
    {
      if (v32 == 32) {
        int v43 = v27 == 32 ? 1 : 2;
      }
      else {
        int v43 = 3;
      }
    }
    else
    {
      int v43 = 4;
    }
    int v30 = v29;
    if (v85[v26])
    {
      int v30 = v29;
      if (*((unsigned char *)v70 + v27)) {
        break;
      }
    }
LABEL_57:
    if (v7 <= v33) {
      return 10;
    }
  }
  int v44 = *(unsigned __int8 *)(a3 + 2172);
  if (v44 == 255)
  {
LABEL_37:
    if (v43 + 1 == v11)
    {
      __int16 v45 = 0;
      __int16 v46 = 0;
      while (1)
      {
        if (a1[v45] == *(&v65 + v46))
        {
          ++v46;
        }
        else
        {
          if (v43 == v46) {
            goto LABEL_53;
          }
          BOOL v37 = v45 == v46;
          __int16 v46 = v45;
          if (!v37) {
            break;
          }
        }
        ++v45;
      }
    }
    __int16 v47 = 0;
    int v48 = 0;
    while (1)
    {
      int v49 = a1[(__int16)v48];
      int v50 = *(&v65 + v47);
      if (v49 == v50) {
        break;
      }
      if (v49 != 46)
      {
        if (v50 != 46)
        {
          int v30 = v40;
          goto LABEL_57;
        }
        goto LABEL_51;
      }
      ++v48;
LABEL_52:
      if (v43 == v47) {
        goto LABEL_53;
      }
    }
    ++v48;
LABEL_51:
    ++v47;
    goto LABEL_52;
  }
  __int16 v52 = 0;
  while (1)
  {
    unsigned __int16 v53 = v11 - v44;
    if (v53 > 1u) {
      goto LABEL_37;
    }
    int v54 = (__int16)v53;
    if (v53 == 1 && *(unsigned __int8 *)a1 != v26) {
      goto LABEL_37;
    }
    uint64_t v55 = *(unsigned __int8 *)(a3 + (v52 | 1) + 2172);
    uint64_t v56 = a2[21];
    unsigned int v57 = *(unsigned __int8 *)(v56 + v55);
    if (!*(unsigned char *)(v56 + v55)) {
      break;
    }
    int v58 = 0;
    int v59 = 0;
    do
    {
      if (v58 + v54 >= v43) {
        break;
      }
      if (*(&v65 + v58 + v54) != *(unsigned char *)(*(void *)(a2[19] + 8 * v55) + (__int16)v59)) {
        break;
      }
      int v58 = (__int16)++v59;
    }
    while ((__int16)v59 < (int)v57);
    if (v58 + v54 == v43) {
      goto LABEL_53;
    }
    if (v58 == v57) {
      goto LABEL_73;
    }
LABEL_78:
    v52 += 2;
    int v44 = *(unsigned __int8 *)(a3 + v52 + 2172);
    if (v44 == 255) {
      goto LABEL_37;
    }
  }
  if (v43 == v54) {
    goto LABEL_53;
  }
  int v59 = 0;
LABEL_73:
  int v60 = v54 + (__int16)v59;
  if (v60 < v43)
  {
    unint64_t v61 = *(unsigned __int8 *)(a2[22] + v55) - (unint64_t)v57;
    do
    {
      if (*(&v65 + v60) != a1[v61 + v60]) {
        break;
      }
      int v60 = v54 + (__int16)++v59;
    }
    while (v60 < v43);
  }
  if (v60 != v43) {
    goto LABEL_78;
  }
LABEL_53:
  if (*(__int16 *)(a3 + 2132) <= 499)
  {
    for (uint64_t i = 0; i != 4; ++i)
      *(unsigned char *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v65 + i);
    ++*(_WORD *)(a3 + 2132);
    int v30 = v40;
    goto LABEL_57;
  }
  return 10;
}

uint64_t SFcorbr8(void *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, int a6)
{
  if ((a6 | a4) < 0) {
    return 0;
  }
  unsigned __int16 v10 = a1;
  if (a4 < 1)
  {
LABEL_6:
    LOWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    while (*(unsigned __int8 *)(a3 + v11) == *(unsigned __int8 *)(a5 + v11))
    {
      if ((unsigned __int16)a4 == ++v11) {
        goto LABEL_6;
      }
    }
  }
  int v12 = *(unsigned __int8 *)(a2 + 2172);
  if (v12 != 255)
  {
    __int16 v20 = 0;
    unint64_t v21 = a3 + a4 + 1;
    int v22 = a4 + 1;
    int v34 = a4 + 1;
    do
    {
      int v23 = (__int16)(a6 - v12);
      if (v23 > (__int16)v11) {
        break;
      }
      int v24 = *(unint64_t **)(a2 + 32);
      if (v24)
      {
        uint64_t v25 = *(unsigned __int8 *)(a2 + (v20 | 1) + 2172);
        unsigned int v26 = *(unsigned __int8 *)(v10[21] + v25);
        unint64_t v27 = *v24;
        BOOL v28 = v27 > a3 || v21 > v27 + 455;
        if (!v28 && (int)(v26 + v23) <= v22)
        {
          uint64_t v33 = *(unsigned __int8 *)(v10[22] + v25);
          unint64_t v30 = v21;
          int v31 = SLstrncmp((unsigned char *)(a3 + v23), *(unsigned __int8 **)(v10[19] + 8 * v25), v26);
          int v22 = v34;
          unint64_t v21 = v30;
          unsigned __int16 v10 = a1;
          if (!v31)
          {
            int v32 = SLstrcmp((unsigned char *)(a3 + v23 + v26), (unsigned __int8 *)(a5 + v23 + v33));
            int v22 = v34;
            unint64_t v21 = v30;
            unsigned __int16 v10 = a1;
            if (!v32) {
              return 1;
            }
          }
        }
      }
      v20 += 2;
      int v12 = *(unsigned __int8 *)(a2 + v20 + 2172);
    }
    while (v12 != 255);
  }
  if (a6 - 1 != a4)
  {
LABEL_16:
    int v15 = 0;
    unsigned __int16 v16 = 0;
    while (1)
    {
      if (v16 == (unsigned __int16)a6 && (unsigned __int16)v15 == (unsigned __int16)a4) {
        return 1;
      }
      int v17 = *(unsigned __int8 *)(a3 + (__int16)v15);
      int v18 = *(unsigned __int8 *)(a5 + (__int16)v16);
      if (v17 == v18) {
        break;
      }
      if (v17 != 46)
      {
        if (v18 != 46) {
          return 0;
        }
        goto LABEL_24;
      }
      ++v15;
LABEL_25:
      if (a6 < (__int16)v16) {
        return 0;
      }
    }
    ++v15;
LABEL_24:
    ++v16;
    goto LABEL_25;
  }
  unsigned __int16 v13 = 0;
  LOWORD(v14) = 0;
  while ((unsigned __int16)v14 != (unsigned __int16)a6 || v13 != (unsigned __int16)a4)
  {
    if (*(unsigned __int8 *)(a3 + (__int16)v13) == *(unsigned __int8 *)(a5 + (__int16)v14))
    {
      ++v13;
    }
    else if (v13 != (unsigned __int16)v14)
    {
      goto LABEL_16;
    }
    int v14 = (__int16)(v14 + 1);
    if (v14 > a6) {
      goto LABEL_16;
    }
  }
  return 1;
}

uint64_t SFcorbru(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, unsigned __int16 a6, unsigned int a7, unsigned int a8, int a9, __int16 a10)
{
  __int16 v13 = 0;
  int v14 = a10;
  unsigned int v79 = (unsigned __int16)a7 + 0xFFFF;
  uint64_t v73 = a1[7];
  unsigned int v72 = (unsigned __int16)a8 + 0xFFFF;
  int v74 = HIWORD(v79) & HIWORD(v72);
  unsigned int v75 = HIWORD(v79) & (((unsigned __int16)a9 + 0xFFFF) >> 16);
LABEL_2:
  char v15 = 0;
  uint64_t v16 = -(uint64_t)v13;
  int v17 = (__int16)(a4 - a6);
  if (v17 >= 0) {
    int v18 = (__int16)(a4 - a6);
  }
  else {
    int v18 = -v17;
  }
  char v19 = 1;
  int v76 = v18;
  while (1)
  {
    int v20 = (__int16)a6;
    int v21 = (__int16)a4;
    if ((a6 & 0x8000) != 0 || (a4 & 0x8000) != 0)
    {
      if ((v19 & (v13 != 0)) != 1) {
        return 0;
      }
      goto LABEL_108;
    }
    if (v18 > v14)
    {
      if ((v19 & (v13 != 0)) == 0) {
        return 0;
      }
      goto LABEL_108;
    }
    LOWORD(v22) = 0;
    BOOL v23 = a4 != 0;
    BOOL v24 = a6 != 0;
    if (a4 && a6)
    {
      LOWORD(v22) = 0;
      while (*(unsigned __int8 *)(a3 + (unsigned __int16)v22) == *(unsigned __int8 *)(a5 + (unsigned __int16)v22))
      {
        int v22 = (__int16)(v22 + 1);
        BOOL v24 = v22 < (__int16)a6;
        BOOL v23 = v22 < (__int16)a4;
        if (v22 >= (__int16)a4 || v22 >= (__int16)a6) {
          goto LABEL_21;
        }
      }
      BOOL v23 = 1;
      BOOL v24 = 1;
    }
LABEL_21:
    if (a4 == (unsigned __int16)v22 && a6 == (unsigned __int16)v22) {
      return 1;
    }
    int v25 = (__int16)v22;
    char v81 = v19;
    if (a7)
    {
      if (v23 && v24)
      {
        if (a8)
        {
          unsigned int v26 = (unsigned __int8 *)(a3 + (__int16)v22);
          if ((*(_DWORD *)(v73 + 4 * *v26) & 0x10000000) != 0)
          {
            unint64_t v27 = (unsigned __int8 *)(a5 + v25);
            if ((*(_DWORD *)(v73 + 4 * *v27) & 0x10000000) != 0)
            {
              uint64_t v28 = (uint64_t)(v26 + 1);
              uint64_t v29 = (uint64_t)(v27 + 1);
              WORD2(v71) = a10;
              uint64_t v30 = (__int16)(a4 + ~(_WORD)v25);
              uint64_t v31 = (__int16)(a6 + ~(_WORD)v25);
              LODWORD(v71) = a9;
              uint64_t v33 = (__int16)v79;
              uint64_t v32 = (__int16)v72;
              goto LABEL_42;
            }
          }
        }
        if ((_WORD)a9)
        {
          uint64_t v28 = a3 + v25 + 1;
          uint64_t v29 = a5 + v25 + 1;
          WORD2(v71) = a10;
          WORD1(v71) = HIWORD(a9);
          uint64_t v30 = (__int16)(a4 + ~(_WORD)v25);
          uint64_t v31 = (__int16)(a6 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          uint64_t v32 = a8;
          uint64_t v33 = (__int16)v79;
LABEL_42:
          if (SFcorbru(a1, a2, v28, v30, v29, v31, v33, v32, v71)) {
            return 1;
          }
        }
      }
LABEL_43:
      if ((v15 & 1) == 0)
      {
        uint64_t v42 = v25 + 1;
        if ((int)v42 < v21
          && (int)v42 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2154) != 4)
        {
          unsigned int v68 = 2;
          goto LABEL_110;
        }
        uint64_t v43 = v25 + 2;
        if (v25 + 2 < v21
          && (int)v43 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v43)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2154) != 4)
        {
          unsigned int v68 = 3;
LABEL_110:
          int v14 = a10;
          unint64_t v69 = v25 + (unint64_t)v68;
          a3 += v69;
          a4 = v21 - v69;
          a5 += v69;
          a6 = v20 - v69;
          v13 += v69;
          goto LABEL_2;
        }
      }
      if (v23)
      {
        if (v25 || *(__int16 *)(a2 + 2158) > v21)
        {
          uint64_t v36 = (unsigned __int8 *)(a3 + v25);
          if (*v36 == *(v36 - 1))
          {
            uint64_t v37 = (uint64_t)(v36 + 1);
            uint64_t v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            uint64_t v39 = (__int16)(v20 - v25);
            uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
            uint64_t v41 = a7;
            LODWORD(v71) = a9;
            goto LABEL_65;
          }
        }
        if (v74)
        {
          int v44 = (unsigned __int8 *)(a3 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v44) & 0x10000000) != 0)
          {
            uint64_t v37 = (uint64_t)(v44 + 1);
            uint64_t v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            uint64_t v39 = (__int16)(v20 - v25);
            uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            uint64_t v41 = (__int16)v79;
            uint64_t v47 = (__int16)v72;
            __int16 v45 = a1;
            uint64_t v46 = a2;
            goto LABEL_67;
          }
        }
        if (v75)
        {
          uint64_t v37 = a3 + v25 + 1;
          uint64_t v38 = a5 + v25;
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          uint64_t v39 = (__int16)(v20 - v25);
          uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          uint64_t v41 = (__int16)v79;
LABEL_65:
          __int16 v45 = a1;
          uint64_t v46 = a2;
          uint64_t v47 = a8;
LABEL_67:
          if (SFcorbru(v45, v46, v37, v40, v38, v39, v41, v47, v71)) {
            return 1;
          }
        }
      }
      int v14 = a10;
      if (v24)
      {
        if ((v25 || *(__int16 *)(a2 + 2160) > v20) && (int v48 = (unsigned __int8 *)(a5 + v25), *v48 == *(v48 - 1)))
        {
          uint64_t v49 = a3 + v25;
          int v50 = v48 + 1;
          WORD2(v71) = a10 - 1;
          uint64_t v51 = (__int16)(v21 - v25);
          uint64_t v52 = (__int16)(v20 + ~(_WORD)v25);
          uint64_t v53 = a7;
          LODWORD(v71) = a9;
          int v54 = a1;
          uint64_t v55 = a2;
          uint64_t v56 = a8;
LABEL_76:
          if (SFcorbru(v54, v55, v49, v51, v50, v52, v53, v56, v71)) {
            return 1;
          }
        }
        else if (v74)
        {
          unsigned int v57 = (unsigned __int8 *)(a5 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v57) & 0x10000000) != 0)
          {
            uint64_t v49 = a3 + v25;
            int v50 = v57 + 1;
            WORD2(v71) = a10 - 1;
            uint64_t v51 = (__int16)(v21 - v25);
            uint64_t v52 = (__int16)(v20 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            uint64_t v53 = (__int16)v79;
            uint64_t v56 = (__int16)v72;
            int v54 = a1;
            uint64_t v55 = a2;
            goto LABEL_76;
          }
        }
        if (v75)
        {
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          LOWORD(v71) = a9 - 1;
          if (SFcorbru(a1, a2, a3 + v25, (__int16)(v21 - v25), a5 + v25 + 1, (__int16)(v20 + ~(_WORD)v25), (__int16)v79, a8, v71))return 1; {
        }
          }
      }
      if ((HIWORD(v79) & ((HIWORD(a9) + 0xFFFF) >> 16)) != 0)
      {
        int v58 = *(unsigned __int8 *)(a2 + 2172);
        if (v58 != 255)
        {
          __int16 v59 = 0;
          while (1)
          {
            unsigned int v60 = (__int16)(v20 - v58);
            if (((v20 - v58) & 0x8000) != 0 || (int)v60 > v25)
            {
              if ((int)v60 > v25) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            uint64_t v61 = *(unsigned __int8 *)(a2 + (v59 | 1) + 2172);
            unsigned __int8 v62 = *(unsigned __int8 **)(a1[19] + 8 * v61);
            if (*v62 == *(unsigned __int8 *)(a3 + (unsigned __int16)(v20 - v58))) {
              break;
            }
LABEL_105:
            v59 += 2;
            int v58 = *(unsigned __int8 *)(a2 + v59 + 2172);
            if (v58 == 255) {
              goto LABEL_106;
            }
          }
          unsigned int v63 = *(unsigned __int8 *)(a1[21] + v61);
          if (v63 != 2)
          {
            if (v63 != 3)
            {
              if (v63 != 4)
              {
LABEL_91:
                uint64_t v64 = *(unsigned __int8 *)(a1[22] + v61);
                if (*(_WORD *)(a2 + 2)
                  || (v64 + v60 == v20 ? (char v65 = 1) : (char v65 = 2),
                      *(unsigned __int16 *)(a2 + 2160) == (unsigned __int16)v20
                    ? (BOOL v66 = v20 == v58)
                    : (BOOL v66 = 0),
                      !v66 ? (char v67 = v65) : (char v67 = 4),
                      (v67 & *((unsigned char *)a1 + v61 + 183)) != 0))
                {
                  WORD2(v71) = a10;
                  LODWORD(v71) = a9 - 0x10000;
                  if (SFcorbru(a1, a2, a3 + v60 + v63, (__int16)(v21 - v60 - v63), a5 + v60 + v64, v58 - v64, (__int16)v79, a8, v71))return 1; {
                }
                  }
                goto LABEL_105;
              }
              if (v62[3] != *(unsigned __int8 *)(a3 + v60 + 3)) {
                goto LABEL_105;
              }
            }
            if (v62[2] != *(unsigned __int8 *)(a3 + v60 + 2)) {
              goto LABEL_105;
            }
          }
          if (v62[1] != *(unsigned __int8 *)(a3 + v60 + 1)) {
            goto LABEL_105;
          }
          goto LABEL_91;
        }
      }
LABEL_106:
      char v35 = v81 & (v13 != 0);
      goto LABEL_107;
    }
    if ((!v24 || *(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a5 + (__int16)v22 + 1))
      && (!v23 || *(unsigned __int8 *)(a3 + (__int16)v22 + 1) == *(unsigned __int8 *)(a5 + (__int16)v22)))
    {
      goto LABEL_43;
    }
    if (!(_WORD)v22 && *(__int16 *)(a2 + 2158) <= (__int16)a4) {
      goto LABEL_43;
    }
    uint64_t v34 = (__int16)v22 - 1;
    if (*(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a3 + v34)
      || !(_WORD)v22 && *(__int16 *)(a2 + 2160) <= (__int16)a6)
    {
      goto LABEL_43;
    }
    if (*(unsigned __int8 *)(a5 + (__int16)v22) == *(unsigned __int8 *)(a5 + v34)) {
      goto LABEL_43;
    }
    char v35 = v19 & (v13 != 0);
    int v14 = a10;
LABEL_107:
    uint64_t v16 = -(uint64_t)v13;
    int v18 = v76;
    if ((v35 & 1) == 0) {
      return 0;
    }
LABEL_108:
    char v19 = 0;
    a3 += v16;
    a5 += v16;
    a4 = v13 + v21;
    a6 = v13 + v20;
    char v15 = 1;
  }
}

void sub_20CBB600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t SFcorqbr(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, __int16 a9, __int16 a10)
{
  if (a4 < 1) {
    return 10;
  }
  uint64_t v16 = a1;
  if (a6 < 1)
  {
    LOWORD(v17) = 0;
    BOOL v18 = 0;
    BOOL v19 = 1;
  }
  else
  {
    LOWORD(v17) = 0;
    while (*(unsigned __int8 *)(a3 + (unsigned __int16)v17) == *(unsigned __int8 *)(a5 + (unsigned __int16)v17))
    {
      int v17 = (__int16)(v17 + 1);
      BOOL v18 = v17 < a6;
      BOOL v19 = v17 < a4;
      if (v17 >= a4 || v17 >= a6) {
        goto LABEL_11;
      }
    }
    BOOL v19 = 1;
    BOOL v18 = 1;
  }
LABEL_11:
  uint64_t v21 = a1[7];
  uint64_t v22 = (__int16)v17;
  BOOL v23 = (unsigned __int8 *)(a3 + (__int16)v17);
  uint64_t v24 = *v23;
  if (v24 == 32)
  {
    if (a6 == (__int16)v17) {
      return 10;
    }
  }
  else if (!v19)
  {
    return 10;
  }
  if (!a7) {
    return 11;
  }
  int v25 = a10;
  int v26 = a9;
  uint64_t v27 = (__int16)v17;
  if (v19 && v18)
  {
    if (a8
      && (*(_DWORD *)(v21 + 4 * v24) & 0x10000000) != 0
      && (*(_DWORD *)(v21 + 4 * *(unsigned __int8 *)(a5 + (__int16)v17)) & 0x10000000) != 0)
    {
      uint64_t v108 = v16[7];
      uint64_t v113 = (__int16)v17;
      HIWORD(v87) = a10;
      LOWORD(v87) = 0;
      unsigned int v96 = a7;
      long long v118 = (unsigned __int8 *)(a3 + (__int16)v17);
      long long v101 = v16;
      uint64_t v94 = (__int16)v17;
      int v33 = SFcorqbr(v16, a2, v23 + 1, (__int16)(~(_WORD)v17 + a4), a5 + (__int16)v17 + 1, (__int16)(~(_WORD)v17 + a6), (__int16)(a7 - 1), (__int16)(a8 - 1), v87);
      int v26 = a9;
      uint64_t v21 = v108;
      uint64_t v22 = v113;
      int v25 = a10;
      a7 = v96;
      uint64_t v27 = v94;
      uint64_t v16 = v101;
      BOOL v82 = v33 == 10;
      BOOL v23 = v118;
      if (v82) {
        return 10;
      }
    }
    else if (a9)
    {
      int v28 = (__int16)(~(_WORD)v17 + a4);
      if (v28 < 1) {
        return 10;
      }
      uint64_t v29 = v23 + 1;
      int v30 = (__int16)(~(_WORD)v17 + a6);
      if (v30 < 1)
      {
        LOWORD(v31) = 0;
      }
      else
      {
        LOWORD(v31) = 0;
        while (v29[(unsigned __int16)v31] == *(unsigned __int8 *)(a5 + v22 + 1 + (unsigned __int16)v31))
        {
          int v31 = (__int16)(v31 + 1);
          BOOL v32 = v31 < v28;
          if (v31 >= v28 || v31 >= v30) {
            goto LABEL_33;
          }
        }
      }
      BOOL v32 = 1;
LABEL_33:
      if (v29[(__int16)v31] == 32)
      {
        if ((unsigned __int16)v31 == (unsigned __int16)v30) {
          return 10;
        }
      }
      else if (!v32)
      {
        return 10;
      }
    }
  }
  long long v119 = v23;
  uint64_t v121 = a2;
  unsigned int v122 = a8;
  uint64_t v34 = v22 + 1;
  int v35 = *(unsigned __int8 *)(a5 + v22 + 1);
  if (v24 == v35 && *(unsigned __int8 *)(a3 + v34) == *(unsigned __int8 *)(a5 + v22))
  {
    uint64_t v109 = v21;
    uint64_t v114 = v22;
    HIWORD(v88) = v25;
    LOWORD(v88) = v26;
    int v104 = v26;
    uint64_t v36 = a7;
    long long v102 = v16;
    uint64_t v95 = v27;
    int v97 = v25;
    int v37 = SFcorqbr(v16, v121, v23 + 2, (__int16)(a4 - v22 - 2), a5 + v22 + 2, (__int16)(a6 - v27 - 2), a7, v122, v88);
    int v26 = v104;
    uint64_t v21 = v109;
    uint64_t v22 = v114;
    int v25 = v97;
    a7 = v36;
    uint64_t v27 = v95;
    uint64_t v16 = v102;
    BOOL v82 = v37 == 10;
    BOOL v23 = v119;
    if (v82) {
      return 10;
    }
  }
  uint64_t v38 = v22 + 2;
  if ((int)v22 + 2 > a4) {
    goto LABEL_48;
  }
  if ((int)v38 > a6) {
    goto LABEL_48;
  }
  if (v24 != *(unsigned __int8 *)(a5 + v38)) {
    goto LABEL_48;
  }
  if (*(unsigned __int8 *)(a3 + v34) != v35) {
    goto LABEL_48;
  }
  if (a6 < 3) {
    goto LABEL_48;
  }
  if (a4 < 3) {
    goto LABEL_48;
  }
  if (*(unsigned __int8 *)(a3 + v38) != *(unsigned __int8 *)(a5 + v22)) {
    goto LABEL_48;
  }
  uint64_t v110 = v21;
  uint64_t v115 = v22;
  HIWORD(v89) = v25;
  LOWORD(v89) = v26;
  int v105 = v26;
  uint64_t v39 = a7;
  uint64_t v40 = v16;
  uint64_t v41 = v27;
  int v98 = v25;
  uint64_t result = SFcorqbr(v16, v121, v23 + 3, (__int16)(a4 - v22 - 3), a5 + v22 + 3, (__int16)(a6 - v27 - 3), a7, v122, v89);
  int v26 = v105;
  uint64_t v21 = v110;
  uint64_t v22 = v115;
  int v25 = v98;
  a7 = v39;
  uint64_t v27 = v41;
  uint64_t v16 = v40;
  if (result != 10)
  {
LABEL_48:
    uint64_t v42 = v122;
    if (v19)
    {
      if ((int)v27 >= 1 && (uint64_t v43 = a3 + v27, v24 == *(unsigned __int8 *)(v43 - 1)))
      {
        uint64_t v111 = v21;
        uint64_t v116 = v22;
        HIWORD(v90) = v25;
        LOWORD(v90) = 0;
        int v106 = v26;
        uint64_t v44 = a7;
        long long v103 = v16;
        uint64_t v45 = v27;
        int v99 = v25;
        uint64_t result = SFcorqbr(v16, v121, v43 + 1, (__int16)(~(_WORD)v22 + a4), a5 + v27, (__int16)(a6 - v27), a7, v122, v90);
        int v26 = v106;
        uint64_t v21 = v111;
        uint64_t v22 = v116;
        uint64_t v42 = v122;
        int v25 = v99;
        a7 = v44;
        uint64_t v27 = v45;
        uint64_t v16 = v103;
      }
      else
      {
        if (!v122 || (*(_DWORD *)(v21 + 4 * v24) & 0x10000000) == 0)
        {
          if (v26)
          {
            int v46 = (__int16)(~(_WORD)v22 + a4);
            if (v46 < 1) {
              return 10;
            }
            uint64_t v47 = v119 + 1;
            int v48 = (__int16)(a6 - v27);
            if (v48 < 1)
            {
              LOWORD(v49) = 0;
            }
            else
            {
              LOWORD(v49) = 0;
              while (v47[(unsigned __int16)v49] == *(unsigned __int8 *)(a5 + v22 + (unsigned __int16)v49))
              {
                int v49 = (__int16)(v49 + 1);
                BOOL v50 = v49 < v46;
                if (v49 >= v46 || v49 >= v48) {
                  goto LABEL_111;
                }
              }
            }
            BOOL v50 = 1;
LABEL_111:
            if (v47[(__int16)v49] == 32)
            {
              if ((unsigned __int16)v49 == (unsigned __int16)v48) {
                return 10;
              }
            }
            else if (!v50)
            {
              return 10;
            }
          }
          goto LABEL_64;
        }
        uint64_t v112 = v21;
        uint64_t v117 = v22;
        HIWORD(v91) = v25;
        LOWORD(v91) = 0;
        int v107 = v26;
        unsigned int v100 = a7;
        uint64_t v51 = v16;
        uint64_t v52 = v27;
        int v53 = v25;
        uint64_t result = SFcorqbr(v16, v121, v119 + 1, (__int16)(~(_WORD)v22 + a4), a5 + v22, (__int16)(a6 - v27), (__int16)(a7 - 1), (__int16)(v122 - 1), v91);
        int v26 = v107;
        uint64_t v21 = v112;
        uint64_t v22 = v117;
        uint64_t v42 = v122;
        int v25 = v53;
        a7 = v100;
        uint64_t v27 = v52;
        uint64_t v16 = v51;
      }
      if (result == 10) {
        return result;
      }
    }
LABEL_64:
    if (!v18) {
      goto LABEL_80;
    }
    if ((int)v22 >= 1)
    {
      uint64_t v54 = a5 + v27;
      if (*(unsigned __int8 *)(a5 + v22) == *(unsigned __int8 *)(v54 - 1))
      {
        uint64_t v55 = (unsigned __int8 *)(a3 + v27);
        uint64_t v56 = v54 + 1;
        HIWORD(v92) = v25;
        LOWORD(v92) = 0;
        uint64_t v57 = (__int16)(a4 - v27);
        uint64_t v58 = (__int16)(~(_WORD)v22 + a6);
        uint64_t v59 = v42;
        uint64_t v60 = (__int16)(v42 - 1);
        uint64_t v61 = v16;
        uint64_t v62 = v121;
        __int16 v63 = a7;
        goto LABEL_79;
      }
    }
    if (v42 && (*(_DWORD *)(v21 + 4 * *(unsigned __int8 *)(a5 + v22)) & 0x10000000) != 0)
    {
      uint64_t v56 = a5 + v22 + 1;
      HIWORD(v92) = v25;
      LOWORD(v92) = 0;
      uint64_t v57 = (__int16)(a4 - v27);
      uint64_t v58 = (__int16)(~(_WORD)v22 + a6);
      __int16 v63 = a7;
      a7 = (__int16)(a7 - 1);
      uint64_t v59 = v42;
      uint64_t v60 = (__int16)(v42 - 1);
      uint64_t v61 = v16;
      uint64_t v62 = v121;
      uint64_t v55 = v119;
LABEL_79:
      unint64_t v69 = v16;
      uint64_t v70 = v27;
      int v71 = v25;
      uint64_t result = SFcorqbr(v61, v62, v55, v57, v56, v58, a7, v60, v92);
      uint64_t v42 = v59;
      int v25 = v71;
      LOWORD(a7) = v63;
      uint64_t v27 = v70;
      uint64_t v16 = v69;
      if (result == 10) {
        return result;
      }
      goto LABEL_80;
    }
    if (!v26) {
      goto LABEL_80;
    }
    int v64 = (__int16)(a4 - v27);
    if (v64 >= 1)
    {
      int v65 = (__int16)(~(_WORD)v22 + a6);
      if (v65 < 1)
      {
        LOWORD(v66) = 0;
      }
      else
      {
        LOWORD(v66) = 0;
        while (1)
        {
          LODWORD(v24) = v119[(unsigned __int16)v66];
          if (v24 != *(unsigned __int8 *)(a5 + v22 + 1 + (unsigned __int16)v66)) {
            break;
          }
          uint64_t v67 = (unsigned __int16)v66 + 1;
          int v66 = (__int16)(v66 + 1);
          BOOL v68 = v66 < v64;
          if (v66 >= v64 || v66 >= v65)
          {
            LODWORD(v24) = v119[v67];
            goto LABEL_118;
          }
        }
      }
      BOOL v68 = 1;
LABEL_118:
      if (v24 == 32)
      {
        if ((unsigned __int16)v66 == (unsigned __int16)v65) {
          return 10;
        }
        goto LABEL_80;
      }
      if (v68)
      {
LABEL_80:
        if (!v25) {
          return 11;
        }
        int v72 = *(unsigned __int8 *)(v121 + 2172);
        if (v72 == 255) {
          return 11;
        }
        __int16 v73 = 0;
        __int16 v120 = v25 - 1;
        uint64_t v74 = (__int16)(a7 - 1);
        while (1)
        {
          __int16 v75 = a6 - v72;
          if (v75 < 0) {
            goto LABEL_107;
          }
          if (v75 > (int)v27) {
            goto LABEL_107;
          }
          uint64_t v76 = *(unsigned __int8 *)(v121 + (v73 | 1) + 2172);
          long long v77 = *(unsigned __int8 **)(v16[19] + 8 * v76);
          if (*v77 != *(unsigned __int8 *)(a3 + (unsigned __int16)(a6 - v72))) {
            goto LABEL_107;
          }
          int v78 = *(unsigned __int8 *)(v16[21] + v76);
          int v79 = a4 - v75;
          if (v79 >= v78) {
            int v79 = *(unsigned __int8 *)(v16[21] + v76);
          }
          if (v79 == 2) {
            goto LABEL_94;
          }
          if (v79 == 3) {
            goto LABEL_93;
          }
          if (v79 == 4) {
            break;
          }
LABEL_95:
          uint64_t v80 = *(unsigned __int8 *)(v16[22] + v76);
          if (*(_WORD *)(v121 + 2)
            || (v80 + v75 == a6 ? (char v81 = 1) : (char v81 = 2),
                *(unsigned __int16 *)(v121 + 2160) == (unsigned __int16)a6
              ? (BOOL v82 = a6 == v72)
              : (BOOL v82 = 0),
                !v82 ? (char v83 = v81) : (char v83 = 4),
                (v83 & *((unsigned char *)v16 + v76 + 183)) != 0))
          {
            HIWORD(v93) = v120;
            LOWORD(v93) = 0;
            uint64_t v84 = v42;
            __int16 v85 = v16;
            uint64_t v86 = v27;
            uint64_t result = SFcorqbr(v16, v121, a3 + v75 + *(unsigned __int8 *)(v16[21] + v76), (__int16)(a4 - v75 - v78), a5 + v75 + v80, v72 - v80, v74, v42, v93);
            uint64_t v42 = v84;
            uint64_t v27 = v86;
            uint64_t v16 = v85;
            if (result == 10) {
              return result;
            }
          }
LABEL_107:
          v73 += 2;
          int v72 = *(unsigned __int8 *)(v121 + v73 + 2172);
          uint64_t result = 11;
          if (v72 == 255) {
            return result;
          }
        }
        if (v77[3] != *(unsigned __int8 *)(a3 + v75 + 3)) {
          goto LABEL_107;
        }
LABEL_93:
        if (v77[2] != *(unsigned __int8 *)(a3 + v75 + 2)) {
          goto LABEL_107;
        }
LABEL_94:
        if (v77[1] != *(unsigned __int8 *)(a3 + v75 + 1)) {
          goto LABEL_107;
        }
        goto LABEL_95;
      }
    }
    return 10;
  }
  return result;
}

uint64_t SFcorrec(char *__src, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(__int16 *)(a4 + 42);
  if (*(__int16 *)(a4 + 40) > v4) {
    return 0;
  }
  unsigned int v8 = a2;
  __int16 v9 = *(char **)(*(void *)(a4 + 32) + 16);
  unsigned __int16 v10 = strcpy(v9, __src);
  size_t v11 = strlen(v10);
  *(_WORD *)(a4 + 2160) = v11;
  int v12 = *(__int16 *)(a4 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a3 + 136);
  if (*(unsigned __int8 *)(a4 + 2156) == 255)
  {
    *(unsigned char *)(a4 + 2157) = v13;
    *(unsigned char *)(a4 + 3172) = 0;
  }
  __int16 v78 = 0;
  BOOL v15 = v8 < 2 && v12 == 0;
  int v16 = *(unsigned __int8 *)(a4 + 2156);
  if (v16 == v13)
  {
    LOWORD(v17) = v12;
LABEL_12:
    if ((__int16)v12 < (__int16)v17) {
      SFcorsrt(__src, (__int16)v12, (__int16)(v17 - 1), a3, a4);
    }
    return 0;
  }
  uint64_t v71 = v13;
  int v75 = v4;
  __dst = v9 + 2;
  unsigned int v67 = v8 & 0xFFFFFFFD;
  char v68 = !v15;
  unsigned int v69 = v8;
  int v19 = v12;
  int v66 = v12;
  LOWORD(v17) = v12;
  while (2)
  {
    if (*(unsigned __int8 *)(a4 + 2157) == v16)
    {
      LOWORD(v12) = v19;
      goto LABEL_12;
    }
    int v70 = v19;
    size_t v76 = v11;
    *(unsigned char *)(a4 + 2156) = v16 + 1;
    *(_WORD *)(a4 + 2132) = 0;
    int v20 = (unsigned __int8 *)(*(void *)(a3 + 128) + (char)(v16 + 1));
    *(_WORD *)(a4 + 2152) = *v20;
    uint64_t v21 = &v20[v71];
    int v74 = *v21;
    *(_WORD *)(a4 + 2154) = v74;
    uint64_t v22 = &v21[v71];
    *(_WORD *)(a4 + 2144) = *v22;
    BOOL v23 = &v22[v71];
    *(_WORD *)(a4 + 2146) = *v23;
    uint64_t v24 = &v23[v71];
    *(_WORD *)(a4 + 2148) = *v24;
    int v25 = &v24[v71];
    *(_WORD *)(a4 + 2150) = *v25;
    int v26 = &v25[v71];
    *(_WORD *)(a4 + 2142) = *v26;
    uint64_t v27 = &v26[v71];
    *(_WORD *)(a4 + 2162) = *v27;
    int v28 = &v27[v71];
    *(_WORD *)(a4 + 2164) = *v28;
    uint64_t v29 = &v28[v71];
    *(_WORD *)(a4 + 2166) = *v29;
    int v30 = &v29[v71];
    *(_WORD *)(a4 + 2168) = *v30;
    int v73 = v30[v71];
    if ((v16 + 1) == 2)
    {
      if (*(_WORD *)(a3 + 104) && (__int16)v11 >= 1)
      {
        uint64_t v31 = 0;
        __int16 v32 = 0;
        LOWORD(v33) = *(_WORD *)(a4 + 2170);
        do
        {
          __int16 v34 = 0;
          int v35 = (unsigned __int8 *)&v9[v31];
          do
          {
            if ((int)SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)(((__int16)v33 + v34) >> 1)), v35, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)(((__int16)v33 + v34) >> 1))) >= 0)signed int v33 = ((__int16)v33 + v34) >> 1; {
            else
            }
              __int16 v34 = ((__int16)v33 + v34) >> 1;
          }
          while ((__int16)v33 - v34 > 1);
          LOWORD(v36) = v33 - (*(unsigned __int16 *)(a4 + 2170) == (unsigned __int16)v33);
          int v37 = *(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)v36);
          do
          {
            if (!SLstrncmp(v37, v35, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)v36))
              && v32 <= 999)
            {
              uint64_t v38 = a4 + v32;
              *(unsigned char *)(v38 + 2172) = v76 - v31;
              v32 += 2;
              *(unsigned char *)(v38 + 2173) = v36;
            }
            signed int v36 = (__int16)(v36 + 1);
            signed int v33 = *(__int16 *)(a4 + 2170);
            if (v36 >= v33) {
              break;
            }
            int v37 = *(unsigned char **)(*(void *)(a3 + 160) + 8 * v36);
          }
          while (*v37 <= *v35);
          ++v31;
        }
        while (v31 != (unsigned __int16)v76);
      }
      else
      {
        __int16 v32 = 0;
      }
      uint64_t v39 = a4 + 2172;
      *(unsigned char *)(v39 + v32) = -1;
      *(unsigned char *)(v39 + (__int16)(v32 + 1)) = -1;
    }
    do
    {
      if (*(unsigned char *)(a3 + 55) == 1)
      {
        size_t v40 = v76;
        if (*(unsigned char *)(a4 + 3512))
        {
          if ((v76 & 0x8000) == 0) {
            memmove(__dst, v9, (unsigned __int16)(v76 + 1));
          }
          *(_WORD *)__int16 v9 = 25966;
          size_t v40 = strlen(v9);
          char v41 = 0;
          goto LABEL_41;
        }
        if (*v9 == 110 && v9[1] == 101 && (__int16)v76 >= 3)
        {
          size_t v40 = (v76 - 2);
          strcpy(v9, (const char *)__dst);
          char v41 = 1;
LABEL_41:
          *(unsigned char *)(a4 + 3512) = v41;
        }
      }
      else
      {
        size_t v40 = v76;
      }
      int v42 = (__int16)v40;
      if (*(_WORD *)(a4 + 40)) {
        BOOL v43 = 1;
      }
      else {
        BOOL v43 = (__int16)v40 <= 8;
      }
      if (v43 && *(_WORD *)(a4 + 2148) == 2) {
        *(_WORD *)(a4 + 2148) = 1;
      }
      unsigned int v44 = *(unsigned __int8 *)(a4 + 2156);
      if (v44 == 14 && *(_WORD *)(a4 + 2148) == 1) {
        *(_WORD *)(a4 + 2148) = 0;
      }
      int v45 = *(unsigned __int8 *)(a3 + 55);
      if (v45 != 5 && v45 != 16)
      {
        int v50 = *(unsigned __int16 *)(a4 + 2154);
        if (v50 == 1)
        {
          __int16 v51 = 3;
          goto LABEL_82;
        }
        if (v50 != 8 && *(_WORD *)(a4 + 2142))
        {
          if ((char)v44 < 12)
          {
            __int16 v51 = 1;
LABEL_82:
            *(_WORD *)(a4 + 2142) = v51;
            goto LABEL_58;
          }
          if (v44 <= 0xD)
          {
            __int16 v51 = 2;
            goto LABEL_82;
          }
        }
      }
LABEL_58:
      BOOL v47 = v73 == 0;
      BOOL v48 = v74 == 8;
      size_t v76 = v40;
      if ((__int16)v40 <= 4) {
        BOOL v48 = 0;
      }
      if ((__int16)v40 >= 4) {
        BOOL v47 = 0;
      }
      BOOL v49 = (unsigned __int16)(v40 - 7) < 0xFFFBu && v74 == 7;
      if (!v49 && !v48 && !v47)
      {
        *(void *)(a4 + 120) = "";
        switch(v74)
        {
          case 1:
            SFcor1qd(v9, (void *)a3, a4);
            goto LABEL_90;
          case 2:
          case 7:
            SFcor2qd(v9, (void *)a3, a4);
            goto LABEL_90;
          case 3:
            SFcor3qd(v9, (void *)a3, a4);
            goto LABEL_90;
          case 4:
            goto LABEL_86;
          case 5:
            if (*(unsigned char *)(a4 + 3202) == 1)
            {
LABEL_86:
              if ((v45 - 1) >= 2) {
                SFaccent((unsigned __int8 *)v9, (__int16)v40, a3, (__int16 *)a4);
              }
            }
            else if (SFcorrig(v9, a3, a4) == 10)
            {
              goto LABEL_132;
            }
            break;
          case 6:
            SFcor6qd(v9, (void *)a3, a4);
            goto LABEL_90;
          case 8:
            SFcor8qd(v9, (void *)a3, a4);
            goto LABEL_90;
          default:
LABEL_90:
            *(unsigned char *)(a4 + 4 * *(__int16 *)(a4 + 2132) + 128) = 0;
            int v53 = *(__int16 *)(a4 + 2132);
            if (v53 < 1) {
              break;
            }
            LOWORD(v54) = 0;
LABEL_92:
            int v55 = *(_DWORD *)(a4 + 128 + 4 * (__int16)v54);
            if ((int)SLstrncmp(*(unsigned char **)(a4 + 120), (unsigned __int8 *)(a4 + 4 * (__int16)v54 + 128), 4) > 0) {
              goto LABEL_105;
            }
            *(void *)(a4 + 120) = a4 + 4 * (__int16)v54 + 128;
            int v77 = v55;
            unsigned int v56 = *(unsigned __int8 *)(a3 + 54);
            if (v56 >= 5)
            {
              int v57 = 4;
              do
                *((unsigned char *)&v77 + (__int16)v57++) = 0;
              while ((int)v56 > (__int16)v57);
            }
            int v58 = SFbisrch((uint64_t)&v77, 0, v56 - 1, &v78, a3);
            unsigned int v59 = *(unsigned __int8 *)(a3 + 54);
            if (v59 >= 5)
            {
              int v60 = 4;
              do
                *((unsigned char *)&v77 + (__int16)v60++) = -1;
              while ((int)v59 > (__int16)v60);
              __int16 v61 = SFbisrch((uint64_t)&v77, 0, v59 - 1, &v78, a3);
              v78 += v61 - v58;
            }
            if (*(unsigned char *)(a4 + 3202) == 1) {
              int v62 = PDdecod2((unsigned __int8 *)v9, v42, v58, v78, a3, (unsigned __int16 *)a4);
            }
            else {
              int v62 = SFdecode((unsigned __int8 *)v9, v42, v58, v78, a3, (unsigned __int16 *)a4);
            }
            if (v62 != 8)
            {
              if (*(unsigned __int16 *)(a4 + 40) == (unsigned __int16)v75) {
                break;
              }
LABEL_105:
              int v54 = (__int16)(v54 + 1);
              if (v54 >= v53) {
                break;
              }
              goto LABEL_92;
            }
            return 0;
        }
      }
    }
    while (*(unsigned char *)(a4 + 3512));
    int v17 = *(__int16 *)(a4 + 40);
    if (v69 != 2 || v17 == v75)
    {
      int v12 = *(__int16 *)(a4 + 40);
      if (v17 > (__int16)v70)
      {
        SFcorsrt(__src, (__int16)v70, (__int16)(v17 - 1), a3, a4);
        LOWORD(v17) = *(_WORD *)(a4 + 40);
        int v12 = (unsigned __int16)v17;
      }
    }
    else
    {
      int v12 = v70;
    }
    size_t v11 = v76;
    if ((unsigned __int16)v17 == (unsigned __int16)v75) {
      return 0;
    }
    char v63 = v68;
    if ((__int16)v17 < 1) {
      char v63 = 1;
    }
    if (v63)
    {
      if (v69 != 2) {
        goto LABEL_126;
      }
      goto LABEL_128;
    }
    int v64 = *(char *)(a4 + 2156);
    if (v64 <= 4) {
      char v65 = 8;
    }
    else {
      char v65 = v64 + 4;
    }
    *(unsigned char *)(a4 + 2157) = v65;
LABEL_126:
    if (*(unsigned char *)(a4 + 3172) || v66 >= (__int16)v17)
    {
LABEL_128:
      if (v67 != 1)
      {
        int v16 = *(unsigned __int8 *)(a4 + 2156);
        int v19 = v12;
        if (v16 == v71) {
          goto LABEL_12;
        }
        continue;
      }
      return 1;
    }
    else
    {
LABEL_132:
      uint64_t result = 1;
      *(unsigned char *)(a4 + 3172) = 1;
    }
    return result;
  }
}

uint64_t SFcorrig(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (!*(_WORD *)(a2 + 138)) {
    return 11;
  }
  int v6 = 0;
  unsigned int v7 = *(unsigned __int8 **)(a2 + 144);
  while (1)
  {
    int v8 = SLstrcmp(a1, v7);
    size_t v9 = strlen((const char *)v7);
    if (!v8) {
      break;
    }
    v6 += v9 + 1;
    unsigned int v7 = (unsigned __int8 *)(*(void *)(a2 + 144) + (unsigned __int16)v6);
    if (*(unsigned __int16 *)(a2 + 138) <= (unsigned __int16)v6) {
      return 11;
    }
  }
  size_t v11 = (char *)&v7[v9 + 1];
  int v12 = (__int16)strlen(v11);
  return SFadd1(v11, v12, a3, 1);
}

uint64_t SFcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a5 + 3202) == 1)
  {
    return PDcorsrt(__src, a2, a3, a4, (void *)a5);
  }
  else
  {
    uint64_t v11 = *(void *)(a5 + 3176);
    int v12 = *(char **)(*(void *)(a5 + 32) + 24);
    uint64_t v13 = *(void *)(a5 + 112);
    if (v13 && (int v15 = *(unsigned __int8 *)(v13 + 34), v14 = (const char *)(v13 + 34), v15))
    {
      int v16 = strcpy(v12, v14);
      strcat(v16, __src);
    }
    else
    {
      strcpy(v12, __src);
    }
    uint64_t v17 = *(void *)(a5 + 112);
    if (v17)
    {
      int v19 = *(unsigned __int8 *)(v17 + 44);
      BOOL v18 = (const char *)(v17 + 44);
      if (v19) {
        strcat(v12, v18);
      }
    }
    int v59 = a2;
    if (a2 <= (int)v7)
    {
      uint64_t v60 = *(void *)(a5 + 48);
      uint64_t v61 = *(void *)(a5 + 64);
      LOWORD(v20) = a2;
      uint64_t v21 = *(void *)(a4 + 56);
      do
      {
        uint64_t v22 = v7;
        uint64_t v23 = (__int16)v20;
        uint64_t v24 = (const char *)(v60 + *(__int16 *)(v61 + 2 * (__int16)v20));
        int v25 = strlen(v12);
        int v26 = strlen(v24);
        memset(v63, 0, sizeof(v63));
        memset(v62, 0, sizeof(v62));
        if (v25 << 16 >= 1)
        {
          int v27 = 0;
          __int16 v28 = 0;
          do
          {
            uint64_t v29 = v12[v28];
            if (v29 != v12[v27 + 1])
            {
              if ((*(_DWORD *)(v21 + 4 * v29) & 0x40000000) != 0) {
                unsigned __int8 v30 = v29 + 32;
              }
              else {
                unsigned __int8 v30 = v12[v28];
              }
              ++*((unsigned char *)v63 + v30);
            }
            int v27 = ++v28;
          }
          while ((__int16)v25 > v28);
        }
        int v31 = v26 << 16;
        int v32 = (__int16)v26;
        if (v26 << 16 >= 1)
        {
          int v33 = 0;
          __int16 v34 = 0;
          do
          {
            uint64_t v35 = v24[v34];
            if (v35 != v24[v33 + 1])
            {
              if ((*(_DWORD *)(v21 + 4 * v35) & 0x40000000) != 0) {
                unsigned __int8 v36 = v35 + 32;
              }
              else {
                unsigned __int8 v36 = v24[v34];
              }
              ++*((unsigned char *)v62 + v36);
            }
            int v33 = ++v34;
          }
          while ((__int16)v26 > v34);
        }
        uint64_t v37 = 0;
        int v38 = 0;
        do
        {
          int v39 = *((unsigned __int8 *)v63 + v37) - *((unsigned __int8 *)v62 + v37);
          if (v39)
          {
            if (v39 < 0) {
              int v39 = *((unsigned __int8 *)v62 + v37) - *((unsigned __int8 *)v63 + v37);
            }
            if ((*(_DWORD *)(v21 + 4 * v37) & 0x10000000) != 0) {
              v38 += 2 * v39;
            }
            else {
              v38 += 3 * v39;
            }
          }
          ++v37;
        }
        while (v37 != 256);
        if (v25 << 16 < 1)
        {
          __int16 v42 = 0;
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          __int16 v42 = 0;
          do
          {
            if (v31 >= 1)
            {
              int v43 = 0;
              int v44 = 0;
              do
              {
                int v45 = 0;
                do
                {
                  __int16 v46 = v45;
                  uint64_t v47 = v40 + (uint64_t)(__int16)v45;
                  uint64_t v48 = v43 + (uint64_t)(__int16)v45++;
                }
                while ((int)v48 < v32 && v12[v47] == v24[v48] && (int)v47 < (__int16)v25);
                if (v46 > v42) {
                  __int16 v42 = v46;
                }
                int v43 = (__int16)++v44;
              }
              while (v32 > (__int16)v44);
            }
            int v40 = (__int16)++v41;
          }
          while ((__int16)v25 > (__int16)v41);
        }
        __int16 v51 = v25 - v32;
        if ((__int16)v25 - v32 < 0) {
          __int16 v51 = v32 - v25;
        }
        *(_WORD *)(v11 + 2 * v23) = 2 * v38 + 4 * v51 - v42 + 16 * (v12[(__int16)v25 - 1] != v24[v32 - 1]);
        int v20 = (__int16)(v23 + 1);
        uint64_t v7 = v22;
      }
      while (v20 <= (int)v22);
    }
    if (v59 < (int)v7)
    {
      int v52 = v7 + v59;
      int v53 = v59;
      do
      {
        if (v52 - v53 > v59)
        {
          int v54 = v59;
          __int16 v55 = v59;
          do
          {
            int v56 = v54 + 1;
            if (*(__int16 *)(v11 + 2 * v55) > *(__int16 *)(v11 + 2 * v56))
            {
              uint64_t v57 = *(void *)(a5 + 64);
              __int16 v58 = *(_WORD *)(v57 + 2 * v55);
              *(_WORD *)(v57 + 2 * v55) = *(_WORD *)(v57 + 2 * v56);
              *(_WORD *)(v57 + 2 * v56) = v58;
              LOWORD(v57) = *(_WORD *)(v11 + 2 * v55);
              *(_WORD *)(v11 + 2 * v55) = *(_WORD *)(v11 + 2 * v56);
              *(_WORD *)(v11 + 2 * v56) = v57;
            }
            int v54 = ++v55;
          }
          while (v52 - v53 > v55);
        }
        ++v53;
      }
      while (v53 != v7);
    }
    return 10;
  }
}

uint64_t PRSetEnabledLogTypes()
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"PRLogCorrection", @"com.apple.applespell", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v1 = AppBooleanValue == 0;
  }
  else {
    BOOL v1 = 1;
  }
  uint64_t v2 = !v1;
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogGuessing", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v3 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v3 = 1;
  }
  if (!v3) {
    v2 |= 2uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogCompletion", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v4 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  if (!v4) {
    v2 |= 4uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogAdaptation", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v5 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v5 = 1;
  }
  if (!v5) {
    v2 |= 8uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogAssets", @"com.apple.applespell", &keyExistsAndHasValidFormat)) {
    BOOL v6 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    v2 |= 0x10uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogTimes", @"com.apple.applespell", &keyExistsAndHasValidFormat)) {
    BOOL v7 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    v2 |= 0x20uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogNames", @"com.apple.applespell", &keyExistsAndHasValidFormat)) {
    BOOL v8 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    v2 |= 0x40uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogXPC", @"com.apple.applespell", &keyExistsAndHasValidFormat)) {
    BOOL v9 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    v2 |= 0x80uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogLexicon", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v10 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v10 = 1;
  }
  if (!v10) {
    v2 |= 0x100uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogLanguageModel", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v11 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    BOOL v11 = 1;
  }
  if (v11) {
    uint64_t v12 = v2;
  }
  else {
    uint64_t v12 = v2 | 0x200;
  }
  int v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x263F08850], "defaultManager"), "fileExistsAtPath:", @"/AppleInternal/Applications/TypoTracker.app");
  Boolean keyExistsAndHasValidFormat = 0;
  int v14 = CFPreferencesGetAppBooleanValue(@"PRLogTypology", @"com.apple.applespell", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    int v15 = v14;
  }
  else {
    int v15 = v13;
  }
  if (v15) {
    uint64_t v16 = v12 | 0x400;
  }
  else {
    uint64_t v16 = v12;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogReplacements", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v17 = 1;
  }
  else
  {
    BOOL v17 = keyExistsAndHasValidFormat == 0;
  }
  if (v17) {
    v16 |= 0x800uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogAssetRequests", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v18 = 1;
  }
  else
  {
    BOOL v18 = keyExistsAndHasValidFormat == 0;
  }
  if (v18) {
    v16 |= 0x1000uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogBackground", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v19 = 1;
  }
  else
  {
    BOOL v19 = keyExistsAndHasValidFormat == 0;
  }
  if (v19) {
    v16 |= 0x2000uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogSentenceCorrection", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v20 = 1;
  }
  else
  {
    BOOL v20 = keyExistsAndHasValidFormat == 0;
  }
  if (v20) {
    v16 |= 0x4000uLL;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(@"PRLogContainer", @"com.apple.applespell", &keyExistsAndHasValidFormat))
  {
    BOOL v21 = 1;
  }
  else
  {
    BOOL v21 = keyExistsAndHasValidFormat == 0;
  }
  uint64_t v22 = v16 | 0x10000;
  if (!v21) {
    uint64_t v22 = v16;
  }
  _enabledLogTypes = v22;
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"PRLogToFile", @"com.apple.applespell", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    if (result) {
      _logToFile = 1;
    }
  }
  return result;
}

uint64_t PRLogObject(uint64_t a1)
{
  if (PRLogObject_onceToken != -1) {
    dispatch_once(&PRLogObject_onceToken, &__block_literal_global_0);
  }
  if (a1 > 511)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x8000)
      {
        if (a1 == 0x8000)
        {
          uint64_t v2 = &__PRLogInputAnalytics;
          return *v2;
        }
        if (a1 == 0x10000)
        {
          uint64_t v2 = &__PRLogContainer;
          return *v2;
        }
      }
      else
      {
        if (a1 == 0x2000)
        {
          uint64_t v2 = &__PRLogBackground;
          return *v2;
        }
        if (a1 == 0x4000)
        {
          uint64_t v2 = &__PRLogSentenceCorrection;
          return *v2;
        }
      }
    }
    else if (a1 > 2047)
    {
      if (a1 == 2048)
      {
        uint64_t v2 = &__PRLogReplacements;
        return *v2;
      }
      if (a1 == 4096)
      {
        uint64_t v2 = &__PRLogAssetRequests;
        return *v2;
      }
    }
    else
    {
      if (a1 == 512)
      {
        uint64_t v2 = &__PRLogLanguageModel;
        return *v2;
      }
      if (a1 == 1024)
      {
        uint64_t v2 = &__PRLogTypology;
        return *v2;
      }
    }
LABEL_33:
    uint64_t v2 = &__PRLogGeneral;
    return *v2;
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
      {
        uint64_t v2 = &__PRLogXPC;
        return *v2;
      }
      if (a1 == 256)
      {
        uint64_t v2 = &__PRLogLexicon;
        return *v2;
      }
    }
    else
    {
      if (a1 == 32)
      {
        uint64_t v2 = &__PRLogTimes;
        return *v2;
      }
      if (a1 == 64)
      {
        uint64_t v2 = &__PRLogNames;
        return *v2;
      }
    }
    goto LABEL_33;
  }
  uint64_t v2 = &__PRLogCorrection;
  switch(a1)
  {
    case 1:
      return *v2;
    case 2:
      uint64_t v2 = &__PRLogGuessing;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_33;
    case 4:
      uint64_t v2 = &__PRLogCompletion;
      break;
    case 8:
      uint64_t v2 = &__PRLogAdaptation;
      break;
    default:
      if (a1 != 16) {
        goto LABEL_33;
      }
      uint64_t v2 = &__PRLogAssets;
      break;
  }
  return *v2;
}

os_log_t __PRLogObject_block_invoke()
{
  __PRLogGeneral = (uint64_t)os_log_create("com.apple.ProofReader", "general");
  __PRLogCorrection = (uint64_t)os_log_create("com.apple.ProofReader", "correction");
  __PRLogGuessing = (uint64_t)os_log_create("com.apple.ProofReader", "guessing");
  __PRLogCompletion = (uint64_t)os_log_create("com.apple.ProofReader", "completion");
  __PRLogAdaptation = (uint64_t)os_log_create("com.apple.ProofReader", "adaptation");
  __PRLogAssets = (uint64_t)os_log_create("com.apple.ProofReader", "assets");
  __PRLogTimes = (uint64_t)os_log_create("com.apple.ProofReader", "times");
  __PRLogNames = (uint64_t)os_log_create("com.apple.ProofReader", "names");
  __PRLogXPC = (uint64_t)os_log_create("com.apple.ProofReader", "xpc");
  __PRLogLexicon = (uint64_t)os_log_create("com.apple.ProofReader", "lexicon");
  __PRLogLanguageModel = (uint64_t)os_log_create("com.apple.ProofReader", "language-model");
  __PRLogTypology = (uint64_t)os_log_create("com.apple.ProofReader", "typology");
  __PRLogReplacements = (uint64_t)os_log_create("com.apple.ProofReader", "replacements");
  __PRLogAssetRequests = (uint64_t)os_log_create("com.apple.ProofReader", "asset-requests");
  __PRLogBackground = (uint64_t)os_log_create("com.apple.ProofReader", "background");
  __PRLogSentenceCorrection = (uint64_t)os_log_create("com.apple.ProofReader", "sentence-correction");
  __PRLogInputAnalytics = (uint64_t)os_log_create("com.apple.ProofReader", "input-analytics");
  os_log_t result = os_log_create("com.apple.ProofReader", "container");
  __PRLogContainer = (uint64_t)result;
  return result;
}

void PRLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double Current = CFAbsoluteTimeGetCurrent();
  __uint64_t v20 = 0;
  if ((_enabledLogTypes & a1) != 0)
  {
    double v12 = Current;
    if (PRLog_onceToken != -1) {
      dispatch_once(&PRLog_onceToken, &__block_literal_global_73);
    }
    if (PRLog_fd == -2 && _logToFile != 0)
    {
      int v14 = (const char *)objc_msgSend((id)objc_msgSend((id)_NSSpellingDictDirectoryPath2(), "stringByAppendingPathComponent:", @"prlog.txt"), "UTF8String");
      int v15 = open(v14, 522);
      PRLog_fd = v15;
      if ((v15 & 0x80000000) == 0) {
        fchmod(v15, 0x1B6u);
      }
    }
    BOOL v19 = &a9;
    if (a2) {
      a2 = [[NSString alloc] initWithFormat:a2 locale:0 arguments:v19];
    }
    if (pthread_threadid_np(0, &v20))
    {
      uint64_t v16 = pthread_self();
      __uint64_t v17 = pthread_mach_thread_np(v16);
      __uint64_t v20 = v17;
    }
    else
    {
      __uint64_t v17 = v20;
    }
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __PRLog_block_invoke_2;
    block[3] = &unk_2640EF808;
    block[4] = a2;
    *(double *)&block[5] = v12;
    block[6] = v17;
    dispatch_async((dispatch_queue_t)PRLog__queue, block);
  }
}

void __PRLog_block_invoke()
{
  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
  BOOL v1 = dispatch_queue_create("com.apple.ProofReader.loggingBackgroundQueue", v0);
  PRLog__queue = (uint64_t)v1;
  global_queue = dispatch_get_global_queue(9, 0);
  dispatch_set_target_queue(v1, global_queue);
}

void __PRLog_block_invoke_2(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x210556730]();
  uint64_t v2 = (const char *)[*(id *)(a1 + 32) UTF8String];
  BOOL v3 = v2;
  if (v2) {
    size_t v4 = strlen(v2);
  }
  else {
    size_t v4 = 0;
  }
  __s = 0;
  time_t v20 = vcvtmd_s64_f64(*(double *)(a1 + 40) + *MEMORY[0x263EFFAF8]);
  memset(&v19, 0, sizeof(v19));
  localtime_r(&v20, &v19);
  int v5 = v19.tm_year + 1900;
  int v6 = v19.tm_mon + 1;
  int tm_hour = v19.tm_hour;
  int tm_mday = v19.tm_mday;
  int tm_sec = v19.tm_sec;
  int tm_min = v19.tm_min;
  unsigned int v11 = vcvtmd_s64_f64(modf(*(long double *)(a1 + 40), &__y) * 1000.0);
  pid_t v12 = getpid();
  asprintf(&__s, "%04d-%02d-%02d %02d:%02d:%02d.%03d AppleSpell[%d:%llu] ", v5, v6, tm_mday, tm_hour, tm_min, tm_sec, v11, v12, *(void *)(a1 + 48));
  int v13 = __s;
  v23[0] = __s;
  if (__s) {
    size_t v14 = strlen(__s);
  }
  else {
    size_t v14 = 0;
  }
  v23[1] = v14;
  v23[2] = v3;
  if (v3)
  {
    size_t v24 = strlen(v3);
    int v25 = "\n";
    if (v4)
    {
      BOOL v15 = v3[v4 - 1] != 10;
      goto LABEL_12;
    }
  }
  else
  {
    size_t v24 = 0;
    int v25 = "\n";
  }
  BOOL v15 = 1;
LABEL_12:
  BOOL v26 = v15;
  if (__s) {
    int v16 = 2;
  }
  else {
    int v16 = 1;
  }
  int v17 = v15 + v16;
  if ((PRLog_fd & 0x80000000) == 0)
  {
    writev(PRLog_fd, (const iovec *)&v23[2 * (__s == 0)], v17);
    int v13 = (char *)v23[0];
  }
  writev(2, (const iovec *)&v23[2 * (v13 == 0)], v17);
  if (__s) {
    free(__s);
  }
}

void sub_20CBB9138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

uint64_t SFdecbit(int a1, int a2, int a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) = 0;
  *(unsigned char *)(*(void *)(a6 + 3528) + a3) = 0;
  *(unsigned char *)(*(void *)(a6 + 3536) + a3) = 0;
  uint64_t v6 = a3;
  *(unsigned char *)(*(void *)(a6 + 3496) + a3) = 0;
  switch(a4[3] & 3)
  {
    case 1:
      uint64_t v9 = *(void *)(a6 + 3520);
      __int16 v10 = *(_WORD *)(v9 + 2 * a3) | 0x800;
      break;
    case 2:
      uint64_t v9 = *(void *)(a6 + 3520);
      __int16 v10 = *(_WORD *)(v9 + 2 * a3) | 0x400;
      break;
    case 3:
      uint64_t v9 = *(void *)(a6 + 3520);
      __int16 v10 = *(_WORD *)(v9 + 2 * a3) | 0x4000;
      break;
    default:
      uint64_t v9 = *(void *)(a6 + 3520);
      __int16 v10 = *(_WORD *)(v9 + 2 * a3) & 0xF3FF;
      break;
  }
  *(_WORD *)(v9 + 2 * a3) = v10;
  switch(a4[6] & 3)
  {
    case 1:
      __int16 v11 = v10 | 0x1000;
      break;
    case 2:
      __int16 v11 = v10 | 0x2000;
      break;
    default:
      __int16 v11 = v10 & 0xCFFF;
      break;
  }
  *(_WORD *)(v9 + 2 * a3) = v11;
  if (*(_WORD *)(a5 + 88))
  {
    if (*a4)
    {
      v11 |= 0x200u;
      *(_WORD *)(v9 + 2 * a3) = v11;
    }
    unsigned int v12 = a4[1];
    if (v12 >= 0x40)
    {
      v11 |= 4u;
      *(_WORD *)(v9 + 2 * a3) = v11;
      unsigned int v12 = a4[1];
    }
    switch((v12 >> 3) & 3)
    {
      case 1u:
        __int16 v13 = v11 | 8;
        break;
      case 2u:
        __int16 v13 = v11 | 2;
        break;
      case 3u:
        __int16 v13 = v11 | 0xA;
        break;
      default:
        __int16 v13 = v11 & 0xFFF5;
        break;
    }
    *(_WORD *)(v9 + 2 * a3) = v13;
    char v18 = a4[1];
    if ((v18 & 6) != 0)
    {
      v13 |= 0x100u;
      *(_WORD *)(v9 + 2 * a3) = v13;
      char v18 = a4[1];
    }
    if (v18)
    {
      v13 |= 1u;
      *(_WORD *)(v9 + 2 * a3) = v13;
    }
    unsigned int v19 = (char)a4[4];
    if ((v19 & 0x80000000) != 0)
    {
      *(_WORD *)(v9 + 2 * a3) = v13 | 0x40;
      unsigned int v19 = a4[4];
    }
    *(unsigned char *)(*(void *)(a6 + 3528) + a3) = (v19 >> 1) & 0x3F;
    *(unsigned char *)(*(void *)(a6 + 3536) + a3) = a4[4] << 7;
    *(unsigned char *)(*(void *)(a6 + 3536) + a3) |= (a4[5] >> 1) & 0x7C;
    *(unsigned char *)(*(void *)(a6 + 3536) + a3) |= (a4[5] >> 1) & 3;
    if ((a4[5] & 1) == 0) {
      goto LABEL_42;
    }
    if (a2 == 6)
    {
      __int16 v20 = 32;
    }
    else
    {
      if (a2 != 11)
      {
LABEL_42:
        if ((a4[6] & 4) != 0) {
          *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) |= 0x10u;
        }
        if (a1)
        {
          if ((*(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) & 0x60) != 0)
          {
            *(void *)(a6 + 3480) = 0;
            *(_DWORD *)(a6 + 3480 + 4 * ((unsigned __int16)(a1 - 1) >> 5)) |= 1 << -(char)a1;
          }
          else
          {
            *(unsigned char *)(*(void *)(a6 + 3496) + a3) = a1;
          }
        }
        goto LABEL_55;
      }
      __int16 v20 = 128;
    }
    *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) |= v20;
    goto LABEL_42;
  }
  size_t v14 = *(_WORD **)(a6 + 112);
  if (*v14)
  {
    int v15 = (a4[1] >> 3) & 7;
    if (a2 != 12) {
      LOWORD(v15) = 16 * v15;
    }
    v14[31] = v15;
    switch((a4[1] >> 1) & 3)
    {
      case 1:
        uint64_t v16 = *(void *)(a6 + 3496);
        char v17 = *(unsigned char *)(v16 + a3) | 0x10;
        break;
      case 2:
        uint64_t v16 = *(void *)(a6 + 3496);
        char v17 = *(unsigned char *)(v16 + a3) | 0x20;
        break;
      default:
        uint64_t v16 = *(void *)(a6 + 3496);
        char v17 = *(unsigned char *)(v16 + a3) & 0xCF;
        break;
    }
    *(unsigned char *)(v16 + a3) = v17;
    uint64_t v21 = *(void *)(a6 + 112);
    int v22 = *(unsigned __int16 *)(v21 + 62);
    int v23 = v22 | (a4[4] >> 1) & 0xF;
    *(_WORD *)(v21 + 62) = v22 | (a4[4] >> 1) & 0xF;
    if (a2 == 8 && (a4[4] & 1) != 0) {
      *(_WORD *)(v21 + 62) = v23 | 0x80;
    }
    SFcltdb(a5, a6);
    *(unsigned char *)(*(void *)(a6 + 3496) + v6) |= a4[5] >> 6;
    *(unsigned char *)(*(void *)(a6 + 3496) + v6) |= (a4[5] >> 1) & 0xC;
    *(unsigned char *)(*(void *)(a6 + 3504) + v6) |= (4 * a4[5]) & 0x18;
    *(unsigned char *)(*(void *)(a6 + 3504) + v6) |= 4 * (a4[5] & 1);
    int v24 = (a4[6] >> 1) & 2;
    uint64_t v25 = *(void *)(a6 + 3504);
    goto LABEL_54;
  }
  if ((a2 - 1) < 2)
  {
    int v24 = (a4[4] >> 1) & 0x3F;
    uint64_t v25 = *(void *)(a6 + 3496);
LABEL_54:
    *(unsigned char *)(v25 + v6) |= v24;
    goto LABEL_55;
  }
  if (a2 == 15)
  {
    switch(a4[1] & 6)
    {
      case 1:
      case 3:
      case 5:
LABEL_75:
        __break(1u);
        JUMPOUT(0x20CBB9E2CLL);
      case 2:
        uint64_t v30 = *(void *)(a6 + 3496);
        char v31 = *(unsigned char *)(v30 + a3) | 1;
        goto LABEL_68;
      case 4:
        uint64_t v30 = *(void *)(a6 + 3496);
        char v31 = *(unsigned char *)(v30 + a3) | 2;
LABEL_68:
        *(unsigned char *)(v30 + a3) = v31;
        break;
      default:
        *(unsigned char *)(*(void *)(a6 + 3496) + a3) = 0;
        break;
    }
    if ((a4[6] & 4) != 0) {
      *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) |= 0x10u;
    }
    if (a4[1]) {
      *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) |= 1u;
    }
    if (a4[4]) {
      *(_WORD *)(*(void *)(a6 + 3520) + 2 * a3) |= 0x200u;
    }
  }
  else if (a2 == 16)
  {
    switch(a4[1] & 6)
    {
      case 1:
      case 3:
      case 5:
        goto LABEL_75;
      case 2:
        uint64_t v28 = *(void *)(a6 + 3496);
        char v29 = *(unsigned char *)(v28 + a3) | 1;
        goto LABEL_66;
      case 4:
        uint64_t v28 = *(void *)(a6 + 3496);
        char v29 = *(unsigned char *)(v28 + a3) | 2;
LABEL_66:
        *(unsigned char *)(v28 + a3) = v29;
        break;
      default:
        *(unsigned char *)(*(void *)(a6 + 3496) + a3) = 0;
        break;
    }
  }
LABEL_55:
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(a6 + 72) + v6);
  if (*(unsigned __int8 *)(a6 + 88) >= v26 || v26 == 4 || !*(_WORD *)(a6 + 18)) {
    *(_WORD *)(a6 + 18) = *(_WORD *)(*(void *)(a6 + 3520) + 2 * v6);
  }
  return 0;
}

uint64_t SFdecode(unsigned __int8 *a1, int a2, int a3, __int16 a4, uint64_t a5, unsigned __int16 *a6)
{
  if (a2 <= 0 && *a6 != 17) {
    return 11;
  }
  if (a6[1]) {
    return 8;
  }
  return SFicdecode(a1, a2, a3, a4, a5, a6);
}

uint64_t SFicdecode(unsigned __int8 *a1, int a2, int a3, __int16 a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v6 = a1;
  v244[1] = *MEMORY[0x263EF8340];
  v244[0] = 0;
  uint64_t v7 = *a6;
  BOOL v8 = a2 < 25;
  if (v7 != 6) {
    BOOL v8 = 0;
  }
  uint64_t v9 = v7 > 0x63 || v8;
  if (v7 == 6)
  {
    char v225 = 0;
    LOWORD(v208) = a2;
    WORD2(v208) = a6[1732];
  }
  else if (v7 < 0x64)
  {
    uint64_t v208 = 0;
    char v225 = 1;
  }
  else
  {
    char v225 = 0;
    unsigned __int16 v10 = a6[1071];
    LOWORD(v208) = v10 + a2;
    WORD2(v208) = a2 - v10;
  }
  if (v7 == 3) {
    int v11 = -1;
  }
  else {
    int v11 = 0;
  }
  int v236 = v11;
  uint64_t v12 = (v11 & a4);
  if ((v11 & a4) != 0) {
    int v13 = a3 + 1;
  }
  else {
    int v13 = a3;
  }
  int v14 = (__int16)(a4 - (v12 != 0));
  int v15 = *(__int16 *)(a5 + 6);
  if (v15 < 7)
  {
    int v17 = (v7 == 3 || v7 > 0x63) && v15 == 6;
  }
  else
  {
    BOOL v16 = v7 > 0x63 || v7 == 3;
    if (v16) {
      int v17 = *(unsigned char *)(a5 + 8) & 1;
    }
    else {
      int v17 = 0;
    }
  }
  uint64_t v20 = v9;
  if (v14 < 0) {
    return 11;
  }
  uint64_t v215 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v197 = 0;
  uint64_t v24 = *((void *)a6 + 4);
  uint64_t v224 = *(void *)(a5 + 56);
  int v222 = *(unsigned __int8 *)(a5 + 55);
  int v25 = *(__int16 *)(a5 + 2);
  unsigned int v26 = (char *)*((void *)a6 + 1);
  __s1 = *(unsigned __int8 **)v24;
  __dst = *(char **)(v24 + 8);
  int v184 = a6[1077];
  int v185 = *((unsigned __int8 *)a6 + 88);
  int v232 = *(_DWORD *)(a5 + 12) + (__int16)v13 * v25;
  int v27 = *(__int16 *)(a5 + 52);
  uint64_t v28 = &v26[*(__int16 *)(a5 + 2)];
  v214 = v28 - 1;
  v199 = v28 - 2;
  int v220 = a6[1744];
  int v192 = v220 & 0xF;
  uint64_t v186 = (uint64_t)a6 + 3207;
  uint64_t v182 = a2 - 1;
  v183 = &a1[a2];
  uint64_t v181 = a2 - 2;
  int v217 = *(__int16 *)(a5 + 50);
  if ((v217 - 9) >= 3) {
    int v29 = 12;
  }
  else {
    int v29 = *(__int16 *)(a5 + 50);
  }
  int v188 = v29;
  int v189 = 2 * v25;
  uint64_t v241 = *(void *)(a5 + 24);
  uint64_t v239 = *(void *)(a5 + 16);
  __s2 = (unsigned __int8 *)*((void *)a6 + 15);
  uint64_t v216 = (uint64_t)a6;
  unsigned int v211 = v9;
  unsigned int v212 = *a6;
  int v210 = v17;
  int v237 = *(__int16 *)(a5 + 52);
  int v207 = *(__int16 *)(a5 + 2);
  uint64_t v221 = *(void *)(a5 + 32);
  v209 = (char *)*((void *)a6 + 1);
  while (2)
  {
    int v30 = v14;
    if (a6[8] != (unsigned __int16)v13)
    {
      uint64_t v31 = v22;
      uint64_t v32 = v12;
      int v33 = v13;
      uint64_t v34 = v23;
      uint64_t v35 = v21;
      unsigned int v242 = 0;
      if (SLSeek(*(_DWORD *)(a5 + 64), v232, 0) == 8
        || (!SLFRead(*(_DWORD *)(a5 + 64), v25, v26, &v242) ? (BOOL v36 = v242 == v25) : (BOOL v36 = 0), !v36))
      {
        *(_WORD *)(v216 + 16) = 0;
        return 11;
      }
      a6 = (unsigned __int16 *)v216;
      uint64_t v6 = a1;
      uint64_t v20 = v211;
      uint64_t v7 = v212;
      uint64_t v21 = v35;
      uint64_t v23 = v34;
      int v17 = v210;
      int v27 = v237;
      int v13 = v33;
      uint64_t v12 = v32;
      uint64_t v22 = v31;
    }
    a6[8] = v13;
    uint64_t v37 = v214;
    if (v17)
    {
      uint64_t v21 = 0;
      LODWORD(v215) = *v214;
      if (v215 <= 4) {
        int v38 = 3;
      }
      else {
        int v38 = 4;
      }
      uint64_t v37 = v199;
      if (v38 >= a2) {
        LOWORD(v38) = a2;
      }
      WORD2(v215) = v38 + 1;
    }
    __int16 v39 = v13 + 1;
    v232 += v25;
    int v233 = (__int16)v30;
    int v218 = v30 - 1;
    int v219 = v13 + 1;
    if (v26 > v37)
    {
LABEL_54:
      uint64_t v40 = v12;
      goto LABEL_55;
    }
    int v195 = v13;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v240 = 0;
    __int16 v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = 0;
    int v48 = 0;
    int v198 = v39 + 1;
    uint64_t v196 = 4 * v198;
    v238 = v26;
    uint64_t v49 = v221;
    while (1)
    {
      if (v238 > v37) {
        goto LABEL_54;
      }
      int v50 = v47 + v217;
      int v51 = v48 << v50;
      int v52 = v50;
LABEL_60:
      uint64_t v53 = v20;
      uint64_t v54 = v7;
      uint64_t v55 = v46;
      int v56 = (__int16)(v52 - 8);
      uint64_t v57 = v6;
      if (v56 >= 1)
      {
        int v58 = *v238++;
        int v51 = (v58 << (v52 - 8)) | (__int16)v51;
        int v56 = v52 - 16;
      }
      int v59 = __s1;
      int v60 = -v56;
      int v61 = (*v238 >> -(char)v56) | v51;
      if (!(v61 << 16))
      {
        uint64_t v40 = v12;
        uint64_t v7 = v54;
        uint64_t v20 = v53;
        goto LABEL_55;
      }
      int v226 = *v238;
      int v227 = v56;
      uint64_t v62 = v45;
      uint64_t v63 = v41;
      uint64_t v64 = v43;
      uint64_t v65 = v42;
      v235 = v37;
      if (v27 >= (__int16)v61)
      {
        LODWORD(v69) = *(unsigned __int8 *)(v49 + (__int16)v61);
        int v77 = (unsigned char *)(v239
                      + ((__int16)(*(unsigned __int8 *)(v241 + ((2 * v61) & 0xFFFELL) + 1) << 8) | (unint64_t)*(unsigned __int8 *)(v241 + ((2 * v61) & 0xFFFELL))));
        int v70 = __s2;
      }
      else
      {
        uint64_t v66 = v23;
        uint64_t v67 = v21;
        int v68 = 0;
        uint64_t v69 = 0;
        int v70 = __s2;
        do
        {
          while (1)
          {
            unsigned __int16 v71 = 2 * v61;
            unsigned int v72 = *(unsigned __int8 *)(v241 + 2 * (v61 & 0x7FFF));
            if (v27 >= (__int16)v61) {
              break;
            }
            *(_WORD *)&v243[2 * (unsigned __int16)v68 + 256] = *(unsigned __int8 *)(v49 + (__int16)v61) | ((v72 & 0xF) << 8);
            int v61 = (v72 >> 4) | (16 * *(unsigned __int8 *)(v241 + (v71 | 1u)));
            if ((++v68 & 0x8000) != 0) {
              goto LABEL_74;
            }
          }
          int v73 = *(unsigned __int8 *)(v49 + (__int16)v61);
          if (v73)
          {
            int v74 = 0;
            uint64_t v75 = v239 + (__int16)(v72 | (*(unsigned __int8 *)(v241 + (v71 | 1u)) << 8));
            do
            {
              uint64_t v76 = (v69 + 1);
              v243[(__int16)v69] = *(unsigned char *)(v75 + (__int16)v74++);
              LODWORD(v69) = v69 + 1;
            }
            while (v73 > (__int16)v74);
          }
          else
          {
            uint64_t v76 = v69;
          }
          LOWORD(v61) = *(_WORD *)&v243[2 * (__int16)--v68 + 256];
          uint64_t v69 = v76;
        }
        while ((v68 & 0x8000) == 0);
LABEL_74:
        int v77 = v243;
        uint64_t v21 = v67;
        uint64_t v23 = v66;
      }
      int v78 = SFU2MASK[(unsigned __int16)v60];
      uint64_t v42 = v65;
      uint64_t v43 = v64;
      uint64_t v41 = v63;
      uint64_t v45 = v62;
      uint64_t v6 = v57;
      uint64_t v46 = v55;
      uint64_t v7 = v54;
      uint64_t v20 = v53;
      if ((_WORD)v69) {
        break;
      }
LABEL_294:
      __s2 = v70;
      int v48 = v78 & v226;
      uint64_t v40 = v12;
      uint64_t v37 = v235;
      ++v238;
      uint64_t v49 = v221;
      unsigned int v26 = v209;
      int v47 = v227;
      if (v238 > v235) {
        goto LABEL_55;
      }
    }
LABEL_77:
    LODWORD(v69) = v69 - 1;
    switch(v44)
    {
      case 0:
        uint64_t v79 = (unsigned __int16)v21;
        if (v17) {
          int v80 = v21;
        }
        else {
          int v80 = 0;
        }
        if (v17)
        {
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v79 = 0;
          uint64_t v21 = v21;
        }
        char v81 = &v77[v79];
        char v83 = *v81;
        int v77 = v81 + 1;
        char v82 = v83;
        uint64_t v23 = (__int16)(v45 - (v83 & 0x3F));
        if (v240)
        {
          if ((int)v23 > 31)
          {
            int v84 = HIDWORD(v244[0]) & SFU4MASK[v23 & 0x1F];
          }
          else
          {
            int v84 = 0;
            LODWORD(v244[0]) &= SFU4MASK[(int)v23];
          }
          HIDWORD(v244[0]) = v84;
          if (v82 < 0) {
            unsigned int v109 = LODWORD(v244[0]) | 0x80000000;
          }
          else {
            unsigned int v109 = v244[0] & 0x7FFFFFFF;
          }
          LODWORD(v244[0]) = v109;
        }
        else
        {
          v244[0] = (v82 & 0x80) << 24;
        }
        LODWORD(v69) = v69 - v80;
        int v240 = v82 & 0x40;
        __int16 v44 = 1;
        uint64_t v46 = v23;
        goto LABEL_143;
      case 1:
        unsigned int v86 = *v77++;
        uint64_t v85 = v86;
        if (v86 > 7uLL)
        {
          if (v240 && (*(_DWORD *)(v224 + 4 * v85) & 0x40000000) != 0)
          {
            uint64_t v91 = v42;
            LOBYTE(v85) = v85 + 32;
            if ((__int16)v46 <= 63)
            {
              uint64_t v92 = v23;
              *((_DWORD *)v244 + ((unsigned __int16)v46 >> 5)) |= 1 << ~(_BYTE)v46;
              goto LABEL_106;
            }
          }
          else
          {
            uint64_t v91 = v42;
          }
          uint64_t v92 = v23;
LABEL_106:
          v59[(__int16)v46] = v85;
          if ((_WORD)v91) {
            BOOL v93 = 0;
          }
          else {
            BOOL v93 = (unsigned __int16)v46 == (unsigned __int16)v43;
          }
          char v94 = v93;
          if (__int16)v46 < (__int16)v43 || (v94)
          {
            uint64_t v42 = v85 - v6[(__int16)v46];
            uint64_t v46 = (v46 + 1);
            uint64_t v43 = v46;
            uint64_t v23 = v92;
          }
          else
          {
            uint64_t v46 = (v46 + 1);
            uint64_t v23 = v92;
            uint64_t v42 = v91;
          }
          goto LABEL_143;
        }
        v59[(__int16)v46] = 0;
        if ((unsigned __int16)v46 == (unsigned __int16)v43 && !(_WORD)v42)
        {
          uint64_t v42 = -v6[(__int16)v46];
          uint64_t v43 = (v43 + 1);
        }
        if (v12)
        {
          if ((v42 & 0x8000) == 0)
          {
            __s2 = v70;
            uint64_t v12 = 0;
            __int16 v174 = v42;
            int v13 = v195 - 1;
            v232 -= v189;
            if (v174) {
              int v14 = 1;
            }
            else {
              int v14 = 2;
            }
            unsigned int v26 = v209;
LABEL_301:
            int v25 = v207;
            if ((v14 & 0x8000) == 0) {
              continue;
            }
LABEL_313:
            if (v197) {
              return 10;
            }
            return 11;
          }
          if (v233 > 0)
          {
            __s2 = v70;
LABEL_300:
            unsigned int v26 = v209;
            int v14 = v218;
            int v13 = v219;
            goto LABEL_301;
          }
LABEL_147:
          uint64_t v12 = 0;
          __int16 v44 = 2;
          if (!v17 || (__int16)v23 >= (int)(unsigned __int16)v215)
          {
            uint64_t v41 = 0;
            uint64_t v22 = 0;
LABEL_143:
            if (!(_WORD)v69) {
              goto LABEL_294;
            }
            goto LABEL_77;
          }
          if (v7 == 3)
          {
            if (__int16)v43 <= SWORD2(v215) && ((v42 >> 15)) {
              goto LABEL_287;
            }
LABEL_239:
            uint64_t v12 = 0;
            uint64_t v41 = 0;
            uint64_t v22 = 0;
            v235 -= 3;
            __int16 v44 = 2;
            goto LABEL_143;
          }
          if (v7 < 0x64) {
            goto LABEL_239;
          }
          if ((__int16)v23 > 3)
          {
            int v201 = v78;
            unsigned int v204 = v41;
            unsigned int v190 = v45;
            unsigned int __s2a = v43;
            uint64_t v117 = v42;
            uint64_t v118 = v23;
            uint64_t v119 = v21;
          }
          else
          {
            unsigned int v110 = *v59;
            unsigned int v111 = *v70;
            while (1)
            {
              if (v110 <= v111)
              {
                if (v110 != v111) {
                  goto LABEL_227;
                }
                unsigned int v112 = v59[1];
                unsigned int v113 = v70[1];
                if (v112 <= v113)
                {
                  if (v112 != v113) {
                    break;
                  }
                  unsigned int v114 = v59[2];
                  unsigned int v115 = v70[2];
                  if (v114 <= v115 && (v114 != v115 || v59[3] <= v70[3])) {
                    break;
                  }
                }
              }
              unsigned int v116 = v70[4];
              v70 += 4;
              unsigned int v111 = v116;
              if (!v116) {
                goto LABEL_306;
              }
            }
            unsigned int v111 = *v59;
LABEL_227:
            if (v198 < *(__int16 *)(a5 + 48))
            {
              v142 = (unsigned __int8 *)(*(void *)(a5 + 40) + v196);
              unsigned int v143 = *v142;
              if (v111 > v143) {
                goto LABEL_307;
              }
              if (v111 == v143)
              {
                unsigned int v144 = v70[1];
                unsigned int v145 = v142[1];
                if (v144 > v145) {
                  goto LABEL_307;
                }
                if (v144 == v145)
                {
                  unsigned int v146 = v70[2];
                  unsigned int v147 = v142[2];
                  if (v146 > v147 || v146 == v147 && v70[3] > v142[3]) {
                    goto LABEL_307;
                  }
                }
              }
            }
            int v201 = v78;
            unsigned int v204 = v41;
            unsigned int v190 = v45;
            unsigned int __s2a = v43;
            uint64_t v117 = v42;
            uint64_t v118 = v23;
            uint64_t v119 = v21;
            *((void *)a6 + 15) = v70;
          }
          int v148 = (__int16)v46;
          if ((__int16)v46 >= 4) {
            int v148 = 4;
          }
          uint64_t v149 = v46;
          unsigned __int8 v150 = memcmp(__s1, v70, v148);
          uint64_t v46 = v149;
          int v151 = v150;
          int v59 = __s1;
          a6 = (unsigned __int16 *)v216;
          uint64_t v6 = a1;
          uint64_t v20 = v211;
          uint64_t v7 = v212;
          int v17 = v210;
          uint64_t v21 = v119;
          uint64_t v23 = v118;
          int v27 = v237;
          uint64_t v42 = v117;
          uint64_t v43 = __s2a;
          int v78 = v201;
          uint64_t v41 = v204;
          uint64_t v45 = v190;
          if (!v151) {
            goto LABEL_239;
          }
LABEL_287:
          __s2 = v70;
          uint64_t v21 = *v235 - 1;
          if (!*v235)
          {
            uint64_t v12 = 0;
            goto LABEL_300;
          }
          uint64_t v167 = v42;
          unsigned int v168 = *(v235 - 2);
          int v169 = *(v235 - 1) | ((v168 & 3) << 8);
          uint64_t v49 = v221;
          unsigned int v26 = v209;
          int v13 = v219;
          if (!v169)
          {
            uint64_t v12 = 0;
            int v14 = v218;
            goto LABEL_301;
          }
          int v170 = (unsigned __int16)(v169 - 1);
          v238 = &v209[(v188 * v170) >> 3];
          unsigned int v171 = -(v188 * v170) & 7;
          uint64_t v42 = v167;
          if (v171)
          {
            __int16 v172 = *v238++;
            int v173 = (unsigned __int16)(SFU2MASK[v171] & v172);
          }
          else
          {
            int v173 = 0;
          }
          __int16 v44 = 0;
          uint64_t v12 = 0;
          uint64_t v40 = 0;
          uint64_t v37 = v235 - 3;
          uint64_t v45 = v168 >> 2;
          int v52 = v217 - v171;
          int v51 = v173 << (v217 - v171);
          if (v238 > v235 - 3)
          {
LABEL_55:
            uint64_t v12 = v40;
            int v25 = v207;
            int v14 = v218;
            int v13 = v219;
            if (v233 <= 0) {
              goto LABEL_313;
            }
            continue;
          }
          goto LABEL_60;
        }
        if (v7 != 3 || (__int16)v42 < 1) {
          goto LABEL_147;
        }
        if (v197) {
          return 10;
        }
        else {
          return 11;
        }
      case 2:
        unsigned int v87 = *v77++;
        uint64_t v41 = v87 >> 3;
        uint64_t v22 = v22 | ((v87 & 7) << 8);
        __int16 v44 = 3;
        goto LABEL_143;
      case 3:
        int v88 = *v77++;
        __int16 v89 = v22 | v88;
        uint64_t v22 = (v22 | v88) - 1;
        int v90 = (__int16)v46;
        if ((__int16)v46 >= 63) {
          uint64_t v45 = 63;
        }
        else {
          uint64_t v45 = (__int16)v46;
        }
        if (((__int16)v42 & v236) != 0) {
          goto LABEL_100;
        }
        uint64_t v95 = *(void *)(a5 + 80);
        if (!v20) {
          goto LABEL_179;
        }
        if ((__int16)v46 >= 4)
        {
          unsigned int v96 = *v59;
          unsigned int v97 = *v70;
          if (v96 < v97
            || v96 == v97
            && ((unsigned int v98 = v59[1], v99 = v70[1], v98 < v99)
             || v98 == v99
             && ((v100 = v59[2], unsigned int v101 = v70[2], v100 < v101) || v100 == v101 && v59[3] < v70[3])))
          {
LABEL_100:
            __int16 v44 = 0;
LABEL_101:
            int v27 = v237;
            goto LABEL_143;
          }
        }
        if ((__int16)v23 <= 3)
        {
          unsigned int v102 = *v59;
          unsigned int v103 = *v70;
          while (1)
          {
            if (v102 <= v103)
            {
              if (v102 != v103) {
                goto LABEL_170;
              }
              unsigned int v104 = v59[1];
              unsigned int v105 = v70[1];
              if (v104 <= v105)
              {
                if (v104 != v105) {
                  break;
                }
                unsigned int v106 = v59[2];
                unsigned int v107 = v70[2];
                if (v106 <= v107 && (v106 != v107 || v59[3] <= v70[3])) {
                  break;
                }
              }
            }
            unsigned int v108 = v70[4];
            v70 += 4;
            unsigned int v103 = v108;
            if (!v108)
            {
LABEL_306:
              *int v70 = -1;
              goto LABEL_307;
            }
          }
          unsigned int v103 = *v59;
LABEL_170:
          if (v198 < *(__int16 *)(a5 + 48))
          {
            __int16 v120 = (unsigned __int8 *)(*(void *)(a5 + 40) + v196);
            unsigned int v121 = *v120;
            if (v103 > v121
              || v103 == v121
              && ((unsigned int v122 = v70[1], v123 = v120[1], v122 > v123)
               || v122 == v123
               && ((unsigned int v124 = v70[2], v125 = v120[2], v124 > v125) || v124 == v125 && v70[3] > v120[3])))
            {
LABEL_307:
              *((void *)a6 + 15) = v70;
              return 10;
            }
          }
          *((void *)a6 + 15) = v70;
        }
LABEL_179:
        if ((v225 & 1) == 0)
        {
          __int16 v44 = 0;
          if ((__int16)v46 < SWORD2(v208) || (__int16)v46 > (__int16)v208) {
            goto LABEL_101;
          }
        }
        uint64_t v126 = v41;
        long long v127 = (unsigned __int8 *)(v95 - (unsigned __int16)v22 + 8 * (unsigned __int16)v22);
        if (v222 == 6)
        {
          if ((v220 & (8 * *v127) & 0xF0) == 0)
          {
            __int16 v44 = 0;
            int v27 = v237;
            goto LABEL_260;
          }
          int v129 = (v127[6] >> 3) & 0xF;
          unsigned int v223 = v12;
          switch(v129)
          {
            case 3:
              int v128 = 48;
              break;
            case 15:
              int v128 = 32;
              break;
            case 14:
              int v128 = 16;
              break;
            default:
              LOBYTE(v128) = 0;
              goto LABEL_193;
          }
          goto LABEL_192;
        }
        unsigned int v223 = v12;
        if (v222 != 16)
        {
          int v128 = (8 * *v127) & 0xF0;
LABEL_192:
          if ((v128 & v220) == 0) {
            goto LABEL_258;
          }
          goto LABEL_193;
        }
        int v128 = 0;
        switch((v127[6] >> 3) & 7)
        {
          case 1:
            int v128 = 128;
            break;
          case 2:
            goto LABEL_211;
          case 3:
            int v128 = 144;
LABEL_211:
            int v139 = *v127 & 0xF8;
            if (v139 == 8) {
              int v140 = v128;
            }
            else {
              int v140 = v128 | 0x40;
            }
            int v141 = v140 | 0x20;
            if (v139 == 16) {
              v128 |= 0x40u;
            }
            else {
              int v128 = v141;
            }
            break;
          case 4:
            int v128 = 16;
            break;
          default:
            break;
        }
        if ((v128 & v220) == 0) {
          goto LABEL_258;
        }
        switch(v127[2] & 0x1F)
        {
          case 2:
          case 6:
          case 9:
            v128 |= 8u;
            break;
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 0xA:
          case 0xB:
            break;
          case 0xC:
            v128 |= 4u;
            break;
          case 0xD:
            v128 |= 2u;
            break;
          default:
            if ((v127[2] & 0x1F) == 0x13) {
              v128 |= 1u;
            }
            break;
        }
        if ((v128 & 0xF) != 0)
        {
          __int16 v44 = v192 & v128;
          if ((v192 & v128) == 0) {
            goto LABEL_259;
          }
        }
LABEL_193:
        unsigned int v130 = v127[2];
        unsigned int v131 = v130 >> 5;
        if (v7 == 3)
        {
          if ((__int16)a6[51] >= 5) {
            int v132 = 5;
          }
          else {
            int v132 = (__int16)a6[51];
          }
          *(unsigned char *)(*((void *)a6 + 9) + v132) = v131;
          *(void *)(*((void *)a6 + 10) + 8 * v132) = v244[0];
          *(unsigned char *)(*((void *)a6 + 438) + v132) = v128;
          *(_WORD *)(*((void *)a6 + 3) + 2 * v132) = v89;
          int v202 = v78;
          unsigned int v205 = v126;
          uint64_t v193 = v46;
          uint64_t v133 = v21;
          uint64_t v134 = v23;
          uint64_t v135 = v42;
          uint64_t v136 = v45;
          SFdecbit(v126, v222, v132, v127, a5, v216);
          int v78 = v202;
          uint64_t v41 = v205;
          uint64_t v46 = v193;
          uint64_t v45 = v136;
          uint64_t v42 = v135;
          uint64_t v23 = v134;
          int v59 = __s1;
          uint64_t v21 = v133;
          int v17 = v210;
          uint64_t v20 = v211;
          uint64_t v7 = v212;
          uint64_t v6 = a1;
          a6 = (unsigned __int16 *)v216;
          __int16 v44 = 0;
          ++*(_WORD *)(v216 + 102);
          char v197 = 1;
          int v27 = v237;
          uint64_t v12 = v223;
          goto LABEL_143;
        }
        if ((v130 & 0x1F) == 0x12
          || (char)v127[4] < 0
          || v222 == 6 && (v127[5] & 1) != 0 && v130 < 0x20
          || (*v127 & v220 & 7) != 0
          || (v127[1] & 1) != 0)
        {
          goto LABEL_258;
        }
        if (v7 == 5)
        {
          unsigned int v177 = v130 >> 5;
          unsigned int v178 = v42;
          v137 = (unsigned char *)(v95 - (unsigned __int16)v22 + 8 * (unsigned __int16)v22);
          int v203 = v78;
          unsigned int v206 = v126;
          uint64_t v194 = v46;
          unsigned int v191 = v45;
          unsigned int __s2b = v43;
          uint64_t v179 = v23;
          uint64_t v180 = v21;
          v152 = v6;
          v138 = (const char *)v59;
          if (!SLwldcmp((uint64_t)v59, (__int16)v46, v152, a2)) {
            goto LABEL_208;
          }
          goto LABEL_246;
        }
        if (v7 == 6)
        {
          unsigned int v177 = v130 >> 5;
          unsigned int v178 = v42;
          v137 = (unsigned char *)(v95 - (unsigned __int16)v22 + 8 * (unsigned __int16)v22);
          int v203 = v78;
          unsigned int v206 = v126;
          unsigned int v191 = v45;
          unsigned int __s2b = v43;
          uint64_t v179 = v23;
          uint64_t v180 = v21;
          uint64_t v194 = v46;
          v138 = (const char *)v59;
          if (!SFanachk((uint64_t)v59, (unsigned __int16)v46, v186)) {
            goto LABEL_208;
          }
          goto LABEL_246;
        }
        if (v131 == 2)
        {
          __int16 v44 = v185;
          if (!v185) {
            goto LABEL_259;
          }
        }
        int v154 = v70[3];
        if (v154 != 32 && v154 != v59[3]
          || (int v155 = v70[2], v155 != 32) && v155 != v59[2]
          || (int v156 = v70[1], v156 != 32) && v156 != v59[1])
        {
LABEL_258:
          __int16 v44 = 0;
LABEL_259:
          int v27 = v237;
          uint64_t v12 = v223;
LABEL_260:
          uint64_t v41 = v126;
          goto LABEL_143;
        }
        a6[1079] = v46;
        a6[1080] = a2;
        uint64_t v179 = v23;
        uint64_t v180 = v21;
        unsigned int v177 = v131;
        unsigned int v178 = v42;
        unsigned int __s2b = v43;
        int v203 = v78;
        unsigned int v206 = v126;
        unsigned int v191 = v45;
        uint64_t v194 = v46;
        v137 = (unsigned char *)(v95 - (unsigned __int16)v22 + 8 * (unsigned __int16)v22);
        if (v184 == 2)
        {
          if (!a6[1076] && v59[(__int16)v46 - 1] != v6[v182])
          {
            __int16 v44 = 0;
            uint64_t v20 = v211;
            uint64_t v7 = v212;
            int v17 = v210;
LABEL_285:
            int v27 = v237;
            uint64_t v12 = v223;
            uint64_t v42 = v42;
            uint64_t v43 = v43;
            uint64_t v41 = v126;
            uint64_t v45 = v45;
            goto LABEL_143;
          }
          uint64_t v159 = (uint64_t)a6;
          unsigned int v160 = (__int16)a6[1072];
          unsigned int v161 = (__int16)a6[1073];
          *(_WORD *)&v176[4] = a6[1071];
          *(_DWORD *)v176 = *((_DWORD *)a6 + 537);
          uint64_t v163 = (uint64_t)v59;
          v162 = (void *)a5;
          goto LABEL_279;
        }
        if (v184 != 8)
        {
          if (v184 == 7)
          {
            if (a2 < 7
              || (v157 = &__s1[(__int16)v46], *(v183 - 3) != *(v157 - 3))
              || *(v183 - 2) != *(v157 - 2)
              || *(v183 - 1) != *(v157 - 1))
            {
              int v158 = (__int16)a6[1076];
              if (v158 <= 1)
              {
                if (__s1[(__int16)v46 - 1] != v6[v182])
                {
                  __int16 v44 = 0;
                  a6 = (unsigned __int16 *)v216;
                  uint64_t v6 = a1;
                  uint64_t v20 = v211;
                  uint64_t v7 = v212;
                  int v17 = v210;
                  int v59 = __s1;
                  int v27 = v237;
                  uint64_t v12 = v223;
                  uint64_t v42 = v42;
                  uint64_t v43 = v43;
                  uint64_t v41 = v126;
                  uint64_t v45 = v45;
                  goto LABEL_143;
                }
                a6 = (unsigned __int16 *)v216;
                uint64_t v6 = a1;
                if (!v158 && __s1[(__int16)v46 - 2] != a1[v181])
                {
                  __int16 v44 = 0;
                  uint64_t v20 = v211;
                  uint64_t v7 = v212;
                  int v17 = v210;
                  int v59 = __s1;
                  goto LABEL_285;
                }
              }
            }
          }
          uint64_t v159 = (uint64_t)a6;
          unsigned int v160 = (__int16)a6[1072];
          unsigned int v161 = (__int16)a6[1073];
          *(_WORD *)&v176[4] = a6[1071];
          *(_DWORD *)v176 = *((_DWORD *)a6 + 537);
          v162 = (void *)a5;
          uint64_t v163 = (uint64_t)__s1;
LABEL_279:
          uint64_t v164 = (uint64_t)v6;
          v138 = (const char *)v163;
          if (!SFcorbru(v162, v159, v163, v90, v164, a2, v160, v161, *(int *)v176, *(__int16 *)&v176[4])) {
            goto LABEL_208;
          }
          goto LABEL_246;
        }
        unint64_t v165 = (unint64_t)v59;
        uint64_t v166 = (uint64_t)v6;
        v138 = (const char *)v165;
        if (!SFcorbr8((void *)a5, (uint64_t)a6, v165, (__int16)v46, v166, a2))
        {
LABEL_208:
          __int16 v44 = 0;
          a6 = (unsigned __int16 *)v216;
          int v59 = (unsigned __int8 *)v138;
          uint64_t v6 = a1;
          uint64_t v20 = v211;
          uint64_t v7 = v212;
          int v17 = v210;
          uint64_t v23 = v179;
          uint64_t v21 = v180;
          int v27 = v237;
          uint64_t v12 = v223;
          uint64_t v42 = v178;
          uint64_t v43 = __s2b;
          int v78 = v203;
          uint64_t v41 = v206;
          uint64_t v45 = v191;
          uint64_t v46 = v194;
          goto LABEL_143;
        }
LABEL_246:
        strcpy(__dst, v138);
        *(unsigned char *)(*(void *)(v216 + 3504) + *(__int16 *)(v216 + 102)) = v128;
        SFdecbit(v206, v222, 0, v137, a5, v216);
        **(_WORD **)(v216 + 24) = v89;
        int v153 = SFchkwrd(a5, v216, __dst, v90, v177, (uint64_t)v244);
        if (v153 == 10)
        {
          **(unsigned char **)(v216 + 72) = v177;
          **(void **)(v216 + 80) = v244[0];
          *(_WORD *)(v216 + 102) = 1;
          int v27 = v237;
          uint64_t v46 = v194;
          if (*(unsigned __int16 *)(v216 + 40) == *(unsigned __int16 *)(v216 + 42)) {
            return 10;
          }
          a6 = (unsigned __int16 *)v216;
          uint64_t v6 = a1;
          uint64_t v20 = v211;
          uint64_t v7 = v212;
          int v17 = v210;
          uint64_t v23 = v179;
          uint64_t v21 = v180;
          uint64_t v12 = v223;
          uint64_t v42 = v178;
          uint64_t v43 = __s2b;
          uint64_t v45 = v191;
          if (*(unsigned __int16 *)(v216 + 56) <= (unsigned __int16)(*(_WORD *)(v216 + 44) + v194)) {
            return 10;
          }
          __int16 v44 = 0;
          int v59 = __s1;
          int v78 = v203;
          uint64_t v41 = v206;
        }
        else
        {
          __int16 v44 = 0;
          BOOL v16 = v153 == 8;
          a6 = (unsigned __int16 *)v216;
          uint64_t v6 = a1;
          uint64_t v20 = v211;
          uint64_t v7 = v212;
          int v17 = v210;
          uint64_t v23 = v179;
          uint64_t v21 = v180;
          int v59 = __s1;
          int v27 = v237;
          uint64_t v12 = v223;
          uint64_t v42 = v178;
          uint64_t v43 = __s2b;
          int v78 = v203;
          uint64_t v41 = v206;
          uint64_t v45 = v191;
          uint64_t v46 = v194;
          if (v16) {
            return 11;
          }
        }
        goto LABEL_143;
      default:
        goto LABEL_143;
    }
  }
}

uint64_t SFlstini(_WORD *a1, _WORD *a2, unsigned char *a3, _WORD *a4)
{
  *a1 = 0;
  *a2 = 0;
  *a4 = 0;
  *a3 = 0;
  return 10;
}

uint64_t SFmemory(void **a1, int a2, int a3)
{
  if (a3)
  {
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x1004092C2EC0CuLL);
    *a1 = (void *)result;
    if (!result) {
      return result;
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = (char *)malloc_type_calloc(7uLL, a2, 0xF73EFA43uLL);
    if (v7)
    {
      BOOL v8 = &v7[a2 + a2];
      v6[4] = v8;
      v6[5] = &v8[a2];
      uint64_t v9 = &v8[a2 + a2];
      v6[6] = v9;
      unsigned __int16 v10 = &v9[a2];
      v6[2] = v10;
      v6[3] = &v7[a2];
      *uint64_t v6 = v7;
      v6[1] = &v10[a2];
      return 1;
    }
    free(*a1);
    uint64_t result = 0;
    *a1 = 0;
  }
  else
  {
    int v11 = (void **)*a1;
    if (*a1)
    {
      if (*v11) {
        free(*v11);
      }
      free(v11);
      *a1 = 0;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t SFremacc(const char *a1, uint64_t a2, int a3)
{
  int v5 = a1;
  uint64_t v6 = (unsigned __int16)strlen(a1);
  if (v6)
  {
    while (a3 != 8)
    {
      if (a3 != 15)
      {
        uint64_t v8 = *v5;
        int v9 = *(_DWORD *)(a2 + 4 * v8);
LABEL_8:
        if ((~v9 & 0x50000000) != 0 || (v9 & 0x4064000) == 0) {
          goto LABEL_14;
        }
        char v7 = SFchkaccent[v8 - 192];
        goto LABEL_13;
      }
      char v7 = *v5 - ((*(_DWORD *)(a2 + 4 * *v5) & 0x4020000) != 0);
LABEL_13:
      *int v5 = v7;
LABEL_14:
      ++v5;
      if (!--v6) {
        return 0;
      }
    }
    uint64_t v8 = *v5;
    int v9 = *(_DWORD *)(a2 + 4 * v8);
    if ((v9 & 0x40000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  return 0;
}

uint64_t SFwild(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(__int16 *)(a3 + 68) < a2) {
    return 8;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 54);
  int v10 = *(unsigned __int16 *)(a3 + 1192);
  if (*(_WORD *)a4 != 5) {
    *(_WORD *)a4 = 5;
  }
  __int16 v40 = 0;
  if (v9)
  {
    int v11 = 0;
    int v12 = 0;
    int v13 = a1;
    while (1)
    {
      int v14 = *v13;
      if (v9 - 1 == v11 && v10 == 2) {
        break;
      }
      if (v10 == 2)
      {
        if ((v14 + 127) >= 0x1Fu) {
          goto LABEL_18;
        }
        if (v14 != 129) {
          goto LABEL_39;
        }
        int v16 = v13[1];
        if (v16 == 72)
        {
          uint64_t v22 = *(void *)(*(void *)(a4 + 32) + 16);
          uint64_t v23 = (__int16)v12;
          char v20 = 1;
LABEL_50:
          *(unsigned char *)(v22 + v23) = v20;
LABEL_51:
          __int16 v24 = v12 + 1;
          v12 += 2;
          *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v24) = v20;
LABEL_30:
          if ((*v13 & 0xF0) != 0xE0 && (*v13 + 127) >= 0x1Fu) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = 2;
          }
          goto LABEL_37;
        }
        if (v16 != 150)
        {
          LOBYTE(v14) = -127;
LABEL_39:
          if (a2 <= (__int16)v12)
          {
            if (v10 == 2)
            {
              char v20 = 32;
              if ((v14 + 127) < 0x1Fu || (int v21 = v14 & 0xF0, LOBYTE(v14) = 32, v21 == 224))
              {
                uint64_t v22 = *(void *)(*(void *)(a4 + 32) + 16);
                uint64_t v23 = (__int16)v12;
                goto LABEL_50;
              }
            }
            else
            {
              LOBYTE(v14) = 32;
            }
          }
          else if (v10 == 2 && ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0))
          {
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v12) = v14;
            char v20 = v13[1];
            goto LABEL_51;
          }
          goto LABEL_26;
        }
      }
      else if (v14 != 42)
      {
        if (v14 != 63) {
          goto LABEL_39;
        }
LABEL_25:
        LOBYTE(v14) = 1;
LABEL_26:
        __int16 v17 = v12++;
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v17) = v14;
        goto LABEL_29;
      }
LABEL_28:
      while ((int)v9 > (__int16)v12)
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v12++) = 1;
LABEL_29:
      if (v10 == 2) {
        goto LABEL_30;
      }
      uint64_t v19 = 1;
LABEL_37:
      v13 += v19;
      int v11 = (__int16)v12;
      if ((__int16)v12 >= (int)v9) {
        goto LABEL_52;
      }
    }
    int v15 = -1;
    if ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0) {
      goto LABEL_53;
    }
LABEL_18:
    if ((v14 & 0xF0) != 0xE0 && v14 == 63) {
      goto LABEL_25;
    }
    if ((v14 & 0xF0) == 0xE0 || v14 != 42) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
LABEL_52:
  int v15 = 0;
LABEL_53:
  int v25 = SFbisrch(*(void *)(*(void *)(a4 + 32) + 16), 0, v15 + (int)v9 - 1, &v40, a3);
  if (v9 <= a2) {
    int v26 = v9;
  }
  else {
    int v26 = a2;
  }
  if (v26 >= 1)
  {
    int v27 = 0;
    uint64_t v28 = a1;
    while (1)
    {
      int v29 = *v28;
      if ((unsigned __int16)v26 - 1 == (__int16)v27 && v10 == 2) {
        break;
      }
      if (v10 == 2)
      {
        if ((v29 + 127) < 0x1Fu)
        {
          if (v29 != 129) {
            goto LABEL_73;
          }
          int v30 = v28[1];
          if (v30 == 72)
          {
            char v31 = -1;
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27) = -1;
            goto LABEL_76;
          }
          if (v30 != 150)
          {
            LOBYTE(v29) = -127;
LABEL_75:
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27) = v29;
            char v31 = v28[1];
LABEL_76:
            uint64_t v32 = *(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27;
            v27 += 2;
            *(unsigned char *)(v32 + 1) = v31;
LABEL_82:
            if ((*v28 & 0xF0) != 0xE0 && (*v28 + 127) >= 0x1Fu) {
              uint64_t v35 = 1;
            }
            else {
              uint64_t v35 = 2;
            }
            goto LABEL_89;
          }
          goto LABEL_91;
        }
        goto LABEL_69;
      }
      if (v29 != 42)
      {
        if (v29 == 63) {
LABEL_79:
        }
          LOBYTE(v29) = -1;
LABEL_80:
        __int16 v33 = v27++;
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v33) = v29;
        goto LABEL_81;
      }
LABEL_91:
      while ((int)v9 > (__int16)v27)
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27++) = -1;
LABEL_81:
      if (v10 == 2) {
        goto LABEL_82;
      }
      uint64_t v35 = 1;
LABEL_89:
      v28 += v35;
      if ((__int16)v27 >= (__int16)v26) {
        goto LABEL_96;
      }
    }
    if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0) {
      goto LABEL_96;
    }
LABEL_69:
    if ((v29 & 0xF0) != 0xE0 && v29 == 63) {
      goto LABEL_79;
    }
    if ((v29 & 0xF0) == 0xE0 || v29 != 42)
    {
LABEL_73:
      if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0) {
        goto LABEL_75;
      }
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  int v27 = 0;
LABEL_96:
  while ((int)v9 > (__int16)v27)
    *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27++) = 32;
  uint64_t v36 = *(void *)(*(void *)(a4 + 32) + 16);
  uint64_t v37 = v9 - 1;
  if (*(unsigned __int8 *)(v36 + v9 - 1) == 255)
  {
    *(unsigned char *)(v36 + v37) = -2;
    uint64_t v36 = *(void *)(*(void *)(a4 + 32) + 16);
  }
  __int16 v38 = SFbisrch(v36, 0, v37, &v40, a3);
  v40 += v38 - v25;
  __int16 v39 = v40;
  *(_WORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 44) = 0;
  if (*(unsigned char *)(a4 + 3202) == 1) {
    PDdecod2(a1, a2, v25, v39, a3, (unsigned __int16 *)a4);
  }
  else {
    SFdecode(a1, a2, v25, v39, a3, (unsigned __int16 *)a4);
  }
  if (*(_WORD *)(a4 + 40)) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t SFdc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned __int8 *)(a3 + 55);
  uint64_t v8 = SLLngToA(*(unsigned __int8 *)(a3 + 55));
  if (a2 > 64) {
    return 0;
  }
  uint64_t v9 = v8;
  unsigned int v10 = **(unsigned __int8 **)(a4 + 72);
  __strcpy_chk();
  if (v10) {
    SLrecap(v19, a2, v10, *(void *)(a4 + 80), v10, v9);
  }
  char v18 = 0;
  *(_WORD *)__int16 v17 = 0;
  *(_WORD *)(a4 + 18) = 0;
  *(_WORD *)(*(void *)(a4 + 112) + 62) = 0;
  if (v7) {
    uint64_t v11 = 1 << (v7 - 1);
  }
  else {
    LODWORD(v11) = -1;
  }
  if ((v11 & 0x8000) != 0)
  {
    DCengan((uint64_t)v19, v10, v9, v17);
    v17[1] = 0;
    **(unsigned char **)(a4 + 3496) = atoi(v17);
    return 0;
  }
  if ((v11 & 0x994) != 0)
  {
    DCposclt(v7, (uint64_t)v19, a2, v17);
    if ((v11 & 0x814) == 0 || v17[0] != 49) {
      goto LABEL_26;
    }
    DCposcls(v7, (uint64_t)v19, a2, v9, v17);
    v17[1] = 0;
    char v12 = atoi(v17);
    if ((v11 & 0x94) != 0)
    {
      uint64_t v13 = *(void *)(a4 + 112);
      __int16 v14 = 16 * (*(_WORD *)(v13 + 62) | v12 & 7);
    }
    else
    {
      if ((v11 & 0x800) == 0)
      {
LABEL_26:
        if ((v11 & 0x114) != 0)
        {
          PDDCpreclt(v19, v9, v17);
          PDDCprecls(v7, (uint64_t)v17);
          *(_WORD *)(*(void *)(a4 + 112) + 62) |= atoi(v17) & 0xF;
        }
        if ((v11 & 0x80) != 0)
        {
          DCposacc((uint64_t)v19, a2, v9, v17);
          *(_WORD *)(*(void *)(a4 + 112) + 62) |= atoi(v17) & 0xF;
        }
        SFcltdb(a3, a4);
        return 0;
      }
      uint64_t v13 = *(void *)(a4 + 112);
      __int16 v14 = *(_WORD *)(v13 + 62) | v12 & 7;
    }
    *(_WORD *)(v13 + 62) = v14;
    goto LABEL_26;
  }
  if ((v11 & 0x11660) != 0 && *(__int16 *)(a4 + 102) >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      PDDCrmcc(v7, *(unsigned __int8 *)(*(void *)(a4 + 72) + v15), v17);
      if (v17[0] == 49) {
        *(_WORD *)(*(void *)(a4 + 3520) + 2 * v15) |= 8u;
      }
      *(unsigned char *)(*(void *)(a4 + 3528) + v15) = 0;
      *(unsigned char *)(*(void *)(a4 + 3536) + v15) = 0;
      if ((v11 & 0x1060) != 0) {
        *(unsigned char *)(*(void *)(a4 + 3536) + v15) |= PDDCdblend(v7, (uint64_t)v19, v9, a2) & 3;
      }
      ++v15;
    }
    while (v15 < *(__int16 *)(a4 + 102));
  }
  return 0;
}

uint64_t ICcapcod(char *a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 1322) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 3184);
    uint64_t v5 = *(void *)(v4 + 264);
    uint64_t v6 = *(void *)(*(void *)(v4 + 248) + 56);
    int v7 = ICEndToken(a2);
    __int16 v8 = strlen(a1);
    if (*(_WORD *)(v5 + 102))
    {
      uint64_t v40 = v6;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = (_DWORD *)(v5 + 92);
      int v12 = v8;
      while (1)
      {
        unsigned int v13 = *(unsigned __int8 *)(*(void *)(v5 + 72) + v10);
        v41[v10] = v13;
        unsigned int v14 = *(unsigned __int8 *)(v5 + 88);
        if (v13 == 4)
        {
          if (v14 == 1)
          {
            if (!v7) {
              goto LABEL_13;
            }
          }
          else if (v14 == 3 && v7 == 0)
          {
LABEL_13:
            *(void *)(*(void *)(v5 + 80) + 8 * v10) = 0;
            if ((*(_DWORD *)(v5 + 92) & 0x80000000) != 0) {
              *(_WORD *)(a2 + 1322) |= 0x400u;
            }
            unsigned int v13 = 4;
            goto LABEL_16;
          }
          unsigned int v13 = 0;
          v41[v10] = 0;
        }
LABEL_16:
        if ((v14 == 3 || v14 == 0) && v13 == 0 && v7 == 1)
        {
          if ((*v11 & 0x80000000) == 0) {
            *(_WORD *)(a2 + 1322) |= 0x800u;
          }
          unsigned int v13 = 1;
          v41[v10] = 1;
          *(_DWORD *)(*(void *)(v5 + 80) + v9) |= 0x80000000;
        }
        uint64_t result = SLchk((unsigned __int8 *)a1, v12, v14, (int *)(v5 + 92), v13, (_DWORD *)(*(void *)(v5 + 80) + v9));
        if (!result)
        {
          if ((!*(unsigned char *)(a2 + 1414)
             || *(unsigned char *)(v5 + 88) != 3
             || *(unsigned char *)(*(void *)(v5 + 72) + v10) != 3
             || *(_DWORD *)(v5 + 92) == **(_DWORD **)(v5 + 80))
            && (*(unsigned char *)(a2 + 8) != 11
             || *a1 != 39
             || *(unsigned char *)(*(void *)(v5 + 72) + v10)
             || *(unsigned char *)(v5 + 88) != 1))
          {
            SLrecap((unsigned __int8 *)a1, v12, v13, v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
            __int16 v26 = *(_WORD *)(a2 + 1322);
            if ((v26 & 0x40) != 0)
            {
              __int16 v27 = strlen((const char *)(a2 + 3090));
              SLrecap((unsigned __int8 *)(a2 + 3090), v27, v13, v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
              __int16 v26 = *(_WORD *)(a2 + 1322);
            }
            if ((v26 & 0x20) != 0) {
              *(_WORD *)(a2 + 3176) = *(_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 3184) + 232)
            }
                                                                       + 104)
                                                           + 8 * v10)
                                               + 66);
            return 10;
          }
          uint64_t result = 8;
        }
        ++v10;
        v9 += 8;
        if (v10 >= *(unsigned __int16 *)(v5 + 102))
        {
          if (result != 8) {
            return result;
          }
          if (*(unsigned char *)(a2 + 8) == 6 && (*(unsigned char *)(a2 + 1328) & 0x40) != 0) {
            return 11;
          }
          __int16 v20 = strlen(a1);
          SFadd(a1, v20, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
          uint64_t v21 = *(unsigned __int16 *)(v5 + 102);
          if (*(_WORD *)(v5 + 102))
          {
            uint64_t v22 = 0;
            unsigned int v23 = *(unsigned __int8 *)(v5 + 88);
            unsigned __int16 v24 = v21 - 1;
            while (1)
            {
              if (v41[v22] == v23)
              {
                uint64_t v25 = *(void *)(v5 + 80);
                if (v23 != 3 || *(_DWORD *)(v25 + 8 * v22) == *v11)
                {
                  SLrecap((unsigned __int8 *)(a2 + 1690), v12, *(unsigned __int8 *)(v5 + 88), v25 + 8 * v22, *(unsigned __int8 *)(v5 + 88), v40);
                  __int16 v28 = *(_WORD *)(a2 + 1322);
                  if ((v28 & 0x40) == 0) {
                    goto LABEL_76;
                  }
                  __int16 v29 = strlen((const char *)(a2 + 3090));
                  uint64_t v30 = *(void *)(v5 + 80) + 8 * v22;
                  unsigned int v31 = *(unsigned __int8 *)(v5 + 88);
                  int v32 = v29;
                  __int16 v33 = (unsigned __int8 *)(a2 + 3090);
                  unsigned int v34 = v23;
                  goto LABEL_75;
                }
              }
              if (v22 == v21 - 1) {
                break;
              }
              if (++v22 == v21) {
                goto LABEL_78;
              }
            }
            if ((__int16)v21 >= 2)
            {
              if ((v21 & 0xFE) != 0)
              {
                LOBYTE(v24) = v21 - 1;
                uint64_t v35 = (v21 - 1);
                if (v41[v35 - 1] <= v41[v35]) {
                  LOBYTE(v24) = v35 - 1;
                }
                unsigned __int16 v24 = v24;
              }
              else
              {
                unsigned __int16 v24 = 0;
              }
            }
            uint64_t v22 = v24;
            if (v41[v24] <= 1u) {
              int v36 = 1;
            }
            else {
              int v36 = v41[v24];
            }
            if (*(int *)(v5 + 92) >= 0) {
              unsigned int v37 = v41[v24];
            }
            else {
              unsigned int v37 = v36;
            }
            SLrecap((unsigned __int8 *)(a2 + 1690), v12, v37, *(void *)(v5 + 80) + 8 * v24, *(unsigned __int8 *)(v5 + 88), v40);
            __int16 v28 = *(_WORD *)(a2 + 1322);
            if ((v28 & 0x40) != 0)
            {
              __int16 v38 = strlen((const char *)(a2 + 3090));
              uint64_t v30 = *(void *)(v5 + 80) + 8 * v22;
              unsigned int v31 = *(unsigned __int8 *)(v5 + 88);
              int v32 = v38;
              __int16 v33 = (unsigned __int8 *)(a2 + 3090);
              unsigned int v34 = v37;
LABEL_75:
              SLrecap(v33, v32, v34, v30, v31, v40);
              __int16 v28 = *(_WORD *)(a2 + 1322);
            }
LABEL_76:
            if ((v28 & 0x20) != 0) {
              *(_WORD *)(a2 + 3176) = *(_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a2 + 3184) + 232)
            }
                                                                       + 104)
                                                           + 8 * v22)
                                               + 66);
          }
LABEL_78:
          int v39 = *(unsigned __int8 *)(a2 + 8);
          switch(v39)
          {
            case 5:
LABEL_81:
              if ((*(unsigned char *)(a2 + 24) & 0x40) == 0) {
                goto LABEL_86;
              }
              break;
            case 15:
              if (*(unsigned char *)(v5 + 88) != 2 && ((*(unsigned char *)(a2 + 24) & 0x40) == 0 || (*v11 & 0x80000000) == 0)) {
                goto LABEL_86;
              }
              int v39 = 15;
              break;
            case 8:
              goto LABEL_81;
            default:
LABEL_86:
              *(void *)(a2 + 1328) |= 0x400uLL;
              **(_WORD **)(a2 + 3184) |= 4u;
              return 2;
          }
          SFremacc((const char *)(a2 + 1690), v40, v39);
          goto LABEL_86;
        }
      }
    }
  }
  return 10;
}

uint64_t ICEndToken(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *(void *)(*(void *)(v2 + 248) + 56);
  uint64_t v5 = (unsigned char *)(v3 + 65);
  int v6 = strlen((const char *)(v3 + 65));
  signed int v7 = strlen((const char *)(a1 + 1339)) << 16;
  if (!v7 || v7 < 0x20000 && *v5 == 46 || SLstrcmp((unsigned char *)v3, (unsigned __int8 *)(a1 + 1339))) {
    return 2;
  }
  int v10 = v6 << 16;
  if (v6 << 16 >= 1 && (*(_DWORD *)(v4 + 4 * v5[(__int16)v6 - 1]) & 0x800000) != 0)
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + 1417);
    if (!*(unsigned char *)(a1 + 1417))
    {
      unsigned __int8 v8 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + 1417);
    if (!*(unsigned char *)(a1 + 1417)
      || (*(_DWORD *)(v4 + 4 * *(unsigned __int8 *)(strlen((const char *)(a1 + 1417)) + a1 + 1416)) & 0x800000) == 0)
    {
      if (v10 > 0x10000)
      {
        __int16 v12 = 0;
        while ((*(_DWORD *)(v4 + 4 * v5[v12]) & 0x800000) == 0)
        {
          unsigned __int8 v8 = 0;
          if ((__int16)v6 - 1 <= ++v12) {
            return v8;
          }
        }
        unsigned __int8 v8 = 2;
        goto LABEL_28;
      }
      return 0;
    }
  }
  if ((*(_DWORD *)(v4 + 4 * v11) & 0xC00000) != 0) {
    unsigned __int8 v8 = 1;
  }
  else {
    unsigned __int8 v8 = 2;
  }
LABEL_22:
  if (v10 > 0x20000 && v5[(__int16)v6 - 1] == 46 && v5[(__int16)v6 - 3] == 46) {
    unsigned __int8 v8 = 2;
  }
  if (*(unsigned char *)(a1 + 1416) && *(unsigned char *)(a1 + 8) != 16) {
    return 0;
  }
LABEL_28:
  if ((*(_WORD *)(v3 + 132) & 0xC00) != 0 && *v5 == 46) {
    unsigned __int8 v8 = 2;
  }
  if (*(unsigned __int8 *)(a1 + 1414) | *(_DWORD *)(v4 + 4 * *(unsigned __int8 *)(a1 + 1547)) & 0x8000000) {
    return 0;
  }
  return v8;
}

uint64_t ICcchadd(uint64_t a1, unsigned __int16 a2, int a3, int a4, int a5, uint64_t a6)
{
  if (a3 == 3) {
    return 11;
  }
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  char v11 = a2;
  uint64_t v12 = *(void *)(a6 + 3184);
  int v41 = 0;
  uint64_t v13 = *(void *)(v12 + 264);
  unsigned int v14 = a2;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v41 + 1, &v41);
  unsigned int v15 = *(__int16 *)(*(void *)(v13 + 24) + 2 * a4);
  int v16 = *(_DWORD *)(v12 + 24);
  __int16 v17 = v41 & (v16 - 1);
  LOWORD(v41) = v17;
  int v18 = *(__int16 *)(v12 + 20);
  if (v18 < 0)
  {
    LOWORD(v25) = 0;
    LODWORD(v26) = 0;
    goto LABEL_35;
  }
  int v19 = 0;
  __int16 v20 = 0;
  unsigned int v21 = 0;
  LOWORD(v22) = 0;
  __int16 v23 = 3 - BYTE2(v41);
  __int16 v24 = 2 * BYTE2(v41);
  while (1)
  {
    int v25 = v17 >> 13;
    uint64_t v26 = 4 * (v17 & 0x1FFF);
    uint64_t v27 = v12 + 8 * v25;
    uint64_t v30 = *(void *)(v27 + 32);
    __int16 v29 = (uint64_t *)(v27 + 32);
    uint64_t v28 = v30;
    int v31 = *(unsigned __int8 *)(v30 + v26);
    unsigned int v32 = *(unsigned __int8 *)(v30 + (v26 | 1));
    unsigned int v33 = *(unsigned __int8 *)(v30 + v26 + 2);
    int v34 = *(unsigned __int8 *)(v30 + v26 + 3);
    if (v34 == BYTE2(v41)) {
      break;
    }
    if (v19)
    {
      int v19 = 1;
      goto LABEL_17;
    }
    if ((v31 & 0x80) == 0)
    {
      int v19 = 1;
      unsigned int v21 = v26;
      __int16 v20 = v25;
      goto LABEL_17;
    }
    int v19 = 0;
LABEL_25:
    if ((unsigned __int16)v22 != (unsigned __int16)v18)
    {
      do
        v23 += v24;
      while (v16 == v23);
      __int16 v17 = (v41 + v23) & (v16 - 1);
      LOWORD(v41) = v17;
      int v22 = (__int16)(v22 + 1);
      if (v22 <= (__int16)v18) {
        continue;
      }
    }
    goto LABEL_32;
  }
  if ((v33 & 0x7F) == HIBYTE(HIWORD(v41)) && ((v33 >> 7) & 0xFFFFFFF1 | (2 * (v32 & 7))) == (v14 & 0xF))
  {
    if (((v32 >> 4) & 0xFFFFF80F | (16 * (v31 & 0x7F))) != v15)
    {
      *(unsigned char *)(v28 + v26) = v31 | 0x80;
      goto LABEL_17;
    }
    if (a5)
    {
      *(unsigned char *)(v28 + (v26 | 1)) = v32 | 8;
      uint64_t v28 = *v29;
      LOBYTE(v31) = *(unsigned char *)(*v29 + v26);
    }
    *(unsigned char *)(v28 + v26) = v31 | 0x80;
    return 11;
  }
LABEL_17:
  if (v31) {
    BOOL v36 = 0;
  }
  else {
    BOOL v36 = v32 == 0;
  }
  if (!v36 || (v34 | v33) != 0)
  {
    LOWORD(v18) = *(_WORD *)(v12 + 20);
    goto LABEL_25;
  }
  LOBYTE(v31) = 0;
LABEL_32:
  if (v19)
  {
    LOBYTE(v31) = *(unsigned char *)(*(void *)(v12 + 8 * v20 + 32) + v21);
    LODWORD(v26) = v21;
    LOWORD(v25) = v20;
  }
  if ((v31 & 0x80) != 0)
  {
    uint64_t v40 = *(void *)(v12 + 8 * (__int16)v25 + 32);
    *(unsigned char *)(v40 + v26) &= ~0x80u;
    return 11;
  }
LABEL_35:
  uint64_t v38 = v12 + 8 * (__int16)v25;
  *(unsigned char *)(*(void *)(v38 + 32) + v26) = v15 >> 4;
  int v39 = (v14 >> 1) & 7 | (16 * v15);
  if (a5) {
    LOBYTE(v39) = v39 | 8;
  }
  *(unsigned char *)(*(void *)(v38 + 32) + v26 + 1) = v39;
  *(unsigned char *)(*(void *)(v38 + 32) + v26 + 2) = HIBYTE(v41) | (v11 << 7);
  *(unsigned char *)(*(void *)(v38 + 32) + v26 + 3) = BYTE2(v41);
  *(unsigned char *)(*(void *)(v38 + 32) + v26) |= 0x80u;
  return 10;
}

uint64_t ICcchver(uint64_t a1, int a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 3184);
  uint64_t v6 = *(void *)(v5 + 248);
  uint64_t v40 = *(void *)(v6 + 56);
  uint64_t v43 = *(void *)(v5 + 264);
  unsigned int v45 = *(unsigned __int16 *)(v43 + 3488);
  int v46 = 0;
  *a3 = 0;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v46 + 1, &v46);
  int v7 = *(_DWORD *)(v5 + 24);
  __int16 v8 = v7 - 1;
  unsigned __int16 v9 = (v7 - 1) & v46;
  LOWORD(v46) = v9;
  if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
  {
    __int16 v10 = 0;
    LOWORD(v11) = 0;
    __int16 v12 = 3 - BYTE2(v46);
    int v13 = a2 & 0xF;
    __int16 v14 = 2 * BYTE2(v46);
    int v37 = a2;
    uint64_t v15 = (unsigned __int16)a2;
    uint64_t result = 11;
    uint64_t v39 = v6;
    int v38 = v13;
    while (1)
    {
      uint64_t v17 = 4 * (v9 & 0x1FFF);
      uint64_t v18 = v5 + 8 * (v9 >> 13);
      uint64_t v21 = *(void *)(v18 + 32);
      __int16 v20 = (void *)(v18 + 32);
      uint64_t v19 = v21;
      int v22 = (char *)(v21 + v17);
      if (*(unsigned __int8 *)(v21 + v17 + 3) != BYTE2(v46)) {
        goto LABEL_8;
      }
      unsigned int v23 = *(unsigned __int8 *)(v19 + (v17 | 2));
      unsigned int v24 = v22[1];
      if ((v23 & 0x7F) != HIBYTE(HIWORD(v46)) || ((v23 >> 7) & 0xFFFFFFF1 | (2 * (v24 & 7))) != v13) {
        goto LABEL_8;
      }
      if (v10 > 5) {
        return result;
      }
      char v26 = *v22;
      if ((v24 & 8) != 0) {
        *a3 = 1;
      }
      unsigned int v27 = (v24 >> 4) & 0xFFFFF80F | (16 * (v26 & 0x7F));
      if (!v27)
      {
        **(_WORD **)(v43 + 24) = 0;
        *(unsigned char *)(*v20 + 4 * (v9 & 0x1FFF)) |= 0x80u;
        return 10;
      }
      uint64_t v28 = (unsigned __int8 *)(*(void *)(v6 + 80) + 7 * (unsigned __int16)(v27 - 1));
      unsigned int v29 = v28[2];
      if (*(unsigned char *)(v6 + 55) == 16) {
        break;
      }
      int v30 = (8 * *v28) & 0xC0;
      if ((v30 & v45) != 0) {
        goto LABEL_20;
      }
LABEL_10:
      int v11 = (__int16)(v11 + 1);
      if (v11 > *(__int16 *)(v5 + 20)) {
        return result;
      }
    }
    int v30 = 0;
    switch(v28[6] >> 3)
    {
      case 1:
        int v30 = 128;
        break;
      case 2:
        goto LABEL_34;
      case 3:
        int v30 = 144;
LABEL_34:
        int v35 = *v28 & 0xF8;
        int v36 = v30 | 0x40;
        if (v35 != 8) {
          v30 |= 0x40u;
        }
        v30 |= 0x20u;
        if (v35 == 16) {
          int v30 = v36;
        }
        break;
      case 4:
        int v30 = 16;
        break;
      default:
        break;
    }
    switch(v29 & 0x1F)
    {
      case 2u:
      case 6u:
      case 9u:
        v30 |= 8u;
        break;
      case 3u:
      case 4u:
      case 5u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xBu:
        break;
      case 0xCu:
        v30 |= 4u;
        break;
      case 0xDu:
        v30 |= 2u;
        break;
      default:
        if ((v29 & 0x1F) == 0x13) {
          v30 |= 1u;
        }
        break;
    }
    if ((v30 & v45) < 0x10 || (v30 & 0xF) != 0 && (v30 & v45 & 0xF) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    unsigned int v31 = v29 >> 5;
    unsigned int v32 = (void *)(*(void *)(v43 + 80) + 8 * v10);
    void *v32 = 0;
    if (v31 == 1)
    {
      *(_DWORD *)unsigned int v32 = 0x80000000;
    }
    else if (v31 == 2 && v37 >= 1)
    {
      uint64_t v34 = 0;
      do
      {
        if ((*(_DWORD *)(v40 + 4 * *(unsigned __int8 *)(a1 + v34)) & 0x60000040) != 0) {
          *((_DWORD *)v32 + ((unsigned __int16)v34 >> 5)) |= 1 << ~(_BYTE)v34;
        }
        ++v34;
      }
      while (v15 != v34);
    }
    *(unsigned char *)(*(void *)(v43 + 72) + v10) = v31;
    *(unsigned char *)(*(void *)(v43 + 3504) + v10) = v30;
    *(_WORD *)(*(void *)(v43 + 24) + 2 * v10) = v27;
    SFdecbit(0, *(unsigned __int8 *)(a4 + 8), v10++, v28, *(void *)(v5 + 248), v43);
    *(_WORD *)(v43 + 102) = v10;
    *(unsigned char *)(*v20 + v17) |= 0x80u;
    uint64_t result = 10;
    uint64_t v6 = v39;
    __int16 v8 = v7 - 1;
    int v13 = v38;
    if (*a3) {
      return result;
    }
    do
LABEL_8:
      v12 += v14;
    while (v7 == v12);
    unsigned __int16 v9 = (v46 + v12) & v8;
    LOWORD(v46) = v9;
    goto LABEL_10;
  }
  return 11;
}

uint64_t ICclt(char *a1, size_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  uint64_t v6 = *(unsigned __int16 **)(v5 + 112);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 8);
  __int16 v8 = strlen(a1);
  uint64_t v34 = *(void *)(*(void *)(v4 + 248) + 56);
  unsigned __int8 v35 = 0;
  *(_WORD *)(v5 + 3492) &= ~0x100u;
  v6[32] &= ~0x100u;
  v6[33] &= ~0x100u;
  v6[34] &= ~0x100u;
  v6[17] = 0;
  unsigned __int16 v9 = (char *)(v6 + 17);
  uint64_t v10 = *(void *)(*(void *)(a2 + 3184) + 264);
  int v11 = *(_WORD **)(v10 + 112);
  *(_WORD *)(v10 + 3492) &= ~0x80u;
  v11[32] &= ~0x200u;
  v11[33] &= ~0x200u;
  v11[34] &= ~0x200u;
  v11[22] = 0;
  uint64_t v36 = 0;
  int v37 = 0;
  *(void *)(a2 + 1328) &= 0xFFFFFFFFFFFFCBE8;
  v6[31] &= ~0x80u;
  *((unsigned char *)v6 + 92) = 0;
  *((unsigned char *)v6 + 18) = 0;
  v6[16] = 0;
  *((_DWORD *)v6 + 22) = 0;
  v6[34] = 0;
  *((_DWORD *)v6 + 16) = 0;
  if (*(unsigned char *)(a2 + 1415))
  {
    uint64_t v12 = do_trailcheck(a2);
    if (v12) {
      return v12;
    }
    a1[*(__int16 *)(a2 + 1612)] = 0;
    __int16 v13 = *(_WORD *)(a2 + 1612);
  }
  else
  {
    __int16 v13 = v8;
  }
  if (v7 > 0xC || ((1 << v7) & 0x1028) == 0) {
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a2 + 1414))
  {
    if (v7 == 3)
    {
      if (*(unsigned char *)(a2 + 1416))
      {
        uint64_t v12 = do_leadcheck((uint64_t)a1, a2);
        if (v12 != 11) {
          return v12;
        }
      }
      *(_WORD *)(v5 + 42) = 100;
      goto LABEL_15;
    }
LABEL_17:
    *(_WORD *)(v5 + 42) = 100;
LABEL_18:
    uint64_t v14 = ICverify(a1, v13, a2);
    goto LABEL_19;
  }
  uint64_t v12 = do_leadcheck((uint64_t)a1, a2);
  if (v12 != 11) {
    return v12;
  }
  *(_WORD *)(v5 + 42) = 100;
  if (v7 != 3) {
    goto LABEL_18;
  }
LABEL_15:
  if (*(_DWORD *)(v5 + 3472)) {
    uint64_t v14 = middle_dot(a1, v13, a2);
  }
  else {
    uint64_t v14 = middle_dot_ver(a1, v13, a2);
  }
LABEL_19:
  uint64_t v12 = v14;
  if ((v14 & 0xFFFFFFF7) == 2) {
    return v12;
  }
  int v38 = 0;
  if (v7 != 12)
  {
    if (v7 == 8)
    {
      uint64_t v15 = spanish_accentchk(a1, a2, (__int16)v14);
    }
    else
    {
      if ((*(_WORD *)(v5 + 3492) & 0x400) == 0) {
        goto LABEL_26;
      }
      uint64_t v15 = preclitic_search(a1, &v41, a2, &v35);
      if (v15 == 11) {
        goto LABEL_26;
      }
    }
    uint64_t v12 = v15;
    if (v15) {
      return v12;
    }
  }
LABEL_26:
  __int16 v33 = *(_WORD *)(*(void *)(a2 + 3184) + 4);
  int v16 = v35;
  if (!v35) {
    __strcpy_chk();
  }
  if (v7 == 12 || v7 == 5)
  {
    if (!*(_DWORD *)(a2 + 1672)) {
      goto LABEL_44;
    }
  }
  else if (v7 == 3 && (*(_WORD *)(v5 + 3492) & 0x400) == 0 && !*(_DWORD *)(a2 + 1672))
  {
    BOOL v20 = 0;
    if (v16) {
      goto LABEL_56;
    }
LABEL_66:
    if (!*(unsigned char *)(a2 + 1412))
    {
      BOOL v26 = v20;
      __strcpy_chk();
      if (v13 >= 3 && !strcspn(v39, "cdjlmnstv"))
      {
        __strcpy_chk();
        *((unsigned char *)v6 + 34) = *a1;
        int v27 = *(unsigned __int8 *)(v5 + 88);
        if (v27 == 1) {
          int v27 = 0;
        }
        *((unsigned char *)v6 + 76) = v27;
        if (v27 == 3)
        {
          if ((*(_DWORD *)(v5 + 92) & 0x7FFFFFFF) == 0x40000000) {
            *((unsigned char *)v6 + 76) = 1;
          }
          else {
            *((_DWORD *)v6 + 20) *= 2;
          }
        }
        *(unsigned __int16 *)((char *)v6 + 35) = 39;
        int v28 = (__int16)(v13 - 1);
        if (ICverify(&v41, v28, a2) == 10
          && SFcltchk((uint64_t)(v6 + 17), 0, 1, (unsigned __int16 *)&v38 + 1, &v38, *v6, *((void *)v6 + 1)) == 10&& (_byteswap_ushort(*(_WORD *)(*((void *)v6 + 1) + 4 * (unsigned __int16)v38)) & v6[29]) != 0)
        {
          if (SFcltscr((unsigned __int8 *)&v41, v28, *(void *)(*(void *)(a2 + 3184) + 248), (uint64_t)v6) == 10)
          {
            if (!v26
              || ((int v29 = *(_DWORD *)(v34 + 4 * v41), v41 == 104) || (v29 & 0x10000000) != 0)
              && (v41 != 105 || (*(_DWORD *)(v34 + 4 * v42) & 0x10000000) == 0)
              && ((v29 & 0x800) != 0 || *v9 != 99 || *((unsigned char *)v6 + 35) != 39))
            {
              __int16 v32 = strlen(&v41);
              SFadd(&v41, v32, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
              ++*(_WORD *)(v4 + 2);
              if (*(unsigned char *)(a2 + 8) == 3) {
                puntvolat_to_period_list(a2);
              }
              goto LABEL_64;
            }
          }
          __int16 v30 = *(_WORD *)(a2 + 1322);
          if ((v30 & 0x20) != 0) {
            *(_WORD *)(a2 + 1322) = v30 & 0xFFDF;
          }
        }
        clear_preorpost(a2, 1);
      }
    }
    return 11;
  }
  if (v16)
  {
    int v17 = (char)v16;
    uint64_t v18 = &v41;
    uint64_t v19 = a2;
  }
  else
  {
    uint64_t v18 = v39;
    uint64_t v19 = a2;
    int v17 = 0;
  }
  uint64_t v12 = postclitic_search((uint64_t)v18, v19, (uint64_t)&v36, v33, v17);
  if ((v12 - 890) <= 0xFFFFFFFD)
  {
    if ((v7 == 9 || v7 == 5) && v37) {
      free(v37);
    }
    return v12;
  }
LABEL_44:
  BOOL v20 = v7 == 9;
  if (v7 == 9 || v7 == 5)
  {
    uint64_t v21 = v37;
    if (v37)
    {
      if (v7 == 5 && *(unsigned char *)v37) {
        __strcpy_chk();
      }
      free(v21);
      BOOL v20 = v7 == 9;
    }
  }
  if ((v7 & 0xFE) == 8)
  {
    uint64_t v22 = *(void *)(*(void *)(a2 + 3184) + 264);
    unsigned int v23 = *(_WORD **)(v22 + 112);
    *(_WORD *)(v22 + 3492) &= ~0x80u;
    v23[32] &= ~0x200u;
    v23[33] &= ~0x200u;
    v23[34] &= ~0x200u;
    v23[22] = 0;
    *(_WORD *)(*(void *)(a2 + 3184) + 4) = v33;
  }
  uint64_t v12 = 11;
  if (v7 > 9 || ((1 << v7) & 0x228) == 0) {
    return v12;
  }
  if (!v16) {
    goto LABEL_66;
  }
LABEL_56:
  if (!*v9) {
    return 11;
  }
  uint64_t v12 = 11;
  if (*((unsigned char *)v6 + 35) == 39)
  {
    if (v41)
    {
      if (v42)
      {
        __s[0] = *v9;
        __s[1] = 0;
        __strcat_chk();
        __strcat_chk();
        __int16 v24 = strlen(__s);
        if (ICverify(__s, v24, a2) == 10)
        {
          __int16 v25 = strlen(__s);
          SFadd(__s, v25, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
          if (*(unsigned char *)(a2 + 8) == 3) {
            puntvolat_to_period_list(a2);
          }
          clear_preorpost(a2, 1);
LABEL_64:
          *(_WORD *)v4 |= 4u;
          *(void *)(a2 + 1328) |= 0x2000uLL;
          return 2;
        }
      }
    }
  }
  return v12;
}

uint64_t clear_preorpost(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 3184) + 264);
  uint64_t v3 = *(_WORD **)(v2 + 112);
  if (a2) {
    __int16 v4 = -257;
  }
  else {
    __int16 v4 = -129;
  }
  *(_WORD *)(v2 + 3492) &= v4;
  if (a2) {
    __int16 v5 = -257;
  }
  else {
    __int16 v5 = -513;
  }
  v3[32] &= v5;
  v3[33] &= v5;
  v3[34] &= v5;
  if (a2) {
    v3[17] = 0;
  }
  else {
    v3[22] = 0;
  }
  return result;
}

uint64_t do_trailcheck(uint64_t a1)
{
  int v14 = 0;
  uint64_t v2 = *(void *)(*(void *)(a1 + 3184) + 264);
  uint64_t v3 = *(unsigned __int16 **)(v2 + 112);
  unsigned int v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(_WORD *)(v2 + 42) = 100;
  uint64_t v6 = a1 + 1547;
  int v7 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  if (SFcltchk(v6, 0, (__int16)(*(_WORD *)(a1 + 1612) - 1), (unsigned __int16 *)&v14 + 1, &v14, v4, v5) == 10)
  {
    *(_WORD *)(v2 + 3492) |= 0x100u;
    *(void *)(a1 + 1328) |= 0x10uLL;
    return 3;
  }
  else if (v7 == 10 && *(unsigned char *)(a1 + 8) == 9)
  {
    return 10;
  }
  else
  {
    --*(_WORD *)(*(void *)(a1 + 3184) + 4);
    __int16 v9 = *(_WORD *)(a1 + 1612) - 1;
    *(_WORD *)(a1 + 1612) = v9;
    *(unsigned char *)(a1 + v9 + 1547) = 0;
    uint64_t v10 = a1 + 1482;
    unsigned __int16 v11 = strlen((const char *)(a1 + 1482));
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v13 = v11;
      do
      {
        *(unsigned char *)(v10 + v13) = *(unsigned char *)(a1 + (v13 - 1) + 1482);
        --v13;
      }
      while ((_WORD)v13);
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 1482) = 39;
    *(unsigned char *)(v12 + v10 + 1) = 0;
  }
  return result;
}

uint64_t do_leadcheck(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(a2 + 3184) + 264);
  unsigned int v4 = *(unsigned __int16 **)(v3 + 112);
  unsigned int v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  if (*(unsigned char *)(a2 + 8) == 3 && *(unsigned char *)(a2 + 1416)) {
    char v7 = 39;
  }
  else {
    char v7 = 45;
  }
  unsigned __int16 v11 = 0;
  __int16 v10 = 0;
  __s[0] = v7;
  __s[1] = 0;
  __strcat_chk();
  __int16 v8 = strlen(__s);
  uint64_t result = SFcltchk((uint64_t)__s, 0, (__int16)(v8 - 1), &v11, &v10, v5, v6);
  if (result != 11)
  {
    *(_WORD *)(v3 + 3492) |= 0x80u;
    *(void *)(a2 + 1328) |= 0x10uLL;
    ++*(_WORD *)(*(void *)(a2 + 3184) + 4);
    __strcpy_chk();
    if (__s[0] == 45 || __s[0] == 39) {
      *(unsigned char *)(strlen((const char *)(a2 + 1417)) + a2 + 1417 - 1) = 0;
    }
    return 3;
  }
  return result;
}

uint64_t middle_dot(unsigned char *__src, int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 < 3) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(a3 + 3184);
  uint64_t v7 = *(void *)(v6 + 264);
  __int16 v8 = *(_WORD *)(v6 + 2);
  int v9 = a2 - 1;
  int v10 = 1;
  __int16 v11 = 1;
  while (((*(_DWORD *)(v7 + 3472 + 4 * ((unsigned __int16)(v11 + v8) >> 5)) >> ~(v10 + v8)) & 1) == 0
       || __src[v11] != 108
       || __src[v10 + 1] != 108)
  {
    int v10 = ++v11;
    if (v9 <= v11)
    {
      __int16 v11 = 0;
      break;
    }
  }
  int v12 = 1;
  __int16 v13 = 1;
  while (*(unsigned char *)(a3 + 8) != 3
       || __src[v12 - 1] != 108
       || __src[v12 + 1] != 108
       || (*(unsigned char *)(a3 + 24) & 0x40) == 0
       || __src[v13] != 46)
  {
    int v12 = ++v13;
    if (v9 <= v13) {
      goto LABEL_15;
    }
  }
  __src[v13] = -73;
LABEL_15:
  if (v11)
  {
    if ((v11 & 0x8000) == 0)
    {
      int v14 = (__int16)(v11 + 1);
      if (v14 <= 1) {
        size_t v15 = 1;
      }
      else {
        size_t v15 = v14;
      }
      memcpy(__dst, __src, v15);
    }
    __dst[v11 + 1] = -73;
    for (__int16 i = v11 + 2; i <= a2; ++i)
      __dst[i] = __src[i - 1];
    uint64_t v18 = a2 + 1;
    __dst[v18] = 0;
    uint64_t result = ICverify(__dst, (__int16)v18, a3);
    if (result == 10)
    {
      *(_WORD *)(a3 + 1322) |= 2u;
      *(_DWORD *)(v7 + 4 * ((unsigned __int16)v11 >> 5) + 3480) |= 1 << ~(_BYTE)v11;
    }
  }
  else
  {
LABEL_24:
    return ICverify(__src, a2, a3);
  }
  return result;
}

uint64_t middle_dot_ver(char *a1, int a2, uint64_t a3)
{
  uint64_t result = ICverify(a1, a2, a3);
  if (result == 11)
  {
    if (a2 >= 3)
    {
      int v7 = 1;
      __int16 v8 = 1;
      do
      {
        if (a1[v8] == 46 && a1[v7 - 1] == 108 && a1[v7 + 1] == 108) {
          a1[v8] = -73;
        }
        int v7 = ++v8;
      }
      while (a2 - 1 > v8);
    }
    return ICverify(a1, a2, a3);
  }
  return result;
}

uint64_t spanish_accentchk(const char *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a2 + 3184);
  uint64_t v6 = *(void *)(v5 + 264);
  int v7 = strlen(a1);
  if (v7 << 16 >= 1)
  {
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v10 = 0;
    uint64_t v11 = *(void *)(*(void *)(v5 + 248) + 56);
    do
    {
      int v12 = *(_DWORD *)(v11 + 4 * a1[v8]);
      if ((v12 & 0x4064000) != 0)
      {
        if ((v12 & 0x4000000) != 0)
        {
          ++v9;
        }
        else
        {
          *(_WORD *)(v6 + 3492) |= 4u;
          int v12 = *(_DWORD *)(v11 + 4 * a1[v8]);
        }
        if ((v12 & 0x64000) != 0) {
          char v10 = 1;
        }
      }
      ++v8;
    }
    while ((__int16)v7 > v8);
    if (v9 >= 2) {
      *(_WORD *)(v6 + 3492) |= 8u;
    }
    if (v10)
    {
      if (a3 != 11) {
        return 0;
      }
      return 11;
    }
  }
  uint64_t result = 0;
  if (a3 == 11 && (*(_WORD *)(v6 + 3492) & 8) != 0) {
    return 11;
  }
  return result;
}

uint64_t preclitic_search(unsigned char *a1, char *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)(a3 + 3184) + 264);
  __int16 v9 = *(unsigned __int16 **)(v8 + 112);
  int v10 = *a1;
  if (*a1)
  {
    unint64_t v11 = 0;
    while (1)
    {
      v19[v11] = v10;
      if (v10 == 39) {
        break;
      }
      __int16 v12 = v11 + 1;
      if (v11 <= 7)
      {
        int v10 = a1[++v11];
        if (v10) {
          continue;
        }
      }
      goto LABEL_9;
    }
    __int16 v12 = v11 + 1;
  }
  else
  {
    __int16 v12 = 0;
  }
LABEL_9:
  v19[v12] = 0;
  if (v12 != 2 && *(unsigned char *)(a3 + 8) == 3) {
    return 11;
  }
  unsigned __int16 v18 = 0;
  unsigned __int16 v17 = 0;
  uint64_t result = SFcltchk((uint64_t)v19, 0, (__int16)(v12 - 1), &v18, &v17, *v9, *((void *)v9 + 1));
  if (result == 10)
  {
    *a4 = 1;
    if (!a1[v12])
    {
      uint64_t v15 = *(void *)(a3 + 1328) | 0x10;
LABEL_26:
      *(void *)(a3 + 1328) = v15;
      return 3;
    }
    strcpy(a2, &a1[v12]);
    *(_WORD *)(*(void *)(a3 + 3184) + 2) = v12;
    *(_WORD *)(v8 + 3492) |= 0x100u;
    __strcpy_chk();
    v9[44] = _byteswap_ushort(*(_WORD *)(*((void *)v9 + 1) + 4 * v17));
    if (*(unsigned char *)(a3 + 8) == 3)
    {
      int v14 = (__int16)strlen(a2);
      if (*(_DWORD *)(v8 + 3472)) {
        uint64_t result = middle_dot(a2, v14, a3);
      }
      else {
        uint64_t result = middle_dot_ver(a2, v14, a3);
      }
    }
    else
    {
      __int16 v16 = strlen(a2);
      uint64_t result = ICverify(a2, v16, a3);
    }
    if (result == 10)
    {
      if ((_byteswap_ushort(*(_WORD *)(*((void *)v9 + 1) + 4 * v17)) & v9[29]) != 0) {
        return stemnpre((unsigned __int8 *)a2, a3);
      }
      uint64_t v15 = *(void *)(a3 + 1328) | 1;
      goto LABEL_26;
    }
    if (*(unsigned char *)(a3 + 8) != 3) {
      return prenotstem(a2, a3);
    }
  }
  return result;
}

uint64_t postclitic_search(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, int a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int16 v36 = 0;
  unsigned __int16 v35 = 0;
  uint64_t v33 = *(void *)(*(void *)(a2 + 3184) + 264);
  uint64_t v6 = *(unsigned __int16 **)(v33 + 112);
  int v7 = *(unsigned __int8 *)(a2 + 8);
  int v8 = strlen((const char *)a1);
  __strcpy_chk();
  if ((__int16)v8 >= 12) {
    __int16 v9 = 12;
  }
  else {
    __int16 v9 = v8;
  }
  if ((v7 & 0xFE) != 8 && v7 != 3 || v8 << 16 <= 0x80000) {
    __int16 v12 = v9;
  }
  else {
    __int16 v12 = 8;
  }
  if (v7 == 9 || v7 == 5) {
    *(void *)(a3 + 8) = malloc_type_calloc(0xDuLL, 1uLL, 0x100004077774924uLL);
  }
  if (!v12) {
    return 888;
  }
  BOOL v14 = v7 == 5 || v7 == 12;
  __int16 v32 = (char *)(v6 + 22);
  uint64_t v15 = 888;
  while (1)
  {
    uint64_t v16 = (__int16)v8 - (uint64_t)v12;
    int v17 = __src[v16];
    BOOL v18 = v17 != 45 && v14;
    if (v18 || v7 == 3 && v17 != 45 && v17 != 39) {
      goto LABEL_72;
    }
    uint64_t v19 = (__int16)v16;
    if (__src[(__int16)v16])
    {
      unint64_t v20 = 0;
      do
      {
        __s2[v20] = __src[v19];
        LODWORD(v16) = v16 + 1;
        uint64_t v19 = (__int16)v16;
        if (__src[(__int16)v16]) {
          BOOL v21 = v20 >= 0xB;
        }
        else {
          BOOL v21 = 1;
        }
        ++v20;
      }
      while (!v21);
      __s2[v20] = 0;
      if ((unsigned __int16)v20 == 1 && v7 != 12) {
        return v15;
      }
      int v22 = v20;
    }
    else
    {
      int v22 = 0;
      LOWORD(v20) = 0;
      __s2[0] = 0;
    }
    if (SFcltchk((uint64_t)__s2, 0, (__int16)(v20 - 1), &v36, &v35, *v6, *((void *)v6 + 1)) != 10)
    {
      uint64_t v15 = 889;
      goto LABEL_72;
    }
    strcpy((char *)a1, __src);
    uint64_t v23 = (__int16)v8 - (uint64_t)v22;
    *(unsigned char *)(a1 + v23) = 0;
    if (*(unsigned char *)a1 && !*(unsigned char *)(a1 + 1) && v7 != 5)
    {
      uint64_t v15 = 11;
      goto LABEL_72;
    }
    *(_WORD *)(*(void *)(a2 + 3184) + 4) = a4 - v20;
    *(_WORD *)(v33 + 3492) |= 0x80u;
    if (v7 == 5 && *v32) {
      strcpy(*(char **)(a3 + 8), v32);
    }
    __strcpy_chk();
    v6[45] = _byteswap_ushort(*(_WORD *)(*((void *)v6 + 1) + 4 * v35));
    if (!*(unsigned char *)a1)
    {
      uint64_t v28 = *(void *)(a2 + 1328) | (v7 == 12) | 0x10;
      goto LABEL_77;
    }
    postclitic_search_spanflags = 0;
    byte_2676F59B2 = 0;
    if (v7 == 3)
    {
      if (*(_DWORD *)(v33 + 3472)) {
        int v24 = middle_dot((unsigned char *)a1, (__int16)v23, a2);
      }
      else {
        int v24 = middle_dot_ver((char *)a1, (__int16)v23, a2);
      }
      if (v24 != 10) {
        return 888;
      }
      goto LABEL_64;
    }
    int v25 = ICverify((char *)a1, (__int16)v23, a2);
    if (v7 == 12 && v25 == 10)
    {
      if ((v6[30] & 0x80) != 0)
      {
        uint64_t v28 = *(void *)(a2 + 1328) | 2;
LABEL_77:
        *(void *)(a2 + 1328) = v28;
        return 3;
      }
      goto LABEL_64;
    }
    if (v25 != 10) {
      break;
    }
LABEL_64:
    if ((*(unsigned char *)(a2 + 1328) & 0x20) != 0) {
      uint64_t v15 = 11;
    }
    else {
      uint64_t v15 = stemnpost((char *)a1, (uint64_t)__s2, a2, v35, &postclitic_search_spanflags, a3, a5);
    }
    if (v7 != 9) {
      return v15;
    }
    strcat((char *)a1, __s2);
    if (v15 == 3) {
      return v15;
    }
    if (v15 == 10) {
      return v15;
    }
    BOOL v26 = *(unsigned char **)(a3 + 8);
    if (!v26 || !*v26) {
      return v15;
    }
LABEL_72:
    if (!--v12) {
      return v15;
    }
  }
  uint64_t v15 = postnotstem((char *)a1, a2, v35, &postclitic_search_spanflags);
  if (v15 == 889) {
    goto LABEL_72;
  }
  if (v7 == 9) {
    strcat((char *)a1, __s2);
  }
  return v15;
}

uint64_t stemnpre(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1328);
  if ((v2 & 0x20) != 0) {
    return 11;
  }
  if (*(unsigned char *)(a2 + 8) != 9) {
    return 10;
  }
  uint64_t v5 = *(void *)(a2 + 3184);
  uint64_t v6 = *(void *)(*(void *)(v5 + 248) + 56);
  uint64_t v7 = *a1;
  BOOL v9 = (*(_DWORD *)(v6 + 4 * v7) & 0x10000000) == 0 && v7 != 104;
  if (v7 == 105 || v9)
  {
    if ((*(_DWORD *)(v6 + 4 * a1[1]) & 0x10000000) != 0) {
      goto LABEL_23;
    }
    return 10;
  }
  uint64_t v10 = *(void *)(*(void *)(v5 + 264) + 112);
  unint64_t v11 = (unsigned char *)(v10 + 34);
  if (((*(_WORD *)(v10 + 88) & 0x40) == 0
     || !SLstrcmp(v11, "grand'")
     || !SLstrcmp(v11, "d'")
     || !SLstrcmp(v11, "senz'"))
    && ((*(_DWORD *)(v6 + 4 * *a1) & 0x800) != 0
     || SLstrcmp(v11, "c'") && SLstrcmp(v11, "ch'") && SLstrcmp(v11, "finch'")))
  {
    return 10;
  }
  uint64_t v2 = *(void *)(a2 + 1328);
LABEL_23:
  *(void *)(a2 + 1328) = v2 | 1;
  return 3;
}

uint64_t prenotstem(char *__s, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  uint64_t v6 = *__s;
  int v7 = *(_DWORD *)(*(void *)(*(void *)(v4 + 248) + 56) + 4 * v6) & 0x10000000;
  if (v6 != 104 && v7 == 0) {
    *(void *)(a2 + 1328) |= 1uLL;
  }
  int v9 = *(unsigned __int8 *)(a2 + 8);
  if (v9 == 5 || v9 == 8)
  {
    if ((*(unsigned char *)(a2 + 24) & 0x40) == 0 || !*(unsigned char *)(v5 + 88)) {
      return 0;
    }
    __int16 v11 = strlen(__s);
    if (ICcltuna(__s, v11, a2) == 10) {
      return 10;
    }
    else {
      return 0;
    }
  }
  else if (v9 == 9)
  {
    uint64_t v13 = *(void *)(v5 + 112);
    if ((~*(unsigned __int16 *)(v13 + 88) & 0x201) == 0) {
      return 0;
    }
    if (*(unsigned char *)(v13 + 34)
      && *(unsigned char *)(v13 + 35) == 39
      && (__sa[0] = *(unsigned char *)(v13 + 34),
          __sa[1] = 0,
          __strcat_chk(),
          __int16 v14 = strlen(__sa),
          ICverify(__sa, v14, a2) == 10))
    {
      __int16 v15 = strlen(__sa);
      SFadd(__sa, v15, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
      uint64_t v16 = *(void *)(*(void *)(a2 + 3184) + 264);
      int v17 = *(_WORD **)(v16 + 112);
      *(_WORD *)(v16 + 3492) &= ~0x100u;
      v17[32] &= ~0x100u;
      v17[33] &= ~0x100u;
      v17[34] &= ~0x100u;
      v17[17] = 0;
      **(_WORD **)(a2 + 3184) |= 4u;
      *(void *)(a2 + 1328) = *(void *)(a2 + 1328) & 0xFFFFFFFFFFFFDFFELL | 0x2000;
      return 2;
    }
    else
    {
      return 11;
    }
  }
  else
  {
    return 888;
  }
}

uint64_t pandstemfr(const char *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(*(void *)(a3 + 3184) + 264);
  uint64_t v11 = *(void *)(v10 + 112);
  int v13 = strlen(a1);
  __int16 v14 = (unsigned char *)(a2 + 1);
  int v15 = *(unsigned __int16 *)(v11 + 60);
  uint64_t v16 = (char *)(*(void *)(v11 + 8) + 4 * a4);
  int v17 = *v16;
  int v18 = v16[1] | (v17 << 8);
  if ((v18 & v15) != 0)
  {
    if (v17 < 0)
    {
      int v19 = v13 << 16;
      uint64_t v20 = (__int16)v13;
      uint64_t v21 = (__int16)v13 - 1;
      if (((v18 & v15) != 0) & v12)
      {
        switch(a1[v21])
        {
          case 's':
            if (!SLstrcmp((unsigned char *)(a2 + 1), "je")
              || !SLstrcmp((unsigned char *)(a2 + 1), "tu")
              || !SLstrcmp((unsigned char *)(a2 + 1), "y"))
            {
              return a5;
            }
            goto LABEL_41;
          case 't':
LABEL_24:
            if (!SLstrcmp((unsigned char *)(a2 + 1), "il")
              || !SLstrcmp((unsigned char *)(a2 + 1), "elle")
              || !SLstrcmp((unsigned char *)(a2 + 1), "on"))
            {
              return a5;
            }
            if (SLstrcmp((unsigned char *)(a2 + 1), "ils"))
            {
              int v24 = SLstrcmp((unsigned char *)(a2 + 1), "elles");
              if (v19 <= 0x10000 || v24) {
                goto LABEL_44;
              }
            }
            else if (v19 <= 0x10000)
            {
              goto LABEL_44;
            }
            if (a1[v20 - 2] != 110 || a1[v21] != 116) {
              goto LABEL_44;
            }
            break;
          case 'u':
          case 'v':
          case 'w':
          case 'y':
            goto LABEL_44;
          case 'x':
            if (!SLstrcmp((unsigned char *)(a2 + 1), "je")) {
              return a5;
            }
            uint64_t v23 = "tu";
            goto LABEL_43;
          case 'z':
            if (*v14 == 121 && !*(unsigned char *)(a2 + 2)) {
              return a5;
            }
LABEL_41:
            if (!SLstrcmp((unsigned char *)(a2 + 1), "en")) {
              return a5;
            }
            uint64_t v23 = "y-en";
            goto LABEL_43;
          default:
            if (a1[v21] != 233) {
              goto LABEL_44;
            }
            uint64_t v23 = "je";
            goto LABEL_43;
        }
      }
      else
      {
        switch(a1[v21])
        {
          case 'a':
          case 'c':
          case 'e':
            if (!SLstrcmp((unsigned char *)(a2 + 1), "t-il")
              || !SLstrcmp((unsigned char *)(a2 + 1), "t-elle"))
            {
              return a5;
            }
            uint64_t v23 = "t-on";
            break;
          case 'b':
          case 'f':
          case 'g':
          case 'h':
            goto LABEL_44;
          case 'd':
            goto LABEL_24;
          case 'i':
            int v25 = SLstrcmp((unsigned char *)(a2 + 1), "je");
            if (v19 > 0x10000 && !v25 && a1[(v20 - 2)] == 97) {
              return a5;
            }
            goto LABEL_44;
          default:
            JUMPOUT(0);
        }
LABEL_43:
        if (SLstrcmp((unsigned char *)(a2 + 1), (unsigned __int8 *)v23)) {
          goto LABEL_44;
        }
      }
    }
  }
  else
  {
    if (*v14 != 108
      || *(unsigned char *)(a2 + 2) != 97
      || *(unsigned char *)(a3 + 8) != 5
      || (*(unsigned char *)(a3 + 24) & 0x40) == 0
      || ((v15 & 0x1A00) != 0 ? (BOOL v22 = *(unsigned char *)(v10 + 88) == 2) : (BOOL v22 = 0), !v22))
    {
LABEL_44:
      *(void *)(a3 + 1328) |= 2uLL;
      return 3;
    }
    return 10;
  }
  return a5;
}

uint64_t stemnpost(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7)
{
  uint64_t v13 = *(void *)(a3 + 3184);
  uint64_t v14 = *(void *)(v13 + 264);
  uint64_t v15 = *(void *)(v14 + 112);
  int v16 = *(unsigned __int8 *)(a3 + 8);
  __int16 v17 = strlen(a1);
  if (a7)
  {
    if ((*(_WORD *)(v15 + 88) & *(_WORD *)(v15 + 58)) == 0)
    {
      *(void *)(a3 + 1328) |= 1uLL;
      uint64_t v18 = 3;
      goto LABEL_6;
    }
    *(_WORD *)(v14 + 3492) |= 0x100u;
  }
  uint64_t v18 = 10;
LABEL_6:
  switch(v16)
  {
    case 3:
      if ((_byteswap_ushort(*(_WORD *)(*(void *)(v15 + 8) + 4 * a4)) & *(_WORD *)(v15 + 60)) != 0) {
        return v18;
      }
      uint64_t v19 = *(void *)(a3 + 1328) | 2;
      goto LABEL_32;
    case 5:
      return pandstemfr(a1, a2, a3, a4, v18);
    case 8:
      uint64_t v21 = *(void *)(v15 + 8);
      uint64_t v22 = (4 * a4) | 1;
      char v23 = *(unsigned char *)(v21 + v22);
      if ((v23 & 1) != 0 && a1[v17 - 1] == 115)
      {
        *a5 = 1;
        char v23 = *(unsigned char *)(v21 + v22);
      }
      return ICcltstm(a1, v23, a5, (char *)(a3 + 1547), a3);
    case 9:
      if (*(_WORD *)(v15 + 60))
      {
        uint64_t v24 = v17 - 1;
        if (v17 >= 2 && a1[v24] == 101 && a1[v17 - 2] == 114)
        {
          a1[v24] = 0;
          int v25 = strcat(a1, (const char *)a2);
          __int16 v26 = strlen(v25);
          SFadd(a1, v26, (__int16 *)(v14 + 40), (__int16 *)(v14 + 44), *(__int16 *)(v14 + 42), *(__int16 *)(v14 + 56), *(void *)(v14 + 48), *(void *)(v14 + 64));
          **(_WORD **)(a3 + 3184) |= 4u;
          *(void *)(a3 + 1328) |= 0x1000uLL;
          return 2;
        }
        else
        {
          int v27 = a1[v24];
          if (v27 == 114) {
            uint64_t v18 = 10;
          }
          else {
            uint64_t v18 = v18;
          }
          if (a7 && v27 != 114)
          {
            uint64_t v19 = *(void *)(a3 + 1328) | 1;
LABEL_32:
            *(void *)(a3 + 1328) = v19;
            return 3;
          }
        }
      }
      else
      {
        if (*(unsigned char *)a2 && *(unsigned char *)(a2 + 1) && *(unsigned char *)(a2 + 2))
        {
          *(_WORD *)a6 = *(_WORD *)(v15 + 90);
          *(_WORD *)(a6 + 2) = *(_WORD *)(v13 + 4);
          strcpy(*(char **)(a6 + 8), (const char *)a2);
        }
        else
        {
          uint64_t v28 = *(unsigned char **)(a6 + 8);
          if (v28 && *v28)
          {
            *(_WORD *)(v15 + 90) = *(_WORD *)a6;
            *(_WORD *)(v14 + 3492) |= 0x80u;
            int v29 = *(__int16 *)(a6 + 2);
            *(_WORD *)(v13 + 4) = *(_WORD *)(a6 + 2);
            SFadd(a1, v29, (__int16 *)(v14 + 40), (__int16 *)(v14 + 44), *(__int16 *)(v14 + 42), *(__int16 *)(v14 + 56), *(void *)(v14 + 48), *(void *)(v14 + 64));
            __strcpy_chk();
          }
        }
        return 889;
      }
      return v18;
    case 12:
      *(_WORD *)(v13 + 4) = v17 - 1;
      return ICcltrp(a1, (unsigned char *)a2, a3);
    default:
      return v18;
  }
}

uint64_t postnotstem(char *a1, uint64_t a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 3184);
  uint64_t v9 = *(void *)(v8 + 264);
  uint64_t v10 = *(void *)(v9 + 112);
  int v11 = *(unsigned __int8 *)(a2 + 8);
  unsigned __int16 v12 = strlen(a1);
  uint64_t result = 888;
  switch(v11)
  {
    case 5:
      if ((*(unsigned char *)(a2 + 24) & 0x40) == 0) {
        return 888;
      }
      if (!*(unsigned char *)(v9 + 88)) {
        return 888;
      }
      uint64_t result = ICcltuna(a1, (__int16)v12, a2);
      if (result != 10) {
        return 888;
      }
      return result;
    case 8:
      if (SFaccent((unsigned __int8 *)a1, (__int16)v12, *(void *)(v8 + 248), (__int16 *)v9))
      {
        a4[2] = 1;
        uint64_t v14 = *(void *)(v10 + 8);
        uint64_t v15 = (4 * a3) | 1;
        if ((*(unsigned char *)(v14 + v15) & 1) != 0 && *(unsigned char *)(strlen((const char *)(a2 + 1690)) + a2 + 1690 - 1) == 115) {
          *a4 = 1;
        }
        if (*(__int16 *)(v9 + 40) < 2)
        {
          LODWORD(result) = ICcltstm((char *)(a2 + 1690), *(unsigned char *)(v14 + v15), a4, (char *)(a2 + 1547), a2);
          if (result == 11) {
            return 889;
          }
          else {
            return result;
          }
        }
        else
        {
          __strcpy_chk();
          if (*(__int16 *)(v9 + 40) < 1) {
            return 888;
          }
          uint64_t v16 = 0;
          do
          {
            unsigned int v17 = *(__int16 *)(v10 + 64 + 2 * v16);
            *(_WORD *)(v10 + 60) = *(_WORD *)(v10 + 64 + 2 * v16) & 0xF;
            *(unsigned char *)(v10 + 92) = v17 >> 12;
            uint64_t result = ICcltstm((char *)(a2 + *(__int16 *)(a2 + 2 * v16 + 2890) + 1690), *(unsigned char *)(*(void *)(v10 + 8) + v15), a4, (char *)(a2 + 1547), a2);
            if (result != 11) {
              break;
            }
            uint64_t v18 = *(__int16 *)(v9 + 40);
            if (v16 < v18)
            {
              __strcpy_chk();
              uint64_t v18 = *(__int16 *)(v9 + 40);
            }
            ++v16;
            uint64_t result = 889;
          }
          while (v16 < v18);
        }
      }
      else
      {
        uint64_t v20 = (4 * a3) | 1;
        if ((*(unsigned char *)(*(void *)(v10 + 8) + v20) & 1) == 0) {
          return 889;
        }
        a1[(__int16)v12] = 115;
        a1[(__int16)(v12 + 1)] = 0;
        *(_WORD *)a4 = 257;
        int v22 = (__int16)(v12 + 1);
        if (ICverify(a1, v22, a2) != 10
          && !SFaccent((unsigned __int8 *)a1, v22, *(void *)(*(void *)(a2 + 3184) + 248), (__int16 *)v9))
        {
          return 889;
        }
        a4[2] = 1;
        strcpy(a1, (const char *)(a2 + 1690));
        char v23 = *(unsigned char *)(*(void *)(v10 + 8) + v20);
        return ICcltstm(a1, v23, a4, (char *)(a2 + 1547), a2);
      }
      return result;
    case 9:
      if (a1[(__int16)v12 - 1] == 114)
      {
        __strcpy_chk();
        __s[(__int16)v12] = 101;
        __s[(__int16)(v12 + 1)] = 0;
        if (ICverify(__s, (__int16)(v12 + 1), a2) == 10 && *(_WORD *)(v10 + 60))
        {
          strcat(a1, (const char *)(v10 + 44));
          return 10;
        }
        return 888;
      }
      else
      {
        strcat(a1, (const char *)(v10 + 44));
        return 889;
      }
    case 12:
      __int16 v19 = *(_WORD *)(v10 + 90);
      if ((v19 & 0x18) != 0) {
        return 11;
      }
      int v21 = v19 & 0x7F;
      if (v21 == 32)
      {
        uint64_t v24 = (__int16)v12;
        uint64_t v25 = (__int16)v12 - 1;
        int v26 = a1[v25];
        BOOL v27 = (v26 - 225) > 0x13 || ((1 << (v26 + 31)) & 0x81201) == 0;
        if (v27 && v26 != 105)
        {
          if (v26 == 114)
          {
            if (*(unsigned char *)(v10 + 45) != 108 || (int v28 = *(unsigned __int8 *)(v10 + 46), v28 != 111) && v28 != 97)
            {
              uint64_t v43 = (v24 - 3);
              if ((int)v24 < 3) {
                return 11;
              }
              __int16 v44 = &a1[v43];
              if (SLstrncmp(&a1[v43], "far", 3))
              {
                if (SLstrncmp(v44, "dir", 3)
                  && (v12 < 4u || SLstrncmp(&a1[(v24 - 4)], "trar", 4)))
                {
                  return 11;
                }
              }
              return 10;
            }
            a1[v25] = 122;
            a1[(__int16)v12] = 0;
            if (ICverify(a1, (__int16)v12, a2) == 10)
            {
              uint64_t v29 = (__int16)(v12 - 1);
              a1[v29] = 0;
              unsigned int v30 = (__int16)(v12 - 1);
              uint64_t v31 = (v29 - 2);
              if ((int)v29 < 2
                || (__int16 v32 = &a1[v31], SLstrncmp(&a1[v31], "fa", 2))
                && SLstrncmp(v32, "di", 2)
                && (v30 < 3 || SLstrncmp(&a1[v30 - 3], "tra", 3)))
              {
                *(void *)(a2 + 1328) |= 2uLL;
                return 3;
              }
              uint64_t v33 = v10 + 44;
              if (a1[v29 - 1] == 97) {
                a1[v29 - 1] = -31;
              }
              *(void *)(a2 + 1328) |= 0x1004uLL;
              goto LABEL_65;
            }
            return 11;
          }
          uint64_t result = 11;
          if ((int)v24 < 3 || v26 != 233 || a1[(v24 - 2)] != 117 || a1[(v24 - 3)] != 113) {
            return result;
          }
        }
        if (*(unsigned char *)(v10 + 45) == 108)
        {
          int v37 = *(unsigned __int8 *)(v10 + 46);
          if (v37 == 111 || v37 == 97)
          {
            uint64_t result = vowelchange(a1, a2);
            if (result == 10) {
              return result;
            }
            if (result != 2)
            {
              a1[(__int16)v12] = 122;
              a1[(__int16)v12 + 1] = 0;
              int v36 = (__int16)(v12 + 1);
              unsigned __int16 v35 = a1;
LABEL_77:
              if (ICverify(v35, v36, a2) == 10) {
                return 10;
              }
              else {
                return 11;
              }
            }
LABEL_97:
            uint64_t v34 = (uint64_t)a1;
            uint64_t v33 = v10 + 44;
            goto LABEL_98;
          }
        }
        int v38 = v24 - 3;
        if ((int)v24 < 3) {
          goto LABEL_94;
        }
        if (v26 == 233)
        {
          if (a1[(v24 - 2)] == 117 && a1[v38] == 113)
          {
            a1[v25] = 101;
            a1[(__int16)v12] = 114;
            *(_WORD *)&a1[v24 + 1] = 29285;
            a1[v24 + 3] = 0;
            int v39 = ICverify(a1, (__int16)(v12 + 3), a2);
            goto LABEL_95;
          }
LABEL_94:
          int v39 = vowelchange(a1, a2);
LABEL_95:
          if (v39 != 10) {
            return 11;
          }
          goto LABEL_96;
        }
        if (v12 < 4u) {
          goto LABEL_94;
        }
        if (v26 != 234) {
          goto LABEL_94;
        }
        uint64_t v40 = (v24 - 2);
        if (a1[v40] != 122) {
          goto LABEL_94;
        }
        int v41 = a1[v38];
        if (v41 == 105)
        {
          if (a1[(v24 - 4)] != 100) {
            goto LABEL_94;
          }
        }
        else
        {
          if (v41 != 97) {
            goto LABEL_94;
          }
          int v42 = a1[(v24 - 4)];
          if (v42 != 102 && (v12 < 5u || v42 != 114 || a1[(v24 - 5)] != 116)) {
            goto LABEL_94;
          }
        }
        a1[v40] = 114;
        a1[v25] = 0;
LABEL_96:
        *(void *)(a2 + 1328) |= 0x2000000uLL;
        goto LABEL_97;
      }
      if (v21 != 4)
      {
        if (v21 != 2) {
          return 11;
        }
        a1[(__int16)v12] = 115;
        a1[(__int16)v12 + 1] = 0;
        if (ICverify(a1, (__int16)(v12 + 1), a2) != 10 || (*(_WORD *)(v10 + 60) & 0x100) == 0) {
          return 11;
        }
        return 10;
      }
      a1[(__int16)v12] = 115;
      a1[(__int16)v12 + 1] = 0;
      uint64_t result = ICverify(a1, (__int16)(v12 + 1), a2);
      if (result != 10)
      {
        a1[(__int16)v12] = 0;
        uint64_t result = vowelchange(a1, a2);
        if (result != 10)
        {
          if (result == 2)
          {
            *(void *)(a2 + 1328) |= 4uLL;
            uint64_t v33 = v10 + 44;
LABEL_65:
            uint64_t v34 = (uint64_t)a1;
LABEL_98:
            altstem(v34, v33, a2);
            return 2;
          }
          a1[(__int16)v12] = 122;
          a1[(__int16)v12 + 1] = 0;
          unsigned __int16 v35 = a1;
          int v36 = (__int16)(v12 + 1);
          goto LABEL_77;
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t vowelchange(char *a1, uint64_t a2)
{
  __int16 v4 = strlen(a1);
  uint64_t v5 = (__int16)(v4 - 1);
  unsigned int v6 = a1[v5];
  uint64_t v7 = *(void *)(a2 + 3184);
  if (v6 <= 0xEC)
  {
    if (v6 == 225)
    {
      char v8 = 97;
      goto LABEL_39;
    }
    if (v6 == 234)
    {
      char v8 = 101;
      int v9 = v5 - 3;
      if ((int)v5 >= 3 && (*(_WORD *)(*(void *)(*(void *)(v7 + 264) + 112) + 90) & 0x20) != 0)
      {
        uint64_t v10 = (v5 - 1);
        if (a1[v10] == 122)
        {
          uint64_t v11 = (v5 - 2);
          int v12 = a1[v11];
          if (v12 == 105)
          {
            if (a1[v9] == 100)
            {
              a1[v10] = 0;
              goto LABEL_37;
            }
          }
          else if (v12 == 97)
          {
            int v13 = a1[v9];
            if (v13 == 102)
            {
LABEL_13:
              a1[v10] = 0;
              a1[v11] = -31;
LABEL_37:
              *(void *)(a2 + 1328) |= 0x2000000uLL;
              return 2;
            }
            char v8 = 101;
            if (v5 < 4 || v13 != 114) {
              goto LABEL_39;
            }
            if (a1[(v5 - 4)] == 116) {
              goto LABEL_13;
            }
          }
        }
        char v8 = 101;
      }
LABEL_39:
      a1[v5] = v8;
      goto LABEL_40;
    }
LABEL_17:
    BOOL v14 = v6 != 233 || (int)v5 < 2;
    if (!v14 && a1[(v5 - 1)] == 117 && a1[(v5 - 2)] == 113)
    {
      a1[v5] = 101;
      if ((*(_WORD *)(*(void *)(*(void *)(*(void *)(a2 + 3184) + 264) + 112) + 90) & 0x20) != 0)
      {
        uint64_t v15 = &a1[v5];
        *(_WORD *)(v15 + 1) = -5518;
        v15[3] = 0;
        goto LABEL_37;
      }
    }
    else if ((*(_WORD *)(*(void *)(*(void *)(v7 + 264) + 112) + 90) & 4) != 0)
    {
      uint64_t v16 = v5 + 1;
      a1[v5 + 1] = 122;
      a1[v5 + 3] = 0;
      if (ICverify(a1, (__int16)(v4 + 1), a2) == 10)
      {
        switch(v6)
        {
          case 'a':
            char v17 = -31;
            break;
          case 'e':
            char v17 = -22;
            break;
          case 'o':
            char v17 = -12;
            break;
          default:
            a1[v16] = 0;
            return 10;
        }
        a1[v5] = v17;
        a1[v16] = 0;
        return 2;
      }
    }
    goto LABEL_40;
  }
  if (v6 != 237)
  {
    if (v6 == 244)
    {
      char v8 = 111;
      goto LABEL_39;
    }
    goto LABEL_17;
  }
  if ((int)v5 >= 1
    && (*(_DWORD *)(*(void *)(*(void *)(v7 + 248) + 56) + 4 * a1[(v5 - 1)]) & 0x10000000) != 0)
  {
    char v8 = 105;
    goto LABEL_39;
  }
LABEL_40:
  *(_WORD *)&a1[v5 + 1] = 114;
  if (ICverify(a1, (__int16)(v5 + 2), a2) != 10) {
    return 11;
  }
  BOOL v18 = v6 != 101 || (int)v5 < 2;
  if (!v18 && a1[(v5 - 1)] == 117 && a1[(v5 - 2)] == 113)
  {
    a1[v5 + 1] = 0;
    a1[v5] = -23;
    return 2;
  }
  return 10;
}

uint64_t altstem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a3 + 3184) + 264);
  __strcpy_chk();
  __strcat_chk();
  __int16 v5 = strlen(__s);
  SFadd(__s, v5, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
  **(_WORD **)(a3 + 3184) |= 4u;
  return 0;
}

uint64_t ICcltacc(char *__s, unsigned char *a2, char *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4[398];
  uint64_t v8 = *(void *)(*(void *)(v7 + 248) + 56);
  uint64_t v9 = *(void *)(*(void *)(v7 + 264) + 112);
  if (a2[2])
  {
    __int16 v10 = strlen(a3);
    __memmove_chk();
    __sa[v10 - strlen((const char *)(v9 + 44))] = 0;
    if (a2[1]) {
      *(_WORD *)&__sa[(__int16)strlen(__sa)] = 115;
    }
    size_t v11 = strlen(__sa);
    memmove(__s, __sa, v11 + 1);
  }
  unsigned __int16 v12 = strlen(__s);
  uint64_t v13 = (__int16)(v12 - *(char *)(v9 + 92));
  uint64_t v14 = __s[v13];
  if ((*(_DWORD *)(v8 + 4 * v14) & 0x4000000) != 0)
  {
    if (!*a2) {
      return 10;
    }
    __s[(__int16)(v12 - 1)] = 0;
    size_t v21 = strlen(__s);
    memmove((char *)a4 + 1690, __s, v21 + 1);
    __strcat_chk();
    if (a2[1]) {
      return 10;
    }
    uint64_t v24 = 4096;
  }
  else
  {
    HIDWORD(v16) = v14 - 97;
    LODWORD(v16) = v14 - 97;
    unsigned int v15 = v16 >> 1;
    if (v15 <= 0xA && ((0x495u >> v15) & 1) != 0) {
      __s[v13] = byte_20CC61BC8[v15];
    }
    if ((__int16)v12 >= 1)
    {
      for (uint64_t i = 0; v12 != i; ++i)
      {
        uint64_t v18 = __s[i];
        if ((*(_DWORD *)(v8 + 4 * v18) & 0x4000000) == 0 || i == (__int16)v12 - *(char *)(v9 + 92)) {
          continue;
        }
        if (__s[i] <= 0xECu)
        {
          if (v18 == 225)
          {
            char v19 = 97;
            goto LABEL_24;
          }
          if (v18 == 233)
          {
            char v19 = 101;
            goto LABEL_24;
          }
        }
        else
        {
          switch(v18)
          {
            case 0xED:
              char v19 = 105;
              goto LABEL_24;
            case 0xF3:
              char v19 = 111;
              goto LABEL_24;
            case 0xFA:
              char v19 = 117;
LABEL_24:
              __s[i] = v19;
              break;
          }
        }
      }
    }
    if (*a2)
    {
      __s[(__int16)v12 - 1] = 0;
      size_t v20 = strlen(__s);
      memmove((char *)a4 + 1690, __s, v20 + 1);
      __strcat_chk();
      if (!a2[1]) {
        a4[166] |= 0x1000uLL;
      }
    }
    else
    {
      size_t v23 = strlen(__s);
      memmove((char *)a4 + 1690, __s, v23 + 1);
      __strcat_chk();
    }
    uint64_t v24 = 4;
  }
  a4[166] |= v24;
  *(_WORD *)a4[398] |= 4u;
  return 2;
}

uint64_t ICcltcap(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(*(void *)(v2 + 248) + 56);
  uint64_t v63 = *(void *)(v2 + 264);
  uint64_t v4 = *(void *)(v63 + 112);
  __int16 v5 = (unsigned char *)(v4 + 34);
  int v6 = strlen((const char *)(v4 + 34));
  __int16 v7 = strlen((const char *)(v4 + 44));
  int v64 = *(unsigned __int8 *)(a1 + 8);
  int v59 = (const char *)(a1 + 1690);
  __strcpy_chk();
  int v61 = (_WORD *)v2;
  if ((*(_WORD *)v2 & 4) != 0 && (*(unsigned char *)(a1 + 1330) & 0x80) == 0)
  {
    size_t v8 = strlen(__s);
    if (v8 >= v7) {
      __s[v8 - v7] = 0;
    }
  }
  int v9 = ICEndToken(a1);
  int v10 = *v5;
  if (*v5)
  {
    int v11 = *(unsigned __int8 *)(v4 + 16);
    uint64_t v12 = v63;
    if (v11 == 3)
    {
      if (v6 << 16 >= 1)
      {
        char v13 = 0;
        unsigned __int16 v14 = 0;
        do
        {
          int v15 = 1 << ~v13;
          if ((*(_DWORD *)(v63 + 92 + 4 * (v14 >> 5)) & v15) != 0) {
            *(_DWORD *)&__s[4 * (v14 >> 5) - 1] |= v15;
          }
          char v13 = ++v14;
        }
        while ((__int16)v6 > (__int16)v14);
      }
      int v11 = 3;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = v63;
  }
  int v16 = *(unsigned __int8 *)(v4 + 44);
  uint64_t v62 = (char *)(v4 + 44);
  if (!*(unsigned char *)(v4 + 44))
  {
    BOOL v22 = 0;
    unsigned int v17 = 0;
LABEL_25:
    BOOL v21 = 1;
    goto LABEL_26;
  }
  unsigned int v17 = *(unsigned __int8 *)(v4 + 17);
  if (v17 == 3 && v7 >= 1)
  {
    LOWORD(v18) = 0;
    do
    {
      int v19 = 1 << ~(_BYTE)v18;
      if ((*(_DWORD *)(v12 + 92 + 4 * ((unsigned __int16)v18 >> 5)) & v19) != 0) {
        *((_DWORD *)&v68 + ((unsigned __int16)v18 >> 5)) |= v19;
      }
      int v18 = (__int16)(v18 + 1);
    }
    while (v18 < v7);
  }
  if (v64 != 9)
  {
    BOOL v22 = 0;
    goto LABEL_25;
  }
  int v20 = *(__int16 *)(v4 + 90);
  BOOL v21 = v20 >= 0;
  BOOL v22 = v20 < 0;
LABEL_26:
  unsigned int v23 = *(unsigned __int8 *)(v4 + 76);
  uint64_t v24 = *(void *)(v4 + 80);
  uint64_t v67 = v24;
  uint64_t v25 = *(unsigned __int8 **)(v12 + 72);
  unsigned int v26 = *v25;
  if (*(_WORD *)(v12 + 102) == 2 && v26 == 1)
  {
    unsigned int v26 = v25[1];
    if (!v25[1])
    {
      BOOL v27 = 0;
      int v28 = 0;
      unsigned int v29 = 0;
      unsigned int v30 = 0;
      if (!v16) {
        goto LABEL_64;
      }
      goto LABEL_47;
    }
    BOOL v27 = 0;
    int v28 = 0;
    unsigned int v26 = 1;
  }
  else if (v26 == 4)
  {
    BOOL v27 = 0;
    if (v23 == 2 || !v24)
    {
      int v28 = 0;
      unsigned int v26 = 0;
    }
    else
    {
      BOOL v27 = v10 != 0 || v9 == 0;
      if (v10 == 0 && v9 != 0) {
        int v28 = 0;
      }
      else {
        int v28 = 4;
      }
      if (v10 == 0 && v9 != 0 || v10)
      {
        unsigned int v26 = v28;
      }
      else
      {
        if ((*(_DWORD *)(v12 + 92) & 0x80000000) != 0)
        {
          *(_WORD *)(a1 + 1322) |= 0x400u;
          int v16 = *v62;
        }
        int v28 = 4;
        BOOL v27 = 1;
        unsigned int v26 = 4;
      }
    }
  }
  else
  {
    BOOL v27 = 0;
    int v28 = 0;
  }
  uint64_t v31 = *(unsigned int **)(v12 + 80);
  unsigned int v29 = *v31;
  unsigned int v30 = v31[1];
  if (!v16) {
    goto LABEL_64;
  }
LABEL_47:
  if (v29 != v24 && v26 >= v23 && v26 != 4)
  {
    if (v23 != 1)
    {
      if (v23 != 2)
      {
        if (v23 == 3)
        {
          int v56 = 0;
          unint64_t v66 = __PAIR64__(v30, v29);
          BOOL v58 = v17 == 0;
          int v60 = v17 != 0;
          BOOL v27 = 1;
          int v28 = v26;
          goto LABEL_70;
        }
        goto LABEL_64;
      }
      goto LABEL_66;
    }
LABEL_68:
    BOOL v58 = 0;
    int v56 = 0;
    goto LABEL_69;
  }
  if (v17)
  {
    char v32 = !v22;
    if (v17 != 1) {
      char v32 = 1;
    }
    if ((v32 & 1) == 0)
    {
      int v60 = 0;
      LODWORD(v69) = 0x80000000;
      BOOL v58 = 1;
      goto LABEL_53;
    }
    if (v17 == 2 && v23 == 2)
    {
LABEL_64:
      int v60 = 0;
      int v56 = 0;
      BOOL v58 = 1;
      goto LABEL_70;
    }
    if (v23 != 2)
    {
      if (v21) {
        goto LABEL_68;
      }
      BOOL v58 = 0;
      LODWORD(v69) = 0x80000000;
      int v60 = 1;
LABEL_53:
      int v56 = 1;
      goto LABEL_70;
    }
  }
  else if (v23 != 2)
  {
    goto LABEL_64;
  }
LABEL_66:
  BOOL v58 = 0;
  uint64_t v69 = -1;
  int v56 = 2;
LABEL_69:
  int v60 = 1;
LABEL_70:
  uint64_t v65 = v3;
  unsigned int v57 = v17;
  if (v9) {
    int v33 = 0;
  }
  else {
    int v33 = 4 * (*(unsigned char *)(v12 + 88) != 2);
  }
  int v34 = v24;
  if (v26 != 4 && v24 != v29 && v26 > v23 || (int v35 = 0, v23 == 3) && v26 != 3)
  {
    unint64_t v66 = __PAIR64__(v30, v29);
    BOOL v38 = v11 == 2 && v26 != 2 && v23 != 2 || v11 == 3;
    int v35 = v38;
    if (v38) {
      int v33 = 4 * (v9 == 0);
    }
    BOOL v27 = 1;
    int v28 = v26;
  }
  unsigned int v39 = *v5;
  if (*v5)
  {
    unsigned int v39 = v11 == 2 && v23 != 2;
    if (v11 == 3 || v39)
    {
      if (v11 == 2 && v9)
      {
        unsigned int v39 = 0x80000000;
        LODWORD(v70) = 0x80000000;
        int v35 = 1;
        int v33 = 1;
      }
      else
      {
        unsigned int v39 = 0;
        if (v9) {
          int v33 = 0;
        }
        int v35 = 1;
      }
    }
    if (v23 == 3 && v26 == 3 && v24 != v29)
    {
      unint64_t v66 = __PAIR64__(v30, v29);
      int v28 = 3;
      BOOL v27 = 1;
    }
    if (v11 || v9 != 1)
    {
      if (v11 == 1 && !v9)
      {
        unsigned int v39 = 0;
        *(_WORD *)(a1 + 1322) |= 0x400u;
        uint64_t v70 = 0;
        int v33 = 4;
        int v35 = 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 1322) |= 0x800u;
      uint64_t v70 = 0x80000000;
      int v35 = 1;
      unsigned int v39 = 0x80000000;
      int v33 = 1;
    }
  }
  else if (!v23 && (v28 - 3) <= 0xFDu && v9 == 1)
  {
    unsigned int v39 = 0;
    *(_WORD *)(a1 + 1322) |= 0x800u;
    BOOL v27 = 1;
    int v28 = 1;
  }
  if (*v5)
  {
    if (v35 || v33 == 4)
    {
      if (!v39 && (v71 & 0x80000000) != 0 && v9)
      {
        LODWORD(v70) = 0x80000000;
        int v33 = 1;
      }
      int v41 = (__int16)strlen((const char *)(v4 + 34));
      int v42 = (unsigned __int8 *)(v4 + 34);
      unsigned int v43 = v33;
      unsigned int v44 = v33;
    }
    else
    {
      int v41 = (__int16)strlen((const char *)(v4 + 34));
      int v42 = (unsigned __int8 *)(v4 + 34);
      unsigned int v43 = v33;
      unsigned int v44 = v11;
    }
    SLrecap(v42, v41, v43, (uint64_t)&v70, v44, v65);
  }
  if (v27)
  {
    if (v34 <= -1 && v28 == 0) {
      unsigned int v46 = 1;
    }
    else {
      unsigned int v46 = v28;
    }
    int v47 = v64;
    if ((v64 == 8 || v64 == 5) && (*(unsigned char *)(a1 + 24) & 0x40) != 0 && (*(_WORD *)(v63 + 3492) & 2) != 0 && *v59) {
      __strcpy_chk();
    }
    __int16 v48 = strlen(__s);
    uint64_t v49 = v65;
    SLrecap((unsigned __int8 *)__s, v48, v46, (uint64_t)&v66, v23, v65);
  }
  else
  {
    __int16 v50 = strlen(__s);
    uint64_t v49 = v65;
    SLrecap((unsigned __int8 *)__s, v50, v23, (uint64_t)&v67, v23, v65);
    int v47 = v64;
  }
  if (*v62)
  {
    int v51 = (__int16)strlen(v62);
    if (v58)
    {
      int v52 = &v68;
      uint64_t v53 = (unsigned __int8 *)(v4 + 44);
      unsigned int v54 = v57;
    }
    else
    {
      int v52 = &v69;
      uint64_t v53 = (unsigned __int8 *)(v4 + 44);
      unsigned int v54 = v56;
    }
    SLrecap(v53, v51, v54, (uint64_t)v52, v54, v49);
  }
  if ((((v35 | v27) == 0) & ~v60) != 0)
  {
    if ((*v61 & 4) != 0)
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1686) = 1;
    }
    else
    {
      __strcpy_chk();
    }
    return 10;
  }
  else
  {
    *(void *)(a1 + 1328) |= 0x400uLL;
    if ((v47 == 8 || v47 == 5) && (*(unsigned char *)(a1 + 24) & 0x40) != 0)
    {
      if (*(unsigned __int8 *)(v4 + 46) == 192) {
        SFremacc(v62, v49, v47);
      }
      __strcpy_chk();
      SFremacc(v59, v49, v47);
    }
    else
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1686) = 1;
    }
    *v61 |= 4u;
    return 2;
  }
}

uint64_t ICcltrp(char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 3184);
  uint64_t v6 = *(void *)(*(void *)(v5 + 264) + 112);
  uint64_t v7 = *(void *)(*(void *)(v5 + 248) + 56);
  size_t v8 = strlen(a1);
  int v9 = (__int16)(v8 - 1);
  if (((v8 - 1) & 0x8000) != 0)
  {
    int v11 = 32;
    int v10 = 32;
  }
  else
  {
    int v10 = a1[(unsigned __int16)(v8 - 1)];
    if ((_WORD)v8 == 1)
    {
      int v11 = 32;
    }
    else
    {
      int v11 = a1[v9 - 1];
      if (v9 != 1)
      {
        int v12 = a1[v9 - 2];
        goto LABEL_8;
      }
    }
  }
  int v12 = 32;
LABEL_8:
  unsigned int v13 = *(_WORD *)(v6 + 90) & 0x7F;
  uint64_t result = 11;
  if (v13 <= 7)
  {
    if (v13 == 2)
    {
      if ((*(_WORD *)(v6 + 60) & 0x100) == 0) {
        return 10;
      }
    }
    else
    {
      if (v13 != 4) {
        return result;
      }
      if ((*(_WORD *)(v6 + 60) & 0x100) == 0)
      {
        if ((*(_WORD *)(v6 + 60) & 0x200) == 0)
        {
          if ((*(_WORD *)(v6 + 60) & 0x400) == 0)
          {
            unsigned int v17 = a2;
            if (SLstrcmp(a2, "-la"))
            {
              if (SLstrcmp(a2, "-las"))
              {
                if (SLstrcmp(a2, "-lo"))
                {
                  int v18 = "-los";
LABEL_35:
                  if (SLstrcmp(v17, (unsigned __int8 *)v18))
                  {
LABEL_171:
                    icmodpost((uint64_t)v17, a3);
                    uint64_t v28 = (uint64_t)a1;
                    uint64_t v29 = (uint64_t)v17;
                    goto LABEL_172;
                  }
                  v17[4] = 0;
                  int v19 = 1936682541;
LABEL_136:
                  *(_DWORD *)unsigned int v17 = v19;
                  goto LABEL_171;
                }
LABEL_134:
                int v19 = 7302701;
                goto LABEL_136;
              }
LABEL_124:
              v17[4] = 0;
              int v19 = 1935765037;
              goto LABEL_136;
            }
LABEL_103:
            int v19 = 6385197;
            goto LABEL_136;
          }
          uint64_t v36 = (__int16)(v8 - 1);
          unsigned int v37 = a1[v36];
          if (v37 <= 0xE9)
          {
            BOOL v38 = a2;
            if (v37 == 105) {
              goto LABEL_125;
            }
            uint64_t v39 = a3;
            if (v37 != 225)
            {
LABEL_129:
              uint64_t v46 = v36 + 1;
              *(_WORD *)&a1[v36 + 1] = 115;
              int v47 = (__int16)(v8 + 1);
              __int16 v48 = a1;
LABEL_165:
              uint64_t result = ICverify(v48, v47, v39);
              if (result != 10)
              {
                a1[v46] = 0;
                return icpost2alt((uint64_t)a1, v38, v39);
              }
              return result;
            }
          }
          else
          {
            BOOL v38 = a2;
            uint64_t v39 = a3;
            if (v37 != 234 && v37 != 244)
            {
              if (v37 != 237) {
                goto LABEL_129;
              }
LABEL_125:
              int v45 = a1[v36 - 1];
              uint64_t result = 10;
              if ((v45 - 97) <= 0x14 && ((1 << (v45 - 97)) & 0x104011) != 0 || v45 == 252) {
                return result;
              }
              BOOL v38 = a2;
              uint64_t v39 = a3;
              goto LABEL_129;
            }
          }
          switch(v10)
          {
            case 225:
              char v41 = 97;
              break;
            case 234:
              char v41 = 101;
              break;
            case 244:
              char v41 = 111;
              break;
            default:
LABEL_163:
              uint64_t v46 = v36 + 1;
              *(_WORD *)&a1[v36 + 1] = 114;
              uint64_t v57 = v36 + 2;
              int v58 = (__int16)(v8 + 1);
              uint64_t result = ICverify(a1, (__int16)(v36 + 2), v39);
              if (result == 10) {
                return result;
              }
              a1[v46] = 122;
              a1[v57] = 0;
              __int16 v48 = a1;
              int v47 = v58;
              goto LABEL_165;
          }
          a1[v36] = v41;
          goto LABEL_163;
        }
        icstem2(a1, a3);
LABEL_62:
        *(void *)(a3 + 1328) |= 0x1000uLL;
        uint64_t v28 = (uint64_t)a1;
        uint64_t v29 = (uint64_t)a2;
LABEL_172:
        uint64_t v40 = a3;
        goto LABEL_173;
      }
      if (*(_DWORD *)a3 == 100) {
        return result;
      }
    }
    a1[(__int16)(v8 - 1)] = 0;
    goto LABEL_62;
  }
  if (v13 != 8)
  {
    if (v13 != 16)
    {
      if (v13 != 32) {
        return result;
      }
      if ((*(_WORD *)(v6 + 60) & 0x200) == 0)
      {
        unsigned int v15 = a1[(__int16)(v8 - 1)];
        if (v15 <= 0xE9)
        {
          uint64_t v16 = a3;
          if (v15 != 105)
          {
            if (v15 != 225) {
              goto LABEL_112;
            }
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v16 = a3;
          if (v15 == 234 || v15 == 244)
          {
LABEL_79:
            if (*(unsigned char *)(v6 + 45) != 108) {
              goto LABEL_112;
            }
            int v32 = *(unsigned __int8 *)(v6 + 46);
            if (v32 != 111 && v32 != 97) {
              goto LABEL_112;
            }
            int v33 = *(_DWORD *)(v7 + 4 * a1[(__int16)(v8 - 1) - 1]);
            BOOL v35 = (v33 & 0x10000000) == 0 || v10 != 105;
            if ((v33 & 0x10000000) != 0 && v10 == 237)
            {
              a1[(__int16)(v8 - 1)] = 105;
              unsigned int v23 = a2;
            }
            else
            {
              unsigned int v23 = a2;
              if (v15 - 225 <= 0x13 && ((1 << (v15 + 31)) & 0x80201) != 0) {
                icvowelchange(a1, v16);
              }
            }
            *(_WORD *)&a1[(__int16)(v8 - 1) + 1] = 114;
            if (ICverify(a1, (__int16)(v8 + 1), v16) != 10)
            {
              if (v35) {
                return 11;
              }
              goto LABEL_112;
            }
            if (v35)
            {
              *(void *)(v16 + 1328) &= ~4uLL;
              return 10;
            }
            a1[(__int16)(v8 - 1)] = -19;
            a1[(__int16)(v8 - 1) + 1] = 0;
            goto LABEL_159;
          }
          if (v15 != 237) {
            goto LABEL_112;
          }
        }
        int v30 = a1[(__int16)(v8 - 1) - 1];
        BOOL v31 = (v30 - 97) > 0x14 || ((1 << (v30 - 97)) & 0x104011) == 0;
        if (v31 && v30 != 252 && v15 != 105) {
          goto LABEL_112;
        }
        goto LABEL_79;
      }
      uint64_t v16 = a3;
      if (v10 != 114)
      {
LABEL_112:
        *(void *)(v16 + 1328) |= 2uLL;
        return 3;
      }
      uint64_t v22 = (v9 - 3);
      unsigned int v23 = a2;
      if (v9 >= 3)
      {
        uint64_t v24 = &a1[v22];
        if (!SLstrcmp(&a1[v22], "quer"))
        {
          if (*(unsigned char *)(v6 + 45) == 108 && ((int v42 = *(unsigned __int8 *)(v6 + 46), v42 == 111) || v42 == 97))
          {
            uint64_t v43 = v8 << 48;
            char v44 = -22;
          }
          else
          {
            a1[(__int16)v8] = 101;
            uint64_t v43 = (v8 << 48) + 0x1000000000000;
            char v44 = 114;
          }
          __int16 v50 = &a1[v43 >> 48];
          *__int16 v50 = v44;
          v50[1] = 0;
LABEL_178:
          uint64_t v56 = *(void *)(v16 + 1328) | 0x2000000;
          goto LABEL_179;
        }
        int v25 = v9 - 4;
        if (v9 >= 4 && v12 == 122 && v11 == 101)
        {
          int v26 = *v24;
          if (v26 == 97)
          {
            int v27 = a1[v25];
            if (v27 != 102 && (v9 < 5 || v27 != 114 || a1[v9 - 5] != 116)) {
              goto LABEL_145;
            }
            goto LABEL_139;
          }
          if (v26 == 105 && a1[v25] == 100)
          {
LABEL_139:
            if (*(unsigned char *)(v6 + 45) == 108 && ((int v51 = *(unsigned __int8 *)(v6 + 46), v51 == 111) || v51 == 97))
            {
              if (v26 == 97) {
                *uint64_t v24 = -31;
              }
              int v52 = v9 - 2;
            }
            else
            {
              a1[v9 - 2] = 114;
              int v52 = v9 - 1;
            }
            a1[v52] = 0;
            goto LABEL_178;
          }
        }
      }
LABEL_145:
      char v53 = 1;
      char v54 = 1;
      switch(((v11 - 97) >> 1) | (((_BYTE)v11 - 97) << 7))
      {
        case 0:
        case 2:
        case 7:
          goto LABEL_146;
        case 1:
        case 3:
        case 5:
        case 6:
          goto LABEL_148;
        case 4:
          char v54 = 0;
          if ((v12 - 97) <= 0x14 && ((1 << (v12 - 97)) & 0x104011) != 0 || v12 == 252) {
            goto LABEL_148;
          }
LABEL_146:
          char v53 = 0;
LABEL_147:
          char v54 = 1;
LABEL_148:
          if (*(unsigned char *)(v6 + 45) != 108) {
            return 10;
          }
          int v55 = *(unsigned __int8 *)(v6 + 46);
          if (v55 != 111 && v55 != 97) {
            return 10;
          }
          a1[(__int16)(v8 - 1)] = 0;
          if (v54)
          {
            if ((v53 & 1) == 0) {
              icvowelchange(a1, v16);
            }
          }
          else
          {
            a1[(__int16)(v8 - 1) - 1] = -19;
            *(void *)(v16 + 1328) |= 4uLL;
          }
          break;
        default:
          goto LABEL_147;
      }
LABEL_159:
      uint64_t v56 = *(void *)(v16 + 1328) | 0x1000;
LABEL_179:
      *(void *)(v16 + 1328) = v56;
      uint64_t v28 = (uint64_t)a1;
      uint64_t v29 = (uint64_t)v23;
      uint64_t v40 = v16;
      goto LABEL_173;
    }
    if ((*(_WORD *)(v6 + 60) & 0x800) == 0)
    {
      if ((*(_WORD *)(v6 + 60) & 0x300) != 0)
      {
        icstem2(a1, a3);
        uint64_t v20 = *(void *)(a3 + 1328);
        if ((v20 & 4) != 0)
        {
          altstem((uint64_t)a1, (uint64_t)a2, a3);
          uint64_t v20 = *(void *)(a3 + 1328);
        }
        *(void *)(a3 + 1328) = v20 | 0x1000;
        if (SLstrcmp(a2, "-na"))
        {
          if (SLstrcmp(a2, "-nas"))
          {
            if (SLstrcmp(a2, "-no")) {
              return 2;
            }
            int v21 = 7302189;
          }
          else
          {
            a2[4] = 0;
            int v21 = 1935764525;
          }
        }
        else
        {
          int v21 = 6384685;
        }
        *(_DWORD *)a2 = v21;
        icmodpost((uint64_t)a2, a3);
        uint64_t v28 = (uint64_t)a1;
        uint64_t v29 = (uint64_t)a2;
        uint64_t v40 = a3;
LABEL_173:
        altstem(v28, v29, v40);
        return 2;
      }
      if ((*(_WORD *)(v6 + 60) & 0x400) != 0)
      {
        unsigned int v17 = a2;
        if (!SLstrcmp(a2, "-na"))
        {
          a2[2] = 0;
          __int16 v49 = 24877;
LABEL_170:
          *(_WORD *)a2 = v49;
          goto LABEL_171;
        }
        if (SLstrcmp(a2, "-nas"))
        {
          if (SLstrcmp(a2, "-no"))
          {
            *(void *)(a3 + 1328) |= 2uLL;
            return 3;
          }
          a2[2] = 0;
          __int16 v49 = 28461;
          goto LABEL_170;
        }
        int v19 = 7561517;
        goto LABEL_136;
      }
    }
    return 10;
  }
  if ((*(_WORD *)(v6 + 60) & 0x400) != 0) {
    return 10;
  }
  if ((*(_WORD *)(v6 + 60) & 0x100) != 0)
  {
    a1[(__int16)(v8 - 1)] = 0;
  }
  else
  {
    if ((*(_WORD *)(v6 + 60) & 0x200) == 0)
    {
      if ((*(_WORD *)(v6 + 60) & 0x800) == 0) {
        return result;
      }
      unsigned int v17 = a2;
      if (SLstrcmp(a2, "-a"))
      {
        if (SLstrcmp(a2, "-as"))
        {
          if (SLstrcmp(a2, "-o"))
          {
            int v18 = "-os";
            goto LABEL_35;
          }
          goto LABEL_134;
        }
        goto LABEL_124;
      }
      goto LABEL_103;
    }
    icstem2(a1, a3);
  }
  *(void *)(a3 + 1328) |= 0x1000uLL;
  return icpost3alt((uint64_t)a1, a2, a3);
}

uint64_t icstem2(const char *a1, uint64_t a2)
{
  __int16 v4 = strlen(a1);
  __int16 v5 = v4 - 1;
  if (v4 >= 1)
  {
    uint64_t v6 = (v4 - 1);
    if (a1[v6] == 115)
    {
      a1[v6] = 0;
      return 0;
    }
  }
  a1[v5] = 0;
  int v7 = v5;
  uint64_t v8 = (v5 - 3);
  if (v7 < 3)
  {
    if (v7 != 2)
    {
LABEL_17:
      icvowelchange(a1, a2);
      return 0;
    }
  }
  else if (!SLstrcmp(&a1[v8], "que"))
  {
    a1[v7 - 1] = -23;
LABEL_16:
    *(void *)(a2 + 1328) |= 4uLL;
    return 0;
  }
  uint64_t v9 = (v7 - 1);
  if (a1[v9] != 105) {
    goto LABEL_17;
  }
  int v10 = a1[v7 - 2];
  BOOL v11 = (v10 - 97) > 0x14 || ((1 << (v10 - 97)) & 0x104011) == 0;
  if (!v11 || v10 == 252)
  {
    a1[v9] = -19;
    goto LABEL_16;
  }
  return 0;
}

uint64_t icmodpost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 3184) + 264) + 112);
  __strcpy_chk();
  *(_WORD *)(v3 + 32) = *(_WORD *)(v3 + 90);
  *(void *)(a2 + 1328) |= 0x80000uLL;
  __strcpy_chk();
  return 0;
}

uint64_t icpost2alt(uint64_t a1, char *a2, uint64_t a3)
{
  if (SLstrcmp(a2, "-la"))
  {
    if (!SLstrcmp(a2, "-las"))
    {
      int v8 = 7561517;
LABEL_11:
      *(_DWORD *)a2 = v8;
      goto LABEL_12;
    }
    if (SLstrcmp(a2, "-lo"))
    {
      if (SLstrcmp(a2, "-los"))
      {
        *(void *)(a3 + 1328) |= 2uLL;
        return 3;
      }
      int v8 = 7565101;
      goto LABEL_11;
    }
    a2[2] = 0;
    __int16 v7 = 28461;
  }
  else
  {
    a2[2] = 0;
    __int16 v7 = 24877;
  }
  *(_WORD *)a2 = v7;
LABEL_12:
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 3184) + 264) + 112);
  if ((*(_WORD *)(v9 + 90) & 4) != 0 && (*(_WORD *)(v9 + 60) & 0x800) != 0)
  {
    char v11 = 0;
    *(_DWORD *)__src = 28205;
    __strcat_chk();
    strcpy(a2, __src);
  }
  icmodpost((uint64_t)a2, a3);
  altstem(a1, (uint64_t)a2, a3);
  return 2;
}

uint64_t icpost3alt(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (SLstrcmp(a2, "-a"))
  {
    if (SLstrcmp(a2, "-as"))
    {
      if (SLstrcmp(a2, "-o"))
      {
        if (SLstrcmp(a2, "-os"))
        {
          *(void *)(a3 + 1328) |= 2uLL;
          return 3;
        }
        a2[4] = 0;
        int v7 = 1936682029;
      }
      else
      {
        int v7 = 7302189;
      }
    }
    else
    {
      a2[4] = 0;
      int v7 = 1935764525;
    }
  }
  else
  {
    int v7 = 6384685;
  }
  *(_DWORD *)a2 = v7;
  icmodpost((uint64_t)a2, a3);
  altstem(a1, (uint64_t)a2, a3);
  return 2;
}

uint64_t icvowelchange(const char *a1, uint64_t a2)
{
  uint64_t v4 = (__int16)(strlen(a1) - 1);
  unsigned int v5 = a1[v4];
  if (v5 > 0xE0)
  {
    switch(v5)
    {
      case 0xF4u:
        char v6 = 111;
        goto LABEL_14;
      case 0xEAu:
        char v6 = 101;
        goto LABEL_14;
      case 0xE1u:
        char v6 = 97;
        goto LABEL_14;
    }
  }
  else
  {
    switch(v5)
    {
      case 'a':
        char v6 = -31;
        goto LABEL_14;
      case 'e':
        char v6 = -22;
        goto LABEL_14;
      case 'o':
        char v6 = -12;
LABEL_14:
        a1[v4] = v6;
        *(void *)(a2 + 1328) |= 4uLL;
        break;
    }
  }
  return 0;
}

uint64_t ICcltstm(char *a1, char a2, unsigned char *a3, char *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 3184);
  uint64_t v11 = *(void *)(v10 + 264);
  uint64_t v12 = *(void *)(v11 + 112);
  unsigned __int16 v13 = strlen(a1);
  BOOL v14 = 0;
  int v15 = *(char *)(v12 + 92);
  if ((__int16)v13 <= v15) {
    __int16 v16 = 0;
  }
  else {
    __int16 v16 = v13 - v15;
  }
  if ((*(unsigned char *)(a5 + 24) & 0x40) != 0)
  {
    if (*(unsigned char *)(v11 + 88))
    {
      if (*(unsigned char *)(v11 + 88) == 2)
      {
LABEL_7:
        BOOL v14 = 1;
        goto LABEL_9;
      }
      uint64_t v21 = v11 + 92;
      int v22 = *(__int16 *)(a5 + 1612);
      if ((*(_DWORD *)(v11 + 92) & 0x80000000) != 0)
      {
        LOWORD(v24) = 0;
        while (v22 > (__int16)v24)
        {
          LOWORD(v24) = v24 + 1;
          if (((*(_DWORD *)(v21 + 4 * ((unsigned __int16)v24 >> 5)) >> ~(_BYTE)v24) & 1) == 0) {
            goto LABEL_75;
          }
        }
        int v24 = v22 & ~(v22 >> 31);
LABEL_75:
        BOOL v23 = (unsigned __int16)v24 == 1;
        if (!v16 && (unsigned __int16)v24 == 1) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v23 = 0;
        LOWORD(v24) = 0;
      }
      BOOL v14 = (unsigned __int16)v24 == (unsigned __int16)v22;
      if (!v23 && (unsigned __int16)v24 != (unsigned __int16)v22)
      {
        BOOL v14 = 0;
        if (v16 >= (__int16)v24 && (unsigned __int16)v24 != 2)
        {
          BOOL v14 = 1;
          if (v22 > (__int16)v24)
          {
            do
            {
              int v25 = (1 << ~(_BYTE)v24) & *(_DWORD *)(v21 + 4 * ((unsigned __int16)v24 >> 5));
              BOOL v14 = v25 == 0;
              int v24 = (__int16)(v24 + 1);
              if (v25) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v24 < v22;
              }
            }
            while (v26);
          }
        }
      }
    }
    else
    {
      BOOL v14 = 0;
    }
  }
LABEL_9:
  if (!*(_WORD *)(v12 + 60))
  {
    *(_WORD *)(v11 + 3492) &= ~0x80u;
    *(_WORD *)(v12 + 64) &= ~0x200u;
    *(_WORD *)(v12 + 66) &= ~0x200u;
    *(_WORD *)(v12 + 68) &= ~0x200u;
    *(_WORD *)(v12 + 44) = 0;
    return 11;
  }
  if ((__int16)v13 >= 1)
  {
    uint64_t v17 = 0;
    while ((*(_DWORD *)(*(void *)(*(void *)(v10 + 248) + 56) + 4 * a1[v17]) & 0x4000000) == 0)
    {
      if (v13 == ++v17) {
        goto LABEL_14;
      }
    }
    if (*a3)
    {
      a1[(__int16)(v13 - 1)] = 0;
      size_t v20 = strlen(a1);
      memmove((void *)(a5 + 1690), a1, v20 + 1);
      __strcat_chk();
      if (!a3[1]) {
        *(void *)(a5 + 1328) |= 0x1000uLL;
      }
      goto LABEL_55;
    }
    if (a3[2]) {
      char v28 = v14;
    }
    else {
      char v28 = 1;
    }
    if ((v28 & 1) == 0)
    {
LABEL_55:
      if (a3[2]) {
        char v29 = v14;
      }
      else {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
        *(void *)(a5 + 1328) |= 4uLL;
        if (!*a3)
        {
          size_t v30 = strlen(a1);
          memmove((void *)(a5 + 1690), a1, v30 + 1);
          __strcat_chk();
        }
      }
      goto LABEL_81;
    }
    return 10;
  }
LABEL_14:
  if (!a3[2])
  {
    if ((a2 & 2) != 0)
    {
      if ((*(_WORD *)(v12 + 62) & 0x80) != 0) {
        return 10;
      }
      if (!*a3 && v14) {
        return 10;
      }
    }
    if (v14)
    {
      if (!*a3) {
        return 10;
      }
    }
    else
    {
      HIDWORD(v32) = a1[v16] - 97;
      LODWORD(v32) = HIDWORD(v32);
      unsigned int v31 = v32 >> 1;
      if (v31 <= 0xA && ((0x495u >> v31) & 1) != 0) {
        a1[v16] = byte_20CC61BE0[v31];
      }
      if (!*a3)
      {
        size_t v34 = strlen(a1);
        memmove((void *)(a5 + 1690), a1, v34 + 1);
LABEL_79:
        __strcat_chk();
LABEL_80:
        *(void *)(a5 + 1328) |= 4uLL;
LABEL_81:
        *(_WORD *)v10 |= 4u;
        return 2;
      }
    }
    a1[(__int16)(v13 - 1)] = 0;
    size_t v33 = strlen(a1);
    memmove((void *)(a5 + 1690), a1, v33 + 1);
    __strcat_chk();
    if (!a3[1]) {
      *(void *)(a5 + 1328) |= 0x1000uLL;
    }
    if (v14) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if ((a2 & 2) != 0 && (*(_WORD *)(v12 + 62) & 0x80) != 0) {
    goto LABEL_79;
  }
  if (a3[1]) {
    BOOL v18 = v14;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18) {
    return 10;
  }
  return ICcltacc(a1, a3, a4, (void *)a5);
}

uint64_t ICcltuna(char *__s, int a2, uint64_t a3)
{
  v45[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 3184);
  uint64_t v7 = *(void *)(*(void *)(v6 + 248) + 56);
  uint64_t v8 = *(void *)(v6 + 264);
  *(_WORD *)(v8 + 40) = 0;
  uint64_t v9 = (__int16 *)(v8 + 40);
  *(_WORD *)(v8 + 44) = 0;
  if (*(unsigned char *)(a3 + 8) == 8 && *(_DWORD *)(a3 + 24) == 64)
  {
    LOWORD(v10) = *(unsigned __int8 *)(v8 + 88);
    if (!*(unsigned char *)(v8 + 88))
    {
LABEL_12:
      if ((*(_DWORD *)(v8 + 4 * ((unsigned __int16)v10 >> 5) + 92) >> ~(_BYTE)v10)) {
        *(void *)(a3 + 1328) |= 0x1000000uLL;
      }
      return 11;
    }
    uint64_t v11 = (unsigned __int16)strlen(__s);
    if (v11)
    {
      uint64_t v10 = 0;
      while ((*(_DWORD *)(v7 + 4 * __s[v10]) & 0x4000000) == 0)
      {
        if (v11 == ++v10) {
          goto LABEL_8;
        }
      }
      goto LABEL_12;
    }
  }
LABEL_8:
  if (*(unsigned __int8 *)(v8 + 88) - 4 >= 0xFFFFFFFD
    && (*(_DWORD *)(v7 + 4 * *__s) & 0x10000000) != 0)
  {
    __strcpy_chk();
    char v12 = -18;
    char v13 = -19;
    uint64_t v14 = 2;
    uint64_t v15 = 1;
    switch(((__src[0] - 97) >> 1) | ((__src[0] - 97) << 7))
    {
      case 0:
        char v43 = -32;
        char v12 = -30;
        char v13 = -31;
        goto LABEL_15;
      case 2:
        char v43 = -24;
        char v12 = -23;
        char v13 = -22;
LABEL_15:
        uint64_t v14 = 3;
        uint64_t v15 = 2;
        goto LABEL_19;
      case 4:
        goto LABEL_19;
      case 7:
        char v12 = -12;
        char v13 = -13;
        goto LABEL_18;
      case 10:
        char v12 = -5;
        char v13 = -7;
LABEL_18:
        uint64_t v14 = 2;
        uint64_t v15 = 1;
LABEL_19:
        *(&v42 + v15) = v13;
        uint64_t v16 = *(void *)(*(void *)(a3 + 3184) + 232);
        *(_WORD *)(v16 + 2) = *(_WORD *)(v8 + 3204);
        *(_WORD *)uint64_t v16 = 0;
        *(unsigned char *)(v16 + 42) = 0;
        *(_WORD *)(v16 + 50) = 0;
        __src[0] = v12;
        strcpy(*(char **)(v16 + 8), __src);
        uint64_t v17 = &v43;
        break;
      default:
        goto LABEL_22;
    }
    while (1)
    {
      PDword(*(unsigned __int16 **)(*(void *)(a3 + 3184) + 232), 1u, 1);
      uint64_t v18 = *(void *)(*(void *)(a3 + 3184) + 232);
      uint64_t v19 = *(unsigned __int16 *)(v18 + 50);
      if (*(_WORD *)(v18 + 50)) {
        break;
      }
      *(_WORD *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 42) = 0;
      *(_WORD *)(v18 + 50) = 0;
      char v20 = *v17++;
      __src[0] = v20;
      strcpy(*(char **)(v18 + 8), __src);
      if (!--v14) {
        goto LABEL_22;
      }
    }
    for (uint64_t i = *(void *)(v18 + 104);
          *(unsigned __int8 *)(*(void *)i + 71) > *(unsigned __int8 *)(v8 + 88)
       || *(unsigned char *)(*(void *)i + 70) != 1;
          i += 8)
    {
      if (!--v19)
      {
        *(_WORD *)(v8 + 102) = 1;
        *(_WORD *)(v8 + 3492) |= 2u;
        *(_WORD *)(a3 + 1322) |= 0x20u;
        return 10;
      }
    }
    return 11;
  }
LABEL_22:
  __src[0] = 0;
  if (!SFaccent((unsigned __int8 *)__s, a2, *(void *)(*(void *)(a3 + 3184) + 248), (__int16 *)v8)) {
    return 11;
  }
  if (*(unsigned char *)(v8 + 88) == 2)
  {
    *(_WORD *)(v8 + 102) = 1;
    goto LABEL_65;
  }
  v45[0] = 0;
  __int16 v21 = strlen((const char *)(*(void *)(v8 + 112) + 34));
  int v22 = *(__int16 *)(a3 + 1612);
  if (v22 < 1)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    int v23 = 0;
    int v24 = 0;
    int v25 = v22 + v21;
    do
    {
      if ((*(_DWORD *)(v8 + 92 + 4 * ((unsigned __int16)(v21 + v24) >> 5)) >> ~(v21 + v24)))
      {
        *((_DWORD *)v45 + ((unsigned __int16)v24 >> 5)) |= 1 << ~(_BYTE)v24;
        ++v23;
      }
      ++v24;
    }
    while (v21 + v24 < v25);
    if (v23)
    {
      if (v23 == 1)
      {
        if (SLODWORD(v45[0]) < 0) {
          LOBYTE(v23) = 1;
        }
        else {
          LOBYTE(v23) = 3;
        }
      }
      else if (v24 == v23)
      {
        LOBYTE(v23) = 2;
      }
      else
      {
        LOBYTE(v23) = 3;
      }
    }
  }
  if (*v9 < 1) {
    return 11;
  }
  unsigned int v27 = a2;
  uint64_t v28 = 0;
  unsigned int v40 = v23;
  int v41 = v27;
  uint64_t v29 = v27;
  while (1)
  {
    uint64_t v30 = *(__int16 *)(a3 + 2 * v28 + 2890);
    LOBYTE(v31) = *(unsigned char *)(a3 + v30 + 1690);
    if ((_BYTE)v31)
    {
      uint64_t v32 = 0;
      uint64_t v33 = a3 + 1691 + v30;
      do
      {
        int v34 = v32 + 1;
        __src[v32] = v31;
        int v31 = *(unsigned __int8 *)(v33 + v32++);
      }
      while (v31);
    }
    else
    {
      int v34 = 0;
    }
    __src[v34] = 0;
    __int16 v35 = strlen(__src);
    SLrecap((unsigned __int8 *)__src, v35, **(unsigned __int8 **)(v8 + 72), *(void *)(v8 + 80), v40, v7);
    SFremacc(__src, v7, *(unsigned __int8 *)(a3 + 8));
    if (v41 < 1)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      uint64_t v36 = 0;
      while (1)
      {
        if (((*((_DWORD *)v45 + ((unsigned __int16)v36 >> 5)) >> ~(_BYTE)v36) & 1) == 0)
        {
          uint64_t v37 = __src[v36];
          if ((*(_DWORD *)(v7 + 4 * v37) & 0x40000000) != 0) {
            LOBYTE(v37) = v37 + 32;
          }
          if (__s[v36] != v37) {
            break;
          }
        }
        if (v29 == ++v36) {
          goto LABEL_64;
        }
      }
    }
    if (v36 == v29) {
      break;
    }
    ++v28;
    uint64_t result = 11;
    if (v28 >= *v9) {
      return result;
    }
  }
LABEL_64:
  *(_WORD *)(v8 + 102) = 1;
  SFlstini(v9, (_WORD *)(v8 + 44), *(unsigned char **)(v8 + 48), *(_WORD **)(v8 + 64));
  __int16 v39 = strlen(__src);
  SFadd(__src, v39, v9, (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(void *)(v8 + 48), *(void *)(v8 + 64));
LABEL_65:
  *(_WORD *)(v8 + 3492) |= 2u;
  **(_WORD **)(a3 + 3184) |= 0x40u;
  return 10;
}

uint64_t ICcmp(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  int v90 = 0;
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(v2 + 280);
  uint64_t v87 = v2;
  uint64_t v4 = *(void *)(v2 + 264);
  *(_DWORD *)(v3 + 1500) = 0;
  *(_DWORD *)(v3 + 1738) = 0;
  *(_WORD *)(v3 + 1524) = 0;
  *(_WORD *)(v3 + 1604) = 0;
  *(unsigned char *)(v3 + 1607) = 0;
  *(unsigned char *)(v3 + 1527) = 0;
  *(unsigned char *)(v3 + 1672) = 0;
  if (*(unsigned char *)(*(void *)(a1 + 3184) + 304) == 11 && (*(_WORD *)(v4 + 18) & 0x100) != 0)
  {
    char v84 = 0;
    int v5 = 1;
  }
  else
  {
    int v5 = 0;
    char v84 = 1;
  }
  int v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 1414))
  {
    uint64_t result = ICcmprmc(a1, 0, (__int16)(*(_WORD *)(a1 + 1612) - 1));
    if (result == 10)
    {
      *(_WORD *)(v3 + 1742) |= 0x800u;
      return result;
    }
  }
  int v8 = ICcmplmc(a1);
  if (!v8) {
    return 11;
  }
  uint64_t v83 = v4;
  int v9 = 0;
  int v85 = 0;
  uint64_t v79 = (char *)(v3 + 1672);
  if (v6 == 17) {
    int v10 = 5;
  }
  else {
    int v10 = 4;
  }
  int v86 = v10;
  int v77 = (const char *)(a1 + 1547);
  int v80 = 11;
  int v81 = v5;
  int v78 = v8;
  __int16 v11 = v8;
  int v82 = v6;
  while (1)
  {
    do
    {
      while (1)
      {
        if (!v11)
        {
          if (*(unsigned char *)(a1 + 1690))
          {
            if (!*(_WORD *)(v83 + 102)) {
              *(_WORD *)(v83 + 102) = 1;
            }
            if (!*(_DWORD *)(v3 + 1516))
            {
              *(_DWORD *)(v3 + 1516) = v9;
              *(_DWORD *)(v3 + 1520) = v85;
            }
            return 2;
          }
          *(_WORD *)(v3 + 1742) = 0;
          *(void *)(v83 + 3480) = 0;
          return 11;
        }
        int v12 = *(__int16 *)(v3 + 100 * --v11 + 68);
        if (*(unsigned char *)(*(void *)(a1 + 3184) + 304) == 11)
        {
          LOWORD(v90) = 3 * *(_WORD *)(v3 + 100 * v11 + 72);
          if ((v84 & 1) == 0) {
            *(_WORD *)(v3 + 100 * v11 + 70) |= *(_WORD *)(v3 + 100 * v11 + 90);
          }
        }
        uint64_t v13 = v3 + 100 * v11;
        __int16 v15 = *(_WORD *)(v13 + 88);
        uint64_t v14 = v13 + 88;
        int v16 = *(unsigned __int16 *)(v14 - 18);
        uint64_t v17 = *(__int16 *)(v14 - 22);
        *(_WORD *)(v3 + 1500) = v17;
        int v18 = *(unsigned __int8 *)(v14 - 12);
        *(unsigned char *)(v3 + 1504) = v18;
        *(void *)(v3 + 1508) = *(void *)(v14 - 8);
        *(_WORD *)(v3 + 1524) = v15;
        int v19 = *(_DWORD *)(v14 + 4);
        *(_DWORD *)(v3 + 1516) = v19;
        if (!v9) {
          int v9 = v19;
        }
        int v88 = v16;
        int v89 = v9;
        *(unsigned char *)(v3 + 1526) = *(unsigned char *)(v14 - 23);
        char v20 = (unsigned char *)(*(void *)(v87 + 96) + v86 * v12);
        int v21 = *v20;
        if (*v20) {
          __strcpy_chk();
        }
        else {
          __s[0] = 0;
        }
        size_t v22 = strlen(__s);
        HIWORD(v90) = v22;
        if (v18 == 2
          || *(unsigned char *)(a1 + 8) == 6
          && (*(unsigned char *)(a1 + 20) & 0x10) != 0
          && *(unsigned char *)(a1 + v17 + (__int16)v22 + 1547) == 45)
        {
          if (!v22) {
            goto LABEL_28;
          }
          uint64_t v23 = 0;
          int v24 = 0;
          do
          {
            if (__s[v23] == 45) {
              break;
            }
            uint64_t v23 = (unsigned __int16)++v24;
          }
          while (v22 > (unsigned __int16)v24);
          if (v22 == v23)
          {
LABEL_28:
            __strcat_chk();
            int v88 = 0;
            ++HIWORD(v90);
            int v21 = 1;
          }
        }
        if (*(_DWORD *)(a1 + 1308) && (*(_WORD *)v14 & 0x40) != 0)
        {
          __strcpy_chk();
          int v25 = *(_DWORD *)(v3 + 100 * v11 + 96);
          *(_DWORD *)(v3 + 1520) = v25;
          int v26 = v85;
          if (!v85) {
            int v26 = v25;
          }
          int v85 = v26;
        }
        int v27 = *(unsigned __int16 *)(a1 + 1612);
        uint64_t v28 = v17;
        if (v27 != (unsigned __int16)v17) {
          break;
        }
        int v9 = v89;
        if (*(unsigned char *)(a1 + 1413))
        {
          if ((v18 & 0xFE) != 2 && !v88 && __s[0] != 45)
          {
            if (v82 != 6 || *(unsigned char *)(v83 + 88))
            {
              *(void *)(a1 + 1328) |= 0x200uLL;
              *(_WORD *)(v3 + 1742) |= 0x401u;
              *(_WORD *)v87 |= 4u;
              __int16 v63 = *(_WORD *)(v3 + 1738) + HIWORD(v90);
              *(_WORD *)(v3 + 1738) = v63;
              *(_WORD *)(v3 + 1740) = v63;
              __strcpy_chk();
              __int16 v64 = ICcmpalt(v17, v91, SHIWORD(v90), 1, a1);
              SFadd(v79, *(__int16 *)(a1 + 1612), (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(void *)(v83 + 48), *(void *)(v83 + 64));
              return v64;
            }
            *(void *)(a1 + 1328) |= 0x40uLL;
            return 11;
          }
          uint64_t v65 = v83;
          if (!*(_WORD *)(v83 + 102)) {
            *(_WORD *)(v83 + 102) = 1;
          }
          if (*(unsigned char *)(a1 + 8) != 6 || HIWORD(v90) || (unsigned int v66 = *(unsigned __int8 *)(v83 + 88), v66 > 2))
          {
LABEL_150:
            *(_WORD *)(v3 + 1742) |= 0x400u;
            *(_WORD *)(a1 + 1322) &= 0xFFB9u;
            return 10;
          }
LABEL_149:
          **(unsigned char **)(v65 + 72) = v66;
          goto LABEL_150;
        }
      }
      if (!v21)
      {
        int v37 = v81;
        int v39 = v82;
        goto LABEL_63;
      }
      int v29 = __s[0];
      if (__s[0])
      {
        int v30 = 0;
        int v31 = v17;
        do
        {
          int v32 = v29;
          uint64_t v33 = a1 + (__int16)v31++;
          int v34 = *(unsigned __int8 *)(v33 + 1547);
          int v29 = __s[(__int16)++v30];
          if (__s[(__int16)v30]) {
            BOOL v35 = v34 == v32;
          }
          else {
            BOOL v35 = 0;
          }
        }
        while (v35);
        if (v34 != v32)
        {
          if (!HIWORD(v90) && *(unsigned char *)(a1 + 1413))
          {
            *(void *)(a1 + 1328) |= 0x200uLL;
            *(_WORD *)(v3 + 1742) |= 0x401u;
            *(_WORD *)v87 |= 4u;
            __strcpy_chk();
            __int16 v75 = ICcmpalt(v17, v91, SHIWORD(v90), 0, a1);
            __int16 v76 = strlen(v79);
            SFadd(v79, v76, (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(void *)(v83 + 48), *(void *)(v83 + 64));
            return v75;
          }
          HIWORD(v90) = 0;
          int v43 = ICcmpprm(a1, v17, 0, v88);
          int v37 = v81;
          char v44 = v81 ^ 1;
          if ((unsigned __int16)v43 != 11) {
            char v44 = 1;
          }
          if ((v44 & 1) == 0)
          {
            int v43 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v81);
            if ((unsigned __int16)v43 == 10) {
              return 10;
            }
          }
          int v45 = v43 << 16;
          if (v43 << 16 == 655360)
          {
            __int16 v46 = *(_WORD *)(v83 + 102);
            int v39 = v82;
            if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81) == 10) {
              goto LABEL_182;
            }
            *(_WORD *)(v83 + 102) = v46;
            int v9 = v89;
            if (v88)
            {
LABEL_177:
              if (v39 == 11) {
                LOWORD(v56) = ICcmpvow(a1, v11, 1, 0);
              }
              else {
                LOWORD(v56) = ICcmpdbl(a1, v11, 1, v81);
              }
              *(_WORD *)(v3 + 1742) |= 0x200u;
              return (__int16)v56;
            }
          }
          else
          {
            int v39 = v82;
            int v9 = v89;
            if (v45 != 720896 && v88) {
              goto LABEL_177;
            }
            if (v45 == 720896)
            {
              if (v82 == 11)
              {
                int v52 = ICcmpvow(a1, v11, 0, 0);
                int v80 = (unsigned __int16)v52;
                int v53 = v52 << 16;
                if (v52 << 16 == 0x20000)
                {
                  __int16 v54 = *(_WORD *)(v83 + 102);
                  __strcpy_chk();
                  __strcpy_chk();
                  if ((*(_WORD *)(v3 + 1742) & 0x10) != 0) {
                    --*(_WORD *)(a1 + 1612);
                  }
                  __int16 v55 = ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81);
                  *(_WORD *)(v83 + 102) = v54;
                  if (v55 == 10)
                  {
                    __int16 v74 = *(_WORD *)(v3 + 1742) | 0x110;
LABEL_183:
                    *(_WORD *)(v3 + 1742) = v74;
                    __strcpy_chk();
LABEL_184:
                    __int16 v67 = HIWORD(v90);
                    int v68 = v28;
                    int v69 = 0;
                    return ICcmpalt(v68, v91, v67, v69, a1);
                  }
                  __strcpy_chk();
                  __strcpy_chk();
                  *(_WORD *)(a1 + 1612) = strlen(v77);
                  if (v88 || v78 == 1)
                  {
                    if (v88) {
                      return 2;
                    }
                    else {
                      return 11;
                    }
                  }
                  *uint64_t v79 = 0;
                  *(_WORD *)v87 &= ~4u;
                  int v9 = v89;
                  goto LABEL_100;
                }
              }
              else
              {
                int v56 = ICcmpdbl(a1, v11, 0, v81);
                if ((v56 & 0xFFF7) == 2) {
                  return (__int16)v56;
                }
                int v80 = (unsigned __int16)v56;
                int v53 = v56 << 16;
              }
              if (v53 == 655360) {
                return 10;
              }
            }
          }
LABEL_100:
          if (*(unsigned char *)(a1 + 8) != 6 || *(unsigned char *)(v83 + 88))
          {
            if (v78 == 1)
            {
              if (v45 == 655360) {
                goto LABEL_186;
              }
            }
            else if (v45 == 655360 && *(unsigned char *)(a1 + v28 + 1547) == 45)
            {
LABEL_186:
              *(_WORD *)(v3 + 1742) |= 8u;
              __strcpy_chk();
              HIWORD(v90) = strlen(__s);
              ICcmpalt(v28, v91, SHIWORD(v90), 1, a1);
              *(_WORD *)(v3 + 1742) |= 2u;
              *(_WORD *)(v83 + 102) = 1;
              return 2;
            }
          }
          continue;
        }
      }
      if (SHIWORD(v90) + v17 == (__int16)v27 && *(unsigned char *)(a1 + 1413))
      {
        uint64_t v65 = v83;
        if (*(unsigned char *)(a1 + 8) != 6 || (unsigned int v66 = *(unsigned __int8 *)(v83 + 88), v66 >= 3)) {
          LOBYTE(v66) = v18;
        }
        goto LABEL_149;
      }
      __int16 v36 = ICcmpprm(a1, v17, SHIWORD(v90), v88);
      int v37 = v81;
      char v38 = v81 ^ 1;
      if (v36 != 11) {
        char v38 = 1;
      }
      if ((v38 & 1) == 0)
      {
        __int16 v36 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v81);
        if (v36 == 10) {
          return 10;
        }
      }
      if (v36 == 11)
      {
        int v39 = v82;
        int v9 = v89;
        if (v82 == 11)
        {
          if (v12 == 8 || (unsigned __int16)v12 == 2)
          {
            int v40 = v11;
            int v41 = ICcmpvow(a1, v11, 0, 1);
            if (v41 << 16 == 0x20000) {
              goto LABEL_179;
            }
            if (v41 << 16 == 655360) {
              return 10;
            }
            int v80 = (unsigned __int16)v41;
          }
          continue;
        }
        if (v82 != 17 || *(unsigned char *)(a1 + v28 + 1547) != 115) {
          continue;
        }
        __int16 v47 = HIWORD(v90);
        __int16 v48 = HIWORD(v90) + v28;
        int v49 = (__int16)(HIWORD(v90) + v28);
        LODWORD(v50) = (__int16)++*(_WORD *)(a1 + 1612);
        if ((int)v50 <= v48)
        {
          uint64_t v51 = v49;
        }
        else
        {
          uint64_t v50 = (int)v50;
          uint64_t v51 = v49;
          do
          {
            *(unsigned char *)(a1 + v50 + 1547) = *(unsigned char *)(a1 + v50 + 1546);
            --v50;
          }
          while (v50 > v49);
        }
        *(unsigned char *)(a1 + v51 + 1547) = 115;
        signed int v42 = ICcmpprm(a1, v28, v47, v88) << 16;
        if (v42 != 720896) {
          return (v42 >> 16);
        }
        LODWORD(v61) = *(__int16 *)(a1 + 1612);
        if (v49 < (int)v61)
        {
          do
          {
            *(unsigned char *)(a1 + v51 + 1547) = *(unsigned char *)(a1 + v51 + 1548);
            uint64_t v61 = *(__int16 *)(a1 + 1612);
            ++v51;
          }
          while (v51 < v61);
        }
        __int16 v62 = v61 - 1;
        *(_WORD *)(a1 + 1612) = v62;
        *(unsigned char *)(a1 + v62 + 1547) = 0;
LABEL_63:
        int v9 = v89;
        continue;
      }
      int v39 = v82;
      int v9 = v89;
      if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81) == 10)
      {
        *(_WORD *)(v3 + 1742) |= 0x100u;
        __strcpy_chk();
        if (*(unsigned char *)(a1 + 8) == 6
          && (*(unsigned char *)(a1 + 20) & 0x10) != 0
          && *(unsigned char *)(v28 + a1 + SHIWORD(v90) + 1546) == 45)
        {
          __strcat_chk();
        }
        goto LABEL_184;
      }
      if (v82 != 11)
      {
        if (v82 != 17 || *(unsigned char *)(a1 + v28 + 1547) != 115 || *(unsigned char *)(v28 + a1 + 1548) != 115) {
          goto LABEL_190;
        }
        __strcpy_chk();
        if ((int)v28 >= *(__int16 *)(a1 + 1612))
        {
          uint64_t v73 = v28;
        }
        else
        {
          uint64_t v71 = v28 << 48;
          uint64_t v72 = v28;
          do
          {
            *(unsigned char *)(v3 + 1672 + v72) = *(unsigned char *)(a1 + 1548 + v72);
            v71 += 0x1000000000000;
            ++v72;
          }
          while (v72 < *(__int16 *)(a1 + 1612));
          uint64_t v73 = v71 >> 48;
        }
        *(unsigned char *)(v3 + v73 + 1672) = 0;
        *(_WORD *)(v3 + 1740) = v28;
        SFadd(v79, (__int16)(*(_WORD *)(a1 + 1612) - 1), (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(void *)(v83 + 48), *(void *)(v83 + 64));
        return 2;
      }
      if (v12 != 8 && (unsigned __int16)v12 != 2) {
        goto LABEL_190;
      }
      signed int v42 = ICcmpvow(a1, v11, 1, 1) << 16;
      if (v42 != 720896) {
        return (v42 >> 16);
      }
    }
    while (!v88);
    HIWORD(v90) = 0;
    __int16 v57 = ICcmpprm(a1, v28, 0, v88);
    char v58 = v37 ^ 1;
    if (v57 != 11) {
      char v58 = 1;
    }
    if ((v58 & 1) == 0)
    {
      __int16 v57 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v37);
      if (v57 == 10) {
        return 10;
      }
    }
    if (v57 != 11) {
      break;
    }
    if (v39 == 11)
    {
      if (HIWORD(v90)) {
        goto LABEL_118;
      }
      int v40 = v11;
      int v59 = ICcmpvow(a1, v11, 0, 0);
      if (v59 << 16 == 0x20000)
      {
LABEL_179:
        __strcpy_chk();
        __strcpy_chk();
        if ((*(_WORD *)(v3 + 1742) & 0x10) != 0) {
          --*(_WORD *)(a1 + 1612);
        }
        if ((unsigned __int16)ICcmpexc(a1, v40, 1, (_WORD *)&v90 + 1, &v90, v37) == 10)
        {
LABEL_182:
          __int16 v74 = *(_WORD *)(v3 + 1742) | 0x100;
          goto LABEL_183;
        }
        __strcpy_chk();
        __strcpy_chk();
        *(_WORD *)(a1 + 1612) = strlen(v77);
        return 2;
      }
      if (v59 << 16 == 655360) {
        return 10;
      }
      int v80 = (unsigned __int16)v59;
LABEL_118:
      uint64_t result = 2;
      if (v80 == 2) {
        return result;
      }
    }
    else
    {
      LODWORD(result) = ICcmpdbl(a1, v11, 0, v37);
      int v80 = (unsigned __int16)result;
      int v60 = result << 16;
      if (result << 16 == 0x20000)
      {
        if (v39 != 6) {
          return 2;
        }
        uint64_t result = 2;
        if ((*(unsigned char *)(a1 + 20) & 0x20) != 0) {
          return result;
        }
      }
      else if (v60 == 196608 || v60 == 655360)
      {
        return (unsigned __int16)result;
      }
    }
  }
  HIWORD(v90) = 0;
  if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v37) == 10)
  {
    *(_WORD *)(v3 + 1742) |= 0x100u;
    __strcpy_chk();
    __int16 v67 = HIWORD(v90);
    int v68 = v28;
    int v69 = 1;
    return ICcmpalt(v68, v91, v67, v69, a1);
  }
  if (v39 == 11)
  {
    __int16 v70 = ICcmpvow(a1, v11, 1, 0);
LABEL_188:
    __int16 v57 = v70;
  }
  else if (v39 != 6 || (*(unsigned char *)(a1 + 20) & 0x20) != 0)
  {
    __int16 v70 = ICcmpdbl(a1, v11, 1, v37);
    goto LABEL_188;
  }
  if (v57 != 10) {
    return v57;
  }
LABEL_190:
  *(_WORD *)(v3 + 1742) |= 0x200u;
  return 10;
}

uint64_t ICcmpalt(int a1, unsigned __int8 *a2, __int16 a3, int a4, uint64_t a5)
{
  __int16 v7 = a3;
  int v8 = a1;
  v52[1] = *MEMORY[0x263EF8340];
  int v9 = *(void **)(a5 + 3184);
  uint64_t v10 = v9[35];
  uint64_t v11 = v9[33];
  uint64_t v12 = *(void *)(v9[31] + 56);
  uint64_t v13 = (unsigned char *)(v10 + 1672);
  *(unsigned char *)(v10 + 1736) = 0;
  *(_OWORD *)(v10 + 1704) = 0u;
  *(_OWORD *)(v10 + 1720) = 0u;
  *(_OWORD *)(v10 + 1672) = 0u;
  *(_OWORD *)(v10 + 1688) = 0u;
  if (a1 < 1)
  {
    LOWORD(v17) = 0;
  }
  else
  {
    uint64_t v14 = (unsigned __int16)a1;
    __int16 v15 = (char *)(a5 + 1547);
    do
    {
      char v16 = *v15++;
      *v13++ = v16;
      --v14;
    }
    while (v14);
    LOWORD(v17) = a1;
  }
  *(_WORD *)(v10 + 1738) = v17;
  int v18 = *a2;
  if (*(_DWORD *)(a5 + 1308) && v18 == 45)
  {
    *(_DWORD *)(v11 + 4 * ((unsigned __int16)v17 >> 5) + 3480) &= ~(1 << ~(_BYTE)v17);
    int v18 = *a2;
  }
  if (v18)
  {
    int v19 = a2 + 1;
    __int16 v20 = v17;
    while (1)
    {
      if (v18 == 45 && *(unsigned char *)(a5 + 8) == 6)
      {
        if (*(unsigned __int8 *)(v10 + 1592) - 1 <= 2)
        {
          **(unsigned char **)(v11 + 72) = 3;
          if ((*(_DWORD *)(v12 + 4 * *(unsigned __int8 *)(a5 + 1547)) & 0x8000000) != 0)
          {
            **(unsigned char **)(v11 + 72) = *(unsigned char *)(v10 + 1592);
            int v21 = *(_DWORD **)(v11 + 80);
          }
          else
          {
            int v21 = *(_DWORD **)(v11 + 80);
            *v21 |= 0x80000000;
          }
          *(_DWORD *)((char *)v21 + (((unint64_t)*(unsigned __int16 *)(v10 + 1502) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v10 + 1502);
        }
        if (*(unsigned char *)(a5 + (unsigned __int16)v17 + 1547) == 45)
        {
          __int16 v7 = a3 - 1;
          if (!a4) {
            goto LABEL_26;
          }
LABEL_24:
          *(_WORD *)(a5 + 1612) += v7;
          goto LABEL_27;
        }
        LOBYTE(v18) = *(v19 - 1);
      }
      *(unsigned char *)(v10 + v20++ + 1672) = v18;
      int v22 = *v19++;
      int v18 = v22;
      if (!v22) {
        goto LABEL_23;
      }
    }
  }
  __int16 v20 = v17;
LABEL_23:
  if (a4) {
    goto LABEL_24;
  }
LABEL_26:
  LOWORD(v17) = v7 + v17;
LABEL_27:
  *(_WORD *)(v10 + 1740) = v20;
  if (*(unsigned char *)(a5 + a1 + 1547) == 45) {
    *(_WORD *)(v10 + 1740) = v20 + 1;
  }
  if ((*(_WORD *)(v10 + 1604) & 0x40) != 0 && (*(_WORD *)(a5 + 1322) & 0x40) != 0)
  {
    strcat((char *)(v10 + v20 + 1672), (const char *)(v10 + 1607));
    if ((*(_WORD *)(a5 + 1322) & 0x10) != 0)
    {
      int v33 = 0;
      do
      {
        __int16 v34 = v33;
        unsigned int v35 = *(_DWORD *)(v10 + 1596 + 4 * ((unsigned __int16)v33 >> 5));
        char v36 = ~(_BYTE)v33++;
      }
      while (((v35 >> v36) & 1) == 0);
      if (((*(_DWORD *)(v11 + 4 * ((unsigned __int16)(*(_WORD *)(v10 + 1502) + v34) >> 5) + 3472) >> ~(*(_WORD *)(v10 + 1502) + v34)) & 1) == 0) {
        *(void *)(a5 + 1328) |= 8uLL;
      }
    }
  }
  else
  {
    if (*(__int16 *)(a5 + 1612) > (__int16)v17)
    {
      uint64_t v17 = (__int16)v17;
      do
        *(unsigned char *)(v10 + v20++ + 1672) = *(unsigned char *)(a5 + 1547 + v17++);
      while (v17 < *(__int16 *)(a5 + 1612));
    }
    *(unsigned char *)(v10 + v20 + 1672) = 0;
  }
  v52[0] = 0;
  if (*(unsigned char *)(v10 + 1504) == 2)
  {
    int v23 = *(__int16 *)(v10 + 1740);
    if (v23 > v8)
    {
      uint64_t v24 = *(void *)(v11 + 80);
      LOWORD(v25) = v8;
      do
      {
        *(_DWORD *)(v24 + 4 * ((unsigned __int16)v25 >> 5)) |= 1 << ~(_BYTE)v25;
        int v25 = (__int16)(v25 + 1);
      }
      while (v25 < v23);
    }
  }
  else if (*(unsigned char *)(v10 + 1592) == 2)
  {
    int v26 = *(__int16 *)(v10 + 1740);
    if (v26 > v8)
    {
      uint64_t v27 = *(void *)(v11 + 80);
      LOWORD(v28) = v8;
      do
      {
        int v29 = 1 << ~(_BYTE)v28;
        *(_DWORD *)(v27 + 4 * ((unsigned __int16)v28 >> 5)) &= ~v29;
        *(_DWORD *)(v11 + 92 + 4 * ((unsigned __int16)v28 >> 5)) &= ~v29;
        int v28 = (__int16)(v28 + 1);
      }
      while (v28 < v26);
    }
    int v30 = *(__int16 *)(a5 + 1612);
    if (v26 < v30)
    {
      uint64_t v31 = *(void *)(v11 + 80);
      do
      {
        int v32 = 1 << ~(_BYTE)v26;
        *(_DWORD *)(v31 + 4 * ((unsigned __int16)v26 >> 5)) |= v32;
        *(_DWORD *)(v11 + 92 + 4 * ((unsigned __int16)v26 >> 5)) |= v32;
        int v26 = (__int16)(v26 + 1);
      }
      while (v26 < v30);
    }
  }
  else if (*(__int16 *)(v11 + 102) >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = *(unsigned __int16 *)(v11 + 102);
    uint64_t v39 = *(void *)(v11 + 72);
    do
    {
      if (*(unsigned __int8 *)(v39 + v37) >= 2u)
      {
        v52[0] = 0;
        int v40 = *(__int16 *)(v10 + 1502);
        uint64_t v41 = *(void *)(v11 + 80);
        if (v40 >= 1)
        {
          LOWORD(v42) = 0;
          do
          {
            int v43 = 1 << ~(_BYTE)v42;
            if ((*(_DWORD *)(v41 + 8 * v37 + 4 * ((unsigned __int16)v42 >> 5)) & v43) != 0) {
              *((_DWORD *)v52 + ((unsigned __int16)v42 >> 5)) |= v43;
            }
            int v42 = (__int16)(v42 + 1);
          }
          while (v42 < v40);
        }
        int v44 = (__int16)(*(_WORD *)(a5 + 1612) - v7);
        if (v44 > v8)
        {
          __int16 v45 = *(_WORD *)(v10 + 1740) - v40;
          int v46 = v8;
          do
          {
            if ((*(_DWORD *)(v41 + 8 * v37 + 4 * ((unsigned __int16)v46 >> 5)) >> ~(_BYTE)v46)) {
              *((_DWORD *)v52 + ((unsigned __int16)(v45 + v46) >> 5)) |= 1 << ~(v45 + v46);
            }
            ++v46;
          }
          while (v46 < v44);
        }
        *(void *)(v41 + 8 * v37) = v52[0];
      }
      ++v37;
    }
    while (v37 != v38);
  }
  if (a4 && *(_DWORD *)(a5 + 1308) && (*(_WORD *)(v10 + 1742) & 0x1000) == 0)
  {
    v52[0] = 0;
    int v47 = *(__int16 *)(v10 + 1502);
    if (v47 >= 1)
    {
      LOWORD(v48) = 0;
      do
      {
        int v49 = 1 << ~(_BYTE)v48;
        if ((*(_DWORD *)(v11 + 3472 + 4 * ((unsigned __int16)v48 >> 5)) & v49) != 0) {
          *((_DWORD *)v52 + ((unsigned __int16)v48 >> 5)) |= v49;
        }
        int v48 = (__int16)(v48 + 1);
      }
      while (v48 < v47);
    }
    for (int i = (__int16)(*(_WORD *)(a5 + 1612) - v7); v8 < i; ++v8)
    {
      if ((*(_DWORD *)(v11 + 3472 + 4 * ((unsigned __int16)v8 >> 5)) >> ~(_BYTE)v8)) {
        *((_DWORD *)v52 + ((unsigned __int16)(v7 + v8) >> 5)) |= 1 << ~(v7 + v8);
      }
    }
    *(void *)(v11 + 3472) = v52[0];
  }
  return 2;
}

uint64_t ICcmpdbl(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a3 && *(unsigned char *)(a1 + 8) == 6 && (*(unsigned char *)(a1 + 20) & 0x10) != 0) {
    return 10;
  }
  uint64_t v7 = *(void *)(a1 + 3184);
  uint64_t v8 = *(void *)(v7 + 280);
  if (!*(_WORD *)(v8 + 100 * a2 + 70)) {
    return 11;
  }
  uint64_t v9 = *(void *)(v7 + 264);
  *(_WORD *)__int16 v34 = 0;
  uint64_t v10 = v8 + 100 * a2;
  int v11 = *(__int16 *)(v10 + 66);
  uint64_t v12 = *(__int16 *)(v10 + 66);
  int v13 = *(unsigned __int16 *)(v10 + 74);
  __strcpy_chk();
  int v14 = *(unsigned __int8 *)(a1 + 8);
  if (v14 == 6 && *(_DWORD *)(a1 + 20) == 64 && v34[v12 + 2] == 115) {
    int v13 = 0;
  }
  if (a3)
  {
    if (v13 != 1)
    {
      if (v13 == 2 && v34[v12 + 2] == v34[v12 + 3])
      {
        *(_WORD *)(v8 + 1742) |= 0x80u;
        v34[0] = 45;
        ICcmpalt(v12, v34, 1, 1, a1);
        *(_DWORD *)(*(void *)(v9 + 80) + (((unint64_t)*(unsigned __int16 *)(v8 + 1740) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v8 + 1740);
        **(unsigned char **)(v9 + 72) = 3;
        return 2;
      }
      goto LABEL_26;
    }
    __int16 v17 = v12 - 1;
    if (v34[v12 + 2] != v34[v12 + 3] || v14 == 6 && ((int v18 = v34[v12 + 4], v18 == 114) || v18 == 108))
    {
LABEL_26:
      *(_WORD *)(v8 + 1742) |= 0x200u;
      return 10;
    }
    *(_WORD *)(v8 + 1742) |= 0xA000u;
    *(void *)(v9 + 3480) = 0;
    *(unsigned char *)(v8 + 1526) = 0;
    *(_DWORD *)(v9 + 3480 + 4 * ((unsigned __int16)(v11 - 1) >> 5)) |= 1 << ~(_BYTE)v17;
    if ((v14 != 6 || (*(unsigned char *)(a1 + 20) & 0x20) != 0) && (~*(unsigned __int16 *)(a1 + 1322) & 0x42) == 0)
    {
      ICcmpalt(v11, "", 1, 0, a1);
      if (!a4)
      {
        __int16 v23 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v23, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(void *)(v9 + 48), *(void *)(v9 + 64));
      }
      **(_WORD **)(a1 + 3184) |= 4u;
      *(_WORD *)(a1 + 1322) |= 0x10u;
    }
    uint64_t v24 = "";
    int v25 = v17;
    int v26 = 0;
    return ICcmpalt(v25, v24, 1, v26, a1);
  }
  if (v13 == 1)
  {
    uint64_t v19 = v12 - 1;
    if ((unsigned __int16)ICcmprmc(a1, (__int16)(v12 - 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) != 10) {
      return 11;
    }
    int v20 = *(unsigned __int8 *)(a1 + 8);
    if (v20 == 6)
    {
      int v21 = *(_DWORD *)(a1 + 20);
      if ((v21 & 0x10) != 0)
      {
        *(_WORD *)__int16 v34 = v34[v19 + 3];
        if (*(void *)(a1 + 1672))
        {
          strcpy((char *)&v34[1], "-");
          __int16 v32 = 2;
        }
        else
        {
          __int16 v32 = 1;
        }
        ICcmpalt((__int16)(v12 - 1), v34, v32, 1, a1);
        __int16 v33 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v33, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(void *)(v9 + 48), *(void *)(v9 + 64));
        **(_WORD **)(a1 + 3184) |= 4u;
        return 2;
      }
      int v22 = v34[v12 + 3];
      if (v22 == 114 || v22 == 108)
      {
        *(_WORD *)(v8 + 1742) |= 0x20u;
        v34[0] = v34[v19 + 3];
LABEL_52:
        uint64_t v24 = v34;
        int v25 = (__int16)(v12 - 1);
        int v26 = 1;
        return ICcmpalt(v25, v24, 1, v26, a1);
      }
      __int16 v28 = *(_WORD *)(v8 + 1742) | 0x1000;
      *(_WORD *)(v8 + 1742) = v28;
      if ((v21 & 0x20) == 0) {
        return 10;
      }
      uint64_t v27 = (_WORD *)(v8 + 1742);
    }
    else
    {
      uint64_t v27 = (_WORD *)(v8 + 1742);
      __int16 v28 = *(_WORD *)(v8 + 1742) | 0x1000;
      *(_WORD *)(v8 + 1742) = v28;
    }
    *uint64_t v27 = v28 | 0x8000;
    v34[0] = v34[v19 + 3];
    int v29 = *(unsigned __int16 *)(a1 + 1322);
    if ((~v29 & 0x42) == 0)
    {
      ICcmpalt((__int16)(v12 - 1), "", 1, 0, a1);
      if (!a4)
      {
        __int16 v30 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v30, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(void *)(v9 + 48), *(void *)(v9 + 64));
      }
      **(_WORD **)(a1 + 3184) |= 4u;
      LOWORD(v29) = *(_WORD *)(a1 + 1322) & 0xFFED | 0x10;
      *(_WORD *)(a1 + 1322) = v29;
      int v20 = *(unsigned __int8 *)(a1 + 8);
    }
    if (v20 != 6 || (int v31 = v34[v12 + 3], v31 != 108) && v31 != 114) {
      *(_WORD *)(a1 + 1322) = v29 | 4;
    }
    *(void *)(a1 + 3156) = 0;
    *(unsigned char *)(v8 + 1526) = 0;
    *(_WORD *)(v8 + 1500) = *(_WORD *)(v8 + 1502);
    *(_DWORD *)(a1 + 3156 + 4 * ((unsigned __int16)(v12 - 1) >> 5)) |= 1 << ~(_BYTE)v19;
    goto LABEL_52;
  }
  if (v13 != 2 || v34[v12 + 3] != 45 || v34[v12 + 2] != v34[v12 + 4]) {
    return 11;
  }
  __int16 v16 = ICcmprmc(a1, (__int16)(v12 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1));
  *(_WORD *)(v8 + 1742) |= 0x200u;
  if (v16 == 10) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t ICcmpexc(uint64_t a1, int a2, int a3, _WORD *a4, _WORD *a5, int a6)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 3184);
  uint64_t v59 = *(void *)(v8 + 264);
  uint64_t v60 = v8;
  int v57 = *(unsigned __int16 *)(v8 + 92);
  uint64_t v9 = *(void *)(v8 + 280) + 100 * a2;
  signed int v10 = *(__int16 *)(v9 + 72);
  __int16 v11 = 3 * v10;
  uint64_t v12 = *(__int16 *)(v9 + 66);
  int v13 = *(unsigned __int16 *)(v9 + 90);
  int v14 = (unsigned __int16)*a4;
  __int16 v15 = v14 + v12;
  __int16 v55 = *(_WORD *)(a1 + 1612);
  if (v12 < 1)
  {
    size_t v16 = 0;
  }
  else
  {
    size_t v16 = *(unsigned __int16 *)(v9 + 66);
    memcpy(__dst, (const void *)(a1 + 1547), v16);
  }
  int v62 = (__int16)(v55 - (v14 + v12));
  __dst[v16] = 0;
  if (!a3)
  {
    if (v10 != 31 && v13 != 0)
    {
      unsigned int v20 = 0;
      while (1)
      {
        uint64_t v21 = *(void *)(a1 + 3184);
        uint64_t v22 = *(void *)(v21 + 112);
        __int16 v23 = (const char *)(v22 + 4 * v11);
        if (!*v23) {
          break;
        }
        __int16 v24 = strlen(v23);
        LOWORD(v25) = v24;
        if (v24 < 1) {
          goto LABEL_34;
        }
        uint64_t v26 = 0;
        do
        {
          int v27 = *(unsigned __int8 *)(a1 + 1547 + v12 + v26);
          int v28 = *(unsigned __int8 *)(v22 + 4 * v11 + v26++);
        }
        while (v26 < v24 && v27 == v28);
        if (v27 == v28)
        {
LABEL_34:
          if (a6 && *(unsigned char *)(v21 + 304) == 11)
          {
            int v25 = (__int16)(v12 + v24);
            int v29 = *(__int16 *)(a1 + 1612);
            if (v25 >= v29)
            {
              __int16 v30 = 0;
            }
            else
            {
              __int16 v30 = 0;
              uint64_t v31 = (__int16)(v12 + v24);
              do
                __dst[v30++] = *(unsigned char *)(a1 + 1547 + v31++);
              while (v31 < v29);
            }
            __dst[v30] = 0;
            uint64_t v34 = *(void *)(v60 + 280);
            *(_WORD *)(v34 + 1500) = v12;
            *(_WORD *)(v34 + 1502) = v25;
          }
          else
          {
            if (v62 - v24 < 1)
            {
              int v32 = 0;
            }
            else
            {
              int v32 = 0;
              int v33 = 0;
              do
              {
                __dst[v12 + v32] = *(unsigned char *)(a1 + v24 + (int)v12 + (uint64_t)v32 + 1547);
                int v32 = (__int16)++v33;
              }
              while (v62 - v24 > (__int16)v33);
            }
            __dst[v12 + v32] = 0;
            LOWORD(v29) = *(_WORD *)(a1 + 1612);
          }
          if ((unsigned __int16)ICverify(__dst, (__int16)(v29 - v25), a1) == 10)
          {
            if (*(unsigned char *)(a1 + 8) != 6 || *(unsigned char *)(a1 + 1414) || *(__int16 *)(v59 + 102) < 1) {
              return 11;
            }
            uint64_t v50 = *(unsigned __int16 *)(v59 + 102);
            uint64_t v51 = *(unsigned __int8 **)(v59 + 72);
            uint64_t result = 11;
            while (1)
            {
              int v52 = *v51++;
              if (v52 == 1) {
                break;
              }
              if (!--v50) {
                return result;
              }
            }
            *a4 = v25;
            goto LABEL_47;
          }
        }
        ++v11;
        BOOL v35 = v20++ >= 2;
        if (v35) {
          return 11;
        }
      }
    }
    return 11;
  }
  uint64_t v17 = v59;
  if (!v14 || !v13) {
    goto LABEL_50;
  }
  if (v62 < 1)
  {
    unsigned int v18 = 0;
  }
  else
  {
    memcpy(&__dst[v12], (const void *)(a1 + v15 + 1547), (unsigned __int16)(v55 + ~v15) + 1);
    uint64_t v17 = v59;
    unsigned int v18 = (unsigned __int16)(v55 + ~v15) + 1;
  }
  __dst[v12 + v18] = 0;
  uint64_t v36 = v17;
  __int16 v37 = *(_WORD *)(v17 + 102);
  if ((unsigned __int16)ICverify(__dst, (__int16)(v55 - v14), a1) != 10)
  {
    *(_WORD *)(v36 + 102) = v37;
    uint64_t v17 = v36;
LABEL_50:
    if (v10 <= (int)((43691 * v57) >> 19))
    {
      unsigned int v41 = 0;
      unsigned __int16 v42 = v55 + ~v15;
      size_t v56 = v42 + 1;
      char v58 = (const void *)(a1 + v15 + 1547);
      int v43 = v42 + 1;
      while (1)
      {
        int v44 = (const char *)(*(void *)(*(void *)(a1 + 3184) + 112) + 4 * v11);
        if (!*v44) {
          break;
        }
        strcpy(&__dst[v12], (const char *)(*(void *)(*(void *)(a1 + 3184) + 112) + 4 * v11));
        int v45 = v12 + (__int16)strlen(v44);
        if (v62 < 1)
        {
          int v46 = 0;
        }
        else
        {
          memcpy(&__dst[v45], v58, v56);
          int v46 = v43;
        }
        __dst[v46 + v45] = 0;
        __int16 v47 = *(_WORD *)(v17 + 102);
        if ((unsigned __int16)ICverify(__dst, (__int16)(v62 + v45), a1) == 10)
        {
          if (*(unsigned char *)(a1 + 8) == 6 && !*(unsigned char *)(a1 + 1414))
          {
            int v48 = *(unsigned char **)(v59 + 72);
            if (*v48 != 1 && v48[1] != 1) {
              return 11;
            }
          }
          if (a6 && *(unsigned char *)(*(void *)(a1 + 3184) + 304) == 11)
          {
            uint64_t v49 = *(void *)(v60 + 280);
            *(_WORD *)(v49 + 1500) = v12;
            *(_WORD *)(v49 + 1502) = v45;
          }
          *a5 = v11;
          if (*(_DWORD *)(a1 + 1308) && __dst[v12] == 45) {
            *(_DWORD *)(a1 + 4 * ((unsigned __int16)v12 >> 5) + 3156) &= ~(1 << ~(_BYTE)v12);
          }
          return 10;
        }
        *(_WORD *)(v17 + 102) = v47;
        ++v11;
        BOOL v35 = v41++ >= 2;
        if (v35) {
          return 11;
        }
      }
    }
    return 11;
  }
  if (*(unsigned char *)(a1 + 8) == 6 && !*(unsigned char *)(a1 + 1414))
  {
    uint64_t v38 = *(unsigned char **)(v59 + 72);
    if (*v38 != 1 && v38[1] != 1) {
      return 11;
    }
  }
  if (a6)
  {
    if (*(unsigned char *)(*(void *)(a1 + 3184) + 304) == 11)
    {
      uint64_t v39 = *(void *)(v60 + 280);
      *(_WORD *)(v39 + 1500) = v12;
      *(_WORD *)(v39 + 1502) = v12;
    }
  }
LABEL_47:
  *a5 = 0;
  return 10;
}

uint64_t ICcmpfnd(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(__int16 **)(a1 + 3184);
  uint64_t v3 = *((void *)v2 + 35);
  uint64_t v4 = *((void *)v2 + 33);
  int v5 = *(_DWORD *)(a1 + 1308);
  if (*(__int16 *)(v4 + 102) >= 1)
  {
    size_t v6 = *(unsigned __int16 *)(v4 + 102);
    uint64_t v7 = *(uint64_t **)(v4 + 80);
    memcpy(__dst, *(const void **)(v4 + 72), v6);
    uint64_t v8 = v50;
    do
    {
      uint64_t v9 = *v7++;
      *v8++ = v9;
      --v6;
    }
    while (v6);
  }
  int v10 = *(unsigned __int16 *)(v3 + 1524);
  int v11 = *(unsigned __int16 *)(v3 + 1604);
  if (!(v5 | (v11 | v10) & 0x40)) {
    return 10;
  }
  __int16 v12 = *v2;
  if (v5
    && (v12 & 8) != 0
    && ((v11 | v10) & 0x40) == 0
    && *(__int16 *)(v3 + 1742) < 0)
  {
    *(_DWORD *)(v3 + 1516) = 0;
    *(_DWORD *)(v3 + 1596) = 0;
    *(_DWORD *)(v4 + 3480) = 0;
    ICcmphyp((char *)(a1 + 1547), a1);
    return 10;
  }
  *(_OWORD *)int v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  char v49 = 0;
  *(_OWORD *)int v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  char v44 = 0;
  if ((v12 & 4) != 0 && *(unsigned char *)(a1 + 1690))
  {
    __strcpy_chk();
    SFlstini((_WORD *)(v4 + 40), (_WORD *)(v4 + 44), *(unsigned char **)(v4 + 48), *(_WORD **)(v4 + 64));
    int v37 = 1;
  }
  else
  {
    __strcpy_chk();
    int v37 = 0;
  }
  __int16 v14 = *v2;
  *v2 |= 8u;
  __int16 v15 = *(_WORD *)(v3 + 1502);
  if (!v15)
  {
    __int16 v15 = *(_WORD *)(a1 + 1612);
    goto LABEL_23;
  }
  if ((v14 & 4) == 0)
  {
LABEL_23:
    int v16 = *(unsigned __int16 *)(v3 + 1500);
    __int16 v17 = *(_WORD *)(v3 + 1500);
    goto LABEL_24;
  }
  if (*(__int16 *)(v3 + 1740) > 0) {
    __int16 v15 = *(_WORD *)(v3 + 1740);
  }
  int v16 = *(unsigned __int16 *)(v3 + 1500);
  if (*(__int16 *)(v3 + 1738) <= 0) {
    __int16 v17 = *(_WORD *)(v3 + 1500);
  }
  else {
    __int16 v17 = *(_WORD *)(v3 + 1738);
  }
LABEL_24:
  if (v16) {
    __int16 v18 = v16;
  }
  else {
    __int16 v18 = v15;
  }
  if ((v10 & 0x40) != 0 && v5 && *(unsigned char *)(v3 + 1527)) {
    __strcpy_chk();
  }
  else {
    __strncpy_chk();
  }
  if (v15 != v17 && (__int16)(v15 - v17) <= 5) {
    __strncpy_chk();
  }
  if (v5 && (v11 & 0x40) != 0)
  {
    __strcpy_chk();
    goto LABEL_44;
  }
  if (strlen(__s) > v15) {
    __strcpy_chk();
  }
  if (!v5)
  {
    if ((v10 & 0x40) != 0)
    {
      icsfthypchk(v18, v3 + 1516, (_DWORD *)(v4 + 3472), 0, a1);
      ICcmpsmh(v45, __src, v3 + 1516, 1, v18, a1);
      __strcpy_chk();
    }
    __strcat_chk();
    if ((v11 & 0x40) != 0)
    {
      icsfthypchk(0, v3 + 1596, (_DWORD *)(v4 + 3472), v15, a1);
      __int16 v24 = strlen(__s);
      ICcmpsmh(v40, __src, v3 + 1596, 1, (__int16)(v24 - v15), a1);
      __strcat_chk();
      char v25 = v11 | v10;
      if ((*(_WORD *)(a1 + 1322) & 0x40) != 0)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x1000) != 0)
        {
          uint64_t v26 = (char *)(v15 + a1 + 3091);
LABEL_97:
          strcpy(v26, __src);
          if (((v11 | v10) & 0x40) == 0) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
        if ((*(_WORD *)(v3 + 1742) & 0x2000) != 0)
        {
          uint64_t v26 = (char *)(v15 + a1 + 3089);
          goto LABEL_97;
        }
      }
    }
    else
    {
      __strcat_chk();
      char v25 = v11 | v10;
    }
    if ((v25 & 0x40) == 0)
    {
LABEL_86:
      if (*(__int16 *)(v4 + 102) >= 1)
      {
        uint64_t v33 = 0;
        do
        {
          *(unsigned char *)(*(void *)(v4 + 72) + v33) = __dst[v33];
          *(void *)(*(void *)(v4 + 80) + 8 * v33) = v50[v33];
          ++v33;
        }
        while (v33 < *(__int16 *)(v4 + 102));
      }
      __int16 v34 = strlen(v45);
      SFadd(v45, v34, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
      *v2 |= 4u;
      return 2;
    }
LABEL_85:
    *(_WORD *)(a1 + 1322) |= 0x10u;
    goto LABEL_86;
  }
LABEL_44:
  if (*(unsigned char *)(a1 + 8) == 6 && (v10 & 0x40) != 0 && (*(_DWORD *)(a1 + 20) & 0x20) != 0)
  {
    if (!*(unsigned char *)(v3 + 1527) && ((uint64_t v36 = v18 - 2, v45[v18 - 1] == 107) || v45[v36] == 107))
    {
      v45[v36] = 99;
      uint64_t v13 = ICverify(v45, v18, a1);
      if (v13 != 10) {
        v45[v36] = 107;
      }
    }
    else
    {
      uint64_t v13 = 10;
    }
  }
  else
  {
    uint64_t v13 = 10;
    if ((v10 & 0x40) == 0) {
      goto LABEL_68;
    }
  }
  int v20 = (__int16)strlen(v45);
  if (v20 >= v18)
  {
    if (v20 > v18)
    {
      ++v18;
      --v15;
      ++*(_WORD *)(v3 + 1502);
      ++*(_WORD *)(v3 + 1500);
      ++*(_WORD *)(a1 + 1612);
    }
  }
  else
  {
    --v18;
    --v15;
    --*(_WORD *)(v3 + 1500);
    --*(_WORD *)(a1 + 1612);
    if (*(_WORD *)(v3 + 1502)) {
      --*(_WORD *)(v3 + 1502);
    }
  }
  icsfthypchk(v18, v3 + 1516, (_DWORD *)(v4 + 3472), 0, a1);
  *(_DWORD *)(v3 + 1516) = *(_DWORD *)(v3 + 1520);
  int v21 = (*(unsigned __int16 *)(v4 + 18) >> 7) & 1;
  __int16 v22 = *(_WORD *)(v3 + 1524);
  if ((v22 & 0x80) == 0) {
    int v21 = 1;
  }
  if (v21) {
    __int16 v23 = *(_WORD *)(v3 + 1524);
  }
  else {
    __int16 v23 = v22 & 0xFF3F;
  }
  *(_WORD *)(v3 + 1524) = v23 & 0xFFBF;
LABEL_68:
  __strcat_chk();
  if (*(_WORD *)(v3 + 1742))
  {
    if (*(unsigned char *)(v3 + 1526)) {
      ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), v18);
    }
  }
  else
  {
    *(unsigned char *)(v3 + 1526) = 0;
  }
  __strcat_chk();
  if ((v11 & 0x40) != 0)
  {
    __int16 v27 = strlen(__s);
    icsfthypchk(v27, v3 + 1596, (_DWORD *)(v4 + 3472), v15, a1);
    *(_DWORD *)(v3 + 1596) = *(_DWORD *)(v3 + 1600);
    int v28 = (*(unsigned __int16 *)(v4 + 18) >> 7) & 1;
    __int16 v29 = *(_WORD *)(v3 + 1604);
    if ((v29 & 0x80) == 0) {
      int v28 = 1;
    }
    if (v28) {
      __int16 v30 = *(_WORD *)(v3 + 1604);
    }
    else {
      __int16 v30 = v29 & 0xFF3F;
    }
    *(_WORD *)(v3 + 1604) = v30 & 0xFFBF;
  }
  __strcpy_chk();
  if (((v11 | v10) & 0x40) != 0)
  {
    *v2 |= 4u;
    __int16 v32 = strlen(__src);
    SFadd(__src, v32, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
    *(_WORD *)(a1 + 1322) = *(_WORD *)(a1 + 1322) & 0xFFA9 | 0x10;
    return 2;
  }
  *(_WORD *)(a1 + 1322) &= 0xFFB9u;
  if (v37)
  {
    __int16 v31 = strlen(__src);
    SFadd(__s, v31, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
  }
  return v13;
}

uint64_t icsfthypchk(int a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5)
{
  if (!*a3) {
    goto LABEL_8;
  }
  if (a1 - a4 >= 1)
  {
    char v5 = 0;
    unsigned __int16 v6 = 0;
    while (((*(_DWORD *)(a2 + 4 * (v6 >> 5)) >> ~v5) & 1) == 0)
    {
      char v5 = ++v6;
      if (a1 - a4 <= (__int16)v6) {
        return 1;
      }
    }
    if (((a3[(unsigned __int16)(v6 + a4) >> 5] >> ~(v5 + a4)) & 1) == 0) {
LABEL_8:
    }
      *(void *)(a5 + 1328) |= 8uLL;
  }
  return 1;
}

uint64_t uppercasedString(void *a1, uint64_t a2)
{
  if (uppercasedString_onceToken != -1) {
    dispatch_once(&uppercasedString_onceToken, &__block_literal_global_1);
  }
  uint64_t v4 = (void *)[a1 uppercaseStringWithLocale:a2];
  [v4 rangeOfCharacterFromSet:uppercasedString_greekUppercaseLetterCharacterSet];
  if (!v5) {
    return (uint64_t)v4;
  }
  uint64_t v6 = [a1 rangeOfComposedCharacterSequenceAtIndex:0];
  if (v6 + v7 >= (unint64_t)[a1 length]) {
    return (uint64_t)v4;
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", @"Ά", @"Α"), "stringByReplacingOccurrencesOfString:withString:", @"Έ",
                                                                                   @"Ε"),
                                                                             "stringByReplacingOccurrencesOfString:withString:",
                                                                             @"Ή",
                                                                             @"Η"),
                                                                       "stringByReplacingOccurrencesOfString:withString:",
                                                                       @"Ί",
                                                                       @"Ι"),
                                                                 "stringByReplacingOccurrencesOfString:withString:",
                                                                 @"Ό",
                                                                 @"Ο"),
                                                           "stringByReplacingOccurrencesOfString:withString:",
                                                           @"Ύ",
                                                           @"Υ"),
                                                     "stringByReplacingOccurrencesOfString:withString:",
                                                     @"Ώ",
                                                     @"Ω"),
                                               "stringByReplacingOccurrencesOfString:withString:",
                                               @"Ά",
                                               @"Α"),
                                         "stringByReplacingOccurrencesOfString:withString:",
                                         @"Έ",
                                         @"Ε"),
                                   "stringByReplacingOccurrencesOfString:withString:",
                                   @"Ή",
                                   @"Η"),
                             "stringByReplacingOccurrencesOfString:withString:",
                             @"Ί",
                             @"Ι"),
                       "stringByReplacingOccurrencesOfString:withString:",
                       @"Ό",
                       @"Ο"),
                 "stringByReplacingOccurrencesOfString:withString:",
                 @"Ύ",
                 @"Υ");
  return [v8 stringByReplacingOccurrencesOfString:@"Ώ" withString:@"Ω"];
}

id __uppercasedString_block_invoke()
{
  id result = (id)objc_msgSend(MEMORY[0x263F08708], "characterSetWithRange:", 902, 38);
  uppercasedString_greekUppercaseLetterCharacterSet = (uint64_t)result;
  return result;
}

uint64_t initialCapitalizedString(void *a1, uint64_t a2)
{
  uint64_t v4 = [a1 lowercaseStringWithLocale:a2];
  unint64_t v5 = [a1 length];
  if (initialCapitalizedString_onceToken != -1) {
    dispatch_once(&initialCapitalizedString_onceToken, &__block_literal_global_63);
  }
  if (![a1 isEqualToString:v4]) {
    return (uint64_t)a1;
  }
  if ([(id)initialCapitalizedString_prohibitedSet containsObject:a1]) {
    return (uint64_t)a1;
  }
  uint64_t v6 = [a1 rangeOfCharacterFromSet:initialCapitalizedString_internalCharacterSet];
  if (v7)
  {
    if (v7 != 1) {
      return (uint64_t)a1;
    }
    uint64_t v8 = v6;
    if (v6 + 1 != [a1 length]
      || !objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v8, 1), "isEqualToString:", @"."))
    {
      return (uint64_t)a1;
    }
  }
  uint64_t v9 = [a1 rangeOfComposedCharacterSequenceAtIndex:0];
  uint64_t v11 = v9 + v10;
  if (v9 + v10 >= v5)
  {
    return [a1 capitalizedStringWithLocale:a2];
  }
  else
  {
    __int16 v12 = objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v9, v10), "capitalizedStringWithLocale:", a2);
    uint64_t v13 = [a1 substringFromIndex:v11];
    return [v12 stringByAppendingString:v13];
  }
}

uint64_t __initialCapitalizedString_block_invoke()
{
  initialCapitalizedString_internalCharacterSet = (uint64_t)(id)[MEMORY[0x263F08708] characterSetWithCharactersInString:@".@_"];
  uint64_t result = [objc_alloc(MEMORY[0x263EFFA08]) initWithArray:&unk_26C1D3288];
  initialCapitalizedString_prohibitedSet = result;
  return result;
}

uint64_t secondCapitalizedString(void *a1, uint64_t a2)
{
  if (![a1 length]) {
    return (uint64_t)a1;
  }
  uint64_t v4 = [a1 rangeOfComposedCharacterSequenceAtIndex:0];
  uint64_t v6 = v5;
  uint64_t v7 = v4 + v5;
  if (v4 + v5 >= (unint64_t)[a1 length]) {
    return (uint64_t)a1;
  }
  uint64_t v8 = objc_msgSend(a1, "substringWithRange:", v4, v6);
  uint64_t v9 = initialCapitalizedString((void *)[a1 substringFromIndex:v7], a2);
  return [v8 stringByAppendingString:v9];
}

uint64_t stringWithoutHamza(void *a1)
{
  if (stringWithoutHamza_onceToken != -1) {
    dispatch_once(&stringWithoutHamza_onceToken, &__block_literal_global_141);
  }
  [a1 rangeOfCharacterFromSet:stringWithoutHamza_hamzaContainingCharacterSet];
  if (!v2) {
    return (uint64_t)a1;
  }
  uint64_t v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", @"أ", @"ا"), "stringByReplacingOccurrencesOfString:withString:", @"ؤ", @"و"), "stringByReplacingOccurrencesOfString:withString:", @"إ", @"ا"), "stringByReplacingOccurrencesOfString:withString:", @"ئ", @"ي"),
                             "stringByReplacingOccurrencesOfString:withString:",
                             @"أ",
                             @"ا"),
                       "stringByReplacingOccurrencesOfString:withString:",
                       @"ؤ",
                       @"و"),
                 "stringByReplacingOccurrencesOfString:withString:",
                 @"إ",
                 @"ا");
  return [v3 stringByReplacingOccurrencesOfString:@"ئ" withString:@"ي"];
}

id __stringWithoutHamza_block_invoke()
{
  id result = (id)[MEMORY[0x263F08708] characterSetWithCharactersInString:@"أؤإئٕٔ"];
  stringWithoutHamza_hamzaContainingCharacterSet = (uint64_t)result;
  return result;
}

uint64_t acceptAsCompletion(void *a1, uint64_t a2, void *a3)
{
  if ([a1 hasPrefix:a2]) {
    return 1;
  }
  char v7 = [a3 isHindi];
  int v8 = [a3 isArabic];
  if (v7)
  {
    uint64_t v9 = a1;
    uint64_t v10 = a2;
    uint64_t v11 = 9;
LABEL_8:
    [v9 rangeOfString:v10 options:v11];
    return v14 != 0;
  }
  int v12 = v8;
  [a1 rangeOfString:a2 options:137];
  uint64_t result = v13 != 0;
  if (!v13 && ((v12 ^ 1) & 1) == 0)
  {
    uint64_t v9 = (void *)stringWithoutHamza(a1);
    uint64_t v10 = a2;
    uint64_t v11 = 137;
    goto LABEL_8;
  }
  return result;
}

uint64_t treatWordAsSentenceInitial(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v10 = [a1 length];
  if (treatWordAsSentenceInitial_onceToken != -1) {
    dispatch_once(&treatWordAsSentenceInitial_onceToken, &__block_literal_global_179);
  }
  if (a3 > a2)
  {
    unint64_t v11 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSentenceTrailingCharacterSet, 0, a2, a3 - a2);
    uint64_t v13 = v12;
    uint64_t v14 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSentenceLeadingCharacterSet, 4, a2, a3 - a2);
    unint64_t v16 = v14 + v15 - a2;
    if (v14 + v15 < a2) {
      unint64_t v16 = 0;
    }
    if (!v15) {
      unint64_t v16 = 0;
    }
    unint64_t v17 = v16 + a2;
    if (!v13 || (v19 = v17 - v11, BOOL v18 = v17 == v11, v17 < v11) || (v17 = v11, v18))
    {
      if (v17 != a2) {
        return 0;
      }
    }
    else
    {
      objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSpaceCharacterSet, 0, v11, v19);
      BOOL v27 = v26 == 0;
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v11 == a2 + 2;
      }
      if (v28)
      {
        objc_msgSend(a1, "rangeOfString:options:range:", @"..", 0, a2, 2);
        BOOL v27 = v29 == 0;
      }
      if (v27 && v11 == a2 + 3)
      {
        objc_msgSend(a1, "rangeOfString:options:range:", @"...", 0, a2, 3);
        if (v31) {
          return 0;
        }
      }
      else if (!v27)
      {
        return 0;
      }
    }
  }
  if (v10 <= a3 + a4)
  {
    BOOL v21 = 1;
  }
  else
  {
    objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_followingCharacterSet, 8, a3 + a4, v10 - (a3 + a4));
    BOOL v21 = v20 == 0;
    if (v20) {
      goto LABEL_22;
    }
  }
  if (a4 != 1 || (unint64_t v22 = a3 + 1, v22 >= v10))
  {
LABEL_22:
    if (v21) {
      goto LABEL_23;
    }
    return 0;
  }
  if ([a1 characterAtIndex:v22] == 46
    || [a1 characterAtIndex:v22] == 41)
  {
    return 0;
  }
LABEL_23:
  int v23 = [a5 usesOrdinalPeriod];
  uint64_t result = 1;
  if (a2 && v23 && v10 > a2)
  {
    if ([a1 characterAtIndex:a2] == 46)
    {
      objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_decimalDigitCharacterSet, 12, 0, a2);
      return !v25 && v21;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

id __treatWordAsSentenceInitial_block_invoke()
{
  treatWordAsSentenceInitial_nonSentenceTrailingCharacterSet = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x263F08708], "characterSetWithCharactersInString:", @".!?։۔।።᙮‼‽⁈⁉。！．？｡'\"‘’“”»«"), "invertedSet");
  treatWordAsSentenceInitial_nonSentenceLeadingCharacterSet = (uint64_t)objc_retain((id)objc_msgSend((id)objc_msgSend(MEMORY[0x263F08708], "characterSetWithCharactersInString:", @"¡¿'\"‘’“”„»«("), "invertedSet"));
  treatWordAsSentenceInitial_nonSpaceCharacterSet = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x263F08708], "characterSetWithCharactersInString:", @"  "), "invertedSet");
  treatWordAsSentenceInitial_followingCharacterSet = (uint64_t)objc_retain((id)[MEMORY[0x263F08708] characterSetWithCharactersInString:@"@#$%^&*_=+([]\\|>"];
  id result = (id)[MEMORY[0x263F08708] decimalDigitCharacterSet];
  treatWordAsSentenceInitial_decimalDigitCharacterSet = (uint64_t)result;
  return result;
}

unint64_t minutesAgo(double a1, double a2)
{
  if (a1 >= a2) {
    return 0;
  }
  else {
    return vcvtmd_u64_f64((a2 - a1) / 60.0);
  }
}

uint64_t _matchingRangeForCompletion(void *a1, void *a2)
{
  uint64_t v3 = [a1 stringByReplacingOccurrencesOfString:@"<E2><80><99>" withString:@"'"];
  uint64_t v4 = (void *)[a2 stringByReplacingOccurrencesOfString:@"<E2><80><99>" withString:@"'"];
  if ([v4 rangeOfString:v3 options:137]) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6 || v5 >= [v4 length]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t _NSPathForSystemFramework(uint64_t a1)
{
  uint64_t v2 = (void *)[MEMORY[0x263F08850] defaultManager];
  uint64_t v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  uint64_t v4 = [(NSArray *)v3 count];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = [(NSArray *)v3 objectAtIndex:v6];
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"Frameworks"), "stringByAppendingPathComponent:", a1);
    if ([v2 fileExistsAtPath:v8]) {
      break;
    }
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", @"PrivateFrameworks"), "stringByAppendingPathComponent:", a1);
    if ([v2 fileExistsAtPath:v8]) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return v8;
}

void sub_20CBC7CD8(_Unwind_Exception *a1)
{
}

void _addEmojiForStringToArray(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  if (_addEmojiForStringToArray_onceToken == -1)
  {
    if (!a5) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&_addEmojiForStringToArray_onceToken, &__block_literal_global_496);
    if (!a5) {
      goto LABEL_4;
    }
  }
  if ([a2 isPortuguese]) {
    return;
  }
LABEL_4:
  BOOL EmojiKit = _loadEmojiKit();
  if (a2)
  {
    if (EmojiKit)
    {
      if (_addEmojiForStringToArray_emojiDatasByLanguage)
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)_addEmojiForStringToArray_emojiDatasByLanguage, (const void *)[a2 identifier]);
        uint64_t v12 = (const void *)*MEMORY[0x263EFFD08];
        if (Value != (const void *)*MEMORY[0x263EFFD08])
        {
          uint64_t v13 = (uint64_t)Value;
          if (Value
            || ((uint64_t v13 = ((uint64_t (*)(uint64_t))_CEMCreateEmojiLocaleData)([a2 identifier]),
                 uint64_t v14 = (__CFDictionary *)_addEmojiForStringToArray_emojiDatasByLanguage,
                 uint64_t v15 = (const void *)[a2 identifier],
                 v13)
              ? (unint64_t v16 = (const void *)v13)
              : (unint64_t v16 = v12),
                CFDictionarySetValue(v14, v15, v16),
                v13))
          {
            if (_CEMStringIsSingleEmoji(a1))
            {
              uint64_t v17 = _CEMEmojiTokenCreateWithString(a1, v13);
              if (!v17) {
                return;
              }
              BOOL v18 = (const void *)v17;
              CFArrayRef EmojiTokensForString = (const __CFArray *)_CEMEmojiTokenCopyRelatedEmoji(v17, 0);
              CFRelease(v18);
              if (!EmojiTokensForString) {
                return;
              }
            }
            else
            {
              if (a4) {
                return;
              }
              CFArrayRef EmojiTokensForString = (const __CFArray *)_CEMEmojiLocaleDataCreateEmojiTokensForString(v13, a1, 0, 17, 1, 0);
              if (!EmojiTokensForString) {
                return;
              }
            }
            CFIndex Count = CFArrayGetCount(EmojiTokensForString);
            if (Count >= 1)
            {
              CFIndex v21 = Count;
              for (CFIndex i = 0; i != v21; ++i)
              {
                int v23 = (uint64_t (*)(const void *))_CEMEmojiTokenGetString;
                ValueAtIndex = CFArrayGetValueAtIndex(EmojiTokensForString, i);
                uint64_t v25 = v23(ValueAtIndex);
                if (([a3 containsObject:v25] & 1) == 0) {
                  [a3 addObject:v25];
                }
              }
              if (v21 == 1)
              {
                uint64_t v26 = (uint64_t (*)(const void *, void))_CEMEmojiTokenCopyRelatedEmoji;
                BOOL v27 = CFArrayGetValueAtIndex(EmojiTokensForString, 0);
                CFArrayRef v28 = (const __CFArray *)v26(v27, 0);
                if (v28)
                {
                  CFArrayRef v29 = v28;
                  CFIndex v30 = CFArrayGetCount(v28);
                  if (v30 >= 1)
                  {
                    CFIndex v31 = v30;
                    for (CFIndex j = 0; j != v31; ++j)
                    {
                      uint64_t v33 = (uint64_t (*)(const void *))_CEMEmojiTokenGetString;
                      __int16 v34 = CFArrayGetValueAtIndex(v29, j);
                      uint64_t v35 = v33(v34);
                      if (([a3 containsObject:v35] & 1) == 0) {
                        [a3 addObject:v35];
                      }
                    }
                  }
                  CFRelease(v29);
                }
              }
            }
            CFRelease(EmojiTokensForString);
          }
        }
      }
    }
  }
}

BOOL _loadEmojiKit()
{
  if (_loadEmojiKit_onceToken != -1) {
    dispatch_once(&_loadEmojiKit_onceToken, &__block_literal_global_393);
  }
  if (_CEMStringIsSingleEmoji) {
    BOOL v0 = _CEMEmojiTokenCreateWithString == 0;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0
      && _CEMEmojiTokenGetString != 0
      && _CEMEmojiTokenCopyRelatedEmoji != 0
      && _CEMCreateEmojiLocaleData != 0
      && _CEMEmojiLocaleDataCreateEmojiTokensForString != 0
      && _CEMEmojiTokenGetSkinTone != 0;
}

void ___loadEmojiKit_block_invoke()
{
  BOOL v0 = objc_msgSend((id)objc_msgSend((id)_NSPathForSystemFramework(@"CoreEmoji.framework"), "stringByAppendingString:", @"/Versions/A"), "stringByAppendingPathComponent:", @"CoreEmoji");
  if (v0)
  {
    BOOL v1 = dlopen((const char *)[v0 fileSystemRepresentation], 256);
    uint64_t v2 = v1;
    if (v1)
    {
      _CEMStringIsSingleEmojCFIndex i = (uint64_t (*)(void))dlsym(v1, "CEMStringIsSingleEmoji");
      _CEMEmojiTokenCreateWithString = (uint64_t (*)(void, void))dlsym(v2, "CEMEmojiTokenCreateWithString");
      _CEMEmojiTokenGetString = dlsym(v2, "CEMEmojiTokenGetString");
      _CEMEmojiTokenCopyRelatedEmojCFIndex i = (uint64_t (*)(void, void))dlsym(v2, "CEMEmojiTokenCopyRelatedEmoji");
      _CEMCreateEmojiLocaleData = dlsym(v2, "CEMCreateEmojiLocaleData");
      _CEMEmojiLocaleDataCreateCFArrayRef EmojiTokensForString = (uint64_t (*)(void, void, void, void, void, void))dlsym(v2, "CEMEmojiLocaleDataCreateEmojiTokensForString");
      _CEMEmojiTokenGetSkinTone = (uint64_t (*)(void))dlsym(v2, "CEMEmojiTokenGetSkinTone");
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (!_CEMStringIsSingleEmoji
    || !_CEMEmojiTokenCreateWithString
    || !_CEMEmojiTokenGetString
    || !_CEMEmojiTokenCopyRelatedEmoji
    || !_CEMCreateEmojiLocaleData
    || !_CEMEmojiLocaleDataCreateEmojiTokensForString
    || !_CEMEmojiTokenGetSkinTone)
  {
    NSLog((NSString *)@"Failed to load CoreEmoji, handle %p results %p %p %p %p %p %p %p", v2, _CEMStringIsSingleEmoji, _CEMEmojiTokenCreateWithString, _CEMEmojiTokenGetString, _CEMEmojiTokenCopyRelatedEmoji, _CEMCreateEmojiLocaleData, _CEMEmojiLocaleDataCreateEmojiTokensForString, _CEMEmojiTokenGetSkinTone);
  }
}

uint64_t __PRUseSingleCompletions_block_invoke()
{
  PRUseSingleCompletions_allowList = [objc_alloc(MEMORY[0x263EFF8C0]) initWithArray:&unk_26C1D32A0];
  uint64_t result = [objc_alloc(MEMORY[0x263EFF8C0]) initWithArray:&unk_26C1D32B8];
  PRUseSingleCompletions_denyList = result;
  return result;
}

CFMutableDictionaryRef ___addEmojiForStringToArray_block_invoke()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFB78], MEMORY[0x263EFFF90]);
  _addEmojiForStringToArray_emojiDatasByLanguage = (uint64_t)result;
  return result;
}

uint64_t ICcmphhy(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(__int16 **)(a1 + 3184);
  uint64_t v3 = *((void *)v2 + 35);
  uint64_t v4 = *((void *)v2 + 33);
  uint64_t v5 = *(void *)(*((void *)v2 + 31) + 56);
  v75[0] = 0;
  v75[1] = 0;
  uint64_t v6 = (char *)(a1 + 1547);
  int v7 = *(unsigned __int8 *)(a1 + 1547);
  if (v7 == 45)
  {
    __int16 v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      __src[v10] = v7;
      unint64_t v9 = v10 + 1;
      if (v10 > 0x3E) {
        break;
      }
      int v7 = *(unsigned __int8 *)(a1 + 1548 + v10++);
    }
    while (v7 != 45);
    __int16 v8 = v9;
  }
  unsigned int v66 = v2;
  *(void *)__int16 v76 = 0;
  uint64_t v74 = 0;
  __src[v9] = 0;
  unsigned __int16 v70 = v8 + 1;
  size_t v11 = strlen((const char *)(a1 + (unsigned __int16)(v8 + 1) + 1547));
  if (v11 >= 0x40) {
    uint64_t v12 = 64;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12) {
    __strncpy_chk();
  }
  __s[v12] = 0;
  unsigned int v13 = *(unsigned __int8 *)(v4 + 88);
  *(void *)__int16 v76 = *(void *)(v4 + 92);
  size_t v14 = strlen(v6);
  if (v14 >= 0x40) {
    uint64_t v15 = 64;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v69 = v13;
  unsigned int v16 = v13;
  if (v15)
  {
    __strncpy_chk();
    unsigned int v16 = *(unsigned __int8 *)(v4 + 88);
  }
  v77[v15] = 0;
  if (v16)
  {
    if (*(__int16 *)(a1 + 1612) >= 64) {
      int v17 = 64;
    }
    else {
      int v17 = *(__int16 *)(a1 + 1612);
    }
    SLrecap(v77, v17, v16, v4 + 92, v16, v5);
  }
  __int16 v68 = v8;
  *(unsigned char *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap((uint64_t)v77, 0, v8, (void *)(v4 + 92), v5);
  if ((*(unsigned char *)(a1 + 8) != 6 || (*(unsigned char *)(a1 + 20) & 0x10) != 0) && SLisint(__src, v5))
  {
    int v72 = 1;
    *(_WORD *)(v4 + 102) = 1;
    **(unsigned char **)(v4 + 72) = 5;
    **(void **)(v4 + 80) = 0;
    BOOL v18 = v66;
LABEL_28:
    if (*(__int16 *)(v4 + 102) >= 1)
    {
      uint64_t v20 = *(unsigned __int16 *)(v4 + 102);
      CFIndex v21 = *(char **)(v4 + 72);
      unint64_t v22 = *(uint64_t **)(v4 + 80);
      int v23 = v75;
      __int16 v24 = v73;
      uint64_t v71 = v20;
      do
      {
        char v25 = *v21++;
        *v24++ = v25;
        uint64_t v26 = *v22++;
        *v23++ = v26;
        --v20;
      }
      while (v20);
      uint64_t v27 = 0;
      uint64_t v28 = v70 >> 5;
      int v29 = 1 << ~(_BYTE)v70;
      __dst = (char *)(v3 + 1607);
      LOWORD(v30) = -1;
      __int16 v67 = v6;
      while (1)
      {
        int v31 = v73[v27];
        if (v31 != 2
          && (v31 != 3 || *(unsigned char *)(a1 + 8) != 11)
          && (((*(_WORD *)(*(void *)(v4 + 3520) + 2 * v27) & 0x400) == 0) & ~v72) != 0)
        {
          break;
        }
        *(unsigned char *)(v3 + 1504) = v31;
        __int16 v32 = strlen(__s);
        int v33 = ICverify(__s, v32, a1);
        char v34 = v72 ^ 1;
        if (v33 != 10) {
          char v34 = 1;
        }
        if (v34)
        {
          if (v33 != 10) {
            break;
          }
        }
        else
        {
          uint64_t v35 = *(__int16 *)(v4 + 102);
          if ((int)v35 < 1)
          {
            LODWORD(v36) = 0;
          }
          else
          {
            uint64_t v36 = 0;
            while ((*(_WORD *)(*(void *)(v4 + 3520) + 2 * v36) & 0x10) == 0)
            {
              if (v35 == ++v36) {
                goto LABEL_64;
              }
            }
            *(_WORD *)(v4 + 102) = 1;
            **(unsigned char **)(v4 + 72) = *(unsigned char *)(*(void *)(v4 + 72) + v36);
            **(void **)(v4 + 80) = *(void *)(*(void *)(v4 + 80) + 8 * v36);
            **(_WORD **)(v4 + 3520) = *(_WORD *)(*(void *)(v4 + 3520) + 2 * v36);
          }
          if (v36 == v35) {
            break;
          }
        }
        int v37 = *(__int16 *)(v4 + 102);
        *(_DWORD *)(v3 + 1596) = *(_DWORD *)(v4 + 3480);
        *(_DWORD *)(v4 + 3480) = 0;
        *(_WORD *)(v3 + 1500) = v68;
        *(_WORD *)(v3 + 1502) = v70;
        if (v37 < 1)
        {
          if ((_WORD)v30 == 0xFFFF)
          {
            uint64_t v19 = 11;
            LOWORD(v30) = -1;
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v38 = 0;
          while (1)
          {
            __int16 v39 = *(_WORD *)(*(void *)(v4 + 3520) + 2 * v38);
            if ((v39 & 0x18) != 0 && (*(unsigned char *)(a1 + 8) != 6 || (v76[v28] & v29) != 0)) {
              break;
            }
            if ((v39 & 2) != 0 && (v76[v28] & v29) == 0) {
              break;
            }
            if ((unsigned __int16)v37 == ++v38) {
              goto LABEL_59;
            }
          }
          LOWORD(v30) = v38;
LABEL_59:
          if ((_WORD)v30 == 0xFFFF)
          {
            LOWORD(v30) = 0;
            while ((*(_WORD *)(*(void *)(v4 + 3520) + 2 * (unsigned __int16)v30) & 0x1A) == 0)
            {
              int v30 = (__int16)(v30 + 1);
              if (v30 >= (__int16)v37)
              {
                LOWORD(v30) = -1;
                goto LABEL_64;
              }
            }
          }
        }
        *(unsigned char *)(v3 + 1592) = *(unsigned char *)(*(void *)(v4 + 72) + (__int16)v30);
        uint64_t v74 = *(void *)(*(void *)(v4 + 80) + 8 * (__int16)v30);
        if (*(_DWORD *)(a1 + 1308))
        {
          uint64_t v40 = *(void *)(*(void *)(a1 + 3184) + 216);
          if (*(unsigned char *)(v40 + 747))
          {
            long long v41 = (const char *)(v40 + 680);
            size_t v42 = strlen((const char *)(v40 + 680));
            if (v42 >= 0x40) {
              size_t v43 = 64;
            }
            else {
              size_t v43 = v42;
            }
            if (v43) {
              strncpy(__dst, v41, v43);
            }
            __dst[v43] = 0;
            *(_DWORD *)(v3 + 1600) = *(_DWORD *)(a1 + 3156);
            BOOL v18 = v66;
          }
        }
        *(unsigned char *)(v3 + 1606) = *(unsigned char *)(*(void *)(v4 + 3496) + (__int16)v30);
        *(_WORD *)(v3 + 1604) = *(_WORD *)(*(void *)(v4 + 3520) + 2 * (__int16)v30);
        unsigned int v44 = *(unsigned __int8 *)(v3 + 1504);
        if ((v44 | 4) == 4)
        {
          unsigned int v44 = ICEndToken(a1);
          uint64_t v6 = v67;
          if (v44 == 1)
          {
            *(unsigned char *)(v3 + 1504) = 1;
            *(_DWORD *)(v3 + 1508) |= 0x80000000;
            if ((v76[0] & 0x80000000) == 0)
            {
              *(_WORD *)(a1 + 1322) |= 0x800u;
              unsigned int v44 = 1;
            }
          }
          else
          {
            unsigned int v44 = *(unsigned __int8 *)(v3 + 1504);
          }
        }
        else
        {
          uint64_t v6 = v67;
        }
        **(unsigned char **)(v4 + 72) = ICcomcap(v44, &v75[v27], (__int16)v70, *(unsigned __int8 *)(v3 + 1592), &v74, *(void *)(v4 + 80), 0);
        int v45 = SLchk((unsigned __int8 *)v6, *(__int16 *)(a1 + 1612), v69, v76, **(unsigned __int8 **)(v4 + 72), *(_DWORD **)(v4 + 80));
        *(_WORD *)(v4 + 102) = 1;
        *(_WORD *)(v4 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
        *v18 |= 8u;
        if (!v45) {
          goto LABEL_100;
        }
        uint64_t v19 = 10;
LABEL_82:
        if (++v27 == v71) {
          goto LABEL_85;
        }
      }
LABEL_64:
      uint64_t v19 = 11;
      goto LABEL_82;
    }
LABEL_100:
    *(unsigned char *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = v69;
    *(void *)(v4 + 92) = *(void *)v76;
    uint64_t v19 = 10;
    goto LABEL_147;
  }
  uint64_t v19 = ICverify(__src, v8, a1);
  BOOL v18 = v66;
  if (v19 == 10)
  {
    int v72 = 0;
    goto LABEL_28;
  }
LABEL_85:
  *(unsigned char *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = v69;
  *(void *)(v4 + 92) = *(void *)v76;
  if (v19 == 11)
  {
    size_t v46 = strlen(v6);
    if (v46 >= 0x40) {
      uint64_t v47 = 64;
    }
    else {
      uint64_t v47 = v46;
    }
    if (v47) {
      __strncpy_chk();
    }
    v80[v47] = 0;
    --*(_WORD *)(a1 + 1612);
    __strlcat_chk();
    size_t v48 = strlen(__src);
    if (v48 >= 0x40) {
      size_t v49 = 64;
    }
    else {
      size_t v49 = v48;
    }
    if (v49) {
      strncpy(v6, __src, v49);
    }
    *(unsigned char *)(a1 + v49 + 1547) = 0;
    *(void *)(v3 + 1516) = 0;
    *(void *)(v4 + 3480) = 0;
    int v50 = ICcmp(a1);
    if (v50 == 11)
    {
      if (*(unsigned char *)(a1 + 8) != 6 || (*(unsigned char *)(a1 + 20) & 0x20) == 0)
      {
        int v50 = 11;
        goto LABEL_106;
      }
      int v50 = ICcmpnum(v6, *(unsigned __int8 *)(a1 + 1612), a1);
      if (v50 == 10)
      {
        *(void *)(a1 + 1328) |= 0x400000uLL;
        *(_DWORD *)(v3 + 173_Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v3 + 1500);
        goto LABEL_106;
      }
    }
    if (v50 == 2)
    {
      if (*(__int16 *)(v3 + 1742) < 0)
      {
        SFadd(v6, *(__int16 *)(a1 + 1612), (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
        size_t v55 = strlen(v80);
        if (v55 >= 0x40) {
          size_t v56 = 64;
        }
        else {
          size_t v56 = v55;
        }
        if (v56) {
          strncpy(v6, v80, v56);
        }
        *(unsigned char *)(a1 + v56 + 1547) = 0;
        __int16 v57 = *(_WORD *)(a1 + 1322);
        *(_WORD *)(a1 + 1322) = v57 | 0x40;
        if ((*(unsigned char *)(v3 + 1743) & 0x20) != 0) {
          *(_WORD *)(a1 + 1322) = v57 | 0x42;
        }
        *(_WORD *)(a1 + 1612) = strlen(v6);
        goto LABEL_132;
      }
      int v50 = 2;
    }
LABEL_106:
    size_t v51 = strlen(v80);
    if (v51 >= 0x40) {
      size_t v52 = 64;
    }
    else {
      size_t v52 = v51;
    }
    if (v52) {
      strncpy(v6, v80, v52);
    }
    *(unsigned char *)(a1 + v52 + 1547) = 0;
    *(_WORD *)(a1 + 1612) = strlen(v6);
    if (v50 == 10)
    {
      size_t v53 = strlen(__src);
      if (v53 >= 0x40) {
        size_t v54 = 64;
      }
      else {
        size_t v54 = v53;
      }
      if (v54) {
        strncpy((char *)(v3 + 1672), __src, v54);
      }
      *(unsigned char *)(v3 + 1672 + v54) = 0;
      if ((*(_WORD *)(v4 + 3492) & 0x40) == 0
        && (*(_WORD *)(v3 + 1524) & 0x40) == 0
        && (*(_WORD *)(v3 + 1604) & 0x40) == 0)
      {
        SFadd((char *)(v3 + 1672), *(__int16 *)(a1 + 1612), (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
      }
      *v18 |= 8u;
      goto LABEL_143;
    }
    if (v50 == 11)
    {
      *(void *)(v4 + 3480) = 0;
      return 11;
    }
LABEL_132:
    if (*(unsigned char *)(a1 + 8) == 6 && (*(_WORD *)(v3 + 1742) & 2) != 0) {
      return 11;
    }
    if ((*(_WORD *)(a1 + 1322) & 0x40) != 0)
    {
      size_t v59 = strlen((const char *)(v3 + 1672));
      if (v59 >= 0x40) {
        size_t v60 = 64;
      }
      else {
        size_t v60 = v59;
      }
      if (v60) {
        strncpy((char *)(a1 + 3090), (const char *)(v3 + 1672), v60);
      }
      *(unsigned char *)(a1 + 3090 + v60) = 0;
    }
    else
    {
      __int16 v58 = strlen((const char *)(v3 + 1672));
      SFadd((char *)(v3 + 1672), v58, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
    }
LABEL_143:
    __int16 v61 = *(_WORD *)(v3 + 1742);
    *(void *)(a1 + 1328) |= 0x200uLL;
    __int16 v62 = *v18;
    *v18 |= 4u;
    if (!*(_WORD *)(v3 + 1740)) {
      *(_DWORD *)(v3 + 173_Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v3 + 1500);
    }
    *(_WORD *)(v3 + 1742) = v61 & 0xFDEF | 0x10;
    if ((v61 & 0x100) != 0)
    {
      *BOOL v18 = v62 | 0xC;
      return 2;
    }
    uint64_t v19 = 2;
  }
LABEL_147:
  int v63 = *(unsigned __int16 *)(v3 + 1738);
  if (v63 == *(unsigned __int16 *)(v3 + 1740) || !*(unsigned char *)(v3 + 1526)) {
    *(unsigned char *)(v3 + 1526) = 0;
  }
  else {
    ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), v63);
  }
  return v19;
}

uint64_t ICcmphyp(char *__s, uint64_t a2)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 3184);
  if ((*(_WORD *)v2 & 0xC) != 0)
  {
    uint64_t v5 = *(void *)(v2 + 280);
    __int16 v6 = *(_WORD *)(v5 + 1742);
    if ((v6 & 0x1000) != 0 || (unsigned int v7 = *(unsigned __int16 *)(v5 + 1740), !*(_WORD *)(v5 + 1740))) {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 1502);
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 248) + 56);
    v19[0] = 0;
    if (*(_DWORD *)(v5 + 1516))
    {
      if ((*(_WORD *)(v5 + 1524) & 0x40) == 0)
      {
        int v9 = *(unsigned __int16 *)(v5 + 1500);
        if (*(_WORD *)(v5 + 1500))
        {
          unsigned int v10 = 0;
          do
          {
            uint64_t v11 = v10 >> 5;
            int v12 = 1 << ~(_BYTE)v10;
            if ((*(_DWORD *)(v5 + 1516 + 4 * v11) & v12) != 0) {
              *((_DWORD *)v19 + v11) |= v12;
            }
            ++v10;
          }
          while (v9 != v10);
        }
      }
    }
    if (*(_DWORD *)(v5 + 1596))
    {
      if ((*(_WORD *)(v5 + 1604) & 0x40) == 0)
      {
        unsigned int v13 = (unsigned __int16)strlen(__s);
        if (v13 > v7)
        {
          unsigned __int16 v14 = 0;
          unsigned int v15 = v7;
          do
          {
            if ((*(_DWORD *)(v5 + 1596 + 4 * (v14 >> 5)) >> ~(_BYTE)v14)) {
              *((_DWORD *)v19 + (v15 >> 5)) |= 1 << ~(_BYTE)v15;
            }
            ++v14;
            ++v15;
          }
          while (v13 > (unsigned __int16)v15);
        }
      }
    }
    unsigned __int16 v16 = 0;
    if ((v6 & 0x400) == 0)
    {
      if (v7)
      {
        unsigned __int16 v16 = *(_WORD *)(v5 + 1500);
        if (v16)
        {
          unsigned __int16 v16 = 0;
          if ((v6 & 0x7080) == 0)
          {
            uint64_t v17 = (__int16)v7 - 1;
            if (__s[v17] != 45)
            {
              *((_DWORD *)v19 + ((unsigned __int16)v17 >> 5)) |= 1 << ~(_BYTE)v17;
              unsigned __int16 v16 = v7 - 1;
            }
          }
        }
      }
    }
    if (*(unsigned char *)(a2 + 8) == 6 && (*(_DWORD *)(v8 + 4 * __s[(__int16)v16]) & 0x8000000) != 0) {
      *((_DWORD *)v19 + (v16 >> 5)) &= ~(1 << ~(_BYTE)v16);
    }
    if ((~*(unsigned __int16 *)(a2 + 1322) & 0x42) != 0) {
      *(void *)(*(void *)(v2 + 264) + 3480) = v19[0];
    }
    else {
      *(void *)(a2 + 3156) = v19[0];
    }
  }
  return 0;
}

uint64_t ICcmplmc(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 3184);
  uint64_t v2 = *(void *)(v1 + 280);
  uint64_t v42 = *(void *)(v1 + 264);
  uint64_t v43 = v2;
  uint64_t v49 = v1;
  uint64_t v50 = *(void *)(v1 + 248);
  __int16 v3 = *(_WORD *)(v1 + 90);
  unsigned int v4 = *(unsigned __int16 *)(v1 + 88);
  if (*(_WORD *)(v1 + 88)) {
    unsigned __int16 v5 = v4 - 1;
  }
  else {
    unsigned __int16 v5 = 0;
  }
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 4_Block_object_dispose(&STACK[0x510], 8) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  size_t v6 = strlen((const char *)(a1 + 1547));
  if (v6 >= 0x40) {
    uint64_t v7 = 64;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v7) {
    __strncpy_chk();
  }
  LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 0;
  LOWORD(v9) = 0;
  __s[v7 + 65] = 0;
  int v10 = *(__int16 *)(a1 + 1612);
  if (v3 < v10) {
    LOWORD(v10) = v3;
  }
  if (v4 >= 2)
  {
    unint64_t v11 = 0;
    LOWORD(v9) = 0;
    LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 0;
    do
    {
      if ((unsigned __int16)(((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65]) <= 0x7FECu) {
        LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65];
      }
      else {
        LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65] - 32749;
      }
      LOWORD(v9) = v8 & 0x7FFF ^ v9;
      ++v11;
    }
    while (v11 < v5);
  }
  uint64_t v12 = v42;
  uint64_t v13 = 0;
  if (v5 < (unsigned __int16)v10)
  {
    uint64_t v14 = v5;
    char v41 = *(unsigned char *)(v42 + 88);
    unint64_t v45 = (unsigned __int16)v10;
    uint64_t v15 = v50;
    while (1)
    {
      if ((unsigned __int16)(((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65]) <= 0x7FECu) {
        int v8 = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65];
      }
      else {
        int v8 = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65] - 32749;
      }
      unsigned int v9 = ((unsigned __int16)v8 ^ (unsigned __int16)v9) & 0x7FFF;
      unsigned int v16 = *(unsigned __int16 *)(v15 + 88);
      LOWORD(v17) = v9;
      if (v9 > (unsigned __int16)(v16 - 1)) {
        unsigned int v17 = v9 % v16;
      }
      unsigned int v18 = 0;
      int v19 = 3 - v8;
      while (*(unsigned __int8 *)(*(void *)(v15 + 96) + (unsigned __int16)v17) != v8)
      {
        if (*(unsigned char *)(*(void *)(v15 + 96) + (unsigned __int16)v17))
        {
          v19 += 2 * v8;
          LOWORD(v17) = v17 + v19;
          if ((unsigned __int16)v17 > (unsigned __int16)(v16 - 1)) {
            unsigned int v17 = (unsigned __int16)v17 % v16;
          }
          if (v18++ < 0x31) {
            continue;
          }
        }
        goto LABEL_60;
      }
      uint64_t v21 = v13;
      uint64_t v52 = v14;
      uint64_t v22 = v14 + 1;
      __strncpy_chk();
      __s[v22] = 0;
      if (*(unsigned char *)(a1 + 8) == 6) {
        *(unsigned char *)(v12 + 8_Block_object_dispose(&STACK[0x510], 8) = 1;
      }
      __int16 v48 = v22;
      int v23 = ICverify(__s, (__int16)v22, a1);
      *(unsigned char *)(v12 + 8_Block_object_dispose(&STACK[0x510], 8) = v41;
      if (v23 != 11) {
        break;
      }
      uint64_t v15 = v50;
      uint64_t v13 = v21;
      uint64_t v14 = v52;
LABEL_60:
      if (++v14 >= v45)
      {
        if ((__int16)v13 >= 1 && !*(_WORD *)(v12 + 102)) {
          *(_WORD *)(v12 + 102) = 1;
        }
        return (__int16)v13;
      }
    }
    uint64_t v24 = a1;
    uint64_t v25 = v43;
    uint64_t v15 = v50;
    uint64_t v13 = v21;
    uint64_t v14 = v52;
    __int16 v26 = v22;
    if (*(unsigned char *)(a1 + 8) == 6 && (*(_WORD *)v49 & 0x20) != 0)
    {
      int v27 = *(unsigned __int16 *)(v12 + 102);
      if (v27 != 1)
      {
LABEL_42:
        if ((__int16)v27 < 1) {
          goto LABEL_60;
        }
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        while (1)
        {
          uint64_t v30 = *(void *)(v12 + 3520);
          if ((*(_WORD *)(v30 + 2 * v29) & 0x1004) != 0) {
            break;
          }
LABEL_59:
          ++v29;
          v28 += 8;
          if (v29 >= (__int16)v27) {
            goto LABEL_60;
          }
        }
        uint64_t v31 = v25 + 100 * (__int16)v13;
        *(_WORD *)(v31 + 66) = v26;
        *(_WORD *)(v31 + 6_Block_object_dispose(&STACK[0x510], 8) = *(unsigned __int8 *)(*(void *)(v12 + 3528) + v29);
        uint64_t v32 = *(void *)(v12 + 3536);
        int v33 = (*(unsigned __int8 *)(v32 + v29) >> 7) ^ 1;
        *(_WORD *)(v31 + 70) = (*(unsigned __int8 *)(v32 + v29) >> 7) ^ 1;
        char v34 = (_WORD *)(v31 + 70);
        *(_WORD *)(v31 + 72) = (*(unsigned char *)(v32 + v29) >> 2) & 0x1F;
        *(_WORD *)(v31 + 74) = *(unsigned char *)(v32 + v29) & 3;
        *(unsigned char *)(v31 + 76) = *(unsigned char *)(*(void *)(v12 + 72) + v29);
        uint64_t v35 = (_DWORD *)(*(void *)(v12 + 80) + v28);
        *(_DWORD *)(v31 + 80) = *v35;
        *(_DWORD *)(v31 + 84) = v35[1];
        *(_WORD *)(v31 + 90) = 0;
        *(unsigned char *)(v31 + 65) = *(unsigned char *)(*(void *)(v12 + 3496) + v29);
        *(_DWORD *)(v31 + 92) = *(_DWORD *)(v12 + 3480);
        __int16 v36 = *(_WORD *)(v30 + 2 * v29);
        *(_WORD *)(v31 + 8_Block_object_dispose(&STACK[0x510], 8) = v36;
        if (*(_DWORD *)(v24 + 1308))
        {
          uint64_t v37 = *(void *)(*(void *)(v24 + 3184) + 216);
          if (!*(unsigned char *)(v37 + 747))
          {
            *(_WORD *)(v31 + 8_Block_object_dispose(&STACK[0x510], 8) = v36 & 0xFFBF;
            if (v33)
            {
LABEL_54:
              if (!*(unsigned char *)(*(void *)(v49 + 104) + *(__int16 *)(v31 + 68)))
              {
                *char v34 = 0;
                *(_WORD *)(v31 + 90) = 1;
              }
            }
LABEL_57:
            uint64_t v13 = (__int16)(v13 + 1);
            if ((int)v13 > 15) {
              return (__int16)v13;
            }
            LOWORD(v27) = *(_WORD *)(v12 + 102);
            goto LABEL_59;
          }
          int v46 = (__int16)v13;
          __int16 v47 = v13;
          __src = (char *)(v37 + 680);
          size_t v38 = strlen((const char *)(v37 + 680));
          if (v38 >= 0x40) {
            size_t v39 = 64;
          }
          else {
            size_t v39 = v38;
          }
          if (v39)
          {
            strncpy((char *)v31, __src, v39);
            int v33 = (unsigned __int16)*v34;
          }
          *(unsigned char *)(v31 + v39) = 0;
          uint64_t v15 = v50;
          uint64_t v24 = a1;
          uint64_t v12 = v42;
          uint64_t v25 = v43;
          LOWORD(v13) = v47;
          *(_DWORD *)(v43 + 100 * v46 + 96) = *(_DWORD *)(*(void *)(*(void *)(a1 + 3184) + 216) + 16);
          uint64_t v14 = v52;
          __int16 v26 = v48;
        }
        if (v33) {
          goto LABEL_54;
        }
        goto LABEL_57;
      }
      if ((**(_WORD **)(v12 + 3520) & 4) == 0)
      {
        ICget(__s, (__int16)v22, a1);
        __int16 v26 = v22;
        uint64_t v24 = a1;
        uint64_t v14 = v52;
        uint64_t v13 = v21;
        uint64_t v15 = v50;
        uint64_t v25 = v43;
      }
    }
    LOWORD(v27) = *(_WORD *)(v12 + 102);
    goto LABEL_42;
  }
  return (__int16)v13;
}

uint64_t ICcmpmnd(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 3184) + 264);
  if (*(_DWORD *)(a1 + 1308) && (*(_WORD *)(v2 + 3492) & 0x40) != 0) {
    return 11;
  }
  __strcpy_chk();
  char v3 = **(unsigned char **)(v2 + 72);
  uint64_t v4 = **(void **)(v2 + 80);
  __int16 v5 = *(_WORD *)(v2 + 18);
  uint64_t result = ICcmpsmh(__src, __dst, v2 + 3480, v5 & 0x40, *(__int16 *)(a1 + 1612), a1);
  if (result != 11)
  {
    int v7 = result;
    __strcpy_chk();
    __int16 v8 = *(_WORD *)(a1 + 1322);
    if (v7 == 2)
    {
      __int16 v9 = v8 | 4;
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v2 + 3480);
      *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v2 + 3484);
      *(void *)(v2 + 3480) = 0;
    }
    else
    {
      __int16 v9 = v8 | 2;
    }
    *(_WORD *)(a1 + 1322) = v9 | 0x40;
    uint64_t result = 10;
  }
  *(_WORD *)(v2 + 1_Block_object_dispose(&STACK[0x510], 8) = v5;
  **(unsigned char **)(v2 + 72) = v3;
  **(void **)(v2 + 80) = v4;
  return result;
}

uint64_t isUpperCaseX(int a1, int a2)
{
  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      unsigned int v3 = a1 - 65;
      unint64_t v4 = (0x3F80000000006F35uLL >> (a1 + 95)) & 1;
      if ((a1 - 161) >= 0x3E) {
        LODWORD(v4) = 0;
      }
      BOOL v5 = (a1 - 192) >= 0x17;
      goto LABEL_14;
    }
    if (a2 == 517)
    {
      unsigned int v3 = a1 - 65;
      LODWORD(v4) = (a1 - 174) < 0x22;
      BOOL v5 = (a1 - 161) >= 0xC;
LABEL_14:
      if (!v5) {
        LODWORD(v4) = 1;
      }
      if (v3 >= 0x1A) {
        return v4;
      }
      else {
        return 1;
      }
    }
    return (a1 - 65) < 0x1A;
  }
  if (a2 != 1284 && a2 != 1280) {
    return (a1 - 65) < 0x1A;
  }
  unsigned int v6 = a1 - 65;
  uint64_t result = 1;
  if (v6 >= 0x1A && (a1 - 192) >= 0x17 && (a1 - 216) >= 7)
  {
    unsigned int v8 = a1 - 138;
    if (v8 > 0x15 || ((1 << v8) & 0x200015) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t isAnyAlphaX(unsigned int a1, int a2)
{
  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280) {
      goto LABEL_45;
    }
    char v4 = 1;
    if (a1 - 216 >= 0x1F)
    {
      BOOL v5 = a1 == 138 || (a1 & 0xFFFFFFF8) == 248;
      unsigned int v6 = a1 & 0xFFFFFFFD;
      char v11 = v5 || v6 == 140 || a1 == 154 || v6 == 156 || a1 == 159;
      if ((a1 & 0xFFFFFFDF) - 65 >= 0x1A) {
        char v12 = v11;
      }
      else {
        char v12 = 1;
      }
      if (a1 - 192 >= 0x17) {
        char v4 = v12;
      }
      else {
        char v4 = 1;
      }
    }
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517)
      {
        BOOL v3 = a1 - 241 < 0xC || (a1 & 0xFFFFFFFE) == 254;
        char v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || v3;
        if (a1 - 161 < 0xC) {
          char v4 = 1;
        }
        if (a1 - 174 < 0x42) {
          char v4 = 1;
        }
        return v4 & 1;
      }
LABEL_45:
      char v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A;
      return v4 & 1;
    }
    char v4 = 1;
    if (a1 - 216 >= 0x1F && a1 - 192 >= 0x17 && (a1 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      uint32x4_t v13 = (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_20CC61CA0);
      unsigned int v14 = a1 & 0xFFFFFFFE;
      BOOL v16 = (a1 & 0xFFFFFFF8) == 0xF8 || v14 == 174;
      char v17 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_20CC61CB0, v13))) | ((a1 & 0xFFFFFFFD) == 161);
      BOOL v19 = (a1 & 0xFFFFFFFD) == 0xB1 || v14 == 190;
      char v4 = v17 | (v16 || v19);
    }
  }
  return v4 & 1;
}

uint64_t toLowerX(uint64_t result, int a2)
{
  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      if ((result - 65) >= 0x1A
        && (result - 192) >= 0x17
        && ((result - 161) > 0x3D || ((1 << (result + 95)) & 0x3F80000000006F35) == 0))
      {
        return result;
      }
      if (result - 161) < 0xF && ((0x6F35u >> (result + 95))) {
        return dword_20CC61CD8[(int)result - 161];
      }
      return (result + 32);
    }
    if (a2 == 517)
    {
      if ((result - 65) >= 0x1A && (result - 176) > 0x1F)
      {
        if ((result & 0xFFFFFFFE) != 0xAE && (result - 161) >= 0xC) {
          return result;
        }
        else {
          return (result + 80);
        }
      }
      return (result + 32);
    }
LABEL_32:
    if ((result - 65) >= 0x1A) {
      return result;
    }
    else {
      return (result + 32);
    }
  }
  if (a2 != 1284)
  {
    if (a2 != 1280) {
      goto LABEL_32;
    }
    if ((result - 65) >= 0x1A && (result - 192) >= 0x17)
    {
      if ((result - 216) < 7) {
        return (result + 32);
      }
      goto LABEL_44;
    }
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0) {
      return (result + 32);
    }
LABEL_46:
    if (result == 159) {
      return 255;
    }
    else {
      return (result + 16);
    }
  }
  if ((result - 65) < 0x1A || (result - 192) < 0x17)
  {
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
    {
      if (result == 73) {
        return 253;
      }
      return (result + 32);
    }
    goto LABEL_46;
  }
  if ((int)result <= 215)
  {
LABEL_44:
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0) {
      return result;
    }
    goto LABEL_46;
  }
  if ((result - 216) < 5) {
    return (result + 32);
  }
  if (result == 221) {
    return 105;
  }
  if (result == 222) {
    return (result + 32);
  }
  return result;
}

uint64_t toUpperX(uint64_t result, int a2)
{
  if (a2 > 1279)
  {
    if (a2 == 1284)
    {
      if ((int)result > 247 || (result - 97) < 0x1A || (result - 223) < 0x18)
      {
        if ((int)result <= 157)
        {
          if (result == 105) {
            return 221;
          }
          if (result != 154 && result != 156) {
            return (result - 32);
          }
        }
        else
        {
          if ((int)result > 252)
          {
            if (result == 253) {
              return 73;
            }
            if (result == 255) {
              return 159;
            }
            return (result - 32);
          }
          if (result != 158)
          {
            if (result == 223) {
              return result;
            }
            return (result - 32);
          }
        }
        return (result - 16);
      }
    }
    else
    {
      if (a2 != 1280) {
        goto LABEL_39;
      }
      if ((int)result > 247 || (result - 97) < 0x1A || (result - 223) < 0x18)
      {
        if ((result - 154) > 4 || ((1 << (result + 102)) & 0x15) == 0)
        {
          if (result == 255) {
            unsigned int v3 = 159;
          }
          else {
            unsigned int v3 = result - 32;
          }
          if (result == 223) {
            return 223;
          }
          else {
            return v3;
          }
        }
        return (result - 16);
      }
    }
    if ((result - 154) > 4 || ((1 << (result + 102)) & 0x15) == 0) {
      return result;
    }
    return (result - 16);
  }
  if (a2 != 514)
  {
    if (a2 == 517)
    {
      if ((result - 97) >= 0x1A && (result - 208) > 0x1F)
      {
        if ((result - 241) >= 0xC && (int)result <= 253) {
          return result;
        }
        else {
          return (result - 80);
        }
      }
      return (result - 32);
    }
LABEL_39:
    if ((result - 97) >= 0x1A) {
      return result;
    }
    else {
      return (result - 32);
    }
  }
  if ((result - 97) < 0x1A
    || (result - 223) < 0x18
    || (result - 177) <= 0xE && ((1 << (result + 79)) & 0x6F35) != 0
    || (result - 248) < 7)
  {
    if (result - 177) < 0xF && ((0x6F35u >> (result + 79))) {
      return dword_20CC61D14[(int)result - 177];
    }
    return (result - 32);
  }
  return result;
}

void sub_20CBCC354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBCC9B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_20CBCCD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t correctionFlags(unsigned int a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = 2;
  if (!a2) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | a1;
  uint64_t v7 = 4;
  if (!a3) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 8;
  if (!a4) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v6 | v7 | v8;
  uint64_t v10 = 16;
  if (!a5) {
    uint64_t v10 = 0;
  }
  return v9 | v10;
}

uint64_t removeDiacriticsX(uint64_t result, int a2)
{
  if (a2 == 514)
  {
    if ((int)result < 161) {
      return result;
    }
    if ((result & 0xFFFFFFF8) == 0xF8
      || (result - 216) < 0x1F
      || (result - 192) < 0x17
      || (result & 0xFFFFFFDF) - 65 < 0x1A)
    {
      if (result == 161) {
        return 65;
      }
    }
    else
    {
      if ((result - 161) > 0x1E) {
        return result;
      }
      if (((1 << (result + 95)) & 0x6F356F34) == 0)
      {
        if (result == 161) {
          return 65;
        }
        return result;
      }
    }
    if (result < 0xA6) {
      return 76;
    }
    if (result < 0xAB) {
      return 83;
    }
    if (result == 171) {
      return 84;
    }
    if (result < 0xB0) {
      return 90;
    }
    if (result == 177) {
      return 97;
    }
    if (result < 0xB6) {
      return 108;
    }
    if (result < 0xBB) {
      return 115;
    }
    if (result == 187) {
      return 116;
    }
    if (result < 0xC0) {
      return 122;
    }
    if (result == 192) {
      return 82;
    }
    if (result < 0xC5) {
      return 65;
    }
    if (result == 197) {
      return 76;
    }
    if (result >= 0xC9)
    {
      if (result < 0xCD) {
        return 69;
      }
      if (result < 0xCF) {
        return 73;
      }
      if (result == 208) {
        return 68;
      }
      if (result < 0xD3) {
        return 78;
      }
      if (result < 0xD7) {
        return 79;
      }
      if (result == 216) {
        return 82;
      }
      unsigned int v3 = result - 221;
      if (result < 0xDD) {
        return 85;
      }
      if (v3 < 4) {
        return dword_20CC61CC0[v3];
      }
      if (result < 0xE5) {
        return 65;
      }
      if (result == 229) {
        return 76;
      }
      if (result >= 0xE9)
      {
        if (result < 0xED) {
          return 69;
        }
        if (result < 0xEF) {
          return 73;
        }
        if (result == 240) {
          return 68;
        }
        if (result < 0xF3) {
          return 78;
        }
        if (result >= 0xF7)
        {
          if (result != 248)
          {
            if (result < 0xFD) {
              return 85;
            }
            if (result == 254) {
              unsigned int v4 = 84;
            }
            else {
              unsigned int v4 = 255;
            }
            if (result == 253) {
              return 89;
            }
            else {
              return v4;
            }
          }
          return 82;
        }
        return 79;
      }
    }
    return 67;
  }
  if (a2 != 1284 && a2 != 1280 || (int)result < 193) {
    return result;
  }
  if (result < 0xC6) {
    return 65;
  }
  if (result == 199) {
    return 67;
  }
  int v2 = result & 0x7FFFFFFC;
  if ((result & 0xFFFFFFFC) == 0xC8) {
    return 69;
  }
  if (v2 == 204) {
    return 73;
  }
  if (result - 209) < 8 && ((0xBFu >> (result + 47))) {
    return dword_20CC61D50[(int)result - 209];
  }
  if ((result - 217) < 4) {
    return 85;
  }
  if (result == 221) {
    return 89;
  }
  if ((result - 224) < 6) {
    return 97;
  }
  if (result == 231) {
    return 99;
  }
  if (v2 == 232) {
    return 101;
  }
  if (v2 == 236) {
    return 105;
  }
  if (result - 241) < 8 && ((0xBFu >> (result + 15))) {
    return dword_20CC61D70[(int)result - 241];
  }
  if ((result - 249) < 4) {
    return 117;
  }
  if ((result & 0xFFFFFFFD) == 0xFD) {
    return 121;
  }
  return result;
}

uint64_t ICcmpnum(char *__s, unsigned int a2, uint64_t a3)
{
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 3184);
  uint64_t v7 = *(void *)(v6 + 264);
  uint64_t v8 = *(void *)(*(void *)(v6 + 248) + 56);
  __int16 v30 = 45;
  if (__s)
  {
    size_t v9 = strlen(__s);
    if (v9 >= 0x40) {
      uint64_t v10 = 64;
    }
    else {
      uint64_t v10 = v9;
    }
    if (v10) {
      __strncpy_chk();
    }
    __sa[v10] = 0;
  }
  if (!a2) {
    return 11;
  }
  unsigned __int8 v11 = 0;
  while ((*(_DWORD *)(v8 + 4 * __sa[v11]) & 0x8000000) != 0)
  {
    if (a2 <= ++v11)
    {
      unsigned __int8 v11 = a2;
      goto LABEL_14;
    }
  }
  if (!v11) {
    return 11;
  }
LABEL_14:
  if (__s)
  {
    size_t v12 = strlen(&__sa[v11]);
    if (v12 >= 0x40) {
      size_t v13 = 64;
    }
    else {
      size_t v13 = v12;
    }
    if (v13) {
      strncpy(__s, &__sa[v11], v13);
    }
    __s[v13] = 0;
    int v14 = ICverify(__s, (a2 - v11), a3);
    size_t v15 = strlen(__sa);
    if (v15 >= 0x40) {
      size_t v16 = 64;
    }
    else {
      size_t v16 = v15;
    }
    if (v16) {
      strncpy(__s, __sa, v16);
    }
    __s[v16] = 0;
  }
  else
  {
    int v14 = ICverify(0, (a2 - v11), a3);
  }
  if (!*(unsigned char *)(v7 + 102)) {
    goto LABEL_36;
  }
  unsigned __int8 v17 = 0;
  int v18 = v11;
  BOOL v19 = *(_WORD **)(v7 + 3520);
  while ((v19[v17] & 0x10) == 0)
  {
    if (*(unsigned __int8 *)(v7 + 102) <= ++v17) {
      goto LABEL_36;
    }
  }
  if (v14 != 10)
  {
LABEL_36:
    *(void *)(v7 + 3480) = 0;
    return 11;
  }
  *(_WORD *)v6 |= 8u;
  *(_WORD *)(v7 + 18) &= 0xFFEEu;
  *v19 &= 0xFFEEu;
  *(void *)(a3 + 1328) &= ~0x10uLL;
  uint64_t v20 = *(void *)(v6 + 280);
  *(_WORD *)(v20 + 1500) = v11;
  *(_WORD *)(v20 + 1502) = v11;
  *(_WORD *)(v20 + 1604) = *(_WORD *)(v7 + 18);
  *(_DWORD *)(v20 + 1596) = *(_DWORD *)(v7 + 3480);
  if (*(unsigned char *)(a3 + 8) == 6 && (*(unsigned char *)(a3 + 20) & 0x20) != 0)
  {
    *(unsigned char *)(*(void *)(v7 + 72) + v17) = 4;
    *(_WORD *)(v7 + 102) = 1;
  }
  else
  {
    *(unsigned char *)(v20 + 1592) = *(unsigned char *)(*(void *)(v7 + 72) + v17);
  }
  if ((*(_WORD *)(a3 + 1322) & 0x40) != 0)
  {
    uint64_t v22 = (char *)(*(void *)(v6 + 280) + 1607);
    size_t v23 = strlen((const char *)(a3 + 3090));
    if (v23 >= 0x40) {
      size_t v24 = 64;
    }
    else {
      size_t v24 = v23;
    }
    if (v24) {
      strncpy(v22, (const char *)(a3 + 3090), v24);
    }
    v22[v24] = 0;
  }
  if (*(_DWORD *)(a3 + 1308))
  {
    uint64_t v25 = (void *)(v7 + 3480);
    v32[0] = 0;
    if (*(_DWORD *)(v7 + 3480))
    {
      v32[0] = 0;
      unsigned __int8 v26 = 0;
      unsigned __int8 v27 = v11;
      do
      {
        if ((*((_DWORD *)v25 + (v26 >> 5)) >> ~v26)) {
          *((_DWORD *)v32 + (v27 >> 5)) |= 1 << ~v27;
        }
        ++v26;
        ++v27;
      }
      while (a2 > v26);
      *uint64_t v25 = v32[0];
    }
    if (*(_DWORD *)(a3 + 3156))
    {
      uint64_t v28 = (void *)(a3 + 3156);
      v32[0] = 0;
      unsigned __int8 v29 = 0;
      do
      {
        if ((*((_DWORD *)v28 + (v29 >> 5)) >> ~v29)) {
          *((_DWORD *)v32 + (v11 >> 5)) |= 1 << ~v11;
        }
        ++v29;
        ++v11;
      }
      while (a2 > v29);
      *uint64_t v28 = v32[0];
    }
  }
  if (*(unsigned char *)(a3 + 8) != 6 || (*(unsigned char *)(a3 + 20) & 0x10) != 0) {
    return ICcmpalt(v18, (unsigned __int8 *)&v30, 1, 1, a3);
  }
  else {
    return 10;
  }
}

uint64_t ICcmpprm(uint64_t a1, int a2, int a3, unsigned __int16 a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 3184);
  uint64_t v42 = *(void *)(*(void *)(v7 + 248) + 56);
  uint64_t v8 = (unsigned __int8 *)(a1 + 1547 + a3 + (uint64_t)a2);
  int v9 = *v8;
  if (v9 == 45) {
    __int16 v10 = a3 + 1;
  }
  else {
    __int16 v10 = a3;
  }
  uint64_t v11 = *(void *)(v7 + 280);
  uint64_t v12 = *(void *)(v7 + 264);
  unsigned int v41 = *(unsigned __int8 *)(v12 + 88);
  uint64_t v40 = (void *)(v12 + 92);
  uint64_t v43 = *(void *)(v12 + 92);
  int v13 = *(v8 - 1);
  if (v9 == 45) {
    unsigned __int16 v14 = v10 - 1;
  }
  else {
    unsigned __int16 v14 = a3;
  }
  uint64_t result = ICcmprmc(a1, (__int16)(v10 + a2), (__int16)(*(_WORD *)(a1 + 1612) - 1));
  if (result != 2)
  {
    if (v9 != 45 || result != 10) {
      return result;
    }
    int v19 = *(unsigned __int8 *)(a1 + 8);
    if (!*(unsigned char *)(a1 + 8) || ((1 << (v19 - 1)) & 0x1240) != 0)
    {
      uint64_t v20 = a2 + (uint64_t)(__int16)v14;
      if ((*(_DWORD *)(v42 + 4 * *(unsigned __int8 *)(v20 + a1 + 1546)) & 0x10000000) != 0
        && (*(_DWORD *)(v42 + 4 * *(unsigned __int8 *)(a1 + (int)v20 + 1548)) & 0x10000000) != 0)
      {
        return 10;
      }
    }
    if (v19 == 6 && v41 == 2)
    {
      uint64_t v21 = a2 + a1;
      if (*(unsigned __int8 *)(v21 + 1546) == 223 && *(unsigned char *)(v21 + 1548) == 115 && (*(unsigned char *)(a1 + 20) & 0x80) != 0) {
        return 10;
      }
    }
    return 11;
  }
  if (*(unsigned char *)(a1 + 8) == 11) {
    *(_WORD *)(v11 + 1604) &= ~0x40u;
  }
  uint64_t result = 10;
  if (v9 != 45 && v13 != 45)
  {
    if (v14 | a4) {
      BOOL v16 = (*(_DWORD *)(a1 + 4 * ((unsigned __int16)(v14 + a2) >> 5) + 1672) & (1 << ~(a2 + v14))) == 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      *(_WORD *)(v11 + 1502) = a2 + v14;
      __strncpy_chk();
      __s[*(__int16 *)(a1 + 1612)] = 0;
      if ((*(unsigned char *)(v12 + 3492) & 0x40) != 0 && ReplaceSharf(__s, a1)) {
        __int16 v17 = *(_WORD *)(v11 + 1502) + 1;
      }
      else {
        __int16 v17 = *(_WORD *)(v11 + 1502);
      }
      __strcpy_chk();
      SLrecap(v45, *(__int16 *)(a1 + 1612), v41, (uint64_t)&v43, v41, v42);
      unsigned int v22 = SLcap((uint64_t)v45, *(__int16 *)(v11 + 1502), *(__int16 *)(a1 + 1612), &v43, v42);
      if (v22 >= 2 && (v22 != 3 || *(unsigned char *)(a1 + 8) != 6))
      {
        *(_WORD *)&__s[v17] = 45;
        __strcat_chk();
        __s[*(__int16 *)(a1 + 1612) + 2] = 0;
        if ((*(unsigned char *)(v12 + 3492) & 0x40) != 0) {
          ReplaceSharf(__s, a1);
        }
        uint64_t v44 = 0;
        *(void *)(a1 + 1328) |= 0x200uLL;
        __strcpy_chk();
        ++*(_WORD *)(v11 + 1502);
        ++*(_WORD *)(a1 + 1612);
        __int16 v23 = strlen(__s);
        SFadd(__s, v23, (__int16 *)(v12 + 40), (__int16 *)(v12 + 44), *(__int16 *)(v12 + 42), *(__int16 *)(v12 + 56), *(void *)(v12 + 48), *(void *)(v12 + 64));
        *(_WORD *)v7 |= 4u;
        int v24 = v17;
        if (*(__int16 *)(v12 + 102) >= 1)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *(unsigned __int16 *)(v12 + 102);
          uint64_t v27 = *(void *)(v12 + 72);
          do
          {
            if (*(unsigned __int8 *)(v27 + v25) >= 2u)
            {
              uint64_t v44 = 0;
              uint64_t v28 = *(void *)(v12 + 80);
              if (v17 >= 1)
              {
                LOWORD(v29) = 0;
                do
                {
                  int v30 = 1 << ~(_BYTE)v29;
                  if ((*(_DWORD *)(v28 + 8 * v25 + 4 * ((unsigned __int16)v29 >> 5)) & v30) != 0) {
                    *(_DWORD *)&v45[4 * ((unsigned __int16)v29 >> 5) - 2] |= v30;
                  }
                  int v29 = (__int16)(v29 + 1);
                }
                while (v29 < v17);
              }
              int v31 = *(__int16 *)(a1 + 1612);
              if (v31 > v17)
              {
                int v32 = v17;
                do
                {
                  char v33 = ~(_BYTE)v32;
                  unsigned int v34 = *(_DWORD *)(v28 + 8 * v25 + 4 * ((unsigned __int16)v32++ >> 5));
                  if ((v34 >> v33)) {
                    *(_DWORD *)&v45[4 * ((unsigned __int16)v32 >> 5) - 2] |= 1 << ~(_BYTE)v32;
                  }
                }
                while (v31 != v32);
              }
              *(void *)(v28 + 8 * v25) = v44;
            }
            ++v25;
          }
          while (v25 != v26);
        }
        uint64_t v44 = 0;
        if (v17 >= 1)
        {
          LOWORD(v35) = 0;
          do
          {
            int v36 = 1 << ~(_BYTE)v35;
            if ((*((_DWORD *)v40 + ((unsigned __int16)v35 >> 5)) & v36) != 0) {
              *(_DWORD *)&v45[4 * ((unsigned __int16)v35 >> 5) - 2] |= v36;
            }
            int v35 = (__int16)(v35 + 1);
          }
          while (v35 < v17);
        }
        int v37 = *(__int16 *)(a1 + 1612);
        if (v37 > v17)
        {
          do
          {
            char v38 = ~(_BYTE)v24;
            unsigned int v39 = *((_DWORD *)v40 + ((unsigned __int16)v24++ >> 5));
            if ((v39 >> v38)) {
              *(_DWORD *)&v45[4 * ((unsigned __int16)v24 >> 5) - 2] |= 1 << ~(_BYTE)v24;
            }
          }
          while (v37 != v24);
        }
        *uint64_t v40 = v44;
        return 2;
      }
    }
    return 11;
  }
  return result;
}

uint64_t ReplaceSharf(char *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  LODWORD(v2) = *(__int16 *)(a2 + 1612);
  uint64_t v3 = *(void *)(*(void *)(a2 + 3184) + 264);
  uint64_t v22 = 0;
  if ((int)v2 < 1)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v5 = 0;
    LODWORD(v6) = 0;
    int v7 = 0;
    uint64_t v2 = (unsigned __int16)v2;
    uint64_t v8 = a1;
    do
    {
      int v10 = *v8++;
      char v9 = v10;
      int v11 = v6 + 1;
      uint64_t v6 = (__int16)v6;
      if (v10 == 223)
      {
        __src[v6] = 115;
        LODWORD(v6) = v6 + 2;
        __src[(__int16)v11] = 115;
        int v7 = 1;
        __int16 v5 = v11;
      }
      else
      {
        __src[v6] = v9;
        LODWORD(v6) = v11;
      }
      --v2;
    }
    while (v2);
    __src[(__int16)v6] = 0;
    if (v7 == 1)
    {
      strcpy(a1, __src);
      int v12 = *(__int16 *)(a2 + 1612);
      if (*(__int16 *)(v3 + 102) >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(unsigned __int16 *)(v3 + 102);
        uint64_t v15 = *(void *)(v3 + 80);
        do
        {
          if (v5 >= 1)
          {
            LOWORD(v16) = 0;
            do
            {
              int v17 = 1 << ~(_BYTE)v16;
              if ((*(_DWORD *)(v15 + 8 * v13 + 4 * ((unsigned __int16)v16 >> 5)) & v17) != 0) {
                *(_DWORD *)&__src[4 * ((unsigned __int16)v16 >> 5) - 1] |= v17;
              }
              int v16 = (__int16)(v16 + 1);
            }
            while (v16 < v5);
          }
          if (v12 > v5)
          {
            int v18 = v5;
            do
            {
              char v19 = ~(_BYTE)v18;
              unsigned int v20 = *(_DWORD *)(v15 + 8 * v13 + 4 * ((unsigned __int16)v18++ >> 5));
              if ((v20 >> v19)) {
                *(_DWORD *)&__src[4 * ((unsigned __int16)v18 >> 5) - 1] |= 1 << ~(_BYTE)v18;
              }
            }
            while (v12 != v18);
          }
          *(void *)(v15 + 8 * v13++) = v22;
        }
        while (v13 != v14);
      }
      *(_WORD *)(a2 + 1612) = v12 + 1;
    }
  }
  return (char)v7;
}

uint64_t ICcmprmc(uint64_t a1, int a2, int a3)
{
  v35[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = 11;
  if (a3 < a2) {
    return v3;
  }
  __int16 v4 = a3;
  if (a3 > 63) {
    return v3;
  }
  uint64_t v6 = *(void **)(a1 + 3184);
  uint64_t v29 = *(void *)(v6[31] + 56);
  v35[0] = 0;
  uint64_t v7 = v6[33];
  uint64_t v32 = v6[35];
  __int16 v8 = a3 - a2 + 1;
  unsigned int v9 = *(unsigned __int8 *)(v7 + 88);
  int v30 = *(_DWORD *)(v7 + 96);
  int v31 = *(_DWORD *)(v7 + 92);
  __strncpy_chk();
  __s[v8] = 0;
  uint64_t v11 = a1;
  unsigned int v12 = v9;
  int v13 = a2;
  __strlcpy_chk();
  if (v12 >= 3)
  {
    SLrecap(v34, *(__int16 *)(v11 + 1612), v12, v7 + 92, v12, v29);
    *(unsigned char *)(v7 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap((uint64_t)v34, a2, (__int16)(v4 + 1), (void *)(v7 + 92), v29);
  }
  int v14 = ICverify(__s, v8, v11);
  if (v14 == 2)
  {
    *(_WORD *)(v7 + 102) = 0;
    **(_WORD **)(v11 + 3184) &= ~4u;
    SFlstini((_WORD *)(v7 + 40), (_WORD *)(v7 + 44), *(unsigned char **)(v7 + 48), *(_WORD **)(v7 + 64));
    __int16 v20 = 0;
    uint64_t v15 = v32;
    int v16 = v31;
    goto LABEL_37;
  }
  uint64_t v15 = v32;
  int v16 = v31;
  if (v14 != 10 || *(__int16 *)(v7 + 102) < 1)
  {
    __int16 v20 = 0;
LABEL_37:
    int v26 = 0;
    *(unsigned char *)(v7 + 8_Block_object_dispose(&STACK[0x510], 8) = v12;
    uint64_t v3 = 11;
    LOWORD(v17) = v20;
    *(_DWORD *)(v7 + 92) = v16;
    *(_DWORD *)(v7 + 96) = v30;
    goto LABEL_38;
  }
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  __int16 v20 = 0;
  uint64_t v21 = (unsigned char *)(v11 + (a2 - 1) + 1547);
  do
  {
    __int16 v22 = *(_WORD *)(*(void *)(v7 + 3520) + 2 * v17);
    if ((v22 & 0x10) != 0)
    {
      int v23 = (*(unsigned __int16 *)(v32 + 1524) >> 12) & 1;
      if ((*(_WORD *)(*(void *)(v7 + 3520) + 2 * v17) & 0x400) != 0)
      {
LABEL_11:
        if (v13 < 1)
        {
          char v19 = 1;
          __int16 v20 = v17;
          char v18 = 1;
        }
        else
        {
          char v19 = 1;
          __int16 v20 = v17;
          char v18 = 1;
          if (*v21 == 45) {
            goto LABEL_27;
          }
        }
        goto LABEL_25;
      }
    }
    else
    {
      int v23 = 0;
      if ((*(_WORD *)(*(void *)(v7 + 3520) + 2 * v17) & 0x400) != 0) {
        goto LABEL_11;
      }
    }
    if ((v22 & 0xA) != 0) {
      int v24 = 1;
    }
    else {
      int v24 = v23;
    }
    if (v24)
    {
      __int16 v20 = v17;
      char v19 = 0;
      char v18 = 1;
    }
    if (v13 >= 1 && v24)
    {
      char v19 = 0;
      if (*v21 != 45) {
        goto LABEL_27;
      }
      char v18 = 1;
      __int16 v20 = v17;
    }
LABEL_25:
    ++v17;
  }
  while (*(unsigned __int16 *)(v7 + 102) != v17);
  LOWORD(v17) = v20;
  if (!v18) {
    goto LABEL_37;
  }
LABEL_27:
  *(unsigned char *)(v32 + 1592) = *(unsigned char *)(*(void *)(v7 + 72) + (__int16)v17);
  if (*(unsigned char *)(v11 + 8) == 6 && (*(_WORD *)(*(void *)(v7 + 3520) + 2 * (__int16)v17) & 8) != 0)
  {
    *(unsigned char *)(v32 + 1592) = 1;
    *(unsigned char *)(v32 + 1504) = 1;
    *(_DWORD *)(v32 + 1508) |= 0x80000000;
  }
  *(_DWORD *)(v32 + 1596) = *(_DWORD *)(v7 + 3480);
  *(_DWORD *)(v7 + 3480) = 0;
  *(_WORD *)(v32 + 1502) = v13;
  if (*(_DWORD *)(v11 + 1308) && *(unsigned char *)(*(void *)(*(void *)(v11 + 3184) + 216) + 747))
  {
    __strcpy_chk();
    *(_DWORD *)(v32 + 1600) = *(_DWORD *)(v11 + 3156);
  }
  *(unsigned char *)(v32 + 1606) = *(unsigned char *)(*(void *)(v7 + 3496) + (__int16)v17);
  *(_WORD *)(v32 + 1604) = *(_WORD *)(*(void *)(v7 + 3520) + 2 * (__int16)v17);
  *(unsigned char *)(v7 + 8_Block_object_dispose(&STACK[0x510], 8) = v12;
  *(_DWORD *)(v7 + 92) = v31;
  *(_DWORD *)(v7 + 96) = v30;
  if (v19)
  {
    unsigned int v25 = *(unsigned __int8 *)(v32 + 1504);
    uint64_t v3 = 2;
    goto LABEL_39;
  }
  int v26 = 1;
  uint64_t v3 = 10;
LABEL_38:
  unsigned int v25 = *(unsigned __int8 *)(v15 + 1504);
  if ((v25 & 0xFE) == 2
    || *(__int16 *)(v15 + 1502) >= 1
    && *(unsigned char *)(v11 + *(unsigned __int16 *)(v15 + 1502) - 1 + 1547) == 45
    && *(unsigned __int8 *)(v15 + 1592) - 1 <= 2)
  {
LABEL_39:
    v35[0] = *(void *)(*(void *)(v7 + 80) + 8 * (__int16)v17);
    if ((v25 | 4) == 4)
    {
      unsigned int v25 = ICEndToken(v11);
      if (v25 == 1)
      {
        *(unsigned char *)(v15 + 1504) = 1;
        *(_DWORD *)(v15 + 1508) |= 0x80000000;
        if ((v16 & 0x80000000) == 0)
        {
          *(_WORD *)(v11 + 1322) |= 0x800u;
          unsigned int v25 = 1;
        }
      }
      else
      {
        unsigned int v25 = *(unsigned __int8 *)(v15 + 1504);
      }
    }
    **(unsigned char **)(v7 + 72) = ICcomcap(v25, (uint64_t *)(v15 + 1508), v13, *(unsigned __int8 *)(v15 + 1592), v35, *(void *)(v7 + 80), 0);
    goto LABEL_51;
  }
  if (v26)
  {
    **(unsigned char **)(v7 + 72) = *(unsigned char *)(v15 + 1592);
    if (*(unsigned char *)(v15 + 1592) == 1) {
      **(_DWORD **)(v7 + 80) |= 0x80000000;
    }
LABEL_51:
    *(_WORD *)(v7 + 102) = 1;
  }
  return v3;
}

uint64_t ICcmpsmh(char *__src, char *__dst, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a6 + 3184);
  uint64_t v12 = *(void *)(v11 + 264);
  uint64_t v13 = *(void *)(*(void *)(v11 + 248) + 56);
  strcpy(__dst, __src);
  if (a5 >= 2)
  {
    int v51 = (unsigned __int16)a5 - 1;
    int v14 = 1;
    do
    {
      int v15 = *(unsigned __int8 *)(a6 + 8);
      if (a4)
      {
        if (v15 == 6)
        {
          if (__dst[(__int16)v14] == 107 && (uint64_t v31 = v14 - 1, __dst[v31] == 107))
          {
            __dst[v31] = 99;
            __int16 v19 = *(_WORD *)(v12 + 102);
            uint64_t result = ICverify(__dst, a5, a6);
            if (result == 10) {
              return result;
            }
            __dst[v31] = 107;
          }
          else
          {
LABEL_35:
            if (v51 <= v14) {
              goto LABEL_67;
            }
            int v33 = __dst[(__int16)v14];
            if (v33 != __dst[v14 - 1] || v33 != __dst[v14 + 1]) {
              goto LABEL_67;
            }
            int v34 = v14;
            do
            {
              int v35 = &__dst[(__int16)v34];
              int v36 = v35[2];
              v35[1] = v36;
              ++v34;
            }
            while (v36);
            __int16 v19 = *(_WORD *)(v12 + 102);
            __int16 v20 = a5 - 1;
LABEL_41:
            int v37 = v20;
            char v38 = __dst;
LABEL_58:
            uint64_t result = ICverify(v38, v37, a6);
            if (result == 10) {
              return result;
            }
            strcpy(__dst, __src);
          }
          *(_WORD *)(v12 + 102) = v19;
          goto LABEL_67;
        }
        if (v15 != 11) {
          goto LABEL_35;
        }
        if ((*(_DWORD *)(a3 + 4 * ((unsigned __int16)v14 >> 5)) >> ~(_BYTE)v14))
        {
          uint64_t v16 = v14 + 1;
          uint64_t v17 = __dst[v16];
          if ((*(_DWORD *)(v13 + 4 * v17) & 0x10000000) != 0)
          {
            HIDWORD(v47) = v17 - 97;
            LODWORD(v47) = v17 - 97;
            unsigned int v46 = v47 >> 1;
            if (v46 <= 0xA && ((0x495u >> v46) & 1) != 0) {
              __dst[v16] = byte_20CC61D90[v46];
            }
            __int16 v19 = *(_WORD *)(v12 + 102);
            char v38 = __dst;
            int v37 = a5;
            goto LABEL_58;
          }
          if ((*(_DWORD *)(v13 + 4 * __dst[(__int16)v14]) & 0x10000000) != 0)
          {
            if (a5 >= (__int16)v14)
            {
              LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = a5;
              do
              {
                __dst[(__int16)v18 + 1] = __dst[(__int16)v18];
                int v18 = (__int16)(v18 - 1);
              }
              while (v18 >= (__int16)v14);
            }
            __int16 v19 = *(_WORD *)(v12 + 102);
            __int16 v20 = a5 + 1;
            goto LABEL_41;
          }
        }
      }
      else
      {
        if (v15 == 11)
        {
          if ((*(_DWORD *)(v13 + 4 * __dst[(__int16)v14]) & 0x40000) != 0)
          {
            *(_WORD *)(*(void *)(*(void *)(a6 + 3184) + 280) + 1502) = v14;
            ICremacc(__dst, 2, a6);
            *(_WORD *)(*(void *)(*(void *)(a6 + 3184) + 280) + 1502) = 0;
            __int16 v21 = *(_WORD *)(v12 + 102);
            uint64_t v22 = *(void *)(v12 + 3480);
            if (ICverify(__dst, a5, a6) == 10)
            {
              if ((*(_WORD *)(v12 + 18) & 0x40) != 0) {
                return 2;
              }
              *(void *)(v12 + 3480) = v22;
            }
            strcpy(__dst, __src);
            *(_WORD *)(v12 + 102) = v21;
          }
          if ((__int16)v14 >= 2)
          {
            int v23 = v14 - 1;
            uint64_t v24 = __dst[v14 - 1];
            if ((*(_DWORD *)(v13 + 4 * v24) & 0x10000000) != 0
              && v24 == __dst[v14 - 2]
              && (*(_DWORD *)(v13 + 4 * __dst[v14 - 2]) & 0x10000000) != 0)
            {
              uint64_t v26 = (unsigned __int16)(v14 - 1) - 1;
              if (__dst[v26] == 101) {
                __dst[v26] = -23;
              }
              do
              {
                uint64_t v27 = &__dst[(__int16)v23];
                int v28 = v27[1];
                *uint64_t v27 = v28;
                ++v23;
              }
              while (v28);
              __int16 v29 = *(_WORD *)(v12 + 102);
              uint64_t v30 = *(void *)(v12 + 3480);
              if (ICverify(__dst, (__int16)(a5 - 1), a6) == 10)
              {
                if ((*(_WORD *)(v12 + 18) & 0x40) != 0) {
                  return 2;
                }
                *(void *)(v12 + 3480) = v30;
              }
              goto LABEL_65;
            }
          }
          goto LABEL_66;
        }
        if ((**(_WORD **)(a6 + 3184) & 8) != 0) {
          goto LABEL_66;
        }
        if (v15 == 6 && __dst[(__int16)v14] == 107)
        {
          uint64_t v39 = v14 - 1;
          if (__dst[v39] == 99)
          {
            uint64_t v49 = a3;
            __dst[v39] = 107;
            __int16 v40 = *(_WORD *)(v12 + 102);
            if (ICverify(__dst, a5, a6) == 10) {
              return 2;
            }
            __dst[v39] = 99;
            *(_WORD *)(v12 + 102) = v40;
            a3 = v49;
          }
        }
        int v41 = __dst[(__int16)v14];
        if (v41 != __dst[v14 - 1]) {
          goto LABEL_66;
        }
        if (v51 <= v14 || v41 != __dst[v14 + 1])
        {
          if (a5 >= (__int16)v14)
          {
            LOWORD(v4_Block_object_dispose(&STACK[0x510], 8) = a5;
            do
            {
              __dst[(__int16)v48 + 1] = __dst[(__int16)v48];
              int v48 = (__int16)(v48 - 1);
            }
            while (v48 >= (__int16)v14);
          }
          __int16 v29 = *(_WORD *)(v12 + 102);
          if (ICverify(__dst, (__int16)(a5 + 1), a6) == 10) {
            return 2;
          }
LABEL_65:
          strcpy(__dst, __src);
          *(_WORD *)(v12 + 102) = v29;
LABEL_66:
          if ((**(_WORD **)(a6 + 3184) & 8) != 0) {
            return 11;
          }
          goto LABEL_67;
        }
        int v42 = v14;
        do
        {
          int v14 = v42;
          uint64_t v43 = &__dst[(__int16)v42];
          int v44 = *v43;
          int v45 = v43[1];
          int v42 = v14 + 1;
        }
        while (v44 == v45);
      }
LABEL_67:
      int v14 = (__int16)(v14 + 1);
    }
    while (v14 < a5);
  }
  return 11;
}

uint64_t ICcmpspc(char *a1, int a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 3184);
  uint64_t v7 = *(void *)(v6 + 264);
  if (*(unsigned char *)(v7 + 88) == 2)
  {
    uint64_t v62 = *(void *)(*(void *)(v6 + 248) + 56);
    uint64_t v63 = *(void *)(v6 + 280);
    unsigned int v8 = *(unsigned __int8 *)(a3 + 1612);
    __strcpy_chk();
    if (a2)
    {
      LOBYTE(v9) = 0;
      unsigned __int8 v10 = a2;
      while (1)
      {
        int v11 = 0;
        int v12 = 0;
        int v13 = 0;
        int v14 = 1;
LABEL_5:
        int v15 = v13;
        int v13 = v12;
        do
        {
          int v16 = __src[v13];
          if (v16 == 115 && __src[v13 + 1] == 115)
          {
            if ((_BYTE)v15) {
              BOOL v17 = 0;
            }
            else {
              BOOL v17 = v13 > v9;
            }
            int v18 = v17;
            if (v18 & v14)
            {
              int v14 = 0;
              a1[v11] = -33;
              *(_WORD *)(v7 + 3492) |= 0x40u;
              ++v11;
              int v12 = v13 + 2;
              if ((v13 + 2) < v10) {
                goto LABEL_5;
              }
              uint64_t v19 = v11;
              a1[v11] = 0;
              int v9 = v13;
              goto LABEL_21;
            }
            LOBYTE(v16) = 115;
          }
          a1[v11++] = v16;
          ++v13;
        }
        while (v13 < v10);
        uint64_t v19 = v11;
        a1[v11] = 0;
        int v9 = v15;
        if (v14) {
          goto LABEL_31;
        }
LABEL_21:
        unsigned int v20 = v11;
        if (ICverify(a1, v11, a3) == 10)
        {
          int v34 = (_DWORD *)(v7 + 3480);
          if (*(_DWORD *)(v7 + 3480) && (*(_WORD *)(v7 + 3492) & 0x40) != 0 && v20 > v9)
          {
            int v35 = v9;
            do
            {
              int v36 = v34[v35 >> 5];
              int v37 = 1 << ~(_BYTE)v35;
              if ((v37 & v36) != 0)
              {
                v34[v35 >> 5] = v36 & ~v37;
                uint64_t v38 = ((v35 + 1) >> 3) & 0x3CLL;
                *(_DWORD *)((char *)v34 + v38) |= 1 << ~++v35;
              }
              ++v35;
            }
            while (v20 > v35);
          }
          strcpy(a1, __src);
          *(_WORD *)(a3 + 1612) = v8;
          if ((*(unsigned char *)(a3 + 1322) & 0x40) != 0)
          {
            char v68 = 0;
            long long v66 = 0u;
            long long v67 = 0u;
            *(_OWORD *)__src = 0u;
            long long v65 = 0u;
            if ((_BYTE)v9)
            {
              uint64_t v39 = v9;
              memcpy(__src, (const void *)(a3 + 3090), v9);
            }
            else
            {
              uint64_t v39 = 0;
            }
            __src[v39] = 115;
            __src[(v9 + 1)] = 115;
            __strcat_chk();
            __strcpy_chk();
            if (*(_DWORD *)(a3 + 3156))
            {
              unsigned __int8 v54 = strlen((const char *)(a3 + 3090));
              int v55 = v9 - 1;
              if (v54 > (v9 - 1))
              {
                uint64_t v56 = a3 + 3156;
                char v57 = v9 - 1;
                do
                {
                  int v58 = *(_DWORD *)(v56 + 4 * (v55 >> 5));
                  int v59 = 1 << ~v57;
                  if ((v59 & v58) != 0)
                  {
                    *(_DWORD *)(v56 + 4 * (v55 >> 5)) = v58 & ~v59;
                    uint64_t v60 = ((v55 + 1) >> 3) & 0x3CLL;
                    *(_DWORD *)(v56 + v60) |= 1 << ~(v57 + 1);
                    ++v55;
                  }
                  char v57 = ++v55;
                }
                while (v54 > v55);
              }
            }
          }
          if (*(_DWORD *)(a3 + 1308))
          {
            int v61 = *(_DWORD *)(v7 + 3472);
            if (v61)
            {
              if (v61 != *v34) {
                *(void *)(a3 + 1328) |= 8uLL;
              }
            }
          }
          return 10;
        }
        __int16 v21 = *(_WORD **)(v7 + 3520);
        if ((*v21 & 0x20) != 0 || *(__int16 *)(v7 + 102) >= 2 && (v21[1] & 0x20) != 0)
        {
          *(_WORD *)(a3 + 1612) = v8;
          uint64_t v24 = Split(__src, v20, a3);
          goto LABEL_83;
        }
        *(_WORD *)(a3 + 1612) = v20;
        uint64_t v22 = ICcmp(a3);
        if (v22 != 11)
        {
          uint64_t v24 = v22;
          uint64_t v25 = v63;
          if (v22 != 10) {
            goto LABEL_42;
          }
          goto LABEL_36;
        }
        if (*(_DWORD *)(a3 + 1672) || *(_DWORD *)(a3 + 1676))
        {
          uint64_t v23 = ICcmphhy(a3);
          if (v23 != 11) {
            break;
          }
        }
        strcpy(a1, __src);
        *(_WORD *)(a3 + 1612) = v8;
        __strcpy_chk();
        unsigned __int8 v10 = v8;
        if (!v8) {
          goto LABEL_30;
        }
      }
      uint64_t v24 = v23;
      uint64_t v25 = v63;
      if (v23 != 10) {
        goto LABEL_42;
      }
      **(unsigned char **)(v7 + 72) = 0;
LABEL_36:
      if (*(unsigned char *)(v7 + 88) == 2
        && *(__int16 *)(v25 + 1502) >= 1
        && a1[*(unsigned __int16 *)(v25 + 1502) - 1] == 223
        && a1[*(unsigned __int16 *)(v25 + 1502)] == 115)
      {
        *(void *)(a3 + 1328) |= 0x200uLL;
        uint64_t v26 = v25 + 1672;
        __strncpy_chk();
        *(unsigned char *)(v26 + *(__int16 *)(v25 + 1502)) = 45;
        *(unsigned char *)(*(__int16 *)(v25 + 1502) + v26 + 1) = 0;
        __int16 v27 = *(_WORD *)(v25 + 1502);
        *(_WORD *)(v25 + 173_Block_object_dispose(&STACK[0x510], 8) = v27;
        *(_WORD *)(v25 + 1740) = v27 + 1;
        __strcat_chk();
        *(unsigned char *)(v19 + v26 + 1) = 0;
        uint64_t v24 = 2;
      }
      else
      {
        uint64_t v24 = 10;
      }
LABEL_42:
      *(_WORD *)v6 |= 8u;
      strcpy(a1, __src);
      if (*(unsigned __int8 *)(a3 + 1612) < v8) {
        *(_WORD *)(a3 + 1612) = v8;
      }
      if (v24 == 2)
      {
        int v28 = (char *)(v25 + 1672);
        if (strlen((const char *)(v25 + 1672)))
        {
          uint64_t v29 = 0;
          unsigned __int8 v30 = 0;
          do
          {
            int v31 = v28[v29];
            unsigned __int8 v32 = v30 + 1;
            uint64_t v33 = v30;
            if (v31 == 223)
            {
              v30 += 2;
              LOBYTE(v31) = 115;
              __src[v32] = 115;
            }
            else
            {
              ++v30;
            }
            __src[v33] = v31;
            ++v29;
          }
          while (v29 < strlen(v28));
        }
        else
        {
          unsigned __int8 v30 = 0;
        }
        __src[v30] = 0;
        __strcpy_chk();
        SLrecap((unsigned __int8 *)v28, v30, *(unsigned __int8 *)(v7 + 88), v7 + 92, *(unsigned __int8 *)(v7 + 88), v62);
        if ((*(unsigned char *)(a3 + 1329) & 2) != 0) {
          SFadd(v28, v30, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(void *)(v7 + 48), *(void *)(v7 + 64));
        }
        uint64_t v25 = v63;
        int v40 = *(__int16 *)(v63 + 1738);
        if (v40 > v9)
        {
          *(_WORD *)(v63 + 173_Block_object_dispose(&STACK[0x510], 8) = v40 + 1;
          ++*(_WORD *)(v63 + 1740);
        }
      }
      if ((*(_WORD *)(v7 + 3492) & 0x40) != 0)
      {
        unsigned int v41 = *(unsigned __int8 *)(v25 + 1500);
        __int16 v42 = *(_WORD *)(v25 + 1502);
        if (v41 <= v9)
        {
          if (v9 >= v42)
          {
            if (*(_DWORD *)(v25 + 1596))
            {
              unsigned int v47 = *(unsigned __int8 *)(a3 + 1612);
              if (v47 > v9)
              {
                uint64_t v48 = v25 + 1596;
                do
                {
                  int v49 = *(_DWORD *)(v48 + 4 * (v9 >> 5));
                  int v50 = 1 << ~(_BYTE)v9;
                  if ((v50 & v49) != 0)
                  {
                    *(_DWORD *)(v48 + 4 * (v9 >> 5)) = v49 & ~v50;
                    uint64_t v51 = ((v9 + 1) >> 3) & 0x3CLL;
                    *(_DWORD *)(v48 + v51) |= 1 << ~++v9;
                  }
                  ++v9;
                }
                while (v47 > v9);
              }
            }
          }
        }
        else
        {
          *(_WORD *)(v25 + 1502) = v42 + 1;
          if (*(_DWORD *)(v25 + 1516))
          {
            uint64_t v43 = v25 + 1516;
            do
            {
              int v44 = *(_DWORD *)(v43 + 4 * (v9 >> 5));
              int v45 = 1 << ~(_BYTE)v9;
              if ((v45 & v44) != 0)
              {
                *(_DWORD *)(v43 + 4 * (v9 >> 5)) = v44 & ~v45;
                uint64_t v46 = ((v9 + 1) >> 3) & 0x3CLL;
                *(_DWORD *)(v43 + v46) |= 1 << ~++v9;
              }
              ++v9;
            }
            while (v41 > v9);
          }
        }
      }
LABEL_83:
      if (v24 != 11) {
        return v24;
      }
    }
    else
    {
LABEL_30:
      *a1 = 0;
LABEL_31:
      strcpy(a1, __src);
      *(_WORD *)(a3 + 1612) = v8;
    }
  }
  uint64_t v52 = *(_WORD **)(v7 + 3520);
  if ((*v52 & 0x20) != 0 || *(__int16 *)(v7 + 102) >= 2 && (v52[1] & 0x20) != 0) {
    return Split(a1, a2, a3);
  }
  else {
    return 11;
  }
}

uint64_t Split(const char *a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 3184);
  uint64_t v7 = *(void *)(v6 + 264);
  uint64_t v8 = *(void *)(*(void *)(v6 + 248) + 56);
  __s[0] = 0;
  uint64_t v9 = *(void *)(v7 + 3520);
  if ((*(unsigned char *)v9 & 0x20) == 0 && (*(__int16 *)(v7 + 102) < 2 || (*(_WORD *)(v9 + 2) & 0x20) == 0))
  {
    uint64_t result = 11;
LABEL_35:
    *(void *)(v7 + 3480) = 0;
    return result;
  }
  if (!*(_DWORD *)(v7 + 3480)) {
    goto LABEL_34;
  }
  uint64_t v21 = 0;
  int v11 = *(unsigned __int8 *)(v7 + 88);
  if (!*(unsigned char *)(v7 + 88) || v11 == 3 && (*(_DWORD *)(v7 + 92) & 0x80000000) == 0 || *(_WORD *)(v7 + 102) == 1)
  {
    __strcpy_chk();
    *(_OWORD *)__s = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    if (a2)
    {
      uint64_t v12 = 0;
      while (((*(_DWORD *)(v7 + 3480 + 4 * (v12 >> 5)) >> ~(_BYTE)v12) & 1) == 0)
      {
        __s[v12] = v26[v12];
        if (a2 == ++v12) {
          goto LABEL_16;
        }
      }
      char v13 = v26[v12];
      int v14 = &__s[v12];
      char *v14 = v13;
      v14[1] = 32;
      __strcat_chk();
    }
LABEL_16:
    *(_WORD *)(v7 + 44) = 0;
    *(_WORD *)(v7 + 40) = 0;
    if (v11 != 1)
    {
      if (v11 == 2)
      {
        uint64_t v21 = *(void *)(v7 + 92);
        unsigned int v15 = 2;
LABEL_23:
        __int16 v16 = strlen(__s);
        SLrecap((unsigned __int8 *)__s, (__int16)(v16 + 1), v15, (uint64_t)&v21, v15, v8);
        SFadd(__s, a2 + 1, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(void *)(v7 + 48), *(void *)(v7 + 64));
        if (v11 == 3) {
          *(void *)(a3 + 1328) |= 0x400uLL;
        }
        if (*(__int16 *)(v7 + 102) <= 1)
        {
          int v17 = __s[0];
        }
        else if (!v11 || (int v17 = __s[0], v11 == 3) && __s[0])
        {
          char v18 = v26[0];
          if ((*(_DWORD *)(v8 + 4 * v26[0]) & 0x20000000) != 0) {
            char v18 = v26[0] - 32;
          }
          v26[0] = v18;
          SFadd(v26, a2, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(void *)(v7 + 48), *(void *)(v7 + 64));
          goto LABEL_34;
        }
        if (v17)
        {
LABEL_34:
          *(_WORD *)(a3 + 1322) |= 1u;
          *(_WORD *)v6 |= 4u;
          uint64_t result = 2;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      unsigned int v15 = 0;
      if (v11 != 3) {
        goto LABEL_23;
      }
      if ((*(_DWORD *)(v7 + 92) & 0x80000000) == 0)
      {
        unsigned int v15 = 0;
        goto LABEL_23;
      }
    }
    LODWORD(v21) = 0x80000000;
    unsigned int v15 = 1;
    goto LABEL_23;
  }
LABEL_36:
  *(_WORD *)(a3 + 1322) &= ~1u;
  *(_WORD *)(v7 + 18) &= ~0x20u;
  *(void *)(v7 + 3480) = 0;
  if (*(_DWORD *)(a3 + 1308))
  {
    uint64_t v19 = *(__int16 **)(*(void *)(a3 + 3184) + 216);
    *uint64_t v19 = 1;
    IHhyp(a1, v19);
    uint64_t v20 = *(void *)(*(void *)(a3 + 3184) + 216);
    *(_DWORD *)(v7 + 3480) = *(_DWORD *)(v20 + 8);
    *(_DWORD *)(v7 + 3484) = *(_DWORD *)(v20 + 12);
  }
  return 10;
}

uint64_t ICcmpsup(uint64_t a1, int a2, __int16 a3)
{
  switch(a2)
  {
    case 1:
      __int16 v3 = -1;
      char v4 = 31;
      goto LABEL_7;
    case 4:
      __int16 v3 = -3;
      char v4 = 29;
      goto LABEL_7;
    case 2:
      __int16 v3 = -2;
      char v4 = 30;
LABEL_7:
      *(_DWORD *)(a1 + 4 * ((unsigned __int16)(v3 + a3) >> 5)) |= 1 << ~(v4 + a3);
      break;
  }
  return 0;
}

uint64_t ICcmpver(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(__int16 **)(a1 + 3184);
  uint64_t v3 = *((void *)v2 + 35);
  uint64_t v4 = *((void *)v2 + 33);
  bzero((void *)v3, 0x6D0uLL);
  int v5 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 1413))
  {
    int v6 = ICcmp(a1);
    if (v6 == 11)
    {
      *(_WORD *)(v4 + 42) = 100;
      LODWORD(v7) = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
      if (v7 == 10)
      {
        if ((*(_WORD *)(v3 + 1742) & 1) == 0 && (*(_WORD *)(v4 + 18) & 4) != 0) {
          goto LABEL_46;
        }
        uint64_t v10 = *(unsigned __int16 *)(v4 + 102);
        if (*(__int16 *)(v4 + 102) < 1)
        {
          if (*(_WORD *)(v4 + 102)) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v11 = 0;
          while (*(unsigned char *)(*(void *)(v4 + 72) + v11) != 2)
          {
            if ((__int16)++v11 >= (__int16)v10) {
              goto LABEL_85;
            }
          }
          if (v11 != v10 && (!v11 || *(unsigned char *)(v4 + 88) == 2))
          {
LABEL_46:
            if ((*v2 & 8) != 0)
            {
              LODWORD(v7) = 10;
            }
            else
            {
              uint64_t v7 = 10;
              if (*(_DWORD *)(a1 + 1308)) {
                return v7;
              }
            }
            goto LABEL_121;
          }
        }
        goto LABEL_85;
      }
    }
    else
    {
      LODWORD(v7) = v6;
      if (v6 == 10)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x7200) != 0 && *(unsigned char *)(a1 + 1413)) {
          *(void *)(a1 + 1328) |= 0x40uLL;
        }
        *v2 |= 8u;
        goto LABEL_46;
      }
      if (v6 == 2 && *(unsigned char *)(a1 + 8) == 7)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x100) != 0
          && !SLstrcmp((unsigned char *)(a1 + 1547), (unsigned __int8 *)(v3 + 1672)))
        {
          *(_WORD *)(v3 + 1742) = *(_WORD *)(v3 + 1742) & 0xFCFF | 0x200;
          *(unsigned char *)(a1 + 1690) = 0;
          if (!*(unsigned char *)(a1 + 1413)) {
            goto LABEL_46;
          }
LABEL_85:
          *(void *)(a1 + 1328) |= 0x40uLL;
          LODWORD(v7) = 3;
          goto LABEL_121;
        }
        goto LABEL_88;
      }
    }
LABEL_44:
    if (v7 == 11)
    {
      **(_DWORD **)(v4 + 3520) = 0;
      *(_WORD *)(v4 + 102) = 0;
      *(_WORD *)(v4 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
      *(_WORD *)(v3 + 1742) = 0;
      if ((*(_DWORD *)(a1 + 1672) || *(_DWORD *)(a1 + 1676)) && (int v21 = ICcmphhy(a1), v21 != 11))
      {
        LODWORD(v7) = v21;
        if (*(unsigned char *)(a1 + 1413)) {
          *v2 |= 8u;
        }
        if ((*(_WORD *)(v3 + 1742) & 0x100) != 0) {
          return 2;
        }
        __int16 v24 = *v2;
        if ((*(_WORD *)(v3 + 1742) & 0x3000) != 0 || (*v2 & 8) == 0)
        {
          if (*(_DWORD *)(a1 + 1308))
          {
            if (*(unsigned char *)(v3 + 1526) && *(_WORD *)(v3 + 1500))
            {
              ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), *(_WORD *)(v3 + 1500));
              __int16 v24 = *v2;
            }
            if ((v24 & 4) != 0)
            {
              uint64_t v26 = (char *)(a1 + 1690);
            }
            else if ((*(_WORD *)(v3 + 1742) & 0x1000) != 0)
            {
              uint64_t v26 = (char *)(a1 + 3090);
            }
            else
            {
              uint64_t v26 = (char *)(a1 + 1547);
            }
            ICcmphyp(v26, a1);
          }
          goto LABEL_227;
        }
      }
      else
      {
        uint64_t v22 = a1 + 1547;
        uint64_t v23 = ICcmpnum((char *)(a1 + 1547), *(unsigned __int8 *)(a1 + 1612), a1);
        uint64_t v7 = v23;
        if (v23 == 11 && v5 == 6)
        {
          LODWORD(v7) = ICcmpspc((char *)(a1 + 1547), *(unsigned __int8 *)(a1 + 1612), a1);
        }
        else
        {
          if (v23 == 11 && v5 == 11)
          {
            size_t v27 = strlen((const char *)(a1 + 1547));
            if (v27 >= 0x40) {
              uint64_t v28 = 64;
            }
            else {
              uint64_t v28 = v27;
            }
            if (v28) {
              __strncpy_chk();
            }
            __s[v28] = 0;
            ICremacc(__s, 3, a1);
            __int16 v29 = *(_WORD *)(v4 + 3492);
            if ((v29 & 0x10) == 0)
            {
              *(_WORD *)(v4 + 3492) = v29 & 0xFFEF;
              LODWORD(v7) = 11;
              goto LABEL_121;
            }
            size_t v40 = strlen((const char *)(a1 + 1547));
            if (v40 >= 0x40) {
              uint64_t v41 = 64;
            }
            else {
              uint64_t v41 = v40;
            }
            if (v41) {
              __strncpy_chk();
            }
            __src[v41] = 0;
            size_t v42 = strlen(__s);
            if (v42 >= 0x40) {
              size_t v43 = 64;
            }
            else {
              size_t v43 = v42;
            }
            if (v43) {
              strncpy((char *)(a1 + 1547), __s, v43);
            }
            *(unsigned char *)(v22 + v43) = 0;
            uint64_t v7 = ICcmp(a1);
            size_t v44 = strlen(__src);
            if (v44 >= 0x40) {
              size_t v45 = 64;
            }
            else {
              size_t v45 = v44;
            }
            if (v45) {
              strncpy((char *)(a1 + 1547), __src, v45);
            }
            *(unsigned char *)(v22 + v45) = 0;
            if (v7 == 11)
            {
              *(_WORD *)(v4 + 3492) &= ~0x10u;
              return v7;
            }
            *v2 |= 0xCu;
            *(_WORD *)(v4 + 3492) |= 2u;
            if (*(unsigned char *)(v3 + 1672)) {
              checked_strcpy((unint64_t)__s, (char *)(v3 + 1672));
            }
            __int16 v61 = strlen(__s);
            SFadd(__s, v61, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
            goto LABEL_88;
          }
          if (v23 == 11) {
            return v7;
          }
        }
      }
    }
    else if (v7 == 10)
    {
      goto LABEL_46;
    }
    if (v7 != 2)
    {
LABEL_121:
      if ((*v2 & 8) != 0 || (*(unsigned char *)(a1 + 1329) & 2) != 0)
      {
        int v35 = ICcmpfnd(a1);
      }
      else if (*(unsigned char *)(a1 + 8) != 6 || (*(unsigned char *)(a1 + 20) & 0x20) != 0)
      {
        int v35 = 11;
        if (v7 != 11 && (*(_WORD *)(v4 + 18) & 0x240) != 0 && !*(_DWORD *)(a1 + 1308)) {
          int v35 = ICcmpmnd(a1);
        }
      }
      else
      {
        int v35 = 11;
      }
      if (v35 != 11 && v7 != 3) {
        LODWORD(v7) = v35;
      }
      if (v7 != 11)
      {
        if (*(_DWORD *)(a1 + 1308))
        {
          if (*(__int16 *)(v3 + 1742) < 0)
          {
            *(_DWORD *)(v3 + 1596) = 0;
            *(_DWORD *)(v3 + 1516) = 0;
            *(_WORD *)(a1 + 1322) |= 2u;
          }
          if ((*v2 & 4) != 0) {
            int v37 = (char *)(a1 + 1690);
          }
          else {
            int v37 = (char *)(a1 + 1547);
          }
          ICcmphyp(v37, a1);
          if ((*v2 & 8) != 0 && *(__int16 *)(v3 + 1742) < 0)
          {
            if ((*v2 & 4) != 0) {
              uint64_t v38 = (char *)(a1 + 1690);
            }
            else {
              uint64_t v38 = (char *)(a1 + 1547);
            }
            ICcmphyp(v38, a1);
            *(_WORD *)(a1 + 1322) |= 2u;
          }
        }
        else if (*(_DWORD *)(v4 + 3480) && (*(_WORD *)(a1 + 1322) & 0x41) != 0x40)
        {
          *(void *)(v4 + 3480) = 0;
        }
      }
      if ((*(unsigned char *)(a1 + 1329) & 2) != 0) {
        return 2;
      }
      else {
        return v7;
      }
    }
LABEL_88:
    if ((*(unsigned char *)(a1 + 1329) & 2) != 0) {
      goto LABEL_120;
    }
    if (!*(unsigned char *)(v3 + 1672))
    {
LABEL_105:
      __int16 v33 = *v2 | 8;
      *uint64_t v2 = v33;
      if ((*(_WORD *)(v3 + 1742) & 0x100) == 0)
      {
        if (!*(_DWORD *)(a1 + 1308))
        {
LABEL_118:
          if ((*(_WORD *)(v3 + 1524) & 0x40) != 0 || (*(_WORD *)(v3 + 1604) & 0x40) != 0)
          {
LABEL_120:
            uint64_t v7 = 2;
            if ((*(_WORD *)(v3 + 1742) & 0x100) != 0) {
              return v7;
            }
            goto LABEL_121;
          }
LABEL_227:
          if ((*v2 & 4) != 0) {
            return 2;
          }
          else {
            return 10;
          }
        }
        if (*(unsigned char *)(v3 + 1526) && *(_WORD *)(v3 + 1500))
        {
          ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), *(_WORD *)(v3 + 1500));
          __int16 v33 = *v2;
        }
        if ((v33 & 4) != 0)
        {
          if ((*(_WORD *)(a1 + 1322) & 2) == 0)
          {
            int v34 = (char *)(a1 + 1690);
            goto LABEL_116;
          }
        }
        else if ((*(_WORD *)(v3 + 1742) & 0x1000) == 0)
        {
          int v34 = (char *)(a1 + 1547);
LABEL_116:
          ICcmphyp(v34, a1);
          if (*(_DWORD *)(a1 + 1308) && (*(unsigned char *)(a1 + 1329) & 2) == 0) {
            goto LABEL_227;
          }
          goto LABEL_118;
        }
        int v34 = (char *)(a1 + 3090);
        goto LABEL_116;
      }
      return 2;
    }
    if (*(unsigned char *)(a1 + 8) == 6 && (*(unsigned char *)(a1 + 20) & 0x20) == 0)
    {
      __int16 v30 = *(_WORD *)(v3 + 1742);
      goto LABEL_98;
    }
    __int16 v30 = *(_WORD *)(v3 + 1742);
    if ((v30 & 0x2000) != 0)
    {
      __int16 v31 = *(_WORD *)(a1 + 1322) | 2;
    }
    else
    {
      if ((*(_WORD *)(v3 + 1742) & 0x1000) == 0) {
        goto LABEL_98;
      }
      __int16 v31 = *(_WORD *)(a1 + 1322) | 4;
    }
    *(_WORD *)(a1 + 1322) = v31;
LABEL_98:
    if (v30 < 0)
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1322) |= 0x40u;
    }
    else
    {
      __int16 v32 = strlen((const char *)(v3 + 1672));
      SFadd((char *)(v3 + 1672), v32, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
      *(_WORD *)(a1 + 1612) = strlen((const char *)(v3 + 1672));
      *(void *)(a1 + 1328) |= 0x200uLL;
      *v2 |= 4u;
    }
    if (*(unsigned char *)(a1 + 1413))
    {
      if (*(_WORD *)(v3 + 1502)) {
        *(void *)(a1 + 1328) |= 0x40uLL;
      }
      else {
        *(_WORD *)(v3 + 1742) |= 0x400u;
      }
    }
    goto LABEL_105;
  }
  if (!*(unsigned char *)(a1 + 1415))
  {
    char v12 = *(unsigned char *)(v4 + 88);
    if (v5 == 6 && *(unsigned char *)(a1 + 1414)) {
      *(unsigned char *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = 1;
    }
    *(_WORD *)(v4 + 42) = 100;
    uint64_t v64 = (char *)(a1 + 1547);
    uint64_t v7 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
    char v62 = **(unsigned char **)(v4 + 72);
    uint64_t v13 = **(void **)(v4 + 80);
    __int16 v65 = *(_WORD *)(v4 + 18);
    __int16 v14 = *(_WORD *)(a1 + 1322);
    uint64_t v15 = *(void *)(v4 + 3480);
    size_t v16 = strlen((const char *)(a1 + 3090));
    if (v16 >= 0x40) {
      uint64_t v17 = 64;
    }
    else {
      uint64_t v17 = v16;
    }
    __int16 v63 = *(_WORD *)(a1 + 1322);
    if (v17)
    {
      __strncpy_chk();
      __int16 v14 = *(_WORD *)(a1 + 1322);
    }
    __src[v17] = 0;
    *(unsigned char *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = v12;
    if ((v14 & 0x220) != 0) {
      return v7;
    }
    if (v7 != 11 && (*(_WORD *)(v4 + 18) & 1) == 0) {
      goto LABEL_179;
    }
    if (*(unsigned char *)(a1 + 1412))
    {
      uint64_t v18 = *(__int16 *)(a1 + 1612);
      if (v18 <= 5)
      {
        uint64_t v19 = a1 + 1547;
        *(unsigned char *)(v19 + v1_Block_object_dispose(&STACK[0x510], 8) = 46;
        __int16 v20 = *(_WORD *)(a1 + 1612) + 1;
        *(_WORD *)(a1 + 1612) = v20;
        *(unsigned char *)(v19 + v20) = 0;
        ++v2[2];
        ICadjpost((char *)(a1 + 1482));
        uint64_t v7 = ICverify(v64, *(__int16 *)(a1 + 1612), a1);
        if (v7 == 10)
        {
          *(unsigned char *)(a1 + 1412) = 0;
          return v7;
        }
        ICreadjpo((char *)(a1 + 1482));
        __int16 v46 = *(_WORD *)(a1 + 1612) - 1;
        *(_WORD *)(a1 + 1612) = v46;
        --v2[2];
        *(unsigned char *)(a1 + v46 + 1547) = 0;
      }
    }
    if (v7 == 11)
    {
      unsigned int v47 = *(_WORD **)(v4 + 3520);
      if ((*v47 & 0x20) != 0 || *(__int16 *)(v4 + 102) >= 2 && (v47[1] & 0x20) != 0) {
        return ICcmpspc(v64, *(unsigned __int8 *)(a1 + 1612), a1);
      }
      LODWORD(v7) = 11;
      int v48 = 1;
    }
    else
    {
LABEL_179:
      int v48 = 0;
    }
    if (*(unsigned char *)(a1 + 8) == 6)
    {
      if ((v48 & ((*(unsigned char *)(a1 + 20) & 0x20) >> 5) & 1) == 0)
      {
LABEL_182:
        if (v7 != 11
          && (*(unsigned char *)(*(void *)(a1 + 3184) + 304) != 11 || (*(_WORD *)(v4 + 18) & 0x100) == 0))
        {
          goto LABEL_44;
        }
        goto LABEL_200;
      }
    }
    else if (!v48)
    {
      goto LABEL_182;
    }
    if (*(_DWORD *)(a1 + 1672) || *(_DWORD *)(a1 + 1676))
    {
      if (*(__int16 *)(a1 + 1612) < 1)
      {
        __int16 v49 = 0;
      }
      else
      {
        __int16 v49 = 0;
        uint64_t v50 = *(unsigned __int16 *)(a1 + 1612);
        uint64_t v51 = (unsigned __int8 *)(a1 + 1547);
        do
        {
          int v53 = *v51++;
          char v52 = v53;
          if (v53 != 45 && v49 <= 63)
          {
            uint64_t v54 = v49++;
            __src[v54] = v52;
          }
          --v50;
        }
        while (v50);
      }
      __src[v49] = 0;
      int v56 = v49;
      if (ICverify(__src, v49, a1) != 11 && ((*(_WORD *)(v4 + 18) & 0x40) == 0 || *(_DWORD *)(a1 + 1308)))
      {
        SFadd(__src, v56, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
        **(_WORD **)(a1 + 3184) |= 4u;
        *(void *)(a1 + 1328) |= 0x800000uLL;
        return 2;
      }
    }
LABEL_200:
    int v57 = ICcmp(a1);
    LODWORD(v7) = v57;
    if (v57 == 10)
    {
      *v2 |= 8u;
      if (v5 == 11) {
        *(_WORD *)(v4 + 3492) &= ~0x10u;
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 3184) + 304) != 11 || (v65 & 0x100) == 0)
    {
      if (*(unsigned char *)(a1 + 1414))
      {
        int v59 = *(unsigned int **)(v4 + 80);
        unsigned int v60 = *v59;
        *v59 &= ~0x80000000;
        if ((*(unsigned char *)(a1 + 20) & 0x10) != 0 && (*(_DWORD *)(v4 + 92) & 0x80000000) != 0) {
          *int v59 = v60 | 0x80000000;
        }
      }
      goto LABEL_44;
    }
    if (v57 != 11) {
      *v2 |= 8u;
    }
    checked_strcpy(a1 + 3090, __src);
    **(unsigned char **)(v4 + 72) = v62;
    **(void **)(v4 + 80) = v13;
    *(_WORD *)(v4 + 1_Block_object_dispose(&STACK[0x510], 8) = v65;
    *(_WORD *)(a1 + 1322) = v63;
    *(void *)(v4 + 3480) = v15;
    **(_WORD **)(a1 + 3184) &= ~4u;
    if ((v65 & 0x40) == 0 || *(_DWORD *)(a1 + 1308))
    {
      *(_WORD *)(v4 + 102) = 1;
      return 10;
    }
    return ICcmpmnd(a1);
  }
  *(_WORD *)(v4 + 42) = 100;
  int v8 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  if (v8 != 11)
  {
    LODWORD(v7) = v8;
    *(unsigned char *)(a1 + 1415) = 0;
    goto LABEL_44;
  }
  *(unsigned char *)(a1 + v2[2] + 1547) = 0;
  __int16 v9 = *(_WORD *)(a1 + 1612) - 1;
  *(_WORD *)(a1 + 1612) = v9;
  uint64_t v7 = ICverify((char *)(a1 + 1547), v9, a1);
  if (v7 == 11)
  {
    *(unsigned char *)(a1 + v2[2] + 1547) = 39;
    ++*(_WORD *)(a1 + 1612);
  }
  if ((*(_WORD *)(a1 + 1322) & 0x20) == 0) {
    goto LABEL_44;
  }
  return v7;
}

unint64_t checked_strcpy(unint64_t result, char *__s)
{
  if (result && __s)
  {
    uint64_t v3 = (char *)result;
    uint64_t result = strlen(__s);
    if (result >= 0x40) {
      size_t v4 = 64;
    }
    else {
      size_t v4 = result;
    }
    if (v4) {
      uint64_t result = (unint64_t)strncpy(v3, __s, v4);
    }
    v3[v4] = 0;
  }
  return result;
}

uint64_t ICcmpvow(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void **)(a1 + 3184);
  uint64_t v8 = v7[35];
  uint64_t v9 = *(void *)(v7[31] + 56);
  int v10 = *(unsigned __int16 *)(v8 + 100 * a2 + 68);
  uint64_t v49 = v7[33];
  if (v10 == 2 || a4 && v10 == 8 || *(unsigned char *)(v8 + 1592)) {
    unsigned __int16 v11 = *(_WORD *)(v8 + 100 * a2 + 66) + 1;
  }
  else {
    unsigned __int16 v11 = *(_WORD *)(v8 + 100 * a2 + 66);
  }
  uint64_t v12 = a1 + 1547;
  __int16 v13 = strlen((const char *)(a1 + 1547));
  uint64_t v14 = (__int16)v11;
  uint64_t v15 = (const char *)(v12 + (__int16)v11);
  uint64_t v16 = *(unsigned __int8 *)v15;
  if (a3)
  {
    if (v16 == 45)
    {
LABEL_8:
      *(_WORD *)(v8 + 1742) |= 0x200u;
      return 10;
    }
    uint64_t v25 = (__int16)v11 - 1;
    int v26 = *(__int16 *)(v8 + 1502);
    if ((__int16)v11 - 1 != v26)
    {
      uint64_t v27 = *(unsigned __int8 *)(a1 + v25 + 1547);
      if ((*(_DWORD *)(v9 + 4 * v27) & 0x10000000) == 0) {
        goto LABEL_8;
      }
      uint64_t v28 = *(unsigned __int8 *)(a1 + *(__int16 *)(v8 + 1502) + 1547);
      if ((*(_DWORD *)(v9 + 4 * v28) & 0x10000000) == 0) {
        goto LABEL_8;
      }
      if (!isdiphthong(*(unsigned __int8 *)(a1 + v25 + 1547), *(unsigned __int8 *)(a1 + *(__int16 *)(v8 + 1502) + 1547)))
      {
        int v29 = isdiphthong(v28, *(unsigned __int8 *)(v26 + a1 + 1548));
        if (v27 != v28 && v29 == 0) {
          return 10;
        }
      }
      *(_WORD *)(v8 + 1742) |= 0x8000u;
      if ((__int16)v11 < 1)
      {
        unsigned __int16 v35 = 0;
      }
      else
      {
        uint64_t v31 = v11;
        __int16 v32 = (char *)(a1 + 1547);
        __int16 v33 = (unsigned char *)(v8 + 1672);
        do
        {
          char v34 = *v32++;
          *v33++ = v34;
          --v31;
        }
        while (v31);
        unsigned __int16 v35 = v11;
      }
      __int16 v47 = v35 + 1;
      *(unsigned char *)(v8 + 1672 + (__int16)v35) = 45;
      strcpy((char *)(v8 + 1672 + (__int16)(v35 + 1)), v15);
      *(_WORD *)(v8 + 1740) = v47;
      *(_WORD *)(v8 + 1742) |= 0x80u;
      *(_WORD *)(a1 + 1322) |= 2u;
      uint64_t v48 = v49 + 4 * ((unsigned __int16)(v11 - 1) >> 5);
      *(_DWORD *)(v48 + 3480) |= 1 << ~(_BYTE)v25;
      return 2;
    }
    return 11;
  }
  if (v16 != 45)
  {
    if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)((__int16)v11 + a1 + 1546)) & 0x10000000) == 0
      || (*(_DWORD *)(v9 + 4 * v16) & 0x40000) == 0)
    {
      return 11;
    }
    __strcpy_chk();
    *(_WORD *)(v8 + 1502) = v11;
    ICremacc((char *)(a1 + 1547), 2, a1);
    if (ICcmprmc(a1, (__int16)v11, (__int16)(*(_WORD *)(a1 + 1612) - 1)) == 10)
    {
      int v36 = *(unsigned __int8 *)((__int16)v11 + a1 + 1546);
      int v37 = *(unsigned __int8 *)v15;
      if (!isdiphthong(v36, v37)
        && ((int v38 = isdiphthong(v37, *(unsigned __int8 *)((__int16)v11 + a1 + 1548)), v36 != v37)
          ? (BOOL v39 = v38 == 0)
          : (BOOL v39 = 0),
            v39))
      {
        __strcpy_chk();
        __strcpy_chk();
        *(_WORD *)(v8 + 1740) = *(_WORD *)(v8 + 1502);
      }
      else
      {
        if ((__int16)v11 < 1)
        {
          unsigned __int16 v11 = 0;
        }
        else
        {
          uint64_t v40 = v11;
          uint64_t v41 = (char *)(a1 + 1547);
          size_t v42 = (unsigned char *)(v8 + 1672);
          do
          {
            char v43 = *v41++;
            *v42++ = v43;
            --v40;
          }
          while (v40);
        }
        *(unsigned char *)(v8 + 1672 + (__int16)v11) = 45;
        strcpy((char *)(v8 + 1672 + (__int16)(v11 + 1)), v15);
        *(_WORD *)(v8 + 1740) = v11 + 1;
        __strcpy_chk();
      }
      return 2;
    }
    goto LABEL_60;
  }
  unsigned __int16 v18 = v13;
  int v19 = v13;
  uint64_t v20 = (__int16)v11 + 1;
  if (ICcmprmc(a1, (__int16)(v14 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) == 10)
  {
    if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v14 + a1 + 1546)) & 0x10000000) != 0
      && (*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(a1 + v20 + 1547)) & 0x10000000) != 0)
    {
      goto LABEL_8;
    }
    if (!a4
      && (strlen((const char *)(a1 + 1547)) - 19 < 0xFFFFFFEE
       || (*(_WORD *)(v8 + 1524) & 0x80) != 0
       || (*(_WORD *)(v8 + 1604) & 0x80) != 0))
    {
      return 10;
    }
    if (v19 < 1)
    {
      __int16 v22 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      __int16 v22 = 0;
      do
      {
        int v23 = *(unsigned __int8 *)(a1 + 1547 + v21);
        if (v23 == 45)
        {
          *(_WORD *)(v8 + 1740) = v21;
        }
        else
        {
          uint64_t v24 = v8 + v22++;
          *(unsigned char *)(v24 + 1672) = v23;
        }
        ++v21;
      }
      while (v18 != v21);
    }
    *(unsigned char *)(v8 + v22 + 1672) = 0;
    **(_WORD **)(a1 + 3184) = 4;
    *(_WORD *)(v8 + 1742) |= 0x10u;
    if (a4) {
      return 2;
    }
    goto LABEL_68;
  }
  if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(a1 + (int)v20 + 1547)) & 0x40000) == 0) {
    return 11;
  }
  __strcpy_chk();
  *(_WORD *)(v8 + 1502) = v20;
  ICremacc((char *)(a1 + 1547), 2, a1);
  if (ICcmprmc(a1, (__int16)(v14 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) != 10)
  {
LABEL_60:
    __strcpy_chk();
    *(_WORD *)(v49 + 3492) &= ~0x10u;
    return 11;
  }
  __strcpy_chk();
  __strcpy_chk();
  *(_WORD *)(v8 + 1740) = *(_WORD *)(v8 + 1502);
  if ((*(_DWORD *)(v9 + 4 * v50[v14 - 1]) & 0x10000000) != 0
    || strlen((const char *)(a1 + 1547)) - 19 < 0xFFFFFFEE
    || (*(_WORD *)(v8 + 1524) & 0x80) != 0
    || (*(_WORD *)(v8 + 1604) & 0x80) != 0)
  {
    return 2;
  }
  __strcpy_chk();
  if (v19 < 1)
  {
    __int16 v45 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    __int16 v45 = 0;
    do
    {
      if (*(unsigned char *)(a1 + 1547 + v44) == 45)
      {
        *(_WORD *)(v8 + 1740) = v44;
      }
      else
      {
        uint64_t v46 = v8 + v45++;
        *(unsigned char *)(v46 + 1672) = v50[v44];
      }
      ++v44;
    }
    while (v18 != v44);
  }
  *(unsigned char *)(v8 + v45 + 1672) = 0;
  **(_WORD **)(a1 + 3184) = 4;
  *(_WORD *)(v8 + 1742) |= 0x10u;
LABEL_68:
  *(unsigned char *)(v8 + 1526) = 0;
  return 2;
}

uint64_t isdiphthong(int a1, int a2)
{
  int v7 = 151520517;
  char v8 = 4;
  HIDWORD(v3) = a1 - 97;
  LODWORD(v3) = a1 - 97;
  unsigned int v2 = v3 >> 1;
  if (v2 <= 0xA
    && ((0x495u >> v2) & 1) != 0
    && (HIDWORD(v5) = a2 - 97, LODWORD(v5) = a2 - 97, unsigned int v4 = v5 >> 1, v4 <= 0xA)
    && ((0x495u >> v4) & 1) != 0)
  {
    return (*((unsigned __int8 *)&v7 + qword_20CC61DA8[v2]) >> asc_20CC69B65[v4]) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t ICcomcap(unsigned int a1, uint64_t *a2, int a3, unsigned int a4, uint64_t *a5, uint64_t a6, int a7)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v15 = *a5;
  if (a1 == 5) {
    unsigned int v8 = a4;
  }
  else {
    unsigned int v8 = 3;
  }
  if (a4 == 5) {
    unsigned int v8 = a1;
  }
  if (a4 & 0xFFFFFFFB | a1)
  {
    if (a1 != 4 || (a4 & 0xFB) != 0)
    {
      if (a1 != 1 || a4)
      {
        if (a4 == 2 && a1 == 2) {
          uint64_t result = 2;
        }
        else {
          uint64_t result = v8;
        }
      }
      else
      {
        uint64_t result = 1;
      }
    }
    else
    {
      uint64_t result = 4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  v16[0] = v7;
  if (a3 <= 61)
  {
    unsigned __int16 v11 = 0;
    unsigned __int16 v12 = a3;
    do
    {
      int v13 = 1 << ~(_BYTE)v12;
      if ((*((_DWORD *)&v16[-1] + (v11 >> 5)) >> ~(_BYTE)v11)) {
        int v14 = *((_DWORD *)v16 + (v12 >> 5)) | v13;
      }
      else {
        int v14 = *((_DWORD *)v16 + (v12 >> 5)) & ~v13;
      }
      *((_DWORD *)v16 + (v12++ >> 5)) = v14;
      ++v11;
    }
    while (v12 != 62);
    uint64_t v7 = v16[0];
  }
  *(void *)(a6 + 8 * a7) = v7;
  return result;
}

uint64_t ICcorspl(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 3184) + 248) + 56);
  int v6 = strlen(a1);
  unsigned __int16 v7 = v6;
  if (((v6 << 16) - 4128769) < 0xFFC3FFFF) {
    return 11;
  }
  int v8 = (__int16)v6;
  __strcpy_chk();
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = a2 + 92;
  uint64_t v12 = *(void *)(a2 + 92);
  int v13 = *(unsigned __int8 *)(a2 + 88);
  do
  {
    __int16 v14 = v10;
    *(&v29 + v9 + 1) = v28[(__int16)v10++];
    int v9 = (__int16)v10;
  }
  while (v8 > (__int16)v10);
  *(&v29 + (__int16)(v14 + 2)) = 0;
  char v29 = v30;
  if ((*(_DWORD *)(v5 + 4 * v28[0]) & 0x8000000) != 0)
  {
    unsigned __int16 v15 = v8 - 1;
    unsigned int v16 = 1;
  }
  else
  {
    unsigned __int16 v15 = v7 - 2;
    char v30 = v31;
    unsigned int v16 = 3;
  }
  int v17 = v15;
  if (v15 <= v16) {
    return 11;
  }
  unsigned __int16 v27 = v7;
  int v18 = (__int16)(v7 - 1);
  unsigned int v19 = v16;
  do
  {
    *(&v29 + (int)v19 - 1) = *(&v29 + (__int16)v16);
    *(&v29 + (__int16)v16) = 32;
    if (v13 && v18 >= (__int16)v16)
    {
      LOWORD(v20) = v18;
      unsigned __int16 v21 = v27;
      do
      {
        unsigned __int16 v22 = v20;
        int v23 = *(_DWORD *)(v11 + 4 * ((unsigned __int16)v20 >> 5));
        int v24 = 1 << ~(_BYTE)v20;
        if ((v23 & v24) != 0)
        {
          *(_DWORD *)(v11 + 4 * ((unsigned __int16)v20 >> 5)) = v23 & ~v24;
          *(_DWORD *)(v11 + 4 * (v21 >> 5)) |= 1 << ~(v20 + 1);
        }
        int v20 = (__int16)(v20 - 1);
        unsigned __int16 v21 = v22;
      }
      while (v20 >= (__int16)v16);
    }
    uint64_t result = ICcorucf(&v29, a3);
    *(void *)(a2 + 92) = v12;
    *(unsigned char *)(a2 + 8_Block_object_dispose(&STACK[0x510], 8) = v13;
    if (result == 11)
    {
      int v26 = *(__int16 *)(a3 + 1686);
      if (*(__int16 *)(a2 + 40) < v26)
      {
        *(_WORD *)(a2 + 40) = v26;
        *(_WORD *)(a2 + 44) = *(_WORD *)(a3 + 1688);
      }
    }
    LOWORD(v16) = v16 + 1;
    unsigned int v19 = (__int16)v16;
  }
  while (v17 > (__int16)v16);
  return result;
}

uint64_t ICcorucf(const char *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  uint64_t v6 = *(void *)(v4 + 248);
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v123 = 0;
  memset(v122, 0, sizeof(v122));
  memset(__src, 0, 512);
  uint64_t v121 = *(void *)(v5 + 92);
  int v8 = (unsigned char *)(a2 + 1614);
  char v85 = *(unsigned char *)(v5 + 88);
  unsigned __int16 v9 = strlen((const char *)(a2 + 1614));
  memcpy(__dst, (const void *)(v2 + 1690), sizeof(__dst));
  long long v10 = *(_OWORD *)(v2 + 3018);
  long long v111 = *(_OWORD *)(v2 + 3034);
  long long v11 = *(_OWORD *)(v2 + 3066);
  long long v112 = *(_OWORD *)(v2 + 3050);
  long long v113 = v11;
  long long v12 = *(_OWORD *)(v2 + 2954);
  long long v107 = *(_OWORD *)(v2 + 2970);
  long long v13 = *(_OWORD *)(v2 + 3002);
  long long v108 = *(_OWORD *)(v2 + 2986);
  long long v109 = v13;
  long long v110 = v10;
  long long v14 = *(_OWORD *)(v2 + 2890);
  long long v103 = *(_OWORD *)(v2 + 2906);
  long long v15 = *(_OWORD *)(v2 + 2938);
  long long v104 = *(_OWORD *)(v2 + 2922);
  long long v105 = v15;
  long long v106 = v12;
  uint64_t v114 = *(void *)(v2 + 3082);
  int v17 = (__int16 *)(v5 + 40);
  __int16 v16 = *(_WORD *)(v5 + 40);
  long long v102 = v14;
  __int16 v116 = v16;
  __int16 v115 = *(_WORD *)(v5 + 44);
  uint64_t v93 = (__int16 *)(v5 + 44);
  int v90 = (unsigned char *)(v2 + 1690);
  uint64_t v91 = v2 + 2890;
  SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), (unsigned char *)(v2 + 1690), (_WORD *)(v2 + 2890));
  uint64_t v87 = a1;
  int v18 = strlen(a1);
  uint64_t v95 = v5;
  if (v18 << 16 <= -65536)
  {
    int v40 = 0;
    BOOL v51 = 0;
    signed int v49 = 0;
    __s[0] = 0;
    goto LABEL_96;
  }
  uint64_t v82 = v6;
  uint64_t v83 = v8;
  int v89 = (__int16 *)(v5 + 40);
  int v19 = 0;
  unint64_t v20 = 0;
  int v92 = (__int16)v9;
  int v21 = (__int16)v18;
  int v86 = 0;
  unsigned __int16 v84 = 0;
  unsigned __int16 v81 = v9;
  int v22 = -v9;
  uint64_t v96 = v2;
  while (2)
  {
    unint64_t v23 = v20;
    int v24 = malloc_type_calloc(1uLL, 0x54uLL, 0x1000040B41CA856uLL);
    *((void *)v122 + v23) = v24;
    if (!v24) {
      return 8;
    }
    uint64_t v25 = (uint64_t)v24;
    v24[38] = v19;
    if (v21 < (__int16)v19)
    {
      __int16 v26 = 0;
      goto LABEL_15;
    }
    __int16 v26 = 0;
    int v27 = *(unsigned __int8 *)(v2 + 1338);
    while (1)
    {
      unsigned int v28 = v87[(__int16)v19];
      if (v28 != v27) {
        break;
      }
LABEL_14:
      if (v21 < (__int16)++v19) {
        goto LABEL_15;
      }
    }
    if (v28 > 0x2F || ((1 << v28) & 0xA00100000000) == 0)
    {
      uint64_t v30 = v26++;
      __s[v30] = v28;
      goto LABEL_14;
    }
    v24[40] = v28;
LABEL_15:
    __s[v26] = 0;
    v24[39] = v19;
    if (!__s[0] && v23 && !**((unsigned char **)v122 + (v23 - 1)) || !__s[0] && *(_DWORD *)v2 == 102)
    {
LABEL_108:
      unsigned int v62 = (__int16)v23;
LABEL_109:
      cleanup(v62, v2, __dst, (void **)v122, 1);
      return 11;
    }
    __strcpy_chk();
    int v31 = (__int16)(*(_WORD *)(v25 + 76) + v92);
    __int16 v32 = *(_WORD *)(v25 + 78) + v92;
    if (v31 < v32)
    {
      __int16 v33 = 0;
      do
      {
        if ((*((_DWORD *)&v121 + ((unsigned __int16)v31 >> 5)) >> ~(_BYTE)v31))
        {
          *(_DWORD *)(v25 + 68 + 4 * ((unsigned __int16)(v22 + v31 - *(_WORD *)(v25 + 76)) >> 5)) |= 1 << ~(v22 + v31 - *(unsigned char *)(v25 + 76));
          uint64_t v34 = *(unsigned __int8 *)(v25 + v33);
          if ((*(_DWORD *)(v7 + 4 * v34) & 0x20000000) != 0) {
            LOBYTE(v34) = v34 - 32;
          }
          *(unsigned char *)(v25 + v33) = v34;
        }
        ++v31;
        ++v33;
      }
      while (v32 != v31);
    }
    unint64_t v94 = v23;
    unsigned __int16 v35 = strlen((const char *)v25);
    char v36 = SLcap(v25, 0, (__int16)v35, (void *)(v25 + 68), v7);
    *(unsigned char *)(v25 + 65) = v36;
    *(unsigned char *)(v5 + 8_Block_object_dispose(&STACK[0x510], 8) = v36;
    if (icisint(*(unsigned __int8 *)(v96 + 8), __s, v7)) {
      goto LABEL_28;
    }
    unsigned int v42 = *(unsigned __int8 *)(v96 + 8);
    if ((v42 > 9 || ((1 << v42) & 0x228) == 0) && icisupperletter((const char *)v25, v7)) {
      goto LABEL_28;
    }
    if (!v42 || ((1 << (v42 - 1)) & 0x20008) != 0) {
      *(_DWORD *)uint64_t v96 = 3;
    }
    int v43 = ICverify(__s, (__int16)v35, v96);
    *(unsigned char *)(v95 + 8_Block_object_dispose(&STACK[0x510], 8) = v85;
    if ((**(unsigned char **)(v95 + 3520) & 0x40) != 0 || (*(_WORD *)(v95 + 18) & 0x4000) != 0) {
      return 11;
    }
    int v44 = *(unsigned __int8 *)(v96 + 8);
    if (v44 != 8 && v44 != 5 || (*(unsigned char *)(v96 + 24) & 0x40) == 0 || (__int16)v35 < 1)
    {
LABEL_60:
      if (v43 != 10) {
        goto LABEL_67;
      }
LABEL_28:
      uint64_t v5 = v95;
      uint64_t v2 = v96;
      *(unsigned char *)(v95 + 8_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(v25 + 65);
      *(_DWORD *)(v95 + 92) = *(_DWORD *)(v25 + 68);
      *(_DWORD *)(v95 + 96) = *(_DWORD *)(v25 + 72);
      *(_DWORD *)(v96 + 4) = 11;
      *(unsigned char *)(v96 + 1339) = 69;
      if (*(_DWORD *)v96 == 102)
      {
        LOWORD(v23) = v94;
        if (*(unsigned char *)(v96 + 8) == 16 && (**(unsigned char **)(v95 + 3496) & 0x20) != 0
          || !*(unsigned char *)(v95 + 88) && **(unsigned __int8 **)(v95 + 72) - 1 < 3)
        {
          goto LABEL_108;
        }
        *(_WORD *)uint64_t v95 = 102;
        if ((int)(strlen((const char *)v25) << 16) >= 1)
        {
          __int16 v37 = 0;
          do
          {
            uint64_t v38 = *(unsigned __int8 *)(v25 + v37);
            if ((*(_DWORD *)(v7 + 4 * v38) & 0x40000000) != 0) {
              LOBYTE(v3_Block_object_dispose(&STACK[0x510], 8) = v38 + 32;
            }
            *(unsigned char *)(v25 + v37++) = v38;
          }
          while ((__int16)strlen((const char *)v25) > v37);
        }
        if (ICcapcod((char *)v25, v96) == 2)
        {
          __strcpy_chk();
          SFlstini(v89, v93, v90, (_WORD *)v91);
        }
        __int16 v39 = strlen((const char *)v25);
        int v40 = SFchkwrd(*(void *)(*(void *)(v96 + 3184) + 248), v95, (char *)v25, v39, **(unsigned __int8 **)(v95 + 72), *(void *)(v95 + 80));
        __strcpy_chk();
        SFlstini(v89, v93, v90, (_WORD *)v91);
        unint64_t v23 = v94;
        if (v40 == 11) {
          goto LABEL_108;
        }
      }
      else
      {
        int v41 = ICcapcod(__s, v96);
        unint64_t v23 = v94;
        if (v41 == 11)
        {
          ++v86;
        }
        else if (v41 == 2)
        {
          __strcpy_chk();
          unint64_t v23 = v94;
          SFlstini(v89, v93, v90, (_WORD *)v91);
          *(void *)(v96 + 132_Block_object_dispose(&STACK[0x510], 8) = 0;
        }
        int v40 = 10;
      }
LABEL_70:
      unint64_t v20 = v23 + 1;
      if (v21 < (__int16)(v19 + 2) || (++v19, v23 >= 6))
      {
        signed int v49 = (__int16)v20;
        __int16 v50 = v86;
        BOOL v51 = (unsigned __int16)v86 == 1;
        if ((unsigned __int16)v86 == 1)
        {
          int v17 = v89;
          if (v23 <= 5)
          {
            *(_WORD *)uint64_t v95 = 100;
            *(_WORD *)(v95 + 2156) = -1;
            if (!*(unsigned char *)(v2 + 8) || ((1 << (*(unsigned char *)(v2 + 8) - 1)) & 0x20008) != 0) {
              *(_DWORD *)uint64_t v2 = 100;
            }
            SFlstini(v89, v93, *(unsigned char **)(v95 + 48), *(_WORD **)(v95 + 64));
            *(unsigned char *)(*(void *)(v95 + 112) + 34) = 0;
            *(unsigned char *)(*(void *)(v95 + 112) + 44) = 0;
            uint64_t v52 = *((void *)v122 + (__int16)v84);
            *(unsigned char *)(v95 + 8_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(v52 + 65);
            *(_DWORD *)(v95 + 92) = *(_DWORD *)(v52 + 68);
            *(_DWORD *)(v95 + 96) = *(_DWORD *)(v52 + 72);
            while (1)
            {
              if (*(unsigned char *)(v2 + 8)) {
                BOOL v53 = ((1 << (*(unsigned char *)(v2 + 8) - 1)) & 0x20008) == 0;
              }
              else {
                BOOL v53 = 0;
              }
              if (v53) {
                int v54 = SFcorrec(v120, 0, v82, v95);
              }
              else {
                int v54 = IChu(v2, v120);
              }
              if (v54) {
                int v55 = 20;
              }
              else {
                int v55 = 21;
              }
              if (*v89 > 19) {
                int v55 = 22;
              }
              if (v55 != 20) {
                break;
              }
              if (!*(unsigned char *)(v2 + 8) || ((1 << (*(unsigned char *)(v2 + 8) - 1)) & 0x20008) != 0) {
                *(_DWORD *)uint64_t v2 = 101;
              }
              *(_WORD *)uint64_t v95 = 101;
            }
            int v88 = v55;
            char v117 = 0;
            char v118 = 0;
            if (*v83)
            {
              if (v92 >= 1)
              {
                uint64_t v63 = 0;
                uint64_t v64 = v2 + 1614;
                do
                {
                  if ((*((_DWORD *)&v121 + ((unsigned __int16)v63 >> 5)) >> ~(_BYTE)v63))
                  {
                    uint64_t v65 = *(unsigned __int8 *)(v64 + v63);
                    if ((*(_DWORD *)(v7 + 4 * v65) & 0x20000000) != 0) {
                      LOBYTE(v65) = v65 - 32;
                    }
                    *(unsigned char *)(v64 + v63) = v65;
                  }
                  ++v63;
                }
                while (v81 != v63);
              }
              __strcpy_chk();
            }
            if ((__int16)v84 >= 1)
            {
              uint64_t v66 = v84;
              long long v67 = v122;
              do
              {
                long long v67 = (_OWORD *)((char *)v67 + 8);
                __strcat_chk();
                __strcat_chk();
                --v66;
              }
              while (v66);
            }
            if ((__int16)(v84 + 1) < v49)
            {
              uint64_t v68 = (__int16)(v84 + 1);
              do
              {
                __strcat_chk();
                __strcat_chk();
                ++v68;
              }
              while ((unsigned __int16)v49 != (unsigned __int16)v68);
            }
            *(_DWORD *)unsigned int v100 = 0;
            if (*(__int16 *)(v95 + 40) >= 1)
            {
              uint64_t v69 = 0;
              int v70 = *(__int16 *)(v95 + 42);
              int v71 = *(__int16 *)(v95 + 56);
              while (1)
              {
                __s[0] = 0;
                __strcpy_chk();
                __strcat_chk();
                __strcat_chk();
                __int16 v72 = strlen(__s);
                if (SFadd(__s, v72, &v100[1], v100, v70, v71, (uint64_t)__src, (uint64_t)v98) == 8) {
                  break;
                }
                if (++v69 >= *v89) {
                  goto LABEL_135;
                }
              }
              *((_WORD *)&__src[75] + v69) = 0;
              __int16 v73 = v100[1];
              *(_WORD *)(v96 + 1686) = v100[1];
              *int v89 = v73;
            }
LABEL_135:
            memcpy(v90, __src, 0x4B0uLL);
            long long v74 = v98[9];
            long long v75 = v98[11];
            *(_OWORD *)(v91 + 160) = v98[10];
            *(_OWORD *)(v91 + 176) = v75;
            *(void *)(v91 + 192) = v99;
            long long v76 = v98[5];
            long long v77 = v98[7];
            *(_OWORD *)(v91 + 96) = v98[6];
            *(_OWORD *)(v91 + 112) = v77;
            *(_OWORD *)(v91 + 12_Block_object_dispose(&STACK[0x510], 8) = v98[8];
            *(_OWORD *)(v91 + 144) = v74;
            long long v78 = v98[1];
            long long v79 = v98[3];
            *(_OWORD *)(v91 + 32) = v98[2];
            *(_OWORD *)(v91 + 4_Block_object_dispose(&STACK[0x510], 8) = v79;
            *(_OWORD *)(v91 + 64) = v98[4];
            *(_OWORD *)(v91 + 80) = v76;
            *(_OWORD *)uint64_t v91 = v98[0];
            *(_OWORD *)(v91 + 16) = v78;
            uint64_t v2 = v96;
            *(_WORD *)uint64_t v95 = 104;
            if (!*(unsigned char *)(v96 + 8) || ((0x20008uLL >> (*(unsigned char *)(v96 + 8) - 1)) & 1) != 0) {
              *(_DWORD *)uint64_t v96 = 104;
            }
            unint64_t v23 = v94;
            __int16 v50 = v86;
            int v40 = v88;
            BOOL v51 = (unsigned __int16)v86 == 1;
          }
        }
        else
        {
          int v17 = v89;
        }
        if (v50) {
          goto LABEL_140;
        }
        __s[0] = 0;
        if (v49 >= 1)
        {
          uint64_t v80 = 0;
          do
          {
            __strcat_chk();
            __strcat_chk();
            ++v80;
          }
          while (v23 + 1 != v80);
        }
LABEL_96:
        __s[strlen(__s)] = 0;
        SFlstini(v17, v93, *(unsigned char **)(v95 + 48), *(_WORD **)(v95 + 64));
        cleanup(v49, v2, __dst, (void **)v122, 0);
        __int16 v56 = strlen(__s);
        SFadd(__s, v56, v17, v93, *(__int16 *)(v95 + 42), *(__int16 *)(v95 + 56), *(void *)(v95 + 48), *(void *)(v95 + 64));
        *(_WORD *)(v2 + 1686) = *(_WORD *)(v95 + 40);
        *(_WORD *)uint64_t v95 = 104;
        if (!*(unsigned char *)(v2 + 8) || ((1 << (*(unsigned char *)(v2 + 8) - 1)) & 0x20008) != 0)
        {
          *(_DWORD *)uint64_t v2 = 104;
LABEL_99:
          if (v49 >= 1)
          {
            uint64_t v57 = (unsigned __int16)v49;
            int v58 = (void **)v122;
            do
            {
              int v59 = *v58++;
              free(v59);
              --v57;
            }
            while (v57);
          }
          if (v51) {
            unsigned int v60 = v40;
          }
          else {
            unsigned int v60 = 21;
          }
          if (v49 <= 6) {
            return v60;
          }
          else {
            return 21;
          }
        }
LABEL_140:
        if (*(_DWORD *)v2 == 102) {
          *(_WORD *)uint64_t v95 = 102;
        }
        goto LABEL_99;
      }
      continue;
    }
    break;
  }
  uint64_t v45 = v35;
  uint64_t v46 = (unsigned __int8 *)v25;
  while (1)
  {
    unsigned int v47 = *v46++;
    int v48 = *(_DWORD *)(v7 + 4 * v47);
    if ((v48 & 0x40000000) != 0 && (v48 & 0x4064000) != 0) {
      break;
    }
    if (!--v45) {
      goto LABEL_60;
    }
  }
  int v43 = 11;
LABEL_67:
  uint64_t v2 = v96;
  if (*(_DWORD *)v96 == 102)
  {
    unsigned int v62 = (__int16)v94;
    goto LABEL_109;
  }
  unint64_t v23 = v94;
  if ((unsigned __int16)(v86 + 1) < 2u)
  {
    ++v86;
    int v40 = v43;
    __strcpy_chk();
    unsigned __int16 v84 = v94;
    uint64_t v5 = v95;
    goto LABEL_70;
  }
  cleanup((__int16)v94, v96, __dst, (void **)v122, 1);
  return 21;
}

void cleanup(unsigned int a1, uint64_t a2, __int16 *__src, void **a4, int a5)
{
  unsigned __int16 v9 = *(_WORD **)(*(void *)(a2 + 3184) + 264);
  if (__src[701] >= 1)
  {
    memcpy((void *)(a2 + 1690), __src, 0x4B0uLL);
    *(_OWORD *)(a2 + 2890) = *((_OWORD *)__src + 75);
    long long v11 = *((_OWORD *)__src + 76);
    long long v12 = *((_OWORD *)__src + 77);
    long long v13 = *((_OWORD *)__src + 79);
    *(_OWORD *)(a2 + 293_Block_object_dispose(&STACK[0x510], 8) = *((_OWORD *)__src + 78);
    *(_OWORD *)(a2 + 2954) = v13;
    *(_OWORD *)(a2 + 2906) = v11;
    *(_OWORD *)(a2 + 2922) = v12;
    long long v14 = *((_OWORD *)__src + 80);
    long long v15 = *((_OWORD *)__src + 81);
    long long v16 = *((_OWORD *)__src + 83);
    *(_OWORD *)(a2 + 3002) = *((_OWORD *)__src + 82);
    *(_OWORD *)(a2 + 301_Block_object_dispose(&STACK[0x510], 8) = v16;
    *(_OWORD *)(a2 + 2970) = v14;
    *(_OWORD *)(a2 + 2986) = v15;
    long long v17 = *((_OWORD *)__src + 84);
    long long v18 = *((_OWORD *)__src + 85);
    long long v19 = *((_OWORD *)__src + 86);
    *(void *)(a2 + 3082) = *((void *)__src + 174);
    *(_OWORD *)(a2 + 3050) = v18;
    *(_OWORD *)(a2 + 3066) = v19;
    *(_OWORD *)(a2 + 3034) = v17;
    __int16 v20 = __src[701];
    v9[20] = v20;
    v9[22] = __src[700];
    *(_WORD *)(a2 + 1686) = v20;
  }
  if (a5)
  {
    if (a1 <= 0x7FFE)
    {
      uint64_t v21 = (unsigned __int16)(a1 + 1);
      do
      {
        int v22 = *a4++;
        free(v22);
        --v21;
      }
      while (v21);
    }
    if (*(_DWORD *)a2 == 102) {
      *unsigned __int16 v9 = 102;
    }
  }
}

uint64_t icisint(int a1, char *__s, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v6 = strlen(__s);
  __strcpy_chk();
  BOOL v8 = ((1 << (a1 - 1)) & 0x11660) != 0 || a1 == 0;
  if (a1 != 11 && v8 && __s[v6 - 1] == 46) {
    v10[v6 - 1] = 0;
  }
  return SLisint(v10, a3);
}

BOOL icisupperletter(const char *a1, uint64_t a2)
{
  size_t v4 = strlen(a1);
  if (v4 == 2)
  {
    if (a1[1] != 46) {
      return 0;
    }
  }
  else if (v4 != 1)
  {
    return 0;
  }
  return (*(_DWORD *)(a2 + 4 * *(unsigned __int8 *)a1) & 0x40000000) != 0;
}

uint64_t ICdblchk(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 3184);
  buildfullword(__dst, a1, 0x41uLL);
  if (!*(unsigned char *)(a1 + 1417)
    && !*(unsigned char *)(*(void *)(v2 + 80) + 65)
    && !SLstrcmp((unsigned char *)(a1 + 1339), (unsigned __int8 *)__dst))
  {
    *(void *)(a1 + 1328) |= 0x8000uLL;
    unint64_t v3 = *(unsigned char **)(v2 + 72);
    if (v3 && icwrdlist(__dst, v3)) {
      *(void *)(a1 + 1328) &= ~0x8000uLL;
    }
    if (*(unsigned char *)(a1 + 8) == 6
      && *(unsigned __int8 *)(*(void *)(v2 + 80) + 130) != *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 3184)
                                                                                              + 264)
                                                                                  + 88))
    {
      *(void *)(a1 + 1328) &= ~0x8000uLL;
    }
  }
  size_t v4 = (char *)(*(void *)(v2 + 80) + 65);
  if (*(unsigned char *)(a1 + 1482))
  {
    strncpy(v4, (const char *)(a1 + 1482), 0x40uLL);
    size_t v4 = (char *)(*(void *)(v2 + 80) + 129);
  }
  *size_t v4 = 0;
  buildfullword((char *)(a1 + 1339), a1, 0x41uLL);
  uint64_t v5 = *(char **)(v2 + 80);
  size_t v6 = strlen((const char *)(a1 + 1339));
  if (v6 >= 0x40) {
    size_t v7 = 64;
  }
  else {
    size_t v7 = v6;
  }
  if (v7) {
    strncpy(v5, (const char *)(a1 + 1339), v7);
  }
  v5[v7] = 0;
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v9 = *(void *)(*(void *)(a1 + 3184) + 264);
  *(_WORD *)(v8 + 132) = *(_WORD *)(v9 + 18);
  *(unsigned char *)(v8 + 130) = *(unsigned char *)(v9 + 88);
  return 0;
}

size_t buildfullword(char *__dst, uint64_t a2, size_t __size)
{
  uint64_t v5 = __dst;
  uint64_t v6 = *(void *)(a2 + 3184);
  uint64_t v7 = *(void *)(*(void *)(v6 + 248) + 56);
  uint64_t v8 = *(void *)(*(void *)(v6 + 264) + 112);
  int v10 = *(unsigned __int8 *)(v8 + 34);
  uint64_t v9 = (const char *)(v8 + 34);
  if (v10) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a2 + 8) == 1 && *(unsigned char *)(a2 + 1614))
  {
    uint64_t v9 = (const char *)(a2 + 1614);
LABEL_2:
    strlcpy(__dst, v9, __size);
    size_t result = strlcat(v5, (const char *)(a2 + 1547), __size);
    goto LABEL_7;
  }
  size_t result = strlcpy(__dst, (const char *)(a2 + 1547), __size);
LABEL_7:
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a2 + 3184) + 264) + 112);
  int v14 = *(unsigned __int8 *)(v12 + 44);
  long long v13 = (const char *)(v12 + 44);
  if (!v14)
  {
    if (*(unsigned char *)(a2 + 8) != 1 || !*(unsigned char *)(a2 + 1624)) {
      goto LABEL_9;
    }
    long long v13 = (const char *)(a2 + 1624);
  }
  size_t result = strlcat(v5, v13, __size);
  do
  {
LABEL_9:
    uint64_t v15 = *v5;
    if ((*(_DWORD *)(v7 + 4 * v15) & 0x40000000) != 0) {
      LOBYTE(v15) = v15 + 32;
    }
    *v5++ = v15;
  }
  while ((_BYTE)v15);
  return result;
}

uint64_t icwrdlist(unsigned char *a1, unsigned char *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*a1)
  {
    while (1)
    {
      unsigned int v4 = *a2;
      if (!*a2) {
        break;
      }
      __int16 v5 = 0;
      while (v4 > 0x20 || ((1 << v4) & 0x100002401) == 0)
      {
        v8[v5] = v4;
        unsigned int v6 = *++a2;
        unsigned int v4 = v6;
        ++v5;
      }
      v8[v5] = 0;
      if (*a2) {
        ++a2;
      }
      if (!SLstrcmp(a1, v8)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t ICdblver(const char *a1, uint64_t a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(*(void *)(v4 + 248) + 56);
  uint64_t v106 = 0;
  memset(v105, 0, sizeof(v105));
  uint64_t v6 = *(void *)(v4 + 264);
  uint64_t v96 = (__int16 *)(v6 + 40);
  uint64_t v97 = v4;
  uint64_t v95 = (__int16 *)(v6 + 44);
  SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(unsigned char **)(v6 + 48), *(_WORD **)(v6 + 64));
  unsigned int v100 = (void *)(v6 + 92);
  uint64_t v93 = *(void *)(v6 + 92);
  char v92 = *(unsigned char *)(v6 + 88);
  __int16 v7 = strlen(a1);
  unint64_t v8 = 0;
  int v9 = 0;
  uint64_t v99 = (char *)(a2 + 3090);
  *(unsigned char *)(a2 + 3090) = 0;
  int v10 = v7;
  long long v103 = (uint64_t *)(v6 + 3480);
  unint64_t v94 = (uint64_t *)(a2 + 3156);
  do
  {
    unint64_t v11 = v8;
    uint64_t v12 = malloc_type_calloc(1uLL, 0xFCuLL, 0x1000040D823820EuLL);
    *((void *)v105 + v11) = v12;
    if (!v12) {
      return 8;
    }
    long long v13 = v12;
    *(_OWORD *)((char *)v12 + 236) = 0u;
    v12[13] = 0u;
    v12[14] = 0u;
    v12[11] = 0u;
    v12[12] = 0u;
    v12[9] = 0u;
    v12[10] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    v12[5] = 0u;
    v12[6] = 0u;
    v12[3] = 0u;
    v12[4] = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    int v14 = (__int16)v9;
    *uint64_t v12 = 0u;
    *((_DWORD *)v12 + 17) = 11;
    __int16 v15 = 0;
    if (v10 > (__int16)v9)
    {
      int v16 = *(unsigned __int8 *)(a2 + 1338);
      int v17 = (__int16)v9;
      while (1)
      {
        uint64_t v18 = a1[(__int16)v9];
        if (v18 == v16)
        {
          ++v9;
        }
        else
        {
          if ((v18 | 2) == 0x2F)
          {
            *((_WORD *)v12 + 125) = v18;
            goto LABEL_15;
          }
          if ((*(_DWORD *)(v5 + 4 * v18) & 0x40000000) != 0) {
            LOBYTE(v1_Block_object_dispose(&STACK[0x510], 8) = v18 + 32;
          }
          __s[v15++] = v18;
        }
        int v17 = (__int16)++v9;
        if (v10 <= (__int16)v9) {
          goto LABEL_15;
        }
      }
    }
    int v17 = (__int16)v9;
LABEL_15:
    unint64_t v104 = v11;
    __s[v15] = 0;
    char v19 = SLcap((uint64_t)a1, v14, (__int16)v9, v100, v5);
    *(unsigned char *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = v19;
    *((unsigned char *)v13 + 213) = v19;
    *((_DWORD *)v13 + 54) = *(_DWORD *)(v6 + 92);
    *((_DWORD *)v13 + 55) = *(_DWORD *)(v6 + 96);
    *(_WORD *)(v6 + 42) = 100;
    if (!__s[0] && v11 && **((unsigned char **)v105 + (v11 - 1))) {
      int v20 = 10;
    }
    else {
      int v20 = 11;
    }
    if (v15 != 1)
    {
      if (v15 != 2 || __s[1] != 46) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x60000040) != 0)
    {
      *(_WORD *)(v6 + 102) = 1;
      **(unsigned char **)(v6 + 72) = v19;
      uint64_t v21 = *(_DWORD **)(v6 + 80);
      *uint64_t v21 = *(_DWORD *)(v6 + 92);
      v21[1] = *(_DWORD *)(v6 + 96);
      if (*(unsigned char *)(a2 + 8) == 16)
      {
        unsigned int v22 = __s[0] - 97;
        if (v22 > 0x19) {
          goto LABEL_122;
        }
        int v23 = 1 << v22;
        if ((v23 & 0x379864E) == 0)
        {
          if ((v23 & 0x8639B1) != 0)
          {
            char v24 = 1;
LABEL_24:
            **(unsigned char **)(v6 + 3496) |= v24;
            goto LABEL_25;
          }
LABEL_122:
          char v24 = 2;
          goto LABEL_24;
        }
      }
LABEL_25:
      int v20 = 10;
    }
    if (v10 != v17 || !*(unsigned char *)(a2 + 1412)) {
      goto LABEL_32;
    }
LABEL_31:
    if ((*(_DWORD *)v100 & 0x80000000) != 0)
    {
      **(unsigned char **)(v6 + 72) = 0;
      *(_WORD *)(v6 + 102) = 1;
      **(void **)(v6 + 80) = 0;
      *(_WORD *)(v6 + 18) |= 0x800u;
LABEL_44:
      int v25 = 10;
      goto LABEL_45;
    }
LABEL_32:
    if (v20 != 11) {
      goto LABEL_44;
    }
    if (*(unsigned char *)(a2 + 8) == 3) {
      period_to_puntvolat(a2, __s);
    }
    int v25 = ICverify(__s, v15, a2);
    if (v25 == 11)
    {
      if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x8000000) != 0)
      {
        uint64_t v26 = (v15 - 1);
        if (v15 >= 1 && __s[v26] == 46)
        {
          __s[v26] = 0;
          int v27 = 1;
        }
        else
        {
          int v27 = 0;
        }
        if (SLisint(__s, v5))
        {
          *(_WORD *)(v6 + 102) = 1;
          **(unsigned char **)(v6 + 72) = 0;
          **(void **)(v6 + 80) = 0;
          if (*(unsigned char *)(a2 + 8) == 16)
          {
            if ((*(_DWORD *)(v5 + 4 * __s[2]) & 0x8000000) != 0)
            {
              char v50 = 2;
LABEL_106:
              **(unsigned char **)(v6 + 3496) |= v50;
            }
            else if (__s[0] == 56 || !SLstrncmp(__s, "11", 2) || !SLstrncmp(__s, "18", 2))
            {
              char v50 = 1;
              goto LABEL_106;
            }
          }
          if (!v27) {
            goto LABEL_44;
          }
          int v51 = *(unsigned __int8 *)(a2 + 8);
          BOOL v52 = ((1 << (v51 - 1)) & 0x1260) != 0 || v51 == 0;
          int v53 = !v52;
          if (!v52) {
            *(_WORD *)(v6 + 102) = 0;
          }
          if (v15 >= 1)
          {
            __s[v15 - 1] = 46;
            __s[v15] = 0;
          }
          if (!v53) {
            goto LABEL_44;
          }
        }
      }
      if (*(unsigned char *)(a2 + 8) == 6) {
        int v25 = ICcmpspc(__s, v15, a2);
      }
      else {
        int v25 = 11;
      }
    }
LABEL_45:
    if (!*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x11660) != 0)
    {
      __int16 v28 = **(_WORD **)(v6 + 3520);
      if ((v28 & 0x200) != 0)
      {
        *(_WORD *)(a2 + 1322) |= 4u;
      }
      else if ((v28 & 0x40) != 0)
      {
        __int16 v29 = *(_WORD *)(a2 + 1612);
        *(_WORD *)(a2 + 1322) |= 2u;
        if (v25 != 11 && !*(_DWORD *)(a2 + 1308))
        {
          __strcpy_chk();
          __strcpy_chk();
          *(_WORD *)(a2 + 1612) = strlen(__s);
          ICcmpmnd(a2);
          __strcpy_chk();
          *(_WORD *)(a2 + 1612) = v29;
        }
      }
    }
    if ((*(unsigned char *)(a2 + 1328) & 0x10) != 0
      || (*(_WORD *)(v6 + 18) & 1) != 0
      || (*(_WORD *)(v6 + 18) & 0x4000) != 0
      && v104
      && SLisint(*((unsigned char **)v105 + (v104 - 1)), v5)
      || v25 == 11)
    {
      *(unsigned char *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = v92;
      *(void *)(v6 + 92) = v93;
      if ((v104 & 0x8000) == 0)
      {
        uint64_t v54 = 0;
        do
        {
          int v55 = (void *)*((void *)v105 + v54);
          if (v55) {
            free(v55);
          }
          ++v54;
        }
        while (v104 + 1 != v54);
      }
      return 11;
    }
    if (*v99)
    {
      __strcpy_chk();
      *((_DWORD *)v13 + 35) = *(_DWORD *)(a2 + 3156);
      *((_DWORD *)v13 + 36) = *(_DWORD *)(a2 + 3160);
      *(unsigned char *)(a2 + 3090) = 0;
      *unint64_t v94 = 0;
    }
    uint64_t v30 = 1 << (*(unsigned char *)(a2 + 8) - 1);
    if (!*(unsigned char *)(a2 + 8)) {
      LODWORD(v30) = -1;
    }
    int v31 = *(_DWORD *)(a2 + 1308);
    if ((v30 & 0x31668) != 0)
    {
      if ((v30 & 0x20008) != 0 && v31)
      {
        *(_DWORD *)a2 = 7;
        if (IChu(a2, __s) == 8) {
          *(_DWORD *)(a2 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
        }
        *(_DWORD *)a2 = 3;
      }
      *((_DWORD *)v13 + 60) = *(_DWORD *)v103;
      __int16 v32 = (_DWORD *)(v6 + 3484);
    }
    else
    {
      if (!v31) {
        goto LABEL_73;
      }
      __int16 v33 = *(__int16 **)(v97 + 216);
      *__int16 v33 = 1;
      IHhyp(__s, v33);
      uint64_t v34 = *(void *)(v97 + 216);
      *((_DWORD *)v13 + 60) = *(_DWORD *)(v34 + 8);
      __int16 v32 = (_DWORD *)(v34 + 12);
    }
    *((_DWORD *)v13 + 61) = *v32;
LABEL_73:
    *long long v103 = 0;
    __strcpy_chk();
    if (v25 == 2) {
      strncpy(__s, *(const char **)(v6 + 48), 0x41uLL);
    }
    int v35 = *(__int16 *)(v6 + 102);
    if (v35 >= 1)
    {
      uint64_t v36 = 0;
      do
      {
        uint64_t v37 = *(void *)(v6 + 72);
        if (*(unsigned char *)(v37 + v36) == 4)
        {
          *(unsigned char *)(v37 + v36) = 0;
          LOWORD(v35) = *(_WORD *)(v6 + 102);
        }
        ++v36;
      }
      while (v36 < (__int16)v35);
    }
    int v38 = ICcapcod(__s, a2);
    __int16 v39 = *(const char **)(v6 + 48);
    if (*v39) {
      strncpy((char *)v13 + 148, v39, 0x41uLL);
    }
    if (v38 == 10)
    {
      char v40 = *((unsigned char *)v13 + 213);
      *(void *)((char *)v13 + 22_Block_object_dispose(&STACK[0x510], 8) = *((void *)v13 + 27);
    }
    else
    {
      char v40 = SLcap((uint64_t)v13 + 148, 0, v15, (_OWORD *)((char *)v13 + 228), v5);
    }
    *((unsigned char *)v13 + 226) = v40;
    if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x8000000) != 0) {
      char v41 = 5;
    }
    else {
      char v41 = v40;
    }
    *((unsigned char *)v13 + 226) = v41;
    if (v38 < v25) {
      int v25 = v38;
    }
    *((_WORD *)v13 + 124) = v15;
    LODWORD(v42) = *(__int16 *)(v6 + 102);
    *((_WORD *)v13 + 112) = *(_WORD *)(v6 + 102);
    if ((int)v42 >= 1)
    {
      uint64_t v42 = (unsigned __int16)v42;
      int v43 = *(unsigned __int16 **)(v6 + 3520);
      int v44 = *(unsigned __int8 **)(v6 + 3496);
      int v45 = *((unsigned __int16 *)v13 + 118);
      int v46 = *((unsigned __int8 *)v13 + 238);
      do
      {
        int v47 = *v43++;
        v45 |= v47;
        *((_WORD *)v13 + 11_Block_object_dispose(&STACK[0x510], 8) = v45;
        int v48 = *v44++;
        v46 |= v48;
        *((unsigned char *)v13 + 23_Block_object_dispose(&STACK[0x510], 8) = v46;
        --v42;
      }
      while (v42);
    }
    *((_DWORD *)v13 + 17) = v25;
    SFlstini(v96, v95, *(unsigned char **)(v6 + 48), *(_WORD **)(v6 + 64));
    *(unsigned char *)(*(void *)(v97 + 80) + 65) = 0;
    __strcpy_chk();
    *(_WORD *)(*(void *)(v97 + 80) + 132) = *((_WORD *)v13 + 118);
    unint64_t v49 = v104;
    unint64_t v8 = v104 + 1;
    if (v25 == 11) {
      break;
    }
    if (v10 < (__int16)(v9 + 2)) {
      break;
    }
    ++v9;
  }
  while (v104 < 6);
  LODWORD(v_Block_object_dispose(&STACK[0x510], 8) = (__int16)v8;
  if ((__int16)v8 >= 7)
  {
    for (uint64_t i = 0; i != 40; i += 8)
    {
      uint64_t v57 = *(void **)((char *)v105 + i);
      if (v57) {
        free(v57);
      }
    }
    return 11;
  }
  *(_WORD *)(a2 + 1322) |= 0x100u;
  uint64_t v59 = *(void *)&v105[0];
  **(unsigned char **)(v6 + 3496) = *(unsigned char *)(*(void *)&v105[0] + 238);
  **(unsigned char **)(v6 + 72) = *(unsigned char *)(v59 + 226);
  unsigned int v60 = *(_DWORD **)(v6 + 80);
  *unsigned int v60 = *(_DWORD *)(v59 + 228);
  uint64_t v102 = (uint64_t)v60;
  v60[1] = *(_DWORD *)(v59 + 232);
  if (*(_DWORD *)(a2 + 1308) || !*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x11668) != 0)
  {
    *(_DWORD *)long long v103 = *(_DWORD *)(v59 + 240);
    *(_DWORD *)(v6 + 3484) = *(_DWORD *)(v59 + 244);
    uint64_t v101 = v6 + 3480;
  }
  else
  {
    uint64_t v101 = 0;
    *long long v103 = 0;
  }
  if ((*(_WORD *)(a2 + 1322) & 0x46) != 0)
  {
    *(_DWORD *)(a2 + 3156) = *(_DWORD *)(v59 + 140);
    *(_DWORD *)(a2 + 3160) = *(_DWORD *)(v59 + 144);
    uint64_t v98 = a2 + 3156;
  }
  else
  {
    uint64_t v98 = 0;
  }
  uint64_t v58 = *(unsigned int *)(v59 + 68);
  if ((int)v8 >= 2)
  {
    uint64_t v61 = 0;
    int v62 = 0;
    __int16 v63 = *(_WORD *)(v59 + 248);
    do
    {
      uint64_t v64 = (unsigned __int8 *)*((void *)v105 + v61 + 1);
      int v65 = *((_DWORD *)v64 + 17);
      if (v65 >= (int)v58) {
        uint64_t v58 = v58;
      }
      else {
        uint64_t v58 = v65;
      }
      *(uint32x2_t *)(v64 + 22_Block_object_dispose(&STACK[0x510], 8) = vshr_n_u32(*(uint32x2_t *)(v64 + 228), 1uLL);
      **(unsigned char **)(v6 + 72) = ICcomcap(**(unsigned __int8 **)(v6 + 72), *(uint64_t **)(v6 + 80), v63, v64[226], (uint64_t *)(v64 + 228), v102, 0);
      *(_WORD *)(v6 + 102) = 1;
      if (*(_DWORD *)(a2 + 1308) || !*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x11668) != 0)
      {
        uint64_t v66 = (uint64_t *)(v64 + 240);
        uint32x2_t v67 = vshr_n_u32(*(uint32x2_t *)(v64 + 240), 1uLL);
        *((uint32x2_t *)v64 + 30) = v67;
        if (*(_DWORD *)(a2 + 1308))
        {
          uint64_t v68 = *(unsigned __int8 *)(*(__int16 *)(*((void *)v105 + v61) + 248) + *((void *)v105 + v61) - 1);
          if (v68 != 46
            && ((*(_DWORD *)(v5 + 4 * v68) & 0x8000000) == 0 || (*(_DWORD *)(v5 + 4 * *v64) & 0x8000000) == 0))
          {
            *(_DWORD *)uint64_t v66 = v67.i32[0] | 0x80000000;
          }
        }
        ICcomcap(3u, v103, v63, 3u, v66, v101, 0);
      }
      __int16 v69 = *(_WORD *)(a2 + 1322);
      if ((v69 & 0x46) != 0)
      {
        *(uint32x2_t *)(v64 + 140) = vshr_n_u32(*(uint32x2_t *)(v64 + 140), 1uLL);
        if ((v69 & 6) != 0)
        {
          uint64_t v70 = *((void *)v105 + v61);
          if (*(unsigned char *)(v70 + 72)) {
            int v71 = strlen((const char *)(v70 + 72));
          }
          else {
            int v71 = *(unsigned __int16 *)(v70 + 248);
          }
          v62 += v71;
          ICcomcap(3u, v94, (__int16)v62, 3u, (uint64_t *)(v64 + 140), v98, 0);
        }
        unint64_t v49 = v104;
      }
      v63 += *((_WORD *)v64 + 124) + 1;
      ++v61;
    }
    while (v49 != v61);
  }
  uint64_t v72 = *(void *)(v6 + 112);
  int v74 = *(unsigned __int8 *)(v72 + 34);
  __int16 v73 = (const char *)(v72 + 34);
  if (v74) {
    *long long v103 = (uint64_t)vshl_u32(*(uint32x2_t *)v103, (uint32x2_t)vneg_s32(vdup_n_s32((__int16)strlen(v73))));
  }
  unsigned int v75 = (unsigned __int16)v49;
  v108[0] = 0;
  if (v58 == 2)
  {
    if ((unsigned __int16)v49 <= 0x7FFEu)
    {
      unint64_t v76 = 0;
      do
      {
        long long v77 = (const char *)*((void *)v105 + v76);
        if (v77[148] && (size_t v78 = strlen(v108), strlen(v77 + 148) + v78 < 0x41)
          || (size_t v79 = strlen(v108), strlen(v77) + v79 <= 0x40))
        {
          __strcat_chk();
        }
        if (v76 < (unsigned __int16)v104)
        {
          size_t v80 = strlen(v108);
          if (strlen(v77 + 250) + v80 <= 0x40) {
            __strcat_chk();
          }
        }
        ++v76;
      }
      while (v104 + 1 != v76);
    }
    __int16 v81 = strlen(v108);
    SFadd(v108, v81, v96, v95, *(__int16 *)(v6 + 42), *(__int16 *)(v6 + 56), *(void *)(v6 + 48), *(void *)(v6 + 64));
  }
  uint64_t v82 = (const char *)(a2 + 3090);
  if ((*(_WORD *)(a2 + 1322) & 0x46) != 0 && v75 <= 0x7FFE)
  {
    unint64_t v83 = 0;
    do
    {
      unsigned __int16 v84 = (const char *)*((void *)v105 + v83);
      if (v84[72] && (v85 = strlen(v82), v86 = strlen(v84 + 72) + v85, uint64_t v82 = v99, v86 < 0x41)
        || (size_t v87 = strlen(v82), strlen(v84) + v87 <= 0x40))
      {
        __strcat_chk();
      }
      if (v83 < (unsigned __int16)v104)
      {
        size_t v88 = strlen(v82);
        if (strlen(v84 + 250) + v88 <= 0x40) {
          __strcat_chk();
        }
      }
      ++v83;
    }
    while (v104 + 1 != v83);
  }
  *(unsigned char *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = v92;
  *(void *)(v6 + 92) = v93;
  if (v75 <= 0x7FFE)
  {
    uint64_t v89 = 0;
    do
    {
      int v90 = (void *)*((void *)v105 + v89);
      if (v90) {
        free(v90);
      }
      ++v89;
    }
    while (v104 + 1 != v89);
  }
  return v58;
}

uint64_t ICfndchk(uint64_t a1)
{
  v75[1] = *MEMORY[0x263EF8340];
  v75[0] = 0;
  uint64_t v2 = *(__int16 **)(a1 + 3184);
  uint64_t v3 = *((void *)v2 + 33);
  uint64_t v4 = *((void *)v2 + 31);
  if (*(__int16 *)(v3 + 102) < 2)
  {
LABEL_5:
    LOWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while (*(unsigned __int8 *)(*(void *)(v3 + 72) + v5) != *(unsigned __int8 *)(v3 + 88))
    {
      if (*(unsigned __int16 *)(v3 + 102) == ++v5) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *((void *)v2 + 35);
  int v8 = **(unsigned __int16 **)(v3 + 112);
  int v9 = *(unsigned __int16 *)(v4 + 88);
  int v10 = *(unsigned __int8 *)(a1 + 8);
  if (v10 == 15)
  {
    unsigned int v12 = ICgreek(a1, 1);
    goto LABEL_19;
  }
  if (v10 == 16 && *(unsigned char *)(a1 + 1339) == 97)
  {
    if (*(unsigned char *)(a1 + 1340) == 110)
    {
      if (*(unsigned char *)(a1 + 1341) || *(unsigned char *)(*(void *)(v3 + 3496) + (unsigned __int16)v5)) {
        goto LABEL_18;
      }
      *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = 0x10000000;
      __int16 v11 = 30;
    }
    else
    {
      if (*(unsigned char *)(a1 + 1340) || (*(unsigned char *)(*(void *)(v3 + 3496) + (unsigned __int16)v5) & 1) == 0) {
        goto LABEL_18;
      }
      *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = 0x10000000;
      __int16 v11 = 29;
    }
    *(_WORD *)(a1 + 1404) = v11;
  }
LABEL_18:
  unsigned int v12 = 10;
LABEL_19:
  if (!*(_DWORD *)(a1 + 1308)) {
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 8)
    && ((1 << (*(unsigned char *)(a1 + 8) - 1)) & 0x11660) == 0
    && (*(_WORD *)(v3 + 18) & 0xC00) == 0
    && ((*(_WORD *)(a1 + 1322) & 0x20) == 0 || !*(_DWORD *)(v3 + 3480) && !*(_DWORD *)(v3 + 3484)))
  {
    int v71 = v8;
    uint64_t v72 = v7;
    v73[0] = 0;
    __strcpy_chk();
    uint64_t v26 = *(void *)(v3 + 112);
    __int16 v70 = strlen((const char *)(v26 + 34));
    if ((*v2 & 4) != 0)
    {
      __int16 v27 = strlen((const char *)(v26 + 44));
      __s[strlen(__s) - v27] = 0;
    }
    int v28 = strlen(__s);
    __strcpy_chk();
    if (*(unsigned char *)(a1 + 8) == 3)
    {
      if (*(_DWORD *)(v3 + 3472) && *(_DWORD *)(v3 + 3480))
      {
        int v29 = (__int16)v28;
        if (v28 << 16 <= 0x20000)
        {
          __int16 v32 = 0;
          int v30 = 1;
        }
        else
        {
          int v30 = 1;
          __int16 v31 = 1;
          while (((*(_DWORD *)(v3 + 3480 + 4 * ((unsigned __int16)v31 >> 5)) >> ~(_BYTE)v30) & 1) == 0
               || __s[v31] != 108
               || __s[v30 + 1] != 108)
          {
            int v30 = ++v31;
            if ((__int16)v28 - 1 <= v31)
            {
              __int16 v32 = 0;
              goto LABEL_177;
            }
          }
          __int16 v32 = v31 + v70;
        }
LABEL_177:
        __strncat_chk();
        if (!v32)
        {
          char v53 = 0;
          goto LABEL_157;
        }
        if (v29 == v30)
        {
          char v53 = 1;
          goto LABEL_157;
        }
        *(_WORD *)&v73[v32 + 1] = 183;
        char v53 = 1;
      }
      else
      {
        char v53 = 0;
      }
    }
    else
    {
      char v53 = 0;
    }
    __strcat_chk();
LABEL_157:
    __strcat_chk();
    if ((*(_WORD *)(a1 + 1322) & 0x100) == 0)
    {
      if (!*(unsigned char *)(a1 + 8) || ((1 << (*(unsigned char *)(a1 + 8) - 1)) & 0x20008) != 0)
      {
        *(_DWORD *)a1 = 7;
        int v55 = IChu(a1, v73);
        *(_DWORD *)a1 = 3;
        if (v55 == 8) {
          *(_DWORD *)(a1 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
        }
      }
      else
      {
        **((_WORD **)v2 + 27) = 1;
        period_to_puntvolat(a1, v73);
        IHhyp(v73, *((__int16 **)v2 + 27));
        uint64_t v54 = *((void *)v2 + 27);
        *(_DWORD *)(v3 + 3480) = *(_DWORD *)(v54 + 8);
        *(_DWORD *)(v3 + 3484) = *(_DWORD *)(v54 + 12);
      }
    }
    int v56 = *(unsigned __int8 *)(a1 + 8);
    if (v56 == 3) {
      char v57 = v53;
    }
    else {
      char v57 = 1;
    }
    if ((v57 & 1) == 0)
    {
      period_to_puntvolat(a1, (char *)(a1 + 1547));
      period_to_puntvolat(a1, v73);
      int v58 = strlen(v73);
      if (v58 << 16 > 0x10000)
      {
        uint64_t v59 = v3 + 3480;
        char v60 = 1;
        __int16 v61 = 1;
        while (1)
        {
          __int16 v62 = v61;
          if (v73[v61] == 183)
          {
            uint64_t v63 = (unsigned __int16)(v61 - 1) >> 5;
            int v64 = *(_DWORD *)(v59 + 4 * ((unsigned __int16)(v62 - 1) >> 5));
            int v65 = 1 << -v60;
            if ((v64 & v65) != 0) {
              break;
            }
          }
          __int16 v61 = v62 + 1;
          char v60 = v62 + 1;
          if ((__int16)v58 <= (__int16)(v62 + 1)) {
            goto LABEL_181;
          }
        }
        *(_DWORD *)(v59 + 4 * v63) = v64 & ~v65;
        v75[0] = 0;
        *((_DWORD *)v75 + v63) |= v65;
        uint64_t v67 = *((void *)v2 + 27);
        *(void *)(v67 + 16) = v75[0];
        *(unsigned char *)(v67 + 747) = 1;
        __strncpy_chk();
        __strcat_chk();
      }
LABEL_181:
      int v56 = *(unsigned __int8 *)(a1 + 8);
    }
    if (!v56
      || v56 == 14
      || ((1 << (v56 - 1)) & 0x20008) != 0
      || !*(unsigned char *)(*((void *)v2 + 27) + 747))
    {
      uint64_t v7 = v72;
      int v8 = v71;
      if ((*(_WORD *)(v3 + 18) & 0x40) != 0) {
        *(_WORD *)(a1 + 1322) |= 2u;
      }
    }
    else
    {
      if ((*(_WORD *)(v3 + 18) & 0x40) != 0) {
        __int16 v68 = 2;
      }
      else {
        __int16 v68 = 4;
      }
      *(_WORD *)(a1 + 1322) |= v68 | 0x40;
      __strcpy_chk();
      uint64_t v69 = *((void *)v2 + 27);
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v69 + 16);
      *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v69 + 20);
      uint64_t v7 = v72;
      int v8 = v71;
    }
  }
  int v13 = *(_DWORD *)(v3 + 3472);
  if (v13 && (*(_WORD *)(a1 + 1322) & 0x10) == 0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      unsigned int v14 = 1;
      while (1)
      {
        uint64_t v15 = v14 >> 5;
        int v16 = 1 << ~(_BYTE)v14;
        if ((*(_DWORD *)(v3 + 3472 + 4 * v15) & v16) != 0
          && (*(_DWORD *)(v3 + 3480 + 4 * v15) & v16) == 0)
        {
          break;
        }
        if (v14++ >= 0x3F) {
          goto LABEL_33;
        }
      }
    }
    *(void *)(a1 + 1328) |= 8uLL;
  }
LABEL_33:
  int v18 = *(unsigned __int8 *)(a1 + 8);
  if (v18 != 3
    || (puntvolat_to_dot(a1, (char *)(a1 + 1547)),
        puntvolat_to_dot(a1, (char *)(a1 + 1690)),
        int v18 = *(unsigned __int8 *)(a1 + 8),
        v18 != 3))
  {
    if ((*(_WORD *)(a1 + 1322) & 0x12) == 2 && *(_DWORD *)(v3 + 3472) != *(_DWORD *)(v3 + 3480)) {
      *(void *)(a1 + 1328) |= 8uLL;
    }
    if (v18 == 16) {
      goto LABEL_120;
    }
  }
  if ((*(_WORD *)(*(void *)(v3 + 112) + 62) & 0x80) != 0 && (*(_WORD *)(v3 + 3492) & 0x100) != 0) {
    *(void *)(a1 + 1328) |= 0x80uLL;
  }
  if (*(_WORD *)(v3 + 18))
  {
    __int16 v19 = *v2;
    if ((*v2 & 8) == 0 && (*(_WORD *)(v3 + 3492) & 0x180) == 0)
    {
      *(void *)(a1 + 1328) |= 0x10uLL;
      *uint64_t v2 = v19 | 2;
      if ((v19 & 4) != 0) {
        unsigned int v12 = 2;
      }
      else {
        unsigned int v12 = 3;
      }
    }
  }
  if (*(unsigned char *)(a1 + 1414))
  {
    if (!v9)
    {
      *(void *)(a1 + 1328) |= 0x80uLL;
      if (*(unsigned char *)(a1 + 1413)) {
        goto LABEL_99;
      }
      unsigned int v12 = 3;
      goto LABEL_108;
    }
    __int16 v20 = *v2;
    if ((*v2 & 8) == 0)
    {
      uint64_t v21 = *(_WORD **)(v3 + 3520);
      if ((*v21 & 0xA) == 0 && (*(__int16 *)(v3 + 102) < 1 || (v21[1] & 0xA) == 0))
      {
        uint64_t v33 = *(void *)(a1 + 1328) | 0x80;
        *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v33;
        int v22 = *(unsigned __int8 *)(v3 + 88);
        unsigned int v12 = 3;
LABEL_89:
        if (v22 == 2)
        {
          *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v33 & 0xFFFFFFFFFFFFFF7FLL;
          unsigned int v12 = 10;
        }
        goto LABEL_91;
      }
    }
    int v22 = *(unsigned __int8 *)(v3 + 88);
    if (v22 == 3)
    {
      if (**(unsigned char **)(v3 + 72) != 3)
      {
LABEL_56:
        *(void *)(a1 + 1328) |= 0x400uLL;
        if ((v20 & 4) != 0) {
          return 2;
        }
        int v23 = (char *)(a1 + 1547);
        __int16 v24 = strlen(v23);
        SFadd(v23, v24, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(void *)(v3 + 48), *(void *)(v3 + 64));
LABEL_58:
        *v2 |= 4u;
        return 2;
      }
    }
    else if (v22 == 1 && (v18 != 6 || (*(unsigned char *)(a1 + 20) & 0x20) != 0))
    {
      goto LABEL_56;
    }
    uint64_t v33 = *(void *)(a1 + 1328);
    if ((v33 & 0x80) == 0)
    {
      v33 &= ~0x10uLL;
      *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v33;
      if (v18 != 6 || !*(_DWORD *)(a1 + 1672) || (*(unsigned char *)(a1 + 20) & 0x20) != 0)
      {
        uint64_t v34 = *(unsigned char **)(v3 + 72);
        if (*v34 == 1)
        {
          *uint64_t v34 = 0;
          **(_DWORD **)(v3 + 80) = 0;
        }
        return ICcapcod((char *)(a1 + 1547), a1);
      }
    }
    goto LABEL_89;
  }
LABEL_91:
  if (*(unsigned char *)(a1 + 1413))
  {
    if (v9)
    {
      __int16 v35 = *v2;
      if ((*v2 & 8) != 0 && !v8)
      {
        uint64_t v36 = *(void *)(a1 + 1328);
        if ((v35 & 4) != 0 && (v36 & 0x200) != 0 && *(__int16 *)(v7 + 1502) >= 1)
        {
          v36 |= 0x40uLL;
          *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v36;
        }
        else if ((v36 & 0x40) != 0 && (v35 & 4) == 0)
        {
          unsigned int v12 = 3;
        }
        goto LABEL_106;
      }
    }
LABEL_99:
    uint64_t v36 = *(void *)(a1 + 1328);
    if (v8 || v18 == 2)
    {
      v36 |= 0x40uLL;
      *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v36;
      int v37 = 3;
    }
    else
    {
      int v37 = 10;
    }
    if ((*v2 & 4) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v37;
    }
LABEL_106:
    if ((v36 & 0x40) == 0) {
      *(void *)(a1 + 132_Block_object_dispose(&STACK[0x510], 8) = v36 & 0xFFFFFFFFFFFFFFEFLL;
    }
  }
LABEL_108:
  if (v18 != 6)
  {
LABEL_113:
    if (v18 == 11 && *(unsigned char *)(a1 + 1547) == 105 && *(unsigned char *)(a1 + 1548) == 106)
    {
      unsigned int v38 = *(unsigned __int8 *)(v3 + 88);
      if (v38 == 2
        || (__int16 v39 = *(unsigned char **)(v3 + 72), v38 == *v39)
        || (char v40 = *(unsigned int **)(v3 + 80), v41 = *v40 | 0xC0000000, *char v40 = v41, *(_DWORD *)(v3 + 92) == v41))
      {
        SLrecap((unsigned __int8 *)(a1 + 1547), *(__int16 *)(a1 + 1612), v38, v3 + 92, v38, v6);
        return 10;
      }
      if (v38 == 1) {
        *__int16 v39 = 3;
      }
      __int16 v66 = strlen((const char *)(a1 + 1547));
      SFadd((char *)(a1 + 1547), v66, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(void *)(v3 + 48), *(void *)(v3 + 64));
      SLrecap((unsigned __int8 *)(a1 + 1690), *(__int16 *)(a1 + 1612), **(unsigned __int8 **)(v3 + 72), *(void *)(v3 + 80), **(unsigned __int8 **)(v3 + 72), v6);
      *(void *)(a1 + 1328) |= 0x400uLL;
      goto LABEL_58;
    }
    goto LABEL_120;
  }
  if (*(_DWORD *)(a1 + 1672) && (*(_WORD *)(v7 + 1742) & 0x200) != 0 && *(unsigned char *)(v7 + 1592) == 1)
  {
    *(_DWORD *)(*(void *)(v3 + 80) + (((unint64_t)*(unsigned __int16 *)(v7 + 1502) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v7 + 1502);
    **(unsigned char **)(v3 + 72) = 3;
    *(_WORD *)(v3 + 102) = 1;
    int v18 = *(unsigned __int8 *)(a1 + 8);
    goto LABEL_113;
  }
LABEL_120:
  uint64_t v42 = *(void *)(v3 + 112);
  if ((*(unsigned char *)(v42 + 34) || *(unsigned char *)(v42 + 44)) && (*(unsigned char *)(a1 + 1328) & 0x10) == 0)
  {
    unsigned int v43 = ICcltcap(a1);
  }
  else
  {
    if ((*v2 & 4) != 0) {
      int v44 = (char *)(a1 + 1690);
    }
    else {
      int v44 = (char *)(a1 + 1547);
    }
    unsigned int v43 = ICcapcod(v44, a1);
  }
  unsigned int v45 = v43;
  if (*(unsigned char *)(a1 + 8) == 5 && (v12 & 0xFFFFFFF7) == 2 && (**(unsigned char **)(v3 + 3496) & 0x30) != 0)
  {
    if (*(_WORD *)(v3 + 40))
    {
      unsigned int v12 = ligature(a1 + 1690, a1, v12);
      if ((int)(strlen((const char *)(a1 + 1690)) << 16) >= 1)
      {
        __int16 v46 = 0;
        do
        {
          uint64_t v47 = a1 + v46;
          uint64_t v48 = *(unsigned __int8 *)(v47 + 1690);
          if ((*(_DWORD *)(v6 + 4 * v48) & 0x40000000) != 0) {
            LOBYTE(v4_Block_object_dispose(&STACK[0x510], 8) = v48 + 32;
          }
          *(unsigned char *)(v47 + 1690) = v48;
          ++v46;
        }
        while ((__int16)strlen((const char *)(a1 + 1690)) > v46);
      }
      if (*(unsigned char *)(*(void *)(v3 + 112) + 34)) {
        ICcltcap(a1);
      }
      else {
        ICcapcod((char *)(a1 + 1690), a1);
      }
    }
    else
    {
      unsigned int v12 = ligature(a1 + 1547, a1, v12);
      if (v12 == 2)
      {
        if (*(__int16 *)(a1 + 1612) >= 1)
        {
          uint64_t v49 = 0;
          uint64_t v50 = a1 + 1547;
          do
          {
            uint64_t v51 = *(unsigned __int8 *)(v50 + v49);
            if ((*(_DWORD *)(v6 + 4 * v51) & 0x40000000) != 0) {
              LOBYTE(v51) = v51 + 32;
            }
            *(unsigned char *)(v50 + v49++) = v51;
          }
          while (v49 < *(__int16 *)(a1 + 1612));
        }
        ICcapcod((char *)(a1 + 1547), a1);
        __int16 v52 = strlen((const char *)(a1 + 1547));
        SFadd((char *)(a1 + 1547), v52, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(void *)(v3 + 48), *(void *)(v3 + 64));
        unsigned int v12 = 2;
      }
    }
  }
  if (v45 == 10) {
    return v12;
  }
  else {
    return v45;
  }
}

size_t puntvolat_to_dot(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  if ((int)(result << 16) > 0x10000)
  {
    int v5 = 1;
    __int16 v6 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 24) == 64 && __s[v5 - 1] == 108 && __s[v5 + 1] == 108 && __s[v6] == 183) {
        __s[v6] = 46;
      }
      int v5 = ++v6;
      size_t result = strlen(__s);
    }
    while (v6 < (__int16)result);
  }
  return result;
}

uint64_t ligature(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  v42[1] = *(uint32x2_t *)MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 3184);
  uint64_t v7 = *(void *)(v6 + 264);
  uint64_t v8 = *(unsigned __int16 *)(a2 + 1612);
  uint64_t v9 = *(void *)(*(void *)(v6 + 248) + 56);
  int v10 = *(_DWORD *)(a2 + 24);
  if ((v10 & 0x10) != 0 && (**(unsigned char **)(v7 + 3496) & 0x10) != 0) {
    return a3;
  }
  if ((v10 & 0x20) != 0 && (**(unsigned char **)(v7 + 3496) & 0x20) != 0) {
    return a3;
  }
  unsigned __int16 v41 = 0;
  unsigned int v11 = lig_pos((const char *)(a2 + 1547), &v41, a2);
  int v12 = v41;
  if (!(v41 | v11)) {
    return a3;
  }
  unsigned int v13 = v11;
  unsigned int v15 = *(_DWORD *)(v7 + 92);
  unsigned int v14 = *(_DWORD *)(v7 + 96);
  v42[0] = (uint32x2_t)__PAIR64__(v14, v15);
  uint64_t v40 = v7;
  uint64_t v16 = *(void *)(v7 + 112);
  unsigned __int16 v17 = strlen((const char *)(v16 + 34));
  if (*(unsigned char *)(v16 + 34))
  {
    v42[0].i32[0] = v15 << v17;
    v42[0].i32[1] = v14 << v17;
  }
  *(void *)(a2 + 1328) |= 0x1000000uLL;
  if (!v12)
  {
    uint64_t v20 = v40;
    if (v13) {
      goto LABEL_27;
    }
LABEL_14:
    unsigned __int16 v22 = v8;
    goto LABEL_42;
  }
  uint64_t v18 = (v12 - 1);
  unsigned int v19 = *(unsigned __int8 *)(a1 + v18);
  uint64_t v20 = v40;
  if (v19 > 0x60)
  {
    if (v19 == 97)
    {
      char v21 = -26;
    }
    else
    {
      if (v19 != 111) {
        goto LABEL_21;
      }
      char v21 = -9;
    }
  }
  else if (v19 == 65)
  {
    char v21 = -58;
  }
  else
  {
    if (v19 != 79) {
      goto LABEL_21;
    }
    char v21 = -41;
  }
  *(unsigned char *)(a1 + v1_Block_object_dispose(&STACK[0x510], 8) = v21;
LABEL_21:
  if (v8 > (unsigned __int16)(v12 + 1))
  {
    uint64_t v23 = (unsigned __int16)(v12 + 1);
    do
    {
      char v24 = *(unsigned char *)(a1 + v23);
      int v25 = 1 << -(char)v23;
      __int32 v26 = v42[0].i32[(unsigned __int16)(v23 - 1) >> 5];
      v42[0].i32[(unsigned __int16)(v23 - 1) >> 5] = v26 & ~v25;
      *(unsigned char *)(a1 - 1 + v23) = v24;
      if (((unsigned __int32)v42[0].i32[v23 >> 5] >> ~(_BYTE)v23)) {
        v42[0].i32[(unsigned __int16)(v23 - 1) >> 5] = v26 | v25;
      }
      ++v23;
    }
    while (v8 != (unsigned __int16)v23);
  }
  *(unsigned char *)(v8 + a1 - 1) = 0;
  LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = v8 - 1;
  uint64_t v6 = *(void *)(a2 + 3184);
  --*(_WORD *)(v6 + 4);
  if (!v13) {
    goto LABEL_14;
  }
LABEL_27:
  unsigned __int16 v22 = v8 + 1;
  ++*(_WORD *)(v6 + 4);
  *(unsigned char *)(a1 + (unsigned __int16)(v8 + 1)) = 0;
  if (v13 < (unsigned __int16)v8)
  {
    uint64_t v27 = (unsigned __int16)v8;
    do
    {
      *(unsigned char *)(a1 + v27) = *(unsigned char *)(a1 + (v27 - 1));
      int v28 = 1 << ~(_BYTE)v27;
      uint64_t v29 = v27 >> 5;
      __int32 v30 = v42[0].i32[v29];
      v42[0].i32[v29] = v30 & ~v28;
      if (((unsigned __int32)v42[0].i32[(v27 - 1) >> 5] >> -(char)v27)) {
        v42[0].i32[v29] = v30 | v28;
      }
      --v27;
    }
    while (v13 < (unsigned __int16)v27);
  }
  uint64_t v31 = v13 - 1;
  unsigned int v32 = *(unsigned __int8 *)(a1 + v31);
  if (v32 > 0xE5)
  {
    if (v32 == 230)
    {
      char v33 = 101;
      char v34 = 97;
      goto LABEL_41;
    }
    if (v32 == 247)
    {
      char v33 = 101;
      char v34 = 111;
      goto LABEL_41;
    }
  }
  else
  {
    if (v32 == 198)
    {
      char v33 = 69;
      char v34 = 65;
      goto LABEL_41;
    }
    if (v32 == 215)
    {
      char v33 = 69;
      char v34 = 79;
LABEL_41:
      *(unsigned char *)(a1 + v31) = v34;
      *(unsigned char *)(a1 + v13) = v33;
    }
  }
LABEL_42:
  unsigned __int16 v35 = v17;
  *(_WORD *)(a2 + 1612) = v22;
  if (v22)
  {
    uint64_t v36 = 0;
    do
    {
      uint64_t v37 = *(unsigned __int8 *)(a1 + v36);
      if ((*(_DWORD *)(v9 + 4 * v37) & 0x40000000) != 0) {
        LOBYTE(v37) = v37 + 32;
      }
      *(unsigned char *)(a1 + v36) = v37;
      if (((unsigned __int32)v42[0].i32[v36 >> 5] >> ~(_BYTE)v36))
      {
        if ((*(_DWORD *)(v9 + 4 * v37) & 0x20000000) != 0) {
          LOBYTE(v37) = v37 - 32;
        }
        *(unsigned char *)(a1 + v36) = v37;
      }
      ++v36;
    }
    while (v22 != v36);
  }
  *(unsigned char *)(v20 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap(a1, 0, (__int16)v22, v42, v9);
  if (*(unsigned char *)(*(void *)(v20 + 112) + 34)) {
    unsigned int v38 = v35;
  }
  else {
    unsigned int v38 = 0;
  }
  *(uint32x2_t *)(v20 + 92) = vshl_u32(v42[0], (uint32x2_t)vneg_s32(vdup_n_s32(v38)));
  return 2;
}

uint64_t lig_pos(const char *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 3184) + 248) + 56);
  unsigned __int16 v6 = strlen(a1);
  *a2 = 0;
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    do
    {
      uint64_t v9 = a1[v7];
      if ((v9 - 198) <= 0x31 && ((1 << (v9 + 58)) & 0x2000100020001) != 0) {
        unsigned __int16 v8 = v7 + 1;
      }
      if (v6 - 1 != v7)
      {
        uint64_t v11 = a1[v7 + 1];
        if ((*(_DWORD *)(v5 + 4 * v11) & 0x40000000) != 0) {
          LOBYTE(v11) = v11 + 32;
        }
        if (v11 == 101)
        {
          if ((*(_DWORD *)(v5 + 4 * v9) & 0x40000000) != 0) {
            LOBYTE(v9) = v9 + 32;
          }
          if (v9 == 111 || v9 == 97) {
            *a2 = v7 + 1;
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t ICfoldio(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a3 + 3184) + 264);
  unsigned __int16 v6 = v12;
  __strcpy_chk();
  char v7 = 0;
  __int16 v8 = 0;
  char v9 = 0;
  while (*v6 == 161)
  {
    *unsigned __int16 v6 = -27;
    ++v8;
    char v7 = v9;
LABEL_6:
    ++v9;
    ++v6;
  }
  if (*v6) {
    goto LABEL_6;
  }
  if (!v8) {
    return 11;
  }
  uint64_t result = ICget(v12, a2, a3);
  if (result != 10) {
    return result;
  }
  if (*(_DWORD *)(a3 + 24) != 128)
  {
    uint64_t v11 = **(unsigned __int8 **)(v5 + 3496);
    if (v8 == 1 && v11 == (a2 - v7)) {
      return 10;
    }
    if (**(unsigned char **)(v5 + 3496)) {
      v12[a2 - v11] = -95;
    }
  }
  SFadd(v12, a2, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
  *(void *)(a3 + 1328) |= 0x1000000uLL;
  return 2;
}

uint64_t io_countrep(unsigned char *a1, unsigned char *a2)
{
  __int16 v2 = 0;
  char v3 = 0;
  *a2 = 0;
  while (*a1 == 161)
  {
    *a2 = v3;
    *a1 = -27;
    ++v2;
LABEL_6:
    ++v3;
    ++a1;
  }
  if (*a1) {
    goto LABEL_6;
  }
  return v2;
}

uint64_t ICget(const char *a1, int a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __int16 v32 = 0;
  uint64_t v5 = *(void **)(a3 + 3184);
  uint64_t v6 = v5[31];
  uint64_t v7 = *(void *)(v6 + 56);
  if (a1)
  {
    size_t v8 = strlen(a1);
    if (v8 >= 0x40) {
      uint64_t v9 = 64;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v9)
    {
      __strncpy_chk();
      uint64_t v6 = v5[31];
    }
    v33[v9] = 0;
  }
  if (*(__int16 *)(v6 + 68) < a2) {
    return 11;
  }
  uint64_t v10 = v5[33];
  *(_WORD *)(v10 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_WORD *)(v10 + 102) = 0;
  *(_WORD *)uint64_t v10 = 3;
  int v11 = SFbisrch((uint64_t)v33, 0, (__int16)(a2 - 1), &v32, v6);
  if (SFdecode((unsigned __int8 *)v33, a2, v11, v32, v5[31], (unsigned __int16 *)v10) != 10) {
    return 11;
  }
  uint64_t v12 = *(unsigned __int16 *)(v10 + 102);
  if (*(__int16 *)(v10 + 102) < 1)
  {
    LOWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = *(unsigned __int8 *)(v10 + 88);
    do
    {
      int v15 = *(unsigned __int8 *)(*(void *)(v10 + 72) + v13);
      BOOL v17 = v15 == 4 && v14 == 0;
      if (v15 == v14 || v17)
      {
        *(_WORD *)(v10 + 1_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(*(void *)(v10 + 3520) + 2 * v13);
        goto LABEL_27;
      }
      ++v13;
    }
    while (v12 != v13);
    LOWORD(v13) = *(_WORD *)(v10 + 102);
  }
LABEL_27:
  int v20 = *(unsigned __int8 *)(a3 + 8);
  if ((!*(unsigned char *)(a3 + 8) || ((1 << (v20 - 1)) & 0x11660) != 0) && *(_DWORD *)(a3 + 1308))
  {
    __int16 v21 = *(_WORD *)(v10 + 18);
    if ((v21 & 0xC00) != 0)
    {
      uint64_t v22 = v5[27];
      *(_DWORD *)(v22 + _Block_object_dispose(&STACK[0x510], 8) = 0;
      *(_DWORD *)(v10 + 3480) = 0;
      *(_DWORD *)(v22 + 12) = 0;
      *(_DWORD *)(v10 + 3484) = 0;
    }
    else if (v20 != 6 {
           || (v21 & 0x20) == 0
    }
           || (__int16)v12 >= 2 && *(unsigned __int8 *)(v10 + 88) - 1 <= 1)
    {
      v33[a2] = 0;
      uint64_t v23 = (__int16 *)v5[27];
      *uint64_t v23 = 1;
      uint64_t v24 = (unsigned __int16)v13;
      if (*(unsigned char *)(*(void *)(v10 + 72) + (unsigned __int16)v13) == 1 && *(unsigned char *)(v10 + 88) == 1)
      {
        unsigned __int8 v25 = v33[0];
        if ((*(_DWORD *)(v7 + 4 * v33[0]) & 0x20000000) != 0) {
          unsigned __int8 v25 = v33[0] - 32;
        }
        v33[0] = v25;
      }
      IHhyp(v33, v23);
      if (*(unsigned char *)(*(void *)(v10 + 72) + v24) == 1 && *(unsigned char *)(v10 + 88) == 1)
      {
        unsigned __int8 v26 = v33[0];
        if ((*(_DWORD *)(v7 + 4 * v33[0]) & 0x40000000) != 0) {
          unsigned __int8 v26 = v33[0] + 32;
        }
        v33[0] = v26;
        uint64_t v27 = v5[27];
        uint64_t v28 = *(unsigned __int8 *)(v27 + 680);
        if ((*(_DWORD *)(v7 + 4 * v28) & 0x40000000) != 0) {
          LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = v28 + 32;
        }
        *(unsigned char *)(v27 + 680) = v28;
      }
      uint64_t v29 = v5[27];
      *(_DWORD *)(v10 + 3480) = *(_DWORD *)(v29 + 8);
      *(_DWORD *)(v10 + 3484) = *(_DWORD *)(v29 + 12);
      if (*(unsigned char *)(v29 + 747))
      {
        if ((*(_WORD *)(v10 + 18) & 0x40) != 0) {
          __int16 v30 = 2;
        }
        else {
          __int16 v30 = 4;
        }
        *(_WORD *)(a3 + 1322) |= v30 | 0x40;
        checked_strcpy(a3 + 3090, (char *)(v29 + 680));
        uint64_t v31 = v5[27];
        *(_DWORD *)(a3 + 3156) = *(_DWORD *)(v31 + 16);
        *(_DWORD *)(a3 + 3160) = *(_DWORD *)(v31 + 20);
      }
    }
  }
  return 10;
}

uint64_t ICint(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(void *)__int16 v46 = 0;
  __int16 v2 = malloc_type_malloc(0x178uLL, 0x10B004067FBAE49uLL);
  if (!v2) {
    goto LABEL_35;
  }
  char v3 = v2;
  v2[46] = 0;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 1_Block_object_dispose(&STACK[0x510], 8) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + _Block_object_dispose(&STACK[0x510], 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)__int16 v2 = 0u;
  if (!*(unsigned char *)(a1 + 8) || ((1 << (*(unsigned char *)(a1 + 8) - 1)) & 0x20008) != 0)
  {
    uint64_t v4 = malloc_type_malloc(0x30uLL, 0x10A0040625B7065uLL);
    v3[28] = v4;
    if (!v4) {
      goto LABEL_35;
    }
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x4B0uLL, 0x10900403E69C754uLL);
  if (!v5) {
    goto LABEL_35;
  }
  uint64_t v6 = v5;
  v3[31] = v5;
  uint64_t v7 = malloc_type_calloc(1uLL, 0xDE0uLL, 0x10B00401F3C9068uLL);
  if (!v7) {
    goto LABEL_35;
  }
  size_t v8 = v7;
  v3[32] = 0;
  v3[33] = v7;
  v3[34] = 0;
  *uint64_t v6 = 0;
  uint64_t v9 = malloc_type_calloc(1uLL, 0x60uLL, 0x1010040370E3D57uLL);
  *((void *)v8 + 14) = v9;
  if (!v9) {
    goto LABEL_35;
  }
  uint64_t v10 = malloc_type_malloc(0x6D0uLL, 0x1000040CFF03AD1uLL);
  v3[35] = v10;
  if (!v10) {
    goto LABEL_35;
  }
  bzero(v10, 0x6D0uLL);
  int v11 = (char *)malloc_type_malloc(0x86uLL, 0x1000040CE674580uLL);
  v3[10] = v11;
  if (!v11) {
    goto LABEL_35;
  }
  *(void *)(v11 + 126) = 0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)int v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v6[35] = 6;
  uint64_t v12 = malloc_type_malloc(0x30uLL, 0x100004000313F17uLL);
  *((void *)v8 + 10) = v12;
  if (!v12) {
    goto LABEL_35;
  }
  uint64_t v13 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((void *)v8 + 9) = v13;
  if (!v13) {
    goto LABEL_35;
  }
  int v14 = malloc_type_malloc(0xCuLL, 0x1000040BDFB0063uLL);
  *((void *)v8 + 440) = v14;
  if (!v14) {
    goto LABEL_35;
  }
  int v15 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((void *)v8 + 43_Block_object_dispose(&STACK[0x510], 8) = v15;
  if (!v15) {
    goto LABEL_35;
  }
  uint64_t v16 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((void *)v8 + 441) = v16;
  if (!v16) {
    goto LABEL_35;
  }
  BOOL v17 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((void *)v8 + 442) = v17;
  if (!v17) {
    goto LABEL_35;
  }
  uint64_t v18 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((void *)v8 + 437) = v18;
  if (!v18) {
    goto LABEL_35;
  }
  unsigned int v19 = malloc_type_malloc(0xCuLL, 0x1000040BDFB0063uLL);
  *((void *)v8 + 3) = v19;
  if (!v19) {
    goto LABEL_35;
  }
  *((_DWORD *)v6 + 3) = 1024;
  if (!SFmemory((void **)v8 + 4, 65, 1))
  {
    SFmemory((void **)v8 + 4, 64, 0);
    goto LABEL_35;
  }
  int v20 = malloc_type_malloc(0x28uLL, 0x1000040BDFB0063uLL);
  *((void *)v8 + 397) = v20;
  if (!v20) {
    goto LABEL_35;
  }
  *((_WORD *)v8 + 1) = 0;
  *((_WORD *)v8 + 1744) = *(_DWORD *)(a1 + 20);
  *((unsigned char *)v6 + 55) = *(unsigned char *)(a1 + 8);
  bzero((void *)(a1 + 1690), 0x4B0uLL);
  *(_DWORD *)(a1 + 2986) = 0;
  *(_OWORD *)(a1 + 2954) = 0u;
  *(_OWORD *)(a1 + 2970) = 0u;
  *(_OWORD *)(a1 + 2922) = 0u;
  *(_OWORD *)(a1 + 293_Block_object_dispose(&STACK[0x510], 8) = 0u;
  *(_OWORD *)(a1 + 2890) = 0u;
  *(_OWORD *)(a1 + 2906) = 0u;
  *((void *)v8 + _Block_object_dispose(&STACK[0x510], 8) = a1 + 2890;
  *((_WORD *)v8 + 2_Block_object_dispose(&STACK[0x510], 8) = 1200;
  *((void *)v8 + 6) = a1 + 1690;
  __int16 v21 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  v3[29] = v21;
  if (!v21) {
    goto LABEL_35;
  }
  uint64_t v22 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  uint64_t v23 = v3[29];
  *(void *)(v23 + _Block_object_dispose(&STACK[0x510], 8) = v22;
  if (!v22) {
    goto LABEL_35;
  }
  *(_WORD *)(v23 + 4_Block_object_dispose(&STACK[0x510], 8) = 100;
  uint64_t v24 = malloc_type_calloc(0x64uLL, 8uLL, 0x10040436913F5uLL);
  *(void *)(v3[29] + 104) = v24;
  if (!v24) {
    goto LABEL_35;
  }
  for (uint64_t i = 0; i != 800; i += 8)
  {
    unsigned __int8 v26 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(void *)(*(void *)(v3[29] + 104) + i) = v26;
    if (!v26) {
      goto LABEL_35;
    }
  }
  uint64_t v27 = malloc_type_calloc(1uLL, 0x40uLL, 0x1090040D37A3AC8uLL);
  v3[30] = v27;
  if (!v27) {
    goto LABEL_35;
  }
  uint64_t v28 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  *(void *)(v3[30] + _Block_object_dispose(&STACK[0x510], 8) = v28;
  if (!v28) {
    goto LABEL_35;
  }
  uint64_t v29 = v3[33];
  *(void *)(v29 + 3192) = v3[29];
  *(unsigned char *)(v29 + 3184) = 1;
  *uint64_t v6 = 1;
  *(_WORD *)(a1 + 1320) |= 0x80u;
  __int16 v30 = malloc_type_malloc(0x5CuLL, 0x10000407E945382uLL);
  v3[36] = v30;
  if (!v30) {
    goto LABEL_35;
  }
  *(void *)(a1 + 3184) = v3;
  int v31 = *(unsigned __int8 *)(a1 + 8);
  if (v31 != 18 && v31 != 4)
  {
    uint64_t v33 = v3[31];
    uint64_t v34 = v3[33];
    uint64_t result = SLOpen(a1 + 28, a1 + 539, &v46[1], 0);
    if (result == 8)
    {
      __int16 v35 = *(_WORD *)(a1 + 1320) | 4;
      goto LABEL_39;
    }
    if (SLRead(v46[1], 0x400u, __dst, v46) == 8)
    {
      __int16 v36 = *(_WORD *)(a1 + 1320) | 0x20;
LABEL_52:
      *(_WORD *)(a1 + 1320) = v36;
LABEL_53:
      SLClose(v46[1]);
      return 8;
    }
    if (__dst[0] != 67 || __rev16(v48) != 6 || __rev16(v50) <= 4)
    {
      __int16 v36 = *(_WORD *)(a1 + 1320) | 0x10;
      goto LABEL_52;
    }
    if (v49) {
      unsigned int v37 = v49;
    }
    else {
      unsigned int v37 = 19;
    }
    if (*(unsigned char *)(a1 + 8))
    {
      if (v37 != *(unsigned __int8 *)(a1 + 8))
      {
        __int16 v36 = *(_WORD *)(a1 + 1320) | 1;
        goto LABEL_52;
      }
    }
    else
    {
      *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = v37;
      *(unsigned char *)(v33 + 55) = v37;
    }
    if (!*(_DWORD *)(a1 + 1308))
    {
      v3[27] = 0;
      goto LABEL_61;
    }
    unsigned int v38 = (char *)malloc_type_calloc(1uLL, 0x300uLL, 0x1030040B89FAF2CuLL);
    v3[27] = v38;
    if (v38)
    {
      *(_WORD *)unsigned int v38 = 0;
      v38[745] = v37;
      *((void *)v38 + 95) = 0;
      memcpy(v38 + 40, (const void *)(a1 + 668), 0x1FFuLL);
      __strcpy_chk();
      int v39 = IHhyp("", (__int16 *)v3[27]);
      __int16 v40 = *(_WORD *)(a1 + 1320);
      if (v39)
      {
        *(_WORD *)(a1 + 1320) = v40 | 0x2000;
        free((void *)v3[27]);
        v3[27] = 0;
        *(_DWORD *)(a1 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
      }
      else
      {
        *(_WORD *)(a1 + 1320) = v40 | 0x100;
      }
LABEL_61:
      unsigned int v41 = v46[1];
      *(_DWORD *)(v33 + 64) = v46[1];
      *(_WORD *)(v33 + 6) = bswap32(v50) >> 16;
      int v42 = ICintget(v41, (uint64_t)__dst, a1);
      *(_DWORD *)(a1 + 4) = v42;
      if (v42 == 8) {
        goto LABEL_53;
      }
      *(_DWORD *)(a1 + 12) = __rev16(v54);
      if (v37 <= 0xF)
      {
        if (((1 << v37) & 0x810C) != 0)
        {
          int v43 = 192;
LABEL_68:
          *(_DWORD *)(a1 + 16) = v43;
          *(unsigned char *)(a1 + 133_Block_object_dispose(&STACK[0x510], 8) = 61;
          if (v51 == 69 && v52 == 78)
          {
            if (v53 == 77)
            {
              __int16 v44 = *(_WORD *)(a1 + 1336) | 1;
              goto LABEL_74;
            }
            if (v53 == 67)
            {
              __int16 v44 = *(_WORD *)(a1 + 1336);
LABEL_74:
              *(_WORD *)(a1 + 1336) = v44 | 6;
            }
          }
          if (!*(_WORD *)(v33 + 2) {
            || (unsigned int v45 = malloc_type_malloc(*(unsigned __int16 *)(v33 + 2), 0x100004077774924uLL),
          }
                (*(void *)(v34 + _Block_object_dispose(&STACK[0x510], 8) = v45) != 0))
          {
            *(_WORD *)(v34 + 16) = -1;
            if (!*(_DWORD *)(a1 + 1308)) {
              return 0;
            }
            uint64_t result = 0;
            __int16 v35 = *(_WORD *)(a1 + 1320) | 0x100;
LABEL_39:
            *(_WORD *)(a1 + 1320) = v35;
            return result;
          }
          goto LABEL_35;
        }
        if (v37 == 5)
        {
          int v43 = 240;
          goto LABEL_68;
        }
      }
      int v43 = 128;
      goto LABEL_68;
    }
LABEL_35:
    *(_WORD *)(a1 + 1320) |= 8u;
    return 8;
  }
  return IChu(a1, (char *)(a1 + 1547));
}

uint64_t ICintget(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  unsigned int v123 = 0;
  uint64_t v4 = *(void *)(a3 + 3184);
  uint64_t v5 = *(void *)(v4 + 248);
  uint64_t v6 = *(void *)(v4 + 264);
  uint64_t v7 = *(_WORD **)(v6 + 112);
  *uint64_t v7 = bswap32(*(unsigned __int16 *)(a2 + 494)) >> 16;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 714);
  unsigned int v9 = bswap32(v8);
  *(_WORD *)(v4 + 8_Block_object_dispose(&STACK[0x510], 8) = __rev16(v8);
  unsigned int v10 = __rev16(*(unsigned __int16 *)(a2 + 712));
  if (v10 <= HIWORD(v9)) {
    LOWORD(v10) = 64;
  }
  *(_WORD *)(v4 + 90) = v10;
  *(_WORD *)(v5 + 8_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)(a2 + 496)) >> 16;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 498);
  unsigned int v12 = *(unsigned __int16 *)(a2 + 508);
  *(_WORD *)(v4 + 92) = bswap32(*(unsigned __int16 *)(a2 + 506)) >> 16;
  unsigned int v13 = __rev16(*(unsigned __int16 *)(a2 + 700));
  *(_WORD *)(v4 + 12) = v13;
  if (v13 <= 0x131)
  {
    *(_WORD *)(a3 + 1320) |= 0x4000u;
    *(void *)(a3 + 1328) |= 0x800uLL;
    return 8;
  }
  *(_WORD *)(v5 + 2) = bswap32(*(unsigned __int16 *)(a2 + 392)) >> 16;
  size_t v14 = __rev16(*(unsigned __int16 *)(a2 + 490));
  *(unsigned char *)(v5 + 54) = *(unsigned char *)(a2 + 501);
  int v15 = (__int16)(*(unsigned __int8 *)(a2 + 502) << 8) | *(unsigned __int8 *)(a2 + 503);
  *(_WORD *)(v5 + 4_Block_object_dispose(&STACK[0x510], 8) = _byteswap_ushort(*(_WORD *)(a2 + 502));
  unsigned int v113 = *(unsigned __int16 *)(a2 + 394);
  *(_WORD *)(v5 + 6_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)(a2 + 504)) >> 16;
  *(_WORD *)(v5 + 4) = bswap32(*(unsigned __int16 *)(a2 + 512)) >> 16;
  *(_WORD *)(v5 + 50) = bswap32(*(unsigned __int16 *)(a2 + 524)) >> 16;
  *(_WORD *)(v5 + 104) = bswap32(*(unsigned __int16 *)(a2 + 510)) >> 16;
  *(_WORD *)(v5 + 13_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)(a2 + 514)) >> 16;
  *(_WORD *)(v5 + 120) = bswap32(*(unsigned __int16 *)(a2 + 516)) >> 16;
  unsigned int v115 = *(unsigned __int16 *)(a2 + 488);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 518);
  unsigned int v117 = *(unsigned __int16 *)(a2 + 522);
  unsigned int v119 = *(unsigned __int16 *)(a2 + 520);
  *(_WORD *)(v5 + 74) = bswap32(*(unsigned __int16 *)(a2 + 492)) >> 16;
  *(_DWORD *)(v4 + 16) = bswap32(*(_DWORD *)(a2 + 526));
  unsigned int v17 = *(_DWORD *)(a3 + 3168);
  unsigned int v122 = (_WORD *)v6;
  if (v17 >= 2)
  {
    if ((v17 & 1) != 0 || (v17 >= 0x20000 ? (unsigned int v18 = 0x20000) : (unsigned int v18 = *(_DWORD *)(a3 + 3168)), (v17 & (v17 - 1)) != 0)) {
      unsigned int v18 = 0x2000;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  *(void *)(a3 + 316_Block_object_dispose(&STACK[0x510], 8) = v18;
  *(_DWORD *)(v4 + 24) = v18 >> 2;
  if (v14)
  {
    unsigned int v19 = malloc_type_calloc(1uLL, v14, 0x5685F96FuLL);
    *(void *)(v4 + 120) = v19;
    if (!v19) {
      goto LABEL_161;
    }
  }
  if (*v7)
  {
    int v20 = malloc_type_calloc(1uLL, (unsigned __int16)*v7, 0xF9EEBE27uLL);
    *(void *)(v4 + 20_Block_object_dispose(&STACK[0x510], 8) = v20;
    if (!v20) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v5 + 88))
  {
    __int16 v21 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 88), 0xA5DF4509uLL);
    *(void *)(v4 + 152) = v21;
    if (!v21) {
      goto LABEL_161;
    }
  }
  size_t v22 = __rev16(v11);
  if (v22)
  {
    uint64_t v23 = malloc_type_calloc(1uLL, v22, 0x304D6DE5uLL);
    *(void *)(v4 + 96) = v23;
    if (!v23) {
      goto LABEL_161;
    }
  }
  int v112 = v22;
  size_t v24 = __rev16(v12);
  if (v24)
  {
    unsigned __int8 v25 = malloc_type_calloc(1uLL, v24, 0xB7BF56B5uLL);
    *(void *)(v4 + 104) = v25;
    if (!v25) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v4 + 92))
  {
    unsigned __int8 v26 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v4 + 92), 0xEC4DDF20uLL);
    *(void *)(v4 + 112) = v26;
    if (!v26) {
      goto LABEL_161;
    }
  }
  int v111 = v24;
  size_t v27 = *(void *)(a3 + 3168);
  if (v27)
  {
    if (v27 >= 0x8000)
    {
      uint64_t v29 = 0;
      while (1)
      {
        __int16 v30 = malloc_type_calloc(1uLL, 0x8000uLL, 0x4724078DuLL);
        *(void *)(v4 + 32 + 8 * v29) = v30;
        if (!v30) {
          goto LABEL_161;
        }
        if ((unint64_t)++v29 >= *(void *)(a3 + 3168) >> 15) {
          goto LABEL_32;
        }
      }
    }
    uint64_t v28 = malloc_type_calloc(1uLL, v27, 0xB899FC9uLL);
    *(void *)(v4 + 32) = v28;
    if (!v28)
    {
LABEL_161:
      __int16 v102 = *(_WORD *)(a3 + 1320) | 8;
LABEL_162:
      *(_WORD *)(a3 + 1320) = v102;
      return 8;
    }
  }
LABEL_32:
  if (*(_WORD *)(v5 + 104))
  {
    int v31 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 104), 0x1DD7B889uLL);
    *(void *)(v4 + 16_Block_object_dispose(&STACK[0x510], 8) = v31;
    if (!v31) {
      goto LABEL_161;
    }
    unsigned __int16 v32 = *(_WORD *)(v5 + 104);
    v122[1085] = v32 >> 3;
    uint64_t v33 = malloc_type_calloc(1uLL, v32 & 0xFFF8, 0x10040436913F5uLL);
    *(void *)(v4 + 192) = v33;
    if (!v33) {
      goto LABEL_161;
    }
    uint64_t v34 = malloc_type_calloc(1uLL, 8 * (__int16)v122[1085], 0x10040436913F5uLL);
    *(void *)(v4 + 184) = v34;
    if (!v34) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v5 + 138))
  {
    __int16 v35 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 138), 0xF58A64D7uLL);
    *(void *)(v4 + 176) = v35;
    if (!v35) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v5 + 120))
  {
    __int16 v36 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 120), 0x7D03E86EuLL);
    *(void *)(v4 + 160) = v36;
    if (!v36) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v5 + 4))
  {
    unsigned int v37 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 4), 0x30B0F8EFuLL);
    *(void *)(v4 + 200) = v37;
    if (!v37) {
      goto LABEL_161;
    }
  }
  size_t v38 = __rev16(v16);
  if (v38)
  {
    int v39 = malloc_type_calloc(1uLL, v38, 0xB97A70B4uLL);
    *(void *)(v4 + 12_Block_object_dispose(&STACK[0x510], 8) = v39;
    if (!v39) {
      goto LABEL_161;
    }
  }
  size_t v40 = __rev16(v119);
  if (v40)
  {
    unsigned int v41 = malloc_type_calloc(1uLL, v40, 0x6FE72318uLL);
    *(void *)(v4 + 136) = v41;
    if (!v41) {
      goto LABEL_161;
    }
  }
  size_t v42 = __rev16(v117);
  if (v42)
  {
    int v43 = malloc_type_calloc(1uLL, v42, 0x89B0BCC8uLL);
    *(void *)(v4 + 144) = v43;
    if (!v43) {
      goto LABEL_161;
    }
  }
  int v110 = v38;
  uint64_t v44 = __rev16(v115);
  if (v44)
  {
    unsigned int v45 = malloc_type_calloc(1uLL, v44 + 1, 0xF1606970uLL);
    *(void *)(v4 + 72) = v45;
    if (!v45) {
      goto LABEL_161;
    }
  }
  if (*(_WORD *)(v5 + 74))
  {
    __int16 v46 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 74), 0x79AB9A09uLL);
    *(void *)(v4 + 296) = v46;
    if (!v46) {
      goto LABEL_161;
    }
  }
  uint64_t result = SLSeek(a1, (v15 + (bswap32(v113) >> 16)) * *(unsigned __int16 *)(v5 + 2), 0);
  if (result == 8)
  {
LABEL_53:
    *(_WORD *)(a3 + 1320) |= 0x40u;
    return result;
  }
  size_t v48 = *(void *)(a3 + 3168);
  int v114 = v40;
  *(void *)long long v108 = v44;
  int v109 = v42;
  if (v48)
  {
    if (v48 >= 0x8000)
    {
      unint64_t v50 = 0;
      do
      {
        bzero(*(void **)(v4 + 32 + 8 * v50++), 0x8000uLL);
        unint64_t v49 = *(void *)(a3 + 3168);
      }
      while (v50 < v49 >> 15);
    }
    else
    {
      bzero(*(void **)(v4 + 32), v48);
      unint64_t v49 = *(void *)(a3 + 3168);
    }
  }
  else
  {
    unint64_t v49 = 0;
  }
  *(_WORD *)(v4 + 20) = 10;
  int v51 = *(_DWORD *)(v4 + 24);
  if (v49 <= *(unsigned int *)(v4 + 16)) {
    int v52 = 6 * v51;
  }
  else {
    int v52 = *(_DWORD *)(v4 + 16);
  }
  if (v52 >= 65532) {
    unsigned __int16 v53 = -4;
  }
  else {
    unsigned __int16 v53 = v52;
  }
  unsigned __int16 v54 = v53;
  uint64_t v55 = (char *)malloc_type_malloc(v53, 0xB295335DuLL);
  int v56 = v55;
  int v57 = 0;
  int v58 = *(_DWORD *)(v4 + 16);
  if (v58 && v52 >= 1)
  {
    int v59 = v52;
    unsigned __int16 v60 = v54;
    int v61 = 0;
    int v57 = 0;
    int v62 = v51 >> 1;
    int v118 = v59;
    __int16 v116 = v55;
    do
    {
      int v120 = v57;
      unsigned __int16 v63 = v60;
      int v64 = v60;
      if ((unsigned __int16)SLFRead(a1, v60, v56, &v123) == 8 || v123 != v64) {
        goto LABEL_176;
      }
      if (v64)
      {
        uint64_t v65 = 0;
        uint64_t v66 = (unsigned __int16)(v63 - 1) / 6u + 1;
        int v56 = v116;
        int v67 = v120;
        do
        {
          unsigned int v68 = 0;
          uint64_t v69 = (unsigned __int8 *)&v116[6 * v65];
          int v70 = *v69;
          unsigned int v71 = v69[1];
          int v72 = v69[2];
          unsigned int v73 = v69[3];
          unsigned __int8 v74 = v69[4];
          __int16 v75 = v69[5];
          char v76 = v73 & 7;
          int v77 = (v73 >> 4) | (v71 << 12) | (16 * v72);
          unsigned int v78 = v71 >> 3;
          unsigned int v79 = v78 | (32 * v70);
          int v80 = *(_DWORD *)(v4 + 24) - 1;
          __int16 v81 = 3 - v75;
          while (v61 <= v62 || *(__int16 *)(v4 + 20) >= (__int16)v68)
          {
            int v82 = v77 & v80;
            uint64_t v83 = 4 * (v77 & v80 & 0x1FFFLL);
            uint64_t v84 = v4 + ((uint64_t)((unint64_t)((__int16)(v77 & v80) >> 13) << 48) >> 45);
            uint64_t v87 = *(void *)(v84 + 32);
            size_t v85 = (void *)(v84 + 32);
            uint64_t v86 = v87;
            if (!*(unsigned char *)(v87 + v83) && !*(unsigned char *)(v86 + (v83 | 1)))
            {
              uint64_t v88 = v83 | 2;
              if ((*(unsigned char *)(v86 + v88) & 0xF) == 0)
              {
                if (*(__int16 *)(v4 + 20) < (__int16)v68) {
                  *(_WORD *)(v4 + 20) = v68;
                }
                *(unsigned char *)(v86 + v83) = v79 >> 4;
                *(unsigned char *)(*v85 + (v83 | 1)) = v76 | (16 * v78);
                *(unsigned char *)(*v85 + v8_Block_object_dispose(&STACK[0x510], 8) = v74;
                *(unsigned char *)(*v85 + (v83 | 3)) = v75;
                ++v61;
                break;
              }
            }
            v81 += 2 * v75;
            int v77 = v82 + v81;
            if (v68++ >= 9) {
              break;
            }
          }
          ++v65;
        }
        while (v65 != v66);
        unsigned int v90 = v123;
      }
      else
      {
        unsigned int v90 = 0;
        int v56 = v116;
        int v67 = v120;
      }
      int v57 = v90 + v67;
      unsigned int v91 = (unsigned __int16)(v118 - v57);
      if ((_WORD)v118 == (_WORD)v57)
      {
        int v58 = *(_DWORD *)(v4 + 16);
        break;
      }
      if (v91 > 0xFFFB) {
        unsigned __int16 v60 = -4;
      }
      else {
        unsigned __int16 v60 = v91 - (unsigned __int16)(v118 - v57) % 6u;
      }
      int v58 = *(_DWORD *)(v4 + 16);
    }
    while (v58 && v118 > v57);
  }
  if (v58 > v57)
  {
    uint64_t result = SLSeek(a1, v58 - v57, 1u);
    if (result == 8) {
      goto LABEL_53;
    }
  }
  free(v56);
  if (v110 && ((unsigned __int16)SLFRead(a1, v110, *(void **)(v4 + 128), &v123) == 8 || v123 != v110)) {
    goto LABEL_176;
  }
  if (v114)
  {
    if ((unsigned __int16)SLFRead(a1, v114, *(void **)(v4 + 136), &v123) == 8 || v123 != v114) {
      goto LABEL_176;
    }
    *(_WORD *)(v5 + 52) = ~(-1 << *(_WORD *)(v5 + 50)) - _byteswap_ushort(**(_WORD **)(v4 + 136));
  }
  if (v109 && ((unsigned __int16)SLFRead(a1, v109, *(void **)(v4 + 144), &v123) == 8 || v123 != v109)
    || v14 && ((unsigned __int16)SLFRead(a1, v14, *(void **)(v4 + 120), &v123) == 8 || v123 != v14))
  {
    goto LABEL_176;
  }
  if (*(_WORD *)(v5 + 4))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 4), *(void **)(v4 + 200), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 4))
    {
      goto LABEL_176;
    }
    char v92 = *(unsigned __int16 **)(v4 + 200);
    unsigned int v93 = (bswap32(*v92) >> 16) - 1;
    v122[1069] = v93;
    unsigned int v94 = bswap32(v92[1]) >> 16;
    v122[1067] = v94;
    v122[1068] = v93 + 2 * v94;
    v122[1070] = (bswap32(v92[2]) >> 16) - 1;
  }
  if (*(_WORD *)(v5 + 74)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 74), *(void **)(v4 + 296), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 74))
    || *v7
    && ((unsigned __int16)SLFRead(a1, (unsigned __int16)*v7, *(void **)(v4 + 208), &v123) == 8
     || v123 != (unsigned __int16)*v7)
    || *(_WORD *)(v5 + 88)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 88), *(void **)(v4 + 152), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 88))
    || v112 && ((unsigned __int16)SLFRead(a1, v112, *(void **)(v4 + 96), &v123) == 8 || v123 != v112)
    || v111 && ((unsigned __int16)SLFRead(a1, v111, *(void **)(v4 + 104), &v123) == 8 || v123 != v111)
    || *(_WORD *)(v4 + 92)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v4 + 92), *(void **)(v4 + 112), &v123) == 8
     || v123 != *(unsigned __int16 *)(v4 + 92)))
  {
    goto LABEL_176;
  }
  if (*(_WORD *)(v5 + 104))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 104), *(void **)(v4 + 168), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 104))
    {
      goto LABEL_176;
    }
    uint64_t v95 = malloc_type_calloc(1uLL, 2 * (__int16)v122[1085], 0x1000040BDFB0063uLL);
    *(void *)(v5 + 16_Block_object_dispose(&STACK[0x510], 8) = v95;
    if (!v95) {
      goto LABEL_161;
    }
    uint64_t v96 = malloc_type_calloc(1uLL, 2 * (__int16)v122[1085], 0x1000040BDFB0063uLL);
    *(void *)(v5 + 176) = v96;
    if (!v96) {
      goto LABEL_161;
    }
    if ((__int16)v122[1085] >= 1)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      do
      {
        uint64_t v99 = 0;
        *(void *)(*(void *)(v4 + 184) + 8 * v9_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v4 + 168) + 8 * v98;
        *(void *)(*(void *)(v4 + 192) + 8 * v9_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v4 + 168) + 8 * v98 + 4;
        *(unsigned char *)(*(void *)(v5 + 168) + v9_Block_object_dispose(&STACK[0x510], 8) = 0;
        *(unsigned char *)(*(void *)(v5 + 176) + v9_Block_object_dispose(&STACK[0x510], 8) = 0;
        do
        {
          if (*(unsigned char *)(*(void *)(v4 + 168) + v97 + v99) == 32) {
            break;
          }
          ++*(unsigned char *)(*(void *)(v5 + 176) + v98);
          ++v99;
        }
        while (v99 != 4);
        for (uint64_t i = 4; i != 8; ++i)
        {
          if (*(unsigned char *)(*(void *)(v4 + 168) + v97 + i) == 32) {
            break;
          }
          ++*(unsigned char *)(*(void *)(v5 + 168) + v98);
        }
        ++v98;
        v97 += 8;
      }
      while (v98 < (__int16)v122[1085]);
    }
  }
  if (*(_WORD *)(v5 + 138)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 138), *(void **)(v4 + 176), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 138)))
  {
LABEL_176:
    __int16 v102 = *(_WORD *)(a3 + 1320) | 0x20;
    goto LABEL_162;
  }
  if (*(_WORD *)(v5 + 120))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 120), *(void **)(v4 + 160), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 120))
    {
      goto LABEL_176;
    }
    *(unsigned char *)(v5 + 136) = *(_WORD *)(v5 + 120) / 0xDu;
  }
  if (v108[0])
  {
    if ((unsigned __int16)SLFRead(a1, v108[0], *(void **)(v4 + 72), &v123) == 8 || v123 != v108[0]) {
      goto LABEL_176;
    }
    *(unsigned char *)(*(void *)(v4 + 72) + *(void *)v10_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  if (v13 < 0x134)
  {
    uint64_t v103 = SLLngToA(*(unsigned __int8 *)(a3 + 8));
    *(void *)(v5 + 56) = v103;
    if (!v103)
    {
      __int16 v102 = *(_WORD *)(a3 + 1320) | 0x4000;
      goto LABEL_162;
    }
  }
  else
  {
    uint64_t v101 = malloc_type_calloc(4uLL, 0x100uLL, 0x6B5F1621uLL);
    *(void *)(v5 + 56) = v101;
    if (!v101) {
      goto LABEL_161;
    }
    if (SLFRead(a1, 1024, __dst, &v123) == 8)
    {
      *(_WORD *)(a3 + 1320) |= 0x20u;
      SLClose(a1);
      return 8;
    }
    uint64_t v104 = 0;
    uint64_t v105 = *(void *)(v5 + 56);
    do
    {
      *(_DWORD *)(v105 + v104) = (__dst[v104] << 24) | (__dst[v104 + 1] << 16) | (__dst[v104 + 2] << 8) | __dst[v104 + 3];
      v104 += 4;
    }
    while (v104 != 1024);
  }
  int v106 = (__int16)v122[1085];
  if (v13 > 0x132)
  {
    if ((unsigned __int16)SLFRead(a1, v106 - 1, (void *)(v5 + 184), &v123) != 8 && v123 == (__int16)v122[1085] - 1) {
      return 0;
    }
    goto LABEL_176;
  }
  if (v106 == 1) {
    return 0;
  }
  unint64_t v107 = 0;
  do
  {
    uint64_t result = 0;
    *(unsigned char *)(v5 + 184 + v107++) = 7;
  }
  while (v107 < (unsigned __int16)(v122[1085] - 1));
  return result;
}

uint64_t ICpd(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  __int16 v72 = 0;
  uint64_t v4 = SLLngToA(a2[2058]);
  char v5 = a2[2059];
  if (!v5)
  {
    char v5 = 61;
    a2[2059] = 61;
  }
  unsigned int v6 = *a2;
  if (v6 > 0xA || ((1 << v6) & 0x5F6) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    unsigned int v8 = *(void **)(a1 + 3184);
    uint64_t v9 = v8[33];
    uint64_t v10 = v8[29];
    *(_WORD *)(v9 + 3204) = *((_WORD *)a2 + 1);
    uint64_t v11 = v8[30];
  }
  uint64_t result = 0;
  switch(v6)
  {
    case 1u:
    case 2u:
      int v20 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x109004069F7AFFDuLL);
      if (!v20) {
        return 8;
      }
      __int16 v21 = v20;
      *((void *)v20 + 1) = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
      *((_WORD *)v21 + 1) = *(_WORD *)(v9 + 3204);
      size_t v22 = a2 + 2060;
      int v23 = a2[2059];
      v21[16] = v23;
      if (*(_DWORD *)(a1 + 1408))
      {
        if (SLpar((const char *)a2 + 2060, (unsigned __int16 *)(*(void *)(a1 + 3184) + 2), (__int16 *)(*(void *)(a1 + 3184) + 4), &v72, v4) == 8)return 4; {
        uint64_t v48 = *(void *)(a1 + 3184);
        }
        int v49 = *(__int16 *)(v48 + 2);
        uint64_t v50 = *(__int16 *)(v48 + 2);
        int v51 = *(__int16 *)(v48 + 4);
        if (v49 <= v51)
        {
          __int16 v52 = v49;
          do
          {
            __s[v49 - v50] = v22[v52++];
            int v49 = v52;
          }
          while (v52 <= v51);
        }
        __s[v49 - v50] = 0;
        HypStrip(__s, v21 + 28, v21[16]);
        __int16 v53 = strlen(__s);
        v21[18] = SLcap((uint64_t)__s, 0, (__int16)(v53 - 1), v21 + 20, v4);
        int v54 = strlen(__s);
        if (v54 << 16 >= 1)
        {
          __int16 v47 = 0;
          do
          {
            uint64_t v55 = __s[v47];
            if ((*(_DWORD *)(v4 + 4 * v55) & 0x40000000) != 0) {
              LOBYTE(v55) = v55 + 32;
            }
            __src[v47++] = v55;
          }
          while ((__int16)v54 > v47);
          goto LABEL_77;
        }
LABEL_76:
        __int16 v47 = 0;
        goto LABEL_77;
      }
      HypStrip(a2 + 2060, v21 + 28, v23);
      __int16 v43 = strlen((const char *)a2 + 2060);
      v21[18] = SLcap((uint64_t)(a2 + 2060), 0, (__int16)(v43 - 1), v21 + 20, v4);
      int v44 = strlen((const char *)a2 + 2060);
      if (v44 << 16 < 1) {
        goto LABEL_76;
      }
      __int16 v45 = 0;
      do
      {
        uint64_t v46 = v22[v45];
        if ((*(_DWORD *)(v4 + 4 * v46) & 0x40000000) != 0) {
          LOBYTE(v46) = v46 + 32;
        }
        __src[v45++] = v46;
        __int16 v47 = v45;
      }
      while ((__int16)v44 > v45);
LABEL_77:
      __src[v47] = 0;
      strcpy(*((char **)v21 + 1), __src);
      __int16 v58 = *((_WORD *)a2 + 2);
      *(_WORD *)__int16 v21 = v58;
      v21[17] = a2[2125];
      __int16 v59 = *((_WORD *)a2 + 1068);
      if (v59)
      {
        *((void *)v21 + 5) = *((void *)a2 + 266);
        *((_WORD *)v21 + 24) = v59;
      }
      int v60 = *a2;
      if (v60 == 2)
      {
        int v67 = 3;
        goto LABEL_93;
      }
      if (v60 != 1)
      {
        int v67 = 0;
        goto LABEL_93;
      }
      *(_WORD *)(v10 + 4_Block_object_dispose(&STACK[0x510], 8) = 100;
      *(_WORD *)uint64_t v10 = v58;
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      *(unsigned char *)(v10 + 42) = 0;
      *(unsigned char *)(v10 + 16) = a2[2059];
      *(_DWORD *)(v10 + 2_Block_object_dispose(&STACK[0x510], 8) = *((_DWORD *)v21 + 7);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v21 + 8);
      *(unsigned char *)(v10 + 17) = v21[18];
      *(_DWORD *)(v10 + 20) = *((_DWORD *)v21 + 5);
      *(_DWORD *)(v10 + 24) = *((_DWORD *)v21 + 6);
      strcpy(*(char **)(v10 + 8), *((const char **)v21 + 1));
      *(_DWORD *)(v10 + 36) = 0xFFFF;
      int v61 = PDword((unsigned __int16 *)v10, 1u, 1);
      uint64_t v62 = *(void *)(v10 + 144);
      long long v63 = *(_OWORD *)(v10 + 128);
      *((_OWORD *)a2 + 134) = *(_OWORD *)(v10 + 112);
      *((_OWORD *)a2 + 135) = v63;
      *((void *)a2 + 272) = v62;
      if (v61 == 8) {
        return 8;
      }
      if (!*(_WORD *)(v10 + 50))
      {
LABEL_90:
        int v67 = 2;
LABEL_93:
        if (PDedit((unsigned __int16 *)v21, v67) == 8)
        {
          long long v68 = *((_OWORD *)v21 + 4);
          long long v69 = *((_OWORD *)v21 + 5);
          *((void *)a2 + 272) = *((void *)v21 + 12);
          *((_OWORD *)a2 + 135) = v69;
          *((_OWORD *)a2 + 134) = v68;
          uint64_t v34 = v21;
          goto LABEL_44;
        }
        *(unsigned char *)(v9 + 3206) = PDchknegs();
        uint64_t v70 = *((void *)v21 + 12);
        long long v71 = *((_OWORD *)v21 + 5);
        *((_OWORD *)a2 + 134) = *((_OWORD *)v21 + 4);
        *((void *)a2 + 272) = v70;
        *((_OWORD *)a2 + 135) = v71;
        free(*((void **)v21 + 1));
        __int16 v35 = v21;
        goto LABEL_49;
      }
      uint64_t v64 = 0;
      int v65 = *(unsigned __int8 *)(v10 + 17);
      while (1)
      {
        if (v65 != 3)
        {
          if (v65 == *(unsigned __int8 *)(*(void *)(*(void *)(v10 + 104) + v64) + 71)) {
            break;
          }
          goto LABEL_89;
        }
        uint64_t v66 = *(void *)(*(void *)(v10 + 104) + v64);
        if (*(_DWORD *)(v10 + 20) == *(_DWORD *)(v66 + 80) && *(_DWORD *)(v10 + 24) == *(_DWORD *)(v66 + 84)) {
          break;
        }
LABEL_89:
        v64 += 8;
        if (8 * *(unsigned __int16 *)(v10 + 50) == v64) {
          goto LABEL_90;
        }
      }
      if (*((_WORD *)a2 + 1074) && *((int *)a2 + 536) > 7) {
        return 8;
      }
      uint64_t result = 8;
      *((_DWORD *)a2 + 536) = 8;
      *((_WORD *)a2 + 1074) = 5151;
      return result;
    case 4u:
    case 5u:
      if (v6 == 5) {
        int v24 = 11;
      }
      else {
        int v24 = 0;
      }
      if (v6 == 4) {
        unsigned int v25 = 8;
      }
      else {
        unsigned int v25 = v24;
      }
      *(_WORD *)(v10 + 4_Block_object_dispose(&STACK[0x510], 8) = a2[2138];
      *(_WORD *)uint64_t v10 = *((_WORD *)a2 + 2);
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      *(unsigned char *)(v10 + 42) = 0;
      *(_DWORD *)(v10 + 36) = 0xFFFF;
      int v26 = PDword((unsigned __int16 *)v10, v25, 1);
      uint64_t result = 0;
      if (v26 != 8) {
        return result;
      }
      goto LABEL_36;
    case 6u:
      *(unsigned char *)(v10 + 16) = v5;
      if (PDword((unsigned __int16 *)v10, 8u, 5) == 8) {
        goto LABEL_36;
      }
      *(_WORD *)(v9 + 40) = *(_WORD *)(a1 + 1686);
      *(_WORD *)(v9 + 42) = 100;
      *(unsigned char *)(v9 + 8_Block_object_dispose(&STACK[0x510], 8) = 0;
      *(void *)(v9 + 4_Block_object_dispose(&STACK[0x510], 8) = a1 + 1690;
      *(void *)(v9 + 64) = a1 + 2890;
      *(_WORD *)(v9 + 44) = *(_WORD *)(a1 + 1688);
      SFlstini((_WORD *)(v9 + 40), (_WORD *)(v9 + 44), (unsigned char *)(a1 + 1690), (_WORD *)(a1 + 2890));
      LOWORD(v36) = *(_WORD *)(v10 + 50);
      if (!(_WORD)v36) {
        goto LABEL_58;
      }
      unint64_t v37 = 0;
      do
      {
        uint64_t v38 = *(void *)(*(void *)(v10 + 104) + 8 * v37);
        __int16 v39 = strlen((const char *)v38);
        SLrecap((unsigned __int8 *)v38, v39, *(unsigned __int8 *)(v38 + 71), v38 + 80, *(unsigned __int8 *)(v9 + 88), v4);
        __strcpy_chk();
        uint64_t v40 = *(void *)(*(void *)(v10 + 104) + 8 * v37);
        uint64_t v41 = *(void *)(*((void *)a2 + 274) + 8 * v37);
        *(_WORD *)(v41 + 66) = *(_WORD *)(v40 + 66);
        *(unsigned char *)(v41 + 6_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(v40 + 70);
        *(_DWORD *)(v41 + 72) = *(_DWORD *)(v40 + 88);
        *(_DWORD *)(v41 + 76) = *(_DWORD *)(v40 + 92);
        __int16 v42 = *(_WORD *)(v40 + 100);
        if (v42)
        {
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v10;
          *(_DWORD *)(v11 + 4) = *(_DWORD *)(v40 + 96);
          *(_WORD *)(v11 + 16) = v42;
          if (PDalt((unsigned __int16 *)v11) == 8) {
            return 8;
          }
          strncpy((char *)(*(void *)(*((void *)a2 + 274) + 8 * v37) + 80), *(const char **)(v11 + 8), *(unsigned __int16 *)(v11 + 16));
          *(unsigned char *)(*(void *)(*((void *)a2 + 274) + 8 * v37) + *(unsigned __int16 *)(v11 + 16) + 80) = 0;
        }
        else
        {
          *(unsigned char *)(v41 + 80) = 0;
        }
        ++v37;
        unint64_t v36 = *(unsigned __int16 *)(v10 + 50);
      }
      while (v37 < v36);
LABEL_58:
      uint64_t result = 0;
      *((_WORD *)a2 + 1092) = v36;
      *(_WORD *)(a1 + 1686) = *(_WORD *)(v9 + 40);
      *(_WORD *)(a1 + 168_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v9 + 44);
      return result;
    case 7u:
    case 8u:
      *(_WORD *)uint64_t v10 = *((_WORD *)a2 + 2);
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      if (v6 == 7) {
        unsigned int v27 = 8;
      }
      else {
        unsigned int v27 = 11;
      }
      if (PDword((unsigned __int16 *)v10, v27, 2) != 8) {
        return 0;
      }
LABEL_36:
      long long v28 = *(_OWORD *)(v10 + 112);
      long long v29 = *(_OWORD *)(v10 + 128);
      *((void *)a2 + 272) = *(void *)(v10 + 144);
      *((_OWORD *)a2 + 135) = v29;
      *((_OWORD *)a2 + 134) = v28;
      return 8;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
      unsigned int v13 = malloc_type_calloc(1uLL, 0x850uLL, 0x1090040FF1BFF1AuLL);
      if (!v13) {
        return 8;
      }
      uint64_t v14 = (uint64_t)v13;
      v13[1032] = *((_WORD *)a2 + 1);
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      *(_WORD *)(v14 + 784) = *((_WORD *)a2 + 387);
      *(_DWORD *)(v14 + 2076) = *((_DWORD *)a2 + 514);
      *(_WORD *)(v14 + 2074) = *((_WORD *)a2 + 2);
      *(_DWORD *)(v14 + 772) = 0;
      if (*a2 - 10 >= 5) {
        char v15 = 0;
      }
      else {
        char v15 = 0x403060502uLL >> (8 * (*a2 - 10));
      }
      *(void *)(v14 + 776) = 0;
      *(_DWORD *)(v14 + 2069) = 0;
      *(_DWORD *)(v14 + 2066) = 0;
      int v16 = PDdb(v14, v15 & 7);
      uint64_t v17 = *(void *)(v14 + 2120);
      long long v18 = *(_OWORD *)(v14 + 2104);
      *((_OWORD *)a2 + 134) = *(_OWORD *)(v14 + 2088);
      *((_OWORD *)a2 + 135) = v18;
      *((void *)a2 + 272) = v17;
      if (v16 == 8) {
        goto LABEL_43;
      }
      int v19 = *a2;
      if (v19 == 10)
      {
        *((_WORD *)a2 + 2) = *(_WORD *)(v14 + 2074);
        *(unsigned char *)(v9 + 3206) = PDchknegs();
      }
      else if (v19 == 13)
      {
        *((_WORD *)a2 + 2) = 0;
      }
      *((_WORD *)a2 + 387) = *(_WORD *)(v14 + 784);
      *((_WORD *)a2 + 1029) = *(_WORD *)(v14 + 2078);
      goto LABEL_48;
    case 0xFu:
      __int16 v30 = malloc_type_calloc(1uLL, 0x30uLL, 0x109004046003039uLL);
      if (!v30) {
        goto LABEL_74;
      }
      uint64_t v14 = (uint64_t)v30;
      if (PDapp((uint64_t)v30, 1) == 8) {
        goto LABEL_42;
      }
      *((_WORD *)a2 + 1) = *(_WORD *)(v14 + 2);
      goto LABEL_48;
    case 0x10u:
      int v31 = malloc_type_calloc(1uLL, 0x30uLL, 0x109004046003039uLL);
      if (!v31)
      {
LABEL_74:
        uint64_t result = 8;
        long long v56 = MEMORY[8];
        long long v57 = MEMORY[0x18];
        *((void *)a2 + 272) = MEMORY[0x28];
        *((_OWORD *)a2 + 135) = v57;
        *((_OWORD *)a2 + 134) = v56;
        return result;
      }
      uint64_t v14 = (uint64_t)v31;
      v31[1] = *((_WORD *)a2 + 1);
      if (PDapp((uint64_t)v31, 2) != 8)
      {
LABEL_48:
        __int16 v35 = (void *)v14;
LABEL_49:
        free(v35);
        return 0;
      }
LABEL_42:
      long long v32 = *(_OWORD *)(v14 + 8);
      long long v33 = *(_OWORD *)(v14 + 24);
      *((void *)a2 + 272) = *(void *)(v14 + 40);
      *((_OWORD *)a2 + 135) = v33;
      *((_OWORD *)a2 + 134) = v32;
LABEL_43:
      uint64_t v34 = (void *)v14;
LABEL_44:
      free(v34);
      return 8;
    default:
      return result;
  }
}

unsigned char *HypStrip(unsigned char *result, void *a2, int a3)
{
  *a2 = 0;
  int v3 = *result;
  if (*result)
  {
    unint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    unsigned __int8 v6 = 0;
    unsigned int v7 = 0x80000000;
    do
    {
      if (v3 == a3)
      {
        if (v6 == 32)
        {
          *(_DWORD *)a2 |= 1u;
          unsigned __int8 v6 = 32;
        }
        else
        {
          *((_DWORD *)a2 + v5) |= 2 * v7;
        }
      }
      else
      {
        uint64_t v8 = v6++;
        result[v8] = v3;
        v7 >>= 1;
        if (v6 == 32)
        {
          ++v5;
          unsigned int v7 = 0x80000000;
        }
      }
      if (v4 > 0x3E) {
        break;
      }
      int v3 = result[++v4];
    }
    while (v3);
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  result[v6] = 0;
  return result;
}

uint64_t ICpre(char *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 3184);
  uint64_t v6 = *(void *)(v5 + 264);
  unsigned __int16 v75 = 0;
  int v74 = 0;
  long long v69 = *(unsigned __int16 **)(v6 + 112);
  uint64_t v7 = *(void *)(*(void *)(v5 + 248) + 56);
  __src[0] = 0;
  *(unsigned char *)(a2 + 1547) = 0;
  *(unsigned char *)(a2 + 1417) = 0;
  *(unsigned char *)(a2 + 1482) = 0;
  *(_WORD *)(a2 + 1322) = 0;
  *(_WORD *)(v6 + 3492) = 0;
  *(unsigned char *)(v6 + 3512) = 0;
  do
  {
    *(_WORD *)(*(void *)(v6 + 3520) + 2 * v4) = 0;
    *(_WORD *)(*(void *)(v6 + 24) + 2 * v4) = 0;
    *(unsigned char *)(*(void *)(v6 + 3496) + v4) = 0;
    *(unsigned char *)(*(void *)(v6 + 3504) + v4++) = 0;
  }
  while (v4 != 6);
  int v8 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v73 = a2 + 1547;
  if (!*(_DWORD *)(a2 + 1408))
  {
    int v15 = 0;
    *(_WORD *)(v5 + 2) = 0;
    *(_WORD *)(v5 + 4) = *(_WORD *)(a2 + 1612) - 1;
    int v10 = 11;
    goto LABEL_41;
  }
  LOWORD(v74) = 0;
  *(_WORD *)(a2 + 1413) = 0;
  uint64_t v9 = (__int16 *)(v5 + 2);
  int v10 = SLpar(a1, (unsigned __int16 *)(v5 + 2), (__int16 *)(v5 + 4), &v74, v7);
  if (v10 != 8)
  {
    int v15 = 0;
    goto LABEL_27;
  }
  if (v8 == 16)
  {
    if (a1[*v9] == 105)
    {
      if ((v74 & 0x200) == 0)
      {
        int v15 = 1;
        if (*v9 == *(_WORD *)(v5 + 4))
        {
          *(void *)(a2 + 1328) |= 0x400uLL;
          *(_WORD *)(a2 + 1547) = 105;
          strcpy(__src, "I");
          SFadd(__src, 1, (__int16 *)(v6 + 40), (__int16 *)(v6 + 44), 100, *(__int16 *)(v6 + 56), *(void *)(v6 + 48), *(void *)(v6 + 64));
          *(_WORD *)(v6 + 40) = 1;
          int v10 = 4;
          int v15 = 0;
        }
        else
        {
          int v10 = 8;
        }
        goto LABEL_27;
      }
LABEL_20:
      int v14 = 8;
      goto LABEL_21;
    }
  }
  else if (v8 == 17)
  {
    uint64_t v11 = *v9;
    int v12 = a1[v11];
    if (v12 == 84 || v12 == 78)
    {
      if ((v74 & 0x2000) != 0)
      {
        *(void *)(a2 + 1328) |= 0x400uLL;
        *(_WORD *)(a2 + 1547) = a1[v11];
        *(_WORD *)(a2 + 1612) = 1;
        __strcpy_chk();
        uint64_t v13 = *(unsigned __int8 *)(a2 + 1547);
        if ((*(_DWORD *)(v7 + 4 * v13) & 0x40000000) != 0) {
          LOBYTE(v13) = v13 + 32;
        }
        __src[0] = v13;
        SFadd(__src, 1, (__int16 *)(v6 + 40), (__int16 *)(v6 + 44), 100, *(__int16 *)(v6 + 56), *(void *)(v6 + 48), *(void *)(v6 + 64));
        *(_WORD *)(v6 + 40) = 1;
        int v14 = 4;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  int v14 = 8;
LABEL_21:
  int v15 = 0;
  if ((v74 & 0x200) != 0 || (unsigned __int16)v74 == 0) {
    int v10 = 4;
  }
  else {
    int v10 = v14;
  }
LABEL_27:
  __int16 v17 = v74;
  if (!(_WORD)v74)
  {
    *(unsigned char *)(a2 + 1416) = 0;
    *(_DWORD *)(a2 + 1412) = 0;
    goto LABEL_41;
  }
  *(unsigned char *)(a2 + 1412) = (v74 & 0x200) != 0;
  if ((v17 & 0x100) != 0) {
    *(void *)(a2 + 1328) |= 0x40000uLL;
  }
  if ((v17 & 0x400) != 0)
  {
    *(unsigned char *)(a2 + 1413) = 1;
    if ((v17 & 0x800) == 0) {
      goto LABEL_36;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 1413) = 0;
    if ((v17 & 0x1000) == 0)
    {
      *(unsigned char *)(a2 + 1415) = 0;
      if ((v17 & 0x800) != 0) {
        goto LABEL_39;
      }
LABEL_36:
      *(unsigned char *)(a2 + 1414) = 0;
      *(unsigned char *)(a2 + 1416) = (v17 & 0x2000) != 0;
      goto LABEL_41;
    }
    *(unsigned char *)(a2 + 1415) = 1;
    if ((v17 & 0x800) == 0) {
      goto LABEL_36;
    }
  }
LABEL_39:
  *(unsigned char *)(a2 + 1414) = 1;
LABEL_41:
  if (v10 == 4) {
    int v18 = 4;
  }
  else {
    int v18 = 11;
  }
  unsigned int v72 = v18;
  if (*(unsigned char *)(a2 + 1416))
  {
    if (*(unsigned char *)(a2 + 1415))
    {
      *(_WORD *)(a2 + 1415) = 0;
    }
    else if (*(unsigned char *)(a2 + 8) && ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0xC420) == 0)
    {
      *(unsigned char *)(a2 + 1416) = 0;
    }
  }
  else if (*(unsigned char *)(a2 + 1415) && v8 != 16 && v8 != 15)
  {
    if ((v8 - 5) < 2 || v8 == 9)
    {
      LOWORD(v19) = *(_WORD *)(v5 + 4);
    }
    else
    {
      if (v8 == 8 || !*(_WORD *)(*(void *)(v5 + 248) + 88)) {
        goto LABEL_66;
      }
      uint64_t v19 = *(__int16 *)(v5 + 4);
      uint64_t v20 = a1[v19];
      if ((*(_DWORD *)(v7 + 4 * v20) & 0x40000000) != 0) {
        LOBYTE(v20) = v20 + 32;
      }
      unsigned int v21 = v20 - 115;
      BOOL v22 = v21 > 7;
      int v23 = (1 << v21) & 0xA1;
      if (v22 || v23 == 0)
      {
LABEL_66:
        *(unsigned char *)(a2 + 1415) = 0;
        goto LABEL_67;
      }
    }
    *(_WORD *)(v5 + 4) = v19 + 1;
  }
LABEL_67:
  int v70 = v10;
  __strcpy_chk();
  uint64_t v25 = *(__int16 *)(v5 + 2);
  int v26 = &a1[v25];
  int v27 = a1[v25];
  int v28 = *(unsigned __int8 *)(a2 + 1338);
  if (v27 == v28)
  {
    if ((int)v25 < *(__int16 *)(a2 + 1612))
    {
      uint64_t v29 = *(__int16 *)(a2 + 1612) - v25;
      do
      {
        int v30 = *v26++;
        if (v30 != v27) {
          break;
        }
        LODWORD(v25) = v25 + 1;
        *(_WORD *)(v5 + 2) = v25;
        --v29;
      }
      while (v29);
    }
    if (*(_DWORD *)(a2 + 1308)) {
      *(void *)(a2 + 1328) |= 8uLL;
    }
  }
  int v31 = *(__int16 *)(v5 + 4);
  if ((v31 & 0x80000000) == 0)
  {
    do
    {
      if (a1[(unsigned __int16)v31] != v28) {
        break;
      }
      int v32 = (__int16)v31;
      LOWORD(v31) = v31 - 1;
      *(_WORD *)(v5 + 4) = v31;
    }
    while (v32 > 0);
  }
  int v71 = v15;
  __strncpy_chk();
  int v33 = *(__int16 *)(v5 + 2);
  int v34 = *(__int16 *)(a2 + 1612);
  if (v33 >= v34)
  {
    __int16 v35 = 0;
  }
  else
  {
    __int16 v35 = 0;
    int v36 = 0;
    int v37 = *(unsigned __int8 *)(a2 + 1338);
    uint64_t v38 = *(__int16 *)(v5 + 2);
    do
    {
      int v39 = a1[v38];
      if (v39 == v37 && v38 <= *(__int16 *)(v5 + 4))
      {
        int v40 = 1 << -(char)v36--;
        *(_DWORD *)(v6 + 3472 + 4 * ((unsigned __int16)v36 >> 5)) |= v40;
        ++v35;
      }
      else
      {
        __src[v33++] = v39;
      }
      ++v38;
      ++v36;
    }
    while (v34 != v38);
  }
  __src[v33] = 0;
  strcpy(a1, __src);
  __strcpy_chk();
  if (*(__int16 *)(v5 + 2) < 1)
  {
    int64_t v41 = 0;
  }
  else
  {
    int64_t v41 = 0;
    do
    {
      unint64_t v42 = v41;
      *(unsigned char *)(a2 + 1417 + v41) = __src[v41];
      ++v41;
    }
    while (v42 <= 0x3E && v41 < *(__int16 *)(v5 + 2));
  }
  *(unsigned char *)(a2 + v41 + 1417) = 0;
  int v43 = *(__int16 *)(v5 + 4);
  if (v43 + 1 >= *(__int16 *)(a2 + 1612))
  {
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    do
    {
      *(unsigned char *)(a2 + 1482 + v44) = __src[v43 + 1 + v44];
      unint64_t v45 = v44 + 1;
      if ((uint64_t)(v43 + 2 + v44) >= *(__int16 *)(a2 + 1612)) {
        break;
      }
    }
    while (v44++ < 0x3F);
  }
  *(unsigned char *)(a2 + v45 + 1482) = 0;
  __int16 v47 = *(_WORD *)(v5 + 4) - v35;
  *(_WORD *)(v5 + 4) = v47;
  *(unsigned char *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap((uint64_t)a1, *(__int16 *)(v5 + 2), v47, (void *)(v6 + 92), v7);
  if (*(__int16 *)(v5 + 2) <= *(__int16 *)(v5 + 4))
  {
    uint64_t v48 = 0;
    int v51 = 0;
    __int16 v50 = 0;
    __int16 v49 = 0;
    uint64_t v53 = *(__int16 *)(v5 + 2) - 1;
    int v54 = &a1[v53];
    uint64_t v52 = v72;
    while (1)
    {
      uint64_t v55 = &v54[v48];
      uint64_t v56 = v54[v48 + 1];
      int v57 = *(_DWORD *)(v7 + 4 * v56);
      if ((v57 & 0x60000040) != 0)
      {
        ++v49;
      }
      else if (v56 == 63 || v56 == 42)
      {
        ++v50;
      }
      if ((v57 & 0x40000000) != 0) {
        LOBYTE(v56) = v56 + 32;
      }
      *(unsigned char *)(a2 + 1547 + v4_Block_object_dispose(&STACK[0x510], 8) = v56;
      unsigned int v58 = v55[1];
      if (v58 == 39)
      {
        *(_WORD *)(v6 + 3492) |= 0x400u;
        unsigned int v58 = v55[1];
      }
      int v59 = *(_DWORD *)(v7 + 4 * v58);
      BOOL v60 = (v59 & 0x4064000) == 0 || (~v59 & 0x50000000) != 0;
      if (v60) {
        int v61 = v51;
      }
      else {
        int v61 = 1;
      }
      if (v60 || v8 != 8)
      {
        if (v8 != 3 || (v54[v48] | 0x20) != 0x6C || (v54[v48 + 2] | 0x20) != 0x6C) {
          goto LABEL_133;
        }
        int v63 = *(_DWORD *)(a2 + 24);
        if (v58 == 46 && (v63 & 0x80) != 0) {
          goto LABEL_168;
        }
        if (v58 == 183)
        {
          int v51 = v61;
          if ((v63 & 0x40) != 0) {
            goto LABEL_168;
          }
        }
        else
        {
LABEL_133:
          int v51 = v61;
        }
      }
      else if ((*(unsigned char *)(a2 + 24) & 0x40) == 0 || (*(void *)&v59 & 0x40000) == 0)
      {
        int v51 = 1;
      }
      ++v48;
      if (v53 + v48 >= *(__int16 *)(v5 + 4)) {
        goto LABEL_135;
      }
    }
  }
  LODWORD(v4_Block_object_dispose(&STACK[0x510], 8) = 0;
  __int16 v49 = 0;
  __int16 v50 = 0;
  LOBYTE(v51) = 0;
  uint64_t v52 = v72;
LABEL_135:
  *(unsigned char *)(a2 + v48 + 1547) = 0;
  if (v8 == 11)
  {
    LODWORD(v64) = *(__int16 *)(v5 + 4);
    if (*(__int16 *)(v5 + 2) > (int)v64) {
      goto LABEL_155;
    }
    uint64_t v65 = *(__int16 *)(v5 + 2);
    do
    {
      if (*(unsigned __int8 *)(a2 + v65 + 1547) == 255)
      {
        uint64_t v66 = v65 + 1;
        if (v65 <= (__int16)v64)
        {
          uint64_t v64 = (__int16)v64;
          do
          {
            *(unsigned char *)(a2 + v64 + 1549) = *(unsigned char *)(a2 + v64 + 1548);
            uint64_t v67 = v64-- + 1;
          }
          while (v67 > v66);
        }
        *(unsigned char *)(a2 + v65 + 1547) = 105;
        *(unsigned char *)(a2 + v66 + 1547) = 106;
        LOWORD(v4_Block_object_dispose(&STACK[0x510], 8) = v48 + 1;
        if ((*(unsigned __int8 *)(v6 + 88) | 2) == 3)
        {
          *(_DWORD *)(v6 + 92) |= 0x40000000u;
          *(unsigned char *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = 3;
        }
      }
      else
      {
        uint64_t v66 = v65 + 1;
      }
      LOWORD(v64) = *(_WORD *)(v5 + 4);
      BOOL v22 = v65 < (__int16)v64;
      uint64_t v65 = v66;
    }
    while (v22);
  }
  if (v8 == 15)
  {
    if ((_BYTE)v51
      && (*(unsigned char *)(v6 + 88) == 2 || (*(unsigned char *)(a2 + 24) & 0x40) != 0 && (*(_DWORD *)(v6 + 92) & 0x80000000) != 0))
    {
      goto LABEL_168;
    }
  }
  else if (v8 == 8 && (*(unsigned char *)(a2 + 24) & 0x40) != 0 && (_BYTE)v51)
  {
    goto LABEL_168;
  }
LABEL_155:
  *(_WORD *)(a2 + 1612) = v48;
  ICchkprepos(a2);
  SLmap(v73, 0, *(__int16 *)(a2 + 1612), (void *)(a2 + 1672), (void *)(a2 + 1664), (void *)(a2 + 1648), (void *)(a2 + 1656));
  if (*(_DWORD *)a2 == 5 && v50) {
    return 9;
  }
  if (!v71
    && v70 != 4
    && v49 <= 1
    && !v50
    && (!*v69
     || SFcltchk(v73, 0, (__int16)(*(_WORD *)(a2 + 1612) - 1), &v75, (_WORD *)&v74 + 1, *v69, *((void *)v69 + 1)) != 10))
  {
    uint64_t v52 = 4;
  }
  if (v8 == 5 && (*(unsigned char *)(a2 + 24) & 0x40) != 0 && (_BYTE)v51)
  {
LABEL_168:
    *(void *)(a2 + 1328) |= 0x1000000uLL;
    return 11;
  }
  return v52;
}

uint64_t ICprever(char *__src, size_t a2)
{
  int v3 = __src;
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  uint64_t v6 = *(void *)(v4 + 248);
  uint64_t v7 = *(void *)(v6 + 56);
  int v8 = *(unsigned __int8 *)(a2 + 8);
  strncpy(__dst, __src, 0x40uLL);
  __dst[64] = 0;
  __int16 v9 = strlen(v3);
  int v10 = *(__int16 *)(v4 + 2);
  int v11 = v9;
  if (v9 <= v10)
  {
    int v11 = *(__int16 *)(v4 + 2);
  }
  else
  {
    int v12 = *(unsigned __int8 *)(a2 + 1338);
    uint64_t v13 = &v3[*(__int16 *)(v4 + 2)];
    uint64_t v14 = v9 - (uint64_t)*(__int16 *)(v4 + 2);
    do
    {
      int v16 = *(unsigned __int8 *)v13++;
      char v15 = v16;
      if (v16 != v12) {
        __dst[v10++] = v15;
      }
      --v14;
    }
    while (v14);
  }
  __dst[v10] = 0;
  uint64_t v17 = *(void *)(v5 + 112);
  if (!*(_WORD *)v17)
  {
    *(_WORD *)(v5 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_WORD *)uint64_t v4 = 0;
    **(_DWORD **)(v5 + 3520) = 0;
    *(_WORD *)(v5 + 102) = 0;
    *(unsigned char *)(*(void *)(v5 + 3496) + 1) = 0;
    **(unsigned char **)(v5 + 3496) = 0;
  }
  *(_WORD *)(v5 + 42) = 100;
  if (v8 == 1)
  {
    if (*(unsigned char *)(a2 + 1547) == 110 && *(unsigned char *)(a2 + 1548) == 101 && (int v18 = *(__int16 *)(a2 + 1612), v18 >= 3))
    {
      *(_WORD *)(a2 + 1612) = v18 - 2;
      size_t v19 = strlen((const char *)(a2 + 1549));
      memmove((void *)(a2 + 1547), (const void *)(a2 + 1549), v19 + 1);
      *(unsigned char *)(v5 + 3512) = 1;
    }
    else
    {
      *(unsigned char *)(v5 + 3512) = 0;
      *(unsigned char *)(a2 + 1614) = 0;
    }
    uint64_t v20 = *(__int16 *)(a2 + 1612);
    __int16 v21 = v20 - 3;
    if (*(unsigned char *)(a2 + v20 - 3 + 1547) == 45
      && (size_t v22 = v20 + a2, *(unsigned char *)(v22 + 1545) == 108)
      && *(unsigned char *)(v22 + 1546) == 105)
    {
      *(_WORD *)(a2 + 1612) = v21;
      *(_WORD *)(a2 + 1624) = 27693;
      *(unsigned char *)(a2 + 1626) = 105;
      *(unsigned char *)(a2 + v21 + 1547) = 0;
    }
    else
    {
      *(unsigned char *)(a2 + 1624) = 0;
    }
  }
  if (!*(_WORD *)(v6 + 88))
  {
    if (!*(_WORD *)v17)
    {
      uint64_t v23 = ICverify((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), a2);
      goto LABEL_82;
    }
    if (v8 == 8 || v8 == 3) && (*(unsigned char *)(a2 + 1331)) {
      return 11;
    }
    int v24 = *(unsigned __int16 *)(v4 + 2);
    __int16 v121 = *(_WORD *)(v4 + 4);
    *(_WORD *)(v4 + 2) = 0;
    *(_WORD *)(v4 + 4) = *(_WORD *)(a2 + 1612) - 1;
    uint64_t v23 = ICclt((char *)(a2 + 1547), a2);
    if (v23 == 3) {
      *(_WORD *)v4 |= 2u;
    }
    __s = (char *)v3;
    if (*(__int16 *)(v4 + 2) <= *(__int16 *)(v4 + 4))
    {
      uint64_t v25 = 0;
      uint64_t v26 = *(__int16 *)(v4 + 2);
      do
      {
        uint64_t v27 = v26;
        *(unsigned char *)(a2 + 1547 + v25++) = *(unsigned char *)(a2 + 1547 + v26++);
      }
      while (v27 < *(__int16 *)(v4 + 4));
      int v125 = v26;
    }
    else
    {
      int v125 = *(__int16 *)(v4 + 2);
      LODWORD(v25) = 0;
    }
    *(unsigned char *)(a2 + v25 + 1547) = 0;
    *(_WORD *)(a2 + 1612) = v25;
    uint64_t v28 = v17;
    int v30 = *(unsigned __int8 *)(v17 + 34);
    uint64_t v29 = (const char *)(v17 + 34);
    if (v30)
    {
      if ((*(unsigned char *)(a2 + 1328) & 0x10) != 0)
      {
        if (!v24)
        {
LABEL_44:
          if (*(unsigned char *)(a2 + 1414) && (*(unsigned char *)(a2 + 1328) & 0x10) != 0) {
            *(_WORD *)(v4 + 2) = v24 - 1;
          }
          int v32 = (unsigned char *)(v28 + 44);
          if (!*(unsigned char *)(v28 + 44) || (uint64_t v33 = *(void *)(a2 + 1328), (v33 & 0x10) != 0))
          {
            if (*(unsigned char *)(a2 + 1415)) {
              goto LABEL_56;
            }
            __int16 v35 = v121;
          }
          else
          {
            if ((v33 & 0x80000) != 0) {
              int v34 = (const char *)(v28 + 18);
            }
            else {
              int v34 = (const char *)(v28 + 44);
            }
            __int16 v35 = v121 - (*(unsigned char *)(a2 + 1415) != 0) - strlen(v34);
          }
          *(_WORD *)(v4 + 4) = v35;
LABEL_56:
          uint64_t v36 = *(void *)(a2 + 1328);
          if ((v36 & 0x10) != 0) {
            *(_WORD *)(v5 + 102) = 1;
          }
          if ((v36 & 0x2000) != 0) {
            *(_WORD *)(a2 + 1612) = v25 + 1;
          }
          if (v23 == 10 && *(_DWORD *)(a2 + 1308))
          {
            if (!*v29) {
              goto LABEL_67;
            }
            if (__s[*(__int16 *)(v4 + 2)] == *(unsigned char *)(a2 + 1338)) {
              *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v36 | 8;
            }
          }
          if (*v29) {
            *(unsigned char *)(v28 + 16) = SLcap((uint64_t)__dst, 0, (__int16)(*(_WORD *)(v4 + 2) - 1), (void *)(v28 + 80), v7);
          }
LABEL_67:
          int v116 = v8;
          __int16 v37 = *(_WORD *)(v4 + 4);
          if (*v32)
          {
            uint64_t v38 = v7;
            __int16 v39 = v37 + 1;
            __int16 v40 = strlen(__s);
            uint64_t v41 = v28;
            int v42 = v39;
            uint64_t v7 = v38;
            *(unsigned char *)(v28 + 17) = SLcap((uint64_t)__dst, v42, v40, (void *)(v28 + 80), v38);
            __int16 v37 = *(_WORD *)(v4 + 4);
          }
          else
          {
            uint64_t v41 = v28;
          }
          int v43 = SLcap((uint64_t)__dst, *(__int16 *)(v4 + 2), v37, (void *)(v41 + 80), v7);
          *(unsigned char *)(v41 + 76) = v43;
          if (v43 != 2)
          {
            uint64_t v17 = v28;
            int v8 = v116;
            int v3 = __s;
            int v11 = v125;
            goto LABEL_82;
          }
          *(void *)(v41 + 80) = -1;
          if (*v29 && *(unsigned char *)(v28 + 16) == 1 && strlen(v29) == 2) {
            *(unsigned char *)(v28 + 16) = 2;
          }
          int v8 = v116;
          int v11 = v125;
          if (*v32)
          {
            uint64_t v17 = v28;
            if (*(unsigned char *)(v28 + 17) == 1)
            {
              size_t v44 = strlen((const char *)(v28 + 44));
              int v3 = __s;
              if (v44 == 2) {
                *(unsigned char *)(v17 + 17) = 2;
              }
              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v17 = v28;
          }
          int v3 = __s;
          goto LABEL_82;
        }
        __int16 v31 = *(_WORD *)(v4 + 2) + v24;
      }
      else
      {
        __int16 v31 = v24 + strlen(v29);
      }
    }
    else
    {
      __int16 v31 = v24;
    }
    *(_WORD *)(v4 + 2) = v31;
    goto LABEL_44;
  }
  *(_WORD *)(*(void *)(v4 + 280) + 1742) = 0;
  uint64_t v23 = ICcmpver(a2);
  if ((*(_WORD *)v4 & 8) != 0 && (*(unsigned char *)(a2 + 1328) & 0x20) != 0) {
    return 11;
  }
LABEL_82:
  if (*(_DWORD *)(v5 + 3472)) {
    *(_WORD *)(a2 + 1322) |= 8u;
  }
  if (v8 == 5)
  {
    if (*(unsigned char *)(a2 + 1331)) {
      return 11;
    }
  }
  else if (v8 == 1 && *(unsigned char *)(v5 + 3512))
  {
    int v46 = *(__int16 *)(a2 + 1612);
    if ((v46 & 0x80000000) == 0)
    {
      memmove((void *)(a2 + 1549), (const void *)(a2 + 1547), *(unsigned __int16 *)(a2 + 1612) + 1);
      LOWORD(v46) = *(_WORD *)(a2 + 1612);
    }
    *(_WORD *)(a2 + 1547) = 25966;
    __int16 v47 = v46 + 2;
    *(_WORD *)(a2 + 1612) = v47;
    *(unsigned char *)(v5 + 3512) = 0;
    if (v23 != 11)
    {
      if (v23 != 10) {
        goto LABEL_104;
      }
      if (**(unsigned char **)(v5 + 3496))
      {
        uint64_t v23 = 10;
        goto LABEL_104;
      }
    }
    uint64_t v23 = ICverify((char *)(a2 + 1547), v47, a2);
  }
  if (v23 == 11)
  {
    __sa = (char *)v17;
    int v126 = v11;
    char v48 = 0;
    BOOL v122 = 0;
    __int16 v119 = 0;
    int v120 = 0;
    int v49 = 0;
    int v118 = 0;
    uint64_t v45 = 11;
    char v50 = 1;
    goto LABEL_98;
  }
LABEL_104:
  __sa = (char *)v17;
  uint64_t v53 = ICfndchk(a2);
  uint64_t v45 = v53;
  BOOL v54 = v53 != 11;
  uint64_t v55 = *(void *)(a2 + 1328);
  if ((v55 & 0x401) != 0 && *(unsigned char *)(a2 + 1412) && !*(unsigned char *)(a2 + 1624) && (*(_WORD *)(a2 + 1322) & 1) == 0)
  {
    BOOL v122 = v53 != 11;
    int v126 = v11;
    char v48 = 0;
    __int16 v119 = *(_WORD *)(v5 + 18);
    int v120 = 1;
    uint64_t v56 = -1026;
    int v118 = *(void *)(a2 + 1328);
LABEL_132:
    strncpy(v129, (const char *)(a2 + 1690), 0x40uLL);
    char v130 = 0;
    SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(unsigned char **)(v5 + 48), *(_WORD **)(v5 + 64));
    int v49 = 0;
    *(void *)(a2 + 1328) &= v56;
    *(_WORD *)v4 &= ~4u;
    char v50 = v48;
    goto LABEL_98;
  }
  if (v8 != 6 || (v55 & 0x10) == 0 || !*(unsigned char *)(a2 + 1412))
  {
    if ((v55 & 0x400) == 0 || !*(unsigned char *)(a2 + 1416) || v8 && ((1 << (v8 - 1)) & 0xC420) == 0)
    {
      if (v23 == 2 || v53 == 2) {
        goto LABEL_126;
      }
      if (v53 == 10)
      {
LABEL_124:
        *(_DWORD *)(a2 + 4) = v23;
        return v23;
      }
LABEL_127:
      *(_DWORD *)(a2 + 4) = v45;
      return v45;
    }
    if (*(_WORD *)(a2 + 1322))
    {
      if ((int)v53 >= (int)v23) {
        uint64_t v45 = v23;
      }
      else {
        uint64_t v45 = v53;
      }
      goto LABEL_127;
    }
    BOOL v122 = v53 != 11;
    int v126 = v11;
    __int16 v119 = 0;
    int v120 = 0;
    int v118 = 0;
    char v48 = 1;
    uint64_t v56 = -1025;
    goto LABEL_132;
  }
  int v57 = (unsigned __int8 *)(a2 + 1547);
  strncpy(v129, (const char *)(a2 + 1547), 0x40uLL);
  char v130 = 0;
  int v126 = v11;
  BOOL v122 = v54;
  if (!*(unsigned char *)(v5 + 88))
  {
    __int16 v119 = 0;
    int v120 = 0;
    int v118 = 0;
    char v117 = 0;
    int v49 = 1;
    char v50 = 1;
    goto LABEL_134;
  }
  do
  {
    uint64_t v58 = *v57;
    if ((*(_DWORD *)(v7 + 4 * v58) & 0x40000000) != 0) {
      LOBYTE(v5_Block_object_dispose(&STACK[0x510], 8) = v58 + 32;
    }
    *v57++ = v58;
  }
  while ((_BYTE)v58);
  char v48 = 0;
  __int16 v119 = 0;
  int v120 = 0;
  int v118 = 0;
  char v50 = 1;
  int v49 = 1;
LABEL_98:
  if (v45 == 11 && v8 == 16)
  {
    v129[0] = 0;
    if (SLord((uint64_t)v3, v129, *(__int16 *)(v4 + 2), *(__int16 *)(v4 + 4), v7))
    {
      *(_WORD *)(v5 + 3492) |= 1u;
      if (!v129[0])
      {
        uint64_t v45 = 10;
        goto LABEL_127;
      }
      __int16 v51 = strlen(v129);
      SFadd(v129, v51, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
      uint64_t v52 = *(void *)(a2 + 1328) | 0x4000;
      goto LABEL_103;
    }
    char v117 = v48;
    uint64_t v45 = 11;
  }
  else
  {
    char v117 = v48;
  }
LABEL_134:
  int v59 = (int *)(v5 + 92);
  if (*(unsigned char *)(a2 + 1412) && !*(unsigned char *)(a2 + 1624))
  {
    uint64_t v66 = *(void *)(a2 + 1328);
    if ((v66 & 0x200) != 0)
    {
      *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v66 & 0xFFFFFFFFFFFFFDFFLL;
      int v115 = 1;
    }
    else
    {
      int v115 = 0;
    }
    uint64_t v102 = *(__int16 *)(a2 + 1612);
    if (v102 <= 63)
    {
      size_t v103 = a2 + 1547;
      *(unsigned char *)(v103 + v102) = 46;
      __int16 v104 = *(_WORD *)(a2 + 1612) + 1;
      *(_WORD *)(a2 + 1612) = v104;
      *(unsigned char *)(v103 + v104) = 0;
    }
    ++*(_WORD *)(v4 + 4);
    int v114 = (char *)(a2 + 1482);
    ICadjpost((char *)(a2 + 1482));
    unsigned int v113 = (char *)(a2 + 1547);
    uint64_t v105 = ICverify((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), a2);
    if (v105 == 11)
    {
      if ((v66 & 0x200) != 0)
      {
        *(void *)(a2 + 1328) |= 0x200uLL;
        *(_WORD *)v4 |= 4u;
      }
      ICreadjpo(v114);
      __int16 v106 = *(_WORD *)(a2 + 1612) - 1;
      *(_WORD *)(a2 + 1612) = v106;
      --*(_WORD *)(v4 + 4);
      *(unsigned char *)(a2 + v106 + 1547) = 0;
      if ((v49 | v120) == 1)
      {
        if ((v50 & 1) == 0)
        {
          __int16 v112 = strlen(v129);
          SFadd(v129, v112, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
          *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v118;
          *(_WORD *)(v5 + 1_Block_object_dispose(&STACK[0x510], 8) = v119;
          int v59 = (int *)(v5 + 92);
          if ((v118 & 0x400) != 0)
          {
            *(_WORD *)v4 |= 4u;
            uint64_t v45 = 2;
          }
          else
          {
            uint64_t v45 = 3;
          }
LABEL_233:
          int v60 = v115;
          if (!v8) {
            goto LABEL_138;
          }
          goto LABEL_137;
        }
        strncpy(v113, v129, 0x40uLL);
        *(unsigned char *)(a2 + 1611) = 0;
        uint64_t v45 = 10;
      }
      else
      {
        uint64_t v45 = 11;
      }
      int v59 = (int *)(v5 + 92);
      goto LABEL_233;
    }
    uint64_t v23 = v105;
    if (!*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x20008) != 0 || (*(_WORD *)v4 & 0x10) != 0)
    {
      *(_WORD *)(v5 + 18) |= 0x800u;
      *(void *)(v5 + 3480) = 0;
    }
    uint64_t v107 = ICfndchk(a2);
    uint64_t v45 = v107;
    uint64_t v108 = *(void *)(a2 + 1328);
    if ((v108 & 0x400) != 0 && *(unsigned char *)(a2 + 1412))
    {
      if (v122 && v107 == 10)
      {
        *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v108 & 0xFFFFFFFFFFFFFBFFLL;
        *(_WORD *)v4 &= ~4u;
        SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(unsigned char **)(v5 + 48), *(_WORD **)(v5 + 64));
        SLrecap((unsigned __int8 *)v113, *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(*(void *)(v5 + 72) + v126), v5 + 92, *(unsigned __int8 *)(v5 + 88), v7);
      }
      goto LABEL_127;
    }
    if (v107 == 10)
    {
      if (*v114) {
        ICadjpost(v114);
      }
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  int v60 = 0;
  if (!v8) {
    goto LABEL_138;
  }
LABEL_137:
  if (((1 << (v8 - 1)) & 0xC420) == 0) {
    goto LABEL_153;
  }
LABEL_138:
  if (!*(unsigned char *)(a2 + 1416)) {
    goto LABEL_153;
  }
  strcpy(__srca, "'");
  strlen(__srca);
  __strncat_chk();
  int v61 = strncpy((char *)(a2 + 1547), __srca, 0x40uLL);
  *(unsigned char *)(a2 + 1611) = 0;
  __int16 v62 = *(_WORD *)(a2 + 1612) + 1;
  *(_WORD *)(a2 + 1612) = v62;
  *(unsigned char *)(a2 + 1547 + v62) = 0;
  unsigned int v63 = ICverify(v61, *(__int16 *)(a2 + 1612), a2);
  unsigned int v64 = v63;
  if (v63 == 10)
  {
    if (*(_DWORD *)(a2 + 1408))
    {
      *(void *)(a2 + 1328) &= ~0x400uLL;
      *(_WORD *)v4 &= ~4u;
      SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(unsigned char **)(v5 + 48), *(_WORD **)(v5 + 64));
      *(unsigned char *)(a2 + 1416) = 0;
      __int16 v65 = *(_WORD *)(v4 + 2) - 1;
      *(_WORD *)(v4 + 2) = v65;
      *(unsigned char *)(v5 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap((uint64_t)v3, v65, *(__int16 *)(v4 + 4), v59, v7);
      uint64_t v45 = ICfndchk(a2);
      *(unsigned char *)(strlen((const char *)(a2 + 1417)) + a2 + 1417 - 1) = 0;
      goto LABEL_153;
    }
    goto LABEL_150;
  }
  char v67 = v117 ^ 1;
  if (v63 != 11) {
    char v67 = 1;
  }
  if (v67)
  {
LABEL_150:
    size_t v71 = strlen((const char *)(a2 + 1548));
    memmove((void *)(a2 + 1547), (const void *)(a2 + 1548), v71 + 1);
    --*(_WORD *)(a2 + 1612);
    if (v45 == 11) {
      uint64_t v45 = v64;
    }
    else {
      uint64_t v45 = v45;
    }
    goto LABEL_153;
  }
  size_t v68 = strlen((const char *)(a2 + 1548));
  memmove((void *)(a2 + 1547), (const void *)(a2 + 1548), v68 + 1);
  --*(_WORD *)(a2 + 1612);
  __int16 v69 = strlen(v129);
  SFadd(v129, v69, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
  uint64_t v70 = *(void *)(a2 + 1328);
  *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v70 | 0x400;
  *(_WORD *)v4 |= 4u;
  if (v60) {
    *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v70 | 0x600;
  }
  uint64_t v45 = 2;
LABEL_153:
  if ((v8 - 15) > 1 || !*(unsigned char *)(a2 + 1415))
  {
    uint64_t v78 = v7;
    goto LABEL_161;
  }
  uint64_t v72 = *(__int16 *)(a2 + 1612);
  if (v72 <= 63)
  {
    size_t v73 = a2 + 1547;
    *(unsigned char *)(v73 + v72) = 39;
    __int16 v74 = *(_WORD *)(a2 + 1612) + 1;
    *(_WORD *)(a2 + 1612) = v74;
    *(unsigned char *)(v73 + v74) = 0;
    LOWORD(v72) = *(_WORD *)(a2 + 1612);
  }
  unsigned int v75 = ICverify((char *)(a2 + 1547), (__int16)v72, a2);
  if (v75 != 10)
  {
    char v97 = v117 ^ 1;
    if (v75 != 11) {
      char v97 = 1;
    }
    if ((v97 & 1) == 0)
    {
      __int16 v98 = *(_WORD *)(a2 + 1612) - 1;
      *(_WORD *)(a2 + 1612) = v98;
      *(unsigned char *)(a2 + v98 + 1547) = 0;
      __int16 v99 = strlen(v129);
      SFadd(v129, v99, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
      uint64_t v100 = *(void *)(a2 + 1328);
      *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v100 | 0x400;
      *(_WORD *)v4 |= 4u;
      if (v60) {
        *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v100 | 0x600;
      }
      return 2;
    }
    goto LABEL_204;
  }
  if (!*(_DWORD *)(a2 + 1408))
  {
LABEL_204:
    uint64_t v78 = v7;
    __int16 v101 = *(_WORD *)(a2 + 1612) - 1;
    *(_WORD *)(a2 + 1612) = v101;
    *(unsigned char *)(a2 + v101 + 1547) = 0;
    if (v45 == 11) {
      uint64_t v45 = v75;
    }
    else {
      uint64_t v45 = v45;
    }
    goto LABEL_161;
  }
  *(void *)(a2 + 1328) &= ~0x400uLL;
  *(_WORD *)v4 &= ~4u;
  SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(unsigned char **)(v5 + 48), *(_WORD **)(v5 + 64));
  *(unsigned char *)(a2 + 1415) = 0;
  __int16 v76 = *(_WORD *)(v4 + 4) + 1;
  *(_WORD *)(v4 + 4) = v76;
  uint64_t v77 = (uint64_t)v3;
  uint64_t v78 = v7;
  *(unsigned char *)(v5 + 8_Block_object_dispose(&STACK[0x510], 8) = SLcap(v77, *(__int16 *)(v4 + 2), v76, v59, v7);
  uint64_t v45 = ICfndchk(a2);
  size_t v79 = strlen((const char *)(a2 + 1483));
  memmove((void *)(a2 + 1482), (const void *)(a2 + 1483), v79 + 1);
LABEL_161:
  if (v45 == 11)
  {
    if (*(unsigned char *)(a2 + 1412) && !*(unsigned char *)(a2 + 1624))
    {
      uint64_t v80 = *(__int16 *)(a2 + 1612);
      if (v80 <= 63)
      {
        size_t v81 = a2 + 1547;
        *(unsigned char *)(v81 + v80) = 46;
        __int16 v82 = *(_WORD *)(a2 + 1612) + 1;
        *(_WORD *)(a2 + 1612) = v82;
        *(unsigned char *)(v81 + v82) = 0;
      }
      ++*(_WORD *)(v4 + 4);
      ICadjpost((char *)(a2 + 1482));
    }
    uint64_t v45 = ICacrnym(a2 + 1547, *(_WORD *)(a2 + 1612), v59, a2);
    if (v45 == 11)
    {
      if (*(unsigned char *)(a2 + 1412) && !*(unsigned char *)(a2 + 1624))
      {
        ICreadjpo((char *)(a2 + 1482));
        __int16 v83 = *(_WORD *)(a2 + 1612) - 1;
        *(_WORD *)(a2 + 1612) = v83;
        --*(_WORD *)(v4 + 4);
        *(unsigned char *)(a2 + v83 + 1547) = 0;
      }
      if (v8 != 15 || (uint64_t v45 = ICgreek(a2, 0), v45 == 11))
      {
        if (!*(_DWORD *)(a2 + 1672) && !*(_DWORD *)(a2 + 1664)
          || v8 == 12 && __sa[44]
          || (uint64_t v45 = ichhchk((uint64_t)__dst, a2), v45 == 11))
        {
          if ((*(unsigned char *)(a2 + 1328) & 3) == 0)
          {
            if (ICpar(v133, (uint64_t)v132, a2)
              || strlen((const char *)(a2 + 1547)) > 0x40
              || !SLstrcmp(v133, (unsigned __int8 *)(a2 + 1547)))
            {
              *(_DWORD *)(a2 + 4) = 11;
            }
            else
            {
              __strcpy_chk();
              __strcpy_chk();
              __int16 v84 = strlen((const char *)(a2 + 1547));
              *(_WORD *)(a2 + 1612) = v84;
              uint64_t v85 = ICverify((char *)(a2 + 1547), v84, a2);
              if (v85 == 10)
              {
                if ((int)(strlen(v131) << 16) >= 1)
                {
                  char v86 = 0;
                  unint64_t v87 = 0;
                  int v88 = 0;
                  do
                  {
                    if (v131[v87] != v133[v88])
                    {
                      uint64_t v89 = *(unsigned int **)(v5 + 80);
                      if (v87 <= 0x1F)
                      {
                        unsigned int v92 = *v89;
                        HIDWORD(v93) = *v89;
                        LODWORD(v93) = v89[1];
                        v89[1] = v93 >> 1;
                        char v91 = 32;
                        int v90 = v87;
                      }
                      else
                      {
                        int v90 = v87 - 32;
                        char v91 = 64;
                        unsigned int v92 = v89[1];
                        ++v89;
                      }
                      --v88;
                      unsigned int v94 = v92 & (0xFFFFFFFF >> v90);
                      int v95 = (-1 << (v86 + v91)) & v92;
                      if (!v90) {
                        int v95 = 0;
                      }
                      *uint64_t v89 = v95 | (v94 >> 1);
                      if (*(_DWORD *)(a2 + 1308))
                      {
                        int v96 = *(unsigned __int8 *)(a2 + 8);
                        if ((v96 | 0x10) != 0x10 && ((1 << (v96 - 1)) & 0x994) == 0) {
                          ICaddbit((unsigned int *)(v5 + 3480), v87, 0);
                        }
                      }
                    }
                    ++v88;
                    ++v87;
                    --v86;
                  }
                  while ((uint64_t)v87 < (__int16)strlen(v131));
                }
                __strcpy_chk();
                *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
                uint64_t v45 = ICfndchk(a2);
                if (SLstrcmp(v132, (unsigned __int8 *)v131))
                {
                  SFadd((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
                  uint64_t v52 = *(void *)(a2 + 1328) | 0x20000000;
LABEL_103:
                  *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = v52;
                  *(_WORD *)v4 |= 4u;
LABEL_126:
                  uint64_t v45 = 2;
                  goto LABEL_127;
                }
                *(_DWORD *)(a2 + 4) = 10;
              }
              else
              {
                uint64_t v45 = v85;
                *(_DWORD *)(a2 + 4) = 11;
                __strcpy_chk();
                *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
              }
              if (v45 != 11) {
                return v45;
              }
            }
          }
          uint64_t v109 = *(__int16 *)(a2 + 1612);
          if ((int)v109 < 1)
          {
            LODWORD(v110) = 0;
          }
          else
          {
            uint64_t v110 = 0;
            while ((*(_DWORD *)(v78 + 4 * *(unsigned __int8 *)(a2 + 1547 + v110)) & 0x80) != 0)
            {
              if (v109 == ++v110) {
                goto LABEL_243;
              }
            }
          }
          if (v110 == v109)
          {
LABEL_243:
            *(_WORD *)(v5 + 102) = 1;
            **(unsigned char **)(v5 + 72) = 0;
            **(void **)(v5 + 80) = 0;
            return ICfndchk(a2);
          }
          return 11;
        }
      }
    }
  }
  return v45;
}

uint64_t ICadjpost(char *a1)
{
  unsigned __int16 v2 = strlen(a1) - 1;
  if ((v2 & 0x8000) == 0)
  {
    uint64_t v3 = v2;
    strncpy(a1, a1 + 1, v2);
    a1[v3] = 0;
  }
  return 0;
}

uint64_t ICreadjpo(char *a1)
{
  unsigned __int8 v2 = strlen(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    do
    {
      a1[v3] = a1[(v3 - 1)];
      --v3;
    }
    while ((_BYTE)v3);
  }
  *a1 = 46;
  a1[v2 + 1] = 0;
  return 0;
}

uint64_t ICacrnym(uint64_t a1, __int16 a2, int *a3, uint64_t a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v4 = (__int16)(a2 - 1);
  if (v4 > 32) {
    return 11;
  }
  uint64_t v8 = *(void *)(a4 + 3184);
  uint64_t v9 = *(void *)(v8 + 264);
  int v57 = (_WORD *)v8;
  uint64_t v10 = *(void *)(v8 + 248);
  uint64_t v11 = *(void *)(v9 + 112);
  BOOL v12 = v4 > 0 && *(unsigned char *)(a1 + (__int16)(a2 - 1)) == 115;
  int v13 = v12;
  int v58 = v13;
  if (v12)
  {
    BOOL v61 = (unsigned __int16)(a2 - 2) != 0 && *(unsigned char *)(a1 + (unsigned __int16)(a2 - 2)) == 39;
    if (v61) {
      LOWORD(v4) = a2 - 3;
    }
    else {
      LOWORD(v4) = a2 - 2;
    }
  }
  else
  {
    BOOL v61 = 0;
  }
  uint64_t v56 = *(void *)(v10 + 56);
  int v16 = *(unsigned __int8 *)(v11 + 34);
  uint64_t v14 = (const char *)(v11 + 34);
  int v15 = v16;
  int v17 = *a3;
  if (v16)
  {
    char v18 = strlen(v14);
    int v19 = a3[2];
    int v20 = v17 << v18;
    *a3 = v17 << v18;
    int v60 = v19;
    a3[2] = v19 << v18;
    int v21 = 1;
  }
  else
  {
    int v60 = 0;
    int v21 = 0;
    int v20 = *a3;
    int v17 = 0;
  }
  uint64_t v22 = (__int16)v4;
  do
  {
    __int16 v23 = v22 - 2;
    if (v22 < 1) {
      break;
    }
    int v24 = *(unsigned __int8 *)(a1 + v22);
    v22 -= 2;
  }
  while (v24 == 46);
  unsigned int v25 = (v20 ^ 0xAAAAAAAA) >> (32 - v4);
  BOOL v27 = (__int16)v4 > 0 && v25 != 0;
  if (v23 != -3 || v27)
  {
    if (v15)
    {
      *a3 = v17;
      a3[2] = v60;
    }
    return 11;
  }
  if ((v4 & 0x8000) != 0)
  {
    int v30 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    char v29 = 0;
    int v30 = 0;
    LODWORD(v31) = (__int16)(v4 + 1);
    if ((int)v31 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v31;
    }
    do
    {
      int v32 = *(unsigned __int8 *)(a1 + v28);
      if (v32 == 46)
      {
        a3[(unsigned __int16)v28 >> 5] &= ~(1 << ~v29);
        int v33 = a3[(unsigned __int16)v30 >> 5];
        int v34 = 1 << ~(_BYTE)v30;
        a3[(unsigned __int16)v30 >> 5] = v33 & ~v34;
        uint64_t v35 = (unsigned __int16)++v28 >> 5;
        int v36 = a3[v35];
        int v37 = 1 << ~(v29 + 1);
        if ((v36 & v37) != 0)
        {
          a3[(unsigned __int16)v30 >> 5] = v33 | v34;
          int v36 = a3[v35];
        }
        a3[v35] = v36 & ~v37;
      }
      else
      {
        __src[(__int16)v30] = v32;
        ++v28;
        ++v30;
      }
      char v29 = v28;
    }
    while (v28 != v31);
  }
  int v59 = v17;
  int v38 = v58 & *(_DWORD *)&v61 & (*(unsigned __int8 *)(a4 + 20) >> 7) ^ 1;
  __dst = (char *)(a4 + 3090);
  int v39 = v30;
  do
  {
    while (1)
    {
      if (v61 && (unsigned __int16)v38 != 0)
      {
        __int16 v40 = v39 + 1;
        __src[(__int16)v39] = 39;
        int v41 = 2;
      }
      else
      {
        if (!v58) {
          goto LABEL_47;
        }
        int v41 = 1;
        __int16 v40 = v39;
      }
      v39 += v41;
      __src[v40] = 115;
LABEL_47:
      __int16 v42 = v39;
      __src[(__int16)v39] = 0;
      int v43 = (__int16)v39;
      int v44 = ICverify(__src, (__int16)v39--, a4);
      if (v61 && (unsigned __int16)v38 != 0) {
        __int16 v45 = v39;
      }
      else {
        __int16 v45 = v42;
      }
      if (v44 == 10
        && (!*(unsigned char *)(a4 + 8) || ((1 << (*(unsigned char *)(a4 + 8) - 1)) & 0x20008) != 0 || (*v57 & 0x10) != 0))
      {
        *(void *)(v9 + 3480) = 0;
      }
      if (v21)
      {
        *a3 = v59;
        a3[2] = v60;
      }
      if (*(__int16 *)(v9 + 102) < 1)
      {
        BOOL v47 = 0;
        uint64_t v48 = 0;
      }
      else
      {
        int v46 = *(unsigned char **)(v9 + 72);
        if (*v46 == 2)
        {
          BOOL v47 = 1;
          uint64_t v48 = 1;
        }
        else
        {
          unint64_t v49 = *(unsigned __int16 *)(v9 + 102);
          uint64_t v50 = 1;
          while (1)
          {
            unint64_t v51 = v50;
            if (v49 == v50) {
              break;
            }
            int v52 = v46[v50++];
            if (v52 == 2)
            {
              uint64_t v48 = 1;
              goto LABEL_66;
            }
          }
          uint64_t v48 = 0;
LABEL_66:
          BOOL v47 = v51 < v49;
        }
      }
      if (v44 != 10) {
        break;
      }
      BOOL v12 = ~**(_DWORD **)(v9 + 80) >> -(__int16)(v45 + ((__int16)((_WORD)v58 << 15) >> 15)) == 0;
      BOOL v53 = !v47;
      if (v12) {
        BOOL v53 = 0;
      }
      if (!v53)
      {
        strncpy(__dst, __src, 0x40uLL);
        *(unsigned char *)(a4 + 3154) = 0;
        SLrecap((unsigned __int8 *)__src, v43, *(unsigned __int8 *)(*(void *)(v9 + 72) + v48), *(void *)(v9 + 80) + 8 * v48, *(unsigned __int8 *)(v9 + 88), v56);
        SFadd(__src, v43, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(void *)(v9 + 48), *(void *)(v9 + 64));
        strncpy(__src, __dst, 0x40uLL);
        __src[64] = 0;
        *(unsigned char *)(a4 + 3090) = 0;
        *v57 |= 4u;
        *(_WORD *)(a4 + 1322) |= 0x80u;
        *(void *)(a4 + 1328) &= ~0x400uLL;
        int v44 = 2;
        break;
      }
      int v21 = 0;
      BOOL v12 = (unsigned __int16)v38 == 0;
      LOWORD(v3_Block_object_dispose(&STACK[0x510], 8) = 1;
      if (!v12) {
        return 11;
      }
    }
    int v21 = 0;
    BOOL v12 = (unsigned __int16)v38 == 0;
    LOWORD(v3_Block_object_dispose(&STACK[0x510], 8) = 1;
  }
  while (v12);
  if (v44 == 2)
  {
    ICfndchk(a4);
    return 2;
  }
  return 11;
}

uint64_t ichhchk(uint64_t a1, size_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a2 + 3184) + 264);
  uint64_t v5 = *(void *)(v4 + 112);
  if (*(__int16 *)(a2 + 1612) < 1)
  {
    __int16 v8 = 0;
    __int16 v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    __int16 v7 = 0;
    __int16 v8 = 0;
    uint64_t v9 = *(unsigned __int16 *)(a2 + 1612);
    do
    {
      int v10 = *(unsigned __int8 *)(a2 + 1547 + v6);
      if ((v10 | 2) == 0x2F)
      {
        __int16 v7 = v6;
      }
      else
      {
        uint64_t v11 = v8++;
        __s[v11] = v10;
      }
      ++v6;
    }
    while (v9 != v6);
  }
  __s[v8] = 0;
  int v12 = v8;
  int v13 = ICverify(__s, v8, a2);
  if (*(unsigned char *)(v5 + 44) || *(unsigned char *)(v5 + 34)) {
    goto LABEL_11;
  }
  if (v13 == 10)
  {
    SFadd(__s, v12, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(void *)(v4 + 48), *(void *)(v4 + 64));
  }
  else
  {
    if (v13 != 2)
    {
LABEL_11:
      uint64_t v14 = *(void *)(a2 + 3184);
      int v15 = *(__int16 *)(v14 + 2);
      if (*(__int16 *)(v14 + 4) >= v15)
      {
        __int16 v17 = 0;
        do
        {
          __s[v17] = *(unsigned char *)(a1 + (__int16)v15);
          LOWORD(v15) = v15 + 1;
          ++v17;
        }
        while (*(__int16 *)(v14 + 4) >= (__int16)v15);
        uint64_t v16 = v17;
      }
      else
      {
        uint64_t v16 = 0;
      }
      __s[v16] = 0;
      uint64_t result = ICdblver(__s, a2);
      if (result != 11) {
        return ICfndchk(a2);
      }
      return result;
    }
    if ((*(_WORD *)(a2 + 1322) & 0x200) != 0)
    {
      *(_WORD *)(a2 + 1322) &= ~0x200u;
      *(void *)(a2 + 1328) &= ~0x20uLL;
      goto LABEL_11;
    }
  }
  **(_WORD **)(a2 + 3184) |= 4u;
  *(void *)(a2 + 1328) |= 0x800000uLL;
  if (*(unsigned char *)(a2 + 8) == 3) {
    puntvolat_to_period_list(a2);
  }
  if (*(unsigned char *)(v4 + 88) == 3)
  {
    int v19 = *(unsigned char **)(v4 + 72);
    if (*v19 == 3 || *(__int16 *)(v4 + 102) >= 2 && v19[1] == 3)
    {
      int v20 = *(__int16 *)(a2 + 1612);
      if (v20 > v7)
      {
        uint64_t v21 = v4 + 92;
        int v22 = v7;
        do
        {
          int v23 = 1 << ~(_BYTE)v22;
          if ((*(_DWORD *)(v21 + 4 * ((unsigned __int16)v22 >> 5)) & v23) != 0)
          {
            *(_DWORD *)(v21 + 4 * ((unsigned __int16)(v22 - 1) >> 5)) |= 1 << -(char)v22;
            *(_DWORD *)(v21 + 4 * ((unsigned __int16)v22 >> 5)) &= ~v23;
          }
          ++v22;
        }
        while (v20 != v22);
      }
    }
  }
  ICfndchk(a2);
  return 2;
}

unsigned int *ICaddbit(unsigned int *result, unsigned int a2, int a3)
{
  if (a2 <= 0x1F)
  {
    unsigned int v6 = *result;
    HIDWORD(v7) = *result;
    LODWORD(v7) = result[1];
    result[1] = v7 >> 1;
    char v4 = 31;
    char v5 = 32;
    unsigned int v3 = a2;
  }
  else
  {
    unsigned int v3 = a2 - 32;
    char v4 = 63;
    char v5 = 64;
    unsigned int v6 = result[1];
    ++result;
  }
  unsigned int v8 = v6 & (0xFFFFFFFF >> v3);
  int v9 = v6 & (-1 << (v5 - a2));
  if (v3) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  *uint64_t result = v10 | (a3 << (v4 - a2)) | (v8 >> 1);
  return result;
}

uint64_t ICremacc(char *__s, int a2, uint64_t a3)
{
  unsigned int v3 = __s;
  uint64_t v4 = *(void *)(a3 + 3184);
  uint64_t v5 = *(void *)(*(void *)(v4 + 248) + 56);
  if (a2 == 2)
  {
    uint64_t v10 = *(__int16 *)(*(void *)(v4 + 280) + 1502);
    uint64_t v11 = __s[v10];
    if ((*(_DWORD *)(v5 + 4 * v11) & 0x40000) == 0) {
      return 0;
    }
    uint64_t result = 0;
    if ((*(_DWORD *)(v5 + 4 * v11) & 0x20000000) != 0) {
      LOBYTE(v11) = v11 - 32;
    }
    v3[v10] = v11;
    uint64_t v13 = chkaccent[v11 - 192];
    v3[v10] = v13;
    if ((*(_DWORD *)(v5 + 4 * v13) & 0x40000000) != 0) {
      LOBYTE(v13) = v13 + 32;
    }
    v3[v10] = v13;
  }
  else
  {
    if (a2 == 3)
    {
      for (uint64_t i = (unsigned __int16)strlen(__s); i; --i)
      {
        uint64_t v8 = *v3;
        if ((*(_DWORD *)(v5 + 4 * v8) & 0x4020000) != 0)
        {
          if ((*(_DWORD *)(v5 + 4 * v8) & 0x20000000) != 0) {
            LOBYTE(v_Block_object_dispose(&STACK[0x510], 8) = v8 - 32;
          }
          char *v3 = v8;
          uint64_t v9 = chkaccent[v8 - 192];
          char *v3 = v9;
          if ((*(_DWORD *)(v5 + 4 * v9) & 0x40000000) != 0) {
            LOBYTE(v9) = v9 + 32;
          }
          char *v3 = v9;
          *(_WORD *)(*(void *)(*(void *)(a3 + 3184) + 264) + 3492) |= 0x10u;
        }
        ++v3;
      }
      return 0;
    }
    return 8;
  }
  return result;
}

uint64_t ICspl(char *__s, size_t a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  char v100 = 0;
  *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_WORD *)(a2 + 1404) = 0;
  *(_WORD *)(a2 + 1336) = 0;
  unsigned int v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    *(_WORD *)(a2 + 1320) = 0;
    uint64_t v4 = ICint(a2);
    if (v4 == 8) {
      ICtrm(a2);
    }
    goto LABEL_7;
  }
  if ((*(_WORD *)(a2 + 1320) & 0x80) == 0)
  {
    *(void *)(a2 + 132_Block_object_dispose(&STACK[0x510], 8) = 2048;
LABEL_6:
    uint64_t v4 = 8;
    goto LABEL_7;
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + 8);
  if (v3 > 0x16 || ((1 << v3) & 0x600004) == 0)
  {
    int v19 = *(unsigned __int16 *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 3184);
    uint64_t v9 = *(void *)(v11 + 264);
    uint64_t v10 = *(void *)(v11 + 248);
    *(_WORD *)uint64_t v9 = v3;
    *(void *)(v9 + 4_Block_object_dispose(&STACK[0x510], 8) = a2 + 1690;
    *(void *)(v9 + 64) = a2 + 2890;
    int v20 = *(_DWORD *)(a2 + 20);
    uint64_t v21 = (_WORD *)(v9 + 3488);
    if (v20 == 16)
    {
      *(_WORD *)(v9 + 348_Block_object_dispose(&STACK[0x510], 8) = 255;
    }
    else
    {
      *(_WORD *)(v9 + 348_Block_object_dispose(&STACK[0x510], 8) = v20;
      if (v7 == 6 && (v20 & 0x30) == 0)
      {
        unsigned int v22 = v20 & 0xFFFFFFCF;
        if ((*(_DWORD *)(a2 + 12) & 0x10) != 0) {
          int v23 = 16;
        }
        else {
          int v23 = 32;
        }
        int v24 = v23 | v22;
        *(_DWORD *)(a2 + 20) = v24;
        *uint64_t v21 = v24;
      }
    }
    *(_WORD *)(v9 + 3490) = v19;
    uint64_t v12 = *(void *)(v10 + 56);
    *(void *)(v10 + 40) = *(void *)(v11 + 120);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 128);
    *(void *)(v10 + 32) = *(void *)(v11 + 144);
    *(void *)(v10 + 80) = *(void *)(v11 + 296);
    *(void *)(v10 + 96) = *(void *)(v11 + 152);
    *(void *)(v10 + 12_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v11 + 160);
    *(void *)(v10 + 112) = *(void *)(v11 + 168);
    *(void *)(v10 + 144) = *(void *)(v11 + 176);
    *(int8x16_t *)(v10 + 152) = vextq_s8(*(int8x16_t *)(v11 + 184), *(int8x16_t *)(v11 + 184), 8uLL);
    *(void *)(v10 + 1184) = *(void *)(v11 + 200);
    *(void *)(*(void *)(v9 + 112) + _Block_object_dispose(&STACK[0x510], 8) = *(void *)(v11 + 208);
    if (!(v19 << 16) || (__int16)v19 == *(__int16 *)(v11 + 6))
    {
LABEL_38:
      int v25 = *(_DWORD *)(a2 + 12);
      if (v25 == 128)
      {
        *(_DWORD *)(a2 + 20) = 128;
        *uint64_t v21 = 128;
      }
      else
      {
        int v26 = *(_DWORD *)(a2 + 20);
        if (((unsigned __int16)v25 & (unsigned __int16)v26 & 0xFFF0) == 0)
        {
          uint64_t v4 = 8;
          *(_WORD *)(a2 + 1336) = 8;
          goto LABEL_7;
        }
        if ((~v26 & 0x30) == 0 || (*(_DWORD *)(a2 + 20) & 0xC0) == 0xC0) {
          *(_WORD *)(a2 + 1336) = 16;
        }
      }
      if (*__s)
      {
        __int16 v27 = strlen(__s);
        *(_WORD *)(a2 + 1612) = v27;
        if (v27 >= 65) {
          goto LABEL_6;
        }
      }
      else
      {
        *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
      }
      goto LABEL_14;
    }
    if (v7 == 5)
    {
      if ((*(_DWORD *)(a2 + 16) & (__int16)v19) != 0 && (v19 & 0xC0) != 0xC0 && (v19 & 0x30) != 0x30) {
        goto LABEL_38;
      }
    }
    else if (((__int16)v19 & (v19 - 1)) == 0 && (*(_DWORD *)(a2 + 16) & (__int16)v19) != 0)
    {
      goto LABEL_38;
    }
    *(_WORD *)(a2 + 1336) = 32;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
LABEL_14:
  uint64_t v4 = 8;
  switch(v3)
  {
    case 2u:
      uint64_t v13 = ICtrm(a2);
      goto LABEL_80;
    case 3u:
      if (!*__s) {
        goto LABEL_7;
      }
      uint64_t v13 = ICsplini(__s, a2, &v100);
      if (v100) {
        goto LABEL_80;
      }
      uint64_t v28 = ICprever(__s, a2);
      uint64_t v4 = v28;
      uint64_t v29 = *(void *)(a2 + 3184);
      if (*(unsigned char *)(v29 + 304) != 11 || v28 == 11) {
        goto LABEL_72;
      }
      uint64_t v31 = *(void *)(v29 + 288);
      *(_WORD *)(v31 + 12) = *(_WORD *)(*(void *)(v9 + 112) + 62);
      *(_WORD *)(v31 + 14) = *(_WORD *)(v9 + 18) & 0xC;
      if ((*(unsigned char *)v29 & 8) != 0)
      {
        int v32 = *(unsigned char **)(v11 + 280);
        *(unsigned char *)(v31 + 16) = v32[1500];
        *(unsigned char *)(v31 + 17) = v32[1504];
        *(unsigned char *)(v31 + 1_Block_object_dispose(&STACK[0x510], 8) = v32[1502];
      }
      checked_strcpy(v31 + 19, (char *)(a2 + 1547));
      int v33 = *(__int16 *)(v9 + 102);
      *(unsigned char *)(v31 + 90) = *(_WORD *)(v9 + 102);
      if (v33 < 1) {
        goto LABEL_72;
      }
      uint64_t v34 = 0;
      while (1)
      {
        *(unsigned char *)(v31 + v34 + 84) = *(unsigned char *)(*(void *)(v9 + 72) + v34);
        uint64_t v35 = *(void *)(v9 + 3496);
        int v36 = *(unsigned __int8 *)(v35 + v34);
        *(_WORD *)(v31 + 2 * v34) = (_WORD)v36 << 8;
        uint64_t v37 = *(void *)(v9 + 3520);
        int v38 = (4 * *(unsigned __int16 *)(v37 + 2 * v34)) & 0x4000 | (v36 << 8);
        *(_WORD *)(v31 + 2 * v34) = v38;
        int v39 = v38 | (*(unsigned __int16 *)(v37 + 2 * v34) >> 13 << 15);
        *(_WORD *)(v31 + 2 * v34) = v39;
        int v40 = (*(unsigned __int16 *)(v37 + 2 * v34) >> 4) & 0x80 | v39;
        *(_WORD *)(v31 + 2 * v34) = v40;
        if (!*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x994) != 0) {
          break;
        }
        if (v7 == 16)
        {
          __int16 v42 = *(unsigned char *)(v35 + v34) & 3;
          goto LABEL_69;
        }
        if (v7 == 6)
        {
          __int16 v41 = (*(_WORD *)(v37 + 2 * v34) >> 4) | v40;
LABEL_70:
          *(_WORD *)(v31 + 2 * v34) = v41;
        }
        if (++v34 >= *(__int16 *)(v9 + 102))
        {
LABEL_72:
          if (strlen((const char *)(a2 + 1547)) <= 0x40) {
            ICdblchk(a2);
          }
          goto LABEL_7;
        }
      }
      __int16 v42 = (8 * *(unsigned __int8 *)(*(void *)(v9 + 3504) + v34)) & 0xF0;
LABEL_69:
      __int16 v41 = v40 | v42;
      goto LABEL_70;
    case 4u:
    case 8u:
    case 9u:
      goto LABEL_7;
    case 5u:
      if (!v7 || ((1 << (v7 - 1)) & 0x20008) != 0) {
        goto LABEL_124;
      }
      ICsplini(__s, a2, &v100);
      SLwldpro((const char *)(a2 + 1547), (_WORD *)(v9 + 3466), (_WORD *)(v9 + 3468), 64);
      *(_WORD *)(v9 + 42) = 100;
      __int16 v43 = strlen((const char *)(a2 + 1547));
      uint64_t v13 = SFwild((unsigned __int8 *)(a2 + 1547), v43, v10, v9);
      goto LABEL_80;
    case 6u:
      if (!v7 || ((1 << (v7 - 1)) & 0x20008) != 0) {
        goto LABEL_124;
      }
      ICsplini(__s, a2, &v100);
      *(_WORD *)(v9 + 3464) = *(_WORD *)(a2 + 1684);
      *(_WORD *)(v9 + 42) = 20;
      uint64_t v13 = SFanagrm((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), v9, v10);
LABEL_80:
      uint64_t v4 = v13;
      goto LABEL_7;
    case 7u:
      if (!*(_DWORD *)(a2 + 1308)) {
        goto LABEL_124;
      }
      ICsplini(__s, a2, &v100);
      uint64_t v44 = *(void *)(v11 + 232);
      __int16 v45 = *(char **)(v44 + 8);
      if (v45)
      {
        size_t v46 = strlen((const char *)(a2 + 1547));
        if (v46 >= 0x40) {
          size_t v47 = 64;
        }
        else {
          size_t v47 = v46;
        }
        if (v47) {
          strncpy(v45, (const char *)(a2 + 1547), v47);
        }
        v45[v47] = 0;
        uint64_t v44 = *(void *)(v11 + 232);
      }
      int v48 = *(_DWORD *)(v9 + 92);
      *(unsigned char *)(v44 + 17) = *(unsigned char *)(v9 + 88);
      *(_DWORD *)(v44 + 20) = v48;
      *(_DWORD *)(v44 + 24) = *(_DWORD *)(v9 + 96);
      *(_WORD *)(v44 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)uint64_t v44 = 0;
      if (*(unsigned char *)(a2 + 8)) {
        int v49 = 1 << (*(unsigned char *)(a2 + 8) - 1);
      }
      else {
        int v49 = -1;
      }
      *(_DWORD *)(v44 + 36) = v49;
      *(unsigned char *)(v44 + 42) = 0;
      *(_WORD *)(v44 + 50) = 0;
      PDword((unsigned __int16 *)v44, 1u, 1);
      uint64_t v50 = *(void *)(v11 + 232);
      uint64_t v51 = *(unsigned __int16 *)(v50 + 50);
      if (!*(_WORD *)(v50 + 50)) {
        goto LABEL_207;
      }
      *(_WORD *)(v9 + 102) = v51;
      if ((__int16)v51 < 1) {
        goto LABEL_204;
      }
      uint64_t v52 = 0;
      while (1)
      {
        uint64_t v53 = *(void *)(*(void *)(v50 + 104) + 8 * v52);
        if (*(_DWORD *)(v53 + 80) == *(_DWORD *)(v50 + 20) && *(_DWORD *)(v53 + 84) == *(_DWORD *)(v50 + 24)) {
          break;
        }
        if (++v52 == v51) {
          goto LABEL_204;
        }
      }
      *(unsigned char *)(*(void *)(v9 + 72) + v52) = *(unsigned char *)(v53 + 71);
      uint64_t v50 = *(void *)(v11 + 232);
      uint64_t v90 = *(void *)(*(void *)(v50 + 104) + 8 * v52);
      char v91 = (_DWORD *)(*(void *)(v9 + 80) + 8 * v52);
      *char v91 = *(_DWORD *)(v90 + 80);
      v91[1] = *(_DWORD *)(v90 + 84);
      LODWORD(v91) = *(_DWORD *)(v90 + 88);
      *(_DWORD *)(v9 + 3480) = v91;
      *(_DWORD *)(a2 + 1640) = v91;
      LODWORD(v91) = *(_DWORD *)(v90 + 92);
      *(_DWORD *)(v9 + 3484) = v91;
      *(_DWORD *)(a2 + 1644) = v91;
      *(_WORD *)uint64_t v50 = *(_WORD *)(v90 + 66);
      BOOL v92 = *(_WORD *)(v9 + 102) == 1 && **(unsigned char **)(v9 + 72) == 3 && *(unsigned char *)(v9 + 88) != 3;
      if (*(unsigned char *)(v90 + 70) || v92) {
        goto LABEL_207;
      }
LABEL_204:
      if (*(_DWORD *)(v9 + 3480) || *(_DWORD *)(v9 + 3484))
      {
        *(_WORD *)(a2 + 1322) |= 0x20u;
        *(_WORD *)(a2 + 3176) = *(_WORD *)v50;
        return 10;
      }
LABEL_207:
      if (*(unsigned char *)(a2 + 8) && ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x20008) == 0)
      {
        SLrecap((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        int v95 = *(__int16 **)(v11 + 216);
        *int v95 = 1;
        if (IHhyp((const char *)(a2 + 1547), v95) == 8) {
          goto LABEL_6;
        }
        uint64_t v96 = *(void *)(v11 + 216);
        *(_DWORD *)(v9 + 3480) = *(_DWORD *)(v96 + 8);
        *(_DWORD *)(v9 + 3484) = *(_DWORD *)(v96 + 12);
        if (*(unsigned char *)(v96 + 747))
        {
          if ((*(_WORD *)(v9 + 18) & 0x40) != 0) {
            __int16 v97 = 2;
          }
          else {
            __int16 v97 = 4;
          }
          *(_WORD *)(a2 + 1322) |= v97 | 0x40;
          checked_strcpy(a2 + 3090, (char *)(v96 + 680));
          uint64_t v98 = *(void *)(v11 + 216);
          *(_DWORD *)(a2 + 3156) = *(_DWORD *)(v98 + 16);
          *(_DWORD *)(a2 + 3160) = *(_DWORD *)(v98 + 20);
          __int16 v99 = strlen((const char *)(a2 + 3090));
          SLrecap((unsigned __int8 *)(a2 + 3090), v99, *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        }
LABEL_123:
        uint64_t v4 = 10;
      }
      else
      {
        *(_DWORD *)a2 = 7;
        int v93 = IChu(a2, (char *)(a2 + 1547));
        SLrecap((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        if (*(unsigned char *)(a2 + 3090))
        {
          __int16 v94 = strlen((const char *)(a2 + 3090));
          SLrecap((unsigned __int8 *)(a2 + 3090), v94, *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        }
        if (v93 == 8) {
          uint64_t v4 = 8;
        }
        else {
          uint64_t v4 = 10;
        }
      }
      goto LABEL_7;
    case 0xAu:
      ICsplini(__s, a2, &v100);
      SFlstini((_WORD *)(v9 + 40), (_WORD *)(v9 + 44), *(unsigned char **)(v9 + 48), *(_WORD **)(v9 + 64));
      uint64_t v54 = *(void *)(v11 + 232);
      *(_WORD *)(v54 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)uint64_t v54 = 0;
      *(_WORD *)(v54 + 4_Block_object_dispose(&STACK[0x510], 8) = 100;
      *(unsigned char *)(v54 + 17) = *(unsigned char *)(v9 + 88);
      *(_DWORD *)(v54 + 20) = *(_DWORD *)(v9 + 92);
      *(_DWORD *)(v54 + 24) = *(_DWORD *)(v9 + 96);
      uint64_t v55 = *(char **)(v54 + 8);
      if (v55)
      {
        size_t v56 = strlen((const char *)(a2 + 1547));
        if (v56 >= 0x40) {
          size_t v57 = 64;
        }
        else {
          size_t v57 = v56;
        }
        if (v57) {
          strncpy(v55, (const char *)(a2 + 1547), v57);
        }
        v55[v57] = 0;
        uint64_t v54 = *(void *)(v11 + 232);
      }
      *(void *)(v54 + 72) = *(void *)(v10 + 112);
      *(_WORD *)(v54 + 80) = *(_WORD *)(v10 + 104);
      *(void *)(v54 + 8_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v10 + 128);
      *(_WORD *)(v54 + 96) = *(_WORD *)(v10 + 120);
      *(_WORD *)(a2 + 1322) |= 0x20u;
      *(unsigned char *)(v54 + 42) = 0;
      if (*(unsigned char *)(a2 + 8)) {
        int v58 = 1 << (*(unsigned char *)(a2 + 8) - 1);
      }
      else {
        int v58 = -1;
      }
      *(_DWORD *)(v54 + 36) = v58;
      int v59 = *(_WORD **)(v9 + 112);
      *(void *)(v54 + 64) = v59;
      *(_WORD *)(v54 + 56) = *v59;
      PDword((unsigned __int16 *)v54, 4u, 1);
      *(_WORD *)(v9 + 42) = 100;
      goto LABEL_121;
    case 0xBu:
      ICsplini(__s, a2, &v100);
      *(_WORD *)(v9 + 40) = 0;
      *(_DWORD *)(a2 + 1686) = 0;
      *(_WORD *)(v9 + 44) = 0;
      uint64_t v60 = *(void *)(v11 + 232);
      *(_WORD *)(v60 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)uint64_t v60 = 0;
      *(_WORD *)(v60 + 4_Block_object_dispose(&STACK[0x510], 8) = 100;
      *(unsigned char *)(v60 + 17) = *(unsigned char *)(v9 + 88);
      *(_DWORD *)(v60 + 20) = *(_DWORD *)(v9 + 92);
      *(_DWORD *)(v60 + 24) = *(_DWORD *)(v9 + 96);
      BOOL v61 = *(char **)(v60 + 8);
      if (v61)
      {
        size_t v62 = strlen((const char *)(a2 + 1547));
        if (v62 >= 0x40) {
          size_t v63 = 64;
        }
        else {
          size_t v63 = v62;
        }
        if (v63) {
          strncpy(v61, (const char *)(a2 + 1547), v63);
        }
        v61[v63] = 0;
        uint64_t v60 = *(void *)(v11 + 232);
      }
      *(_WORD *)(v60 + 9_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(a2 + 1684);
      *(void *)(v60 + 72) = *(void *)(v10 + 112);
      *(_WORD *)(v60 + 80) = *(_WORD *)(v10 + 104);
      *(void *)(v60 + 8_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v10 + 128);
      *(_WORD *)(v60 + 96) = *(_WORD *)(v10 + 120);
      *(_WORD *)(a2 + 1322) |= 0x20u;
      *(unsigned char *)(v60 + 42) = 0;
      if (*(unsigned char *)(a2 + 8)) {
        int v64 = 1 << (*(unsigned char *)(a2 + 8) - 1);
      }
      else {
        int v64 = -1;
      }
      *(_DWORD *)(v60 + 36) = v64;
      __int16 v65 = *(_WORD **)(v9 + 112);
      *(void *)(v60 + 64) = v65;
      *(_WORD *)(v60 + 56) = *v65;
      PDword((unsigned __int16 *)v60, 6u, 1);
      *(_WORD *)(v9 + 42) = 20;
LABEL_121:
      if (*(_WORD *)(*(void *)(v11 + 232) + 50))
      {
        ICPDadd(a2, 1);
        goto LABEL_123;
      }
LABEL_124:
      uint64_t v4 = 11;
      goto LABEL_7;
    default:
      switch(v3)
      {
        case 'd':
          int v14 = *(unsigned __int8 *)(v10 + 55);
          if (v14 != 3) {
            goto LABEL_20;
          }
          if (*(_WORD *)(v9 + 3490) != 64) {
            goto LABEL_161;
          }
          period_to_puntvolat(a2, __s);
          int v14 = *(unsigned __int8 *)(v10 + 55);
LABEL_20:
          if (v14 == 2 && *(_WORD *)(v9 + 3490) == 64)
          {
            strncpy(__dst, __s, 0x41uLL);
            if (*(__int16 *)(a2 + 1612) >= 1)
            {
              uint64_t v15 = *(unsigned __int16 *)(a2 + 1612);
              uint64_t v16 = __dst;
              do
              {
                int v17 = *v16;
                if ((v17 & 0xFFFFFFDF) == 0x81) {
                  *uint64_t v16 = v17 + 68;
                }
                ++v16;
                --v15;
              }
              while (v15);
            }
            char v18 = __dst;
          }
          else
          {
LABEL_161:
            char v18 = __s;
          }
          ICsplini(v18, a2, &v100);
          *(_WORD *)(v9 + 2156) = -1;
          goto LABEL_163;
        case 'e':
LABEL_163:
          *(_WORD *)(v9 + 42) = 20;
          if (*(unsigned char *)(v10 + 55) == 3 && *(_WORD *)(v9 + 3490) == 64) {
            period_to_puntvolat(a2, (char *)(v11 + 307));
          }
          if (*(unsigned char *)(v11 + 306) != 103)
          {
            if (!*(unsigned char *)(a2 + 8) || ((1 << (*(unsigned char *)(a2 + 8) - 1)) & 0x20008) != 0)
            {
              int v82 = IChu(a2, (char *)(v11 + 307));
LABEL_183:
              BOOL v81 = v82;
              goto LABEL_184;
            }
            int v84 = *(unsigned __int16 *)(a2 + 1682);
            int v85 = *(unsigned __int16 *)(a2 + 1680);
            __int16 v86 = strlen((const char *)(v11 + 307));
            BOOL v87 = JumpOver((unsigned __int8 *)(v11 + 307), v86);
            if (v84)
            {
              if (v85)
              {
                if (!v87)
                {
                  int v88 = (char *)(v11 + 307);
                  unsigned __int16 v89 = 3;
LABEL_231:
                  int v82 = SFcorrec(v88, v89, v10, v9);
                  goto LABEL_183;
                }
              }
              else if (!v87)
              {
                int v88 = (char *)(v11 + 307);
                unsigned __int16 v89 = 1;
                goto LABEL_231;
              }
            }
            else if (v85)
            {
              if (!v87)
              {
                int v88 = (char *)(v11 + 307);
                unsigned __int16 v89 = 2;
                goto LABEL_231;
              }
            }
            else if (!v87)
            {
              int v88 = (char *)(v11 + 307);
              unsigned __int16 v89 = 0;
              goto LABEL_231;
            }
            *(_WORD *)(v9 + 40) = 0;
            *(_DWORD *)(a2 + 4) = 11;
            goto LABEL_224;
          }
          uint64_t v74 = *(void *)(v11 + 232);
          *(_WORD *)(v74 + 2) = *(_WORD *)(v9 + 3204);
          *(_WORD *)uint64_t v74 = 0;
          *(_WORD *)(v74 + 4_Block_object_dispose(&STACK[0x510], 8) = 20 - *(_WORD *)(v9 + 40);
          *(unsigned char *)(v74 + 17) = *(unsigned char *)(v9 + 88);
          *(_DWORD *)(v74 + 20) = *(_DWORD *)(v9 + 92);
          *(_DWORD *)(v74 + 24) = *(_DWORD *)(v9 + 96);
          unsigned int v75 = *(char **)(v74 + 8);
          if (v75)
          {
            size_t v76 = strlen((const char *)(v11 + 307));
            if (v76 >= 0x40) {
              size_t v77 = 64;
            }
            else {
              size_t v77 = v76;
            }
            if (v77) {
              strncpy(v75, (const char *)(v11 + 307), v77);
            }
            v75[v77] = 0;
            uint64_t v74 = *(void *)(v11 + 232);
          }
          *(void *)(v74 + 72) = *(void *)(v10 + 112);
          *(_WORD *)(v74 + 80) = *(_WORD *)(v10 + 104);
          *(void *)(v74 + 8_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v10 + 128);
          *(_WORD *)(v74 + 96) = *(_WORD *)(v10 + 120);
          uint64_t v78 = *(_WORD **)(v9 + 112);
          *(void *)(v74 + 64) = v78;
          *(_WORD *)(v74 + 56) = *v78;
          *(unsigned char *)(v74 + 42) = 0;
          if (*(unsigned char *)(a2 + 8)) {
            int v79 = 1 << (*(unsigned char *)(a2 + 8) - 1);
          }
          else {
            int v79 = -1;
          }
          *(_DWORD *)(v74 + 36) = v79;
          PDword((unsigned __int16 *)v74, 0xAu, 5);
          uint64_t v80 = *(void *)(v11 + 232);
          BOOL v81 = *(unsigned __int16 *)(v80 + 116) != 5159;
          if (!*(_WORD *)(v80 + 50) || (*(_WORD *)(a2 + 1322) |= 0x20u, ICPDadd(a2, 1) != 8))
          {
LABEL_184:
            if (v81)
            {
              unsigned int v83 = 20;
              goto LABEL_225;
            }
          }
LABEL_224:
          unsigned int v83 = 21;
LABEL_225:
          if (*(__int16 *)(v9 + 40) <= 19) {
            uint64_t v4 = v83;
          }
          else {
            uint64_t v4 = 22;
          }
          if (*(unsigned char *)(v10 + 55) == 3) {
            puntvolat_to_period_list(a2);
          }
LABEL_7:
          *(_DWORD *)(a2 + 4) = v4;
          ICfree(a2);
          return v4;
        case 'f':
          ICsplini(__s, a2, &v100);
          *(_WORD *)(v9 + 42) = 20;
          if (*(__int16 *)(a2 + 1612) <= 5
            && (*(_DWORD *)(v12 + 4 * *(unsigned __int8 *)(a2 + 1547)) & 0x8000000) == 0)
          {
            goto LABEL_160;
          }
          uint64_t v4 = 21;
          if (v7 <= 0x10 && ((1 << v7) & 0x1932E) != 0) {
            ICcorspl((const char *)(v11 + 307), v9, a2);
          }
          goto LABEL_7;
        case 'g':
          ICsplini(__s, a2, &v100);
          uint64_t v66 = *(void *)(v11 + 232);
          *(_WORD *)(v66 + 2) = *(_WORD *)(v9 + 3204);
          *(_WORD *)uint64_t v66 = 0;
          *(_WORD *)(v66 + 4_Block_object_dispose(&STACK[0x510], 8) = 20 - *(_WORD *)(v9 + 40);
          *(unsigned char *)(v66 + 17) = *(unsigned char *)(v9 + 88);
          *(_DWORD *)(v66 + 20) = *(_DWORD *)(v9 + 92);
          *(_DWORD *)(v66 + 24) = *(_DWORD *)(v9 + 96);
          *(_WORD *)(v9 + 42) = 20;
          char v67 = *(char **)(v66 + 8);
          if (v67)
          {
            size_t v68 = strlen((const char *)(v11 + 307));
            if (v68 >= 0x40) {
              size_t v69 = 64;
            }
            else {
              size_t v69 = v68;
            }
            if (v69) {
              strncpy(v67, (const char *)(v11 + 307), v69);
            }
            v67[v69] = 0;
            uint64_t v66 = *(void *)(v11 + 232);
          }
          *(void *)(v66 + 72) = *(void *)(v10 + 112);
          *(_WORD *)(v66 + 80) = *(_WORD *)(v10 + 104);
          *(void *)(v66 + 8_Block_object_dispose(&STACK[0x510], 8) = *(void *)(v10 + 128);
          *(_WORD *)(v66 + 96) = *(_WORD *)(v10 + 120);
          uint64_t v70 = *(_WORD **)(v9 + 112);
          *(void *)(v66 + 64) = v70;
          *(_WORD *)(v66 + 56) = *v70;
          *(unsigned char *)(v66 + 42) = 0;
          if (*(unsigned char *)(a2 + 8)) {
            int v71 = 1 << (*(unsigned char *)(a2 + 8) - 1);
          }
          else {
            int v71 = -1;
          }
          *(_DWORD *)(v66 + 36) = v71;
          if (*(_WORD *)(a2 + 1682)) {
            unsigned int v72 = 10;
          }
          else {
            unsigned int v72 = 5;
          }
          PDword((unsigned __int16 *)v66, v72, 1);
          uint64_t v73 = *(void *)(v11 + 232);
          if (*(_WORD *)(v73 + 116) == 5159) {
            uint64_t v4 = 21;
          }
          else {
            uint64_t v4 = 20;
          }
          if (*(_WORD *)(v73 + 50))
          {
            *(_WORD *)(a2 + 1322) |= 0x20u;
            if (ICPDadd(a2, 1) == 8) {
              uint64_t v4 = 22;
            }
            else {
              uint64_t v4 = v4;
            }
          }
          goto LABEL_7;
        case 'h':
          if (*(unsigned char *)(v10 + 55) == 3 && *(_WORD *)(v9 + 3490) == 64) {
            period_to_puntvolat(a2, __s);
          }
          ICsplini(__s, a2, &v100);
          *(_WORD *)(v9 + 42) = 20;
          if ((*(_DWORD *)(a2 + 1672) || *(_DWORD *)(a2 + 1664)) && !*(unsigned char *)(a2 + 1624)) {
            ICcorucf((const char *)(a2 + 1547), a2);
          }
          if (*(unsigned char *)(v10 + 55) == 3) {
            puntvolat_to_period_list(a2);
          }
LABEL_160:
          uint64_t v4 = 21;
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
  }
}

unint64_t ICfree(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if ((*(_DWORD *)result - 1) >= 2)
    {
      unsigned __int8 v2 = *(void **)(result + 3184);
      if (v2)
      {
        unsigned int v3 = (__int16 *)v2[33];
        if (v3)
        {
          if (!v2[32] && !v2[34])
          {
            *(_DWORD *)uint64_t result = *v3;
            *(_DWORD *)(result + 1640) = *((_DWORD *)v3 + 870);
            *(_DWORD *)(result + 1644) = *((_DWORD *)v3 + 871);
            *(_WORD *)(result + 1686) = v3[20];
            *(_WORD *)(result + 168_Block_object_dispose(&STACK[0x510], 8) = v3[22];
            uint64_t v4 = *((void *)v3 + 14);
            if (v4)
            {
              if (*(_WORD *)v4)
              {
                checked_strncpy(result + 1614, (char *)(v4 + 34), 9uLL);
                uint64_t v5 = (char *)(*(void *)(*(void *)(*(void *)(v1 + 3184) + 264) + 112) + 44);
                return checked_strncpy(v1 + 1624, v5, 0xCuLL);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ICsplini(char *__s, uint64_t a2, unsigned char *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 3184);
  uint64_t v6 = *(void *)(v5 + 264);
  uint64_t v7 = *(void *)(v6 + 112);
  *a3 = 1;
  if (*(unsigned char *)(v5 + 304) == 11)
  {
    uint64_t v8 = *(_OWORD **)(v5 + 288);
    *(_OWORD *)((char *)v8 + 76) = 0u;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    *uint64_t v8 = 0u;
    uint64_t v9 = *(void *)(v5 + 288);
    *(_WORD *)(v9 + 16) = 0;
    *(unsigned char *)(v9 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 6) = 0;
    *(_OWORD *)(v9 + 19) = 0u;
    *(_OWORD *)(v9 + 35) = 0u;
    *(_OWORD *)(v9 + 51) = 0u;
    *(_OWORD *)(v9 + 67) = 0u;
    *(unsigned char *)(v9 + 83) = 0;
  }
  if (__s)
  {
    size_t v10 = strlen(__s);
    if (v10 >= 0x40) {
      uint64_t v11 = 64;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11) {
      __strncpy_chk();
    }
    v34[v11] = 0;
  }
  SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(unsigned char **)(v6 + 48), *(_WORD **)(v6 + 64));
  *(_DWORD *)(a2 + 1686) = 0;
  *(_WORD *)(v6 + 102) = 0;
  *(unsigned char *)(*(void *)(v6 + 72) + 1) = 0;
  **(unsigned char **)(v6 + 72) = 0;
  *(_OWORD *)*(void *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 3472) = 0u;
  *(void *)(a2 + 1640) = 0;
  *(void *)(a2 + 3156) = 0;
  *(_WORD *)uint64_t v5 = 0;
  if (*(_WORD *)(v5 + 64) && *(unsigned __int16 *)(v6 + 3488) != *(unsigned __int16 *)(v5 + 64)
    || *(_WORD *)(v5 + 6) && *(unsigned __int16 *)(v6 + 3490) != *(unsigned __int16 *)(v5 + 6))
  {
    size_t v12 = *(void *)(a2 + 3168);
    if (v12)
    {
      if (v12 >= 0x8000)
      {
        unint64_t v13 = 0;
        unsigned int v14 = 1;
        do
        {
          bzero(*(void **)(v5 + 8 * v13 + 32), 0x8000uLL);
          unint64_t v13 = v14++;
        }
        while (v13 < *(void *)(a2 + 3168) >> 15);
      }
      else
      {
        bzero(*(void **)(v5 + 32), v12);
      }
    }
  }
  *(_WORD *)(v5 + 64) = *(_WORD *)(v6 + 3488);
  uint64_t v15 = *(void *)(v5 + 280);
  *(_WORD *)(v15 + 1742) = 0;
  *(unsigned char *)(v15 + 1526) = 0;
  if (v34[0])
  {
    *(_DWORD *)(a2 + 4) = 11;
    *(_WORD *)(v7 + 16) = 0;
    *(unsigned char *)(v7 + 76) = 0;
    *(void *)(v7 + 80) = 0;
    *(_DWORD *)(v7 + 5_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(unsigned char *)(v7 + 34) = 0;
    *(unsigned char *)(v7 + 44) = 0;
    *(unsigned char *)(v7 + 92) = 0;
    *(_WORD *)(v5 + 6) = *(_WORD *)(v6 + 3490);
    uint64_t v16 = ICpre(v34, a2);
    uint64_t v17 = v16;
    if (*(_WORD *)v6 == 3)
    {
      if (v16 != 2)
      {
        if (v16 == 9) {
          return 11;
        }
        if (v16 == 4)
        {
          if (strlen((const char *)(a2 + 1547)) <= 0x40) {
            ICdblchk(a2);
          }
          if ((*(unsigned char *)(a2 + 1329) & 4) != 0) {
            return 2;
          }
          else {
            return 4;
          }
        }
        goto LABEL_68;
      }
    }
    else if (v16 != 2)
    {
LABEL_68:
      *a3 = 0;
      if (v16 == 11) {
        SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(unsigned char **)(v6 + 48), *(_WORD **)(v6 + 64));
      }
      goto LABEL_33;
    }
    uint64_t v17 = 2;
    if (*(_WORD *)(v6 + 3492)) {
      return v17;
    }
  }
  else
  {
    uint64_t v17 = 8;
  }
  *a3 = 0;
LABEL_33:
  *(unsigned char *)(a2 + 3154) = 0;
  *(_OWORD *)(a2 + 3122) = 0u;
  *(_OWORD *)(a2 + 313_Block_object_dispose(&STACK[0x510], 8) = 0u;
  *(_OWORD *)(a2 + 3090) = 0u;
  *(_OWORD *)(a2 + 3106) = 0u;
  if ((*(_DWORD *)a2 - 100) <= 3 && *(_DWORD *)a2 != 101)
  {
    *(unsigned char *)(v5 + 306) = *(_DWORD *)a2;
    uint64_t v18 = *(void *)(v6 + 112);
    int v19 = *(unsigned __int8 *)(a2 + 8);
    if ((v19 - 8) >= 2)
    {
      if (v19 == 12 && *(unsigned char *)(v18 + 18))
      {
        size_t v20 = strlen((const char *)(v18 + 18));
        if (v20 >= 0xC) {
          size_t v21 = 12;
        }
        else {
          size_t v21 = v20;
        }
        if (v21) {
          strncpy((char *)(v18 + 44), (const char *)(v18 + 18), v21);
        }
        *(unsigned char *)(v18 + 44 + v21) = 0;
        *(_WORD *)(v18 + 90) = *(_WORD *)(v18 + 32);
      }
    }
    else
    {
      __strcat_chk();
      *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
      *(_WORD *)(v5 + 4) += strlen((const char *)(v18 + 44));
      *(unsigned char *)(v18 + 44) = 0;
    }
    if (*(unsigned char *)(a2 + 1414) && *(unsigned char *)(a2 + 1413) && !*(_WORD *)v18) {
      *(void *)(a2 + 1328) |= 0xC0uLL;
    }
    if (*(_DWORD *)(a2 + 4) == 11 || !*(unsigned char *)(v6 + 88))
    {
      size_t v29 = strlen((const char *)(a2 + 1547));
      if (v29 >= 0x40) {
        size_t v30 = 64;
      }
      else {
        size_t v30 = v29;
      }
      if (v30) {
        strncpy((char *)(v5 + 307), (const char *)(a2 + 1547), v30);
      }
      *(unsigned char *)(v5 + 307 + v30) = 0;
    }
    else
    {
      uint64_t v22 = *(void *)(*(void *)(v5 + 248) + 56);
      uint64_t v23 = *(unsigned __int8 *)(a2 + 1547);
      if ((*(_DWORD *)(v22 + 4 * v23) & 0x40000000) != 0) {
        LOBYTE(v23) = v23 + 32;
      }
      *(unsigned char *)(v5 + 307) = v23;
      if ((_BYTE)v23)
      {
        int v24 = (unsigned char *)(v5 + 308);
        int v25 = (unsigned __int8 *)(a2 + 1548);
        do
        {
          unsigned int v27 = *v25++;
          char v26 = v27;
          char v28 = v27 + 32;
          if ((*(_DWORD *)(v22 + 4 * v27) & 0x40000000) != 0) {
            char v26 = v28;
          }
          *v24++ = v26;
        }
        while (v26);
      }
    }
    if (*(unsigned char *)(a2 + 1412))
    {
      uint64_t v31 = v5 + 307;
      size_t v32 = strlen((const char *)(v5 + 307));
      *(unsigned char *)(v31 + (__int16)v32) = 46;
      *(unsigned char *)(v31 + ((uint64_t)((v32 << 48) + 0x1000000000000) >> 48)) = 0;
    }
  }
  return v17;
}

uint64_t ICPDadd(uint64_t a1, int a2)
{
  unsigned __int8 v2 = *(void **)(a1 + 3184);
  uint64_t v3 = v2[29];
  unsigned __int16 v4 = *(_WORD *)(v3 + 50);
  if (v4)
  {
    unsigned __int8 v7 = 0;
    uint64_t v14 = *(void *)(v2[31] + 56);
    uint64_t v8 = *(void *)(v3 + 104);
    uint64_t v9 = v2[33];
    do
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)(v8 + 8 * v7);
      if (!a2 || !*(unsigned char *)(v11 + 70))
      {
        int v12 = strlen((const char *)v11);
        SLrecap((unsigned __int8 *)v11, v12, *(unsigned __int8 *)(v11 + 71), v11 + 80, *(unsigned __int8 *)(v9 + 88), v14);
        uint64_t result = SFadd(*(char **)(v8 + 8 * v10), v12, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(void *)(v9 + 48), *(void *)(v9 + 64));
        if (result == 8) {
          return result;
        }
        uint64_t v11 = *(void *)(v8 + 8 * v10);
        unsigned __int16 v4 = *(_WORD *)(v3 + 50);
      }
      *(_WORD *)(a1 + 3176) = *(_WORD *)(v11 + 66);
      unsigned __int8 v7 = v10 + 1;
    }
    while (v4 > (v10 + 1));
  }
  return 0;
}

size_t period_to_puntvolat(uint64_t a1, char *__s)
{
  size_t result = strlen(__s);
  if ((int)(result << 16) > 0x10000)
  {
    int v5 = 1;
    __int16 v6 = 1;
    do
    {
      if ((__s[v5 - 1] | 0x20) == 0x6C
        && (__s[v5 + 1] | 0x20) == 0x6C
        && __s[v6] == 46
        && *(_DWORD *)(a1 + 24) == 64)
      {
        __s[v6] = -73;
      }
      int v5 = ++v6;
      size_t result = strlen(__s);
    }
    while (v6 < (__int16)result);
  }
  return result;
}

BOOL JumpOver(unsigned __int8 *a1, int a2)
{
  BOOL result = 0;
  if (a2 >= 7)
  {
    int v2 = *a1;
    if (v2 == a1[1] && v2 == a1[2] && v2 == a1[3] && v2 == a1[4] && v2 == a1[5]) {
      return 1;
    }
  }
  return result;
}

size_t puntvolat_to_period_list(size_t result)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*(void *)(result + 3184) + 264);
  if (*(__int16 *)(v1 + 40) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(v1 + 48);
      if (v3)
      {
        size_t v4 = strlen((const char *)(v3 + *(__int16 *)(*(void *)(v1 + 64) + 2 * v2)));
        if (v4 >= 0x40) {
          uint64_t v5 = 64;
        }
        else {
          uint64_t v5 = v4;
        }
        if (v5) {
          __strncpy_chk();
        }
        __s[v5] = 0;
      }
      BOOL result = strlen(__s);
      if ((result << 16) - 0x10000 >= 0x10000)
      {
        int v6 = 1;
        __int16 v7 = 1;
        do
        {
          if ((__s[v6 - 1] | 0x20) == 0x6C
            && (__s[v6 + 1] | 0x20) == 0x6C
            && __s[v7] == 183
            && *(_WORD *)(v1 + 3490) == 64)
          {
            __s[v7] = 46;
          }
          int v6 = ++v7;
          BOOL result = strlen(__s);
        }
        while (v7 <= (__int16)(result - 1));
      }
      uint64_t v8 = *(void *)(v1 + 48);
      if (v8)
      {
        uint64_t v9 = *(__int16 *)(*(void *)(v1 + 64) + 2 * v2);
        uint64_t v10 = v8 + v9;
        if (result >= 0x40) {
          size_t v11 = 64;
        }
        else {
          size_t v11 = result;
        }
        if (v11) {
          BOOL result = (size_t)strncpy((char *)(v8 + v9), __s, v11);
        }
        *(unsigned char *)(v10 + v11) = 0;
      }
      ++v2;
    }
    while (v2 < *(__int16 *)(v1 + 40));
  }
  return result;
}

unint64_t checked_strncpy(unint64_t result, char *__s, size_t a3)
{
  if (result && __s)
  {
    uint64_t v5 = (char *)result;
    BOOL result = strlen(__s);
    if (result < a3) {
      a3 = result;
    }
    if (a3) {
      BOOL result = (unint64_t)strncpy(v5, __s, a3);
    }
    v5[a3] = 0;
  }
  return result;
}

uint64_t ICtrm(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3184);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 + 248);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 264);
      if (v4)
      {
        *(_WORD *)uint64_t v3 = 0;
        if (!*(unsigned char *)(a1 + 8) || ((1 << (*(unsigned char *)(a1 + 8) - 1)) & 0x20008) != 0)
        {
          IChu(a1, (char *)(a1 + 1547));
          uint64_t v5 = *(void **)(v2 + 224);
          if (v5) {
            free(v5);
          }
        }
        unsigned int v6 = *((_DWORD *)v3 + 16);
        if (v6) {
          SLClose(v6);
        }
        if (v3[54] * *((__int16 *)v3 + 24)) {
          free(*(void **)(v2 + 120));
        }
        uint64_t v7 = 0;
        *(_WORD *)(*(void *)(v2 + 232) + 2) = 0;
        do
        {
          free(*(void **)(*(void *)(*(void *)(v2 + 232) + 104) + v7));
          v7 += 8;
        }
        while (v7 != 800);
        free(*(void **)(*(void *)(v2 + 232) + 104));
        free(*(void **)(*(void *)(v2 + 232) + 8));
        free(*(void **)(v2 + 232));
        uint64_t v8 = *(void *)(v2 + 240);
        if (v8)
        {
          free(*(void **)(v8 + 8));
          free(*(void **)(v2 + 240));
        }
        if (*(unsigned __int16 *)(v2 + 12) >= 0x134u) {
          free(*((void **)v3 + 7));
        }
        uint64_t v9 = *(void **)(v2 + 208);
        if (v9) {
          free(v9);
        }
        uint64_t v10 = *(void **)(v4 + 112);
        if (v10) {
          free(v10);
        }
        size_t v11 = *(void **)(v2 + 152);
        if (v11) {
          free(v11);
        }
        int v12 = *(void **)(v2 + 96);
        if (v12) {
          free(v12);
        }
        uint64_t v13 = *(void **)(v2 + 104);
        if (v13) {
          free(v13);
        }
        uint64_t v14 = *(void **)(v2 + 112);
        if (v14) {
          free(v14);
        }
        unint64_t v15 = *(void *)(a1 + 3168);
        if (v15 && *(unsigned char *)(a1 + 8) != 4)
        {
          if (v15 >= 0x8000)
          {
            uint64_t v16 = 0;
            int v17 = 0;
            do
            {
              free(*(void **)(v2 + 8 * v16 + 32));
              uint64_t v16 = ++v17;
            }
            while ((unint64_t)v17 < *(void *)(a1 + 3168) >> 15);
          }
          else
          {
            free(*(void **)(v2 + 32));
          }
        }
        uint64_t v18 = *(void **)(v2 + 296);
        if (v18) {
          free(v18);
        }
        if (*((_WORD *)v3 + 52))
        {
          free(*(void **)(v2 + 168));
          free(*(void **)(v2 + 192));
          free(*(void **)(v2 + 184));
        }
        if (*((_WORD *)v3 + 69)) {
          free(*(void **)(v2 + 176));
        }
        if (*((_WORD *)v3 + 60)) {
          free(*(void **)(v2 + 160));
        }
        if (*((_WORD *)v3 + 2)) {
          free(*(void **)(v2 + 200));
        }
        int v19 = *(void **)(v2 + 128);
        if (v19) {
          free(v19);
        }
        size_t v20 = *(void **)(v2 + 136);
        if (v20) {
          free(v20);
        }
        size_t v21 = *(void **)(v2 + 144);
        if (v21) {
          free(v21);
        }
        uint64_t v22 = *(void **)(v2 + 72);
        if (v22) {
          free(v22);
        }
        if (*(void *)(v2 + 168))
        {
          free(*((void **)v3 + 21));
          free(*((void **)v3 + 22));
        }
        uint64_t v23 = *(void **)(v4 + 80);
        if (v23) {
          free(v23);
        }
        int v24 = *(void **)(v4 + 72);
        if (v24) {
          free(v24);
        }
        int v25 = *(void **)(v4 + 3520);
        if (v25) {
          free(v25);
        }
        char v26 = *(void **)(v4 + 3504);
        if (v26) {
          free(v26);
        }
        unsigned int v27 = *(void **)(v4 + 3528);
        if (v27) {
          free(v27);
        }
        char v28 = *(void **)(v4 + 3536);
        if (v28) {
          free(v28);
        }
        size_t v29 = *(void **)(v4 + 3496);
        if (v29) {
          free(v29);
        }
        size_t v30 = *(void **)(v4 + 24);
        if (v30) {
          free(v30);
        }
        uint64_t v31 = *(void **)(v4 + 8);
        if (v31) {
          free(v31);
        }
        size_t v32 = *(void **)(v4 + 3176);
        if (v32) {
          free(v32);
        }
        if (*(void *)(v4 + 32)) {
          SFmemory((void **)(v4 + 32), 64, 0);
        }
        free(v3);
        free((void *)v4);
        int v33 = *(void **)(a1 + 3184);
        uint64_t v34 = (void *)v33[35];
        if (v34)
        {
          free(v34);
          int v33 = *(void **)(a1 + 3184);
        }
        uint64_t v35 = (void *)v33[10];
        if (v35)
        {
          free(v35);
          int v33 = *(void **)(a1 + 3184);
        }
        uint64_t v36 = v33[27];
        if (v36)
        {
          IHterm(v36);
          free(*(void **)(*(void *)(a1 + 3184) + 216));
          *(void *)(*(void *)(a1 + 3184) + 216) = 0;
        }
        uint64_t v37 = *(void **)(v2 + 288);
        if (v37) {
          free(v37);
        }
        free((void *)v2);
      }
    }
  }
  *(_WORD *)(a1 + 1320) &= ~0x80u;
  return 0;
}

uint64_t ICverify(char *__s, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v84 = *MEMORY[0x263EF8340];
  char v81 = 0;
  uint64_t v7 = *(void *)(a3 + 3184);
  uint64_t v8 = *(void *)(v7 + 264);
  uint64_t v80 = *(void *)(*(void *)(v7 + 248) + 56);
  __int16 v82 = 0;
  do
  {
    *(_WORD *)(*(void *)(v8 + 3520) + 2 * v6) = 0;
    *(_WORD *)(*(void *)(v8 + 24) + 2 * v6) = 0;
    *(unsigned char *)(*(void *)(v8 + 3496) + v6) = 0;
    *(unsigned char *)(*(void *)(v8 + 3504) + v6++) = 0;
  }
  while (v6 != 6);
  if ((*(_WORD *)(v8 + 18) & 0x40) == 0) {
    *(void *)(v8 + 3480) = 0;
  }
  uint64_t v9 = *(void *)(v7 + 232);
  if (__s)
  {
    uint64_t v10 = *(char **)(v9 + 8);
    if (v10)
    {
      size_t v11 = strlen(__s);
      if (v11 >= 0x40) {
        size_t v12 = 64;
      }
      else {
        size_t v12 = v11;
      }
      if (v12) {
        strncpy(v10, __s, v12);
      }
      v10[v12] = 0;
    }
  }
  *(unsigned char *)(v9 + 17) = *(unsigned char *)(v8 + 88);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v8 + 92);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 96);
  *(_WORD *)(v9 + 2) = *(_WORD *)(*(void *)(v7 + 264) + 3204);
  *(_WORD *)uint64_t v9 = 0;
  if (*(unsigned char *)(a3 + 8)) {
    int v13 = 1 << (*(unsigned char *)(a3 + 8) - 1);
  }
  else {
    int v13 = -1;
  }
  *(_DWORD *)(v9 + 36) = v13;
  *(unsigned char *)(v9 + 42) = 0;
  *(_WORD *)(v9 + 50) = 0;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(a3 + 1338);
  PDword((unsigned __int16 *)v9, 1u, 1);
  unsigned int v14 = *(unsigned __int16 *)(v9 + 50);
  if (*(_WORD *)(v9 + 50))
  {
    uint64_t v15 = 0;
    char v16 = 0;
    *(_WORD *)(a3 + 1322) |= 0x20u;
    if (v14 >= 6) {
      LOWORD(v14) = 6;
    }
    *(_WORD *)(v8 + 102) = v14;
    int v17 = 10;
    do
    {
      *(unsigned char *)(*(void *)(v8 + 72) + v15) = *(unsigned char *)(*(void *)(*(void *)(v9 + 104) + 8 * v15) + 71);
      uint64_t v18 = *(void *)(*(void *)(v9 + 104) + 8 * v15);
      int v19 = (_DWORD *)(*(void *)(v8 + 80) + 8 * v15);
      *int v19 = *(_DWORD *)(v18 + 80);
      v19[1] = *(_DWORD *)(v18 + 84);
      *(_DWORD *)(v8 + 3480) = *(_DWORD *)(v18 + 88);
      *(_DWORD *)(v8 + 3484) = *(_DWORD *)(v18 + 92);
      *(_WORD *)uint64_t v9 = *(_WORD *)(v18 + 66);
      int v20 = *(unsigned __int16 *)(v8 + 102);
      if (v20 == 1 && **(unsigned char **)(v8 + 72) == 3 && *(unsigned char *)(v8 + 88) != 3)
      {
        int v17 = 11;
        char v16 = 1;
      }
      if (*(unsigned char *)(v18 + 70))
      {
        uint64_t v21 = process_neg(a3, (__int16)v15, &v82);
        if (v21 != 11)
        {
          uint64_t v22 = v21;
          goto LABEL_198;
        }
        LOWORD(v20) = *(_WORD *)(v8 + 102);
        int v17 = 11;
      }
      ++v15;
    }
    while (v15 < (__int16)v20);
    if (v17 == 11) {
      goto LABEL_32;
    }
    SFdc((uint64_t)__s, a2, *(void *)(v7 + 248), v8);
    if (*(_DWORD *)(v8 + 3480) || !*(unsigned char *)(a3 + 8) || ((1 << (*(unsigned char *)(a3 + 8) - 1)) & 0x995) != 0)
    {
      *(_WORD *)v7 |= v82;
      return 10;
    }
    goto LABEL_89;
  }
  char v16 = 0;
  LOWORD(v15) = 0;
LABEL_32:
  LOWORD(v23) = v15;
  if (*(__int16 *)(*(void *)(v7 + 248) + 68) < a2) {
    return 11;
  }
  if (*(unsigned char *)(a3 + 8) && ((1 << (*(unsigned char *)(a3 + 8) - 1)) & 0x20008) == 0)
  {
    if (*(void *)(a3 + 3168))
    {
      if (*(_DWORD *)(a3 + 1308))
      {
        if (a2 > 17 || *(_WORD *)(*(void *)(v7 + 248) + 88)) {
          goto LABEL_65;
        }
      }
      else if (a2 > 17)
      {
        goto LABEL_65;
      }
      if (ICcchver((uint64_t)__s, a2, &v81, a3) == 10)
      {
        v82 |= 0x20u;
        if (v81) {
          goto LABEL_68;
        }
        if (*(unsigned char *)(v7 + 304) != 11)
        {
          int v25 = *(__int16 *)(v8 + 102);
          if (v25 >= 1)
          {
            LOWORD(v23) = 0;
            while (1)
            {
              int v26 = *(unsigned __int8 *)(*(void *)(v8 + 72) + (unsigned __int16)v23);
              BOOL v27 = !*(unsigned char *)(v8 + 88) && v26 == 4;
              BOOL v28 = v27;
              if (*(unsigned __int8 *)(v8 + 88) == v26 || v28) {
                break;
              }
              int v23 = (__int16)(v23 + 1);
              if (v23 >= v25)
              {
                LOWORD(v23) = *(_WORD *)(v8 + 102);
                goto LABEL_65;
              }
            }
            *(_WORD *)(v8 + 1_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(*(void *)(v8 + 3520) + 2 * (unsigned __int16)v23);
            goto LABEL_68;
          }
          LOWORD(v23) = 0;
        }
      }
    }
LABEL_65:
    uint64_t v29 = ICget(__s, a2, a3);
    if (v29 != 10)
    {
      uint64_t v22 = v29;
      goto LABEL_92;
    }
    v82 |= 0x40u;
    int v30 = *(__int16 *)(v8 + 102);
    if (v30 != 1)
    {
      LOWORD(v15) = 0;
      if (v30 >= 1)
      {
        int v31 = *(unsigned __int8 *)(v8 + 88);
        while (1)
        {
          int v32 = *(unsigned __int8 *)(*(void *)(v8 + 72) + (unsigned __int16)v15);
          BOOL v33 = v32 == 4 && v31 == 0;
          BOOL v34 = v33;
          if (v32 == v31 || v34) {
            break;
          }
          LODWORD(v15) = (__int16)(v15 + 1);
          if ((int)v15 >= v30) {
            goto LABEL_86;
          }
        }
        *(_WORD *)(v8 + 1_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(*(void *)(v8 + 3520) + 2 * (unsigned __int16)v15);
      }
      if ((unsigned __int16)v15 != (unsigned __int16)v30)
      {
LABEL_89:
        uint64_t v22 = 10;
        LOWORD(v23) = v15;
        goto LABEL_92;
      }
LABEL_86:
      uint64_t v36 = *(__int16 **)(v8 + 3520);
      __int16 v37 = *v36;
      __int16 v38 = v36[1];
      if (v37)
      {
        *(_WORD *)(v8 + 1_Block_object_dispose(&STACK[0x510], 8) = v38;
      }
      else if (v38)
      {
        *(_WORD *)(v8 + 1_Block_object_dispose(&STACK[0x510], 8) = v37;
      }
      uint64_t v22 = 10;
      LOWORD(v23) = v30;
LABEL_92:
      if (v22 != 11 && v16 && (v82 & 0xE0) != 0)
      {
        *(_WORD *)(a3 + 1322) &= ~0x20u;
        *(void *)(a3 + 1328) &= ~0x20uLL;
      }
      if (*(unsigned char *)(a3 + 8) == 2)
      {
        if (v22 == 10 && *(_DWORD *)(a3 + 24) == 64)
        {
          if (**(unsigned char **)(v8 + 3496))
          {
            __s[a2 - **(unsigned __int8 **)(v8 + 3496)] = -95;
            SFadd(__s, a2, (__int16 *)(v8 + 40), (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(void *)(v8 + 48), *(void *)(v8 + 64));
            *(void *)(a3 + 1328) |= 4uLL;
            v82 |= 4u;
            uint64_t v22 = 2;
          }
          else
          {
            uint64_t v22 = 10;
          }
        }
        else if (v22 == 11)
        {
          uint64_t v22 = ICfoldio((uint64_t)__s, a2, a3);
          if (v22 == 10) {
            v82 |= 0x40u;
          }
        }
      }
      if (*(void *)(a3 + 3168) && a2 <= 17 && v22 == 10 && (v82 & 0x40) != 0)
      {
        __int16 v79 = v82;
        int v39 = *(unsigned __int8 *)(a3 + 8);
        if (!*(unsigned char *)(a3 + 8) || ((1 << (v39 - 1)) & 0x11660) != 0)
        {
          __int16 v42 = *(_WORD **)(v8 + 3520);
          if ((*v42 & 0x260) != 0 || (v42[1] & 0x260) != 0)
          {
            uint64_t v22 = 10;
            goto LABEL_134;
          }
        }
        if (*(__int16 *)(v8 + 102) < 1)
        {
          LOWORD(v23) = 0;
        }
        else
        {
          LOWORD(v23) = 0;
          if (ICcchadd((uint64_t)__s, a2, **(unsigned __int8 **)(v8 + 72), 0, v81, a3) == 10)
          {
            v79 |= 1u;
            uint64_t v40 = 1;
            while (v40 < *(__int16 *)(v8 + 102))
            {
              LOWORD(v23) = v40;
              int v41 = ICcchadd((uint64_t)__s, a2, *(unsigned __int8 *)(*(void *)(v8 + 72) + v40), (__int16)v40, v81, a3);
              ++v40;
              if (v41 != 10) {
                goto LABEL_122;
              }
            }
            LOWORD(v23) = v40;
          }
        }
LABEL_122:
        __int16 v82 = v79;
      }
      int v39 = *(unsigned __int8 *)(a3 + 8);
      if (v22 != 10)
      {
        BOOL v43 = v39 == 8 || v39 == 5;
        if (v43 && (*(unsigned char *)(a3 + 24) & 0x40) != 0)
        {
          if (!*(unsigned char *)(v8 + 88)
            || *(unsigned char *)(v8 + 88) == 1 && (*(_DWORD *)(v80 + 4 * *__s) & 0x10000000) == 0)
          {
            return 11;
          }
          uint64_t v22 = ICcltuna(__s, a2, a3);
          int v39 = *(unsigned __int8 *)(a3 + 8);
        }
      }
LABEL_134:
      if (v39) {
        BOOL v44 = ((1 << (v39 - 1)) & 0x11660) == 0;
      }
      else {
        BOOL v44 = 0;
      }
      if (!v44
        && *(_DWORD *)(a3 + 1308)
        && v22 != 11
        && (*(_WORD *)v7 & 8) == 0
        && (*(_WORD *)(v8 + 18) & 0xC0C) == 0
        && ((*(_WORD *)(a3 + 1322) & 0x20) != 0 || (v82 & 0xA0) != 0))
      {
        __int16 v45 = *(__int16 **)(v7 + 216);
        *__int16 v45 = 1;
        if (**(unsigned char **)(v8 + 72) == 1)
        {
          uint64_t v46 = *__s;
          if ((*(_DWORD *)(v80 + 4 * v46) & 0x20000000) != 0) {
            LOBYTE(v46) = v46 - 32;
          }
          char *__s = v46;
          __int16 v45 = *(__int16 **)(v7 + 216);
        }
        IHhyp(__s, v45);
        if (**(unsigned char **)(v8 + 72) == 1)
        {
          uint64_t v47 = *__s;
          if ((*(_DWORD *)(v80 + 4 * v47) & 0x40000000) != 0) {
            LOBYTE(v47) = v47 + 32;
          }
          char *__s = v47;
          uint64_t v48 = *(void *)(v7 + 216);
          uint64_t v49 = *(unsigned __int8 *)(v48 + 680);
          if ((*(_DWORD *)(v80 + 4 * v49) & 0x40000000) != 0) {
            LOBYTE(v49) = v49 + 32;
          }
          *(unsigned char *)(v48 + 680) = v49;
        }
        uint64_t v50 = *(void *)(v7 + 216);
        *(_DWORD *)(v8 + 3480) = *(_DWORD *)(v50 + 8);
        *(_DWORD *)(v8 + 3484) = *(_DWORD *)(v50 + 12);
        if (*(unsigned char *)(v50 + 747))
        {
          if ((*(_WORD *)(v8 + 18) & 0x40) != 0) {
            __int16 v51 = 2;
          }
          else {
            __int16 v51 = 4;
          }
          *(_WORD *)(a3 + 1322) |= v51 | 0x40;
          checked_strcpy(a3 + 3090, (char *)(v50 + 680));
          uint64_t v52 = *(void *)(v7 + 216);
          *(_DWORD *)(a3 + 3156) = *(_DWORD *)(v52 + 16);
          *(_DWORD *)(a3 + 3160) = *(_DWORD *)(v52 + 20);
        }
      }
      if (v22 == 10)
      {
        LOWORD(v53) = *(_WORD *)(v8 + 102);
        goto LABEL_161;
      }
      if (*(unsigned char *)(a3 + 8) == 11)
      {
        if (__s)
        {
          size_t v72 = strlen(__s);
          if (v72 >= 0x40) {
            uint64_t v73 = 64;
          }
          else {
            uint64_t v73 = v72;
          }
          if (v73) {
            __strncpy_chk();
          }
          __sa[v73] = 0;
        }
        ICremacc(__sa, 3, a3);
        uint64_t v22 = ICget(__sa, a2, a3);
        if (v22 == 10)
        {
          SFadd(__sa, a2, (__int16 *)(v8 + 40), (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(void *)(v8 + 48), *(void *)(v8 + 64));
          *(_WORD *)(v8 + 3492) |= 2u;
          v82 |= 4u;
          goto LABEL_197;
        }
      }
      if (v22 != 11 || !v16) {
        goto LABEL_198;
      }
      __int16 v74 = *(_WORD *)(a3 + 1322);
      if ((v74 & 0x20) == 0) {
        goto LABEL_189;
      }
      if ((*(unsigned char *)(a3 + 1328) & 0x20) == 0
        || (process_neg(a3, (__int16)v23, &v82), *(_WORD *)v7 |= v82, __int16 v74 = *(_WORD *)(a3 + 1322), (v74 & 0x200) != 0))
      {
        LODWORD(v53) = *(__int16 *)(v9 + 50);
        *(_WORD *)(v8 + 102) = *(_WORD *)(v9 + 50);
        if ((int)v53 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = *(void *)(v9 + 104);
          do
          {
            *(unsigned char *)(*(void *)(v8 + 72) + v75) = *(unsigned char *)(*(void *)(v76 + 8 * v75) + 71);
            uint64_t v76 = *(void *)(v9 + 104);
            size_t v77 = *(_DWORD **)(v76 + 8 * v75);
            uint64_t v78 = (_DWORD *)(*(void *)(v8 + 80) + 8 * v75);
            _DWORD *v78 = v77[20];
            v78[1] = v77[21];
            *(_DWORD *)(v8 + 3480) = v77[22];
            *(_DWORD *)(v8 + 3484) = v77[23];
            ++v75;
          }
          while (v75 < *(__int16 *)(v8 + 102));
          LOWORD(v53) = *(_WORD *)(v8 + 102);
          __int16 v74 = *(_WORD *)(a3 + 1322);
        }
        if ((v74 & 0x200) == 0)
        {
LABEL_161:
          if ((__int16)v53 >= 2)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 1;
            do
            {
              unint64_t v56 = v54 + 1;
              if (v54 + 1 >= (unint64_t)(unsigned __int16)v53)
              {
                unint64_t v70 = (unsigned __int16)v53;
              }
              else
              {
                unsigned __int16 v57 = v53;
                unint64_t v58 = v55;
                do
                {
                  uint64_t v59 = *(void *)(v8 + 72);
                  unsigned int v60 = *(unsigned __int8 *)(v59 + v58);
                  if (v60 < *(unsigned __int8 *)(v59 + v54))
                  {
                    uint64_t v53 = *(void *)(v8 + 3520);
                    __int16 v61 = *(_WORD *)(v53 + 2 * v58);
                    uint64_t v62 = *(void *)(v8 + 3496);
                    char v63 = *(unsigned char *)(v62 + v58);
                    char v64 = *(unsigned char *)(*(void *)(v8 + 3504) + v58);
                    __int16 v65 = *(_WORD *)(*(void *)(v8 + 24) + 2 * v58);
                    char v66 = *(unsigned char *)(*(void *)(v8 + 3528) + v58);
                    uint64_t v67 = *(void *)(v8 + 80);
                    char v68 = *(unsigned char *)(*(void *)(v8 + 3536) + v58);
                    *(_WORD *)(v53 + 2 * v5_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v53 + 2 * v54);
                    uint64_t v69 = *(void *)(v67 + 8 * v58);
                    *(unsigned char *)(v62 + v5_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(v62 + v54);
                    *(unsigned char *)(*(void *)(v8 + 72) + v5_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(v8 + 72) + v54);
                    *(unsigned char *)(*(void *)(v8 + 3504) + v5_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(v8 + 3504) + v54);
                    *(_WORD *)(*(void *)(v8 + 24) + 2 * v5_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(*(void *)(v8 + 24) + 2 * v54);
                    *(void *)(*(void *)(v8 + 80) + 8 * v5_Block_object_dispose(&STACK[0x510], 8) = *(void *)(*(void *)(v8 + 80) + 8 * v54);
                    *(unsigned char *)(*(void *)(v8 + 3528) + v5_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(v8 + 3528) + v54);
                    *(unsigned char *)(*(void *)(v8 + 3536) + v5_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(v8 + 3536) + v54);
                    *(_WORD *)(*(void *)(v8 + 3520) + 2 * v54) = v61;
                    *(unsigned char *)(*(void *)(v8 + 3496) + v54) = v63;
                    *(unsigned char *)(*(void *)(v8 + 72) + v54) = v60;
                    *(unsigned char *)(*(void *)(v8 + 3504) + v54) = v64;
                    *(_WORD *)(*(void *)(v8 + 24) + 2 * v54) = v65;
                    *(void *)(*(void *)(v8 + 80) + 8 * v54) = v69;
                    *(unsigned char *)(*(void *)(v8 + 3528) + v54) = v66;
                    *(unsigned char *)(*(void *)(v8 + 3536) + v54) = v68;
                    LOWORD(v53) = *(_WORD *)(v8 + 102);
                    unsigned __int16 v57 = v53;
                  }
                  ++v58;
                }
                while (v58 < v57);
                unint64_t v70 = (unsigned __int16)v53;
              }
              ++v55;
              ++v54;
            }
            while (v56 < v70);
          }
          if (*(unsigned char *)(a3 + 8) != 6) {
            goto LABEL_175;
          }
          int v71 = *(_WORD **)(v8 + 3520);
          if ((*v71 & 0x20) == 0)
          {
            if (*(__int16 *)(v8 + 102) < 2 || (v71[1] & 0x20) == 0) {
              goto LABEL_175;
            }
            if ((*(_DWORD *)(v8 + 92) & 0x80000000) != 0)
            {
              if (*(unsigned char *)(v8 + 88) == 3)
              {
                *(_WORD *)(v8 + 102) = 1;
                **(unsigned char **)(v8 + 72) = 1;
              }
LABEL_175:
              uint64_t v22 = 10;
LABEL_198:
              *(_WORD *)v7 |= v82;
              return v22;
            }
          }
LABEL_189:
          uint64_t v22 = 11;
          goto LABEL_198;
        }
LABEL_197:
        uint64_t v22 = 2;
        goto LABEL_198;
      }
      return 11;
    }
    char v81 = 1;
LABEL_68:
    uint64_t v22 = 10;
    goto LABEL_92;
  }
  return IChu(a3, __s);
}

uint64_t process_neg(uint64_t a1, int a2, _WORD *a3)
{
  uint64_t v3 = *(void **)(a1 + 3184);
  uint64_t v4 = v3[30];
  uint64_t v5 = *(void *)(v3[31] + 56);
  uint64_t v6 = v3[29];
  uint64_t v7 = v3[33];
  *(void *)(a1 + 1328) |= 0x20uLL;
  uint64_t v8 = *(void *)(*(void *)(v6 + 104) + 8 * a2);
  __int16 v9 = *(_WORD *)(v8 + 100);
  if (!v9) {
    return 11;
  }
  *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v8 + 96);
  *(_WORD *)(v4 + 16) = v9;
  if (PDalt((unsigned __int16 *)v4) == 8) {
    return 11;
  }
  unsigned int v13 = *(unsigned __int8 *)(v7 + 88);
  if (v13 < *(unsigned __int8 *)(*(void *)(v7 + 72) + a2)) {
    return 11;
  }
  if (v13 == 3)
  {
    uint64_t v15 = *(void *)(v7 + 80);
    if ((*(_DWORD *)(v7 + 92) != *(_DWORD *)(v15 + 8 * a2) || *(_DWORD *)(v7 + 96) != *(_DWORD *)(v15 + 8 * a2 + 4))
      && *(__int16 *)(v7 + 102) - 1 != a2)
    {
      return 11;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v7 + 80);
  }
  *(unsigned char *)(*(void *)(v7 + 72) + a2) = SLcap(*(void *)(v4 + 8), 0, *(__int16 *)(v4 + 16), (void *)(v15 + 8 * a2), v5);
  *(_WORD *)(a1 + 1322) |= 0x200u;
  *a3 |= 4u;
  SFadd(*(char **)(v4 + 8), *(__int16 *)(v4 + 16), (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(void *)(v7 + 48), *(void *)(v7 + 64));
  return 2;
}

uint64_t ICgreek(uint64_t a1, int a2)
{
  if (a2)
  {
    ICgkchk(a1);
    return 10;
  }
  else
  {
    return ICgkver(a1);
  }
}

uint64_t ICgkchk(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 3184);
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v4 = *(void *)(*(void *)(v2 + 248) + 56);
  uint64_t v5 = *(void *)(v2 + 264);
  int v6 = strlen((const char *)(a1 + 1339));
  if (v6 << 16 >= 1
    && (*(unsigned char *)(a1 + (unsigned __int16)v6 - 1 + 1339) == 39
     || *(unsigned char *)(*(void *)(v2 + 80) + 65) == 39))
  {
    int v3 = gk_elision(a1);
  }
  if (*(unsigned char *)(a1 + 1417) == 39) {
    int v3 = gk_aphaeresis_aux_chk(a1);
  }
  if (v3 != 10) {
    gk_nu_drop(a1);
  }
  if (*(unsigned char *)(a1 + 1331))
  {
    __int16 v7 = *(_WORD *)(a1 + 1612);
    if (v7)
    {
      uint64_t v8 = (unsigned __int8 *)(a1 + 1547);
      __int16 v9 = v14;
      uint64_t v10 = *(unsigned __int16 *)(a1 + 1612);
      do
      {
        unsigned int v11 = *v8++;
        *v9++ = v11 - ((*(_DWORD *)(v4 + 4 * v11) & 0x4020000) != 0);
        --v10;
      }
      while (v10);
    }
    uint64_t v12 = v7 - 1;
    if (v14[v12] == 253) {
      v14[v12] = -49;
    }
    SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(unsigned char **)(v5 + 48), *(_WORD **)(v5 + 64));
    SFadd(v14, *(__int16 *)(a1 + 1612), (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
    *(_WORD *)v2 |= 4u;
  }
  return 10;
}

uint64_t ICgkver(uint64_t a1)
{
  uint64_t v2 = *(__int16 *)(a1 + 1612) + a1;
  if (*(unsigned __int8 *)(v2 + 1546) == 207 && *(unsigned char *)(a1 + 1482) != 39)
  {
    char v3 = 0;
    *(unsigned char *)(v2 + 1546) = -3;
  }
  else
  {
    char v3 = 1;
  }
  int v4 = gk_num(a1);
  if (gk_veruppercap(a1) == 10
    || gk_undouble_accent(a1) == 10
    || gk_apocope(a1) == 10
    || gk_aphaeresis(a1) == 10
    || v4 == 10)
  {
    uint64_t result = ICfndchk(a1);
    if (v3) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t result = 11;
  if ((v3 & 1) == 0) {
LABEL_13:
  }
    *(unsigned char *)(*(__int16 *)(a1 + 1612) + a1 + 1546) = -49;
  return result;
}

uint64_t gk_apocope(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  char v29 = 0;
  *(_OWORD *)__s = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 0;
  if (*(unsigned char *)(a1 + 1482) != 39) {
    return 11;
  }
  __strcpy_chk();
  __strcpy_chk();
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 0;
  unint64_t v11 = 0xB90000BF0000BE00;
  uint64_t v12 = 0xCB0000BA0000;
  char v14 = 0;
  __int16 v10 = -11829;
  unint64_t v13 = 0xC4B90000C40000CCLL;
  __strcpy_chk();
  unint64_t v2 = 0;
  __int16 v3 = *(_WORD *)(a1 + 1612);
  int v4 = &v10;
  do
  {
    char v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)__s = 0u;
    long long v16 = 0u;
    __strcat_chk();
    __strcat_chk();
    __strcpy_chk();
    __int16 v5 = strlen(__s);
    *(_WORD *)(a1 + 1612) = v5;
    uint64_t v6 = ICverify(__s, v5, a1);
    int v4 = (__int16 *)((char *)v4 + 3);
  }
  while (v6 == 11 && v2++ < 8);
  uint64_t v8 = v6;
  __strcpy_chk();
  *(_WORD *)(a1 + 1612) = v3;
  return v8;
}

uint64_t gk_aphaeresis(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 0;
  if (*(unsigned char *)(a1 + 1417) != 39) {
    return 11;
  }
  __strcpy_chk();
  unint64_t v2 = 0;
  int v7 = 48896;
  uint64_t v9 = 0xBA0000C20000;
  __int16 v6 = -14914;
  char v8 = -66;
  __int16 v3 = &v6;
  do
  {
    char v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)__s = 0u;
    long long v11 = 0u;
    __strcat_chk();
    __strcat_chk();
    __int16 v4 = strlen(__s);
    uint64_t result = ICverify(__s, v4, a1);
    if (v2 > 3) {
      break;
    }
    ++v2;
    __int16 v3 = (__int16 *)((char *)v3 + 3);
  }
  while (result == 11);
  return result;
}

uint64_t gk_nu_drop(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v14 = 0uLL;
  char v15 = 0;
  __strcpy_chk();
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 3184) + 264);
  *(_WORD *)__s = -15920;
  char v13 = 0;
  WORD1(v14) = -16707;
  *(_WORD *)((char *)&v14 + 7) = -15928;
  char v4 = **(unsigned char **)(v3 + 3496);
  int v5 = *(unsigned __int8 *)(a1 + 1339);
  for (uint64_t i = __s; ; i += 5)
  {
    int v7 = strlen(i);
    if (v5 && v7 << 16 >= 1)
    {
      unsigned int v8 = (unsigned __int16)v7;
      unsigned int v9 = (__int16)strlen((const char *)(a1 + 1339));
      size_t v10 = (int)v8 <= (int)v9 ? v9 : v8;
      if (!memcmp((const void *)(a1 + 1339), i, v10)) {
        break;
      }
    }
    if (++v2 == 4) {
      return 10;
    }
  }
  if (v4) {
    return 10;
  }
  *(void *)(a1 + 1328) |= 0x10000000uLL;
  if ((unsigned __int16)v2 <= 2u) {
    *(_WORD *)(a1 + 1404) = v2 + 3;
  }
  return 3;
}

uint64_t gk_elision(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 3184);
  uint64_t v3 = v2[33];
  char v4 = *(int **)(v2[31] + 56);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v36, 0, sizeof(v36));
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  int v5 = (unsigned __int8 *)(a1 + 1339);
  __int16 v6 = strlen((const char *)(a1 + 1339));
  __strcpy_chk();
  int v7 = *v4;
  LOWORD(v24) = 10191;
  BYTE2(v24) = 0;
  WORD5(v24) = 2;
  HIDWORD(v24) = 667418624;
  WORD4(v25) = 2;
  *(_DWORD *)((char *)&v25 + 10) = -843513856;
  HIWORD(v25) = 39;
  WORD3(v26) = 3;
  DWORD2(v26) = -742850559;
  WORD6(v26) = 39;
  WORD2(v27) = 3;
  *(_DWORD *)((char *)&v27 + 6) = -994311935;
  WORD5(v27) = 39;
  WORD1(v2_Block_object_dispose(&STACK[0x510], 8) = 3;
  DWORD1(v2_Block_object_dispose(&STACK[0x510], 8) = -1178206208;
  WORD4(v2_Block_object_dispose(&STACK[0x510], 8) = 10192;
  LOWORD(v29) = 4;
  BYTE10(v2_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_DWORD *)((char *)&v29 + 2) = -1178206207;
  WORD3(v29) = 10179;
  BYTE8(v29) = 0;
  HIWORD(v29) = 4;
  LODWORD(v30[0]) = -1094188799;
  WORD2(v30[0]) = 10192;
  BYTE6(v30[0]) = 0;
  WORD6(v30[0]) = 4;
  *(_DWORD *)((char *)v30 + 14) = -1094189055;
  WORD1(v30[1]) = 10179;
  BYTE4(v30[1]) = 0;
  WORD5(v30[1]) = 4;
  HIDWORD(v30[1]) = -1177747199;
  LOWORD(v31) = 10190;
  BYTE2(v31) = 0;
  WORD4(v31) = 4;
  *(_DWORD *)((char *)&v31 + 10) = -994246656;
  HIWORD(v31) = 39;
  WORD3(v32) = 3;
  DWORD2(v32) = -843186176;
  WORD6(v32) = 39;
  WORD2(v33) = 3;
  *(_DWORD *)((char *)&v33 + 6) = -742522879;
  WORD5(v33) = 39;
  WORD1(v34) = 3;
  *(void *)((char *)&v34 + 4) = 0x27CEBED0CFD20101;
  BYTE12(v34) = 0;
  LOWORD(v35) = 6;
  __asm { FMOV            V1.2S, #-1.5625 }
  *(_DWORD *)((char *)&v35 + 2) = _D1;
  WORD3(v35) = 10191;
  BYTE8(v35) = 0;
  HIWORD(v35) = 4;
  LODWORD(v36[0]) = -944177152;
  WORD2(v36[0]) = 10183;
  BYTE6(v36[0]) = 0;
  WORD6(v36[0]) = 4;
  *(_DWORD *)((char *)v36 + 14) = 667418624;
  BYTE2(v36[1]) = 0;
  WORD5(v36[1]) = 2;
  HIDWORD(v36[1]) = 667484160;
  WORD4(v37) = 2;
  *(_DWORD *)((char *)&v37 + 10) = 667090944;
  BYTE14(v37) = 0;
  WORD3(v3_Block_object_dispose(&STACK[0x510], 8) = 2;
  DWORD2(v3_Block_object_dispose(&STACK[0x510], 8) = 667942912;
  BYTE12(v3_Block_object_dispose(&STACK[0x510], 8) = 0;
  v39[2] = 2;
  *(_DWORD *)&v39[3] = -977403904;
  v39[5] = 10185;
  LOBYTE(v39[6]) = 0;
  *(_DWORD *)&v39[9] = 4;
  if (SLstrcmp((unsigned char *)&v25 + 12, v5))
  {
    if (*v5 != 185 || *(unsigned __int8 *)(a1 + 1340) != 205 || *(unsigned char *)(v2[10] + 65) != 39)
    {
      BOOL v13 = 0;
      goto LABEL_13;
    }
    BOOL v13 = *(unsigned char *)(a1 + 1341) == 0;
    if (*(unsigned char *)(a1 + 1341) || (v7 & 0x10000000) != 0) {
      goto LABEL_13;
    }
  }
  else if ((v7 & 0x10000000) != 0)
  {
    BOOL v13 = 1;
    goto LABEL_13;
  }
  int v14 = *(unsigned __int8 *)(a1 + 1547);
  BOOL v13 = 1;
  if (v14 != 176 && v14 != 208)
  {
    *(void *)(a1 + 1328) |= 0x10000000uLL;
    uint64_t result = 3;
    __int16 v22 = 11;
    goto LABEL_47;
  }
LABEL_13:
  unint64_t v15 = 0;
  if (SLstrcmp(&v24, v5))
  {
    int v16 = v6;
    long long v17 = (unsigned char *)((unint64_t)&v24 | 0xE);
    BOOL v18 = 1;
    do
    {
      if (*(unsigned char *)(v2[10] + 65) == 39)
      {
        int v19 = *((__int16 *)v17 - 2);
        if (v16 > v19) {
          int v19 = v16;
        }
        if (!memcmp(v5, v17 - 14, v19 - 1)) {
          break;
        }
      }
      BOOL v18 = v15 < 0x14;
      if (v15 == 20) {
        goto LABEL_24;
      }
      int v20 = SLstrcmp(v17, v5);
      v17 += 14;
      ++v15;
    }
    while (v20);
  }
  else
  {
    BOOL v18 = 1;
  }
  if ((unsigned __int16)v15 == 21) {
LABEL_24:
  }
    LOWORD(v15) = 20;
  if ((**(_WORD **)(v3 + 3520) & 0x200) != 0 && *((unsigned char *)&v24 + 14 * (unsigned __int16)v15 + 12))
  {
    if (!*((unsigned char *)&v24 + 14 * (unsigned __int16)v15 + 13))
    {
      *(void *)(a1 + 1328) |= 0x10000000uLL;
      uint64_t result = 11;
      switch((unsigned __int16)v15)
      {
        case 5u:
          __int16 v22 = 15;
          break;
        case 0xBu:
          __int16 v22 = 21;
          break;
        case 7u:
          __int16 v22 = 17;
          break;
        default:
          return result;
      }
      goto LABEL_47;
    }
  }
  else if (*((unsigned char *)&v24 + 14 * (unsigned __int16)v15 + 13))
  {
    *(void *)(a1 + 1328) |= 0x10000000uLL;
    __int16 v23 = v15 - 3;
    if ((unsigned __int16)(v15 - 3) >= 0xAu || ((0x229u >> v23) & 1) == 0) {
      return 11;
    }
    __int16 v22 = asc_20CC61E90[v23];
    uint64_t result = 11;
    goto LABEL_47;
  }
  if (*(_DWORD *)&v18 & ((v7 & 0x10000000u) >> 28)) {
    return 10;
  }
  if ((v13 | ((v7 & 0x10000000u) >> 28))) {
    return 3;
  }
  *(void *)(a1 + 1328) |= 0x10000000uLL;
  if ((unsigned __int16)v15 >= 0x15u || ((0x1EFFFBu >> v15) & 1) == 0) {
    return 10;
  }
  __int16 v22 = asc_20CC61EA4[(__int16)v15];
  uint64_t result = 10;
LABEL_47:
  *(_WORD *)(a1 + 1404) = v22;
  return result;
}

uint64_t gk_undouble_accent(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 3184) + 248) + 56);
  if (*(__int16 *)(a1 + 1612) >= 1)
  {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 1612);
    char v4 = (unsigned __int8 *)(a1 + 1547);
    do
    {
      int v6 = *v4++;
      int v5 = v6;
      if (v6 == *(unsigned __int8 *)(a1 + 1338) || (v5 | 2) == 0x2F) {
        return 11;
      }
    }
    while (--v3);
  }
  __strcpy_chk();
  int v7 = GREEKdoubly_accented((const char *)(a1 + 1547), v2);
  if (v7 < 1) {
    return 11;
  }
  *(unsigned char *)(a1 + (unsigned __int16)v7 + 1547) -= (*(_DWORD *)(v2
                                                             + 4
                                                             * *(unsigned __int8 *)(a1 + (unsigned __int16)v7 + 1547)) & 0x4020000) != 0;
  int v8 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  __strcpy_chk();
  if (v8 == 10) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t GREEKdoubly_accented(const char *a1, uint64_t a2)
{
  int v4 = strlen(a1);
  if (v4 << 16 < 1)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v5 = 0;
    __int16 v6 = 0;
    while (1)
    {
      if ((*(_DWORD *)(a2 + 4 * a1[v6]) & 0x4020000) != 0) {
        ++v5;
      }
      if (v5 > 1u) {
        break;
      }
      if ((__int16)v4 <= ++v6) {
        return 0;
      }
    }
  }
  return v6;
}

uint64_t gk_aphaeresis_aux_chk(uint64_t a1)
{
  int v2 = strlen((const char *)(a1 + 1339));
  if (v2 << 16 < 1
    || (*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 3184) + 248) + 56)
                  + 4 * *(unsigned __int8 *)(a1 + (unsigned __int16)v2 - 1 + 1339)) & 0x10000000) != 0)
  {
    return 10;
  }
  *(void *)(a1 + 1328) |= 0x10000000uLL;
  *(_WORD *)(a1 + 1404) = 1;
  return 3;
}

uint64_t gk_num(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(*(void *)(v2 + 248) + 56);
  uint64_t v4 = *(void *)(v2 + 264);
  unsigned __int16 v5 = (char *)(a1 + 1547);
  __strcpy_chk();
  int v6 = *(__int16 *)(a1 + 1612);
  if (v6 < 1) {
    return 11;
  }
  LOWORD(v7) = 0;
  while ((*(_DWORD *)(v3 + 4 * v14[(unsigned __int16)v7]) & 0x8000000) != 0)
  {
    int v7 = (__int16)(v7 + 1);
    if (v7 >= v6)
    {
      LOWORD(v7) = *(_WORD *)(a1 + 1612);
      break;
    }
  }
  if (!(_WORD)v7) {
    return 11;
  }
  __strcpy_chk();
  __int16 v8 = *(_WORD *)(a1 + 1612) - v7;
  *(_WORD *)(a1 + 1612) = v8;
  uint64_t v9 = ICverify(v5, v8, a1);
  if (v9 == 11)
  {
    uint64_t v10 = gk_veruppercap(a1);
    __strcpy_chk();
    *(_WORD *)(a1 + 1612) = v6;
    if (v10 == 11) {
      return v10;
    }
    uint64_t v10 = 10;
  }
  else
  {
    uint64_t v10 = v9;
    __strcpy_chk();
    *(_WORD *)(a1 + 1612) = v6;
  }
  long long v11 = *(_WORD **)(v4 + 3520);
  if ((*v11 & 0x10) == 0) {
    return 11;
  }
  *(_WORD *)(v4 + 18) &= ~1u;
  *v11 &= ~1u;
  if (*(_DWORD *)(a1 + 1308))
  {
    unsigned int v13 = *(_DWORD *)(v4 + 3480);
    if (v13) {
      *(_DWORD *)(v4 + 3480) = v13 >> v7;
    }
  }
  return v10;
}

uint64_t gk_veruppercap(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(v2 + 264);
  int v4 = *(unsigned __int8 *)(v3 + 88);
  if (v4 == 2 || (uint64_t result = 11, v4 == 1) && *(_DWORD *)(a1 + 24) == 64)
  {
    if (SFaccent((unsigned __int8 *)(a1 + 1547), *(__int16 *)(a1 + 1612), *(void *)(v2 + 248), *(__int16 **)(v2 + 264)))
    {
      *(_WORD *)(v3 + 102) = 1;
      *(_WORD *)(v3 + 3492) |= 2u;
      **(_WORD **)(a1 + 3184) |= 0x40u;
      return 10;
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t ICpar(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v191 = a2;
  uint64_t v193 = *MEMORY[0x263EF8340];
  uint64_t v3 = (const char *)(a3 + 1547);
  uint64_t v179 = *(void *)(*(void *)(*(void *)(a3 + 3184) + 248) + 56);
  if ((int)(strlen((const char *)(a3 + 1547)) << 16) >= 1)
  {
    __int16 v4 = 0;
    int v5 = 0;
    uint64_t v180 = 0;
    int v182 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    int v183 = 0;
    int v178 = 0;
    int v187 = 0;
    int v189 = 0;
    int v11 = 0;
    unint64_t v185 = 0;
    while (2)
    {
      int v12 = v3[v4];
      if (v12 != 34)
      {
        if (v12 == 39)
        {
          if (v7 != 39)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case 187:
                  --v8;
                  break;
                case 96:
                  --v5;
                  break;
                case 34:
                  --v9;
                  break;
              }
              int v6 = 0;
              --v11;
            }
            else
            {
              if ((__int16)v6 >= 3)
              {
                switch(v7)
                {
                  case 187:
                    v8 -= v6;
                    break;
                  case 96:
                    v5 -= v6;
                    break;
                  case 34:
                    v9 -= v6;
                    break;
                }
              }
              int v6 = 0;
            }
          }
          ++v6;
          ++v10;
          int v7 = 39;
          uint64_t v26 = v191;
          *(unsigned char *)(v191 + (__int16)v11) = 39;
          *(unsigned char *)(v26 + (__int16)++v11) = 0;
          goto LABEL_182;
        }
        int v14 = *(unsigned __int8 *)(a3 + 8);
        if (v12 == 187 && v14 == 7)
        {
          if (v7 != 187)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case '""':
                  --v9;
                  break;
                  --v5;
                  break;
                case '\'':
                  --v10;
                  ++v187;
                  a1[(__int16)v189] = 39;
                  a1[(__int16)(v189 + 1)] = 0;
                  char v19 = v3[v4];
                  ++v189;
                  goto LABEL_100;
              }
              char v19 = -69;
LABEL_100:
              int v6 = 0;
              --v11;
LABEL_172:
              ++v6;
              int v27 = v11 + 1;
              uint64_t v37 = v191;
              *(unsigned char *)(v191 + (__int16)v11) = v19;
              ++v8;
              *(unsigned char *)(v37 + (__int16)(v11 + 1)) = 0;
              int v7 = 187;
LABEL_181:
              int v11 = v27;
              goto LABEL_182;
            }
            if ((__int16)v6 >= 3)
            {
              switch(v7)
              {
                case '""':
                  v9 -= v6;
                  goto LABEL_171;
                  v5 -= v6;
                  goto LABEL_171;
                case '\'':
                  v10 -= v6;
LABEL_171:
                  char v19 = -69;
                  int v6 = 0;
                  goto LABEL_172;
              }
            }
            int v6 = 0;
          }
          char v19 = -69;
          goto LABEL_172;
        }
        if (v12 == 96 && v14 == 11)
        {
          if (v7 != 96)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case 34:
                  --v9;
                  break;
                case 187:
                  --v8;
                  break;
                case 39:
                  --v10;
                  ++v187;
                  a1[(__int16)v189] = 39;
                  a1[(__int16)(v189 + 1)] = 0;
                  char v20 = v3[v4];
                  ++v189;
                  goto LABEL_168;
              }
              char v20 = 96;
LABEL_168:
              int v6 = 0;
              --v11;
LABEL_180:
              ++v6;
              int v27 = v11 + 1;
              uint64_t v38 = v191;
              *(unsigned char *)(v191 + (__int16)v11) = v20;
              ++v5;
              *(unsigned char *)(v38 + (__int16)(v11 + 1)) = 0;
              int v7 = 96;
              goto LABEL_181;
            }
            if ((__int16)v6 >= 3)
            {
              switch(v7)
              {
                case 34:
                  v9 -= v6;
                  goto LABEL_179;
                case 187:
                  v8 -= v6;
                  goto LABEL_179;
                case 39:
                  v10 -= v6;
LABEL_179:
                  char v20 = 96;
                  int v6 = 0;
                  goto LABEL_180;
              }
            }
            int v6 = 0;
          }
          char v20 = 96;
          goto LABEL_180;
        }
        if ((unsigned __int16)v6 == 2)
        {
          if (v7 > 95)
          {
            int v25 = v8 - 1;
            if (v7 != 187) {
              int v25 = v8;
            }
            if (v7 == 96) {
              --v5;
            }
            else {
              int v8 = v25;
            }
            unsigned int v17 = v185;
            unsigned int v18 = HIDWORD(v185);
          }
          else
          {
            unsigned int v17 = v185;
            unsigned int v18 = HIDWORD(v185);
            if (v7 == 34)
            {
              --v9;
            }
            else if (v7 == 39)
            {
              --v10;
              ++v187;
              a1[(__int16)v189] = 39;
              a1[(__int16)(v189 + 1)] = 0;
              int v12 = v3[v4];
              ++v189;
            }
          }
          --v11;
        }
        else
        {
          int v21 = v5 - v6;
          int v22 = v8 - v6;
          if (v7 != 187) {
            int v22 = v8;
          }
          if (v7 == 96) {
            int v22 = v8;
          }
          else {
            int v21 = v5;
          }
          int v23 = v9 - v6;
          int v24 = v10 - v6;
          if (v7 != 39) {
            int v24 = v10;
          }
          if (v7 == 34) {
            int v24 = v10;
          }
          else {
            int v23 = v9;
          }
          if (v7 <= 95)
          {
            int v22 = v8;
            int v21 = v5;
          }
          else
          {
            int v24 = v10;
            int v23 = v9;
          }
          if ((__int16)v6 >= 3)
          {
            int v10 = v24;
            int v9 = v23;
            int v8 = v22;
            int v5 = v21;
          }
          unsigned int v17 = v185;
          unsigned int v18 = HIDWORD(v185);
        }
        int v29 = *(_DWORD *)(v179 + 4 * v12);
        uint64_t v30 = *(void *)&v29 & 0x400000;
        if ((*(void *)&v29 & 0xC00000) != 0x400000) {
          uint64_t v30 = 0;
        }
        uint64_t v31 = *(void *)&v29 & 0x200000;
        if ((*(void *)&v29 & 0xA00000) != 0x200000) {
          uint64_t v31 = 0;
        }
        uint64_t v32 = v30 | v31;
        uint64_t v33 = *(void *)&v29 & 0xA00000;
        if ((v29 & 0x2000) != 0) {
          uint64_t v33 = *(void *)&v29 & 0xA00000;
        }
        else {
          uint64_t v32 = 0;
        }
        if (v33) {
          BOOL v34 = (v29 & 0x1002400) == 16778240;
        }
        else {
          BOOL v34 = 0;
        }
        unint64_t v35 = v29 & 0x1000000;
        if (!v34) {
          unint64_t v35 = 0;
        }
        switch(((v32 | v35) - 0x200000) >> 21)
        {
          case 0uLL:
            if ((v17 & 0x200000) != 0) {
              goto LABEL_220;
            }
            if ((__int16)v18 < 2) {
              goto LABEL_187;
            }
            if ((unsigned __int16)v18 == 2)
            {
              if ((v17 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v17 & 0x1000000) != 0)
              {
                --v189;
              }
              else if ((v17 & 0x2000) != 0)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))--HIDWORD(v180); {
                  else
                  }
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              unsigned int v18 = 0;
              --v11;
            }
            else
            {
              if ((v17 & 0x400000) != 0)
              {
                v182 -= v18;
LABEL_211:
                unsigned int v17 = 0x200000;
                unsigned int v18 = 0;
                goto LABEL_220;
              }
              if ((v17 & 0x2000) != 0)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))HIDWORD(v180) -= v18; {
                  else
                  }
                    LODWORD(v180) = v180 - v18;
                }
                else
                {
                  v178 -= v18;
                }
                goto LABEL_211;
              }
LABEL_187:
              unsigned int v18 = 0;
            }
            unsigned int v17 = 0x200000;
LABEL_220:
            if (v12 <= 160)
            {
              if (v12 > 92)
              {
                unsigned int v186 = v18;
                switch(v12)
                {
                  case 139:
                    if ((~v17 & 0x8B) != 0)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097291;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097291;
                    }
                    break;
                  case 140:
                    if ((~v17 & 0x8C) != 0 && *(unsigned char *)(a3 + 8) == 15)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097292;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097292;
                    }
                    break;
                  case 141:
                  case 142:
                  case 143:
                  case 144:
                    goto LABEL_671;
                  case 145:
                    if ((~v17 & 0x91) != 0)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097297;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097297;
                    }
                    break;
                  case 146:
                    if ((~v17 & 0x92) != 0)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097298;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097298;
                    }
                    break;
                  case 147:
                    if ((~v17 & 0x93) != 0)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097299;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097299;
                    }
                    break;
                  case 148:
                    if ((~v17 & 0x94) != 0)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097300;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097300;
                    }
                    break;
                  default:
                    if (v12 == 93)
                    {
                      if ((~v17 & 0x5D) == 0) {
                        goto LABEL_310;
                      }
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v183 -= v18;
                          unsigned int v17 = 2097245;
                          goto LABEL_670;
                        }
                        unsigned int v186 = 0;
                        --v183;
                        --v11;
                      }
                      unsigned int v17 = 2097245;
                    }
                    else
                    {
                      if (v12 != 125 || (~v17 & 0x7D) == 0) {
                        goto LABEL_310;
                      }
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v186 = 0;
                        int v53 = 84;
                        goto LABEL_615;
                      }
                      if ((unsigned __int16)v18 != 2)
                      {
                        v183 -= v18;
                        unsigned int v17 = 2097277;
                        goto LABEL_670;
                      }
                      unsigned int v186 = 0;
                      --v183;
                      --v11;
                      unsigned int v17 = 2097277;
                    }
                    break;
                }
                goto LABEL_671;
              }
              if (v12 == 41)
              {
                if ((~v17 & 0x29) != 0)
                {
                  unsigned int v17 = 2097193;
                  if ((__int16)v18 < 2) {
                    goto LABEL_670;
                  }
                  if ((unsigned __int16)v18 != 2)
                  {
                    v183 -= v18;
                    goto LABEL_670;
                  }
                  unsigned int v186 = 0;
                  --v183;
                  --v11;
                  goto LABEL_671;
                }
              }
              else if (v12 == 60)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v183 -= v18;
                      unsigned int v17 = 2097212;
                      goto LABEL_670;
                    }
                    unsigned int v186 = 0;
                    --v183;
                    --v11;
                  }
                  unsigned int v17 = 2097212;
                  goto LABEL_671;
                }
              }
              else if (v12 == 62 && (~v17 & 0x3E) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v186 = 0;
LABEL_506:
                  unsigned int v17 = 2097214;
                }
                else
                {
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v186 = 0;
                    --v183;
                    --v11;
                    goto LABEL_506;
                  }
                  v183 -= v18;
                  unsigned int v17 = 2097214;
LABEL_670:
                  unsigned int v186 = 0;
                }
                goto LABEL_671;
              }
              goto LABEL_310;
            }
            if (v12 <= 186)
            {
              if (v12 == 161)
              {
                if ((~v17 & 0xA1) != 0 && *(unsigned char *)(a3 + 8) == 1)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v183 -= v18;
                      unsigned int v17 = 2097313;
                      goto LABEL_670;
                    }
                    unsigned int v186 = 0;
                    --v183;
                    --v11;
                  }
                  unsigned int v17 = 2097313;
                  goto LABEL_671;
                }
                goto LABEL_310;
              }
              if (v12 == 163)
              {
                if ((~v17 & 0xA3) != 0 && *(unsigned char *)(a3 + 8) == 1)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v183 -= v18;
                      unsigned int v17 = 2097315;
                      goto LABEL_670;
                    }
                    unsigned int v186 = 0;
                    --v183;
                    --v11;
                  }
                  unsigned int v17 = 2097315;
LABEL_671:
                  int v6 = 0;
                  uint64_t v59 = v191;
                  *(unsigned char *)(v191 + (__int16)v11++) = v12;
                  *(unsigned char *)(v59 + (__int16)v11) = 0;
                  unint64_t v185 = __PAIR64__(v186, v17) + 0x100000000;
                  unint64_t v58 = &v192[(__int16)v183];
                  *(unsigned char *)unint64_t v58 = v3[v4];
                  ++v183;
                  goto LABEL_672;
                }
LABEL_310:
                unsigned int v186 = v18;
                goto LABEL_671;
              }
              if (v12 != 171 || (~v17 & 0xAB) == 0) {
                goto LABEL_310;
              }
              if ((__int16)v18 >= 2)
              {
                if ((unsigned __int16)v18 != 2)
                {
                  v183 -= v18;
                  unsigned int v17 = 2097323;
                  goto LABEL_670;
                }
                unsigned int v186 = 0;
                --v183;
                --v11;
                unsigned int v17 = 2097323;
                goto LABEL_671;
              }
              unsigned int v186 = 0;
              int v53 = 130;
            }
            else
            {
              if (v12 > 221)
              {
                if (v12 == 222)
                {
                  if ((~v17 & 0xDE) != 0)
                  {
                    if ((__int16)v18 < 2)
                    {
                      unsigned int v186 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        v183 -= v18;
                        unsigned int v17 = 2097374;
                        goto LABEL_670;
                      }
                      unsigned int v186 = 0;
                      --v183;
                      --v11;
                    }
                    unsigned int v17 = 2097374;
                    goto LABEL_671;
                  }
                }
                else if (v12 == 224 && (~v17 & 0xE0) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v183 -= v18;
                      unsigned int v17 = 2097376;
                      goto LABEL_670;
                    }
                    unsigned int v186 = 0;
                    --v183;
                    --v11;
                  }
                  unsigned int v17 = 2097376;
                  goto LABEL_671;
                }
                goto LABEL_310;
              }
              if (v12 == 187)
              {
                if ((~v17 & 0xBB) == 0) {
                  goto LABEL_310;
                }
                if ((__int16)v18 >= 2)
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v183 -= v18;
                    unsigned int v17 = 2097339;
                    goto LABEL_670;
                  }
                  unsigned int v186 = 0;
                  --v183;
                  --v11;
                  unsigned int v17 = 2097339;
                  goto LABEL_671;
                }
                unsigned int v186 = 0;
                int v53 = 146;
              }
              else
              {
                if (v12 != 189 || (~v17 & 0xBD) == 0 || *(unsigned char *)(a3 + 8) != 2) {
                  goto LABEL_310;
                }
                if ((__int16)v18 >= 2)
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v183 -= v18;
                    unsigned int v17 = 2097341;
                    goto LABEL_670;
                  }
                  unsigned int v186 = 0;
                  --v183;
                  --v11;
                  unsigned int v17 = 2097341;
                  goto LABEL_671;
                }
                unsigned int v186 = 0;
                int v53 = 148;
              }
            }
LABEL_615:
            unsigned int v17 = v53 | 0x200029;
            goto LABEL_671;
          case 1uLL:
            if ((v17 & 0x400000) != 0) {
              goto LABEL_314;
            }
            if ((__int16)v18 < 2) {
              goto LABEL_190;
            }
            if ((unsigned __int16)v18 == 2)
            {
              if ((v17 & 0x200000) != 0)
              {
                --v183;
              }
              else if ((v17 & 0x1000000) != 0)
              {
                --v189;
              }
              else if ((v17 & 0x2000) != 0)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))--HIDWORD(v180); {
                  else
                  }
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              unsigned int v18 = 0;
              --v11;
            }
            else
            {
              if ((v17 & 0x200000) != 0)
              {
                v183 -= v18;
LABEL_213:
                unsigned int v17 = 0x400000;
                unsigned int v18 = 0;
                goto LABEL_314;
              }
              if ((v17 & 0x2000) != 0)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))HIDWORD(v180) -= v18; {
                  else
                  }
                    LODWORD(v180) = v180 - v18;
                }
                else
                {
                  v178 -= v18;
                }
                goto LABEL_213;
              }
LABEL_190:
              unsigned int v18 = 0;
            }
            unsigned int v17 = 0x400000;
LABEL_314:
            if (v12 > 146)
            {
              if (v12 <= 174)
              {
                if (v12 > 155)
                {
                  if (v12 == 156)
                  {
                    if ((~v17 & 0x9C) != 0 && *(unsigned char *)(a3 + 8) == 2)
                    {
                      if ((__int16)v18 < 2)
                      {
                        unsigned int v18 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v18 != 2)
                        {
                          v182 -= v18;
                          int v55 = 4194460;
                          goto LABEL_663;
                        }
                        unsigned int v18 = 0;
                        --v182;
                        --v11;
                      }
                      int v42 = 4194460;
                      goto LABEL_642;
                    }
                  }
                  else if (v12 == 171 && (~v17 & 0xAB) != 0)
                  {
                    if ((__int16)v18 >= 2)
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        v182 -= v18;
                        int v55 = 4194475;
                        goto LABEL_663;
                      }
                      unsigned int v18 = 0;
                      --v182;
                      --v11;
                      int v42 = 4194475;
                      goto LABEL_642;
                    }
                    unsigned int v18 = 0;
                    int v54 = 131;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 147)
                {
                  if ((~v17 & 0x93) != 0)
                  {
                    if ((__int16)v18 < 2)
                    {
                      unsigned int v18 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        v182 -= v18;
                        int v55 = 4194451;
                        goto LABEL_663;
                      }
                      unsigned int v18 = 0;
                      --v182;
                      --v11;
                    }
                    int v42 = 4194451;
                    goto LABEL_642;
                  }
                }
                else if (v12 == 155 && (~v17 & 0x9B) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194459;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194459;
                  goto LABEL_642;
                }
              }
              else if (v12 <= 186)
              {
                if (v12 == 175)
                {
                  if ((~v17 & 0xAF) != 0 && *(unsigned char *)(a3 + 8) == 1)
                  {
                    if ((__int16)v18 >= 2)
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        v182 -= v18;
                        int v55 = 4194479;
                        goto LABEL_663;
                      }
                      unsigned int v18 = 0;
                      --v182;
                      --v11;
                      int v42 = 4194479;
                      goto LABEL_642;
                    }
                    unsigned int v18 = 0;
                    int v54 = 135;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 181 && (~v17 & 0xB5) != 0 && *(unsigned char *)(a3 + 8) == 2)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194485;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194485;
                  goto LABEL_642;
                }
              }
              else if (v12 == 187)
              {
                if ((~v17 & 0xBB) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    int v42 = 4194491;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194491;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                    int v42 = 4194491;
                  }
                  goto LABEL_642;
                }
              }
              else if (v12 == 221)
              {
                if ((~v17 & 0xDD) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194525;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194525;
                  goto LABEL_642;
                }
              }
              else if (v12 == 223 && (~v17 & 0xDF) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v18 = 0;
                }
                else
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v182 -= v18;
                    int v55 = 4194527;
                    goto LABEL_663;
                  }
                  unsigned int v18 = 0;
                  --v182;
                  --v11;
                }
                int v42 = 4194527;
                goto LABEL_642;
              }
              goto LABEL_414;
            }
            if (v12 > 122)
            {
              if (v12 <= 131)
              {
                if (v12 == 123)
                {
                  if ((~v17 & 0x7B) != 0)
                  {
                    if ((__int16)v18 >= 2)
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        v182 -= v18;
                        int v55 = 4194427;
                        goto LABEL_663;
                      }
                      unsigned int v18 = 0;
                      --v182;
                      --v11;
                      int v42 = 4194427;
                      goto LABEL_642;
                    }
                    unsigned int v18 = 0;
                    int v54 = 83;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 130 && (~v17 & 0x82) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194434;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194434;
                  goto LABEL_642;
                }
              }
              else if (v12 == 132)
              {
                if ((~v17 & 0x84) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194436;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194436;
                  goto LABEL_642;
                }
              }
              else if (v12 == 139)
              {
                if ((~v17 & 0x8B) != 0)
                {
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194443;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                  }
                  int v42 = 4194443;
                  goto LABEL_642;
                }
              }
              else if (v12 == 145 && (~v17 & 0x91) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v18 = 0;
                }
                else
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v182 -= v18;
                    int v55 = 4194449;
LABEL_663:
                    LODWORD(v185) = v55;
                    goto LABEL_664;
                  }
                  unsigned int v18 = 0;
                  --v182;
                  --v11;
                }
                int v42 = 4194449;
                goto LABEL_642;
              }
              goto LABEL_414;
            }
            if (v12 > 61)
            {
              if (v12 == 62)
              {
                if ((~v17 & 0x3E) != 0)
                {
                  if ((__int16)v18 >= 2)
                  {
                    if ((unsigned __int16)v18 != 2)
                    {
                      v182 -= v18;
                      int v55 = 4194366;
                      goto LABEL_663;
                    }
                    unsigned int v18 = 0;
                    --v182;
                    --v11;
                    int v42 = 4194366;
                    goto LABEL_642;
                  }
                  unsigned int v18 = 0;
                  int v54 = 22;
                  goto LABEL_641;
                }
              }
              else if (v12 == 91 && (~v17 & 0x5B) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v18 = 0;
                }
                else
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v182 -= v18;
                    int v55 = 4194395;
                    goto LABEL_663;
                  }
                  unsigned int v18 = 0;
                  --v182;
                  --v11;
                }
                int v42 = 4194395;
                goto LABEL_642;
              }
LABEL_414:
              LODWORD(v185) = v17;
              goto LABEL_665;
            }
            if (v12 != 40)
            {
              if (v12 == 60 && (~v17 & 0x3C) != 0)
              {
                if ((__int16)v18 >= 2)
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v182 -= v18;
                    int v55 = 4194364;
                    goto LABEL_663;
                  }
                  unsigned int v18 = 0;
                  --v182;
                  --v11;
                  int v42 = 4194364;
                  goto LABEL_642;
                }
                unsigned int v18 = 0;
                int v54 = 20;
LABEL_641:
                int v42 = v54 | 0x400028;
LABEL_642:
                LODWORD(v185) = v42;
                goto LABEL_665;
              }
              goto LABEL_414;
            }
            if ((~v17 & 0x28) == 0) {
              goto LABEL_414;
            }
            if ((__int16)v18 < 2)
            {
              int v55 = 4194344;
              goto LABEL_663;
            }
            if ((unsigned __int16)v18 != 2)
            {
              LODWORD(v185) = 4194344;
              v182 -= v18;
LABEL_664:
              unsigned int v18 = 0;
              goto LABEL_665;
            }
            LODWORD(v185) = 4194344;
            unsigned int v18 = 0;
            --v182;
            --v11;
LABEL_665:
            int v6 = 0;
            uint64_t v57 = v191;
            *(unsigned char *)(v191 + (__int16)v11++) = v12;
            *(unsigned char *)(v57 + (__int16)v11) = 0;
            HIDWORD(v185) = v18 + 1;
            unint64_t v58 = &v192[(__int16)v182 + 65];
            *(unsigned char *)unint64_t v58 = v3[v4];
            ++v182;
LABEL_672:
            *((_WORD *)v58 + 1) = v4;
LABEL_182:
            __int16 v39 = strlen(v3);
            if ((__int16)v11 > 63) {
              goto LABEL_674;
            }
            if (v39 <= ++v4) {
              goto LABEL_674;
            }
            continue;
          case 2uLL:
            if ((v17 & 0x2000) != 0) {
              goto LABEL_418;
            }
            if ((__int16)v18 < 2)
            {
              unsigned int v18 = 0;
LABEL_417:
              unsigned int v17 = 0x2000;
              goto LABEL_418;
            }
            if ((unsigned __int16)v18 == 2)
            {
              if ((v17 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v17 & 0x200000) != 0)
              {
                --v183;
              }
              else
              {
                v189 += (int)(v17 << 7) >> 31;
              }
              unsigned int v18 = 0;
              --v11;
              goto LABEL_417;
            }
            if ((v17 & 0x200000) != 0)
            {
              v183 -= v18;
            }
            else
            {
              if ((v17 & 0x400000) != 0) {
                unsigned int v40 = v18;
              }
              else {
                unsigned int v40 = 0;
              }
              v182 -= v40;
            }
            unsigned int v17 = 0x2000;
            unsigned int v18 = 0;
LABEL_418:
            if (v12 > 144)
            {
              switch(v12)
              {
                case 145:
                  if ((~v17 & 0x91) == 0) {
                    goto LABEL_602;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_520;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_520:
                    unsigned int v17 = 8337;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v18;
                  unsigned int v17 = 8337;
LABEL_601:
                  unsigned int v18 = 0;
LABEL_602:
                  ++HIDWORD(v180);
                  goto LABEL_613;
                case 146:
                  if ((~v17 & 0x92) == 0) {
                    goto LABEL_602;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_522;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_522:
                    unsigned int v17 = 8338;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v18;
                  unsigned int v17 = 8338;
                  goto LABEL_601;
                case 147:
                  if ((~v17 & 0x93) == 0) {
                    goto LABEL_602;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_524;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_524:
                    unsigned int v17 = 8339;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v18;
                  unsigned int v17 = 8339;
                  goto LABEL_601;
                case 148:
                  if ((~v17 & 0x94) == 0) {
                    goto LABEL_602;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_526;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_526:
                    unsigned int v17 = 8340;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v18;
                  unsigned int v17 = 8340;
                  goto LABEL_601;
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                  goto LABEL_613;
                case 155:
                  if ((~v17 & 0x9B) == 0) {
                    goto LABEL_612;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_528;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    LODWORD(v180) = v180 - 1;
LABEL_528:
                    unsigned int v17 = 8347;
                    goto LABEL_612;
                  }
                  LODWORD(v180) = v180 - v18;
                  unsigned int v17 = 8347;
                  break;
                default:
                  if (v12 != 171)
                  {
                    if (v12 != 187) {
                      goto LABEL_613;
                    }
                    if ((~v17 & 0xBB) == 0) {
                      goto LABEL_612;
                    }
                    if ((__int16)v18 < 2)
                    {
                      unsigned int v18 = 0;
                      goto LABEL_536;
                    }
                    if ((unsigned __int16)v18 == 2)
                    {
                      unsigned int v18 = 0;
                      --v11;
                      LODWORD(v180) = v180 - 1;
LABEL_536:
                      unsigned int v17 = 8379;
                      goto LABEL_612;
                    }
                    LODWORD(v180) = v180 - v18;
                    unsigned int v17 = 8379;
                    break;
                  }
                  if ((~v17 & 0xAB) == 0) {
                    goto LABEL_612;
                  }
                  if ((__int16)v18 < 2)
                  {
                    unsigned int v18 = 0;
                    goto LABEL_538;
                  }
                  if ((unsigned __int16)v18 == 2)
                  {
                    unsigned int v18 = 0;
                    --v11;
                    LODWORD(v180) = v180 - 1;
LABEL_538:
                    unsigned int v17 = 8363;
                    goto LABEL_612;
                  }
                  LODWORD(v180) = v180 - v18;
                  unsigned int v17 = 8363;
                  break;
              }
LABEL_611:
              unsigned int v18 = 0;
              goto LABEL_612;
            }
            if (v12 == 60)
            {
              if ((~v17 & 0x3C) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v18 = 0;
                }
                else
                {
                  if ((unsigned __int16)v18 != 2)
                  {
                    v178 -= v18;
                    unsigned int v17 = 8252;
                    goto LABEL_607;
                  }
                  unsigned int v18 = 0;
                  --v11;
                  --v178;
                }
                unsigned int v17 = 8252;
              }
            }
            else
            {
              if (v12 != 62)
              {
                if (v12 == 139)
                {
                  if ((~v17 & 0x8B) != 0)
                  {
                    if ((__int16)v18 < 2)
                    {
                      unsigned int v18 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v18 != 2)
                      {
                        LODWORD(v180) = v180 - v18;
                        unsigned int v17 = 8331;
                        goto LABEL_611;
                      }
                      unsigned int v18 = 0;
                      --v11;
                      LODWORD(v180) = v180 - 1;
                    }
                    unsigned int v17 = 8331;
                  }
LABEL_612:
                  LODWORD(v180) = v180 + 1;
                }
LABEL_613:
                int v6 = 0;
                LODWORD(v185) = v17;
                HIDWORD(v185) = v18 + 1;
                int v27 = v11 + 1;
                uint64_t v56 = v191;
                *(unsigned char *)(v191 + (__int16)v11) = v12;
                *(unsigned char *)(v56 + (__int16)(v11 + 1)) = 0;
                goto LABEL_181;
              }
              if ((~v17 & 0x3E) != 0)
              {
                if ((__int16)v18 < 2)
                {
                  unsigned int v18 = 0;
                  goto LABEL_534;
                }
                if ((unsigned __int16)v18 == 2)
                {
                  unsigned int v18 = 0;
                  --v11;
                  --v178;
LABEL_534:
                  unsigned int v17 = 8254;
                  goto LABEL_608;
                }
                v178 -= v18;
                unsigned int v17 = 8254;
LABEL_607:
                unsigned int v18 = 0;
              }
            }
LABEL_608:
            ++v178;
            goto LABEL_613;
          case 7uLL:
            if ((v17 & 0x1000000) != 0) {
              goto LABEL_478;
            }
            if ((__int16)v18 < 2) {
              goto LABEL_202;
            }
            if ((unsigned __int16)v18 == 2)
            {
              if ((v17 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v17 & 0x200000) != 0)
              {
                --v183;
              }
              else if ((v17 & 0x2000) != 0)
              {
                if ((~v17 & 0x3C) != 0)
                {
                  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))--HIDWORD(v180); {
                  else
                  }
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              unsigned int v18 = 0;
              --v11;
              goto LABEL_469;
            }
            if ((v17 & 0x400000) != 0)
            {
              v182 -= v18;
            }
            else if ((v17 & 0x200000) != 0)
            {
              v183 -= v18;
            }
            else
            {
              if ((v17 & 0x2000) == 0)
              {
LABEL_202:
                unsigned int v18 = 0;
LABEL_469:
                unsigned int v17 = 0x1000000;
                goto LABEL_478;
              }
              if ((~v17 & 0x3C) != 0)
              {
                if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v17), (int8x16_t)xmmword_20CC61ED0), (int32x4_t)xmmword_20CC61ED0))))HIDWORD(v180) -= v18; {
                else
                }
                  LODWORD(v180) = v180 - v18;
              }
              else
              {
                v178 -= v18;
              }
            }
            unsigned int v17 = 0x1000000;
            unsigned int v18 = 0;
LABEL_478:
            if (v12 <= 46)
            {
              if (v12 == 33)
              {
                if ((~v17 & 0x21) != 0)
                {
                  LODWORD(v185) = 16777249;
                  int v49 = (unsigned __int16)v18 == 2;
                  v11 -= v49;
                  int v44 = v189 - v49;
LABEL_503:
                  unsigned int v18 = 0;
                  goto LABEL_504;
                }
              }
              else if (v12 == 44)
              {
                if ((~v17 & 0x2C) != 0)
                {
                  int v50 = (unsigned __int16)v18 == 2;
                  v11 -= v50;
                  int v44 = v189 - v50;
                  int v45 = 16777260;
                  goto LABEL_502;
                }
              }
              else if (v12 == 46 && (~v17 & 0x2E) != 0)
              {
                int v46 = (unsigned __int16)v18 == 2;
                v11 -= v46;
                int v44 = v189 - v46;
                int v45 = 16777262;
                goto LABEL_502;
              }
            }
            else if (v12 > 58)
            {
              if (v12 == 59)
              {
                if ((~v17 & 0x3B) != 0)
                {
                  int v51 = (unsigned __int16)v18 == 2;
                  v11 -= v51;
                  int v44 = v189 - v51;
                  int v45 = 16777275;
                  goto LABEL_502;
                }
              }
              else if (v12 == 63 && (~v17 & 0x3F) != 0)
              {
                int v47 = (unsigned __int16)v18 == 2;
                v11 -= v47;
                int v44 = v189 - v47;
                int v45 = 16777279;
                goto LABEL_502;
              }
            }
            else if (v12 == 47)
            {
              if ((~v17 & 0x2F) != 0)
              {
                int v48 = (unsigned __int16)v18 == 2;
                v11 -= v48;
                int v44 = v189 - v48;
                int v45 = 16777263;
                goto LABEL_502;
              }
            }
            else if (v12 == 58 && (~v17 & 0x3A) != 0)
            {
              int v43 = (unsigned __int16)v18 == 2;
              v11 -= v43;
              int v44 = v189 - v43;
              int v45 = 16777274;
LABEL_502:
              LODWORD(v185) = v45;
              goto LABEL_503;
            }
            LODWORD(v185) = v17;
            int v44 = v189;
LABEL_504:
            int v6 = 0;
            uint64_t v52 = v191;
            *(unsigned char *)(v191 + (__int16)v11) = v12;
            *(unsigned char *)(v52 + (__int16)(v11 + 1)) = 0;
            HIDWORD(v185) = v18 + 1;
            a1[(__int16)v44] = v3[v4];
            a1[(__int16)(v44 + 1)] = 0;
            ++v11;
            int v189 = v44 + 1;
            goto LABEL_182;
          default:
            if ((v17 & 0x400000) != 0)
            {
              if ((__int16)v18 < 2) {
                goto LABEL_209;
              }
              if ((unsigned __int16)v18 == 2)
              {
                --v182;
LABEL_198:
                --v11;
                goto LABEL_209;
              }
              v182 -= v18;
            }
            else if ((v17 & 0x200000) != 0)
            {
              if ((__int16)v18 < 2) {
                goto LABEL_209;
              }
              if ((unsigned __int16)v18 == 2)
              {
                --v183;
                goto LABEL_198;
              }
              v183 -= v18;
            }
            else
            {
              if ((v17 & 0x1000000) != 0)
              {
                if ((unsigned __int16)v18 != 2) {
                  goto LABEL_209;
                }
                --v189;
                goto LABEL_198;
              }
              if ((v17 & 0x2000) != 0 && (__int16)v18 >= 2)
              {
                int v36 = v17 & 0x3C;
                if ((unsigned __int16)v18 == 2)
                {
                  if (v36 == 60)
                  {
                    --v178;
                  }
                  else if (v17 - 8337 > 3)
                  {
                    LODWORD(v180) = v180 - 1;
                  }
                  else
                  {
                    --HIDWORD(v180);
                  }
                  goto LABEL_198;
                }
                if (v36 == 60)
                {
                  v178 -= v18;
                }
                else if (v17 - 8337 > 3)
                {
                  LODWORD(v180) = v180 - v18;
                }
                else
                {
                  HIDWORD(v180) -= v18;
                }
              }
            }
LABEL_209:
            unint64_t v185 = 0;
            int v6 = 0;
            a1[(__int16)v189] = v12;
            a1[(__int16)(v189 + 1)] = 0;
            uint64_t v41 = v191;
            *(unsigned char *)(v191 + (__int16)v11++) = v3[v4];
            *(unsigned char *)(v41 + (__int16)v11) = 0;
            ++v189;
            goto LABEL_182;
        }
      }
      break;
    }
    if (v7 != 34)
    {
      if ((unsigned __int16)v6 == 2)
      {
        switch(v7)
        {
          case 187:
            --v8;
            break;
          case 96:
            --v5;
            break;
          case 39:
            --v10;
            ++v187;
            a1[(__int16)v189] = 39;
            a1[(__int16)(v189 + 1)] = 0;
            char v13 = v3[v4];
            ++v189;
LABEL_83:
            int v6 = 0;
            --v11;
            goto LABEL_108;
        }
        char v13 = 34;
        goto LABEL_83;
      }
      if ((__int16)v6 >= 3)
      {
        switch(v7)
        {
          case 187:
            v8 -= v6;
            goto LABEL_107;
          case 96:
            v5 -= v6;
            goto LABEL_107;
          case 39:
            v10 -= v6;
LABEL_107:
            char v13 = 34;
            int v6 = 0;
            goto LABEL_108;
        }
      }
      int v6 = 0;
    }
    char v13 = 34;
LABEL_108:
    ++v6;
    int v27 = v11 + 1;
    uint64_t v28 = v191;
    *(unsigned char *)(v191 + (__int16)v11) = v13;
    ++v9;
    *(unsigned char *)(v28 + (__int16)(v11 + 1)) = 0;
    int v7 = 34;
    goto LABEL_181;
  }
  unint64_t v185 = 0;
  LOWORD(v11) = 0;
  LOWORD(v189) = 0;
  uint64_t v180 = 0;
  int v182 = 0;
  int v187 = 0;
  LOWORD(v17_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v183 = 0;
  int v10 = 0;
  LOWORD(v9) = 0;
  LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v5 = 0;
LABEL_674:
  unsigned int v60 = (const char *)(a3 + 1417);
  if (*(unsigned char *)(a3 + 8) == 11) {
    int v61 = v5;
  }
  else {
    int v61 = 0;
  }
  int v62 = v61 + v10;
  if ((_WORD)v187 && (unsigned __int16)(v61 + v10) == 1)
  {
    int v62 = 1 - v187;
  }
  else
  {
    int v63 = strlen(a1);
    if (v63 << 16 >= 1)
    {
      int v64 = 0;
      __int16 v65 = 0;
      int v66 = (__int16)v63;
      do
      {
        uint64_t v67 = (char *)&a1[v65];
        if (*v67 == 39)
        {
          strcpy(v67, &a1[v64 + 1]);
          LOWORD(v189) = v189 - 1;
        }
        int v64 = ++v65;
      }
      while (v66 > v65);
    }
  }
  int v188 = (char *)(a3 + 1482);
  if (!(_WORD)v62 && !(_WORD)v9 && !(_WORD)v8 && !(_WORD)v180 && !WORD2(v180) && !(_WORD)v178 && !(_WORD)v5)
  {
    int v68 = 0;
    LOWORD(v69) = 0;
    LOWORD(v70) = 0;
    LOWORD(v71) = 0;
    __int16 v181 = 0;
    LOWORD(v72) = 0;
    __int16 v73 = v189;
    goto LABEL_853;
  }
  int v74 = (__int16)v9;
  int v70 = v62 - ((v62 + ((unsigned __int16)(v62 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v70)
  {
    unsigned __int16 v75 = strlen(v60);
    __int16 v76 = strlen(v188);
    __int16 v77 = 0;
    while (1)
    {
      if (v76 <= v77 || (__int16 v78 = v77, ++v77, v188[v78] != 39))
      {
        if ((v75 & 0x8000) != 0) {
          goto LABEL_705;
        }
        int v79 = v60[v75 - 1];
        if (v79 != 39 && (*(unsigned char *)(a3 + 8) != 11 || v79 != 96)) {
          goto LABEL_705;
        }
        --v75;
      }
      LOWORD(v70) = v70 - 1;
      if (!(_WORD)v70) {
        goto LABEL_705;
      }
    }
  }
  LOWORD(v70) = 0;
LABEL_705:
  if (v74 >= 0) {
    int v71 = v74 & 1;
  }
  else {
    int v71 = -(v74 & 1);
  }
  if (v71)
  {
    if ((_WORD)v71)
    {
      __int16 v80 = strlen(v188);
      int v81 = strlen(v60);
      __int16 v82 = 0;
      while (1)
      {
        if (v80 <= v82 || (__int16 v83 = v82, ++v82, v188[v83] != 34))
        {
          if ((v81 & 0x8000) != 0 || v60[(unsigned __int16)v81 - 1] != 34) {
            goto LABEL_719;
          }
          --v81;
        }
        LOWORD(v71) = v71 - 1;
        if (!(_WORD)v71) {
          goto LABEL_719;
        }
      }
    }
    LOWORD(v71) = 0;
  }
LABEL_719:
  if ((v8 & 0x8000u) == 0) {
    int v84 = v8 & 1;
  }
  else {
    int v84 = -(v8 & 1);
  }
  if (v84 && *(unsigned char *)(a3 + 8) == 7)
  {
    if ((_WORD)v84)
    {
      __int16 v85 = v84;
      __int16 v86 = strlen(v188);
      int v87 = strlen(v60);
      LOWORD(v84) = v85;
      __int16 v88 = 0;
      while (1)
      {
        if (v86 <= v88 || (__int16 v89 = v88, ++v88, v188[v89] != 187))
        {
          if ((v87 & 0x8000) != 0 || v60[(unsigned __int16)v87 - 1] != 187) {
            goto LABEL_734;
          }
          --v87;
        }
        LOWORD(v84) = v84 - 1;
        if (!(_WORD)v84) {
          goto LABEL_734;
        }
      }
    }
    LOWORD(v84) = 0;
  }
LABEL_734:
  if ((v180 & 0x800000000000) == 0) {
    int v90 = SBYTE4(v180) & 1;
  }
  else {
    int v90 = -(SBYTE4(v180) & 1);
  }
  __int16 v181 = v84;
  if (!v90) {
    goto LABEL_799;
  }
  int v91 = *(unsigned __int8 *)(a3 + 8);
  if (v91 == 13)
  {
    if ((_WORD)v90)
    {
      __int16 v92 = strlen(v188);
      int v93 = strlen(v60);
      __int16 v94 = 0;
      while (1)
      {
        if (v92 > v94 && ((int v95 = v188[v94], v95 == 148) || v95 == 146))
        {
          ++v94;
        }
        else
        {
          if ((v93 & 0x8000) != 0) {
            goto LABEL_750;
          }
          int v96 = v60[(unsigned __int16)v93 - 1];
          if (v96 != 148 && v96 != 146) {
            goto LABEL_750;
          }
          --v93;
        }
        if (!(_WORD)--v90) {
          goto LABEL_750;
        }
      }
    }
    goto LABEL_799;
  }
LABEL_750:
  unsigned int v97 = v90 - ((v90 + ((unsigned __int16)(v90 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v90 == (((_WORD)v90 + ((unsigned __int16)(v90 & 0x8000) >> 15)) & 0xFFFE)) {
    goto LABEL_799;
  }
  if (v91 == 14)
  {
    unsigned __int16 v98 = strlen(v60);
    __int16 v99 = strlen(v188);
    __int16 v100 = 0;
    do
    {
      if (v99 <= v100 || (v188[v100] + 110) > 2u)
      {
        if ((v98 & 0x8000) != 0 || (v60[v98 - 1] + 110) > 2u) {
          break;
        }
        --v98;
      }
      else
      {
        ++v100;
      }
    }
    while ((_WORD)--v97);
  }
  unsigned int v101 = v97 - ((v97 + ((unsigned __int16)(v97 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v97 == (((_WORD)v97 + ((unsigned __int16)(v97 & 0x8000) >> 15)) & 0xFFFE)) {
    goto LABEL_799;
  }
  if (v91 == 7)
  {
    unsigned __int16 v102 = strlen(v60);
    __int16 v103 = strlen(v188);
    __int16 v104 = 0;
    do
    {
      if (v103 > v104 && ((int v105 = v188[v104], v105 == 148) || v105 == 146))
      {
        ++v104;
      }
      else
      {
        if ((v102 & 0x8000) != 0) {
          break;
        }
        int v106 = v60[v102 - 1];
        if (v106 != 148 && v106 != 146) {
          break;
        }
        --v102;
      }
    }
    while ((_WORD)--v101);
  }
  unsigned int v107 = v101 - ((v101 + ((unsigned __int16)(v101 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v101 == (((_WORD)v101 + ((unsigned __int16)(v101 & 0x8000) >> 15)) & 0xFFFE)) {
    goto LABEL_799;
  }
  if (v91 == 11)
  {
    int v108 = strlen(v60);
    __int16 v109 = strlen(v188);
    __int16 v110 = 0;
    int v111 = v108;
    do
    {
      if (v109 > v110 && ((int v112 = v188[v110], v112 == 148) || v112 == 146))
      {
        ++v110;
      }
      else
      {
        if ((v111 & 0x8000) != 0) {
          break;
        }
        int v113 = v60[(unsigned __int16)v111 - 1];
        if ((v113 - 145) >= 4 && v113 != 132 && v113 != 130) {
          break;
        }
        --v111;
      }
    }
    while ((_WORD)--v107);
  }
  unsigned int v114 = (v107 + ((unsigned __int16)(v107 & 0x8000) >> 15)) & 0xFFFFFFFE;
  int v68 = v107 - v114;
  if ((_WORD)v107 == (((_WORD)v107 + ((unsigned __int16)(v107 & 0x8000) >> 15)) & 0xFFFE))
  {
LABEL_799:
    int v68 = 0;
    goto LABEL_800;
  }
  if (v91 == 10)
  {
    int v115 = v107 - v114;
    unsigned __int16 v116 = strlen(v60);
    __int16 v117 = strlen(v188);
    int v68 = v115;
    __int16 v118 = 0;
    do
    {
      if (v117 <= v118 || (v188[v118] + 110) > 2u)
      {
        if ((v116 & 0x8000) != 0) {
          break;
        }
        if (v60[v116 - 1] - 132 > 0x10 || ((1 << (v60[v116 - 1] + 124)) & 0x14001) == 0) {
          break;
        }
        --v116;
      }
      else
      {
        ++v118;
      }
      --v68;
    }
    while ((_WORD)v68);
  }
LABEL_800:
  if ((v178 & 0x8000u) == 0) {
    int v69 = v178 & 1;
  }
  else {
    int v69 = -(v178 & 1);
  }
  int v120 = (const char *)(a3 + 1417);
  if (v69)
  {
    int v121 = *(unsigned __int8 *)(a3 + 8);
    if (v121 == 11)
    {
      if ((_WORD)v69)
      {
        int v122 = v68;
        __int16 v123 = strlen(v188);
        int v124 = strlen(v60);
        int v68 = v122;
        __int16 v125 = 0;
        while (1)
        {
          if (v123 > v125 && (v188[v125] | 2) == 0x3E)
          {
            ++v125;
          }
          else
          {
            if ((v124 & 0x8000) != 0 || (v60[(unsigned __int16)v124 - 1] | 2) != 0x3E) {
              goto LABEL_814;
            }
            --v124;
          }
          if (!(_WORD)--v69) {
            goto LABEL_814;
          }
        }
      }
    }
    else
    {
LABEL_814:
      v69 -= (v69 + ((unsigned __int16)(v69 & 0x8000) >> 15)) & 0xFFFFFFFE;
      if ((_WORD)v69)
      {
        __int16 v73 = v189;
        if (v121 == 14)
        {
          int v126 = v68;
          unsigned __int16 v127 = strlen(v60);
          __int16 v128 = strlen(v188);
          __int16 v73 = v189;
          int v68 = v126;
          __int16 v129 = 0;
          while (1)
          {
            if (v128 > v129 && v188[v129] == 62)
            {
              ++v129;
            }
            else
            {
              if ((v127 & 0x8000) != 0 || v60[v127 - 1] != 62) {
                goto LABEL_827;
              }
              --v127;
            }
            LOWORD(v69) = v69 - 1;
            if (!(_WORD)v69) {
              goto LABEL_827;
            }
          }
        }
        goto LABEL_827;
      }
    }
    LOWORD(v69) = 0;
  }
  __int16 v73 = v189;
LABEL_827:
  if ((v180 & 0x8000u) == 0) {
    int v130 = v180 & 1;
  }
  else {
    int v130 = -(v180 & 1);
  }
  if (v130)
  {
    int v131 = *(unsigned __int8 *)(a3 + 8);
    int v132 = v182;
    if (v131 == 11)
    {
      if ((_WORD)v130)
      {
        int v133 = v68;
        __int16 v134 = v69;
        __int16 v135 = v73;
        __int16 v136 = strlen(v188);
        int v137 = strlen(v120);
        __int16 v73 = v135;
        LOWORD(v69) = v134;
        int v68 = v133;
        __int16 v138 = 0;
        int v132 = v182;
        while (1)
        {
          if (v136 <= v138
            || (((v188[v138] + 117) >> 4) | (16 * (v188[v138] + 117))) > 3u)
          {
            if ((v137 & 0x8000) != 0) {
              goto LABEL_841;
            }
            unsigned __int8 v139 = v120[(unsigned __int16)v137 - 1] + 117;
            if (((v139 >> 4) | (16 * v139)) > 3u) {
              goto LABEL_841;
            }
            --v137;
          }
          else
          {
            ++v138;
          }
          if (!(_WORD)--v130) {
            goto LABEL_841;
          }
        }
      }
    }
    else
    {
LABEL_841:
      int v72 = v130 - ((v130 + ((unsigned __int16)(v130 & 0x8000) >> 15)) & 0xFFFFFFFE);
      if ((_WORD)v130 != (((_WORD)v130 + ((unsigned __int16)(v130 & 0x8000) >> 15)) & 0xFFFE))
      {
        unsigned int v60 = (const char *)(a3 + 1417);
        if (v131 == 14)
        {
          int v140 = v68;
          __int16 v141 = v73;
          unsigned __int16 v142 = strlen((const char *)(a3 + 1417));
          __int16 v143 = strlen(v188);
          __int16 v73 = v141;
          int v68 = v140;
          __int16 v144 = 0;
          int v146 = v185;
          int v145 = HIDWORD(v185);
          while (1)
          {
            if (v143 > v144 && (v188[v144] | 0x20) == 0xBB)
            {
              ++v144;
            }
            else
            {
              if ((v142 & 0x8000) != 0 || (v60[v142 - 1] | 0x20) != 0xBB)
              {
LABEL_851:
                int v132 = v182;
                goto LABEL_855;
              }
              --v142;
            }
            LOWORD(v72) = v72 - 1;
            if (!(_WORD)v72) {
              goto LABEL_851;
            }
          }
        }
        goto LABEL_854;
      }
    }
    LOWORD(v72) = 0;
    int v146 = v185;
    int v145 = HIDWORD(v185);
    unsigned int v60 = (const char *)(a3 + 1417);
    goto LABEL_855;
  }
  LOWORD(v72) = 0;
LABEL_853:
  int v132 = v182;
LABEL_854:
  int v146 = v185;
  int v145 = HIDWORD(v185);
LABEL_855:
  if (!((unsigned __int16)v132 | (unsigned __int16)v183))
  {
LABEL_1115:
    LOWORD(v155) = 0;
    LOWORD(v154) = 0;
    goto LABEL_1116;
  }
  if ((v146 & 0x400000) != 0 && (__int16)v145 >= 2)
  {
    __int16 v147 = v73;
    __int16 v148 = v69;
    int v69 = v68;
    if ((unsigned __int16)v145 == 2)
    {
      LOWORD(v11) = v11 - 1;
      int v149 = v132 - 1;
    }
    else
    {
      int v149 = v132 - v145;
    }
  }
  else
  {
    if ((v146 & 0x200000) != 0 && (__int16)v145 >= 2)
    {
      __int16 v148 = v69;
      __int16 v147 = v73;
      int v69 = v68;
      if ((unsigned __int16)v145 == 2)
      {
        --v183;
        LOWORD(v11) = v11 - 1;
      }
      else
      {
        v183 -= v145;
      }
    }
    else
    {
      __int16 v147 = v73;
      __int16 v148 = v69;
      int v69 = v68;
    }
    int v149 = v132;
  }
  __int16 v150 = strlen(v60);
  __int16 v151 = strlen(v188);
  int v152 = 0;
  int v153 = v151;
  int v154 = v183;
  int v155 = v149;
  int v68 = v69;
  LOWORD(v69) = v148;
  __int16 v73 = v147;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while ((_WORD)v155 && (_WORD)v154)
        {
          uint64_t v156 = (__int16)v155 - 1;
          unsigned int v157 = LOBYTE(v192[v156 + 65]);
          if (v157 > 0x92)
          {
            if (LOBYTE(v192[v156 + 65]) <= 0xAEu)
            {
              if (LOBYTE(v192[v156 + 65]) > 0x9Bu)
              {
                if (v157 == 156)
                {
                  if (*(unsigned char *)(a3 + 8) != 2) {
                    goto LABEL_1116;
                  }
                  uint64_t v158 = (__int16)v154 - 1;
                  int v169 = LOBYTE(v192[v158]);
                  goto LABEL_1007;
                }
                if (v157 != 171) {
                  goto LABEL_1116;
                }
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 187) {
                  goto LABEL_1116;
                }
              }
              else if (v157 == 147)
              {
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 148) {
                  goto LABEL_1116;
                }
              }
              else
              {
                if (v157 != 155) {
                  goto LABEL_1116;
                }
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 139) {
                  goto LABEL_1116;
                }
              }
            }
            else if (LOBYTE(v192[v156 + 65]) <= 0xBAu)
            {
              if (v157 == 175)
              {
                if (*(unsigned char *)(a3 + 8) != 1) {
                  goto LABEL_1116;
                }
LABEL_1001:
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 171) {
                  goto LABEL_1116;
                }
                goto LABEL_1008;
              }
              if (v157 != 181) {
                goto LABEL_1116;
              }
              if (*(unsigned char *)(a3 + 8) != 2) {
                goto LABEL_1116;
              }
              uint64_t v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 189) {
                goto LABEL_1116;
              }
            }
            else
            {
              switch(v157)
              {
                case 0xBBu:
                  goto LABEL_1001;
                case 0xDDu:
                  if (*(unsigned char *)(a3 + 8) != 15) {
                    goto LABEL_1116;
                  }
                  uint64_t v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 222) {
                    goto LABEL_1116;
                  }
                  break;
                case 0xDFu:
                  if (*(unsigned char *)(a3 + 8) != 15) {
                    goto LABEL_1116;
                  }
                  uint64_t v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 224) {
                    goto LABEL_1116;
                  }
                  break;
                default:
                  goto LABEL_1116;
              }
            }
          }
          else if (LOBYTE(v192[v156 + 65]) <= 0x7Au)
          {
            if (LOBYTE(v192[v156 + 65]) > 0x3Du)
            {
              if (v157 == 62)
              {
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 60) {
                  goto LABEL_1116;
                }
              }
              else
              {
                if (v157 != 91) {
                  goto LABEL_1116;
                }
                uint64_t v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 93) {
                  goto LABEL_1116;
                }
              }
            }
            else if (v157 == 40)
            {
              uint64_t v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 41) {
                goto LABEL_1116;
              }
            }
            else
            {
              if (v157 != 60) {
                goto LABEL_1116;
              }
              uint64_t v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 62) {
                goto LABEL_1116;
              }
            }
          }
          else
          {
            if (LOBYTE(v192[v156 + 65]) > 0x83u)
            {
              if (v157 != 132)
              {
                if (v157 == 139)
                {
                  if (*(unsigned char *)(a3 + 8) != 15) {
                    goto LABEL_1116;
                  }
                  uint64_t v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 140) {
                    goto LABEL_1116;
                  }
                }
                else
                {
                  if (v157 != 145) {
                    goto LABEL_1116;
                  }
                  uint64_t v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 146) {
                    goto LABEL_1116;
                  }
                }
                goto LABEL_1008;
              }
              uint64_t v158 = (__int16)v154 - 1;
              int v169 = LOBYTE(v192[v158]);
              if (v169 == 163) {
                goto LABEL_986;
              }
LABEL_1007:
              if (v169 != 147) {
                goto LABEL_1116;
              }
              goto LABEL_1008;
            }
            if (v157 != 123)
            {
              if (v157 != 130) {
                goto LABEL_1116;
              }
              uint64_t v158 = (__int16)v154 - 1;
              int v168 = LOBYTE(v192[v158]);
              if (v168 != 161)
              {
                if (v168 != 145) {
                  goto LABEL_1116;
                }
                goto LABEL_1008;
              }
LABEL_986:
              if (*(unsigned char *)(a3 + 8) != 1) {
                goto LABEL_1116;
              }
              goto LABEL_1008;
            }
            uint64_t v158 = (__int16)v154 - 1;
            if (LOBYTE(v192[v158]) != 125) {
              goto LABEL_1116;
            }
          }
LABEL_1008:
          if (SHIWORD(v192[v158]) - 1 <= SHIWORD(v192[v156 + 65])) {
            goto LABEL_1116;
          }
          --v155;
          --v154;
        }
        if (!(_WORD)v155) {
          break;
        }
        if (v153 <= (__int16)v152)
        {
          int v163 = *(unsigned __int8 *)(a3 + 8);
          if (v163 != 10)
          {
            if (v163 != 11) {
              goto LABEL_1116;
            }
            int v164 = LOBYTE(v192[(__int16)v155 + 64]);
            if ((v164 - 130) <= 0xF && ((1 << (v164 + 126)) & 0x8005) != 0)
            {
LABEL_912:
              if (!(_WORD)v68) {
                goto LABEL_1118;
              }
              goto LABEL_1012;
            }
            if (v164 != 147) {
              goto LABEL_1116;
            }
            goto LABEL_1011;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) != 132 || (unsigned __int16)v68 == 0) {
            goto LABEL_1116;
          }
LABEL_1012:
          --v155;
          --v68;
        }
        else
        {
          unsigned int v159 = LOBYTE(v192[(__int16)v155 + 64]);
          if (v159 <= 0x92)
          {
            if (LOBYTE(v192[(__int16)v155 + 64]) <= 0x7Au)
            {
              if (LOBYTE(v192[(__int16)v155 + 64]) > 0x3Du)
              {
                if (v159 == 62)
                {
                  if (v188[(__int16)v152] != 60) {
                    goto LABEL_1116;
                  }
                }
                else if (v159 != 91 || v188[(__int16)v152] != 93)
                {
                  goto LABEL_1116;
                }
              }
              else if (v159 == 40)
              {
                if (v188[(__int16)v152] != 41) {
                  goto LABEL_1116;
                }
              }
              else if (v159 != 60 || v188[(__int16)v152] != 62)
              {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (LOBYTE(v192[(__int16)v155 + 64]) <= 0x83u)
            {
              if (v159 == 123)
              {
                if (v188[(__int16)v152] != 125) {
                  goto LABEL_1116;
                }
                goto LABEL_1112;
              }
              if (v159 != 130) {
                goto LABEL_1116;
              }
              int v171 = v188[(__int16)v152];
              if (v171 == 145) {
                goto LABEL_1112;
              }
              int v172 = *(unsigned __int8 *)(a3 + 8);
              if (v172 == 1)
              {
                if (v171 != 161) {
                  goto LABEL_1116;
                }
                goto LABEL_1112;
              }
              if (v172 != 11) {
                goto LABEL_1116;
              }
LABEL_1053:
              if (v171 != 148 && v171 != 146) {
                goto LABEL_912;
              }
              goto LABEL_1112;
            }
            if (v159 == 132)
            {
              int v171 = v188[(__int16)v152];
              if (v171 == 147) {
                goto LABEL_1112;
              }
              int v173 = *(unsigned __int8 *)(a3 + 8);
              if ((v173 & 0xFE) != 0xA)
              {
                if (v171 != 163 || v173 != 1) {
                  goto LABEL_1116;
                }
                goto LABEL_1112;
              }
              goto LABEL_1053;
            }
            if (v159 == 139)
            {
              if (*(unsigned char *)(a3 + 8) != 15 || v188[(__int16)v152] != 140) {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (v159 != 145) {
              goto LABEL_1116;
            }
            int v160 = v188[(__int16)v152];
            if (v160 == 146) {
              goto LABEL_1112;
            }
            int v161 = *(unsigned __int8 *)(a3 + 8);
            if (v160 != 148) {
              goto LABEL_1067;
            }
            goto LABEL_1066;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) <= 0xAEu)
          {
            if (LOBYTE(v192[(__int16)v155 + 64]) > 0x9Bu)
            {
              if (v159 == 156)
              {
                if (*(unsigned char *)(a3 + 8) != 2 || v188[(__int16)v152] != 147) {
                  goto LABEL_1116;
                }
              }
              else if (v159 != 171 || v188[(__int16)v152] != 187)
              {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (v159 != 147)
            {
              if (v159 != 155 || v188[(__int16)v152] != 139) {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            int v174 = v188[(__int16)v152];
            if (v174 == 148) {
              goto LABEL_1112;
            }
            int v161 = *(unsigned __int8 *)(a3 + 8);
            if (v174 != 146) {
              goto LABEL_1067;
            }
LABEL_1066:
            if (v161 != 11)
            {
LABEL_1067:
              if (v161 != 11) {
                goto LABEL_1116;
              }
LABEL_1011:
              if (!(_WORD)v68) {
                goto LABEL_1116;
              }
              goto LABEL_1012;
            }
            goto LABEL_1112;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) <= 0xBAu)
          {
            if (v159 == 175)
            {
              if (*(unsigned char *)(a3 + 8) != 1) {
                goto LABEL_1116;
              }
LABEL_1072:
              if (v188[(__int16)v152] != 171) {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (v159 != 181 || *(unsigned char *)(a3 + 8) != 2 || v188[(__int16)v152] != 189) {
              goto LABEL_1116;
            }
          }
          else
          {
            if (v159 == 187) {
              goto LABEL_1072;
            }
            if (v159 == 221)
            {
              if (*(unsigned char *)(a3 + 8) != 15 || v188[(__int16)v152] != 222) {
                goto LABEL_1116;
              }
            }
            else if (v159 != 223 || *(unsigned char *)(a3 + 8) != 15 || v188[(__int16)v152] != 224)
            {
              goto LABEL_1116;
            }
          }
LABEL_1112:
          --v155;
          ++v152;
        }
      }
      if (!(_WORD)v154) {
        goto LABEL_1115;
      }
      if (v150) {
        break;
      }
      if (*(unsigned char *)(a3 + 8) != 10) {
        goto LABEL_1117;
      }
      if (LOBYTE(v192[(__int16)v154 - 1]) != 147 || (unsigned __int16)v68 == 0) {
        goto LABEL_1117;
      }
      __int16 v150 = 0;
LABEL_944:
      int v155 = 0;
      --v154;
      --v68;
    }
    LOWORD(v155) = 0;
    unsigned int v162 = LOBYTE(v192[(__int16)v154 - 1]);
    if (v162 <= 0xA0) {
      break;
    }
    if (LOBYTE(v192[(__int16)v154 - 1]) <= 0xBAu)
    {
      switch(v162)
      {
        case 0xA1u:
          if (*(unsigned char *)(a3 + 8) != 1) {
            goto LABEL_1117;
          }
LABEL_1082:
          if (v60[v150 - 1] != 130)
          {
LABEL_1117:
            LOWORD(v155) = 0;
            goto LABEL_1116;
          }
          break;
        case 0xA3u:
          if (*(unsigned char *)(a3 + 8) != 1 || v60[v150 - 1] != 132) {
            goto LABEL_1117;
          }
          break;
        case 0xABu:
          int v170 = v60[v150 - 1];
          if (v170 == 175)
          {
            if (*(unsigned char *)(a3 + 8) != 1) {
              goto LABEL_1117;
            }
          }
          else if (v170 != 187)
          {
            goto LABEL_1117;
          }
          break;
        default:
          goto LABEL_1116;
      }
    }
    else if (LOBYTE(v192[(__int16)v154 - 1]) > 0xDDu)
    {
      if (v162 == 222)
      {
        if (*(unsigned char *)(a3 + 8) != 15 || v60[v150 - 1] != 221) {
          goto LABEL_1117;
        }
      }
      else
      {
        if (v162 != 224) {
          goto LABEL_1116;
        }
        if (*(unsigned char *)(a3 + 8) != 15 || v60[v150 - 1] != 223) {
          goto LABEL_1117;
        }
      }
    }
    else if (v162 == 187)
    {
      if (v60[v150 - 1] != 171) {
        goto LABEL_1117;
      }
    }
    else
    {
      if (v162 != 189) {
        goto LABEL_1116;
      }
      if (*(unsigned char *)(a3 + 8) != 2 || v60[v150 - 1] != 181) {
        goto LABEL_1117;
      }
    }
LABEL_1114:
    int v155 = 0;
    --v154;
    --v150;
  }
  if (LOBYTE(v192[(__int16)v154 - 1]) <= 0x5Cu)
  {
    switch(v162)
    {
      case ')':
        if (v60[v150 - 1] != 40) {
          goto LABEL_1117;
        }
        break;
      case '<':
        if (v60[v150 - 1] != 62) {
          goto LABEL_1117;
        }
        break;
      case '>':
        if (v60[v150 - 1] != 60) {
          goto LABEL_1117;
        }
        break;
      default:
        goto LABEL_1116;
    }
    goto LABEL_1114;
  }
  switch(LOBYTE(v192[(__int16)v154 - 1]))
  {
    case 0x8B:
      if (v60[v150 - 1] != 155) {
        goto LABEL_1117;
      }
      goto LABEL_1114;
    case 0x8C:
      if (*(unsigned char *)(a3 + 8) != 15 || v60[v150 - 1] != 139) {
        goto LABEL_1117;
      }
      goto LABEL_1114;
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
      goto LABEL_1116;
    case 0x91:
      goto LABEL_1082;
    case 0x92:
      if (v60[v150 - 1] != 145) {
        goto LABEL_1117;
      }
      goto LABEL_1114;
    case 0x93:
      int v175 = v60[v150 - 1];
      if (v175 == 132) {
        goto LABEL_1114;
      }
      int v176 = *(unsigned __int8 *)(a3 + 8);
      if (v176 == 2)
      {
        if (v175 != 156) {
          goto LABEL_1117;
        }
        goto LABEL_1114;
      }
      if (v176 != 10) {
        goto LABEL_1117;
      }
      if (v175 == 148 || v175 == 146) {
        goto LABEL_1114;
      }
      if ((_WORD)v68) {
        goto LABEL_944;
      }
      LOWORD(v155) = 0;
LABEL_1118:
      LOWORD(v6_Block_object_dispose(&STACK[0x510], 8) = 0;
LABEL_1116:
      *(unsigned char *)(v191 + (__int16)v11) = 0;
      a1[v73] = 0;
      return ((unsigned __int16)(v70 | v69 | v71 | v181 | v72 | v155 | v68 | v154) != 0) << 29;
    case 0x94:
      if (v60[v150 - 1] != 147) {
        goto LABEL_1117;
      }
      goto LABEL_1114;
    default:
      if (v162 == 93)
      {
        if (v60[v150 - 1] != 91) {
          goto LABEL_1117;
        }
      }
      else
      {
        if (v162 != 125) {
          goto LABEL_1116;
        }
        if (v60[v150 - 1] != 123) {
          goto LABEL_1117;
        }
      }
      goto LABEL_1114;
  }
}

size_t ICchkprepos(uint64_t a1)
{
  uint64_t v2 = a1 + 1482;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 3184) + 248) + 56);
  LOWORD(result) = strlen((const char *)(a1 + 1482));
  if ((_WORD)result)
  {
    int v5 = 0;
    int v6 = 0;
    while (1)
    {
      __int16 v7 = result - 1;
      size_t result = (__int16)(result - 1);
      if (v7 < 0) {
        break;
      }
      int v8 = *(unsigned __int8 *)(v2 + (unsigned __int16)result);
      int v9 = *(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v2 + (unsigned __int16)result));
      if ((v9 & 0x1002400) == 0x1000400
        && (v9 & 0x1000000) != 0
        && (*(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v2 + (unsigned __int16)result)) & 0xA00000) != 0)
      {
        if (*(unsigned __int8 *)(v2 + (unsigned __int16)result) > 0x39u)
        {
          if (v8 == 58)
          {
            int v18 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 58) {
              ++v5;
            }
            else {
              int v5 = 1;
            }
            if (v6 == 58) {
              int v18 = 0;
            }
            int v6 = 58;
            if (v18) {
              goto LABEL_81;
            }
          }
          else if (v8 == 59)
          {
            int v19 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 59) {
              ++v5;
            }
            else {
              int v5 = 1;
            }
            if (v6 == 59) {
              int v19 = 0;
            }
            int v6 = 59;
            if (v19) {
              goto LABEL_81;
            }
          }
          else
          {
            int v13 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 63) {
              ++v5;
            }
            else {
              int v5 = 1;
            }
            if (v6 == 63) {
              int v13 = 0;
            }
            if (v8 == 63)
            {
              int v6 = 63;
            }
            else
            {
              int v5 = 0;
              int v6 = 0;
            }
            if (v8 == 63) {
              int v14 = v13;
            }
            else {
              int v14 = 0;
            }
            if (v14) {
              goto LABEL_81;
            }
          }
        }
        else if (v8 == 33)
        {
          int v16 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 33) {
            ++v5;
          }
          else {
            int v5 = 1;
          }
          if (v6 == 33) {
            int v16 = 0;
          }
          int v6 = 33;
          if (v16) {
            goto LABEL_81;
          }
        }
        else if (v8 == 44)
        {
          int v17 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 44) {
            ++v5;
          }
          else {
            int v5 = 1;
          }
          if (v6 == 44) {
            int v17 = 0;
          }
          int v6 = 44;
          if (v17) {
            goto LABEL_81;
          }
        }
        else
        {
          int v10 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 46) {
            ++v5;
          }
          else {
            int v5 = 1;
          }
          if (v6 == 46) {
            int v10 = 0;
          }
          if (v8 == 46)
          {
            int v6 = 46;
          }
          else
          {
            int v5 = 0;
            int v6 = 0;
          }
          if (v8 == 46) {
            int v11 = v10;
          }
          else {
            int v11 = 0;
          }
          if (v11) {
            goto LABEL_81;
          }
        }
      }
      else if (*(unsigned char *)(a1 + 8) == 8 && (v8 == 63 || v8 == 33))
      {
        if (v8 != 63 || v6 == 63)
        {
          if (v8 == 33)
          {
            int v12 = ((unsigned __int16)v5 == 2) << 18;
            BOOL v15 = v6 == 33;
            if (v6 != 33) {
              int v5 = 0;
            }
            int v6 = 33;
            if (v15) {
              int v12 = 0;
            }
          }
          else
          {
            int v12 = 0;
          }
        }
        else
        {
          int v12 = ((unsigned __int16)v5 == 2) << 18;
          int v6 = 63;
          int v5 = 0;
        }
        ++v5;
        if (v12)
        {
LABEL_81:
          if ((unsigned __int16)v5 != 2) {
            goto LABEL_137;
          }
          goto LABEL_84;
        }
      }
      else
      {
        int v5 = 0;
        int v6 = 0;
      }
    }
    if ((unsigned __int16)v5 != 2) {
      goto LABEL_86;
    }
LABEL_84:
    if ((result & 0x80000000) == 0
      || *(unsigned __int8 *)(*(__int16 *)(a1 + 1612) + a1 + 1546) != *(unsigned __int8 *)(a1 + 1482))
    {
LABEL_137:
      *(void *)(a1 + 1328) |= 0x40000uLL;
      return result;
    }
  }
LABEL_86:
  uint64_t v20 = a1 + 1417;
  size_t result = strlen((const char *)(a1 + 1417));
  if ((int)(result << 16) < 1) {
    return result;
  }
  int v21 = 0;
  int v22 = 0;
  __int16 v23 = 0;
  int v24 = 0;
  int v25 = (__int16)result;
  do
  {
    int v26 = *(unsigned __int8 *)(v20 + v23);
    int v27 = v24;
    int v28 = *(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v20 + v23));
    if ((v28 & 0x1002400) == 0x1000400
      && (v28 & 0x1000000) != 0
      && (*(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v20 + v23)) & 0xA00000) != 0)
    {
      int v29 = 0;
      if (*(unsigned __int8 *)(v20 + v23) > 0x39u)
      {
        if (v26 == 58)
        {
          int v30 = (unsigned __int16)v24 == 2;
          int v29 = 58;
          if (v22 == 58) {
            goto LABEL_96;
          }
        }
        else if (v26 == 59)
        {
          int v30 = (unsigned __int16)v24 == 2;
          int v29 = 59;
          if (v22 == 59) {
            goto LABEL_96;
          }
        }
        else
        {
          int v24 = 0;
          if (v26 != 63) {
            goto LABEL_126;
          }
          int v30 = (unsigned __int16)v27 == 2;
          int v29 = 63;
          if (v22 == 63) {
            goto LABEL_96;
          }
        }
      }
      else if (v26 == 33)
      {
        int v30 = (unsigned __int16)v24 == 2;
        int v29 = 33;
        if (v22 == 33) {
          goto LABEL_96;
        }
      }
      else if (v26 == 44)
      {
        int v30 = (unsigned __int16)v24 == 2;
        int v29 = 44;
        if (v22 == 44) {
          goto LABEL_96;
        }
      }
      else
      {
        int v24 = 0;
        if (v26 != 46) {
          goto LABEL_126;
        }
        int v30 = (unsigned __int16)v27 == 2;
        int v29 = 46;
        if (v22 == 46)
        {
LABEL_96:
          int v24 = v27 + 1;
          goto LABEL_126;
        }
      }
      int v31 = v30 << 18;
      int v24 = 1;
      if (v31) {
        goto LABEL_132;
      }
    }
    else if (*(unsigned char *)(a1 + 8) == 8 && (v26 == 63 || v26 == 33))
    {
      if (v26 != 63 || v22 == 63)
      {
        int v32 = ((unsigned __int16)v24 == 2) << 18;
        if (v22 != 33) {
          int v24 = 0;
        }
        size_t result = 33;
        if (v22 == 33) {
          int v33 = 0;
        }
        else {
          int v33 = v32;
        }
        if (v26 == 33)
        {
          int v29 = 33;
        }
        else
        {
          int v24 = v27;
          int v29 = v22;
        }
        if (v26 == 33) {
          int v31 = v33;
        }
        else {
          int v31 = 0;
        }
      }
      else
      {
        int v24 = 0;
        int v31 = ((unsigned __int16)v27 == 2) << 18;
        int v29 = 63;
      }
      ++v24;
      if (v31) {
        goto LABEL_132;
      }
    }
    else
    {
      int v29 = 0;
      int v24 = 0;
    }
LABEL_126:
    int v21 = ++v23;
    int v22 = v29;
  }
  while (v25 > v23);
  int v31 = 0;
LABEL_132:
  if ((unsigned __int16)v24 == 2)
  {
    if (v31 || *(unsigned __int8 *)(a1 + 1547) != *(unsigned __int8 *)(v20 + v21 - 1)) {
      goto LABEL_137;
    }
  }
  else if (v31)
  {
    goto LABEL_137;
  }
  return result;
}

uint64_t ICcmpsft(const char *a1, int a2, uint64_t a3)
{
  if (ICget(a1, a2, a3) == 11) {
    return 11;
  }
  else {
    return 2;
  }
}

uint64_t IHbsearch(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int16 v2 = 0;
  uint64_t v3 = *(void *)(a2 + 760);
  uint64_t v4 = *(void *)(v3 + 104);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 96);
  uint64_t v6 = v5 >> 1;
  unsigned int v7 = *a1;
  uint64_t v8 = *(unsigned __int16 *)(v3 + 96);
  while (1)
  {
    int v9 = (unsigned __int8 *)(v4 + 8 * (unsigned __int16)v6);
    unsigned int v10 = *v9;
    if (v7 >= v10) {
      break;
    }
LABEL_6:
    uint64_t v8 = v6;
    uint64_t v6 = (unsigned __int16)(v6 + v2) >> 1;
    if (v6 == v2)
    {
      int v22 = (unsigned __int8 *)(v4 + 8 * v2);
      if (v22[2] != a1[2] || v22[1] != a1[1] || *v22 != v7) {
        return 0;
      }
      uint64_t v23 = v4 + 8 * v2;
      int v24 = *(unsigned __int16 *)(v23 + 4);
      LOBYTE(v23) = *(unsigned char *)(v23 + 6);
      unsigned int v25 = v24 & 0xFFFEFFFF | ((((v23 & 0x80) >> 7) & 1) << 16);
      *(_DWORD *)(v3 + 116) = v25;
      *(unsigned char *)(v3 + 120) = v23 & 0x7F;
      if (v5 != v2)
      {
        unsigned __int16 v26 = v2 + 1;
        if (v5 > v26)
        {
          uint64_t v27 = v4 + 8 * v26;
          int v28 = *(unsigned __int16 *)(v27 + 4);
          char v20 = *(unsigned char *)(v27 + 6);
          int v21 = v28 - v25 + ((v20 & 0x80) << 9);
LABEL_20:
          *(_DWORD *)(v3 + 124) = v21;
          *(unsigned char *)(v3 + 12_Block_object_dispose(&STACK[0x510], 8) = (v20 & 0x7F) - 1;
          return 1;
        }
      }
      goto LABEL_22;
    }
  }
  if (v7 > v10) {
    goto LABEL_4;
  }
  unsigned int v11 = a1[1];
  unsigned int v12 = v9[1];
  if (v11 < v12) {
    goto LABEL_6;
  }
  if (v11 > v12) {
    goto LABEL_4;
  }
  unsigned int v13 = a1[2];
  unsigned int v14 = v9[2];
  if (v13 < v14) {
    goto LABEL_6;
  }
  if (v13 > v14)
  {
LABEL_4:
    unsigned __int16 v2 = v6;
    uint64_t v6 = v8;
    goto LABEL_6;
  }
  uint64_t v15 = v4 + 8 * (unsigned __int16)v6;
  int v16 = *(unsigned __int16 *)(v15 + 4);
  LOBYTE(v15) = *(unsigned char *)(v15 + 6);
  unsigned int v17 = v16 & 0xFFFEFFFF | ((((v15 & 0x80) >> 7) & 1) << 16);
  *(_DWORD *)(v3 + 116) = v17;
  *(unsigned char *)(v3 + 120) = v15 & 0x7F;
  if (v5 != (unsigned __int16)v6)
  {
    if (v5 <= (unsigned __int16)(v6 + 1)) {
      return 1;
    }
    uint64_t v18 = v4 + 8 * (unsigned __int16)(v6 + 1);
    int v19 = *(unsigned __int16 *)(v18 + 4);
    char v20 = *(unsigned char *)(v18 + 6);
    int v21 = v19 - v17 + ((v20 & 0x80) << 9);
    goto LABEL_20;
  }
LABEL_22:
  *(_DWORD *)(v3 + 124) = 0xFFFF;
  return 1;
}

uint64_t IHcache(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 760);
  int v14 = 0;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v14 + 1, &v14);
  unsigned __int16 v8 = HIWORD(v14) | ((_WORD)a2 << 15);
  HIWORD(v14) = v8;
  LOWORD(v14) = v14;
  if (a3 == 1)
  {
    int v12 = *(_DWORD *)(a4 + 8);
    if ((v12 & 0x3FFFF) == 0 && !*(unsigned char *)(a4 + 747))
    {
      uint64_t v13 = *(void *)(v7 + 16);
      *(_WORD *)(v13 + 2 * v14) = v8;
      *(_WORD *)(v13 + 2 * (unsigned __int16)v14 + 512) = (a2 >> 1) & 3 | HIWORD(v12);
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a3 != 2) {
      return result;
    }
    uint64_t v10 = *(void *)(v7 + 16);
    if (*(unsigned __int16 *)(v10 + 2 * v14) == v8)
    {
      int v11 = *(unsigned __int16 *)(v10 + 2 * (v14 | 0x100u));
      if ((v11 & 3) == ((a2 >> 1) & 3))
      {
        *(_DWORD *)(a4 + _Block_object_dispose(&STACK[0x510], 8) = (v11 << 16) & 0xFFFC0000;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t IHclean(unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 752);
  uint64_t v4 = *a1;
  BOOL v5 = v4 == 121;
  int v6 = (*(_DWORD *)(v3 + 4 * v4) >> 28) & 1;
  if (v5) {
    LOWORD(v6) = 1;
  }
  if (a2 >= 2)
  {
    int v8 = 0;
    __int16 v9 = 0;
    int v10 = *(_DWORD *)(a3 + 8);
    unsigned int v7 = 0x80000000;
    unsigned int v11 = 0x80000000;
    do
    {
      if ((v10 & v11) != 0 || a1[v9] == 45)
      {
        if ((_WORD)v6)
        {
          LOWORD(v6) = 0;
        }
        else
        {
          LOWORD(v6) = 0;
          v10 &= ~(v7 | v11);
          *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x510], 8) = v10;
        }
        unsigned int v7 = v11;
      }
      uint64_t v12 = a1[v8 + 1];
      BOOL v5 = v12 == 121;
      int v13 = (*(_DWORD *)(v3 + 4 * v12) >> 28) & 1;
      if (v5) {
        int v13 = 1;
      }
      if (v13) {
        LOWORD(v6) = 1;
      }
      ++v9;
      v11 >>= 1;
      int v8 = v9;
    }
    while (a2 - 2 >= v9);
  }
  else
  {
    unsigned int v7 = 0x80000000;
  }
  if (!(_WORD)v6) {
    *(_DWORD *)(a3 + 8) &= ~v7;
  }
  if (a2 > 31) {
    *(_DWORD *)(a3 + 12) &= -1 << (65 - a2);
  }
  else {
    *(_DWORD *)(a3 + 8) &= -1 << (33 - a2);
  }
  return 0;
}

uint64_t IHdecode(unsigned __int8 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if ((int)a2 >= 1)
  {
    uint64_t v6 = *((void *)a6 + 95);
    uint64_t v7 = *(unsigned int *)(v6 + 116);
    int v8 = *(_DWORD *)(v6 + 112) - v7;
    unsigned int v9 = v8 + 1;
    if (v8 != -1)
    {
      int v12 = 0;
      int v102 = 0;
      __int16 v13 = 0;
      uint64_t v14 = 0;
      __int16 v15 = 0;
      int v16 = 0;
      __int16 v17 = 0;
      __int16 v18 = 0;
      __int16 v19 = 0;
      uint64_t v20 = 0;
      __int16 v21 = 0;
      uint64_t v23 = *(void *)(v6 + 32);
      uint64_t v22 = *(void *)(v6 + 40);
      int v24 = *a6;
      uint64_t v25 = *(void *)(v6 + 48);
      uint64_t v26 = *(void *)(v6 + 56) + v7 - 1;
      int v27 = *(unsigned __int8 *)(v6 + 120);
      int v97 = -a3;
      int v96 = a3 + 2;
      uint64_t v98 = (unsigned __int16)a2;
      uint64_t v99 = v26;
      uint64_t v100 = v25;
LABEL_5:
      uint64_t v28 = *(unsigned __int8 *)(v26 + (unsigned __int16)v20);
      if (*(unsigned char *)(v26 + (unsigned __int16)v20))
      {
        int v29 = 0;
        uint64_t v30 = v25 + *(unsigned __int16 *)(v23 + 2 * v28);
        unsigned int v31 = *(unsigned __int8 *)(v22 + v28);
        unsigned int v101 = v31;
        while (1)
        {
          if (*(_DWORD *)(v6 + 124) == v12 && *(unsigned __int8 *)(v6 + 128) == (unsigned __int16)v29) {
            return 0;
          }
          if ((char)v27 < 1)
          {
            unsigned int v33 = *(unsigned __int8 *)(v30 + (unsigned __int16)v29);
          }
          else
          {
            int v32 = v29 + v27;
            int v27 = 0;
            int v29 = v32 - 1;
            unsigned int v33 = *(unsigned __int8 *)(v30 + (unsigned __int16)(v32 - 1));
            __int16 v18 = v33 & 0x3F;
          }
          if (v17 == 1)
          {
            if (v33 <= 0xE)
            {
              v105[v19] = 0;
              if (v24 != 4)
              {
                if (v24 == 3)
                {
                  LOWORD(v34) = v15;
                  if ((v33 & 0xFE) == 4)
                  {
                    __int16 v21 = v15;
                    do
                      --v21;
                    while (v105[v21] != 32);
                    v105[v21] = 0;
                    *(_WORD *)(v6 + 142) = v21;
                    LOWORD(v34) = v21;
                  }
                  if ((__int16)v34 >= 1)
                  {
                    uint64_t v35 = v14;
                    uint64_t v34 = (unsigned __int16)v34;
                    int v36 = v105;
                    uint64_t v37 = a1;
                    do
                    {
                      unsigned int v39 = *v37++;
                      unsigned int v38 = v39;
                      unsigned int v41 = *v36++;
                      unsigned int v40 = v41;
                      __int16 v13 = v38 > v41;
                      if (v38 > v41) {
                        break;
                      }
                      if (v38 < v40) {
                        return 0;
                      }
                      --v34;
                    }
                    while (v34);
                    goto LABEL_83;
                  }
LABEL_62:
                  __int16 v13 = 0;
                }
                else
                {
                  if ((v24 - 5) > 1) {
                    return 0;
                  }
                  if (v15 < 1) {
                    goto LABEL_62;
                  }
                  uint64_t v35 = v14;
                  uint64_t v51 = (unsigned __int16)v15;
                  uint64_t v52 = v105;
                  int v53 = a1;
                  do
                  {
                    unsigned int v55 = *v53++;
                    unsigned int v54 = v55;
                    unsigned int v57 = *v52++;
                    unsigned int v56 = v57;
                    __int16 v13 = v54 > v57;
                    if (v54 > v57) {
                      break;
                    }
                    if (v54 < v56) {
                      return 0;
                    }
                    --v51;
                  }
                  while (v51);
LABEL_83:
                  uint64_t v14 = v35;
                  unsigned int v31 = v101;
                }
LABEL_84:
                if (v33 != 8)
                {
                  if (v33 < 3)
                  {
                    if ((v13 & 1) == 0)
                    {
                      if (v33 == 1) {
                        *(_WORD *)(v6 + 130) = 1;
                      }
                      else {
                        *(_WORD *)(v6 + 132) = 1;
                      }
                    }
                    __int16 v17 = 0;
                    if (v15 >= 63) {
                      __int16 v18 = 63;
                    }
                    else {
                      __int16 v18 = v15;
                    }
                  }
                  else
                  {
                    __int16 v17 = 2;
                    if (v33 - 9 >= 2) {
                      int v16 = 4;
                    }
                    else {
                      int v16 = 2;
                    }
                    *(_DWORD *)(v6 + 136) = 0;
                    if ((v33 & 0xFE) == 4)
                    {
                      if ((v13 & 1) == 0)
                      {
                        __int16 v86 = a1;
                        uint64_t v88 = a2;
                        __int16 v92 = a6;
                        uint64_t v94 = a5;
                        unsigned int v103 = a4;
                        int v90 = a3;
                        int v82 = v12;
                        unsigned int v84 = v9;
                        uint64_t v78 = v23;
                        uint64_t v80 = v20;
                        int v76 = v16;
                        uint64_t v74 = v22;
                        unsigned int v72 = v14;
                        strcpy((char *)(v6 + 144), &v105[v21 + 1]);
                        unsigned int v31 = v101;
                        a4 = v103;
                        uint64_t v14 = v72;
                        uint64_t v22 = v74;
                        int v16 = v76;
                        uint64_t v23 = v78;
                        uint64_t v20 = v80;
                        int v12 = v82;
                        unsigned int v9 = v84;
                        a1 = v86;
                        a2 = v88;
                        a3 = v90;
                        a6 = v92;
                        a5 = v94;
                      }
                      v105[*(__int16 *)(v6 + 142)] = 32;
                      __int16 v17 = 2;
                    }
                  }
                  int v102 = v33;
                  goto LABEL_109;
                }
LABEL_85:
                if ((v13 & 1) == 0 && v24 == 4 && a1[v15] != 45)
                {
                  *(_DWORD *)(v6 + 76) = 1 << (29 - v15);
                  *(unsigned char *)(v6 + 72) = 1;
                  *(_WORD *)(v6 + 84) = v15;
                }
                __int16 v17 = 0;
                if (v15 >= 63) {
                  __int16 v18 = 63;
                }
                else {
                  __int16 v18 = v15;
                }
                int v102 = 8;
                goto LABEL_109;
              }
              __int16 v13 = v33 != 8 && a3 != (unsigned __int16)v14;
              if (v33 == 8)
              {
                if (v15 <= 0) {
                  goto LABEL_85;
                }
                uint64_t v35 = v14;
                uint64_t v44 = (unsigned __int16)v15;
                int v45 = v105;
                int v46 = a1;
                while (1)
                {
                  unsigned int v48 = *v46++;
                  unsigned int v47 = v48;
                  unsigned int v49 = *v45++;
                  BOOL v50 = v47 >= v49;
                  if (v47 > v49) {
                    break;
                  }
                  if (!v50) {
                    return 0;
                  }
                  if (!--v44) {
                    goto LABEL_83;
                  }
                }
              }
              else
              {
                uint64_t v35 = v14;
                unint64_t v58 = v105;
                uint64_t v59 = v98;
                unsigned int v60 = a1;
                while (1)
                {
                  unsigned int v62 = *v60++;
                  unsigned int v61 = v62;
                  unsigned int v63 = *v58++;
                  BOOL v64 = v61 >= v63;
                  if (v61 > v63) {
                    break;
                  }
                  if (!v64) {
                    return 0;
                  }
                  if (!--v59)
                  {
                    if ((unsigned __int16)v15 == (unsigned __int16)a2) {
                      char v65 = 1;
                    }
                    else {
                      char v65 = v13;
                    }
                    unsigned int v31 = v101;
                    if (v65) {
                      goto LABEL_84;
                    }
                    return 0;
                  }
                }
              }
              __int16 v13 = 1;
              goto LABEL_83;
            }
            ++v15;
            __int16 v42 = v19++;
            v105[v42] = v33;
            __int16 v17 = 1;
          }
          else
          {
            if (!v17)
            {
              if (((v18 - (v33 & 0x3F)) & 0x8000) != 0) {
                return 0;
              }
              __int16 v19 = v18 - (v33 & 0x3F);
              uint64_t v14 = v33 >> 7;
              __int16 v17 = 1;
              __int16 v15 = v19;
              goto LABEL_109;
            }
            if ((__int16)v16 < 2)
            {
              unsigned int v43 = *(_DWORD *)(v6 + 136) | v33;
              *(_DWORD *)(v6 + 136) = v43;
              if (!v13 && v102 == 3)
              {
                *(unsigned char *)(v6 + 86) = 1;
                *(_DWORD *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = v43;
                goto LABEL_79;
              }
              if (v13 || v102 != 6)
              {
                if (v13 || v102 != 7)
                {
                  if (!v13 && v102 == 9 && v24 == 5 || !v13 && v102 == 10 && v24 == 6)
                  {
                    *(_WORD *)(v6 + 140) = v43;
                    *(_WORD *)(v6 + 142) = v15;
                  }
                  else if (v13 || v102 != 4)
                  {
                    if (!v13 && v102 == 5)
                    {
                      int v67 = *(__int16 *)(v6 + 142);
                      unsigned int v31 = v101;
                      if (~((v67 + 1) >> 1) != v97)
                      {
                        unsigned int v31 = v101;
                        if (v96 + (v67 >> 1) != a4)
                        {
                          *((unsigned char *)a6 + 747) = 1;
                          int v68 = (__int16)(~(unsigned __int16)((v67 + 1) >> 1) + a3);
                          int v69 = v68 & ~(v68 >> 31);
                          unsigned int v71 = v43 >> (v68 & ~(v68 >> 31));
                          unsigned int v73 = v14;
                          int v87 = a1;
                          uint64_t v89 = a2;
                          int v91 = a3;
                          uint64_t v70 = a4;
                          int v93 = a6;
                          uint64_t v95 = a5;
                          int v83 = v12;
                          unsigned int v85 = v9;
                          uint64_t v79 = v23;
                          uint64_t v81 = v20;
                          int v77 = v16;
                          uint64_t v75 = v22;
                          __strncpy_chk();
                          v104[v69] = 0;
                          __strcat_chk();
                          __strncat_chk();
                          __strcpy_chk();
                          unsigned int v31 = v101;
                          uint64_t v14 = v73;
                          uint64_t v22 = v75;
                          int v16 = v77;
                          uint64_t v23 = v79;
                          uint64_t v20 = v81;
                          int v12 = v83;
                          unsigned int v9 = v85;
                          a1 = v87;
                          a2 = v89;
                          a3 = v91;
                          a4 = v70;
                          a6 = v93;
                          a5 = v95;
                          *((_DWORD *)v93 + 4) = v71;
                        }
                      }
                    }
                  }
                  else
                  {
                    int v66 = *(__int16 *)(v6 + 142);
                    if (~((v66 + 1) >> 1) != v97 && v96 + (v66 >> 1) != a4) {
                      return 2;
                    }
                  }
                  goto LABEL_79;
                }
                if (*(unsigned char *)(v6 + 24) != 104)
                {
LABEL_79:
                  __int16 v17 = 0;
                  *(_DWORD *)(v6 + 136) = 0;
                  if (v15 >= 63) {
                    __int16 v18 = 63;
                  }
                  else {
                    __int16 v18 = v15;
                  }
                  goto LABEL_109;
                }
              }
              else if (*(unsigned char *)(v6 + 24) != 105)
              {
                goto LABEL_79;
              }
              *((_DWORD *)a6 + 4) = v43;
              *(unsigned char *)(v6 + 92) = 1;
              goto LABEL_79;
            }
            *(_DWORD *)(v6 + 136) |= v33 << (8 * --v16);
          }
LABEL_109:
          if (v31 <= (unsigned __int16)++v29)
          {
            uint64_t result = 0;
            uint64_t v20 = (v20 + 1);
            int v12 = (unsigned __int16)v20;
            uint64_t v26 = v99;
            uint64_t v25 = v100;
            if (v9 > (unsigned __int16)v20) {
              goto LABEL_5;
            }
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t ScrambleAndFind(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a6 + 760);
  uint64_t v9 = (*(unsigned __int16 *)(v8 + 4) >> 1) - 1 + a3;
  uint64_t v10 = a1 - 2;
  uint64_t v11 = 2;
  int v12 = a5;
  do
  {
    if (a4)
    {
      *int v12 = *(unsigned char *)(v9 + a1 - 1 + v11);
      uint64_t v13 = v9 - v11;
    }
    else
    {
      *int v12 = *(unsigned char *)(v10 + v9);
      uint64_t v13 = v9 + v11;
    }
    v12[1] = *(unsigned char *)(a1 + v13);
    unsigned int v14 = *(unsigned __int16 *)(v8 + 4);
    ++v11;
    --v10;
    v12 += 2;
  }
  while (v11 < (v14 >> 1) + 3);
  if ((unsigned __int16)IHdecode(a5, (__int16)v14, a3, a2, a1, (unsigned __int16 *)a6) != 2) {
    return 0;
  }
  unsigned __int16 v15 = ~(unsigned __int16)((*(__int16 *)(v8 + 142) + 1) >> 1) + a3;
  if (((~((*(__int16 *)(v8 + 142) + 1) >> 1) + a3) & 0x8000) != 0)
  {
    unsigned int v16 = *(_DWORD *)(v8 + 136) << -(char)v15;
    *(_DWORD *)(v8 + 136) = v16;
    unsigned __int16 v15 = 0;
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v8 + 136);
  }
  unsigned int v18 = v16 >> v15;
  uint64_t v19 = v15;
  __strncpy_chk();
  v20[v19] = 0;
  __strcat_chk();
  __strncat_chk();
  *(_WORD *)a6 = 1;
  IHhyp(v20, a6);
  *(unsigned char *)(a6 + 747) = 1;
  __strcpy_chk();
  *(_DWORD *)(a6 + 16) = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(a6 + _Block_object_dispose(&STACK[0x510], 8) = v18;
  return 2;
}

uint64_t IHgetmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 760);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 4);
  uint64_t v8 = (unsigned __int8 *)malloc_type_calloc(1uLL, v7 + 3, 0x8E327490uLL);
  *(_WORD *)a3 = 3;
  unint64_t v9 = *(unsigned __int16 *)(v6 + 6);
  if (v9 < (unsigned __int16)(a2 + 2 - *(_WORD *)(v6 + 8)))
  {
    uint64_t v10 = a1 + (int)((v7 >> 1) - 1);
    do
    {
      *(_DWORD *)(v6 + 130) = 0;
      __int16 v12 = *(_WORD *)(v10 + v9 - 1);
      char v13 = 0;
      if (IHbsearch((unsigned __int8 *)&v12, a3)
        && ScrambleAndFind(a1, a2, (__int16)v9, 1, v8, a3) == 2)
      {
        break;
      }
      char v13 = *(unsigned char *)(v10 + v9 + 1);
      if (IHbsearch((unsigned __int8 *)&v12, a3))
      {
        if (ScrambleAndFind(a1, a2, (__int16)v9, 0, v8, a3) == 2) {
          break;
        }
      }
      if (*(unsigned __int16 *)(v6 + 130) != *(unsigned __int16 *)(v6 + 132)) {
        *(_DWORD *)(a3 + 8 + 4 * ((unsigned __int16)(v9 - 1) >> 5)) |= 1 << -(char)v9;
      }
      ++v9;
    }
    while (v9 < (unsigned __int16)(a2 + 2 - *(_WORD *)(v6 + 8)));
  }
  free(v8);
  return 1;
}

uint64_t IHhyp(const char *a1, __int16 *a2)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 95);
  a2[374] = 0;
  *((unsigned char *)a2 + 750) = 0;
  int v4 = *a2;
  if (v4 == 2)
  {
    uint64_t result = IHterm((uint64_t)a2);
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    if (!*a2)
    {
      uint64_t result = IHinit((uint64_t)a2);
      goto LABEL_10;
    }
LABEL_9:
    uint64_t result = 8;
    goto LABEL_10;
  }
  *((void *)a2 + 2) = 0;
  uint64_t v6 = (int *)(a2 + 8);
  *((void *)a2 + 1) = 0;
  uint64_t v7 = *((void *)a2 + 94);
  *((void *)a2 + 3) = 0;
  uint64_t v8 = a2 + 12;
  *(unsigned char *)(v3 + 92) = 0;
  *((unsigned char *)a2 + 747) = 0;
  *(_OWORD *)(a2 + 340) = 0u;
  *(_OWORD *)(a2 + 34_Block_object_dispose(&STACK[0x510], 8) = 0u;
  *(_OWORD *)(a2 + 356) = 0u;
  *(_OWORD *)(a2 + 364) = 0u;
  *((unsigned char *)a2 + 744) = 0;
  memset(__b, 0, 67);
  unsigned __int16 v9 = strlen(a1);
  uint64_t result = 0;
  if ((__int16)v9 < 3) {
    goto LABEL_10;
  }
  if ((__int16)v9 >= 0x41)
  {
    *((unsigned char *)a2 + 74_Block_object_dispose(&STACK[0x510], 8) = 1;
    goto LABEL_9;
  }
  __int16 v113 = v9 - 3;
  __strcpy_chk();
  __strcpy_chk();
  unsigned int v115 = (__int16)v9 - 1;
  int v117 = (__int16)v9;
  unsigned int v10 = SLcap((uint64_t)&v124, 0, (__int16)v9, &v122, v7);
  uint64_t v11 = 0;
  *((void *)a2 + 4) = v122;
  unsigned int v109 = v10;
  *((unsigned char *)a2 + 746) = v10;
  do
  {
    uint64_t v12 = *(&v124 + v11);
    if (*(&v124 + v11) > 0x2Eu)
    {
      if (v12 != 47)
      {
        if (v12 == 58)
        {
LABEL_28:
          uint64_t result = 0;
          *((unsigned char *)a2 + 749) |= 4u;
          goto LABEL_10;
        }
        goto LABEL_20;
      }
    }
    else if (v12 != 45)
    {
      if (v12 == 46) {
        goto LABEL_28;
      }
LABEL_20:
      uint64_t v13 = v11 + 1;
      goto LABEL_21;
    }
    uint64_t v13 = v11 + 1;
    if ((*(&v124 + v11 + 1) | 2) != 0x2F) {
      v8[(unsigned __int16)v11 >> 5] |= 1 << ~(_BYTE)v11;
    }
LABEL_21:
    if ((*(_DWORD *)(v7 + 4 * v12) & 0x40000000) != 0) {
      LOBYTE(v12) = v12 + 32;
    }
    *(&v124 + v11) = v12;
    uint64_t v11 = v13;
  }
  while (v13 != v9);
  __int16 v14 = 0;
  unsigned int v15 = *((unsigned __int8 *)a2 + 745);
  unsigned int v16 = v123;
  if (v15 <= 8)
  {
    __int16 v17 = v9 - 1;
    if (v15 != 3)
    {
      int v110 = 0;
      if (v15 != 5) {
        goto LABEL_51;
      }
    }
    goto LABEL_36;
  }
  __int16 v17 = v9 - 1;
  if (v15 == 9)
  {
LABEL_36:
    *a2 = 5;
    *(void *)(v3 + 136) = 0xFFFF000000000000;
    char v21 = v124;
    if ((*(_DWORD *)(v7 + 4 * v124) & 0x40000000) != 0) {
      char v21 = v124 + 32;
    }
    char __s = v21;
    unsigned __int8 v22 = v125;
    if ((*(_DWORD *)(v7 + 4 * v125) & 0x40000000) != 0) {
      unsigned __int8 v22 = v125 + 32;
    }
    unsigned __int8 v130 = v22;
    unsigned __int8 v131 = 0;
    if (IHbsearch((unsigned __int8 *)&__s, (uint64_t)a2))
    {
      IHdecode(&v126, (__int16)(v117 - 2), 0, 0, 0, (unsigned __int16 *)a2);
      int v23 = *(unsigned __int16 *)(v3 + 142);
      unsigned int v16 = v123;
      if (v23 == 0xFFFF)
      {
        __int16 v14 = 0;
        int v110 = 0;
      }
      else
      {
        __int16 v24 = v23 + 2;
        unsigned int v16 = &v123[v24];
        int v110 = *(unsigned __int16 *)(v3 + 140);
        __int16 v14 = v24;
      }
    }
    else
    {
      __int16 v14 = 0;
      int v110 = 0;
      unsigned int v16 = v123;
    }
    unsigned __int8 v25 = v126;
    if ((*(_DWORD *)(v7 + 4 * v126) & 0x40000000) != 0) {
      unsigned __int8 v25 = v126 + 32;
    }
    unsigned __int8 v131 = v25;
    *(_WORD *)(v3 + 142) = -1;
    if (IHbsearch((unsigned __int8 *)&__s, (uint64_t)a2))
    {
      IHdecode(v127, v113, 0, 0, 0, (unsigned __int16 *)a2);
      int v26 = *(unsigned __int16 *)(v3 + 142);
      if (v26 != 0xFFFF)
      {
        __int16 v27 = v26 + 3;
        v16 += v27;
        int v110 = *(unsigned __int16 *)(v3 + 140);
        __int16 v14 = v27;
      }
    }
    unsigned int v15 = *((unsigned __int8 *)a2 + 745);
LABEL_51:
    int v108 = v16;
    int v20 = 0;
    if (v15 > 0xC) {
      goto LABEL_140;
    }
    unsigned __int16 v18 = v117;
    if (((1 << v15) & 0x1328) == 0)
    {
LABEL_94:
      if (v14 <= v17)
      {
        int v44 = v14;
        __int16 v45 = v14;
        do
        {
          *(&__s + v44 - v14) = *(&v124 + v45++);
          int v44 = v45;
        }
        while (v45 <= v17);
      }
      else
      {
        int v44 = v14;
      }
      *(&__s + v44 - v14) = 0;
      if (*(unsigned char *)(v3 + 24) == 105)
      {
        int v46 = *((_DWORD *)a2 + 6);
        int v47 = *((_DWORD *)a2 + 7);
        if (*((void *)a2 + 3))
        {
          uint64_t result = 0;
          *((unsigned char *)a2 + 749) |= 1u;
          *((_DWORD *)a2 + 4) = v46;
          *((_DWORD *)a2 + 5) = v47;
          *((_DWORD *)a2 + 2) = v46;
          *((_DWORD *)a2 + 3) = v47;
          goto LABEL_10;
        }
        if ((*((unsigned char *)a2 + 749) & 2) != 0)
        {
LABEL_239:
          uint64_t result = 0;
          goto LABEL_10;
        }
      }
      char v114 = v14;
      int v107 = v20;
      __int16 v116 = v17;
      unsigned __int16 v118 = v18;
      __int16 v112 = v14;
      unsigned int v48 = *(unsigned __int16 *)(v3 + 4);
      int v49 = (v48 >> 1) - 1;
      if (v48 >= 4)
      {
        if (v49 <= 1) {
          size_t v50 = 1;
        }
        else {
          size_t v50 = v49;
        }
        memset(__b, 32, v50);
      }
      int v51 = strlen(&__s);
      if ((int)((strlen(__b) + v51 + 2 * v49) << 16) > 4128768) {
        goto LABEL_9;
      }
      __strcat_chk();
      int v52 = strlen(__b);
      if (v48 < 4)
      {
        __int16 v56 = v52;
        unsigned int v54 = (int *)(a2 + 4);
        unsigned __int16 v55 = v118;
      }
      else
      {
        LOWORD(v53) = 0;
        unsigned int v54 = (int *)(a2 + 4);
        unsigned __int16 v55 = v118;
        do
        {
          __int16 v56 = v52 + 1;
          __b[(__int16)v52] = 32;
          int v53 = (__int16)(v53 + 1);
          ++v52;
        }
        while (v53 < v49);
      }
      __b[v56] = 0;
      int v57 = v56 - 2 * v49;
      signed int v58 = (__int16)v55;
      if (v57 <= 2)
      {
        int v59 = v110 << 16;
        *unsigned int v54 = v110 << 16;
        if ((__int16)v55 - 1 == v116)
        {
LABEL_149:
          uint64_t result = 0;
          *uint64_t v6 = v59;
          goto LABEL_10;
        }
        int v60 = *((unsigned __int8 *)a2 + 745);
        if (v60 == 3)
        {
          unsigned __int16 v61 = v116;
          uint64_t v64 = v116 + 1;
          __int16 v62 = v112;
          if (*(&v124 + v64) == 39) {
            goto LABEL_146;
          }
        }
        else
        {
          unsigned __int16 v61 = v116;
          __int16 v62 = v112;
          if (v60 == 5)
          {
            uint64_t v63 = v127[v116 - 1];
            if (v63 == 121 || (*(_DWORD *)(v7 + 4 * v63) & 0x10000000) != 0)
            {
              LOBYTE(v64) = v116 + 1;
LABEL_146:
              v59 |= v107 << 16 >> v64;
              *unsigned int v54 = v59;
              if (*(unsigned __int16 *)(v3 + 6) > 1u || !v62 && (v60 == 9 || v60 == 3))
              {
                v59 &= ~0x80000000;
                *unsigned int v54 = v59;
              }
              goto LABEL_149;
            }
          }
        }
        uint64_t v64 = (__int16)v61 + 1;
        if ((v61 & 0x8000) == 0 && *(&v124 + v64) != 45)
        {
          v54[v61 >> 5] |= 1 << ~(_BYTE)v116;
          int v59 = *v54;
        }
        goto LABEL_146;
      }
      __int16 v105 = v57;
      signed int v65 = (__int16)strlen(v108);
      if (v65 >= 11)
      {
        signed int v66 = v58;
        signed int v67 = v65;
        int v68 = IHcache((uint64_t)v108, v65, 2, (uint64_t)a2);
        signed int v65 = v67;
        signed int v58 = v66;
        if (v68)
        {
          *(unsigned char *)(v3 + 72) = 0;
          *(_DWORD *)(v3 + 76) = 0;
          *(_DWORD *)(v3 + 136) = 0;
          goto LABEL_179;
        }
      }
      int v104 = v65;
      int v69 = IHgetmap((uint64_t)__b, v105, (uint64_t)a2);
      *(unsigned char *)(v3 + 86) = 0;
      *(unsigned char *)(v3 + 92) = 0;
      if (!v69) {
        goto LABEL_179;
      }
      *(unsigned char *)(v3 + 72) = 0;
      *a2 = 4;
      *(_DWORD *)(v3 + 136) = 0;
      uint64_t v70 = *v108;
      if ((*(_DWORD *)(v7 + 4 * v70) & 0x40000000) != 0) {
        LOBYTE(v70) = v70 + 32;
      }
      uint64_t v71 = v108[1];
      int v72 = *(_DWORD *)(v7 + 4 * v71);
      char v119 = v70;
      unsigned __int8 v73 = v71 + 32;
      if ((v72 & 0x40000000) == 0) {
        unsigned __int8 v73 = v71;
      }
      unsigned __int8 v120 = v73;
      unsigned __int8 v121 = 0;
      if (IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
      {
        IHdecode((unsigned __int8 *)v108 + 2, (__int16)(v104 - 2), (*(_DWORD *)(v7 + 4 * *v108) >> 30) & 1, 0, 0, (unsigned __int16 *)a2);
        if (*(unsigned char *)(v3 + 72)) {
          char v74 = 2;
        }
        else {
          char v74 = 3;
        }
      }
      else
      {
        char v74 = 3;
      }
      uint64_t v75 = v108[2];
      if ((*(_DWORD *)(v7 + 4 * v75) & 0x40000000) != 0) {
        LOBYTE(v75) = v75 + 32;
      }
      unsigned __int8 v121 = v75;
      *(unsigned char *)(v3 + 72) = 0;
      if (IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
      {
        IHdecode((unsigned __int8 *)v108 + 3, (__int16)(v104 - 3), (*(_DWORD *)(v7 + 4 * *v108) >> 30) & 1, 0, 0, (unsigned __int16 *)a2);
        if (*(unsigned char *)(v3 + 86))
        {
          *(unsigned char *)(v3 + 72) = 0;
          uint64_t v76 = 3;
          goto LABEL_162;
        }
        uint64_t v76 = 3;
        if (*(unsigned char *)(v3 + 72) || v74 != 2) {
          goto LABEL_162;
        }
      }
      else if (v74 != 2)
      {
        uint64_t v76 = 3;
        goto LABEL_162;
      }
      *(unsigned char *)(v3 + 72) = 1;
      *(_DWORD *)(v3 + 76) *= 2;
      uint64_t v76 = 2;
LABEL_162:
      unsigned int v77 = *((unsigned __int8 *)a2 + 745);
      if (v77 <= 0xD
        && ((1 << v77) & 0x2CC0) != 0
        && !*((unsigned char *)a2 + 747)
        && !*v8
        && (v77 != 6 || (*(_DWORD *)(v7 + 4 * *v108) & 0x40000000) != 0))
      {
        if (*(unsigned char *)(v3 + 72) && IsValidRMCC(&v108[v76 + *(unsigned __int16 *)(v3 + 84)], (uint64_t)a2))
        {
          int v78 = *v54 & ~(2 * *(_DWORD *)(v3 + 76));
          *unsigned int v54 = v78;
          int v79 = v78 & ~(*(int *)(v3 + 76) >> 1);
          *unsigned int v54 = v79;
          *unsigned int v54 = v79 | *(_DWORD *)(v3 + 76);
        }
        else
        {
          *(_DWORD *)(v3 + 76) = 0;
        }
      }
      if (*(unsigned char *)(v3 + 86)) {
        *v54 ^= *(_DWORD *)(v3 + 88);
      }
      if (v104 >= 11) {
        IHcache((uint64_t)v108, v58, 1, (uint64_t)a2);
      }
LABEL_179:
      unsigned __int16 v80 = v118;
      int v81 = v116;
      if (*((unsigned char *)a2 + 745) != 1 && !*(unsigned char *)(v3 + 86))
      {
        IHclean((unsigned __int8 *)&__b[v49], v105, (uint64_t)a2);
        int v81 = v116;
        unsigned __int16 v80 = v118;
        if (!*((unsigned char *)a2 + 747)
          && !*v8
          && ((*(_DWORD *)(v7 + 4 * *v108) & 0x40000000) != 0 || *((unsigned char *)a2 + 745) != 6))
        {
          *v54 |= *(_DWORD *)(v3 + 76);
        }
      }
      int v82 = (*v54 >> v114) | (v110 << 16);
      *unsigned int v54 = v82;
      if (v112)
      {
        unsigned int v83 = v109;
        unsigned __int16 v84 = v116;
      }
      else
      {
        int v85 = *((unsigned __int8 *)a2 + 745);
        unsigned int v83 = v109;
        unsigned __int16 v84 = v116;
        if (v85 == 9 || v85 == 3)
        {
          v82 &= ~0x80000000;
          *unsigned int v54 = v82;
        }
      }
      uint64_t v86 = (__int16)v80 - 1;
      if (v86 == v81)
      {
LABEL_201:
        if (!*((unsigned char *)a2 + 747) && !*(unsigned char *)(v3 + 92))
        {
          int v90 = *((_DWORD *)a2 + 3);
          *((_DWORD *)a2 + 4) = v82;
          *((_DWORD *)a2 + 5) = v90;
          if ((*(_DWORD *)(v7 + 4 * __s) & 0x10000000) != 0) {
            *uint64_t v6 = v82 & 0x7FFFFFFF;
          }
          if ((*(_DWORD *)(v7 + 4 * *(&__s + v86)) & 0x10000000) != 0) {
            v6[(unsigned __int16)(v80 - 1) >> 5] &= ~(1 << ~(_BYTE)v86);
          }
          if (v58 < 2) {
            goto LABEL_230;
          }
          uint64_t v91 = v80;
          unsigned __int16 v92 = 1;
          uint64_t v93 = 1;
          do
          {
            int v94 = v6[v92 >> 5];
            int v95 = 1 << ~(_BYTE)v93;
            if ((v94 & v95) != 0)
            {
              if (((v6[(unsigned __int16)(v92 + 1) >> 5] >> ~(_BYTE)++v93) & 1) != 0
                && (*(_DWORD *)(v7 + 4 * *(&__s + v93)) & 0x10000000) != 0)
              {
                v6[v92 >> 5] = v94 & ~v95;
              }
            }
            else
            {
              ++v93;
            }
            ++v92;
          }
          while (v93 != v91);
        }
        if (v58 >= 2)
        {
          int v96 = 0;
          unsigned __int16 v97 = 0;
          do
          {
            int v98 = *(&v124 + (__int16)v97);
            if (v98 == 47 || v98 == 45)
            {
              uint64_t v99 = *(&v124 + v96 + 1);
              if ((v99 | 2) != 0x2F)
              {
                if ((int)v86 <= v81
                  || (__int16)v97 > (__int16)v84 && *((unsigned char *)a2 + 745) != 5
                  || (int v100 = *((unsigned __int8 *)a2 + 745), (__int16)v97 < (__int16)v84) && v100 == 3
                  || v100 == 5 && v99 != 121 && (*(_DWORD *)(v7 + 4 * v99) & 0x10000000) == 0)
                {
                  int v101 = 1 << ~(_BYTE)v96;
                  v54[v97 >> 5] |= v101;
                  v6[v97 >> 5] |= v101;
                }
              }
            }
            int v96 = (__int16)++v97;
          }
          while ((int)v86 > (__int16)v97);
        }
LABEL_230:
        int v102 = *((unsigned __int8 *)a2 + 745);
        if (v112 == 2 && v102 == 5)
        {
          *v54 &= ~0x20000000u;
          *v6 &= ~0x20000000u;
        }
        else if (v102 == 16 && (*v6 != *v54 || *((_DWORD *)a2 + 5) != *((_DWORD *)a2 + 3)))
        {
          *((unsigned char *)a2 + 747) = 1;
          if (!*((unsigned char *)a2 + 680)) {
            __strcpy_chk();
          }
        }
        __strcpy_chk();
        __int16 v103 = strlen(&v124);
        SLrecap((unsigned __int8 *)&v124, v103, v83, (uint64_t)&v122, v83, v7);
        __strcpy_chk();
        goto LABEL_239;
      }
      int v87 = *((unsigned __int8 *)a2 + 745);
      if (v87 == 3)
      {
        uint64_t v89 = (__int16)v84 + 1;
        if (*(&v124 + v89) == 39) {
          goto LABEL_200;
        }
      }
      else if (v87 == 5)
      {
        uint64_t v88 = v127[(__int16)v84 - 1];
        if (v88 == 121 || (*(_DWORD *)(v7 + 4 * v88) & 0x10000000) != 0)
        {
          LOBYTE(v89) = v81 + 1;
LABEL_200:
          v82 |= v107 << 16 >> v89;
          *unsigned int v54 = v82;
          goto LABEL_201;
        }
      }
      uint64_t v89 = (__int16)v84 + 1;
      if (*(&v124 + v89) != 45)
      {
        v54[v84 >> 5] |= 1 << ~(_BYTE)v81;
        int v82 = *v54;
      }
      goto LABEL_200;
    }
    *a2 = 6;
    *(void *)(v3 + 136) = 0xFFFF000000000000;
    if (v117 >= 64) {
      int v28 = 64;
    }
    else {
      int v28 = v117;
    }
    if (v117 < 1)
    {
      __int16 v30 = 0;
    }
    else
    {
      int v29 = 0;
      __int16 v30 = 0;
      do
      {
        *(&__s + v30++) = *(&v124 + v28 + ~v29);
        int v29 = v30;
      }
      while (v28 > v30);
    }
    __int16 v111 = v14;
    int v106 = v15 & 0xFE;
    *(&__s + v30) = 0;
    char v31 = __s;
    if ((*(_DWORD *)(v7 + 4 * __s) & 0x40000000) != 0) {
      char v31 = __s + 32;
    }
    int v32 = *(_DWORD *)(v7 + 4 * v130);
    char v119 = v31;
    unsigned __int8 v33 = v130 + 32;
    if ((v32 & 0x40000000) == 0) {
      unsigned __int8 v33 = v130;
    }
    unsigned __int8 v120 = v33;
    unsigned __int8 v121 = 0;
    if (!IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
    {
      int v20 = 0;
      goto LABEL_83;
    }
    IHdecode(&v131, (__int16)(v117 - 2), 0, 0, 0, (unsigned __int16 *)a2);
    int v34 = *(__int16 *)(v3 + 142);
    if (v34 == -1) {
      goto LABEL_81;
    }
    int v35 = *((unsigned __int8 *)a2 + 745);
    __int16 v36 = v117;
    if (v117 >= 3 && v35 == 8)
    {
      int v20 = 0;
      int v37 = *(&v124 + v117 - *(__int16 *)(v3 + 142) - 3);
      if (v37 == 98)
      {
LABEL_82:
        __int16 v17 = v115;
LABEL_83:
        unsigned __int8 v40 = v131;
        if ((*(_DWORD *)(v7 + 4 * v131) & 0x40000000) != 0) {
          unsigned __int8 v40 = v131 + 32;
        }
        unsigned __int8 v121 = v40;
        *(_WORD *)(v3 + 142) = -1;
        if (!IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2)
          || (IHdecode(v132, v113, 0, 0, 0, (unsigned __int16 *)a2),
              int v41 = *(__int16 *)(v3 + 142),
              v41 == -1))
        {
          unsigned __int16 v18 = v117;
          goto LABEL_93;
        }
        int v42 = *((unsigned __int8 *)a2 + 745);
        unsigned __int16 v18 = v117;
        if (v117 >= 4 && v42 == 8)
        {
          int v43 = *(&v124 + v117 - *(__int16 *)(v3 + 142) - 4);
          if (v43 == 98 || v43 == 103) {
            goto LABEL_93;
          }
        }
        else
        {
          if (v117 < 4 || v42 != 9)
          {
LABEL_127:
            if (v106 != 8 || (unsigned __int16 v18 = v117, IsValidRMCC(&v124, (uint64_t)a2)))
            {
              __int16 v17 = v18 - v41 - 4;
              int v20 = *(unsigned __int16 *)(v3 + 140);
              v123[v17 + 1] = 0;
            }
            goto LABEL_93;
          }
          if (*(&v124 + v117 - *(__int16 *)(v3 + 142) - 4) == 115)
          {
LABEL_93:
            __int16 v14 = v111;
            goto LABEL_94;
          }
        }
        if ((*(_DWORD *)(v7 + 4 * v123[v115]) & 0x40000000) == 0) {
          goto LABEL_127;
        }
        goto LABEL_93;
      }
      __int16 v17 = v115;
      if (v37 == 103) {
        goto LABEL_83;
      }
      unsigned int v38 = v115;
      __int16 v36 = v117;
    }
    else
    {
      if (v117 < 3 || v35 != 9)
      {
LABEL_78:
        if (v106 != 8 || (valid = IsValidRMCC(v123, (uint64_t)a2), __int16 v36 = v117, valid))
        {
          __int16 v17 = v36 - v34 - 3;
          int v20 = *(unsigned __int16 *)(v3 + 140);
          v123[v17 + 1] = 0;
          goto LABEL_83;
        }
        goto LABEL_81;
      }
      if (*(&v124 + v117 - *(__int16 *)(v3 + 142) - 3) == 115)
      {
LABEL_81:
        int v20 = 0;
        goto LABEL_82;
      }
      unsigned int v38 = v115;
    }
    if ((*(_DWORD *)(v7 + 4 * v123[v38]) & 0x40000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_81;
  }
  int v110 = 0;
  if (v15 != 16) {
    goto LABEL_51;
  }
  if (*(unsigned char *)(v3 + 24) != 105)
  {
    int v110 = 0;
    __int16 v14 = 0;
    int v20 = 0;
    int v108 = v123;
LABEL_140:
    unsigned __int16 v18 = v117;
    goto LABEL_94;
  }
  unsigned __int16 v18 = v117;
  uint64_t v19 = (v117 - 2);
  if (*(&v124 + v19) != 39)
  {
    int v110 = 0;
    __int16 v14 = 0;
    int v20 = 0;
    int v108 = v123;
    goto LABEL_94;
  }
  int v108 = v123;
  if (*(&v124 + v115) != 115)
  {
    int v110 = 0;
    __int16 v14 = 0;
    int v20 = 0;
    goto LABEL_94;
  }
  uint64_t result = 0;
  v123[v19] = 0;
  unsigned __int16 v18 = v117 - 2;
  *(&v124 + v19) = 0;
  if ((unsigned __int16)(v117 - 2) >= 3u)
  {
    int v110 = 0;
    __int16 v14 = 0;
    int v20 = 0;
    __int16 v17 = v113;
    goto LABEL_94;
  }
LABEL_10:
  *((_DWORD *)a2 + 1) = result;
  return result;
}

uint64_t IsValidRMCC(const char *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)a1;
  if (v2 == 39) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 760);
  uint64_t v5 = *(void *)(a2 + 752);
  int v6 = strlen(a1);
  if (v6 << 16 < 0x20000 || (*(_DWORD *)(v5 + 4 * a1[(unsigned __int16)v6 - 1]) & 0x40000000) != 0) {
    return 0;
  }
  int v7 = *(unsigned __int16 *)(v4 + 94) - 1;
  unsigned __int8 v8 = a1[1];
  if (v8)
  {
    int v9 = 1;
    int v10 = v2;
    do
    {
      int v11 = ((v2 & 0x7F) << 8)
          + ((unsigned __int16)v2 >> 7)
          + 2 * ((unsigned __int16)v2 >> 7)
          + 16 * ((unsigned __int16)v2 >> 7)
          + v8;
      if ((unsigned __int16)v11 <= 0x7FECu) {
        int v2 = v11;
      }
      else {
        int v2 = v11 - 32749;
      }
      v10 ^= v2;
      unsigned __int8 v8 = a1[++v9];
    }
    while (v8);
  }
  else
  {
    int v10 = v2;
  }
  int v12 = v10 & v7;
  if (((unsigned __int16)v10 & (unsigned __int16)v7) == 0) {
    return 0;
  }
  uint64_t v13 = *(void *)(v4 + 64);
  int v14 = *(unsigned __int8 *)(v13 + (unsigned __int16)(v10 & v7));
  if (v14 == v2) {
    return 0;
  }
  unsigned int v16 = 0;
  int v17 = 3 - (v2 & 0x7F);
  do
  {
    uint64_t result = 1;
    if (!v14) {
      break;
    }
    if (v16 > 0x32) {
      break;
    }
    uint64_t result = 0;
    ++v16;
    v17 += 2 * (v2 & 0x7F);
    int v12 = (v17 + v12) & v7;
    int v14 = *(unsigned __int8 *)(v13 + (unsigned __int16)v12);
  }
  while (v14 != v2);
  return result;
}

uint64_t IHinit(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 551)) {
    goto LABEL_7;
  }
  if (*(void *)(a1 + 760)) {
    return 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0xD8uLL, 0x10300403ED6EF0DuLL);
  *(void *)(a1 + 760) = v3;
  if (!v3)
  {
    *(unsigned char *)(a1 + 750) |= 4u;
    return 8;
  }
  v3[26] = 0;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + _Block_object_dispose(&STACK[0x510], 8) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  if (IHintget(a1))
  {
    IHterm(a1);
LABEL_7:
    *(unsigned char *)(a1 + 748) |= 2u;
    return 8;
  }
  uint64_t v4 = SLLngToA(*(unsigned __int8 *)(a1 + 745));
  uint64_t result = 0;
  *(void *)(a1 + 752) = v4;
  return result;
}

uint64_t IHintchk(uint64_t a1, int a2)
{
  unsigned int v2 = __rev16(*(unsigned __int16 *)(a1 + 384));
  BOOL v4 = *(unsigned char *)a1 == 67 && v2 == 7 && *(unsigned __int8 *)(a1 + 387) == a2;
  unsigned int v5 = __rev16(*(unsigned __int16 *)(a1 + 388));
  if (v4 && v5 == 3) {
    return 0;
  }
  else {
    return 8;
  }
}

uint64_t CloseRamFile(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (SLClose(a1) == 8)
  {
    *(unsigned char *)(a2 + 750) |= 1u;
    return 8;
  }
  return a3;
}

uint64_t IHintget(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 760);
  *(void *)__int16 v30 = 0;
  if (SLOpen(a1 + 40, a1 + 551, &v30[1], 0) == 8)
  {
    uint64_t v3 = (unsigned char *)(a1 + 750);
    char v4 = 2;
LABEL_31:
    *v3 |= v4;
    return 8;
  }
  unsigned int v5 = malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v6 = (uint64_t)v5;
  if (SLFRead(v30[1], 1024, v5, (unsigned int *)v30))
  {
    free((void *)v6);
    char v7 = *(unsigned char *)(a1 + 750) | 8;
LABEL_26:
    *(unsigned char *)(a1 + 750) = v7;
    goto LABEL_27;
  }
  if (__rev16(*(unsigned __int16 *)(v6 + 390)) - 1 >= 2
    || IHintchk(v6, *(unsigned __int8 *)(a1 + 745)) == 8)
  {
    *(unsigned char *)(a1 + 750) |= 0x10u;
    unsigned __int8 v8 = (void *)v6;
LABEL_9:
    free(v8);
LABEL_27:
    BOOL v26 = SLClose(v30[1]) == 8;
    goto LABEL_28;
  }
  *(_WORD *)(v2 + 96) = bswap32(*(unsigned __int16 *)(v6 + 732)) >> 16;
  *(_WORD *)(v2 + 6) = bswap32(*(unsigned __int16 *)(v6 + 714)) >> 16;
  *(_WORD *)(v2 + _Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)(v6 + 716)) >> 16;
  *(_WORD *)(v2 + 4) = bswap32(*(unsigned __int16 *)(v6 + 718)) >> 16;
  *(_WORD *)(v2 + 94) = bswap32(*(unsigned __int16 *)(v6 + 736)) >> 16;
  *(unsigned char *)(v2 + 24) = *(unsigned char *)(v6 + 713);
  __int16 v9 = *(unsigned __int8 *)(v6 + 724);
  unint64_t v10 = *(unsigned __int8 *)(v6 + 725);
  unsigned int v11 = *(unsigned __int16 *)(v6 + 726);
  unsigned int v12 = __rev16(v11);
  unsigned int v13 = (bswap32(v11) >> 16) | 0x10000;
  unsigned int v14 = __rev16(*(unsigned __int16 *)(v6 + 728)) == 1 ? v13 : v12;
  *(_DWORD *)(v2 + 112) = v14;
  free((void *)v6);
  unsigned int v15 = malloc_type_calloc(1uLL, 0x202uLL, 0xBD772280uLL);
  *(void *)(v2 + 32) = v15;
  if (!v15) {
    goto LABEL_25;
  }
  unsigned int v16 = malloc_type_calloc(1uLL, 0x101uLL, 0xA276D99EuLL);
  *(void *)(v2 + 40) = v16;
  if (!v16) {
    goto LABEL_25;
  }
  unint64_t v17 = (__int16)(v9 << 8) | v10;
  unsigned __int16 v18 = malloc_type_calloc(1uLL, v17 + 1, 0x15EEBBC5uLL);
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x510], 8) = v18;
  if (!v18) {
    goto LABEL_25;
  }
  if (*(_WORD *)(v2 + 94))
  {
    uint64_t v19 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v2 + 94), 0x3DAFC599uLL);
    *(void *)(v2 + 64) = v19;
    if (!v19) {
      goto LABEL_25;
    }
  }
  int v20 = malloc_type_calloc(1uLL, 8 * *(unsigned __int16 *)(v2 + 96), 0x1000040662E9A8EuLL);
  *(void *)(v2 + 104) = v20;
  if (!v20) {
    goto LABEL_25;
  }
  size_t v21 = *(unsigned int *)(v2 + 112);
  if (v21)
  {
    unsigned __int8 v22 = malloc_type_calloc(v21, 1uLL, 0x27C6D0B0uLL);
    *(void *)(v2 + 56) = v22;
    if (!v22) {
      goto LABEL_25;
    }
  }
  int v23 = malloc_type_calloc(1uLL, 0x400uLL, 0x1000040BDFB0063uLL);
  *(void *)(v2 + 16) = v23;
  if (!v23 || (__int16 v24 = (char *)malloc_type_calloc(1uLL, 0x201uLL, 0x3D8B83A1uLL)) == 0)
  {
LABEL_25:
    char v7 = *(unsigned char *)(a1 + 750) | 4;
    goto LABEL_26;
  }
  unsigned __int8 v25 = v24;
  if (ReadCodes(v30[1], (uint64_t *)(v2 + 32), v24, v17, a1))
  {
    unsigned __int8 v8 = v25;
    goto LABEL_9;
  }
  int Data = ReadData(v30[1], v2 + 32, *(_DWORD *)(v2 + 112), v25, a1);
  free(v25);
  int v29 = SLClose(v30[1]);
  BOOL v26 = v29 == 8;
  if (Data)
  {
LABEL_28:
    if (!v26) {
      return 8;
    }
    goto LABEL_30;
  }
  if (v29 == 8)
  {
LABEL_30:
    uint64_t v3 = (unsigned char *)(a1 + 750);
    char v4 = 1;
    goto LABEL_31;
  }
  return 0;
}

uint64_t ReadCodes(unsigned int a1, uint64_t *a2, char *a3, int a4, uint64_t a5)
{
  unsigned int v13 = 0;
  uint64_t v9 = *(void *)(a5 + 760);
  if (SLFRead(a1, a4, (void *)a2[2], &v13)) {
    goto LABEL_6;
  }
  if (SLFRead(a1, 512, a3, &v13)) {
    goto LABEL_6;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a2;
  do
  {
    *(_WORD *)(v11 + v10) = *(_WORD *)&a3[v10];
    v10 += 2;
  }
  while (v10 != 512);
  if (SLFRead(a1, 256, (void *)a2[1], &v13)) {
    goto LABEL_6;
  }
  if (!*(_WORD *)(v9 + 94)) {
    return 0;
  }
  uint64_t result = SLFRead(a1, *(unsigned __int16 *)(v9 + 94), (void *)a2[4], &v13);
  if (result)
  {
LABEL_6:
    *(unsigned char *)(a5 + 750) |= 8u;
    return 8;
  }
  return result;
}

uint64_t ReadData(unsigned int a1, uint64_t a2, int a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 + 760);
  unsigned int v17 = 0;
  if (*(_WORD *)(v9 + 96))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (!SLFRead(a1, 3, (void *)(*(void *)(v9 + 104) + v11), &v17))
    {
      ++v12;
      v11 += 8;
      if (v12 >= *(unsigned __int16 *)(v9 + 96))
      {
        if (!*(_WORD *)(v9 + 96)) {
          goto LABEL_9;
        }
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        while (!SLFRead(a1, 3, a4, &v17))
        {
          uint64_t v15 = *(void *)(v9 + 104) + v13;
          *(_WORD *)(v15 + 4) = bswap32(*(unsigned __int16 *)a4) >> 16;
          *(unsigned char *)(v15 + 6) = a4[2];
          ++v14;
          v13 += 8;
          if (v14 >= *(unsigned __int16 *)(v9 + 96)) {
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
    }
    goto LABEL_11;
  }
LABEL_9:
  if (a3 && (unsigned __int16)SLHRead(a1, a3, *(char **)(a2 + 24), &v17))
  {
LABEL_11:
    *(unsigned char *)(a5 + 750) |= 8u;
    return 8;
  }
  return 0;
}

uint64_t IHterm(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 760);
  if (v1)
  {
    uint64_t v3 = (void *)v1[2];
    if (v3)
    {
      free(v3);
      v1[2] = 0;
    }
    char v4 = (void *)v1[4];
    if (v4)
    {
      free(v4);
      v1[4] = 0;
    }
    unsigned int v5 = (void *)v1[5];
    if (v5)
    {
      free(v5);
      v1[5] = 0;
    }
    uint64_t v6 = (void *)v1[6];
    if (v6)
    {
      free(v6);
      v1[6] = 0;
    }
    char v7 = (void *)v1[8];
    if (v7)
    {
      free(v7);
      v1[8] = 0;
    }
    unsigned __int8 v8 = (void *)v1[7];
    if (v8)
    {
      free(v8);
      v1[7] = 0;
    }
    uint64_t v9 = (void *)v1[13];
    if (v9)
    {
      free(v9);
      v1[13] = 0;
    }
    free(*(void **)(a1 + 760));
    *(void *)(a1 + 760) = 0;
  }
  return 0;
}

uint64_t PDadd(uint64_t a1, char *a2, int a3, int a4, char *a5, int a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9, unsigned __int16 a10, uint64_t *a11)
{
  __int16 v58 = a6;
  if (*(unsigned __int16 *)(a1 + 2112) > 0xB41u) {
    return 5107;
  }
  uint64_t v20 = *(void *)(a1 + 2168);
  uint64_t v53 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  unsigned __int8 v21 = strlen(a2);
  unsigned __int8 v22 = v21;
  int v23 = 0;
  if (a4 && a6)
  {
    if (*a5)
    {
      int v23 = 0;
    }
    else
    {
      LOBYTE(a4) = 0;
      int v23 = 5158;
    }
  }
  if (!v21) {
    return 0;
  }
  unsigned int v24 = *(unsigned __int16 *)(a1 + 2106);
  unsigned int v52 = v23;
  if (v24 >= 0x3E8)
  {
    if (*(unsigned __int16 *)(a1 + 2104) >= 6u)
    {
      int v50 = 1;
      int v51 = 0;
      goto LABEL_18;
    }
  }
  else if (v24 >= 0x64 && *(unsigned __int16 *)(a1 + 2104) > 5u)
  {
    int v50 = 0;
    int v51 = 0;
    goto LABEL_18;
  }
  if (PDexpand(a1)) {
    return 5107;
  }
  int v50 = 1;
  int v51 = 1;
LABEL_18:
  __int16 v57 = 0;
  unsigned __int16 v56 = 0;
  int v55 = 0;
  PDsearch(a1, a2, &v57, (__int16 *)&v56, 2, 0, 0);
  unsigned int v25 = v56;
  if (v56 == 0xFFFF)
  {
    while (!PDexpand(a1))
    {
      PDsearch(a1, a2, &v57, (__int16 *)&v56, 2, 0, 0);
      unsigned int v25 = v56;
      if (v56 != 0xFFFF)
      {
        int v51 = 1;
        goto LABEL_22;
      }
    }
    return 5107;
  }
LABEL_22:
  *(_WORD *)(*(void *)(v20 + 32) + 2 * v25) = *(_WORD *)(v20 + 24);
  BOOL v26 = *(unsigned char **)(v20 + 48);
  unsigned __int16 v27 = *(_WORD *)(v20 + 58);
  unsigned int v28 = *(unsigned __int16 *)(v20 + 56);
  if (!v26[20 * v27 + 18])
  {
    unsigned __int16 v29 = *(_WORD *)(v20 + 56);
    LOWORD(v2_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v20 + 58);
    goto LABEL_36;
  }
  if (*(_WORD *)(v20 + 56))
  {
    unsigned __int16 v27 = 0;
    while (v26[20 * v27 + 18])
    {
      if (v28 <= ++v27) {
        goto LABEL_32;
      }
    }
    *(_WORD *)(v20 + 5_Block_object_dispose(&STACK[0x510], 8) = v27;
    unsigned __int16 v30 = v27;
  }
  else
  {
    unsigned __int16 v30 = 0;
  }
  if (v28 == v30)
  {
LABEL_32:
    if (v28 <= 0x8CC)
    {
      char v31 = (char *)malloc_type_realloc(v26, 20 * v28 + 20480, 0x43130A21uLL);
      *(void *)(v20 + 4_Block_object_dispose(&STACK[0x510], 8) = v31;
      if (v31)
      {
        bzero(&v31[20 * v28], 0x5000uLL);
        *(_WORD *)(v20 + 5_Block_object_dispose(&STACK[0x510], 8) = v28;
        unsigned __int16 v29 = *(_WORD *)(v20 + 56) + 1024;
        *(_WORD *)(v20 + 56) = v29;
        unsigned __int16 v27 = v28;
        goto LABEL_36;
      }
    }
    return 5107;
  }
  unsigned __int16 v29 = v28;
  LOWORD(v2_Block_object_dispose(&STACK[0x510], 8) = v27;
  unsigned __int16 v27 = v30;
LABEL_36:
  if ((unsigned __int16)(v28 + 1) < v29) {
    *(_WORD *)(v20 + 5_Block_object_dispose(&STACK[0x510], 8) = v28 + 1;
  }
  uint64_t v32 = *(void *)(v20 + 40);
  uint64_t v33 = *(unsigned __int16 *)(v20 + 24);
  *(_WORD *)(v20 + 24) = v33 + 1;
  *(unsigned char *)(v32 + v33) = v27 / 0xFFu;
  *(unsigned char *)(*(void *)(v20 + 40) + *(unsigned __int16 *)(v20 + 24)) = v27 + v27 / 0xFFu;
  uint64_t v34 = *(void *)(v20 + 48);
  unsigned int v35 = v27;
  uint64_t v36 = v34 + 20 * v27;
  *(_WORD *)(v36 + 1_Block_object_dispose(&STACK[0x510], 8) = 1;
  int v37 = (char *)(v36 + 19);
  if (a3)
  {
    *int v37 = 1;
    uint64_t v38 = *(void *)(*(void *)pMCPbuff + 8 * a10);
    ++*(_WORD *)(v38 + 2094);
    char v39 = 3;
  }
  else
  {
    char v39 = 2;
  }
  uint64_t v40 = v53;
  if ((_BYTE)a4) {
    *int v37 = v39;
  }
  if (*(unsigned char *)(a1 + 2092))
  {
    uint64_t v41 = v34 + 20 * v35;
    uint64_t v42 = *a11;
    *(_DWORD *)(v41 + _Block_object_dispose(&STACK[0x510], 8) = *((_DWORD *)a11 + 2);
    *(void *)uint64_t v41 = v42;
  }
  unsigned int v54 = v35;
  ++*(_WORD *)(v20 + 24);
  SLrecap((unsigned __int8 *)a2, v22, a9, a8, a9, v40);
  unsigned int v43 = PDhypins(a2, a7, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * a10) + 2068));
  if ((_BYTE)a4)
  {
    uint64_t result = make_alt_entry(a5, &v55, &v58, a10);
    if (result == 8) {
      return result;
    }
    uint64_t v44 = *(void *)(v20 + 48) + 20 * v54;
    *(_DWORD *)(v44 + 12) = v55;
    *(_WORD *)(v44 + 16) = v58;
  }
  uint64_t v45 = *(void *)(v20 + 40);
  uint64_t v46 = *(unsigned __int16 *)(v20 + 24);
  *(_WORD *)(v20 + 24) = v46 + 1;
  *(unsigned char *)(v45 + v46) = v43;
  strncpy((char *)(*(void *)(v20 + 40) + *(unsigned __int16 *)(v20 + 24)), a2, v43);
  __int16 v47 = *(_WORD *)(v20 + 24) + v43;
  *(_WORD *)(v20 + 24) = v47;
  __int16 v48 = *(_WORD *)(v20 + 22) + 1;
  *(_WORD *)(v20 + 22) = v48;
  *(_WORD *)(v20 + 20) = v48;
  *(_WORD *)(a1 + 2104) = *(_WORD *)(v20 + 12) - v48;
  *(_WORD *)(a1 + 2106) = *(_WORD *)(v20 + 6) - v47;
  if (v50) {
    unsigned int v49 = v52;
  }
  else {
    unsigned int v49 = 5152;
  }
  if (v51) {
    return 5156;
  }
  else {
    return v49;
  }
}

uint64_t PDexpand(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 2152);
  int v55 = *(unsigned char **)(a1 + 2144);
  uint64_t v3 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  int v4 = *(unsigned __int16 *)(a1 + 2064);
  if ((v4 - 86) >= 9) {
    __int16 v5 = v4 + 10;
  }
  else {
    __int16 v5 = 95;
  }
  if (v5) {
    unsigned __int16 v6 = v5;
  }
  else {
    unsigned __int16 v6 = 10;
  }
  if (v6 > 0x5Fu) {
    return 8;
  }
  uint64_t v7 = v3;
  int v57 = 0;
  int size = 0;
  int v8 = v6 << 10;
  __int16 v56 = 0;
  CalculateSize((_WORD *)&size + 1, &size, &v56, (_WORD *)&v57 + 1, &v57, v8);
  uint64_t v9 = *(void *)(a1 + 2168);
  size_t v10 = (unsigned __int16)size;
  uint64_t v11 = malloc_type_calloc(1uLL, HIWORD(size), 0x100004077774924uLL);
  *(void *)(v9 + 64) = v11;
  if (!v11) {
    return 8;
  }
  unint64_t v12 = malloc_type_realloc(*(void **)(v9 + 40), v10, 0x100004077774924uLL);
  *(void *)(v9 + 40) = v12;
  if (!v12) {
    return 8;
  }
  unsigned __int16 v50 = v6;
  __int16 v51 = *(_WORD *)(v9 + 16);
  InitializeMask(v9);
  if (HIWORD(v57))
  {
    unint64_t v13 = 0;
    uint64_t v14 = *(void *)(v9 + 64);
    do
      *(_WORD *)(v14 + 2 * v13++) = -1;
    while (v13 < HIWORD(v57));
  }
  int v15 = 0;
  int v16 = 0;
  *(unsigned char *)uint64_t v9 = 1;
  unsigned int v52 = v2;
  while (1)
  {
    uint64_t v17 = *(unsigned __int16 *)(*(void *)(v9 + 32) + 2 * (unsigned __int16)v15);
    if (v17 != 0xFFFF)
    {
      __int16 v53 = *(_WORD *)(*(void *)(v9 + 32) + 2 * (unsigned __int16)v15);
      int v54 = v15;
      uint64_t v18 = v17 + *(void *)(v9 + 40);
      size_t v19 = *(unsigned __int8 *)(v18 + 2);
      strncpy(v2, (const char *)(v18 + 3), v19);
      if (v19)
      {
        size_t v20 = v19;
        unsigned __int8 v21 = v55;
        unsigned __int8 v22 = v2;
        do
        {
          unsigned int v24 = *v22++;
          char v23 = v24;
          char v25 = v24 + 32;
          if ((*(_DWORD *)(v7 + 4 * v24) & 0x40000000) != 0) {
            char v23 = v25;
          }
          *v21++ = v23;
          --v20;
        }
        while (v20);
      }
      v55[v19] = 0;
      PDhypstrip(v55, (void *)(a1 + 2076), *(unsigned __int8 *)(a1 + 2068));
      uint64_t v26 = v9;
      int v27 = *(unsigned __int16 *)(v9 + 16);
      unsigned int v28 = HIWORD(v57);
      uint64_t v29 = *(void *)(a1 + 2168);
      int v30 = *(unsigned __int16 *)(v29 + 14);
      int size_4 = 0;
      __int16 v31 = strlen(v55);
      SLfun((uint64_t)v55, 0, (__int16)(v31 - 1), (unsigned __int16 *)&size_4 + 1, &size_4);
      int v32 = (unsigned __int16)size_4;
      int v33 = BYTE2(size_4);
      *(_WORD *)(a1 + 2110) = 0;
      *(_WORD *)(a1 + 2114) = -1;
      if (!v30) {
        goto LABEL_47;
      }
      unsigned int v34 = v32 & v27;
      unsigned int v35 = v34 >= v28 ? v28 : 0;
      int v36 = v34 - v35;
      int v37 = 3 - v33;
      int v38 = 2 * v33;
      uint64_t v39 = *(void *)(v29 + 64);
      unsigned __int16 v40 = -1;
      do
      {
        int v41 = v36;
        while (1)
        {
          v37 += v38;
          unsigned int v42 = (v41 + v37) & v27;
          if (v42 >= v28) {
            unsigned int v43 = v28;
          }
          else {
            unsigned int v43 = 0;
          }
          int v36 = v42 - v43;
          LOWORD(size_4) = v42 - v43;
          if ((unsigned __int16)v41 == (unsigned __int16)(v42 - v43))
          {
            if (v42 == v43) {
              int v36 = 1;
            }
            else {
              int v36 = v41 - 1;
            }
            LOWORD(size_4) = v36;
          }
          LOWORD(v30) = v30 - 1;
          unsigned int v44 = *(unsigned __int16 *)(v39 + 2 * (unsigned __int16)v41);
          if (v44 >= 0xFFFE) {
            break;
          }
          int v41 = v36;
          if (!(_WORD)v30) {
            goto LABEL_44;
          }
        }
        if (v40 == 0xFFFF) {
          unsigned __int16 v40 = v41;
        }
      }
      while (v44 != 0xFFFF && (unsigned __int16)v30 != 0);
LABEL_44:
      if (v40 == 0xFFFF)
      {
LABEL_47:
        *(_WORD *)(v26 + 16) = v51;
        return 8;
      }
      uint64_t v9 = v26;
      *(_WORD *)(*(void *)(v26 + 64) + 2 * v40) = v53;
      ++v16;
      uint64_t v2 = v52;
      int v15 = v54;
      if (*(unsigned __int16 *)(a1 + 2112) <= (unsigned __int16)v16) {
        break;
      }
    }
    ++v15;
  }
  free(*(void **)(v26 + 32));
  uint64_t result = 0;
  *(void *)(v26 + 32) = *(void *)(v26 + 64);
  *(void *)(v26 + 64) = 0;
  *(_WORD *)(v26 + 2) = HIWORD(size);
  *(_WORD *)(v26 + 4) = HIWORD(v57);
  __int16 v47 = v57;
  *(_WORD *)(v26 + 12) = v57;
  *(_WORD *)(a1 + 2116) = v47;
  *(_WORD *)(v26 + 14) = v56;
  __int16 v48 = size;
  *(_WORD *)(v26 + 6) = size;
  *(_DWORD *)(v26 + _Block_object_dispose(&STACK[0x510], 8) = v8;
  *(_WORD *)(a1 + 2064) = v50;
  *(_WORD *)(a1 + 2104) = v47 - *(_WORD *)(v26 + 22);
  __int16 v49 = v48 - *(_WORD *)(v26 + 24);
  *(_WORD *)(a1 + 2106) = v49;
  *(_WORD *)(a1 + 210_Block_object_dispose(&STACK[0x510], 8) = v49;
  return result;
}

uint64_t PDapp(uint64_t a1, int a2)
{
  if (!a1) {
    return 8;
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  ++wPDMCPmtxCnt;
  if (bInitPDMtx)
  {
    if (bInitPDMtx != 1)
    {
      while (1)
        ;
    }
    bInitPDMtx = 2;
    if (SLInitMutex((int)"PD_MCP_MTX", &hPDMCPmtx)) {
      goto LABEL_7;
    }
    bInitPDMtx = 0;
  }
  if (SLLockMutex(&hPDMCPmtx))
  {
LABEL_7:
    --wPDMCPmtxCnt;
    return 8;
  }
  if (a2 == 1 && !pdmcpsta)
  {
    if (PDinit()) {
      goto LABEL_37;
    }
    LOWORD(v6) = 0;
    uint64_t v7 = pMCPbuff;
    int v8 = *(_WORD **)(pMCPbuff + 24);
    *int v8 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = pMCPbuff;
  if (a2 == 2 && !pMCPbuff)
  {
    if (*(_WORD *)(a1 + 12) && *(int *)(a1 + 8) > 7) {
      goto LABEL_64;
    }
    uint64_t v4 = 8;
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v13 = 5051;
    goto LABEL_40;
  }
  if (a2 == 2)
  {
    uint64_t v16 = *(unsigned __int16 *)(a1 + 2);
    uint64_t v17 = *(unsigned __int16 **)(pMCPbuff + 24);
    if (v16 <= *v17)
    {
      uint64_t v18 = *(void *)(pMCPbuff + 32);
      if (*(_WORD *)(v18 + 2 * v16) == 9090)
      {
        unsigned __int16 v19 = 1;
        while (1)
        {
          unsigned int v20 = v19;
          if (*(_WORD *)(*(void *)(pMCPbuff + 16) + 2 * v19) == 9090
            && *(unsigned __int16 *)(*(void *)(*(void *)pMCPbuff + 8 * v19) + 2160) == v16)
          {
            break;
          }
          ++v19;
          if (v20 > **(unsigned __int16 **)(pMCPbuff + 8))
          {
            *(_WORD *)(v18 + 2 * v16) = 0;
            unsigned __int16 v21 = *v17;
            do
            {
              if (*(_WORD *)(v18 + 2 * v21)) {
                break;
              }
              *uint64_t v17 = --v21;
            }
            while (v21);
            free(*(void **)(*(void *)(v7 + 40) + 8 * *(unsigned __int16 *)(a1 + 2)));
            if (**(_WORD **)(pMCPbuff + 24))
            {
              uint64_t v4 = 0;
              goto LABEL_65;
            }
            PDterm();
            --wPDMCPmtxCnt;
            SLUnlockMutex(&hPDMCPmtx);
            if (wPDMCPmtxCnt) {
              return 0;
            }
            SLTermMutex(&hPDMCPmtx);
            uint64_t v4 = 0;
            bInitPDMtx = 1;
            return v4;
          }
        }
        if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
        {
          uint64_t v4 = 8;
          *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
          __int16 v13 = 5110;
          goto LABEL_40;
        }
      }
      else if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
      {
        uint64_t v4 = 8;
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v13 = 5104;
        goto LABEL_40;
      }
    }
    else if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
    {
      uint64_t v4 = 8;
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v13 = 5103;
      goto LABEL_40;
    }
    goto LABEL_64;
  }
  if (a2 == 1)
  {
    int v8 = *(_WORD **)(pMCPbuff + 24);
    unsigned int v6 = (unsigned __int16)*v8;
    if (v6 < 5)
    {
LABEL_15:
      __int16 v9 = v6 + 1;
      *int v8 = v9;
      *(_WORD *)(a1 + 2) = v9;
      *(_WORD *)(*(void *)(v7 + 32) + 2 * (unsigned __int16)*v_Block_object_dispose(&STACK[0x510], 8) = 9090;
LABEL_16:
      if (!*(unsigned char *)a1) {
        *(_WORD *)a1 = 0;
      }
      size_t v10 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
      uint64_t v11 = *(unsigned __int16 *)(a1 + 2);
      *(void *)(*(void *)(pMCPbuff + 40) + 8 * v11) = v10;
      if (v10)
      {
        uint64_t v4 = 0;
        unint64_t v12 = *(_WORD **)(*(void *)(pMCPbuff + 40) + 8 * v11);
        *unint64_t v12 = v11;
        v12[1] = *(_WORD *)a1;
LABEL_65:
        --wPDMCPmtxCnt;
        SLUnlockMutex(&hPDMCPmtx);
        return v4;
      }
      *(_WORD *)(*(void *)(pMCPbuff + 32) + 2 * v11) = 0;
LABEL_37:
      if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
      {
        uint64_t v4 = 8;
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v13 = 1030;
        goto LABEL_40;
      }
LABEL_64:
      uint64_t v4 = 8;
      goto LABEL_65;
    }
    unsigned __int16 v14 = 0;
    while (v6 >= ++v14)
    {
      uint64_t v15 = *(void *)(pMCPbuff + 32);
      if (!*(_WORD *)(v15 + 2 * v14))
      {
        *(_WORD *)(a1 + 2) = v14;
        *(_WORD *)(v15 + 2 * v14) = 9090;
        unsigned int v6 = (unsigned __int16)*v8;
        break;
      }
    }
    if (v6 >= v14) {
      goto LABEL_16;
    }
    if (*(_WORD *)(a1 + 12) && *(int *)(a1 + 8) > 7) {
      goto LABEL_64;
    }
    uint64_t v4 = 8;
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v13 = 1012;
LABEL_40:
    *(_WORD *)(a1 + 12) = v13;
    goto LABEL_65;
  }
  if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
  {
    uint64_t v4 = 8;
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 8;
    *(_WORD *)(a1 + 12) = 1100;
    return v4;
  }
  return 8;
}

uint64_t PDcorrec(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(__int16 *)(a4 + 40) <= *(__int16 *)(a4 + 42))
  {
    char v25 = strcpy(*(char **)(*(void *)(a4 + 32) + 16), __src);
    unsigned __int16 v6 = strlen(v25);
    char v9 = v6;
    __int16 v24 = *(_WORD *)(a4 + 40);
    signed int v10 = *(__int16 *)(a4 + 2162);
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        *(void *)(*(void *)(a3 + 160) + v11) = *(void *)(a3 + 112) + v11;
        *(void *)(*(void *)(a3 + 152) + v11) = *(void *)(a3 + 112) + v11 + 4;
        v11 += 8;
      }
      while (8 * (unsigned __int16)v10 != v11);
    }
    *(_WORD *)(a4 + 2124) = 0;
    *(_DWORD *)(a4 + 2144) = 0x20000;
    if ((__int16)v6 > 5)
    {
      v7.i32[0] = 11;
      v8.i32[0] = (__int16)v6;
      int8x8_t v12 = vbsl_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_u16(v8, v7), 0), (int8x8_t)0x2000200040004, (int8x8_t)0x2000200030003);
      *(_WORD *)(a4 + 2142) = 3;
    }
    else
    {
      *(_WORD *)(a4 + 2142) = 2;
      int8x8_t v12 = (int8x8_t)0x1000200020002;
    }
    __int16 v13 = 0;
    *(int8x8_t *)(a4 + 2134) = v12;
    int v23 = (__int16)v6;
    if (*(_WORD *)(a3 + 104) && (__int16)v6 >= 1)
    {
      uint64_t v14 = 0;
      __int16 v13 = 0;
      uint64_t v15 = v6;
      do
      {
        LOWORD(v16) = 0;
        uint64_t v17 = (unsigned __int8 *)&v25[v14];
        do
        {
          if ((int)SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160)+ 8 * (__int16)(((__int16)v10 + (__int16)v16) >> 1)), v17, *(unsigned __int8 *)(*(void *)(a3 + 176)+ (__int16)(((__int16)v10 + (__int16)v16) >> 1))) >= 0)signed int v10 = ((__int16)v10 + (__int16)v16) >> 1; {
          else
          }
            unsigned int v16 = ((__int16)v10 + (__int16)v16) >> 1;
        }
        while ((__int16)v10 - (__int16)v16 > 1);
        LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = v10 - (*(unsigned __int16 *)(a4 + 2162) == (unsigned __int16)v10);
        do
        {
          uint64_t v19 = (__int16)v18;
          if (!SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)v18), v17, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)v18)))
          {
            if (v13 <= 999)
            {
              uint64_t v20 = a4 + v13;
              *(unsigned char *)(v20 + 2164) = v9 - v14;
              v13 += 2;
              *(unsigned char *)(v20 + 2165) = v19;
            }
            goto LABEL_23;
          }
          signed int v10 = *(__int16 *)(a4 + 2162);
          if ((int)v19 >= v10 || **(unsigned __int8 **)(*(void *)(a3 + 160) + 8 * v19) > *v17) {
            break;
          }
LABEL_23:
          signed int v18 = (__int16)(v19 + 1);
          signed int v10 = *(__int16 *)(a4 + 2162);
        }
        while (v18 < v10);
        ++v14;
      }
      while (v14 != v15);
    }
    uint64_t v21 = a4 + 2164;
    *(unsigned char *)(v21 + v13) = -1;
    *(unsigned char *)(v21 + (__int16)(v13 + 1)) = -1;
    PDdecode((unsigned __int8 *)v25, v23, a3, (unsigned __int16 *)a4);
    PDcorsrt(v25, v24, (__int16)(*(_WORD *)(a4 + 40) - 1), a3, (void *)a4);
  }
  return 0;
}

uint64_t PDcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v8 = a5[398];
  uint64_t v9 = a5[396];
  signed int v10 = *(char **)(a5[4] + 24);
  strcpy(v10, __src);
  int v53 = a2;
  if (a2 <= (int)a3)
  {
    uint64_t v54 = *(void *)(v8 + 104);
    uint64_t v11 = *(void *)(a4 + 56);
    LOWORD(v12) = a2;
    do
    {
      uint64_t v13 = a3;
      uint64_t v14 = (__int16)v12;
      uint64_t v15 = *(const char **)(v54 + 8 * (__int16)v12);
      int v16 = strlen(v10);
      int v17 = strlen(v15);
      memset(v56, 0, sizeof(v56));
      memset(v55, 0, sizeof(v55));
      if (v16 << 16 >= 1)
      {
        int v18 = 0;
        __int16 v19 = 0;
        do
        {
          uint64_t v20 = v10[v19];
          if (v20 != v10[v18 + 1])
          {
            if ((*(_DWORD *)(v11 + 4 * v20) & 0x40000000) != 0) {
              unsigned __int8 v21 = v20 + 32;
            }
            else {
              unsigned __int8 v21 = v10[v19];
            }
            ++*((unsigned char *)v56 + v21);
          }
          int v18 = ++v19;
        }
        while ((__int16)v16 > v19);
      }
      int v22 = v17 << 16;
      int v23 = (__int16)v17;
      if (v17 << 16 >= 1)
      {
        int v24 = 0;
        __int16 v25 = 0;
        do
        {
          uint64_t v26 = v15[v25];
          if (v26 != v15[v24 + 1])
          {
            if ((*(_DWORD *)(v11 + 4 * v26) & 0x40000000) != 0) {
              unsigned __int8 v27 = v26 + 32;
            }
            else {
              unsigned __int8 v27 = v15[v25];
            }
            ++*((unsigned char *)v55 + v27);
          }
          int v24 = ++v25;
        }
        while ((__int16)v17 > v25);
      }
      uint64_t v28 = 0;
      int v29 = 0;
      do
      {
        int v30 = *((unsigned __int8 *)v56 + v28) - *((unsigned __int8 *)v55 + v28);
        if (v30)
        {
          if (v30 < 0) {
            int v30 = *((unsigned __int8 *)v55 + v28) - *((unsigned __int8 *)v56 + v28);
          }
          if ((*(_DWORD *)(v11 + 4 * v28) & 0x10000000) != 0) {
            v29 += 2 * v30;
          }
          else {
            v29 += 3 * v30;
          }
        }
        ++v28;
      }
      while (v28 != 256);
      if (v16 << 16 < 1)
      {
        __int16 v33 = 0;
      }
      else
      {
        int v31 = 0;
        int v32 = 0;
        __int16 v33 = 0;
        do
        {
          if (v22 >= 1)
          {
            int v34 = 0;
            int v35 = 0;
            do
            {
              int v36 = 0;
              do
              {
                __int16 v37 = v36;
                uint64_t v38 = v31 + (uint64_t)(__int16)v36;
                uint64_t v39 = v34 + (uint64_t)(__int16)v36++;
              }
              while ((int)v39 < v23 && v10[v38] == v15[v39] && (int)v38 < (__int16)v16);
              if (v37 > v33) {
                __int16 v33 = v37;
              }
              int v34 = (__int16)++v35;
            }
            while (v23 > (__int16)v35);
          }
          int v31 = (__int16)++v32;
        }
        while ((__int16)v16 > (__int16)v32);
      }
      __int16 v42 = v16 - v23;
      if ((__int16)v16 - v23 < 0) {
        __int16 v42 = v23 - v16;
      }
      *(_WORD *)(v9 + 2 * v14) = 2 * v29 + 4 * v42 - v33 + 16 * (v10[(__int16)v16 - 1] != v15[v23 - 1]);
      int v12 = (__int16)(v14 + 1);
      a3 = v13;
    }
    while (v12 <= (int)v13);
  }
  if (v53 < (int)a3)
  {
    int v43 = a3 + v53;
    int v44 = v53;
    do
    {
      if (v43 - v44 > v53)
      {
        int v45 = v53;
        __int16 v46 = v53;
        do
        {
          int v47 = *(__int16 *)(v9 + 2 * v46);
          int v48 = v45 + 1;
          int v49 = *(__int16 *)(v9 + 2 * (v45 + 1));
          if (v47 > v49)
          {
            uint64_t v50 = *(void *)(v8 + 104);
            uint64_t v51 = *(void *)(v50 + 8 * v46);
            *(void *)(v50 + 8 * v46) = *(void *)(v50 + 8 * v48);
            *(void *)(*(void *)(v8 + 104) + 8 * v4_Block_object_dispose(&STACK[0x510], 8) = v51;
            *(_WORD *)(v9 + 2 * v46) = v49;
            *(_WORD *)(v9 + 2 * v4_Block_object_dispose(&STACK[0x510], 8) = v47;
          }
          int v45 = ++v46;
        }
        while (v43 - v44 > v46);
      }
      ++v44;
    }
    while (v44 != a3);
  }
  return 10;
}

uint64_t PDdb(uint64_t a1, int a2)
{
  if (!a1) {
    return 8;
  }
  uint64_t v3 = pMCPbuff;
  if (!pMCPbuff
    || (uint64_t v4 = *(unsigned __int16 *)(a1 + 2064), (v5 = *(unsigned __int16 **)(*(void *)(pMCPbuff + 40) + 8 * v4)) == 0)
    || *v5 != v4
    || *(_WORD *)(*(void *)(pMCPbuff + 32) + 2 * v4) != 9090)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 5104;
      goto LABEL_16;
    }
    return 8;
  }
  if (*(_WORD *)(a1 + 768) == 1 && (*(_DWORD *)(a1 + 772) & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 1012;
      goto LABEL_16;
    }
    return 8;
  }
  if ((a2 - 3) >= 4)
  {
    if ((a2 - 1) > 1)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v9 = 1100;
        goto LABEL_16;
      }
      return 8;
    }
    signed int v10 = *(_WORD **)(pMCPbuff + 8);
    unsigned int v11 = (unsigned __int16)*v10;
    if (v11 < 0x19)
    {
      __int16 v15 = v11 + 1;
      *signed int v10 = v15;
      *(_WORD *)(a1 + 2074) = v15;
      *(_WORD *)(*(void *)(v3 + 16) + 2 * (unsigned __int16)*v10) = 9090;
    }
    else
    {
      unsigned __int16 v12 = 0;
      while (v11 >= ++v12)
      {
        uint64_t v13 = *(void *)(pMCPbuff + 16);
        if (!*(_WORD *)(v13 + 2 * v12))
        {
          *(_WORD *)(a1 + 2074) = v12;
          *(_WORD *)(v13 + 2 * v12) = 9090;
          unsigned int v11 = (unsigned __int16)*v10;
          break;
        }
      }
      if (v11 < v12)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          uint64_t result = 8;
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          __int16 v9 = 5108;
          goto LABEL_16;
        }
        return 8;
      }
    }
    if (PDdballoc(*(unsigned __int16 *)(a1 + 2074), *(_WORD *)(a1 + 2064)) == 8) {
      goto LABEL_45;
    }
    PDupibuf(a1);
    int v16 = *(unsigned __int8 *)(a1 + 784);
    if (v16 == 1)
    {
      if (PDfiletype(a1) == 8)
      {
LABEL_61:
        LODWORD(v22) = *(unsigned __int16 *)(a1 + 2074);
LABEL_79:
        PDdbfree(0, v22);
        return 8;
      }
      LOBYTE(v16) = *(unsigned char *)(a1 + 784);
    }
    uint64_t v17 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
    *(unsigned char *)uint64_t v17 = v16;
    *(unsigned char *)(v17 + 782) = *(unsigned char *)(a1 + 785);
    *(void *)(v17 + 76_Block_object_dispose(&STACK[0x510], 8) = *(void *)(a1 + 776);
    *(unsigned char *)(v17 + 781) = a2 == 1;
    if (*(_WORD *)(a1 + 768) == 1)
    {
      int v18 = *(_DWORD *)(a1 + 772);
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
      int v18 = -2;
    }
    *(unsigned char *)(v17 + 780) = v19;
    *(_DWORD *)(v17 + 776) = v18;
    int v16 = (char)v16;
    if (((char)v16 - 2) >= 3)
    {
      if (v16 != 5 && v16 != 7)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          uint64_t result = 8;
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          __int16 v9 = 1013;
          goto LABEL_16;
        }
        return 8;
      }
      int v23 = malloc_type_calloc(1uLL, 0x78uLL, 0x10300405E0B4679uLL);
      uint64_t v24 = *(void *)pMCPbuff;
      uint64_t v25 = *(unsigned __int16 *)(a1 + 2074);
      *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v25) + 2176) = v23;
      if (!v23)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        goto LABEL_132;
      }
      uint64_t v26 = *(void *)(v24 + 8 * v25);
      *(unsigned char *)(v26 + 211_Block_object_dispose(&STACK[0x510], 8) = 0;
      if (PDSDinit(v26, *(__int16 *)(a1 + 768), *(_DWORD *)(a1 + 772)) == 8) {
        goto LABEL_127;
      }
      *(unsigned char *)(a1 + 207_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                       + 2069);
      if (*(unsigned char *)(a1 + 784) != 7 && PDsdneg(a1) == 8)
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
          goto LABEL_131;
        }
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v27 = 1030;
        goto LABEL_130;
      }
    }
    else
    {
      uint64_t v20 = malloc_type_calloc(1uLL, 0x150uLL, 0x10300400D6F4355uLL);
      uint64_t v21 = *(void *)pMCPbuff;
      uint64_t v22 = *(unsigned __int16 *)(a1 + 2074);
      *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v22) + 216_Block_object_dispose(&STACK[0x510], 8) = v20;
      if (!v20)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        goto LABEL_79;
      }
      if (PDRDinit(*(void *)(v21 + 8 * v22)) == 8)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168));
        goto LABEL_61;
      }
      if (*(unsigned char *)(a1 + 784) == 2 && *(unsigned char *)(a1 + 785) != 6)
      {
        uint64_t v29 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
        if (SLOpen(v29 + 1, v29 + 512, (int *)(*(void *)(v29 + 2168) + 328), 0x20Au) == 8) {
          goto LABEL_127;
        }
        SLClose(*(_DWORD *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                      + 2168)
                          + 328));
      }
      int v30 = (void *)pMCPbuff;
      uint64_t v31 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
      *(_WORD *)(v31 + 2112) = 0;
      *(unsigned char *)(*(void *)(v31 + 2168) + 72) = 0;
      uint64_t v32 = *(void *)(*v30 + 8 * *(unsigned __int16 *)(a1 + 2074));
      if (SLtmpnam((unsigned char *)(v32 + 1550), (char *)(*(void *)(v32 + 2168) + 72)) == 8)
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
          goto LABEL_131;
        }
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v27 = 1019;
LABEL_130:
        *(_WORD *)(a1 + 2092) = v27;
LABEL_131:
        LODWORD(v25) = *(unsigned __int16 *)(a1 + 2074);
LABEL_132:
        PDfreedid(v25);
        return 8;
      }
      uint64_t v34 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
      uint64_t v35 = *(void *)(v34 + 2168);
      *(_DWORD *)(v35 + 32_Block_object_dispose(&STACK[0x510], 8) = -2;
      if (SLOpen(v34 + 1550, v35 + 72, (int *)(v35 + 328), 0x20Au) == 8
        || ((SLClose(*(_DWORD *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                           + 2168)
                               + 328)),
             uint64_t v36 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)),
             uint64_t v37 = v36 + 1550,
             uint64_t v38 = *(void *)(v36 + 2168),
             !*(_WORD *)(a1 + 768))
          ? (unsigned int v39 = 2)
          : a2 != 1
          ? (unsigned int v39 = 8194)
          : (unsigned int v39 = 4096),
            SLOpen(v37, v38 + 72, (int *)(v38 + 328), v39) == 8))
      {
LABEL_127:
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
          goto LABEL_131;
        }
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v27 = 1012;
        goto LABEL_130;
      }
      if (*(unsigned char *)(a1 + 784) != 2)
      {
        if (PDreadas(a1) == 8 || *(_DWORD *)(a1 + 2088) == 8) {
          goto LABEL_131;
        }
        *(unsigned char *)(a1 + 207_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                         + 2069);
      }
    }
    uint64_t result = 0;
    *(_WORD *)(a1 + 2080) = *(_WORD *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2094);
    return result;
  }
  uint64_t v7 = *(unsigned __int16 *)(a1 + 2074);
  if (v7 > **(unsigned __int16 **)(pMCPbuff + 8))
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 5103;
LABEL_16:
      *(_WORD *)(a1 + 2092) = v9;
      return result;
    }
    return 8;
  }
  uint64_t v14 = *(void *)(*(void *)pMCPbuff + 8 * v7);
  if (v7 != *(unsigned __int16 *)(v14 + 2162) || *(_WORD *)(*(void *)(pMCPbuff + 16) + 2 * v7) != 9090)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 5105;
      goto LABEL_16;
    }
    return 8;
  }
  if (*(unsigned char *)(v14 + 2062) == 1)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 5155;
      goto LABEL_16;
    }
    return 8;
  }
  int v28 = *(unsigned __int8 *)(v14 + 782);
  if ((v28 | 2) == 7)
  {
    if (!*(unsigned char *)(v14 + 780)) {
      SLClose(*(_DWORD *)(v14 + 776));
    }
    if ((a2 - 5) < 2) {
      return 0;
    }
    goto LABEL_116;
  }
  if (a2 == 4 || v28 == 6) {
    **(unsigned char **)(v14 + 216_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  *(unsigned char *)(v14 + 2069) = *(unsigned char *)(a1 + 2078);
  if (a2 == 3)
  {
    uint64_t v33 = *(void *)(v14 + 2168);
    if (*(unsigned char *)v33)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v9 = 5110;
        goto LABEL_16;
      }
      return 8;
    }
LABEL_114:
    unsigned int v40 = *(_DWORD *)(v33 + 328);
    if ((v40 & 0x80000000) == 0)
    {
      SLClose(v40);
      SLremove();
    }
LABEL_116:
    PDfreedid(*(unsigned __int16 *)(a1 + 2074));
    return 0;
  }
  if ((a2 - 5) >= 2)
  {
    uint64_t v33 = *(void *)(v14 + 2168);
    goto LABEL_114;
  }
  if (*(unsigned char *)(v14 + 781))
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v9 = 5117;
      goto LABEL_16;
    }
    return 8;
  }
  if (a2 == 5)
  {
    if (PDsavsort(v7, 1) == 8) {
      goto LABEL_45;
    }
    PDsort(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)));
  }
  int v41 = PDwriteas(a1);
  uint64_t result = 8 * (v41 == 8);
  if (a2 == 5 && v41 != 8)
  {
    int v42 = PDsavsort(*(unsigned __int16 *)(a1 + 2074), 0);
    uint64_t result = 0;
    if (v42 == 8)
    {
LABEL_45:
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v9 = 1030;
        goto LABEL_16;
      }
      return 8;
    }
  }
  return result;
}

uint64_t PDdballoc(unsigned int a1, __int16 a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x898uLL, 0x1030040D98B27C7uLL);
  *(void *)(*(void *)pMCPbuff + 8 * a1) = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)pMCPbuff + 8 * a1);
    *(_WORD *)(v5 + 2162) = a1;
    *(_WORD *)(v5 + 2160) = a2;
    unsigned __int16 v6 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2120) = v6;
    if (v6)
    {
      uint64_t v7 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
      *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2136) = v7;
      if (v7)
      {
        uint64_t v8 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
        *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2144) = v8;
        if (v8)
        {
          __int16 v9 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
          *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2152) = v9;
          if (v9)
          {
            signed int v10 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
            *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 212_Block_object_dispose(&STACK[0x510], 8) = v10;
            if (v10)
            {
              unsigned int v11 = malloc_type_calloc(1uLL, 0x4B0uLL, 0x10900403E69C754uLL);
              *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2184) = v11;
              if (v11)
              {
                unsigned __int16 v12 = malloc_type_calloc(1uLL, 0xDD0uLL, 0x10B0040A7C70F12uLL);
                *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) = v12;
                if (v12)
                {
                  uint64_t v13 = malloc_type_malloc(0x50uLL, 0x1000040BDFB0063uLL);
                  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 3512) = v13;
                  if (v13)
                  {
                    uint64_t v14 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 3496) = v14;
                    if (v14)
                    {
                      __int16 v15 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                      *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 3520) = v15;
                      if (v15)
                      {
                        int v16 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                        *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 352_Block_object_dispose(&STACK[0x510], 8) = v16;
                        if (v16)
                        {
                          uint64_t v17 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                          *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 348_Block_object_dispose(&STACK[0x510], 8) = v17;
                          if (v17)
                          {
                            int v18 = malloc_type_calloc(1uLL, 0x60uLL, 0x1010040370E3D57uLL);
                            *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 104) = v18;
                            if (v18)
                            {
                              char v19 = malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
                              *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2096) = v19;
                              if (v19)
                              {
                                uint64_t v20 = malloc_type_calloc(0xF0uLL, 1uLL, 0x100004077774924uLL);
                                *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 4_Block_object_dispose(&STACK[0x510], 8) = v20;
                                if (v20)
                                {
                                  uint64_t v21 = malloc_type_calloc(0x14uLL, 2uLL, 0x1000040BDFB0063uLL);
                                  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 64) = v21;
                                  if (v21)
                                  {
                                    uint64_t v22 = malloc_type_calloc(0x14uLL, 8uLL, 0x100004000313F17uLL);
                                    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192) + 80) = v22;
                                    if (v22)
                                    {
                                      int v23 = malloc_type_calloc(0x14uLL, 1uLL, 0x100004077774924uLL);
                                      *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192)
                                                + 72) = v23;
                                      if (v23)
                                      {
                                        uint64_t v24 = malloc_type_calloc(0x28uLL, 2uLL, 0x1000040BDFB0063uLL);
                                        uint64_t v25 = *(void *)pMCPbuff;
                                        *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2192)
                                                  + 316_Block_object_dispose(&STACK[0x510], 8) = v24;
                                        if (v24)
                                        {
                                          if (PDSFmemory((void **)(*(void *)(*(void *)(v25 + 8 * a1) + 2192)+ 32), 65, 1))
                                          {
                                            uint64_t v26 = malloc_type_calloc(0xBB8uLL, 1uLL, 0x100004077774924uLL);
                                            *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2184)
                                                      + 112) = v26;
                                            if (v26)
                                            {
                                              __int16 v27 = malloc_type_calloc(0x113uLL, 1uLL, 0x100004077774924uLL);
                                              uint64_t v28 = *(void *)pMCPbuff;
                                              *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1)
                                                                    + 2184)
                                                        + 12_Block_object_dispose(&STACK[0x510], 8) = v27;
                                              if (v27)
                                              {
                                                uint64_t v29 = *(void *)(v28 + 8 * a1);
                                                int v30 = *(_WORD **)(v29 + 2184);
                                                v30[35] = 20;
                                                v30[52] = 3000;
                                                v30[60] = 275;
                                                *(_WORD *)(*(void *)(v29 + 2192) + 2162) = 375;
                                                uint64_t v31 = malloc_type_calloc(0xBB8uLL, 1uLL, 0x100004077774924uLL);
                                                uint64_t v32 = *(void *)pMCPbuff;
                                                *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1)
                                                                      + 2184)
                                                          + 152) = v31;
                                                if (v31)
                                                {
                                                  uint64_t v33 = malloc_type_calloc(8* *(__int16 *)(*(void *)(*(void *)(v32 + 8 * a1) + 2192)+ 2162), 1uLL, 0x100004077774924uLL);
                                                  uint64_t v34 = *(void *)pMCPbuff;
                                                  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1)
                                                                        + 2184)
                                                            + 160) = v33;
                                                  if (v33)
                                                  {
                                                    uint64_t v35 = malloc_type_calloc(1uLL, 2* *(__int16 *)(*(void *)(*(void *)(v34 + 8 * a1) + 2192)+ 2162), 0x1000040BDFB0063uLL);
                                                    uint64_t v36 = *(void *)pMCPbuff;
                                                    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1)
                                                                          + 2184)
                                                              + 16_Block_object_dispose(&STACK[0x510], 8) = v35;
                                                    if (v35)
                                                    {
                                                      uint64_t v37 = malloc_type_calloc(1uLL, 2* *(__int16 *)(*(void *)(*(void *)(v36 + 8 * a1)+ 2192)+ 2162), 0x1000040BDFB0063uLL);
                                                      *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1)
                                                                            + 2184)
                                                                + 176) = v37;
                                                      if (v37) {
                                                        return 0;
                                                      }
                                                      int v39 = 2;
                                                    }
                                                    else
                                                    {
                                                      int v39 = 3;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    int v39 = 4;
                                                  }
                                                }
                                                else
                                                {
                                                  int v39 = 5;
                                                }
                                              }
                                              else
                                              {
                                                int v39 = 6;
                                              }
                                            }
                                            else
                                            {
                                              int v39 = 7;
                                            }
                                          }
                                          else
                                          {
                                            int v39 = 8;
                                          }
                                        }
                                        else
                                        {
                                          int v39 = 9;
                                        }
                                      }
                                      else
                                      {
                                        int v39 = 10;
                                      }
                                    }
                                    else
                                    {
                                      int v39 = 11;
                                    }
                                  }
                                  else
                                  {
                                    int v39 = 12;
                                  }
                                }
                                else
                                {
                                  int v39 = 20;
                                }
                              }
                              else
                              {
                                int v39 = 18;
                              }
                            }
                            else
                            {
                              int v39 = 19;
                            }
                          }
                          else
                          {
                            int v39 = 21;
                          }
                        }
                        else
                        {
                          int v39 = 22;
                        }
                      }
                      else
                      {
                        int v39 = 23;
                      }
                    }
                    else
                    {
                      int v39 = 24;
                    }
                  }
                  else
                  {
                    int v39 = 25;
                  }
                }
                else
                {
                  int v39 = 26;
                }
              }
              else
              {
                int v39 = 30;
              }
            }
            else
            {
              int v39 = 31;
            }
          }
          else
          {
            int v39 = 32;
          }
        }
        else
        {
          int v39 = 33;
        }
      }
      else
      {
        int v39 = 34;
      }
    }
    else
    {
      int v39 = 62;
    }
    PDdbfree(v39, a1);
  }
  return 8;
}

uint64_t PDupibuf(uint64_t a1)
{
  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  uint64_t result = __strcpy_chk();
  int v3 = *(unsigned __int8 *)(a1 + 784);
  if ((v3 | 2) == 7)
  {
    *(unsigned char *)(a1 + 785) = v3;
    char v4 = v3;
  }
  else
  {
    char v4 = *(unsigned char *)(a1 + 785);
  }
  uint64_t v5 = *(unsigned __int16 *)(a1 + 2074);
  uint64_t v6 = *(void *)(*(void *)pMCPbuff + 8 * v5);
  *(unsigned char *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 782) = v4;
  *(_WORD *)(v6 + 2064) = *(_WORD *)(a1 + 2076);
  char v7 = *(unsigned char *)(a1 + 2078);
  uint64_t v8 = 1 << (v7 - 1);
  if (!v7) {
    LODWORD(v_Block_object_dispose(&STACK[0x510], 8) = -1;
  }
  *(_DWORD *)(v6 + 2072) = v8;
  *(unsigned char *)(v6 + 2069) = v7;
  *(unsigned char *)(v6 + 206_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(a1 + 2079);
  *(_WORD *)(v6 + 2160) = *(_WORD *)(a1 + 2064);
  *(_WORD *)(v6 + 2162) = v5;
  *(_WORD *)(v6 + 2061) = 0;
  *(_WORD *)(v6 + 2094) = 0;
  *(unsigned char *)(v6 + 2092) = *(unsigned char *)(a1 + 2072);
  *(_WORD *)(v6 + 2090) = *(_WORD *)(a1 + 2070);
  HIDWORD(v9) = *(_DWORD *)(a1 + 2066);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(v6 + 2086) = v9 >> 16;
  return result;
}

void PDdbfree(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 0:
    case 1:
      uint64_t v2 = a2;
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a2) + 2184) + 176));
      goto LABEL_4;
    case 2:
      uint64_t v2 = a2;
LABEL_4:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184) + 168));
      goto LABEL_6;
    case 3:
      uint64_t v2 = a2;
LABEL_6:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184) + 160));
      goto LABEL_8;
    case 4:
      uint64_t v2 = a2;
LABEL_8:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184) + 152));
      goto LABEL_9;
    case 5:
      uint64_t v2 = a2;
LABEL_9:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184) + 128));
      goto LABEL_10;
    case 6:
      uint64_t v2 = a2;
LABEL_10:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184) + 112));
      goto LABEL_11;
    case 7:
      uint64_t v2 = a2;
LABEL_11:
      PDSFmemory((void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 32), 65, 0);
      goto LABEL_12;
    case 8:
      uint64_t v2 = a2;
LABEL_12:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3168));
      goto LABEL_13;
    case 9:
      uint64_t v2 = a2;
LABEL_13:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 72));
      goto LABEL_14;
    case 10:
      uint64_t v2 = a2;
LABEL_14:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 80));
      goto LABEL_15;
    case 11:
      uint64_t v2 = a2;
LABEL_15:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 64));
      goto LABEL_16;
    case 12:
      uint64_t v2 = a2;
LABEL_16:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 48));
      goto LABEL_17;
    case 18:
      uint64_t v2 = a2;
LABEL_17:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2096));
      goto LABEL_18;
    case 19:
      uint64_t v2 = a2;
LABEL_18:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 104));
      goto LABEL_19;
    case 20:
      uint64_t v2 = a2;
LABEL_19:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3488));
      goto LABEL_20;
    case 21:
      uint64_t v2 = a2;
LABEL_20:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3528));
      goto LABEL_21;
    case 22:
      uint64_t v2 = a2;
LABEL_21:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3520));
      goto LABEL_22;
    case 23:
      uint64_t v2 = a2;
LABEL_22:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3496));
      goto LABEL_23;
    case 24:
      uint64_t v2 = a2;
LABEL_23:
      free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192) + 3512));
      goto LABEL_24;
    case 25:
      uint64_t v2 = a2;
LABEL_24:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2192));
      goto LABEL_25;
    case 26:
      uint64_t v2 = a2;
LABEL_25:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2184));
      goto LABEL_26;
    case 30:
      uint64_t v2 = a2;
LABEL_26:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2128));
      goto LABEL_27;
    case 31:
      uint64_t v2 = a2;
LABEL_27:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2152));
      goto LABEL_28;
    case 32:
      uint64_t v2 = a2;
LABEL_28:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2144));
      goto LABEL_29;
    case 33:
      uint64_t v2 = a2;
LABEL_29:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2136));
      goto LABEL_30;
    case 34:
      uint64_t v2 = a2;
LABEL_30:
      free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2120));
      goto LABEL_31;
    case 62:
      uint64_t v2 = a2;
LABEL_31:
      free(*(void **)(*(void *)pMCPbuff + 8 * v2));
      break;
    default:
      uint64_t v2 = a2;
      break;
  }
  char v4 = *(unsigned __int16 **)(pMCPbuff + 8);
  uint64_t v3 = *(void *)(pMCPbuff + 16);
  *(_WORD *)(v3 + 2 * v2) = 0;
  unsigned __int16 v5 = *v4;
  do
  {
    if (*(_WORD *)(v3 + 2 * v5)) {
      break;
    }
    *char v4 = --v5;
  }
  while (v5);
}

void PDfreedid(unsigned int a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * a1);
  if ((*v2 | 2) == 7)
  {
    free(*(void **)(*((void *)v2 + 272) + 48));
    uint64_t v3 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2176) + 4_Block_object_dispose(&STACK[0x510], 8) = 0;
    free(*(void **)(*(void *)(*(void *)(v3 + 8 * v1) + 2176) + 88));
    uint64_t v4 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2176) + 8_Block_object_dispose(&STACK[0x510], 8) = 0;
    free(*(void **)(*(void *)(*(void *)(v4 + 8 * v1) + 2176) + 96));
    uint64_t v5 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(v5 + 8 * v1) + 2176) + 96) = 0;
    uint64_t v6 = *(void *)(v5 + 8 * v1);
    if (*(unsigned char *)v6 != 7 && *(_WORD *)(v6 + 2094))
    {
      free(*(void **)(*(void *)(v6 + 2176) + 104));
      uint64_t v6 = *(void *)(*(void *)pMCPbuff + 8 * v1);
    }
    char v7 = *(void **)(v6 + 2176);
    uint64_t v8 = (void **)v7[9];
    if (v8)
    {
      if (*v8)
      {
        free(*v8);
        uint64_t v8 = *(void ***)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2176) + 72);
      }
      free(v8);
      uint64_t v9 = *(void *)pMCPbuff;
      *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2176) + 72) = 0;
      char v7 = *(void **)(*(void *)(v9 + 8 * v1) + 2176);
    }
    free(v7);
    uint64_t v10 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2176) = 0;
    free(*(void **)(*(void *)(*(void *)(v10 + 8 * v1) + 2184) + 1184));
    free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 40));
    uint64_t v11 = *(void *)pMCPbuff;
  }
  else
  {
    free(*(void **)(*((void *)v2 + 271) + 40));
    uint64_t v12 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2168) + 40) = 0;
    free(*(void **)(*(void *)(*(void *)(v12 + 8 * v1) + 2168) + 32));
    uint64_t v13 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2168) + 32) = 0;
    free(*(void **)(*(void *)(*(void *)(v13 + 8 * v1) + 2168) + 48));
    uint64_t v14 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2168) + 4_Block_object_dispose(&STACK[0x510], 8) = 0;
    free(*(void **)(*(void *)(v14 + 8 * v1) + 2168));
    uint64_t v11 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 216_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  free(*(void **)(*(void *)(*(void *)(v11 + 8 * v1) + 2184) + 112));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 128));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 3168));
  uint64_t v15 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 316_Block_object_dispose(&STACK[0x510], 8) = 0;
  PDSFmemory((void **)(*(void *)(*(void *)(v15 + 8 * v1) + 2192) + 32), 0, 0);
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 152));
  uint64_t v16 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 152) = 0;
  free(*(void **)(*(void *)(*(void *)(v16 + 8 * v1) + 2184) + 160));
  uint64_t v17 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 160) = 0;
  free(*(void **)(*(void *)(*(void *)(v17 + 8 * v1) + 2184) + 168));
  uint64_t v18 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 16_Block_object_dispose(&STACK[0x510], 8) = 0;
  free(*(void **)(*(void *)(*(void *)(v18 + 8 * v1) + 2184) + 176));
  uint64_t v19 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) + 176) = 0;
  free(*(void **)(*(void *)(*(void *)(v19 + 8 * v1) + 2192) + 3488));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 3528));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 3520));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 3496));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 3512));
  free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2096));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 104));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 48));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 64));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 80));
  free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) + 72));
  free(*(void **)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184));
  uint64_t v20 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2184) = 0;
  free(*(void **)(*(void *)(v20 + 8 * v1) + 2192));
  uint64_t v21 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2192) = 0;
  free(*(void **)(*(void *)(v21 + 8 * v1) + 2128));
  uint64_t v22 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 212_Block_object_dispose(&STACK[0x510], 8) = 0;
  free(*(void **)(*(void *)(v22 + 8 * v1) + 2152));
  uint64_t v23 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2152) = 0;
  free(*(void **)(*(void *)(v23 + 8 * v1) + 2144));
  uint64_t v24 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2144) = 0;
  free(*(void **)(*(void *)(v24 + 8 * v1) + 2136));
  uint64_t v25 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2136) = 0;
  free(*(void **)(*(void *)(v25 + 8 * v1) + 2120));
  uint64_t v26 = *(void *)pMCPbuff;
  *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v1) + 2120) = 0;
  free(*(void **)(v26 + 8 * v1));
  *(void *)(*(void *)pMCPbuff + 8 * v1) = 0;
  uint64_t v28 = *(unsigned __int16 **)(pMCPbuff + 8);
  uint64_t v27 = *(void *)(pMCPbuff + 16);
  *(_WORD *)(v27 + 2 * v1) = 0;
  unsigned __int16 v29 = *v28;
  do
  {
    if (*(_WORD *)(v27 + 2 * v29)) {
      break;
    }
    *uint64_t v28 = --v29;
  }
  while (v29);
}

uint64_t PDsdneg(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
  if (!*(_WORD *)(v1 + 2094)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 2176);
  uint64_t v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  if (!v4) {
    return 8;
  }
  uint64_t v5 = v4;
  uint64_t v6 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  *((void *)v5 + 1) = v6;
  if (!v6)
  {
LABEL_12:
    free(v5);
    return 8;
  }
  v5[24] = 20;
  char v7 = malloc_type_calloc(0x14uLL, 8uLL, 0x10040436913F5uLL);
  *((void *)v5 + 13) = v7;
  if (!v7)
  {
    free(*((void **)v5 + 1));
    goto LABEL_12;
  }
  for (uint64_t i = 0; i != 160; i += 8)
  {
    uint64_t v9 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(void *)(*((void *)v5 + 13) + i) = v9;
    if (!v9) {
      goto LABEL_9;
    }
  }
  v5[24] = 20;
  *uint64_t v5 = *(_WORD *)(a1 + 2074);
  v5[1] = *(_WORD *)(a1 + 2064);
  *((unsigned char *)v5 + 42) = 0;
  *((_DWORD *)v5 + 9) = 0xFFFF;
  if (PDword(v5, 8u, 1) == 8)
  {
LABEL_9:
    PDFullCleanSDNeg((void **)v5);
    return 8;
  }
  int v17 = 0;
  uint64_t v10 = 8;
  if (PDword(v5, 8u, 5) != 8)
  {
    while (1)
    {
      unsigned __int16 v12 = v5[25];
      if (!v12) {
        break;
      }
      for (unint64_t j = 0; j < v12; ++j)
      {
        uint64_t v14 = *(void *)(*((void *)v5 + 13) + 8 * j);
        if (*(unsigned char *)(v14 + 70))
        {
          __int16 v15 = strlen(*(const char **)(*((void *)v5 + 13) + 8 * j));
          SLfun(v14, 0, (__int16)(v15 - 1), (unsigned __int16 *)&v17 + 1, &v17);
          unint64_t v16 = (*(unsigned __int16 *)(v3 + 112) - 1) & (unint64_t)(unsigned __int16)v17;
          LOWORD(v17) = (*(_WORD *)(v3 + 112) - 1) & v17;
          *(unsigned char *)(*(void *)(v3 + 104) + (v16 >> 3)) |= 1 << (v16 & 7);
          unsigned __int16 v12 = v5[25];
        }
      }
      uint64_t v10 = 8;
      if (PDword(v5, 8u, 5) == 8) {
        goto LABEL_24;
      }
    }
    uint64_t v10 = 0;
  }
LABEL_24:
  PDword(v5, 8u, 2);
  PDFullCleanSDNeg((void **)v5);
  return v10;
}

void PDFullCleanSDNeg(void **a1)
{
  for (uint64_t i = 0; i != 160; i += 8)
  {
    uint64_t v3 = *(void **)((char *)a1[13] + i);
    if (v3) {
      free(v3);
    }
  }
  free(a1[1]);
  free(a1[13]);
  free(a1);
}

uint64_t PDdecode(unsigned __int8 *a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a4 + 398);
  uint64_t v9 = a4[1596];
  uint64_t v56 = 0;
  uint64_t v10 = *(void *)(*(void *)pMCPbuff + 8 * v9);
  uint64_t v11 = *(char **)(v10 + 2144);
  int v54 = *a4;
  uint64_t v12 = SLLngToA(*(unsigned __int8 *)(v10 + 2069));
  uint64_t v55 = a3;
  *(void *)(a3 + 56) = v12;
  uint64_t v53 = v9;
  uint64_t v13 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v9) + 2168);
  if (!*(_WORD *)(v13 + 4)) {
    return 0;
  }
  uint64_t v14 = v12;
  int v47 = 0;
  int v15 = 0;
  int v17 = *(unsigned __int16 **)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 40);
  uint64_t v18 = &v17[*(unsigned __int16 *)(v13 + 4)];
  uint64_t v46 = a2 - 1;
  int v19 = v54;
  int v51 = a2;
  uint64_t v52 = v16;
  int v48 = v18;
  do
  {
    unint64_t v20 = *v17;
    if (v20 > 0xFFFD) {
      goto LABEL_45;
    }
    int v21 = *(unsigned __int8 *)(v16 + v20 + 2);
    if (*a4 == 5 && (v21 < (__int16)a4[1729] || v21 > (__int16)a4[1730])) {
      goto LABEL_45;
    }
    if (v19 == 100)
    {
      int v22 = v21 - a2;
      if (v21 - a2 < 0) {
        int v22 = a2 - v21;
      }
      if (v22 > (__int16)a4[1067]) {
        goto LABEL_45;
      }
    }
    else if (v19 == 6 && (v21 > a2 || v21 < (__int16)a4[1728]))
    {
      goto LABEL_45;
    }
    __int16 v49 = *(unsigned __int8 *)(v16 + v20 + 1);
    __int16 v50 = *(unsigned __int8 *)(v16 + v20);
    __strncpy_chk();
    v57[v21] = 0;
    *(unsigned char *)(v55 + 55) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * v53) + 2069);
    unsigned int v23 = PDhypstrip(v57, (void *)(*(void *)(*(void *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 88), *(unsigned __int8 *)(v8 + 16));
    uint64_t v24 = v23 - 1;
    *(unsigned char *)(*(void *)(*(void *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 71) = SLcap((uint64_t)v57, 0, v24, (void *)(*(void *)(*(void *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 80), v14);
    if (v23)
    {
      __int16 v25 = 0;
      do
      {
        uint64_t v26 = v57[v25];
        if ((*(_DWORD *)(v14 + 4 * v26) & 0x40000000) != 0) {
          LOBYTE(v26) = v26 + 32;
        }
        v11[v25++] = v26;
      }
      while ((int)v23 > v25);
    }
    v11[v23] = 0;
    uint64_t v27 = *(void *)(*(void *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50));
    unsigned int v28 = *(unsigned __int8 *)(v27 + 71);
    uint64_t v56 = *(void *)(v27 + 80);
    int v19 = v54;
    switch(v54)
    {
      case 5:
        int v29 = SLwldcmp((uint64_t)v11, v23, a1, v51);
LABEL_28:
        int v15 = v29;
        break;
      case 6:
        int v29 = SFanachk((uint64_t)v11, v23, (uint64_t)a4 + 3199);
        goto LABEL_28;
      case 100:
        if (*v11 != *a1 && v11[v24] != a1[v46])
        {
          a2 = v51;
          uint64_t v16 = v52;
          goto LABEL_37;
        }
        int v29 = PDSFcorbru((void *)v55, (uint64_t)a4, (uint64_t)v11, v23, (uint64_t)a1, v51, (__int16)a4[1068], (__int16)a4[1069], *((_DWORD *)a4 + 535), a4[1067]);
        goto LABEL_28;
    }
    uint64_t v16 = v52;
    if (!v15)
    {
      a2 = v51;
      int v19 = v54;
LABEL_37:
      uint64_t v18 = v48;
      goto LABEL_45;
    }
    if (!*(unsigned char *)(v55 + 55))
    {
      unsigned int v30 = 0;
      int v31 = 1;
      while ((*(_DWORD *)(v8 + 36) & v31) == 0)
      {
        v31 *= 2;
        if (v30++ >= 0x1F) {
          goto LABEL_39;
        }
      }
      *(unsigned char *)(v55 + 55) = v30 + 1;
    }
LABEL_39:
    PDSFdc((uint64_t)v11, v23, v55, (uint64_t)a4);
    int v15 = PDSFchkwrd(v55, (uint64_t)a4, v11, v23, v28, (uint64_t)&v56);
    uint64_t v16 = v52;
    *(unsigned char *)(v55 + 55) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * v53) + 2069);
    a2 = v51;
    int v19 = v54;
    uint64_t v18 = v48;
    if (v15 == 10)
    {
      __strcpy_chk();
      __strcpy_chk();
      uint64_t v33 = (void *)pMCPbuff;
      uint64_t v34 = *(void *)(*(void *)pMCPbuff + 8 * v53);
      uint64_t v35 = *(void *)(*(void *)(v34 + 2168) + 48);
      char v36 = *(unsigned char *)(v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8)) + 19);
      uint64_t v37 = *(void *)(*(void *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50));
      *(unsigned char *)(v37 + 70) = v36 & 1;
      if ((v36 & 2) != 0)
      {
        uint64_t v39 = v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8));
        *(_DWORD *)(v37 + 96) = *(_DWORD *)(v39 + 12);
        __int16 v38 = *(_WORD *)(v39 + 16);
      }
      else
      {
        __int16 v38 = 0;
        *(_DWORD *)(v37 + 96) = 0;
      }
      *(_WORD *)(v37 + 100) = v38;
      *(_WORD *)(v37 + 66) = v53;
      *(unsigned char *)(v37 + 72) = *(unsigned char *)(v34 + 2069);
      unsigned int v40 = (uint64_t *)(v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8)));
      uint64_t v41 = *v40;
      *(_DWORD *)(v37 + 110) = *((_DWORD *)v40 + 2);
      *(void *)(v37 + 102) = v41;
      int v42 = *(_WORD **)(*v33 + 8 * v53);
      uint64_t v43 = *(unsigned __int16 *)(v8 + 50);
      int v44 = *(_WORD **)(*(void *)(v8 + 104) + 8 * v43);
      v44[34] = v42[1042];
      v44[37] = v42[1043];
      v44[38] = v42[1044];
      *(_WORD *)(v8 + 50) = v43 + 1;
      if (*(unsigned __int16 *)(v8 + 48) == (unsigned __int16)(v43 + 1)) {
        return 5113;
      }
      int v47 = 1;
      int v15 = 10;
      int v19 = v54;
      uint64_t v16 = v52;
    }
LABEL_45:
    ++v17;
  }
  while (v17 < v18);
  if (!v47) {
    return 0;
  }
  return 304;
}

uint64_t PDdecod2(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6)
{
  v126[1] = *MEMORY[0x263EF8340];
  v126[0] = 0;
  if (a2 < 1) {
    return 11;
  }
  uint64_t v6 = a6;
  LOWORD(v9) = a3;
  uint64_t v11 = *((void *)a6 + 398);
  uint64_t v96 = a6[1596];
  uint64_t v120 = *(void *)(*(void *)pMCPbuff + 8 * v96);
  uint64_t v12 = *(void *)(v120 + 2176);
  int v102 = *(unsigned __int8 *)(v12 + 118);
  __int16 v13 = *(_WORD *)(v12 + 64);
  uint64_t v14 = **(unsigned __int16 ***)(v12 + 72);
  uint64_t v15 = *(void *)(v12 + 48);
  unsigned int v121 = 0;
  int v106 = *a6;
  int v16 = *(__int16 *)(a5 + 2);
  uint64_t v98 = v11;
  uint64_t v99 = v12;
  int v17 = *(unsigned __int8 **)(v12 + 88);
  uint64_t v86 = (unsigned __int8 *)*((void *)a6 + 14);
  if (a6[8] == (unsigned __int16)a3)
  {
    int v87 = *(__int16 *)(a5 + 2);
  }
  else
  {
    if (SLSeek(*(_DWORD *)(a5 + 64), *(_DWORD *)(a5 + 12) + v16 * a3, 0) == 8)
    {
LABEL_137:
      v6[8] = 0;
      return 11;
    }
    int v87 = v16;
    if (SLFRead(*(_DWORD *)(a5 + 64), v16, v14, &v121)) {
      BOOL v82 = 0;
    }
    else {
      BOOL v82 = v121 == v16;
    }
    if (!v82) {
      return 11;
    }
    v6[8] = v9;
  }
  int v90 = 0;
  __int16 v94 = 0;
  int v97 = a2;
  uint64_t v84 = (unsigned __int16)a2;
  uint64_t v85 = (uint64_t)v6 + 3199;
  uint64_t v100 = a5;
  uint64_t v101 = (uint64_t)v6;
  do
  {
    int v88 = a4;
    __int16 v89 = v9;
    __s[0] = 0;
    unsigned int v116 = __rev16(*v14);
    if (!v116) {
      goto LABEL_130;
    }
    int v18 = 0;
    unsigned __int16 v19 = 0;
    unsigned __int16 v20 = 0;
    unsigned __int16 v21 = 128;
    int v22 = 2;
    uint64_t v23 = v120;
    do
    {
      int v114 = v18;
      int v24 = 0;
      unsigned __int16 v25 = 0;
      LOWORD(v26) = 0;
      int v27 = 0;
      uint64_t v28 = 0;
      do
      {
        int v29 = v24;
        uint64_t v30 = v28;
        do
        {
          uint64_t v28 = v30;
          LOWORD(v31) = v13;
          do
          {
            if ((v21 & 0x80) != 0) {
              unsigned __int16 v19 = *((unsigned __int8 *)v14 + (unsigned __int16)v22++);
            }
            uint64_t v32 = v15 + 8 * (__int16)v31;
            uint64_t v33 = (__int16 *)(v32 + 6);
            uint64_t v34 = (__int16 *)(v32 + 4);
            if ((v21 & v19) != 0) {
              uint64_t v35 = v33;
            }
            else {
              uint64_t v35 = v34;
            }
            int v31 = *v35;
            if ((v21 & 0xFFFE) != 0) {
              v21 >>= 1;
            }
            else {
              unsigned __int16 v21 = 128;
            }
          }
          while (v31 > 255);
          int v24 = v29 + 1;
          v17[(unsigned __int16)v29] = v31;
          ++v20;
          uint64_t v30 = 1;
          if (v31) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v28 == 0;
          }
          BOOL v37 = !v36 || v25 == 0;
          ++v29;
        }
        while (!v37);
        if (v25 && !(_WORD)v26 && v28)
        {
          int v26 = (v31 & 1 | (8 * ((v31 >> 1) & 1))) + 8;
          if ((v31 & 4) == 0) {
            int v26 = v31 & 1 | (8 * ((v31 >> 1) & 1));
          }
          if ((v31 & 8) != 0) {
            LOWORD(v26) = v26 | 6;
          }
          unsigned __int16 v25 = 0;
          if ((v31 & 0x20) != 0) {
            LOWORD(v26) = v26 + *(unsigned __int8 *)(v23 + 2092);
          }
          int v27 = 1;
        }
        BOOL v36 = (unsigned __int16)v26 == v25++;
      }
      while (!v36 || !v27);
      int v38 = 0;
      v126[0] = 0;
      unsigned int v117 = *v17;
      unsigned int v39 = v17[1];
      unsigned int v40 = v17 + 1;
      if (v39 >= 0x11)
      {
        unint64_t v41 = 0;
        do
        {
          v125[v41 + 129] = v39;
          unint64_t v42 = v41 + 1;
          LOBYTE(v39) = v17[v41 + 2];
          if (!(_BYTE)v39) {
            break;
          }
          BOOL v43 = v41++ >= 0x7F;
        }
        while (!v43);
        int v38 = (unsigned __int16)v42;
        v125[v42 + 129] = 0;
        unsigned int v40 = &v17[v42 + 1];
      }
      int v110 = v38;
      __int16 v44 = strlen(__s);
      if (__s[0])
      {
        __int16 v45 = v44 - (v117 & 0x3F);
        if (v110)
        {
          if (v45 < 1)
          {
            v125[0] = 0;
          }
          else
          {
            uint64_t v111 = v45;
            __strncpy_chk();
            v125[v111] = 0;
          }
          __strcat_chk();
        }
        else if (v45 < 1)
        {
          v125[0] = 0;
        }
        else
        {
          uint64_t v112 = v45;
          __strncpy_chk();
          v125[v112] = 0;
        }
      }
      else
      {
        __strcpy_chk();
      }
      __strcpy_chk();
      if (v116 < v20) {
        break;
      }
      unsigned __int8 v46 = v40[1];
      if ((v46 & 2) != 0)
      {
        LODWORD(v126[0]) |= v40[2] << 24;
        int v48 = HIDWORD(v126[0]) | (v40[6] << 24);
        LODWORD(v126[0]) |= (v40[4] << 8) | (v40[3] << 16) | v40[5];
        HIDWORD(v126[0]) = v48;
        int v47 = (unsigned int *)(v40 + 10);
        HIDWORD(v126[0]) = (v40[8] << 8) | (v40[7] << 16) | v40[9] | v48;
      }
      else
      {
        int v47 = (unsigned int *)(v40 + 2);
      }
      uint64_t v23 = v120;
      if ((v46 & 4) != 0)
      {
        unsigned int v49 = *v47;
        unsigned int v50 = v47[1];
        v47 += 2;
        unsigned int v109 = bswap32(v49);
        unsigned int v113 = bswap32(v50);
        if ((v46 & 8) == 0)
        {
LABEL_64:
          LOWORD(v107) = 0;
          unsigned int v108 = 0;
          if ((v46 & 0x20) == 0) {
            goto LABEL_66;
          }
LABEL_65:
          unsigned __int8 v51 = v46;
          __memcpy_chk();
          unsigned __int8 v46 = v51;
          uint64_t v23 = v120;
          goto LABEL_66;
        }
      }
      else
      {
        unsigned int v109 = 0;
        unsigned int v113 = 0;
        if ((v46 & 8) == 0) {
          goto LABEL_64;
        }
      }
      unsigned int v107 = bswap32(*((unsigned __int16 *)v47 + 2)) >> 16;
      unsigned int v108 = bswap32(*v47);
      if ((v46 & 0x20) != 0) {
        goto LABEL_65;
      }
LABEL_66:
      unsigned int v52 = v117 >> 6;
      unsigned int v53 = v46 & 0x10;
      if (v106 != 3)
      {
        unsigned int v104 = v46 & 0x10;
        unsigned int v118 = v117 >> 6;
        signed __int16 v60 = strlen(v125);
        int v61 = v60;
        if (v106 != 100)
        {
          if (v106 == 6)
          {
            uint64_t v23 = v120;
            if (v60 > v97 || *(__int16 *)(v101 + 3456) > v60) {
              goto LABEL_111;
            }
            *(unsigned char *)(v100 + 55) = *(unsigned char *)(v120 + 2069);
            int v62 = v60;
            int v63 = SFanachk((uint64_t)v125, (unsigned __int16)v60, v85);
          }
          else
          {
            uint64_t v23 = v120;
            if (v106 != 5)
            {
              *(unsigned char *)(v100 + 55) = *(unsigned char *)(v120 + 2069);
              if (!v90) {
                goto LABEL_110;
              }
LABEL_113:
              if (!*(unsigned char *)(v100 + 55))
              {
                unsigned int v75 = 0;
                int v76 = 1;
                while ((*(_DWORD *)(v98 + 36) & v76) == 0)
                {
                  v76 *= 2;
                  BOOL v43 = v75++ >= 0x1F;
                  if (v43) {
                    goto LABEL_121;
                  }
                }
                *(unsigned char *)(v100 + 55) = v75 + 1;
              }
LABEL_121:
              int v93 = v61;
              PDSFdc((uint64_t)v125, v61, v100, v101);
              *(unsigned char *)(v100 + 55) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * v96) + 2069);
              int v77 = PDSFchkwrd(v100, v101, v125, v93, v118, (uint64_t)v126);
              if (v77 == 10)
              {
                __strcpy_chk();
                uint64_t v78 = *(void *)(*(void *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
                *(unsigned char *)(v78 + 71) = v118;
                *(void *)(v78 + 80) = v126[0];
                *(_DWORD *)(v78 + 8_Block_object_dispose(&STACK[0x510], 8) = v109;
                *(_DWORD *)(v78 + 92) = v113;
                *(_DWORD *)(v78 + 96) = v108;
                *(_WORD *)(v78 + 100) = v107;
                memcpy((void *)(v78 + 102), &__src, *(unsigned __int8 *)(v120 + 2092));
                uint64_t v79 = *(unsigned __int16 *)(v98 + 50);
                uint64_t v80 = *(void *)(*(void *)(v98 + 104) + 8 * v79);
                *(unsigned char *)(v80 + 70) = v104 >> 4;
                *(_WORD *)(v80 + 66) = v96;
                *(unsigned char *)(v80 + 72) = *(unsigned char *)(v120 + 2069);
                *(_WORD *)(v98 + 50) = v79 + 1;
                if (*(unsigned __int16 *)(v98 + 48) == (unsigned __int16)(v79 + 1)) {
                  return 5113;
                }
                int v90 = 10;
              }
              else
              {
                int v90 = v77;
              }
LABEL_125:
              int v54 = v114;
              uint64_t v23 = v120;
              goto LABEL_126;
            }
            if (*(__int16 *)(v101 + 3458) > v60 || *(__int16 *)(v101 + 3460) < v60) {
              goto LABEL_111;
            }
            *(unsigned char *)(v100 + 55) = *(unsigned char *)(v120 + 2069);
            int v62 = v60;
            int v63 = SLwldcmp((uint64_t)v125, v60, a1, v97);
          }
LABEL_109:
          int v61 = v62;
          uint64_t v23 = v120;
          if (!v63)
          {
LABEL_110:
            int v90 = 0;
LABEL_111:
            int v54 = v114;
            goto LABEL_126;
          }
          goto LABEL_113;
        }
        int v72 = v60 - v97;
        if (v72 < 0) {
          int v72 = v97 - v60;
        }
        if (v72 > *(__int16 *)(v101 + 2134)) {
          goto LABEL_125;
        }
        __int16 v73 = v60;
        int v92 = v60;
        unsigned int v74 = SLstrncmp(v125, v86, *(unsigned __int8 *)(v100 + 54)) << 24;
        if (v74 == -16777216) {
          goto LABEL_125;
        }
        if (v74 != 0x1000000)
        {
          *(unsigned char *)(v100 + 55) = *(unsigned char *)(v120 + 2069);
          if (v125[0] != *a1 && v125[v73] != a1[v84]) {
            goto LABEL_125;
          }
          int v62 = v92;
          *(_WORD *)(v101 + 2150) = v92;
          *(_WORD *)(v101 + 2152) = v97;
          int v63 = PDSFcorbru((void *)v100, v101, (uint64_t)v125, v92, (uint64_t)a1, v97, *(__int16 *)(v101 + 2136), *(__int16 *)(v101 + 2138), *(_DWORD *)(v101 + 2140), *(_WORD *)(v101 + 2134));
          goto LABEL_109;
        }
        return 11;
      }
      if (v102)
      {
        int v54 = v114 + 1;
        if (*(unsigned __int16 *)(v99 + 116) > (unsigned __int16)v114) {
          goto LABEL_126;
        }
LABEL_69:
        int v103 = v54;
        unsigned int v115 = v53 >> 4;
        uint64_t v55 = *(void *)(*(void *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
        *(unsigned char *)(v55 + 71) = v52;
        *(void *)(v55 + 80) = v126[0];
        *(_DWORD *)(v55 + 8_Block_object_dispose(&STACK[0x510], 8) = v109;
        *(_DWORD *)(v55 + 92) = v113;
        *(unsigned char *)(v55 + 72) = *(unsigned char *)(v23 + 2069);
        __strcpy_chk();
        uint64_t v56 = *(void *)(*(void *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
        *(_DWORD *)(v56 + 96) = v108;
        *(_WORD *)(v56 + 100) = v107;
        *(void *)(v56 + 102) = __src;
        *(_DWORD *)(v56 + 110) = v123;
        uint64_t v57 = *(unsigned __int16 *)(v98 + 50);
        uint64_t v58 = *(void *)(*(void *)(v98 + 104) + 8 * v57);
        *(unsigned char *)(v58 + 70) = v115;
        *(_WORD *)(v58 + 66) = v96;
        uint64_t v59 = *(void *)(*(void *)pMCPbuff + 8 * v96);
        *(_WORD *)(v58 + 6_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v59 + 2084);
        *(_DWORD *)(v58 + 74) = *(_DWORD *)(v59 + 2086);
        *(_WORD *)(v98 + 50) = v57 + 1;
        if (v102) {
          ++*(_WORD *)(v99 + 116);
        }
        if (*(unsigned __int16 *)(v98 + 48) != (unsigned __int16)(v57 + 1))
        {
          ++v94;
          uint64_t v23 = v120;
          int v54 = v103;
          goto LABEL_126;
        }
        return 5113;
      }
      int v105 = v46 & 0x10;
      unsigned int v119 = v117 >> 6;
      __int16 v64 = strlen(v125);
      int v65 = v64;
      int v91 = v64;
      if (v64 >= v97) {
        int v65 = v97;
      }
      if (v65 >= 4) {
        int v66 = 4;
      }
      else {
        int v66 = v65;
      }
      if ((int)SLstrncmp(v125, a1, v66) > 0) {
        return 11;
      }
      if (v91 != v97) {
        goto LABEL_125;
      }
      unsigned int v67 = *a1;
      uint64_t v23 = v120;
      if (v67 != v125[0] || v105 && *(unsigned char *)(v98 + 42) == 2) {
        goto LABEL_111;
      }
      int v68 = v125;
      unsigned int v69 = *a1;
      uint64_t v70 = a1;
      LOBYTE(v52) = v119;
      while (1)
      {
        if ((~(v69 >> 2) & 0x20 | v69) == (~(v67 >> 2) & 0x20 | v67))
        {
          if (!v69)
          {
            int v54 = v114;
            unsigned int v53 = v105;
            goto LABEL_69;
          }
          ++v70;
          goto LABEL_96;
        }
        int v71 = *(unsigned __int8 *)(v120 + 2068);
        if (v69 == v71)
        {
          ++v70;
          goto LABEL_97;
        }
        if (v67 != v71) {
          break;
        }
LABEL_96:
        ++v68;
LABEL_97:
        unsigned int v69 = *v70;
        unsigned int v67 = *v68;
      }
      int v54 = v114;
LABEL_126:
      int v18 = v54;
    }
    while (v116 > v20);
LABEL_130:
    int v9 = (__int16)(v89 + 1);
    uint64_t v6 = (unsigned __int16 *)v101;
    *(_WORD *)(v101 + 16) = v89 + 1;
    *(_WORD *)(v99 + 116) = 0;
    if (v9 >= *(__int16 *)(v100 + 48))
    {
      BOOL v81 = v94 == 0;
      goto LABEL_146;
    }
    if (SLSeek(*(_DWORD *)(v100 + 64), *(_DWORD *)(v100 + 12) + v87 * v9, 0) == 8) {
      return 11;
    }
    if (SLFRead(*(_DWORD *)(v100 + 64), v87, v14, &v121) || v121 != v87) {
      goto LABEL_137;
    }
    a4 = v88 - 1;
  }
  while ((__int16)v88 > 0);
  BOOL v81 = *(unsigned __int16 *)(v98 + 50) == 0;
LABEL_146:
  if (v81) {
    return 11;
  }
  else {
    return 10;
  }
}

uint64_t PDget(unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 2184);
  if (*(__int16 *)(v3 + 68) < a2) {
    return 5112;
  }
  __int16 v10 = 0;
  uint64_t v8 = *(_WORD **)(a3 + 2192);
  v8[9] = 0;
  v8[50] = 0;
  *uint64_t v8 = 3;
  *(unsigned char *)(*(void *)(a3 + 2176) + 11_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v9 = SFbisrch((uint64_t)a1, 0, (__int16)(a2 - 1), &v10, v3);
  return PDdecod2(a1, a2, v9, v10, *(void *)(a3 + 2184), *(unsigned __int16 **)(a3 + 2192));
}

uint64_t PDgetword(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 2192);
  v1[9] = 0;
  v1[50] = 0;
  *uint64_t v1 = 3;
  uint64_t v2 = *(void *)(a1 + 2176);
  unsigned int v3 = *(unsigned __int16 *)(v2 + 114);
  *(unsigned char *)(v2 + 11_Block_object_dispose(&STACK[0x510], 8) = 1;
  uint64_t v4 = *(void *)(a1 + 2184);
  unsigned int v5 = *(unsigned __int16 *)(v4 + 48);
  if (v3 >= v5) {
    return 8;
  }
  unsigned __int8 v10 = 0;
  while (1)
  {
    BOOL v7 = (__int16)v5 > (__int16)(v3 + 1);
    uint64_t result = *(unsigned char *)a1 == 7
           ? PDdecodOldSD(&v10, 2, (__int16)v3, v7, v4, v1)
           : PDdecod2(&v10, 2, (__int16)v3, v7, v4, v1);
    uint64_t v1 = *(unsigned __int16 **)(a1 + 2192);
    unsigned int v3 = v1[8];
    uint64_t v9 = *(void *)(a1 + 2176);
    if (result == 5113) {
      break;
    }
    *(_WORD *)(v9 + 116) = 0;
    uint64_t v4 = *(void *)(a1 + 2184);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 48);
    if (v3 >= v5) {
      goto LABEL_11;
    }
  }
  uint64_t result = 0;
LABEL_11:
  *(_WORD *)(v9 + 114) = v3;
  return result;
}

uint64_t PDdecodOldSD(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6)
{
  v108[1] = *MEMORY[0x263EF8340];
  v108[0] = 0;
  if (a2 < 1) {
    return 11;
  }
  uint64_t v6 = a6;
  LOWORD(v9) = a3;
  uint64_t v83 = a6[1596];
  uint64_t v12 = *((void *)a6 + 398);
  __int16 v13 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * v83);
  uint64_t v14 = *((void *)v13 + 272);
  int v88 = *(unsigned __int8 *)(v14 + 118);
  __int16 v15 = *(_WORD *)(v14 + 64);
  int v16 = **(unsigned __int16 ***)(v14 + 72);
  uint64_t v17 = *(void *)(v14 + 48);
  unsigned int v102 = 0;
  int v90 = *a6;
  __int16 v91 = v15;
  int v18 = *(__int16 *)(a5 + 2);
  uint64_t v84 = v14;
  uint64_t v85 = v12;
  int v92 = *(unsigned __int8 **)(v14 + 88);
  int v77 = (unsigned __int8 *)*((void *)a6 + 14);
  uint64_t v96 = v13;
  if (a6[8] == (unsigned __int16)a3)
  {
    BOOL v82 = a1;
  }
  else
  {
    if (SLSeek(*(_DWORD *)(a5 + 64), *(_DWORD *)(a5 + 12) + v18 * a3, 0) == 8)
    {
LABEL_121:
      v6[8] = 0;
      return 11;
    }
    if (SLFRead(*(_DWORD *)(a5 + 64), v18, v16, &v102)) {
      BOOL v73 = 0;
    }
    else {
      BOOL v73 = v102 == v18;
    }
    if (!v73) {
      return 11;
    }
    BOOL v82 = a1;
    v6[8] = v9;
    __int16 v13 = v96;
  }
  __int16 v19 = 0;
  uint64_t v81 = 0;
  uint64_t v75 = (uint64_t)v6 + 3199;
  uint64_t v86 = (uint64_t)v6;
  uint64_t v87 = a5;
  int v76 = v18;
  do
  {
    int v78 = a4;
    __int16 v79 = v9;
    __s[0] = 0;
    unsigned int v93 = __rev16(*v16);
    if (!v93) {
      goto LABEL_114;
    }
    int v20 = 0;
    unsigned __int16 v21 = 0;
    unsigned __int16 v22 = 0;
    unsigned __int16 v23 = 128;
    int v24 = 2;
    do
    {
      int v97 = v20;
      unsigned __int16 v25 = 0;
      unsigned __int16 v26 = 0;
      LOWORD(v27) = 0;
      int v28 = 0;
      do
      {
        LOWORD(v29) = v91;
        do
        {
          if ((v23 & 0x80) != 0) {
            unsigned __int16 v21 = *((unsigned __int8 *)v16 + (unsigned __int16)v24++);
          }
          uint64_t v30 = v17 + 8 * (__int16)v29;
          int v31 = (__int16 *)(v30 + 6);
          uint64_t v32 = (__int16 *)(v30 + 4);
          if ((v23 & v21) != 0) {
            uint64_t v32 = v31;
          }
          int v29 = *v32;
          if ((v23 & 0xFFFE) != 0) {
            v23 >>= 1;
          }
          else {
            unsigned __int16 v23 = 128;
          }
        }
        while (v29 > 255);
        v92[v25] = v29;
        if (v26 && !(_WORD)v27)
        {
          if ((v29 & 0xF0) != 0)
          {
            LOWORD(v27) = 0;
          }
          else
          {
            int v27 = (v29 & 1 | (8 * ((v29 >> 1) & 1))) + 8;
            if ((v29 & 4) == 0) {
              int v27 = v29 & 1 | (8 * ((v29 >> 1) & 1));
            }
            if ((v29 & 8) != 0) {
              LOWORD(v27) = v27 | 6;
            }
            unsigned __int16 v26 = 0;
            if ((v29 & 0x20) != 0) {
              LOWORD(v27) = v27 + v13[2092];
            }
            int v28 = 1;
          }
        }
        ++v25;
        ++v22;
        BOOL v72 = (unsigned __int16)v27 == v26++;
      }
      while (!v72 || !v28);
      v108[0] = 0;
      unsigned int v33 = *v92;
      v107[0] = 0;
      unsigned int v34 = v92[1];
      if (v34 < 0x11)
      {
        uint64_t v35 = v92 + 1;
      }
      else
      {
        uint64_t v35 = v92 + 1;
        do
        {
          v107[v19] = v34;
          unsigned int v36 = *++v35;
          LOBYTE(v34) = v36;
          ++v19;
        }
        while (v36 > 0xF);
        v107[v19] = 0;
      }
      unsigned int v98 = v33;
      if (__s[0])
      {
        uint64_t v37 = (__int16)(strlen(__s) - (v33 & 0x3F));
        __strncpy_chk();
        v106[v37] = 0;
        if (!v19) {
          goto LABEL_41;
        }
        __strcat_chk();
      }
      else
      {
        __strcpy_chk();
      }
      __strcpy_chk();
LABEL_41:
      int v38 = (unsigned int *)(v35 + 1);
      unsigned __int8 v39 = *v35;
      if ((*v35 & 2) != 0)
      {
        LODWORD(v108[0]) |= v35[1] << 24;
        LODWORD(v108[0]) |= v35[2] << 16;
        int v40 = HIDWORD(v108[0]) | (v35[5] << 24);
        LODWORD(v108[0]) |= bswap32(*(unsigned __int16 *)(v35 + 3)) >> 16;
        HIDWORD(v108[0]) = v40;
        HIDWORD(v108[0]) = v40 | (v35[6] << 16);
        int v38 = (unsigned int *)(v35 + 9);
        HIDWORD(v108[0]) |= bswap32(*(unsigned __int16 *)(v35 + 7)) >> 16;
      }
      if ((v39 & 4) != 0)
      {
        unsigned int v41 = *v38;
        unsigned int v42 = v38[1];
        v38 += 2;
        unint64_t v95 = _byteswap_uint64(__PAIR64__(v41, v42));
        if ((v39 & 8) == 0)
        {
LABEL_48:
          uint64_t v94 = 0;
          if ((v39 & 0x20) == 0) {
            goto LABEL_50;
          }
LABEL_49:
          __memcpy_chk();
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v95 = 0;
        if ((v39 & 8) == 0) {
          goto LABEL_48;
        }
      }
      LODWORD(v94) = bswap32(*((unsigned __int16 *)v38 + 2)) >> 16;
      HIDWORD(v94) = bswap32(*v38);
      if ((v39 & 0x20) != 0) {
        goto LABEL_49;
      }
LABEL_50:
      unsigned int v43 = v98 >> 6;
      unsigned int v44 = v39 & 0x10;
      if (v90 != 3)
      {
        unsigned int v89 = v39 & 0x10;
        unsigned int v100 = v98 >> 6;
        signed __int16 v50 = strlen(v106);
        __int16 v51 = v50;
        int v52 = v50;
        if (v90 != 100)
        {
          __int16 v13 = v96;
          if (v90 == 6)
          {
            if (v50 > a2 || *(__int16 *)(v86 + 3456) > v50) {
              goto LABEL_106;
            }
            *(unsigned char *)(v87 + 55) = v96[2069];
            int v53 = v50;
            int v54 = SFanachk((uint64_t)v106, (unsigned __int16)v50, v75);
          }
          else
          {
            if (v90 != 5)
            {
              *(unsigned char *)(v87 + 55) = v96[2069];
              if (!v81) {
                goto LABEL_95;
              }
LABEL_97:
              uint64_t v65 = v87;
              if (*(unsigned char *)(v87 + 55)) {
                goto LABEL_103;
              }
              __int16 v19 = 0;
              int v66 = 1;
              while ((*(_DWORD *)(v85 + 36) & v66) == 0)
              {
                unsigned int v67 = (unsigned __int16)v19;
                v66 *= 2;
                ++v19;
                if (v67 >= 0x1F)
                {
                  __int16 v19 = 32;
                  uint64_t v65 = v87;
                  goto LABEL_103;
                }
              }
              uint64_t v65 = v87;
              *(unsigned char *)(v87 + 55) = v19 + 1;
LABEL_103:
              int v80 = v52;
              PDSFdc((uint64_t)v106, v52, v65, v86);
              *(unsigned char *)(v65 + 55) = *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * v83) + 2069);
              int v68 = PDSFchkwrd(v65, v86, v106, v80, v100, (uint64_t)v108);
              if (v68 == 10)
              {
                __strcpy_chk();
                uint64_t v69 = *(void *)(*(void *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
                *(unsigned char *)(v69 + 71) = v100;
                *(void *)(v69 + 80) = v108[0];
                *(void *)(v69 + 8_Block_object_dispose(&STACK[0x510], 8) = v95;
                *(_DWORD *)(v69 + 96) = HIDWORD(v94);
                *(_WORD *)(v69 + 100) = v94;
                memcpy((void *)(v69 + 102), &__src, v96[2092]);
                uint64_t v70 = *(unsigned __int16 *)(v85 + 50);
                uint64_t v71 = *(void *)(*(void *)(v85 + 104) + 8 * v70);
                *(unsigned char *)(v71 + 70) = v89 >> 4;
                *(_WORD *)(v71 + 66) = v83;
                *(unsigned char *)(v71 + 72) = v96[2069];
                *(_WORD *)(v85 + 50) = v70 + 1;
                if (*(unsigned __int16 *)(v85 + 48) == (unsigned __int16)(v70 + 1)) {
                  return 5113;
                }
                __int16 v13 = v96;
                LODWORD(v81) = 10;
LABEL_106:
                int v20 = v97;
                continue;
              }
              LODWORD(v81) = v68;
LABEL_108:
              int v20 = v97;
              goto LABEL_109;
            }
            if (*(__int16 *)(v86 + 3458) > v50 || *(__int16 *)(v86 + 3460) < v50) {
              goto LABEL_106;
            }
            *(unsigned char *)(v87 + 55) = v96[2069];
            int v53 = v50;
            int v54 = SLwldcmp((uint64_t)v106, v50, v82, a2);
          }
LABEL_94:
          int v52 = v53;
          __int16 v13 = v96;
          if (!v54)
          {
LABEL_95:
            LODWORD(v81) = 0;
            goto LABEL_106;
          }
          goto LABEL_97;
        }
        int v63 = v50 - a2;
        if (v63 < 0) {
          int v63 = a2 - v50;
        }
        if (v63 > *(__int16 *)(v86 + 2134)) {
          goto LABEL_108;
        }
        int v53 = v50;
        unsigned int v64 = SLstrncmp(v106, v77, *(unsigned __int8 *)(v87 + 54)) << 24;
        if (v64 == -16777216) {
          goto LABEL_108;
        }
        __int16 v13 = v96;
        if (v64 != 0x1000000)
        {
          *(unsigned char *)(v87 + 55) = v96[2069];
          if (v106[0] != *v82 && v106[v51] != v82[(unsigned __int16)a2]) {
            goto LABEL_106;
          }
          *(_WORD *)(v86 + 2150) = v53;
          *(_WORD *)(v86 + 2152) = a2;
          int v54 = PDSFcorbru((void *)v87, v86, (uint64_t)v106, v53, (uint64_t)v82, a2, *(__int16 *)(v86 + 2136), *(__int16 *)(v86 + 2138), *(_DWORD *)(v86 + 2140), *(_WORD *)(v86 + 2134));
          goto LABEL_94;
        }
        return 11;
      }
      if (v88)
      {
        int v20 = v97 + 1;
        __int16 v13 = v96;
        if (*(unsigned __int16 *)(v84 + 116) > (unsigned __int16)v97) {
          continue;
        }
LABEL_53:
        unsigned int v99 = v44 >> 4;
        uint64_t v45 = *(void *)(*(void *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
        *(unsigned char *)(v45 + 71) = v43;
        *(void *)(v45 + 80) = v108[0];
        *(void *)(v45 + 8_Block_object_dispose(&STACK[0x510], 8) = v95;
        *(unsigned char *)(v45 + 72) = v13[2069];
        __strcpy_chk();
        uint64_t v46 = *(void *)(*(void *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
        *(_DWORD *)(v46 + 96) = HIDWORD(v94);
        *(_WORD *)(v46 + 100) = v94;
        *(void *)(v46 + 102) = __src;
        *(_DWORD *)(v46 + 110) = v104;
        uint64_t v47 = *(unsigned __int16 *)(v85 + 50);
        uint64_t v48 = *(void *)(*(void *)(v85 + 104) + 8 * v47);
        *(unsigned char *)(v48 + 70) = v99;
        *(_WORD *)(v48 + 66) = v83;
        uint64_t v49 = *(void *)(*(void *)pMCPbuff + 8 * v83);
        *(_WORD *)(v48 + 6_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v49 + 2084);
        *(_DWORD *)(v48 + 74) = *(_DWORD *)(v49 + 2086);
        *(_WORD *)(v85 + 50) = v47 + 1;
        if (v88) {
          ++*(_WORD *)(v84 + 116);
        }
        if (*(unsigned __int16 *)(v85 + 48) != (unsigned __int16)(v47 + 1))
        {
          ++WORD2(v81);
LABEL_109:
          __int16 v13 = v96;
          continue;
        }
        return 5113;
      }
      unsigned int v101 = v98 >> 6;
      int v55 = (__int16)strlen(v106);
      if (v55 >= a2) {
        int v56 = a2;
      }
      else {
        int v56 = v55;
      }
      if (v56 >= 4) {
        int v57 = 4;
      }
      else {
        int v57 = v56;
      }
      if ((int)SLstrncmp(v106, v82, v57) > 0) {
        return 11;
      }
      if (v55 != a2) {
        goto LABEL_108;
      }
      unsigned int v58 = *v82;
      __int16 v13 = v96;
      if (v58 != v106[0]) {
        goto LABEL_106;
      }
      unsigned int v44 = v39 & 0x10;
      if ((v39 & 0x10) != 0 && *(unsigned char *)(v85 + 42) == 2) {
        goto LABEL_106;
      }
      uint64_t v59 = v106;
      unsigned int v60 = *v82;
      int v61 = v82;
      while (1)
      {
        if ((~(v60 >> 2) & 0x20 | v60) == (~(v58 >> 2) & 0x20 | v58))
        {
          if (!v60)
          {
            int v20 = v97;
            LOBYTE(v43) = v101;
            goto LABEL_53;
          }
          ++v61;
          goto LABEL_81;
        }
        int v62 = v96[2068];
        if (v60 == v62)
        {
          ++v61;
          goto LABEL_82;
        }
        if (v58 != v62) {
          break;
        }
LABEL_81:
        ++v59;
LABEL_82:
        unsigned int v60 = *v61;
        unsigned int v58 = *v59;
      }
      int v20 = v97;
    }
    while (v93 > v22);
LABEL_114:
    int v9 = (__int16)(v79 + 1);
    uint64_t v6 = (unsigned __int16 *)v86;
    *(_WORD *)(v86 + 16) = v79 + 1;
    *(_WORD *)(v84 + 116) = 0;
    if (v9 >= *(__int16 *)(v87 + 48))
    {
      BOOL v72 = WORD2(v81) == 0;
      goto LABEL_130;
    }
    if (SLSeek(*(_DWORD *)(v87 + 64), *(_DWORD *)(v87 + 12) + v76 * v9, 0) == 8) {
      return 11;
    }
    if (SLFRead(*(_DWORD *)(v87 + 64), v76, v16, &v102) || v102 != v76) {
      goto LABEL_121;
    }
    a4 = v78 - 1;
    __int16 v13 = v96;
  }
  while ((_WORD)v78);
  BOOL v72 = *(unsigned __int16 *)(v85 + 50) == 0;
LABEL_130:
  if (v72) {
    return 11;
  }
  else {
    return 10;
  }
}

uint64_t PDdel(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 2168);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)(v2 + 32) + 2 * a2);
  uint64_t v4 = (unsigned __int8 *)(*(void *)(v2 + 40) + v3);
  int v5 = v4[1] - *v4 + (*v4 << 8);
  int v6 = v4[2];
  *(unsigned char *)(*(void *)(v2 + 48) + 20 * v5 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v7 = v3 + v6;
  int v8 = *(unsigned __int16 *)(v2 + 24);
  int v9 = v8 - (v3 + v6);
  if ((_WORD)v8 != (_WORD)v3 + (_WORD)v6)
  {
    int v10 = v3;
    do
    {
      --v9;
      *(unsigned char *)(*(void *)(v2 + 40) + (unsigned __int16)v10++) = *(unsigned char *)(*(void *)(v2 + 40)
                                                                            + (unsigned __int16)v7++);
    }
    while ((_WORD)v9);
    LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(v2 + 24);
  }
  *(_WORD *)(v2 + 24) = v8 - v6;
  unsigned int v11 = *(unsigned __int16 *)(v2 + 4);
  if (*(_WORD *)(v2 + 4))
  {
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(v2 + 32);
    do
    {
      unsigned int v14 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v14 <= 0xFFFD && v14 > v3)
      {
        *(_WORD *)(v13 + 2 * v12) = v14 - v6;
        unsigned int v11 = *(unsigned __int16 *)(v2 + 4);
      }
      ++v12;
    }
    while (v12 < v11);
  }
  return 0;
}

uint64_t PDedit(unsigned __int16 *a1, int a2)
{
  unsigned __int16 v30 = 0;
  __int16 v29 = 0;
  uint64_t v3 = pMCPbuff;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * v4) + 2168);
  *((_DWORD *)a1 + 16) = 0;
  a1[34] = 0;
  *((_DWORD *)a1 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  a1[44] = 0;
  *((void *)a1 + 12) = 0;
  uint64_t v6 = a1[1];
  if (**(unsigned __int16 **)(*(void *)(v3 + 40) + 8 * v6) != v6
    || *(_WORD *)(*(void *)(v3 + 32) + 2 * v6) != 9090)
  {
    uint64_t result = 8;
    *((_DWORD *)a1 + 16) = 8;
    __int16 v9 = 5104;
    goto LABEL_8;
  }
  if (PDcheckDID(v4) != 8)
  {
    if (*(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *a1) + 2062) == 1)
    {
      if (!a1[34] || *((int *)a1 + 16) <= 7)
      {
        uint64_t result = 8;
        *((_DWORD *)a1 + 16) = 8;
        __int16 v9 = 5114;
        goto LABEL_8;
      }
      return 8;
    }
    if (strlen(*((const char **)a1 + 1)) - 129 <= 0xFFFFFF7F)
    {
      if (!a1[34] || *((int *)a1 + 16) <= 7)
      {
        uint64_t result = 8;
        *((_DWORD *)a1 + 16) = 8;
        __int16 v9 = 5102;
        goto LABEL_8;
      }
      return 8;
    }
    int v10 = (char *)malloc_type_malloc(0x81uLL, 0x5DF8F7FCuLL);
    __strcpy_chk();
    switch(a2)
    {
      case 9:
        if (PDdefragalt() == 8)
        {
          if (!a1[34] || *((int *)a1 + 16) <= 7)
          {
            uint64_t result = 8;
            *((_DWORD *)a1 + 16) = 8;
            __int16 v9 = 5101;
            goto LABEL_8;
          }
          return 8;
        }
        break;
      case 3:
        uint64_t v18 = SLLngToA(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *a1) + 2069));
        __int16 v19 = strlen(v10);
        SLrecap((unsigned __int8 *)v10, v19, *((unsigned __int8 *)a1 + 18), (uint64_t)(a1 + 10), *((unsigned __int8 *)a1 + 18), v18);
        int v20 = PDsearch(*(void *)(*(void *)pMCPbuff + 8 * *a1), v10, &v30, &v29, 3, 0, a1 + 25);
        if (v20 == 5112 || v20 == 8)
        {
          if (a1[34] && *((int *)a1 + 16) > 7) {
            goto LABEL_50;
          }
          *((_DWORD *)a1 + 16) = 8;
          __int16 v22 = 5112;
LABEL_49:
          a1[34] = v22;
          goto LABEL_50;
        }
        int v23 = PDdel(*(void *)(*(void *)pMCPbuff + 8 * *a1), v30);
        if (v23 == 8)
        {
          if (a1[34] && *((int *)a1 + 16) > 7) {
            goto LABEL_50;
          }
          *((_DWORD *)a1 + 16) = 8;
          __int16 v22 = 5101;
          goto LABEL_49;
        }
        uint64_t v24 = *(void *)pMCPbuff;
        *(_WORD *)(*(void *)(*(void *)(*(void *)(v24 + 8 * *a1) + 2168) + 32) + 2 * v30) = -2;
        uint64_t v25 = *(void *)(v24 + 8 * *a1);
        uint64_t v26 = *(void *)(v25 + 2168);
        __int16 v27 = *(_WORD *)(v26 + 22) - 1;
        *(_WORD *)(v26 + 22) = v27;
        --*(_WORD *)(v25 + 2112);
        *(_WORD *)(v26 + 20) = v27;
        *(_WORD *)(v25 + 2104) = *(_WORD *)(v26 + 12) - v27;
        __int16 v28 = *(_WORD *)(v26 + 6) - *(_WORD *)(v26 + 24);
        *(_WORD *)(v25 + 2106) = v28;
        *((unsigned char *)a1 + 62) = (unsigned __int16)(100 * v28) / *(_WORD *)(v5 + 6);
        *(unsigned char *)uint64_t v26 = 1;
        break;
      case 2:
        int v11 = (__int16)a1[24];
        BOOL v12 = a1[24] != 0;
        uint64_t v13 = *a1;
        uint64_t v14 = *(void *)(*(void *)pMCPbuff + 8 * v13);
        **(unsigned char **)(v14 + 216_Block_object_dispose(&STACK[0x510], 8) = 1;
        int v15 = PDadd(v14, v10, *((char *)a1 + 17), v12, *((char **)a1 + 5), v11, (uint64_t *)(a1 + 14), (uint64_t)(a1 + 10), *((unsigned char *)a1 + 18), v13, (uint64_t *)(a1 + 25));
        uint64_t v16 = *(void *)(*(void *)pMCPbuff + 8 * *a1);
        *((unsigned char *)a1 + 62) = (unsigned __int16)(100 * *(_WORD *)(v16 + 2106)) / *(_WORD *)(v5 + 6);
        switch(v15)
        {
          case 5152:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3) {
              goto LABEL_67;
            }
            *((_DWORD *)a1 + 16) = 4;
            __int16 v17 = 5152;
            goto LABEL_65;
          case 5153:
          case 5154:
          case 5155:
            goto LABEL_52;
          case 5156:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3) {
              goto LABEL_67;
            }
            *((_DWORD *)a1 + 16) = 4;
            __int16 v17 = 5156;
            goto LABEL_65;
          case 5157:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3) {
              goto LABEL_67;
            }
            *((_DWORD *)a1 + 16) = 4;
            __int16 v17 = 5157;
            goto LABEL_65;
          case 5158:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3) {
              goto LABEL_67;
            }
            *((_DWORD *)a1 + 16) = 4;
            __int16 v17 = 5158;
LABEL_65:
            a1[34] = v17;
            goto LABEL_67;
          default:
            if (!v15)
            {
              ++*(_WORD *)(v16 + 2112);
              goto LABEL_67;
            }
            if (v15 == 5107)
            {
              if (!a1[34] || *((int *)a1 + 16) <= 7)
              {
                *((_DWORD *)a1 + 16) = 8;
                __int16 v22 = 5107;
                goto LABEL_49;
              }
            }
            else
            {
LABEL_52:
              if (!a1[34] || *((int *)a1 + 16) <= 7)
              {
                *((_DWORD *)a1 + 16) = 8;
                a1[34] = v15;
              }
            }
            break;
        }
LABEL_50:
        free(v10);
        return 8;
      default:
        if (!a1[34] || *((int *)a1 + 16) <= 7)
        {
          uint64_t result = 8;
          *((_DWORD *)a1 + 16) = 8;
          __int16 v9 = 1100;
          goto LABEL_8;
        }
        return 8;
    }
LABEL_67:
    free(v10);
    return 0;
  }
  if (a1[34] && *((int *)a1 + 16) > 7) {
    return 8;
  }
  uint64_t result = 8;
  *((_DWORD *)a1 + 16) = 8;
  __int16 v9 = 5105;
LABEL_8:
  a1[34] = v9;
  return result;
}

unsigned __int8 *PDatoi(unsigned __int8 *result, _WORD *a2)
{
  int v2 = *result;
  if ((v2 - 48) > 9)
  {
    LOWORD(v4) = 0;
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = result + 1;
    do
    {
      if ((unsigned __int16)v3++ != 0) {
        v4 *= 10;
      }
      int v4 = v4 + v2 - 48;
      int v7 = *v5++;
      LOBYTE(v2) = v7;
    }
    while ((v7 - 48) < 0xA);
  }
  *a2 = v4;
  return result;
}

unsigned __int8 *PDatobyte(unsigned __int8 *result, unsigned char *a2)
{
  int v2 = *result;
  if ((v2 - 48) > 9)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = result + 1;
    do
    {
      if ((unsigned __int16)v3++ != 0) {
        v4 *= 10;
      }
      int v4 = v2 + v4 - 48;
      int v7 = *v5++;
      int v2 = v7;
    }
    while ((v7 - 48) < 0xA);
  }
  *a2 = v4;
  return result;
}

uint64_t PDreadas(uint64_t a1)
{
  v104[1] = *MEMORY[0x263EF8340];
  v104[0] = 0;
  __int16 v102 = 0;
  __int16 v101 = 0;
  int v1 = *(unsigned __int8 *)(a1 + 784);
  if ((v1 - 3) > 1) {
    return 8;
  }
  uint64_t v3 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
  uint64_t v103 = 0;
  BOOL v4 = v1 != 4;
  if (*(_WORD *)(a1 + 768))
  {
    LODWORD(v103) = *(_DWORD *)(a1 + 772);
  }
  else if (SLOpen(a1 + 256, a1, (int *)&v103, 0) == 8)
  {
    if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
      return 8;
    }
    uint64_t result = 8;
    *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v6 = 1012;
LABEL_8:
    *(_WORD *)(a1 + 2092) = v6;
    return result;
  }
  int v7 = (unsigned __int8 *)malloc_type_calloc(0x7D3uLL, 1uLL, 0x100004077774924uLL);
  if (!v7)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    goto LABEL_142;
  }
  int v8 = v7;
  __int16 v9 = malloc_type_malloc(0x43uLL, 0xC73EF833uLL);
  if (!v9)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    BOOL v82 = v8;
    goto LABEL_141;
  }
  int v10 = v9;
  unint64_t v95 = (unsigned __int8 *)malloc_type_malloc(0x43uLL, 0x74EA0309uLL);
  if (!v95 || (int v11 = (unsigned __int8 *)malloc_type_malloc(0x400uLL, 0xFDC5279EuLL)) == 0)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    BOOL v82 = v10;
    goto LABEL_141;
  }
  BOOL v12 = v11;
  uint64_t v96 = malloc_type_malloc(0x803uLL, 0xC0348252uLL);
  if (!v96)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    free(v10);
    free(v95);
    BOOL v82 = v12;
    goto LABEL_141;
  }
  uint64_t v13 = (uint64_t *)malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
  if (!v13)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    free(v10);
    free(v95);
    free(v12);
    BOOL v82 = v96;
LABEL_141:
    free(v82);
LABEL_142:
    uint64_t v83 = (void *)pMCPbuff;
    goto LABEL_143;
  }
  uint64_t v14 = v13;
  __dst = (char *)v10;
  __int16 v15 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  int v98 = 0;
  int v93 = 0;
  int v87 = 0;
  unint64_t v90 = 0;
  __int16 v91 = v8;
  int v16 = 0;
  int v17 = 0;
  unsigned int v99 = (uint64_t *)(v3 + 2076);
  uint64_t v97 = 1024;
  uint64_t v18 = v12;
LABEL_16:
  unsigned int v19 = *(_DWORD *)(a1 + 780);
  if (v19 >= 0x7D0) {
    int v20 = 2000;
  }
  else {
    int v20 = *(_DWORD *)(a1 + 780);
  }
  if (v19) {
    int v21 = v20;
  }
  else {
    int v21 = 2000;
  }
  if (SLFRead(v103, v21, v8, (unsigned int *)&v103 + 1) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      LOWORD(v64) = 1010;
LABEL_205:
      *(_WORD *)(a1 + 2092) = v64;
    }
    goto LABEL_206;
  }
  __int16 v22 = 0;
  int v23 = v89;
  int v24 = v93;
  uint64_t v25 = v97;
LABEL_24:
  LODWORD(v89) = v23;
  int v92 = v18;
  uint64_t v97 = v25;
  while (1)
  {
    int v26 = v8[v22];
    if (v26 == 10 || v26 == 13) {
      break;
    }
    int v28 = HIDWORD(v103);
    int v29 = SWORD2(v103);
    if (SHIDWORD(v103) <= 1999 && SWORD2(v103) == v22 && v15 > 0) {
      goto LABEL_39;
    }
LABEL_108:
    if (v29 <= v22)
    {
      int v75 = v22;
    }
    else
    {
      __int16 v73 = v22++;
      __int16 v74 = v15++;
      v18[v74] = v8[v73];
      int v28 = HIDWORD(v103);
      int v75 = v22;
      int v29 = SWORD2(v103);
    }
    if (v29 <= v75)
    {
      if (v28 <= 1999)
      {
        int v23 = 1;
        if (!v89) {
          goto LABEL_24;
        }
      }
      int v93 = v24;
      if (v28 > 1999) {
        goto LABEL_16;
      }
      int v81 = 0;
      goto LABEL_163;
    }
    if (v15 == 1 && ((int v76 = *v18, v76 == 10) || v76 == 13))
    {
      __int16 v15 = 0;
      if (!(_WORD)v25)
      {
        int v94 = v24;
        __int16 v15 = 0;
        int v77 = 0;
        goto LABEL_123;
      }
    }
    else if ((unsigned __int16)v15 == (unsigned __int16)v25)
    {
      if ((unsigned __int16)v25 == 2177)
      {
        v18[2177] = 13;
        v8[v22] = 13;
        int v87 = 1;
        uint64_t v25 = 2177;
        __int16 v15 = 2177;
        int v23 = v89;
        goto LABEL_24;
      }
      int v94 = v24;
      int v77 = (__int16)v25;
      __int16 v15 = v25;
LABEL_123:
      int v78 = 2177 - v77;
      if (2177 - v77 >= 1024) {
        int v78 = 1024;
      }
      uint64_t v79 = (v78 + v77);
      int v80 = (unsigned __int8 *)malloc_type_realloc(v18, (int)v79, 0x100004077774924uLL);
      if (v80)
      {
        uint64_t v18 = v80;
        int v23 = v89;
        int v24 = v94;
        uint64_t v25 = v79;
        goto LABEL_24;
      }
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v6 = 1030;
        goto LABEL_8;
      }
      return 8;
    }
  }
  if (v15 <= 0)
  {
    int v28 = HIDWORD(v103);
    int v29 = SWORD2(v103);
    goto LABEL_108;
  }
LABEL_39:
  v18[(unsigned __int16)v15] = 0;
  if (!v4)
  {
    int v48 = PDashead((char *)v18, a1);
    if (v48)
    {
      if (v48 == 301)
      {
        LODWORD(v8_Block_object_dispose(&STACK[0x510], 8) = 1;
      }
      else if (v48 == 8)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 5115;
        }
        free(v8);
        free(__dst);
        free(v95);
        free(v96);
        uint64_t v86 = v18;
        goto LABEL_208;
      }
      int v68 = HIDWORD(v89);
      if (v48 == 302) {
        int v68 = 1;
      }
      HIDWORD(v89) = v68;
    }
LABEL_93:
    int v69 = v8[v22];
    if (v69 == 13 || v69 == 10)
    {
      int v71 = v8[v22 + 1];
      if (v71 == 10 || v71 == 13) {
        int v24 = 2;
      }
      else {
        int v24 = 1;
      }
    }
    else
    {
      int v24 = 1;
    }
    int v28 = HIDWORD(v103);
    int v29 = SWORD2(v103);
    __int16 v15 = 0;
    if (v24 + v22 > SWORD2(v103)) {
      __int16 v22 = WORD2(v103) + v24;
    }
    else {
      v22 += v24;
    }
    BOOL v4 = 1;
    uint64_t v25 = v97;
    goto LABEL_108;
  }
  LOBYTE(v93) = v24;
  if (*(unsigned char *)(a1 + 784) != 4)
  {
    int v45 = v17;
    int v46 = v16;
    uint64_t v47 = __dst;
    if ((unsigned __int16)strlen((const char *)v18) < 0x41uLL)
    {
      __strcpy_chk();
    }
    else
    {
      strncpy(__dst, (const char *)v18, 0x40uLL);
      __dst[64] = 0;
    }
    goto LABEL_61;
  }
  int v32 = PDasparse(v18, (uint64_t)__dst, (unsigned char *)&v101 + 1, &v101, (uint64_t)v96, &v102, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092), (uint64_t)v14);
  if (*(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092))
  {
    uint64_t v33 = 0;
    for (uint64_t i = 0; i != 12; ++i)
    {
      int v35 = *((unsigned __int8 *)v14 + v33);
      if ((v35 - 48) >= 0xA) {
        char v36 = -112;
      }
      else {
        char v36 = 0;
      }
      char v37 = v36 + 16 * v35;
      int v38 = *((unsigned __int8 *)v14 + v33 + 1);
      unsigned int v39 = v38 - 48;
      char v40 = v38 - 48 + v37;
      char v41 = v38 + v37 - 55;
      if (v39 < 0xA) {
        char v41 = v40;
      }
      *((unsigned char *)v14 + i) = v41;
      v33 += 2;
    }
  }
  unsigned int v42 = v90;
  BOOL v43 = (char)v90 > 19;
  int v44 = HIDWORD(v90);
  if (v32 == 5153)
  {
    int v44 = 1;
    unsigned int v42 = v90 + 1;
  }
  else
  {
    BOOL v43 = v32 == 5101;
  }
  if (!v43)
  {
    unint64_t v90 = __PAIR64__(v44, v42);
    int v45 = v17;
    int v46 = v16;
    uint64_t v47 = __dst;
LABEL_61:
    __int16 v49 = strlen(v47);
    uint64_t v50 = SLLngToA(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                      + 2069));
    __int16 v51 = (char *)v47;
    int v52 = v95;
    if (SLchcnv(v51, v49, v95, 1, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)
    {
      free(v91);
      free(__dst);
      free(v95);
      free(v92);
      free(v96);
      return 5111;
    }
    unsigned int v53 = PDhypstrip(v95, v99, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2068));
    unsigned __int8 v54 = SLcap((uint64_t)v95, 0, v53 - 1, v104, v50);
    if (v53)
    {
      uint64_t v55 = v53;
      int v56 = __dst;
      do
      {
        unsigned int v58 = *v52++;
        char v57 = v58;
        char v59 = v58 + 32;
        if ((*(_DWORD *)(v50 + 4 * v58) & 0x40000000) != 0) {
          char v57 = v59;
        }
        *v56++ = v57;
        --v55;
      }
      while (v55);
    }
    __dst[v53] = 0;
    uint64_t v60 = *(unsigned __int16 *)(a1 + 2074);
    uint64_t v61 = *(void *)(*(void *)pMCPbuff + 8 * v60);
    **(unsigned char **)(v61 + 216_Block_object_dispose(&STACK[0x510], 8) = 0;
    int v62 = PDadd(v61, __dst, (char)v101, SHIBYTE(v101), (char *)v96, v102, v99, (uint64_t)v104, v54, v60, v14);
    uint64_t v18 = v92;
    if (v62 == 5152)
    {
      int v62 = 0;
      HIDWORD(v8_Block_object_dispose(&STACK[0x510], 8) = 1;
      int v16 = v46;
      int v17 = v45;
    }
    else
    {
      int v16 = v46;
      if (v62 == 5107)
      {
        LOBYTE(v17) = v45;
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 5107;
        }
        int v81 = 1;
        int v8 = v91;
LABEL_163:
        uint64_t v85 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
        *(unsigned char *)(v85 + 2066) = v93;
        if (!*(unsigned char *)(v85 + 780)) {
          SLClose(v103);
        }
        if (v87 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5109;
        }
        if (v88 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
          *(_WORD *)(a1 + 2092) = 5115;
        }
        if (BYTE4(v89) && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5154;
        }
        if (BYTE4(v90) && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5153;
        }
        if (HIDWORD(v88) == 1 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5152;
        }
        if (v81 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5107;
        }
        if (v98 == 1 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5158;
        }
        if ((_BYTE)v17 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5157;
        }
        if ((_BYTE)v16 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 4;
          *(_WORD *)(a1 + 2092) = 5156;
        }
        free(v8);
        free(__dst);
        free(v95);
        free(v18);
        free(v96);
        free(v14);
        return 0;
      }
      int v17 = v45;
    }
    if (v62 == 5158) {
      int v63 = 0;
    }
    else {
      int v63 = v62;
    }
    if (v63 == 5156) {
      int v64 = 0;
    }
    else {
      int v64 = v63;
    }
    if (v64) {
      BOOL v65 = v64 == 5157;
    }
    else {
      BOOL v65 = 1;
    }
    int v8 = v91;
    if (!v65)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        goto LABEL_205;
      }
LABEL_206:
      free(v8);
      free(__dst);
      free(v95);
      uint64_t v84 = v18;
      goto LABEL_207;
    }
    if (v64 == 5157) {
      int v17 = 1;
    }
    if (v63 == 5156) {
      int v16 = 1;
    }
    int v66 = v98;
    if (v62 == 5158) {
      int v66 = 1;
    }
    int v98 = v66;
    uint64_t v67 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
    ++*(_WORD *)(v67 + 2112);
    goto LABEL_93;
  }
  if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
  {
    *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
    *(_WORD *)(a1 + 2092) = 5101;
  }
  free(v91);
  free(__dst);
  free(v95);
  uint64_t v84 = v92;
LABEL_207:
  free(v84);
  uint64_t v86 = v96;
LABEL_208:
  free(v86);
  uint64_t v83 = (void *)pMCPbuff;
LABEL_143:
  if (!*(unsigned char *)(*(void *)(*v83 + 8 * *(unsigned __int16 *)(a1 + 2074)) + 780)) {
    SLClose(v103);
  }
  return 8;
}

uint64_t PDashead(char *a1, uint64_t a2)
{
  BOOL v4 = (unsigned __int8 *)malloc_type_malloc(0x41uLL, 0xA5B6EE54uLL);
  if (!v4)
  {
    if (!*(_WORD *)(a2 + 2092) || *(int *)(a2 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a2 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a2 + 2092) = 1030;
      return result;
    }
    return 8;
  }
  uint64_t v5 = v4;
  int v6 = strlen(a1);
  if (v6 << 16 <= -65537)
  {
LABEL_3:
    free(v5);
    return 8;
  }
  int v8 = 0;
  int v54 = 0;
  int v9 = 0;
  int v10 = 0;
  __int16 v11 = 0;
  int v12 = (__int16)v6;
  LOWORD(v13) = -1;
  while (2)
  {
    __int16 v14 = v13;
    int v13 = v8;
    if ((char)v10 <= 0x18)
    {
      if (((1 << v10) & 0xAAAAAA) != 0)
      {
        if (a1[(__int16)v8] == 35)
        {
          ++v10;
          ++v9;
        }
      }
      else if (((1 << v10) & 0x1555554) != 0)
      {
        ++v10;
        __int16 v11 = v8;
      }
      else
      {
        if (a1[(__int16)v8] != 35) {
          goto LABEL_3;
        }
        ++v9;
        ++v10;
        __int16 v11 = v14 + 2;
      }
    }
    if ((char)v10 >= 24)
    {
      free(v5);
      return 303;
    }
    else
    {
      switch((char)v10)
      {
        case 2:
          if (SLstrncmp("#HEADER START", (unsigned __int8 *)a1, 13)) {
            goto LABEL_3;
          }
          int v10 = 2;
          goto LABEL_70;
        case 4:
          int v15 = v54;
          if (a1[v11] < 0x32u) {
            int v15 = 1;
          }
          int v54 = v15;
          int v10 = 4;
          goto LABEL_70;
        case 6:
          __strncpy_chk();
          LOBYTE(v16) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v17 = *v5;
          if ((v17 - 48) <= 9)
          {
            int v18 = 0;
            int v16 = 0;
            unsigned int v19 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v18++ == 0;
              if (!v20) {
                v16 *= 10;
              }
              int v16 = v17 + v16 - 48;
              int v21 = *v19++;
              int v17 = v21;
            }
            while ((v21 - 48) < 0xA);
          }
          __int16 v22 = (void *)pMCPbuff;
          *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2069) = v16;
          goto LABEL_39;
        case 8:
          __strncpy_chk();
          LOBYTE(v23) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v24 = *v5;
          if ((v24 - 48) <= 9)
          {
            int v25 = 0;
            int v23 = 0;
            int v26 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v25++ == 0;
              if (!v20) {
                v23 *= 10;
              }
              int v23 = v24 + v23 - 48;
              int v27 = *v26++;
              int v24 = v27;
            }
            while ((v27 - 48) < 0xA);
          }
          __int16 v22 = (void *)pMCPbuff;
          *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2084) = v23;
          goto LABEL_39;
        case 10:
          __strncpy_chk();
          LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v29 = *v5;
          if ((v29 - 48) <= 9)
          {
            int v30 = 0;
            int v28 = 0;
            int v31 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v30++ == 0;
              if (!v20) {
                v28 *= 10;
              }
              int v28 = v29 + v28 - 48;
              int v32 = *v31++;
              int v29 = v32;
            }
            while ((v32 - 48) < 0xA);
          }
          __int16 v22 = (void *)pMCPbuff;
          *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2085) = v28;
LABEL_39:
          switch((char)v10)
          {
            case 12:
              goto LABEL_59;
            case 14:
              goto LABEL_40;
            case 16:
              goto LABEL_46;
            case 18:
              goto LABEL_52;
            case 22:
              goto LABEL_61;
            default:
              goto LABEL_70;
          }
          goto LABEL_70;
        case 12:
          __int16 v22 = (void *)pMCPbuff;
LABEL_59:
          uint64_t v48 = *(void *)(*v22 + 8 * *(unsigned __int16 *)(a2 + 2074));
          *(unsigned char *)(v48 + 206_Block_object_dispose(&STACK[0x510], 8) = a1[v11];
          if ((_BYTE)v54)
          {
            *(unsigned char *)(v48 + 2092) = 0;
LABEL_61:
            __strncpy_chk();
            LOBYTE(v49) = 0;
            v5[(__int16)v13 - (uint64_t)v11] = 0;
            int v50 = *v5;
            if ((v50 - 48) <= 9)
            {
              int v51 = 0;
              int v49 = 0;
              int v52 = v5 + 1;
              do
              {
                BOOL v20 = (unsigned __int16)v51++ == 0;
                if (!v20) {
                  v49 *= 10;
                }
                int v49 = v50 + v49 - 48;
                int v53 = *v52++;
                int v50 = v53;
              }
              while ((v53 - 48) < 0xA);
            }
            *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2092) = v49;
            int v10 = 22;
          }
          else
          {
            int v54 = 0;
            int v10 = 12;
          }
LABEL_70:
          int v8 = v13 + 1;
          if (v12 >= (__int16)v13) {
            continue;
          }
          free(v5);
          if ((char)v9 <= 23) {
            return 8;
          }
          uint64_t result = 0;
          break;
        case 14:
LABEL_40:
          __strncpy_chk();
          LOWORD(v33) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v34 = *v5;
          if ((v34 - 48) <= 9)
          {
            int v35 = 0;
            int v33 = 0;
            char v36 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v35++ == 0;
              if (!v20) {
                v33 *= 10;
              }
              int v33 = v33 + v34 - 48;
              int v37 = *v36++;
              LOBYTE(v34) = v37;
            }
            while ((v37 - 48) < 0xA);
          }
          *(_WORD *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2086) = v33;
          goto LABEL_70;
        case 16:
LABEL_46:
          __strncpy_chk();
          LOBYTE(v3_Block_object_dispose(&STACK[0x510], 8) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v39 = *v5;
          if ((v39 - 48) <= 9)
          {
            int v40 = 0;
            int v38 = 0;
            char v41 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v40++ == 0;
              if (!v20) {
                v38 *= 10;
              }
              int v38 = v39 + v38 - 48;
              int v42 = *v41++;
              int v39 = v42;
            }
            while ((v42 - 48) < 0xA);
          }
          *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2090) = v38;
          goto LABEL_70;
        case 18:
LABEL_52:
          __strncpy_chk();
          LOBYTE(v43) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          int v44 = *v5;
          if ((v44 - 48) <= 9)
          {
            int v45 = 0;
            int v43 = 0;
            int v46 = v5 + 1;
            do
            {
              BOOL v20 = (unsigned __int16)v45++ == 0;
              if (!v20) {
                v43 *= 10;
              }
              int v43 = v44 + v43 - 48;
              int v47 = *v46++;
              int v44 = v47;
            }
            while ((v47 - 48) < 0xA);
          }
          *(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2091) = v43;
          goto LABEL_70;
        case 22:
          goto LABEL_61;
        case 23:
          if (SLstrncmp("HEADER END#", (unsigned __int8 *)&a1[v11], 11)) {
            goto LABEL_3;
          }
          int v10 = 23;
          goto LABEL_70;
        default:
          goto LABEL_70;
      }
    }
    return result;
  }
}

uint64_t PDwriteas(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 785) - 3 > 1) {
    return 8;
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168);
  uint64_t v71 = 0;
  unsigned int v70 = 0;
  __int16 v69 = 0;
  unsigned __int8 v68 = 0;
  char v67 = 0;
  __int16 v66 = 0;
  if (*(_WORD *)(a1 + 768))
  {
    unsigned int v70 = *(_DWORD *)(a1 + 772);
    if (SLSeek(v70, *(_DWORD *)(a1 + 776), 0) == 8)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v4 = 1015;
LABEL_11:
        *(_WORD *)(a1 + 2092) = v4;
        return result;
      }
      return 8;
    }
  }
  else if (SLOpen(a1 + 1042, a1 + 786, (int *)&v70, 0x602u) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v4 = 1012;
      goto LABEL_11;
    }
    return 8;
  }
  uint64_t v5 = malloc_type_malloc(0x882uLL, 0x79DF9D7DuLL);
  if (!v5)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    goto LABEL_50;
  }
  int v6 = v5;
  int v7 = malloc_type_malloc(0x41uLL, 0x4585AA91uLL);
  if (!v7)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    char v41 = v6;
    goto LABEL_49;
  }
  int v8 = v7;
  int v9 = (unsigned __int8 *)malloc_type_malloc(0x44uLL, 0xB0520871uLL);
  if (!v9)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    char v41 = v8;
    goto LABEL_49;
  }
  int v10 = v9;
  __int16 v11 = (char *)malloc_type_malloc(0x44uLL, 0x327353CCuLL);
  if (!v11)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    char v41 = v10;
    goto LABEL_49;
  }
  int v12 = v11;
  __dst = (char *)malloc_type_malloc(0x41uLL, 0x9D69AD1AuLL);
  if (!__dst)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    char v41 = v12;
    goto LABEL_49;
  }
  int v13 = malloc_type_malloc(0x801uLL, 0xB6FA792AuLL);
  if (!v13)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    free(v12);
    char v41 = __dst;
    goto LABEL_49;
  }
  __int16 v14 = v13;
  uint64_t __src = malloc_type_malloc(0x19uLL, 0x9B391059uLL);
  if (!__src)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    free(v12);
    free(__dst);
    char v41 = v14;
LABEL_49:
    free(v41);
LABEL_50:
    if (!*(_WORD *)(a1 + 768)) {
      SLClose(v70);
    }
    return 8;
  }
  uint64_t v60 = v14;
  uint64_t v61 = v12;
  char v57 = v8;
  if (*(unsigned char *)(a1 + 785) == 4)
  {
    qmemcpy(v6, "#HEADER START#2#", 16);
    PDitoa(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2069), (uint64_t)v8);
    strlen((const char *)v8);
    __strncpy_chk();
    __int16 v15 = strlen((const char *)v8);
    unsigned __int16 v16 = v15 + 17;
    v6[(unsigned __int16)(v15 + 16)] = 35;
    PDitoa(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2084), (uint64_t)v8);
    size_t v17 = strlen((const char *)v8);
    strncpy(&v6[v16], (const char *)v8, v17);
    unsigned __int16 v18 = v16 + strlen((const char *)v8);
    unsigned __int16 v19 = v18 + 1;
    v6[v18] = 35;
    PDitoa(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2085), (uint64_t)v8);
    size_t v20 = strlen((const char *)v8);
    strncpy(&v6[v19], (const char *)v8, v20);
    __int16 v21 = strlen((const char *)v8);
    v6[(unsigned __int16)(v19 + v21)] = 35;
    unsigned __int16 v22 = v19 + v21 + 2;
    v6[(unsigned __int16)(v19 + v21 + 1)] = *(unsigned char *)(*(void *)(*(void *)pMCPbuff
                                                                 + 8 * *(unsigned __int16 *)(a1 + 2074))
                                                     + 2068);
    unsigned __int16 v23 = v19 + v21 + 3;
    v6[v22] = 35;
    PDitoa(*(unsigned __int16 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2086), (uint64_t)v8);
    size_t v24 = strlen((const char *)v8);
    strncpy(&v6[v23], (const char *)v8, v24);
    unsigned __int16 v25 = v23 + strlen((const char *)v8);
    unsigned __int16 v26 = v25 + 1;
    v6[v25] = 35;
    PDitoa((unsigned __int16)*(char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2090), (uint64_t)v8);
    size_t v27 = strlen((const char *)v8);
    strncpy(&v6[v26], (const char *)v8, v27);
    unsigned __int16 v28 = v26 + strlen((const char *)v8);
    unsigned __int16 v29 = v28 + 1;
    v6[v28] = 35;
    PDitoa(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2091), (uint64_t)v8);
    size_t v30 = strlen((const char *)v8);
    strncpy(&v6[v29], (const char *)v8, v30);
    unsigned __int16 v31 = v29 + strlen((const char *)v8);
    unsigned __int16 v32 = v31 + 1;
    v6[v31] = 35;
    PDitoa(*(unsigned __int16 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2094), (uint64_t)v8);
    size_t v33 = strlen((const char *)v8);
    strncpy(&v6[v32], (const char *)v8, v33);
    unsigned __int16 v34 = v32 + strlen((const char *)v8);
    unsigned __int16 v35 = v34 + 1;
    v6[v34] = 35;
    unsigned int v36 = *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092);
    PDitoa(v36, (uint64_t)v8);
    size_t v37 = strlen((const char *)v8);
    strncpy(&v6[v35], (const char *)v8, v37);
    unsigned __int16 v38 = v35 + strlen((const char *)v8);
    int v12 = v61;
    v6[v38] = 35;
    int v39 = &v6[(unsigned __int16)(v38 + 1)];
    *(_DWORD *)(v39 + 7) = 591679045;
    *(void *)int v39 = *(void *)"HEADER END#";
    v6[(unsigned __int16)(v38 + 12)] = 13;
    v6[(unsigned __int16)(v38 + 13)] = 10;
    if (SLFWrite(v70, (unsigned __int16)(v38 + 14), v6, (unsigned int *)&v71 + 1) == 8)
    {
      free(v6);
      free(v8);
      free(v10);
      free(v61);
      int v40 = __dst;
LABEL_72:
      free(v40);
      free(__src);
      free(v60);
      if (!*(_WORD *)(a1 + 768)) {
        SLClose(v70);
      }
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v4 = 1011;
        goto LABEL_11;
      }
      return 8;
    }
  }
  else
  {
    unsigned int v36 = 0;
  }
  size_t __n = 2 * v36;
  char v59 = v10;
  *(_DWORD *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168) + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v42 = __dst;
  while (1)
  {
    int v43 = *(unsigned __int8 *)(a1 + 785);
    if (v43 != 3) {
      break;
    }
    if (PDgetrdwrd(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)), v42, (unsigned char *)&v66 + 1, &v67, &v71, &v66, &v69, (uint64_t)__src) == 8)goto LABEL_77; {
    uint64_t v53 = v66;
    }
    __int16 v54 = strlen(v42);
    if (SLchcnv(v42, v54, v6, 0, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)
    {
LABEL_80:
      free(v6);
      free(v57);
      free(v10);
      free(v12);
      free(v42);
      free(__src);
      free(v60);
      if (!*(_WORD *)(a1 + 768)) {
        SLClose(v70);
      }
      return 5111;
    }
    LOWORD(v45) = v53;
LABEL_70:
    v6[v53] = 13;
    v6[(unsigned __int16)(v45 + 1)] = 10;
    if (SLFWrite(v70, (unsigned __int16)(v45 + 2), v6, (unsigned int *)&v71 + 1) == 8)
    {
      free(v6);
      free(v57);
      free(v10);
      free(v12);
      int v40 = v42;
      goto LABEL_72;
    }
  }
  if (v43 != 4) {
    return 8;
  }
  if (PDgetrdraw(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)), (uint64_t)v10, &v68) != 8)
  {
    *int v6 = 35;
    __strncpy_chk();
    v12[v68 - 3] = 0;
    __int16 v44 = strlen(v12);
    if (SLchcnv(v12, v44, (unsigned __int8 *)v42, 0, *(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)goto LABEL_80; {
    __strcpy_chk();
    }
    uint64_t v45 = v68;
    uint64_t v46 = *v10;
    uint64_t v47 = v10[1];
    uint64_t v48 = v47 - v46 + (v46 << 8);
    char v49 = *(unsigned char *)(*(void *)(v2 + 48) + 20 * (int)v48 + 19);
    v6[(unsigned __int16)(v68 - 2)] = 35;
    v6[(unsigned __int16)(v45 - 1)] = v49 & 1 | 0x30;
    if (*(unsigned char *)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092))
    {
      v6[v45] = 35;
      if (v36)
      {
        uint64_t v50 = 20 * v47 + 5100 * v46;
        uint64_t v51 = v36;
        int v52 = __src;
        do
        {
          snprintf(__str, 3uLL, "%02X", *(unsigned __int8 *)(*(void *)(v2 + 48) + v50));
          char v65 = 0;
          *v52++ = *(_WORD *)__str;
          ++v50;
          --v51;
        }
        while (v51);
      }
      memcpy(&v6[v45 + 1], __src, __n);
      LODWORD(v45) = v45 + 1 + __n;
      int v10 = v59;
      int v42 = __dst;
    }
    if ((*(unsigned char *)(*(void *)(v2 + 48) + 20 * (int)v48 + 19) & 2) != 0)
    {
      uint64_t v55 = (v45 + 1);
      v6[v45] = 35;
      PDgetalt(v60, *(unsigned __int16 *)(*(void *)(v2 + 48) + 20 * v48 + 16), *(_DWORD *)(*(void *)(v2 + 48) + 20 * v48 + 12), *(unsigned __int16 *)(a1 + 2074));
      int v42 = __dst;
      __int16 v56 = *(_WORD *)(*(void *)(v2 + 48) + 20 * v48 + 16);
      strncpy(&v6[v55], (const char *)v60, v56);
      LOWORD(v45) = v56 + v55;
    }
    int v12 = v61;
    uint64_t v53 = (unsigned __int16)v45;
    goto LABEL_70;
  }
LABEL_77:
  if (!*(_WORD *)(a1 + 768)) {
    SLClose(v70);
  }
  free(v6);
  free(v57);
  free(v10);
  free(v12);
  free(v42);
  free(__src);
  free(v60);
  uint64_t result = 0;
  **(unsigned char **)(*(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 216_Block_object_dispose(&STACK[0x510], 8) = 0;
  return result;
}

uint64_t PDfiletype(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x7D1uLL, 0x1C7A8BD2uLL);
  if (!v2)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v6 = 1030;
LABEL_26:
      *(_WORD *)(a1 + 2092) = v6;
      return result;
    }
    return 8;
  }
  uint64_t v3 = v2;
  *(void *)__int16 v11 = 0;
  if (*(_WORD *)(a1 + 768))
  {
    v11[1] = *(_DWORD *)(a1 + 772);
    unsigned int v4 = v11[1];
    if (SLSeek(v11[1], *(_DWORD *)(a1 + 776), 0) == 8) {
      goto LABEL_23;
    }
  }
  else
  {
    if (SLOpen(a1 + 256, a1, &v11[1], 0) == 8)
    {
      if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      __int16 v7 = 1012;
      goto LABEL_12;
    }
    unsigned int v4 = v11[1];
  }
  if (SLFRead(v4, 2000, v3, (unsigned int *)v11) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
      *(_WORD *)(a1 + 2092) = 1010;
    }
    free(v3);
    if (!*(_WORD *)(a1 + 768)) {
      SLClose(v11[1]);
    }
    return 8;
  }
  if (*(_WORD *)(a1 + 768))
  {
    if (SLSeek(v11[1], *(_DWORD *)(a1 + 776), 0) == 8)
    {
LABEL_23:
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v6 = 1015;
        goto LABEL_26;
      }
      return 8;
    }
  }
  else
  {
    SLClose(v11[1]);
  }
  if (SLstrncmp(v3, "#HEADER START", 13))
  {
    if (SLstrncmp(v3 + 414, "#HEADER COMP START", 18))
    {
      if (v11[0] < 1)
      {
        int v8 = 0;
      }
      else
      {
        int v8 = *v3;
        if (*v3)
        {
          __int16 v9 = 0;
          do
            int v8 = ++v9;
          while (v11[0] > v9 && v3[v9]);
        }
      }
      if (v8 < SLOWORD(v11[0]))
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7) {
          goto LABEL_13;
        }
        *(_DWORD *)(a1 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v7 = 5118;
LABEL_12:
        *(_WORD *)(a1 + 2092) = v7;
LABEL_13:
        free(v3);
        return 8;
      }
      char v10 = 3;
    }
    else
    {
      char v10 = 5;
    }
  }
  else
  {
    char v10 = 4;
  }
  *(unsigned char *)(a1 + 784) = v10;
  *(unsigned char *)(a1 + 785) = v10;
  free(v3);
  return 0;
}

uint64_t PDinit()
{
  pMCPbuff = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x90040FD959A3FuLL);
  if (pMCPbuff)
  {
    BOOL v0 = malloc_type_calloc(0x1AuLL, 8uLL, 0x10040436913F5uLL);
    *(void *)pMCPbuff = v0;
    if (v0)
    {
      int v1 = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
      uint64_t v2 = (void *)pMCPbuff;
      *(void *)(pMCPbuff + _Block_object_dispose(&STACK[0x510], 8) = v1;
      if (v1)
      {
        *int v1 = 0;
        uint64_t v3 = malloc_type_calloc(0x1AuLL, 2uLL, 0x1000040BDFB0063uLL);
        unsigned int v4 = (void *)pMCPbuff;
        *(void *)(pMCPbuff + 16) = v3;
        if (v3)
        {
          _WORD *v3 = 0;
          uint64_t v5 = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
          __int16 v6 = (void *)pMCPbuff;
          *(void *)(pMCPbuff + 24) = v5;
          if (v5)
          {
            *uint64_t v5 = 0;
            __int16 v7 = malloc_type_calloc(6uLL, 2uLL, 0x1000040BDFB0063uLL);
            int v8 = (void *)pMCPbuff;
            *(void *)(pMCPbuff + 32) = v7;
            if (v7)
            {
              *__int16 v7 = 0;
              __int16 v9 = malloc_type_calloc(6uLL, 8uLL, 0x10040436913F5uLL);
              char v10 = (void *)pMCPbuff;
              *(void *)(pMCPbuff + 40) = v9;
              if (v9)
              {
                uint64_t result = 0;
                pdmcpsta = 1;
                return result;
              }
              free(v10);
              free(*(void **)pMCPbuff);
              free(*(void **)(pMCPbuff + 8));
              free(*(void **)(pMCPbuff + 16));
              free(*(void **)(pMCPbuff + 24));
              int v12 = *(void **)(pMCPbuff + 40);
            }
            else
            {
              free(v8);
              free(*(void **)pMCPbuff);
              free(*(void **)(pMCPbuff + 8));
              free(*(void **)(pMCPbuff + 16));
              int v12 = *(void **)(pMCPbuff + 24);
            }
          }
          else
          {
            free(v6);
            free(*(void **)pMCPbuff);
            free(*(void **)(pMCPbuff + 8));
            int v12 = *(void **)(pMCPbuff + 16);
          }
        }
        else
        {
          free(v4);
          free(*(void **)pMCPbuff);
          int v12 = *(void **)(pMCPbuff + 8);
        }
      }
      else
      {
        free(v2);
        int v12 = *(void **)pMCPbuff;
      }
    }
    else
    {
      int v12 = (void *)pMCPbuff;
    }
    free(v12);
  }
  return 1030;
}

void PDterm()
{
  free(*(void **)pMCPbuff);
  *(void *)pMCPbuff = 0;
  free(*(void **)(pMCPbuff + 8));
  uint64_t v0 = pMCPbuff;
  *(void *)(pMCPbuff + _Block_object_dispose(&STACK[0x510], 8) = 0;
  free(*(void **)(v0 + 16));
  uint64_t v1 = pMCPbuff;
  *(void *)(pMCPbuff + 16) = 0;
  free(*(void **)(v1 + 24));
  uint64_t v2 = pMCPbuff;
  *(void *)(pMCPbuff + 24) = 0;
  free(*(void **)(v2 + 32));
  uint64_t v3 = pMCPbuff;
  *(void *)(pMCPbuff + 32) = 0;
  free(*(void **)(v3 + 40));
  free((void *)pMCPbuff);
  pMCPbuff = 0;
  pdmcpsta = 0;
}

uint64_t baseLanguageForLanguage(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return v1;
  }
  uint64_t v2 = (void *)[MEMORY[0x263EFF960] canonicalLanguageIdentifierFromString:a1];
  if (!v2) {
    return v1;
  }
  uint64_t v3 = v2;
  uint64_t v4 = [v2 rangeOfString:@"-"];
  if (!v5) {
    return (uint64_t)v3;
  }
  return [v3 substringToIndex:v4];
}

uint64_t PDRDinit(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 2064);
  if (*(_WORD *)(a1 + 2064))
  {
    if (v2 - 96 < 0xFFFFFFA1) {
      return 8;
    }
  }
  else
  {
    unsigned int v2 = 10;
    *(_WORD *)(a1 + 2064) = 10;
  }
  uint64_t v3 = *(void *)(a1 + 2168);
  *(_DWORD *)(v3 + _Block_object_dispose(&STACK[0x510], 8) = v2 << 10;
  unint64_t v4 = (1869917735 * (unint64_t)(v2 << 15)) >> 38;
  *(_WORD *)(v3 + 2) = v4;
  if (v2 <= 0x5E) {
    __int16 v5 = 101376 * v2 / 0x93;
  }
  else {
    __int16 v5 = -36;
  }
  *(_WORD *)(v3 + 6) = v5;
  __int16 v6 = ((unsigned __int16)v4 >> 6) + 10;
  if ((unsigned __int16)v4 > 0x5BFu) {
    __int16 v6 = 32;
  }
  *(_WORD *)(v3 + 14) = v6;
  *(_WORD *)(v3 + 4) = (unsigned __int16)v4 >> 1;
  size_t v7 = 2 * ((unsigned __int16)v4 >> 3) + ((unsigned __int16)v4 >> 3);
  *(_WORD *)(a1 + 2116) = 3 * ((unsigned __int16)v4 >> 3);
  *(_WORD *)(v3 + 12) = 3 * ((unsigned __int16)v4 >> 3);
  size_t v8 = *(unsigned __int16 *)(v3 + 6);
  __int16 v9 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v3 + 2), 0x6DEECAECuLL);
  *(void *)(v3 + 32) = v9;
  if (!v9)
  {
LABEL_21:
    free((void *)v3);
    return 8;
  }
  char v10 = malloc_type_calloc(1uLL, v8, 0x100004077774924uLL);
  *(void *)(v3 + 40) = v10;
  if (!v10)
  {
LABEL_20:
    free(*(void **)(v3 + 32));
    goto LABEL_21;
  }
  __int16 v11 = malloc_type_calloc(v7, 0x14uLL, 0x1000040A86A77D5uLL);
  *(void *)(v3 + 4_Block_object_dispose(&STACK[0x510], 8) = v11;
  if (!v11)
  {
    free(*(void **)(v3 + 40));
    *(void *)(v3 + 40) = 0;
    goto LABEL_20;
  }
  *(_WORD *)(v3 + 56) = *(_WORD *)(a1 + 2116);
  *(_WORD *)(v3 + 5_Block_object_dispose(&STACK[0x510], 8) = 0;
  int v12 = *(unsigned __int16 *)(v3 + 4);
  unsigned __int16 v13 = 0x8000;
  do
  {
    unsigned __int16 v14 = v13;
    int v15 = v13;
    v13 >>= 1;
  }
  while ((v15 & v12) == 0);
  *(_WORD *)(v3 + 16) = 2 * v14 - 1;
  if (v12)
  {
    unint64_t v16 = 0;
    uint64_t v17 = *(void *)(v3 + 32);
    do
      *(_WORD *)(v17 + 2 * v16++) = -1;
    while (v16 < *(unsigned __int16 *)(v3 + 4));
  }
  uint64_t result = 0;
  *(_DWORD *)(v3 + 22) = 0;
  *(_WORD *)(a1 + 2104) = *(_WORD *)(v3 + 12);
  __int16 v19 = *(_WORD *)(v3 + 6);
  *(_WORD *)(a1 + 2106) = v19;
  *(_WORD *)(a1 + 210_Block_object_dispose(&STACK[0x510], 8) = v19;
  return result;
}

_WORD *CalculateSize(_WORD *result, _WORD *a2, __int16 *a3, _WORD *a4, _WORD *a5, int a6)
{
  *uint64_t result = 32 * a6 / 0x93u;
  unsigned int v6 = 99 * a6 / 0x93u;
  if ((unsigned __int16)v6 > 0xFFDCu) {
    LOWORD(v6) = -36;
  }
  *a2 = v6;
  if ((unsigned __int16)*result <= 0x5BFu) {
    __int16 v7 = (*result >> 6) + 10;
  }
  else {
    __int16 v7 = 32;
  }
  *a3 = v7;
  unsigned int v8 = (unsigned __int16)*result;
  *a4 = *result >> 1;
  *a5 = 3 * (v8 >> 3);
  return result;
}

uint64_t InitializeMask(uint64_t result)
{
  unsigned __int16 v1 = 0x8000;
  do
  {
    unsigned __int16 v2 = v1;
    unsigned __int16 v3 = v1;
    v1 >>= 1;
  }
  while ((v3 & *(_WORD *)(result + 4)) == 0);
  *(_WORD *)(result + 16) = 2 * v2 - 1;
  return result;
}

uint64_t PDgetrdwrd(uint64_t a1, char *__dst, unsigned char *a3, unsigned char *a4, _DWORD *a5, unsigned char *a6, _WORD *a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 2168);
  if (*(unsigned __int16 *)(v8 + 20) >= *(unsigned __int16 *)(a1 + 2112)) {
    return 8;
  }
  uint64_t v16 = *(void *)(v8 + 32);
  uint64_t v17 = *(unsigned __int16 *)(v8 + 18);
  unsigned int v18 = *(unsigned __int16 *)(v16 + 2 * v17);
  if (v18 >= 0xFFFE)
  {
    do
    {
      LODWORD(v17) = v17 + 1;
      *(_WORD *)(v8 + 1_Block_object_dispose(&STACK[0x510], 8) = v17;
      unsigned int v18 = *(unsigned __int16 *)(v16 + 2 * (unsigned __int16)v17);
    }
    while (v18 > 0xFFFD);
  }
  if (*(unsigned __int8 *)(*(void *)(v8 + 40) + v18 + 2) >= 0x40u) {
    size_t v19 = 64;
  }
  else {
    size_t v19 = *(unsigned __int8 *)(*(void *)(v8 + 40) + v18 + 2);
  }
  *a6 = v19;
  strncpy(__dst, (const char *)(*(void *)(v8 + 40) + v18 + 3), v19);
  __dst[*a6] = 0;
  unint64_t v20 = *(unsigned __int8 *)(*(void *)(v8 + 40) + v18 + 1)
      - (unint64_t)*(unsigned __int8 *)(*(void *)(v8 + 40) + v18)
      + ((unint64_t)*(unsigned __int8 *)(*(void *)(v8 + 40) + v18) << 8);
  *a3 = *(unsigned char *)(*(void *)(v8 + 48) + 20 * v20 + 19) & 1;
  char v21 = *(unsigned char *)(*(void *)(v8 + 48) + 20 * v20 + 19);
  *a4 = v21 & 2;
  if ((v21 & 2) != 0)
  {
    uint64_t v25 = *(void *)(v8 + 48) + 20 * (int)v20;
    int v22 = *(_DWORD *)(v25 + 12);
    __int16 v23 = *(_WORD *)(v25 + 16);
  }
  else
  {
    int v22 = 0;
    __int16 v23 = 0;
  }
  uint64_t result = 0;
  *a5 = v22;
  *a7 = v23;
  uint64_t v26 = *(void *)(v8 + 48) + 20 * (int)v20;
  uint64_t v27 = *(void *)v26;
  *(_DWORD *)(a8 + _Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v26 + 8);
  *(void *)a8 = v27;
  ++*(_WORD *)(v8 + 18);
  ++*(_WORD *)(v8 + 20);
  return result;
}

uint64_t PDgetrdraw(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(a1 + 2168);
  if (*(unsigned __int16 *)(v3 + 20) >= *(unsigned __int16 *)(a1 + 2112)) {
    return 8;
  }
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 18);
  unsigned int v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  if (v6 >= 0xFFFE)
  {
    do
    {
      LODWORD(v5) = v5 + 1;
      *(_WORD *)(v3 + 1_Block_object_dispose(&STACK[0x510], 8) = v5;
      unsigned int v6 = *(unsigned __int16 *)(v4 + 2 * (unsigned __int16)v5);
    }
    while (v6 > 0xFFFD);
  }
  int v7 = 0;
  *a3 = *(unsigned char *)(*(void *)(v3 + 40) + v6 + 2) + 3;
  do
  {
    *(unsigned char *)(a2 + v7) = *(unsigned char *)(*(void *)(v3 + 40)
                                                    + *(unsigned __int16 *)(*(void *)(v3 + 32)
                                                                          + 2 * *(unsigned __int16 *)(v3 + 18))
                                                    + (unint64_t)v7);
    ++v7;
  }
  while (*a3 >= v7);
  uint64_t result = 0;
  ++*(_WORD *)(v3 + 18);
  ++*(_WORD *)(v3 + 20);
  return result;
}

uint64_t PDcmp(unsigned char *a1, char *a2, int a3, uint64_t a4)
{
  while (2)
  {
    uint64_t v4 = *a2;
    char v5 = v4 + 32;
    if ((*(_DWORD *)(a4 + 4 * v4) & 0x40000000) == 0) {
      char v5 = *a2;
    }
    unsigned int v6 = ~(v4 >> 2) & 0x20;
    unsigned __int8 v7 = v5 | v6;
    while (1)
    {
      unsigned int v8 = *a1;
      int v9 = ~(v8 >> 2) & 0x20 | v8;
      if (v9 == v7) {
        break;
      }
      if (v8 != a3)
      {
        if (v4 == a3) {
          goto LABEL_10;
        }
        return v9 - (v6 | v4);
      }
      ++a1;
    }
    if (*a1)
    {
      ++a1;
LABEL_10:
      ++a2;
      continue;
    }
    return 0;
  }
}

uint64_t PDcapcmp(unsigned char *a1, unsigned __int8 *a2, int a3)
{
  while (2)
  {
    int v3 = *a1;
    while (1)
    {
      int v4 = *a2;
      uint64_t v5 = (v3 - v4);
      if (v3 == v4) {
        break;
      }
      if (v3 == a3) {
        goto LABEL_8;
      }
      if (v4 != a3) {
        return v5;
      }
      ++a2;
    }
    if (*a1)
    {
      ++a2;
LABEL_8:
      ++a1;
      continue;
    }
    return 0;
  }
}

uint64_t PDsearch(uint64_t a1, char *__s, _WORD *a3, __int16 *a4, int a5, uint64_t a6, const void *a7)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 2168);
  __int16 v12 = *(_WORD *)(v11 + 14);
  int v67 = 0;
  uint64_t v68 = 0;
  uint64_t v13 = *(void *)(a1 + 2128);
  unsigned __int16 v14 = strlen(__s);
  uint64_t v15 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  uint64_t v16 = v15;
  if (v14)
  {
    uint64_t v17 = v14;
    unsigned int v18 = (unsigned char *)v13;
    size_t v19 = __s;
    do
    {
      unsigned int v21 = *v19++;
      char v20 = v21;
      char v22 = v21 + 32;
      if ((*(_DWORD *)(v15 + 4 * v21) & 0x40000000) != 0) {
        char v20 = v22;
      }
      *v18++ = v20;
      --v17;
    }
    while (v17);
  }
  char v65 = __s;
  *(unsigned char *)(v13 + v14) = 0;
  SLfun(v13, 0, (__int16)(v14 - 1), (unsigned __int16 *)&v67 + 1, &v67);
  int v23 = 0;
  unsigned int v24 = *(unsigned __int16 *)(v11 + 4);
  if (v24 > (unsigned __int16)(v67 & *(_WORD *)(v11 + 16))) {
    unsigned int v24 = 0;
  }
  unsigned int v25 = (unsigned __int16)(v67 & *(_WORD *)(v11 + 16)) - v24;
  int v26 = BYTE2(v67);
  int v27 = 3 - BYTE2(v67);
  *a4 = -1;
  int v64 = a3;
  *a3 = -1;
  *(_WORD *)(a1 + 2110) = 0;
  *(_WORD *)(a1 + 2114) = -1;
  int v28 = 2 * v26;
  while (v12)
  {
    v27 += v28;
    int v29 = *(unsigned __int16 *)(v11 + 16) & (v25 + v27);
    LOWORD(v67) = v29;
    unsigned int v30 = *(unsigned __int16 *)(v11 + 4);
    if (v30 <= (unsigned __int16)v29)
    {
      v29 -= v30;
      LOWORD(v67) = v29;
    }
    if ((unsigned __int16)v25 == (unsigned __int16)v29)
    {
      if ((_WORD)v25) {
        int v29 = v25 - 1;
      }
      else {
        int v29 = 1;
      }
      LOWORD(v67) = v29;
    }
    --v12;
    uint64_t v31 = *(unsigned __int16 *)(*(void *)(v11 + 32) + 2 * (unsigned __int16)v25);
    if (v31 < 0xFFFE)
    {
      int v61 = v23;
      uint64_t v32 = *(void *)(v11 + 40);
      uint64_t v33 = v32 + *(unsigned __int16 *)(*(void *)(v11 + 32) + 2 * (unsigned __int16)v25);
      uint64_t v34 = *(unsigned __int8 *)(v33 + 2);
      unsigned __int16 v60 = *(unsigned __int8 *)(v33 + 1) - *(unsigned __int8 *)(v32 + v31) + (*(unsigned __int8 *)(v32 + v31) << 8);
      __strncpy_chk();
      v69[v34] = 0;
      unsigned int v35 = PDhypstrip(v69, &v68, *(unsigned __int8 *)(a1 + 2068));
      int v36 = *(unsigned __int8 *)(a1 + 2068);
      if (a5 == 3)
      {
        size_t v37 = v69;
        unsigned __int16 v38 = v65;
        int v23 = v61;
        while (2)
        {
          int v39 = *v38;
          while (1)
          {
            int v40 = *v37;
            if (v39 == v40) {
              break;
            }
            if (v39 == v36) {
              goto LABEL_31;
            }
            if (v40 != v36) {
              goto LABEL_52;
            }
            ++v37;
          }
          if (*v38)
          {
            ++v37;
LABEL_31:
            ++v38;
            continue;
          }
          break;
        }
        if (!*(unsigned char *)(a1 + 2092))
        {
          uint64_t result = 0;
LABEL_57:
          *int v64 = v25;
          return result;
        }
        uint64_t result = memcmp((const void *)(*(void *)(v11 + 48) + 20 * v60), a7, *(unsigned __int8 *)(a1 + 2092));
        if (!result) {
          goto LABEL_57;
        }
      }
      else
      {
        unsigned int v59 = v35;
        int v23 = v61;
        if (!PDcmp(v65, v69, v36, v16))
        {
          int v23 = v61 + 1;
          *int v64 = v25;
          if (a5 != 2)
          {
            if (a5 != 1) {
              break;
            }
            int v41 = *(unsigned __int8 *)(a6 + 42);
            if (v41 == 1)
            {
              char v42 = v59;
              if ((*(unsigned char *)(*(void *)(v11 + 48) + 20 * v60 + 19) & 1) == 0) {
                goto LABEL_52;
              }
            }
            else
            {
              char v42 = v59;
              if (v41 == 2 && (*(unsigned char *)(*(void *)(v11 + 48) + 20 * v60 + 19) & 1) != 0) {
                goto LABEL_52;
              }
            }
            *(unsigned char *)(*(void *)(*(void *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 71) = SLcap((uint64_t)v69, 0, (v42 - 1), (void *)(*(void *)(*(void *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 80), v16);
            if (v59)
            {
              uint64_t v43 = v59;
              __int16 v44 = v69;
              uint64_t v45 = (unsigned char *)v13;
              do
              {
                unsigned int v47 = *v44++;
                char v46 = v47;
                char v48 = v47 + 32;
                if ((*(_DWORD *)(v16 + 4 * v47) & 0x40000000) != 0) {
                  char v46 = v48;
                }
                *v45++ = v46;
                --v43;
              }
              while (v43);
            }
            *(unsigned char *)(v13 + v59) = 0;
            *(void *)(*(void *)(*(void *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 8_Block_object_dispose(&STACK[0x510], 8) = v68;
            __strcpy_chk();
            uint64_t v49 = *(void *)(v11 + 48);
            char v50 = *(unsigned char *)(v49 + 20 * v60 + 19);
            uint64_t v51 = *(void *)(*(void *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50));
            *(unsigned char *)(v51 + 70) = v50 & 1;
            if ((v50 & 2) != 0)
            {
              uint64_t v53 = v49 + 20 * v60;
              *(_DWORD *)(v51 + 96) = *(_DWORD *)(v53 + 12);
              __int16 v52 = *(_WORD *)(v53 + 16);
            }
            else
            {
              __int16 v52 = 0;
              *(_DWORD *)(v51 + 96) = 0;
            }
            *(_WORD *)(v51 + 100) = v52;
            *(_WORD *)(v51 + 66) = *(_WORD *)(a1 + 2162);
            *(unsigned char *)(v51 + 72) = *(unsigned char *)(a1 + 2069);
            __int16 v54 = (uint64_t *)(v49 + 20 * v60);
            uint64_t v55 = *v54;
            *(_DWORD *)(v51 + 110) = *((_DWORD *)v54 + 2);
            *(void *)(v51 + 102) = v55;
            uint64_t v56 = *(unsigned __int16 *)(a6 + 50);
            uint64_t v57 = *(void *)(*(void *)(a6 + 104) + 8 * v56);
            *(_WORD *)(v57 + 6_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(a1 + 2084);
            *(_DWORD *)(v57 + 74) = *(_DWORD *)(a1 + 2086);
            *(_WORD *)(a6 + 50) = v56 + 1;
            if (*(unsigned __int16 *)(a6 + 48) == (unsigned __int16)(v56 + 1)) {
              return 5113;
            }
          }
        }
      }
LABEL_52:
      unsigned int v25 = (unsigned __int16)v67;
    }
    else
    {
      if (*a4 == -1) {
        *a4 = v25;
      }
      unsigned int v25 = v29;
      if (v31 == 0xFFFF) {
        break;
      }
    }
  }
  if ((_WORD)v23) {
    return 0;
  }
  else {
    return 5112;
  }
}

uint64_t PDSFcorrec(char *__src, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(__int16 *)(a4 + 42);
  if (*(__int16 *)(a4 + 40) > v4) {
    return 0;
  }
  unsigned int v7 = a2;
  unsigned int v8 = *(char **)(*(void *)(a4 + 32) + 16);
  int v9 = strcpy(v8, __src);
  size_t v10 = strlen(v9);
  *(_WORD *)(a4 + 2152) = v10;
  int v11 = *(__int16 *)(a4 + 40);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 136);
  if (*(unsigned __int8 *)(a4 + 2148) == 255)
  {
    *(unsigned char *)(a4 + 2149) = v12;
    *(unsigned char *)(a4 + 3164) = 0;
  }
  __int16 v78 = 0;
  BOOL v14 = v7 < 2 && v11 == 0;
  int v15 = *(unsigned __int8 *)(a4 + 2148);
  if (v15 == v12)
  {
    LOWORD(v16) = v11;
LABEL_12:
    if ((__int16)v11 < (__int16)v16) {
      PDSFcorsrt(__src, (__int16)v11, (__int16)(v16 - 1), a3, a4);
    }
    return 0;
  }
  int v76 = 0;
  __dst = v8 + 2;
  int v65 = v11;
  char v66 = !v14;
  int v18 = v11;
  LOWORD(v16) = v11;
  uint64_t v71 = v12;
  int v75 = v4;
  while (2)
  {
    if (*(unsigned __int8 *)(a4 + 2149) == v15)
    {
      LOWORD(v11) = v18;
      goto LABEL_12;
    }
    *(unsigned char *)(a4 + 214_Block_object_dispose(&STACK[0x510], 8) = v15 + 1;
    *(_WORD *)(a4 + 2124) = 0;
    size_t v19 = (unsigned __int8 *)(*(void *)(a3 + 128) + (char)(v15 + 1));
    *(_WORD *)(a4 + 2144) = *v19;
    char v20 = &v19[v12];
    int v74 = *v20;
    *(_WORD *)(a4 + 2146) = v74;
    unsigned int v21 = &v20[v12];
    *(_WORD *)(a4 + 2136) = *v21;
    char v22 = &v21[v12];
    *(_WORD *)(a4 + 213_Block_object_dispose(&STACK[0x510], 8) = *v22;
    int v23 = &v22[v12];
    *(_WORD *)(a4 + 2140) = *v23;
    unsigned int v24 = &v23[v12];
    *(_WORD *)(a4 + 2142) = *v24;
    unsigned int v25 = &v24[v12];
    *(_WORD *)(a4 + 2134) = *v25;
    int v26 = &v25[v12];
    *(_WORD *)(a4 + 2154) = *v26;
    int v27 = &v26[v12];
    *(_WORD *)(a4 + 2156) = *v27;
    int v28 = &v27[v12];
    *(_WORD *)(a4 + 215_Block_object_dispose(&STACK[0x510], 8) = *v28;
    int v29 = &v28[v12];
    *(_WORD *)(a4 + 2160) = *v29;
    int v72 = v18;
    int v73 = v29[v12];
    if ((v15 + 1) == 2)
    {
      size_t v70 = v10;
      if (*(_WORD *)(a3 + 104) && (__int16)v10 >= 1)
      {
        uint64_t v30 = 0;
        __int16 v31 = 0;
        uint64_t v69 = (unsigned __int16)v10;
        LOWORD(v32) = *(_WORD *)(a4 + 2162);
        do
        {
          __int16 v33 = 0;
          uint64_t v34 = (unsigned __int8 *)&v8[v30];
          do
          {
            if ((int)SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)(((__int16)v32 + v33) >> 1)), v34, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)(((__int16)v32 + v33) >> 1))) >= 0)signed int v32 = ((__int16)v32 + v33) >> 1; {
            else
            }
              __int16 v33 = ((__int16)v32 + v33) >> 1;
          }
          while ((__int16)v32 - v33 > 1);
          LOWORD(v35) = v32 - (*(unsigned __int16 *)(a4 + 2162) == (unsigned __int16)v32);
          int v36 = *(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)v35);
          do
          {
            if (!SLstrncmp(v36, v34, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)v35))
              && v31 <= 999)
            {
              uint64_t v37 = a4 + v31;
              *(unsigned char *)(v37 + 2164) = v70 - v30;
              v31 += 2;
              *(unsigned char *)(v37 + 2165) = v35;
            }
            signed int v35 = (__int16)(v35 + 1);
            signed int v32 = *(__int16 *)(a4 + 2162);
            if (v35 >= v32) {
              break;
            }
            int v36 = *(unsigned char **)(*(void *)(a3 + 160) + 8 * v35);
          }
          while (*v36 <= *v34);
          ++v30;
        }
        while (v30 != v69);
      }
      else
      {
        __int16 v31 = 0;
      }
      uint64_t v38 = a4 + 2164;
      *(unsigned char *)(v38 + v31) = -1;
      *(unsigned char *)(v38 + (__int16)(v31 + 1)) = -1;
      size_t v10 = v70;
    }
    do
    {
      if (*(unsigned char *)(a3 + 55) != 1) {
        goto LABEL_48;
      }
      if (*(unsigned char *)(a4 + 3504))
      {
        if ((v10 & 0x8000) == 0) {
          memmove(__dst, v8, (unsigned __int16)(v10 + 1));
        }
        *(_WORD *)unsigned int v8 = 25966;
        size_t v10 = strlen(v8);
        char v39 = 0;
        goto LABEL_41;
      }
      if (*v8 == 110 && v8[1] == 101 && (__int16)v10 >= 3)
      {
        size_t v10 = (v10 - 2);
        strcpy(v8, (const char *)__dst);
        char v39 = 1;
LABEL_41:
        *(unsigned char *)(a4 + 3504) = v39;
      }
LABEL_48:
      if (*(_WORD *)(a4 + 40)) {
        BOOL v41 = 1;
      }
      else {
        BOOL v41 = (__int16)v10 <= 8;
      }
      if (v41 && *(_WORD *)(a4 + 2140) == 2) {
        *(_WORD *)(a4 + 2140) = 1;
      }
      unsigned int v42 = *(unsigned __int8 *)(a4 + 2148);
      if (v42 == 14 && *(_WORD *)(a4 + 2140) == 1) {
        *(_WORD *)(a4 + 2140) = 0;
      }
      int v43 = *(unsigned __int8 *)(a3 + 55);
      if (v43 != 5 && v43 != 16)
      {
        int v48 = *(unsigned __int16 *)(a4 + 2146);
        if (v48 == 1)
        {
          __int16 v49 = 3;
          goto LABEL_81;
        }
        if (v48 != 8 && *(_WORD *)(a4 + 2134))
        {
          if ((char)v42 < 12)
          {
            __int16 v49 = 1;
LABEL_81:
            *(_WORD *)(a4 + 2134) = v49;
            goto LABEL_63;
          }
          if (v42 <= 0xD)
          {
            __int16 v49 = 2;
            goto LABEL_81;
          }
        }
      }
LABEL_63:
      BOOL v45 = v73 == 0;
      BOOL v46 = v74 == 8;
      if ((__int16)v10 <= 4) {
        BOOL v46 = 0;
      }
      if ((__int16)v10 >= 4) {
        BOOL v45 = 0;
      }
      BOOL v47 = (unsigned __int16)(v10 - 7) < 0xFFFBu && v74 == 7;
      if (!v47 && !v46 && !v45)
      {
        *(void *)(a4 + 112) = "";
        switch(v74)
        {
          case 1:
            PDSFcor1qd(v8, (void *)a3, a4);
            goto LABEL_89;
          case 2:
          case 7:
            PDSFcor2qd(v8, (void *)a3, a4);
            goto LABEL_89;
          case 3:
            PDSFcor3qd(v8, (void *)a3, a4);
            goto LABEL_89;
          case 4:
            goto LABEL_85;
          case 5:
            if (*(unsigned char *)(a4 + 3194) == 1)
            {
LABEL_85:
              if ((v43 - 1) >= 2) {
                PDSFaccent((unsigned __int8 *)v8, (__int16)v10, a3, (__int16 *)a4);
              }
            }
            else if (PDSFcorrig(v8, a3, a4) == 10)
            {
              goto LABEL_130;
            }
            break;
          case 6:
            PDSFcor6qd(v8, (void *)a3, a4);
            goto LABEL_89;
          case 8:
            PDSFcor8qd(v8, (void *)a3, a4);
            goto LABEL_89;
          default:
LABEL_89:
            *(unsigned char *)(a4 + 4 * *(__int16 *)(a4 + 2124) + 120) = 0;
            if (*(__int16 *)(a4 + 2124) < 1) {
              break;
            }
            uint64_t v50 = 0;
            uint64_t v51 = *(unsigned __int16 *)(a4 + 2124);
LABEL_91:
            uint64_t v52 = a4 + 4 * v50;
            int v55 = *(_DWORD *)(v52 + 120);
            __int16 v54 = (unsigned __int8 *)(v52 + 120);
            int v53 = v55;
            if ((int)SLstrncmp(*(unsigned char **)(a4 + 112), v54, 4) > 0) {
              goto LABEL_103;
            }
            *(void *)(a4 + 112) = v54;
            int v77 = v53;
            unsigned int v56 = *(unsigned __int8 *)(a3 + 54);
            if (v56 >= 5)
            {
              int v57 = 4;
              do
                *((unsigned char *)&v77 + (__int16)v57++) = 0;
              while ((int)v56 > (__int16)v57);
            }
            int v58 = SFbisrch((uint64_t)&v77, 0, v56 - 1, &v78, a3);
            unsigned int v59 = *(unsigned __int8 *)(a3 + 54);
            if (v59 >= 5)
            {
              int v60 = 4;
              do
                *((unsigned char *)&v77 + (__int16)v60++) = -1;
              while ((int)v59 > (__int16)v60);
              __int16 v61 = SFbisrch((uint64_t)&v77, 0, v59 - 1, &v78, a3);
              v78 += v61 - v58;
            }
            if (*(unsigned char *)(a4 + 3194) == 1) {
              int v76 = PDdecod2((unsigned __int8 *)v8, (__int16)v10, v58, v78, a3, (unsigned __int16 *)a4);
            }
            if (v76 != 8)
            {
              if (*(unsigned __int16 *)(a4 + 40) == (unsigned __int16)v75) {
                break;
              }
LABEL_103:
              if (++v50 == v51) {
                break;
              }
              goto LABEL_91;
            }
            return 0;
        }
      }
      uint64_t v12 = v71;
    }
    while (*(unsigned char *)(a4 + 3504));
    int v16 = *(__int16 *)(a4 + 40);
    if (v7 != 2 || v16 == v75)
    {
      int v11 = *(__int16 *)(a4 + 40);
      if (v16 > (__int16)v72)
      {
        PDSFcorsrt(__src, (__int16)v72, (__int16)(v16 - 1), a3, a4);
        LOWORD(v16) = *(_WORD *)(a4 + 40);
        int v11 = (unsigned __int16)v16;
      }
    }
    else
    {
      int v11 = v72;
    }
    if ((unsigned __int16)v16 == (unsigned __int16)v75) {
      return 0;
    }
    char v62 = v66;
    if ((__int16)v16 < 1) {
      char v62 = 1;
    }
    if (v62)
    {
      if (v7 != 2) {
        goto LABEL_124;
      }
      goto LABEL_126;
    }
    int v63 = *(char *)(a4 + 2148);
    if (v63 <= 4) {
      char v64 = 8;
    }
    else {
      char v64 = v63 + 4;
    }
    *(unsigned char *)(a4 + 2149) = v64;
LABEL_124:
    if (*(unsigned char *)(a4 + 3164) || v65 >= (__int16)v16)
    {
LABEL_126:
      if ((v7 & 0xFFFFFFFD) != 1)
      {
        int v15 = *(unsigned __int8 *)(a4 + 2148);
        int v18 = v11;
        if (v15 == v71) {
          goto LABEL_12;
        }
        continue;
      }
      return 1;
    }
    else
    {
LABEL_130:
      uint64_t result = 1;
      *(unsigned char *)(a4 + 3164) = 1;
    }
    return result;
  }
}

uint64_t PDSFchkwrd(uint64_t a1, uint64_t a2, char *__src, int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v6 = a5;
  unsigned int v7 = __src;
  uint64_t v10 = *(void *)(a2 + 104);
  int v11 = *(void **)(a2 + 32);
  uint64_t v12 = (char *)v11[6];
  uint64_t v13 = *(void *)(a1 + 56);
  __dst = (char *)v11[5];
  BOOL v14 = (char *)v11[4];
  uint64_t v15 = *(void *)(a2 + 3184);
  if (!*(_WORD *)(a2 + 2))
  {
    if (*(unsigned char *)(a1 + 55) == 2 && *(_WORD *)(a2 + 3482) == 64 && **(unsigned char **)(a2 + 3488)) {
      __src[a4 - **(unsigned __int8 **)(a2 + 3488)] = -95;
    }
    __int16 v24 = *(_WORD *)(a2 + 18);
    if ((v24 & 0x40) != 0 && !*(_DWORD *)(a2 + 3464)) {
      return 11;
    }
    int v25 = *(unsigned __int8 *)(a1 + 55);
    if (v25 == 5 && (**(unsigned char **)(a2 + 3488) & 0x30) != 0)
    {
      __int16 v26 = *(_WORD *)(a2 + 3482);
      if ((v26 & 0x30) != 0
        && ((**(unsigned char **)(a2 + 3488) & 0x10) == 0 && (v26 & 0x10) != 0
         || (**(unsigned char **)(a2 + 3488) & 0x20) == 0 && (v26 & 0x20) != 0))
      {
        return 11;
      }
    }
    if ((v24 & 1) != 0 || (a5 & 0xFFFFFFFB) == 0 && (v24 & 0x20) != 0) {
      return 11;
    }
    if (v25 == 1 && *(unsigned char *)(a2 + 3504))
    {
      if (!**(unsigned char **)(a2 + 3488)) {
        return 11;
      }
      uint64_t v57 = v13;
      int v27 = *(char **)(*(void *)(a2 + 32) + 24);
      strcpy(v27, "ne");
      int v28 = v12;
      uint64_t v29 = a6;
      __int16 v30 = a4;
      strcpy(v27 + 2, __src);
      a6 = v29;
      uint64_t v12 = v28;
      LOWORD(a4) = v30 + 2;
      unsigned int v7 = v27;
      uint64_t v13 = v57;
    }
  }
  __int16 v60 = a4;
  if (*(unsigned char *)(a2 + 3176) && *(unsigned char *)(a2 + 3198))
  {
    int v16 = v12;
    uint64_t v17 = a6;
    strcpy(*(char **)(v15 + 8), v7);
    *(unsigned char *)(v15 + 17) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(a2 + 96);
    *(_WORD *)(v15 + 2) = *(_WORD *)(a2 + 3196);
    *(_WORD *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 42) = 1;
    uint64_t v18 = 1 << (*(unsigned char *)(a1 + 55) - 1);
    if (!*(unsigned char *)(a1 + 55)) {
      LODWORD(v1_Block_object_dispose(&STACK[0x510], 8) = -1;
    }
    *(_DWORD *)(v15 + 36) = v18;
    PDword(v15, 1, 1);
    LOWORD(a4) = v60;
    a6 = v17;
    uint64_t v12 = v16;
    uint64_t v19 = *(unsigned __int16 *)(v15 + 50);
    if (*(_WORD *)(v15 + 50))
    {
      *(_WORD *)(a2 + 100) = v19;
      if ((__int16)v19 >= 1)
      {
        uint64_t v20 = *(void *)(v15 + 104);
        while (*(unsigned __int8 *)(*(void *)v20 + 71) != v6 || !*(unsigned char *)(*(void *)v20 + 70))
        {
          v20 += 8;
          if (!--v19) {
            goto LABEL_12;
          }
        }
        return 11;
      }
    }
  }
LABEL_12:
  if (!*(_WORD *)(a2 + 2))
  {
    if (!v10)
    {
      unsigned int v56 = v12;
      uint64_t v58 = v13;
      uint64_t v34 = (unsigned char *)(a2 + 88);
      if (v6 || *(unsigned char *)(a2 + 88) != 3)
      {
        uint64_t v41 = a6;
        strcpy(v14, v7);
        __int16 v39 = v60;
        uint64_t v40 = v41;
        goto LABEL_63;
      }
      uint64_t v35 = a6;
      unsigned __int16 v36 = 0;
      goto LABEL_49;
    }
    if (!*(unsigned char *)(v10 + 34) && !*(unsigned char *)(v10 + 44)
      || (*(_WORD *)(a2 + 3484) & 0x200) != 0
      || (__int16 v31 = v12, v32 = a6, PDSFcltcmp(a1, a2) == 10)
      && (v33 = PDSFcltscr((unsigned __int8 *)v7, v60, a1, v10), a6 = v32, uint64_t v12 = v31, v33 == 10))
    {
      unsigned int v56 = v12;
      uint64_t v58 = v13;
      uint64_t v34 = (unsigned char *)(a2 + 88);
      if (v6 || *(unsigned char *)(a2 + 88) != 3)
      {
        uint64_t v38 = a6;
        strcpy(v14, v7);
        __int16 v39 = v60;
        uint64_t v40 = v38;
LABEL_56:
        if (*(_WORD *)v10 && (*(unsigned char *)(v10 + 34) || *(unsigned char *)(v10 + 44)))
        {
          if (v6 == 4) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = v6;
          }
          uint64_t v40 = v10 + 80;
          unsigned int v43 = *(unsigned __int8 *)(v10 + 76);
LABEL_67:
          SLrecap((unsigned __int8 *)v14, v39, v42, v40, v43, v58);
          int v44 = *(unsigned __int8 *)(a1 + 55);
          switch(v44)
          {
            case 5:
              goto LABEL_70;
            case 15:
              if (*v34 == 2 || (*(_WORD *)(a2 + 3482) & 0x40) != 0 && (*(_DWORD *)(a2 + 92) & 0x80000000) != 0) {
                PDSFremacc(v14, v58, 15);
              }
              uint64_t v45 = v60 - 1;
              if (v7[v45] == 253 && *v34 == 2) {
                v14[v45] = -81;
              }
              break;
            case 8:
LABEL_70:
              if ((*(_WORD *)(a2 + 3482) & 0x40) != 0) {
                PDSFremacc(v14, v58, v44);
              }
              break;
          }
          if (v10 && (*(_WORD *)(a2 + 3484) & 0x200) == 0)
          {
            if (*(unsigned char *)(v10 + 34))
            {
              BOOL v46 = __dst;
              BOOL v47 = strcpy(__dst, (const char *)(v10 + 34));
              __int16 v48 = strlen(v47);
              unsigned int v49 = *(unsigned __int8 *)(v10 + 16);
              if (v49 == 4) {
                unsigned int v50 = 0;
              }
              else {
                unsigned int v50 = *(unsigned __int8 *)(v10 + 16);
              }
              uint64_t v51 = v58;
              SLrecap((unsigned __int8 *)__dst, v48, v50, 0, v49, v58);
              strcat(__dst, v14);
            }
            else
            {
              BOOL v46 = __dst;
              strcpy(__dst, v14);
              uint64_t v51 = v58;
            }
            if (*(unsigned char *)(v10 + 44))
            {
              uint64_t v52 = strcpy(v56, (const char *)(v10 + 44));
              __int16 v53 = strlen(v52);
              unsigned int v54 = *(unsigned __int8 *)(v10 + 17);
              if (v54 == 4) {
                unsigned int v55 = 0;
              }
              else {
                unsigned int v55 = *(unsigned __int8 *)(v10 + 17);
              }
              SLrecap((unsigned __int8 *)v56, v53, v55, 0, v54, v51);
              strcat(v46, v56);
            }
            strcpy(v14, v46);
          }
          int v23 = (__int16)strlen(v14);
          char v22 = v14;
          goto LABEL_94;
        }
LABEL_63:
        if (v6 == 4) {
          unsigned int v42 = 0;
        }
        else {
          unsigned int v42 = v6;
        }
        unsigned int v43 = *v34;
        goto LABEL_67;
      }
      uint64_t v35 = a6;
      unsigned __int16 v36 = strlen((const char *)(v10 + 34));
LABEL_49:
      if ((*(_DWORD *)(a2 + 92 + 4 * (v36 >> 5)) >> ~(_BYTE)v36))
      {
        if ((*(_DWORD *)(a2 + 92 + 4 * ((unsigned __int16)(v36 + 1) >> 5)) >> ~(v36 + 1))) {
          unsigned int v6 = 1;
        }
      }
      else
      {
        unsigned int v6 = 0;
      }
      strcpy(v14, v7);
      uint64_t v40 = v35;
      __int16 v39 = v60;
      if (!v10) {
        goto LABEL_63;
      }
      goto LABEL_56;
    }
    return 11;
  }
  int v21 = (__int16)a4;
  if (v6) {
    SLrecap((unsigned __int8 *)v7, (__int16)a4, v6, a6, v6, v13);
  }
  char v22 = v7;
  int v23 = v21;
LABEL_94:
  return SFadd1(v22, v23, a2, 1);
}

uint64_t PDSFwild(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(__int16 *)(a3 + 68) < a2) {
    return 8;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 54);
  int v10 = *(unsigned __int16 *)(a3 + 1192);
  if (*(_WORD *)a4 != 5) {
    *(_WORD *)a4 = 5;
  }
  __int16 v40 = 0;
  if (v9)
  {
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = a1;
    while (1)
    {
      int v14 = *v13;
      if (v9 - 1 == v11 && v10 == 2) {
        break;
      }
      if (v10 == 2)
      {
        if ((v14 + 127) >= 0x1Fu) {
          goto LABEL_18;
        }
        if (v14 != 129) {
          goto LABEL_39;
        }
        int v16 = v13[1];
        if (v16 == 72)
        {
          uint64_t v22 = *(void *)(*(void *)(a4 + 32) + 16);
          uint64_t v23 = (__int16)v12;
          char v20 = 1;
LABEL_50:
          *(unsigned char *)(v22 + v23) = v20;
LABEL_51:
          __int16 v24 = v12 + 1;
          v12 += 2;
          *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v24) = v20;
LABEL_30:
          if ((*v13 & 0xF0) != 0xE0 && (*v13 + 127) >= 0x1Fu) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = 2;
          }
          goto LABEL_37;
        }
        if (v16 != 150)
        {
          LOBYTE(v14) = -127;
LABEL_39:
          if (a2 <= (__int16)v12)
          {
            if (v10 == 2)
            {
              char v20 = 32;
              if ((v14 + 127) < 0x1Fu || (int v21 = v14 & 0xF0, LOBYTE(v14) = 32, v21 == 224))
              {
                uint64_t v22 = *(void *)(*(void *)(a4 + 32) + 16);
                uint64_t v23 = (__int16)v12;
                goto LABEL_50;
              }
            }
            else
            {
              LOBYTE(v14) = 32;
            }
          }
          else if (v10 == 2 && ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0))
          {
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v12) = v14;
            char v20 = v13[1];
            goto LABEL_51;
          }
          goto LABEL_26;
        }
      }
      else if (v14 != 42)
      {
        if (v14 != 63) {
          goto LABEL_39;
        }
LABEL_25:
        LOBYTE(v14) = 1;
LABEL_26:
        __int16 v17 = v12++;
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v17) = v14;
        goto LABEL_29;
      }
LABEL_28:
      while ((int)v9 > (__int16)v12)
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v12++) = 1;
LABEL_29:
      if (v10 == 2) {
        goto LABEL_30;
      }
      uint64_t v19 = 1;
LABEL_37:
      v13 += v19;
      int v11 = (__int16)v12;
      if ((__int16)v12 >= (int)v9) {
        goto LABEL_52;
      }
    }
    int v15 = -1;
    if ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0) {
      goto LABEL_53;
    }
LABEL_18:
    if ((v14 & 0xF0) != 0xE0 && v14 == 63) {
      goto LABEL_25;
    }
    if ((v14 & 0xF0) == 0xE0 || v14 != 42) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
LABEL_52:
  int v15 = 0;
LABEL_53:
  int v25 = SFbisrch(*(void *)(*(void *)(a4 + 32) + 16), 0, v15 + (int)v9 - 1, &v40, a3);
  if (v9 <= a2) {
    int v26 = v9;
  }
  else {
    int v26 = a2;
  }
  if (v26 >= 1)
  {
    int v27 = 0;
    int v28 = a1;
    while (1)
    {
      int v29 = *v28;
      if ((unsigned __int16)v26 - 1 == (__int16)v27 && v10 == 2) {
        break;
      }
      if (v10 == 2)
      {
        if ((v29 + 127) < 0x1Fu)
        {
          if (v29 != 129) {
            goto LABEL_73;
          }
          int v30 = v28[1];
          if (v30 == 72)
          {
            char v31 = -1;
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27) = -1;
            goto LABEL_76;
          }
          if (v30 != 150)
          {
            LOBYTE(v29) = -127;
LABEL_75:
            *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27) = v29;
            char v31 = v28[1];
LABEL_76:
            uint64_t v32 = *(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27;
            v27 += 2;
            *(unsigned char *)(v32 + 1) = v31;
LABEL_82:
            if ((*v28 & 0xF0) != 0xE0 && (*v28 + 127) >= 0x1Fu) {
              uint64_t v35 = 1;
            }
            else {
              uint64_t v35 = 2;
            }
            goto LABEL_89;
          }
          goto LABEL_91;
        }
        goto LABEL_69;
      }
      if (v29 != 42)
      {
        if (v29 == 63) {
LABEL_79:
        }
          LOBYTE(v29) = -1;
LABEL_80:
        __int16 v33 = v27++;
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + v33) = v29;
        goto LABEL_81;
      }
LABEL_91:
      while ((int)v9 > (__int16)v27)
        *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27++) = -1;
LABEL_81:
      if (v10 == 2) {
        goto LABEL_82;
      }
      uint64_t v35 = 1;
LABEL_89:
      v28 += v35;
      if ((__int16)v27 >= (__int16)v26) {
        goto LABEL_96;
      }
    }
    if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0) {
      goto LABEL_96;
    }
LABEL_69:
    if ((v29 & 0xF0) != 0xE0 && v29 == 63) {
      goto LABEL_79;
    }
    if ((v29 & 0xF0) == 0xE0 || v29 != 42)
    {
LABEL_73:
      if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0) {
        goto LABEL_75;
      }
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  int v27 = 0;
LABEL_96:
  while ((int)v9 > (__int16)v27)
    *(unsigned char *)(*(void *)(*(void *)(a4 + 32) + 16) + (__int16)v27++) = 32;
  uint64_t v36 = *(void *)(*(void *)(a4 + 32) + 16);
  uint64_t v37 = v9 - 1;
  if (*(unsigned __int8 *)(v36 + v9 - 1) == 255)
  {
    *(unsigned char *)(v36 + v37) = -2;
    uint64_t v36 = *(void *)(*(void *)(a4 + 32) + 16);
  }
  __int16 v38 = SFbisrch(v36, 0, v37, &v40, a3);
  __int16 v39 = v38 - v25 + v40;
  __int16 v40 = v39;
  *(_WORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 44) = 0;
  if (*(unsigned char *)(a4 + 3194) != 1) {
    return 11;
  }
  PDdecod2(a1, a2, v25, v39, a3, (unsigned __int16 *)a4);
  if (*(_WORD *)(a4 + 40)) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t PDSFanagrm(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int16 *)(a4 + 68) < (unsigned __int16)a2) {
    return 8;
  }
  *(_OWORD *)(a3 + 3423) = 0u;
  *(_OWORD *)(a3 + 3439) = 0u;
  *(_OWORD *)(a3 + 3391) = 0u;
  *(_OWORD *)(a3 + 3407) = 0u;
  *(_OWORD *)(a3 + 3359) = 0u;
  *(_OWORD *)(a3 + 3375) = 0u;
  *(_OWORD *)(a3 + 3327) = 0u;
  *(_OWORD *)(a3 + 3343) = 0u;
  *(_OWORD *)(a3 + 3295) = 0u;
  *(_OWORD *)(a3 + 3311) = 0u;
  *(_OWORD *)(a3 + 3263) = 0u;
  *(_OWORD *)(a3 + 3279) = 0u;
  *(_OWORD *)(a3 + 3231) = 0u;
  *(_OWORD *)(a3 + 3247) = 0u;
  *(_OWORD *)(a3 + 3199) = 0u;
  *(_OWORD *)(a3 + 3215) = 0u;
  if (a2 < 1) {
    goto LABEL_11;
  }
  uint64_t v9 = 0;
  unsigned __int8 v10 = *a1;
  unsigned __int8 v11 = *a1;
  do
  {
    uint64_t v12 = a1[v9];
    if (v12 < v11) {
      unsigned __int8 v11 = a1[v9];
    }
    if (v12 > v10) {
      unsigned __int8 v10 = a1[v9];
    }
    ++*(unsigned char *)(a3 + v12 + 3199);
    ++v9;
  }
  while ((unsigned __int16)a2 != v9);
  if (a2 > 24)
  {
    __int16 v20 = 0;
    **(unsigned char **)(*(void *)(a3 + 32) + 16) = v11;
    unsigned int v13 = *(unsigned __int8 *)(a4 + 54);
    if (v13 >= 2)
    {
      int v14 = 1;
      do
      {
        *(unsigned char *)(*(void *)(*(void *)(a3 + 32) + 16) + (__int16)v14++) = 0;
        unsigned int v13 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v13 > (__int16)v14);
    }
    int v15 = SFbisrch(*(void *)(*(void *)(a3 + 32) + 16), 0, v13 - 1, &v20, a4);
    **(unsigned char **)(*(void *)(a3 + 32) + 16) = v10;
    unsigned int v16 = *(unsigned __int8 *)(a4 + 54);
    if (v16 >= 2)
    {
      int v17 = 1;
      do
      {
        *(unsigned char *)(*(void *)(*(void *)(a3 + 32) + 16) + (__int16)v17++) = -1;
        unsigned int v16 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v16 > (__int16)v17);
    }
    __int16 v18 = SFbisrch(*(void *)(*(void *)(a3 + 32) + 16), 0, v16 - 1, &v20, a4);
    __int16 v19 = v18 - v15 + v20;
    __int16 v20 = v19;
    *(_WORD *)(a3 + 40) = 0;
    *(_WORD *)(a3 + 44) = 0;
    if (*(unsigned char *)(a3 + 3194) == 1) {
      PDdecod2(a1, a2, v15, v19, a4, (unsigned __int16 *)a3);
    }
  }
  else
  {
LABEL_11:
    PDSFanaqua((uint64_t)a1, a2, (_WORD *)a3, a4);
  }
  if (*(_WORD *)(a3 + 40)) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t PDSFmemory(void **a1, int a2, int a3)
{
  if (a3)
  {
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x1004092C2EC0CuLL);
    *a1 = (void *)result;
    if (!result) {
      return result;
    }
    unsigned int v6 = (void *)result;
    unsigned int v7 = (char *)malloc_type_calloc(7uLL, a2, 0xEA45D015uLL);
    if (v7)
    {
      unsigned int v8 = &v7[a2 + a2];
      v6[4] = v8;
      v6[5] = &v8[a2];
      uint64_t v9 = &v8[a2 + a2];
      v6[6] = v9;
      unsigned __int8 v10 = &v9[a2];
      v6[2] = v10;
      v6[3] = &v7[a2];
      *unsigned int v6 = v7;
      v6[1] = &v10[a2];
      return 1;
    }
    free(*a1);
    uint64_t result = 0;
    *a1 = 0;
  }
  else
  {
    unsigned __int8 v11 = (void **)*a1;
    if (*a1)
    {
      if (*v11) {
        free(*v11);
      }
      free(v11);
      *a1 = 0;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t PDSFdc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned __int8 *)(a3 + 55);
  uint64_t v8 = SLLngToA(*(unsigned __int8 *)(a3 + 55));
  if (a2 > 64) {
    return 0;
  }
  uint64_t v9 = v8;
  unsigned int v10 = **(unsigned __int8 **)(a4 + 72);
  __strcpy_chk();
  if (v10) {
    SLrecap(v19, a2, v10, *(void *)(a4 + 80), v10, v9);
  }
  char v18 = 0;
  *(_WORD *)int v17 = 0;
  *(_WORD *)(a4 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  if (v7) {
    uint64_t v11 = 1 << (v7 - 1);
  }
  else {
    LODWORD(v11) = -1;
  }
  if ((v11 & 0x8000) != 0)
  {
    PDDCengan(v19, v10, v9, v17);
    v17[1] = 0;
    **(unsigned char **)(a4 + 348_Block_object_dispose(&STACK[0x510], 8) = atoi(v17);
    return 0;
  }
  if ((v11 & 0x994) != 0)
  {
    PDDCposclt(v7, (uint64_t)v19, a2, v17);
    if ((v11 & 0x814) == 0 || v17[0] != 49) {
      goto LABEL_26;
    }
    PDDCposcls(v7, (uint64_t)v19, a2, v9, v17);
    v17[1] = 0;
    char v12 = atoi(v17);
    if ((v11 & 0x94) != 0)
    {
      uint64_t v13 = *(void *)(a4 + 104);
      __int16 v14 = 16 * (*(_WORD *)(v13 + 62) | v12 & 7);
    }
    else
    {
      if ((v11 & 0x800) == 0)
      {
LABEL_26:
        if ((v11 & 0x114) != 0)
        {
          PDDCpreclt(v19, v9, v17);
          PDDCprecls(v7, (uint64_t)v17);
          *(_WORD *)(*(void *)(a4 + 104) + 62) |= atoi(v17) & 0xF;
        }
        if ((v11 & 0x80) != 0)
        {
          PDDCposacc((uint64_t)v19, a2, v9, v17);
          *(_WORD *)(*(void *)(a4 + 104) + 62) |= atoi(v17) & 0xF;
        }
        PDSFcltdb(a3, a4);
        return 0;
      }
      uint64_t v13 = *(void *)(a4 + 104);
      __int16 v14 = *(_WORD *)(v13 + 62) | v12 & 7;
    }
    *(_WORD *)(v13 + 62) = v14;
    goto LABEL_26;
  }
  if ((v11 & 0x11660) != 0 && *(__int16 *)(a4 + 100) >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      PDDCrmcc(v7, *(unsigned __int8 *)(*(void *)(a4 + 72) + v15), v17);
      if (v17[0] == 49) {
        *(_WORD *)(*(void *)(a4 + 3512) + 2 * v15) |= 8u;
      }
      *(unsigned char *)(*(void *)(a4 + 3520) + v15) = 0;
      *(unsigned char *)(*(void *)(a4 + 3528) + v15) = 0;
      if ((v11 & 0x1060) != 0) {
        *(unsigned char *)(*(void *)(a4 + 3528) + v15) |= PDDCdblend(v7, (uint64_t)v19, v9, a2) & 3;
      }
      ++v15;
    }
    while (v15 < *(__int16 *)(a4 + 100));
  }
  return 0;
}

uint64_t PDSFcorqbr(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, __int16 a10)
{
  if (a4 < 1) {
    return 10;
  }
  __int16 v14 = a1;
  if (a6 < 1)
  {
    LOWORD(v15) = 0;
    BOOL v16 = 0;
    BOOL v17 = 1;
  }
  else
  {
    LOWORD(v15) = 0;
    while (*(unsigned __int8 *)(a3 + (unsigned __int16)v15) == *(unsigned __int8 *)(a5 + (unsigned __int16)v15))
    {
      int v15 = (__int16)(v15 + 1);
      BOOL v16 = v15 < a6;
      BOOL v17 = v15 < a4;
      if (v15 >= a4 || v15 >= a6) {
        goto LABEL_11;
      }
    }
    BOOL v17 = 1;
    BOOL v16 = 1;
  }
LABEL_11:
  uint64_t v19 = a1[7];
  uint64_t v20 = (__int16)v15;
  int v21 = (unsigned __int8 *)(a3 + (__int16)v15);
  uint64_t v22 = *v21;
  if (v22 == 32)
  {
    if (a6 == (__int16)v15) {
      return 10;
    }
  }
  else if (!v17)
  {
    return 10;
  }
  if (!a7) {
    return 11;
  }
  int v23 = a10;
  int v24 = a9;
  uint64_t v25 = (__int16)v15;
  if (v17 && v16)
  {
    if (a8
      && (*(_DWORD *)(v19 + 4 * v22) & 0x10000000) != 0
      && (*(_DWORD *)(v19 + 4 * *(unsigned __int8 *)(a5 + (__int16)v15)) & 0x10000000) != 0)
    {
      __int16 v128 = v21;
      HIWORD(v93) = a10;
      LOWORD(v93) = 0;
      uint64_t v115 = v19;
      uint64_t v120 = (__int16)v15;
      unsigned int v103 = a7;
      unsigned int v106 = a8;
      uint64_t v31 = a2;
      uint64_t v32 = v14;
      uint64_t v33 = (__int16)v15;
      uint64_t v34 = *v21;
      int v35 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v15 + a4), a5 + (__int16)v15 + 1, (__int16)(~(_WORD)v15 + a6), (__int16)(a7 - 1), (__int16)(a8 - 1), v93);
      int v24 = a9;
      uint64_t v22 = v34;
      int v21 = v128;
      a7 = v103;
      int v23 = a10;
      uint64_t v25 = v33;
      __int16 v14 = v32;
      a2 = v31;
      a8 = v106;
      BOOL v87 = v35 == 10;
      uint64_t v19 = v115;
      uint64_t v20 = v120;
      if (v87) {
        return 10;
      }
    }
    else if (a9)
    {
      int v26 = (__int16)(~(_WORD)v15 + a4);
      if (v26 < 1) {
        return 10;
      }
      int v27 = v21 + 1;
      int v28 = (__int16)(~(_WORD)v15 + a6);
      if (v28 < 1)
      {
        LOWORD(v29) = 0;
      }
      else
      {
        LOWORD(v29) = 0;
        while (v27[(unsigned __int16)v29] == *(unsigned __int8 *)(a5 + v20 + 1 + (unsigned __int16)v29))
        {
          int v29 = (__int16)(v29 + 1);
          BOOL v30 = v29 < v26;
          if (v29 >= v26 || v29 >= v28) {
            goto LABEL_33;
          }
        }
      }
      BOOL v30 = 1;
LABEL_33:
      if (v27[(__int16)v29] == 32)
      {
        if ((unsigned __int16)v29 == (unsigned __int16)v28) {
          return 10;
        }
      }
      else if (!v30)
      {
        return 10;
      }
    }
  }
  uint64_t v36 = v20 + 1;
  int v37 = *(unsigned __int8 *)(a5 + v20 + 1);
  if (v22 == v37 && *(unsigned __int8 *)(a3 + v36) == *(unsigned __int8 *)(a5 + v20))
  {
    __int16 v129 = v21;
    HIWORD(v94) = v23;
    LOWORD(v94) = v24;
    int v111 = v24;
    uint64_t v116 = v19;
    uint64_t v121 = v20;
    __int16 v101 = v14;
    uint64_t v104 = a2;
    int v124 = v23;
    uint64_t v38 = a7;
    uint64_t v39 = a8;
    unsigned int v100 = v25;
    uint64_t v107 = v22;
    int v40 = PDSFcorqbr(v14, a2, v21 + 2, (__int16)(a4 - v20 - 2), a5 + v20 + 2, (__int16)(a6 - v25 - 2), a7, a8, v94);
    int v24 = v111;
    a2 = v104;
    uint64_t v22 = v107;
    int v21 = v129;
    a7 = v38;
    int v23 = v124;
    uint64_t v25 = v100;
    __int16 v14 = v101;
    a8 = v39;
    BOOL v87 = v40 == 10;
    uint64_t v19 = v116;
    uint64_t v20 = v121;
    if (v87) {
      return 10;
    }
  }
  if (v22 == *(unsigned __int8 *)(a5 + v20 + 2)
    && *(unsigned __int8 *)(a3 + v36) == v37
    && a6 >= 3
    && a4 >= 3
    && *(unsigned __int8 *)(a3 + v20 + 2) == *(unsigned __int8 *)(a5 + v20))
  {
    unsigned __int8 v130 = v21;
    HIWORD(v95) = v23;
    LOWORD(v95) = v24;
    int v112 = v24;
    uint64_t v117 = v19;
    uint64_t v122 = v20;
    uint64_t v41 = a2;
    int v125 = v23;
    uint64_t v42 = a7;
    uint64_t v43 = a8;
    __int16 v102 = v14;
    uint64_t v44 = v25;
    uint64_t v108 = v22;
    int v45 = PDSFcorqbr(v14, a2, v21 + 3, (__int16)(a4 - v20 - 3), a5 + v20 + 3, (__int16)(a6 - v25 - 3), a7, a8, v95);
    int v24 = v112;
    uint64_t v22 = v108;
    int v21 = v130;
    a7 = v42;
    int v23 = v125;
    uint64_t v25 = v44;
    __int16 v14 = v102;
    a2 = v41;
    a8 = v43;
    BOOL v87 = v45 == 10;
    uint64_t v19 = v117;
    uint64_t v20 = v122;
    if (v87) {
      return 10;
    }
  }
  if (v17)
  {
    if ((v25 || *(__int16 *)(a2 + 2150) > a4) && v22 == *(v21 - 1))
    {
      unsigned __int8 v131 = v21;
      HIWORD(v96) = v23;
      LOWORD(v96) = 0;
      int v113 = v24;
      uint64_t v118 = v19;
      uint64_t v123 = v20;
      uint64_t v46 = a2;
      int v126 = v23;
      uint64_t v47 = a7;
      uint64_t v48 = a8;
      unsigned int v49 = v14;
      uint64_t v50 = v25;
      int v109 = v22;
      int v51 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v20 + a4), a5 + v20, (__int16)(a6 - v25), a7, a8, v96);
      int v24 = v113;
      uint64_t v19 = v118;
      LODWORD(v22) = v109;
      int v21 = v131;
      a7 = v47;
      int v23 = v126;
      uint64_t v25 = v50;
      __int16 v14 = v49;
      a2 = v46;
      a8 = v48;
    }
    else
    {
      if (!a8 || (*(_DWORD *)(v19 + 4 * v22) & 0x10000000) == 0)
      {
        if (v24)
        {
          int v52 = (__int16)(~(_WORD)v20 + a4);
          if (v52 < 1) {
            return 10;
          }
          __int16 v53 = v21 + 1;
          int v54 = (__int16)(a6 - v25);
          if (v54 < 1)
          {
            LOWORD(v55) = 0;
          }
          else
          {
            LOWORD(v55) = 0;
            while (v53[(unsigned __int16)v55] == *(unsigned __int8 *)(a5 + v20 + (unsigned __int16)v55))
            {
              int v55 = (__int16)(v55 + 1);
              BOOL v56 = v55 < v52;
              if (v55 >= v52 || v55 >= v54) {
                goto LABEL_111;
              }
            }
          }
          BOOL v56 = 1;
LABEL_111:
          if (v53[(__int16)v55] == 32)
          {
            if ((unsigned __int16)v55 == (unsigned __int16)v54) {
              return 10;
            }
          }
          else if (!v56)
          {
            return 10;
          }
        }
        goto LABEL_63;
      }
      uint64_t v57 = v21;
      HIWORD(v97) = v23;
      LOWORD(v97) = 0;
      int v114 = v24;
      uint64_t v119 = v19;
      uint64_t v123 = v20;
      int v127 = v23;
      unsigned int v105 = a7;
      unsigned int v110 = a8;
      uint64_t v58 = a2;
      unsigned int v59 = v14;
      uint64_t v60 = v25;
      int v61 = v22;
      int v51 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v20 + a4), a5 + v20, (__int16)(a6 - v25), (__int16)(a7 - 1), (__int16)(a8 - 1), v97);
      int v24 = v114;
      uint64_t v19 = v119;
      LODWORD(v22) = v61;
      int v21 = v57;
      a7 = v105;
      int v23 = v127;
      uint64_t v25 = v60;
      __int16 v14 = v59;
      a2 = v58;
      a8 = v110;
    }
    BOOL v87 = v51 == 10;
    uint64_t v20 = v123;
    if (v87) {
      return 10;
    }
  }
LABEL_63:
  if (!v16) {
    goto LABEL_80;
  }
  if ((v20 || *(__int16 *)(a2 + 2152) > a6)
    && *(unsigned __int8 *)(a5 + v20) == *(unsigned __int8 *)(a5 + v20 - 1))
  {
    uint64_t v62 = a5 + v20 + 1;
    HIWORD(v9_Block_object_dispose(&STACK[0x510], 8) = v23;
    LOWORD(v9_Block_object_dispose(&STACK[0x510], 8) = 0;
    uint64_t v63 = (__int16)(a4 - v25);
    uint64_t v64 = (__int16)(~(_WORD)v20 + a6);
    uint64_t v65 = a8;
    uint64_t v66 = (__int16)(a8 - 1);
    int v67 = v14;
    uint64_t v68 = a2;
    __int16 v69 = a7;
    goto LABEL_79;
  }
  if (a8 && (*(_DWORD *)(v19 + 4 * *(unsigned __int8 *)(a5 + v20)) & 0x10000000) != 0)
  {
    uint64_t v62 = a5 + v20 + 1;
    HIWORD(v9_Block_object_dispose(&STACK[0x510], 8) = v23;
    LOWORD(v9_Block_object_dispose(&STACK[0x510], 8) = 0;
    uint64_t v63 = (__int16)(a4 - v25);
    uint64_t v64 = (__int16)(~(_WORD)v20 + a6);
    __int16 v69 = a7;
    a7 = (__int16)(a7 - 1);
    uint64_t v65 = a8;
    uint64_t v66 = (__int16)(a8 - 1);
    int v67 = v14;
    uint64_t v68 = a2;
LABEL_79:
    int v75 = v14;
    uint64_t v76 = v25;
    uint64_t result = PDSFcorqbr(v67, a2, v21, v63, v62, v64, a7, v66, v98);
    LOWORD(a7) = v69;
    uint64_t v25 = v76;
    __int16 v14 = v75;
    a2 = v68;
    a8 = v65;
    if (result == 10) {
      return result;
    }
    goto LABEL_80;
  }
  if (!v24) {
    goto LABEL_80;
  }
  int v70 = (__int16)(a4 - v25);
  if (v70 >= 1)
  {
    int v71 = (__int16)(~(_WORD)v20 + a6);
    if (v71 < 1)
    {
      LOWORD(v72) = 0;
    }
    else
    {
      LOWORD(v72) = 0;
      while (1)
      {
        LODWORD(v22) = v21[(unsigned __int16)v72];
        if (v22 != *(unsigned __int8 *)(a5 + v20 + 1 + (unsigned __int16)v72)) {
          break;
        }
        uint64_t v73 = (unsigned __int16)v72 + 1;
        int v72 = (__int16)(v72 + 1);
        BOOL v74 = v72 < v70;
        if (v72 >= v70 || v72 >= v71)
        {
          LODWORD(v22) = v21[v73];
          goto LABEL_118;
        }
      }
    }
    BOOL v74 = 1;
LABEL_118:
    if (v22 == 32)
    {
      if ((unsigned __int16)v72 == (unsigned __int16)v71) {
        return 10;
      }
      goto LABEL_80;
    }
    if (v74)
    {
LABEL_80:
      if (!v23) {
        return 11;
      }
      int v77 = *(unsigned __int8 *)(a2 + 2164);
      if (v77 == 255) {
        return 11;
      }
      __int16 v78 = 0;
      __int16 v132 = v23 - 1;
      uint64_t v79 = (__int16)(a7 - 1);
      while (1)
      {
        __int16 v80 = a6 - v77;
        if (v80 < 0) {
          goto LABEL_107;
        }
        if (v80 > (int)v25) {
          goto LABEL_107;
        }
        uint64_t v81 = *(unsigned __int8 *)(a2 + (v78 | 1) + 2164);
        BOOL v82 = *(unsigned __int8 **)(v14[19] + 8 * v81);
        if (*v82 != *(unsigned __int8 *)(a3 + (unsigned __int16)(a6 - v77))) {
          goto LABEL_107;
        }
        int v83 = *(unsigned __int8 *)(v14[21] + v81);
        int v84 = a4 - v80;
        if (v84 >= v83) {
          int v84 = *(unsigned __int8 *)(v14[21] + v81);
        }
        if (v84 == 2) {
          goto LABEL_94;
        }
        if (v84 == 3) {
          goto LABEL_93;
        }
        if (v84 == 4) {
          break;
        }
LABEL_95:
        uint64_t v85 = *(unsigned __int8 *)(v14[22] + v81);
        if (*(_WORD *)(a2 + 2)
          || (v85 + v80 == a6 ? (char v86 = 1) : (char v86 = 2),
              *(unsigned __int16 *)(a2 + 2152) == (unsigned __int16)a6 ? (BOOL v87 = a6 == v77) : (BOOL v87 = 0),
              !v87 ? (char v88 = v86) : (char v88 = 4),
              (v88 & *((unsigned char *)v14 + v81 + 183)) != 0))
        {
          HIWORD(v99) = v132;
          LOWORD(v99) = 0;
          uint64_t v89 = a2;
          uint64_t v90 = a8;
          __int16 v91 = v14;
          uint64_t v92 = v25;
          uint64_t result = PDSFcorqbr(v14, a2, a3 + v80 + *(unsigned __int8 *)(v14[21] + v81), (__int16)(a4 - v80 - v83), a5 + v80 + v85, v77 - v85, v79, a8, v99);
          uint64_t v25 = v92;
          __int16 v14 = v91;
          a2 = v89;
          a8 = v90;
          if (result == 10) {
            return result;
          }
        }
LABEL_107:
        v78 += 2;
        int v77 = *(unsigned __int8 *)(a2 + v78 + 2164);
        uint64_t result = 11;
        if (v77 == 255) {
          return result;
        }
      }
      if (v82[3] != *(unsigned __int8 *)(a3 + v80 + 3)) {
        goto LABEL_107;
      }
LABEL_93:
      if (v82[2] != *(unsigned __int8 *)(a3 + v80 + 2)) {
        goto LABEL_107;
      }
LABEL_94:
      if (v82[1] != *(unsigned __int8 *)(a3 + v80 + 1)) {
        goto LABEL_107;
      }
      goto LABEL_95;
    }
  }
  return 10;
}

uint64_t PDSFcorrig(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (!*(_WORD *)(a2 + 138)) {
    return 11;
  }
  int v6 = 0;
  uint64_t v7 = *(void *)(a2 + 144);
  while (1)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 + (unsigned __int16)v6);
    int v9 = SLstrcmp(a1, v8);
    size_t v10 = strlen((const char *)v8);
    if (!v9) {
      break;
    }
    int v11 = v6 + v10 + 1;
    uint64_t v7 = *(void *)(a2 + 144);
    int v12 = strlen((const char *)(v7 + (unsigned __int16)(v6 + v10 + 1)));
    int v6 = v12 + v11 + 1;
    if (*(unsigned __int16 *)(a2 + 138) <= (unsigned __int16)(v12 + v11 + 1)) {
      return 11;
    }
  }
  __int16 v14 = (char *)&v8[v10 + 1];
  int v15 = (__int16)strlen(v14);
  return SFadd1(v14, v15, a3, 1);
}

unsigned __int8 *PDDCengan(unsigned __int8 *result, unsigned int a2, uint64_t a3, _WORD *a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  qmemcpy(v12, "AEIOaeio", sizeof(v12));
  *a4 = 12336;
  if (a2 <= 3 && a2 != 2)
  {
    if ((*(_DWORD *)(a3 + 4 * v4) & 0x40000000) != 0) {
      LOBYTE(v4) = v4 + 32;
    }
    if ((*(_DWORD *)(a3 + 4 * v4) & 0x10000000) != 0)
    {
      if ((*(_DWORD *)(a3 + 4 * v5) & 0x40000000) != 0) {
        LOBYTE(v5) = v5 + 32;
      }
      if (v4 != 101 || v5 != 117)
      {
        uint64_t v6 = 0;
        while (*((unsigned __int8 *)&v12[1] + v6) != v4)
        {
          if (++v6 == 4)
          {
            char v7 = 50;
            goto LABEL_16;
          }
        }
        char v7 = 49;
LABEL_16:
        *(unsigned char *)a4 = v7;
      }
    }
  }
  if (a2 == 2)
  {
    for (uint64_t i = 0; i != 13; ++i)
    {
      if (aBcdgjkpqtvwyzf[i] == v4)
      {
        char v11 = 48;
        goto LABEL_31;
      }
    }
    for (uint64_t j = 0; j != 4; ++j)
    {
      if (*((unsigned __int8 *)v12 + j) == v4)
      {
        char v11 = 49;
        goto LABEL_31;
      }
    }
    uint64_t v10 = 0;
    while (aBcdgjkpqtvwyzf[v10 + 13] != v4)
    {
      if (++v10 == 9) {
        return result;
      }
    }
    char v11 = 50;
LABEL_31:
    *(unsigned char *)a4 = v11;
  }
  return result;
}

uint64_t PDDCposclt(int a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)memcpy(__dst, "arei", sizeof(__dst));
  uint64_t v15 = 0x72646E736F696561;
  int v9 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a4 = 12336;
  if (a1 == 8)
  {
    uint64_t v14 = 0;
    while (__dst[v14 - 8] != v9)
    {
      if (++v14 == 8) {
        return result;
      }
    }
    goto LABEL_15;
  }
  if (a1 != 12)
  {
LABEL_15:
    *(unsigned char *)a4 = 49;
    return result;
  }
  uint64_t v10 = 0;
  char v11 = __dst;
  while (1)
  {
    unsigned int v12 = byte_20CC64CF6[v10];
    if (a3 >= v12)
    {
      uint64_t result = SLstrncmp((unsigned char *)(a2 + (a3 - v12)), v11, v12);
      if (!result) {
        return result;
      }
    }
    ++v10;
    v11 += 8;
    if (v10 == 44)
    {
      uint64_t v13 = 0;
      while (byte_20CC64D22[v13] != v9)
      {
        if (++v13 == 13) {
          return result;
        }
      }
      goto LABEL_15;
    }
  }
}

uint64_t PDDCposcls(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  qmemcpy(v14, "mos", 3);
  uint64_t v7 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a5 = 12336;
  if (a3 < 2) {
    int v8 = 0;
  }
  else {
    int v8 = *(unsigned __int8 *)(a2 + a3 - 2);
  }
  if (result == 12)
  {
    uint64_t result = SLstrncmp((unsigned char *)(a2 + (a3 - 3)), (unsigned __int8 *)v14, 3);
    if (result)
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        if (byte_20CC64D3A[i] == v7) {
          goto LABEL_16;
        }
      }
      if ((v7 & 0xFFFFFFF7) == 0x72)
      {
LABEL_16:
        char v11 = 50;
        goto LABEL_19;
      }
      if (v7 == 109)
      {
        char v11 = 52;
      }
      else
      {
        if (v8 == 210 || v8 == 245) {
          char v13 = 52;
        }
        else {
          char v13 = 51;
        }
        if ((*(_DWORD *)(a4 + 4 * v7) & 0x10000000) != 0) {
          char v11 = v13;
        }
        else {
          char v11 = 51;
        }
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (result != 5)
  {
    if (result != 3) {
      return result;
    }
    uint64_t v9 = 0;
    while (byte_20CC64D2F[v9] != v7)
    {
      if (++v9 == 11) {
        goto LABEL_16;
      }
    }
LABEL_18:
    char v11 = 49;
    goto LABEL_19;
  }
  char v11 = 53;
LABEL_19:
  *(unsigned char *)a5 = v11;
  return result;
}

unsigned __int8 *PDDCpreclt(unsigned __int8 *result, uint64_t a2, _WORD *a3)
{
  uint64_t v3 = *result;
  if ((*(_DWORD *)(a2 + 4 * v3) & 0x40000000) != 0) {
    LOBYTE(v3) = v3 + 32;
  }
  *a3 = 12336;
  if (v3 == 104 || (*(_DWORD *)(a2 + 4 * v3) & 0x10000000) != 0) {
    *(unsigned char *)a3 = 49;
  }
  return result;
}

uint64_t PDDCprecls(uint64_t result, uint64_t a2)
{
  *(_WORD *)a2 = 12336;
  switch(result)
  {
    case 3:
      char v2 = 51;
      break;
    case 5:
      char v2 = 56;
      break;
    case 9:
      char v2 = 54;
      break;
    default:
      return result;
  }
  *(unsigned char *)(a2 + 1) = v2;
  return result;
}

uint64_t PDDCposacc(uint64_t result, unsigned int a2, uint64_t a3, char *a4)
{
  uint64_t v7 = result;
  v17[1] = *MEMORY[0x263EF8340];
  int v8 = *(unsigned __int8 *)(result + a2 - 1);
  qmemcpy(v14, "mos", 3);
  qmemcpy(v13, "ndo", 3);
  v17[0] = 0x656F616F65656165;
  uint64_t v15 = *(void *)"eaneenoenua";
  char v16 = 110;
  *(_WORD *)a4 = 12336;
  if (!a2)
  {
    if (v8 == 114 || v8 == 100) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t result = SLstrncmp((unsigned char *)(result + (a2 - 3)), (unsigned __int8 *)v13, 3);
    if (!result
      || (uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 3)), (unsigned __int8 *)v14, 3), !result))
    {
      char v12 = 52;
      goto LABEL_20;
    }
    uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 2)), (unsigned __int8 *)v17, 2);
    if (result
      && (uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 2, 2), result)
      && (uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 4, 2), result)
      && (uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 6, 2), result))
    {
      uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15, 3);
      if (result)
      {
        uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15 + 3, 3);
        if (result)
        {
          uint64_t result = SLstrncmp((unsigned char *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15 + 6, 3);
          if (result)
          {
            if (a2 >= 3) {
              return PDDCcalacc(v7, a2, a3, a4);
            }
            return result;
          }
        }
      }
      char v12 = 51;
    }
    else
    {
LABEL_7:
      char v12 = 50;
    }
LABEL_20:
    a4[1] = v12;
    return result;
  }
  uint64_t v9 = a2;
  uint64_t v10 = (unsigned __int8 *)result;
  while (1)
  {
    unsigned int v11 = *v10++;
    if ((*(_DWORD *)(a3 + 4 * v11) & 0x4000000) != 0) {
      return result;
    }
    if (!--v9) {
      goto LABEL_5;
    }
  }
}

uint64_t PDDCcalacc(uint64_t a1, unsigned int a2, uint64_t a3, char *__str)
{
  unsigned __int8 v5 = a2;
  uint64_t v6 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  v18[0] = *(_OWORD *)"ua";
  v18[1] = *(_OWORD *)"o";
  v18[2] = xmmword_20CC64D6E;
  memset(v19, 0, sizeof(v19));
  int64x2_t v7 = (int64x2_t)xmmword_20CC61BB0;
  int64x2_t v8 = vdupq_n_s64((unint64_t)v18);
  int64x2_t v9 = vdupq_n_s64(2uLL);
  do
  {
    v10.i64[0] = 3 * v7.i64[0];
    v10.i64[1] = 3 * v7.i64[1];
    v19[v6] = vaddq_s64(v8, v10);
    int64x2_t v7 = vaddq_s64(v7, v9);
    ++v6;
  }
  while (v6 != 8);
  void v17[2] = 0;
  *(_WORD *)__str = 12336;
  if (!a2) {
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  char v11 = 0;
  int v12 = 0;
  uint64_t v13 = a2 - 1;
  while (1)
  {
    if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13)) & 0x10000000) == 0)
    {
      if (v12) {
        char v11 = v13;
      }
      goto LABEL_13;
    }
    if (!v12)
    {
      int v12 = v13;
      goto LABEL_13;
    }
    if (!v13) {
      return snprintf(__str, 3uLL, "%02d", v5);
    }
    if (v11) {
      break;
    }
    char v11 = 0;
LABEL_13:
    unint64_t v14 = v13-- + 1;
    if (v14 <= 1) {
      goto LABEL_14;
    }
  }
  if (!(_BYTE)v13)
  {
LABEL_14:
    unsigned __int8 v5 = 0;
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13 - 1)) & 0x10000000) != 0)
  {
    uint64_t v16 = 0;
    v17[0] = *(unsigned char *)(a1 + v13 - 1);
    v17[1] = *(unsigned char *)(a1 + v13);
    while (SLstrncmp(v17, *(unsigned __int8 **)((char *)v19 + v16), 2))
    {
      v16 += 8;
      if (v16 == 128)
      {
        unsigned __int8 v5 = v5 - v13 + 1;
        return snprintf(__str, 3uLL, "%02d", v5);
      }
    }
  }
  v5 -= v13;
  return snprintf(__str, 3uLL, "%02d", v5);
}

uint64_t PDDCrmcc(uint64_t result, int a2, char *a3)
{
  a3[1] = 48;
  if (a2 != 1 && result == 6) {
    char v4 = 48;
  }
  else {
    char v4 = 49;
  }
  *a3 = v4;
  return result;
}

uint64_t DCSFlnkcod(uint64_t result, uint64_t a2)
{
  *(_WORD *)a2 = 12336;
  char v2 = 51;
  switch((int)result)
  {
    case 6:
    case 7:
      goto LABEL_4;
    case 10:
    case 13:
      char v2 = 50;
      goto LABEL_4;
    case 11:
      char v2 = 49;
      *(unsigned char *)a2 = 49;
LABEL_4:
      *(unsigned char *)(a2 + 1) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PDDCdblend(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2) {
    int v4 = 0;
  }
  else {
    int v4 = *(unsigned __int8 *)(a2 + a4 - 2);
  }
  unsigned __int8 v5 = 48;
  if (v4 == *(unsigned __int8 *)(a2 + a4 - 1))
  {
    int v6 = *(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a2 + a4 - 1));
    BOOL v7 = (v6 & 0x10000000) == 0;
    if ((v6 & 0x10000000) != 0) {
      unsigned __int8 v8 = 48;
    }
    else {
      unsigned __int8 v8 = 49;
    }
    if (v7) {
      unsigned __int8 v5 = 49;
    }
    else {
      unsigned __int8 v5 = 50;
    }
    if (a1 != 6) {
      return v8;
    }
  }
  return v5;
}

uint64_t PDSFcltdb(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 55);
  uint64_t v3 = *(void *)(a2 + 104);
  if ((*(_WORD *)(a2 + 3484) & 0x200) == 0 || *(__int16 *)(a2 + 40) <= 0) {
    *(_DWORD *)(v3 + 5_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  switch(v2)
  {
    case 3:
      unsigned int v4 = *(unsigned __int16 *)(v3 + 62);
      unsigned int v5 = (v4 & 0xF) - 1;
      if (v5 <= 3) {
        *(_WORD *)(v3 + 58) |= 0x400020000020001uLL >> (16 * v5);
      }
      int v6 = (v4 >> 4) & 7;
      if (v6 == 2)
      {
        __int16 v7 = *(_WORD *)(v3 + 60) | 2;
        goto LABEL_30;
      }
      if (v6 == 1)
      {
        __int16 v7 = *(_WORD *)(v3 + 60) | 1;
        goto LABEL_30;
      }
      break;
    case 5:
      unsigned int v8 = *(unsigned __int16 *)(v3 + 62);
      uint64_t v9 = (v8 & 0xF) - 1;
      if v9 <= 7 && ((0xEFu >> v9)) {
        *(_WORD *)(v3 + 58) |= word_20CC61B50[v9];
      }
      switch((v8 >> 4) & 7)
      {
        case 1u:
          goto LABEL_24;
        case 2u:
          goto LABEL_26;
        case 3u:
          goto LABEL_27;
        case 4u:
          goto LABEL_28;
        case 5u:
          goto LABEL_29;
        case 6u:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x1000;
          goto LABEL_30;
        default:
          return 1;
      }
    case 8:
      int v10 = *(unsigned __int16 *)(v3 + 62);
      *(unsigned char *)(v3 + 92) = v10 & 0xF;
      int v11 = (32 * v10) & 0xE00;
      *(_WORD *)(v3 + 60) = (32 * v10) & 0xE00;
      unint64_t v12 = *(unsigned __int16 *)(a2 + 40);
      if (v12 <= 2)
      {
        if ((v10 & 0xF) != 0)
        {
          *(_WORD *)(v3 + 2 * v12 + 64) |= (_WORD)v10 << 12;
          int v11 = *(unsigned __int16 *)(v3 + 60);
        }
        if (v11)
        {
          uint64_t v13 = v3 + 2 * *(__int16 *)(a2 + 40);
          *(_WORD *)(v13 + 64) |= (__int16)v11 >> 8;
        }
      }
      break;
    case 9:
      __int16 v14 = *(_WORD *)(v3 + 62);
      int v15 = (v14 & 0xF) - 1;
      if (v15 <= 0xA) {
        *(_WORD *)(v3 + 58) |= word_20CC64D7E[v15];
      }
      __int16 v7 = *(_WORD *)(v3 + 60) | (16 * v14) & 0x100;
LABEL_30:
      *(_WORD *)(v3 + 60) = v7;
      break;
    case 12:
      switch(*(_WORD *)(v3 + 62) & 7)
      {
        case 0:
LABEL_24:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x80;
          goto LABEL_30;
        case 1:
LABEL_26:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x100;
          goto LABEL_30;
        case 2:
LABEL_27:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x200;
          goto LABEL_30;
        case 3:
LABEL_28:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x400;
          goto LABEL_30;
        case 4:
LABEL_29:
          __int16 v7 = *(_WORD *)(v3 + 60) | 0x800;
          goto LABEL_30;
        default:
          return 1;
      }
    default:
      return 1;
  }
  return 1;
}

uint64_t PDSFremacc(const char *a1, uint64_t a2, int a3)
{
  unsigned int v5 = a1;
  uint64_t v6 = (unsigned __int16)strlen(a1);
  if (v6)
  {
    while (a3 != 8)
    {
      if (a3 != 15)
      {
        uint64_t v8 = *v5;
        int v9 = *(_DWORD *)(a2 + 4 * v8);
LABEL_8:
        if ((~v9 & 0x50000000) != 0 || (v9 & 0x4064000) == 0) {
          goto LABEL_14;
        }
        char v7 = PDSFchkaccent[v8 - 192];
        goto LABEL_13;
      }
      char v7 = *v5 - ((*(_DWORD *)(a2 + 4 * *v5) & 0x4020000) != 0);
LABEL_13:
      *unsigned int v5 = v7;
LABEL_14:
      ++v5;
      if (!--v6) {
        return 0;
      }
    }
    uint64_t v8 = *v5;
    int v9 = *(_DWORD *)(a2 + 4 * v8);
    if ((v9 & 0x40000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  return 0;
}

uint64_t PDSFanaqua(uint64_t a1, int a2, _WORD *a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  memset(v53, 0, 256);
  if (a2 >= 1)
  {
    uint64_t v8 = (unsigned __int16)a2;
    int v9 = (unsigned __int8 *)a1;
    do
    {
      int v10 = *v9++;
      ++v53[v10];
      --v8;
    }
    while (v8);
  }
  a3[1062] = 0;
  char v51 = 0;
  uint64_t v11 = *(void *)(a4 + 1184);
  uint64_t v12 = (__int16)a3[1064];
  uint64_t v13 = (__int16)a3[1063];
  __int16 v14 = (unsigned __int8 *)(v11 + v13 + v12);
  int v15 = *v14;
  uint64_t v16 = v11 + v12;
  int v17 = *(unsigned __int8 *)(v11 + v12);
  int v18 = v14[1];
  int v19 = *(unsigned __int8 *)(v16 + 1);
  uint64_t v20 = (__int16)a3[1065];
  uint64_t v21 = *(unsigned __int8 *)(v11 + v20);
  uint64_t v22 = *(unsigned __int8 *)(v11 + v20 + v13);
  char v47 = *(unsigned char *)(v11 + v20);
  char v48 = v22;
  if (v13 >= 1)
  {
    uint64_t v23 = (v18 | (v19 << 8)) - 1;
    int v24 = (v15 | (v17 << 8)) - 1;
    int v25 = 32;
    __int16 v26 = 1;
    long long v27 = 0uLL;
    int v28 = 32;
    while (1)
    {
      int v29 = v24 + 1;
      uint64_t v30 = *(void *)(a4 + 1184);
      int v31 = *(unsigned __int8 *)(v30 + (__int16)(v24 + 1) - 1);
      if (v31 == 255)
      {
        int v29 = v24 + 3;
        int v34 = (__int16)(v24 + 3);
        int v33 = v34 - 2;
      }
      else
      {
        int v32 = (__int16)a3[1066] + v31;
        int v33 = v32 - 1;
        int v34 = v32 + 256;
      }
      if (!v53[v21] || !v53[v22]) {
        goto LABEL_39;
      }
      int v35 = *(unsigned __int8 *)(v30 + v34 - 1);
      int v36 = *(unsigned __int8 *)(v30 + v33);
      if (v36) {
        int v25 = v36;
      }
      char v49 = v25;
      if (v35) {
        int v28 = v35;
      }
      char v50 = v28;
      if ((v25 == 32 || v53[v25]) && (v28 == 32 || v53[v28]))
      {
        uint64_t v37 = 0;
        v52[14] = v27;
        v52[15] = v27;
        v52[12] = v27;
        v52[13] = v27;
        v52[10] = v27;
        v52[11] = v27;
        v52[8] = v27;
        v52[9] = v27;
        v52[6] = v27;
        v52[7] = v27;
        v52[4] = v27;
        v52[5] = v27;
        void v52[2] = v27;
        v52[3] = v27;
        v52[0] = v27;
        v52[1] = v27;
        while (1)
        {
          uint64_t v38 = *(&v47 + v37);
          if (v38 == 32) {
            break;
          }
          ++*((unsigned char *)v52 + v38);
          if (++v37 == 4) {
            goto LABEL_28;
          }
        }
        if ((unsigned __int16)v37 == 4 || (unsigned __int16)v37 == (unsigned __int16)a2)
        {
LABEL_28:
          uint64_t v37 = 0;
          while (*((unsigned __int8 *)v52 + v37) <= v53[v37])
          {
            if (++v37 == 256) {
              goto LABEL_31;
            }
          }
          goto LABEL_26;
        }
        if ((unsigned __int16)v37 == 256) {
          goto LABEL_31;
        }
LABEL_26:
        if (*(&v47 + (__int16)v37) != 32) {
          goto LABEL_36;
        }
LABEL_31:
        if ((__int16)a3[1062] > 498)
        {
          uint64_t v43 = v22;
          int v46 = v25;
          uint64_t v45 = v21;
          int v44 = v28;
          icgetana_0(a1, a2, (uint64_t)a3, a4);
          uint64_t v22 = v43;
          int v28 = v44;
          uint64_t v21 = v45;
          long long v27 = 0uLL;
          int v25 = v46;
        }
        else
        {
          for (uint64_t i = 0; i != 4; ++i)
            *((unsigned char *)&a3[2 * (__int16)a3[1062] + 60] + i) = *(&v47 + i);
          ++a3[1062];
        }
      }
LABEL_36:
      LOWORD(v13) = a3[1063];
      if ((__int16)v29 >= (__int16)v23) {
        break;
      }
      uint64_t v40 = v23;
      LODWORD(v23) = v29;
LABEL_40:
      int v24 = v23;
      uint64_t v23 = v40;
      if (v26 > (__int16)v13) {
        goto LABEL_41;
      }
    }
    uint64_t v30 = *(void *)(a4 + 1184);
LABEL_39:
    uint64_t v41 = (__int16)a3[1065] + (uint64_t)++v26 - 1;
    uint64_t v21 = *(unsigned __int8 *)(v30 + v41);
    uint64_t v22 = *(unsigned __int8 *)(v30 + (int)v41 + (__int16)v13);
    char v47 = *(unsigned char *)(v30 + v41);
    char v48 = v22;
    uint64_t v40 = (*(unsigned __int8 *)(v30 + (__int16)v13 + v26 + (__int16)a3[1064]) | (*(unsigned __int8 *)(v30 + (__int16)a3[1064] + v26) << 8))
        - 1;
    goto LABEL_40;
  }
LABEL_41:
  icgetana_0(a1, a2, (uint64_t)a3, a4);
  return 10;
}

uint64_t icgetana_0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124)) = 0;
  int v5 = *(__int16 *)(a3 + 2124);
  *(void *)(a3 + 112) = a3 + 120;
  if (v5 >= 1)
  {
    uint64_t v8 = (unsigned __int8 *)result;
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int16)v5;
    __int16 v18 = 0;
    do
    {
      uint64_t v11 = a3 + 4 * v9;
      uint64_t result = SLstrncmp(*(unsigned char **)(a3 + 112), (unsigned __int8 *)(v11 + 120), 4);
      if ((int)result <= 0)
      {
        *(void *)(a3 + 112) = v11 + 120;
        v19[0] = *(_DWORD *)(v11 + 120);
        unsigned int v12 = *(unsigned __int8 *)(a4 + 54);
        if (v12 >= 5)
        {
          int v13 = 4;
          do
            *((unsigned char *)v19 + (__int16)v13++) = 0;
          while ((int)v12 > (__int16)v13);
        }
        int v14 = SFbisrch((uint64_t)v19, 0, v12 - 1, &v18, a4);
        unsigned int v15 = *(unsigned __int8 *)(a4 + 54);
        if (v15 >= 5)
        {
          int v16 = 4;
          do
            *((unsigned char *)v19 + (__int16)v16++) = -1;
          while ((int)v15 > (__int16)v16);
        }
        uint64_t result = SFbisrch((uint64_t)v19, 0, v15 - 1, &v18, a4);
        __int16 v17 = result - v14 + v18;
        __int16 v18 = v17;
        if (*(unsigned char *)(a3 + 3194) == 1) {
          uint64_t result = PDdecod2(v8, a2, v14, v17, a4, (unsigned __int16 *)a3);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *(_WORD *)(a3 + 2124) = 0;
  return result;
}

void sub_20CBF80B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_20CBF850C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_20CBF8A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBF8E98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_20CBF9188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBF9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_20CBF9FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFA310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBFAC00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFAF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBFB658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBFB7CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFBA0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFC288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20CBFC438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFC5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_20CBFCD7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t heapCorrectionCursorCompare(void *a1, void *a2)
{
  [a1 prefixProbability];
  double v5 = v4;
  [a2 prefixProbability];
  uint64_t v7 = 1;
  uint64_t v8 = -1;
  if (a1 <= a2) {
    uint64_t v8 = a2 > a1;
  }
  if (v6 <= v5) {
    uint64_t v7 = v8;
  }
  if (v5 <= v6) {
    return v7;
  }
  else {
    return -1;
  }
}

uint64_t PDSFcltcmp(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 104);
  __strcpy_chk();
  unsigned int v5 = *(unsigned __int8 *)(a1 + 55);
  BOOL v6 = 1;
  if (v5 > 0xC || ((1 << v5) & 0x1228) == 0) {
    goto LABEL_13;
  }
  if (*(unsigned char *)(v4 + 34)) {
    BOOL v6 = (unsigned __int16)(*(_WORD *)(v4 + 88) & *(_WORD *)(v4 + 58)) != 0;
  }
  if (!*(unsigned char *)(v4 + 44))
  {
LABEL_13:
    BOOL v9 = 1;
  }
  else
  {
    int v8 = (unsigned __int16)(*(_WORD *)(v4 + 90) & *(_WORD *)(v4 + 60));
    BOOL v9 = v8 != 0;
    if (v5 == 5
      && (*(_WORD *)(a2 + 3482) & 0x40) != 0
      && *(unsigned char *)(a2 + 88) == 2
      && !SLstrcmp(v11, "-la"))
    {
      BOOL v9 = (*(_WORD *)(v4 + 60) & 0x1A00 | v8) != 0;
    }
  }
  if (v6 && v9) {
    return 10;
  }
  else {
    return 11;
  }
}

uint64_t PDSFcltscr(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = (unsigned char *)(a4 + 34);
  uint64_t v9 = *(void *)(a3 + 56);
  if (*(unsigned char *)(a4 + 34)
    && ((uint64_t v10 = *a1, v10 != 104) ? (v4 = 1, v5 = (*(_DWORD *)(v9 + 4 * v10) & 0x10000000) == 0) : (v4 = 0, v5 = 0), v5))
  {
    if (*(unsigned char *)(a3 + 55) == 5 && !SLstrcmp(v8, "d'"))
    {
      __int16 v18 = "yeux";
      int v19 = a1;
LABEL_28:
      if (!SLstrcmp(v19, (unsigned __int8 *)v18)) {
        return 10;
      }
    }
  }
  else
  {
    uint64_t v11 = (unsigned char *)(a4 + 44);
    switch(*(unsigned char *)(a3 + 55))
    {
      case 3:
        if (*v11)
        {
          int v12 = *(unsigned __int16 *)(a4 + 60);
          if (v12 != 3)
          {
            uint64_t v13 = a1[a2 - 1];
            BOOL v14 = (*(_DWORD *)(v9 + 4 * v13) & 0x10000000) == 0 || v13 == 117;
            BOOL v15 = v14 || v13 == 249;
            BOOL v16 = v15;
            if ((v12 & 1) == 0 && !v16) {
              return 11;
            }
            if ((v12 & 2) == 0 && v16) {
              return 11;
            }
          }
        }
        return 10;
      case 5:
        if (!*v11 || (*(__int16 *)(a4 + 90) & 0x80000000) == 0) {
          return 10;
        }
        uint64_t v20 = a2 - 1;
        uint64_t result = 11;
        if (!(!v5 & v4))
        {
          switch(a1[v20])
          {
            case 'a':
            case 'c':
            case 'e':
              if (!SLstrcmp(v11, "-t-il") || !SLstrcmp(v11, "-t-elle")) {
                return 10;
              }
              __int16 v18 = "-t-on";
              break;
            case 'b':
            case 'f':
            case 'g':
            case 'h':
              return result;
            case 'd':
              goto LABEL_68;
            case 'i':
              int v29 = SLstrcmp(v11, "-je");
              uint64_t result = 11;
              if (a2 < 2 || v29 || a1[a2 - 2] != 97) {
                return result;
              }
              return 10;
            default:
              JUMPOUT(0);
          }
LABEL_67:
          int v19 = v11;
          goto LABEL_28;
        }
        switch(a1[v20])
        {
          case 's':
            if (!SLstrcmp(v11, "-je") || !SLstrcmp(v11, "-tu")) {
              return 10;
            }
            goto LABEL_37;
          case 't':
LABEL_68:
            if (!SLstrcmp(v11, "-il")
              || !SLstrcmp(v11, "-elle")
              || !SLstrcmp(v11, "-on"))
            {
              return 10;
            }
            if (SLstrcmp(v11, "-ils"))
            {
              int v28 = SLstrcmp(v11, "-elles");
              uint64_t result = 11;
              if (a2 < 2 || v28) {
                return result;
              }
            }
            else if (a2 < 2)
            {
              return 11;
            }
            if (a1[a2 - 2] == 110) {
              return 10;
            }
            break;
          case 'u':
          case 'v':
          case 'w':
          case 'y':
            return result;
          case 'x':
            goto LABEL_76;
          case 'z':
LABEL_37:
            if (!SLstrcmp(v11, "-y") || !SLstrcmp(v11, "-en")) {
              return 10;
            }
            __int16 v18 = "-y-en";
            goto LABEL_67;
          default:
            if (a1[v20] != 233) {
              return result;
            }
LABEL_76:
            if (SLstrcmp(v11, "-je") && (SLstrcmp(v11, "-tu") || a1[v20] != 120)) {
              return 11;
            }
            return 10;
        }
        return 11;
      case 9:
        if (*(unsigned char *)(a4 + 34)) {
          BOOL v22 = (*(_WORD *)(a4 + 88) & 0x40) == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22 && *a1 != 105 && (*(_DWORD *)(v9 + 4 * a1[1]) & 0x10000000) != 0
          || !SLstrcmp(v8, "c'") && (*(_DWORD *)(v9 + 4 * *a1) & 0x800) == 0)
        {
          return 11;
        }
        return 10;
      case 0xC:
        int v23 = *(__int16 *)(a4 + 90);
        if ((v23 & 0x80000000) == 0) {
          return 10;
        }
        if ((v23 & 0x20) == 0)
        {
          int v24 = a1[a2 - 1];
          uint64_t result = 10;
          if ((v24 - 224) > 0x14 || ((1 << (v24 + 32)) & 0x101401) == 0)
          {
            if (v24 == 105) {
              return 10;
            }
            else {
              return 11;
            }
          }
          return result;
        }
        if (a1[a2 - 1] == 114)
        {
          unsigned __int8 v26 = a1[a2 - 2] - 97;
          unsigned __int8 v27 = (v26 >> 1) | (v26 << 7);
          if (v27 < 8u) {
            return dword_20CC64D94[(char)v27];
          }
        }
        break;
      default:
        return 10;
    }
  }
  return 11;
}

uint64_t PDSFcor1qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[148];
  int v6 = *(__int16 *)(a3 + 2126);
  uint64_t v7 = *(__int16 *)(a3 + 2128);
  __int16 v8 = *(_WORD *)(a3 + 2130) - 1;
  __int16 v9 = *(_WORD *)(a3 + 2132);
  __int16 v10 = strlen(a1);
  char v71 = 0;
  uint64_t v11 = (unsigned __int8 *)(v5 + (__int16)(v7 + v6));
  int v12 = *v11;
  int v13 = *(unsigned __int8 *)(v5 + v7);
  int v14 = v11[1];
  int v15 = *(unsigned __int8 *)(v5 + v7 + 1);
  int v16 = *(unsigned __int8 *)(v5 + v8 + 1);
  int v17 = *(unsigned __int8 *)(v5 + (__int16)(v8 + v6) + 1);
  unsigned __int8 v67 = *(unsigned char *)(v5 + v8 + 1);
  unsigned __int8 v68 = v17;
  if (v6 >= 2)
  {
    int v18 = v12 | (v13 << 8);
    int v19 = (__int16)(v9 - 1);
    __int16 v20 = v9 + 255;
    uint64_t v21 = (__int16)(v7 + v6);
    uint64_t v22 = (v14 | (v15 << 8)) - 1;
    int v23 = v18 - 1;
    uint64_t v24 = a3 + 120;
    uint64_t v25 = v8;
    uint64_t v26 = (__int16)(v8 + v6);
    int v27 = v20;
    LOWORD(v2_Block_object_dispose(&STACK[0x510], 8) = 1;
    uint64_t v29 = v10;
    int v30 = 32;
    int v31 = 32;
    do
    {
      int v32 = *((unsigned __int8 *)a1 + 1);
      int v33 = *(unsigned __int8 *)a1;
      uint64_t v34 = v22;
      while (1)
      {
        if ((__int16)v23 >= (__int16)v34)
        {
          uint64_t v28 = (__int16)v28 + 1;
          int v16 = *(unsigned __int8 *)(v5 + v28 + v25);
          int v17 = *(unsigned __int8 *)(v5 + v26 + (__int16)v28);
          unsigned __int8 v67 = *(unsigned char *)(v5 + v28 + v25);
          unsigned __int8 v68 = v17;
          uint64_t v22 = (*(unsigned __int8 *)(v5 + v21 + (__int16)v28) | (*(unsigned __int8 *)(v5 + v7 + (__int16)v28) << 8))
              - 1;
        }
        else
        {
          uint64_t v22 = v34;
          LODWORD(v34) = v23;
        }
        int v35 = *(unsigned __int8 *)(v5 + (__int16)(v34 + 1) - 1);
        int v36 = (__int16)(v34 + 3);
        int v37 = v36 - 2;
        int v38 = v36 - 1;
        int v39 = v35 + v27;
        BOOL v40 = v35 == 255;
        if (v35 == 255) {
          int v41 = v37;
        }
        else {
          int v41 = v35 + v19;
        }
        if (v40)
        {
          int v23 = v34 + 3;
        }
        else
        {
          int v38 = v39;
          int v23 = v34 + 1;
        }
        int v42 = *(unsigned __int8 *)(v5 + v38);
        int v43 = *(unsigned __int8 *)(v5 + v41);
        if (v16 == v32 && v17 == v33)
        {
          int v44 = v16;
          goto LABEL_23;
        }
        if (v16 == v33 && (v17 == v32 || v17 == *((unsigned __int8 *)a1 + 2) || v17 == v16)) {
          break;
        }
        int v23 = v22;
        uint64_t v34 = v22;
        if (v6 <= (__int16)v28) {
          return 10;
        }
      }
      int v44 = v32;
LABEL_23:
      if (v43) {
        int v30 = v43;
      }
      char v69 = v30;
      if (v42) {
        int v31 = v42;
      }
      char v70 = v31;
      if (v31 == 32)
      {
        if (v30 == 32)
        {
          BOOL v45 = v17 != 32;
          if (v17 == 32) {
            __int16 v46 = 1;
          }
          else {
            __int16 v46 = 2;
          }
        }
        else
        {
          BOOL v45 = 0;
          __int16 v46 = 3;
        }
      }
      else
      {
        BOOL v45 = 0;
        __int16 v46 = 4;
      }
      if (v16 == v33)
      {
        BOOL v47 = v17 == v16 && v30 == v44;
        int v48 = *((unsigned __int8 *)a1 + 2);
        BOOL v50 = v47 && v31 == v48;
        if (v17 == v44)
        {
          if (v31 == v48 && v30 == v17) {
            BOOL v50 = 1;
          }
          if (v30 == v48 && (v31 == v30 || v31 == *((unsigned __int8 *)a1 + 4) || v31 == *((unsigned __int8 *)a1 + 3))) {
            BOOL v50 = 1;
          }
          if (v30 == *((unsigned __int8 *)a1 + 3) && (v31 == v48 || v31 == *((unsigned __int8 *)a1 + 4))) {
            BOOL v50 = 1;
          }
        }
        if (v17 == v48)
        {
          int v52 = *((unsigned __int8 *)a1 + 3);
          if ((v31 == v52 || v31 == 32) && v30 == v44) {
            BOOL v50 = 1;
          }
LABEL_80:
          if (v30 == v52 && v31 == *((unsigned __int8 *)a1 + 4))
          {
LABEL_83:
            int v59 = v31;
            int v60 = v30;
            uint64_t v63 = v25;
            uint64_t v64 = v24;
            uint64_t v65 = v7;
            uint64_t v61 = v26;
            uint64_t v62 = v21;
            uint64_t v55 = v29;
            int v56 = PDSFcorqbr(a2, a3, (uint64_t)&v67, v46, (uint64_t)a1, v29, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158)));
            int v31 = v59;
            int v30 = v60;
            uint64_t v29 = v55;
            uint64_t v26 = v61;
            uint64_t v21 = v62;
            uint64_t v25 = v63;
            uint64_t v24 = v64;
            uint64_t v7 = v65;
            if (v56 == 10)
            {
              if (*(__int16 *)(a3 + 2124) > 499) {
                return 10;
              }
              for (uint64_t i = 0; i != 4; ++i)
                *(unsigned char *)(v64 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v67 + i);
              ++*(_WORD *)(a3 + 2124);
            }
            goto LABEL_88;
          }
        }
      }
      else
      {
        if (v16 != v32) {
          goto LABEL_88;
        }
        BOOL v50 = v17 == v33
           && (v45 || v30 == *((unsigned __int8 *)a1 + 2) && (v31 == 32 || v31 == *((unsigned __int8 *)a1 + 3)));
        if (v17 == *((unsigned __int8 *)a1 + 2))
        {
          int v52 = *((unsigned __int8 *)a1 + 3);
          goto LABEL_80;
        }
      }
      if (v50) {
        goto LABEL_83;
      }
LABEL_88:
      int v16 = v67;
      int v17 = v68;
    }
    while (v6 > (__int16)v28);
  }
  return 10;
}

uint64_t PDSFcor2qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[148];
  uint64_t v6 = *(__int16 *)(a3 + 2126);
  uint64_t v7 = *(__int16 *)(a3 + 2128);
  __int16 v8 = *(_WORD *)(a3 + 2130) - 1;
  __int16 v9 = *(_WORD *)(a3 + 2132);
  __int16 v10 = v7 + *(_WORD *)(a3 + 2126);
  __int16 v11 = v8 + *(_WORD *)(a3 + 2126);
  __int16 v12 = strlen(a1);
  char v70 = 0;
  int v13 = (unsigned __int8 *)(v5 + v10);
  int v14 = *v13;
  int v15 = *(unsigned __int8 *)(v5 + v7);
  int v16 = v13[1];
  int v17 = *(unsigned __int8 *)(v5 + v7 + 1);
  unsigned __int8 v18 = *(unsigned char *)(v5 + v11 + 1);
  unsigned __int8 v66 = *(unsigned char *)(v5 + v8 + 1);
  unsigned __int8 v67 = v18;
  if ((int)v6 >= 2)
  {
    int v19 = a1;
    uint64_t v20 = v6;
    uint64_t v21 = (__int16)(v9 - 1);
    uint64_t v22 = v10;
    uint64_t v23 = (v16 | (v17 << 8)) - 1;
    int v24 = (v14 | (v15 << 8)) - 1;
    int v25 = 32;
    uint64_t v26 = v8;
    uint64_t v27 = v11;
    int v28 = (__int16)(v9 + 255);
    uint64_t v29 = 1;
    int v58 = v12;
    int v59 = v28;
    int v30 = 32;
    uint64_t v60 = v11;
    uint64_t v61 = v26;
    do
    {
      if ((__int16)v24 >= (__int16)v23)
      {
        uint64_t v29 = (__int16)v29 + 1;
        unsigned __int8 v31 = *(unsigned char *)(v5 + v27 + (__int16)v29);
        unsigned __int8 v66 = *(unsigned char *)(v5 + v29 + v26);
        unsigned __int8 v67 = v31;
        int v24 = v23;
        uint64_t v23 = (*(unsigned __int8 *)(v5 + v22 + (__int16)v29) | (*(unsigned __int8 *)(v5 + v7 + (__int16)v29) << 8)) - 1;
      }
      int v32 = *(unsigned __int8 *)(v5 + (__int16)(v24 + 1) - 1);
      int v33 = (__int16)(v24 + 3);
      int v34 = v33 - 2;
      int v35 = v33 - 1;
      BOOL v36 = v32 == 255;
      if (v32 == 255)
      {
        int v37 = v35;
      }
      else
      {
        int v34 = v32 + v21;
        int v37 = v32 + v28;
      }
      int v38 = *(unsigned __int8 *)(v5 + v37);
      if (v36) {
        v24 += 3;
      }
      else {
        ++v24;
      }
      unsigned int v39 = *(unsigned __int16 *)(a3 + 2144);
      if (*(__int16 *)(a3 + 2144) >= 1)
      {
        unsigned int v40 = *(unsigned __int8 *)v19;
        if (v66 < v40) {
          goto LABEL_13;
        }
        if (v66 > v40) {
          return 10;
        }
        unsigned int v41 = *((unsigned __int8 *)v19 + 1);
        if (v39 < 2)
        {
          if (v67 == v41) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v67 < v41) {
            goto LABEL_13;
          }
          if (v67 > v41) {
            return 10;
          }
        }
      }
      if (*(unsigned char *)(v5 + v34)) {
        int v25 = *(unsigned __int8 *)(v5 + v34);
      }
      char v68 = v25;
      if (v38) {
        int v30 = v38;
      }
      char v69 = v30;
      if (!v39
        && v66 == *(unsigned __int8 *)v19
        && v67 == *((unsigned __int8 *)v19 + 1)
        && v25 == *((unsigned __int8 *)v19 + 2))
      {
        continue;
      }
      if (v30 == 32)
      {
        if (v25 == 32)
        {
          char v42 = 0;
          if (v67 == 32) {
            __int16 v43 = 1;
          }
          else {
            __int16 v43 = 2;
          }
        }
        else
        {
          __int16 v43 = 3;
          char v42 = 1;
        }
      }
      else
      {
        char v42 = 0;
        __int16 v43 = 4;
      }
      if ((__int16)v39 >= 3)
      {
        if (v25 == *((unsigned __int8 *)v19 + 2) && (v39 < 4 || v30 == *((unsigned __int8 *)v19 + 3))) {
          goto LABEL_44;
        }
      }
      else if (v39 == 2)
      {
        if (v25 != *((unsigned __int8 *)v19 + 2)) {
          goto LABEL_44;
        }
      }
      else
      {
        if (v39) {
          goto LABEL_44;
        }
        int v51 = *(unsigned __int8 *)v19;
        if (v66 == v51)
        {
LABEL_13:
          int v24 = v23;
          continue;
        }
        int v52 = *((unsigned __int8 *)v19 + 1);
        if (v67 == v51)
        {
          int v53 = *((unsigned __int8 *)v19 + 2);
          BOOL v54 = v30 == v53;
          if (v25 != v52) {
            BOOL v54 = 0;
          }
        }
        else
        {
          BOOL v54 = 0;
          int v53 = *((unsigned __int8 *)v19 + 2);
        }
        if (v67 == v52 && v25 == v53 && ((v42 & 1) != 0 || v30 == *((unsigned __int8 *)v19 + 3))) {
          BOOL v54 = 1;
        }
        if (v66 == v52 && v67 == v53 && v25 == *((unsigned __int8 *)v19 + 3) && v30 == *((unsigned __int8 *)v19 + 4)
          || v54)
        {
LABEL_44:
          uint64_t v63 = v29;
          int v64 = v30;
          int v65 = v25;
          uint64_t v44 = v23;
          uint64_t v45 = v22;
          uint64_t v46 = v21;
          uint64_t v47 = v7;
          uint64_t v48 = v20;
          char v49 = v19;
          if (PDSFcorqbr(a2, a3, (uint64_t)&v66, v43, (uint64_t)v19, v58, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158))) == 10)
          {
            uint64_t v22 = v45;
            uint64_t v23 = v44;
            int v30 = v64;
            int v25 = v65;
            uint64_t v27 = v60;
            uint64_t v26 = v61;
            int v28 = v59;
            uint64_t v29 = v63;
            if (*(__int16 *)(a3 + 2124) > 499) {
              return 10;
            }
            uint64_t v20 = v48;
            uint64_t v7 = v47;
            int v19 = v49;
            uint64_t v21 = v46;
            for (uint64_t i = 0; i != 4; ++i)
              *(unsigned char *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v66 + i);
            ++*(_WORD *)(a3 + 2124);
          }
          else
          {
            uint64_t v20 = v48;
            uint64_t v7 = v47;
            int v19 = v49;
            uint64_t v21 = v46;
            uint64_t v22 = v45;
            uint64_t v23 = v44;
            int v30 = v64;
            int v25 = v65;
            uint64_t v27 = v60;
            uint64_t v26 = v61;
            int v28 = v59;
            uint64_t v29 = v63;
          }
          continue;
        }
        if (v67 != v53 && v67 != v52 && v67 != v51) {
          int v24 = v23;
        }
      }
    }
    while ((int)v20 > (__int16)v29);
  }
  return 10;
}

uint64_t PDSFcor3qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[148];
  int v7 = *(__int16 *)(a3 + 2126);
  int v8 = *(__int16 *)(a3 + 2128);
  __int16 v9 = *(_WORD *)(a3 + 2130);
  __int16 v10 = *(_WORD *)(a3 + 2132);
  __int16 v11 = strlen(a1);
  __int16 v12 = v11;
  uint64_t v13 = v11;
  int v14 = *(unsigned __int8 *)(a3 + 2164);
  if ((int)v13 - v14 > 1) {
    return 10;
  }
  int v15 = v7;
  uint64_t v16 = v8;
  __int16 v17 = v9 - 1;
  __int16 v18 = v8 + v7;
  __int16 v19 = v9 - 1 + v7;
  memset(v85, 0, 256);
  memset(v84, 0, sizeof(v84));
  if (v14 != 255)
  {
    __int16 v20 = 0;
    do
    {
      if (v14 == v11)
      {
        uint64_t v21 = *(unsigned __int8 *)(a3 + (v20 | 1) + 2164);
        int v22 = *(unsigned __int8 *)(a2[21] + v21);
        uint64_t v23 = *(unsigned __int8 *)(a2[22] + v21);
        int v24 = *(unsigned __int8 **)(a2[19] + 8 * v21);
        v85[*v24] = 1;
        if (v22 == 1) {
          int v25 = &a1[v23];
        }
        else {
          int v25 = (const char *)(v24 + 1);
        }
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1) {
          break;
        }
        v85[*(unsigned __int8 *)a1] = 1;
        int v25 = *(const char **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v20 | 1) + 2164));
      }
      *((unsigned char *)v84 + *(unsigned __int8 *)v25) = 1;
      v20 += 2;
      int v14 = *(unsigned __int8 *)(a3 + v20 + 2164);
    }
    while (v14 != 255);
  }
  char v83 = 0;
  uint64_t v26 = (unsigned __int8 *)(v6 + v18);
  int v27 = *v26;
  int v28 = *(unsigned __int8 *)(v6 + v8);
  int v29 = v26[1];
  int v30 = *(unsigned __int8 *)(v8 + v6 + 1);
  unsigned __int8 v31 = *(unsigned char *)(v6 + v19 + 1);
  unsigned __int8 v79 = *(unsigned char *)(v6 + v17 + 1);
  unsigned __int8 v80 = v31;
  if (v7 < 2) {
    return 10;
  }
  int v32 = (__int16)(v10 - 1);
  uint64_t v33 = v18;
  int v34 = (v29 | (v30 << 8)) - 1;
  int v35 = (v27 | (v28 << 8)) - 1;
  int v36 = 32;
  uint64_t v75 = v19;
  uint64_t v76 = v17;
  int v77 = (__int16)(v10 + 255);
  uint64_t v37 = 1;
  int v38 = 32;
  uint64_t v72 = v16;
  __int16 v73 = v11;
  int v71 = v32;
  uint64_t v70 = v33;
  do
  {
    if ((__int16)v35 >= (__int16)v34)
    {
      uint64_t v37 = (__int16)v37 + 1;
      unsigned __int8 v39 = *(unsigned char *)(v6 + v75 + (__int16)v37);
      unsigned __int8 v79 = *(unsigned char *)(v6 + v37 + v76);
      unsigned __int8 v80 = v39;
      int v35 = v34;
      int v34 = (*(unsigned __int8 *)(v6 + v33 + (__int16)v37) | (*(unsigned __int8 *)(v6 + v16 + (__int16)v37) << 8)) - 1;
    }
    int v40 = *(unsigned __int8 *)(v6 + (__int16)(v35 + 1) - 1);
    int v41 = (__int16)(v35 + 3);
    int v42 = v41 - 2;
    int v43 = v41 - 1;
    int v44 = v40 + v77;
    BOOL v45 = v40 == 255;
    if (v40 == 255) {
      int v46 = v42;
    }
    else {
      int v46 = v40 + v32;
    }
    if (v45)
    {
      int v47 = v35 + 3;
    }
    else
    {
      int v43 = v44;
      int v47 = v35 + 1;
    }
    int v48 = *(unsigned __int8 *)(v6 + v43);
    int v49 = *(unsigned __int8 *)(v6 + v46);
    if (v49) {
      int v36 = v49;
    }
    char v81 = v36;
    if (v48) {
      int v38 = v48;
    }
    char v82 = v38;
    int v78 = v47;
    if (v38 == 32)
    {
      if (v36 == 32)
      {
        if (v80 == 32) {
          unsigned __int16 v50 = 1;
        }
        else {
          unsigned __int16 v50 = 2;
        }
      }
      else
      {
        unsigned __int16 v50 = 3;
      }
    }
    else
    {
      unsigned __int16 v50 = 4;
    }
    int v35 = v34;
    if (!v85[v79]) {
      continue;
    }
    int v35 = v34;
    if (!*((unsigned char *)v84 + v80)) {
      continue;
    }
    int v51 = *(unsigned __int8 *)(a3 + 2164);
    int v35 = v34;
    if (v51 == 255) {
      continue;
    }
    unsigned __int16 v52 = 0;
    __int16 v53 = 0;
    do
    {
      int v54 = (__int16)(v12 - v51);
      if (v54 > 1) {
        break;
      }
      if (v54 == 1 && *(unsigned __int8 *)a1 != v79) {
        goto LABEL_65;
      }
      uint64_t v55 = *(unsigned __int8 *)(a3 + (v53 | 1) + 2164);
      uint64_t v56 = a2[21];
      unsigned int v57 = *(unsigned __int8 *)(v56 + v55);
      uint64_t v58 = *(unsigned __int8 *)(a2[22] + v55);
      if (!*(unsigned char *)(v56 + v55))
      {
        if ((unsigned __int16)v54 == v50) {
          goto LABEL_59;
        }
        int v59 = 0;
LABEL_51:
        int v63 = v54 + (__int16)v59;
        if (v63 < v50)
        {
          uint64_t v64 = v58 - v57;
          do
          {
            if (*(&v79 + v63) != a1[v64 + v63]) {
              break;
            }
            int v63 = v54 + (__int16)++v59;
          }
          while (v63 < v50);
        }
        if (v63 == v50) {
          goto LABEL_59;
        }
        goto LABEL_56;
      }
      if (v54 >= (__int16)v50)
      {
        int v59 = 0;
        int v60 = 0;
      }
      else
      {
        int v59 = 0;
        int v60 = 0;
        uint64_t v61 = *(void *)(a2[19] + 8 * v55);
        int v62 = v54;
        do
        {
          if (*(&v79 + v62) != *(unsigned __int8 *)(v61 + (__int16)v59)) {
            break;
          }
          int v60 = (__int16)++v59;
          unsigned __int16 v52 = 1;
          if ((__int16)v59 >= (int)v57) {
            break;
          }
          int v62 = v54 + (__int16)v59;
        }
        while (v62 < v50);
      }
      if (v60 + v54 == v50) {
        goto LABEL_59;
      }
      if (v60 == v57) {
        goto LABEL_51;
      }
LABEL_56:
      v53 += 2;
      int v51 = *(unsigned __int8 *)(a3 + v53 + 2164);
    }
    while (v51 != 255);
    int v65 = v52;
    if (v52 == 1) {
      goto LABEL_65;
    }
    int v35 = v34;
    if (!v65) {
      continue;
    }
LABEL_59:
    if (v38 != 32) {
      goto LABEL_61;
    }
    uint64_t v74 = v37;
    uint64_t v66 = v13;
    int v67 = PDSFcorqbr(a2, a3, (uint64_t)&v79, (__int16)v50, (uint64_t)a1, v13, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158)));
    uint64_t v33 = v70;
    int v32 = v71;
    uint64_t v16 = v72;
    __int16 v12 = v73;
    uint64_t v13 = v66;
    uint64_t v37 = v74;
    int v15 = v7;
    if (v67 == 10)
    {
LABEL_61:
      if (*(__int16 *)(a3 + 2124) > 499) {
        return 10;
      }
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v79 + i);
      ++*(_WORD *)(a3 + 2124);
    }
LABEL_65:
    int v35 = v78;
  }
  while (v15 > (__int16)v37);
  return 10;
}

uint64_t PDSFcor6qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[7];
  uint64_t v6 = a2[148];
  int v94 = *(__int16 *)(a3 + 2126);
  int v7 = *(__int16 *)(a3 + 2128);
  __int16 v8 = *(_WORD *)(a3 + 2130);
  __int16 v9 = *(_WORD *)(a3 + 2132);
  int v10 = (__int16)strlen(a1);
  int v11 = *(unsigned __int8 *)(a3 + 2164);
  unint64_t v12 = *(unsigned __int8 *)a1;
  int v13 = *(_DWORD *)(v5 + 4 * v12);
  if (v10 <= v11)
  {
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    int v14 = a2;
    int v15 = v94;
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v14 = a2;
    int v15 = v94;
    if ((v13 & 0x10000000) == 0) {
      return 10;
    }
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
  }
  uint64_t v16 = 0;
  int64x2_t v17 = vdupq_n_s64(v12);
  int64x2_t v18 = (int64x2_t)xmmword_20CC61BA0;
  int64x2_t v19 = (int64x2_t)xmmword_20CC61BB0;
  __int16 v20 = (char *)&v118 + 1;
  v21.i64[0] = 0x1000000010000000;
  v21.i64[1] = 0x1000000010000000;
  int64x2_t v22 = vdupq_n_s64(4uLL);
  do
  {
    int16x4_t v23 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, v17), (int32x4_t)vceqq_s64(v18, v17))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v16), v21))));
    if (v23.i8[0]) {
      *(v20 - 1) = 1;
    }
    if (v23.i8[2]) {
      *__int16 v20 = 1;
    }
    if (v23.i8[4]) {
      v20[1] = 1;
    }
    if (v23.i8[6]) {
      v20[2] = 1;
    }
    int64x2_t v18 = vaddq_s64(v18, v22);
    int64x2_t v19 = vaddq_s64(v19, v22);
    v20 += 4;
    v16 += 16;
  }
  while (v16 != 1024);
  *((unsigned char *)&v102 + *((unsigned __int8 *)a1 + 1)) = 1;
LABEL_16:
  uint64_t v93 = v7;
  __int16 v24 = v8 - 1;
  __int16 v25 = v7 + v15;
  __int16 v26 = v8 - 1 + v15;
  if (v11 != 255 && v10 == v11)
  {
    __int16 v27 = 0;
    uint64_t v28 = v14[21];
    uint64_t v29 = v14[22];
    v30.i64[0] = 0x1000000010000000;
    v30.i64[1] = 0x1000000010000000;
    int64x2_t v31 = vdupq_n_s64(4uLL);
    uint64_t v32 = v14[19];
    do
    {
      uint64_t v33 = *(unsigned __int8 *)(a3 + (v27 | 1) + 2164);
      int v34 = *(unsigned __int8 *)(v28 + v33);
      uint64_t v35 = *(unsigned __int8 *)(v29 + v33);
      int v36 = *(unsigned __int8 **)(v32 + 8 * v33);
      *((unsigned char *)&v118 + *v36) = 1;
      if (v35 == 1)
      {
        unint64_t v37 = *((unsigned __int8 *)a1 + 1);
        if ((*(_DWORD *)(v5 + 4 * v37) & 0x10000000) != 0)
        {
          uint64_t v38 = 0;
          int64x2_t v39 = vdupq_n_s64(v37);
          int v40 = (char *)&v102 + 1;
          int64x2_t v41 = (int64x2_t)xmmword_20CC61BB0;
          int64x2_t v42 = (int64x2_t)xmmword_20CC61BA0;
          do
          {
            int16x4_t v43 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v41, v39), (int32x4_t)vceqq_s64(v42, v39))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v38), v30))));
            if (v43.i8[0]) {
              *(v40 - 1) = 1;
            }
            if (v43.i8[2]) {
              *int v40 = 1;
            }
            if (v43.i8[4]) {
              v40[1] = 1;
            }
            if (v43.i8[6]) {
              v40[2] = 1;
            }
            int64x2_t v42 = vaddq_s64(v42, v31);
            int64x2_t v41 = vaddq_s64(v41, v31);
            v40 += 4;
            v38 += 16;
          }
          while (v38 != 1024);
        }
      }
      int v44 = (unsigned __int8 *)&a1[v35];
      if (v34 == 1) {
        BOOL v45 = v44;
      }
      else {
        BOOL v45 = v36 + 1;
      }
      *((unsigned char *)&v102 + *v45) = 1;
      v27 += 2;
      int v46 = *(unsigned __int8 *)(a3 + v27 + 2164);
    }
    while (v46 != 255 && v10 == v46);
  }
  char v101 = 0;
  int v48 = (unsigned __int8 *)(v6 + v25);
  int v49 = *v48;
  uint64_t v50 = v7;
  int v51 = *(unsigned __int8 *)(v6 + v7);
  int v52 = v48[1];
  int v53 = *(unsigned __int8 *)(v7 + v6 + 1);
  unsigned __int8 v54 = *(unsigned char *)(v6 + v26 + 1);
  unsigned __int8 v97 = *(unsigned char *)(v6 + v24 + 1);
  unsigned __int8 v98 = v54;
  if (v15 >= 2)
  {
    int v55 = (__int16)(v9 - 1);
    uint64_t v56 = v25;
    int v57 = (v52 | (v53 << 8)) - 1;
    int v58 = (v49 | (v51 << 8)) - 1;
    int v59 = 32;
    uint64_t v60 = v24;
    uint64_t v61 = v26;
    int v96 = (__int16)(v9 + 255);
    LOWORD(v62) = 1;
    int v63 = 32;
    int v91 = v55;
    uint64_t v89 = v24;
    uint64_t v90 = v25;
    uint64_t v92 = v26;
    do
    {
      if ((__int16)v58 >= (__int16)v57)
      {
        uint64_t v62 = (__int16)v62 + 1;
        unsigned __int8 v64 = *(unsigned char *)(v6 + v61 + (__int16)v62);
        unsigned __int8 v97 = *(unsigned char *)(v6 + v62 + v60);
        unsigned __int8 v98 = v64;
        int v58 = v57;
        int v57 = (*(unsigned __int8 *)(v6 + v56 + (__int16)v62) | (*(unsigned __int8 *)(v6 + v50 + (__int16)v62) << 8)) - 1;
      }
      int v65 = *(unsigned __int8 *)(v6 + (__int16)(v58 + 1) - 1);
      int v66 = (__int16)(v58 + 3);
      int v67 = v66 - 2;
      int v68 = v66 - 1;
      BOOL v69 = v65 == 255;
      if (v65 == 255)
      {
        int v70 = v68;
      }
      else
      {
        int v67 = v65 + v55;
        int v70 = v65 + v96;
      }
      int v71 = *(unsigned __int8 *)(v6 + v70);
      if (v69) {
        v58 += 3;
      }
      else {
        ++v58;
      }
      unsigned int v72 = *(unsigned __int16 *)(a3 + 2144);
      if (*(__int16 *)(a3 + 2144) >= 1)
      {
        unsigned int v73 = *(unsigned __int8 *)a1;
        if (v97 < v73) {
          goto LABEL_77;
        }
        if (v97 > v73) {
          return 10;
        }
        unsigned int v74 = *((unsigned __int8 *)a1 + 1);
        if (v72 < 2)
        {
          if (v98 == v74) {
            goto LABEL_77;
          }
        }
        else
        {
          if (v98 < v74) {
            goto LABEL_77;
          }
          if (v98 > v74) {
            return 10;
          }
        }
      }
      if (*(unsigned char *)(v6 + v67)) {
        int v59 = *(unsigned __int8 *)(v6 + v67);
      }
      char v99 = v59;
      if (v71) {
        int v63 = v71;
      }
      char v100 = v63;
      if (!v72
        && v97 == *(unsigned __int8 *)a1
        && v98 == *((unsigned __int8 *)a1 + 1)
        && v59 == *((unsigned __int8 *)a1 + 2))
      {
        continue;
      }
      if (v63 == 32)
      {
        if (v59 == 32)
        {
          if (v98 == 32) {
            __int16 v75 = 1;
          }
          else {
            __int16 v75 = 2;
          }
        }
        else
        {
          __int16 v75 = 3;
        }
      }
      else
      {
        __int16 v75 = 4;
      }
      if (!*((unsigned char *)&v118 + v97) || !*((unsigned char *)&v102 + v98))
      {
LABEL_77:
        int v58 = v57;
        continue;
      }
      if ((*(_DWORD *)(v5 + 4 * v97) & 0x10000000) == 0
        || (*(_DWORD *)(v5 + 4 * *(unsigned __int8 *)a1) & 0x10000000) == 0)
      {
        int v76 = *(unsigned __int8 *)(a3 + 2164);
        if (v76 == 255) {
          goto LABEL_76;
        }
        __int16 v77 = 0;
        __int16 v78 = 0;
        do
        {
          int v79 = (__int16)(v10 - v76);
          if (v79 > 1) {
            break;
          }
          if (v79 == 1 && *(unsigned __int8 *)a1 != v97) {
            goto LABEL_101;
          }
          int v80 = 0;
          uint64_t v81 = v14[21];
          uint64_t v82 = *(unsigned __int8 *)(a3 + (v78 | 1) + 2164);
          int v83 = *(unsigned __int8 *)(v81 + v82);
          if (*(unsigned char *)(v81 + v82) && v79 < v75)
          {
            __int16 v84 = 0;
            int v80 = 0;
            uint64_t v85 = *(void *)(v14[19] + 8 * v82);
            int v86 = v79;
            do
            {
              if (*(&v97 + v86) != *(unsigned __int8 *)(v85 + v84)) {
                break;
              }
              int v80 = ++v84;
              __int16 v77 = 1;
              if (v84 >= v83) {
                break;
              }
              int v86 = v79 + v84;
            }
            while (v86 < (unsigned __int16)v75);
          }
          if (v80 == v83 || v80 + v79 == (unsigned __int16)v75) {
            goto LABEL_95;
          }
          v78 += 2;
          int v76 = *(unsigned __int8 *)(a3 + v78 + 2164);
        }
        while (v76 != 255);
        if (v77 == 1) {
          goto LABEL_101;
        }
        if (!v77)
        {
LABEL_76:
          int v58 = v57;
LABEL_101:
          uint64_t v61 = v92;
          continue;
        }
      }
LABEL_95:
      if (PDSFcorqbr(v14, a3, (uint64_t)&v97, v75, (uint64_t)a1, v10, *(__int16 *)(a3 + 2136), *(__int16 *)(a3 + 2138), *(_DWORD *)(a3 + 2140), HIWORD(*(_DWORD *)(a3 + 2140))) != 10)
      {
        int v14 = a2;
        int v15 = v94;
        uint64_t v50 = v93;
        int v55 = v91;
        uint64_t v60 = v89;
        uint64_t v56 = v90;
        goto LABEL_101;
      }
      int v14 = a2;
      int v15 = v94;
      uint64_t v61 = v92;
      uint64_t v50 = v93;
      int v55 = v91;
      uint64_t v60 = v89;
      uint64_t v56 = v90;
      if (*(__int16 *)(a3 + 2124) > 499) {
        return 10;
      }
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v97 + i);
      ++*(_WORD *)(a3 + 2124);
    }
    while (v15 > (__int16)v62);
  }
  return 10;
}

uint64_t PDSFcor8qd(const char *a1, void *a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[148];
  int v7 = *(__int16 *)(a3 + 2126);
  uint64_t v75 = *(__int16 *)(a3 + 2128);
  __int16 v8 = *(_WORD *)(a3 + 2130) - 1;
  __int16 v73 = *(_WORD *)(a3 + 2132);
  __int16 v9 = v75 + v7;
  __int16 v10 = v8 + v7;
  __int16 v11 = strlen(a1);
  memset(v96, 0, 256);
  memset(v81, 0, sizeof(v81));
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  uint64_t v12 = *((unsigned __int8 *)a1 + 1);
  *((unsigned char *)v81 + v12) = 1;
  uint64_t v13 = *(unsigned __int8 *)a1;
  v96[v13] = 1;
  *((unsigned char *)v81 + *((unsigned __int8 *)a1 + 2)) = 1;
  v96[v12] = 1;
  BYTE14(v82) = 1;
  int v14 = *(unsigned __int8 *)(a3 + 2164);
  if (v14 != 255)
  {
    __int16 v15 = 0;
    do
    {
      if (v14 == v11)
      {
        uint64_t v16 = *(unsigned __int8 *)(a3 + (v15 | 1) + 2164);
        int v17 = *(unsigned __int8 *)(a2[21] + v16);
        uint64_t v18 = *(unsigned __int8 *)(a2[22] + v16);
        int64x2_t v19 = *(unsigned __int8 **)(a2[19] + 8 * v16);
        v96[*v19] = 1;
        if (v17 == 1) {
          __int16 v20 = (unsigned __int8 *)&a1[v18];
        }
        else {
          __int16 v20 = v19 + 1;
        }
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1) {
          break;
        }
        v96[v13] = 1;
        __int16 v20 = *(unsigned __int8 **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v15 | 1) + 2164));
      }
      *((unsigned char *)v81 + *v20) = 1;
      v15 += 2;
      int v14 = *(unsigned __int8 *)(a3 + v15 + 2164);
    }
    while (v14 != 255);
  }
  char v80 = 0;
  int8x16_t v21 = (unsigned __int8 *)(v6 + v9);
  int v22 = *v21;
  int v23 = *(unsigned __int8 *)(v6 + (int)v75);
  int v24 = v21[1];
  int v25 = *(unsigned __int8 *)(v75 + v6 + 1);
  uint64_t v26 = *(unsigned __int8 *)(v6 + v8 + 1);
  unsigned int v27 = *(unsigned __int8 *)(v6 + v10 + 1);
  char v76 = *(unsigned char *)(v6 + v8 + 1);
  char v77 = v27;
  if (v7 < 2) {
    return 10;
  }
  int v28 = v24 | (v25 << 8);
  int v29 = v22 | (v23 << 8);
  int v30 = (__int16)(v73 - 1);
  __int16 v31 = v73 + 255;
  uint64_t v74 = v9;
  int v32 = v28 - 1;
  int v33 = v29 - 1;
  int v34 = 32;
  uint64_t v72 = v8;
  uint64_t v35 = v10;
  int v36 = v31;
  LOWORD(v37) = 1;
  int v38 = 32;
  while (1)
  {
    if ((__int16)v33 >= (__int16)v32)
    {
      uint64_t v37 = (__int16)v37 + 1;
      uint64_t v26 = *(unsigned __int8 *)(v6 + v37 + v72);
      unsigned int v27 = *(unsigned __int8 *)(v6 + v35 + (__int16)v37);
      char v76 = *(unsigned char *)(v6 + v37 + v72);
      int v39 = *(unsigned __int8 *)(v6 + v74 + (__int16)v37);
      int v40 = *(unsigned __int8 *)(v6 + v75 + (__int16)v37);
      char v77 = v27;
      int v41 = v39 | (v40 << 8);
      int v33 = v32;
      int v32 = v41 - 1;
    }
    int v42 = *(unsigned __int8 *)(v6 + (__int16)(v33 + 1) - 1);
    int v43 = (__int16)(v33 + 3);
    int v44 = v43 - 2;
    int v45 = v43 - 1;
    int v46 = v42 + v36;
    BOOL v47 = v42 == 255;
    if (v42 == 255) {
      int v48 = v44;
    }
    else {
      int v48 = v42 + v30;
    }
    if (v47)
    {
      int v49 = v33 + 3;
    }
    else
    {
      int v45 = v46;
      int v49 = v33 + 1;
    }
    int v50 = *(unsigned __int8 *)(v6 + v45);
    int v51 = *(unsigned __int8 *)(v6 + v48);
    if (v51) {
      int v34 = v51;
    }
    char v78 = v34;
    if (v50) {
      int v38 = v50;
    }
    char v79 = v38;
    if (v38 == 32)
    {
      int v52 = v27 == 32 ? 1 : 2;
      int v53 = v34 == 32 ? v52 : 3;
    }
    else
    {
      int v53 = 4;
    }
    int v33 = v32;
    if (v96[v26])
    {
      int v33 = v32;
      if (*((unsigned char *)v81 + v27)) {
        break;
      }
    }
LABEL_55:
    if (v7 <= (__int16)v37) {
      return 10;
    }
  }
  int v54 = *(unsigned __int8 *)(a3 + 2164);
  if (v54 == 255)
  {
LABEL_35:
    if (v53 + 1 == v11)
    {
      __int16 v55 = 0;
      __int16 v56 = 0;
      while (1)
      {
        if (a1[v55] == *(&v76 + v56))
        {
          ++v56;
        }
        else
        {
          if (v53 == v56) {
            goto LABEL_51;
          }
          BOOL v47 = v55 == v56;
          __int16 v56 = v55;
          if (!v47) {
            break;
          }
        }
        ++v55;
      }
    }
    __int16 v57 = 0;
    int v58 = 0;
    while (1)
    {
      int v59 = a1[(__int16)v58];
      int v60 = *(&v76 + v57);
      if (v59 == v60) {
        break;
      }
      if (v59 != 46)
      {
        if (v60 != 46)
        {
          int v33 = v49;
          goto LABEL_55;
        }
        goto LABEL_49;
      }
      ++v58;
LABEL_50:
      if (v53 == v57) {
        goto LABEL_51;
      }
    }
    ++v58;
LABEL_49:
    ++v57;
    goto LABEL_50;
  }
  __int16 v62 = 0;
  while (1)
  {
    int v63 = (__int16)(v11 - v54);
    if (v63 > 1 || v63 == 1 && *(unsigned __int8 *)a1 != v26) {
      goto LABEL_35;
    }
    uint64_t v64 = *(unsigned __int8 *)(a3 + (v62 | 1) + 2164);
    uint64_t v65 = a2[21];
    unsigned int v66 = *(unsigned __int8 *)(v65 + v64);
    if (!*(unsigned char *)(v65 + v64)) {
      break;
    }
    int v67 = 0;
    int v68 = 0;
    do
    {
      if (v67 + v63 >= v53) {
        break;
      }
      if (*(&v76 + v67 + v63) != *(unsigned char *)(*(void *)(a2[19] + 8 * v64) + (__int16)v68)) {
        break;
      }
      int v67 = (__int16)++v68;
    }
    while ((__int16)v68 < (int)v66);
    if (v67 + v63 == v53) {
      goto LABEL_51;
    }
    if (v67 == v66) {
      goto LABEL_71;
    }
LABEL_76:
    v62 += 2;
    int v54 = *(unsigned __int8 *)(a3 + v62 + 2164);
    if (v54 == 255) {
      goto LABEL_35;
    }
  }
  if (v53 == v63) {
    goto LABEL_51;
  }
  int v68 = 0;
LABEL_71:
  int v69 = v63 + (__int16)v68;
  if (v69 < v53)
  {
    unint64_t v70 = *(unsigned __int8 *)(a2[22] + v64) - (unint64_t)v66;
    do
    {
      if (*(&v76 + v69) != a1[v70 + v69]) {
        break;
      }
      int v69 = v63 + (__int16)++v68;
    }
    while (v69 < v53);
  }
  if (v69 != v53) {
    goto LABEL_76;
  }
LABEL_51:
  if (*(__int16 *)(a3 + 2124) <= 499)
  {
    for (uint64_t i = 0; i != 4; ++i)
      *(unsigned char *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v76 + i);
    ++*(_WORD *)(a3 + 2124);
    int v33 = v49;
    goto LABEL_55;
  }
  return 10;
}

uint64_t PDSFcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a5 + 3194) == 1)
  {
    return PDcorsrt(__src, a2, a3, a4, (void *)a5);
  }
  else
  {
    uint64_t v11 = *(void *)(a5 + 3168);
    uint64_t v12 = *(char **)(*(void *)(a5 + 32) + 24);
    uint64_t v13 = *(void *)(a5 + 104);
    if (v13 && (int v15 = *(unsigned __int8 *)(v13 + 34), v14 = (const char *)(v13 + 34), v15))
    {
      uint64_t v16 = strcpy(v12, v14);
      strcat(v16, __src);
    }
    else
    {
      strcpy(v12, __src);
    }
    uint64_t v17 = *(void *)(a5 + 104);
    if (v17)
    {
      int v19 = *(unsigned __int8 *)(v17 + 44);
      uint64_t v18 = (const char *)(v17 + 44);
      if (v19) {
        strcat(v12, v18);
      }
    }
    int v59 = a2;
    if (a2 <= (int)v7)
    {
      uint64_t v60 = *(void *)(a5 + 48);
      uint64_t v61 = *(void *)(a5 + 64);
      LOWORD(v20) = a2;
      uint64_t v21 = *(void *)(a4 + 56);
      do
      {
        uint64_t v22 = v7;
        uint64_t v23 = (__int16)v20;
        int v24 = (const char *)(v60 + *(__int16 *)(v61 + 2 * (__int16)v20));
        int v25 = strlen(v12);
        int v26 = strlen(v24);
        memset(v63, 0, sizeof(v63));
        memset(v62, 0, sizeof(v62));
        if (v25 << 16 >= 1)
        {
          int v27 = 0;
          __int16 v28 = 0;
          do
          {
            uint64_t v29 = v12[v28];
            if (v29 != v12[v27 + 1])
            {
              if ((*(_DWORD *)(v21 + 4 * v29) & 0x40000000) != 0) {
                unsigned __int8 v30 = v29 + 32;
              }
              else {
                unsigned __int8 v30 = v12[v28];
              }
              ++*((unsigned char *)v63 + v30);
            }
            int v27 = ++v28;
          }
          while ((__int16)v25 > v28);
        }
        int v31 = v26 << 16;
        int v32 = (__int16)v26;
        if (v26 << 16 >= 1)
        {
          int v33 = 0;
          __int16 v34 = 0;
          do
          {
            uint64_t v35 = v24[v34];
            if (v35 != v24[v33 + 1])
            {
              if ((*(_DWORD *)(v21 + 4 * v35) & 0x40000000) != 0) {
                unsigned __int8 v36 = v35 + 32;
              }
              else {
                unsigned __int8 v36 = v24[v34];
              }
              ++*((unsigned char *)v62 + v36);
            }
            int v33 = ++v34;
          }
          while ((__int16)v26 > v34);
        }
        uint64_t v37 = 0;
        int v38 = 0;
        do
        {
          int v39 = *((unsigned __int8 *)v63 + v37) - *((unsigned __int8 *)v62 + v37);
          if (v39)
          {
            if (v39 < 0) {
              int v39 = *((unsigned __int8 *)v62 + v37) - *((unsigned __int8 *)v63 + v37);
            }
            if ((*(_DWORD *)(v21 + 4 * v37) & 0x10000000) != 0) {
              v38 += 2 * v39;
            }
            else {
              v38 += 3 * v39;
            }
          }
          ++v37;
        }
        while (v37 != 256);
        if (v25 << 16 < 1)
        {
          __int16 v42 = 0;
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          __int16 v42 = 0;
          do
          {
            if (v31 >= 1)
            {
              int v43 = 0;
              int v44 = 0;
              do
              {
                int v45 = 0;
                do
                {
                  __int16 v46 = v45;
                  uint64_t v47 = v40 + (uint64_t)(__int16)v45;
                  uint64_t v48 = v43 + (uint64_t)(__int16)v45++;
                }
                while ((int)v48 < v32 && v12[v47] == v24[v48] && (int)v47 < (__int16)v25);
                if (v46 > v42) {
                  __int16 v42 = v46;
                }
                int v43 = (__int16)++v44;
              }
              while (v32 > (__int16)v44);
            }
            int v40 = (__int16)++v41;
          }
          while ((__int16)v25 > (__int16)v41);
        }
        __int16 v51 = v25 - v32;
        if ((__int16)v25 - v32 < 0) {
          __int16 v51 = v32 - v25;
        }
        *(_WORD *)(v11 + 2 * v23) = 2 * v38 + 4 * v51 - v42 + 16 * (v12[(__int16)v25 - 1] != v24[v32 - 1]);
        int v20 = (__int16)(v23 + 1);
        uint64_t v7 = v22;
      }
      while (v20 <= (int)v22);
    }
    if (v59 < (int)v7)
    {
      int v52 = v7 + v59;
      int v53 = v59;
      do
      {
        if (v52 - v53 > v59)
        {
          int v54 = v59;
          __int16 v55 = v59;
          do
          {
            int v56 = v54 + 1;
            if (*(__int16 *)(v11 + 2 * v55) > *(__int16 *)(v11 + 2 * v56))
            {
              uint64_t v57 = *(void *)(a5 + 64);
              __int16 v58 = *(_WORD *)(v57 + 2 * v55);
              *(_WORD *)(v57 + 2 * v55) = *(_WORD *)(v57 + 2 * v56);
              *(_WORD *)(v57 + 2 * v56) = v58;
              LOWORD(v57) = *(_WORD *)(v11 + 2 * v55);
              *(_WORD *)(v11 + 2 * v55) = *(_WORD *)(v11 + 2 * v56);
              *(_WORD *)(v11 + 2 * v56) = v57;
            }
            int v54 = ++v55;
          }
          while (v52 - v53 > v55);
        }
        ++v53;
      }
      while (v53 != v7);
    }
    return 10;
  }
}

uint64_t PDhypins(char *a1, uint64_t *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  int v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = 0;
    unsigned __int16 v5 = 0;
    int v6 = 0;
    do
    {
      if (v3 != a3)
      {
        int v7 = v6 + 1;
        __src[(unsigned __int16)v6] = v3;
        int v8 = *(_DWORD *)&__src[4 * v5 - 1];
        if (v8 < 0)
        {
          __src[(unsigned __int16)(v6 + 1)] = a3;
          int v7 = v6 + 2;
        }
        *(_DWORD *)&__src[4 * v5 - 1] = 2 * v8;
        if (v4 == 31) {
          ++v5;
        }
        int v6 = v7;
      }
      if (v4 > 0x3E) {
        break;
      }
      int v3 = a1[++v4];
    }
    while (v3);
  }
  else
  {
    LOWORD(v6) = 0;
  }
  __src[(unsigned __int16)v6] = 0;
  strcpy(a1, __src);
  return v6;
}

uint64_t PDhypstrip(unsigned char *a1, void *a2, int a3)
{
  *a2 = 0;
  int v3 = *a1;
  if (*a1)
  {
    unint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    unsigned __int8 v6 = 0;
    unsigned int v7 = 0x80000000;
    do
    {
      if (v3 == a3)
      {
        if (v6 == 32)
        {
          *(_DWORD *)a2 |= 1u;
          unsigned __int8 v6 = 32;
        }
        else
        {
          *((_DWORD *)a2 + v5) |= 2 * v7;
        }
      }
      else
      {
        uint64_t v8 = v6++;
        a1[v8] = v3;
        v7 >>= 1;
        if (v6 == 32)
        {
          ++v5;
          unsigned int v7 = 0x80000000;
        }
      }
      if (v4 > 0x3E) {
        break;
      }
      int v3 = a1[++v4];
    }
    while (v3);
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  a1[v6] = 0;
  return v6;
}

_WORD *OpenOutputBuffer(unsigned int a1)
{
  int v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x10100401D138D4BuLL);
  if (v2)
  {
    *(void *)int v2 = malloc_type_calloc(a1 + 64, 1uLL, 0x100004077774924uLL);
    v2[4] = 0;
    v2[6] = 0;
    *((unsigned char *)v2 + 10) = 0x80;
  }
  return v2;
}

uint64_t build_tree(unsigned __int16 *a1)
{
  a1[2052] = -1;
  uint64_t v1 = 257;
  while (2)
  {
    uint64_t v2 = 0;
    __int16 v3 = 513;
    unint64_t v4 = a1;
    uint64_t v5 = 513;
    do
    {
      uint64_t v6 = v5;
      unsigned int v8 = *v4;
      v4 += 4;
      unsigned int v7 = v8;
      if (v8)
      {
        if (v7 < a1[4 * (__int16)v6])
        {
          uint64_t v5 = v2;
          __int16 v3 = v6;
          goto LABEL_9;
        }
        if (v7 < a1[4 * v3]) {
          __int16 v3 = v2;
        }
      }
      uint64_t v5 = v6;
LABEL_9:
      ++v2;
    }
    while (v1 != v2);
    if (v3 != 513)
    {
      __int16 v9 = &a1[4 * (__int16)v5];
      uint64_t v10 = &a1[4 * v3];
      uint64_t v11 = &a1[4 * (__int16)v1];
      *uint64_t v11 = *v10 + *v9;
      v9[1] = *v9;
      *__int16 v9 = 0;
      v10[1] = *v10;
      *uint64_t v10 = 0;
      int v11[2] = v5;
      v11[3] = v3;
      __int16 v12 = v1 + 1;
      if ((unsigned __int16)v1++ >= 0x7FFFu)
      {
        LOWORD(v1) = v12;
        break;
      }
      continue;
    }
    break;
  }
  __int16 v14 = v1 - 1;
  a1[4 * v14 + 1] = a1[4 * v14];
  return v14;
}

uint64_t PDreverse(uint64_t result, __int16 a2)
{
  if (a2 != 1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = (unsigned __int16)(a2 - 1);
    do
    {
      char v4 = *(unsigned char *)(result + v2);
      *(unsigned char *)(result + v2) = *(unsigned char *)(result + v3);
      *(unsigned char *)(result + v3) = v4;
      ++v2;
      --v3;
    }
    while (v2 < (unsigned __int16)v3);
  }
  return result;
}

uint64_t PDitoa(unsigned int a1, uint64_t a2)
{
  int v2 = 0;
  do
  {
    uint64_t v3 = (unsigned __int16)v2;
    *(unsigned char *)(a2 + (unsigned __int16)v2) = ((unsigned __int16)a1 % 0xAu) | 0x30;
    unsigned __int16 v4 = ++v2;
    BOOL v5 = a1 > 9;
    a1 /= 0xAu;
  }
  while (v5);
  uint64_t result = v4;
  *(unsigned char *)(a2 + v4) = 0;
  if (v4 >= 2u)
  {
    unint64_t v7 = 0;
    do
    {
      char v8 = *(unsigned char *)(a2 + v7);
      *(unsigned char *)(a2 + v7) = *(unsigned char *)(a2 + v3);
      *(unsigned char *)(a2 + v3) = v8;
      ++v7;
      --v3;
    }
    while (v7 < (unsigned __int16)v3);
  }
  return result;
}

uint64_t PDasparse(unsigned char *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, uint64_t a5, _WORD *a6, unsigned int a7, uint64_t a8)
{
  *a3 = 0;
  *a4 = 0;
  if (*a1 != 35) {
    return 8;
  }
  unint64_t v8 = 0;
  for (unsigned __int16 i = 1; ; ++i)
  {
    unsigned int v10 = a1[i];
    BOOL v11 = v10 > 0x23 || ((1 << v10) & 0x800002001) == 0;
    BOOL v12 = !v11 || v10 == 10;
    if (v12 || v8 > 0x3F) {
      break;
    }
    *(unsigned char *)(a2 + v8++) = v10;
  }
  uint64_t v13 = 0;
  *(unsigned char *)(a2 + v_Block_object_dispose(&STACK[0x510], 8) = 0;
  unsigned int v14 = a1[i];
  BOOL v15 = v14 > 0xD;
  int v16 = (1 << v14) & 0x2401;
  if (v15 || v16 == 0)
  {
    if (a1[(__int16)(i + 1)] == 49) {
      *a4 = 1;
    }
    if (a1[(__int16)(i + 2)] != 35) {
      return 0;
    }
    if (a7)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 2 * a7;
      while (1)
      {
        unsigned int v21 = a1[v19 + 4 + v8];
        if (v21 <= 0x23 && ((1 << v21) & 0x800002401) != 0) {
          break;
        }
        if (v20 == v19) {
          goto LABEL_31;
        }
        *(unsigned char *)(a8 + v19++) = v21;
      }
      LOWORD(v20) = v19;
LABEL_31:
      uint64_t v13 = 0;
      *(unsigned char *)(a8 + (unsigned __int16)v20) = 0;
      if (a1[v19 + 4 + v8] != 35) {
        return v13;
      }
      __int16 v23 = v8 + v19 + 5;
    }
    else
    {
      __int16 v23 = i + 3;
    }
    unint64_t v24 = 0;
    *a3 = 1;
    while (1)
    {
      unsigned int v25 = a1[v23];
      BOOL v26 = v25 > 0x23 || ((1 << v25) & 0x800002001) == 0;
      BOOL v27 = !v26 || v25 == 10;
      if (v27 || v24 > 0x7FF) {
        break;
      }
      *(unsigned char *)(a5 + v24++) = v25;
      ++v23;
    }
    uint64_t v13 = 0;
    *(unsigned char *)(a5 + v24) = 0;
    *a6 = v24;
  }
  return v13;
}

uint64_t PDword(unsigned __int16 *a1, unsigned int a2, int a3)
{
  unsigned __int8 v115 = 0;
  __int16 v114 = 0;
  __int16 v113 = 0;
  char v112 = 0;
  __int16 v111 = 0;
  int v110 = 0;
  char v109 = 0;
  unsigned __int16 v108 = 0;
  unsigned __int16 v107 = 0;
  if (!a1) {
    return 8;
  }
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 0;
  a1[58] = 0;
  *((_DWORD *)a1 + 30) = 0;
  a1[68] = 0;
  *((void *)a1 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  uint64_t v4 = pMCPbuff;
  if (!pMCPbuff) {
    goto LABEL_98;
  }
  uint64_t v5 = a1[1];
  if (**(unsigned __int16 **)(pMCPbuff + 24) <= (unsigned __int16)(v5 - 1)) {
    goto LABEL_211;
  }
  if (**(unsigned __int16 **)(*(void *)(pMCPbuff + 40) + 8 * v5) != v5
    || *(_WORD *)(*(void *)(pMCPbuff + 32) + 2 * v5) != 9090)
  {
LABEL_98:
    uint64_t result = 8;
    *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v56 = 5104;
    goto LABEL_212;
  }
  uint64_t v6 = *(_WORD **)(pMCPbuff + 8);
  if (!*v6) {
    goto LABEL_211;
  }
  uint64_t v7 = *a1;
  if (a3 == 5)
  {
    if (a2 != 8)
    {
      if (a2 == 10)
      {
        a1[25] = 0;
        unsigned __int16 v57 = v7;
        if (v7) {
          goto LABEL_104;
        }
        LODWORD(v7) = (unsigned __int16)*v6;
        if (*v6)
        {
          unsigned __int16 v57 = 1;
          while (1)
          {
LABEL_104:
            if (a1[25] >= a1[24]) {
              return 0;
            }
            __int16 v58 = *(unsigned __int8 **)(*(void *)v4 + 8 * v57);
            if (v58
              && a1[1] == *((unsigned __int16 *)v58 + 1080)
              && *(_WORD *)(*(void *)(v4 + 16) + 2 * v57) == 9090
              && v58[2062] != 1)
            {
              if (**(unsigned __int16 **)(v4 + 8) < v57 || *((unsigned __int16 *)v58 + 1081) != v57)
              {
LABEL_209:
                if (!a1[58] || *((int *)a1 + 28) <= 7)
                {
LABEL_211:
                  uint64_t result = 8;
                  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
                  __int16 v56 = 5105;
                  goto LABEL_212;
                }
                return 8;
              }
              uint64_t v59 = *((unsigned int *)a1 + 9);
              if (v59 == 0xFFFF
                || (v58[2069] ? (uint64_t v60 = 1 << (v58[2069] - 1)) : (uint64_t v60 = 0xFFFFFFFFLL), (v60 & v59) != 0))
              {
                if ((*((unsigned char *)a1 + 42) != 1 || *((_WORD *)v58 + 1047))
                  && (v58[2084] & (_BYTE)a1[20]) == 0
                  && (v58[2085] & *((unsigned char *)a1 + 41)) == 0
                  && (*v58 | 2) == 7)
                {
                  if (!v58[2063])
                  {
                    if (!a1[58] || *((int *)a1 + 28) <= 7)
                    {
                      uint64_t result = 8;
                      *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
                      __int16 v56 = 5051;
                      goto LABEL_212;
                    }
                    return 8;
                  }
                  uint64_t v61 = strcpy(*((char **)v58 + 267), *((const char **)a1 + 1));
                  uint64_t v62 = *(void *)(*(void *)pMCPbuff + 8 * v57);
                  uint64_t v63 = *(void *)(v62 + 2192);
                  *(_WORD *)(v63 + 40) = 0;
                  *(unsigned char *)(v63 + 3194) = 1;
                  int v64 = PDSFcorrec(v61, 3u, *(void *)(v62 + 2184), v63);
                  uint64_t v4 = pMCPbuff;
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v57) + 2192) + 3194) = 0;
                  if (!v64 && (!a1[58] || *((int *)a1 + 28) <= 3))
                  {
                    *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 4;
                    a1[58] = 5159;
                  }
                }
              }
            }
            uint64_t result = 0;
            if (v7 < ++v57) {
              return result;
            }
          }
        }
      }
      return 0;
    }
    unint64_t v70 = malloc_type_malloc(0xDuLL, 0x7632727BuLL);
    if (!v70) {
      goto LABEL_202;
    }
    int v71 = v70;
    uint64_t v72 = (void *)pMCPbuff;
    __int16 v73 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * *a1);
    if (v73[2062] != 1)
    {
      if (!a1[58] || *((int *)a1 + 28) <= 7)
      {
        *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
        a1[58] = 5114;
      }
      free(v71);
      return 8;
    }
    uint64_t v74 = *((void *)v73 + 269);
    uint64_t v75 = (char *)*((void *)v73 + 267);
    a1[25] = 0;
    if ((*v73 | 2) == 7)
    {
      int v76 = PDgetword((uint64_t)v73);
      if (v76 == 11)
      {
        if (a1[58] && *((int *)a1 + 28) > 7) {
          goto LABEL_235;
        }
        *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v77 = 5112;
LABEL_226:
        a1[58] = v77;
        goto LABEL_235;
      }
      if (v76 == 8)
      {
        if (a1[58] && *((int *)a1 + 28) > 7) {
          goto LABEL_235;
        }
        *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v77 = 5113;
        goto LABEL_226;
      }
    }
    else if (a1[24])
    {
      int v99 = 0;
      while (PDgetrdwrd(*(void *)(*v72 + 8 * *a1), v75, &v112, &v109, &v110, &v115, &v111, (uint64_t)v71) != 8)
      {
        uint64_t v100 = SLLngToA(*(unsigned __int8 *)(*(void *)(*(void *)pMCPbuff + 8 * *a1) + 2069));
        PDhypstrip(v75, (void *)(*(void *)(*((void *)a1 + 13) + 8 * a1[25]) + 88), *((unsigned __int8 *)a1 + 16));
        unsigned __int8 v115 = strlen(v75);
        *(unsigned char *)(*(void *)(*((void *)a1 + 13) + 8 * a1[25]) + 71) = SLcap((uint64_t)v75, 0, v115, (void *)(*(void *)(*((void *)a1 + 13) + 8 * a1[25])+ 80), v100);
        size_t v101 = strlen(v75);
        if ((_WORD)v101)
        {
          unsigned __int8 v102 = 0;
          do
          {
            uint64_t v103 = v75[v102];
            if ((*(_DWORD *)(v100 + 4 * v103) & 0x40000000) != 0) {
              LOBYTE(v103) = v103 + 32;
            }
            *(unsigned char *)(v74 + v102++) = v103;
            size_t v101 = strlen(v75);
          }
          while ((unsigned __int16)v101 > v102);
        }
        *(unsigned char *)(v74 + v101) = 0;
        __strcpy_chk();
        uint64_t v104 = *(void *)(*((void *)a1 + 13) + 8 * a1[25]);
        *(unsigned char *)(v104 + 70) = v112 == 1;
        *(_DWORD *)(v104 + 96) = v110;
        *(_WORD *)(v104 + 100) = v111;
        uint64_t v72 = (void *)pMCPbuff;
        *(_WORD *)(v104 + 66) = *(_WORD *)(*(void *)(*(void *)pMCPbuff + 8 * *a1) + 2162);
        uint64_t v105 = *(void *)v71;
        *(_DWORD *)(v104 + 110) = v71[2];
        *(void *)(v104 + 102) = v105;
        ++a1[25];
        if (++v99 >= a1[24]) {
          goto LABEL_234;
        }
      }
      if (!a1[58] || *((int *)a1 + 28) <= 7)
      {
        *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
        a1[58] = 5113;
      }
      free(v71);
    }
LABEL_234:
    if (*((_DWORD *)a1 + 28) == 8) {
      return 0;
    }
LABEL_235:
    free(v71);
    return 0;
  }
  if (a3 == 2)
  {
    uint64_t v65 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * v7);
    if (a2 == 10)
    {
      uint64_t result = 0;
      v65[2063] = 0;
      return result;
    }
    if (v65[2062] == 1)
    {
      if (a2 == 8 && (*v65 | 2) != 7)
      {
        if (PDsavsort(*a1, 0) == 8) {
          goto LABEL_202;
        }
        uint64_t v65 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * *a1);
      }
      uint64_t result = 0;
      v65[2062] = 0;
      return result;
    }
LABEL_137:
    uint64_t result = 8;
    *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v56 = 5114;
    goto LABEL_212;
  }
  if (a3 != 1)
  {
    uint64_t result = 8;
    *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v56 = 1101;
    goto LABEL_212;
  }
  if (*a1)
  {
    uint64_t v8 = *(void *)(*(void *)pMCPbuff + 8 * v7);
    if (v8)
    {
      if (*(unsigned char *)(v8 + 2062) == 1) {
        goto LABEL_137;
      }
    }
  }
  if (a2 > 0xB) {
    goto LABEL_199;
  }
  if (((1 << a2) & 0x470) != 0)
  {
    uint64_t result = 0;
    if (v7) {
      unsigned int v10 = v7;
    }
    else {
      unsigned int v10 = (unsigned __int16)*v6;
    }
    a1[25] = 0;
    if (v7 <= 1) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = v7;
    }
    if (v11 > v10) {
      return result;
    }
    while (a1[25] < a1[24])
    {
      uint64_t v12 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
      if (v12
        && a1[1] == *(unsigned __int16 *)(v12 + 2160)
        && *(_WORD *)(*(void *)(pMCPbuff + 16) + 2 * (unsigned __int16)v11) == 9090
        && *(unsigned char *)(v12 + 2062) != 1)
      {
        if (**(unsigned __int16 **)(pMCPbuff + 8) < (unsigned __int16)v11
          || *(unsigned __int16 *)(v12 + 2162) != (unsigned __int16)v11)
        {
          goto LABEL_209;
        }
        uint64_t v13 = *((unsigned int *)a1 + 9);
        if (v13 == 0xFFFF
          || (*(unsigned char *)(v12 + 2069) ? (uint64_t v14 = 1 << (*(unsigned char *)(v12 + 2069) - 1)) : (uint64_t v14 = 0xFFFFFFFFLL),
              (v14 & v13) != 0))
        {
          if ((*((unsigned char *)a1 + 42) != 1 || *(_WORD *)(v12 + 2094))
            && (!*((unsigned char *)a1 + 43) || *((unsigned __int8 *)a1 + 43) == *(unsigned __int8 *)(v12 + 2091))
            && (!a1[22] || a1[22] == *(unsigned __int16 *)(v12 + 2086))
            && (!a1[23] || *(unsigned __int16 *)(v12 + 2086) >= a1[23])
            && (*(unsigned char *)(v12 + 2084) & (_BYTE)a1[20]) == 0
            && (*(unsigned char *)(v12 + 2085) & *((unsigned char *)a1 + 41)) == 0)
          {
            unsigned int v106 = a2;
            BOOL v15 = *(char **)(v12 + 2136);
            strcpy(v15, *((const char **)a1 + 1));
            uint64_t v16 = *(void *)pMCPbuff;
            *(void *)(*(void *)(*(void *)(v16 + 8 * (unsigned __int16)v11) + 2192) + 3184) = a1;
            uint64_t v17 = *(void *)(v16 + 8 * (unsigned __int16)v11);
            uint64_t v18 = *(void *)(v17 + 2192);
            *(_WORD *)(v18 + 3192) = v11;
            *(_WORD *)(v18 + 40) = 0;
            if (a1[28])
            {
              uint64_t v19 = *(_OWORD **)(v18 + 104);
              uint64_t v20 = (_OWORD *)*((void *)a1 + 8);
              long long v21 = v20[5];
              long long v23 = v20[2];
              long long v22 = v20[3];
              v19[4] = v20[4];
              v19[5] = v21;
              void v19[2] = v23;
              _DWORD v19[3] = v22;
              long long v24 = v20[1];
              *uint64_t v19 = *v20;
              v19[1] = v24;
              if (a1[28])
              {
                unint64_t v25 = 0;
                do
                {
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2096) + v25) = *(unsigned char *)(*(void *)(*((void *)a1 + 8) + 8) + v25);
                  ++v25;
                }
                while (v25 < a1[28]);
              }
              uint64_t v16 = *(void *)pMCPbuff;
              *(void *)(*(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                                    + 104)
                        + _Block_object_dispose(&STACK[0x510], 8) = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2096);
              uint64_t v17 = *(void *)(v16 + 8 * (unsigned __int16)v11);
            }
            uint64_t v26 = *(void *)(v17 + 2184);
            unsigned int v27 = *(unsigned __int16 *)(v26 + 104);
            unsigned int v28 = a1[40];
            if (v27 != v28)
            {
              if (v27 < v28)
              {
                free(*(void **)(v26 + 112));
                uint64_t v29 = malloc_type_calloc(a1[40], 1uLL, 0x100004077774924uLL);
                uint64_t v16 = *(void *)pMCPbuff;
                *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184) + 112) = v29;
                if (!v29) {
                  goto LABEL_202;
                }
                unsigned int v28 = a1[40];
                uint64_t v17 = *(void *)(v16 + 8 * (unsigned __int16)v11);
                uint64_t v26 = *(void *)(v17 + 2184);
              }
              *(_WORD *)(v26 + 104) = v28;
              *(_WORD *)(*(void *)(v17 + 2192) + 2162) = v28 >> 3;
              if (v28)
              {
                unint64_t v30 = 0;
                do
                {
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                   + 2184)
                                       + 112)
                           + v30) = *(unsigned char *)(*((void *)a1 + 9) + v30);
                  ++v30;
                }
                while (v30 < a1[40]);
                uint64_t v16 = *(void *)pMCPbuff;
                uint64_t v17 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                if (*(_WORD *)(*(void *)(v17 + 2192) + 2162))
                {
                  LOWORD(v31) = 0;
                  unint64_t v32 = 0;
                  do
                  {
                    uint64_t v33 = 0;
                    *(void *)(*(void *)(*(void *)(v17 + 2184) + 160) + 8 * v32) = *(void *)(*(void *)(v17 + 2184) + 112) + 8 * (v32 & 0x1F);
                    uint64_t v31 = (__int16)v31;
                    uint64_t v34 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184);
                    *(void *)(*(void *)(v34 + 152) + 8 * v32) = *(void *)(v34 + 112)
                                                                                     + ((8 * (v32 & 0x1F)) | 4);
                    *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                     + 2184)
                                         + 168)
                             + v32) = 0;
                    *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                     + 2184)
                                         + 176)
                             + v32) = 0;
                    do
                    {
                      uint64_t v35 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184);
                      if (*(unsigned char *)(*(void *)(v35 + 112) + v31 + v33) == 32) {
                        break;
                      }
                      ++*(unsigned char *)(*(void *)(v35 + 176) + v32);
                      ++v33;
                    }
                    while (v33 != 4);
                    uint64_t v36 = 0;
                    while (1)
                    {
                      uint64_t v16 = *(void *)pMCPbuff;
                      uint64_t v17 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                      uint64_t v37 = *(void *)(v17 + 2184);
                      if (*(unsigned char *)(*(void *)(v37 + 112) + (__int16)v31 + 4 + v36) == 32) {
                        break;
                      }
                      ++v36;
                      ++*(unsigned char *)(*(void *)(v37 + 168) + v32);
                      if (v36 == 4)
                      {
                        uint64_t v16 = *(void *)pMCPbuff;
                        uint64_t v17 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                        break;
                      }
                    }
                    ++v32;
                    LOWORD(v31) = v31 + 8;
                  }
                  while (v32 < *(unsigned __int16 *)(*(void *)(v17 + 2192) + 2162));
                }
              }
            }
            uint64_t v38 = *(void *)(v17 + 2184);
            LODWORD(v39) = *(unsigned __int16 *)(v38 + 120);
            unsigned int v40 = a1[48];
            if (v39 != v40)
            {
              if (v39 < v40)
              {
                free(*(void **)(v38 + 128));
                int v41 = malloc_type_calloc(a1[48], 1uLL, 0x100004077774924uLL);
                uint64_t v16 = *(void *)pMCPbuff;
                *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184) + 12_Block_object_dispose(&STACK[0x510], 8) = v41;
                if (!v41) {
                  goto LABEL_202;
                }
                unsigned int v40 = a1[48];
                uint64_t v17 = *(void *)(v16 + 8 * (unsigned __int16)v11);
                uint64_t v38 = *(void *)(v17 + 2184);
              }
              *(_WORD *)(v38 + 120) = v40;
              if (v40)
              {
                unint64_t v42 = 0;
                do
                {
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                   + 2184)
                                       + 128)
                           + v42) = *(unsigned char *)(*((void *)a1 + 11) + v42);
                  ++v42;
                  unint64_t v39 = a1[48];
                }
                while (v42 < v39);
                uint64_t v16 = *(void *)pMCPbuff;
                uint64_t v17 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                uint64_t v38 = *(void *)(v17 + 2184);
              }
              else
              {
                LODWORD(v39) = 0;
              }
            }
            *(_WORD *)(v38 + 6_Block_object_dispose(&STACK[0x510], 8) = 64;
            *(void *)(*(void *)(v17 + 2192) + 3184) = a1;
            int v43 = *(unsigned __int8 **)(v16 + 8 * (unsigned __int16)v11);
            uint64_t v44 = *((void *)v43 + 274);
            *(_WORD *)(v44 + 3192) = v11;
            *(_WORD *)(v44 + 42) = a1[24];
            *(_WORD *)(v44 + 44) = 0;
            *(_WORD *)(v44 + 56) = 240;
            *(unsigned char *)(v44 + 8_Block_object_dispose(&STACK[0x510], 8) = *((unsigned char *)a1 + 17);
            *(_DWORD *)(v44 + 92) = *((_DWORD *)a1 + 5);
            *(_DWORD *)(v44 + 96) = *((_DWORD *)a1 + 6);
            *(_WORD *)(v44 + 40) = 0;
            a2 = v106;
            switch(v106)
            {
              case 4u:
                *(_WORD *)uint64_t v44 = 5;
                SLwldpro(v15, (_WORD *)(v44 + 3458), (_WORD *)(v44 + 3460), 64);
                __int16 v46 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                if ((*v46 | 2) == 7)
                {
                  uint64_t v47 = *((void *)v46 + 274);
                  *(unsigned char *)(v47 + 3194) = 1;
                  __int16 v48 = strlen(v15);
                  PDSFwild((unsigned __int8 *)v15, v48, *((void *)v46 + 273), v47);
                  goto LABEL_86;
                }
                __int16 v51 = (char *)*((void *)a1 + 1);
                __int16 v52 = strlen(v51);
                uint64_t v53 = *((void *)v46 + 273);
                int v54 = (unsigned __int16 *)*((void *)v46 + 274);
                goto LABEL_96;
              case 5u:
              case 0xAu:
                v43[2063] = 0;
                uint64_t v45 = *((void *)v43 + 273);
                *(_WORD *)(v45 + 6) = 0;
                *(unsigned char *)(v45 + 136) = (330382100 * (unint64_t)v39) >> 32;
                *(_WORD *)uint64_t v44 = 100;
                *(unsigned char *)(v44 + 214_Block_object_dispose(&STACK[0x510], 8) = -1;
                if ((*v43 | 2) == 7)
                {
                  if (v106 == 10)
                  {
                    v43[2063] = 1;
                    *(unsigned char *)(v44 + 3194) = 1;
                    int v50 = PDSFcorrec(v15, 3u, v45, v44);
                    *(unsigned char *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                             + 3194) = 0;
                    a2 = 10;
                    if (v50) {
                      break;
                    }
                  }
                  else
                  {
                    a2 = v106;
                    if (v106 != 5) {
                      break;
                    }
                    *(unsigned char *)(v44 + 3194) = 1;
                    PDSFcorrec(v15, 2u, v45, v44);
                    a2 = 5;
                    *(unsigned char *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                             + 3194) = 0;
                  }
                  if (!a1[58]) {
                    goto LABEL_93;
                  }
                }
                else
                {
                  uint64_t result = PDcorrec(*((char **)a1 + 1), 0, v45, v44);
                  if (result == 8) {
                    return result;
                  }
                  a2 = v106;
                  if (!a1[58]) {
                    goto LABEL_93;
                  }
                }
                if (*((int *)a1 + 28) > 3) {
                  break;
                }
LABEL_93:
                *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 4;
                a1[58] = 5159;
                break;
              case 6u:
                *(_WORD *)uint64_t v44 = 6;
                *(_WORD *)(v44 + 3456) = a1[49];
                if ((*v43 | 2) == 7)
                {
                  *(unsigned char *)(v44 + 3194) = 1;
                  __int16 v49 = strlen(*((const char **)a1 + 1));
                  PDSFanagrm(*((unsigned __int8 **)a1 + 1), v49, v44, *((void *)v43 + 273));
LABEL_86:
                  *(unsigned char *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                           + 3194) = 0;
                  a2 = v106;
                }
                else
                {
                  PDanagrm(*((const char **)a1 + 1), v44);
                  __int16 v51 = (char *)*((void *)a1 + 1);
                  __int16 v52 = strlen(v51);
                  uint64_t v55 = *(void *)(*(void *)pMCPbuff + 8 * (unsigned __int16)v11);
                  uint64_t v53 = *(void *)(v55 + 2184);
                  int v54 = *(unsigned __int16 **)(v55 + 2192);
LABEL_96:
                  uint64_t result = PDdecode((unsigned __int8 *)v51, v52, v53, v54);
                  a2 = v106;
                  if (result == 8) {
                    return result;
                  }
                }
                break;
              default:
                break;
            }
          }
        }
      }
      uint64_t result = 0;
      LOWORD(v11) = v11 + 1;
      if (v10 < (unsigned __int16)v11) {
        return result;
      }
    }
    return 0;
  }
  if (((1 << a2) & 0x900) != 0)
  {
    uint64_t v66 = *(void *)pMCPbuff;
    int v67 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * v7);
    v67[2062] = 1;
    if ((*v67 | 2) == 7)
    {
      uint64_t result = 0;
      *(void *)(*((void *)v67 + 274) + 3184) = a1;
      uint64_t v68 = *(void *)(v66 + 8 * v7);
      uint64_t v69 = *(void *)(v68 + 2192);
      *(_WORD *)(v69 + 3192) = v7;
      *(_WORD *)(v69 + 40) = 0;
      *(_DWORD *)(*(void *)(v68 + 2176) + 114) = 0;
      return result;
    }
    if (a2 != 11)
    {
      if (PDsavsort(v7, 1) == 8)
      {
LABEL_202:
        if (a1[58] && *((int *)a1 + 28) > 7) {
          return 8;
        }
        uint64_t result = 8;
        *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
        __int16 v56 = 1030;
LABEL_212:
        a1[58] = v56;
        return result;
      }
      PDsort(*(void *)(*(void *)pMCPbuff + 8 * *a1));
      int v67 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * *a1);
    }
    uint64_t result = 0;
    *(_DWORD *)(*((void *)v67 + 271) + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    return result;
  }
  if (a2 != 1)
  {
LABEL_199:
    uint64_t result = 8;
    *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
    __int16 v56 = 1100;
    goto LABEL_212;
  }
  a1[25] = 0;
  if (!*v6) {
    goto LABEL_206;
  }
  int v78 = 0;
  unsigned __int16 v79 = 1;
  while (a1[25] < a1[24])
  {
    if (v7 && v7 != v79) {
      goto LABEL_191;
    }
    uint64_t v80 = *(void *)(*(void *)v4 + 8 * v79);
    if (!v80
      || a1[1] != *(unsigned __int16 *)(v80 + 2160)
      || *(_WORD *)(*(void *)(v4 + 16) + 2 * v79) != 9090
      || *(unsigned char *)(v80 + 2062) == 1)
    {
      goto LABEL_191;
    }
    if (*(unsigned __int16 *)(v80 + 2162) != v79) {
      goto LABEL_209;
    }
    if (*((unsigned char *)a1 + 42) == 1 && !*(_WORD *)(v80 + 2094)) {
      goto LABEL_191;
    }
    uint64_t v81 = *((unsigned int *)a1 + 9);
    if (v81 != 0xFFFF)
    {
      int v82 = *(unsigned __int8 *)(v80 + 2069);
      BOOL v83 = v82 == 0;
      uint64_t v84 = 1 << (v82 - 1);
      if (v83) {
        uint64_t v84 = 0xFFFFFFFFLL;
      }
      uint64_t v85 = v84 & v81;
      BOOL v86 = !v83 || v81 >= 3;
      if (!v86 || v85 == 0) {
        goto LABEL_191;
      }
    }
    if (*((unsigned char *)a1 + 43) && *((unsigned __int8 *)a1 + 43) != *(unsigned __int8 *)(v80 + 2091)
      || a1[22] && a1[22] != *(unsigned __int16 *)(v80 + 2086)
      || a1[23] && *(unsigned __int16 *)(v80 + 2088) < a1[23]
      || (*(unsigned char *)(v80 + 2084) & (_BYTE)a1[20]) != 0
      || (*(unsigned char *)(v80 + 2085) & *((unsigned char *)a1 + 41)) != 0)
    {
      goto LABEL_191;
    }
    long long v88 = *(char **)(v80 + 2136);
    strcpy(v88, *((const char **)a1 + 1));
    uint64_t v89 = *(void *)pMCPbuff;
    uint64_t v90 = *(void *)(*(void *)pMCPbuff + 8 * v79);
    *(_WORD *)(*(void *)(v90 + 2184) + 6) = 0;
    *(void *)(*(void *)(v90 + 2192) + 3184) = a1;
    long long v91 = *(unsigned __int8 **)(v89 + 8 * v79);
    uint64_t v92 = *((void *)v91 + 274);
    *(_WORD *)(v92 + 3192) = v79;
    *(_WORD *)(v92 + 40) = 0;
    v91[2118] = 1;
    if ((*v91 | 2) == 7)
    {
      unsigned __int8 v93 = strlen(v88);
      unsigned __int8 v94 = v93;
      if (*((unsigned char *)a1 + 42) == 1)
      {
        SLfun((uint64_t)v88, 0, v93 - 1, &v108, &v107);
        long long v91 = *(unsigned __int8 **)(*(void *)pMCPbuff + 8 * v79);
        uint64_t v95 = *((void *)v91 + 272);
        unint64_t v96 = (*(unsigned __int16 *)(v95 + 112) - 1) & v107;
        v107 &= *(_WORD *)(v95 + 112) - 1;
        if (((*(unsigned __int8 *)(*(void *)(v95 + 104) + (v96 >> 3)) >> (v96 & 7)) & 1) == 0) {
          goto LABEL_191;
        }
      }
      int v97 = PDget((unsigned __int8 *)v88, v94, (uint64_t)v91);
    }
    else
    {
      int v97 = PDsearch((uint64_t)v91, v88, &v114, &v113, 1, (uint64_t)a1, 0);
    }
    if (v97 != 11 && v97 != 5112)
    {
      if (v97 == 5113) {
        break;
      }
      int v78 = 1;
    }
LABEL_191:
    ++v79;
    uint64_t v4 = pMCPbuff;
    if (**(unsigned __int16 **)(pMCPbuff + 8) < v79) {
      break;
    }
  }
  if (v78) {
    return 0;
  }
LABEL_206:
  if (a1[58] && *((int *)a1 + 28) > 7) {
    return 5112;
  }
  *((_DWORD *)a1 + 2_Block_object_dispose(&STACK[0x510], 8) = 8;
  uint64_t result = 5112;
  a1[58] = 5112;
  return result;
}

uint64_t PDcheckDID(unsigned int a1)
{
  if (**(unsigned __int16 **)(pMCPbuff + 8) >= a1
    && *(unsigned __int16 *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2162) == a1)
  {
    return 8 * (*(_WORD *)(*(void *)(pMCPbuff + 16) + 2 * a1) != 9090);
  }
  else
  {
    return 8;
  }
}

size_t PDanagrm(const char *a1, uint64_t a2)
{
  size_t result = strlen(a1);
  *(_OWORD *)(a2 + 3199) = 0u;
  *(_OWORD *)(a2 + 3215) = 0u;
  *(_OWORD *)(a2 + 3231) = 0u;
  *(_OWORD *)(a2 + 3247) = 0u;
  *(_OWORD *)(a2 + 3263) = 0u;
  *(_OWORD *)(a2 + 3279) = 0u;
  *(_OWORD *)(a2 + 3295) = 0u;
  *(_OWORD *)(a2 + 3311) = 0u;
  *(_OWORD *)(a2 + 3327) = 0u;
  *(_OWORD *)(a2 + 3343) = 0u;
  *(_OWORD *)(a2 + 3359) = 0u;
  *(_OWORD *)(a2 + 3375) = 0u;
  *(_OWORD *)(a2 + 3391) = 0u;
  *(_OWORD *)(a2 + 3407) = 0u;
  *(_OWORD *)(a2 + 3423) = 0u;
  *(_OWORD *)(a2 + 3439) = 0u;
  if ((int)(result << 16) >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = a2 + a1[(__int16)v5];
      ++*(unsigned char *)(v6 + 3199);
      ++v5;
    }
    while ((__int16)result > (__int16)v5);
  }
  return result;
}

uint64_t PDalt(unsigned __int16 *a1)
{
  if (!a1) {
    return 8;
  }
  *((_DWORD *)a1 + 6) = 0;
  a1[14] = 0;
  *((_DWORD *)a1 + _Block_object_dispose(&STACK[0x510], 8) = 0;
  a1[24] = 0;
  *((void *)a1 + 7) = 0;
  if (!pMCPbuff
    || (uint64_t v2 = a1[1], **(unsigned __int16 **)(*(void *)(pMCPbuff + 40) + 8 * v2) != v2)
    || *(_WORD *)(*(void *)(pMCPbuff + 32) + 2 * v2) != 9090)
  {
    __int16 v3 = 5104;
    goto LABEL_10;
  }
  if (PDgetalt(*((void **)a1 + 1), a1[8], *((_DWORD *)a1 + 1), *a1) != 8) {
    return 0;
  }
  if (!a1[14] || *((int *)a1 + 6) <= 7)
  {
    __int16 v3 = 5112;
LABEL_10:
    uint64_t result = 8;
    *((_DWORD *)a1 + 6) = 8;
    a1[14] = v3;
    return result;
  }
  return 8;
}

uint64_t PDgetalt(void *a1, int a2, int a3, unsigned int a4)
{
  uint64_t v6 = *(void *)(*(void *)pMCPbuff + 8 * a4);
  if (*(unsigned char *)(v6 + 782) == 5)
  {
    uint64_t v7 = (unsigned int *)(v6 + 776);
    a3 += *(_DWORD *)(v6 + 768) + *(_DWORD *)(*(void *)(v6 + 2176) + 40);
    if (a1) {
      goto LABEL_3;
    }
    return 8;
  }
  uint64_t v7 = (unsigned int *)(*(void *)(v6 + 2168) + 328);
  if (!a1) {
    return 8;
  }
LABEL_3:
  if (a3 == -1) {
    return 0;
  }
  unsigned int v8 = *v7;
  if (SLSeek(*v7, a3, 0) != 8)
  {
    unsigned int v11 = 0;
    int v9 = SLFRead(v8, a2, a1, &v11);
    uint64_t result = 0;
    if (v9 != 8) {
      return result;
    }
    SLClose(v8);
  }
  return 1010;
}

uint64_t PDdefragalt()
{
  return 0;
}

uint64_t make_alt_entry(char *a1, _DWORD *a2, _WORD *a3, unsigned int a4)
{
  unsigned int v7 = *(_DWORD *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * a4) + 2168) + 328);
  if (SLSeek(v7, 0, 2u) == 8) {
    return 1010;
  }
  uint64_t v10 = 0;
  if (SLFpos(v7, &v10) == 8) {
    return 1010;
  }
  __int16 v9 = strlen(a1);
  *a3 = v9;
  if (SLFWrite(v7, v9, a1, (unsigned int *)&v10 + 1) == 8)
  {
    SLClose(v7);
    return 1011;
  }
  else
  {
    uint64_t result = 0;
    *a2 = v10;
  }
  return result;
}

_WORD *alt_conv(_WORD *result, unsigned char *a2, unsigned char *a3)
{
  int v3 = *a2;
  if (v3 == 255)
  {
    if (*a3 == 255) {
      return result;
    }
    int v4 = (unsigned __int16)*result;
    if (!*result) {
      goto LABEL_9;
    }
  }
  else
  {
    int v4 = (unsigned __int16)*result;
    if (!*result)
    {
      if (!*a2)
      {
LABEL_10:
        *uint64_t result = v3 + *a3;
        return result;
      }
LABEL_9:
      LOWORD(v3) = 255 * v3;
      *uint64_t result = v3;
      goto LABEL_10;
    }
  }
  unsigned int v5 = ((__int16)((32897 * (__int16)v4) >> 16) >> 7)
     + (((v4 + ((-32639 * (__int16)v4) >> 16)) & 0x8000) >> 15);
  *a2 = v5;
  *a3 = *(unsigned char *)result + v5;
  return result;
}

uint64_t PDchknegs()
{
  if (!**(_WORD **)(pMCPbuff + 8)) {
    return 0;
  }
  unsigned __int16 v0 = 1;
  while (*(_WORD *)(*(void *)(pMCPbuff + 16) + 2 * v0) != 9090
       || !*(_WORD *)(*(void *)(*(void *)pMCPbuff + 8 * v0) + 2094))
  {
    if (**(unsigned __int16 **)(pMCPbuff + 8) < ++v0) {
      return 0;
    }
  }
  return 1;
}

uint64_t PDFileExists(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  int v2 = SLOpen(a1, a2, (int *)&v4, 0);
  uint64_t result = 0;
  if (v2 != 8)
  {
    SLClose(v4);
    return 1;
  }
  return result;
}

uint64_t PDcomp(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v2 = (const void *)(a1 + 1809);
  memcpy(__dst, (const void *)(a1 + 1809), sizeof(__dst));
  int v34 = -2;
  int v35 = -2;
  int v32 = -2;
  int v33 = -2;
  int v31 = -2;
  int v26 = 0;
  uint64_t v25 = 0;
  *(_DWORD *)(a1 + 2584) = 0;
  *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_DWORD *)(a1 + 2592) = 0;
  *(_WORD *)(a1 + 260_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(void *)(a1 + 2616) = 0;
  if (*(unsigned __int8 *)(a1 + 2320) >= 7u)
  {
    uint64_t result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v4 = 5116;
LABEL_19:
    *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v4;
    return result;
  }
  int v30 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v20 = 0;
  memcpy(v36, v2, sizeof(v36));
  if (PDFileExists((uint64_t)v36, a1 + 1553)) {
    goto LABEL_4;
  }
  uint64_t v5 = SLLngToA(*(unsigned __int8 *)(a1 + 2577));
  v36[0] = 0;
  if (SLtmpnam(__dst, v36) == 8) {
    goto LABEL_12;
  }
  if (SLOpen((uint64_t)__dst, (uint64_t)v36, &v33, 0x602u) == 8) {
    goto LABEL_16;
  }
  v42[0] = 0;
  if (SLtmpnam(__dst, v42) == 8)
  {
LABEL_12:
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v4 = 1019;
      goto LABEL_19;
    }
    return 8;
  }
  if (SLOpen((uint64_t)__dst, (uint64_t)v42, &v32, 0x602u) == 8) {
    goto LABEL_16;
  }
  v41[0] = 0;
  if (SLtmpnam(__dst, v41) == 8) {
    goto LABEL_12;
  }
  if (SLOpen((uint64_t)__dst, (uint64_t)v41, &v31, 0x602u) == 8)
  {
LABEL_16:
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v4 = 1012;
      goto LABEL_19;
    }
    return 8;
  }
  unsigned __int8 v24 = 0;
  v38[0] = 0;
  if (*(unsigned char *)(a1 + 776) != 7)
  {
    int v35 = -2;
    unsigned __int8 v24 = 0;
    goto LABEL_27;
  }
  if (SLtmpnam(__dst, v38) == 8) {
    goto LABEL_12;
  }
  if (SLOpen((uint64_t)__dst, (uint64_t)v38, &v35, 0x602u) == 8) {
    goto LABEL_16;
  }
  uint64_t result = DecompOldSD(a1, (uint64_t)v19, v35, 1, &v24, (uint64_t)&v29);
  if (result != 8)
  {
LABEL_27:
    unsigned __int8 v23 = 0;
    v37[0] = 0;
    if (*(unsigned char *)(a1 + 1552) == 7)
    {
      if (SLtmpnam(__dst, v37) == 8) {
        goto LABEL_12;
      }
      if (SLOpen((uint64_t)__dst, (uint64_t)v37, &v34, 0x602u) == 8) {
        goto LABEL_16;
      }
      uint64_t result = DecompOldSD(a1, (uint64_t)v19, v34, 2, &v23, (uint64_t)&v27);
      if (result == 8) {
        return result;
      }
    }
    else
    {
      int v34 = -2;
      unsigned __int8 v23 = 0;
    }
    unsigned int v6 = *(unsigned __int8 *)(a1 + 776) - 3;
    if (v6 <= 4 && ((0x17u >> v6) & 1) != 0) {
      unint64_t v7 = 0x404030201uLL >> (8 * v6);
    }
    else {
      LODWORD(v7) = 0;
    }
    int v8 = 0;
    int v9 = 8;
    switch(*(unsigned char *)(a1 + 1552))
    {
      case 0:
        goto LABEL_43;
      case 3:
        goto LABEL_41;
      case 4:
        int v9 = 16;
        goto LABEL_41;
      case 5:
        int v9 = 24;
        goto LABEL_41;
      case 7:
        int v9 = 32;
LABEL_41:
        int v8 = v9;
        break;
      default:
        break;
    }
    LODWORD(v7) = v8 | v7;
LABEL_43:
    int v10 = 0;
    int v11 = 64;
    switch(*(unsigned char *)(a1 + 2320))
    {
      case 0:
        goto LABEL_49;
      case 3:
        goto LABEL_47;
      case 4:
        int v11 = 128;
        goto LABEL_47;
      case 5:
        int v11 = 192;
        goto LABEL_47;
      case 7:
        int v11 = 0;
LABEL_47:
        int v10 = v11;
        break;
      default:
        break;
    }
    LODWORD(v7) = v10 | v7;
LABEL_49:
    long long v21 = 0;
    long long v22 = 0;
    if ((v7 & 7) != 4
      && PDOpenFile(a1, v7 & 7, 1, a1 + 256, a1, &v24, (uint64_t)&v29, &v35, (uint64_t *)&v22) == 8)
    {
      uint64_t v12 = v22;
      if (!v22) {
        goto LABEL_16;
      }
      goto LABEL_65;
    }
    unsigned int v13 = (v7 >> 3) & 7;
    if (((v7 >> 3) & 3 | 4) != 4
      && PDOpenFile(a1, (v7 >> 3) & 7, 2, a1 + 1033, a1 + 777, &v23, (uint64_t)&v27, &v34, (uint64_t *)&v21) == 8)
    {
      uint64_t v12 = v21;
      if (!v21) {
        goto LABEL_16;
      }
      goto LABEL_65;
    }
    if ((v7 & 7) == 3)
    {
      uint64_t v14 = v22;
      if (PDDecompress(a1, (uint64_t)v22, (uint64_t)v40, (uint64_t)v39, v32, v5, (uint64_t)&v29) == 8)
      {
        uint64_t v12 = v14;
LABEL_65:
        free(v12);
        goto LABEL_16;
      }
    }
    else if (CreateFormattedRD(a1, (unsigned int *)&v35, v32, v24, (uint64_t)&v29) == 8)
    {
      goto LABEL_76;
    }
    int v15 = v7 >> 6;
    if (v13)
    {
      if (v13 == 3)
      {
        uint64_t v16 = v21;
        if (PDDecompress(a1, (uint64_t)v21, (uint64_t)v40, (uint64_t)v39, v31, v5, (uint64_t)&v27) == 8)
        {
          uint64_t v12 = v16;
          goto LABEL_65;
        }
      }
      else if (CreateFormattedRD(a1, (unsigned int *)&v34, v31, v23, (uint64_t)&v27) == 8)
      {
        goto LABEL_76;
      }
      if (MergeAndCompare(a1, v32, v31, v33, (uint64_t)&v25) == 8) {
        goto LABEL_72;
      }
      if ((v15 - 1) > 1)
      {
        SLClose(v33);
        int v33 = -2;
        if (SLOpen((uint64_t)__dst, (uint64_t)v36, &v33, 2u) == 8) {
          return 1012;
        }
        if (PDCompress(a1, 0, v5, (unsigned int *)&v33, &v25))
        {
LABEL_72:
          if (v22) {
            free(v22);
          }
          uint64_t v18 = v21;
          if (v21) {
LABEL_75:
          }
            free(v18);
LABEL_76:
          if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
          {
            uint64_t result = 8;
            *(_DWORD *)(a1 + 2584) = 8;
            __int16 v4 = 5119;
            goto LABEL_19;
          }
          return 8;
        }
      }
      else if (PDSwitchToOut((uint64_t)v36, v7 >> 6, v33, a1) == 8)
      {
        if (v22) {
          free(v22);
        }
        uint64_t v17 = v21;
        if (!v21)
        {
LABEL_4:
          if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
          {
            uint64_t result = 8;
            *(_DWORD *)(a1 + 2584) = 8;
            __int16 v4 = 5120;
            goto LABEL_19;
          }
          return 8;
        }
LABEL_88:
        free(v17);
        goto LABEL_4;
      }
    }
    else if ((v15 - 1) > 1)
    {
      if (PDCompress(a1, 0, v5, (unsigned int *)&v32, &v29))
      {
        uint64_t v18 = v22;
        if (!v22) {
          goto LABEL_76;
        }
        goto LABEL_75;
      }
    }
    else if (PDSwitchToOut((uint64_t)v42, v7 >> 6, v32, a1) == 8)
    {
      uint64_t v17 = v22;
      if (!v22) {
        goto LABEL_4;
      }
      goto LABEL_88;
    }
    if ((v33 & 0x80000000) == 0) {
      SLClose(v33);
    }
    if (v36[0]) {
      SLremove();
    }
    if ((v32 & 0x80000000) == 0) {
      SLClose(v32);
    }
    if (v42[0]) {
      SLremove();
    }
    if ((v31 & 0x80000000) == 0) {
      SLClose(v31);
    }
    if (v41[0]) {
      SLremove();
    }
    if ((v35 & 0x80000000) == 0) {
      SLClose(v35);
    }
    if (v38[0]) {
      SLremove();
    }
    if (v37[0]) {
      SLremove();
    }
    if (v22) {
      free(v22);
    }
    uint64_t result = (uint64_t)v21;
    if (v21)
    {
      free(v21);
      return 0;
    }
  }
  return result;
}

uint64_t DecompOldSD(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v41 = a2;
  char v33 = 1;
  uint64_t started = StartDb(a1, a4);
  if (started)
  {
    uint64_t v11 = started;
    unsigned int v34 = 0;
    if (StartWord(&v41, started) == 8)
    {
      long long v12 = *(_OWORD *)(v11 + 2088);
      long long v13 = *(_OWORD *)(v11 + 2104);
      *(void *)(a1 + 2616) = *(void *)(v11 + 2120);
      *(_OWORD *)(a1 + 2584) = v12;
      *(_OWORD *)(a1 + 2600) = v13;
      uint64_t v14 = (void *)v11;
LABEL_4:
      free(v14);
      return 8;
    }
    int v36 = 0;
    uint64_t v16 = v41;
    *(_WORD *)(v41 + 4_Block_object_dispose(&STACK[0x510], 8) = 1;
    LOBYTE(v36) = *(unsigned char *)(v11 + 2078);
    unsigned __int8 v17 = *(unsigned char *)(v11 + 2079);
    if (!v17) {
      unsigned __int8 v17 = 61;
    }
    *(_WORD *)((char *)&v36 + 1) = v17;
    __int16 v37 = 0;
    int v40 = a3;
    int v38 = 0;
    __int16 v39 = 0;
    if (PDWriteOldRDHead((unsigned __int8 *)&v36, a5) == 8)
    {
      free((void *)v11);
      PDFullCleanSDNeg((void **)v16);
      if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 2584) = 8;
        __int16 v18 = 5119;
LABEL_30:
        *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v18;
        return result;
      }
    }
    else
    {
      *(unsigned char *)(a6 + 1) = *(unsigned char *)(v11 + 2078);
      int v19 = BYTE1(v36);
      *(unsigned char *)a6 = BYTE1(v36);
      *(_WORD *)(a6 + 10) = 0;
      *(_DWORD *)(a6 + 2) = 0;
      *(_DWORD *)(a6 + 5) = 0;
      uint64_t v20 = (char *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
      if (v20)
      {
        long long v21 = v20;
        while (1)
        {
          if (GetOldSDWord(a1, v16, &v33) == 8) {
            goto LABEL_26;
          }
          if (!v33) {
            break;
          }
          uint64_t v22 = **(void **)(v16 + 104);
          unsigned int v23 = *(unsigned __int8 *)(v22 + 71);
          int v24 = (__int16)strlen((const char *)v22);
          if (*(unsigned char *)(v22 + 71))
          {
            uint64_t v25 = SLLngToA(*(unsigned __int8 *)(v22 + 72));
            SLrecap((unsigned __int8 *)v22, v24, v23, v22 + 80, v23, v25);
          }
          SLchcnv((char *)v22, v24, (unsigned __int8 *)v22, 0, *(unsigned __int8 *)(v22 + 72));
          if (*(_DWORD *)(v22 + 88) || *(_DWORD *)(v22 + 92)) {
            PDhypins((char *)v22, (uint64_t *)(v22 + 88), v19);
          }
          *(_WORD *)long long v21 = 35;
          __strcat_chk();
          __strcat_chk();
          int v26 = strlen(v21);
          if (SLFWrite(a3, v26, v21, &v34) == 8)
          {
            if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
            {
              *(_DWORD *)(a1 + 2584) = 8;
              *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = 1011;
            }
LABEL_26:
            free((void *)v11);
            PDFullCleanSDNeg((void **)v16);
            uint64_t v14 = v21;
            goto LABEL_4;
          }
        }
        uint64_t v27 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(v11 + 2074));
        int v28 = *(_DWORD *)(*(void *)(v27 + 2176) + 40);
        int v35 = v28;
        if (v28)
        {
          unsigned int v29 = *(_DWORD *)(*(void *)(v27 + 2184) + 64);
          SLSeek(v29, v28, 0);
          while (PDGets((unsigned __int8 *)v21, 2177, &v35, v29) != 8)
          {
            int v30 = strlen(v21);
            if (SLFWrite(a3, v30, v21, &v34) == 8)
            {
              free(v21);
              free((void *)v11);
              PDFullCleanSDNeg((void **)v16);
              if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
              {
                uint64_t result = 8;
                *(_DWORD *)(a1 + 2584) = 8;
                __int16 v18 = 1011;
                goto LABEL_30;
              }
              return 8;
            }
          }
        }
        free(v21);
        if (PDdb(v11, 3) != 8)
        {
          free((void *)v11);
          PDFullCleanSDNeg((void **)v16);
          return 0;
        }
        long long v31 = *(_OWORD *)(v11 + 2088);
        long long v32 = *(_OWORD *)(v11 + 2104);
        *(void *)(a1 + 2616) = *(void *)(v11 + 2120);
        *(_OWORD *)(a1 + 2584) = v31;
        *(_OWORD *)(a1 + 2600) = v32;
        free((void *)v11);
        PDFullCleanSDNeg((void **)v16);
      }
      else
      {
        free((void *)v11);
        PDFullCleanSDNeg((void **)v16);
        if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
        {
          uint64_t result = 8;
          *(_DWORD *)(a1 + 2584) = 8;
          __int16 v18 = 1030;
          goto LABEL_30;
        }
      }
    }
  }
  return 8;
}

uint64_t SetTypes(uint64_t result, unsigned char *a2)
{
  *a2 = 0;
  char v2 = result - 3;
  if (result - 3) <= 4 && ((0x17u >> v2)) {
    *a2 = 0x401030201uLL >> (8 * v2);
  }
  return result;
}

uint64_t PDOpenFile(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t a7, int *a8, uint64_t *a9)
{
  if ((a2 - 1) > 1)
  {
    uint64_t started = StartDb(a1, a3);
    *a9 = started;
    if (started)
    {
      uint64_t v20 = started;
      uint64_t result = 0;
      uint64_t v21 = *(void *)(*(void *)pMCPbuff + 8 * *(unsigned __int16 *)(v20 + 2074));
      *(_WORD *)(a7 + 10) = *(_WORD *)(v21 + 2094);
      *(_WORD *)a7 = *(_WORD *)(v21 + 2068);
      *(unsigned char *)(a7 + _Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(v21 + 2092);
      *(_DWORD *)(a7 + 2) = *(_DWORD *)(v21 + 2084);
      *(_WORD *)(a7 + 6) = *(_WORD *)(v21 + 2090);
      return result;
    }
    return 8;
  }
  if (SLOpen(a4, a5, a8, 0) == 8) {
    goto LABEL_8;
  }
  uint64_t v15 = 1544;
  if (a3 == 1) {
    uint64_t v15 = 768;
  }
  int v16 = *(_DWORD *)(a1 + v15);
  if (v16)
  {
    if (SLSeek(*a8, v16, 0) == 8)
    {
LABEL_8:
      if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)(a1 + 2584) = 8;
        __int16 v18 = 1012;
LABEL_10:
        *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v18;
        return result;
      }
      return 8;
    }
  }
  if (a2 != 2)
  {
    uint64_t result = 0;
    *(unsigned char *)(a7 + 1) = *(unsigned char *)(a1 + 2577);
    *(unsigned char *)a7 = 61;
    *(_WORD *)(a7 + 10) = 0;
    *(_DWORD *)(a7 + 2) = 0;
    *(_DWORD *)(a7 + 5) = 0;
    return result;
  }
  uint64_t v22 = malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  int v24 = 0;
  if (PDGets((unsigned __int8 *)v22, 2177, &v24, *a8) == 8)
  {
    free(v22);
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v18 = 1010;
      goto LABEL_10;
    }
    return 8;
  }
  *a6 = v24;
  int v23 = PDreadHead((char *)v22, a7);
  free(v22);
  if (v23 == 8)
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v18 = 5115;
      goto LABEL_10;
    }
    return 8;
  }
  return 0;
}

uint64_t CreateFormattedRD(uint64_t a1, unsigned int *a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  int v38 = -2;
  int v39 = -2;
  int v37 = -2;
  unsigned __int8 v36 = 0;
  unsigned __int16 v35 = 0;
  int v10 = (char *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v10) {
    return 8;
  }
  uint64_t v11 = v10;
  long long v12 = malloc_type_malloc(0x881uLL, 0x100004077774924uLL);
  if (!v12) {
    return 8;
  }
  long long v13 = v12;
  uint64_t v14 = malloc_type_malloc(0x881uLL, 0x100004077774924uLL);
  if (!v14) {
    return 8;
  }
  uint64_t v15 = v14;
  *(void *)unint64_t v42 = 0;
  v44[0] = 0;
  uint64_t result = SLtmpnam((unsigned char *)(a1 + 1809), v44);
  if (result == 8) {
    return result;
  }
  uint64_t result = SLOpen(a1 + 1809, (uint64_t)v44, &v38, 0x602u);
  if (result == 8) {
    return result;
  }
  int v43 = 0;
  SLSeek(*a2, 0, 0);
  unsigned int v17 = *a2;
  int v18 = v38;
  uint64_t v19 = SLLngToA(0);
  unsigned int v20 = v17;
  uint64_t v21 = (unsigned char *)(a1 + 1809);
  int v22 = PDExtSort(v20, a4, 0, 0, v18, (unsigned char *)(a1 + 1809), 1, v19, *(unsigned char *)(a1 + 2577), 0x92u);
  if (v22)
  {
    __int16 v23 = v22;
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      return 8;
    }
    uint64_t result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
LABEL_10:
    *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v23;
    return result;
  }
  SLClose(*a2);
  SLClose(v38);
  *a2 = -2;
  int v38 = -2;
  uint64_t result = SLOpen((uint64_t)v21, (uint64_t)v44, &v38, 2u);
  if (result == 8) {
    return result;
  }
  v45[0] = 0;
  uint64_t result = SLtmpnam(v21, v45);
  if (result == 8) {
    return result;
  }
  uint64_t result = SLOpen((uint64_t)v21, (uint64_t)v45, &v39, 0x602u);
  if (result == 8) {
    return result;
  }
  if (*(unsigned char *)(a1 + 2321) && SLOpen((uint64_t)v21, a1 + 2321, &v37, 0x602u) == 8)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      return 8;
    }
    uint64_t result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v23 = 1012;
    goto LABEL_10;
  }
  SLSeek(v39, 0, 0);
  int v24 = 0;
  unsigned __int16 v25 = 0;
  while (PDGets((unsigned __int8 *)v11, 2177, &v43, v38) != 8)
  {
    uint64_t result = BuildForm(v11, v13, *(unsigned __int8 *)(a5 + 8), &v35, &v36);
    if (result == 8) {
      return result;
    }
    int v26 = v36;
    if (v36) {
      int v27 = v24 + 1;
    }
    else {
      int v27 = v24;
    }
    if (*(unsigned char *)(a1 + 2321) && v25)
    {
      if (v25 <= v35) {
        size_t v28 = v35;
      }
      else {
        size_t v28 = v25;
      }
      if (memcmp(v13, v15, v28))
      {
        __strcpy_chk();
        goto LABEL_36;
      }
      if (v26) {
        int v24 = v27 - 1;
      }
      int v29 = strlen(v13);
      int v30 = SLFWrite(v37, v29, v13, (unsigned int *)v42);
      uint64_t result = 8;
      if (v30 == 8) {
        return result;
      }
    }
    else
    {
LABEL_36:
      int v31 = strlen(v13);
      uint64_t result = SLFWrite(v39, v31, v13, (unsigned int *)v42);
      if (result == 8) {
        return result;
      }
      unsigned __int16 v25 = v35;
      int v24 = v27;
    }
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  WORD2(v40) = v24;
  if ((v37 & 0x80000000) == 0)
  {
    SLClose(v37);
    int v37 = -2;
  }
  SLClose(v38);
  int v38 = -2;
  SLremove();
  free(v11);
  free(v13);
  free(v15);
  SLSeek(a3, 0, 0);
  LOBYTE(v40) = *(unsigned char *)(a1 + 2577);
  *(unsigned char *)(a5 + 1) = v40;
  char v32 = *(unsigned char *)(a1 + 2578);
  if (!v32) {
    char v32 = 61;
  }
  BYTE1(v40) = v32;
  *(unsigned char *)a5 = v32;
  BYTE2(v40) = *(unsigned char *)(a5 + 8);
  BYTE6(v40) = *(unsigned char *)(a5 + 7);
  LODWORD(v41) = *(_DWORD *)(a5 + 2);
  HIDWORD(v41) = a3;
  HIBYTE(v40) = *(unsigned char *)(a5 + 6);
  uint64_t result = PDWriteRDHead((unsigned __int8 *)&v40);
  if (result != 8)
  {
    char v33 = malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
    if (v33)
    {
      unsigned int v34 = v33;
      SLSeek(v39, 0, 0);
      while (!SLFRead(v39, 1024, v34, (unsigned int *)&v42[1]))
      {
        if (v42[1] >= 1)
        {
          uint64_t result = SLFWrite(a3, v42[1], v34, (unsigned int *)v42);
          if (result == 8) {
            return result;
          }
          if (v42[0] != v42[1]) {
            return 8;
          }
          if (v42[0] == 1024) {
            continue;
          }
        }
        SLSeek(a3, 0, 0);
        SLClose(v39);
        int v39 = -2;
        SLremove();
        free(v34);
        return 0;
      }
    }
    return 8;
  }
  return result;
}

uint64_t PDDecompress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v27 = *(unsigned __int16 **)a3;
  uint64_t v14 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x1090040D37A3AC8uLL);
  if (!v14 || (uint64_t v15 = v14, v16 = malloc_type_calloc(0x801uLL, 1uLL, 0x100004077774924uLL), (v15[1] = v16) == 0))
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
      return result;
    }
    return 8;
  }
  int v28 = 0;
  __int16 v29 = *(_WORD *)(a7 + 10);
  LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(a1 + 2577);
  char v17 = *(unsigned char *)(a1 + 2578);
  if (!v17) {
    char v17 = 61;
  }
  BYTE1(v2_Block_object_dispose(&STACK[0x510], 8) = v17;
  BYTE2(v2_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)(a7 + 8);
  char v30 = *(unsigned char *)(a7 + 7);
  int v32 = *(_DWORD *)(a7 + 2);
  unsigned int v33 = a5;
  char v31 = *(unsigned char *)(a7 + 6);
  if (PDWriteRDHead((unsigned __int8 *)&v28)) {
    return 8;
  }
  uint64_t result = StartWord(&v27, a2);
  if (result == 8)
  {
    long long v19 = *(_OWORD *)(a2 + 2088);
    long long v20 = *(_OWORD *)(a2 + 2104);
    *(void *)(a1 + 2616) = *(void *)(a2 + 2120);
    *(_OWORD *)(a1 + 2584) = v19;
    *(_OWORD *)(a1 + 2600) = v20;
    return result;
  }
  uint64_t v21 = (void **)v27;
  v27[24] = 1;
  char v34 = 1;
  *(void *)a3 = v21;
  __int16 v22 = *(unsigned __int8 *)(a7 + 8);
  *(_WORD *)(a4 + 20) = v22;
  *(_WORD *)(a3 + 20) = v22;
  *(unsigned char *)(a3 + 22) = BYTE1(v28);
  __int16 v23 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  *(void *)(a3 + _Block_object_dispose(&STACK[0x510], 8) = v23;
  if (!v23)
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      *(_DWORD *)(a1 + 2584) = 8;
      *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
    }
    PDFullCleanSDNeg(v21);
    free(v15[1]);
    int v24 = v15;
LABEL_24:
    free(v24);
    return 8;
  }
  while (1)
  {
    if (GetBuildWord(a1, (unsigned __int16 **)a3, &v34, a5, a6) == 8)
    {
      PDFullCleanSDNeg(v21);
      return 8;
    }
    if (!v34) {
      break;
    }
    if (AltAndWrite(a1, a3, (uint64_t)v15, a5) == 8) {
      goto LABEL_23;
    }
  }
  if (PDdb(a2, 3) == 8)
  {
    long long v25 = *(_OWORD *)(a2 + 2088);
    long long v26 = *(_OWORD *)(a2 + 2104);
    *(void *)(a1 + 2616) = *(void *)(a2 + 2120);
    *(_OWORD *)(a1 + 2584) = v25;
    *(_OWORD *)(a1 + 2600) = v26;
LABEL_23:
    PDFullCleanSDNeg(v21);
    int v24 = *(void ***)(a3 + 8);
    goto LABEL_24;
  }
  free(v15[1]);
  free(v15);
  free(*(void **)(a3 + 8));
  PDFullCleanSDNeg(v21);
  return 0;
}

uint64_t PDSwitchToOut(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v25 = 0;
  int v23 = -2;
  int v24 = 0;
  if (SLOpen(a4 + 1809, a4 + 1553, &v23, 0x602u) == 8)
  {
    if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)(a4 + 2584) = 8;
      *(_WORD *)(a4 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
      return result;
    }
    return 8;
  }
  if (a2 == 1)
  {
    int v8 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0xE9B0C981uLL);
    if (v8)
    {
      int v9 = v8;
      int v10 = (char *)malloc_type_malloc(0x881uLL, 0xDD7CC1F4uLL);
      if (v10)
      {
        uint64_t v11 = v10;
        SLSeek(a3, 0, 0);
        if (PDGets(v9, 64, (int *)&v25 + 1, a3) == 8)
        {
          if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
          {
            *(_DWORD *)(a4 + 2584) = 8;
            __int16 v12 = 1010;
LABEL_43:
            *(_WORD *)(a4 + 258_Block_object_dispose(&STACK[0x510], 8) = v12;
          }
        }
        else
        {
          do
          {
            if (PDGets(v9, 64, (int *)&v25 + 1, a3) == 8)
            {
              free(v9);
              free(v11);
              goto LABEL_50;
            }
            int v16 = *v9;
            int v17 = (__int16)strlen((const char *)v9);
            if (v17 <= (v16 == 35))
            {
              __int16 v22 = 0;
            }
            else
            {
              __int16 v18 = 0;
              __int16 v19 = v16 == 35;
              while (1)
              {
                unsigned int v20 = v9[v19];
                if (v20 <= 0x23 && ((1 << v20) & 0x800002401) != 0) {
                  break;
                }
                __int16 v22 = v18 + 1;
                v11[v18] = v20;
                ++v19;
                ++v18;
                if (v17 <= v19) {
                  goto LABEL_39;
                }
              }
              __int16 v22 = v18;
            }
LABEL_39:
            v11[v22] = 13;
            *(_WORD *)&v11[(__int16)(v22 + 1)] = 10;
          }
          while (SLFWrite(v23, (__int16)(v22 + 2), v11, (unsigned int *)&v25) != 8);
          if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
          {
            *(_DWORD *)(a4 + 2584) = 8;
            __int16 v12 = 1011;
            goto LABEL_43;
          }
        }
        free(v9);
        uint64_t v15 = v11;
      }
      else
      {
        if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
        {
          *(_DWORD *)(a4 + 2584) = 8;
          *(_WORD *)(a4 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
        }
        uint64_t v15 = v9;
      }
      free(v15);
      goto LABEL_46;
    }
LABEL_20:
    if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
    {
      *(_DWORD *)(a4 + 2584) = 8;
      *(_WORD *)(a4 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
    }
LABEL_46:
    SLClose(v23);
    return 8;
  }
  long long v13 = malloc_type_malloc(0x400uLL, 0x15A50B7CuLL);
  if (!v13) {
    goto LABEL_20;
  }
  uint64_t v14 = v13;
  SLSeek(a3, 0, 0);
  do
  {
    if (!SLFRead(a3, 1024, v14, (unsigned int *)&v24))
    {
      if (v24 < 1) {
        break;
      }
      if (SLFWrite(v23, v24, v14, (unsigned int *)&v25) != 8 && v25 == v24) {
        continue;
      }
    }
    free(v14);
    return 8;
  }
  while (v25 == 1024);
  free(v14);
  SLClose(a3);
  SLremove();
LABEL_50:
  SLClose(v23);
  return 0;
}

uint64_t PDCompress(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned char *a5)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  __int16 v126 = 0;
  __strcpy_chk();
  uint64_t v9 = (__int16)strlen(__s);
  do
  {
    uint64_t v10 = v9 - 1;
    if (v9 < 1) {
      break;
    }
    int v11 = __s[v9--];
  }
  while (v11 != 46);
  __strcpy_chk();
  if ((_WORD)v10 == 0xFFFF) {
    __strcat_chk();
  }
  else {
    __s[v10 + 1] = 0;
  }
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  unsigned int v12 = *a4;
  long long v13 = (int *)(a1 + 2584);
  uint64_t v136 = 0;
  v137[0] = 0;
  int v134 = -2;
  int v135 = -2;
  int v133 = -2;
  __int16 v132 = 0;
  uint64_t __dst = 0;
  v128[0] = 0;
  int v127 = 0;
  __buf[0] = 0;
  if (SLOpen(a1 + 1809, (uint64_t)v139, &v134, 0x602u) == 8) {
    goto LABEL_14;
  }
  v138[0] = 0;
  if (SLtmpnam((unsigned char *)(a1 + 1809), v138) == 8) {
    goto LABEL_9;
  }
  if (SLOpen(a1 + 1809, (uint64_t)v138, &v135, 0x602u) == 8
    || SLOpen(a1 + 1809, (uint64_t)v144, &v133, 0x602u) == 8)
  {
LABEL_14:
    if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
    {
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v14 = 1012;
      goto LABEL_17;
    }
    return 8;
  }
  int v16 = malloc_type_malloc(0xC1uLL, 0xBB55773AuLL);
  if (v16)
  {
    int v17 = v16;
    __int16 v18 = (unsigned __int8 *)malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
    if (v18)
    {
      uint64_t __src = v18;
      __int16 v19 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0xC3F17DF3uLL);
      if (v19)
      {
        unsigned int v20 = v19;
        uint64_t v21 = malloc_type_malloc(0xC1uLL, 0xB5E4973EuLL);
        if (v21)
        {
          long long v120 = v21;
          __int16 v22 = (char *)malloc_type_malloc(0x81uLL, 0xD954544BuLL);
          if (v22)
          {
            long long v122 = v22;
            int v23 = (char *)malloc_type_malloc(0x41uLL, 0x9A9700A8uLL);
            if (v23)
            {
              long long v119 = v23;
              int v24 = malloc_type_malloc(0xC1uLL, 0xF2F19824uLL);
              if (v24)
              {
                long long v117 = v24;
                uint64_t v25 = (char *)malloc_type_malloc(0x801uLL, 0xC2CC0429uLL);
                if (v25)
                {
                  unsigned __int8 v115 = v25;
                  *long long v120 = 0;
                  if (PDGets(v20, 64, &v127, v12) == 8)
                  {
LABEL_29:
                    if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                    {
                      *(_DWORD *)(a1 + 2584) = 8;
                      __int16 v14 = 1010;
                      goto LABEL_17;
                    }
                    return 8;
                  }
                  int v107 = 0;
                  unsigned __int8 v102 = 0;
                  int v106 = 0;
                  int v104 = 0;
                  uint64_t v103 = v20;
                  while (1)
                  {
                    do
                    {
                      if (PDGets(v20, 2177, &v127, v12) == 8)
                      {
                        free(__src);
                        free(v20);
                        free(v122);
                        free(v119);
                        free(v115);
                        free(v120);
                        free(v117);
                        SLClose(v133);
                        SLClose(v135);
                        free(v17);
                        SLClose(v134);
                        if (SLClose(*a4) == 8)
                        {
                          if (*(_WORD *)(a1 + 2588) && *v13 > 7) {
                            return 8;
                          }
                          uint64_t result = 8;
                          *(_DWORD *)(a1 + 2584) = 8;
                          __int16 v67 = 1013;
LABEL_102:
                          *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v67;
                          return result;
                        }
                        *a4 = -2;
                        uint64_t v68 = (unsigned char **)malloc_type_calloc(0x100uLL, 8uLL, 0x10040436913F5uLL);
                        if (!v68) {
                          return 1030;
                        }
                        uint64_t v69 = v68;
                        for (uint64_t i = 0; i != 256; ++i)
                        {
                          int v71 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
                          v69[i] = v71;
                          if (!v71) {
                            return 1030;
                          }
                        }
                        __srca = malloc_type_calloc(0x3E8uLL, 1uLL, 0x100004077774924uLL);
                        if (!__srca) {
                          return 1030;
                        }
                        for (uint64_t j = 0; j != 200; ++j)
                        {
                          for (uint64_t k = 0; k != 20; ++k)
                            v69[j][k] = 0;
                        }
                        uint64_t v74 = malloc_type_calloc(0x100uLL, 4uLL, 0x100004052888210uLL);
                        if (!v74)
                        {
LABEL_158:
                          if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                          {
                            uint64_t result = 8;
                            *(_DWORD *)(a1 + 2584) = 8;
                            __int16 v67 = 1030;
                            goto LABEL_102;
                          }
                          return 8;
                        }
                        uint64_t v75 = v74;
                        memset_pattern16(v74, &unk_20CC64DC0, 0x400uLL);
                        *(_DWORD *)long long v130 = -2;
                        *(_DWORD *)&v128[1] = -2;
                        long long v123 = (unsigned __int8 *)malloc_type_malloc(0xC1uLL, 0xBEA374E5uLL);
                        if (!v123) {
                          goto LABEL_145;
                        }
                        long long v121 = malloc_type_malloc(0xC1uLL, 0xD502B8CEuLL);
                        if (!v121) {
                          goto LABEL_145;
                        }
                        long long v118 = malloc_type_malloc(0x41uLL, 0x8AD6E95EuLL);
                        if (!v118) {
                          goto LABEL_145;
                        }
                        *(_DWORD *)__buf = 0;
                        if (SLOpen(a1 + 1809, (uint64_t)v138, (int *)v130, 0) == 8) {
                          goto LABEL_14;
                        }
                        LOBYTE(v137[0]) = 0;
                        if (SLtmpnam((unsigned char *)(a1 + 1809), (char *)v137) != 8)
                        {
                          if (SLOpen(a1 + 1809, (uint64_t)v137, (int *)&v128[1], 0x602u) == 8) {
                            goto LABEL_14;
                          }
                          BYTE4(__dst) = 0;
                          int v76 = malloc_type_malloc(0x81uLL, 0x966AD880uLL);
                          if (!v76) {
                            goto LABEL_145;
                          }
                          __int16 v77 = v76;
                          __int16 v111 = malloc_type_malloc(0x41uLL, 0x3799EAA5uLL);
                          if (!v111) {
                            goto LABEL_145;
                          }
                          while (!SLFRead(*(unsigned int *)v130, 4, &__dst, (unsigned int *)__buf)
                               && *(_DWORD *)__buf == 4)
                          {
                            unsigned int v79 = __dst;
                            int v80 = BYTE1(__dst);
                            int v81 = BYTE3(__dst) | BYTE2(__dst);
                            *__int16 v111 = 0u;
                            v111[1] = 0u;
                            v111[2] = 0u;
                            v111[3] = 0u;
                            *((unsigned char *)v111 + 64) = 0;
                            int v116 = v81;
                            if (SLFRead(*(unsigned int *)v130, v81, v111, (unsigned int *)__buf)) {
                              break;
                            }
                            uint64_t v114 = v80 | v79;
                            if (SLFRead(*(unsigned int *)v130, v80 | v79, v123, (unsigned int *)__buf)) {
                              break;
                            }
                            uint64_t v82 = *v123;
                            *long long v121 = v82;
                            ++v75[v82];
                            v77[128] = 0;
                            *((_OWORD *)v77 + 6) = 0u;
                            *((_OWORD *)v77 + 7) = 0u;
                            *((_OWORD *)v77 + 4) = 0u;
                            *((_OWORD *)v77 + 5) = 0u;
                            *((_OWORD *)v77 + 2) = 0u;
                            *((_OWORD *)v77 + 3) = 0u;
                            *(_OWORD *)__int16 v77 = 0u;
                            *((_OWORD *)v77 + 1) = 0u;
                            unsigned int v83 = v123[1];
                            if (v83 >= 0xB)
                            {
                              uint64_t v84 = 1;
                              int v85 = 1;
                              do
                              {
                                v77[v84 - 1] = v83;
                                uint64_t v84 = (unsigned __int16)++v85;
                                unsigned int v83 = v123[(unsigned __int16)v85];
                              }
                              while (v83 > 0xA);
                            }
                            **uint64_t v69 = 0;
                            if ((unsigned __int16)strlen(v77))
                            {
                              uint64_t v86 = 0;
                              unsigned __int16 v87 = 2;
                              do
                              {
                                v121[v86 + 1] = v77[v86];
                                ++v75[v77[v86++]];
                                ++v87;
                              }
                              while (v86 < (unsigned __int16)strlen(v77));
                              unsigned __int16 v88 = v86 + 1;
                            }
                            else
                            {
                              LOBYTE(v86) = 0;
                              unsigned __int16 v87 = 2;
                              unsigned __int16 v88 = 1;
                            }
                            v121[v88] = v83;
                            ++v75[v83];
                            unsigned __int16 v89 = v88 + 1;
                            if (v114 > v87)
                            {
                              uint64_t v90 = &v123[v87];
                              uint64_t v91 = v114 - v87;
                              do
                              {
                                int v92 = *v90++;
                                v121[v89] = v92;
                                ++v75[v92];
                                ++v89;
                                --v91;
                              }
                              while (v91);
                            }
                            char v149 = 0;
                            LOBYTE(__dst) = 0;
                            *(_WORD *)((char *)&__dst + 1) = v89;
                            BYTE3(__dst) = v116;
                            WORD2(__dst) = 0;
                            BYTE6(__dst) = 0;
                            HIBYTE(__dst) = v86;
                            if (SLFWrite(*(int *)&v128[1], 8, &__dst, (unsigned int *)__buf) == 8
                              || SLFWrite(*(int *)&v128[1], v116, v111, (unsigned int *)__buf) == 8
                              || SLFWrite(*(int *)&v128[1], v89, v121, (unsigned int *)__buf) == 8)
                            {
                              goto LABEL_142;
                            }
                          }
                          free(v118);
                          free(v77);
                          free(v111);
                          SLClose(*(unsigned int *)v130);
                          SLClose(*(unsigned int *)&v128[1]);
                          free(v123);
                          free(v121);
                          SLremove();
                          for (uint64_t m = 0; m != 256; ++m)
                            free(v69[m]);
                          free(v69);
                          free(__srca);
                          unsigned __int8 v94 = (unsigned __int16 *)malloc_type_calloc(0x202uLL, 8uLL, 0x100004000313F17uLL);
                          if (v94)
                          {
                            uint64_t v95 = v94;
                            scale_counts(v75, (uint64_t)v94);
                            free(v75);
                            unint64_t v96 = (FILE **)OpenOutputBitFile();
                            output_counts(v96, v95);
                            CloseOutputBitFile((uint64_t)v96);
                            int v97 = build_tree(v95);
                            unsigned __int8 v98 = malloc_type_calloc(0x101uLL, 4uLL, 0x100004052888210uLL);
                            if (v98)
                            {
                              int v99 = v98;
                              convert_tree_to_code((uint64_t)v95, (uint64_t)v98, 0, 0, v97);
                              free(v95);
                              uint64_t result = Huffman_Comp(a1 + 1809, (uint64_t)v137, (uint64_t)v143, (uint64_t)v141, v99, *(unsigned __int16 *)(a1 + 2580), &v126, a1 + 2584);
                              if (result == 8) {
                                return result;
                              }
                              SLremove();
                              PDngrams(a1 + 1809, (uint64_t)v144, a1 + 1809, (uint64_t)v142);
                              uint64_t v100 = malloc_type_malloc(0x400uLL, 0xE10EE3DCuLL);
                              if (v100)
                              {
                                size_t v101 = v100;
                                bzero(v100, 0x400uLL);
                                uint64_t result = Add_Tables(v102, a1 + 1809, (uint64_t)v140, (uint64_t)v141, (uint64_t)v142, (uint64_t)v143, v145, (uint64_t)v146, (uint64_t)v139, v101, a1 + 2584);
                                if (result != 8)
                                {
                                  uint64_t result = Update_Header(v107, *(unsigned char *)(a1 + 2577), v126, *(_WORD *)(a1 + 2580), a1 + 1809, (uint64_t)v140, (uint64_t)v101, a1 + 2584, a5);
                                  if (result != 8)
                                  {
                                    free(v101);
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    return 0;
                                  }
                                }
                                return result;
                              }
                            }
                          }
                          goto LABEL_158;
                        }
LABEL_9:
                        if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                        {
                          *(_DWORD *)(a1 + 2584) = 8;
                          __int16 v14 = 1019;
                          goto LABEL_17;
                        }
                        return 8;
                      }
                    }
                    while (*v20 == 35 && v20[1] == 35);
                    __int16 v26 = strlen((const char *)v20);
                    SLchcnv((char *)v20, v26, v20, 1, *(unsigned __int8 *)(a1 + 2577));
                    __int16 v132 = 0;
                    *unsigned __int8 v115 = 0;
                    PDasparse(v20, (uint64_t)v122, (unsigned char *)&v132 + 1, &v132, (uint64_t)v115, v128, a5[8], (uint64_t)__src);
                    uint64_t v27 = 0;
                    for (uint64_t n = 0; n != 12; ++n)
                    {
                      int v29 = __src[v27];
                      if ((v29 - 48) >= 0xA) {
                        char v30 = -112;
                      }
                      else {
                        char v30 = 0;
                      }
                      char v31 = v30 + 16 * v29;
                      int v32 = __src[v27 + 1];
                      unsigned int v33 = v32 - 48;
                      unsigned __int8 v34 = v32 - 48 + v31;
                      unsigned __int8 v35 = v32 + v31 - 55;
                      if (v33 < 0xA) {
                        unsigned __int8 v35 = v34;
                      }
                      __src[n] = v35;
                      v27 += 2;
                    }
                    int v36 = v107;
                    if ((_BYTE)v132) {
                      int v36 = v107 + 1;
                    }
                    char v112 = 16 * ((_BYTE)v132 != 0);
                    int v107 = v36;
                    if (HIBYTE(v132))
                    {
                      v128[0] = strlen(v115);
                      if (SLFpos(v134, &v136) == 8) {
                        goto LABEL_29;
                      }
                      if (SLFWrite(v134, v128[0], v115, (unsigned int *)&v136 + 1) == 8)
                      {
LABEL_142:
                        if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                        {
                          *(_DWORD *)(a1 + 2584) = 8;
                          __int16 v14 = 1011;
                          goto LABEL_17;
                        }
                        return 8;
                      }
                      v112 |= 8u;
                      unsigned __int8 v102 = 1;
                    }
                    unsigned __int16 v37 = strlen(v122);
                    int v108 = PDhypstrip(v122, &__dst, 61);
                    int v105 = SLcap((uint64_t)v122, 0, (__int16)(v37 - 1), v137, a3);
                    unsigned __int16 v38 = strlen(v122);
                    uint64_t v39 = 0;
                    if (((v38 + 1) & 0xFFFE) != 0) {
                      uint64_t v40 = (unsigned __int16)(v38 + 1);
                    }
                    else {
                      uint64_t v40 = 1;
                    }
                    do
                    {
                      uint64_t v41 = v122[v39];
                      if ((*(_DWORD *)(a3 + 4 * v41) & 0x40000000) != 0) {
                        LOBYTE(v41) = v41 + 32;
                      }
                      v119[v39++] = v41;
                    }
                    while (v40 != v39);
                    char v42 = v112 | 4;
                    if (v37 == v108) {
                      char v42 = v112;
                    }
                    if (a5[8]) {
                      char v43 = v42 | 0x20;
                    }
                    else {
                      char v43 = v42;
                    }
                    char v109 = v43;
                    if (v119[v38 - 1] == 10)
                    {
                      v119[(unsigned __int16)(v38 - 1)] = 0;
                      unsigned __int16 v113 = v38 - 1;
                    }
                    else
                    {
                      unsigned __int16 v113 = v38;
                    }
                    __strcpy_chk();
                    uint64_t v44 = v120;
                    switch(v105)
                    {
                      case 0:
                        int v45 = 0;
                        goto LABEL_69;
                      case 1:
                        int v45 = 64;
                        goto LABEL_69;
                      case 2:
                        int v45 = 128;
                        goto LABEL_69;
                      case 3:
                        v109 |= 2u;
                        int v45 = 192;
LABEL_69:
                        uint64_t v46 = v122;
                        break;
                      default:
                        uint64_t v44 = v120;
                        uint64_t v46 = v122;
                        int v45 = v104;
                        break;
                    }
                    int v47 = 0;
                    do
                    {
                      int v48 = v47;
                      int v49 = v44[(__int16)v47];
                      int v50 = v46[(__int16)v47++];
                      if (v49) {
                        BOOL v51 = v49 == v50;
                      }
                      else {
                        BOOL v51 = 0;
                      }
                    }
                    while (v51);
                    int v104 = (v106 - v48) | v45;
                    *int v17 = v104;
                    __strcpy_chk();
                    __strcpy_chk();
                    unsigned __int16 v52 = strlen((const char *)v117);
                    *((unsigned char *)v117 + v52) = 0;
                    if (v52)
                    {
                      int v53 = 0;
                      int v54 = 1;
                      char v55 = v109;
                      do
                      {
                        unsigned __int16 v56 = v54 + 1;
                        v17[(unsigned __int16)v54++] = *((unsigned char *)v117 + v53++);
                      }
                      while (v52 > v53);
                    }
                    else
                    {
                      unsigned __int16 v56 = 1;
                      char v55 = v109;
                    }
                    v17[v56] = 0;
                    unsigned __int16 v57 = v56 + 2;
                    v17[(unsigned __int16)(v56 + 1)] = v55;
                    if ((v55 & 2) != 0)
                    {
                      int v60 = v137[0];
                      v17[(unsigned __int16)(v56 + 2)] = BYTE3(v137[0]);
                      v17[(unsigned __int16)(v56 + 3)] = BYTE2(v60);
                      v17[(unsigned __int16)(v56 + 4)] = BYTE1(v60);
                      v17[(unsigned __int16)(v56 + 5)] = v60;
                      int v61 = HIDWORD(v137[0]);
                      v17[(unsigned __int16)(v56 + 6)] = HIBYTE(v137[0]);
                      v17[(unsigned __int16)(v56 + 7)] = BYTE2(v61);
                      v17[(unsigned __int16)(v56 + 8)] = BYTE1(v61);
                      unsigned __int16 v57 = v56 + 10;
                      v17[(unsigned __int16)(v56 + 9)] = v61;
                      if ((v55 & 4) == 0)
                      {
LABEL_82:
                        if ((v55 & 8) != 0) {
                          goto LABEL_96;
                        }
                        goto LABEL_83;
                      }
                    }
                    else if ((v55 & 4) == 0)
                    {
                      goto LABEL_82;
                    }
                    int v62 = __dst;
                    int v63 = HIDWORD(__dst);
                    v17[v57] = BYTE3(__dst);
                    v17[(unsigned __int16)(v57 + 1)] = BYTE2(v62);
                    v17[(unsigned __int16)(v57 + 2)] = BYTE1(v62);
                    v17[(unsigned __int16)(v57 + 3)] = v62;
                    v17[(unsigned __int16)(v57 + 4)] = HIBYTE(v63);
                    v17[(unsigned __int16)(v57 + 5)] = BYTE2(v63);
                    unsigned __int16 v64 = v57 + 7;
                    v17[(unsigned __int16)(v57 + 6)] = BYTE1(v63);
                    v57 += 8;
                    v17[v64] = v63;
                    if ((v55 & 8) != 0)
                    {
LABEL_96:
                      int v65 = v136;
                      v17[v57] = BYTE3(v136);
                      v17[(unsigned __int16)(v57 + 1)] = BYTE2(v65);
                      v17[(unsigned __int16)(v57 + 2)] = BYTE1(v65);
                      v17[(unsigned __int16)(v57 + 3)] = v65;
                      LOBYTE(v65) = v128[0];
                      unsigned __int16 v66 = v57 + 5;
                      v17[(unsigned __int16)(v57 + 4)] = HIBYTE(v128[0]);
                      v57 += 6;
                      v17[v66] = v65;
                      if ((v55 & 0x20) == 0) {
                        goto LABEL_85;
                      }
LABEL_84:
                      memcpy(&v17[v57], __src, a5[8]);
                      v57 += a5[8];
                      goto LABEL_85;
                    }
LABEL_83:
                    if ((v55 & 0x20) != 0) {
                      goto LABEL_84;
                    }
LABEL_85:
                    unsigned __int16 v110 = v57;
                    if (v113 >= 4u) {
                      int v58 = 4;
                    }
                    else {
                      int v58 = v113;
                    }
                    __strncpy_chk();
                    v130[v58] = 0;
                    strlen(v130);
                    __strncat_chk();
                    if (!SLstrcmp(v130, (unsigned __int8 *)__buf)
                      || (__strcpy_chk(),
                          int v59 = strlen(__buf),
                          SLFWrite(v133, v59, __buf, (unsigned int *)&v136 + 1) != 8))
                    {
                      *long long v122 = 0;
                      __strcpy_chk();
                      v120[strlen(v120)] = 0;
                      int v106 = strlen(v120);
                      char v129 = 0;
                      LOBYTE(v128[1]) = 0;
                      *(_WORD *)((char *)&v128[1] + 1) = v110;
                      HIBYTE(v128[2]) = v113;
                      if (SLFWrite(v135, 4, &v128[1], (unsigned int *)&v136 + 1) != 8)
                      {
                        unsigned int v20 = v103;
                        if (SLFWrite(v135, v113, v119, (unsigned int *)&v136 + 1) != 8
                          && SLFWrite(v135, v110, v17, (unsigned int *)&v136 + 1) != 8)
                        {
                          continue;
                        }
                      }
                    }
                    goto LABEL_142;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_145:
  if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
  {
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v14 = 1030;
LABEL_17:
    *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v14;
  }
  return 8;
}

uint64_t MergeAndCompare(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  __int16 v71 = 0;
  uint64_t v10 = (unsigned char *)(a1 + 1809);
  __int16 v70 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  int v64 = -2;
  int v65 = -2;
  int v63 = 0;
  uint64_t v11 = SLLngToA(*(unsigned __int8 *)(a1 + 2577));
  v74[0] = 0;
  uint64_t result = SLtmpnam(v10, v74);
  if (result == 8) {
    return result;
  }
  uint64_t result = SLOpen((uint64_t)v10, (uint64_t)v74, &v65, 0x602u);
  if (result == 8) {
    return result;
  }
  if (*(unsigned char *)(a1 + 2321) && SLOpen((uint64_t)v10, a1 + 2321, &v64, 2u) == 8)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      return 8;
    }
    uint64_t result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v13 = 1012;
LABEL_8:
    *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v13;
    return result;
  }
  __int16 v14 = malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
  if (!v14) {
    return 8;
  }
  uint64_t v15 = v14;
  int v16 = malloc_type_malloc(0x801uLL, 0xA262FB22uLL);
  if (!v16) {
    return 8;
  }
  int v17 = v16;
  int v72 = 0;
  int v73 = 0;
  __int16 v18 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v18) {
    return 8;
  }
  int v62 = v18;
  __int16 v19 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v19) {
    return 8;
  }
  char __s = v19;
  unsigned int v20 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v20) {
    return 8;
  }
  __s1 = v20;
  uint64_t v21 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v21) {
    return 8;
  }
  __s2 = v21;
  SLSeek(a2, 0, 0);
  if (PDGets(v62, 2177, &v73, a2) == 8) {
    goto LABEL_20;
  }
  if (PDreadHead((char *)v62, (uint64_t)&v68) == 8) {
    return 5115;
  }
  *int v62 = 0;
  SLSeek(a3, 0, 0);
  if (PDGets(__s, 2177, &v72, a3) == 8)
  {
LABEL_20:
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      return 8;
    }
    uint64_t result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v13 = 1010;
    goto LABEL_8;
  }
  unsigned __int16 v52 = v17;
  int v55 = 0;
  unsigned __int8 *__s = 0;
  __int16 v22 = (char *)__s;
  BOOL v23 = 1;
  BOOL v24 = 1;
  int v25 = 1;
  int v60 = 1;
  __int16 v26 = v62;
  do
  {
    if (v24)
    {
      if (!*v26)
      {
        int v58 = v25;
        uint64_t v27 = v26;
        if (PDGets(v26, 2177, &v73, a2) == 8)
        {
          *uint64_t v27 = 0;
          __int16 v22 = (char *)__s;
          if (*__s)
          {
            int v28 = strlen((const char *)__s);
            uint64_t result = SLFWrite(v65, v28, __s, (unsigned int *)&v69 + 1);
            if (result == 8) {
              return result;
            }
            int v60 = 0;
            unsigned __int8 *__s = 0;
            __int16 v26 = v62;
            __int16 v22 = (char *)__s;
          }
          else
          {
            __int16 v26 = v27;
            int v60 = 0;
          }
        }
        else
        {
          PDasparse(v27, (uint64_t)v75, (unsigned char *)&v71 + 1, &v71, (uint64_t)v52, &v70, 0xCu, (uint64_t)v15);
          int v29 = v55;
          if ((_BYTE)v71) {
            int v29 = v55 + 1;
          }
          int v55 = v29;
          __int16 v26 = v27;
          __int16 v22 = (char *)__s;
        }
        int v25 = v58;
      }
    }
    else
    {
      int v60 = 0;
    }
    if (!v23) {
      goto LABEL_41;
    }
    int v59 = v25;
    if (!*v22)
    {
      char v30 = v22;
      if (PDGets((unsigned __int8 *)v22, 2177, &v72, a3) == 8)
      {
        *char v30 = 0;
        __int16 v26 = v62;
        __int16 v22 = v30;
        if (*v62)
        {
          int v31 = strlen((const char *)v62);
          uint64_t result = SLFWrite(v65, v31, v62, (unsigned int *)&v69 + 1);
          if (result == 8) {
            return result;
          }
          *int v62 = 0;
          __int16 v26 = v62;
          __int16 v22 = (char *)__s;
        }
LABEL_41:
        if (v60)
        {
          int v32 = v26;
          int v33 = strlen((const char *)v26);
          uint64_t result = SLFWrite(v65, v33, v32, (unsigned int *)&v69 + 1);
          if (result == 8) {
            return result;
          }
          int v25 = 0;
          unsigned __int8 v34 = v32;
          __int16 v26 = v32;
          __int16 v22 = (char *)__s;
          goto LABEL_71;
        }
        int v59 = 0;
LABEL_68:
        int v46 = strlen(v22);
        uint64_t result = SLFWrite(v65, v46, __s, (unsigned int *)&v69 + 1);
        __int16 v22 = (char *)__s;
        unsigned __int8 v34 = __s;
LABEL_69:
        BOOL v47 = result == 8;
        __int16 v26 = v62;
        goto LABEL_70;
      }
      PDasparse(v30, (uint64_t)v75, (unsigned char *)&v71 + 1, &v71, (uint64_t)v52, &v70, 0xCu, (uint64_t)v15);
      int v35 = v55;
      if ((_BYTE)v71) {
        int v35 = v55 + 1;
      }
      int v55 = v35;
      __int16 v26 = v62;
      __int16 v22 = v30;
    }
    if (!v60) {
      goto LABEL_68;
    }
    int v36 = v22;
    unsigned __int16 v54 = strlen((const char *)v26);
    int v37 = strlen(v36);
    int v53 = v37;
    if (v54 <= (unsigned __int16)v37) {
      size_t v38 = (unsigned __int16)v37;
    }
    else {
      size_t v38 = v54;
    }
    if (!(unsigned __int16)memcmp(v62, v36, v38))
    {
      if (v64 >= 0) {
        int v48 = v64;
      }
      else {
        int v48 = v65;
      }
      uint64_t result = SLFWrite(v48, v53, v36, (unsigned int *)&v69 + 1);
      unsigned __int8 v34 = v36;
      BOOL v47 = result == 8;
      __int16 v26 = v62;
      __int16 v22 = v36;
    }
    else
    {
      if ((v54 & 0x8000) == 0)
      {
        __int16 v39 = 0;
        do
        {
          uint64_t v40 = v62[v39];
          if ((*(_DWORD *)(v11 + 4 * v40) & 0x40000000) != 0) {
            LOBYTE(v40) = v40 + 32;
          }
          __s1[v39++] = v40;
        }
        while ((__int16)v54 >= v39);
      }
      __int16 v41 = strlen((const char *)__s);
      int v42 = v41;
      if ((v41 & 0x8000) == 0)
      {
        __int16 v43 = 0;
        do
        {
          uint64_t v44 = __s[v43];
          if ((*(_DWORD *)(v11 + 4 * v44) & 0x40000000) != 0) {
            LOBYTE(v44) = v44 + 32;
          }
          __s2[v43++] = v44;
        }
        while (v41 >= v43);
      }
      if ((__int16)v54 <= v41) {
        int v45 = v41;
      }
      else {
        int v45 = (__int16)v54;
      }
      if ((memcmp(__s1, __s2, v45) & 0x8000) == 0)
      {
        uint64_t result = SLFWrite(v65, v42, __s, (unsigned int *)&v69 + 1);
        __int16 v22 = (char *)__s;
        unsigned __int8 v34 = __s;
        goto LABEL_69;
      }
      uint64_t result = SLFWrite(v65, (__int16)v54, v62, (unsigned int *)&v69 + 1);
      __int16 v26 = v62;
      unsigned __int8 v34 = v62;
      BOOL v47 = result == 8;
      __int16 v22 = (char *)__s;
    }
LABEL_70:
    int v25 = v59;
    if (v47) {
      return result;
    }
LABEL_71:
    *unsigned __int8 v34 = 0;
    BOOL v24 = v60 != 0;
    BOOL v23 = v25 != 0;
  }
  while (v60 | v25);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  char v49 = *(unsigned char *)(a1 + 2578);
  if (!v49) {
    char v49 = 61;
  }
  BYTE1(v66) = v49;
  *(unsigned char *)a5 = v49;
  BYTE2(v66) = 12;
  *(unsigned char *)(a5 + _Block_object_dispose(&STACK[0x510], 8) = 12;
  BYTE6(v66) = HIBYTE(v68);
  *(unsigned char *)(a5 + 7) = HIBYTE(v68);
  LOBYTE(v67) = BYTE2(v68);
  *(unsigned char *)(a5 + 2) = BYTE2(v68);
  BYTE1(v67) = BYTE3(v68);
  *(unsigned char *)(a5 + 3) = BYTE3(v68);
  WORD1(v67) = WORD2(v68);
  *(_WORD *)(a5 + 4) = WORD2(v68);
  HIBYTE(v66) = BYTE6(v68);
  *(unsigned char *)(a5 + 6) = BYTE6(v68);
  LOBYTE(v66) = BYTE1(v68);
  *(unsigned char *)(a5 + 1) = BYTE1(v68);
  WORD2(v66) = v55;
  *(_WORD *)(a5 + 10) = v55;
  HIDWORD(v67) = a4;
  SLSeek(a4, 0, 0);
  if (!PDWriteRDHead((unsigned __int8 *)&v66))
  {
    int v50 = malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
    if (v50)
    {
      BOOL v51 = v50;
      SLSeek(v65, 0, 0);
      while (!SLFRead(v65, 1024, v51, (unsigned int *)&v63))
      {
        if (v63 >= 1)
        {
          uint64_t result = SLFWrite(a4, v63, v51, (unsigned int *)&v69 + 1);
          if (result == 8) {
            return result;
          }
          if (HIDWORD(v69) != v63) {
            return 8;
          }
          if (HIDWORD(v69) == 1024) {
            continue;
          }
        }
        if ((v64 & 0x80000000) == 0)
        {
          SLClose(v64);
          int v64 = -2;
        }
        SLClose(v65);
        int v65 = -2;
        SLremove();
        free(v51);
        free(v62);
        free(__s);
        free(__s1);
        free(__s2);
        free(v52);
        free(v15);
        return 0;
      }
    }
  }
  return 8;
}

uint64_t output_counts(FILE **a1, unsigned __int16 *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  while (1)
  {
    int v6 = *v5;
    v5 += 4;
    if (v6) {
      break;
    }
    if (++v4 == 256) {
      return 8 * (putc(0, *a1) != 0);
    }
  }
  LODWORD(v7) = (__int16)v4;
  if ((__int16)v4 > 255) {
    return 8 * (putc(0, *a1) != 0);
  }
  while (1)
  {
    LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = v7;
    int v9 = (__int16)v7;
    uint64_t v7 = (v7 + 1);
    while (1)
    {
      if ((__int16)v7 > 255)
      {
LABEL_19:
        __int16 v14 = v7 - 1;
        int v15 = (unsigned __int16)(v7 - 1);
        goto LABEL_20;
      }
      uint64_t v10 = (__int16)v7;
      uint64_t v11 = v7 << 48;
      unsigned int v12 = &a2[4 * (__int16)v7];
      while (1)
      {
        int v13 = *v12;
        v12 += 4;
        if (!v13) {
          break;
        }
        ++v10;
        v11 += 0x1000000000000;
        LOWORD(v7) = v7 + 1;
        if (v10 == 256)
        {
          LODWORD(v7) = 256;
          goto LABEL_19;
        }
      }
      __int16 v14 = v10 - 1;
      int v15 = (__int16)(v10 - 1);
      if ((__int16)v10 > 255) {
        break;
      }
      int v16 = &a2[4 * (__int16)v7];
      uint64_t v7 = v11 >> 48;
      while (1)
      {
        int v17 = *v16;
        v16 += 4;
        if (v17) {
          break;
        }
        if (++v7 == 256) {
          goto LABEL_20;
        }
      }
      if ((__int16)v7 - v15 >= 4) {
        goto LABEL_20;
      }
    }
    LODWORD(v7) = (__int16)v10;
LABEL_20:
    if (putc(v9, *a1) != v9 || putc(v15, *a1) != v15) {
      return 8;
    }
    if (v9 <= v14)
    {
      while (putc(a2[4 * (__int16)v8], *a1) == (__int16)a2[4 * (__int16)v8])
      {
        int v8 = (__int16)(v8 + 1);
        if (v8 > v14) {
          goto LABEL_25;
        }
      }
      return 8;
    }
LABEL_25:
    if ((__int16)v7 > 255) {
      return 8 * (putc(0, *a1) != 0);
    }
  }
}

_DWORD *scale_counts(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint32x4_t v3 = 0uLL;
  do
  {
    uint32x4_t v3 = vmaxq_u32(*(uint32x4_t *)&result[v2], v3);
    v2 += 4;
  }
  while (v2 != 256);
  unsigned int v4 = vmaxvq_u32(v3);
  if (!v4)
  {
    unsigned int v4 = 1;
    *uint64_t result = 1;
  }
  unint64_t v5 = 0;
  unsigned int v6 = v4 / 0xFF + 1;
  do
  {
    unsigned int v7 = result[v5 / 4];
    if ((unsigned __int16)(v7 / v6)) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v7 == 0;
    }
    if (v8) {
      __int16 v9 = v7 / v6;
    }
    else {
      __int16 v9 = 1;
    }
    *(_WORD *)(a2 + 2 * v5) = v9;
    v5 += 4;
  }
  while (v5 != 1024);
  *(_WORD *)(a2 + 204_Block_object_dispose(&STACK[0x510], 8) = 1;
  return result;
}

uint64_t convert_tree_to_code(uint64_t result, uint64_t a2, int a3, __int16 a4, int a5)
{
  int v6 = a3;
  if (a5 >= 257)
  {
    uint64_t v9 = result;
    do
    {
      ++a4;
      uint64_t v10 = v9 + 8 * (unsigned __int16)a5;
      uint64_t result = convert_tree_to_code(v9, a2, 2 * (v6 & 0x7FFFu), a4, *(__int16 *)(v10 + 4));
      __int16 v8 = (2 * v6) | 1;
      a5 = *(__int16 *)(v10 + 6);
      int v6 = (2 * v6) | 1;
    }
    while (a5 >= 257);
  }
  else
  {
    __int16 v8 = a3;
  }
  uint64_t v11 = (_WORD *)(a2 + 4 * a5);
  *uint64_t v11 = v8;
  v11[1] = a4;
  return result;
}

uint64_t compress_buffer(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v8 = 0;
  *(_WORD *)(a3 + _Block_object_dispose(&STACK[0x510], 8) = 2;
  *(_WORD *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 10) = 0x80;
  **(unsigned char **)a3 = BYTE1(a2);
  *(unsigned char *)(*(void *)a3 + 1) = a2;
  do
  {
    uint64_t v9 = (unsigned __int16 *)(a4 + 4 * *(unsigned __int8 *)(a1 + (unsigned __int16)v8));
    OutputsBuffer((uint64_t *)a3, *v9, (__int16)v9[1]);
    ++v8;
  }
  while (a2 >= (unsigned __int16)v8);
  OutputsBuffer((uint64_t *)a3, *(unsigned __int16 *)(a4 + 1024), *(__int16 *)(a4 + 1026));
  return *(unsigned __int16 *)(a3 + 8);
}

uint64_t *OutputsBuffer(uint64_t *result, int a2, int a3)
{
  if ((a3 - 1) <= 0x1F)
  {
    uint64_t v3 = 1 << (a3 - 1);
    unsigned __int16 v4 = *((unsigned __int8 *)result + 10);
    do
    {
      if ((v3 & a2) != 0) {
        *((_WORD *)result + 6) |= v4;
      }
      unsigned int v5 = v4;
      v4 >>= 1;
      *((unsigned char *)result + 10) = v4;
      if (v5 <= 1)
      {
        char v6 = *((unsigned char *)result + 12);
        uint64_t v7 = *result;
        uint64_t v8 = *((unsigned __int16 *)result + 4);
        *((_WORD *)result + 4) = v8 + 1;
        *(unsigned char *)(v7 + v_Block_object_dispose(&STACK[0x510], 8) = v6;
        *((_WORD *)result + 6) = 0;
        unsigned __int16 v4 = 128;
        *((unsigned char *)result + 10) = 0x80;
      }
      BOOL v9 = v3 > 1;
      LODWORD(v3) = v3 >> 1;
    }
    while (v9);
  }
  return result;
}

_WORD *OpenOutputBitFile()
{
  unsigned __int16 v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405AD1273CuLL);
  if (v0)
  {
    uint64_t v1 = (char *)malloc_type_malloc(0x101uLL, 0x100004077774924uLL);
    if (v1)
    {
      uint64_t v2 = v1;
      __strcpy_chk();
      __strcat_chk();
      *(void *)unsigned __int16 v0 = fopen(v2, "wb");
      free(v2);
      v0[5] = 0;
      *((unsigned char *)v0 + _Block_object_dispose(&STACK[0x510], 8) = 0x80;
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

void CloseOutputBuffer(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 10) != 128)
  {
    char v2 = *(unsigned char *)(a1 + 12);
    uint64_t v3 = *(unsigned char **)a1;
    uint64_t v4 = *(unsigned __int16 *)(a1 + 8);
    *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = v4 + 1;
    v3[v4] = v2;
  }
  free(*(void **)a1);
  free((void *)a1);
}

uint64_t CloseOutputBitFile(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) != 128 && putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10)) {
    return 8;
  }
  fclose(*(FILE **)a1);
  free((void *)a1);
  return 0;
}

uint64_t OutputBit(uint64_t a1, int a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (a2) {
    *(_WORD *)(a1 + 10) |= v3;
  }
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = v3 >> 1;
  if (v3 > 1) {
    return 0;
  }
  if (putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10)) {
    return 8;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 10) = 0;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 0x80;
  return result;
}

uint64_t OutputBits(uint64_t a1, int a2, int a3)
{
  if ((a3 - 1) > 0x1F) {
    return 0;
  }
  uint64_t v6 = 1 << (a3 - 1);
  unsigned __int16 v7 = *(unsigned __int8 *)(a1 + 8);
  while (1)
  {
    if ((v6 & a2) != 0) {
      *(_WORD *)(a1 + 10) |= v7;
    }
    unsigned int v8 = v7;
    v7 >>= 1;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = v7;
    if (v8 > 1) {
      goto LABEL_9;
    }
    if (putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10)) {
      return 8;
    }
    *(_WORD *)(a1 + 10) = 0;
    unsigned __int16 v7 = 128;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 0x80;
LABEL_9:
    BOOL v9 = v6 > 1;
    LODWORD(v6) = v6 >> 1;
    if (!v9) {
      return 0;
    }
  }
}

uint64_t input_counts(FILE **a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 2048; i += 8)
    *(_WORD *)(a2 + i) = 0;
  __int16 v5 = getc(*a1);
  if (v5 != -1)
  {
    __int16 v6 = v5;
    __int16 v7 = getc(*a1);
    if (v7 != -1)
    {
      __int16 v9 = v7;
      while (1)
      {
        int v10 = v9;
        while (v10 >= v6)
        {
          __int16 v11 = getc(*a1);
          if (v11 == -1) {
            return 8;
          }
          *(_WORD *)(a2 + 8 * v6++) = v11;
        }
        int v12 = getc(*a1);
        if (v12 << 16 == -65536) {
          break;
        }
        if (!(v12 << 16))
        {
          uint64_t result = 0;
          *(_WORD *)(a2 + 204_Block_object_dispose(&STACK[0x510], 8) = 1;
          return result;
        }
        __int16 v6 = v12;
        __int16 v9 = getc(*a1);
        uint64_t result = 8;
        if (v9 == -1) {
          return result;
        }
      }
    }
  }
  return 8;
}

_WORD *OpenInputBitFile(const char *a1)
{
  char v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405AD1273CuLL);
  if (v2)
  {
    unsigned int v3 = fopen(a1, "rb");
    *(void *)char v2 = v3;
    if (v3)
    {
      v2[5] = 0;
      *((unsigned char *)v2 + _Block_object_dispose(&STACK[0x510], 8) = 0x80;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CloseInputBitFile(FILE **a1)
{
  fclose(*a1);
  free(a1);
}

uint64_t expand_data(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  int v9 = 0;
  *((_WORD *)a1 + 4) = 2;
  *((_WORD *)a1 + 6) = 0;
  *((unsigned char *)a1 + 10) = 0x80;
  unsigned int v10 = bswap32(**a1) >> 16;
  do
  {
    int v11 = v9;
    LOWORD(v12) = a5;
    do
    {
      BOOL v13 = InputBit((uint64_t *)a1);
      uint64_t v14 = a4 + 8 * (__int16)v12;
      int v15 = (__int16 *)(v14 + 6);
      int v16 = (__int16 *)(v14 + 4);
      if (v13) {
        int v16 = v15;
      }
      int v12 = *v16;
    }
    while (v12 > 255);
    int v9 = v11 + 1;
    *(unsigned char *)(a3 + (unsigned __int16)v11) = v12;
  }
  while (v10 >= (unsigned __int16)(v11 + 1));
  return (unsigned __int16)v11;
}

BOOL InputBit(uint64_t *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 10);
  if (v1 == 128)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *((unsigned __int16 *)a1 + 4);
    *((_WORD *)a1 + 4) = v3 + 1;
    int v4 = *(unsigned __int8 *)(v2 + v3);
    *((_WORD *)a1 + 6) = v4;
  }
  else
  {
    int v4 = *((unsigned __int16 *)a1 + 6);
  }
  unsigned int v5 = v1 >> 1;
  if (v1 < 2) {
    LOBYTE(v5) = 0x80;
  }
  *((unsigned char *)a1 + 10) = v5;
  return (v4 & v1) != 0;
}

char *PDstrrev(char *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = strlen(a1);
  if (v2)
  {
    uint64_t v3 = __src;
    uint64_t v4 = v2;
    do
      *v3++ = a1[--v4];
    while (v4);
  }
  __src[v2] = 0;
  return strcpy(a1, __src);
}

uint64_t sddiff(uint64_t a1, uint64_t a2)
{
  int v2 = 0;
  do
  {
    unsigned __int8 v3 = v2;
    int v4 = *(unsigned __int8 *)(a1 + (__int16)v2);
    int v5 = *(unsigned __int8 *)(a2 + (__int16)v2++);
    if (v4) {
      BOOL v6 = v4 == v5;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  return v3;
}

uint64_t StartDb(uint64_t a1, int a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x850uLL, 0x1090040FF1BFF1AuLL);
  if (!v4)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      return 0;
    }
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 2584) = 8;
    *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = 1030;
    return v5;
  }
  uint64_t v5 = (uint64_t)v4;
  v4[1032] = *(_WORD *)(a1 + 2582);
  if (a2 == 2)
  {
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    char v8 = *(unsigned char *)(a1 + 1552);
    *(unsigned char *)(v5 + 784) = v8;
    *(unsigned char *)(v5 + 785) = v8;
    *(_DWORD *)(v5 + 776) = *(_DWORD *)(a1 + 1544);
    uint64_t v7 = (_DWORD *)(a1 + 1548);
  }
  else
  {
    if (a2 != 1) {
      goto LABEL_10;
    }
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    char v6 = *(unsigned char *)(a1 + 776);
    *(unsigned char *)(v5 + 784) = v6;
    *(unsigned char *)(v5 + 785) = v6;
    *(_DWORD *)(v5 + 776) = *(_DWORD *)(a1 + 768);
    uint64_t v7 = (_DWORD *)(a1 + 772);
  }
  *(_DWORD *)(v5 + 780) = *v7;
LABEL_10:
  *(_WORD *)(v5 + 207_Block_object_dispose(&STACK[0x510], 8) = *(_WORD *)(a1 + 2577);
  *(_DWORD *)(v5 + 772) = -2;
  *(_WORD *)(v5 + 76_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(_WORD *)(v5 + 2076) = 0;
  int v9 = PDdb(v5, 1);
  uint64_t v10 = *(void *)(v5 + 2120);
  long long v11 = *(_OWORD *)(v5 + 2104);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)(v5 + 2088);
  *(_OWORD *)(a1 + 2600) = v11;
  *(void *)(a1 + 2616) = v10;
  if (v9 == 8)
  {
    free((void *)v5);
    return 0;
  }
  return v5;
}

uint64_t StartWord(void *a1, uint64_t a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
    v5[1] = v6;
    if (v6)
    {
      uint64_t v7 = malloc_type_calloc(0x14uLL, 8uLL, 0x10040436913F5uLL);
      v5[13] = v7;
      if (v7)
      {
        uint64_t v8 = 0;
        while (1)
        {
          int v9 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
          *(void *)(v5[13] + v_Block_object_dispose(&STACK[0x510], 8) = v9;
          if (!v9) {
            break;
          }
          v8 += 8;
          if (v8 == 160)
          {
            *((_WORD *)v5 + 1) = *(_WORD *)(a2 + 2064);
            *(_WORD *)uint64_t v5 = *(_WORD *)(a2 + 2074);
            *((unsigned char *)v5 + 42) = 0;
            *((_DWORD *)v5 + 9) = 0xFFFF;
            uint64_t result = PDword((unsigned __int16 *)v5, 8u, 1);
            if (result == 8)
            {
              long long v11 = *((_OWORD *)v5 + 7);
              long long v12 = *((_OWORD *)v5 + 8);
              *(void *)(a2 + 2120) = v5[18];
              *(_OWORD *)(a2 + 208_Block_object_dispose(&STACK[0x510], 8) = v11;
              *(_OWORD *)(a2 + 2104) = v12;
            }
            else
            {
              uint64_t result = 0;
              *a1 = v5;
            }
            return result;
          }
        }
      }
    }
  }
  if (*(_WORD *)(a2 + 2092) && *(int *)(a2 + 2088) > 7) {
    return 8;
  }
  uint64_t result = 8;
  *(_DWORD *)(a2 + 208_Block_object_dispose(&STACK[0x510], 8) = 8;
  *(_WORD *)(a2 + 2092) = 1030;
  return result;
}

uint64_t PDWriteRDHead(unsigned __int8 *a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v26 = 0;
  qmemcpy(__buf, "#HEADER START#2#", 16);
  __int16 v2 = PDitoa(*a1, (uint64_t)__src);
  __strncpy_chk();
  unsigned __int16 v3 = v2 + 17;
  *((unsigned char *)__buf + (unsigned __int16)(v2 + 16)) = 35;
  unsigned int v4 = PDitoa(a1[8], (uint64_t)__src);
  strncpy((char *)__buf + v3, __src, v4);
  unsigned __int16 v5 = v4 + v3;
  unsigned __int16 v6 = v4 + v3 + 1;
  *((unsigned char *)__buf + v5) = 35;
  unsigned int v7 = PDitoa(a1[9], (uint64_t)__src);
  strncpy((char *)__buf + v6, __src, v7);
  *((unsigned char *)__buf + (unsigned __int16)(v7 + v6)) = 35;
  *((unsigned char *)__buf + (unsigned __int16)(v7 + v6 + 1)) = a1[1];
  unsigned __int16 v8 = v7 + v6 + 2;
  unsigned __int16 v9 = v7 + v6 + 3;
  *((unsigned char *)__buf + v_Block_object_dispose(&STACK[0x510], 8) = 35;
  unsigned int v10 = PDitoa(*((unsigned __int16 *)a1 + 5), (uint64_t)__src);
  strncpy((char *)__buf + v9, __src, v10);
  unsigned __int16 v11 = v10 + v9;
  unsigned __int16 v12 = v10 + v9 + 1;
  *((unsigned char *)__buf + v11) = 35;
  unsigned int v13 = PDitoa((unsigned __int16)(char)a1[7], (uint64_t)__src);
  strncpy((char *)__buf + v12, __src, v13);
  unsigned __int16 v14 = v13 + v12;
  unsigned __int16 v15 = v13 + v12 + 1;
  *((unsigned char *)__buf + v14) = 35;
  unsigned int v16 = PDitoa(a1[6], (uint64_t)__src);
  strncpy((char *)__buf + v15, __src, v16);
  unsigned __int16 v17 = v16 + v15;
  unsigned __int16 v18 = v16 + v15 + 1;
  *((unsigned char *)__buf + v17) = 35;
  unsigned int v19 = PDitoa(*((unsigned __int16 *)a1 + 2), (uint64_t)__src);
  strncpy((char *)__buf + v18, __src, v19);
  unsigned __int16 v20 = v19 + v18;
  unsigned __int16 v21 = v19 + v18 + 1;
  *((unsigned char *)__buf + v20) = 35;
  unsigned int v22 = PDitoa(a1[2], (uint64_t)__src);
  LOWORD(v19) = v22;
  strncpy((char *)__buf + v21, __src, v22);
  *((unsigned char *)__buf + (unsigned __int16)(v19 + v21)) = 35;
  BOOL v23 = (char *)__buf + (unsigned __int16)(v19 + v21 + 1);
  *(_DWORD *)(v23 + 7) = 591679045;
  *(void *)BOOL v23 = *(void *)"HEADER END#";
  *((unsigned char *)__buf + (unsigned __int16)(v19 + v21 + 12)) = 13;
  *((unsigned char *)__buf + (unsigned __int16)(v19 + v21 + 13)) = 10;
  int v24 = SLFWrite(*((_DWORD *)a1 + 3), (unsigned __int16)(v19 + v21 + 14), __buf, &v26);
  uint64_t result = 0;
  if (v24 == 8)
  {
    SLClose(*((_DWORD *)a1 + 3));
    *((_DWORD *)a1 + 3) = -2;
    return 8;
  }
  return result;
}

char *FillHeadStr(unsigned int a1, uint64_t a2, _WORD *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v5 = PDitoa(a1, (uint64_t)v9);
  __int16 v6 = v5;
  uint64_t result = strncpy((char *)(a2 + (unsigned __int16)*a3), v9, v5);
  unsigned __int16 v8 = *a3 + v6;
  *a3 = v8 + 1;
  *(unsigned char *)(a2 + v_Block_object_dispose(&STACK[0x510], 8) = 35;
  return result;
}

uint64_t PDWriteOldRDHead(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v14 = 0;
  qmemcpy(__buf, "#HEADER START#1#", 16);
  __int16 v4 = PDitoa(*a1, (uint64_t)__src);
  __strncpy_chk();
  unsigned __int16 v5 = v4 + 17;
  *((unsigned char *)__buf + (unsigned __int16)(v4 + 16)) = 35;
  unsigned int v6 = PDitoa(0, (uint64_t)__src);
  strncpy((char *)__buf + v5, __src, v6);
  unsigned __int16 v7 = v6 + v5;
  unsigned __int16 v8 = v6 + v5 + 1;
  *((unsigned char *)__buf + v7) = 35;
  unsigned int v9 = PDitoa(0, (uint64_t)__src);
  strncpy((char *)__buf + v8, __src, v9);
  *((unsigned char *)__buf + (unsigned __int16)(v9 + v8)) = 35;
  *((unsigned char *)__buf + (unsigned __int16)(v9 + v8 + 1)) = a1[1];
  *((unsigned char *)__buf + (unsigned __int16)(v9 + v8 + 2)) = 35;
  uint64_t v10 = (char *)__buf + (unsigned __int16)(v9 + v8 + 3);
  *(void *)uint64_t v10 = *(void *)"HEADER END#";
  *(_DWORD *)(v10 + 7) = 591679045;
  unsigned __int16 v11 = v9 + v8 + 15;
  *((unsigned char *)__buf + (unsigned __int16)(v9 + v8 + 14)) = 13;
  unsigned __int16 v12 = v9 + v8 + 16;
  *((unsigned char *)__buf + v11) = 10;
  if (SLFWrite(*((_DWORD *)a1 + 3), v12, __buf, &v14) == 8)
  {
    SLClose(*((_DWORD *)a1 + 3));
    *((_DWORD *)a1 + 3) = -2;
    return 8;
  }
  else
  {
    uint64_t result = 0;
    *a2 = v12;
  }
  return result;
}

uint64_t BuildEntry(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v7 = *a1;
  unsigned int v6 = (char *)a1[1];
  uint64_t v8 = **(void **)(*a1 + 104);
  *unsigned int v6 = 35;
  __int16 v9 = strlen((const char *)v8);
  *((_WORD *)a1 + 9) = v9;
  if (*(unsigned char *)(v8 + 71)) {
    SLrecap((unsigned __int8 *)v8, v9, *(unsigned __int8 *)(v8 + 71), v8 + 80, *(unsigned __int8 *)(v8 + 71), a3);
  }
  if (SLchcnv((char *)v8, v9, (unsigned __int8 *)v8, 0, *(unsigned __int8 *)(v8 + 72)) == 8)
  {
    if (!*(_WORD *)(v7 + 116) || *(int *)(v7 + 112) <= 7)
    {
      *(_DWORD *)(v7 + 112) = 8;
      *(_WORD *)(v7 + 116) = 1120;
    }
    SLClose(a2);
    free(v6);
    return 8;
  }
  else
  {
    if (*(_DWORD *)(v8 + 88)) {
      __int16 v9 = PDhypins((char *)v8, (uint64_t *)(v8 + 88), *((unsigned __int8 *)a1 + 22));
    }
    strcpy(v6 + 1, (const char *)v8);
    v6[(unsigned __int16)(v9 + 1)] = 35;
    if (*(unsigned char *)(v8 + 70)) {
      char v11 = 49;
    }
    else {
      char v11 = 48;
    }
    unsigned __int16 v12 = v9 + 3;
    v6[(unsigned __int16)(v9 + 2)] = v11;
    if (*((_WORD *)a1 + 10))
    {
      uint64_t v13 = 0;
      unsigned __int16 v14 = v9 + 4;
      v6[v12] = 35;
      do
      {
        snprintf(__str, 3uLL, "%02X", *(unsigned __int8 *)(v8 + 102 + v13));
        unsigned __int16 v15 = v14 + 1;
        v6[v14] = __str[0];
        v14 += 2;
        v6[v15] = __str[1];
        ++v13;
      }
      while (v13 != 12);
    }
    else
    {
      unsigned __int16 v14 = v9 + 3;
    }
    uint64_t result = 0;
    *((_WORD *)a1 + _Block_object_dispose(&STACK[0x510], 8) = v14;
  }
  return result;
}

uint64_t AltAndWrite(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v19 = 0;
  uint64_t v6 = *(unsigned __int16 *)(a2 + 16);
  uint64_t v7 = *(_DWORD **)a2;
  uint64_t v8 = *(unsigned char **)(a2 + 8);
  uint64_t v9 = **(void **)(*(void *)a2 + 104);
  if (!*(unsigned char *)v9 || !*(_WORD *)(v9 + 100)) {
    goto LABEL_10;
  }
  v8[v6] = 35;
  *(_DWORD *)a3 = *v7;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v9 + 96);
  *(_WORD *)(a3 + 16) = *(_WORD *)(v9 + 100);
  if (PDalt((unsigned __int16 *)a3) != 8)
  {
    int v13 = *(__int16 *)(a3 + 16);
    unsigned __int16 v14 = *(char **)(a3 + 8);
    if (SLchcnv(v14, v13, (unsigned __int8 *)v14, 0, *(unsigned __int8 *)(v9 + 72)) == 8)
    {
      if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 2584) = 8;
      __int16 v15 = 1120;
LABEL_14:
      *(_WORD *)(a1 + 258_Block_object_dispose(&STACK[0x510], 8) = v15;
LABEL_15:
      SLClose(a4);
      return 8;
    }
    unsigned __int16 v16 = v6 + 1;
    strncpy(&v8[v16], v14, v13);
    LOWORD(v6) = v13 + v16;
LABEL_10:
    v8[(unsigned __int16)v6] = 13;
    v8[(unsigned __int16)(v6 + 1)] = 10;
    v8[(unsigned __int16)(v6 + 2)] = 0;
    int v17 = SLFWrite(a4, (unsigned __int16)(v6 + 2), v8, &v19);
    uint64_t result = 0;
    if (v17 != 8) {
      return result;
    }
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7) {
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 2584) = 8;
    __int16 v15 = 1011;
    goto LABEL_14;
  }
  SLClose(a4);
  uint64_t v11 = *(void *)(a3 + 56);
  long long v12 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 2600) = v12;
  *(void *)(a1 + 2616) = v11;
  return 8;
}

uint64_t GetBuildWord(uint64_t a1, unsigned __int16 **a2, unsigned char *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10 = *a2;
  uint64_t result = PDword(*a2, 8u, 5);
  if (result == 8)
  {
    long long v12 = *((_OWORD *)v10 + 7);
    long long v13 = *((_OWORD *)v10 + 8);
    *(void *)(a1 + 2616) = *((void *)v10 + 18);
    *(_OWORD *)(a1 + 2584) = v12;
    *(_OWORD *)(a1 + 2600) = v13;
  }
  else if ((v10[58] & 0xFFFE) == 0x13F8)
  {
    uint64_t result = PDword(v10, 8u, 2);
    if (result == 8)
    {
      long long v14 = *((_OWORD *)v10 + 7);
      long long v15 = *((_OWORD *)v10 + 8);
      *(void *)(a1 + 2616) = *((void *)v10 + 18);
      *(_OWORD *)(a1 + 2584) = v14;
      *(_OWORD *)(a1 + 2600) = v15;
    }
    else
    {
      *a3 = 0;
      BuildEntry((uint64_t *)a2, a4, a5);
      return 5113;
    }
  }
  else
  {
    uint64_t result = BuildEntry((uint64_t *)a2, a4, a5);
    if (result != 8)
    {
      uint64_t result = 0;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t PDGets(unsigned __int8 *__dst, int a2, int *a3, unsigned int a4)
{
  int v19 = 0;
  if (SLFRead(a4, a2, __dst, (unsigned int *)&v19) == 8 || v19 == 0) {
    return 8;
  }
  if (v19 < 1)
  {
    signed int v13 = 0;
    LOWORD(v10) = -1;
  }
  else
  {
    uint64_t v10 = 0;
    while (1)
    {
      int v11 = __dst[v10];
      if (v11 == 13 || v11 == 10) {
        break;
      }
      if (v19 == ++v10)
      {
        LOWORD(v10) = -1;
        signed int v13 = v19;
        goto LABEL_28;
      }
    }
    if (v19 <= (int)v10) {
      signed int v13 = v10;
    }
    else {
      signed int v13 = v19;
    }
    if (v19 <= (int)v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v19;
    }
    uint64_t v15 = v10;
    while (v11 <= 0xDu && ((1 << v11) & 0x2401) != 0)
    {
      if (v14 == v15) {
        goto LABEL_28;
      }
      LOBYTE(v11) = __dst[++v15];
    }
    signed int v13 = v15;
  }
LABEL_28:
  int v16 = *a3 + v13;
  *a3 = v16;
  SLSeek(a4, v16, 0);
  if ((_WORD)v10 == 0xFFFF)
  {
    unsigned __int16 v18 = &__dst[v13];
  }
  else
  {
    uint64_t v17 = (__int16)v10 + 2;
    unsigned __int16 v18 = &__dst[(__int16)v10];
    if ((int)v17 <= a2)
    {
      *unsigned __int16 v18 = 13;
      __dst[(__int16)v10 + 1] = 10;
      unsigned __int16 v18 = &__dst[v17];
    }
  }
  uint64_t result = 0;
  *unsigned __int16 v18 = 0;
  return result;
}

uint64_t GetOldSDWord(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = PDword((unsigned __int16 *)a2, 8u, 5);
  if (result == 8)
  {
    long long v7 = *(_OWORD *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 2616) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 2584) = v7;
    *(_OWORD *)(a1 + 2600) = v8;
  }
  else if ((*(_WORD *)(a2 + 116) & 0xFFFE) == 0x13F8)
  {
    uint64_t result = PDword((unsigned __int16 *)a2, 8u, 2);
    if (result == 8)
    {
      long long v9 = *(_OWORD *)(a2 + 112);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 2616) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 2584) = v9;
      *(_OWORD *)(a1 + 2600) = v10;
    }
    else
    {
      *a3 = 0;
      return 5113;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t BuildForm(char *a1, unsigned char *a2, unsigned int a3, unsigned __int16 *a4, unsigned char *a5)
{
  long long v10 = (char *)malloc_type_malloc(0x881uLL, 0x8BD3820uLL);
  if (!v10) {
    return 8;
  }
  int v11 = v10;
  long long v12 = malloc_type_malloc(0x19uLL, 0x98D6A96EuLL);
  if (!v12) {
    return 8;
  }
  signed int v13 = v12;
  uint64_t v14 = (char *)malloc_type_malloc(0x801uLL, 0x5F778A4FuLL);
  if (!v14) {
    return 8;
  }
  uint64_t v15 = v14;
  if (*a1 != 35)
  {
    __strcpy_chk();
    *(_WORD *)a1 = 35;
    strcat(a1, v11);
  }
  char v32 = 0;
  __int16 v31 = 0;
  memset(v13, 48, 24);
  PDasparse(a1, (uint64_t)v11, &v32, a5, (uint64_t)v15, &v31, a3, (uint64_t)v13);
  *a2 = 35;
  char v16 = *v11;
  if (*v11)
  {
    uint64_t v17 = 0;
    LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
    do
    {
      a2[v17 + 1] = v16;
      LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = v18 + 1;
      uint64_t v17 = (__int16)v18;
      char v16 = v11[(__int16)v18];
    }
    while (v16);
    unsigned int v18 = v18;
  }
  else
  {
    unsigned int v18 = 0;
  }
  uint64_t v20 = v18;
  unsigned __int16 v21 = &a2[v18];
  v21[1] = 35;
  if (*a5) {
    char v22 = 49;
  }
  else {
    char v22 = 48;
  }
  uint64_t v23 = v18 + 3;
  v21[2] = v22;
  if (a3)
  {
    uint64_t v24 = 0;
    a2[v23] = 35;
    uint64_t v25 = v20 + 4;
    do
    {
      a2[v25 + v24] = *((unsigned char *)v13 + v24);
      ++v24;
    }
    while (v24 != 24);
    unsigned __int16 v26 = v25 + 24;
  }
  else
  {
    unsigned __int16 v26 = v20 + 3;
  }
  *a4 = v26;
  if (v32)
  {
    unsigned __int16 v27 = v26 + 1;
    a2[v26] = 35;
    char v28 = *v15;
    if (*v15)
    {
      uint64_t v29 = 0;
      __int16 v30 = 0;
      do
      {
        a2[v29 + v27] = v28;
        uint64_t v29 = ++v30;
        char v28 = v15[v30];
      }
      while (v28);
    }
    else
    {
      __int16 v30 = 0;
    }
    unsigned __int16 v26 = v30 + v27;
  }
  a2[v26] = 13;
  a2[(unsigned __int16)(v26 + 1)] = 10;
  a2[(unsigned __int16)(v26 + 2)] = 0;
  free(v13);
  free(v11);
  free(v15);
  return 0;
}

uint64_t Huffman_Comp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int a6, _WORD *a7, uint64_t a8)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v73 = -2;
  int v71 = -2;
  int v72 = -2;
  char v16 = malloc_type_malloc(0xC1uLL, 0xE199C62DuLL);
  if (!v16
    || (v17 = v16, (unsigned int v18 = malloc_type_malloc(0xFD00uLL, 0x2F1477D5uLL)) == 0)
    || (int v19 = v18, (v69 = malloc_type_calloc(0xFD00uLL, 1uLL, 0x100004077774924uLL)) == 0)
    || (uint64_t v68 = malloc_type_malloc(0x81uLL, 0x4A9FAB10uLL)) == 0)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)a8 = 8;
      __int16 v21 = 1030;
      goto LABEL_14;
    }
    return 8;
  }
  unsigned int v74 = 0;
  if (SLOpen(a1, a2, &v72, 0) == 8
    || SLOpen(a1, a3, &v71, 0x602u) == 8
    || SLOpen(a1, a4, (int *)&v73, 0x602u) == 8)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)a8 = 8;
      __int16 v21 = 1012;
LABEL_14:
      *(_WORD *)(a8 + 4) = v21;
      return result;
    }
    return 8;
  }
  *a7 = 0;
  char v22 = OpenOutputBuffer(a6);
  uint64_t v23 = OpenOutputBuffer(a6);
  LOWORD(v24) = 0;
  if (!SLFRead(v72, 8, __dst, &v74) && v74 == 8)
  {
    __int16 v25 = 0;
    int v24 = 0;
    unsigned __int16 v65 = 0;
    long long v26 = 0uLL;
    int v64 = v23;
    while (1)
    {
      unsigned int v66 = __dst[0];
      int v62 = __dst[1];
      int v27 = __dst[3] | __dst[2];
      __int16 v58 = __dst[5];
      __int16 v60 = __dst[4];
      char v56 = __dst[6];
      char v54 = __dst[7];
      *uint64_t v68 = v26;
      v68[1] = v26;
      v68[2] = v26;
      v68[3] = v26;
      v68[4] = v26;
      v68[5] = v26;
      v68[6] = v26;
      v68[7] = v26;
      *((unsigned char *)v68 + 12_Block_object_dispose(&STACK[0x510], 8) = 0;
      if (SLFRead(v72, v27, v68, &v74)) {
        break;
      }
      unsigned int v52 = v27;
      uint64_t v28 = v62 | v66;
      if (SLFRead(v72, v62 | v66, v17, &v74)) {
        break;
      }
      uint64_t v29 = (v54 | v56);
      int v30 = (v54 | v56);
      if (v52 >= 4) {
        uint64_t v31 = 4;
      }
      else {
        uint64_t v31 = v52;
      }
      uint64_t v61 = (unsigned __int16)(v52 - (v58 | v60));
      uint64_t v63 = v31;
      __int16 v57 = v28 + 2;
      unsigned int v59 = v30 + 1;
      int v55 = &v17[v29 + 1];
      uint64_t v53 = ~v29 + v28;
      char v32 = v64;
      uint64_t v33 = v28;
      for (i = v28; ; uint64_t v33 = i)
      {
        if (v25)
        {
          if (v33)
          {
            unsigned __int8 v34 = v17;
            uint64_t v23 = v32;
            do
            {
              char v35 = *v34++;
              uint64_t v36 = (unsigned __int16)v24++;
              v19[v36] = v35;
              --v33;
            }
            while (v33);
          }
          else
          {
            uint64_t v23 = v32;
          }
        }
        else
        {
          bzero(v19, 0xFD00uLL);
          __strncpy_chk();
          __s[v63] = 0;
          strlen(__s);
          __strncat_chk();
          int v37 = strlen(__s);
          if (SLFWrite(v71, v37, __s, &v74) == 8) {
            goto LABEL_64;
          }
          int v38 = v24 + 1;
          v19[(unsigned __int16)v24] = *v17 & 0xC0;
          uint64_t v39 = v61;
          if (v61)
          {
            unsigned int v41 = i;
            uint64_t v40 = (char *)v68;
            uint64_t v23 = v64;
            do
            {
              char v42 = *v40++;
              int v43 = v38 + 1;
              v19[(unsigned __int16)v38++] = v42;
              --v39;
            }
            while (v39);
          }
          else
          {
            int v43 = v24 + 1;
            uint64_t v23 = v64;
            unsigned int v41 = i;
          }
          if (v59 >= v41)
          {
            int v24 = v43;
          }
          else
          {
            uint64_t v44 = v53;
            int v45 = v55;
            do
            {
              char v46 = *v45++;
              int v24 = v43 + 1;
              v19[(unsigned __int16)v43++] = v46;
              --v44;
            }
            while (v44);
          }
          ++*a7;
          __int16 v25 = v57;
        }
        if (a6 >= (unsigned __int16)v24) {
          break;
        }
        compress_buffer((uint64_t)v19, (unsigned __int16)v24, (uint64_t)v23, (uint64_t)a5);
        if ((unsigned __int16)v23[4] < (unsigned __int16)(a6 - 2))
        {
          __memcpy_chk();
          unsigned __int16 v65 = v24;
          break;
        }
        v22[4] = 0;
        compress_buffer((uint64_t)v69, v65, (uint64_t)v22, (uint64_t)a5);
        LODWORD(v47) = (unsigned __int16)v22[4];
        if (v22[4])
        {
          unint64_t v48 = 0;
          do
          {
            v19[v48] = *(unsigned char *)(*(void *)v22 + v48);
            ++v48;
            unint64_t v47 = (unsigned __int16)v22[4];
          }
          while (v48 < v47);
        }
        if (v47 < a6) {
          memset(&v19[v47], 255, (unsigned __int16)(~(_WORD)v47 + a6) + 1);
        }
        if (SLFWrite(v73, a6, v19, &v74) == 8) {
          goto LABEL_64;
        }
        char v32 = v23;
        int v24 = 0;
        __int16 v25 = 0;
        v22[4] = 0;
      }
      *(unsigned char *)uint64_t v68 = 0;
      if (SLFRead(v72, 8, __dst, &v74)) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v74 == 8;
      }
      long long v26 = 0uLL;
      if (!v49) {
        goto LABEL_58;
      }
    }
    uint64_t v23 = v64;
  }
LABEL_58:
  free(v68);
  free(v69);
  free(v17);
  SLClose(v72);
  v22[4] = 0;
  compress_buffer((uint64_t)v19, (unsigned __int16)v24, (uint64_t)v22, (uint64_t)a5);
  free(a5);
  LODWORD(v50) = (unsigned __int16)v22[4];
  if (v22[4])
  {
    unint64_t v51 = 0;
    do
    {
      v19[v51] = *(unsigned char *)(*(void *)v22 + v51);
      ++v51;
      unint64_t v50 = (unsigned __int16)v22[4];
    }
    while (v51 < v50);
  }
  if (v50 < a6) {
    memset(&v19[v50], 255, (unsigned __int16)(~(_WORD)v50 + a6) + 1);
  }
  if (SLFWrite(v73, a6, v19, &v74) == 8)
  {
LABEL_64:
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)a8 = 8;
      __int16 v21 = 1011;
      goto LABEL_14;
    }
    return 8;
  }
  free(v19);
  CloseOutputBuffer((uint64_t)v23);
  CloseOutputBuffer((uint64_t)v22);
  SLClose(v71);
  SLClose(v73);
  return 0;
}

uint64_t Add_Tables(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t a8, uint64_t a9, void *__buf, uint64_t a11)
{
  int v27 = -2;
  int v28 = -2;
  unsigned int v26 = 0;
  if (SLOpen(a2, a3, &v27, 0x602u) != 8)
  {
    if (SLFWrite(v27, 1024, __buf, &v26) == 8)
    {
LABEL_3:
      if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)a11 = 8;
        __int16 v19 = 1011;
LABEL_10:
        *(_WORD *)(a11 + 4) = v19;
        return result;
      }
      return 8;
    }
    unsigned int v20 = v26;
    *((_DWORD *)__buf + 175) = bswap32(v26);
    if (SLOpen(a2, a4, &v28, 0) != 8)
    {
      __int16 v21 = malloc_type_malloc(0xFD00uLL, 0x1A7ADCE8uLL);
      if (v21)
      {
        char v22 = v21;
        while (SLFRead(v28, 64768, v22, &v26) != 8)
        {
          if (SLFWrite(v27, v26, v22, &v26) == 8) {
            goto LABEL_3;
          }
          v20 += v26;
          if (v26 != 64768)
          {
            SLClose(v28);
            int v28 = -2;
            *((unsigned char *)__buf + 70_Block_object_dispose(&STACK[0x510], 8) = HIBYTE(v20);
            *((unsigned char *)__buf + 709) = BYTE2(v20);
            *((unsigned char *)__buf + 710) = BYTE1(v20);
            *((unsigned char *)__buf + 711) = v20;
            if (SLOpen(a2, a5, &v28, 0) == 8) {
              goto LABEL_7;
            }
            unsigned int v23 = v20;
            while (1)
            {
              if (SLFRead(v28, 64768, v22, &v26) == 8) {
                goto LABEL_40;
              }
              if (SLFWrite(v27, v26, v22, &v26) == 8) {
                break;
              }
              v23 += v26;
              if (v26 != 64768)
              {
                SLClose(v28);
                int v28 = -2;
                *((unsigned char *)__buf + 716) = HIBYTE(v23);
                *((unsigned char *)__buf + 717) = BYTE2(v23);
                *((unsigned char *)__buf + 71_Block_object_dispose(&STACK[0x510], 8) = BYTE1(v23);
                *((unsigned char *)__buf + 719) = v23;
                *((unsigned char *)__buf + 512) = (unsigned __int16)(v23 - v20) >> 8;
                *((unsigned char *)__buf + 513) = v23 - v20;
                if (SLOpen(a2, a6, &v28, 0) == 8) {
                  goto LABEL_7;
                }
                unsigned int v24 = v23;
                while (SLFRead(v28, 64768, v22, &v26) != 8)
                {
                  if (SLFWrite(v27, v26, v22, &v26) == 8)
                  {
                    unsigned int v25 = v27;
                    goto LABEL_46;
                  }
                  v24 += v26;
                  if (v26 != 64768)
                  {
                    SLClose(v28);
                    int v28 = -2;
                    *((unsigned char *)__buf + 724) = HIBYTE(v24);
                    *((unsigned char *)__buf + 725) = BYTE2(v24);
                    *((unsigned char *)__buf + 726) = BYTE1(v24);
                    *((unsigned char *)__buf + 727) = v24;
                    *((unsigned char *)__buf + 490) = (unsigned __int16)(v24 - v23) >> 8;
                    *((unsigned char *)__buf + 491) = v24 - v23;
                    *a7 = 0;
                    *((unsigned char *)__buf + 732) = HIBYTE(v24);
                    *((unsigned char *)__buf + 733) = BYTE2(v24);
                    *((unsigned char *)__buf + 734) = BYTE1(v24);
                    *((unsigned char *)__buf + 735) = v24;
                    if (SLOpen(a2, a8, &v28, 0) == 8) {
                      goto LABEL_7;
                    }
                    while (SLFRead(v28, 64768, v22, &v26) != 8)
                    {
                      if (SLFWrite(v27, v26, v22, &v26) == 8) {
                        goto LABEL_45;
                      }
                      v24 += v26;
                      if (v26 != 64768)
                      {
                        SLClose(v28);
                        int v28 = -2;
                        *((unsigned char *)__buf + 740) = HIBYTE(v24);
                        *((unsigned char *)__buf + 741) = BYTE2(v24);
                        *((unsigned char *)__buf + 742) = BYTE1(v24);
                        *((unsigned char *)__buf + 743) = v24;
                        if (a1 != 1)
                        {
LABEL_36:
                          free(v22);
                          SLClose(v27);
                          return 0;
                        }
                        if (SLOpen(a2, a9, &v28, 0) == 8) {
                          goto LABEL_7;
                        }
                        while (SLFRead(v28, 64768, v22, &v26) != 8)
                        {
                          if (SLFWrite(v27, v26, v22, &v26) == 8) {
                            goto LABEL_3;
                          }
                          if (v26 != 64768)
                          {
                            SLClose(v28);
                            int v28 = -2;
                            goto LABEL_36;
                          }
                        }
                        goto LABEL_41;
                      }
                    }
                    goto LABEL_41;
                  }
                }
LABEL_40:
                SLClose(v28);
                goto LABEL_41;
              }
            }
LABEL_45:
            unsigned int v25 = v28;
LABEL_46:
            SLClose(v25);
            goto LABEL_3;
          }
        }
LABEL_41:
        if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
        {
          uint64_t result = 8;
          *(_DWORD *)a11 = 8;
          __int16 v19 = 1010;
          goto LABEL_10;
        }
      }
      else if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
      {
        uint64_t result = 8;
        *(_DWORD *)a11 = 8;
        __int16 v19 = 1030;
        goto LABEL_10;
      }
      return 8;
    }
  }
LABEL_7:
  if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
  {
    uint64_t result = 8;
    *(_DWORD *)a11 = 8;
    __int16 v19 = 1012;
    goto LABEL_10;
  }
  return 8;
}

uint64_t Update_Header(char a1, char a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  int v18 = -2;
  unsigned int v19 = 0;
  if (SLOpen(a5, a6, &v18, 2u) == 8)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)a8 = 8;
      __int16 v16 = 1012;
LABEL_9:
      *(_WORD *)(a8 + 4) = v16;
      return result;
    }
  }
  else
  {
    strcpy((char *)a7, "Copyright [c] 1998  L & H Inc.      \x1A");
    *(unsigned char *)(a7 + 37) = 26;
    strcpy((char *)(a7 + 414), "#HEADER COMP START");
    *(_WORD *)(a7 + 384) = 3072;
    *(unsigned char *)(a7 + 386) = 0;
    *(unsigned char *)(a7 + 387) = a2;
    *(_DWORD *)(a7 + 38_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(unsigned char *)(a7 + 392) = HIBYTE(a4);
    *(unsigned char *)(a7 + 393) = a4;
    *(_DWORD *)(a7 + 394) = 512;
    *(_WORD *)(a7 + 404) = 0;
    *(_WORD *)(a7 + 446) = 0;
    *(_WORD *)(a7 + 48_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_DWORD *)(a7 + 47_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(void *)(a7 + 492) = 0;
    *(_WORD *)(a7 + 500) = 1024;
    *(unsigned char *)(a7 + 502) = HIBYTE(a3);
    *(unsigned char *)(a7 + 503) = a3;
    *(_WORD *)(a7 + 504) = 0x8000;
    *(unsigned char *)(a7 + 74_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_DWORD *)(a7 + 506) = 0;
    *(_WORD *)(a7 + 510) = 0;
    *(void *)(a7 + 514) = 0;
    *(_DWORD *)(a7 + 522) = 0;
    *(unsigned char *)(a7 + 749) = a1;
    *(unsigned char *)(a7 + 756) = a9[5];
    *(unsigned char *)(a7 + 757) = a9[4];
    *(unsigned char *)(a7 + 76_Block_object_dispose(&STACK[0x510], 8) = (char)a9[6] >> 7;
    *(unsigned char *)(a7 + 769) = a9[6];
    *(unsigned char *)(a7 + 760) = 0;
    *(_WORD *)(a7 + 761) = a9[7];
    *(unsigned char *)(a7 + 763) = a9[8];
    int v17 = SLFWrite(v18, 1024, (void *)a7, &v19);
    uint64_t result = 0;
    if (v17 != 8) {
      return result;
    }
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      uint64_t result = 8;
      *(_DWORD *)a8 = 8;
      __int16 v16 = 1011;
      goto LABEL_9;
    }
  }
  return 8;
}

uint64_t isLowerCaseX(int a1, int a2)
{
  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280) {
      return (a1 - 97) < 0x1A;
    }
    BOOL v6 = (a1 - 154) < 5 && (a1 & 1) == 0;
    int v7 = (a1 - 223) < 0x18 || v6;
    if ((a1 - 97) >= 0x1A) {
      LODWORD(v5) = v7;
    }
    else {
      LODWORD(v5) = 1;
    }
    if (a1 <= 247) {
      return v5;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517) {
        return (a1 - 97) < 0x1A
      }
            || (a1 - 208) < 0x20
            || (a1 - 241) < 0xC
            || a1 > 253;
      return (a1 - 97) < 0x1A;
    }
    uint64_t v5 = 1;
    if ((a1 - 97) >= 0x1A
      && (a1 - 223) >= 0x18
      && ((a1 - 177) > 0xE || ((1 << (a1 + 79)) & 0x6F35) == 0))
    {
      return (a1 - 248) < 7;
    }
  }
  return v5;
}

uint64_t isAnyAlphaX_0(int a1, int a2)
{
  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280) {
      return (a1 & 0xFFFFFFDF) - 65 < 0x1A;
    }
    unsigned int v6 = (a1 & 0xFFFFFFDF) - 65;
    unsigned int v7 = a1 - 192;
    unsigned int v8 = a1 - 216;
    char v9 = a1 + 118;
    BOOL v10 = (a1 - 138) >= 0x16;
    unsigned int v11 = 3473429;
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517)
      {
        BOOL v3 = (a1 - 241) < 0xC || (a1 & 0xFFFFFFFE) == 254;
        unsigned int v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || v3;
        if ((a1 - 161) < 0xC) {
          unsigned int v4 = 1;
        }
        if ((a1 - 174) >= 0x42) {
          return v4;
        }
        else {
          return 1;
        }
      }
      return (a1 & 0xFFFFFFDF) - 65 < 0x1A;
    }
    unsigned int v6 = (a1 & 0xFFFFFFDF) - 65;
    unsigned int v7 = a1 - 192;
    unsigned int v8 = a1 - 216;
    char v9 = a1 + 95;
    BOOL v10 = (a1 - 161) >= 0x1F;
    unsigned int v11 = 1865772853;
  }
  int v12 = (v11 >> v9) & 1;
  if (v10) {
    int v12 = 0;
  }
  if (v6 >= 0x1A) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v7 < 0x17) {
    unsigned int v13 = 1;
  }
  if (v8 < 0x1F) {
    unsigned int v13 = 1;
  }
  if (a1 <= 247) {
    return v13;
  }
  else {
    return 1;
  }
}

uint64_t toLowerX_0(uint64_t result, int a2)
{
  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      if ((result - 65) >= 0x1A
        && (result - 192) >= 0x17
        && ((result - 161) > 0x3D || ((1 << (result + 95)) & 0x3F80000000006F35) == 0))
      {
        return result;
      }
      if (result - 161) < 0xF && ((0x6F35u >> (result + 95))) {
        return dword_20CC64DE0[(int)result - 161];
      }
      return (result + 32);
    }
    if (a2 == 517)
    {
      if ((result - 65) >= 0x1A && (result - 176) > 0x1F)
      {
        if ((result & 0xFFFFFFFE) != 0xAE && (result - 161) >= 0xC) {
          return result;
        }
        else {
          return (result + 80);
        }
      }
      return (result + 32);
    }
LABEL_32:
    if ((result - 65) >= 0x1A) {
      return result;
    }
    else {
      return (result + 32);
    }
  }
  if (a2 != 1284)
  {
    if (a2 != 1280) {
      goto LABEL_32;
    }
    if ((result - 65) >= 0x1A && (result - 192) >= 0x17)
    {
      if ((result - 216) < 7) {
        return (result + 32);
      }
      goto LABEL_44;
    }
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0) {
      return (result + 32);
    }
LABEL_46:
    if (result == 159) {
      return 255;
    }
    else {
      return (result + 16);
    }
  }
  if ((result - 65) < 0x1A || (result - 192) < 0x17)
  {
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
    {
      if (result == 73) {
        return 253;
      }
      return (result + 32);
    }
    goto LABEL_46;
  }
  if ((int)result <= 215)
  {
LABEL_44:
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0) {
      return result;
    }
    goto LABEL_46;
  }
  if ((result - 216) < 5) {
    return (result + 32);
  }
  if (result == 221) {
    return 105;
  }
  if (result == 222) {
    return (result + 32);
  }
  return result;
}

void sub_20CC07D00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_20CC08EE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Unwind_Resume(a1);
}

uint64_t PDExtSort(unsigned int a1, int a2, unsigned int a3, int a4, int a5, unsigned char *a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  __int16 v90 = 0;
  int v18 = (char *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v18) {
    return 1030;
  }
  unsigned int v19 = v18;
  unsigned int v20 = (unsigned __int8 *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v20) {
    return 1030;
  }
  __int16 v21 = v20;
  uint64_t v86 = a8;
  char v22 = (char *)malloc_type_calloc(0x882uLL, 1uLL, 0x100004077774924uLL);
  if (!v22) {
    return 1030;
  }
  unsigned int v23 = v22;
  unsigned int v24 = (char *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v24) {
    return 1030;
  }
  uint64_t __src = v24;
  unsigned int v25 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v25) {
    return 1030;
  }
  uint64_t v82 = v25;
  unsigned int v26 = malloc_type_calloc(0x3F40uLL, 1uLL, 0x100004077774924uLL);
  if (!v26) {
    return 1030;
  }
  int v81 = v26;
  int v80 = a5;
  int v27 = malloc_type_malloc(0xFD00uLL, 0x5800E593uLL);
  if (!v27) {
    return 1030;
  }
  int v28 = v27;
  uint64_t v84 = (__int16 *)malloc_type_calloc(0x7E80uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v84) {
    return 1030;
  }
  uint64_t v29 = (unsigned __int16 *)malloc_type_calloc(0x7E80uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v29) {
    return 1030;
  }
  __b = v29;
  int v30 = malloc_type_calloc(0x3F40uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v30) {
    return 1030;
  }
  uint64_t v71 = (uint64_t)a6;
  int v72 = a10 & 7;
  uint64_t v68 = v30;
  if (v72 == 2)
  {
    uint64_t result = SLSeek(a1, a2, 0);
    if (result == 8) {
      return result;
    }
  }
  else
  {
    a2 = 0;
  }
  if (a3)
  {
    int v74 = 0;
    if ((a10 & 0x38) == 0x10)
    {
      int v32 = a4;
    }
    else
    {
      a2 = 0;
      int v32 = 0;
    }
    int v69 = v32;
    int v33 = 1;
  }
  else
  {
    int v69 = 0;
    int v33 = 0;
    int v74 = 1;
  }
  int v93 = a2;
  int v94 = 0;
  uint64_t v91 = 0;
  int v92 = 0;
  *__int16 v21 = 0;
  v95[0] = 0;
  if (SLtmpnam(a6, v95) == 8) {
    return 1019;
  }
  if (SLOpen((uint64_t)a6, (uint64_t)v95, &v94, 0x602u) == 8) {
    return 1012;
  }
  int v78 = v33;
  int v85 = 0;
  int v34 = 0;
  int v35 = 0;
LABEL_26:
  unsigned __int16 v36 = 0;
  int v37 = 0;
  int v66 = v34;
  uint64_t v73 = (unsigned __int16)v34;
LABEL_27:
  if (SLFpos(v94, &v92) == 8) {
    return 1010;
  }
  v81[v73] = v92;
  if (!v85)
  {
    int v85 = 0;
    int v76 = v78;
    goto LABEL_34;
  }
  if (!v74)
  {
    if (v78 == 1)
    {
      int v85 = 0;
      int v93 = v69;
      int v74 = 1;
      int v76 = 0;
      a1 = a3;
      LOBYTE(v72) = (a10 >> 3) & 7;
    }
    else
    {
      int v74 = 0;
      int v76 = 0;
      int v85 = 1;
    }
    while (1)
    {
LABEL_34:
      while (v35)
      {
        int v35 = 0;
        LOWORD(v3_Block_object_dispose(&STACK[0x510], 8) = strlen(v23);
        if ((_WORD)v38) {
          goto LABEL_45;
        }
      }
      if (PDGets((unsigned __int8 *)v23, 2177, &v93, a1) == 8)
      {
        int v35 = 0;
        int v85 = 1;
        goto LABEL_55;
      }
      int v35 = 0;
      uint64_t v38 = (unsigned __int16)strlen(v23);
      if (v38)
      {
        while (1)
        {
          int v39 = v23[(v38 - 1)];
          if (v39 != 13 && v39 != 10) {
            break;
          }
          LODWORD(v3_Block_object_dispose(&STACK[0x510], 8) = v38 - 1;
          if (!(_WORD)v38)
          {
            int v35 = 0;
            goto LABEL_34;
          }
        }
LABEL_45:
        uint64_t v41 = (unsigned __int16)v38;
        v23[(unsigned __int16)v38] = 0;
        if (((unsigned __int16)(v38 + v37) >> 8) > 0xFCu)
        {
          int v35 = 1;
LABEL_55:
          int v78 = 1;
          if (!v76)
          {
            if (PDsdsort((uint64_t)v28, v84, v36, v72, v86)) {
              return 1030;
            }
            if (v36)
            {
              uint64_t v45 = v36;
              char v46 = v84;
              do
              {
                uint64_t v77 = v45;
                uint64_t v67 = v46 + 1;
                __strcpy_chk();
                __int16 v47 = strlen(__src);
                unsigned __int16 v79 = v47;
                if (a7)
                {
                  SLchcnv(__src, v47, (unsigned __int8 *)__src, 0, a9);
                  __int16 v47 = v79;
                }
                char v89 = 0;
                unsigned __int8 __buf = HIBYTE(v47);
                unsigned __int8 v88 = v47;
                if (SLFWrite(v94, 2, &__buf, (unsigned int *)&v91 + 1) == 8
                  || SLFWrite(v94, v79, __src, (unsigned int *)&v91 + 1) == 8)
                {
                  return 1011;
                }
                uint64_t v45 = v77 - 1;
                char v46 = v67;
              }
              while (v77 != 1);
            }
            int v78 = 0;
            int v34 = v66 + 1;
            v68[v73] = v36;
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        v84[v36] = v37;
        __strcpy_chk();
        if (v41)
        {
          char v42 = v19;
          do
          {
            char v43 = *v42++;
            int v44 = v37 + 1;
            v28[(unsigned __int16)v37++] = v43;
            --v41;
          }
          while (v41);
        }
        else
        {
          int v44 = v37;
        }
        int v35 = 0;
        ++v36;
        int v37 = v44 + 1;
        v28[(unsigned __int16)v44] = 0;
        if ((((unsigned __int16)(v36 >> 7) < 0xFDu) & ~v85) == 0) {
          goto LABEL_55;
        }
      }
    }
  }
  *uint64_t v82 = 0;
  SLClose(v94);
  if (SLOpen(v71, (uint64_t)v95, &v94, 2u) == 8) {
    return 1012;
  }
  *__int16 v21 = 0;
  if ((_WORD)v66)
  {
    memset(__b, 255, 2 * v73);
    bzero(v28, 0xFD00uLL);
    uint64_t v48 = 0;
    *__int16 v21 = 0;
    __int16 v49 = v66;
    unint64_t v50 = v68;
    while (1)
    {
      if (v50[v48])
      {
        if (SLSeek(v94, v81[v48], 0) == 8
          || SLFRead(v94, 2177, __src, (unsigned int *)&v91 + 1) == 8)
        {
          return 1010;
        }
        unsigned __int8 __buf = *__src;
        unsigned __int8 v88 = __src[1];
        char v89 = 0;
        unint64_t v51 = v88 | ((unint64_t)__buf << 8);
        __memcpy_chk();
        __src[v51] = 0;
        __int16 v52 = v68[v48] - 1;
        if (v68[v48] == 1) {
          --v49;
        }
        else {
          v81[v48] += v51 + 2;
        }
        v68[v48] = v52;
        if (v51 > 0x881) {
          return 5109;
        }
        strcpy(&v28[(unsigned __int16)(2177 * v48)], __src);
        __b[v48] = v48;
        unint64_t v50 = v68;
      }
      if (++v48 == v73) {
        goto LABEL_79;
      }
    }
  }
  bzero(v28, 0xFD00uLL);
  __int16 v49 = 0;
  unint64_t v50 = v68;
LABEL_79:
  __int16 v75 = v49;
  uint64_t v53 = 0;
  *__int16 v21 = 0;
  uint64_t v54 = *__b;
  do
  {
    if (!v50[v54])
    {
      *__int16 v21 = 0;
      if ((_WORD)v66)
      {
        uint64_t v60 = 0;
        while (1)
        {
          if (v68[v60])
          {
            if (SLSeek(v94, v81[v60], 0) == 8
              || SLFRead(v94, 129, __src, (unsigned int *)&v91 + 1) == 8)
            {
              return 1010;
            }
            unsigned __int8 __buf = *__src;
            unsigned __int8 v88 = __src[1];
            char v89 = 0;
            unint64_t v61 = v88 | ((unint64_t)__buf << 8);
            __memcpy_chk();
            __src[v61] = 0;
            if (!*v21) {
              goto LABEL_104;
            }
            if (PDsdcmp(__src, v21, v72, v86, &v90)) {
              return 1030;
            }
            if (v90 <= 0)
            {
LABEL_104:
              uint64_t v53 = (unsigned __int16)v60;
              __strcpy_chk();
            }
          }
          ++v60;
          uint64_t v54 = v53;
          if ((unsigned __int16)v66 == v60) {
            goto LABEL_81;
          }
        }
      }
      uint64_t v54 = v53;
    }
LABEL_81:
    if (SLSeek(v94, v81[v54], 0) == 8
      || SLFRead(v94, 2177, v23, (unsigned int *)&v91 + 1) == 8)
    {
      return 1010;
    }
    unsigned __int8 __buf = *v23;
    unsigned __int8 v88 = v23[1];
    char v89 = 0;
    unint64_t v55 = v88 | ((unint64_t)__buf << 8);
    __memcpy_chk();
    v23[v55] = 0;
    __int16 v56 = v68[v54] - 1;
    if (v68[v54] == 1) {
      --v75;
    }
    else {
      v81[v54] += v55 + 2;
    }
    v68[v54] = v56;
    if ((_WORD)v66)
    {
      uint64_t v57 = 0;
      __int16 v58 = __b;
      while (!PDsdcmp(&v28[(unsigned __int16)v57], (unsigned __int8 *)v23, v72, v86, &v90))
      {
        if (v90 <= 0)
        {
          uint64_t v53 = (unsigned __int16)*v58;
          __strcpy_chk();
          if (v55 > 0x881) {
            return 5109;
          }
          strcpy(&v28[(unsigned __int16)v57], v23);
          *__int16 v58 = v54;
          __strcpy_chk();
          uint64_t v54 = v53;
        }
        v57 += 2177;
        ++v58;
        if (2177 * (unsigned __int16)v66 == v57) {
          goto LABEL_93;
        }
      }
      return 1030;
    }
LABEL_93:
    __strcat_chk();
    int v59 = strlen(v23);
    if (SLFWrite(v80, v59, v23, (unsigned int *)&v91) == 8) {
      return 1011;
    }
    unint64_t v50 = v68;
  }
  while (v75);
  if ((_WORD)v66)
  {
    uint64_t v62 = 2177 * (unsigned __int16)v66 + 63359;
    uint64_t v63 = (unsigned __int16)v66 - 1;
    do
    {
      __strcpy_chk();
      __strcat_chk();
      int v64 = strlen(__src);
      if (SLFWrite(v80, v64, __src, (unsigned int *)&v91) == 8) {
        return 1011;
      }
      v62 -= 2177;
    }
    while ((unint64_t)(unsigned __int16)v63--);
  }
  uint64_t result = SLSeek(v80, 0, 0);
  if (result != 8)
  {
    SLClose(v94);
    SLremove();
    free(v19);
    free(v21);
    free(v23);
    free(__src);
    free(v82);
    free(v28);
    free(v84);
    free(__b);
    free(v68);
    free(v81);
    return 0;
  }
  return result;
}

uint64_t PDsdsort(uint64_t a1, __int16 *a2, unsigned int a3, int a4, uint64_t a5)
{
  if (a3 < 2) {
    return 0;
  }
  unsigned __int16 v10 = a3 - 1;
  if ((((_WORD)a3 - 2) & 0x8000) != 0)
  {
LABEL_7:
    uint64_t v13 = v10;
    while (v13)
    {
      __int16 v14 = *a2;
      *a2 = a2[v13];
      uint64_t v15 = v13 - 1;
      a2[v13] = v14;
      int v16 = DownHeap(0, (unsigned __int16)(v13 - 1), a4, (uint64_t)a2, a1, a5);
      uint64_t v13 = v15;
      if (v16) {
        return 1030;
      }
    }
    return 0;
  }
  else
  {
    unsigned __int16 v11 = (unsigned __int16)(a3 - 2) >> 1;
    while (!DownHeap(v11, v10, a4, (uint64_t)a2, a1, a5))
    {
      int v12 = (__int16)v11--;
      if (v12 <= 0) {
        goto LABEL_7;
      }
    }
    return 1030;
  }
}

uint64_t PDsdcmp(char *__s, unsigned __int8 *a2, int a3, uint64_t a4, _WORD *a5)
{
  unsigned int v7 = __s;
  int v30 = 0;
  if (a3 == 3)
  {
    PDatoi((unsigned __int8 *)__s, (_WORD *)&v30 + 1);
    PDatoi(a2, &v30);
    uint64_t result = 0;
    *a5 = v30 - HIWORD(v30);
  }
  else
  {
    unsigned __int16 v10 = strlen(__s);
    unsigned __int16 v11 = malloc_type_calloc(v10 + 1, 1uLL, 0x100004077774924uLL);
    if (v11
      && (int v12 = v11,
          unsigned __int16 v13 = strlen((const char *)a2),
          (__int16 v14 = (unsigned __int8 *)malloc_type_calloc(v13 + 1, 1uLL, 0x100004077774924uLL)) != 0))
    {
      uint64_t v15 = v14;
      if (v10)
      {
        uint64_t v16 = v10;
        int v17 = v12;
        do
        {
          unsigned int v19 = *v7++;
          char v18 = v19;
          char v20 = v19 + 32;
          if ((*(_DWORD *)(a4 + 4 * v19) & 0x40000000) != 0) {
            char v18 = v20;
          }
          *v17++ = v18;
          --v16;
        }
        while (v16);
      }
      if (v13)
      {
        uint64_t v21 = v13;
        char v22 = v14;
        do
        {
          unsigned int v24 = *a2++;
          char v23 = v24;
          char v25 = v24 + 32;
          if ((*(_DWORD *)(a4 + 4 * v24) & 0x40000000) != 0) {
            char v23 = v25;
          }
          *v22++ = v23;
          --v21;
        }
        while (v21);
      }
      unsigned __int16 v26 = 0;
      int v27 = 0;
      while (2)
      {
        int v28 = v12[v26];
        while (1)
        {
          int v29 = v14[(unsigned __int16)v27];
          if (v28 == v29) {
            break;
          }
          if (v28 == 61) {
            goto LABEL_23;
          }
          if (v29 != 61) {
            goto LABEL_26;
          }
          ++v27;
        }
        if (v12[v26])
        {
          ++v27;
LABEL_23:
          ++v26;
          continue;
        }
        break;
      }
      LOWORD(v29) = 0;
LABEL_26:
      *a5 = v28 - v29;
      free(v12);
      free(v15);
      return 0;
    }
    else
    {
      return 1030;
    }
  }
  return result;
}

uint64_t PDreadHead(char *a1, uint64_t a2)
{
  unsigned int v4 = malloc_type_malloc(0x41uLL, 0xC9090E67uLL);
  if (!v4) {
    return 8;
  }
  uint64_t v5 = v4;
  int v6 = strlen(a1);
  if (v6 << 16 <= -65537)
  {
LABEL_3:
    free(v5);
    return 8;
  }
  int v7 = 0;
  int v17 = 0;
  int v8 = 0;
  char v9 = 0;
  __int16 v10 = 0;
  int v11 = (__int16)v6;
  uint64_t v16 = (_WORD *)(a2 + 4);
  LOWORD(v12) = -1;
  do
  {
    __int16 v13 = v12;
    int v12 = v7;
    if (v9 > 0x17) {
      goto LABEL_13;
    }
    if (((1 << v9) & 0xAAAAAA) != 0)
    {
      if (a1[(__int16)v7] != 35) {
        goto LABEL_13;
      }
      ++v8;
    }
    else if (((1 << v9) & 0x555554) != 0)
    {
      __int16 v10 = v7;
    }
    else
    {
      if (a1[(__int16)v7] != 35) {
        goto LABEL_3;
      }
      ++v8;
      __int16 v10 = v13 + 2;
    }
    if (v9 >= 23)
    {
      free(v5);
      return 303;
    }
    ++v9;
LABEL_13:
    switch(v9)
    {
      case 2:
        if (SLstrncmp("#HEADER START", (unsigned __int8 *)a1, 13)) {
          goto LABEL_3;
        }
        char v9 = 2;
        break;
      case 4:
        int v14 = v17;
        if (a1[v10] < 0x32u) {
          int v14 = 1;
        }
        int v17 = v14;
        char v9 = 4;
        break;
      case 6:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 1));
        char v9 = 6;
        break;
      case 8:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 2));
        char v9 = 8;
        break;
      case 10:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 3));
        char v9 = 10;
        break;
      case 12:
        *(unsigned char *)a2 = a1[v10];
        if ((_BYTE)v17)
        {
          *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x510], 8) = 0;
          *(_DWORD *)uint64_t v16 = 0;
          goto LABEL_24;
        }
        char v9 = 12;
        break;
      case 14:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatoi((unsigned __int8 *)v5, v16);
        char v9 = 14;
        break;
      case 16:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 6));
        char v9 = 16;
        break;
      case 18:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 7));
        char v9 = 18;
        break;
      case 20:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatoi((unsigned __int8 *)v5, (_WORD *)(a2 + 10));
        char v9 = 20;
        break;
      case 22:
LABEL_24:
        __strncpy_chk();
        *((unsigned char *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (unsigned char *)(a2 + 8));
        char v9 = 22;
        break;
      case 23:
        if (SLstrncmp("HEADER END#", (unsigned __int8 *)&a1[v10], 11)) {
          goto LABEL_3;
        }
        char v9 = 23;
        break;
      default:
        break;
    }
    int v7 = v12 + 1;
  }
  while (v11 >= (__int16)v12);
  free(v5);
  if ((char)v8 <= 23) {
    return 8;
  }
  return 0;
}

uint64_t DownHeap(unsigned int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7 = a1;
  __int16 v27 = 0;
  uint64_t v8 = *(unsigned __int16 *)(a4 + 2 * a1);
  int v9 = (__int16)(a2 - 1) >> 1;
  if (a1 > (unsigned __int16)((__int16)(a2 - 1) >> 1))
  {
    uint64_t v10 = a1;
    goto LABEL_34;
  }
  int v13 = 0;
  __int16 v22 = *(_WORD *)(a4 + 2 * a1);
  char v25 = (unsigned __int8 *)(a5 + v8);
  unsigned int v26 = a3 - 1;
  while (1)
  {
    int v14 = a2 >= ((unsigned __int16)(2 * v7) | 1u)
        ? (unsigned __int8 *)(a5 + *(unsigned __int16 *)(a4 + 2 * ((unsigned __int16)(2 * v7) | 1u)))
        : 0;
    uint64_t v15 = a2 >= (unsigned __int16)(2 * v7 + 2)
        ? (unsigned __int8 *)(a5 + *(unsigned __int16 *)(a4 + 2 * (unsigned __int16)(2 * v7 + 2)))
        : 0;
    if (v26 < 2) {
      break;
    }
    if (a3 == 3)
    {
      int v19 = IntCmp((uint64_t)v14, (uint64_t)v15);
      if (v19 <= 0) {
        int v13 = 2 * v7 + 2;
      }
      else {
        int v13 = (2 * v7) | 1;
      }
      if (v19 <= 0) {
        uint64_t v20 = (uint64_t)v15;
      }
      else {
        uint64_t v20 = (uint64_t)v14;
      }
      __int16 v18 = IntCmp((uint64_t)v25, v20);
      __int16 v27 = v18;
      goto LABEL_28;
    }
LABEL_29:
    uint64_t v10 = (unsigned __int16)v13;
    *(_WORD *)(a4 + 2 * (unsigned __int16)v7) = *(_WORD *)(a4 + 2 * (unsigned __int16)v13);
    unsigned int v7 = v13;
    if ((unsigned __int16)v13 > (unsigned __int16)v9) {
      goto LABEL_33;
    }
  }
  if (AsciiCmp(v14, v15, a6, &v27)) {
    return 1030;
  }
  int v16 = v27;
  int v17 = v27 <= 0 ? v15 : v14;
  if (AsciiCmp(v25, v17, a6, &v27)) {
    return 1030;
  }
  if (v16 <= 0) {
    int v13 = 2 * v7 + 2;
  }
  else {
    int v13 = (2 * v7) | 1;
  }
  __int16 v18 = v27;
LABEL_28:
  if (v18 < 1) {
    goto LABEL_29;
  }
  uint64_t v10 = (unsigned __int16)v7;
LABEL_33:
  LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = v22;
LABEL_34:
  uint64_t result = 0;
  *(_WORD *)(a4 + 2 * v10) = v8;
  return result;
}

uint64_t AsciiCmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, _WORD *a4)
{
  if (a1 && a2)
  {
    uint64_t v8 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
    if (v8 && (int v9 = v8, (v10 = (unsigned __int8 *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL)) != 0))
    {
      int v11 = v10;
      unsigned __int8 v12 = *a1;
      if (*a1)
      {
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          if ((*(_DWORD *)(a3 + 4 * v12) & 0x40000000) != 0) {
            v12 += 32;
          }
          v9[v13] = v12;
          uint64_t v13 = (unsigned __int16)++v14;
          unsigned __int8 v12 = a1[(unsigned __int16)v14];
        }
        while (v12);
      }
      unsigned __int8 v15 = *a2;
      if (*a2)
      {
        uint64_t v16 = 0;
        int v17 = 0;
        do
        {
          if ((*(_DWORD *)(a3 + 4 * v15) & 0x40000000) != 0) {
            v15 += 32;
          }
          v10[v16] = v15;
          uint64_t v16 = (unsigned __int16)++v17;
          unsigned __int8 v15 = a2[(unsigned __int16)v17];
        }
        while (v15);
      }
      int v18 = *v9;
      if (*v9)
      {
        unsigned __int16 v19 = 0;
        int v20 = 0;
        while (1)
        {
          int v21 = v10[v19];
          if (!v10[v19]) {
            goto LABEL_29;
          }
          if (v18 == v21) {
            break;
          }
          if (v18 != 61)
          {
            if (v21 != 61) {
              goto LABEL_29;
            }
            goto LABEL_23;
          }
          ++v20;
LABEL_24:
          int v18 = v9[(unsigned __int16)v20];
          if (!v9[(unsigned __int16)v20]) {
            goto LABEL_29;
          }
        }
        ++v20;
LABEL_23:
        ++v19;
        goto LABEL_24;
      }
      unsigned __int16 v19 = 0;
LABEL_29:
      *a4 = v18 - v10[v19];
      free(v9);
      free(v11);
      return 0;
    }
    else
    {
      return 1030;
    }
  }
  else
  {
    uint64_t result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t IntCmp(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __int16 v2 = 1;
  if (a1 && a2)
  {
    __int16 v5 = 0;
    __int16 v4 = 0;
    __strcpy_chk();
    __strcpy_chk();
    PDatoi(v7, &v5);
    PDatoi(v6, &v4);
    return (__int16)(v4 - v5);
  }
  return v2;
}

uint64_t PDngrams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v79 = 0;
  *(void *)int v78 = 0;
  int v77 = 0;
  if (SLOpen(a1, a2, v78, 0) == 8 || SLOpen(a3, a4, &v77, 0x602u) == 8) {
    return 1012;
  }
  int v85 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  unsigned int v7 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *(void *)&long long v82 = v7;
  if (!v7) {
    goto LABEL_45;
  }
  uint64_t v8 = v7;
  int v9 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *((void *)&v82 + 1) = v9;
  if (!v9) {
    goto LABEL_45;
  }
  uint64_t v10 = v9;
  int v11 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *(void *)&long long v83 = v11;
  if (!v11) {
    goto LABEL_45;
  }
  unsigned __int8 v12 = v11;
  uint64_t v13 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *((void *)&v83 + 1) = v13;
  if (!v13) {
    goto LABEL_45;
  }
  int v14 = v13;
  unsigned __int8 v15 = (char *)malloc_type_calloc(1uLL, 0x8000uLL, 0x40F47596uLL);
  int v85 = v15;
  if (!v15) {
    goto LABEL_45;
  }
  uint64_t v16 = v15;
  int v17 = malloc_type_calloc(1uLL, 0x4000uLL, 0x1000040BDFB0063uLL);
  *(void *)&long long v81 = v17;
  if (!v17
    || (uint64_t v18 = (uint64_t)v17,
        unsigned __int16 v19 = malloc_type_calloc(1uLL, 0x4000uLL, 0x1000040BDFB0063uLL),
        (*(void *)&long long v84 = v19) == 0)
    || (int v20 = v19,
        int v21 = (char *)malloc_type_calloc(1uLL, 0x4000uLL, 0x100004077774924uLL),
        (*((void *)&v84 + 1) = v21) == 0))
  {
LABEL_45:
    unsigned int v42 = v77;
    unsigned int v41 = v78[0];
    uint64_t v6 = 1030;
LABEL_46:
    clean_up(1030, (uint64_t)&v81, v41, v42);
    return v6;
  }
  __int16 v22 = v21;
  char v23 = malloc_type_calloc(1uLL, 0x4000uLL, 0x100004077774924uLL);
  *((void *)&v81 + 1) = v23;
  if (!v23)
  {
    unsigned int v42 = v77;
    uint64_t v6 = 1030;
    unsigned int v41 = v78[0];
    goto LABEL_46;
  }
  uint64_t v24 = (uint64_t)v23;
  int v76 = v20;
  unsigned __int16 v25 = 0;
  if (SLFRead(v78[0], 4, __dst, &v79) != 8 && v79 == 4)
  {
    unsigned __int16 v25 = 0;
    do
    {
      v8[(__int16)++v25] = __dst[0];
      v10[(__int16)v25] = __dst[1];
      v12[(__int16)v25] = __dst[2];
      v14[(__int16)v25] = __dst[3];
      BOOL v26 = SLFRead(v78[0], 4, __dst, &v79) != 8 && v79 == 4;
    }
    while (v26);
  }
  uint64_t v27 = (__int16)(v25 + 1);
  v8[v27] = -1;
  v10[v27] = -1;
  v12[v27] = -1;
  v14[v27] = -1;
  v22[1] = v8[1];
  v22[2] = v10[1];
  *(unsigned char *)(v24 + 1) = v12[1];
  *(unsigned char *)(v24 + 2) = v14[1];
  int v28 = 1;
  LOWORD(v29) = 1;
  if ((__int16)(v25 + 1) >= 2)
  {
    int v30 = 0;
    LODWORD(v31) = (__int16)(v25 + 2);
    if ((int)v31 <= 3) {
      uint64_t v31 = 3;
    }
    else {
      uint64_t v31 = v31;
    }
    uint64_t v32 = 2;
    LOWORD(v29) = 1;
    int v28 = 1;
    do
    {
      int v33 = v12[v32];
      int v34 = v14[v32];
      int v35 = v8[v32];
      if (v35 == v22[2 * (__int16)v28 - 1] && v10[v32] == v22[2 * (__int16)v28])
      {
        if (v12[v32 - 1] == v33) {
          int v33 = 0;
        }
        if (v14[v32 - 1] == v34) {
          int v34 = 0;
        }
      }
      else
      {
        unsigned __int16 v36 = &v22[2 * (__int16)++v28];
        *(v36 - 1) = v35;
        *unsigned __int16 v36 = v10[v32];
      }
      if ((__int16)v29 < 1)
      {
        if (!v30)
        {
LABEL_40:
          int v30 = 0;
          uint64_t v29 = (__int16)v29 + 1;
          uint64_t v38 = (unsigned char *)(v24 + 2 * v29);
          *(v38 - 1) = v33;
          *uint64_t v38 = v34;
          *(_WORD *)(v18 + 2 * (__int16)v29) = 1;
        }
      }
      else
      {
        LOWORD(v37) = 1;
        while (*(unsigned __int8 *)(v24 + 2 * (__int16)v37 - 1) != v33
             || *(unsigned __int8 *)(v24 + 2 * (__int16)v37) != v34)
        {
          int v37 = (__int16)(v37 + 1);
          if (v37 > (__int16)v29) {
            goto LABEL_40;
          }
        }
        ++*(_WORD *)(v18 + 2 * (__int16)v37);
        int v30 = 1;
      }
      ++v32;
    }
    while (v32 != v31);
  }
  sort_fr((__int16)v29, v18, v24);
  if (v25 <= 0x7FFEu)
  {
    uint64_t v44 = 0;
    __int16 v45 = 0;
    LODWORD(v46) = (__int16)(v25 + 2);
    if ((int)v46 <= 2) {
      uint64_t v46 = 2;
    }
    else {
      uint64_t v46 = v46;
    }
    int v47 = 32;
    uint64_t v39 = 16;
    uint64_t v48 = 1;
    int v49 = 32;
    uint64_t v40 = v76;
    while (1)
    {
      int v50 = v12[v48];
      int v51 = v14[v48];
      int v52 = v8[v48];
      if (v52 == v49 && v10[v48] == v47) {
        break;
      }
      uint64_t v54 = &v22[2 * ++v45];
      int v49 = *(v54 - 1);
      int v47 = *v54;
      if (v52 == v49)
      {
        if (v10[v48] == v47)
        {
          int v53 = 1;
          int v49 = v8[v48];
LABEL_63:
          uint64_t v55 = 1;
          char v56 = 1;
LABEL_64:
          uint64_t v57 = (unsigned __int8 *)(v24 + 2 * v55);
          do
          {
            if (v50 == *(v57 - 1) && v51 == *v57)
            {
              char v56 = 0;
              uint64_t v44 = (v39 + 1);
              v16[(__int16)(v39 + 1)] = v55;
              uint64_t v39 = v44;
              uint64_t v58 = v44;
              BOOL v26 = v55++ == 254;
              if (!v26) {
                goto LABEL_64;
              }
              goto LABEL_76;
            }
            ++v55;
            v57 += 2;
          }
          while (v55 != 255);
          if (v56)
          {
            uint64_t v59 = (v39 + 1);
            v16[(__int16)(v39 + 1)] = -1;
            v16[(__int16)(v39 + 2)] = v50;
            uint64_t v39 = (v39 + 3);
            v16[(__int16)v39] = v51;
            uint64_t v44 = v59;
            if (v53) {
              goto LABEL_79;
            }
            goto LABEL_80;
          }
          uint64_t v58 = v39;
LABEL_76:
          uint64_t v39 = v58;
          uint64_t v59 = v44;
          if (v53) {
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        int v49 = v8[v48];
      }
LABEL_79:
      v76[v45] = v44;
      uint64_t v59 = v44;
LABEL_80:
      ++v48;
      uint64_t v44 = v59;
      if (v48 == v46) {
        goto LABEL_81;
      }
    }
    int v53 = 0;
    if (v12[v48 - 1] == v50) {
      int v50 = 0;
    }
    if (v14[v48 - 1] == v51) {
      int v51 = 0;
    }
    goto LABEL_63;
  }
  LOWORD(v39) = 16;
  uint64_t v40 = v76;
LABEL_81:
  int v60 = (__int16)v39;
  v16[1] = (unsigned __int16)(v39 + 1) >> 8;
  void v16[2] = v39 + 1;
  v16[4] = v28;
  v16[3] = BYTE1(v28);
  if ((__int16)v28 >= 1)
  {
    uint64_t v61 = 0;
    int v62 = (__int16)v39 + (unsigned __int16)v28;
    int v63 = (__int16)v39 + 2 * (unsigned __int16)v28;
    int v64 = (__int16)(v28 + 1);
    if (v64 <= 2) {
      uint64_t v65 = 2;
    }
    else {
      uint64_t v65 = v64;
    }
    uint64_t v66 = v65 - 1;
    uint64_t v67 = v22 + 2;
    do
    {
      v16[v60 + 1 + v61] = *(v67 - 1);
      char v68 = *v67;
      v67 += 2;
      v16[v62 + 1 + v61] = v68;
      uint64_t v69 = (uint64_t)&v40[v61 + 1];
      v16[v63 + 1 + v61] = *(unsigned char *)(v69 + 1);
      v16[v63 + 1 + (unsigned __int16)v28 + v61++] = *(_WORD *)v69;
    }
    while (v66 != v61);
  }
  int v70 = v60 + 4 * v28;
  *(_WORD *)(v16 + 5) = bswap32(v70 + 1) >> 16;
  uint64_t v71 = (char *)(v24 + 2);
  uint64_t v72 = -256;
  do
  {
    uint64_t v73 = &v16[(__int16)v70 + 257 + v72];
    char *v73 = *(v71 - 1);
    char v74 = *v71;
    v71 += 2;
    v73[256] = v74;
  }
  while (!__CFADD__(v72++, 1));
  v16[8] = v70;
  v16[7] = (unsigned __int16)(v70 + 512) >> 8;
  SLFWrite(v77, (__int16)(v70 + 512) - 1, v16 + 1, (unsigned int *)&v78[1]);
  clean_up(0, (uint64_t)&v81, v78[0], v77);
  return 0;
}

uint64_t clean_up(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = *(void **)(a2 + 16);
  if (v8) {
    free(v8);
  }
  int v9 = *(void **)(a2 + 24);
  if (v9) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a2 + 32);
  if (v10) {
    free(v10);
  }
  int v11 = *(void **)(a2 + 40);
  if (v11) {
    free(v11);
  }
  unsigned __int8 v12 = *(void **)(a2 + 64);
  if (v12) {
    free(v12);
  }
  if (*(void *)a2) {
    free(*(void **)a2);
  }
  uint64_t v13 = *(void **)(a2 + 48);
  if (v13) {
    free(v13);
  }
  int v14 = *(void **)(a2 + 56);
  if (v14) {
    free(v14);
  }
  unsigned __int8 v15 = *(void **)(a2 + 8);
  if (v15) {
    free(v15);
  }
  SLClose(a3);
  SLClose(a4);
  return a1;
}

uint64_t sort_fr(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= 2)
  {
    LOWORD(v3) = result;
    do
    {
      int v4 = (__int16)v3 >> 1;
      LOWORD(v5) = 1;
      do
      {
        LOWORD(v6) = v5;
        do
        {
          uint64_t v6 = (__int16)v6;
          int v7 = *(__int16 *)(a2 + 2 * (__int16)v6);
          uint64_t v8 = (__int16)(v6 + v4);
          int v9 = *(__int16 *)(a2 + 2 * v8);
          if (v7 >= v9) {
            break;
          }
          uint64_t v10 = a3 + 2 * v6;
          __int16 v11 = *(_WORD *)(v10 - 1);
          *(_WORD *)(a2 + 2 * v6) = v9;
          uint64_t v12 = a3 + 2 * v8;
          *(_WORD *)(v10 - 1) = *(_WORD *)(v12 - 1);
          *(_WORD *)(a2 + 2 * v_Block_object_dispose(&STACK[0x510], 8) = v7;
          *(_WORD *)(v12 - 1) = v11;
          LODWORD(v6) = (__int16)(v6 - v4);
        }
        while ((int)v6 > 0);
        int v5 = (__int16)(v5 + 1);
      }
      while (v5 <= (__int16)(result - ((__int16)v3 >> 1)));
      unsigned int v13 = (unsigned __int16)v3;
      int v3 = (__int16)v3 >> 1;
    }
    while (v13 >= 4);
  }
  return result;
}

uint64_t PDSDinit(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 2176);
  int v7 = (unsigned __int8 *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v7) {
    return 8;
  }
  uint64_t v8 = v7;
  int v9 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v9) {
    return 8;
  }
  uint64_t v10 = v9;
  __int16 v11 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v11) {
    return 8;
  }
  uint64_t v12 = v11;
  uint64_t v13 = 8;
  int v14 = malloc_type_calloc(0x202uLL, 8uLL, 0x100004000313F17uLL);
  *(void *)(v6 + 4_Block_object_dispose(&STACK[0x510], 8) = v14;
  if (v14)
  {
    unsigned __int8 v15 = malloc_type_calloc(1uLL, 0x100uLL, 0x100004077774924uLL);
    *(void *)(v6 + 96) = v15;
    if (!v15) {
      return 8;
    }
    *(void *)unsigned int v41 = 0;
    if (a2)
    {
      v41[0] = a3;
      SLSeek(a3, *(_DWORD *)(a1 + 768), 0);
    }
    else
    {
      if (SLOpen(a1 + 1, a1 + 512, v41, 0) == 8) {
        return 8;
      }
      a3 = v41[0];
    }
    *(_DWORD *)(a1 + 776) = a3;
    *(_DWORD *)(*(void *)(a1 + 2184) + 64) = a3;
    if (SLFRead(a3, 1024, v8, (unsigned int *)&v41[1]) == 8) {
      return 8;
    }
    strcpy(v10, "#HEADER COMP START");
    int v17 = strncpy(v12, (const char *)v8 + 38, 0x11uLL);
    int v18 = SLstrncmp(v17, (unsigned __int8 *)v10, 17);
    free(v10);
    free(v12);
    if (v18)
    {
      unsigned int v19 = bswap32(*((_DWORD *)v8 + 175));
      *(_DWORD *)uint64_t v6 = v19;
      uint64_t v20 = *(void *)(a1 + 2184);
      *(_DWORD *)(v20 + 12) = bswap32(*((_DWORD *)v8 + 175)) + *(_DWORD *)(a1 + 768);
      unsigned int v21 = bswap32(*((_DWORD *)v8 + 177));
      *(_DWORD *)(v6 + _Block_object_dispose(&STACK[0x510], 8) = v21;
      unsigned int v22 = bswap32(*((_DWORD *)v8 + 179));
      *(_DWORD *)(v6 + 16) = v22;
      *(_DWORD *)(v6 + 24) = bswap32(*((_DWORD *)v8 + 181));
      unsigned int v23 = bswap32(*((_DWORD *)v8 + 183));
      *(_DWORD *)(v6 + 32) = v23;
      unsigned int v24 = bswap32(*((_DWORD *)v8 + 185));
      *(_DWORD *)(v6 + 40) = v24;
      if (*(unsigned char *)a1 == 7)
      {
        *(_DWORD *)(v6 + 80) = bswap32(*((_DWORD *)v8 + 187));
        *(_WORD *)(a1 + 2094) = v8[757];
      }
      else
      {
        *(_WORD *)(a1 + 2094) = v8[749];
        *(unsigned char *)(a1 + 2090) = v8[769];
        *(unsigned char *)(a1 + 2091) = v8[761];
        *(unsigned char *)(a1 + 2092) = v8[763];
      }
      unsigned int v25 = v8[387];
      if (v25 > 0x25) {
        LOBYTE(v25) = 0;
      }
      *(unsigned char *)(a1 + 2069) = v25;
      *(unsigned char *)(v20 + 55) = v25;
      *(_WORD *)(v20 + 6_Block_object_dispose(&STACK[0x510], 8) = bswap32(*((unsigned __int16 *)v8 + 252)) >> 16;
      unsigned int v26 = bswap32(*((unsigned __int16 *)v8 + 196)) >> 16;
      *(_WORD *)(v20 + 2) = v26;
      *(_DWORD *)(v6 + 4) = v21 - v19;
      *(_WORD *)(v20 + 4) = bswap32(*((unsigned __int16 *)v8 + 256)) >> 16;
      *(_WORD *)(v6 + 12) = v22 - v21;
      *(_WORD *)(v6 + 20) = bswap32(*((unsigned __int16 *)v8 + 245)) >> 16;
      *(_WORD *)(v6 + 2_Block_object_dispose(&STACK[0x510], 8) = 256;
      *(_WORD *)(v20 + 4_Block_object_dispose(&STACK[0x510], 8) = bswap32(*((unsigned __int16 *)v8 + 251)) >> 16;
      *(unsigned char *)(v20 + 54) = v8[501];
      *(_WORD *)(v6 + 36) = v24 - v23;
      uint64_t v27 = malloc_type_calloc(1uLL, 8 * v26, 0x100004077774924uLL);
      *(void *)(v6 + 8_Block_object_dispose(&STACK[0x510], 8) = v27;
      if (!v27) {
        return 8;
      }
      if (*(unsigned char *)a1 != 7 && *(_WORD *)(a1 + 2094))
      {
        unsigned __int16 v28 = 3 * *(_WORD *)(a1 + 2094);
        if ((v28 & 7) != 0) {
          size_t v29 = (v28 >> 3) + 1;
        }
        else {
          size_t v29 = v28 >> 3;
        }
        *(_WORD *)(v6 + 112) = v29;
        int v30 = malloc_type_calloc(v29, 1uLL, 0x100004077774924uLL);
        *(void *)(v6 + 104) = v30;
        if (!v30) {
          return 8;
        }
        *(_WORD *)(v6 + 112) *= 8;
      }
      uint64_t v31 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 12), 1uLL, 0x100004077774924uLL);
      *(void *)(*(void *)(a1 + 2184) + 1184) = v31;
      if (!v31) {
        return 8;
      }
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 8), 0);
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 12), *(void **)(*(void *)(a1 + 2184) + 1184), (unsigned int *)&v41[1]) == 8)return 8; {
      uint64_t v32 = *(unsigned __int16 **)(*(void *)(a1 + 2184) + 1184);
      }
      unsigned int v33 = (bswap32(*v32) >> 16) - 1;
      int v34 = *(_WORD **)(a1 + 2192);
      v34[1065] = v33;
      unsigned int v35 = bswap32(v32[1]) >> 16;
      v34[1063] = v35;
      v34[1064] = v33 + 2 * v35;
      v34[1066] = (bswap32(v32[2]) >> 16) - 1;
      unsigned __int16 v36 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 20), 1uLL, 0x100004077774924uLL);
      *(void *)(*(void *)(a1 + 2184) + 40) = v36;
      if (!v36) {
        return 8;
      }
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 16), 0);
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 20), *(void **)(*(void *)(a1 + 2184) + 40), (unsigned int *)&v41[1]) == 8)return 8; {
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 24), 0);
      }
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 28), *(void **)(v6 + 96), (unsigned int *)&v41[1]) == 8) {
        return 8;
      }
      int v37 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 36), 1uLL, 0x100004077774924uLL);
      if (!v37) {
        return 8;
      }
      uint64_t v38 = v37;
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 32), 0);
      if (SLRead(v41[0], *(unsigned __int16 *)(v6 + 36), v38, &v41[1]) == 8) {
        return 8;
      }
      *(void *)(v6 + 72) = OpenOutputBuffer(*(unsigned __int16 *)(*(void *)(a1 + 2184) + 2));
      get_counts((unsigned __int8 *)v38, *(void *)(v6 + 48));
      free(v38);
      *(_WORD *)(v6 + 64) = build_tree(*(unsigned __int16 **)(v6 + 48));
      **(_WORD **)(a1 + 2184) = 0;
      uint64_t v39 = *(void *)(a1 + 2192);
      *(_WORD *)(v39 + 16) = -1;
      *(_WORD *)(v39 + 2) = 0;
      uint64_t v40 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
      uint64_t v13 = 0;
      *(void *)(*(void *)(a1 + 2184) + 56) = v40;
      if (!v40) {
        return 8;
      }
    }
    else
    {
      uint64_t v13 = 8;
    }
    free(v8);
  }
  return v13;
}

unsigned __int8 *get_counts(unsigned __int8 *result, uint64_t a2)
{
  for (uint64_t i = 0; i != 2048; i += 8)
    *(_WORD *)(a2 + i) = 0;
  unsigned int v3 = *result;
  int v4 = 2;
  for (uint64_t j = 1; ; uint64_t j = (__int16)(v7 + 1))
  {
    unsigned int v6 = result[j];
    if (v3 <= v6)
    {
      unsigned int v3 = v3;
      do
      {
        int v7 = v4 + 1;
        *(_WORD *)(a2 + 8 * (__int16)v3++) = result[(__int16)v4++];
      }
      while ((int)v6 >= (__int16)v3);
    }
    else
    {
      int v7 = v4;
    }
    unsigned int v3 = result[(__int16)v7];
    if (!result[(__int16)v7]) {
      break;
    }
    int v4 = v7 + 2;
  }
  *(_WORD *)(a2 + 204_Block_object_dispose(&STACK[0x510], 8) = 1;
  return result;
}

uint64_t PDsort(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2168);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  vpHash_index_tab = v2;
  vpRam_buff = v3;
  uint64_t v4 = *(unsigned __int16 *)(v1 + 4);
  if (*(_WORD *)(v1 + 4))
  {
    unsigned __int16 v5 = 0;
    unsigned int v6 = (unsigned __int16 *)v2;
    unint64_t v7 = v2 + 2 * v4;
    do
    {
      unsigned int v8 = *v6;
      if (v8 <= 0xFFFD)
      {
        uint64_t v9 = v5++;
        *(_WORD *)(v2 + 2 * v9) = v8;
      }
      ++v6;
    }
    while ((unint64_t)v6 < v7);
  }
  else
  {
    unsigned __int16 v5 = 0;
  }
  return HeapSort(v5);
}

uint64_t HeapSort(uint64_t result)
{
  if (result >= 2)
  {
    viHeapLast = result - 1;
    int v1 = (unsigned __int16)(result - 2) >> 1;
    do
    {
      int v2 = (unsigned __int16)v1;
      uint64_t result = DownHeap_0((unsigned __int16)v1--);
    }
    while (v2);
    for (unsigned __int16 i = viHeapLast; viHeapLast; unsigned __int16 i = viHeapLast)
    {
      uint64_t v4 = vpHash_index_tab;
      __int16 v5 = *(_WORD *)vpHash_index_tab;
      *(_WORD *)vpHash_index_tab = *(_WORD *)(vpHash_index_tab + 2 * i);
      viHeapLast = i - 1;
      *(_WORD *)(v4 + 2 * i) = v5;
      uint64_t result = DownHeap_0(0);
    }
  }
  return result;
}

uint64_t DownHeap_0(uint64_t result)
{
  int v1 = result;
  uint64_t v2 = vpHash_index_tab;
  uint64_t v3 = *(unsigned __int16 *)(vpHash_index_tab + 2 * result);
  unsigned int v4 = (unsigned __int16)viHeapLast;
  unsigned int v21 = (unsigned __int16)(viHeapLast - 1) >> 1;
  if (v21 >= result)
  {
    __int16 v16 = *(_WORD *)(vpHash_index_tab + 2 * result);
    uint64_t v20 = vpRam_buff;
    unsigned __int16 v19 = *(unsigned __int8 *)(vpRam_buff + v3 + 2);
    int v18 = (unsigned __int8 *)(vpRam_buff + v3 + 3);
    unsigned int v17 = (unsigned __int16)viHeapLast;
    while (1)
    {
      if (v4 >= ((unsigned __int16)(2 * v1) | 1u))
      {
        uint64_t v7 = v20 + *(unsigned __int16 *)(v2 + 2 * ((unsigned __int16)(2 * v1) | 1u));
        int v8 = *(unsigned __int8 *)(v7 + 2);
        uint64_t v6 = 3;
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        int v8 = 0;
      }
      if (v4 >= (unsigned __int16)(2 * v1 + 2))
      {
        uint64_t v9 = v20 + *(unsigned __int16 *)(v2 + 2 * (unsigned __int16)(2 * v1 + 2));
        int v10 = *(unsigned __int8 *)(v9 + 2);
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
      }
      int v11 = AsciiStrCmp((unsigned __int8 *)(v7 + v6), v8, (unsigned __int8 *)(v9 + v6), v10);
      int v12 = v11;
      uint64_t v13 = v11 < 0 ? v9 : v7;
      int v14 = v11 < 0 ? v10 : v8;
      uint64_t result = AsciiStrCmp(v18, v19, (unsigned __int8 *)(v13 + v6), v14);
      if ((result & 0x80000000) == 0) {
        break;
      }
      uint64_t v15 = (unsigned __int16)v1;
      if (v12 < 0) {
        int v1 = 2 * v1 + 2;
      }
      else {
        int v1 = (2 * v1) | 1;
      }
      uint64_t v5 = (unsigned __int16)v1;
      *(_WORD *)(v2 + 2 * v15) = *(_WORD *)(v2 + 2 * (unsigned __int16)v1);
      unsigned int v4 = v17;
      if (v21 < (unsigned __int16)v1) {
        goto LABEL_23;
      }
    }
    uint64_t v5 = (unsigned __int16)v1;
LABEL_23:
    LOWORD(v3) = v16;
  }
  else
  {
    uint64_t v5 = result;
  }
  *(_WORD *)(v2 + 2 * v5) = v3;
  return result;
}

uint64_t AsciiStrCmp(unsigned __int8 *a1, unsigned __int16 a2, unsigned __int8 *a3, int a4)
{
  if (a4 < 1)
  {
    return 0;
  }
  else if ((__int16)a2 < 1)
  {
    return -1;
  }
  else
  {
    int v4 = 0;
    while (1)
    {
      int v5 = *a1;
      int v6 = *a3;
      if (((v6 ^ v5) & 0xFFFFFFDF) != 0) {
        break;
      }
      ++a1;
      ++a3;
      if ((__int16)++v4 >= (__int16)a2)
      {
        int v4 = a2;
        goto LABEL_11;
      }
    }
    if (a4 > (__int16)v4) {
      return (__int16)((v5 | 0x20) - (v6 | 0x20));
    }
LABEL_11:
    if (v4 == a2) {
      return -1;
    }
    else {
      return 0;
    }
  }
}

uint64_t PDsavsort(unsigned int a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(*(void *)(*(void *)pMCPbuff + 8 * a1) + 2168);
  if (a2)
  {
    int v4 = malloc_type_calloc(1uLL, 2 * *(unsigned __int16 *)(v3 + 2), 0x1000040BDFB0063uLL);
    uint64_t v5 = *(void *)pMCPbuff;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2168) + 64) = v4;
    if (v4)
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 8 * v2) + 2168);
      memcpy(*(void **)(v6 + 64), *(const void **)(v6 + 32), *(unsigned __int16 *)(v6 + 2));
      return 0;
    }
    else
    {
      return 8;
    }
  }
  else
  {
    memcpy(*(void **)(v3 + 32), *(const void **)(v3 + 64), *(unsigned __int16 *)(v3 + 2));
    free(*(void **)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2168) + 64));
    uint64_t result = 0;
    *(void *)(*(void *)(*(void *)(*(void *)pMCPbuff + 8 * v2) + 2168) + 64) = 0;
  }
  return result;
}

uint64_t PDSFcorbru(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, unsigned __int16 a6, unsigned int a7, unsigned int a8, int a9, __int16 a10)
{
  __int16 v13 = 0;
  int v14 = a10;
  unsigned int v79 = (unsigned __int16)a7 + 0xFFFF;
  uint64_t v73 = a1[7];
  unsigned int v72 = (unsigned __int16)a8 + 0xFFFF;
  int v74 = HIWORD(v79) & HIWORD(v72);
  unsigned int v75 = HIWORD(v79) & (((unsigned __int16)a9 + 0xFFFF) >> 16);
LABEL_2:
  char v15 = 0;
  uint64_t v16 = -(uint64_t)v13;
  int v17 = (__int16)(a4 - a6);
  if (v17 >= 0) {
    int v18 = (__int16)(a4 - a6);
  }
  else {
    int v18 = -v17;
  }
  char v19 = 1;
  int v76 = v18;
  while (1)
  {
    int v20 = (__int16)a6;
    int v21 = (__int16)a4;
    if ((a6 & 0x8000) != 0 || (a4 & 0x8000) != 0)
    {
      if ((v19 & (v13 != 0)) != 1) {
        return 0;
      }
      goto LABEL_108;
    }
    if (v18 > v14)
    {
      if ((v19 & (v13 != 0)) == 0) {
        return 0;
      }
      goto LABEL_108;
    }
    LOWORD(v22) = 0;
    BOOL v23 = a4 != 0;
    BOOL v24 = a6 != 0;
    if (a4 && a6)
    {
      LOWORD(v22) = 0;
      while (*(unsigned __int8 *)(a3 + (unsigned __int16)v22) == *(unsigned __int8 *)(a5 + (unsigned __int16)v22))
      {
        int v22 = (__int16)(v22 + 1);
        BOOL v24 = v22 < (__int16)a6;
        BOOL v23 = v22 < (__int16)a4;
        if (v22 >= (__int16)a4 || v22 >= (__int16)a6) {
          goto LABEL_21;
        }
      }
      BOOL v23 = 1;
      BOOL v24 = 1;
    }
LABEL_21:
    if (a4 == (unsigned __int16)v22 && a6 == (unsigned __int16)v22) {
      return 1;
    }
    int v25 = (__int16)v22;
    char v81 = v19;
    if (a7)
    {
      if (v23 && v24)
      {
        if (a8)
        {
          unsigned int v26 = (unsigned __int8 *)(a3 + (__int16)v22);
          if ((*(_DWORD *)(v73 + 4 * *v26) & 0x10000000) != 0)
          {
            uint64_t v27 = (unsigned __int8 *)(a5 + v25);
            if ((*(_DWORD *)(v73 + 4 * *v27) & 0x10000000) != 0)
            {
              uint64_t v28 = (uint64_t)(v26 + 1);
              uint64_t v29 = (uint64_t)(v27 + 1);
              WORD2(v71) = a10;
              uint64_t v30 = (__int16)(a4 + ~(_WORD)v25);
              uint64_t v31 = (__int16)(a6 + ~(_WORD)v25);
              LODWORD(v71) = a9;
              uint64_t v33 = (__int16)v79;
              uint64_t v32 = (__int16)v72;
              goto LABEL_42;
            }
          }
        }
        if ((_WORD)a9)
        {
          uint64_t v28 = a3 + v25 + 1;
          uint64_t v29 = a5 + v25 + 1;
          WORD2(v71) = a10;
          WORD1(v71) = HIWORD(a9);
          uint64_t v30 = (__int16)(a4 + ~(_WORD)v25);
          uint64_t v31 = (__int16)(a6 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          uint64_t v32 = a8;
          uint64_t v33 = (__int16)v79;
LABEL_42:
          if (PDSFcorbru(a1, a2, v28, v30, v29, v31, v33, v32, v71)) {
            return 1;
          }
        }
      }
LABEL_43:
      if ((v15 & 1) == 0)
      {
        uint64_t v42 = v25 + 1;
        if ((int)v42 < v21
          && (int)v42 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2146) != 4)
        {
          unsigned int v68 = 2;
          goto LABEL_110;
        }
        uint64_t v43 = v25 + 2;
        if (v25 + 2 < v21
          && (int)v43 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v43)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2146) != 4)
        {
          unsigned int v68 = 3;
LABEL_110:
          int v14 = a10;
          unint64_t v69 = v25 + (unint64_t)v68;
          a3 += v69;
          a4 = v21 - v69;
          a5 += v69;
          a6 = v20 - v69;
          v13 += v69;
          goto LABEL_2;
        }
      }
      if (v23)
      {
        if (v25 || *(__int16 *)(a2 + 2150) > v21)
        {
          unsigned __int16 v36 = (unsigned __int8 *)(a3 + v25);
          if (*v36 == *(v36 - 1))
          {
            uint64_t v37 = (uint64_t)(v36 + 1);
            uint64_t v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            uint64_t v39 = (__int16)(v20 - v25);
            uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
            uint64_t v41 = a7;
            LODWORD(v71) = a9;
            goto LABEL_65;
          }
        }
        if (v74)
        {
          uint64_t v44 = (unsigned __int8 *)(a3 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v44) & 0x10000000) != 0)
          {
            uint64_t v37 = (uint64_t)(v44 + 1);
            uint64_t v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            uint64_t v39 = (__int16)(v20 - v25);
            uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            uint64_t v41 = (__int16)v79;
            uint64_t v47 = (__int16)v72;
            __int16 v45 = a1;
            uint64_t v46 = a2;
            goto LABEL_67;
          }
        }
        if (v75)
        {
          uint64_t v37 = a3 + v25 + 1;
          uint64_t v38 = a5 + v25;
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          uint64_t v39 = (__int16)(v20 - v25);
          uint64_t v40 = (__int16)(v21 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          uint64_t v41 = (__int16)v79;
LABEL_65:
          __int16 v45 = a1;
          uint64_t v46 = a2;
          uint64_t v47 = a8;
LABEL_67:
          if (PDSFcorbru(v45, v46, v37, v40, v38, v39, v41, v47, v71)) {
            return 1;
          }
        }
      }
      int v14 = a10;
      if (v24)
      {
        if ((v25 || *(__int16 *)(a2 + 2152) > v20) && (uint64_t v48 = (unsigned __int8 *)(a5 + v25), *v48 == *(v48 - 1)))
        {
          uint64_t v49 = a3 + v25;
          int v50 = v48 + 1;
          WORD2(v71) = a10 - 1;
          uint64_t v51 = (__int16)(v21 - v25);
          uint64_t v52 = (__int16)(v20 + ~(_WORD)v25);
          uint64_t v53 = a7;
          LODWORD(v71) = a9;
          uint64_t v54 = a1;
          uint64_t v55 = a2;
          uint64_t v56 = a8;
LABEL_76:
          if (PDSFcorbru(v54, v55, v49, v51, v50, v52, v53, v56, v71)) {
            return 1;
          }
        }
        else if (v74)
        {
          uint64_t v57 = (unsigned __int8 *)(a5 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v57) & 0x10000000) != 0)
          {
            uint64_t v49 = a3 + v25;
            int v50 = v57 + 1;
            WORD2(v71) = a10 - 1;
            uint64_t v51 = (__int16)(v21 - v25);
            uint64_t v52 = (__int16)(v20 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            uint64_t v53 = (__int16)v79;
            uint64_t v56 = (__int16)v72;
            uint64_t v54 = a1;
            uint64_t v55 = a2;
            goto LABEL_76;
          }
        }
        if (v75)
        {
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          LOWORD(v71) = a9 - 1;
          if (PDSFcorbru(a1, a2, a3 + v25, (__int16)(v21 - v25), a5 + v25 + 1, (__int16)(v20 + ~(_WORD)v25), (__int16)v79, a8, v71))return 1; {
        }
          }
      }
      if ((HIWORD(v79) & ((HIWORD(a9) + 0xFFFF) >> 16)) != 0)
      {
        int v58 = *(unsigned __int8 *)(a2 + 2164);
        if (v58 != 255)
        {
          __int16 v59 = 0;
          while (1)
          {
            unsigned int v60 = (__int16)(v20 - v58);
            if (((v20 - v58) & 0x8000) != 0 || (int)v60 > v25)
            {
              if ((int)v60 > v25) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }
            uint64_t v61 = *(unsigned __int8 *)(a2 + (v59 | 1) + 2164);
            int v62 = *(unsigned __int8 **)(a1[19] + 8 * v61);
            if (*v62 == *(unsigned __int8 *)(a3 + (unsigned __int16)(v20 - v58))) {
              break;
            }
LABEL_105:
            v59 += 2;
            int v58 = *(unsigned __int8 *)(a2 + v59 + 2164);
            if (v58 == 255) {
              goto LABEL_106;
            }
          }
          unsigned int v63 = *(unsigned __int8 *)(a1[21] + v61);
          if (v63 != 2)
          {
            if (v63 != 3)
            {
              if (v63 != 4)
              {
LABEL_91:
                uint64_t v64 = *(unsigned __int8 *)(a1[22] + v61);
                if (*(_WORD *)(a2 + 2)
                  || (v64 + v60 == v20 ? (char v65 = 1) : (char v65 = 2),
                      *(unsigned __int16 *)(a2 + 2152) == (unsigned __int16)v20
                    ? (BOOL v66 = v20 == v58)
                    : (BOOL v66 = 0),
                      !v66 ? (char v67 = v65) : (char v67 = 4),
                      (v67 & *((unsigned char *)a1 + v61 + 183)) != 0))
                {
                  WORD2(v71) = a10;
                  LODWORD(v71) = a9 - 0x10000;
                  if (PDSFcorbru(a1, a2, a3 + v60 + v63, (__int16)(v21 - v60 - v63), a5 + v60 + v64, v58 - v64, (__int16)v79, a8, v71))return 1; {
                }
                  }
                goto LABEL_105;
              }
              if (v62[3] != *(unsigned __int8 *)(a3 + v60 + 3)) {
                goto LABEL_105;
              }
            }
            if (v62[2] != *(unsigned __int8 *)(a3 + v60 + 2)) {
              goto LABEL_105;
            }
          }
          if (v62[1] != *(unsigned __int8 *)(a3 + v60 + 1)) {
            goto LABEL_105;
          }
          goto LABEL_91;
        }
      }
LABEL_106:
      char v35 = v81 & (v13 != 0);
      goto LABEL_107;
    }
    if ((!v24 || *(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a5 + (__int16)v22 + 1))
      && (!v23 || *(unsigned __int8 *)(a3 + (__int16)v22 + 1) == *(unsigned __int8 *)(a5 + (__int16)v22)))
    {
      goto LABEL_43;
    }
    if (!(_WORD)v22 && *(__int16 *)(a2 + 2150) <= (__int16)a4) {
      goto LABEL_43;
    }
    uint64_t v34 = (__int16)v22 - 1;
    if (*(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a3 + v34)
      || !(_WORD)v22 && *(__int16 *)(a2 + 2152) <= (__int16)a6)
    {
      goto LABEL_43;
    }
    if (*(unsigned __int8 *)(a5 + (__int16)v22) == *(unsigned __int8 *)(a5 + v34)) {
      goto LABEL_43;
    }
    char v35 = v19 & (v13 != 0);
    int v14 = a10;
LABEL_107:
    uint64_t v16 = -(uint64_t)v13;
    int v18 = v76;
    if ((v35 & 1) == 0) {
      return 0;
    }
LABEL_108:
    char v19 = 0;
    a3 += v16;
    a5 += v16;
    a4 = v13 + v21;
    a6 = v13 + v20;
    char v15 = 1;
  }
}

uint64_t PDSFaccent(unsigned __int8 *a1, int a2, uint64_t a3, __int16 *a4)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  BOOL v6 = *(unsigned char *)(a3 + 55) == 8 && (a4[1741] & 0x40) != 0 && *a4 == 3;
  __int16 v105 = 0;
  uint64_t v7 = *(void *)(a3 + 56);
  int v8 = *(unsigned __int8 **)(*((void *)a4 + 4) + 24);
  uint64_t v9 = *(unsigned __int8 *)(a3 + 136);
  a4[1062] = 0;
  if (a2 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = (unsigned __int16)a2;
    uint64_t v11 = (unsigned __int16)a2;
    int v12 = v8;
    do
    {
      unsigned int v14 = *a1++;
      uint64_t v13 = v14;
      int v15 = *(_DWORD *)(v7 + 4 * v14);
      if ((v15 & 0x4064000) != 0 && (!v6 || (*(void *)&v15 & 0x40000) == 0))
      {
        if (*(unsigned char *)(a3 + 55) == 15)
        {
          if ((_BYTE)v13 == 1)
          {
            LOBYTE(v13) = 1;
          }
          else if ((v15 & 0x4020000) != 0)
          {
            LOBYTE(v13) = v13 - 1;
          }
        }
        else if ((_BYTE)v13 != 0xE0 && ((0x61A300E8uLL >> (v13 + 32)) & 1) == 0)
        {
          LOBYTE(v13) = Lat_1_acc[v13 - 224];
        }
      }
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  __int16 v16 = 0;
  v8[v10] = 0;
  memset(v107, 0, 224);
  memset(v106, 0, sizeof(v106));
  *((unsigned char *)v106 + v8[1]) = 1;
  memset(&v107[14], 0, 32);
  *((unsigned char *)v107 + *v_Block_object_dispose(&STACK[0x510], 8) = 1;
  if (!*(_WORD *)(a3 + 104) || a2 < 1) {
    return v16;
  }
  BOOL v96 = v6;
  uint64_t v95 = v9;
  int v97 = v8;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  uint64_t v19 = (unsigned __int16)a2;
  LOWORD(v20) = a4[1081];
  do
  {
    __int16 v21 = 0;
    int v22 = &v97[v17];
    do
    {
      if ((int)SLstrncmp(*(unsigned char **)(*(void *)(a3 + 160) + 8 * (__int16)((v21 + (__int16)v20) >> 1)), v22, *(unsigned __int8 *)(*(void *)(a3 + 176) + (__int16)((v21 + (__int16)v20) >> 1))) < 0)__int16 v21 = (v21 + (__int16)v20) >> 1; {
      else
      }
        LOWORD(v20) = (v21 + (__int16)v20) >> 1;
    }
    while ((__int16)v20 - v21 > 1);
    do
    {
      uint64_t v23 = (__int16)v20;
      if (*(unsigned char *)(*(void *)(a3 + 176) + (__int16)v20) == 1
        && *(unsigned char *)(*(void *)(a3 + 168) + (__int16)v20) == 1
        && (uint64_t v24 = **(unsigned __int8 **)(*(void *)(a3 + 160) + 8 * (__int16)v20), v24 == *v22)
        && (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) & 0x4064000) != (unint64_t)(*(_DWORD *)(v7 + 4 * v24) & 0x4064000)
        && (*(_DWORD *)&v96 & (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) >> 18) & 1) == 0)
      {
        int v25 = a4 + 1082;
        LOBYTE(v25[v18]) = a2 - v17;
        __int16 v26 = v18 * 2 + 1;
        ++v18;
        *((unsigned char *)v25 + v26) = v20;
        if ((_WORD)v17)
        {
          if ((unsigned __int16)v17 != 1) {
            goto LABEL_35;
          }
          uint64_t v27 = v106;
        }
        else
        {
          uint64_t v27 = v107;
        }
        *((unsigned char *)v27 + **(unsigned __int8 **)(*(void *)(a3 + 152) + 8 * (__int16)v20)) = 1;
      }
      else
      {
        int v20 = a4[1081];
        if ((int)v23 >= v20 || **(unsigned __int8 **)(*(void *)(a3 + 160) + 8 * v23) > *v22) {
          goto LABEL_42;
        }
      }
LABEL_35:
      int v20 = (__int16)(v23 + 1);
    }
    while (v20 < a4[1081]);
    LOWORD(v20) = a4[1081];
LABEL_42:
    ++v17;
  }
  while (v17 != v19);
  if (v18 * 2)
  {
    uint64_t v28 = a4 + 1082;
    LOBYTE(v28[v18]) = -1;
    *((unsigned char *)v28 + (__int16)(v18 * 2 + 1)) = -1;
    char v104 = 0;
    uint64_t v29 = *(void *)(a3 + 1184);
    uint64_t v30 = a4[1064];
    uint64_t v31 = a4[1063];
    uint64_t v32 = (unsigned __int8 *)(v29 + v31 + v30);
    int v33 = *v32;
    uint64_t v34 = (unsigned __int8 *)(v29 + v30);
    int v35 = *v34;
    int v36 = v32[1];
    int v37 = v34[1];
    uint64_t v38 = a4[1065];
    uint64_t v39 = *(unsigned __int8 *)(v29 + v38);
    unsigned int v40 = *(unsigned __int8 *)(v29 + v38 + v31);
    char v100 = *(unsigned char *)(v29 + v38);
    char v101 = v40;
    if (v31 >= 2)
    {
      int v41 = 0;
      int v42 = 0;
      int v43 = (v36 | (v37 << 8)) - 1;
      int v44 = (v33 | (v35 << 8)) - 1;
      LOWORD(v45) = 1;
      do
      {
        uint64_t v46 = *(void *)(a3 + 1184);
        if ((unsigned __int16)v44 >= (unsigned __int16)v43)
        {
          uint64_t v45 = (__int16)v45 + 1;
          uint64_t v47 = a4[1065];
          uint64_t v48 = (__int16)v45 - 1;
          uint64_t v39 = *(unsigned __int8 *)(v46 + v48 + v47);
          unsigned int v40 = *(unsigned __int8 *)(v46 + v47 + (int)v48 + (__int16)v31);
          char v100 = v39;
          uint64_t v49 = a4[1064];
          int v50 = *(unsigned __int8 *)(v46 + v49 + (__int16)v31 + (__int16)v45);
          LODWORD(v49) = *(unsigned __int8 *)(v46 + v49 + v45);
          char v101 = v40;
          LODWORD(v49) = v50 | (v49 << 8);
          int v44 = v43;
          int v43 = v49 - 1;
        }
        int v51 = v44 + 1;
        int v52 = *(unsigned __int8 *)(v46 + (unsigned __int16)(v44 + 1) - 1);
        if (v52 == 255)
        {
          v44 += 3;
          int v55 = (unsigned __int16)v44;
          int v54 = (unsigned __int16)v44 - 2;
        }
        else
        {
          int v53 = a4[1066] + v52;
          int v54 = v53 - 1;
          int v55 = v53 + 256;
          int v44 = v51;
        }
        int v56 = *(unsigned __int8 *)(v46 + v55 - 1);
        int v57 = *(unsigned __int8 *)(v46 + v54);
        if (v57) {
          int v41 = v57;
        }
        char v102 = v41;
        if (v56) {
          int v42 = v56;
        }
        char v103 = v42;
        BOOL v60 = v42 == 32 && v41 == 32 && v40 != 32;
        if (*((unsigned char *)v107 + v39) && *((unsigned char *)v106 + v40))
        {
          if (v60) {
            goto LABEL_82;
          }
          int v61 = *((unsigned __int8 *)a4 + 2164);
          if (v61 == 255) {
            goto LABEL_80;
          }
          __int16 v62 = 0;
          __int16 v63 = 0;
          do
          {
            unsigned __int16 v64 = a2 - v61;
            if ((v64 & 0xFFFE) == 2
              && *(&v100 + v64) == **(unsigned char **)(*(void *)(a3 + 152)
                                              + 8 * *((unsigned __int8 *)a4 + ((v63 * 2) | 1) + 2164)))
            {
              ++v62;
            }
            int v61 = LOBYTE(a4[++v63 + 1082]);
          }
          while (v61 != 255);
          if (!v62)
          {
LABEL_80:
            if (v42 != 32 && v42 != v97[3]) {
              continue;
            }
          }
          else if (v42 == 32 || v62 != 1 || v42 == v97[3])
          {
LABEL_82:
            if (a4[1062] > 499) {
              break;
            }
            for (uint64_t i = 0; i != 4; ++i)
              *((unsigned char *)&a4[2 * a4[1062] + 60] + i) = *(&v100 + i);
            ++a4[1062];
            LOWORD(v31) = a4[1063];
            continue;
          }
          if (v41 == v97[2]) {
            goto LABEL_82;
          }
        }
        else
        {
          int v44 = v43;
        }
      }
      while ((__int16)v45 < (__int16)v31);
    }
    int v66 = *a4;
    if (v66 <= 99)
    {
      *a4 = 101;
      a4[1742] |= 0x200u;
      uint64_t v67 = *(void *)(a3 + 128);
      int v68 = 255;
      do
      {
        *((unsigned char *)a4 + 214_Block_object_dispose(&STACK[0x510], 8) = ++v68;
        unint64_t v69 = (unsigned __int8 *)(v67 + (char)v68);
        __int16 v70 = *v69;
        uint64_t v71 = &v69[v95];
        a4[1072] = v70;
        int v72 = *v71;
        a4[1073] = v72;
        uint64_t v73 = &v71[v95];
        __int16 v74 = *v73;
        unsigned int v75 = &v73[v95];
        a4[1068] = v74;
        a4[1069] = *v75;
        int v76 = &v75[v95];
        __int16 v77 = *v76;
        int v78 = &v76[v95];
        a4[1070] = v77;
        a4[1071] = *v78;
        unsigned int v79 = &v78[v95];
        __int16 v80 = *v79;
        char v81 = &v79[v95];
        a4[1067] = v80;
        a4[1077] = *v81;
        long long v82 = &v81[v95];
        __int16 v83 = *v82;
        long long v84 = &v82[v95];
        a4[1078] = v83;
        a4[1079] = *v84;
        a4[1080] = v84[v95];
      }
      while (v72 != 4);
    }
    *((void *)a4 + 14) = a4 + 60;
    if (a4[1062] >= 1)
    {
      uint64_t v85 = 0;
      do
      {
        uint64_t v86 = &a4[2 * v85];
        if ((int)SLstrncmp(*((unsigned char **)a4 + 14), (unsigned __int8 *)v86 + 120, 4) <= 0)
        {
          *((void *)a4 + 14) = v86 + 60;
          v99[0] = *((_DWORD *)v86 + 30);
          unsigned int v87 = *(unsigned __int8 *)(a3 + 54);
          if (v87 >= 5)
          {
            int v88 = 4;
            do
              *((unsigned char *)v99 + (__int16)v88++) = 0;
            while ((int)v87 > (__int16)v88);
          }
          int v89 = SFbisrch((uint64_t)v99, 0, v87 - 1, &v105, a3);
          unsigned int v90 = *(unsigned __int8 *)(a3 + 54);
          if (v90 >= 5)
          {
            int v91 = 4;
            do
              *((unsigned char *)v99 + (__int16)v91++) = -1;
            while ((int)v90 > (__int16)v91);
          }
          __int16 v92 = SFbisrch((uint64_t)v99, 0, v90 - 1, &v105, a3);
          __int16 v93 = v92 - v89 + v105;
          __int16 v105 = v93;
          if (*((unsigned char *)a4 + 3194) == 1) {
            PDdecod2(v97, a2, v89, v93, a3, (unsigned __int16 *)a4);
          }
        }
        ++v85;
      }
      while (v85 < a4[1062]);
    }
    *a4 = v66;
    if (v66 == 3) {
      a4[1742] &= ~0x200u;
    }
    return a4[20];
  }
  else
  {
    return 0;
  }
}

uint64_t LMargin(unsigned __int8 *a1, int a2, int a3)
{
  if (!a3)
  {
    uint64_t v3 = a1 + 1;
    return *v3;
  }
  if (a2)
  {
    uint64_t v3 = a1 + 2;
    return *v3;
  }
  if (a1[4] <= a3 && (!a1[5] || a1[5] >= a3))
  {
    uint64_t v3 = a1 + 6;
    return *v3;
  }
  return 0;
}

uint64_t RMargin(unsigned __int8 *a1, int a2, int a3)
{
  if (a2) {
    return *a1;
  }
  if (!a3)
  {
    a1 += 3;
    return *a1;
  }
  if (a1[4] <= a3 && (!a1[5] || a1[5] >= a3))
  {
    a1 += 7;
    return *a1;
  }
  return 0;
}

uint64_t inithyphen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1116))
  {
    *(unsigned char *)(a3 + 1116) = 1;
    *(unsigned char *)(a3 + 1112) = 45;
    *(_WORD *)(a3 + 1114) = 11520;
  }
  *(void *)uint64_t v19 = 0;
  int v4 = SLOpen(a1, a2, &v19[1], 0);
  uint64_t result = 0;
  if (v4 == 8) {
    return result;
  }
  uint64_t result = (uint64_t)malloc_type_malloc(0x400uLL, 0x7CDF28DFuLL);
  if (!result) {
    return result;
  }
  BOOL v6 = (unsigned __int8 *)result;
  uint64_t result = (uint64_t)malloc_type_calloc(2uLL, 0x2454uLL, 0x5E610005uLL);
  brtable = result;
  if (!result) {
    return result;
  }
  uint64_t result = (uint64_t)malloc_type_malloc(0x2454uLL, 0x71E655DEuLL);
  keytable = result;
  if (!result) {
    return result;
  }
  if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8)
  {
LABEL_8:
    SLClose(v19[1]);
    free(v6);
    return 0;
  }
  __int16 v7 = v19[0];
  if (!LOWORD(v19[0]))
  {
    __int16 v7 = -1;
    uint64_t v9 = v6;
LABEL_62:
    int v12 = 0;
LABEL_63:
    int v13 = 0;
    while (1)
    {
      if (!v7)
      {
        if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8) {
          goto LABEL_8;
        }
        __int16 v7 = v19[0];
        uint64_t v9 = v6;
      }
      int v15 = *v9++;
      int v14 = v15;
      if (v15 == 36) {
        break;
      }
      --v7;
      if (v14 == 32)
      {
        *(_WORD *)(brtable + 2 * (__int16)v12++) = v13;
        goto LABEL_63;
      }
      v13 *= 16;
      switch(v14)
      {
        case '0':
          continue;
        case '1':
          v13 |= 1u;
          break;
        case '2':
          v13 |= 2u;
          break;
        case '3':
          v13 |= 3u;
          break;
        case '4':
          v13 |= 4u;
          break;
        case '5':
          v13 |= 5u;
          break;
        case '6':
          v13 |= 6u;
          break;
        case '7':
          v13 |= 7u;
          break;
        case '8':
          v13 |= 8u;
          break;
        case '9':
          v13 |= 9u;
          break;
        default:
          switch(v14)
          {
            case 'a':
              v13 |= 0xAu;
              continue;
            case 'b':
              v13 |= 0xBu;
              continue;
            case 'c':
              v13 |= 0xCu;
              continue;
            case 'd':
              v13 |= 0xDu;
              continue;
            case 'e':
              v13 |= 0xEu;
              continue;
            case 'f':
              v13 |= 0xFu;
              continue;
            default:
              return 0;
          }
      }
    }
    free(v6);
    SLClose(v19[1]);
    __int16 v16 = -1;
    do
      ++v16;
    while (*(unsigned char *)(keytable + v16) != 32);
    *(_WORD *)(a3 + 1110) = v16;
    uint64_t v17 = (_WORD *)brtable;
    uint64_t v18 = 9300;
    do
    {
      if (!*v17) {
        *uint64_t v17 = *(_WORD *)(a3 + 1110);
      }
      ++v17;
      --v18;
    }
    while (v18);
    return 1;
  }
  __int16 v8 = 0;
  uint64_t v9 = v6;
  while (1)
  {
    --v7;
    int v11 = *v9++;
    char v10 = v11;
    switch(v11)
    {
      case ' ':
        char v10 = 115;
        break;
      case '$':
        goto LABEL_62;
      case '+':
        char v10 = 55;
        break;
      case '-':
        char v10 = 56;
        break;
      case '0':
        char v10 = 32;
        break;
      case '1':
        char v10 = 105;
        break;
      case '2':
        char v10 = 104;
        break;
      case '3':
        char v10 = 103;
        break;
      case '4':
        char v10 = 102;
        break;
      case '5':
        char v10 = 101;
        break;
      case '6':
        char v10 = 100;
        break;
      case '7':
        char v10 = 99;
        break;
      case '8':
        char v10 = 98;
        break;
      case '9':
        char v10 = 97;
        break;
      case '?':
        char v10 = 57;
        break;
      case 'a':
        char v10 = 106;
        break;
      case 'b':
        char v10 = 116;
        break;
      case 'c':
        char v10 = 117;
        break;
      case 'd':
        char v10 = 118;
        break;
      case 'e':
        char v10 = 107;
        break;
      case 'f':
        char v10 = 119;
        break;
      case 'g':
        char v10 = 120;
        break;
      case 'h':
        char v10 = 121;
        break;
      case 'i':
        char v10 = 108;
        break;
      case 'j':
        char v10 = 122;
        break;
      case 'k':
        char v10 = 125;
        break;
      case 'l':
        char v10 = 123;
        break;
      case 'm':
        char v10 = 124;
        break;
      case 'n':
        char v10 = 43;
        break;
      case 'o':
        char v10 = 109;
        break;
      case 'p':
        char v10 = 45;
        break;
      case 'q':
        char v10 = 63;
        break;
      case 'r':
        char v10 = 48;
        break;
      case 's':
        char v10 = 49;
        break;
      case 't':
        char v10 = 50;
        break;
      case 'u':
        char v10 = 110;
        break;
      case 'v':
        char v10 = 51;
        break;
      case 'w':
        char v10 = 52;
        break;
      case 'x':
        char v10 = 53;
        break;
      case 'y':
        char v10 = 111;
        break;
      case 'z':
        char v10 = 54;
        break;
      case '{':
        char v10 = 113;
        break;
      case '|':
        char v10 = 114;
        break;
      case '}':
        char v10 = 112;
        break;
      default:
        break;
    }
    *(unsigned char *)(keytable + v_Block_object_dispose(&STACK[0x510], 8) = v10;
    if (v7) {
      goto LABEL_59;
    }
    if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8) {
      break;
    }
    __int16 v7 = v19[0];
    uint64_t v9 = v6;
LABEL_59:
    ++v8;
    if (!v7)
    {
      __int16 v7 = -1;
      goto LABEL_62;
    }
  }
  free(v6);
  SLClose(v19[1]);
  return 0;
}

uint64_t Hyphenate(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int v10 = a4;
  int v14 = (const char *)(a1 + a4);
  int v15 = strlen(v14);
  if (v15 << 16 >= 1)
  {
    int v16 = 0;
    int v17 = v10;
    do
    {
      *(_DWORD *)(a3 + 4 * ((unsigned __int16)v17 >> 5)) &= ~(1 << ~(_BYTE)v17);
      ++v17;
      ++v16;
    }
    while ((__int16)v15 > (__int16)v16);
  }
  if (!a7 || !a6 || v15 << 16 > 7864320 || (__int16)v15 < (int)(a7 + a6))
  {
    if (a2) {
      strcpy(a2, v14);
    }
LABEL_10:
    LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
    return (__int16)v18;
  }
  bzero((void *)(a5 + 370), 0x2E4uLL);
  *(unsigned char *)a5 = 46;
  *(_WORD *)(a5 + 124) = 30;
  for (__int16 i = 1; ; ++i)
  {
    int v22 = *(unsigned __int8 *)v14++;
    __darwin_ct_rune_t v21 = v22;
    __int16 v23 = 6;
    char v24 = 125;
    if (v22 > 195)
    {
      switch(v21)
      {
        case 196:
          goto LABEL_23;
        case 197:
          goto LABEL_24;
        case 214:
LABEL_21:
          __int16 v23 = 9;
          char v24 = 124;
          goto LABEL_24;
      }
      goto LABEL_26;
    }
    if (v21 > 91)
    {
      if (v21 == 92) {
        goto LABEL_21;
      }
      if (v21 == 93) {
        goto LABEL_24;
      }
      goto LABEL_26;
    }
    if (v21 == 91)
    {
LABEL_23:
      __int16 v23 = 8;
      char v24 = 123;
      goto LABEL_24;
    }
    if (!v21) {
      break;
    }
LABEL_26:
    if (v21 > 0x7E) {
      goto LABEL_10;
    }
    char v24 = __tolower(v21);
    if ((v24 - 97) >= 0x1Du) {
      __int16 v23 = 0;
    }
    else {
      __int16 v23 = word_20CC64E70[(char)(v24 - 97)];
    }
LABEL_24:
    *(unsigned char *)(a5 + i) = v24;
    *(_WORD *)(a5 + 2 * i + 124) = v23;
  }
  *(unsigned char *)(a5 + i) = 46;
  *(_WORD *)(a5 + 2 * i + 124) = 30;
  int v25 = (__int16)(i + 1);
  if ((unsigned __int16)i < 0x7FFFu)
  {
    unint64_t v26 = 0;
    unsigned __int16 v27 = 0;
    unsigned __int16 v28 = 0;
    int v29 = 0;
    uint64_t v30 = (unsigned __int8 *)keytable;
    uint64_t v31 = brtable;
    int v32 = v25 - 3;
    unint64_t v33 = (unsigned __int16)(i + 1);
    int v104 = (__int16)(i + 1);
    while (1)
    {
      if (v26 >= 4) {
        int v29 = *(unsigned __int8 *)(a5 + (v26 - 1));
      }
      if (v26 <= v33) {
        break;
      }
LABEL_35:
      if (++v26 >= v33)
      {
        int v60 = v25 - 1;
        if (v25 >= 2)
        {
          int v64 = 0;
          __int16 v65 = 0;
          do
          {
            uint64_t v66 = v64;
            uint64_t v67 = v64 + 1;
            uint64_t v68 = a5 + 2 * v67;
            int v69 = *(unsigned __int16 *)(v68 + 618);
            uint64_t v70 = v65;
            int v71 = *(unsigned __int16 *)(a5 + 2 * v65 + 864);
            if (v69 == 1 || v71 == 1)
            {
              uint64_t v73 = a5 + 2 * v70;
              if (*(__int16 *)(v73 + 370) <= 7) {
                *(_WORD *)(v73 + 370) = 8;
              }
              uint64_t v74 = a5 + 2 * v67;
              if (*(__int16 *)(v74 + 370) < 7) {
                *(_WORD *)(v74 + 370) = 7;
              }
              uint64_t v75 = a5 + 2 * v66;
              if (*(__int16 *)(v75 + 374) <= 7) {
                *(_WORD *)(v75 + 374) = 8;
              }
              goto LABEL_141;
            }
            if (v69 != 4 && v71 != 4)
            {
              if (v69 == 2)
              {
                uint64_t v77 = a5 + 2 * v66;
                if (*(__int16 *)(v77 + 374) <= 1) {
                  *(_WORD *)(v77 + 374) = 2;
                }
                uint64_t v78 = a5 + 2 * v70;
                if (*(__int16 *)(v78 + 370) > 1) {
                  goto LABEL_141;
                }
                unsigned int v79 = (_WORD *)(v78 + 370);
              }
              else
              {
                if (v69 != 3 && v71 != 2) {
                  goto LABEL_141;
                }
                uint64_t v81 = a5 + 2 * v70;
                if (*(__int16 *)(v81 + 370) <= 1) {
                  *(_WORD *)(v81 + 370) = 2;
                }
                if (v69 != 3) {
                  goto LABEL_141;
                }
                uint64_t v82 = a5 + 2 * v66;
                if (*(__int16 *)(v82 + 374) > 1) {
                  goto LABEL_141;
                }
                if (!*(unsigned char *)(a5 + 1114))
                {
                  *(_WORD *)(v68 + 61_Block_object_dispose(&STACK[0x510], 8) = 6;
                  goto LABEL_141;
                }
                unsigned int v79 = (_WORD *)(v82 + 374);
              }
              *unsigned int v79 = 2;
            }
LABEL_141:
            __int16 v65 = v70 + 1;
            int v64 = (__int16)(v70 + 1);
          }
          while (v60 > v65);
        }
        unint64_t v83 = 0;
        int v84 = 0;
        __int16 v85 = 0;
        __int16 v86 = 0;
        __int16 v87 = 0;
        __int16 v88 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        int v91 = 0;
        int v92 = 0;
        while (2)
        {
          uint64_t v93 = a5 + 2 * v83;
          uint64_t v94 = *(unsigned __int16 *)(v93 + 124);
          int v95 = *(__int16 *)(v93 + 370);
          if ((unsigned __int16)v92 == 2)
          {
            if ((__int16)v94 <= 9)
            {
              if (v86 || v88 && v87 != 1)
              {
                __int16 v88 = 0;
                __int16 v86 = 0;
                int v92 = 1;
              }
              else
              {
                int v92 = 1;
                BOOL v103 = ((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95 || v85 == 0;
                __int16 v88 = 0;
                __int16 v86 = 0;
                if (!v103) {
                  *(_WORD *)(a5 + 2 * v83 + 36_Block_object_dispose(&STACK[0x510], 8) = 1;
                }
              }
              uint64_t v90 = v89;
              int v84 = 1;
              goto LABEL_197;
            }
            if (v94 <= 0x1D)
            {
              if (v94 > 0x18) {
                __int16 v88 = 1;
              }
              ++v87;
              if (((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95) {
                __int16 v86 = 1;
              }
              __int16 v85 = v95 == 0;
            }
          }
          else
          {
            int v96 = (__int16)v92;
            if ((__int16)v92 != 1)
            {
              if ((__int16)v94 <= 9) {
                int v97 = 1;
              }
              else {
                int v97 = v92;
              }
              if ((__int16)v94 <= 9)
              {
                int v98 = 1;
              }
              else
              {
                LODWORD(v94) = v90;
                int v98 = v84;
              }
              if (!(_WORD)v92) {
                int v92 = v97;
              }
              if (v96) {
                uint64_t v94 = v90;
              }
              else {
                uint64_t v94 = v94;
              }
              if (!v96) {
                int v84 = v98;
              }
LABEL_196:
              uint64_t v90 = v89;
LABEL_197:
              ++v83;
              uint64_t v89 = v90;
              uint64_t v90 = v94;
              if (v83 >= v33) {
                goto LABEL_92;
              }
              continue;
            }
            if ((__int16)v94 <= 9)
            {
              ++v84;
              if (v94 == v90)
              {
                if ((__int16)v89 < 1)
                {
                  int v91 = 1;
                }
                else
                {
                  uint64_t v99 = a5 + 2 * v83;
                  int v91 = 1;
                  if (!*(_WORD *)(v99 + 368)) {
                    *(_WORD *)(v99 + 36_Block_object_dispose(&STACK[0x510], 8) = 1;
                  }
                }
                uint64_t v94 = v90;
              }
              else if (((__int16)v90 > 3 || (__int16)v94 <= 6) && ((__int16)v90 < 7 || (__int16)v94 > 3))
              {
                if (v91)
                {
                  int v91 = 0;
                  if (!*(_WORD *)(v93 + 370)) {
                    *(_WORD *)(v93 + 370) = 1;
                  }
                }
              }
              else
              {
                int v91 = 0;
                uint64_t v101 = a5 + 2 * v83;
                *(_WORD *)(v101 + 36_Block_object_dispose(&STACK[0x510], 8) = 8;
                *(_WORD *)(v93 + 370) = 9;
                *(_WORD *)(v101 + 372) = 8;
              }
              goto LABEL_197;
            }
            if (v94 <= 0x1D)
            {
              if ((unsigned __int16)v84 == 2)
              {
                if (*(unsigned char *)(a5 + 1113))
                {
                  uint64_t v100 = a5 + 2 * v83;
                  if (*(_WORD *)(v100 + 368) == 1) {
                    *(_WORD *)(v100 + 36_Block_object_dispose(&STACK[0x510], 8) = 0;
                  }
                }
              }
              int v91 = 0;
              uint64_t v90 = 0;
              if (v94 > 0x18) {
                __int16 v88 = 1;
              }
              if (((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95) {
                __int16 v86 = 1;
              }
              __int16 v85 = v95 == 0;
              __int16 v87 = 1;
              int v92 = 2;
              uint64_t v94 = 0;
              goto LABEL_197;
            }
            if ((unsigned __int16)v84 == 2)
            {
              if (*(unsigned char *)(a5 + 1113))
              {
                uint64_t v102 = a5 + 2 * v83;
                if (*(_WORD *)(v102 + 368) == 1) {
                  *(_WORD *)(v102 + 36_Block_object_dispose(&STACK[0x510], 8) = 0;
                }
              }
              int v84 = 2;
            }
          }
          break;
        }
        uint64_t v94 = v90;
        goto LABEL_196;
      }
    }
    int v34 = 0;
    int v35 = *(unsigned __int8 *)(a5 + v26);
    int v36 = *v30;
    LOWORD(v37) = v26;
    while (1)
    {
      int v38 = *(unsigned __int8 *)(a5 + (__int16)v37);
      if (v36 != 43) {
        goto LABEL_60;
      }
      if (v26 >= 4)
      {
        int v39 = *(__int16 *)(a5 + 124 + 2 * (v26 - 1));
        BOOL v40 = v39 > 9 || v35 == v29;
        if (!v40
          || v26 >= 5 && v39 <= 11 && *(__int16 *)(a5 + 124 + 2 * (v26 - 2)) < 10
          || *(_WORD *)(a5 + 2 * (v26 - 1) + 864) == 5)
        {
          int v41 = v30[(__int16)(v34 + 1)];
          if (v41 == 49)
          {
            int v42 = v34 + 2;
            int v43 = v30[(__int16)(v34 + 2)];
            if (v43 == 32)
            {
              __int16 v44 = 1;
LABEL_58:
              *(_WORD *)(a5 + 2 * v26 + 61_Block_object_dispose(&STACK[0x510], 8) = v44;
              goto LABEL_59;
            }
            LOBYTE(v41) = 49;
            do
            {
              if (v43 == v29) {
                LOBYTE(v41) = 50;
              }
              int v43 = v30[(__int16)++v42];
            }
            while (v43 != 32);
          }
          unsigned int v45 = (v41 - 49);
          if (v45 <= 4)
          {
            __int16 v44 = v45 + 1;
            goto LABEL_58;
          }
        }
      }
LABEL_59:
      uint64_t v46 = *(__int16 *)(v31 + 2 * (__int16)v34);
      int v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
      int v36 = v30[v46];
LABEL_60:
      if (v36 != 45) {
        goto LABEL_75;
      }
      if (v32 > (__int16)v37
        && *(__int16 *)(a5 + 2 * (__int16)v37 + 124) <= 9
        && *(unsigned __int8 *)(a5 + (__int16)v37 - 1) != v38)
      {
        int v47 = v30[(__int16)(v34 + 1)];
        if (v47 == 49)
        {
          int v48 = v34 + 2;
          int v49 = v30[(__int16)(v34 + 2)];
          if (v49 == 32)
          {
            __int16 v50 = 1;
            int v25 = v104;
LABEL_73:
            *(_WORD *)(a5 + 2 * ((__int16)v37 - 1) + 864) = v50;
            goto LABEL_74;
          }
          LOBYTE(v47) = 49;
          do
          {
            if (v49 == v38) {
              LOBYTE(v47) = 53;
            }
            int v49 = v30[(__int16)++v48];
          }
          while (v49 != 32);
        }
        unsigned int v51 = (v47 - 49);
        int v25 = v104;
        if (v51 <= 4)
        {
          __int16 v50 = v51 + 1;
          goto LABEL_73;
        }
      }
LABEL_74:
      uint64_t v52 = *(__int16 *)(v31 + 2 * (__int16)v34);
      int v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
      int v36 = v30[v52];
LABEL_75:
      if (v36 == 63)
      {
        LOWORD(v53) = v34 + 1;
        int v54 = *(unsigned __int16 *)(a5 + 1110);
        if (v54 != (unsigned __int16)(v34 + 1))
        {
          do
          {
            int v55 = &v30[(__int16)v53];
            if (((char)*v55 - 48) < 0xA) {
              unsigned __int16 v28 = (char)*v55 - 48;
            }
            unsigned int v56 = (char)v55[1] - 48;
            if (v56 < 0xA) {
              unsigned __int16 v27 = v56;
            }
            uint64_t v57 = a5 + 2 * (int)(v26 + v28);
            if (*(__int16 *)(v57 + 370) < (int)v27)
            {
              *(_WORD *)(v57 + 370) = v27;
              LOWORD(v54) = *(_WORD *)(a5 + 1110);
            }
            int v53 = *(unsigned __int16 *)(v31 + 2 * (__int16)v53);
          }
          while (v53 != (unsigned __int16)v54);
        }
        uint64_t v58 = *(__int16 *)(v31 + 2 * (__int16)v34);
        int v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
        int v36 = v30[v58];
      }
      if ((__int16)v37 != v25)
      {
        while (1)
        {
          if (v36 == 32) {
            goto LABEL_35;
          }
          if (v36 == v38) {
            break;
          }
          uint64_t v59 = *(__int16 *)(v31 + 2 * (__int16)v34);
          int v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
          int v36 = v30[v59];
        }
        int v36 = v30[(__int16)++v34];
        int v37 = (__int16)(v37 + 1);
        if (v37 <= v25) {
          continue;
        }
      }
      goto LABEL_35;
    }
  }
  int v60 = v25 - 1;
LABEL_92:
  LOWORD(v61) = 2;
  if (a6 >= 2 && v60 << 16 > 0x20000)
  {
    LOWORD(v61) = 2;
    do
    {
      LOWORD(v61) = v61 + 1;
      LOWORD(v10) = v10 + 1;
    }
    while ((int)a6 >= (__int16)v61 && (__int16)v60 > (__int16)v61);
  }
  int v62 = (__int16)(v25 - a7);
  if (v62 <= (__int16)v61) {
    goto LABEL_10;
  }
  int v18 = 0;
  uint64_t v61 = (__int16)v61;
  do
  {
    int v63 = *(__int16 *)(a5 + 370 + 2 * v61);
    if (((__int16)(v63 + ((unsigned __int16)(v63 & 0x8000) >> 15)) & 0xFFFFFFFE) != v63
      && *(unsigned __int8 *)(a1 + (__int16)v10 + 1) - 65 <= 0x1C
      && *(unsigned __int8 *)(a1 + (__int16)v10) - 65 <= 0x1C)
    {
      *(_DWORD *)(a3 + 4 * ((unsigned __int16)v10 >> 5)) |= 1 << ~(_BYTE)v10;
      if (!v18) {
        int v18 = (unsigned __int16)v61;
      }
    }
    ++v61;
    LOWORD(v10) = v10 + 1;
  }
  while (v61 < v62);
  return (__int16)v18;
}

void EndHyphen()
{
  free((void *)brtable);
  unsigned __int16 v0 = (void *)keytable;
  free(v0);
}

uint64_t DCengan(uint64_t result, unsigned int a2, uint64_t a3, _WORD *a4)
{
  int v11[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int8 *)result;
  uint64_t v7 = *(unsigned __int8 *)(result + 1);
  qmemcpy(v11, "BCDGJKPQTVWYZ", 13);
  qmemcpy(v10, "AEIOaeioFHLMNRSXU", 17);
  *a4 = 12336;
  if (a2 <= 3 && a2 != 2)
  {
    if ((*(_DWORD *)(a3 + 4 * v6) & 0x40000000) != 0) {
      LOBYTE(v6) = v6 + 32;
    }
    if ((*(_DWORD *)(a3 + 4 * v6) & 0x10000000) != 0)
    {
      if ((*(_DWORD *)(a3 + 4 * v7) & 0x40000000) != 0) {
        LOBYTE(v7) = v7 + 32;
      }
      uint64_t result = v6;
      if (v6 != 101 || v7 != 117)
      {
        uint64_t result = char_in(v6, (uint64_t)v10 + 4, 4);
        if (result) {
          char v8 = 49;
        }
        else {
          char v8 = 50;
        }
        *(unsigned char *)a4 = v8;
      }
    }
  }
  if (a2 == 2)
  {
    uint64_t result = char_in(v6, (uint64_t)v11, 13);
    if (result)
    {
      char v9 = 48;
    }
    else
    {
      uint64_t result = char_in(v6, (uint64_t)v10, 4);
      if (result)
      {
        char v9 = 49;
      }
      else
      {
        uint64_t result = char_in(v6, (uint64_t)&v10[1], 9);
        if (!result) {
          return result;
        }
        char v9 = 50;
      }
    }
    *(unsigned char *)a4 = v9;
  }
  return result;
}

uint64_t DCposclt(int a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  __dst[44] = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)memcpy(__dst, "arei", 0x160uLL);
  v16[0] = 0x75F46F69EA65E161;
  *(void *)((char *)v16 + 5) = 0xED6D7A727375F46FLL;
  uint64_t v15 = 0x72646E736F696561;
  int v9 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a4 = 12336;
  if (a1 == 8)
  {
    int v12 = &v15;
    int v13 = v9;
    int v14 = 8;
    goto LABEL_12;
  }
  if (a1 == 12)
  {
    for (uint64_t i = 0; i != 44; ++i)
    {
      while (1)
      {
        unsigned int v11 = byte_20CC65020[i];
        if (v11 <= a3) {
          break;
        }
        if (++i == 44) {
          goto LABEL_10;
        }
      }
      uint64_t result = cmp_end_char(a2, a3, (unsigned __int8 *)&__dst[i], v11);
      if (result == 1) {
        return result;
      }
    }
    if (result) {
      return result;
    }
LABEL_10:
    int v12 = v16;
    int v13 = v9;
    int v14 = 13;
LABEL_12:
    uint64_t result = char_in(v13, (uint64_t)v12, v14);
    if (!result) {
      return result;
    }
  }
  *(unsigned char *)a4 = 49;
  return result;
}

uint64_t DCposcls(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  _WORD v14[2] = *MEMORY[0x263EF8340];
  v14[0] = 0xEFED69E8E965E061;
  *(_DWORD *)((char *)v14 + 7) = -218927121;
  qmemcpy(v13, "mos", 3);
  char v12 = -19;
  int v11 = -185933453;
  uint64_t v7 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a5 = 12336;
  if (a3 < 2) {
    int v8 = 0;
  }
  else {
    int v8 = *(unsigned __int8 *)(a2 + a3 - 2);
  }
  if (result == 3)
  {
    uint64_t result = char_in(v7, (uint64_t)v14, 11);
    BOOL v10 = result == 0;
    char v9 = 49;
    goto LABEL_10;
  }
  if (result == 5)
  {
    char v9 = 53;
    goto LABEL_14;
  }
  if (result != 12) {
    return result;
  }
  uint64_t result = cmp_end_char(a2, a3, (unsigned __int8 *)v13, 3);
  if (!result)
  {
    uint64_t result = char_in(v7, (uint64_t)&v11, 5);
    char v9 = 50;
    if (result || (v7 & 0xFFFFFFF7) == 0x72) {
      goto LABEL_14;
    }
    if (v7 == 109)
    {
      char v9 = 52;
      goto LABEL_14;
    }
    char v9 = 51;
    if ((*(_DWORD *)(a4 + 4 * v7) & 0x10000000) == 0) {
      goto LABEL_14;
    }
    BOOL v10 = v8 == 210 || v8 == 245;
LABEL_10:
    if (v10) {
      ++v9;
    }
    goto LABEL_14;
  }
  char v9 = 49;
LABEL_14:
  *(unsigned char *)a5 = v9;
  return result;
}

uint64_t DCposacc(uint64_t result, unsigned int a2, uint64_t a3, char *a4)
{
  uint64_t v7 = result;
  v17[1] = *MEMORY[0x263EF8340];
  int v8 = *(unsigned __int8 *)(result + a2 - 1);
  qmemcpy(v14, "mos", 3);
  qmemcpy(v13, "ndo", 3);
  v17[0] = 0x656F616F65656165;
  uint64_t v15 = *(void *)"eaneenoenua";
  char v16 = 110;
  *(_WORD *)a4 = 12336;
  if (!a2)
  {
LABEL_5:
    if (v8 == 114 || v8 == 100) {
      goto LABEL_7;
    }
    uint64_t result = cmp_end_char(result, a2, (unsigned __int8 *)v13, 3);
    if (result || (uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)v14, 3), result))
    {
      char v12 = 52;
      goto LABEL_11;
    }
    uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)v17, 2);
    if (result
      || (uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 2, 2), result)
      || (uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 4, 2), result)
      || (uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 6, 2), result))
    {
LABEL_7:
      char v12 = 50;
    }
    else
    {
      uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15, 3);
      if (!result)
      {
        uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15 + 3, 3);
        if (!result)
        {
          uint64_t result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15 + 6, 3);
          if (!result)
          {
            if (a2 >= 3) {
              return DCcalacc(v7, a2, a3, a4);
            }
            return result;
          }
        }
      }
      char v12 = 51;
    }
LABEL_11:
    a4[1] = v12;
    return result;
  }
  uint64_t v9 = a2;
  BOOL v10 = (unsigned __int8 *)result;
  while (1)
  {
    unsigned int v11 = *v10++;
    if ((*(_DWORD *)(a3 + 4 * v11) & 0x4000000) != 0) {
      return result;
    }
    if (!--v9) {
      goto LABEL_5;
    }
  }
}

uint64_t DCcalacc(uint64_t a1, unsigned int a2, uint64_t a3, char *__str)
{
  unsigned __int8 v5 = a2;
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  v17[0] = *(_OWORD *)"ua";
  v17[1] = *(_OWORD *)"o";
  void v17[2] = xmmword_20CC65098;
  memset(v18, 0, sizeof(v18));
  int64x2_t v7 = (int64x2_t)xmmword_20CC61BB0;
  int64x2_t v8 = vdupq_n_s64((unint64_t)v17);
  int64x2_t v9 = vdupq_n_s64(2uLL);
  do
  {
    v10.i64[0] = 3 * v7.i64[0];
    v10.i64[1] = 3 * v7.i64[1];
    v18[v6] = vaddq_s64(v8, v10);
    int64x2_t v7 = vaddq_s64(v7, v9);
    ++v6;
  }
  while (v6 != 8);
  void v16[2] = 0;
  *(_WORD *)__str = 12336;
  if (!a2) {
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  char v11 = 0;
  int v12 = 0;
  uint64_t v13 = a2 - 1;
  while (1)
  {
    if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13)) & 0x10000000) == 0)
    {
      if (v12) {
        char v11 = v13;
      }
      goto LABEL_13;
    }
    if (!v12)
    {
      int v12 = v13;
      goto LABEL_13;
    }
    if (!v13) {
      return snprintf(__str, 3uLL, "%02d", v5);
    }
    if (v11) {
      break;
    }
    char v11 = 0;
LABEL_13:
    unint64_t v14 = v13-- + 1;
    if (v14 <= 1) {
      goto LABEL_14;
    }
  }
  if (!(_BYTE)v13)
  {
LABEL_14:
    unsigned __int8 v5 = 0;
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13 - 1)) & 0x10000000) != 0
    && (v16[0] = *(unsigned char *)(a1 + v13 - 1),
        v16[1] = *(unsigned char *)(a1 + v13),
        !cmp_strings(v16, 2, (unsigned __int8 **)v18, 0x10u)))
  {
    unsigned __int8 v5 = v5 - v13 + 1;
  }
  else
  {
    v5 -= v13;
  }
  return snprintf(__str, 3uLL, "%02d", v5);
}

uint64_t DClnkcod(uint64_t result, uint64_t a2)
{
  *(_WORD *)a2 = 12336;
  char v2 = 51;
  switch((int)result)
  {
    case 6:
    case 7:
      goto LABEL_4;
    case 10:
    case 13:
      char v2 = 50;
      goto LABEL_4;
    case 11:
      char v2 = 49;
      *(unsigned char *)a2 = 49;
LABEL_4:
      *(unsigned char *)(a2 + 1) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t char_in(int a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    while (*(unsigned __int8 *)(a2 + v3) != a1)
    {
      if (a3 == ++v3) {
        return 0;
      }
    }
    return (v3 + 1);
  }
  else
  {
    return 0;
  }
}

BOOL cmp_end_char(uint64_t a1, char a2, unsigned __int8 *a3, int a4)
{
  return SLstrncmp((unsigned char *)(a1 + (a2 - a4)), a3, a4) == 0;
}

uint64_t cmp_strings(unsigned char *a1, int a2, unsigned __int8 **a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v7 = a4;
  while (SLstrncmp(a1, *a3, a2))
  {
    ++a3;
    if (!--v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t an_init(void *a1, const char *a2, int *a3, int a4)
{
  int64x2_t v8 = malloc_type_calloc(0x1C8uLL, 1uLL, 0x3469DuLL);
  *a1 = v8;
  if (!v8) {
    return 4294966895;
  }
  int64x2_t v9 = v8;
  *int64x2_t v8 = a4;
  v8[1] = has_lang_nont(a4);
  int64x2_t v10 = is_hun_unsuff_word;
  char v11 = is_hun_antiword;
  int v12 = is_hun_prefix;
  uint64_t v13 = prefix_stem_suffix_check_hun;
  unint64_t v14 = stem_suffix_check_hun;
  if (a4 != 14)
  {
    if (a4 != 21) {
      goto LABEL_6;
    }
    int64x2_t v10 = is_pol_unsuff_word;
    char v11 = is_pol_antiword;
    int v12 = is_pol_prefix;
    uint64_t v13 = prefix_stem_suffix_check_pol;
    unint64_t v14 = stem_suffix_check_pol;
  }
  *((void *)v9 + 1) = v14;
  *((void *)v9 + 2) = v13;
  *((void *)v9 + 3) = v12;
  *((void *)v9 + 4) = v11;
  *((void *)v9 + 5) = v10;
LABEL_6:
  *((void *)v9 + 6) = 0;
  uint64_t v15 = (uint64_t *)(v9 + 12);
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + _Block_object_dispose(&STACK[0x510], 8) = 0u;
  *((void *)v9 + 7) = 0;
  *((void *)v9 + _Block_object_dispose(&STACK[0x510], 8) = 0;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  uint64_t result = hdr_init((uint64_t **)v9 + 6, a2);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v17 = hdr_find(*((void *)v9 + 6), 769);
  uint64_t result = mt_init((void *)v9 + 17, (void *)v9 + 18, a2, v17);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v18 = hdr_find(*v15, 259);
  uint64_t v19 = hdr_find(*v15, 515);
  uint64_t result = db_init((void *)v9 + 16, a2, v18, v19, a3[2], a3[5]);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int embmax = db_get_embmax(*((void *)v9 + 16));
  infoint size = db_get_infosize(*((void *)v9 + 16));
  int v22 = malloc_type_calloc(embmax + embmax * infosize, 1uLL, 0x9314D655uLL);
  *((void *)v9 + 23) = v22;
  if (!v22) {
    return 4294966895;
  }
  if (v9[1])
  {
    uint64_t v23 = hdr_find(*v15, 258);
    uint64_t v24 = hdr_find(*v15, 514);
    uint64_t result = db_init((void *)v9 + 15, a2, v23, v24, a3[1], a3[4]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v25 = db_get_embmax(*((void *)v9 + 15));
    int v26 = db_get_infosize(*((void *)v9 + 15));
    unsigned __int16 v27 = malloc_type_calloc(v25 + v25 * v26, 1uLL, 0x2B4D785DuLL);
    *((void *)v9 + 22) = v27;
    if (!v27) {
      return 4294966895;
    }
  }
  uint64_t v28 = hdr_find(*v15, 257);
  uint64_t v29 = hdr_find(*v15, 513);
  uint64_t result = db_init((void *)v9 + 14, a2, v28, v29, *a3, a3[3]);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v30 = db_get_embmax(*((void *)v9 + 14));
  int v31 = db_get_infosize(*((void *)v9 + 14));
  int v32 = malloc_type_calloc(v30 + v30 * v31, 1uLL, 0x5223811BuLL);
  *((void *)v9 + 19) = v32;
  if (!v32) {
    return 4294966895;
  }
  int v33 = db_get_embmax(*((void *)v9 + 14));
  int v34 = db_get_infosize(*((void *)v9 + 14));
  int v35 = malloc_type_calloc(v33 + v33 * v34, 1uLL, 0x2A7BE5B0uLL);
  *((void *)v9 + 20) = v35;
  if (!v35) {
    return 4294966895;
  }
  int v36 = db_get_embmax(*((void *)v9 + 14));
  int v37 = db_get_infosize(*((void *)v9 + 14));
  int v38 = malloc_type_calloc(v36 + v36 * v37, 1uLL, 0xB7DCBC31uLL);
  *((void *)v9 + 21) = v38;
  if (!v38) {
    return 4294966895;
  }
  uint64_t v39 = f_open(a2, 1);
  if (!v39) {
    return 4294967094;
  }
  uint64_t v40 = v39;
  uint64_t v47 = 0;
  uint64_t v41 = hdr_find(*v15, 1281);
  f_seek(v40, v41, 0);
  if (fgetl_lsb1st(v40, &v47) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 11) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 9) == -1)
  {
    goto LABEL_32;
  }
  int v42 = malloc_type_calloc(*((void *)v9 + 9) * *((void *)v9 + 11), 1uLL, 0x7187B8CuLL);
  *((void *)v9 + 7) = v42;
  if (!v42)
  {
LABEL_35:
    f_close(v40);
    return 4294966895;
  }
  if (f_read(v42, v9[22] * v9[18], 1, v40) != 1
    || (uint64_t v43 = hdr_find(*v15, 1282), f_seek(v40, v43, 0), fgetl_lsb1st(v40, &v47) == -1)
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 12) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 10) == -1)
  {
LABEL_32:
    f_close(v40);
    return 4294967092;
  }
  __int16 v44 = malloc_type_calloc(*((void *)v9 + 10) * *((void *)v9 + 12), 1uLL, 0x73C8F76uLL);
  *((void *)v9 + _Block_object_dispose(&STACK[0x510], 8) = v44;
  if (!v44) {
    goto LABEL_35;
  }
  int v45 = f_read(v44, v9[24] * v9[20], 1, v40);
  f_close(v40);
  if (v45 != 1) {
    return 4294967092;
  }
  int v46 = open(a2, 0, 511, v47);
  v9[26] = v46;
  if (v46 == -1) {
    return 4294967094;
  }
  db_set_file(*((_DWORD **)v9 + 14), v46);
  if (v9[1]) {
    db_set_file(*((_DWORD **)v9 + 15), v9[26]);
  }
  db_set_file(*((_DWORD **)v9 + 16), v9[26]);
  return 0;
}

BOOL stem_suffix_check_hun(uint64_t a1)
{
  if (*(void *)(a1 + 328)) {
    uint64_t v1 = (*(void *)(a1 + 336) != 0) | 2u;
  }
  else {
    uint64_t v1 = *(void *)(a1 + 336) != 0;
  }
  switch(v1)
  {
    case 1:
      int v5 = *(unsigned __int16 *)(a1 + 350);
      goto LABEL_13;
    case 2:
      if ((*(_WORD *)(a1 + 350) & 0x800F) == 0x8000) {
        return 0;
      }
      __int16 v2 = *(_WORD *)(a1 + 360);
      goto LABEL_8;
    case 3:
      if ((*(_WORD *)(a1 + 350) & 0x800F) == 0x8000) {
        return 0;
      }
      int v5 = *(unsigned __int16 *)(a1 + 360);
LABEL_13:
      BOOL v3 = (v5 & 0xFFFF800F) == 0x8000;
      return !v3;
    default:
      __int16 v2 = *(_WORD *)(a1 + 350);
LABEL_8:
      BOOL v3 = (v2 & 0x9000) == 4096;
      return !v3;
  }
}

uint64_t prefix_stem_suffix_check_hun(uint64_t a1)
{
  if (*(void *)(a1 + 328)) {
    uint64_t v1 = (*(void *)(a1 + 336) != 0) | 2u;
  }
  else {
    uint64_t v1 = *(void *)(a1 + 336) != 0;
  }
  switch(v1)
  {
    case 1:
      uint64_t result = *(__int16 *)(a1 + 350) >= 0;
      break;
    case 2:
      int v3 = *(__int16 *)(a1 + 350);
      if (v3 < 0)
      {
        BOOL v6 = (v3 & 0x800F) != 0x8000;
        uint64_t result = (*(_WORD *)(a1 + 360) & 0x9000) == 0 && v6;
      }
      else
      {
        uint64_t result = 1;
      }
      break;
    case 3:
      int v4 = *(__int16 *)(a1 + 350);
      int v5 = *(unsigned __int16 *)(a1 + 360);
      if (v4 < 0)
      {
        BOOL v7 = (v4 & 0x800F) != 0x8000;
        uint64_t result = (v5 & 0x8000) == 0 && v7;
      }
      else
      {
        uint64_t result = (v5 & 0xFFFF800F) != 0x8000;
      }
      break;
    default:
      uint64_t result = (*(_WORD *)(a1 + 350) & 0x9000) == 0;
      break;
  }
  return result;
}

BOOL is_hun_prefix(int a1)
{
  return (a1 & 0xFFFF800F) == 32769;
}

BOOL is_hun_antiword(int a1)
{
  return (~a1 & 0x800E) == 0;
}

BOOL is_hun_unsuff_word(int a1)
{
  return (a1 & 0xFFFF800F) == 0x8000;
}

uint64_t stem_suffix_check_pol(uint64_t a1)
{
  int v1 = *(void *)(a1 + 336) != 0;
  if (*(void *)(a1 + 328)) {
    v1 |= 2u;
  }
  if (v1 != 1)
  {
    if (!v1)
    {
      int v2 = *(_DWORD *)(a1 + 272);
      if ((v2 & 0x4000) == 0 && ((v2 & 0x1000) == 0 || *(__int16 *)(a1 + 350) < 0 && *(unsigned char *)(a1 + 348) != 54)) {
        return 1;
      }
    }
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 272);
  int v5 = *(unsigned __int16 *)(a1 + 350);
  if ((v4 & 0x4000) == 0 || (v5 & 0x8000) == 0 && (*(unsigned char *)(a1 + 368) & 0xFC) == 0x68)
  {
    if ((v5 & 0xFFFF8003) == 0x8000)
    {
      if ((v4 & 0x2000) != 0 || *(unsigned char *)(a1 + 368) != 102) {
        return (v5 & 0xFFFF800F) != 32773;
      }
    }
    else if ((v4 & 0x1000) == 0 || (__int16)v5 < 0 || *(unsigned __int8 *)(a1 + 368) - 114 <= 3)
    {
      return (v5 & 0xFFFF800F) != 32773;
    }
  }
  return 0;
}

uint64_t prefix_stem_suffix_check_pol(uint64_t a1)
{
  if (*(void *)(a1 + 328)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = *(void *)(a1 + 336) == 0;
  }
  if (v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 272);
  if ((v2 & 0x4000) != 0
    || (v2 & 0x1000) != 0
    && (*(__int16 *)(a1 + 350) & 0x80000000) == 0
    && *(unsigned __int8 *)(a1 + 368) - 114 > 3)
  {
    return 0;
  }
  int v3 = *(unsigned __int16 *)(a1 + 350);
  if ((v3 & 0xFFFF8003) != 0x8000)
  {
    if ((v3 & 0x8000) == 0 && (*(__int16 *)(a1 + 370) & 0x80000000) == 0)
    {
      int v6 = *(unsigned __int8 *)(a1 + 368);
      unsigned int v7 = v6 - 114;
      LODWORD(v4) = v6 == 117;
      if (v7 >= 3) {
        return v4;
      }
      else {
        return 1;
      }
    }
    return 0;
  }
  if ((v2 & 0x2000) == 0 && *(unsigned char *)(a1 + 368) == 102) {
    return 0;
  }
  uint64_t v4 = 1;
  switch(((unsigned __int16)((*(_WORD *)(a1 + 346) & 0x80FF) + 32731) >> 6) | (unsigned __int16)(((*(_WORD *)(a1 + 346) & 0x80FF)
                                                                                                  + 32731) << 10))
  {
    case 0:
      int v5 = *(unsigned __int16 *)(a1 + 370);
      if ((v5 & 0xFFFF8003) != 0x8000 || (v5 & 0x1300) == 0) {
        return 0;
      }
      goto LABEL_24;
    case 1:
      if ((*(_WORD *)(a1 + 370) & 0x9303) != 0x8000) {
        return 0;
      }
      int v8 = *(char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304));
      if ((v8 - 97) >= 0x1A && !strchr(is_cwi_lower_pol_lower8, v8)) {
        return 0;
      }
      goto LABEL_24;
    case 2:
      if ((*(_WORD *)(a1 + 370) & 0x9303) != 0x8000) {
        return 0;
      }
LABEL_24:
      uint64_t v4 = 1;
      break;
    case 3:
      return v4;
    default:
      return 0;
  }
  return v4;
}

BOOL is_pol_prefix(int a1)
{
  return (a1 & 0xFFFF803F) == 32805;
}

BOOL is_pol_antiword(int a1)
{
  return (a1 & 0xFFFF80FF) == 33013;
}

BOOL is_pol_unsuff_word(int a1)
{
  return (a1 & 0xFFFF800F) == 32773;
}

void an_finish(uint64_t a1)
{
  if (a1)
  {
    close(*(_DWORD *)(a1 + 104));
    int v2 = *(void **)(a1 + 64);
    if (v2) {
      free(v2);
    }
    int v3 = *(void **)(a1 + 56);
    if (v3) {
      free(v3);
    }
    db_finish(*(int **)(a1 + 112));
    uint64_t v4 = *(void **)(a1 + 152);
    if (v4) {
      free(v4);
    }
    int v5 = *(void **)(a1 + 160);
    if (v5) {
      free(v5);
    }
    int v6 = *(void **)(a1 + 168);
    if (v6) {
      free(v6);
    }
    if (*(_DWORD *)(a1 + 4))
    {
      db_finish(*(int **)(a1 + 120));
      unsigned int v7 = *(void **)(a1 + 176);
      if (v7) {
        free(v7);
      }
    }
    db_finish(*(int **)(a1 + 128));
    int v8 = *(void **)(a1 + 184);
    if (v8) {
      free(v8);
    }
    mt_finish(*(void **)(a1 + 136), *(void **)(a1 + 144));
    hdr_finish(*(void **)(a1 + 48));
    free((void *)a1);
  }
}

uint64_t an_analyze(uint64_t a1, unsigned char *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 4294966886;
  if (a3 > 64 || !a3) {
    return result;
  }
  infoint size = db_get_infosize(*(void *)(a1 + 112));
  if (a3 >= 1) {
    bzero((void *)(a1 + 392), a3);
  }
  *(_DWORD *)(a1 + 10_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(void *)(a1 + 192) = a2;
  *(_DWORD *)(a1 + 200) = a3;
  *(unsigned char *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 272) = a4;
  *(_OWORD *)(a1 + 376) = xmmword_20CC650B0;
  char v13 = a2[a3];
  a2[a3] = 0;
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v93 = *(void *)(a1 + 160);
  uint64_t v15 = *(void *)(a1 + 168);
  int v16 = db_search(*(void *)(a1 + 112), a2, v14);
  *(_DWORD *)(a1 + 276) = v16;
  if (v16 < 0)
  {
    a2[a3] = v13;
    return *(unsigned int *)(a1 + 276);
  }
  char v86 = v13;
  uint64_t v87 = a3;
  uint64_t v85 = a5;
  if (v16)
  {
    unsigned int v92 = 0;
    uint64_t v17 = infosize + 1;
    uint64_t v88 = v14;
    while (1)
    {
      uint64_t v18 = v16 + 1;
      uint64_t v19 = (unsigned __int8 *)(v14 + v17 * (v16 - 1));
      int v20 = v16;
      while (1)
      {
        *(void *)(a1 + 312) = 0;
        *(void *)(a1 + 320) = 0;
        *(void *)(a1 + 304) = v19;
        uint64_t v21 = *v19;
        if (stem_check(a1, (uint64_t)v19, *v19)) {
          break;
        }
        if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
        {
          if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
            char v22 = 1;
          }
          else {
            char v22 = 2;
          }
        }
        else
        {
          char v22 = 0;
        }
        *(unsigned char *)(v21 + a1 + 391) |= v22;
        --v20;
        --v18;
        v19 += -infosize - 1;
        if (v18 <= 1)
        {
          uint64_t v14 = v88;
          goto LABEL_104;
        }
      }
      *(unsigned char *)(a1 + 344) = *(unsigned char *)(a1 + 348);
      __int16 v23 = *(_WORD *)(a1 + 350);
      *(_WORD *)(a1 + 352) = v23;
      *(_WORD *)(a1 + 346) = v23;
      if ((*(unsigned int (**)(void))(a1 + 24))())
      {
        uint64_t v24 = **(unsigned __int8 **)(a1 + 304);
        if (v24 != a3 || (*(unsigned char *)(a1 + 273) & 2) != 0)
        {
          int v25 = db_search(*(void *)(a1 + 112), &a2[v24], v93);
          *(_DWORD *)(a1 + 280) = v25;
          if (v25 < 0) {
            goto LABEL_175;
          }
          uint64_t v17 = infosize + 1;
          unsigned int v82 = a6;
          if (v25)
          {
            while (1)
            {
              uint64_t v26 = v25 + 1;
              unsigned __int16 v27 = (unsigned __int8 *)(v93 + v17 * (v25 - 1));
              int v28 = v25;
              while (1)
              {
                *(void *)(a1 + 312) = v27;
                uint64_t v29 = **(unsigned __int8 **)(a1 + 304);
                uint64_t v30 = *v27;
                uint64_t v31 = v30 + v29;
                if (stem_check(a1, (uint64_t)v27, (int)v30 + (int)v29)) {
                  break;
                }
                if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                {
                  if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
                    char v32 = 1;
                  }
                  else {
                    char v32 = 2;
                  }
                }
                else
                {
                  char v32 = 0;
                }
                *(unsigned char *)(v31 + a1 + 391) |= v32;
                --v28;
                --v26;
                v27 += -infosize - 1;
                if (v26 <= 1) {
                  goto LABEL_97;
                }
              }
              *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
              if ((*(unsigned int (**)(void))(a1 + 24))())
              {
                a6 = v82;
              }
              else
              {
                *(void *)(a1 + 296) = *(void *)(a1 + 312);
                a6 = v82;
                uint64_t result = scan(a1, *(unsigned int (**)(uint64_t))(a1 + 16), v85, v92, v82);
                if (result == v82 || (result & 0x80000000) != 0 || (*(unsigned char *)(a1 + 108) & 4) != 0) {
                  goto LABEL_176;
                }
                unsigned int v92 = result;
              }
              int v25 = v28 - 1;
              uint64_t v17 = infosize + 1;
              if (v28 < 2) {
                goto LABEL_99;
              }
            }
          }
          goto LABEL_99;
        }
        if (*(_DWORD *)a1 == 14)
        {
          *(void *)(a1 + 32_Block_object_dispose(&STACK[0x510], 8) = 0;
          *(void *)(a1 + 336) = 0;
          unsigned int v92 = process_result(a1, v85, v92);
          uint64_t v17 = infosize + 1;
          if (v92 == a6)
          {
            a2[a3] = v86;
            return a6;
          }
          goto LABEL_99;
        }
      }
      else
      {
        if (*(_DWORD *)a1 == 14 && *(__int16 *)(a1 + 350) == -32768)
        {
          if (**(unsigned char **)(a1 + 304) != 3) {
            goto LABEL_50;
          }
          if (!SLstrncmp(a2, "leg", 3)) {
            goto LABEL_56;
          }
          if (*(__int16 *)(a1 + 350) == -32768)
          {
LABEL_50:
            if (**(unsigned char **)(a1 + 304) == 8 && !SLstrncmp(a2, "legesleg", 8))
            {
LABEL_56:
              int v33 = db_search(*(void *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304)], v93);
              *(_DWORD *)(a1 + 280) = v33;
              if (v33 < 0)
              {
LABEL_175:
                a2[v87] = v86;
                return *(unsigned int *)(a1 + 280);
              }
              uint64_t v17 = infosize + 1;
              unsigned int v82 = a6;
              if (v33)
              {
                while (1)
                {
                  uint64_t v34 = v33 + 1;
                  int v35 = (unsigned __int8 *)(v93 + v17 * (v33 - 1));
                  int v36 = v33;
                  while (1)
                  {
                    *(void *)(a1 + 312) = v35;
                    uint64_t v37 = **(unsigned __int8 **)(a1 + 304);
                    uint64_t v38 = *v35;
                    uint64_t v39 = v38 + v37;
                    if (stem_check(a1, (uint64_t)v35, (int)v38 + (int)v37)) {
                      break;
                    }
                    if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                    {
                      if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
                        char v40 = 1;
                      }
                      else {
                        char v40 = 2;
                      }
                    }
                    else
                    {
                      char v40 = 0;
                    }
                    *(unsigned char *)(v39 + a1 + 391) |= v40;
                    --v36;
                    --v34;
                    v35 += -infosize - 1;
                    if (v34 <= 1)
                    {
LABEL_97:
                      a6 = v82;
                      goto LABEL_98;
                    }
                  }
                  *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
                  if ((*(unsigned int (**)(void))(a1 + 24))())
                  {
                    int v41 = db_search(*(void *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)], v15);
                    *(_DWORD *)(a1 + 284) = v41;
                    if (v41 < 0)
                    {
                      a2[a3] = v86;
                      return *(unsigned int *)(a1 + 284);
                    }
                    uint64_t v17 = infosize + 1;
                    unint64_t v83 = a2;
                    if (v41)
                    {
                      do
                      {
                        uint64_t v42 = v41 + 1;
                        uint64_t v43 = (unsigned __int8 *)(v15 + v17 * (v41 - 1));
                        int v44 = v41;
                        while (1)
                        {
                          *(void *)(a1 + 320) = v43;
                          unint64_t v45 = **(unsigned __int8 **)(a1 + 312) + (unint64_t)**(unsigned __int8 **)(a1 + 304);
                          uint64_t v46 = *v43;
                          uint64_t v47 = v45 + v46;
                          if (stem_check(a1, (uint64_t)v43, (int)v45 + (int)v46)) {
                            break;
                          }
                          if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                          {
                            if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
                              char v48 = 1;
                            }
                            else {
                              char v48 = 2;
                            }
                          }
                          else
                          {
                            char v48 = 0;
                          }
                          *(unsigned char *)(v47 + a1 + 391) |= v48;
                          --v44;
                          --v42;
                          v43 += -infosize - 1;
                          if (v42 <= 1)
                          {
                            a2 = v83;
                            goto LABEL_93;
                          }
                        }
                        *(_WORD *)(a1 + 356) = *(_WORD *)(a1 + 350);
                        if ((*(unsigned int (**)(void))(a1 + 24))())
                        {
                          a2 = v83;
                        }
                        else
                        {
                          *(void *)(a1 + 296) = *(void *)(a1 + 320);
                          uint64_t result = scan(a1, (unsigned int (*)(uint64_t))supl_prefix_stem_suffix_check_hun, v85, v92, v82);
                          a2 = v83;
                          if (result == v82 || (result & 0x80000000) != 0 || (*(unsigned char *)(a1 + 108) & 4) != 0) {
                            goto LABEL_176;
                          }
                          unsigned int v92 = result;
                        }
                        uint64_t v17 = infosize + 1;
                        int v41 = v44 - 1;
                      }
                      while (v44 >= 2);
                    }
                  }
                  else
                  {
                    *(void *)(a1 + 296) = *(void *)(a1 + 312);
                    uint64_t result = scan(a1, (unsigned int (*)(uint64_t))supl_stem_suffix_check_hun, v85, v92, v82);
                    if (result == v82 || (result & 0x80000000) != 0 || (*(unsigned char *)(a1 + 108) & 4) != 0) {
                      goto LABEL_176;
                    }
                    unsigned int v92 = result;
LABEL_93:
                    uint64_t v17 = infosize + 1;
                  }
                  int v33 = v36 - 1;
                  BOOL v49 = v36 < 2;
                  a6 = v82;
                  if (v49) {
                    goto LABEL_99;
                  }
                }
              }
              goto LABEL_99;
            }
          }
        }
        if ((*(unsigned char *)(a1 + 273) & 2) == 0)
        {
          *(void *)(a1 + 296) = *(void *)(a1 + 304);
          uint64_t result = scan(a1, *(unsigned int (**)(uint64_t))(a1 + 8), v85, v92, a6);
          if (result == a6 || (result & 0x80000000) != 0 || (*(unsigned char *)(a1 + 108) & 4) != 0)
          {
LABEL_176:
            a2[a3] = v86;
            return result;
          }
          unsigned int v92 = result;
        }
      }
LABEL_98:
      uint64_t v17 = infosize + 1;
LABEL_99:
      int v16 = v20 - 1;
      BOOL v49 = v20 < 2;
      uint64_t v14 = v88;
      if (v49) {
        goto LABEL_104;
      }
    }
  }
  unsigned int v92 = 0;
LABEL_104:
  if (*(_DWORD *)a1 == 14 && (*(unsigned char *)(a1 + 273) & 4) == 0)
  {
    uint64_t v50 = *(unsigned int *)(a1 + 276);
    if ((int)v50 >= 1)
    {
      uint64_t v51 = infosize + 1;
      uint64_t v52 = -v51;
      int v84 = a2;
      uint64_t v89 = v14;
      uint64_t v91 = v51;
      do
      {
        int v53 = (unsigned __int8 *)(v14 + (v50 - 1) * v51);
        *(void *)(a1 + 312) = 0;
        *(void *)(a1 + 320) = 0;
        *(void *)(a1 + 304) = v53;
        uint64_t v54 = *v53;
        if (stem_check(a1, (uint64_t)v53, *v53))
        {
          *(unsigned char *)(a1 + 344) = *(unsigned char *)(a1 + 348);
          __int16 v55 = *(_WORD *)(a1 + 350);
          *(_WORD *)(a1 + 352) = v55;
          *(_WORD *)(a1 + 346) = v55;
          *(void *)(a1 + 296) = *(void *)(a1 + 304);
          if (!(*(unsigned int (**)(void))(a1 + 24))())
          {
            if (match_stem_null((int *)a1))
            {
              int v56 = *(unsigned __int16 *)(a1 + 350);
              if (~v56 & 0x8010) != 0 || (v56 & 0xE) == 6 || (*(unsigned char *)(a1 + 273))
              {
                int v57 = db_search(*(void *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304)], v93);
                *(_DWORD *)(a1 + 280) = v57;
                if (v57 < 0) {
                  goto LABEL_175;
                }
                if (v57)
                {
                  do
                  {
                    uint64_t v58 = v57 + 1;
                    uint64_t v59 = (unsigned __int8 *)(v93 + v51 * (v57 - 1));
                    int v60 = v57;
                    while (1)
                    {
                      *(void *)(a1 + 312) = v59;
                      *(void *)(a1 + 320) = 0;
                      uint64_t v61 = **(unsigned __int8 **)(a1 + 304);
                      uint64_t v62 = *v59;
                      uint64_t v63 = v62 + v61;
                      if (stem_check(a1, (uint64_t)v59, (int)v62 + (int)v61)) {
                        break;
                      }
                      if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                      {
                        if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
                          char v64 = 1;
                        }
                        else {
                          char v64 = 2;
                        }
                      }
                      else
                      {
                        char v64 = 0;
                      }
                      *(unsigned char *)(v63 + a1 + 391) |= v64;
                      --v60;
                      --v58;
                      v59 += v52;
                      if (v58 <= 1)
                      {
                        a2 = v84;
                        uint64_t v51 = v91;
                        goto LABEL_171;
                      }
                    }
                    *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
                    if ((*(unsigned int (**)(void))(a1 + 24))())
                    {
                      int v65 = db_search(*(void *)(a1 + 112), &v84[**(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)], v15);
                      *(_DWORD *)(a1 + 284) = v65;
                      uint64_t v51 = v91;
                      if (v65 < 0)
                      {
                        v84[v87] = v86;
                        return *(unsigned int *)(a1 + 284);
                      }
                      if (v65)
                      {
                        do
                        {
                          uint64_t v66 = v65 + 1;
                          uint64_t v67 = (unsigned __int8 *)(v15 + v51 * (v65 - 1));
                          int v68 = v65;
                          while (1)
                          {
                            *(void *)(a1 + 320) = v67;
                            unint64_t v69 = **(unsigned __int8 **)(a1 + 312) + (unint64_t)**(unsigned __int8 **)(a1 + 304);
                            uint64_t v70 = *v67;
                            uint64_t v71 = v69 + v70;
                            if (stem_check(a1, (uint64_t)v67, (int)v69 + (int)v70)) {
                              break;
                            }
                            if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                            {
                              if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
                                char v72 = 1;
                              }
                              else {
                                char v72 = 2;
                              }
                            }
                            else
                            {
                              char v72 = 0;
                            }
                            *(unsigned char *)(v71 + a1 + 391) |= v72;
                            --v68;
                            --v66;
                            v67 += v52;
                            if (v66 <= 1)
                            {
                              uint64_t v14 = v89;
                              uint64_t v51 = v91;
                              goto LABEL_161;
                            }
                          }
                          *(_WORD *)(a1 + 356) = *(_WORD *)(a1 + 350);
                          if ((*(unsigned int (**)(void))(a1 + 24))())
                          {
                            uint64_t v14 = v89;
                            uint64_t v51 = v91;
                          }
                          else
                          {
                            int v73 = *(unsigned __int16 *)(a1 + 350);
                            int v74 = ~v73 & 0x8010;
                            int v75 = v73 & 0xE;
                            if (v74) {
                              BOOL v76 = 1;
                            }
                            else {
                              BOOL v76 = v75 == 6;
                            }
                            uint64_t v14 = v89;
                            uint64_t v51 = v91;
                            if (v76 || (*(unsigned char *)(a1 + 273) & 1) != 0)
                            {
                              *(void *)(a1 + 296) = *(void *)(a1 + 320);
                              uint64_t result = scan(a1, (unsigned int (*)(uint64_t))stem_prefix_stem_suffix_check_hun, v85, v92, a6);
                              if (result == a6
                                || (result & 0x80000000) != 0
                                || (*(unsigned char *)(a1 + 108) & 4) != 0)
                              {
                                goto LABEL_177;
                              }
                              unsigned int v92 = result;
                            }
                          }
                          int v65 = v68 - 1;
                        }
                        while (v68 >= 2);
                      }
                    }
                    else
                    {
                      int v77 = *(unsigned __int16 *)(a1 + 350);
                      int v78 = ~v77 & 0x8010;
                      int v79 = v77 & 0xE;
                      if (v78) {
                        BOOL v80 = 1;
                      }
                      else {
                        BOOL v80 = v79 == 6;
                      }
                      uint64_t v51 = v91;
                      if (v80 || (*(unsigned char *)(a1 + 273) & 1) != 0)
                      {
                        *(void *)(a1 + 296) = *(void *)(a1 + 312);
                        uint64_t result = scan(a1, (unsigned int (*)(uint64_t))stem_stem_suffix_check_hun, v85, v92, a6);
                        if (result == a6
                          || (result & 0x80000000) != 0
                          || (*(unsigned char *)(a1 + 108) & 4) != 0)
                        {
LABEL_177:
                          v84[v87] = v86;
                          return result;
                        }
                        unsigned int v92 = result;
                      }
                    }
LABEL_161:
                    int v57 = v60 - 1;
                    BOOL v49 = v60 < 2;
                    a2 = v84;
                  }
                  while (!v49);
                }
              }
            }
          }
        }
        else
        {
          if ((*(unsigned int (**)(void))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
          {
            if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0) {
              char v81 = 1;
            }
            else {
              char v81 = 2;
            }
          }
          else
          {
            char v81 = 0;
          }
          *(unsigned char *)(v54 + a1 + 391) |= v81;
        }
LABEL_171:
        BOOL v49 = v50-- < 2;
      }
      while (!v49);
    }
  }
  a2[v87] = v86;
  return v92;
}

uint64_t stem_check(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 88);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = (__int16)(*(unsigned __int8 *)(a2 + 2) << 8) | (unint64_t)*(unsigned __int8 *)(a2 + 1);
    v5 += v7 + v7 * (v6 - 1);
  }
  int v8 = *v5;
  uint64_t v9 = *(unsigned __int16 *)(v5 + 1);
  *(unsigned char *)(a1 + 34_Block_object_dispose(&STACK[0x510], 8) = v8;
  *(_WORD *)(a1 + 350) = v9;
  if ((*(unsigned int (**)(uint64_t))(a1 + 32))(v9)) {
    return 0;
  }
  int v11 = *(char *)(a1 + a3 + 391);
  if (!*(unsigned char *)(a1 + a3 + 391) || (v11 & 1) != 0 && (*(_DWORD *)(a1 + 272) & 0x100) != 0)
  {
    if (*(_DWORD *)a1 == 14)
    {
      if (v8 == 67 && v9 == 32784) {
        return 0;
      }
      if ((v9 & 0x800E) != 0x8006 && (*(_DWORD *)(a1 + 272) & 0x800) != 0) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 108) |= v11;
  }
  return result;
}

uint64_t process_result(uint64_t a1, uint64_t a2, int a3)
{
  v12[27] = 0;
  uint64_t v3 = *(void *)(a1 + 304);
  if (v3)
  {
    *(_DWORD *)int v12 = *(_DWORD *)v3;
    v12[4] = *(unsigned char *)(v3 + 4);
    LOWORD(v3) = *(_WORD *)(a1 + 352);
  }
  else
  {
    v12[4] = 0;
    *(_DWORD *)int v12 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 312);
  if (v4)
  {
    *(_DWORD *)&v12[5] = *(_DWORD *)v4;
    v12[9] = *(unsigned char *)(v4 + 4);
    LOWORD(v4) = *(_WORD *)(a1 + 354);
  }
  else
  {
    v12[9] = 0;
    *(_DWORD *)&v12[5] = 0;
  }
  uint64_t v5 = *(void *)(a1 + 320);
  if (v5)
  {
    *(_DWORD *)&v12[10] = *(_DWORD *)v5;
    v12[14] = *(unsigned char *)(v5 + 4);
    LOWORD(v5) = *(_WORD *)(a1 + 356);
  }
  else
  {
    v12[14] = 0;
    *(_DWORD *)&v12[10] = 0;
  }
  __int16 v6 = *(_WORD *)(a1 + 350);
  if (*(_DWORD *)(a1 + 4))
  {
    unint64_t v7 = *(_DWORD **)(a1 + 328);
    if (v7)
    {
      *(_DWORD *)&v12[15] = *v7;
      *(_DWORD *)&v12[18] = *(_DWORD *)((char *)v7 + 3);
      __int16 v8 = *(_WORD *)(a1 + 360);
      goto LABEL_16;
    }
    *(_DWORD *)&v12[18] = 0;
    *(_DWORD *)&v12[15] = 0;
  }
  else
  {
    *(_DWORD *)&v12[18] = 0;
    *(_DWORD *)&v12[15] = 0;
  }
  __int16 v8 = *(_WORD *)(a1 + 350);
LABEL_16:
  uint64_t v9 = *(void *)(a1 + 336);
  if (v9)
  {
    *(_DWORD *)&v12[22] = *(_DWORD *)v9;
    v12[26] = *(unsigned char *)(v9 + 4);
    if (*(_DWORD *)a1 == 21) {
      LOBYTE(v9) = *(unsigned char *)(a1 + 368);
    }
    else {
      LOBYTE(v9) = 0;
    }
  }
  else
  {
    v12[26] = 0;
    *(_DWORD *)&v12[22] = 0;
  }
  uint64_t v10 = a2 + 40 * a3;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v12;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)&v12[12];
  *(_WORD *)(v10 + 2_Block_object_dispose(&STACK[0x510], 8) = v3;
  *(_WORD *)(v10 + 30) = v4;
  *(_WORD *)(v10 + 32) = v5;
  *(_WORD *)(v10 + 34) = v8;
  *(_WORD *)(v10 + 36) = v6;
  *(unsigned char *)(v10 + 3_Block_object_dispose(&STACK[0x510], 8) = v9;
  *(unsigned char *)(v10 + 39) = 0;
  return (a3 + 1);
}

uint64_t scan(uint64_t a1, unsigned int (*a2)(uint64_t), uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v10 = *(char *)(*(int *)(a1 + 200) + a1 + 391);
  if (*(unsigned char *)(*(int *)(a1 + 200) + a1 + 391) && ((v10 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
  {
    int v12 = *(_DWORD *)(a1 + 108) | v10;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 4)) {
    infoint size = db_get_infosize(*(void *)(a1 + 120));
  }
  else {
    infoint size = 0;
  }
  int v13 = db_get_infosize(*(void *)(a1 + 128));
  uint64_t v14 = *(unsigned __int8 **)(a1 + 296);
  uint64_t v15 = *(unsigned __int8 **)(a1 + 304);
  unsigned int v16 = *v15;
  if (v14 != v15)
  {
    uint64_t v17 = *(unsigned __int8 **)(a1 + 312);
    v16 += *v17;
    if (v14 != v17) {
      v16 += **(unsigned __int8 **)(a1 + 320);
    }
  }
  if (*(_DWORD *)(a1 + 4)) {
    uint64_t v61 = *(void *)(a1 + 176);
  }
  else {
    uint64_t v61 = 0;
  }
  uint64_t v18 = *(unsigned __int8 **)(a1 + 184);
  *(void *)(a1 + 32_Block_object_dispose(&STACK[0x510], 8) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v19 = *(int *)(a1 + 200);
  if (v16 == v19)
  {
    if (!match_stem_null((int *)a1) || !a2(a1)) {
      return a4;
    }
    return process_result(a1, a3, a4);
  }
  if (*(_DWORD *)a1 == 21 && *(unsigned char *)(a1 + 348) == 65) {
    return a4;
  }
  if (*(_DWORD *)(a1 + 388))
  {
    LODWORD(v21) = *(_DWORD *)(a1 + 292);
  }
  else
  {
    char v22 = (unsigned char *)(a1 + 204);
    if (!*(unsigned char *)(a1 + 204))
    {
      __int16 v23 = *(char **)(a1 + 192);
      v22[v19] = 0;
      if ((int)v19 >= 1)
      {
        uint64_t v24 = (unsigned char *)(v19 + a1 + 203);
        unsigned int v25 = v19 + 1;
        do
        {
          char v26 = *v23++;
          *v24-- = v26;
          --v25;
        }
        while (v25 > 1);
      }
    }
    uint64_t v21 = db_search(*(void *)(a1 + 128), v22, (uint64_t)v18);
    *(_DWORD *)(a1 + 292) = v21;
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    *(_DWORD *)(a1 + 38_Block_object_dispose(&STACK[0x510], 8) = 1;
  }
  uint64_t v58 = v18;
  uint64_t v59 = a3;
  int v60 = a2;
  if ((int)v21 >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(a1 + 292); ++i)
    {
      *(void *)(a1 + 336) = v18;
      if ((signed int)(v16 + *v18) > *(_DWORD *)(a1 + 200)) {
        break;
      }
      fill_term(a1);
      int v28 = *(_DWORD *)(a1 + 200);
      int v29 = **(unsigned __int8 **)(a1 + 336);
      int v30 = *(char *)(a1 + v28 + ~v29 + 392);
      if (*(unsigned char *)(a1 + v28 + ~v29 + 392) && ((v30 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
      {
        *(_DWORD *)(a1 + 108) |= v30;
        break;
      }
      if (v16 + v29 == v28)
      {
        uint64_t v31 = *(__int16 *)(a1 + 350) < 0 ? *(char **)(a1 + 144) : *(char **)(a1 + 136);
        if (mt_match(v31, *(char *)(a1 + 348), *(char *)(a1 + 368))
          && ((*(unsigned __int16 *)(a1 + 370) ^ *(unsigned __int16 *)(a1 + 350)) & *(unsigned __int16 *)(a1 + 372)) == 0
          && a2(a1)
          && (*(_DWORD *)a1 != 14
           || (*(__int16 *)(a1 + 350) & 0x80000000) == 0
           || *(unsigned char *)(a1 + 368) != 110
           || *(unsigned __int8 *)(*(void *)(a1 + 192) + v16 - 1) == *(unsigned __int8 *)(*(void *)(a1 + 192) + v16)))
        {
          a4 = process_result(a1, v59, a4);
          if (a4 == a5) {
            return a5;
          }
        }
      }
      v18 += v13 + 1;
    }
  }
  if (!*(_DWORD *)(a1 + 4)) {
    return a4;
  }
  if (*(_DWORD *)(a1 + 384) != v16)
  {
    uint64_t v21 = db_search(*(void *)(a1 + 120), (unsigned char *)(*(void *)(a1 + 192) + v16), v61);
    *(_DWORD *)(a1 + 28_Block_object_dispose(&STACK[0x510], 8) = v21;
    if ((v21 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 384) = v16;
      goto LABEL_57;
    }
    return v21;
  }
  LODWORD(v21) = *(_DWORD *)(a1 + 288);
LABEL_57:
  if ((int)v21 < 1) {
    return a4;
  }
  uint64_t v32 = 0;
  int v33 = infosize + 1;
  uint64_t v34 = v13 + 1;
  uint64_t v35 = v33;
  uint64_t v36 = a1 + v16 - 1;
  while (1)
  {
    uint64_t v37 = (unsigned __int8 *)(v61 + v32 * v35);
    *(void *)(a1 + 32_Block_object_dispose(&STACK[0x510], 8) = v37;
    *(void *)(a1 + 336) = 0;
    uint64_t v38 = *(void *)(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 88);
    if ((int)v39 >= 1)
    {
      unint64_t v40 = (__int16)(v37[2] << 8) | (unint64_t)v37[1];
      v38 += v40 + v40 * (v39 - 1);
    }
    *(unsigned char *)(a1 + 35_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)v38;
    *(_WORD *)(a1 + 360) = *(_WORD *)(v38 + 1);
    uint64_t v41 = *(void *)(a1 + 64);
    uint64_t v42 = *(void *)(a1 + 96);
    if ((int)v42 >= 1)
    {
      unint64_t v43 = (__int16)(v37[4] << 8) | (unint64_t)v37[3];
      v41 += v43 + v43 * (v42 - 1);
    }
    *(unsigned char *)(a1 + 362) = *(unsigned char *)v41;
    *(_WORD *)(a1 + 364) = *(_WORD *)(v41 + 1);
    *(_WORD *)(a1 + 366) = *(_WORD *)(v41 + 3);
    uint64_t v44 = *v37;
    int v45 = *(char *)(v36 + v44 + 392);
    if (*(unsigned char *)(v36 + v44 + 392))
    {
      if ((v45 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0) {
        break;
      }
    }
    int v46 = v16 + v44;
    int v47 = *(_DWORD *)(a1 + 200);
    if (v46 != v47)
    {
      if (v46 <= v47 && match_stem_nont(a1) && *(int *)(a1 + 292) >= 1)
      {
        uint64_t v51 = 0;
        uint64_t v52 = v58;
        while (1)
        {
          *(void *)(a1 + 336) = v52;
          if ((signed int)(v16 + *v52 + **(unsigned __int8 **)(a1 + 328)) > *(_DWORD *)(a1 + 200)) {
            break;
          }
          fill_term(a1);
          int v53 = *(_DWORD *)(a1 + 200);
          int v54 = **(unsigned __int8 **)(a1 + 336);
          int v55 = *(char *)(a1 + v53 + ~v54 + 392);
          if (*(unsigned char *)(a1 + v53 + ~v54 + 392) && ((v55 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
          {
            *(_DWORD *)(a1 + 108) |= v55;
            goto LABEL_98;
          }
          if (v16 + v54 + **(unsigned __int8 **)(a1 + 328) == v53)
          {
            int v56 = *(__int16 *)(a1 + 360) < 0 ? *(char **)(a1 + 144) : *(char **)(a1 + 136);
            if (mt_match(v56, *(char *)(a1 + 358), *(char *)(a1 + 368)))
            {
              if (((*(unsigned __int16 *)(a1 + 370) ^ *(unsigned __int16 *)(a1 + 360)) & *(unsigned __int16 *)(a1 + 372)) == 0)
              {
                if (v60(a1))
                {
                  if (*(_DWORD *)a1 != 14
                    || (*(__int16 *)(a1 + 360) & 0x80000000) == 0
                    || *(unsigned char *)(a1 + 368) != 110
                    || (int v57 = (unsigned __int8 *)(*(void *)(a1 + 192)
                                                + **(unsigned __int8 **)(a1 + 328)
                                                + (unint64_t)v16),
                        *(v57 - 1) == *v57))
                  {
                    a4 = process_result(a1, v59, a4);
                    if (a4 == a5) {
                      return a5;
                    }
                  }
                }
              }
            }
          }
          v52 += v34;
          if (++v51 >= *(int *)(a1 + 292)) {
            goto LABEL_98;
          }
        }
      }
      goto LABEL_98;
    }
    if (match_stem_nont(a1))
    {
      if (*(__int16 *)(a1 + 360) < 0)
      {
        char v48 = *(char **)(a1 + 144);
        int v49 = *(char *)(a1 + 358);
      }
      else
      {
        char v48 = *(char **)(a1 + 136);
        int v49 = *(char *)(a1 + 358);
        if (*(_DWORD *)a1 == 14)
        {
          int v50 = 100;
LABEL_95:
          if (mt_match(v48, v49, v50))
          {
            if (v60(a1))
            {
              a4 = process_result(a1, v59, a4);
              if (a4 == a5) {
                return a5;
              }
            }
          }
          goto LABEL_98;
        }
      }
      int v50 = 97;
      goto LABEL_95;
    }
LABEL_98:
    if (++v32 >= *(int *)(a1 + 288)) {
      return a4;
    }
  }
  int v12 = *(_DWORD *)(a1 + 108) | v45;
LABEL_7:
  *(_DWORD *)(a1 + 10_Block_object_dispose(&STACK[0x510], 8) = v12;
  return a4;
}

BOOL supl_stem_suffix_check_hun(uint64_t a1)
{
  unsigned int v1 = *(void *)(a1 + 336) != 0;
  if (*(void *)(a1 + 328)) {
    v1 |= 2u;
  }
  return v1 >= 2
      && (v1 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000)
      && (*(_WORD *)(a1 + 350) & 0x800F) != 0x8000
      && strstr((char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)), "bb") != 0;
}

BOOL supl_prefix_stem_suffix_check_hun(uint64_t a1)
{
  unsigned int v1 = *(void *)(a1 + 336) != 0;
  if (*(void *)(a1 + 328)) {
    v1 |= 2u;
  }
  return v1 >= 2
      && (v1 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000)
      && (*(_WORD *)(a1 + 350) & 0x800F) != 0x8000
      && strstr((char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)+ (unint64_t)**(unsigned __int8 **)(a1 + 320)), "bb") != 0;
}

uint64_t match_stem_null(int *a1)
{
  if (*((__int16 *)a1 + 175) < 0)
  {
    uint64_t v3 = (char *)*((void *)a1 + 18);
    int v4 = *((char *)a1 + 348);
    goto LABEL_6;
  }
  int v2 = *a1;
  uint64_t v3 = (char *)*((void *)a1 + 17);
  int v4 = *((char *)a1 + 348);
  if (v2 != 14)
  {
LABEL_6:
    int v5 = 97;
    return mt_match(v3, v4, v5);
  }
  int v5 = 100;
  return mt_match(v3, v4, v5);
}

uint64_t stem_prefix_stem_suffix_check_hun(uint64_t a1)
{
  uint64_t v2 = **(unsigned __int8 **)(a1 + 304);
  if ((*(unsigned char *)(a1 + 273) & 1) == 0)
  {
    int v3 = **(unsigned __int8 **)(a1 + 312);
    int v4 = v3 + v2;
    if (**(unsigned char **)(a1 + 312))
    {
      unsigned int v5 = 0;
      uint64_t v6 = *(void *)(a1 + 192);
      uint64_t v7 = (v3 + v2);
      do
      {
        uint64_t v8 = v7 - 1;
        v5 += is_cwi_vowel_hun(*(char *)(v6 + v7 - 1), *(char *)(v6 + v7 - 2));
        uint64_t v7 = v8;
      }
      while (v8 > v2);
      if (v5 > 1) {
        goto LABEL_8;
      }
    }
    if ((~*(unsigned __int16 *)(a1 + 346) & 0x8003) == 0 || (~*(unsigned __int16 *)(a1 + 350) & 0x8003) == 0)
    {
LABEL_8:
      uint64_t v9 = *(unsigned __int8 **)(a1 + 328);
      LODWORD(v10) = v4 + **(unsigned __int8 **)(a1 + 320);
      if (v9) {
        LODWORD(v10) = v10 + *v9;
      }
      if (v10)
      {
        unsigned int v11 = 0;
        uint64_t v12 = *(void *)(a1 + 192);
        uint64_t v10 = v10;
        do
        {
          if (v10 < 2) {
            char v13 = 32;
          }
          else {
            char v13 = *(unsigned char *)(v12 + (v10 - 2));
          }
          uint64_t v14 = v10 - 1;
          v11 += is_cwi_vowel_hun(*(char *)(v12 - 1 + v10), v13);
          uint64_t v10 = v14;
        }
        while (v14);
        if (v11 >= 7)
        {
          uint64_t result = 0;
          *(_DWORD *)(a1 + 108) |= 4u;
          return result;
        }
      }
    }
  }
  if (v2 >= 2)
  {
    uint64_t v16 = *(void *)(a1 + 192);
    int v17 = *(unsigned __int8 *)(v16 + v2);
    if (v17 == *(unsigned __int8 *)(v16 + (v2 - 1))
      && v17 == *(unsigned __int8 *)(v16 + (v2 - 2)))
    {
      return 0;
    }
  }
  if (v2 != **(unsigned __int8 **)(a1 + 320)
    || (uint64_t result = SLstrncmp(*(unsigned char **)(a1 + 192), (unsigned __int8 *)(*(void *)(a1 + 192) + v2 + **(unsigned __int8 **)(a1 + 312)), v2), result))
  {
    unsigned int v18 = *(void *)(a1 + 336) != 0;
    if (*(void *)(a1 + 328)) {
      v18 |= 2u;
    }
    if (v18 >= 2 && (v18 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000))
    {
      int v19 = *(unsigned __int16 *)(a1 + 350);
      if ((v19 & 0xFFFF800F) != 0x8000)
      {
        int v20 = *(unsigned __int16 *)(a1 + 360);
        if (((~v20 & 0x8010) != 0 || (v20 & 0xE) == 6) && (v19 & 0x8000) == 0)
        {
          BOOL v21 = (v20 & 0x8006) == 32770;
          return (*(_WORD *)(a1 + 346) & 0x8006) == 0x8002 && v21;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL stem_stem_suffix_check_hun(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 273)) {
    goto LABEL_19;
  }
  int v2 = *(unsigned __int16 *)(a1 + 346);
  int v3 = ~v2 & 0x8003;
  int v4 = v2 & 0x800E;
  if (v3 || v4 == 32774)
  {
    int v6 = *(unsigned __int16 *)(a1 + 350);
    if ((~v6 & 0x8003) != 0 || (v6 & 0x800E) == 0x8006) {
      goto LABEL_19;
    }
  }
  LODWORD(v7) = **(unsigned __int8 **)(a1 + 312) + **(unsigned __int8 **)(a1 + 304);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 328);
  if (v8) {
    LODWORD(v7) = v7 + *v8;
  }
  if (!v7) {
    goto LABEL_19;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)(a1 + 192);
  uint64_t v7 = v7;
  do
  {
    if (v7 < 2) {
      char v11 = 32;
    }
    else {
      char v11 = *(unsigned char *)(v10 + (v7 - 2));
    }
    uint64_t v12 = v7 - 1;
    v9 += is_cwi_vowel_hun(*(char *)(v10 - 1 + v7), v11);
    uint64_t v7 = v12;
  }
  while (v12);
  if (v9 < 7)
  {
LABEL_19:
    uint64_t v14 = **(unsigned __int8 **)(a1 + 304);
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      uint64_t v16 = *(void *)(a1 + 192);
      int v17 = *(unsigned __int8 *)(v16 + v14);
      int v18 = (char)v17;
      int v19 = *(unsigned __int8 *)(v16 + (v14 - 1));
      if (v17 == v19 && *(unsigned __int8 *)(v16 + v15) == v17) {
        return 0;
      }
      if (v14 >= 3
        && **(unsigned __int8 **)(a1 + 312) >= 2u
        && *(unsigned __int8 *)(v14 + v16 + 1) == v19
        && *(unsigned __int8 *)(v16 + v15) == v17
        && *(unsigned __int8 *)(v16 + (v14 - 3)) == v17)
      {
        int v20 = memchr("glnt", (char)v17, 5uLL);
        if (v19 == 121 && v20 != 0) {
          return 0;
        }
        char v22 = memchr("ds", v18, 3uLL);
        if (v19 == 122 && v22 != 0) {
          return 0;
        }
        uint64_t v24 = memchr("cz", v18, 3uLL);
        if (v19 == 115)
        {
          if (v24) {
            return 0;
          }
        }
        unsigned int v25 = memchr("GLNT", v18, 5uLL);
        if (v19 == 89)
        {
          if (v25) {
            return 0;
          }
        }
        char v26 = memchr("DS", v18, 3uLL);
        if (v19 == 90)
        {
          if (v26) {
            return 0;
          }
        }
        unsigned __int16 v27 = memchr("CZ", v18, 3uLL);
        if (v19 == 83)
        {
          if (v27) {
            return 0;
          }
        }
      }
    }
    if (v14 == **(unsigned __int8 **)(a1 + 312)
      && !SLstrncmp(*(unsigned char **)(a1 + 192), (unsigned __int8 *)(*(void *)(a1 + 192) + v14), v14))
    {
      return 0;
    }
    else
    {
      if (*(void *)(a1 + 328)) {
        uint64_t v28 = (*(void *)(a1 + 336) != 0) | 2u;
      }
      else {
        uint64_t v28 = *(void *)(a1 + 336) != 0;
      }
      switch(v28)
      {
        case 1:
          int v34 = *(unsigned __int16 *)(a1 + 350);
          if ((v34 & 0xFFFF800F) == 0x8000) {
            return 0;
          }
          __int16 v35 = *(_WORD *)(a1 + 346);
          if ((v34 & 0x800E) == 0x8002 && (v35 & 0x8006) == 0x8002) {
            goto LABEL_82;
          }
          BOOL v13 = 0;
          if ((v34 & 0x800E) == 0x8006 && (v35 & 0x800E) == 0x8006)
          {
            int v36 = v35 & 0x801E;
            int v37 = v34 & 0x801E;
            if (v37 == 32790 && v36 == 32774) {
              goto LABEL_82;
            }
            if (v37 != 32774 || v36 != 32774) {
              goto LABEL_74;
            }
            goto LABEL_70;
          }
          return v13;
        case 2:
          goto LABEL_77;
        case 3:
          if ((*(_WORD *)(a1 + 360) & 0x800F) == 0x8000) {
            return 0;
          }
LABEL_77:
          int v38 = *(unsigned __int16 *)(a1 + 350);
          if ((v38 & 0xFFFF800F) == 0x8000) {
            return 0;
          }
          int v39 = *(unsigned __int16 *)(a1 + 360);
          if ((~v39 & 0x8010) == 0 && (v39 & 0xE) != 6) {
            return 0;
          }
          int v41 = *(unsigned __int16 *)(a1 + 346);
          if ((v41 & 0x8006) == 0x8002)
          {
            BOOL v13 = 1;
            if ((v38 & 0x800E) == 0x8002 || (v39 & 0x8006) == 0x8002) {
              return v13;
            }
          }
          if ((v41 & 0x800E) == 0x800A)
          {
            BOOL v13 = 1;
            if ((v38 & 0x800E) == 0x8002 || (v39 & 0x800E) == 0x8002) {
              return v13;
            }
          }
          if ((v41 & 0xFFFF800F) == 0x8006)
          {
            BOOL v42 = (v38 & 0x800E) == 32770;
            unsigned int v43 = v38 & 0xFFFF8003;
            if (((v42 ^ (v43 != 32771)) & 1) == 0 && (v41 & 0xFFFF8003) != 0x8003 && v43 != 32771)
            {
              BOOL v13 = 1;
              if (!SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "\xA3", 1)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "\x96", 1)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "j\xA3", 2)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)
                                            + **(unsigned __int8 **)(a1 + 304)
                                            + **(unsigned __int8 **)(a1 + 312)),
                                    "j\x96",
                                    2)
                || !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "nyi", 3)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "s", 1)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "os", 2)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)
                                            + **(unsigned __int8 **)(a1 + 304)
                                            + **(unsigned __int8 **)(a1 + 312)),
                                    "es",
                                    2)
                || !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "as", 2)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "\x94s", 2)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "nk\x82nt", 5)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)
                                            + **(unsigned __int8 **)(a1 + 304)
                                            + **(unsigned __int8 **)(a1 + 312)),
                                    "onk\x82nt",
                                    6)
                || !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "enk\x82nt", 6)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "ank\x82nt", 6)|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "\x94nk\x82nt", 6))
              {
                return v13;
              }
              if (!SLstrncmp((unsigned char *)(*(void *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)), "i", 1)&& (!SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "nap", 3)&& **(unsigned char **)(a1 + 312) == 3|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "het", 3)&& **(unsigned char **)(a1 + 312) == 3|| !SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "hav", 3)
                 && **(unsigned char **)(a1 + 312) == 3
                 || !SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "\x82v", 2)&& **(unsigned char **)(a1 + 312) == 2))
              {
                return v13;
              }
            }
          }
          __int16 v29 = *(_WORD *)(a1 + 346);
          if ((v29 & 0x800E) != 0x8006) {
            return 0;
          }
          __int16 v30 = *(_WORD *)(a1 + 350);
          int v31 = v30 & 0x800E;
LABEL_55:
          if (v31 != 32774) {
            return 0;
          }
          int v32 = v29 & 0x801E;
          int v33 = v30 & 0x801E;
          if (v32 == 32774 && v33 == 32790) {
            goto LABEL_82;
          }
          if (v32 != 32774 || v33 != 32774) {
            goto LABEL_74;
          }
LABEL_70:
          if (SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "ezer", 4)
            && SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "egyezer", 7)&& SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "ezr", 3)&& SLstrncmp((unsigned char *)(*(void *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304)), "egyezr", 6))
          {
            goto LABEL_82;
          }
LABEL_74:
          if (SLstrncmp(*(unsigned char **)(a1 + 192), "ezer", 4)) {
            BOOL v13 = SLstrncmp(*(unsigned char **)(a1 + 192), "egyezer", 7) == 0;
          }
          else {
LABEL_82:
          }
            BOOL v13 = 1;
          break;
        default:
          __int16 v29 = *(_WORD *)(a1 + 346);
          if ((v29 & 0x8006) == 0x8002 && (*(_WORD *)(a1 + 350) & 0x800E) == 0x8002) {
            goto LABEL_82;
          }
          if ((v29 & 0x800E) != 0x8006) {
            return 0;
          }
          __int16 v30 = *(_WORD *)(a1 + 350);
          int v31 = v30 & 0x800E;
          goto LABEL_55;
      }
    }
  }
  else
  {
    BOOL v13 = 0;
    *(_DWORD *)(a1 + 108) |= 4u;
  }
  return v13;
}

uint64_t an_get_status(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t is_nominal_result(uint64_t a1, int a2)
{
  int v2 = *(__int16 *)(a1 + 34);
  if (a2 == 21 && (v2 & 0x80000000) == 0 && *(unsigned char *)(a1 + 22) && memchr("defrstu", *(char *)(a1 + 38), 8uLL)) {
    return 1;
  }
  else {
    return (unsigned __int16)v2 >> 15;
  }
}

BOOL is_special_result_hun(uint64_t a1)
{
  return *(__int16 *)(a1 + 36) == -32768;
}

uint64_t fill_term(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 64);
  uint64_t v2 = *(void *)(result + 96);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (__int16)(*(unsigned __int8 *)(*(void *)(result + 336) + 2) << 8) | (unint64_t)*(unsigned __int8 *)(*(void *)(result + 336) + 1);
    v1 += v3 + v3 * (v2 - 1);
  }
  *(unsigned char *)(result + 36_Block_object_dispose(&STACK[0x510], 8) = *(unsigned char *)v1;
  *(_WORD *)(result + 370) = *(_WORD *)(v1 + 1);
  *(_WORD *)(result + 372) = *(_WORD *)(v1 + 3);
  return result;
}

uint64_t match_stem_nont(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 348);
  char v3 = *(unsigned char *)(a1 + 362);
  if (*(__int16 *)(a1 + 350) < 0) {
    int v4 = *(char **)(a1 + 144);
  }
  else {
    int v4 = *(char **)(a1 + 136);
  }
  uint64_t result = mt_match(v4, v2, v3);
  if (result) {
    return ((*(unsigned __int16 *)(a1 + 364) ^ *(unsigned __int16 *)(a1 + 350)) & *(unsigned __int16 *)(a1 + 366)) == 0;
  }
  return result;
}

unint64_t is_cwi_vowel_hun(int __c, int a2)
{
  unint64_t result = (unint64_t)memchr("a\xA0e\x82i\xA1o\xA2\x94\x93u\xA3\x81\x96A\x8FE\x90I\x8DO\x95\x99\xA7U\x97\x9A\x98", __c, 0x1DuLL);
  if (result) {
    return (__c & 0xFFFFFFDF) != 0x59 || memchr("glntGLNT", a2, 9uLL) == 0;
  }
  return result;
}

double cdict_init(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = -1;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x510], 8) = a4;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x510], 8) = 0u;
  return result;
}

void cdict_finish(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v3 = dlk_next((uint64_t)v2);
      free(v2);
      char v2 = (void *)v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 48);
  if (v4)
  {
    do
    {
      uint64_t v5 = dlk_next((uint64_t)v4);
      free(v4);
      int v4 = (void *)v5;
    }
    while (v5);
  }
}

uint64_t cdict_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t cdict_access(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    int v5 = a2;
    if (*(_DWORD *)(a1 + 20) > a2)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = *(_DWORD *)(v7 + 20);
      if (v8 <= a2)
      {
        do
        {
          v5 -= v8;
          uint64_t v7 = dlk_next(v7);
          int v8 = *(_DWORD *)(v7 + 20);
        }
        while (v5 >= v8);
      }
      uint64_t v9 = v7 + 16 * ((*(_DWORD *)(v7 + 16) + v5) % *(_DWORD *)(a1 + 28));
      *(void *)a3 = *(void *)(v9 + 24);
      *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v9 + 32);
      *(void *)(a3 + 16) = v7;
      *(_DWORD *)(a3 + 24) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t cdict_find_first(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4 = a3;
  unsigned __int8 v5 = a2[a3];
  a2[a3] = 0;
  int v6 = *(_DWORD *)(a1 + 20);
  int v7 = v6 - 1;
  if (v6 < 1)
  {
LABEL_10:
    uint64_t v13 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }
  int v9 = 0;
  memset(v16, 0, sizeof(v16));
  while (1)
  {
    int v10 = v7 + v9;
    if (v7 + v9 < 0 != __OFADD__(v7, v9)) {
      ++v10;
    }
    uint64_t v11 = (v10 >> 1);
    cdict_access(a1, v10 >> 1, (uint64_t)v16);
    int v12 = _strcomp(a2, (unsigned __int8 *)(*(void *)&v16[0] + SDWORD2(v16[0]) + 20), a1);
    if (v12 < 0)
    {
      int v7 = v11 - 1;
      goto LABEL_9;
    }
    if (!v12) {
      break;
    }
    int v9 = v11 + 1;
LABEL_9:
    if (v7 < v9) {
      goto LABEL_10;
    }
  }
  do
  {
    uint64_t v13 = v11;
    BOOL v15 = __OFSUB__(v11, 1);
    uint64_t v11 = (v11 - 1);
    if ((int)v11 < 0 != v15) {
      break;
    }
    cdict_access(a1, v11, (uint64_t)v16);
  }
  while (!_strcomp(a2, (unsigned __int8 *)(*(void *)&v16[0] + SDWORD2(v16[0]) + 20), a1));
LABEL_11:
  a2[v4] = v5;
  return v13;
}

uint64_t _strcomp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a3 + 256;
  do
  {
    unsigned int v5 = *a1++;
    uint64_t v4 = v5;
    unsigned int v7 = *a2++;
    uint64_t v6 = v7;
    if (v4) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      break;
    }
    if ((*(unsigned char *)(a3 + 16) & 2) != 0)
    {
      LODWORD(v4) = *(unsigned __int8 *)(v3 + v4);
      LODWORD(v6) = *(unsigned __int8 *)(v3 + v6);
    }
  }
  while (v4 == v6);
  BOOL v9 = v4 > v6;
  if (v4 >= v6) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = -1;
  }
  if (v9) {
    return 1;
  }
  else {
    return v10;
  }
}

uint64_t cdict_locate_first(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4 = a3;
  unsigned __int8 v5 = a2[a3];
  a2[a3] = 0;
  int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = (v6 - 1);
  if (v6 >= 1)
  {
    int v9 = 0;
    memset(v19, 0, sizeof(v19));
    do
    {
      int v10 = v7 + v9;
      if ((int)v7 + v9 < 0 != __OFADD__(v7, v9)) {
        ++v10;
      }
      uint64_t v11 = (v10 >> 1);
      cdict_access(a1, v10 >> 1, (uint64_t)v19);
      int v12 = _strcomp(a2, (unsigned __int8 *)(*(void *)&v19[0] + SDWORD2(v19[0]) + 20), a1);
      if (v12 < 0)
      {
        uint64_t v7 = (v11 - 1);
      }
      else
      {
        if (!v12)
        {
          do
          {
            uint64_t v7 = v11;
            BOOL v17 = __OFSUB__(v11, 1);
            uint64_t v11 = (v11 - 1);
            if ((int)v11 < 0 != v17) {
              break;
            }
            cdict_access(a1, v11, (uint64_t)v19);
          }
          while (!_strcomp(a2, (unsigned __int8 *)(*(void *)&v19[0] + SDWORD2(v19[0]) + 20), a1));
          goto LABEL_25;
        }
        int v9 = v11 + 1;
      }
    }
    while ((int)v7 >= v9);
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        cdict_access(a1, v7, (uint64_t)v19);
        uint64_t v13 = (const char *)(*(void *)&v19[0] + SDWORD2(v19[0]) + 20);
        int v14 = _strcommon((uint64_t)a2, (uint64_t)v13, a1);
        if (!v14)
        {
LABEL_15:
          uint64_t v7 = 0xFFFFFFFFLL;
          goto LABEL_25;
        }
        int v15 = v14;
        if (v14 == strlen(v13)) {
          break;
        }
        BOOL v16 = (int)v7 <= 0;
        LODWORD(v7) = v7 - 1;
        if (v16) {
          goto LABEL_15;
        }
      }
      do
      {
        BOOL v17 = __OFSUB__(v7, 1);
        LODWORD(v7) = v7 - 1;
        if ((int)v7 < 0 != v17)
        {
          uint64_t v7 = 0;
          goto LABEL_25;
        }
        cdict_access(a1, v7, (uint64_t)v19);
      }
      while ((int)_strcommon((uint64_t)a2, *(void *)&v19[0] + SDWORD2(v19[0]) + 20, a1) >= v15);
      uint64_t v7 = (v7 + 1);
    }
  }
LABEL_25:
  a2[v4] = v5;
  return v7;
}

uint64_t _strcommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = 0; ; ++result)
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + result);
    uint64_t v6 = *(unsigned __int8 *)(a2 + result);
    if (v5 != v6) {
      break;
    }
    if (!*(unsigned char *)(a1 + result)) {
      return result;
    }
LABEL_14:
    ;
  }
  if ((*(unsigned char *)(a3 + 16) & 2) != 0)
  {
    BOOL v7 = !*(unsigned char *)(a2 + result) || v5 == 0;
    if (!v7 && *(unsigned __int8 *)(*(void *)a3 + 256 + v5) == *(unsigned __int8 *)(*(void *)a3 + 256 + v6)) {
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t cdict_delete(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = a2;
    if (*(_DWORD *)(a1 + 20) > a2)
    {
      uint64_t v5 = *(void *)(a1 + 48);
      for (int i = *(_DWORD *)(v5 + 20); v4 >= i; int i = *(_DWORD *)(v5 + 20))
      {
        v4 -= i;
        uint64_t v5 = dlk_next(v5);
      }
      int v7 = i - 1;
      if (v4 < i - 1)
      {
        int v8 = *(_DWORD *)(a1 + 28);
        int v9 = v4 + *(_DWORD *)(v5 + 16);
        int v10 = ~v4 + i;
        do
        {
          int v11 = v9 % v8;
          uint64_t v12 = v5 + 24 + 16 * (++v9 % v8);
          uint64_t v13 = v5 + 24 + 16 * v11;
          *(void *)uint64_t v13 = *(void *)v12;
          *(_DWORD *)(v13 + _Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v12 + 8);
          --v10;
        }
        while (v10);
      }
      *(_DWORD *)(v5 + 20) = v7;
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 1;
      if (!v7) {
        dlk_unlink((void *)(a1 + 48), (void *)v5);
      }
      --*(_DWORD *)(a1 + 20);
      return 1;
    }
  }
  return result;
}

uint64_t cdict_add(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3 < -1) {
    return 4294967285;
  }
  if (*(_DWORD *)(a1 + 24) < a3) {
    return 4294967286;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  if (!v3)
  {
    int v10 = 0;
    goto LABEL_28;
  }
  int v8 = v3 - 1;
  cdict_access(a1, v3 - 1, (uint64_t)&v39);
  int v9 = _strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1);
  if ((v9 & 0x80000000) == 0)
  {
    int v10 = (v9 == 0) & *(unsigned char *)(a1 + 16);
    if (((v9 == 0) & *(unsigned char *)(a1 + 16)) != 0) {
      --v3;
    }
    goto LABEL_28;
  }
  if (v3 < 1)
  {
    int v3 = 0;
    int v10 = 0;
    goto LABEL_27;
  }
  int v11 = 0;
  while (1)
  {
    int v12 = v8 + v11;
    if (v8 + v11 < 0 != __OFADD__(v8, v11)) {
      ++v12;
    }
    int v3 = v12 >> 1;
    cdict_access(a1, v12 >> 1, (uint64_t)&v39);
    int v13 = _strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1);
    if (v13 < 0)
    {
      int v8 = v3 - 1;
      goto LABEL_19;
    }
    if (!v13) {
      break;
    }
    int v11 = v3 + 1;
LABEL_19:
    if (v8 < v11)
    {
      int v10 = 0;
      int v3 = v11;
      goto LABEL_27;
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v10 = 1;
  }
  else
  {
    do
    {
      int v14 = v3 + 1;
      if (v3 >= *(_DWORD *)(a1 + 20) - 1) {
        break;
      }
      cdict_access(a1, ++v3, (uint64_t)&v39);
    }
    while (!_strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1));
    int v10 = 0;
    int v3 = v14;
  }
LABEL_27:
  *(_DWORD *)(a1 + 12) = 0;
LABEL_28:
  uint64_t v15 = *(void *)(a1 + 32);
  if (!v15)
  {
LABEL_31:
    BOOL v16 = malloc_type_calloc(*(int *)(a1 + 24) + 23, 1uLL, 0xC49A6D2uLL);
    if (v16)
    {
      uint64_t v15 = (uint64_t)v16;
      v16[4] = 0;
      dlk_link((void *)(a1 + 32), v16, 0);
      goto LABEL_33;
    }
    return 0xFFFFFFFFLL;
  }
  while (*(_DWORD *)(v15 + 16) + a3 > *(_DWORD *)(a1 + 24))
  {
    uint64_t v15 = dlk_next(v15);
    if (!v15) {
      goto LABEL_31;
    }
  }
LABEL_33:
  uint64_t v17 = *(int *)(v15 + 16);
  memcpy((void *)(v15 + v17 + 20), a2, a3);
  *(_DWORD *)(v15 + 16) += a3;
  if (v3 != *(_DWORD *)(a1 + 20))
  {
    cdict_access(a1, v3, (uint64_t)&v39);
    if (!v10) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)&long long v40 = v18;
  if (!v18)
  {
    int v20 = malloc_type_calloc(16 * *(int *)(a1 + 28) + 24, 1uLL, 0x37889A18uLL);
    *(void *)&long long v40 = v20;
    if (v20)
    {
      v20[2] = 0;
      dlk_link((void *)(a1 + 48), v20, 0);
      DWORD2(v40) = 0;
      if (!v10) {
        goto LABEL_41;
      }
LABEL_38:
      uint64_t v19 = v40 + 16 * ((*(_DWORD *)(v40 + 16) + DWORD2(v40)) % *(_DWORD *)(a1 + 28));
      *(void *)(v19 + 24) = v15;
      *(_DWORD *)(v19 + 32) = v17;
      --*(_DWORD *)(a1 + 20);
      goto LABEL_60;
    }
    return 0xFFFFFFFFLL;
  }
  DWORD2(v40) = *(_DWORD *)(v18 + 20);
  if (v10) {
    goto LABEL_38;
  }
LABEL_41:
  uint64_t v21 = v40;
  int v22 = DWORD2(v40);
  while (1)
  {
    int v23 = *(_DWORD *)(v21 + 20);
    if (v22)
    {
      int v24 = *(_DWORD *)(a1 + 28);
      goto LABEL_44;
    }
    int v24 = *(_DWORD *)(a1 + 28);
    if (v23) {
      break;
    }
LABEL_44:
    int v25 = v23 - v22;
    if (v23 > v22)
    {
      int v26 = v22 + *(_DWORD *)(v21 + 16);
      do
      {
        uint64_t v27 = v15;
        int v28 = v17;
        uint64_t v29 = v21 + 16 * (v26 % v24);
        uint64_t v15 = *(void *)(v29 + 24);
        LODWORD(v17) = *(_DWORD *)(v29 + 32);
        *(void *)(v29 + 24) = v27;
        *(_DWORD *)(v29 + 32) = v28;
        ++v26;
        --v25;
      }
      while (v25);
      int v22 = v23;
    }
    if (v22 != v24)
    {
      uint64_t v36 = v21 + 16 * ((*(_DWORD *)(v21 + 16) + v22) % v24);
      *(void *)(v36 + 24) = v15;
      *(_DWORD *)(v36 + 32) = v17;
      goto LABEL_59;
    }
LABEL_53:
    if (dlk_next(v21))
    {
      uint64_t v21 = dlk_next(v21);
      int v22 = 0;
    }
    else
    {
      __int16 v35 = malloc_type_calloc(16 * *(int *)(a1 + 28) + 24, 1uLL, 0xA2406394uLL);
      if (!v35) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v21 = (uint64_t)v35;
      v35[2] = 0;
      dlk_link((void *)(a1 + 48), v35, 0);
      int v22 = 0;
    }
  }
  int v30 = *(_DWORD *)(v21 + 16);
  if (v23 == v24)
  {
    int v31 = (v23 + v30 - 1) % v23;
    uint64_t v32 = v21 + 16 * v31;
    uint64_t v33 = *(void *)(v32 + 24);
    int v34 = *(_DWORD *)(v32 + 32);
    *(void *)(v32 + 24) = v15;
    *(_DWORD *)(v32 + 32) = v17;
    *(_DWORD *)(v21 + 16) = v31;
    uint64_t v15 = v33;
    LODWORD(v17) = v34;
    goto LABEL_53;
  }
  int v37 = (v24 + v30 - 1) % v24;
  uint64_t v38 = v21 + 16 * v37;
  *(void *)(v38 + 24) = v15;
  *(_DWORD *)(v38 + 32) = v17;
  *(_DWORD *)(v21 + 16) = v37;
LABEL_59:
  *(_DWORD *)(v21 + 20) = v23 + 1;
LABEL_60:
  uint64_t result = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = 1;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

uint64_t letter_stat(uint64_t result, unsigned char *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a5 = 0;
  *a4 = 0;
  *a3 = 0;
  unsigned int v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(result + 8 * v5 + 1024);
      int v8 = a5;
      if ((v7 & 4) != 0) {
        goto LABEL_7;
      }
      if ((v7 & 2) != 0) {
        break;
      }
LABEL_8:
      unsigned int v5 = a2[++v6];
      if (!v5) {
        return result;
      }
    }
    int v8 = a4;
    if (!v6)
    {
      ++*a3;
      int v8 = a4;
    }
LABEL_7:
    ++*v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t dlk_prev(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t dlk_next(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *dlk_link(void *result, void *a2, uint64_t *a3)
{
  int v3 = result + 1;
  if (a3) {
    int v3 = a3;
  }
  uint64_t v4 = *v3;
  uint64_t *v3 = (uint64_t)a2;
  if ((uint64_t *)*result == a3) {
    unsigned int v5 = result;
  }
  else {
    unsigned int v5 = (void *)(v4 + 8);
  }
  *unsigned int v5 = a2;
  *a2 = v4;
  a2[1] = a3;
  return result;
}

void *dlk_unlink(void *a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = (void *)a2[1];
  if ((void *)*a1 == a2) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (void *)(*a2 + 8);
  }
  *uint64_t v4 = v3;
  uint64_t v6 = (void *)a1[1];
  uint64_t result = a1 + 1;
  if (v6 == a2) {
    int v3 = result;
  }
  void *v3 = v2;
  return result;
}

uint64_t stpcopy(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = a1 - 1;
  do
  {
    int v3 = *a2++;
    *(unsigned char *)++uint64_t result = v3;
  }
  while (v3);
  return result;
}

unsigned char *stpncopy(unsigned char *result, char *a2, int a3)
{
  for (; a3; --a3)
  {
    char v3 = *a2;
    if (!*a2) {
      break;
    }
    ++a2;
    *result++ = v3;
  }
  *uint64_t result = 0;
  return result;
}

uint64_t stricomp(unsigned char *a1, unsigned __int8 *a2)
{
  while (1)
  {
    int v2 = *a1;
    unsigned __int8 v3 = (v2 - 65) >= 0x1A ? *a1 : v2 + 32;
    int v4 = (char)v3;
    int v5 = v3;
    int v6 = *a2;
    if ((v6 - 65) < 0x1A) {
      LOBYTE(v6) = v6 + 32;
    }
    if (v5 != v6) {
      break;
    }
    ++a2;
    ++a1;
    if (!v4) {
      return 0;
    }
  }
  if (v4 < (char)v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t strnicomp(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    int v3 = *a1;
    if ((v3 - 65) < 0x1A) {
      LOBYTE(v3) = v3 + 32;
    }
    int v4 = (char)v3;
    int v5 = v3;
    int v6 = *a2;
    if ((v6 - 65) < 0x1A) {
      LOBYTE(v6) = v6 + 32;
    }
    if (v5 != v6) {
      break;
    }
    uint64_t v7 = 0;
    if (a3 == 1)
    {
      ++a2;
      ++a1;
      a3 = 0;
      if (v4) {
        continue;
      }
    }
    return v7;
  }
  if (v4 < (char)v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t freq_init(void *a1, uint64_t a2)
{
  int he_language = get_he_language(a2);
  if (he_language == 14) {
    int v5 = frequents_hun;
  }
  else {
    int v5 = 0;
  }
  if (he_language == 14) {
    LODWORD(v6) = 22;
  }
  else {
    LODWORD(v6) = 0;
  }
  int v7 = get_he_language(a2);
  if (v7 == 21) {
    int v8 = frequents_pol;
  }
  else {
    int v8 = v5;
  }
  if (v7 == 21) {
    uint64_t v6 = 127;
  }
  else {
    uint64_t v6 = v6;
  }
  if (!v8) {
    return 4294966682;
  }
  int v9 = 0;
  if (v6)
  {
    uint64_t v10 = v6;
    int v11 = (const char **)v8;
    do
    {
      int v12 = *v11++;
      v9 += strlen(v12) + 1;
      --v10;
    }
    while (v10);
  }
  int v13 = malloc_type_calloc(v9 + 8 * (int)v6 + 7, 1uLL, 0xE7047332uLL);
  *a1 = v13;
  if (!v13) {
    return 4294966695;
  }
  int v14 = v13;
  *int v13 = 0;
  uint64_t v15 = v13 + 1;
  if (v6)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (unsigned __int8 *)&v15[2 * v6];
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = v8[v16];
      do
      {
        int v20 = *(unsigned __int8 *)(a2 + v19[v18] + 768);
        v17[v18++] = v20;
      }
      while (v20);
      uint64_t v21 = 0;
      if (v16)
      {
        while ((int)SLstrcmp(*(unsigned char **)&v15[2 * v21], v17) < 1)
        {
          if (v16 == ++v21)
          {
            LODWORD(v21) = v16;
            goto LABEL_28;
          }
        }
        uint64_t v22 = v16;
        do
        {
          *(void *)&v14[2 * v22 + 1] = *(void *)&v14[2 * v22 - 1];
          --v22;
        }
        while (v22 > v21);
      }
LABEL_28:
      *(void *)&v15[2 * v21] = v17;
      v17 += v18;
      ++v16;
    }
    while (v16 != v6);
  }
  uint64_t result = 0;
  _DWORD *v14 = v6;
  return result;
}

void freq_finish(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t is_frequent_word(int *a1, unsigned char *a2)
{
  int v2 = a1 + 1;
  int v3 = *a1 - 1;
  if (*a1 < 1) {
    return 0;
  }
  int v5 = 0;
  while (1)
  {
    int v6 = v3 + v5;
    if (v3 + v5 < 0 != __OFADD__(v3, v5)) {
      ++v6;
    }
    int v7 = v6 >> 1;
    int v8 = SLstrcmp(a2, *(unsigned __int8 **)&v2[2 * (v6 >> 1)]);
    if (v8 < 0)
    {
      int v3 = v7 - 1;
      goto LABEL_9;
    }
    if (!v8) {
      return 1;
    }
    int v5 = v7 + 1;
LABEL_9:
    if (v3 < v5) {
      return 0;
    }
  }
}

BOOL _isTurkishVowel(int a1, unsigned char *a2, BOOL *a3, unsigned char *a4)
{
  if ((a1 - 65) < 0x1A || (a1 - 192) < 0x17)
  {
    if ((a1 - 138) > 0x15 || ((1 << (a1 + 118)) & 0x200015) == 0)
    {
      if (a1 == 73)
      {
        LOBYTE(a1) = -3;
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (a1 <= 215)
  {
    if ((a1 - 138) <= 0x15 && ((1 << (a1 + 118)) & 0x200015) != 0)
    {
LABEL_14:
      if (a1 == 159) {
        LOBYTE(a1) = -1;
      }
      else {
        LOBYTE(a1) = a1 + 16;
      }
    }
  }
  else
  {
    if ((a1 - 216) < 5) {
      goto LABEL_11;
    }
    if (a1 == 221)
    {
      LOBYTE(a1) = 105;
      goto LABEL_17;
    }
    if (a1 == 222) {
LABEL_11:
    }
      LOBYTE(a1) = a1 + 32;
  }
LABEL_17:
  if (a1 == 97)
  {
    LOBYTE(v5) = 0;
    BOOL result = 1;
    if (a2) {
LABEL_19:
    }
      *a2 = v5 >> 2;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      if (v5 == 7) {
        return 0;
      }
      int v7 = byte_20CC650C8[++v5];
    }
    while (v7 != a1);
    BOOL result = (unint64_t)(v5 - 1) < 7;
    if (a2) {
      goto LABEL_19;
    }
  }
  if (a3) {
    *a3 = (v5 & 2) != 0;
  }
  if (a4) {
    *a4 = v5 & 1;
  }
  return result;
}

void sub_20CC150A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20CC1540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t hdr_init(uint64_t **a1, const char *a2)
{
  *a1 = 0;
  int v4 = (uint64_t *)malloc_type_calloc(0x20uLL, 1uLL, 0x188EE72EuLL);
  *a1 = v4;
  if (!v4) {
    return 4294965195;
  }
  uint64_t v5 = v4;
  v4[3] = 0;
  uint64_t v6 = f_open(a2, 1);
  if (v6)
  {
    uint64_t v7 = v6;
    if (fgetl_lsb1st(v6, v5) == -1) {
      return 4294965192;
    }
    if (fgetl_lsb1st(v7, v5 + 1) == -1) {
      return 4294965192;
    }
    int v8 = (int *)(v5 + 2);
    if (fgetl_lsb1st(v7, v5 + 2) == -1) {
      return 4294965192;
    }
    int v9 = (uint64_t *)malloc_type_calloc(24 * v5[2], 1uLL, 0xD1EE33F9uLL);
    v5[3] = (uint64_t)v9;
    if (v9)
    {
      if (*v8 < 1)
      {
LABEL_13:
        f_close(v7);
        return 0;
      }
      uint64_t v10 = v9;
      uint64_t v11 = 0;
      while (fgetl_lsb1st(v7, v10) != -1
           && fgetl_lsb1st(v7, v10 + 1) != -1
           && fgetl_lsb1st(v7, v10 + 2) != -1)
      {
        ++v11;
        v10 += 3;
        if (v11 >= *v8) {
          goto LABEL_13;
        }
      }
      return 4294965192;
    }
    return 4294965195;
  }
  return 4294965194;
}

uint64_t fgetl_lsb1st(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 8) & 0x10) != 0) {
    int v4 = f_getc_txt(a1);
  }
  else {
    int v4 = f_getc_bin(a1);
  }
  int v5 = v4;
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v6 = (*(unsigned char *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  int v7 = v6;
  if (v6 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v8 = (*(unsigned char *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  int v9 = v8;
  if (v8 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v10 = (*(unsigned char *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  int v11 = v10;
  if (v10 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a2 = ((uint64_t)v9 << 16) | ((uint64_t)v7 << 8) | ((uint64_t)v11 << 24) | v5;
  return result;
}

void hdr_finish(void *a1)
{
  if (a1)
  {
    int v2 = (void *)a1[3];
    if (v2) {
      free(v2);
    }
    free(a1);
  }
}

uint64_t hdr_find(uint64_t a1, uint64_t a2)
{
  if ((int)*(void *)(a1 + 16) < 1) {
    return -1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  for (uint64_t i = *(void *)(a1 + 24) + 8; *(void *)(i - 8) != a2; i += 24)
  {
    if (!--v2) {
      return -1;
    }
  }
  return *(void *)i;
}

uint64_t fgetw_lsb1st(uint64_t a1, _WORD *a2)
{
  if ((*(unsigned char *)(a1 + 8) & 0x10) != 0) {
    int v4 = f_getc_txt(a1);
  }
  else {
    int v4 = f_getc_bin(a1);
  }
  __int16 v5 = v4;
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v6 = (*(unsigned char *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  __int16 v7 = v6;
  if (v6 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a2 = v5 | (v7 << 8);
  return result;
}

uint64_t f_open(const char *a1, int a2)
{
  int v4 = malloc_type_calloc(0x50uLL, 1uLL, 0xE34D9D92uLL);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    *(void *)int v4 = v4;
    v4[12] = -1;
    *((void *)v4 + 3) = 2048;
    *((void *)v4 + 4) = 0;
    int v6 = malloc_type_calloc(0x800uLL, 1uLL, 0xBBFDBD3DuLL);
    *(void *)(v5 + 32) = v6;
    if (!v6) {
      goto LABEL_15;
    }
    *(void *)(v5 + 40) = v6;
    if ((a2 & 8) != 0)
    {
      if ((a2 & 3) == 0) {
        a2 |= 3u;
      }
      int v8 = open(a1, 1538, 511);
    }
    else
    {
      int v7 = (a2 & 3) == 3 ? 2 : (a2 << 30 >> 31) & 0x202;
      int v8 = open(a1, v7, 511);
    }
    *(_DWORD *)(v5 + 4_Block_object_dispose(&STACK[0x510], 8) = v8;
    if (v8 == -1)
    {
LABEL_15:
      f_close(v5);
      return 0;
    }
    else
    {
      off_t v9 = 0;
      *(void *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + _Block_object_dispose(&STACK[0x510], 8) = a2;
      *(_DWORD *)(v5 + 12) = 0;
      *(void *)(v5 + 72) = 0;
      if ((a2 & 4) != 0) {
        off_t v9 = lseek(v8, 0, 2);
      }
      *(void *)(v5 + 56) = v9;
      *(void *)(v5 + 64) = v9;
    }
  }
  return v5;
}

ssize_t f_close(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  ssize_t v2 = f_update(a1);
  int v3 = *(void **)(a1 + 32);
  if (v3) {
    free(v3);
  }
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 != -1) {
    close(v4);
  }
  free(*(void **)a1);
  return v2;
}

ssize_t f_update(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 12) & 2) == 0 || *(uint64_t *)(a1 + 72) < 1)
  {
LABEL_6:
    ssize_t result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(void *)(a1 + 72) = 0;
    return result;
  }
  if (lseek(*(_DWORD *)(a1 + 48), *(int *)(a1 + 64), 0) != -1)
  {
    ssize_t result = write(*(_DWORD *)(a1 + 48), *(const void **)(a1 + 40), *(unsigned int *)(a1 + 72));
    if (result == -1)
    {
      *(_DWORD *)(a1 + 20) = 1;
      return result;
    }
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 20) = 1;
  return 0xFFFFFFFFLL;
}

uint64_t f_seek(uint64_t a1, uint64_t a2, int a3)
{
  if (f_update(a1) == -1) {
    return -1;
  }
  if (a3 == 2)
  {
    uint64_t result = lseek(*(_DWORD *)(a1 + 48), 0, 2) + a2;
  }
  else if (a3 == 1)
  {
    uint64_t result = *(void *)(a1 + 56) + a2;
  }
  else if (a3)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = a2;
  }
  *(void *)(a1 + 56) = result;
  *(void *)(a1 + 64) = result;
  return result;
}

ssize_t f_getc_bin(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2)
  {
    if (v2 != 2) {
      goto LABEL_6;
    }
    ssize_t result = f_update(a1);
    if (result == -1) {
      return result;
    }
  }
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 12) = 1;
LABEL_6:
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = v4 - *(void *)(a1 + 64);
  if (v5 < *(void *)(a1 + 72))
  {
LABEL_7:
    *(void *)(a1 + 56) = v4 + 1;
    return *(unsigned __int8 *)(*(void *)(a1 + 40) + (int)v5);
  }
  if (lseek(*(_DWORD *)(a1 + 48), (int)v4, 0) != -1)
  {
    ssize_t result = read(*(_DWORD *)(a1 + 48), *(void **)(a1 + 40), *(unsigned int *)(a1 + 24));
    if (result == -1)
    {
      *(_DWORD *)(a1 + 20) = 1;
      return result;
    }
    if (result)
    {
      LODWORD(v5) = 0;
      uint64_t v4 = *(void *)(a1 + 56);
      *(void *)(a1 + 64) = v4;
      *(void *)(a1 + 72) = (int)result;
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 16) = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  *(_DWORD *)(a1 + 20) = 1;
  return 0xFFFFFFFFLL;
}

ssize_t f_putc_bin(char a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_6;
    }
    ssize_t result = f_update(a2);
    if (result == -1) {
      return result;
    }
  }
  if ((*(unsigned char *)(a2 + 8) & 2) == 0) {
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 12) = 2;
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 56) - v6;
  if (v7 >= *(void *)(a2 + 24))
  {
    if (lseek(*(_DWORD *)(a2 + 48), (int)v6, 0) != -1)
    {
      ssize_t result = write(*(_DWORD *)(a2 + 48), *(const void **)(a2 + 40), *(unsigned int *)(a2 + 72));
      if (result == -1)
      {
        *(_DWORD *)(a2 + 20) = 1;
        return result;
      }
      LODWORD(v7) = 0;
      *(void *)(a2 + 64) = *(void *)(a2 + 56);
      *(void *)(a2 + 72) = 0;
      goto LABEL_12;
    }
LABEL_10:
    *(_DWORD *)(a2 + 20) = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  ssize_t result = 0;
  *(unsigned char *)(*(void *)(a2 + 40) + (int)v7) = a1;
  ++*(void *)(a2 + 56);
  ++*(void *)(a2 + 72);
  return result;
}

uint64_t f_gets(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = a2;
  }
  uint64_t v6 = (v5 - 1);
  if ((*(unsigned char *)(a3 + 8) & 0x10) != 0)
  {
    uint64_t v7 = 0;
    while (v6 != v7)
    {
      int v10 = f_getc_bin(a3);
      if (v10 == -1)
      {
LABEL_15:
        uint64_t result = 0;
        if (v7 && *(_DWORD *)(a3 + 16))
        {
          LODWORD(v6) = v7;
          break;
        }
        return result;
      }
      int v9 = v7 + 1;
      *(unsigned char *)(a1 + v7++) = v10;
      if (v10 == 10)
      {
LABEL_14:
        LODWORD(v6) = v9;
        break;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    while (v6 != v7)
    {
      int v8 = f_getc_bin(a3);
      if (v8 == -1) {
        goto LABEL_15;
      }
      int v9 = v7 + 1;
      *(unsigned char *)(a1 + v7++) = v8;
      if (v8 == 10) {
        goto LABEL_14;
      }
    }
  }
  *(unsigned char *)(a1 + (int)v6) = 0;
  return a1;
}

ssize_t f_puts(unsigned char *a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 8) & 0x10) != 0)
  {
    do
    {
      ssize_t result = (char)*a1;
      if (!*a1) {
        break;
      }
      ++a1;
      ssize_t result = f_putc_bin(result, a2);
    }
    while (result != -1);
  }
  else
  {
    do
    {
      ssize_t result = (char)*a1;
      if (!*a1) {
        break;
      }
      ++a1;
      ssize_t result = f_putc_bin(result, a2);
    }
    while (result != -1);
  }
  return result;
}

uint64_t f_read(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a4 + 8) & 0x10) == 0)
  {
    if (a3)
    {
      uint64_t v8 = 0;
      while (!a2)
      {
LABEL_8:
        if (++v8 == a3) {
          return a3;
        }
      }
      uint64_t v9 = a2;
      while (1)
      {
        int v10 = f_getc_bin(a4);
        if (v10 == -1) {
          return v8;
        }
        *a1++ = v10;
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  while (!a2)
  {
LABEL_16:
    if (++v8 == a3) {
      return a3;
    }
  }
  uint64_t v11 = a2;
  while (1)
  {
    int v12 = f_getc_bin(a4);
    if (v12 == -1) {
      return v8;
    }
    *a1++ = v12;
    if (!--v11) {
      goto LABEL_16;
    }
  }
}

uint64_t f_write(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a4 + 8) & 0x10) == 0)
  {
    if (a3)
    {
      uint64_t v8 = 0;
      while (!a2)
      {
LABEL_8:
        if (++v8 == a3) {
          return a3;
        }
      }
      uint64_t v9 = a2;
      while (f_putc_bin(*a1, a4) != -1)
      {
        ++a1;
        if (!--v9) {
          goto LABEL_8;
        }
      }
      return v8;
    }
    return 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  while (!a2)
  {
LABEL_16:
    if (++v8 == a3) {
      return a3;
    }
  }
  uint64_t v10 = a2;
  while (f_putc_bin(*a1, a4) != -1)
  {
    ++a1;
    if (!--v10) {
      goto LABEL_16;
    }
  }
  return v8;
}

uint64_t hyphen_init(void *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v10 = malloc_type_calloc(0x558uLL, 1uLL, 0xE8D5F337uLL);
  *a1 = v10;
  if (!v10) {
    return 4294966395;
  }
  uint64_t v11 = v10;
  v10[2] = a2;
  *((_DWORD *)v10 + 2) = a5;
  int v12 = (char *)(v10 + 131);
  cdict_init((uint64_t)(v10 + 131), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 155), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 139), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 147), a2, 1024, 256, 3);
  if (a4) {
    cdict_init((uint64_t)(v11 + 163), a2, 1024, 256, 1);
  }
  int v13 = (char *)v11 + 535;
  if (!a3)
  {
    *int v13 = 0;
    goto LABEL_58;
  }
  __strcpy_chk();
  if (!*v13) {
    goto LABEL_58;
  }
  *((_DWORD *)v11 + 313) = 1;
  *((_DWORD *)v11 + 297) = 1;
  *((_DWORD *)v11 + 281) = 1;
  *((_DWORD *)v11 + 265) = 1;
  *(_DWORD *)uint64_t v11 = 0;
  uint64_t v14 = f_open(a3, 1);
  if (!v14)
  {
    int v56 = -2;
    return (v56 - 1600);
  }
  uint64_t v15 = v14;
  char v60 = a5;
  uint64_t v16 = 0;
  while (1)
  {
    int v17 = f_getc_bin(v15);
    if (v17 == -1) {
      break;
    }
    if (v17 != 10)
    {
      v62[v16++ - 1] = v17;
      if (v16 != 129) {
        continue;
      }
    }
    v62[v16 - 1] = 0;
    if (v17 != 10)
    {
      int v56 = -7;
LABEL_80:
      f_close(v15);
      return (v56 - 1600);
    }
LABEL_16:
    int v18 = __s;
    if (!__s)
    {
      int v23 = 0;
LABEL_26:
      switch(*(_DWORD *)v11)
      {
        case 1:
          if (!v23) {
            goto LABEL_45;
          }
          int v24 = 0;
          int v25 = 0;
          char v26 = 0;
          p_s = &__s;
          break;
        case 2:
          size_t v37 = strlen(&__s);
          if (!v37) {
            goto LABEL_45;
          }
          if ((int)v37 >= 1)
          {
            uint64_t v38 = v37;
            uint64_t v39 = (v37 << 32) - 0x100000000;
            long long v40 = &__s;
            do
            {
              char v41 = *v40++;
              __src[v39 >> 32] = v41;
              v39 -= 0x100000000;
              --v38;
            }
            while (v38);
          }
          __src[(int)v37] = 0;
          int v34 = v37 + 1;
          __int16 v35 = (unsigned __int8 *)__src;
          uint64_t v36 = (uint64_t)(v11 + 155);
LABEL_44:
          int v42 = cdict_add(v36, v35, v34);
          int v56 = v42 & (v42 >> 31);
          goto LABEL_54;
        case 3:
          uint64_t v43 = (uint64_t)(v11 + 139);
          goto LABEL_48;
        case 4:
          uint64_t v43 = (uint64_t)(v11 + 147);
LABEL_48:
          int v56 = add_hypdict(v43, &__s);
          goto LABEL_54;
        default:
LABEL_45:
          int v56 = 0;
          goto LABEL_54;
      }
      while (1)
      {
        int v29 = *p_s++;
        int v28 = v29;
        if (!v29)
        {
LABEL_38:
          v63[v24] = 0;
          int v33 = v25 + v24 + 1;
          __src[v25] = 0;
          strcpy(&v63[v24 + 1], __src);
          int v34 = v33 + 1;
          __int16 v35 = (unsigned __int8 *)v63;
          uint64_t v36 = (uint64_t)v12;
          goto LABEL_44;
        }
        int v30 = v28;
        if (v28 != 42)
        {
          if (v28 == 43)
          {
            uint64_t v32 = &__src[v25];
            char *v32 = v26 + 48;
            v25 += 2;
            v32[1] = 43;
          }
          else
          {
            if (v28 != 124)
            {
              v63[v24++] = v28;
              ++v26;
              goto LABEL_37;
            }
            int v31 = &__src[v25];
            *int v31 = v26 + 48;
            v25 += 2;
            v31[1] = 124;
          }
          char v26 = 0;
        }
LABEL_37:
        if (v30 == 42) {
          goto LABEL_38;
        }
      }
    }
    uint64_t v19 = v11[2];
    int v20 = &__s;
    do
    {
      uint64_t v21 = v18 ^ 7u;
      *int v20 = v21;
      *int v20 = *(unsigned char *)(v19 + v21 + 768);
      int v22 = *++v20;
      int v18 = v22;
    }
    while (v22);
    int v23 = __s;
    if (__s != 35) {
      goto LABEL_26;
    }
    if (!stricomp(v62, "SEG"))
    {
      int v56 = 0;
      int v44 = 1;
LABEL_53:
      *(_DWORD *)uint64_t v11 = v44;
      goto LABEL_54;
    }
    if (!stricomp(v62, "FIN"))
    {
      int v56 = 0;
      int v44 = 2;
      goto LABEL_53;
    }
    if (!stricomp(v62, "HYP"))
    {
      int v56 = 0;
      int v44 = 3;
      goto LABEL_53;
    }
    int v56 = 0;
    if (!stricomp(v62, "AMB"))
    {
      int v44 = 4;
      goto LABEL_53;
    }
    *(_DWORD *)uint64_t v11 = 0;
LABEL_54:
    uint64_t v16 = 0;
    if (v56 < 0) {
      goto LABEL_80;
    }
  }
  if (v16 && *(_DWORD *)(v15 + 16))
  {
    v62[v16 - 1] = 0;
    goto LABEL_16;
  }
  int v57 = *(_DWORD *)(v15 + 20);
  f_close(v15);
  LOBYTE(a5) = v60;
  if (v57)
  {
    int v56 = -4;
    return (v56 - 1600);
  }
  *((_DWORD *)v11 + 312) = 0;
  *((_DWORD *)v11 + 296) = 0;
  *((_DWORD *)v11 + 280) = 0;
  *((_DWORD *)v11 + 264) = 0;
LABEL_58:
  int v46 = v11 + 3;
  if (a4)
  {
    __strcpy_chk();
    if ((a5 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    *int v46 = 0;
    if ((a5 & 1) == 0) {
      return 0;
    }
  }
  if (!*v46) {
    return 0;
  }
  uint64_t v47 = f_open((const char *)v11 + 24, 17);
  if (v47)
  {
    uint64_t v48 = v47;
    while (f_gets((uint64_t)__src, 130, v48))
    {
      int v49 = strchr(__src, 10);
      if (!v49)
      {
        int v50 = strlen(__src);
        if (v50 != 129)
        {
          int v49 = &__src[v50];
          goto LABEL_70;
        }
        int v55 = -7;
        goto LABEL_89;
      }
      do
      {
        *int v49 = 0;
LABEL_70:
        if (v49 <= __src) {
          break;
        }
        int v52 = *--v49;
        int v51 = v52;
      }
      while (v52 == 32 || v51 == 9);
      int v54 = add_userhypdict((uint64_t)(v11 + 163), (unsigned __int8 *)__src);
      if (v54 < 0)
      {
        int v55 = v54;
LABEL_89:
        f_close(v48);
        goto LABEL_90;
      }
    }
    int v58 = *(_DWORD *)(v48 + 20);
    f_close(v48);
    if (v58)
    {
      int v55 = -4;
      goto LABEL_90;
    }
    uint64_t result = 0;
    *((_DWORD *)v11 + 32_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  else
  {
    int v55 = -2;
LABEL_90:
    if (v55 != -2 || (a5 & 4) == 0) {
      return (v55 - 1500);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t hyphen_finish(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 8) & 2) != 0 && *(unsigned char *)(a1 + 24) && *(_DWORD *)(a1 + 1312) == 1)
  {
    __strcpy_chk();
    __s.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__s) - 1] = 125;
    __strcpy_chk();
    __to.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__to) - 1] = 123;
    uint64_t v2 = f_open((const char *)&__s, 26);
    if (v2)
    {
      uint64_t v3 = v2;
      if (get_userhypdict(a1 + 1304, 0, v18))
      {
        int v4 = 1;
        do
        {
          if (f_puts(v18, v3) == -1) {
            break;
          }
          int v5 = (*(unsigned char *)(v3 + 8) & 0x10) != 0 ? f_putc_txt(10, v3) : f_putc_bin(10, v3);
          if (v5 == -1) {
            break;
          }
        }
        while (get_userhypdict(a1 + 1304, v4++, v18));
      }
      int v7 = *(_DWORD *)(v3 + 20);
      f_close(v3);
      if (v7)
      {
        uint64_t v8 = 4294965791;
      }
      else
      {
        uint64_t v10 = f_open((const char *)&__to, 1);
        if (v10 && (f_close(v10), unlink((const char *)&__to) == -1))
        {
          uint64_t v8 = 4294965784;
        }
        else
        {
          uint64_t v11 = f_open((const char *)(a1 + 24), 1);
          if (v11 && (f_close(v11), rename((const std::__fs::filesystem::path *)(a1 + 24), &__to, v13), v14 == -1)
            || (rename(&__s, (const std::__fs::filesystem::path *)(a1 + 24), v12), v15 == -1))
          {
            uint64_t v8 = 4294965783;
          }
          else
          {
            unlink((const char *)&__to);
            uint64_t v8 = 0;
            *(_DWORD *)(a1 + 1312) = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = 4294965793;
    }
  }
  else
  {
    uint64_t v8 = 1;
  }
  cdict_finish(a1 + 1048);
  cdict_finish(a1 + 1240);
  cdict_finish(a1 + 1112);
  cdict_finish(a1 + 1176);
  if (*(unsigned char *)(a1 + 24)) {
    cdict_finish(a1 + 1304);
  }
  free((void *)a1);
  return v8;
}

BOOL hyphen_usr(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v27, 0, 32);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  __strncpy_chk();
  uint64_t v6 = *(int *)(a2 + 24);
  *((unsigned char *)&v27[2] + v6 + 7) = 0;
  if ((int)v6 >= 1 && v5 != 0)
  {
    uint64_t v8 = 0;
    do
      *(unsigned char *)(v5 + v8++) = 32;
    while (v8 < *(int *)(a2 + 24));
  }
  uint64_t v9 = a1 + 1304;
  int first = cdict_find_first(v9, (unsigned __int8 *)&v27[2] + *(int *)(a2 + 32) + 7, *(_DWORD *)(a2 + 36) - *(_DWORD *)(a2 + 32));
  if (first < 0)
  {
    int v11 = *(_DWORD *)(a2 + 44);
    int v12 = *(_DWORD *)(a2 + 48);
    if (v12 <= v11 || *(_DWORD *)(a2 + 52))
    {
      BOOL result = 0;
      if (v12 != 1 || v11 != 1) {
        return result;
      }
      goto LABEL_12;
    }
    uint64_t v23 = *(int *)(a2 + 32);
    uint64_t v24 = *(int *)(a2 + 36);
    if ((int)v24 > (int)v23)
    {
      uint64_t v25 = *(int *)(a2 + 32);
      do
      {
        if (v25 > v23) {
          *((unsigned char *)&v27[2] + v25 + 7) = *(unsigned char *)(v4 + *((unsigned __int8 *)&v27[2] + v25 + 7) + 256);
        }
        ++v25;
      }
      while (v24 != v25);
    }
    int v26 = cdict_find_first(v9, (unsigned __int8 *)&v27[2] + v23 + 7, (int)v24 - (int)v23);
    int first = v26;
    if (*(_DWORD *)(a2 + 44) && v26 < 0)
    {
LABEL_12:
      int v14 = *(_DWORD *)(a2 + 36);
      int v15 = *(_DWORD *)(a2 + 32);
      uint64_t v16 = (unsigned __int8 *)&v27[2] + v15 + 7;
      *uint64_t v16 = *(unsigned char *)(v4 + *v16 + 256);
      int first = cdict_find_first(v9, v16, v14 - v15);
    }
  }
  BOOL result = first >= 0;
  if (v5 && (first & 0x80000000) == 0)
  {
    cdict_access(v9, first, (uint64_t)v27);
    int v17 = (const char *)(*(void *)&v27[0] + SDWORD2(v27[0]) + 20);
    size_t v18 = strlen(v17);
    int v19 = v17[v18 + 1];
    if (v17[v18 + 1])
    {
      if (v19 == 42) {
        return 0;
      }
      int v20 = *(_DWORD *)(a2 + 32);
      uint64_t v21 = (unsigned __int8 *)(v18 + SDWORD2(v27[0]) + *(void *)&v27[0] + 23);
      do
      {
        int v20 = v20 + (char)v19 - 48;
        if ((*(void *)(v4 + 8 * *((unsigned __int8 *)&v27[2] + v20 + 7) + 1024) & 0x1000) == 0) {
          *(unsigned char *)(v5 + v20) = *(v21 - 1);
        }
        int v22 = *v21;
        v21 += 2;
        LOBYTE(v19) = v22;
      }
      while (v22);
    }
    return 1;
  }
  return result;
}

uint64_t hyphen_ate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)a2;
  uint64_t v3 = a1;
  uint64_t v153 = *MEMORY[0x263EF8340];
  memset(v151, 0, sizeof(v151));
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(unsigned char *)(v6 + *(int *)(a2 + 36)) = 124;
  *(unsigned char *)(v6 + *(int *)(a2 + 32)) = 124;
  __strncpy_chk();
  uint64_t v7 = v5;
  uint64_t v8 = (int)v2[6];
  v152[v8 + 65] = 0;
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    do
      *(unsigned char *)(v5 + v9++) = 32;
    while (v9 < (int)v2[6]);
  }
  uint64_t v10 = v4 + 1024;
  uint64_t v12 = v2[8];
  int v11 = v2[9];
  uint64_t v148 = v4;
  char v149 = v2;
  uint64_t v150 = v5;
  uint64_t v146 = v3;
  if ((int)v12 < v11)
  {
    uint64_t v13 = v3 + 1048;
    LODWORD(v14) = v2[8];
    do
    {
      int v15 = v14;
      if (v14 == v12)
      {
        int first = cdict_locate_first(v13, &v152[(int)v12 + 65], v11 - (int)v12);
        uint64_t v7 = v5;
        int v15 = v12;
        if ((first & 0x80000000) == 0)
        {
          cdict_access(v13, first, (uint64_t)v151);
          uint64_t v17 = *(void *)&v151[0];
          uint64_t v18 = SDWORD2(v151[0]);
          int v19 = (const char *)(*(void *)&v151[0] + SDWORD2(v151[0]) + 20);
          int v20 = strlen(v19);
          if (v20 >= 2) {
            memset((void *)((int)v12 + v6 + 1), 32, (v20 - 2) + 1);
          }
          uint64_t v21 = v20 + 1;
          char v22 = v19[v21];
          if (v22)
          {
            uint64_t v23 = (unsigned __int8 *)(v17 + v21 + v18 + 22);
            int v24 = v12;
            do
            {
              int v24 = v24 + v22 - 48;
              *(unsigned char *)(v6 + v24) = *(v23 - 1);
              int v25 = *v23;
              v23 += 2;
              char v22 = v25;
            }
            while (v25);
          }
          int v15 = v12 + v20 - 1;
          uint64_t v2 = v149;
          uint64_t v7 = v5;
        }
      }
      uint64_t v14 = v15 + 1;
      if (*(void *)(v10 + 8 * v152[v15 + 65]))
      {
        if (*(unsigned char *)(v6 + v14) == 124) {
          LODWORD(v12) = v15 + 1;
        }
      }
      else
      {
        *(unsigned char *)(v6 + v14) = 124;
        *(unsigned char *)(v6 + v15) = 124;
        LODWORD(v12) = v15 + 1;
      }
      int v11 = v2[9];
    }
    while ((int)v14 < v11);
    uint64_t v12 = v2[8];
    uint64_t v3 = v146;
  }
  if (v11 > (int)v12)
  {
    int v26 = 0;
    uint64_t v27 = v3 + 1240;
    uint64_t v28 = v11;
    while (1)
    {
      v152[v26] = v152[v28 + 64];
      int v29 = *(unsigned __int8 *)(v6 - 1 + v28);
      if (v29 == 43) {
        break;
      }
      uint64_t v30 = v26 + 1;
      if (v29 == 124)
      {
        v152[v30] = 0;
        int v31 = cdict_locate_first(v27, v152, v30);
        if (v31 < 0) {
          break;
        }
        cdict_access(v27, v31, (uint64_t)v151);
        int v32 = strlen((const char *)(*(void *)&v151[0] + SDWORD2(v151[0]) + 20));
        LODWORD(v30) = 0;
        *(unsigned char *)(v6 + (int)v28 + v26 - v32) = 124;
      }
LABEL_27:
      --v28;
      int v26 = v30;
      if (v28 <= (int)v2[8])
      {
        int v11 = v2[9];
        uint64_t v33 = (int)v2[8];
        uint64_t v7 = v5;
        uint64_t v3 = v146;
        goto LABEL_30;
      }
    }
    LODWORD(v30) = 0;
    goto LABEL_27;
  }
  uint64_t v33 = v12;
LABEL_30:
  if ((int)v33 < v11)
  {
    unsigned int v34 = 0;
    uint64_t v145 = v3 + 1112;
    uint64_t v144 = v7 - 1;
    uint64_t v147 = v3 + 1176;
    int v35 = v33;
    LODWORD(v36) = v33;
    do
    {
      LODWORD(v37) = v36;
      uint64_t v38 = v33;
      if (v36 != v35) {
        goto LABEL_82;
      }
      uint64_t v37 = *(void *)(v10 + 8 * v152[v35 + 65]);
      int v39 = v2[8];
      BOOL v40 = v35 <= v39 || (*(void *)(v10 + 8 * v152[v35 + 65]) & 1) == 0;
      if (!v40 && (*(void *)(v10 + 8 * v152[v35 + 64]) & 1) != 0 && v35 > v39 + 1 && v35 < v11 - 1)
      {
        *(unsigned char *)(v7 + v35) = 45;
        int v11 = v2[9];
      }
      uint64_t v41 = v147;
      int v42 = cdict_find_first(v147, &v152[v35 + 65], v11 - v35);
      if (v42 < 0)
      {
        uint64_t v41 = v145;
        int v42 = cdict_locate_first(v145, &v152[v35 + 65], v2[9] - v35);
        if (v42 < 0)
        {
          unsigned int v34 = (v37 >> 3) & 1;
          uint64_t v33 = v35 + v34;
          LODWORD(v37) = v35;
          uint64_t v4 = v148;
          uint64_t v7 = v150;
          goto LABEL_138;
        }
      }
      cdict_access(v41, v42, (uint64_t)v151);
      uint64_t v43 = *(void *)&v151[0];
      uint64_t v44 = SDWORD2(v151[0]);
      size_t v45 = strlen((const char *)(*(void *)&v151[0] + SDWORD2(v151[0]) + 20));
      int v46 = v45;
      uint64_t v47 = (v45 << 32) + 0x100000000;
      uint64_t v48 = (unsigned __int8 *)(*(void *)&v151[0] + SDWORD2(v151[0]) + 20 + (v47 >> 32));
      BOOL v49 = *v48 == 42;
      if ((int)v45 >= 2) {
        memset((void *)(v35 + v150 + 1), 32, (v45 - 2) + 1);
      }
      int v50 = v48[v49];
      uint64_t v4 = v148;
      uint64_t v7 = v150;
      if (v50)
      {
        int v51 = (unsigned __int8 *)(v43 + (v47 >> 32) + v44 + v49 + 22);
        int v52 = v35;
        do
        {
          int v52 = v52 + (char)v50 - 48;
          if ((*(void *)(v10 + 8 * v152[v52 + 65]) & 0x1000) == 0) {
            *(unsigned char *)(v150 + v52) = *(v51 - 1);
          }
          int v53 = *v51;
          v51 += 2;
          LOBYTE(v50) = v53;
        }
        while (v53);
      }
      int v54 = v35 + v46;
      uint64_t v2 = v149;
      if (*(_DWORD *)(v148 + 3524) == 21)
      {
        uint64_t v55 = v54 - 1;
        uint64_t v56 = (v55 << 32) - 0x100000000;
        uint64_t v57 = 1;
        int v58 = v35 + v46 - 2;
        uint64_t v59 = v55;
        do
        {
          uint64_t v60 = v57;
          int v61 = *(unsigned __int8 *)(v6 + 1 + v59++);
          ++v58;
          v56 += 0x100000000;
          ++v57;
        }
        while (v61 != 124);
        uint64_t v62 = v56 >> 32;
        if ((*(void *)(v10 + 8 * v152[v62 + 65]) & 0x10) != 0)
        {
          if (v35 < v58) {
            int v58 = v35;
          }
          while (v55 + v60 - 1 > v35)
          {
            if (*(unsigned char *)(v6 - 1 + v55 + v60) == 124 || *(unsigned char *)(v144 + v55 + v60) != 32)
            {
              int v58 = v35 + v46 - 2 + v60;
              break;
            }
            uint64_t v63 = *(void *)(v10 + 8 * v152[v55 + 63 + v60--]);
            if ((v63 & 0x10) == 0)
            {
              int v58 = v55 + v60;
              break;
            }
          }
          uint64_t v62 = v58;
        }
        if (*(unsigned char *)(v150 + v62) != 32 && *(unsigned char *)(v6 + v62) != 124) {
          *(unsigned char *)(v150 + v62) = 32;
        }
      }
      uint64_t v64 = 0;
      uint64_t v65 = v35 + (uint64_t)v46;
      if (v35 >= v54) {
        uint64_t v37 = v54;
      }
      else {
        uint64_t v37 = v35;
      }
      while (v65 + v64 > v35)
      {
        if (*(unsigned char *)(v6 + v65 + v64) == 124 || *(unsigned char *)(v150 + v65 + v64) != 32)
        {
          uint64_t v37 = (v35 + v46 + v64);
          break;
        }
        uint64_t v66 = *(void *)(v10 + 8 * v152[v65 + 64 + v64--]);
        if ((v66 & 0x10) == 0)
        {
          uint64_t v37 = (v35 + v46 + v64 + 1);
          break;
        }
      }
      if (*(unsigned char *)(v6 + (int)v37) == 124)
      {
        if ((int)v37 < v149[9]) {
          *(unsigned char *)(v150 + (int)v37) = 45;
        }
      }
      else if (*(unsigned char *)(v150 + (int)v37) == 32)
      {
        unsigned int v34 = 1;
        uint64_t v38 = v37;
        goto LABEL_82;
      }
      unsigned int v34 = 0;
      uint64_t v38 = ((*(void *)(v10 + 8 * v152[(int)v37 + 65]) >> 3) & 1) + v37;
LABEL_82:
      if ((int)v37 <= v35) {
        goto LABEL_137;
      }
      int v67 = *(_DWORD *)(v4 + 3524);
      if (v67 == 14)
      {
        uint64_t v68 = (int)v37;
        uint64_t v69 = v152[(int)v37 + 65];
        uint64_t v70 = *(void *)(v10 + 8 * v69);
        if ((v70 & 8) == 0) {
          goto LABEL_296;
        }
        uint64_t v71 = (int)v37 - 1;
        if ((*(void *)(v10 + 8 * v152[v71 + 65]) & 8) == 0) {
          goto LABEL_296;
        }
        int v72 = v2[7];
        if ((v72 & 0x10) != 0) {
          goto LABEL_296;
        }
        if ((v72 & 0x20) == 0) {
          goto LABEL_88;
        }
        if (*(unsigned char *)(v6 + (int)v37 + 1) == 124) {
          goto LABEL_296;
        }
        uint64_t v74 = v152[(int)v37 + 66];
        if ((*(void *)(v10 + 8 * v74) & 0x10) == 0) {
          goto LABEL_296;
        }
        uint64_t v75 = (int)v37 + 2;
        if (*(unsigned char *)(v6 + v75) == 124) {
          goto LABEL_296;
        }
        uint64_t v138 = v152[v75 + 65];
        int v136 = (char)v74;
        int v140 = v2[7];
        BOOL v76 = is_hun_digraph((char)v74, (char)v152[v75 + 65]);
        LOBYTE(v72) = v140;
        uint64_t v71 = (int)v37 - 1;
        uint64_t v68 = (int)v37;
        uint64_t v7 = v150;
        if (v76 && *(unsigned char *)(v6 + (int)v37 + 3) != 124)
        {
          int v77 = v136;
          unsigned __int8 v137 = v152[(int)v37 + 68];
          BOOL v78 = is_hun_trigraph(v77, (char)v138, (char)v137);
          LOBYTE(v72) = v140;
          uint64_t v71 = (int)v37 - 1;
          uint64_t v68 = (int)v37;
          uint64_t v7 = v150;
          if (v78 && (*(void *)(v10 + 8 * v152[(int)v37 + 69]) & 0x10) != 0) {
            goto LABEL_88;
          }
          if ((*(void *)(v10 + 8 * v137) & 0x10) != 0) {
            goto LABEL_88;
          }
        }
        if ((*(void *)(v10 + 8 * v138) & 0x10) != 0)
        {
LABEL_88:
          if ((v72 & 0x40) != 0)
          {
            if (*(unsigned char *)(v6 + v71) == 124) {
              goto LABEL_132;
            }
            int v73 = *(unsigned __int8 *)(v68 + v6 + 1);
LABEL_127:
            if (v73 == 124) {
              goto LABEL_132;
            }
          }
        }
        else
        {
LABEL_296:
          if (!v34) {
            goto LABEL_132;
          }
          if ((v70 & 0x10) == 0) {
            goto LABEL_132;
          }
          uint64_t v79 = v68 + 1;
          int v80 = *(unsigned __int8 *)(v6 + v68 + 1);
          if (v80 == 124) {
            goto LABEL_132;
          }
          uint64_t v81 = v152[v79 + 65];
          if ((*(void *)(v10 + 8 * v81) & 8) == 0)
          {
            if (v80 != 43)
            {
              uint64_t v142 = v68;
              BOOL v82 = is_hun_digraph((char)v69, (char)v81);
              uint64_t v68 = v142;
              if (v82 && *(unsigned char *)(v6 + v142 + 2) != 124 && (*(void *)(v10 + 8 * v152[v142 + 67]) & 8) != 0)
              {
                LODWORD(v83) = v79;
                uint64_t v113 = v142 - 1;
                uint64_t v7 = v150;
                if ((v2[7] & 0x40) == 0 || *(unsigned char *)(v6 + v113) != 124)
                {
                  int v114 = v152[v113 + 65];
                  if ((v69 - 65) >= 0x1A) {
                    unsigned __int8 v115 = v69;
                  }
                  else {
                    unsigned __int8 v115 = v69 + 32;
                  }
                  if ((v114 - 65) < 0x1A) {
                    LOBYTE(v114) = v114 + 32;
                  }
                  if (v115 != v114
                    || (int v116 = *(unsigned __int8 *)(v6 + v142), v116 == 124)
                    || v116 == 43)
                  {
                    char v89 = 45;
                  }
                  else
                  {
                    char v89 = 61;
                  }
                  goto LABEL_129;
                }
LABEL_130:
                uint64_t v68 = v79;
LABEL_131:
                LODWORD(v37) = v83;
              }
              else
              {
                uint64_t v83 = v142 + 2;
                int v84 = *(unsigned __int8 *)(v6 + v142 + 2);
                uint64_t v7 = v150;
                if (v84 != 43 && v84 != 124)
                {
                  int v85 = v152[v79 + 65];
                  int v86 = v152[v83 + 65];
                  if ((v69 - 65) >= 0x1A) {
                    char v87 = v69;
                  }
                  else {
                    char v87 = v69 + 32;
                  }
                  if ((v85 - 65) < 0x1A) {
                    LOBYTE(v85) = v85 + 32;
                  }
                  if ((v86 - 65) < 0x1A) {
                    LOBYTE(v86) = v86 + 32;
                  }
                  if (v87 == 100
                    && v85 == 122
                    && v86 == 115
                    && *(unsigned char *)(v6 + v142 + 3) != 124
                    && (*(void *)(v10 + 8 * v152[v142 + 68]) & 8) != 0)
                  {
                    uint64_t v88 = v142 - 1;
                    if ((v2[7] & 0x40) != 0 && *(unsigned char *)(v6 + v88) == 124)
                    {
                      uint64_t v68 = v142 + 2;
                      goto LABEL_131;
                    }
                    int v117 = v152[v88 + 65];
                    if ((v117 - 65) < 0x1A) {
                      LOBYTE(v117) = v117 + 32;
                    }
                    if (v117 != 100
                      || (int v118 = *(unsigned __int8 *)(v6 + v142), v118 == 124)
                      || v118 == 43)
                    {
                      char v89 = 45;
                    }
                    else
                    {
                      char v89 = 35;
                    }
                    uint64_t v79 = v142 + 2;
LABEL_129:
                    *(unsigned char *)(v7 + v6_Block_object_dispose(&STACK[0x510], 8) = v89;
                    goto LABEL_130;
                  }
                }
              }
            }
LABEL_132:
            if ((*(void *)(v10 + 8 * v152[v68 + 65]) & 8) != 0) {
              unsigned int v34 = 1;
            }
            int v67 = *(_DWORD *)(v4 + 3524);
            goto LABEL_135;
          }
          if ((v2[7] & 0x40) != 0)
          {
            int v73 = *(unsigned __int8 *)(v68 + v6 - 1);
            goto LABEL_127;
          }
        }
        char v89 = 45;
        uint64_t v79 = v68;
        LODWORD(v83) = v37;
        goto LABEL_129;
      }
LABEL_135:
      if (v67 != 21 || (int v90 = v152[(int)v37 + 65], (*(void *)(v10 + 8 * v152[(int)v37 + 65]) & 8) == 0))
      {
LABEL_137:
        uint64_t v33 = v38;
        goto LABEL_138;
      }
      uint64_t v91 = (int)v37;
      uint64_t v92 = (int)v37 - 1;
      uint64_t v93 = v152[v92 + 65];
      uint64_t v33 = (int)v37 + 1;
      if ((v90 | 0x20) == 0x69)
      {
        uint64_t v94 = *(void *)(v10 + 8 * v93);
        if ((v94 & 0x10) != 0 && (*(void *)(v10 + 8 * v152[v33 + 65]) & 8) != 0) {
          goto LABEL_137;
        }
        if ((v94 & 8) == 0) {
          goto LABEL_159;
        }
      }
      else if ((*(void *)(v10 + 8 * v93) & 8) == 0)
      {
        goto LABEL_159;
      }
      int v95 = *(unsigned __int8 *)(v6 + v92);
      int v96 = v93 & 0xFFFFFFDF;
      if (v95 == 124 || v96 != 73 || (*(void *)(v10 + 8 * v152[(int)v37 + 63]) & 0x10) == 0)
      {
        if ((v90 & 0xFFFFFFDF) == 0x59
          || (v90 & 0xFFFFFFDF) == 0x55 && v96 == 65
          || (v2[7] & 0x40) != 0 && (v95 == 124 || *(unsigned char *)(v6 + v33) == 124))
        {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
LABEL_159:
      if (v34)
      {
        int v97 = v2[9] - 1;
        if (v90 == 101 && v37 == v97 && v93 == 105)
        {
          if ((int)v37 > v2[8] + 3 && v152[(int)v37 + 63] == 99)
          {
            uint64_t v91 = (int)v37 - 3;
            if (v152[v91 + 65] == 152)
            {
LABEL_200:
              *(unsigned char *)(v7 + v91) = 45;
              goto LABEL_201;
            }
          }
LABEL_174:
          LODWORD(v92) = v37 - 2;
          char v141 = 1;
        }
        else
        {
          if (v90 == 105 && v37 == v97 && v93 == 99)
          {
            if ((int)v37 > v2[8] + 2)
            {
              uint64_t v91 = (int)v37 - 2;
              if (v152[v91 + 65] == 152) {
                goto LABEL_200;
              }
            }
          }
          else if ((v93 | 0x20) == 0x69)
          {
            goto LABEL_174;
          }
          char v141 = 0;
        }
        if ((int)v92 < (int)v38) {
          goto LABEL_196;
        }
        int v139 = v92;
        int v98 = 2;
        int v143 = v92;
        do
        {
          if ((int)v92 > (int)v38)
          {
            BOOL v99 = is_pol_digraph((char)v152[(int)v92 + 64], (char)v152[(int)v92 + 65], (unsigned __int8 *)v4);
            uint64_t v7 = v150;
            if (v99) {
              LODWORD(v92) = v92 - 1;
            }
          }
          --v98;
          BOOL v100 = (int)v92 <= (int)v38;
          LODWORD(v92) = v92 - 1;
        }
        while (!v100);
        if (v98 == 1)
        {
          uint64_t v33 = (int)v37 + 1;
          if (v143 <= (int)v38) {
            goto LABEL_186;
          }
          uint64_t v92 = v143 - 1;
          BOOL v101 = is_pol_digraph((char)v152[v92 + 65], (char)v152[v143 + 65], (unsigned __int8 *)v4);
          uint64_t v7 = v150;
          if (!v101) {
            goto LABEL_186;
          }
          goto LABEL_196;
        }
        uint64_t v102 = 0;
        BOOL v103 = &v152[v143 + 65];
        while (1)
        {
          int v104 = v102;
          if (v143 + v102 <= (int)v38) {
            break;
          }
          int v105 = v103[v102];
          int v106 = v103[v102 - 1];
          if (v105 != v106 && (v105 != 108 || v106 != 136))
          {
            --v102;
            if (v105 != 136 || v106 != 108) {
              continue;
            }
          }
          LODWORD(v92) = v143 + v104;
          goto LABEL_195;
        }
        uint64_t v135 = v143 - 1;
        int v134 = v38 + 1;
        if (v143 - 1 > (int)v38 + 1)
        {
          uint64_t v92 = (int)v135;
          do
          {
            int v107 = v152[v92 + 65];
            if (v107 == v152[v92 + 63])
            {
              int v108 = v152[v92 + 66];
              uint64_t v109 = v92 - 1;
              if (v108 == v152[v92 + 64])
              {
                BOOL v110 = is_pol_digraph((char)v107, (char)v108, (unsigned __int8 *)v4);
                uint64_t v7 = v150;
                if (v110)
                {
                  uint64_t v2 = v149;
                  goto LABEL_195;
                }
              }
            }
            else
            {
              uint64_t v109 = v92 - 1;
            }
            uint64_t v92 = v109;
          }
          while (v109 > v134);
        }
        char v111 = v141 ^ 1;
        if (v143 <= (int)v38) {
          char v111 = 1;
        }
        uint64_t v2 = v149;
        if (v111) {
          goto LABEL_254;
        }
        unsigned int v112 = v152[v143 + 65];
        if (v112 > 0x62)
        {
          if (v152[v143 + 65] <= 0x72u)
          {
            if (v112 == 99)
            {
LABEL_245:
              int v119 = v152[v135 + 65];
              if (v119 != 143 && v119 != 134) {
                goto LABEL_247;
              }
              goto LABEL_265;
            }
            if (v112 == 110) {
              goto LABEL_248;
            }
            goto LABEL_254;
          }
          if (v112 == 115) {
            goto LABEL_250;
          }
          if (v112 != 122) {
            goto LABEL_254;
          }
        }
        else
        {
          if (v152[v143 + 65] <= 0x52u)
          {
            if (v112 == 67) {
              goto LABEL_245;
            }
LABEL_247:
            if (v112 == 78)
            {
LABEL_248:
              if ((v152[v135 + 65] + 29) > 1u) {
                goto LABEL_254;
              }
LABEL_265:
              LODWORD(v92) = v139;
LABEL_195:
              uint64_t v33 = (int)v37 + 1;
              goto LABEL_196;
            }
LABEL_254:
            if (v143 > v134)
            {
              int v121 = v152[v143 + 65];
              switch(((v121 - 67) >> 4) | (16 * (v121 - 67)))
              {
                case 0:
                case 2:
                  if ((v152[v135 + 65] | 0x20) == 0x7A && (v152[v143 + 63] | 0x20) == 0x63) {
                    goto LABEL_265;
                  }
                  if ((v121 | 0x20) != 0x73) {
                    goto LABEL_262;
                  }
                  break;
                case 1:
                case 3:
                  break;
                default:
LABEL_262:
                  if ((v121 + 67) <= 1u
                    && (v152[v135 + 65] | 0x20) == 0x7A
                    && (v152[v143 + 63] | 0x20) == 0x72)
                  {
                    goto LABEL_265;
                  }
                  goto LABEL_267;
              }
              if ((v152[v135 + 65] | 0x20) == 0x7A && (v152[v143 + 63] | 0x20) == 0x73) {
                goto LABEL_265;
              }
            }
LABEL_267:
            uint64_t v122 = 0;
            while (1)
            {
              long long v123 = (&conshyp_pol_consdef)[2 * v122];
              int v124 = *v123;
              uint64_t v125 = v143;
              if (!*v123) {
                break;
              }
              uint64_t v126 = 1;
              while (v125 >= (int)v38
                   && v124 == *(unsigned __int8 *)(v4 + *(unsigned __int8 *)(v4 + v152[v125 + 65] + 256) + 512))
              {
                int v124 = v123[v126++];
                --v125;
                if (!v124) {
                  goto LABEL_276;
                }
              }
              if (++v122 == 276) {
                goto LABEL_279;
              }
            }
LABEL_276:
            uint64_t v127 = v143 - (uint64_t)SLODWORD((&conshyp_pol_consdef)[2 * v122 + 1]);
            if ((int)v127 < (int)v38)
            {
              LODWORD(v92) = v127 + 1;
              goto LABEL_195;
            }
            uint64_t v92 = (int)v127 + 1;
            BOOL v128 = is_pol_digraph((char)v152[v127 + 65], (char)v152[v92 + 65], (unsigned __int8 *)v4);
            uint64_t v7 = v150;
            if (v128)
            {
LABEL_279:
              if (v98)
              {
                LODWORD(v92) = v143 - 1;
                signed __int8 v129 = v152[v135 + 65];
                if (is_pol_digraph(v129, (char)v152[v143 + 65], (unsigned __int8 *)v4))
                {
                  uint64_t v33 = (int)v37 + 1;
                  if (v143 <= (int)v38 + 2)
                  {
                    LODWORD(v92) = v143 - 2;
LABEL_292:
                    uint64_t v7 = v150;
                    goto LABEL_196;
                  }
                  LODWORD(v92) = v143 - 3;
                  BOOL v130 = is_pol_digraph((char)v152[v143 + 62], (char)v152[v143 + 63], (unsigned __int8 *)v4);
                  uint64_t v7 = v150;
                  if (!v130) {
                    LODWORD(v92) = v143 - 2;
                  }
                }
                else
                {
                  uint64_t v33 = (int)v37 + 1;
                  if (v143 <= v134) {
                    goto LABEL_292;
                  }
                  LODWORD(v92) = v143 - 2;
                  BOOL v132 = is_pol_digraph((char)v152[v143 + 63], v129, (unsigned __int8 *)v4);
                  uint64_t v7 = v150;
                  if (!v132) {
                    LODWORD(v92) = v143 - 1;
                  }
                }
              }
              else
              {
                uint64_t v33 = (int)v37 + 1;
                if (v143 <= (int)v38
                  || (LODWORD(v92) = v143 - 1,
                      BOOL v131 = is_pol_digraph((char)v152[v135 + 65], (char)v152[v143 + 65], (unsigned __int8 *)v4),
                      uint64_t v7 = v150,
                      !v131))
                {
LABEL_186:
                  LODWORD(v92) = v139;
                }
              }
LABEL_196:
              if ((v2[7] & 0x40) != 0 && (*(unsigned char *)(v6 + (int)v92 - 1) == 124 || *(unsigned char *)((int)v92 + v6 + 1) == 124)) {
                goto LABEL_201;
              }
              uint64_t v91 = (int)v92;
              goto LABEL_200;
            }
            goto LABEL_195;
          }
          if (v112 == 83)
          {
LABEL_250:
            if ((v152[v135 + 65] + 105) <= 1u) {
              goto LABEL_265;
            }
          }
          if (v112 != 90) {
            goto LABEL_254;
          }
        }
        int v120 = v152[v135 + 65];
        if (v120 != 171 && v120 != 141) {
          goto LABEL_254;
        }
        goto LABEL_265;
      }
LABEL_201:
      unsigned int v34 = 1;
LABEL_138:
      uint64_t v36 = (int)v37 + 1;
      if ((*(void *)(v10 + 8 * v152[(int)v37 + 65]) & 0x1800) != 0 || *(unsigned char *)(v6 + v36) == 124) {
        int v35 = v37 + 1;
      }
      int v11 = v2[9];
    }
    while ((int)v36 < v11);
  }
  return 0;
}

BOOL is_hun_digraph(int a1, int a2)
{
  char v2 = a1 + 32;
  if ((a1 - 65) >= 0x1A) {
    char v2 = a1;
  }
  if ((a2 - 65) >= 0x1A) {
    char v3 = a2;
  }
  else {
    char v3 = a2 + 32;
  }
  BOOL v6 = v2 == 103 || (v2 & 0xFD) == 108 || v2 == 116;
  if (v3 == 121 && v6) {
    return 1;
  }
  BOOL v7 = v2 == 122 || v2 == 99;
  if (v7 && v3 == 115) {
    return 1;
  }
  if (v2 == 115 || v2 == 100) {
    return v3 == 122;
  }
  return 0;
}

BOOL is_hun_trigraph(int a1, int a2, int a3)
{
  if ((a1 - 65) >= 0x1A) {
    char v3 = a1;
  }
  else {
    char v3 = a1 + 32;
  }
  if ((a2 - 65) >= 0x1A) {
    char v4 = a2;
  }
  else {
    char v4 = a2 + 32;
  }
  if ((a3 - 65) >= 0x1A) {
    char v5 = a3;
  }
  else {
    char v5 = a3 + 32;
  }
  return v3 == 100 && v4 == 122 && v5 == 115;
}

uint64_t hyphen_delete(uint64_t a1, char *__s)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = strlen(__s);
  if (v4 > 64) {
    return 0;
  }
  memset(v11, 0, sizeof(v11));
  __strcpy_chk();
  letter_stat(v3, v12, &v11[2], &v11[1], v11);
  uint64_t v6 = a1 + 1304;
  int first = cdict_find_first(v6, v12, v4);
  if ((first & 0x80000000) == 0) {
    goto LABEL_17;
  }
  if (v11[1] <= v11[2] || v11[0])
  {
    uint64_t result = 0;
    if (*(void *)&v11[1] != 0x100000001) {
      return result;
    }
    goto LABEL_15;
  }
  unsigned int v8 = v12[0];
  if (v12[0])
  {
    uint64_t v9 = v12;
    do
    {
      if (v9 > v12) {
        *uint64_t v9 = *(unsigned char *)(v3 + v8 + 256);
      }
      unsigned int v10 = *++v9;
      unsigned int v8 = v10;
    }
    while (v10);
  }
  int first = cdict_find_first(v6, v12, v4);
  if (first < 0 && v11[2])
  {
LABEL_15:
    v12[0] = *(unsigned char *)(v3 + v12[0] + 256);
    int first = cdict_find_first(v6, v12, v4);
  }
  if (first < 0) {
    return 0;
  }
LABEL_17:
  cdict_delete(v6, first);
  return 1;
}

BOOL hyphen_find(uint64_t a1, char *__s)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = strlen(__s);
  if (v4 > 64) {
    return 0;
  }
  memset(v11, 0, sizeof(v11));
  __strcpy_chk();
  letter_stat(v3, v12, &v11[2], &v11[1], v11);
  uint64_t v6 = a1 + 1304;
  int first = cdict_find_first(v6, v12, v4);
  if (first < 0)
  {
    if (v11[1] > v11[2] && !v11[0])
    {
      unsigned int v8 = v12[0];
      if (v12[0])
      {
        uint64_t v9 = v12;
        do
        {
          if (v9 > v12) {
            *uint64_t v9 = *(unsigned char *)(v3 + v8 + 256);
          }
          unsigned int v10 = *++v9;
          unsigned int v8 = v10;
        }
        while (v10);
      }
      int first = cdict_find_first(v6, v12, v4);
      if ((first & 0x80000000) == 0 || !v11[2]) {
        return first >= 0;
      }
      goto LABEL_15;
    }
    if (*(void *)&v11[1] == 0x100000001)
    {
LABEL_15:
      v12[0] = *(unsigned char *)(v3 + v12[0] + 256);
      int first = cdict_find_first(v6, v12, v4);
    }
  }
  return first >= 0;
}

uint64_t hyphen_add(uint64_t a1, unsigned __int8 *a2)
{
  return add_userhypdict(a1 + 1304, a2);
}

uint64_t add_userhypdict(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = *a2;
  if (*a2)
  {
    unsigned __int8 v4 = 0;
    char v5 = 0;
    int v6 = 0;
    int v7 = 0;
    unsigned int v8 = a2 + 1;
    while (1)
    {
      unsigned __int8 v9 = v4;
      unsigned __int8 v4 = v2;
      if (v2 == 61) {
        break;
      }
      if (v2 == 45 && v9 != 45)
      {
        int v11 = &__src[v6];
        *int v11 = v5 + 48;
        v6 += 2;
        v11[1] = 45;
        goto LABEL_9;
      }
      v17[v7++] = v2;
      ++v5;
LABEL_10:
      int v12 = *v8++;
      unsigned __int8 v2 = v12;
      if (!v12)
      {
        v17[v7] = 0;
        uint64_t v13 = v7 + 1;
        int v14 = v6 + v13;
        __src[v6] = 0;
        strcpy((char *)&v17[v13], __src);
        int v15 = cdict_add(a1, v17, v14 + 1);
        return v15 & (v15 >> 31);
      }
    }
    unsigned int v10 = &__src[v6];
    *unsigned int v10 = v5 + 48;
    v6 += 2;
    v10[1] = 61;
LABEL_9:
    char v5 = 0;
    goto LABEL_10;
  }
  return 0;
}

uint64_t hyphen_get(uint64_t a1, int a2, unsigned char *a3)
{
  return get_userhypdict(a1 + 1304, a2, a3);
}

uint64_t get_userhypdict(uint64_t a1, int a2, unsigned char *a3)
{
  memset(v13, 0, sizeof(v13));
  uint64_t result = cdict_access(a1, a2, (uint64_t)v13);
  if (result)
  {
    char v5 = (char *)(*(void *)&v13[0] + SDWORD2(v13[0]) + 20);
    int v6 = v5;
    while (*v6++)
      ;
    while (1)
    {
      char v11 = *v6;
      if (!*v6) {
        break;
      }
      if (v11 >= 49)
      {
        int v8 = v11 - 48;
        do
        {
          char v9 = *v5++;
          *a3++ = v9;
          --v8;
        }
        while (v8);
      }
      int v10 = v6[1];
      if (v10 == 45 || v10 == 61) {
        *a3++ = v10;
      }
      v6 += 2;
    }
    do
    {
      int v12 = *v5++;
      *a3++ = v12;
    }
    while (v12);
    return 1;
  }
  return result;
}

uint64_t hyphen_dsize(uint64_t a1)
{
  return cdict_size(a1 + 1304);
}

BOOL is_pol_digraph(int a1, int a2, unsigned __int8 *a3)
{
  char v3 = a1 + 32;
  if ((a1 - 65) >= 0x1A) {
    char v3 = a1;
  }
  if ((a2 - 65) >= 0x1A) {
    unsigned __int8 v4 = a2;
  }
  else {
    unsigned __int8 v4 = a2 + 32;
  }
  BOOL v6 = (v3 - 99) < 2u || (v3 & 0xFE) == 114;
  if (v4 == 122 && v6) {
    return 1;
  }
  BOOL result = v3 == 99 && v4 == 104;
  if (v3 == 100)
  {
    if (a3[939] != v4 && a3[958] != v4 && a3[909] != v4) {
      return a3[957] == v4;
    }
    return 1;
  }
  return result;
}

uint64_t add_hypdict(uint64_t a1, unsigned char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!*a2) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  char v5 = 0;
  int v6 = 0;
  do
  {
    int v8 = (char)*a2++;
    int v7 = v8;
    if (!v8) {
      break;
    }
    int v9 = v7;
    if (v7 == 42)
    {
      int v6 = 1;
    }
    else
    {
      if (v7 == 61)
      {
        char v11 = &__src[v4];
        *char v11 = v5 + 48;
        v4 += 2;
        v11[1] = 61;
      }
      else
      {
        if (v7 != 45)
        {
          v16[v3++] = v7;
          ++v5;
          continue;
        }
        int v10 = &__src[v4];
        *int v10 = v5 + 48;
        v4 += 2;
        v10[1] = 45;
      }
      char v5 = 0;
    }
  }
  while (v9 != 42);
  uint64_t v12 = v3 + 1;
  v16[v3] = 0;
  int v13 = v4 + 1;
  __src[v4] = 0;
  if (v6)
  {
    v16[v12] = 42;
    LODWORD(v12) = v3 + 2;
  }
  strcpy((char *)&v16[(int)v12], __src);
  int v14 = cdict_add(a1, v16, v13 + (int)v12);
  return v14 & (v14 >> 31);
}

uint64_t IChu(uint64_t a1, char *a2)
{
  int v4 = *(_DWORD *)a1;
  uint64_t v5 = 11;
  switch(*(_DWORD *)a1)
  {
    case 1:
      HUinit(a1);
      return v6;
    case 2:
      HUterm(a1);
      return 0;
    case 3:
      return HUfullver(a2, a1);
    case 4:
    case 5:
    case 6:
      return v5;
    case 7:
      if (*(_DWORD *)(a1 + 1308))
      {
        if (*(_DWORD *)(a1 + 4) == 11 && (*(_WORD *)(a1 + 1322) & 0x20) == 0
          || SLstrcmp((unsigned char *)(a1 + 1547), **(unsigned __int8 ***)(*(void *)(*(void *)(a1 + 3184) + 224) + 16))&& (*(_WORD *)(a1 + 1322) & 2) == 0)
        {
          uint64_t v5 = HUfullver(a2, a1);
        }
        if (*(_DWORD *)(a1 + 4) != 11 && (*(_WORD *)(a1 + 1322) & 2) == 0 && HUhyphenate(a1) == 8) {
          return 8;
        }
      }
      return v5;
    default:
      if (v4 == 100) {
        return HUcorrect(a1, a2);
      }
      if (v4 != 101) {
        return v5;
      }
      return HUcormore(a1, a2);
  }
}

double HUinit(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 3184);
  int v3 = *(void **)(v2 + 224);
  memset(v25, 0, sizeof(v25));
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 4) {
    int v5 = 14;
  }
  else {
    int v5 = 0;
  }
  if (v4 == 18) {
    int v6 = 21;
  }
  else {
    int v6 = v5;
  }
  int v7 = malloc_type_calloc(1uLL, 0x40uLL, 0x101004065F4E4D2uLL);
  v3[2] = v7;
  if (!v7) {
    goto LABEL_17;
  }
  int v9 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(void *)(v3[2] + _Block_object_dispose(&STACK[0x510], 8) = v9;
  if (!v9) {
    goto LABEL_17;
  }
  v9[64] = 32;
  *(void *)&long long v10 = 0x2020202020202020;
  *((void *)&v10 + 1) = 0x2020202020202020;
  *((_OWORD *)v9 + 2) = v10;
  *((_OWORD *)v9 + 3) = v10;
  *(_OWORD *)int v9 = v10;
  *((_OWORD *)v9 + 1) = v10;
  char v11 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(void *)v3[2] = v11;
  if (!v11) {
    goto LABEL_17;
  }
  v11[64] = 32;
  *(void *)&long long v12 = 0x2020202020202020;
  *((void *)&v12 + 1) = 0x2020202020202020;
  *((_OWORD *)v11 + 2) = v12;
  *((_OWORD *)v11 + 3) = v12;
  *(_OWORD *)char v11 = v12;
  *((_OWORD *)v11 + 1) = v12;
  int v13 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(void *)(v3[2] + 16) = v13;
  if (!v13)
  {
LABEL_17:
    __int16 v21 = *(_WORD *)(a1 + 1320) | 8;
LABEL_18:
    *(_WORD *)(a1 + 1320) = v21;
    return result;
  }
  v13[64] = 32;
  *(void *)&long long v14 = 0x2020202020202020;
  *((void *)&v14 + 1) = 0x2020202020202020;
  *((_OWORD *)v13 + 2) = v14;
  *((_OWORD *)v13 + 3) = v14;
  *(_OWORD *)int v13 = v14;
  *((_OWORD *)v13 + 1) = v14;
  uint64_t v15 = SLLngToA(*(unsigned __int8 *)(a1 + 8));
  *(void *)(*(void *)(*(void *)(a1 + 3184) + 248) + 56) = v15;
  if (!v15)
  {
    __int16 v21 = *(_WORD *)(a1 + 1320) | 0x4000;
    goto LABEL_18;
  }
  uint64_t v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040A517B1A3uLL);
  if (!v16) {
    return result;
  }
  uint64_t v17 = v16;
  *uint64_t v16 = 757935150;
  *((unsigned char *)v16 + 4) = 45;
  _OWORD v16[2] = v6;
  unsigned char v16[3] = 4250;
  int v18 = charset_init(v3 + 1, (unsigned __int8 *)v16);
  free(v17);
  if (v18 < 0) {
    goto LABEL_29;
  }
  SLfulfspec((char *)(a1 + 28), (const char *)(a1 + 539), __dst);
  unsigned int v19 = *(_DWORD *)(a1 + 3168);
  if (v19 <= 0x3FF)
  {
    *(_DWORD *)&v25[20] = 0;
    *(_OWORD *)&v25[4] = xmmword_20CC65570;
LABEL_16:
    int v20 = 1;
LABEL_23:
    *(_DWORD *)int v25 = v20;
    goto LABEL_24;
  }
  *(_DWORD *)&v25[20] = 1;
  *(_OWORD *)&v25[4] = xmmword_20CC65560;
  int v22 = (v19 << 6) - 0x20000;
  *(_DWORD *)int v25 = v22 >> 16;
  if (v22 > 134283263)
  {
    int v20 = 0;
    goto LABEL_23;
  }
  if (v22 < 0x10000)
  {
    *(_DWORD *)&v25[12] = 0;
    goto LABEL_16;
  }
LABEL_24:
  if ((spell_init(v3, v3[1], __dst, (long long *)v25) & 0x80000000) != 0)
  {
LABEL_29:
    __int16 v21 = *(_WORD *)(a1 + 1320) | 4;
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 3184) + 224);
  *(_DWORD *)(v23 + 32) = 1;
  if ((suggest_init((void *)(v23 + 24), *(void *)(v23 + 8), 0, -1) & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 1308)) {
      HUhyphinit(a1);
    }
    *(_WORD *)(a1 + 1320) |= 0x80u;
    uint64_t v24 = *(void *)(v2 + 248);
    *(_WORD *)(v24 + 6_Block_object_dispose(&STACK[0x510], 8) = 64;
    *(unsigned char *)(v24 + 55) = *(unsigned char *)(a1 + 8);
    *(void *)&double result = 0x8000000080;
    *(void *)(a1 + 12) = 0x8000000080;
    *(_WORD *)(v2 + 12) = 307;
  }
  return result;
}

uint64_t HUterm(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 3184);
  if (*(_DWORD *)(a1 + 1308)) {
    hyphen_finish(*(void *)(*(void *)(v1 + 224) + 40));
  }
  suggest_finish(*(void *)(*(void *)(v1 + 224) + 24));
  spell_finish(**(void ***)(v1 + 224));
  freq_finish(*(void **)(*(void *)(v1 + 224) + 8));
  uint64_t v2 = *(void ***)(*(void *)(v1 + 224) + 16);
  if (v2[2])
  {
    free(v2[2]);
    uint64_t v2 = *(void ***)(*(void *)(v1 + 224) + 16);
  }
  if (v2[1])
  {
    free(v2[1]);
    uint64_t v2 = *(void ***)(*(void *)(v1 + 224) + 16);
  }
  if (!*v2 || (free(*v2), (uint64_t v2 = *(void ***)(*(void *)(v1 + 224) + 16)) != 0)) {
    free(v2);
  }
  return 0;
}

uint64_t HUfullver(char *a1, uint64_t a2)
{
  uint64_t result = HUver(a1, a2);
  if (*(_DWORD *)(a2 + 1308)) {
    BOOL v4 = result == 11;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a2 + 3184) + 264);
    if (*(_DWORD *)(v5 + 3472) || *(_DWORD *)(v5 + 3476))
    {
      return HUmandin(a2);
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t HUcorrect(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 3184) + 224);
  uint64_t v5 = *(int *)(v4 + 32);
  if (v5 == 1)
  {
    int v6 = 8;
    *(_DWORD *)(*(void *)(v4 + 16) + 56) = 8;
    if (!*(_WORD *)(a1 + 1682)) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_WORD *)(a1 + 1682))
    {
LABEL_13:
      if (*(_WORD *)(a1 + 1680))
      {
        suggest_words(*(void *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(void *)(v4 + 16) + 56), -1);
        return 0;
      }
      unint64_t v9 = 1;
      do
      {
        suggest_words(*(void *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(void *)(v4 + 16) + 56), v9);
        BOOL v10 = v9 >= 0x80;
        v9 *= 2;
      }
      while (!v10);
      if (*(unsigned char *)(a1 + 1690)) {
        return 20;
      }
      return HUcormore(a1, a2);
    }
    if ((int)v5 < 1) {
      return 0;
    }
    int v6 = *(_DWORD *)(*(void *)(v4 + 16) + 56);
  }
  LODWORD(result) = suggest_words(*(void *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, v6, v5);
  int v8 = 2 * *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v4 + 32) = v8;
  if (v8 < 1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1690) || *(_WORD *)(a1 + 1680)) {
    return 20;
  }
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 8;
  }
}

uint64_t HUcormore(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 3184) + 224);
  uint64_t v5 = 256;
  do
  {
    unsigned int v6 = suggest_words(*(void *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(void *)(v4 + 16) + 56), v5);
    v5 *= 2;
  }
  while ((int)v5 > 255);
  return (v6 >> 28) & 8;
}

uint64_t HUhyphenate(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3184);
  uint64_t v3 = *(void *)(v2 + 264);
  uint64_t v4 = *(void *)(v2 + 224);
  *(void *)(v3 + 3480) = 0;
  if ((hyphen_ate(*(void *)(v4 + 40), *(void *)(v4 + 16)) & 0x80000000) != 0) {
    return 8;
  }
  if (*(__int16 *)(a1 + 1612) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3 + 3480;
    while (1)
    {
      uint64_t v7 = *(void *)(*(void *)(v4 + 16) + 16);
      if (*(unsigned char *)(v7 + v5) != 32)
      {
        int v8 = 1;
        *(_DWORD *)(v6 + 4 * ((unsigned __int16)(v5 - 1) >> 5)) |= 1 << -(char)v5;
        int v9 = *(unsigned __int8 *)(v7 + v5);
        if (v9 == 61) {
          goto LABEL_8;
        }
        if (v9 == 35) {
          break;
        }
      }
LABEL_9:
      if (++v5 >= *(__int16 *)(a1 + 1612)) {
        return 0;
      }
    }
    int v8 = 2;
LABEL_8:
    HUmand(a1, (__int16)v5, v8);
    goto LABEL_9;
  }
  return 0;
}

uint64_t HUver(char *__src, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  uint64_t v6 = *(void *)(*(void *)(v4 + 248) + 56);
  uint64_t v7 = *(void *)(*(void *)(v4 + 224) + 16);
  strcpy(*(char **)v7, __src);
  uint64_t v8 = *(void *)(v7 + 8);
  *(unsigned char *)(v8 + 64) = 32;
  *(void *)&long long v9 = 0x2020202020202020;
  *((void *)&v9 + 1) = 0x2020202020202020;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 4_Block_object_dispose(&STACK[0x510], 8) = v9;
  *(_OWORD *)uint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v7 + 24) = strlen(__src);
  *(_DWORD *)(v7 + 2_Block_object_dispose(&STACK[0x510], 8) = 1;
  if (*(_DWORD *)(a2 + 1308))
  {
    uint64_t v10 = *(void *)(v7 + 16);
    *(unsigned char *)(v10 + 64) = 32;
    *(void *)&long long v11 = 0x2020202020202020;
    *((void *)&v11 + 1) = 0x2020202020202020;
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 4_Block_object_dispose(&STACK[0x510], 8) = v11;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v11;
    *(_DWORD *)(v7 + 28) |= 0x44u;
  }
  if ((spell_check(**(void **)(v4 + 224), (uint64_t *)v7) & 0x80000000) != 0) {
    return 8;
  }
  uint64_t result = HUres(v7, a2);
  if (result != 11)
  {
    if (result == 10) {
      **(unsigned char **)(v5 + 72) = 0;
    }
    goto LABEL_7;
  }
  if (*(unsigned char *)(v5 + 88))
  {
    SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *(unsigned __int8 *)(v5 + 88), v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
    if ((spell_check(**(void **)(v4 + 224), (uint64_t *)v7) & 0x80000000) != 0) {
      return 8;
    }
    uint64_t result = HUres(v7, a2);
    if (result != 11)
    {
      if (result == 10)
      {
        **(unsigned char **)(v5 + 72) = *(unsigned char *)(v5 + 88);
        int v13 = *(_DWORD **)(v5 + 80);
        *int v13 = *(_DWORD *)(v5 + 92);
        v13[1] = *(_DWORD *)(v5 + 96);
      }
      goto LABEL_7;
    }
  }
  strcpy(*(char **)v7, __src);
  **(unsigned char **)(v5 + 72) = 1;
  uint64_t v15 = *(unsigned __int8 **)(v5 + 72);
  long long v14 = *(_DWORD **)(v5 + 80);
  *v14 |= 0x80000000;
  SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *v15, (uint64_t)v14, *v15, v6);
  if ((spell_check(**(void **)(v4 + 224), (uint64_t *)v7) & 0x80000000) == 0)
  {
    uint64_t result = HUres(v7, a2);
    if (result != 11) {
      goto LABEL_7;
    }
    **(unsigned char **)(v5 + 72) = 2;
    uint64_t v17 = *(unsigned __int8 **)(v5 + 72);
    uint64_t v16 = *(void **)(v5 + 80);
    *uint64_t v16 = -1;
    SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *v17, (uint64_t)v16, *(unsigned __int8 *)(v5 + 88), v6);
    if ((spell_check(**(void **)(v4 + 224), (uint64_t *)v7) & 0x80000000) == 0)
    {
      uint64_t result = HUres(v7, a2);
      if (result == 11)
      {
        *(unsigned char *)(*(void *)(v5 + 72) + 1) = 0;
        **(unsigned char **)(v5 + 72) = 0;
        **(void **)(v5 + 80) = 0;
        goto LABEL_8;
      }
LABEL_7:
      *(_WORD *)(v5 + 102) = 1;
LABEL_8:
      *(_DWORD *)(a2 + 4) = result;
      return result;
    }
  }
  return 8;
}

uint64_t HUres(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if ((v2 & 0x10) != 0) {
    *(void *)(a2 + 1328) |= 0x1000000uLL;
  }
  if ((v2 & 0x20) != 0)
  {
    *(void *)(a2 + 1328) |= 0x8000000uLL;
    if ((v2 & 0x80) == 0)
    {
LABEL_9:
      uint64_t result = 3;
      goto LABEL_10;
    }
LABEL_8:
    *(void *)(a2 + 1328) |= 0x4000000uLL;
    goto LABEL_9;
  }
  if ((v2 & 0x80) != 0) {
    goto LABEL_8;
  }
  if (v2) {
    return 11;
  }
  uint64_t result = 10;
LABEL_10:
  **(_WORD **)(a2 + 3184) |= 0x100u;
  return result;
}

uint64_t getcache(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    *(_DWORD *)(a1 + 20) = 0;
    *(_OWORD *)(a1 + 4) = xmmword_20CC65570;
LABEL_7:
    int v3 = 1;
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 20) = 1;
  *(_OWORD *)(a1 + 4) = xmmword_20CC65560;
  int v2 = (a2 << 6) - 0x20000;
  *(_DWORD *)a1 = v2 >> 16;
  if (v2 > 134283263)
  {
    int v3 = 0;
LABEL_8:
    *(_DWORD *)a1 = v3;
    return 0;
  }
  if (v2 < 0x10000)
  {
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t HUcorinit(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 3184) + 224);
  *(_DWORD *)(v1 + 32) = 1;
  return (suggest_init((void *)(v1 + 24), *(void *)(v1 + 8), 0, -1) >> 28) & 8;
}

uint64_t HUhyphinit(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 3184) + 224);
  SLfulfspec((char *)(a1 + 668), (const char *)(a1 + 1179), __dst);
  int v3 = hyphen_init((void *)(v2 + 40), *(void *)(v2 + 8), __dst, 0, 0);
  __int16 v4 = *(_WORD *)(a1 + 1320);
  if (v3 < 0)
  {
    *(_WORD *)(a1 + 1320) = v4 | 0x2000;
    *(_DWORD *)(a1 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
    return 8;
  }
  else
  {
    uint64_t result = 0;
    *(_WORD *)(a1 + 1320) = v4 | 0x100;
  }
  return result;
}

uint64_t spell_f(uint64_t *a1, char *__s, int a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  v7[1] = 0;
  v7[2] = 0;
  v7[0] = (uint64_t)__s;
  int v8 = strlen(__s);
  int v9 = a3 + 1;
  uint64_t result = spell_check(*a1, v7);
  if (result)
  {
    if (DWORD2(v11) != 1 || (int)result <= 0) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t result_f(uint64_t a1, char *__src)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!__src) {
    return 10;
  }
  uint64_t v4 = *(void *)(a1 + 3184);
  uint64_t v5 = *(void *)(v4 + 264);
  unsigned int v6 = **(unsigned __int8 **)(v5 + 72);
  if (!*(unsigned char *)(v5 + 3184) || !*(unsigned char *)(v5 + 3206)) {
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v5 + 3192);
  strcpy(*(char **)(v7 + 8), __src);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v5 + 88);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v5 + 92);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v5 + 96);
  *(unsigned char *)(v7 + 42) = 1;
  uint64_t v8 = 1 << (*(unsigned char *)(*(void *)(v4 + 248) + 55) - 1);
  if (!*(unsigned char *)(*(void *)(v4 + 248) + 55)) {
    LODWORD(v_Block_object_dispose(&STACK[0x510], 8) = -1;
  }
  *(_DWORD *)(v7 + 36) = v8;
  PDword((unsigned __int16 *)v7, 1u, 1);
  uint64_t v9 = *(unsigned __int16 *)(v7 + 50);
  if (!*(_WORD *)(v7 + 50) || (*(_WORD *)(v5 + 102) = v9, (__int16)v9 < 1))
  {
LABEL_12:
    if (*(unsigned char *)(v5 + 88) == 3 && v6 == 0)
    {
      unsigned int v6 = *(_DWORD *)(v5 + 92) >> 31;
      long long v12 = strchr(__src, 46);
      if (v12)
      {
        if (v12[1] == 32)
        {
          *(_DWORD *)(*(void *)(v5 + 80) + 4 * ((unsigned __int16)((_WORD)v12 - (_WORD)__src + 2) >> 5)) |= 1 << ~((_BYTE)v12 - (_BYTE)__src + 2);
          unsigned int v6 = 3;
        }
      }
    }
    __strcpy_chk();
    __int16 v13 = strlen(__s);
    SLrecap((unsigned __int8 *)__s, v13, v6, *(void *)(v5 + 80), *(unsigned __int8 *)(v5 + 88), *(void *)(*(void *)(*(void *)(a1 + 3184) + 248) + 56));
    __int16 v14 = strlen(__s);
    SFadd(__s, v14, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(void *)(v5 + 48), *(void *)(v5 + 64));
    return 10;
  }
  uint64_t v10 = *(void *)(v7 + 104);
  while (v6 != *(unsigned __int8 *)(*(void *)v10 + 71) || !*(unsigned char *)(*(void *)v10 + 70))
  {
    v10 += 8;
    if (!--v9) {
      goto LABEL_12;
    }
  }
  return 11;
}

uint64_t HUmand(uint64_t result, int a2, int a3)
{
  uint64_t v3 = a3 + (uint64_t)a2;
  uint64_t v4 = *(void *)(*(void *)(result + 3184) + 264) + 4 * ((unsigned __int16)(a2 - 1) >> 5);
  *(_DWORD *)(v4 + 3480) &= ~(1 << -(char)a2);
  uint64_t v5 = result + 4 * ((unsigned __int16)(v3 - 1) >> 5);
  *(_DWORD *)(v5 + 3156) |= 1 << -(char)v3;
  __int16 v6 = *(_WORD *)(result + 1322);
  if ((v6 & 2) == 0)
  {
    uint64_t v7 = a2;
    if (a2 < 1)
    {
      a2 = 0;
    }
    else
    {
      uint64_t v8 = (unsigned __int16)a2;
      uint64_t v9 = (unsigned char *)(result + 1547);
      do
      {
        v9[1543] = *v9;
        ++v9;
        --v8;
      }
      while (v8);
    }
    uint64_t v10 = result + v7 + 1;
    *(unsigned char *)(result + v7 + 3090) = *(unsigned char *)(v10 + 1547);
    if (a3 == 2) {
      *(unsigned char *)(v10 + 3090) = *(unsigned char *)(result + v3 + 1547);
    }
    __int16 v11 = v3;
    if (a2 < *(__int16 *)(result + 1612))
    {
      uint64_t v12 = (unsigned __int16)a2 + 1547;
      __int16 v11 = v3;
      do
      {
        *(unsigned char *)(result + v11++ + 3090) = *(unsigned char *)(result + v12);
        __int16 v13 = v12++ - 1546;
      }
      while (*(__int16 *)(result + 1612) > v13);
    }
    *(unsigned char *)(result + v11 + 3090) = 0;
    __int16 v6 = *(_WORD *)(result + 1322);
  }
  *(_WORD *)(result + 1322) = v6 | 0x44;
  return result;
}

uint64_t HUmandin(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 3184) + 264);
  __strcpy_chk();
  int v3 = *(__int16 *)(a1 + 1612);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 11;
    while (1)
    {
      if ((*(_DWORD *)(v2 + 3472 + 4 * ((unsigned __int16)v4 >> 5)) >> ~(_BYTE)v4))
      {
        unsigned int v6 = *(unsigned __int8 *)(a1 + v4 + 1547) - 115;
        BOOL v7 = v6 > 7;
        int v8 = (1 << v6) & 0xC1;
        if (!v7 && v8 != 0)
        {
          unsigned int v10 = *(unsigned __int8 *)(v4 + a1 + 1549) - 115;
          BOOL v7 = v10 > 7;
          int v11 = (1 << v10) & 0xC1;
          BOOL v12 = v7 || v11 == 0;
          if (!v12 && *(unsigned __int8 *)(a1 + v4 + 1546) == *(unsigned __int8 *)(a1 + v4 + 1548))
          {
            int v13 = (__int16)v3 - 1;
            if (v13 <= (int)v4)
            {
              __int16 v15 = v4;
            }
            else
            {
              int v14 = v4;
              __int16 v15 = v4;
              do
              {
                __s[v15++] = *(unsigned char *)(a1 + v14 + 1548);
                int v14 = v15;
              }
              while (v13 > v15);
            }
            __s[v15] = 0;
            *(_WORD *)(a1 + 1612) = v3 - 1;
            uint64_t v5 = HUver(__s, a1);
            if (v5 != 11)
            {
              *(_WORD *)(a1 + 1322) |= 2u;
              if (HUhyphenate(a1) == 8) {
                return 8;
              }
              __int16 v16 = *(_WORD *)(a1 + 1322);
              if ((v16 & 4) != 0)
              {
                *(_WORD *)(a1 + 1322) = v16 & 0xFFFB;
                __strcpy_chk();
                ++*(_WORD *)(a1 + 1612);
                uint64_t v19 = *(void *)(a1 + 3156);
                *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v2 + 3480);
                *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v2 + 3484);
                *(void *)(v2 + 3480) = v19;
                return v5;
              }
              __int16 v17 = strlen(__s);
              SFadd(__s, v17, (__int16 *)(v2 + 40), (__int16 *)(v2 + 44), *(__int16 *)(v2 + 42), *(__int16 *)(v2 + 56), *(void *)(v2 + 48), *(void *)(v2 + 64));
              *(_WORD *)(a1 + 1322) &= ~2u;
              **(_WORD **)(a1 + 3184) |= 4u;
              uint64_t v5 = 2;
            }
          }
        }
      }
      ++v4;
      LOWORD(v3) = *(_WORD *)(a1 + 1612);
      if (v4 >= (__int16)v3) {
        return v5;
      }
    }
  }
  return 11;
}

uint64_t charset_init(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = malloc_type_calloc(0xDD0uLL, 1uLL, 0x98363E6DuLL);
  *a1 = v4;
  if (!v4) {
    return 4294965395;
  }
  return charset_reinit((uint64_t)v4, a2);
}

uint64_t charset_alloc(void *a1)
{
  uint64_t v2 = malloc_type_calloc(0xDD0uLL, 1uLL, 0x98363E6DuLL);
  *a1 = v2;
  if (v2) {
    return 0;
  }
  else {
    return 4294967293;
  }
}

uint64_t charset_reinit(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  int v3 = (unsigned __int8 *)&lexchar_hun;
  if (v2 != 14) {
    int v3 = 0;
  }
  uint64_t v4 = &hun_symbols;
  if (v2 != 14) {
    uint64_t v4 = 0;
  }
  if (v2 == 21) {
    uint64_t v5 = (unsigned __int8 *)&lexchar_pol;
  }
  else {
    uint64_t v5 = v3;
  }
  if (v2 == 21) {
    unsigned int v6 = &pol_symbols;
  }
  else {
    unsigned int v6 = v4;
  }
  if (!v5) {
    return 4294965382;
  }
  int v8 = *((_DWORD *)a2 + 3);
  if (v8 == 4250) {
    uint64_t v9 = (unsigned __int8 *)&oemchar_icsl2;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 == 4250) {
    unsigned int v10 = (int *)&oemsym_icsl2;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v8 != 4250) {
    return 4294965381;
  }
  BOOL v12 = (unsigned __int8 *)malloc_type_calloc(0xA00uLL, 1uLL, 0x71254EB2uLL);
  if (!v12) {
    return 4294965395;
  }
  int v13 = v12;
  int v14 = (unsigned __int8 *)malloc_type_calloc(0xA00uLL, 1uLL, 0xA63864AEuLL);
  if (!v14)
  {
    free(v13);
    return 4294965395;
  }
  __int16 v15 = v14;
  uint64_t v55 = a2;
  uint64_t v57 = a1 + 3076;
  bzero(v13, 0xA00uLL);
  bzero(v15, 0xA00uLL);
  unsigned __int8 v16 = *v5;
  if (*v5)
  {
    __int16 v17 = v5 + 3;
    do
    {
      v13[20 * *(v17 - 2) + *(v17 - 1)] = v16;
      int v18 = *v17;
      v17 += 3;
      unsigned __int8 v16 = v18;
    }
    while (v18);
  }
  uint64_t v19 = 0;
  uint64_t v20 = a1 + 768;
  uint64_t v21 = a1 + 1024;
  int v22 = v9 + 1;
  do
  {
    if (*(v22 - 1)) {
      v15[20 * *(v22 - 1) + *v22] = v19 ^ 0x80;
    }
    v22 += 16;
    if ((v19 - 97) >= 0x1A) {
      char v23 = v19;
    }
    else {
      char v23 = v19 - 32;
    }
    uint64_t v24 = (unsigned char *)(a1 + v19);
    *(unsigned char *)(a1 + v19) = v23;
    if ((v19 - 65) >= 0x1A) {
      char v25 = v19;
    }
    else {
      char v25 = v19 + 32;
    }
    v24[256] = v25;
    v24[512] = v19;
    v24[768] = v19;
    v24[640] = 0;
    v24[896] = 0;
    *(void *)(v21 + 8 * v19) = ascii_table[v19];
    ++v19;
  }
  while (v19 != 128);
  uint64_t v26 = 0;
  uint64_t v27 = 128;
  do
  {
    uint64_t v28 = a1 + v26;
    *(unsigned char *)(v28 + 12_Block_object_dispose(&STACK[0x510], 8) = v26 + 0x80;
    *(unsigned char *)(v28 + 384) = v26 + 0x80;
    int v29 = *v9;
    uint64_t v30 = v9[1];
    if ((v29 - 65) > 0x19)
    {
      unsigned int v34 = v29 - 97;
      unsigned int v32 = 20 * v29;
      if (v34 > 0x19) {
        goto LABEL_43;
      }
      int v31 = (unsigned char *)(a1 + v27);
      unsigned int v33 = v32 - 640;
    }
    else
    {
      int v31 = (unsigned char *)(v28 + 384);
      unsigned int v32 = 20 * v29;
      unsigned int v33 = v32 + 640;
    }
    int v35 = v15[v30 + v33];
    if (!v35) {
      LOBYTE(v35) = v26 + 0x80;
    }
    *int v31 = v35;
LABEL_43:
    uint64_t v36 = v13[v30 + v32];
    if (v36)
    {
      *(unsigned char *)(a1 + v26 + 640) = v36;
      *(unsigned char *)(v20 + v36) = v26 + 0x80;
    }
    *(void *)(a1 + 2048 + 8 * v26) = *((void *)v9 + 1);
    ++v27;
    ++v26;
    v9 += 16;
  }
  while (v26 != 128);
  *(_DWORD *)(a1 + 3072) = 0;
  int v37 = *v6;
  if (*v6 != -1)
  {
    int v38 = 0;
    uint64_t v56 = v10;
    do
    {
      uint64_t v39 = v10[v37];
      if (v39)
      {
        *(unsigned char *)(v57 + 28 * v3_Block_object_dispose(&STACK[0x510], 8) = v39;
        uint64_t v40 = 0x1000000;
        if (!v6[1]) {
          uint64_t v40 = 0x800000;
        }
        *(void *)(v21 + 8 * v39) |= v40;
        uint64_t v41 = (unsigned char *)*((void *)v6 + 1);
        unsigned int v42 = *v41;
        if (*v41)
        {
          unint64_t v43 = 0;
          do
          {
            *(unsigned char *)(a1 + 3084 + 28 * *(int *)(a1 + 3072) + v43) = *(unsigned char *)(v20 + v42);
            unint64_t v44 = v43 + 1;
            if (v43 > 0xD) {
              break;
            }
            unsigned int v42 = *(unsigned __int8 *)(*((void *)v6 + 1) + v43++ + 1);
          }
          while (v42);
          int v38 = *(_DWORD *)(a1 + 3072);
        }
        else
        {
          unint64_t v44 = 0;
        }
        *(unsigned char *)(v57 + 28 * v38 + v44 + _Block_object_dispose(&STACK[0x510], 8) = 0;
        int v45 = *(_DWORD *)(a1 + 3072);
        *(_DWORD *)(v57 + 28 * v45 + 4) = strlen((const char *)(v57 + 28 * v45 + 8));
        int v38 = v45 + 1;
        *(_DWORD *)(a1 + 3072) = v45 + 1;
        unsigned int v10 = v56;
        if (v45 == 15) {
          break;
        }
      }
      int v46 = v6[4];
      v6 += 4;
      int v37 = v46;
    }
    while (v46 != -1);
  }
  free(v13);
  free(v15);
  if (*v55) {
    *(void *)(a1 + 8 * *v55 + 1024) |= 0x400uLL;
  }
  uint64_t v47 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = v47 | 0x200;
  uint64_t v48 = *(void *)(a1 + 1392);
  *(void *)(a1 + 1392) = v48 | 0x200;
  uint64_t v49 = v55[1];
  if (v55[1])
  {
    *(void *)(a1 + 1376) = v47 & 0xFFFFFFFFFFFFFDFFLL;
    *(void *)(a1 + 1392) = v48 & 0xFFFFFFFFFFFFFDFFLL;
    *(void *)(a1 + 8 * v49 + 1024) |= 0x200uLL;
  }
  uint64_t v50 = v55[2];
  if (v55[2] && v50 != 45)
  {
    *(void *)(a1 + 1024 + 8 * *(unsigned __int8 *)(a1 + 813)) &= ~0x2000uLL;
    *(void *)(a1 + 1024 + 8 * v50) |= 0x2000uLL;
    *(unsigned char *)(a1 + v50 + 512) = 16;
    *(unsigned char *)(a1 + 784) = v50;
  }
  uint64_t v51 = v55[4];
  if (v55[4] && v51 != 45)
  {
    *(void *)(a1 + 8 * v51 + 1024) |= 0x1000uLL;
    *(unsigned char *)(a1 + v51 + 512) = 18;
    *(unsigned char *)(a1 + 786) = v51;
  }
  uint64_t v52 = v55[3];
  if (v55[3] && v52 != 45)
  {
    *(void *)(a1 + 1024 + 8 * *(unsigned __int8 *)(a1 + 813)) &= ~0x1000uLL;
    *(void *)(a1 + 1024 + 8 * v52) |= 0x1000uLL;
    *(unsigned char *)(a1 + v52 + 512) = 45;
    *(unsigned char *)(a1 + 813) = v52;
  }
  int v53 = *((_DWORD *)v55 + 2);
  *(_DWORD *)(a1 + 3524) = v53 & 0x1FF;
  if (v53 == 14)
  {
    *(void *)(a1 + 1736) = 19;
    *(void *)(a1 + 1992) = 21;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 352_Block_object_dispose(&STACK[0x510], 8) = *((_DWORD *)v55 + 3);
  return result;
}

uint64_t get_he_language(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3524);
}

uint64_t get_he_codepage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3528);
}

BOOL has_lang_nont(int a1)
{
  return a1 == 14;
}

_DWORD *db_set_file(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t db_init(void *a1, const char *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  BOOL v12 = malloc_type_calloc(0x48uLL, 1uLL, 0xA704E4DFuLL);
  *a1 = v12;
  if (!v12) {
    return 4294966795;
  }
  int v13 = v12;
  *((_OWORD *)v12 + 1) = 0u;
  int v14 = v12 + 2;
  *((_OWORD *)v12 + 2) = 0u;
  __int16 v15 = v12 + 4;
  *((_DWORD *)v12 + 16) = a5;
  *((_DWORD *)v12 + 17) = a6;
  v12[1] = a3;
  uint64_t v16 = f_open(a2, 1);
  if (!v16) {
    return 4294967094;
  }
  uint64_t v17 = v16;
  BOOL v78 = a2;
  uint64_t v79 = v14;
  f_seek(v16, a4, 0);
  if (fgetl_lsb1st(v17, v15) == -1
    || fgetl_lsb1st(v17, v13 + 7) == -1
    || (int v18 = (unsigned int *)(v14 + 3), fgetl_lsb1st(v17, v79 + 3) == -1)
    || (uint64_t v19 = v13 + 6, fgetl_lsb1st(v17, v13 + 6) == -1))
  {
    f_close(v17);
    return 4294967092;
  }
  uint64_t v20 = malloc_type_calloc(*((_DWORD *)v13 + 14) + *((_DWORD *)v13 + 14) * *v19 + 33, 1uLL, 0x7F0EFB4BuLL);
  if (!v20) {
    goto LABEL_38;
  }
  uint64_t v21 = v20;
  int v22 = (char *)malloc_type_calloc(32 * (int)v13[4], 1uLL, 0x71F23F2uLL);
  v13[3] = v22;
  int v80 = v22;
  if (!v22)
  {
    free(v21);
LABEL_38:
    f_close(v17);
    return 4294966795;
  }
  int v72 = v21;
  if (*(int *)v15 < 1)
  {
    char v36 = 0;
    unsigned int v71 = 0;
  }
  else
  {
    uint64_t v23 = 0;
    while (2)
    {
      int v73 = &v80[32 * v23];
      *(void *)int v73 = 0;
      uint64_t v24 = v21;
      do
      {
        if ((*(unsigned char *)(v17 + 8) & 0x10) != 0) {
          int v25 = f_getc_txt(v17);
        }
        else {
          int v25 = f_getc_bin(v17);
        }
        if (v25 == -1) {
          goto LABEL_35;
        }
        *v24++ = (16 * (v25 ^ 0x5C)) | ((v25 ^ 0x5Cu) >> 4);
      }
      while (__PAIR16__((16 * (v25 ^ 0x5Cu)) >> 24, 16 * (v25 ^ 0x5C)));
      uint64_t v76 = v23;
      uint64_t v26 = &v80[32 * v23];
      if (fgetl_lsb1st(v17, (uint64_t *)v26 + 1) == -1) {
        goto LABEL_35;
      }
      uint64_t v70 = (__int16 *)(v26 + 16);
      if (fgetw_lsb1st(v17, (_WORD *)v26 + 8) == -1) {
        goto LABEL_35;
      }
      uint64_t v27 = v76;
      if (fgetw_lsb1st(v17, &v80[32 * v76 + 18]) == -1) {
        goto LABEL_35;
      }
      int v28 = *v70;
      if (v28 >= 1)
      {
        int v29 = 0;
        uint64_t v30 = *(void *)v19;
        while ((v30 & 0x80000000) != 0)
        {
LABEL_30:
          if (++v29 >= (__int16)v28) {
            goto LABEL_31;
          }
        }
        int v31 = -1;
        while (1)
        {
          int v32 = (*(unsigned char *)(v17 + 8) & 0x10) != 0 ? f_getc_txt(v17) : f_getc_bin(v17);
          if (v32 == -1) {
            break;
          }
          *v24++ = v32;
          uint64_t v30 = *(void *)v19;
          if (++v31 >= (int)*(void *)v19)
          {
            LOWORD(v2_Block_object_dispose(&STACK[0x510], 8) = *v70;
            uint64_t v27 = v76;
            goto LABEL_30;
          }
        }
LABEL_35:
        int v38 = -204;
LABEL_36:
        unsigned int v71 = v38;
        char v36 = 1;
        break;
      }
LABEL_31:
      uint64_t v21 = v72;
      int v33 = v24 - v72;
      size_t v34 = (int)v24 - (int)v72;
      int v35 = malloc_type_calloc(v33, 1uLL, 0xDB3F85FCuLL);
      *(void *)int v73 = v35;
      if (!v35)
      {
        int v38 = -501;
        goto LABEL_36;
      }
      memcpy(v35, v72, v34);
      char v36 = 0;
      unsigned int v71 = 0;
      uint64_t v23 = v27 + 1;
      if (v23 < *(int *)v15) {
        continue;
      }
      break;
    }
  }
  uint64_t v68 = v13;
  char v69 = v36;
  int v66 = a3;
  int v67 = v18;
  *(void *)(v80 + 20) = -1;
  if ((int)*v15 > 1)
  {
    uint64_t v75 = v17;
    uint64_t v77 = *v15;
    uint64_t v39 = 1;
    do
    {
      uint64_t v40 = (unsigned __int8 **)&v80[32 * v39];
      if (*((unsigned __int16 *)v40 + 8) == *((unsigned __int16 *)v40 + 9))
      {
        *(unsigned __int8 **)((char *)v40 + 20) = (unsigned __int8 *)-1;
      }
      else
      {
        uint64_t v74 = (_DWORD *)v40 + 5;
        unsigned int v42 = *v40;
        uint64_t v41 = (int *)(v40 + 3);
        unint64_t v44 = v42 + 1;
        int v43 = *v42;
        uint64_t v45 = v39;
        do
        {
          LODWORD(v46) = 0;
          uint64_t v47 = (v45 - 1);
          uint64_t v48 = *(unsigned __int8 **)&v80[32 * v47];
          if (v43 && v43 == *v48)
          {
            uint64_t v46 = 0;
            do
            {
              int v49 = v44[v46];
              int v50 = v48[++v46];
              if (v49) {
                BOOL v51 = v49 == v50;
              }
              else {
                BOOL v51 = 0;
              }
            }
            while (v51);
          }
          int v52 = strlen(*(const char **)&v80[32 * v47]);
          int v53 = *(__int16 *)&v80[32 * v47 + 16];
          while (1)
          {
            BOOL v54 = __OFSUB__(v53--, 1);
            if (v53 < 0 != v54) {
              break;
            }
            if ((int)v46 >= v48[v52 + 1 + v53 + v53 * *v19])
            {
              *uint64_t v74 = v45 - 1;
              *uint64_t v41 = v53;
              uint64_t v17 = v75;
              goto LABEL_59;
            }
          }
          BOOL v55 = v45-- <= 1;
          uint64_t v17 = v75;
        }
        while (!v55);
      }
LABEL_59:
      ++v39;
    }
    while (v39 != v77);
  }
  free(v72);
  f_close(v17);
  uint64_t v37 = v71;
  if ((v69 & 1) == 0)
  {
    int v56 = *((_DWORD *)v68 + 16);
    int v57 = *((_DWORD *)v68 + 8);
    if (!v56 || v56 > v57)
    {
      *((_DWORD *)v68 + 16) = v57;
      int v56 = v57;
    }
    int v58 = malloc_type_calloc(16 * v56, 1uLL, 0xD2563ABCuLL);
    *uint64_t v79 = v58;
    if (v58)
    {
      int v59 = open(v78, 0, 511);
      if (v59 != -1)
      {
        int v60 = v59;
        if (lseek(v59, v66, 0) == -1) {
          return 4294967090;
        }
        if (*((int *)v68 + 16) < 1)
        {
LABEL_76:
          uint64_t v37 = 0;
        }
        else
        {
          uint64_t v61 = 0;
          uint64_t v62 = (int *)(v68[2] + 8);
          while (1)
          {
            if (*((_DWORD *)v68 + 17)) {
              int v63 = v61;
            }
            else {
              int v63 = -1;
            }
            *uint64_t v62 = v63;
            uint64_t v64 = malloc_type_calloc(*((int *)v68 + 10), 1uLL, 0x89D1548BuLL);
            *((void *)v62 - 1) = v64;
            if (!v64)
            {
              uint64_t v37 = 4294966795;
              goto LABEL_82;
            }
            if (*((_DWORD *)v68 + 17) && read(v60, v64, *v67) == -1) {
              break;
            }
            ++v61;
            v62 += 4;
            if (v61 >= *((int *)v68 + 16)) {
              goto LABEL_76;
            }
          }
          uint64_t v37 = 4294967092;
        }
LABEL_82:
        close(v60);
        return v37;
      }
      return 4294967094;
    }
    return 4294966795;
  }
  return v37;
}

void db_finish(int *a1)
{
  if (a1)
  {
    int v2 = (void **)*((void *)a1 + 2);
    if (v2 && a1[16] >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        if (!*v2) {
          break;
        }
        free(*v2);
        ++v3;
        v2 += 2;
      }
      while (v3 < a1[16]);
    }
    uint64_t v4 = (void **)*((void *)a1 + 3);
    if (v4)
    {
      if (a1[8] >= 1)
      {
        uint64_t v5 = 0;
        do
        {
          if (!*v4) {
            break;
          }
          free(*v4);
          ++v5;
          v4 += 4;
        }
        while (v5 < a1[8]);
        uint64_t v4 = (void **)*((void *)a1 + 3);
      }
      free(v4);
    }
    unsigned int v6 = (void *)*((void *)a1 + 2);
    if (v6) {
      free(v6);
    }
    free(a1);
  }
}

uint64_t db_search(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 32);
  int v7 = v6 - 1;
  if (v6 >= 1)
  {
    int v8 = 0;
    do
    {
      if (v7 + v8 < 0 != __OFADD__(v7, v8)) {
        int v9 = v7 + v8 + 1;
      }
      else {
        int v9 = v7 + v8;
      }
      int v10 = v9 >> 1;
      int v11 = SLstrcmp(a2, *(unsigned __int8 **)(v5 + 32 * (v9 >> 1)));
      if (v11 < 0)
      {
        int v7 = v10 - 1;
      }
      else
      {
        if (!v11)
        {
          uint64_t v12 = (uint64_t)v9 >> 1;
          int v7 = v9 >> 1;
          goto LABEL_15;
        }
        int v8 = v10 + 1;
      }
    }
    while (v7 >= v8);
  }
  if (v7 == -1) {
    return 0;
  }
  uint64_t v12 = v7;
LABEL_15:
  LODWORD(v14) = 0;
  uint64_t v15 = v5 + 32 * v12;
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(const char **)v15;
  if (*a2 && *a2 == *v17)
  {
    uint64_t v14 = 0;
    do
    {
      int v18 = a2[v14 + 1];
      int v19 = v17[++v14];
      if (v18) {
        BOOL v20 = v18 == v19;
      }
      else {
        BOOL v20 = 0;
      }
    }
    while (v20);
  }
  BOOL v55 = a2;
  uint64_t v56 = a1;
  uint64_t v53 = *(void *)(v15 + 8);
  int v54 = v7 % *(_DWORD *)(a1 + 64);
  int v21 = *(__int16 *)(v15 + 18);
  uint64_t v52 = *(void *)(a1 + 48);
  if (v21 < 1)
  {
    uint64_t v60 = 0;
  }
  else
  {
    int v22 = (unsigned __int16)v21 - 1;
    int v23 = *(__int16 *)(v5 + 32 * v12 + 16);
    int v24 = strlen(v17);
    int v59 = v17;
    uint64_t v60 = 0;
    size_t v25 = (size_t)&v17[v24 + 1];
    uint64_t v57 = (int)v16 + 1;
    int v26 = v16 + 1;
    uint64_t v27 = v17 + 1;
    LODWORD(v16) = v24;
    LODWORD(v2_Block_object_dispose(&STACK[0x510], 8) = v7;
    do
    {
      if (v23 <= 0)
      {
        uint64_t v29 = v5 + 32 * (int)v28;
        uint64_t v28 = *(int *)(v29 + 20);
        uint64_t v30 = *(unsigned char **)(v5 + 32 * v28);
        if (*v30) {
          BOOL v31 = *v30 == *v59;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31)
        {
          uint64_t v16 = 0;
          do
          {
            int v32 = v30[v16 + 1];
            int v33 = v27[v16++];
            if (v32) {
              BOOL v34 = v32 == v33;
            }
            else {
              BOOL v34 = 0;
            }
          }
          while (v34);
        }
        else
        {
          LODWORD(v16) = 0;
        }
        int v23 = *(_DWORD *)(v29 + 24);
        size_t v25 = (size_t)&v30[strlen(*(const char **)(v5 + 32 * v28)) + 1];
      }
      else
      {
        --v23;
      }
      int v35 = (char *)(v25 + v23 * v26);
      int v36 = (unsigned __int16)*v35;
      if (v36 <= (int)v16)
      {
        if (v36 <= (int)v14)
        {
          if (v22 >= (int)v60) {
            uint64_t v37 = (v22 + 1);
          }
          else {
            uint64_t v37 = v60;
          }
          uint64_t v60 = v37;
          memcpy((void *)(a3 + v22 * v57), v35, (int)v57);
        }
        --v22;
      }
    }
    while ((v22 & 0x80000000) == 0);
  }
  uint64_t v38 = *(void *)(v56 + 16) + 16 * v54;
  uint64_t v39 = *(unsigned __int8 **)v38;
  int v41 = *(_DWORD *)(v38 + 8);
  uint64_t v40 = (int *)(v38 + 8);
  if (v7 != v41)
  {
    *uint64_t v40 = -1;
    if (lseek(*(_DWORD *)v56, *(int *)(v56 + 8) + v53, 0) == -1) {
      return 4294967090;
    }
    if (read(*(_DWORD *)v56, v39, *(unsigned int *)(v56 + 40)) == -1) {
      return 4294967092;
    }
    *uint64_t v40 = v7;
  }
  uint64_t v42 = *(void *)(v56 + 40);
  if (v42 << 32 >= 1)
  {
    int v43 = &v39[(int)v42];
    if ((int)v14 >= v39[1]) {
      LODWORD(v14) = v39[1];
    }
    int v44 = v14;
    uint64_t v13 = v60;
    while (1)
    {
      uint64_t v45 = *v39;
      if (v45 == 255) {
        return v13;
      }
      uint64_t v46 = v39[1];
      if ((int)v14 > (int)v46) {
        return v13;
      }
      uint64_t v47 = v39 + 2;
      if (v44 >= (int)v46) {
        break;
      }
      uint64_t v39 = &v47[(int)v45 + (int)v52 - (int)v46];
LABEL_73:
      if (v39 >= v43) {
        return v13;
      }
    }
    if (v46 >= v45)
    {
LABEL_67:
      if ((int)v46 > (int)v14) {
        LODWORD(v14) = v46;
      }
      if (v46 != v45)
      {
LABEL_72:
        uint64_t v39 = &v47[(int)v52];
        int v44 = v46;
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v48 = 0;
      int v49 = v39[1];
      do
      {
        if (v55[v46 + v48] != (((v47[v48] ^ 0x5C) >> 4) | (16 * (v47[v48] ^ 0x5C))))
        {
          LODWORD(v46) = v46 + v48;
          uint64_t v47 = &v39[v45 - v49 + 2 + v48];
          goto LABEL_67;
        }
        ++v48;
        ++v49;
      }
      while (v46 - v45 + v48);
      if ((int)v45 > (int)v14) {
        LODWORD(v14) = *v39;
      }
      v47 += v48;
      LODWORD(v46) = *v39;
    }
    if (v13 == *(_DWORD *)(v56 + 56)) {
      return 4294966776;
    }
    uint64_t v50 = (int)v13 * ((int)v52 + 1);
    *(unsigned char *)(a3 + v50) = v45;
    memcpy((void *)(a3 + (int)v50 + 1), v47, (int)v52);
    uint64_t v13 = (v13 + 1);
    goto LABEL_72;
  }
  return v60;
}

uint64_t db_get_embmax(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t db_get_infosize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t mt_init(void *a1, void *a2, const char *a3, uint64_t a4)
{
  *a1 = 0;
  *a2 = 0;
  uint64_t v7 = f_open(a3, 1);
  if (!v7) {
    return 4294966994;
  }
  uint64_t v8 = v7;
  if (f_seek(v7, a4, 0) == -1)
  {
    uint64_t v27 = 4294966990;
  }
  else
  {
    char v9 = 1;
    do
    {
      if (v9) {
        int v10 = a1;
      }
      else {
        int v10 = a2;
      }
      if ((*(unsigned char *)(v8 + 8) & 0x10) != 0) {
        int v11 = f_getc_txt(v8);
      }
      else {
        int v11 = f_getc_bin(v8);
      }
      int v12 = v11;
      if (v11 == -1
        || ((*(unsigned char *)(v8 + 8) & 0x10) != 0 ? (int v13 = f_getc_txt(v8)) : (int v13 = f_getc_bin(v8)),
            (int v14 = v13, v13 == -1)
         || ((*(unsigned char *)(v8 + 8) & 0x10) != 0 ? (int v15 = f_getc_txt(v8)) : (int v15 = f_getc_bin(v8)),
             (int v16 = v15, v15 == -1)
          || ((*(unsigned char *)(v8 + 8) & 0x10) != 0 ? (v17 = f_getc_txt(v8)) : (v17 = f_getc_bin(v8)), char v18 = v17, v17 == -1))))
      {
        uint64_t v27 = 4294966992;
        goto LABEL_34;
      }
      int v19 = v14 - v12 + 1 + (v14 - v12 + 1) * (v17 - v16);
      int v21 = v19 + 7;
      BOOL v20 = v19 < -7;
      int v22 = v19 + 14;
      if (!v20) {
        int v22 = v21;
      }
      uint64_t v23 = (uint64_t)v22 >> 3;
      int v24 = malloc_type_calloc(v23 + 4, 1uLL, 0xFCCACF08uLL);
      *int v10 = v24;
      if (!v24)
      {
        uint64_t v27 = 4294965495;
        goto LABEL_34;
      }
      *int v24 = v12;
      v24[1] = v14;
      v24[2] = v16;
      v24[3] = v18;
      int v25 = f_read(v24 + 4, v23, 1, v8);
      char v26 = (v25 == 1) & v9;
      char v9 = 0;
    }
    while ((v26 & 1) != 0);
    if (v25 == 1) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = 4294966992;
    }
  }
LABEL_34:
  f_close(v8);
  return v27;
}

void mt_finish(void *a1, void *a2)
{
  if (a1) {
    free(a1);
  }
  if (a2)
  {
    free(a2);
  }
}

uint64_t mt_match(char *a1, int a2, int a3)
{
  int v3 = *a1;
  if (v3 > a2) {
    return 0;
  }
  int v4 = a1[1];
  if (v4 < a2) {
    return 0;
  }
  int v5 = a1[2];
  if (v5 > a3 || a1[3] < a3) {
    return 0;
  }
  int v7 = a2 - v3;
  int v8 = a3 - v5 + (a3 - v5) * (v4 - v3);
  BOOL v9 = __OFADD__(v8, v7);
  int v10 = v8 + v7;
  int v11 = v10 + 7;
  if (v10 < 0 == v9) {
    int v11 = v10;
  }
  return (a1[(v11 >> 3) + 4] >> (v10 & 7)) & 1;
}

uint64_t roman2int(unsigned __int8 *a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  do
  {
    v2 += fsa[10 * v1 + 9];
    if (v2 > 10999) {
      return 0xFFFFFFFFLL;
    }
    int v3 = *a1;
    if (v3 == 46)
    {
      LOBYTE(v3) = a1[1] ? 46 : 0;
      if (!a1[1]) {
        ++a1;
      }
    }
    if ((char)v3 > 85)
    {
      if ((char)v3 == 86)
      {
        uint64_t v5 = 5;
      }
      else if ((char)v3 == 88)
      {
        uint64_t v5 = 4;
      }
      else
      {
LABEL_16:
        uint64_t v5 = 8;
      }
    }
    else
    {
      int v4 = (char)v3 - 67;
      uint64_t v5 = 0;
      switch(v4)
      {
        case 0:
          uint64_t v5 = 2;
          break;
        case 1:
          uint64_t v5 = 1;
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
          goto LABEL_16;
        case 6:
          uint64_t v5 = 6;
          break;
        case 9:
          uint64_t v5 = 3;
          break;
        case 10:
          break;
        default:
          uint64_t v5 = 7;
          break;
      }
    }
    ++a1;
    uint64_t v1 = fsa[10 * v1 + v5];
  }
  while ((int)v1 > 0);
  if (v1 == 0xFFFFFFFFLL) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2;
  }
}

uint64_t spell_init(void *a1, uint64_t a2, const char *a3, long long *a4)
{
  long long v13 = *a4;
  uint64_t v14 = *((void *)a4 + 2);
  int v7 = malloc_type_calloc(0x18uLL, 1uLL, 0x40CCC7CDuLL);
  *a1 = v7;
  if (!v7) {
    return 4294966495;
  }
  int v8 = v7;
  *int v7 = a2;
  v7[2] = 0;
  v7[1] = 0;
  BOOL v9 = v7 + 1;
  int he_language = get_he_language(a2);
  uint64_t result = an_init(v9, a3, (int *)&v13, he_language);
  if ((result & 0x80000000) == 0)
  {
    int v12 = freq_init(v8 + 2, a2);
    return v12 & (v12 >> 31);
  }
  return result;
}

uint64_t spell_finish(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[1];
    if (v2) {
      an_finish(v2);
    }
    int v3 = (void *)a1[2];
    if (v3) {
      freq_finish(v3);
    }
    free(a1);
  }
  return 0;
}

uint64_t spell_check(uint64_t a1, uint64_t *a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  LODWORD(v2) = *((_DWORD *)a2 + 6);
  if ((int)v2 > 64) {
    return 4294966486;
  }
  uint64_t v5 = (uint64_t *)a1;
  uint64_t v6 = *(void *)a1;
  unsigned int v7 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + _Block_object_dispose(&STACK[0x510], 8) = 0;
  *((_DWORD *)a2 + 9) = v2;
  uint64_t v8 = *a2;
  if (a2[1]) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v7 & 0xFFFFFFFB;
  }
  if ((v9 & 4) != 0 && (int)v2 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      *(unsigned char *)(a2[1] + v10++) = 32;
      uint64_t v2 = *((int *)a2 + 9);
    }
    while (v10 < v2);
    unsigned int v7 = *((_DWORD *)a2 + 7);
  }
  *((_DWORD *)a2 + 14) = 0;
  if (v7)
  {
    char v11 = *(unsigned char *)(v8 + (int)v2);
    *(unsigned char *)(v8 + (int)v2) = 0;
    int v12 = is_frequent_word(*(int **)(a1 + 16), (unsigned char *)(v8 + *((int *)a2 + 8)));
    *(unsigned char *)(v8 + *((int *)a2 + 9)) = v11;
    if (v12 > 0) {
      return 1;
    }
    LODWORD(v2) = *((_DWORD *)a2 + 9);
  }
  int v13 = *((_DWORD *)a2 + 8);
  if (v13 >= (int)v2)
  {
LABEL_136:
    int v45 = 1;
    uint64_t v3 = 1;
    goto LABEL_137;
  }
  int v81 = v9;
  int v14 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  int v19 = (unsigned __int8 *)&v84;
  uint64_t v20 = v6 + 1024;
  uint64_t v82 = v6;
  uint64_t v21 = v6 + 512;
  int v22 = (unsigned __int8 *)(v8 + v13);
  uint64_t v23 = (int)v2 - (uint64_t)v13;
  unsigned int v24 = 1;
  while (2)
  {
    unsigned int v25 = *v22++;
    uint64_t v26 = *(void *)(v20 + 8 * v25);
    __src[v14] = v13;
    switch(v24)
    {
      case 0u:
        goto LABEL_82;
      case 1u:
        if (v26) {
          goto LABEL_108;
        }
        if ((v26 & 0x1000) != 0)
        {
          if ((*(void *)(v20 + 8 * *(unsigned __int8 *)(v82 + 813)) & 0x2000) != 0) {
            unsigned int v24 = 7;
          }
          else {
            unsigned int v24 = 4;
          }
          goto LABEL_109;
        }
        if ((v26 & 0x6000) != 0)
        {
          unsigned int v24 = 8;
          goto LABEL_109;
        }
        if ((v26 & 0x20) != 0) {
          goto LABEL_55;
        }
        if ((v26 & 0x400000) != 0) {
          goto LABEL_67;
        }
        if ((v26 & 0x1800000) != 0) {
          goto LABEL_112;
        }
        if ((v26 & 0x200) != 0) {
          goto LABEL_90;
        }
        if ((v26 & 0xE00) != 0) {
          unsigned int v24 = 7;
        }
        else {
          unsigned int v24 = 0;
        }
        goto LABEL_109;
      case 2u:
        if (v26) {
          goto LABEL_108;
        }
        if ((v26 & 0x20) != 0) {
          goto LABEL_55;
        }
        if ((v26 & 0x100) != 0) {
          goto LABEL_90;
        }
        if ((v26 & 0x2000000) != 0)
        {
LABEL_57:
          unsigned int v24 = 12;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0) {
          goto LABEL_65;
        }
        if ((v26 & 0x1000) != 0)
        {
LABEL_66:
          uint64_t v17 = 1;
LABEL_67:
          unsigned int v24 = 4;
          goto LABEL_109;
        }
        if ((v26 & 0x428800) != 0) {
          goto LABEL_67;
        }
        if ((v26 & 0x80000) == 0 || (v26 & 0x600000) == 0) {
          unsigned int v24 = 0;
        }
        else {
          unsigned int v24 = 10;
        }
LABEL_109:
        ++v14;
LABEL_110:
        ++v13;
        if (--v23) {
          continue;
        }
        if (!v18) {
          goto LABEL_136;
        }
        if (v24 == 9 || !v24)
        {
          *((_DWORD *)a2 + 14) = 2;
          goto LABEL_117;
        }
        a2[5] = 0;
        a2[6] = 0;
        if (v14 < 1)
        {
          char v84 = 0;
          uint64_t v53 = v82;
          int v60 = v81;
          goto LABEL_171;
        }
        int v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = v14;
        uint64_t v53 = v82;
        break;
      case 3u:
        if ((v26 & 0x1000) != 0) {
          goto LABEL_66;
        }
        goto LABEL_59;
      case 4u:
        if ((v26 & 1) == 0)
        {
          if ((v26 & 0x40) != 0) {
            goto LABEL_65;
          }
          if ((v26 & 0x20) != 0) {
            unsigned int v24 = 5;
          }
          else {
            unsigned int v24 = 0;
          }
          goto LABEL_109;
        }
        unsigned int v24 = 2;
        if (!v17 || v15 || v18)
        {
          int v18 = 1;
          goto LABEL_109;
        }
        if (v14 < 1)
        {
          int v14 = 0;
        }
        else
        {
          uint64_t v79 = v5;
          uint64_t v80 = v8;
          uint64_t v29 = v19;
          uint64_t v30 = v21;
          uint64_t v31 = v17;
          uint64_t v32 = v16;
          memcpy(__dst, __src, 4 * v14);
          uint64_t v16 = v32;
          uint64_t v17 = v31;
          uint64_t v21 = v30;
          int v19 = v29;
          uint64_t v5 = v79;
          uint64_t v8 = v80;
        }
        __src[0] = v13;
        int v18 = 1;
        unsigned int v24 = 2;
        int v15 = v14;
        int v14 = 1;
        goto LABEL_110;
      case 5u:
        if ((v26 & 0x20) != 0) {
          goto LABEL_55;
        }
        if ((v26 & 0x1000) != 0) {
          goto LABEL_66;
        }
        if ((v26 & 0x100) != 0)
        {
          uint64_t v16 = 1;
LABEL_90:
          unsigned int v24 = 6;
          goto LABEL_109;
        }
        if ((v26 & 0xE00) != 0)
        {
          unsigned int v24 = 7;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0) {
          goto LABEL_65;
        }
        if ((v26 & 0x1000000) != 0)
        {
LABEL_112:
          unsigned int v24 = 3;
        }
        else
        {
          if (v26) {
            goto LABEL_108;
          }
          unsigned int v24 = (v26 >> 20) & 4;
        }
        goto LABEL_109;
      case 6u:
        if ((v26 & 0x100) != 0)
        {
          unsigned int v24 = 9;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0) {
          goto LABEL_65;
        }
        if ((v26 & 0x1000) != 0)
        {
          if (v16) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = v17;
          }
          unsigned int v24 = 4;
          ++v14;
          uint64_t v16 = 0;
          goto LABEL_110;
        }
        if (v26)
        {
LABEL_108:
          int v18 = 1;
          unsigned int v24 = 2;
        }
        else
        {
          if ((*(void *)(v20 + 8 * *(unsigned __int8 *)(v82 + 814)) & 0x600) == 0) {
            goto LABEL_76;
          }
LABEL_52:
          if ((v26 & 0x20) == 0)
          {
            BOOL v28 = (v26 & 1) == 0;
            unsigned int v24 = 2 * (v26 & 1);
            goto LABEL_83;
          }
LABEL_55:
          unsigned int v24 = 5;
        }
        goto LABEL_109;
      case 7u:
        goto LABEL_52;
      case 8u:
        if ((v26 & 0x20) != 0) {
          goto LABEL_55;
        }
        goto LABEL_82;
      case 9u:
        if ((v26 & 0x100) != 0) {
          goto LABEL_57;
        }
        goto LABEL_82;
      case 0xAu:
        if ((v26 & 0x1000) != 0)
        {
          --v14;
          unsigned int v24 = 4;
          goto LABEL_110;
        }
LABEL_59:
        if ((v26 & 0x40) != 0) {
          goto LABEL_65;
        }
LABEL_82:
        unsigned int v24 = 0;
        BOOL v28 = (v26 & 1) == 0;
LABEL_83:
        if (!v28) {
          int v18 = 1;
        }
        goto LABEL_109;
      case 0xBu:
        if (v26)
        {
          int v18 = 1;
        }
        else if ((v26 & 0x180) == 0x80)
        {
LABEL_65:
          unsigned int v24 = 11;
          goto LABEL_109;
        }
LABEL_76:
        unsigned int v24 = 0;
        goto LABEL_109;
      case 0xCu:
        if ((v26 & 0x140) == 0x40) {
          goto LABEL_65;
        }
        if ((v26 & 0x600000) == 0 || (v26 & 0x80000) == 0) {
          goto LABEL_82;
        }
        unsigned int v24 = 10;
        goto LABEL_109;
      default:
        goto LABEL_109;
    }
    break;
  }
  do
  {
    uint64_t v54 = *(unsigned __int8 *)(v8 + (int)__src[v51]);
    uint64_t v55 = *(void *)(v20 + 8 * v54);
    int v56 = *(unsigned __int8 *)(v21 + v54);
    v19[v51] = v56;
    if (v56 == 18 || v56 == 17)
    {
      v19[v51] = 45;
      if ((v55 & 2) == 0) {
        goto LABEL_146;
      }
    }
    else
    {
      if (!v56) {
        *((_DWORD *)a2 + 10) = ++v50;
      }
      if ((v55 & 2) == 0)
      {
LABEL_146:
        if ((v55 & 4) != 0) {
          *((_DWORD *)a2 + 13) = ++v47;
        }
        goto LABEL_152;
      }
    }
    if (!v51) {
      *((_DWORD *)a2 + 11) = ++v49;
    }
    *((_DWORD *)a2 + 12) = ++v48;
LABEL_152:
    ++v51;
  }
  while (v14 != v51);
  v19[v14] = 0;
  if (v50 > 0)
  {
    uint64_t v3 = 0;
    int v45 = 16;
    goto LABEL_137;
  }
  int v60 = v81;
  if ((v81 & 4) == 0)
  {
LABEL_171:
    if (!v15)
    {
      uint64_t v3 = check_word(v5, v53, v19, (uint64_t)__b, v14, v60);
      goto LABEL_184;
    }
    goto LABEL_172;
  }
  int v61 = v15;
  memset(__b, 32, v14);
  int v15 = v61;
  if (!v61)
  {
    uint64_t v62 = __b;
    uint64_t v3 = check_word(v5, v82, v19, (uint64_t)__b, v14, v81);
    int v63 = __src;
    do
    {
      char v65 = *v62++;
      char v64 = v65;
      uint64_t v66 = *v63++;
      *(unsigned char *)(a2[1] + v66) = v64;
      --v52;
    }
    while (v52);
    goto LABEL_184;
  }
LABEL_172:
  int v67 = *(_DWORD *)(v53 + 3524);
  if (v67 != 21 && v67 != 14) {
    goto LABEL_117;
  }
  if (v15 < 1)
  {
    int v72 = 0;
  }
  else
  {
    uint64_t v68 = v15;
    char v69 = v85;
    uint64_t v70 = (int *)__dst;
    do
    {
      uint64_t v71 = *v70++;
      *v69++ = *(unsigned char *)(v8 + v71);
      --v68;
    }
    while (v68);
    int v72 = v15;
  }
  v85[v72] = 0;
  uint64_t v3 = check_mac((uint64_t)v5, v53, v19, (uint64_t)__b, v14, (uint64_t)v85, v15, v60);
  if ((v60 & 4) != 0 && v14 >= 1)
  {
    uint64_t v73 = v14;
    uint64_t v74 = __src;
    uint64_t v75 = __b;
    do
    {
      char v77 = *v75++;
      char v76 = v77;
      uint64_t v78 = *v74++;
      *(unsigned char *)(a2[1] + v7_Block_object_dispose(&STACK[0x510], 8) = v76;
      --v73;
    }
    while (v73);
  }
LABEL_184:
  if (!v3)
  {
LABEL_117:
    if ((*((unsigned char *)a2 + 28) & 2) == 0) {
      goto LABEL_188;
    }
    uint64_t v34 = *((int *)a2 + 9);
    char v35 = *(unsigned char *)(v8 + v34);
    *(unsigned char *)(v8 + v34) = 0;
    int v36 = roman2int((unsigned __int8 *)(v8 + *((int *)a2 + 8)));
    uint64_t v3 = v36 > 0;
    if (v36 <= 0)
    {
      *(unsigned char *)(v8 + *((int *)a2 + 9)) = v35;
      int v37 = *((_DWORD *)a2 + 9);
      uint64_t v38 = *((int *)a2 + 8);
      if ((int)v38 + 1 < v37 - 1)
      {
        uint64_t v39 = v38 + 1;
        do
        {
          unsigned int v40 = *(unsigned __int8 *)(*a2 + v39);
          BOOL v41 = v40 > 0x2D || ((1 << v40) & 0x200000060000) == 0;
          if (!v41 || v40 == 196)
          {
            char v42 = *(unsigned char *)(v8 + v39);
            *(unsigned char *)(v8 + v39) = 0;
            int v43 = roman2int((unsigned __int8 *)(v8 + *((int *)a2 + 8)));
            *(unsigned char *)(v8 + v39) = v42;
            int v37 = *((_DWORD *)a2 + 9);
            if (v43)
            {
              char v44 = *(unsigned char *)(v8 + v37);
              *(unsigned char *)(v8 + v37) = 0;
              if ((int)roman2int((unsigned __int8 *)(v8 + v39 + 1)) <= 0) {
                uint64_t v3 = v3;
              }
              else {
                uint64_t v3 = (v3 + 1);
              }
              *(unsigned char *)(v8 + *((int *)a2 + 9)) = v44;
              int v37 = *((_DWORD *)a2 + 9);
            }
          }
          ++v39;
        }
        while (v39 < v37 - 1);
      }
    }
    if (!v3)
    {
LABEL_188:
      if (*((_DWORD *)a2 + 14))
      {
        return 0;
      }
      else
      {
        char status = an_get_status(v5[1]);
        if ((status & 4) != 0) {
          int v58 = 128;
        }
        else {
          int v58 = 8;
        }
        if ((status & 2) != 0) {
          int v59 = 64;
        }
        else {
          int v59 = v58;
        }
        if (status) {
          int v45 = 32;
        }
        else {
          int v45 = v59;
        }
        uint64_t v3 = 0;
LABEL_137:
        *((_DWORD *)a2 + 14) = v45;
      }
    }
  }
  return v3;
}

uint64_t check_word(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = (a5 - 2);
  if (a5 >= 2 && *(_DWORD *)(a2 + 3524) == 14)
  {
    uint64_t v13 = (a5 - 1);
    unsigned int v14 = a3[v13];
    BOOL v15 = v14 > 0x2D || ((1 << v14) & 0x200000060000) == 0;
    if (!v15 || v14 == 196)
    {
      uint64_t v16 = check__words((uint64_t)a1, a2, a3, a4, a5 - 1, a6);
      if (v16)
      {
        char v17 = 32;
        goto LABEL_11;
      }
    }
    if (a5 >= 3)
    {
      if ((unsigned int v18 = a3[v12], v18 <= 0x2D) && ((1 << v18) & 0x200000060000) != 0 || v18 == 196)
      {
        if (a3[v13] == 101)
        {
          uint64_t v16 = check__words((uint64_t)a1, a2, a3, a4, v12, a6);
          if (v16)
          {
            char v17 = 32;
            *(unsigned char *)(a4 + v13) = 32;
            uint64_t v13 = v12;
            goto LABEL_11;
          }
        }
      }
    }
  }
  uint64_t v13 = check__words((uint64_t)a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a2 + 3524) == 21 && (a6 & 0x400 | v13) == 0)
  {
    uint64_t v21 = *a1;
    unsigned int v22 = a5 - 3;
    if (a5 < 3)
    {
      uint64_t v13 = 0;
      if (a5 != 2) {
        return v13;
      }
      uint64_t v23 = 1;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v23 = (a5 - 1);
      if (a3[v23] == 105 && a3[v12] == 108)
      {
        uint64_t v16 = check__words((uint64_t)a1, *a1, a3, a4, v12, a6 + 0x4000);
        unsigned int v22 = a5 - 3;
        LODWORD(v13) = v12;
      }
      else
      {
        LODWORD(v13) = 0;
        uint64_t v16 = 0;
      }
    }
    int v24 = a3[v23];
    if (v24 == 152)
    {
      if ((*(void *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v12] + 768) + 1024) & 8) == 0)
      {
LABEL_38:
        int v27 = a5 - 4;
        if (a5 >= 4)
        {
          if (a3[v23] == 121
            && a3[v12] == 109
            && a3[v22] == 152
            && (*(void *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v27] + 768) + 1024) & 8) != 0)
          {
            unsigned int v28 = v22;
            uint64_t v16 = check__words((uint64_t)a1, v21, a3, a4, v22, a6 + 4096);
            unsigned int v22 = v28;
          }
          if (a5 >= 5
            && a3[v23] == 101
            && a3[v12] == 105
            && a3[v22] == 99
            && a3[v27] == 152
            && (*(void *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[a5 - 5] + 768) + 1024) & 8) != 0)
          {
            uint64_t v16 = check__words((uint64_t)a1, v21, a3, a4, a5 - 4, a6 + 4096);
          }
        }
        if (!v16) {
          return 0;
        }
        if (!v13) {
          return v16;
        }
        uint64_t v13 = v13;
        char v17 = 124;
LABEL_11:
        *(unsigned char *)(a4 + v13) = v17;
        return v16;
      }
      unsigned int v25 = v22;
      uint64_t v16 = check__words((uint64_t)a1, v21, a3, a4, v23, a6 + 4096);
      unsigned int v22 = v25;
      int v24 = a3[v23];
    }
    if (v24 == 109
      && (*(void *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v12] + 768) + 1024) & 8) != 0)
    {
      unsigned int v26 = v22;
      uint64_t v16 = check__words((uint64_t)a1, v21, a3, a4, v23, a6 + 4096);
      unsigned int v22 = v26;
    }
    goto LABEL_38;
  }
  return v13;
}

uint64_t check_mac(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  unsigned int v9 = a3;
  uint64_t v121 = *MEMORY[0x263EF8340];
  uint64_t v11 = a7 - 2;
  int v12 = *(unsigned __int8 *)(a6 + v11);
  uint64_t v13 = *(void *)(a2 + 8 * *(unsigned __int8 *)(a6 + v11) + 1024);
  if ((v13 & 0x1800000) != 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = (unsigned __int8 *)(a2 + 3084);
    while (v14 < *(int *)(a2 + 3072))
    {
      if (*(unsigned __int8 *)(a2 + 28 * v14 + 3076) == v12)
      {
        unsigned int v17 = v15;
        uint64_t v18 = *(int *)(a2 + 28 * v14 + 3080);
        uint64_t v19 = *(unsigned int *)(a2 + 28 * v14 + 3080);
        uint64_t v20 = v18;
        if ((int)v18 > 0)
        {
          uint64_t v21 = -v19;
          unsigned int v22 = v16;
          do
          {
            unsigned int v23 = *v22++;
            v9[v21] = *(unsigned char *)(a2 + v23 + 512);
          }
          while (!__CFADD__(v21++, 1));
          uint64_t v20 = v19;
        }
        unsigned int v25 = v9;
        unsigned int v26 = &v9[-v20];
        int v27 = an_analyze(*(void *)(a1 + 8), v26, (int)v19 + a5, a8, (uint64_t)v120, 1);
        BOOL v28 = v27 == 0;
        if (v27) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v17;
        }
        if (v27) {
          BOOL v29 = (a8 & 4) == 0;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          uint64_t v39 = a4 - v20;
          uint64_t v40 = a1;
          uint64_t v41 = a2;
          char v42 = v26;
          uint64_t v43 = v18;
          goto LABEL_37;
        }
        unsigned int v9 = v25;
      }
      else
      {
        BOOL v28 = 1;
      }
      ++v14;
      v16 += 28;
      if (!v28) {
        return v15;
      }
    }
    return v15;
  }
  int v30 = *(_DWORD *)(a2 + 3524);
  if (v30 == 14)
  {
    unsigned int v31 = a7 - 1;
    unint64_t v32 = *(void *)(a2 + 8 * *(unsigned __int8 *)(a6 + v11) + 1024) & 0x100;
    if ((v13 & 0x100) != 0) {
      uint64_t v11 = v11;
    }
    else {
      uint64_t v11 = v31;
    }
    unint64_t v33 = v32 >> 8;
    if ((int)v11 < 1)
    {
      uint64_t v38 = 0;
      char v45 = 0;
      uint64_t v46 = 0;
      int v47 = 0;
      int v48 = "nulladik";
      int v49 = "null\xA0";
      char v50 = 1;
      BOOL v51 = 1;
LABEL_91:
      char v53 = 1;
      uint64_t v54 = "nulla";
LABEL_92:
      if (v33 == 1)
      {
        uint64_t v15 = 0;
        int v66 = 0;
        LODWORD(v33) = 1;
        goto LABEL_117;
      }
      char v101 = v53;
      uint64_t v102 = v47;
      BOOL v103 = v51;
      int v105 = v46;
      char v110 = v50;
      __sa = (char *)v38;
      int v107 = v33;
      int v67 = strlen(v54);
      uint64_t v68 = (v67 - is_small_digraph_hun((uint64_t)v54, v67, a3, a5));
      memcpy(&a3[-(int)v68], v54, (int)v68);
      int v69 = an_analyze(*(void *)(a1 + 8), &a3[-(int)v68], (int)v68 + a5, 2048, (uint64_t)v120, 1);
      if (!v69)
      {
        if (v45)
        {
          uint64_t v15 = 0;
          int v66 = 0;
          BOOL v57 = 1;
        }
        else
        {
          int v70 = strlen(v49);
          uint64_t v71 = (v70 - is_small_digraph_hun((uint64_t)v49, v70, a3, a5));
          memcpy(&a3[-(int)v71], v49, (int)v71);
          BOOL v57 = 1;
          if (an_analyze(*(void *)(a1 + 8), &a3[-(int)v71], (int)v71 + a5, 2048, (uint64_t)v120, 1))
          {
            if ((a8 & 4) != 0)
            {
              uint64_t v44 = segm_word(a1, a2, &a3[-(int)v71], a4 - (int)v71, v120, 0, v71);
              char v50 = v110;
              unsigned int v9 = a3;
              if ((v44 & 0x80000000) != 0) {
                return v44;
              }
              uint64_t v15 = 1;
              int v66 = 1;
              LODWORD(v33) = v107;
              uint64_t v38 = __sa;
              goto LABEL_164;
            }
            uint64_t v15 = 1;
            int v66 = 1;
            LODWORD(v33) = v107;
            uint64_t v38 = __sa;
            char v50 = v110;
LABEL_163:
            unsigned int v9 = a3;
LABEL_164:
            if ((v50 & 1) != 0 || v33 != 2 || v66) {
              goto LABEL_173;
            }
            uint64_t v88 = v15;
            char v89 = v38;
            int v90 = strlen(v38);
            uint64_t v91 = (uint64_t)v89;
            int v92 = v90;
            goto LABEL_168;
          }
          uint64_t v15 = 0;
          int v66 = 0;
        }
        uint64_t v46 = v105;
        LODWORD(v33) = v107;
        uint64_t v38 = __sa;
        BOOL v51 = v103;
        uint64_t v55 = v102;
        char v58 = v101;
LABEL_108:
        BOOL v72 = v57 && v66 == 0;
        if (v72) {
          int v66 = 0;
        }
        if ((v58 & 1) != 0 || !v72)
        {
          char v50 = v110;
        }
        else
        {
          int v73 = v33;
          unsigned int v108 = v15;
          BOOL v104 = v51;
          int v106 = v46;
          __sb = (char *)v38;
          int v74 = strlen(v55);
          uint64_t v75 = (v74 - is_small_digraph_hun((uint64_t)v55, v74, a3, a5));
          memcpy(&a3[-(int)v75], v55, (int)v75);
          int v76 = an_analyze(*(void *)(a1 + 8), &a3[-(int)v75], (int)v75 + a5, 2048, (uint64_t)v120, 1);
          if (v76)
          {
            int v77 = v76;
            if ((a8 & 4) != 0)
            {
              uint64_t v44 = segm_word(a1, a2, &a3[-(int)v75], a4 - (int)v75, v120, 0, v75);
              uint64_t v38 = __sb;
              if ((v44 & 0x80000000) != 0) {
                return v44;
              }
              uint64_t v15 = 1;
              char v50 = v110;
            }
            else
            {
              uint64_t v15 = 1;
              char v50 = v110;
              uint64_t v38 = __sb;
            }
            LODWORD(v33) = v73;
            goto LABEL_157;
          }
          int v66 = 0;
          char v50 = v110;
          uint64_t v46 = v106;
          uint64_t v38 = __sb;
          BOOL v51 = v104;
          uint64_t v15 = v108;
          LODWORD(v33) = v73;
        }
LABEL_117:
        if (v33 > 1 || v66)
        {
          BOOL v86 = v33 == 3 && v66 == 0;
          char v87 = !v86 || v51;
          if (v86) {
            int v66 = 0;
          }
          if ((v87 & 1) == 0)
          {
            uint64_t v88 = v15;
            char v89 = v46;
            int v90 = strlen(v46);
            uint64_t v91 = (uint64_t)v89;
            int v92 = v90;
            unsigned int v9 = a3;
LABEL_168:
            uint64_t v97 = (v90 - is_small_digraph_hun(v91, v92, v9, a5));
            memcpy(&v9[-(int)v97], v89, (int)v97);
            if (!an_analyze(*(void *)(a1 + 8), &v9[-(int)v97], (int)v97 + a5, 2048, (uint64_t)v120, 1))
            {
              uint64_t v15 = v88;
              goto LABEL_173;
            }
            if ((a8 & 4) == 0
              || (uint64_t v44 = segm_word(a1, a2, &v9[-(int)v97], a4 - (int)v97, v120, 0, v97), (v44 & 0x80000000) == 0))
            {
              uint64_t v15 = 1;
LABEL_173:
              int v30 = *(_DWORD *)(a2 + 3524);
              goto LABEL_174;
            }
            return v44;
          }
          goto LABEL_163;
        }
        if (v48)
        {
          if (v33 == 1) {
            goto LABEL_151;
          }
          uint64_t v79 = a3 + 1;
          int v78 = *a3;
          if (v78 != 106) {
            uint64_t v79 = a3;
          }
          int v80 = *v79;
          if (*v79)
          {
            BOOL v29 = v78 == 106;
            uint64_t v81 = 1;
            if (v29) {
              uint64_t v81 = 2;
            }
            if (a3[v81]
              && (uint64_t v82 = v38,
                  uint64_t v83 = v15,
                  int v84 = v33,
                  int v85 = memchr("aeiou\xA0\x82\xA1\xA2\x94\x93\xA3\x81\x96", (char)a3[v81], 0xFuLL),
                  LODWORD(v33) = v84,
                  uint64_t v15 = v83,
                  uint64_t v38 = v82,
                  !v85))
            {
              int v77 = 0;
              if ((v80 - 105) > 0x37 || ((1 << (v80 - 105)) & 0x80000002000001) == 0) {
                goto LABEL_182;
              }
            }
            else
            {
              int v77 = 0;
              if ((v80 - 97) > 8 || ((1 << (v80 - 97)) & 0x111) == 0)
              {
LABEL_182:
                LODWORD(v33) = 0;
                goto LABEL_157;
              }
            }
LABEL_151:
            int v109 = v33;
            uint64_t v93 = v15;
            __sc = (char *)v38;
            char v111 = v50;
            int v94 = strlen(v48);
            uint64_t v95 = (v94 - is_small_digraph_hun((uint64_t)v48, v94, a3, a5));
            memcpy(&a3[-(int)v95], v48, (int)v95);
            int v77 = an_analyze(*(void *)(a1 + 8), &a3[-(int)v95], (int)v95 + a5, 2048, (uint64_t)v120, 1);
            if (v77)
            {
              if ((a8 & 4) != 0)
              {
                uint64_t v44 = segm_word(a1, a2, &a3[-(int)v95], a4 - (int)v95, v120, 0, v95);
                if ((v44 & 0x80000000) != 0) {
                  return v44;
                }
              }
              uint64_t v15 = 1;
              char v50 = v111;
              uint64_t v38 = __sc;
            }
            else
            {
              char v50 = v111;
              uint64_t v38 = __sc;
              uint64_t v15 = v93;
            }
            LODWORD(v33) = v109;
            goto LABEL_157;
          }
          LODWORD(v33) = 0;
        }
        int v77 = 0;
LABEL_157:
        if (v77) {
          BOOL v96 = 0;
        }
        else {
          BOOL v96 = v33 == 3;
        }
        if (v96) {
          int v66 = 0;
        }
        else {
          int v66 = v77;
        }
        goto LABEL_163;
      }
      int v56 = v69;
      if ((a8 & 4) != 0)
      {
        uint64_t v44 = segm_word(a1, a2, &a3[-(int)v68], a4 - (int)v68, v120, 0, v68);
        if ((v44 & 0x80000000) != 0) {
          return v44;
        }
      }
      BOOL v57 = 1;
      uint64_t v15 = 1;
      uint64_t v46 = v105;
      LODWORD(v33) = v107;
      uint64_t v38 = __sa;
      BOOL v51 = v103;
      uint64_t v55 = v102;
      char v58 = v101;
    }
    else
    {
      int v34 = 0;
      uint64_t v35 = v11;
      while (1)
      {
        uint64_t v36 = v35 - 1;
        uint64_t v37 = *(unsigned __int8 *)(a6 + (v35 - 1));
        uint64_t v13 = *(void *)(a2 + 8 * v37 + 1024);
        if ((v13 & 0x800) != 0)
        {
          uint64_t v38 = 0;
          char v50 = 1;
          LODWORD(v33) = 3;
          if (v34) {
            goto LABEL_47;
          }
          goto LABEL_90;
        }
        if ((v13 & 0x200) != 0) {
          break;
        }
        if ((v13 & 0x20) == 0) {
          goto LABEL_35;
        }
        if (*(unsigned char *)(a2 + v37 + 512) != 48) {
          int v34 = 1;
        }
        --v35;
        if ((unint64_t)(v36 + 1) <= 1)
        {
          LODWORD(v35) = 0;
LABEL_35:
          uint64_t v38 = 0;
LABEL_46:
          char v50 = 1;
          if (v34) {
            goto LABEL_47;
          }
LABEL_90:
          char v45 = 0;
          uint64_t v46 = 0;
          int v47 = 0;
          int v48 = "nulladik";
          BOOL v51 = 1;
          int v49 = "null\xA0";
          goto LABEL_91;
        }
      }
      if (v32)
      {
        uint64_t v38 = 0;
        LODWORD(v33) = 1;
        goto LABEL_46;
      }
      switch(~v35 + v31)
      {
        case 0u:
          char v50 = 0;
          uint64_t v38 = "tized";
          break;
        case 1u:
          char v50 = 0;
          uint64_t v38 = "sz\xA0zad";
          break;
        case 2u:
        case 3u:
        case 4u:
          char v50 = 0;
          uint64_t v38 = "ezred";
          break;
        case 5u:
        case 6u:
        case 7u:
          char v50 = 0;
          uint64_t v38 = "milliomod";
          break;
        default:
          uint64_t v38 = 0;
          char v50 = 1;
          break;
      }
      LODWORD(v33) = 2;
      if (!v34) {
        goto LABEL_90;
      }
LABEL_47:
      uint64_t v52 = (int)v11 - 1;
      char v45 = 0;
      BOOL v51 = 0;
      int v47 = 0;
      uint64_t v46 = "harmad";
      int v48 = "harmadik";
      char v53 = 1;
      int v49 = "h\xA0rm";
      uint64_t v54 = "h\xA0rom";
      switch(*(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v52) + 512))
      {
        case '0':
          if (v52 != v35)
          {
            char v45 = 0;
            BOOL v51 = 0;
            int v47 = 0;
            uint64_t v46 = "tized";
            int v48 = "tizedik";
            int v49 = "tiz";
            uint64_t v54 = "t\xA1z";
            switch(*(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + (int)v11 - 2) + 512))
            {
              case '0':
                uint64_t v60 = (int)v11 - 3;
                if (v11 - 2 == v35 || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v60) + 512) == 48)
                {
                  uint64_t v61 = (int)v11 - 4;
                  if ((v60 == v35 || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v61) + 512) == 48)
                    && ((uint64_t v62 = (int)v11 - 5, v61 == v35)
                     || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v62) + 512) == 48)
                    && ((uint64_t v63 = (int)v11 - 6, v62 == v35)
                     || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v63) + 512) == 48))
                  {
                    uint64_t v64 = (int)v11 - 7;
                    if ((v63 == v35 || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v64) + 512) == 48)
                      && ((uint64_t v65 = (int)v11 - 8, v64 == v35)
                       || *(unsigned char *)(a2 + *(unsigned __int8 *)(a6 + v65) + 512) == 48)
                      && (v65 == v35
                       || *(unsigned char *)(a2 + *(unsigned __int8 *)((int)v11 + a6 - 9) + 512) == 48))
                    {
                      int v49 = 0;
                      uint64_t v46 = 0;
                      int v47 = 0;
                      int v48 = "milli\xA0rdadik";
                      char v45 = 1;
                      BOOL v51 = 1;
                      uint64_t v54 = "milli\xA0rd";
                    }
                    else
                    {
                      int v49 = 0;
                      BOOL v51 = 0;
                      int v47 = 0;
                      uint64_t v46 = "milliomod";
                      int v48 = "milliomodik";
                      char v45 = 1;
                      uint64_t v54 = "milli\xA2";
                    }
                  }
                  else
                  {
                    char v45 = 0;
                    BOOL v51 = 0;
                    int v47 = 0;
                    uint64_t v46 = "ezred";
                    int v48 = "ezredik";
                    int v49 = "ezr";
                    uint64_t v54 = "ezer";
                  }
                }
                else
                {
                  int v49 = 0;
                  BOOL v51 = 0;
                  int v47 = 0;
                  uint64_t v46 = "sz\xA0zad";
                  int v48 = "sz\xA0zadik";
                  char v45 = 1;
                  uint64_t v54 = "sz\xA0z";
                }
                goto LABEL_92;
              case '1':
                goto LABEL_92;
              case '2':
                char v45 = 0;
                BOOL v51 = 0;
                char v53 = 0;
                int v47 = "h\xA3s";
                uint64_t v46 = "huszad";
                int v48 = "huszadik";
                int v49 = "husz";
                uint64_t v54 = "h\xA3sz";
                goto LABEL_92;
              case '3':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "harmincad";
                int v48 = "harmincadik";
                char v45 = 1;
                uint64_t v54 = "harminc";
                goto LABEL_92;
              case '4':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "negyvened";
                int v48 = "negyvenedik";
                char v45 = 1;
                uint64_t v54 = "negyven";
                goto LABEL_92;
              case '5':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "\x94tvened";
                int v48 = "\x94tvenedik";
                char v45 = 1;
                uint64_t v54 = "\x94tven";
                goto LABEL_92;
              case '6':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "hatvanad";
                int v48 = "hatvanadik";
                char v45 = 1;
                uint64_t v54 = "hatvan";
                goto LABEL_92;
              case '7':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "hetvened";
                int v48 = "hetvenedik";
                char v45 = 1;
                uint64_t v54 = "hetven";
                goto LABEL_92;
              case '8':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "nyolcvanad";
                int v48 = "nyolcvanadik";
                char v45 = 1;
                uint64_t v54 = "nyolcvan";
                goto LABEL_92;
              case '9':
                int v49 = 0;
                BOOL v51 = 0;
                int v47 = 0;
                uint64_t v46 = "kilencvened";
                int v48 = "kilencvenedik";
                char v45 = 1;
                uint64_t v54 = "kilencven";
                goto LABEL_92;
              default:
                goto LABEL_49;
            }
          }
          break;
        case '1':
          int v59 = "els\x93";
          if (!v33) {
            int v59 = "else";
          }
          uint64_t v54 = "egy";
          char v45 = 1;
          int v49 = 0;
          if (v52 == v35) {
            int v48 = v59;
          }
          else {
            int v48 = "tizenegyedik";
          }
          BOOL v51 = v52 == v35;
          if (v52 == v35) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = "tizenegyed";
          }
          char v53 = 1;
          int v47 = 0;
          goto LABEL_92;
        case '2':
          char v45 = 0;
          BOOL v51 = 0;
          char v53 = 0;
          if (v52 == v35) {
            int v48 = "m\xA0sodik";
          }
          else {
            int v48 = "tizenkettedik";
          }
          int v47 = "k\x82t";
          uint64_t v46 = "ketted";
          int v49 = "kett";
          uint64_t v54 = "kett\x93";
          goto LABEL_92;
        case '3':
          goto LABEL_92;
        case '4':
          int v49 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "negyed";
          int v48 = "negyedik";
          char v45 = 1;
          uint64_t v54 = "n\x82gy";
          goto LABEL_92;
        case '5':
          int v49 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "\x94t\x94d";
          int v48 = "\x94t\x94dik";
          char v45 = 1;
          uint64_t v54 = "\x94t";
          goto LABEL_92;
        case '6':
          int v49 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "hatod";
          int v48 = "hatodik";
          char v45 = 1;
          uint64_t v54 = "hat";
          goto LABEL_92;
        case '7':
          char v45 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "heted";
          int v48 = "hetedik";
          int v49 = "het";
          uint64_t v54 = "h\x82t";
          goto LABEL_92;
        case '8':
          int v49 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "nyolcad";
          int v48 = "nyolcadik";
          char v45 = 1;
          uint64_t v54 = "nyolc";
          goto LABEL_92;
        case '9':
          int v49 = 0;
          BOOL v51 = 0;
          int v47 = 0;
          uint64_t v46 = "kilenced";
          int v48 = "kilencedik";
          char v45 = 1;
          uint64_t v54 = "kilenc";
          goto LABEL_92;
        default:
          break;
      }
LABEL_49:
      char v110 = v50;
      uint64_t v55 = 0;
      uint64_t v46 = 0;
      int v48 = 0;
      uint64_t v15 = 0;
      int v56 = 0;
      BOOL v57 = v33 != 1;
      char v58 = 1;
      BOOL v51 = 1;
    }
    if (v57 && v56 == 0) {
      int v66 = 0;
    }
    else {
      int v66 = v56;
    }
    goto LABEL_108;
  }
  uint64_t v15 = 0;
LABEL_174:
  if (v30 == 21)
  {
    if ((v13 & 0x100) != 0) {
      return 0;
    }
    uint64_t v98 = v15;
    int v99 = an_analyze(*(void *)(a1 + 8), v9, a5, 0, (uint64_t)v120, 1);
    uint64_t v15 = v98;
    if (v99)
    {
      if ((a8 & 4) == 0) {
        return 1;
      }
      uint64_t v40 = a1;
      uint64_t v41 = a2;
      char v42 = v9;
      uint64_t v39 = a4;
      uint64_t v43 = 0;
LABEL_37:
      uint64_t v44 = segm_word(v40, v41, v42, v39, v120, 0, v43);
      if ((v44 & 0x80000000) == 0) {
        return 1;
      }
      return v44;
    }
  }
  return v15;
}

uint64_t segm_word(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, unsigned __int8 *a5, int a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v9 = a2;
  uint64_t v10 = *a5;
  uint64_t v11 = a5[5];
  uint64_t v12 = v11 + v10;
  uint64_t v13 = a5[10];
  uint64_t v14 = v11 + v10 + v13;
  uint64_t v15 = a5[15];
  uint64_t v16 = v14 + v15;
  int v57 = a5[22];
  int v17 = v14 + v15 + v57;
  int v18 = v17;
  if (a5[5])
  {
    int v18 = *a5;
    if ((int)a7 <= (int)v10)
    {
      *(unsigned char *)(a4 + *a5) = 124;
      int v18 = v10;
    }
  }
  if (v13)
  {
    int v17 = v11 + v10;
    if ((int)a7 <= (int)v12)
    {
      *(unsigned char *)(a4 + v12) = 124;
      int v17 = v11 + v10;
    }
  }
  if (*(_DWORD *)(a2 + 3524) != 14) {
    return 0;
  }
  int v52 = v13;
  int v53 = v11;
  unsigned int v51 = v14 + v15 + v57;
  uint64_t v61 = 0;
  memset(v60, 0, sizeof(v60));
  int v50 = v15;
  if (v15)
  {
    if ((int)v14 >= (int)a7)
    {
      uint64_t v19 = &a3[v14];
      if (!SLstrncmp(&a3[v14], "szor", 4)
        || !SLstrncmp(v19, "szer", 4)
        || !SLstrncmp(v19, "sz\x94r", 4)
        || !SLstrncmp(v19, "s\xA0g", 3)
        || !SLstrncmp(v19, "s\x82g", 3))
      {
        *(unsigned char *)(a4 + v14) = 43;
      }
    }
  }
  if (v57)
  {
    if ((int)v16 >= (int)v7)
    {
      uint64_t v20 = &a3[v16];
      if (!SLstrncmp(&a3[v16], "szor", 4)
        || !SLstrncmp(v20, "szer", 4)
        || !SLstrncmp(v20, "sz\x94r", 4))
      {
        *(unsigned char *)(a4 + v16) = 43;
      }
    }
  }
  int v56 = v7;
  if ((~*((unsigned __int16 *)a5 + 14) & 0x8003) == 0)
  {
    uint64_t result = an_analyze(*(void *)(a1 + 8), a3, v18, 768, (uint64_t)v60, 1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (result)
    {
      uint64_t v22 = a1;
      unsigned int v23 = a3;
      uint64_t v24 = v9;
      uint64_t v25 = a4;
      uint64_t v26 = v7;
      goto LABEL_26;
    }
    if (!a6 && v18)
    {
      uint64_t v37 = 0;
      int v38 = 0;
      do
      {
        unsigned int v39 = a3[v37];
        BOOL v40 = v39 > 0x2F || ((1 << v39) & 0xA00000060000) == 0;
        if (!v40 || v39 == 196)
        {
          if (v37 > v38)
          {
            uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v38], (int)v37 - v38, 256, (uint64_t)v60, 1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (result)
            {
              uint64_t result = segm_word(a1, v9, &a3[v38], a4 + v38, v60, 1, (v56 - v38));
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
          }
          int v38 = ++v37;
          LODWORD(v7) = v56;
        }
        else
        {
          ++v37;
        }
      }
      while (v37 != v18);
      if (v38 >= 1 && v18 > v38)
      {
        uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v38], v18 - v38, 256, (uint64_t)v60, 1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (result)
        {
          uint64_t v25 = a4 + v38;
          uint64_t v26 = (v7 - v38);
          uint64_t v22 = a1;
          uint64_t v24 = v9;
          unsigned int v23 = &a3[v38];
LABEL_26:
          uint64_t result = segm_word(v22, v24, v23, v25, v60, 1, v26);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
  }
  if (!v53 || (~*((unsigned __int16 *)a5 + 15) & 0x8003) != 0) {
    goto LABEL_33;
  }
  int v27 = &a3[v10];
  uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v10], v17 - (int)v10, 768, (uint64_t)v60, 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (result)
  {
    uint64_t v28 = a4 + v10;
    uint64_t v29 = (v7 - v10);
    goto LABEL_32;
  }
  if (!a6 && v17 > (int)v10)
  {
    uint64_t v49 = v9;
    uint64_t v41 = v10;
    int v42 = v10;
    do
    {
      unsigned int v43 = a3[v41];
      BOOL v44 = v43 > 0x2F || ((1 << v43) & 0xA00000060000) == 0;
      if (v44 && v43 != 196)
      {
        ++v41;
      }
      else
      {
        if (v41 > v42)
        {
          uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v42], (int)v41 - v42, 256, (uint64_t)v60, 1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (result)
          {
            uint64_t result = segm_word(a1, v49, &a3[v42], a4 + v42, v60, 1, (v56 - v42));
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        int v42 = ++v41;
        LODWORD(v7) = v56;
      }
    }
    while (v41 != v17);
    uint64_t v9 = v49;
    if (v42 > (int)v10 && v17 > v42)
    {
      int v27 = &a3[v42];
      uint64_t result = an_analyze(*(void *)(a1 + 8), v27, v17 - v42, 256, (uint64_t)v60, 1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (result)
      {
        uint64_t v28 = a4 + v42;
        uint64_t v29 = (v7 - v42);
LABEL_32:
        uint64_t result = segm_word(a1, v9, v27, v28, v60, 1, v29);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
  }
LABEL_33:
  if (!v52 || (~*((unsigned __int16 *)a5 + 16) & 0x8003) != 0) {
    return 0;
  }
  uint64_t v30 = v9;
  uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v12], v51 - v12, 768, (uint64_t)v60, 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v31 = v12;
  if (result)
  {
    uint64_t v32 = a4 + v12;
    uint64_t v33 = (v56 - v12);
    uint64_t v34 = a1;
    uint64_t v35 = v9;
    uint64_t v36 = &a3[v12];
    goto LABEL_38;
  }
  if (a6 || v51 <= v12) {
    return 0;
  }
  uint64_t v45 = (v52 + v50 + v57 + v53 + v10);
  int v46 = v10;
  do
  {
    unsigned int v47 = a3[v31];
    BOOL v48 = v47 > 0x2F || ((1 << v47) & 0xA00000060000) == 0;
    if (v48 && v47 != 196)
    {
      ++v31;
    }
    else
    {
      if (v31 > v46)
      {
        uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v46], (int)v31 - v46, 256, (uint64_t)v60, 1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (result)
        {
          uint64_t result = segm_word(a1, v30, &a3[v46], a4 + v46, v60, 1, (v56 - v46));
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      int v46 = ++v31;
    }
  }
  while (v31 != v45);
  if (v46 <= (int)v12 || v46 >= (int)v51) {
    return 0;
  }
  uint64_t result = an_analyze(*(void *)(a1 + 8), &a3[v46], (int)v45 - v46, 256, (uint64_t)v60, 1);
  if ((result & 0x80000000) == 0)
  {
    if (result)
    {
      uint64_t v32 = a4 + v46;
      uint64_t v33 = (v56 - v46);
      uint64_t v34 = a1;
      uint64_t v35 = v30;
      uint64_t v36 = &a3[v46];
LABEL_38:
      uint64_t result = segm_word(v34, v35, v36, v32, v60, 1, v33);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      return 0;
    }
    return 0;
  }
  return result;
}

BOOL is_small_digraph_hun(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  BOOL result = 0;
  if (a2 >= 2 && a4 >= 2)
  {
    int v4 = *(unsigned __int8 *)(a1 + (a2 - 2));
    if (v4 == *a3)
    {
      int v5 = *(unsigned __int8 *)(a1 + (a2 - 1));
      if (v5 == a3[1])
      {
        BOOL v6 = (v4 & 0xFFFFFFFD) == 0x6C || v4 == 103;
        BOOL v7 = v6 || v4 == 116;
        if (v7 && v5 == 121) {
          return 1;
        }
        BOOL v8 = v4 == 122 || v4 == 99;
        if (v8 && v5 == 115) {
          return 1;
        }
        BOOL v9 = v4 == 100 || v4 == 115;
        if (v9 && v5 == 122) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t check__words(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v7 = a5;
  v56[40] = *MEMORY[0x263EF8340];
  uint64_t v12 = an_analyze(*(void *)(a1 + 8), a3, a5, a6, (uint64_t)v56, 1);
  uint64_t v13 = v12;
  if ((v12 & 0x80000000) != 0) {
    return v13;
  }
  if (v12)
  {
    if ((a6 & 4) != 0)
    {
      int v14 = segm_word(a1, a2, a3, a4, (unsigned __int8 *)v56, 0, 0);
      if (v14 >= 0) {
        return v13;
      }
      else {
        return v14;
      }
    }
    return v13;
  }
  unsigned int v15 = *(_DWORD *)(a2 + 3524);
  BOOL v16 = v15 > 0x15 || ((1 << v15) & 0x204001) == 0;
  if (v16 || v7 < 3)
  {
    int v17 = 0;
LABEL_55:
    BOOL v35 = v15 == 14 || v15 == 0;
    if (v35 && (v15 != 14 || v17 >= 2))
    {
      uint64_t v54 = (v7 - 1);
      int v52 = v7;
      if (v7 >= 3)
      {
        int v36 = 0;
        int v37 = 0;
        uint64_t v38 = 1;
        while (1)
        {
          unsigned int v39 = a3[v38];
          BOOL v40 = v39 > 0x2F || ((1 << v39) & 0xA00000060000) == 0;
          if (v40 && v39 != 196)
          {
            ++v38;
          }
          else
          {
            if (v38 == v36 || v37 > 2) {
              goto LABEL_85;
            }
            uint64_t v41 = an_analyze(*(void *)(a1 + 8), &a3[v36], (int)v38 - v36, (*(_DWORD *)(a2 + 3524) == 14) << 11, (uint64_t)v56, 1);
            uint64_t v13 = v41;
            if ((v41 & 0x80000000) != 0) {
              return v13;
            }
            if (!v41) {
              goto LABEL_85;
            }
            if ((a6 & 4) != 0)
            {
              uint64_t v23 = segm_word(a1, a2, &a3[v36], a4 + v36, (unsigned __int8 *)v56, 0, 0);
              if ((v23 & 0x80000000) != 0) {
                return v23;
              }
            }
            ++v37;
            int v36 = ++v38;
          }
          if (v38 == v54) {
            goto LABEL_86;
          }
        }
      }
      int v36 = 0;
      LODWORD(v3_Block_object_dispose(&STACK[0x510], 8) = 1;
LABEL_85:
      if (v38 == v54)
      {
LABEL_86:
        if (v52 != v36)
        {
          unsigned int v43 = &a3[v36];
          uint64_t v44 = an_analyze(*(void *)(a1 + 8), v43, v52 - v36, (*(_DWORD *)(a2 + 3524) == 14) << 11, (uint64_t)v56, 1);
          uint64_t v13 = v44;
          if ((v44 & 0x80000000) == 0 && (a6 & 4) != 0)
          {
            if (v44)
            {
              uint64_t v23 = segm_word(a1, a2, v43, a4 + v36, (unsigned __int8 *)v56, 0, 0);
              if ((v23 & 0x80000000) != 0) {
                return v23;
              }
            }
          }
          return v13;
        }
      }
    }
    return 0;
  }
  int v17 = 0;
  uint64_t v50 = (v7 - 1);
  int v49 = a6 + 256;
  int v51 = v7;
  uint64_t v18 = 1;
  while (1)
  {
    unsigned int v19 = a3[v18];
    BOOL v20 = v19 > 0x2F || ((1 << v19) & 0xA00000060000) == 0;
    if (v20 && v19 != 196) {
      goto LABEL_52;
    }
    uint64_t v21 = an_analyze(*(void *)(a1 + 8), a3, v18, a6 + 8448, (uint64_t)v56, 8);
    uint64_t v13 = v21;
    if ((v21 & 0x80000000) != 0) {
      return v13;
    }
    int v53 = v17;
    if (v21)
    {
      uint64_t v22 = &a3[v18 + 1];
      uint64_t v23 = an_analyze(*(void *)(a1 + 8), v22, ~v18 + v51, v49, (uint64_t)v55, 8);
      if ((v23 & 0x80000000) != 0) {
        return v23;
      }
      BOOL v48 = &a3[v18 + 1];
      if (v23 || *(_DWORD *)(a2 + 3524) != 21) {
        goto LABEL_25;
      }
      int v24 = *v22;
      unsigned __int8 v25 = lexchr2lower((char)*v22, 21);
      if (v24 != v25) {
        break;
      }
    }
LABEL_32:
    int v17 = v53 + 1;
    if (*(_DWORD *)(a2 + 3524) == 21)
    {
      unsigned __int8 v33 = a3[v18];
      a3[v18] = 0;
      int v34 = roman2int(a3);
      a3[v18] = v33;
      if ((v34 - 1) <= 0x26
        && (!SLstrcmp(&a3[v18 + 1], "lecie")
         || !SLstrcmp(&a3[v18 + 1], "lecia")
         || !SLstrcmp(&a3[v18 + 1], "leciu")
         || !SLstrcmp(&a3[v18 + 1], "leciem")
         || !SLstrcmp(&a3[v18 + 1], "wieczny")
         || !SLstrcmp(&a3[v18 + 1], "wiecznego")
         || !SLstrcmp(&a3[v18 + 1], "wiecznemu")
         || !SLstrcmp(&a3[v18 + 1], "wiecznym")
         || !SLstrcmp(&a3[v18 + 1], "wieczne")
         || !SLstrcmp(&a3[v18 + 1], "wieczna")
         || !SLstrcmp(&a3[v18 + 1], "wiecznej")
         || !SLstrcmp(&a3[v18 + 1], "wieczn\xA5")
         || !SLstrcmp(&a3[v18 + 1], "wieczni")
         || !SLstrcmp(&a3[v18 + 1], "wiecznych")
         || !SLstrcmp(&a3[v18 + 1], "wiecznym")))
      {
        return 1;
      }
    }
LABEL_52:
    if (++v18 == v50)
    {
      unsigned int v15 = *(_DWORD *)(a2 + 3524);
      int v7 = v51;
      goto LABEL_55;
    }
  }
  *BOOL v48 = v25;
  uint64_t v23 = an_analyze(*(void *)(a1 + 8), v48, ~v18 + v51, v49, (uint64_t)v55, 8);
  if ((v23 & 0x80000000) != 0) {
    return v23;
  }
  *BOOL v48 = v24;
LABEL_25:
  if (!v23) {
    goto LABEL_32;
  }
  uint64_t v26 = 0;
  uint64_t v45 = v23;
  uint64_t v46 = a4;
  uint64_t v27 = v13;
LABEL_27:
  uint64_t v28 = 0;
  uint64_t v47 = v26;
  uint64_t v29 = &v55[40 * v26];
  uint64_t v30 = v56;
  while (1)
  {
    int v31 = *(_DWORD *)(a2 + 3524);
    if (v31 == 21) {
      break;
    }
    int v32 = is_nominal_result((uint64_t)v30, v31);
    if (v32 == is_nominal_result((uint64_t)v29, *(_DWORD *)(a2 + 3524))) {
      break;
    }
    ++v28;
    v30 += 5;
    if (v27 == v28)
    {
      a4 = v46;
      uint64_t v26 = v47 + 1;
      if (v47 + 1 != v45) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  if ((a6 & 4) != 0)
  {
    uint64_t v23 = segm_word(a1, a2, a3, v46, (unsigned __int8 *)&v56[5 * v28], 0, 0);
    if ((v23 & 0x80000000) != 0) {
      return v23;
    }
    uint64_t v23 = segm_word(a1, a2, v48, v46 + v18 + 1, &v55[40 * v47], 0, 0);
    if ((v23 & 0x80000000) != 0) {
      return v23;
    }
  }
  return 1;
}

uint64_t lexchr2lower(int a1, int a2)
{
  if ((a1 - 65) <= 0x19) {
    return (char)(a1 + 32);
  }
  if (a2 != 21)
  {
    if (a2 == 14)
    {
      char v2 = -96;
      switch(a1)
      {
        case -115:
          char v2 = -95;
          break;
        case -114:
        case -111:
        case -110:
        case -109:
        case -108:
        case -106:
          return (char)a1;
        case -113:
          return v2;
        case -112:
          goto LABEL_19;
        case -107:
          return -94;
        case -105:
          char v2 = -93;
          break;
        case -104:
          char v2 = -106;
          break;
        case -103:
          goto LABEL_20;
        case -102:
          goto LABEL_21;
        default:
          if (a1 != -89) {
            return (char)a1;
          }
          char v2 = -109;
          break;
      }
      return v2;
    }
    return (char)a1;
  }
  if (a1 > -93)
  {
    if (a1 > -68)
    {
      switch(a1)
      {
        case -67:
          return -66;
        case -32:
          return -94;
        case -29:
          return -28;
      }
    }
    else
    {
      switch(a1)
      {
        case -92:
          return -91;
        case -88:
          return -87;
        case -75:
          return -96;
      }
    }
    return (char)a1;
  }
  switch(a1)
  {
    case -115:
      char v2 = -85;
      break;
    case -113:
      char v2 = -122;
      break;
    case -112:
LABEL_19:
      char v2 = -126;
      break;
    case -105:
      char v2 = -104;
      break;
    case -103:
LABEL_20:
      char v2 = -108;
      break;
    case -102:
LABEL_21:
      char v2 = -127;
      break;
    case -99:
      char v2 = -120;
      break;
    default:
      return (char)a1;
  }
  return v2;
}

uint64_t suggest_init(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v8 = malloc_type_calloc(0x290uLL, 1uLL, 0x9A447B63uLL);
  *a1 = v8;
  if (!v8) {
    return 4294966295;
  }
  BOOL v9 = v8;
  *BOOL v8 = a2;
  v8[80] = a4;
  uint64_t v10 = (const char *)(v8 + 11);
  if (a3) {
    __strcpy_chk();
  }
  else {
    *uint64_t v10 = 0;
  }
  cdict_init((uint64_t)(v9 + 3), a2, 256, 32, 0);
  uint64_t result = 0;
  if ((a4 & 0x20000) != 0)
  {
    if (*v10)
    {
      uint64_t v12 = f_open(v10, 17);
      if (v12)
      {
        uint64_t v13 = v12;
        while (1)
        {
          if (!f_gets((uint64_t)__s, 130, v13))
          {
            int v27 = *(_DWORD *)(v13 + 20);
            f_close(v13);
            if (v27)
            {
              int v26 = -4;
            }
            else
            {
              int v26 = 0;
              *((_DWORD *)v9 + _Block_object_dispose(&STACK[0x510], 8) = 0;
            }
            goto LABEL_43;
          }
          int v14 = strchr(__s, 10);
          if (!v14) {
            break;
          }
          do
          {
            char *v14 = 0;
LABEL_15:
            if (v14 <= __s) {
              break;
            }
            int v17 = *--v14;
            int v16 = v17;
          }
          while (v17 == 32 || v16 == 9);
          if (__s[0])
          {
            uint64_t v19 = stpcopy((uint64_t)v30, (unsigned __int8 *)__s);
            BOOL v20 = strchr(v30, 32);
            uint64_t v21 = v20;
            if (v20) {
              uint64_t v22 = v20;
            }
            else {
              uint64_t v22 = (char *)(v19 + 1);
            }
            if (v20) {
              int v23 = v19;
            }
            else {
              int v23 = v19 + 1;
            }
            *uint64_t v22 = 0;
            if ((int)strlen(v30) > 16
              || (v21 ? (int v24 = v21 + 1) : (int v24 = (const char *)(v19 + 1)), (int)strlen(v24) > 16))
            {
              int v26 = -10;
LABEL_38:
              f_close(v13);
              goto LABEL_43;
            }
            int v25 = cdict_add((uint64_t)(v9 + 3), (unsigned __int8 *)v30, v23 - v30 + 1);
            int v26 = v25 & (v25 >> 31);
            if (v26 < 0) {
              goto LABEL_38;
            }
          }
        }
        int v15 = strlen(__s);
        if (v15 != 129)
        {
          int v14 = &__s[v15];
          goto LABEL_15;
        }
        f_close(v13);
        int v26 = -7;
      }
      else
      {
        int v26 = -2;
      }
LABEL_43:
      if (v26 != -2 && v26 < 0) {
        return (v26 - 1200);
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t suggest_finish(uint64_t result)
{
  v27[8] = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 24;
    if (*(_DWORD *)(result + 32) == 1)
    {
      __strcpy_chk();
      __s.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__s) - 1] = 125;
      __strcpy_chk();
      __to.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__to) - 1] = 123;
      uint64_t v3 = f_open((const char *)&__s, 26);
      if (v3)
      {
        uint64_t v4 = v3;
        long long v22 = 0u;
        long long v23 = 0u;
        if (cdict_access(v2, 0, (uint64_t)&v22))
        {
          int v5 = 0;
          do
          {
            uint64_t v6 = 0;
            uint64_t v7 = v22 + SDWORD2(v22) + 20;
            BOOL v8 = v27;
            do
            {
              BOOL v9 = v8;
              int v10 = *(unsigned __int8 *)(v7 + v6);
              v26[v6++] = v10;
              BOOL v8 = (void *)((char *)v8 + 1);
            }
            while (v10);
            uint64_t v11 = (unsigned char *)(v7 + v6);
            if (*v11)
            {
              v26[v6 - 1] = 32;
              do
              {
                int v12 = *v11++;
                *v9++ = v12;
              }
              while (v12);
            }
            if (f_puts(v26, v4) == -1) {
              break;
            }
            int v13 = (*(unsigned char *)(v4 + 8) & 0x10) != 0 ? f_putc_txt(10, v4) : f_putc_bin(10, v4);
            if (v13 == -1) {
              break;
            }
            ++v5;
            long long v22 = 0u;
            long long v23 = 0u;
          }
          while (cdict_access(v2, v5, (uint64_t)&v22));
        }
        int v14 = *(_DWORD *)(v4 + 20);
        f_close(v4);
        if (v14)
        {
          int v15 = -5;
        }
        else
        {
          uint64_t v16 = f_open((const char *)&__to, 1);
          if (v16 && (f_close(v16), unlink((const char *)&__to) == -1))
          {
            int v15 = -12;
          }
          else
          {
            uint64_t v17 = f_open((const char *)(v1 + 88), 1);
            if (v17 && (f_close(v17), rename((const std::__fs::filesystem::path *)(v1 + 88), &__to, v19), v20 == -1)
              || (rename(&__s, (const std::__fs::filesystem::path *)(v1 + 88), v18), v21 == -1))
            {
              int v15 = -13;
            }
            else
            {
              unlink((const char *)&__to);
              int v15 = 0;
              *(_DWORD *)(v1 + 32) = 0;
            }
          }
        }
      }
      else
      {
        int v15 = -3;
      }
    }
    else
    {
      int v15 = 0;
    }
    cdict_finish(v2);
    free((void *)v1);
    if (v15) {
      return (v15 - 1200);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t suggest_words(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__s, int a7, uint64_t a8)
{
  int v16 = strlen(__s);
  if (v16 > 64) {
    return 4294966286;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = a8;
  if (a8 == 1 || a8 == -1)
  {
    *(_DWORD *)(a1 + 632) = a7;
    *(_DWORD *)(a1 + 652) = 0;
    *(_DWORD *)(a1 + 16) = 1;
  }
  else if (!*(_DWORD *)(a1 + 16))
  {
    return *(unsigned int *)(a1 + 652);
  }
  int he_language = get_he_language(*(void *)a1);
  int v19 = he_language;
  if (he_language == 14)
  {
    int v23 = 3;
    uint64_t v25 = 0xA00000004;
    int v27 = 2;
    long long v22 = corr_typewriter_hun;
    int v24 = corr_more_accents_hun;
    int v26 = corr_accents_hun;
    int v20 = corr_y_z_hun;
  }
  else if (he_language == 21)
  {
    int v23 = 3;
    long long v22 = corr_typewriter_pol;
    int v24 = corr_more_accents_pol;
    int v27 = 2;
    int v26 = corr_accents_pol;
    uint64_t v25 = 0x200000014;
    int v20 = corr_y_z_pol;
  }
  else
  {
    int v20 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    int v24 = 0;
    long long v22 = 0;
    int v27 = 0;
    int v23 = 0;
  }
  *(void *)(a1 + 60_Block_object_dispose(&STACK[0x510], 8) = a2;
  *(void *)(a1 + 600) = a3;
  *(void *)(a1 + 616) = a4;
  *(void *)(a1 + 624) = a5;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x510], 8) = 1024;
  uint64_t result = suggest_1_corr(a1, __s, 0);
  *(_DWORD *)(a1 + 16) = result;
  if ((result & 0x80000000) == 0)
  {
    uint64_t v21 = *(void *)(a1 + 640);
    if ((v21 & 0x8000) == 0 || (v21 & 0x10000) != 0 && *(_DWORD *)(a1 + 652)) {
      goto LABEL_17;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = -1;
    if ((a8 & 0x10000) == 0
      || !result
      || (v21 & 0x40) == 0
      || (uint64_t result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v20, v27),
          *(_DWORD *)(a1 + 16) = result,
          (result & 0x80000000) == 0))
    {
      if ((a8 & 0x20000) == 0
        || !result
        || (*(unsigned char *)(a1 + 641) & 1) == 0
        || (uint64_t result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v26, SHIDWORD(v25)),
            *(_DWORD *)(a1 + 16) = result,
            (result & 0x80000000) == 0))
      {
        if ((a8 & 0x40000) == 0
          || !result
          || (*(unsigned char *)(a1 + 641) & 2) == 0
          || (uint64_t result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v24, v25),
              *(_DWORD *)(a1 + 16) = result,
              (result & 0x80000000) == 0))
        {
          if ((a8 & 0x80000) == 0
            || !result
            || (*(unsigned char *)(a1 + 641) & 0x40) == 0
            || (uint64_t result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v22, v23),
                *(_DWORD *)(a1 + 16) = result,
                (result & 0x80000000) == 0))
          {
            if ((a8 & 0x100000) == 0
              || !result
              || (*(unsigned char *)(a1 + 640) & 0x20) == 0
              || *(_DWORD *)(a1 + 652)
              || (uint64_t result = sugg_capitalize1((uint64_t *)a1, (unsigned __int8 *)__s, v16, 0, 3),
                  *(_DWORD *)(a1 + 16) = result,
                  (result & 0x80000000) == 0))
            {
LABEL_17:
              if (v19 == 14 && (a8 & 0x200000) != 0 && !*(_DWORD *)(a1 + 652))
              {
                *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x510], 8) = 0;
                *(void *)(a1 + _Block_object_dispose(&STACK[0x510], 8) = -1;
                uint64_t result = suggest_1_corr(a1, __s, 0);
                *(_DWORD *)(a1 + 16) = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t suggest_1_corr(uint64_t a1, char *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v170 = *MEMORY[0x263EF8340];
  int he_language = get_he_language(*(void *)a1);
  int v7 = he_language;
  if (he_language == 14)
  {
    int v8 = 3;
    int v9 = 41;
    int v10 = 14;
    uint64_t v153 = 0xD00000009;
    uint64_t v156 = 0xA00000004;
    int v162 = 5;
    int v166 = 2;
    uint64_t v11 = corr_typewriter_hun;
    int v12 = corr_keyboard_hun;
    __int16 v151 = corr_proper_names_hun;
    int v152 = corr_voiced_unvoiced_hun;
    int v154 = corr_assimilation_hun;
    int v155 = corr_more_accents_hun;
    unsigned int v157 = corr_accents_hun;
    size_t __n = corr_j_ly_hun;
    int v13 = corr_y_z_hun;
LABEL_5:
    size_t v164 = (size_t)v13;
    goto LABEL_7;
  }
  if (he_language == 21)
  {
    int v8 = 3;
    int v9 = 35;
    int v10 = 5;
    uint64_t v153 = 0x1A00000006;
    uint64_t v156 = 0x200000014;
    int v162 = 26;
    int v166 = 2;
    uint64_t v11 = corr_typewriter_pol;
    int v12 = corr_keyboard_pol;
    __int16 v151 = (char **)&corr_proper_names_pol;
    int v152 = corr_voiced_unvoiced_pol;
    int v154 = corr_assimilation_pol;
    int v155 = corr_more_accents_pol;
    unsigned int v157 = corr_accents_pol;
    size_t __n = corr_j_ly_pol;
    int v13 = corr_y_z_pol;
    goto LABEL_5;
  }
  size_t v164 = 0;
  unsigned int v157 = 0;
  size_t __n = 0;
  int v154 = 0;
  int v155 = 0;
  __int16 v151 = 0;
  int v152 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  int v166 = 0;
  int v162 = 0;
  uint64_t v156 = 0;
  uint64_t v153 = 0;
  int v10 = 0;
  int v9 = 0;
  int v8 = 0;
LABEL_7:
  int v14 = strlen(a2);
  if (v14 > 64) {
    return 4294966286;
  }
  int v150 = v10;
  uint64_t v149 = (uint64_t)v12;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if ((int)v15 < 1) {
    return v15;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) != 0 && (*(unsigned char *)(a1 + 640) & 8) != 0)
  {
    int v145 = v9;
    if (v7 == 14 && (*(unsigned char *)(a1 + 632) & 0x20) != 0)
    {
LABEL_17:
      if (v14 >= 3)
      {
        uint64_t v19 = 1;
        while (1)
        {
          uint64_t v20 = 0;
          int v21 = 0;
          do
          {
            if (v19 == v20) {
              __dst[v21++] = 32;
            }
            uint64_t v22 = v21 + 1;
            __dst[v21++] = a2[v20++];
          }
          while (v14 != v20);
          __dst[v22] = 0;
          uint64_t v23 = try_f(a1, __dst, 0, 0, 2);
          if ((int)v23 <= 0) {
            goto LABEL_278;
          }
          if (++v19 == v14 - 1)
          {
            uint64_t v16 = *(void *)(a1 + 8);
            break;
          }
        }
      }
      uint64_t v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      uint64_t v17 = &a2[(int)v3];
      while (1)
      {
        int v18 = *v17;
        if (!*v17) {
          break;
        }
        ++v17;
        if (strchr(punct_inside_punctu, v18)) {
          goto LABEL_17;
        }
      }
    }
    int v9 = v145;
  }
  if ((v16 & 2) != 0 && v7 == 14 && (*(void *)(a1 + 640) & 0x10) != 0 && (*(unsigned char *)(a1 + 632) & 0x80) != 0)
  {
    if (v14 >= 3)
    {
      int v141 = v3;
      uint64_t v25 = *(void *)a1;
      uint64_t v26 = 1;
      while (1)
      {
        uint64_t v27 = 0;
        int v28 = 0;
        do
        {
          if (v26 == v27) {
            __dst[v28++] = *(unsigned char *)(v25 + 813);
          }
          uint64_t v29 = v28 + 1;
          __dst[v28++] = a2[v27++];
        }
        while (v14 != v27);
        __dst[v29] = 0;
        uint64_t v30 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, 0);
        uint64_t v15 = v30;
        if ((v30 & 0x80000000) != 0) {
          goto LABEL_279;
        }
        if (v30)
        {
          *(_DWORD *)(a1 + 652) = 1;
          uint64_t v31 = __dst;
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v31);
        if ((int)v23 <= 0) {
          goto LABEL_278;
        }
        if (++v26 == v14 - 1)
        {
          uint64_t v16 = *(void *)(a1 + 8);
          LODWORD(v3) = v141;
          break;
        }
      }
    }
    uint64_t v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    if ((v16 & 4) == 0) {
      goto LABEL_52;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 632) && (*(unsigned char *)(a1 + 640) & 0x20) != 0)
  {
    uint64_t v24 = sugg_capitalize1((uint64_t *)a1, (unsigned __int8 *)a2, v14, v3, 1);
    uint64_t v15 = v24;
    *(_DWORD *)(a1 + 16) = v24;
    if ((v24 & 0x80000000) != 0 || !v24) {
      return v15;
    }
    uint64_t v15 = 1;
  }
LABEL_52:
  if (*(unsigned char *)(a1 + 8) & 8) != 0 && (*(unsigned char *)(a1 + 640))
  {
    int v146 = v9;
    if (v14 > (int)v3)
    {
      uint64_t v32 = *(void *)a1;
      for (uint64_t i = (int)v3; i != v14; ++i)
      {
        if ((*(void *)(v32 + 8 * a2[i] + 1024) & 1) != 0
          && (i != (int)v3 && (*(void *)(v32 + 8 * a2[i - 1] + 1024) & 1) != 0
           || i != v14 - 1 && (*(void *)(v32 + 8 * a2[i + 1] + 1024) & 1) != 0))
        {
          if (v14 < 1)
          {
            int v34 = 0;
          }
          else
          {
            int v34 = 0;
            uint64_t v35 = i;
            uint64_t v36 = v14;
            int v37 = a2;
            do
            {
              if (v35) {
                __dst[v34++] = *v37;
              }
              --v35;
              ++v37;
              --v36;
            }
            while (v36);
          }
          __dst[v34] = 0;
          uint64_t v38 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
          uint64_t v15 = v38;
          if ((v38 & 0x80000000) != 0) {
            goto LABEL_279;
          }
          if (v38)
          {
            *(_DWORD *)(a1 + 652) = 1;
            unsigned int v39 = __dst;
          }
          else
          {
            unsigned int v39 = 0;
          }
          uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v39);
          if ((int)v23 < 1) {
            goto LABEL_278;
          }
        }
      }
    }
    uint64_t v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    int v9 = v146;
  }
  uint64_t v40 = *(void *)(a1 + 8);
  if ((v40 & 0x10) != 0 && (*(unsigned char *)(a1 + 640) & 2) != 0)
  {
    if (v14 - 1 > (int)v3)
    {
      int v143 = v8;
      uint64_t v41 = *(void *)a1;
      uint64_t v42 = (int)v3;
      do
      {
        int v43 = v42;
        uint64_t v44 = a2[v42++];
        if ((*(void *)(v41 + 8 * v44 + 1024) & 1) != 0
          && v44 != a2[v42]
          && (*(void *)(v41 + 8 * a2[v42] + 1024) & 1) != 0)
        {
          if (v14 < 1)
          {
            int v46 = 0;
          }
          else
          {
            int v46 = 0;
            int v47 = 0;
            do
            {
              if (v47 == v43)
              {
                uint64_t v48 = v47 + 1;
                __dst[v46++] = a2[v48];
              }
              else
              {
                LODWORD(v4_Block_object_dispose(&STACK[0x510], 8) = v47;
              }
              __dst[v46++] = a2[v47];
              int v47 = v48 + 1;
            }
            while ((int)v48 + 1 < v14);
          }
          __dst[v46] = 0;
          uint64_t v49 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
          uint64_t v15 = v49;
          if ((v49 & 0x80000000) != 0) {
            goto LABEL_279;
          }
          if (v49)
          {
            *(_DWORD *)(a1 + 652) = 1;
            uint64_t v50 = __dst;
          }
          else
          {
            uint64_t v50 = 0;
          }
          uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v50);
          if ((int)v23 < 1) {
            goto LABEL_278;
          }
        }
      }
      while (v42 != v14 - 1);
      uint64_t v40 = *(void *)(a1 + 8);
      int v8 = v143;
    }
    uint64_t v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
  }
  if ((v40 & 0x20) == 0) {
    goto LABEL_161;
  }
  if ((*(unsigned char *)(a1 + 640) & 4) != 0)
  {
    if (v14 <= (int)v3)
    {
      uint64_t v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      int v144 = v8;
      uint64_t v147 = v11;
      uint64_t v51 = (int)v3;
      uint64_t v52 = v14;
      uint64_t v53 = *(void *)a1;
      int v142 = v3;
      do
      {
        uint64_t v54 = a2[v51];
        uint64_t v55 = v51 + 1;
        if (v54 != a2[v51 + 1]
          && (v51 < 1 || v54 != a2[(v51 - 1)]))
        {
          uint64_t v56 = v51;
          uint64_t v57 = *(void *)(v53 + 8 * v54 + 1024);
          if (v57)
          {
            if (v14 < 1)
            {
              int v74 = 0;
            }
            else
            {
              int v70 = 0;
              uint64_t v71 = v14;
              BOOL v72 = a2;
              do
              {
                if (!v56) {
                  __dst[v70++] = a2[v51];
                }
                char v73 = *v72++;
                int v74 = v70 + 1;
                __dst[v70] = v73;
                --v56;
                ++v70;
                --v71;
              }
              while (v71);
            }
            __dst[v74] = 0;
            uint64_t v75 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
            uint64_t v15 = v75;
            if ((v75 & 0x80000000) != 0) {
              goto LABEL_279;
            }
            if (v75)
            {
              *(_DWORD *)(a1 + 652) = 1;
              int v76 = __dst;
            }
            else
            {
              int v76 = 0;
            }
            uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v76);
            uint64_t v52 = v14;
            if ((int)v23 < 1) {
              goto LABEL_278;
            }
          }
          else if (v51 >= 1 && (v57 & 0x1000) != 0)
          {
            uint64_t v58 = (v51 - 1);
            if ((*(void *)(v53 + 8 * a2[v58] + 1024) & 0x1800000) != 0)
            {
              int v59 = *(_DWORD *)(v53 + 3072);
              if (v59 >= 1)
              {
                uint64_t v60 = 0;
                uint64_t v61 = v51;
                uint64_t v140 = (v51 - 1);
                do
                {
                  if (*(unsigned __int8 *)(v53 + 28 * v60 + 3076) == a2[v58])
                  {
                    uint64_t v62 = v53 + 28 * v60;
                    if ((*(void *)(v53 + 8 * *(unsigned __int8 *)(v62 + *(int *)(v62 + 3080) + 3083) + 1024) & 0x10) != 0)
                    {
                      if (v14 < 1)
                      {
                        int v63 = 0;
                      }
                      else
                      {
                        int v63 = 0;
                        uint64_t v64 = (int *)(v62 + 3080);
                        uint64_t v65 = v14;
                        int v66 = a2;
                        uint64_t v67 = v56;
                        do
                        {
                          if (v67)
                          {
                            __dst[v63] = *v66;
                          }
                          else
                          {
                            __dst[v63] = a2[v61];
                            __dst[++v63] = *(unsigned char *)(v53 + 28 * v60 + *v64 + 3083);
                          }
                          ++v63;
                          --v67;
                          ++v66;
                          --v65;
                        }
                        while (v65);
                      }
                      __dst[v63] = 0;
                      uint64_t v68 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
                      uint64_t v15 = v68;
                      if ((v68 & 0x80000000) != 0) {
                        goto LABEL_279;
                      }
                      if (v68)
                      {
                        *(_DWORD *)(a1 + 652) = 1;
                        int v69 = __dst;
                      }
                      else
                      {
                        int v69 = 0;
                      }
                      uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v69);
                      if ((int)v23 < 1) {
                        goto LABEL_278;
                      }
                      int v59 = *(_DWORD *)(v53 + 3072);
                      uint64_t v52 = v14;
                      uint64_t v58 = v140;
                    }
                  }
                  ++v60;
                }
                while (v60 < v59);
              }
            }
          }
        }
        uint64_t v51 = v55;
      }
      while (v55 != v52);
      uint64_t v40 = *(void *)(a1 + 8);
      uint64_t v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      LODWORD(v3) = v142;
      int v8 = v144;
      uint64_t v11 = v147;
      if ((v40 & 0x20) == 0) {
        goto LABEL_161;
      }
    }
  }
  if (*(_DWORD *)(a1 + 632) && (*(unsigned char *)(a1 + 642) & 4) != 0)
  {
    if (v14 == 64)
    {
LABEL_160:
      uint64_t v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      goto LABEL_161;
    }
    if (v14 >= 1)
    {
      uint64_t v77 = v14;
      int v78 = a2;
      do
      {
        unsigned int v79 = *v78++;
        if ((*(void *)(*(void *)a1 + 8 * v79 + 1024) & 0x19000) != 0) {
          goto LABEL_160;
        }
      }
      while (--v77);
    }
    __strcpy_chk();
    __dst[v14] = 46;
    __dst[v14 + 1] = 0;
    uint64_t v80 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
    uint64_t v15 = v80;
    if ((v80 & 0x80000000) != 0)
    {
LABEL_279:
      *(_DWORD *)(a1 + 16) = v15;
      return v15;
    }
    if (v80)
    {
      *(_DWORD *)(a1 + 652) = 1;
      uint64_t v81 = __dst;
    }
    else
    {
      uint64_t v81 = 0;
    }
    uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v81);
    if ((int)v23 >= 1)
    {
      uint64_t v40 = *(void *)(a1 + 8);
      goto LABEL_160;
    }
LABEL_278:
    uint64_t v15 = v23;
    goto LABEL_279;
  }
LABEL_161:
  if ((v40 & 0x40) != 0 && (*(unsigned char *)(a1 + 640) & 0x40) != 0)
  {
    uint64_t v82 = sugg_prepared(a1, a2, v14, v3, 1, v164, v166);
    uint64_t v15 = v82;
    *(_DWORD *)(a1 + 16) = v82;
    if ((v82 & 0x80000000) != 0 || !v82) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 8) & 0x80) != 0 && (*(unsigned char *)(a1 + 640) & 0x80) != 0)
  {
    uint64_t v83 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)__n, v162);
    uint64_t v15 = v83;
    *(_DWORD *)(a1 + 16) = v83;
    if ((v83 & 0x80000000) != 0 || !v83) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if (*(unsigned char *)(a1 + 9) & 1) != 0 && (*(unsigned char *)(a1 + 641))
  {
    uint64_t v84 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v157, SHIDWORD(v156));
    uint64_t v15 = v84;
    *(_DWORD *)(a1 + 16) = v84;
    if ((v84 & 0x80000000) != 0 || !v84) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 2) != 0 && (*(unsigned char *)(a1 + 641) & 2) != 0)
  {
    uint64_t v85 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v155, v156);
    uint64_t v15 = v85;
    *(_DWORD *)(a1 + 16) = v85;
    if ((v85 & 0x80000000) != 0 || !v85) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 4) != 0 && (*(unsigned char *)(a1 + 641) & 4) != 0)
  {
    uint64_t v86 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v154, SHIDWORD(v153));
    uint64_t v15 = v86;
    *(_DWORD *)(a1 + 16) = v86;
    if ((v86 & 0x80000000) != 0 || !v86) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 8) != 0 && (*(unsigned char *)(a1 + 641) & 8) != 0)
  {
    uint64_t v87 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v152, v153);
    uint64_t v15 = v87;
    *(_DWORD *)(a1 + 16) = v87;
    if ((v87 & 0x80000000) != 0 || !v87) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 0x10) != 0 && (*(unsigned char *)(a1 + 641) & 0x10) != 0)
  {
    uint64_t v88 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v151, v150);
    uint64_t v15 = v88;
    *(_DWORD *)(a1 + 16) = v88;
    if ((v88 & 0x80000000) != 0 || !v88) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 8) & 4) != 0 && *(_DWORD *)(a1 + 632) && (*(unsigned char *)(a1 + 640) & 0x20) != 0)
  {
    uint64_t v148 = v11;
    uint64_t v89 = *(void *)a1;
    __strncpy_chk();
    __dst[v14] = 0;
    if (v14 >= 1)
    {
      for (uint64_t j = 0; v14 != j; ++j)
      {
        if (!v3)
        {
          uint64_t v91 = a2[j];
          uint64_t v92 = *(void *)(v89 + 8 * v91 + 1024);
          if ((v92 & 4) != 0)
          {
            __dst[j] = *(unsigned char *)(v89 + v91);
            uint64_t v93 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, 0);
            uint64_t v15 = v93;
            if ((v93 & 0x80000000) != 0) {
              goto LABEL_279;
            }
            if (v93)
            {
              *(_DWORD *)(a1 + 652) = 1;
              int v94 = __dst;
            }
            else
            {
              int v94 = 0;
            }
            uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v94);
            if ((int)v23 < 1) {
              goto LABEL_278;
            }
            uint64_t v91 = a2[j];
            __dst[j] = v91;
            uint64_t v92 = *(void *)(v89 + 8 * v91 + 1024);
          }
          if ((v92 & 2) != 0)
          {
            __dst[j] = *(unsigned char *)(v89 + v91 + 256);
            uint64_t v95 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, 0);
            uint64_t v15 = v95;
            if ((v95 & 0x80000000) != 0) {
              goto LABEL_279;
            }
            if (v95)
            {
              *(_DWORD *)(a1 + 652) = 1;
              BOOL v96 = __dst;
            }
            else
            {
              BOOL v96 = 0;
            }
            uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v96);
            if ((int)v23 < 1) {
              goto LABEL_278;
            }
            __dst[j] = a2[j];
          }
        }
      }
    }
    uint64_t v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v11 = v148;
  }
  if ((*(unsigned char *)(a1 + 9) & 0x20) != 0 && (*(unsigned char *)(a1 + 641) & 0x20) != 0)
  {
    uint64_t v97 = sugg_prepared(a1, a2, v14, v3, 1, v149, v9);
    uint64_t v15 = v97;
    *(_DWORD *)(a1 + 16) = v97;
    if ((v97 & 0x80000000) != 0 || !v97) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 0x40) != 0 && (*(unsigned char *)(a1 + 641) & 0x40) != 0)
  {
    uint64_t v98 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v11, v8);
    uint64_t v15 = v98;
    *(_DWORD *)(a1 + 16) = v98;
    if ((v98 & 0x80000000) != 0 || !v98) {
      return v15;
    }
    uint64_t v15 = 1;
  }
  if ((*(unsigned char *)(a1 + 9) & 0x80) != 0 && (*(unsigned char *)(a1 + 642) & 2) != 0)
  {
    memset(v168, 0, sizeof(v168));
    uint64_t v99 = a1 + 24;
    int v167 = cdict_size(a1 + 24);
    if (v14 > (int)v3)
    {
      int v158 = v3 - 1;
      uint64_t v3 = (int)v3;
      do
      {
        if (v167 >= 1)
        {
          for (int k = 0; k != v167; ++k)
          {
            cdict_access(a1 + 24, k, (uint64_t)v168);
            uint64_t v101 = *(void *)&v168[0] + SDWORD2(v168[0]);
            int v104 = *(unsigned __int8 *)(v101 + 20);
            uint64_t v103 = v101 + 20;
            int v102 = v104;
            int v105 = &a2[v3];
            if (v104)
            {
              while (v102 == *v105)
              {
                int v106 = *(unsigned __int8 *)++v103;
                int v102 = v106;
                ++v105;
                if (!v106) {
                  goto LABEL_237;
                }
              }
            }
            else
            {
LABEL_237:
              if (v3 < 1)
              {
                unsigned int v107 = 0;
              }
              else
              {
                memcpy(__dst, a2, v3);
                unsigned int v107 = v158 + 1;
              }
              char v108 = *(unsigned char *)(v103 + 1);
              if (v108)
              {
                int v109 = (unsigned __int8 *)(v103 + 2);
                uint64_t v110 = v3 & ~((int)v3 >> 31);
                do
                {
                  unsigned int v107 = v110 + 1;
                  __dst[v110] = v108;
                  int v111 = *v109++;
                  char v108 = v111;
                  ++v110;
                }
                while (v111);
              }
              uint64_t v112 = v107;
              do
              {
                int v113 = *v105++;
                __dst[v112++] = v113;
              }
              while (v113);
              uint64_t v114 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
              uint64_t v15 = v114;
              if ((v114 & 0x80000000) != 0) {
                goto LABEL_279;
              }
              if (v114)
              {
                *(_DWORD *)(a1 + 652) = 1;
                unsigned __int8 v115 = __dst;
              }
              else
              {
                unsigned __int8 v115 = 0;
              }
              uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v115);
              if ((int)v23 < 1) {
                goto LABEL_278;
              }
            }
          }
        }
        ++v3;
        ++v158;
      }
      while (v3 != v14);
    }
    if (v14 >= 1)
    {
      size_t v116 = 0;
      uint64_t v159 = v14;
      int v117 = -1;
      int v118 = __dst;
      do
      {
        size_t v165 = v116;
        int __na = v117 + 1;
        if (v167 >= 1)
        {
          int v119 = 0;
          int v163 = &a2[v116];
          do
          {
            uint64_t v120 = v99;
            cdict_access(v99, v119, (uint64_t)v168);
            uint64_t v121 = *(void *)&v168[0];
            uint64_t v122 = SDWORD2(v168[0]);
            uint64_t v123 = *(void *)&v168[0] + SDWORD2(v168[0]);
            int v124 = (unsigned char *)(v123 + 20);
            uint64_t v125 = (unsigned __int8 *)(v123 + 22);
            uint64_t v126 = (unsigned __int8 *)(v123 + 20);
            do
            {
              uint64_t v127 = v125;
              int v128 = *v126++;
              ++v125;
            }
            while (v128);
            int v129 = *v126;
            BOOL v130 = v163;
            if (v129)
            {
              while (v129 == *v130)
              {
                ++v130;
                int v131 = *v127++;
                int v129 = v131;
                if (!v131) {
                  goto LABEL_261;
                }
              }
            }
            else
            {
LABEL_261:
              if (v165)
              {
                memcpy(__dst, a2, v165);
                unsigned int v132 = __na;
              }
              else
              {
                unsigned int v132 = 0;
              }
              LOBYTE(v133) = *v124;
              if (*v124)
              {
                uint64_t v134 = 0;
                do
                {
                  v118[v134] = v133;
                  int v133 = *(unsigned __int8 *)(v121 + v122 + 21 + v134++);
                }
                while (v133);
                unsigned int v132 = v165 + v134;
              }
              uint64_t v135 = v132;
              do
              {
                int v136 = *v130++;
                __dst[v135++] = v136;
              }
              while (v136);
              uint64_t v137 = (*(uint64_t (**)(void, char *, void))(a1 + 616))(*(void *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
              uint64_t v15 = v137;
              if ((v137 & 0x80000000) != 0) {
                goto LABEL_279;
              }
              if (v137)
              {
                *(_DWORD *)(a1 + 652) = 1;
                uint64_t v138 = __dst;
              }
              else
              {
                uint64_t v138 = 0;
              }
              uint64_t v23 = (*(uint64_t (**)(void, char *))(a1 + 624))(*(void *)(a1 + 608), v138);
              if ((int)v23 < 1) {
                goto LABEL_278;
              }
            }
            ++v119;
            uint64_t v99 = v120;
          }
          while (v119 != v167);
        }
        size_t v116 = v165 + 1;
        ++v118;
        int v117 = __na;
      }
      while (v165 + 1 != v159);
    }
    uint64_t v15 = 1;
    goto LABEL_279;
  }
  return v15;
}

uint64_t sugg_prepared(uint64_t a1, char *a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a4 < a3)
  {
    uint64_t v9 = *(void *)a1;
    int v41 = a4 - 1;
    uint64_t v10 = a4;
    uint64_t v11 = a7;
    int v39 = a7;
    do
    {
      if (a7 >= 1)
      {
        uint64_t v12 = 0;
        while (1)
        {
          int v13 = *(unsigned char **)(a6 + 16 * v12);
          unsigned int v14 = *v13;
          uint64_t v15 = &a2[v10];
          if (*v13)
          {
            uint64_t v16 = v13 + 1;
            uint64_t v15 = &a2[v10];
            while (*(unsigned __int8 *)(v9 + v14 + 768) == *v15)
            {
              ++v15;
              unsigned int v17 = *v16++;
              unsigned int v14 = v17;
              if (!v17) {
                goto LABEL_9;
              }
            }
          }
          else
          {
LABEL_9:
            if (v10 < 1)
            {
              LODWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
            }
            else
            {
              memcpy(__dst, a2, v10);
              LODWORD(v1_Block_object_dispose(&STACK[0x510], 8) = v41 + 1;
            }
            uint64_t v19 = *(unsigned char **)(a6 + 16 * v12 + 8);
            unsigned int v20 = *v19;
            if (*v19)
            {
              int v21 = v19 + 1;
              uint64_t v18 = v10 & ~((int)v10 >> 31);
              do
              {
                __dst[v18++] = *(unsigned char *)(v9 + v20 + 768);
                unsigned int v22 = *v21++;
                unsigned int v20 = v22;
              }
              while (v22);
            }
            uint64_t v23 = v18;
            uint64_t v18 = v18;
            do
            {
              int v24 = *v15++;
              __dst[v18++] = v24;
            }
            while (v24);
            uint64_t result = try_f(a1, __dst, v23, *(unsigned int *)(a1 + 648), a5);
            if ((int)result < 1) {
              return result;
            }
          }
          if (++v12 == v11)
          {
            uint64_t v26 = 0;
            while (1)
            {
              uint64_t v27 = (unsigned __int8 **)(a6 + 16 * v26);
              int v28 = v27[1];
              unsigned int v29 = *v28;
              uint64_t v30 = &a2[v10];
              if (*v28)
              {
                uint64_t v31 = v28 + 1;
                uint64_t v30 = &a2[v10];
                while (*(unsigned __int8 *)(v9 + v29 + 768) == *v30)
                {
                  ++v30;
                  unsigned int v32 = *v31++;
                  unsigned int v29 = v32;
                  if (!v32) {
                    goto LABEL_24;
                  }
                }
              }
              else
              {
LABEL_24:
                if (v10 < 1)
                {
                  LODWORD(v33) = 0;
                }
                else
                {
                  memcpy(__dst, a2, v10);
                  LODWORD(v33) = v41 + 1;
                }
                unsigned int v34 = **v27;
                if (**v27)
                {
                  uint64_t v35 = *v27 + 1;
                  uint64_t v33 = v10 & ~((int)v10 >> 31);
                  do
                  {
                    __dst[v33++] = *(unsigned char *)(v9 + v34 + 768);
                    unsigned int v36 = *v35++;
                    unsigned int v34 = v36;
                  }
                  while (v36);
                }
                uint64_t v37 = v33;
                uint64_t v33 = v33;
                do
                {
                  int v38 = *v30++;
                  __dst[v33++] = v38;
                }
                while (v38);
                uint64_t result = try_f(a1, __dst, v37, *(unsigned int *)(a1 + 648), a5);
                if ((int)result < 1) {
                  return result;
                }
              }
              if (++v26 == v11) {
                goto LABEL_34;
              }
            }
          }
        }
      }
LABEL_34:
      ++v10;
      ++v41;
      a7 = v39;
    }
    while (v10 != a3);
  }
  return 1;
}

uint64_t sugg_capitalize1(uint64_t *a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  __strncpy_chk();
  __s[a3] = 0;
  if (a4) {
    return 1;
  }
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(v10 + 8 * v12 + 1024);
  if ((v13 & 4) != 0)
  {
    __s[0] = *(unsigned char *)(v10 + v12);
    uint64_t result = try_f((uint64_t)a1, __s, 0, 0, a5);
    if ((int)result < 1) {
      return result;
    }
    uint64_t v12 = *a2;
    uint64_t v13 = *(void *)(v10 + 8 * v12 + 1024);
  }
  if ((v13 & 2) == 0) {
    return 1;
  }
  __s[0] = *(unsigned char *)(v10 + v12 + 256);
  LODWORD(result) = try_f((uint64_t)a1, __s, 0, 0, a5);
  if ((int)result >= 1) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t try_f(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = __s;
  if (a5 == 2)
  {
    uint64_t v15 = strchr(__s, 32);
    if (!v15) {
      return 1;
    }
    uint64_t v16 = v15;
    if (v15 > v6 && (LOBYTE(v17) = *(v15 - 1), strchr(try_2_words_punctu, (char)v17)))
    {
      int v17 = v17;
      *(v16 - 1) = 0;
    }
    else
    {
      int v17 = 0;
    }
    char v21 = *v16;
    *uint64_t v16 = 0;
    uint64_t v20 = (*(uint64_t (**)(void, const char *, uint64_t))(a1 + 616))(*(void *)(a1 + 600), v6, a4);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    uint64_t v22 = (*(uint64_t (**)(void, const char *, uint64_t))(a1 + 616))(*(void *)(a1 + 600), &v6[(int)v16 - (int)v6 + 1], a4);
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
    *uint64_t v16 = v21;
    if (v17) {
      *(v16 - 1) = v17;
    }
    uint64_t v23 = 0;
    if (v20 && v22)
    {
      *(_DWORD *)(a1 + 652) = 1;
      uint64_t v23 = v6;
    }
    int v24 = *(uint64_t (**)(uint64_t, const char *))(a1 + 624);
    uint64_t v25 = *(void *)(a1 + 608);
LABEL_50:
    return v24(v25, v23);
  }
  if (a5 != 3)
  {
    if (a5 == 4)
    {
      int he_language = get_he_language(*(void *)a1);
      if (he_language == 14)
      {
        int v10 = 3;
        unsigned int v35 = 4;
        uint64_t v13 = 10;
        uint64_t v11 = 2;
        uint64_t v33 = corr_typewriter_hun;
        unsigned int v34 = corr_more_accents_hun;
        uint64_t v12 = corr_accents_hun;
        unsigned int v14 = corr_y_z_hun;
      }
      else if (he_language == 21)
      {
        int v10 = 3;
        unsigned int v35 = 20;
        uint64_t v33 = corr_typewriter_pol;
        unsigned int v34 = corr_more_accents_pol;
        uint64_t v11 = 2;
        uint64_t v12 = corr_accents_pol;
        uint64_t v13 = 2;
        unsigned int v14 = corr_y_z_pol;
      }
      else
      {
        unsigned int v14 = 0;
        uint64_t v12 = 0;
        uint64_t v33 = 0;
        unsigned int v34 = 0;
        uint64_t v11 = 0;
        uint64_t v13 = 0;
        unsigned int v35 = 0;
        int v10 = 0;
      }
      size_t v26 = strlen(v6);
      if ((int)v26 > 64) {
        return 4294966286;
      }
      unsigned int v32 = v10;
      uint64_t v27 = (*(uint64_t (**)(void, const char *, uint64_t))(a1 + 616))(*(void *)(a1 + 600), v6, a4);
      uint64_t v20 = v27;
      if ((v27 & 0x80000000) == 0)
      {
        uint64_t v28 = *(unsigned int *)(a1 + 16);
        if (v27 || (int)v28 < 1)
        {
          return *(unsigned int *)(a1 + 16);
        }
        else
        {
          if ((*(unsigned char *)(a1 + 640) & 0x40) != 0)
          {
            uint64_t v29 = sugg_prepared(a1, v6, v26, a3, 1, v14, v11);
            uint64_t v20 = v29;
            *(_DWORD *)(a1 + 16) = v29;
            if ((v29 & 0x80000000) != 0 || !v29) {
              return v20;
            }
            uint64_t v28 = 1;
          }
          if (*(unsigned char *)(a1 + 641))
          {
            uint64_t v30 = sugg_prepared(a1, v6, v26, a3, 1, v12, v13);
            uint64_t v20 = v30;
            *(_DWORD *)(a1 + 16) = v30;
            if ((v30 & 0x80000000) != 0 || !v30) {
              return v20;
            }
            uint64_t v28 = 1;
          }
          if ((*(unsigned char *)(a1 + 641) & 2) != 0)
          {
            uint64_t v31 = sugg_prepared(a1, v6, v26, a3, 1, v34, v35);
            uint64_t v20 = v31;
            *(_DWORD *)(a1 + 16) = v31;
            if ((v31 & 0x80000000) != 0 || !v31) {
              return v20;
            }
            uint64_t v28 = 1;
          }
          uint64_t v20 = v28;
          if ((*(unsigned char *)(a1 + 641) & 0x40) != 0)
          {
            uint64_t v20 = sugg_prepared(a1, v6, v26, a3, 1, v33, v32);
            *(_DWORD *)(a1 + 16) = v20;
          }
        }
      }
      return v20;
    }
    uint64_t v19 = (*(uint64_t (**)(void, char *, uint64_t))(a1 + 616))(*(void *)(a1 + 600), __s, a4);
    uint64_t v20 = v19;
    if ((v19 & 0x80000000) != 0) {
      return v20;
    }
    if (v19) {
      *(_DWORD *)(a1 + 652) = 1;
    }
    else {
      uint64_t v6 = 0;
    }
    int v24 = *(uint64_t (**)(uint64_t, const char *))(a1 + 624);
    uint64_t v25 = *(void *)(a1 + 608);
    uint64_t v23 = v6;
    goto LABEL_50;
  }
  return suggest_1_corr();
}

uint64_t PRAltMod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v189 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a2 + 8);
  int v184 = 0;
  *(void *)int v183 = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned __int16 v178 = 0;
  int v177 = 14707757;
  if (*(unsigned char *)(a2 + 20) == 5)
  {
    uint64_t v9 = *(void *)(a4 + 24);
    unint64_t v10 = *(unsigned __int16 *)(v9 + 32);
    if (v10 >= 4
      && (!SLstrcmp((unsigned char *)(*(void *)(v9 + 16) + (v10 - 3)), "-ci")
       || !SLstrcmp((unsigned char *)(*(unsigned __int16 *)(*(void *)(a4 + 24) + 32)+ *(void *)(*(void *)(a4 + 24) + 16)- 3), (unsigned __int8 *)&v177)))
    {
      *(_WORD *)(a3 + 2) -= 3;
      if (*(_WORD *)(a3 + 6)) {
        *(_WORD *)(a3 + 6) -= 3;
      }
    }
  }
  uint64_t v11 = *(uint64_t **)(a3 + 24);
  if (!v11) {
    return 0;
  }
  uint64_t v165 = *((unsigned __int16 *)v11 + 9);
  if (!*((_WORD *)v11 + 9) || !*(void *)(a2 + 120)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(v8 + 64);
  if (v12 == v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(v12 + 72);
  if (!v14)
  {
LABEL_18:
    char v173 = 1;
    goto LABEL_19;
  }
  if ((*(_WORD *)(v14 + 4) & 0x7080) == 0)
  {
LABEL_17:
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (v14 == v13)
  {
    char v173 = 0;
    uint64_t v14 = *(void *)(v8 + 64);
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 72);
    if (v15)
    {
      char v173 = 0;
      uint64_t v157 = *(void *)(v14 + 72);
      if ((*(_WORD *)(v15 + 4) & 0x7080) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      char v173 = 0;
    }
  }
LABEL_19:
  uint64_t v157 = 0;
LABEL_20:
  uint64_t v172 = v14;
  uint64_t v140 = a3;
  uint64_t v149 = a4;
  uint64_t v16 = *(void *)(*(void *)(a4 + 24) + 80);
  if (!v16 || (*(_WORD *)(v16 + 4) & 0x7080) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v141 = v16;
  uint64_t v17 = 0;
  int v168 = 0;
  size_t v18 = 0;
  memset(v185, 0, sizeof(v185));
  int v181 = 0;
  __int16 v182 = 0;
  int v179 = 0;
  __int16 v180 = 0;
  int v162 = v11;
  do
  {
LABEL_24:
    uint64_t v175 = *v11;
    uint64_t v170 = *(__int16 *)(v11[1] + 2 * v17);
    uint64_t v19 = (char *)(*v11 + v170);
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *v19;
    if ((*(_DWORD *)(v20 + 4 * v21) & 0x60000040) == 0) {
      goto LABEL_247;
    }
    unsigned __int16 v22 = 0;
    uint64_t v23 = (unsigned __int8 *)(v19 - 1);
    char v24 = 1;
    uint64_t v25 = (unsigned __int8 *)(*v11 + v170);
    while (v21 >= 45)
    {
      if (v21 > 45)
      {
        if (v21 == 46)
        {
          char v24 = 0;
          ++v22;
          goto LABEL_50;
        }
        if (v21 == 133 || v21 == 151)
        {
LABEL_42:
          char v24 = 0;
          goto LABEL_50;
        }
      }
      else if (*(v25 - 1) == 45)
      {
        --v22;
        goto LABEL_50;
      }
LABEL_29:
      if ((*(_DWORD *)(v20 + 4 * v21) & 0x60000040) == 0) {
        char v24 = 0;
      }
      unsigned int v26 = *++v25;
      uint64_t v21 = v26;
      ++v22;
      ++v23;
    }
    if (v21 <= 31)
    {
      if (!v21)
      {
        uint64_t v25 = 0;
        goto LABEL_50;
      }
      if (v21 == 9) {
        goto LABEL_42;
      }
      goto LABEL_29;
    }
    if (v21 != 32)
    {
      if (v21 == 44) {
        goto LABEL_42;
      }
      goto LABEL_29;
    }
    do
    {
      int v28 = *++v23;
      int v27 = v28;
    }
    while (v28 == 32);
    if (v27) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = 0;
    }
LABEL_50:
    size_t v29 = *(void *)(a2 + 128);
    *(_DWORD *)(v29 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_DWORD *)(v29 + 140_Block_object_dispose(&STACK[0x510], 8) = 1;
    *(unsigned char *)(v29 + 1339) = 0;
    if ((v22 & 0xFFC0) != 0) {
      int v30 = 64;
    }
    else {
      int v30 = v22;
    }
    __strncpy_chk();
    v188[v30] = 0;
    int v31 = PRIcs(a1, a2, 0, 0, 0, v188, 0, v29, 3, 0);
    if (v31 == 11) {
      goto LABEL_247;
    }
    std::__fs::filesystem::path __s = v19;
    if (v31 == 8) {
      goto LABEL_370;
    }
    unsigned int v32 = *(unsigned __int16 **)(*(void *)(v29 + 3184) + 288);
    unsigned int v33 = *v32;
    int v34 = v32[6] & 0xF | (((v33 >> 8) & 3) << 6) | (v33 >> 6) & 0x30;
    int v35 = *(unsigned __int8 *)(a2 + 20);
    if (v35 != 9)
    {
      if (v35 == 8)
      {
        char v36 = 0;
        if ((v33 & 0x10) != 0)
        {
          int v37 = 15;
          goto LABEL_85;
        }
      }
      else
      {
        char v36 = 0;
      }
      goto LABEL_86;
    }
    unsigned int v38 = *(unsigned __int8 *)(v29 + 1547);
    char v36 = 1;
    if (v38 <= 0x66)
    {
      if (*(unsigned __int8 *)(v29 + 1547) > 0x52u)
      {
        if (v38 != 83)
        {
          if (v38 != 88 && v38 != 90) {
            goto LABEL_86;
          }
          goto LABEL_79;
        }
LABEL_81:
        char v36 = 1;
        if ((*(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548)) & 0x60000040) == 0
          || (*(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548)) & 0x10000000) != 0)
        {
          goto LABEL_86;
        }
        goto LABEL_83;
      }
      if (v38 != 71)
      {
        if (v38 != 80) {
          goto LABEL_86;
        }
        goto LABEL_76;
      }
LABEL_78:
      if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x6E) {
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    if (*(unsigned __int8 *)(v29 + 1547) <= 0x72u)
    {
      if (v38 == 103) {
        goto LABEL_78;
      }
      if (v38 != 112) {
        goto LABEL_86;
      }
LABEL_76:
      if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x73) {
        goto LABEL_79;
      }
LABEL_80:
      char v36 = 1;
      goto LABEL_86;
    }
    if (v38 == 115) {
      goto LABEL_81;
    }
    if (v38 != 120 && v38 != 122) {
      goto LABEL_86;
    }
LABEL_79:
    char v36 = 1;
LABEL_83:
    if ((v33 & 0x400) != 0)
    {
      int v37 = 256;
LABEL_85:
      v34 |= v37;
    }
LABEL_86:
    int v39 = *(unsigned __int8 *)(v29 + 1547) | 0x20;
    if (v39 == 101) {
      v34 |= 0x200u;
    }
    if (v39 == 105) {
      int v40 = v34 | 0x400;
    }
    else {
      int v40 = v34;
    }
    int v158 = *(unsigned __int8 *)(v29 + 1614);
    if (!*(unsigned char *)(v29 + 1614))
    {
      unsigned __int16 v42 = *(_WORD *)(v29 + 1612);
      if (!v24)
      {
        LODWORD(v29) = 0;
        int v151 = 0;
        int v120 = 0;
        goto LABEL_268;
      }
      if (v25)
      {
        uint64_t v117 = *v25;
        if ((*(_DWORD *)(v20 + 4 * v117) & 0x60000040) != 0)
        {
          int v118 = 0;
          int v164 = v25 - __s;
          unsigned __int16 v161 = *(_WORD *)(v29 + 1612);
          int v167 = v40;
          while (1)
          {
            if (v117 <= 0x2Eu)
            {
              if (v117 == 45)
              {
                if (*(v25 - 1) == 45)
                {
                  int v135 = v118 - 1;
                  goto LABEL_296;
                }
                goto LABEL_261;
              }
              if (((1 << v117) & 0x100100000201) != 0) {
                goto LABEL_295;
              }
              if (v117 == 46) {
                break;
              }
            }
            if (v117 == 133 || v117 == 151)
            {
LABEL_295:
              int v135 = v118;
              goto LABEL_296;
            }
LABEL_261:
            v188[(unsigned __int16)v118] = v117;
            char v119 = *++v25;
            LOBYTE(v117) = v119;
            ++v118;
          }
          v188[(unsigned __int16)v118] = 46;
          int v135 = v118 + 1;
LABEL_296:
          int v151 = v135;
          v188[(unsigned __int16)v135] = 0;
          int v132 = PRIcs(a1, a2, 0, 0, 0, v188, 0, v29, 3, 0);
          if (v132 == 11)
          {
            LODWORD(v29) = 0;
            int v44 = 0;
            int v45 = 0;
            int v46 = 0;
            char v24 = 0;
            unsigned int v47 = v167;
            unsigned int v43 = 0;
            int v48 = 0;
            unsigned __int16 v42 = v161;
            goto LABEL_94;
          }
          int v40 = v167;
          if (v132 == 8)
          {
LABEL_370:
            uint64_t v139 = *(void *)(a1 + 32);
            *(void *)uint64_t v139 = 0xDC000000A0;
            *(_WORD *)(v139 + _Block_object_dispose(&STACK[0x510], 8) = 900;
            return 220;
          }
          if (*(unsigned char *)(v29 + 1614))
          {
            LODWORD(v29) = 0;
            int v151 = 0;
            int v120 = 0;
            int v35 = *(unsigned __int8 *)(a2 + 20);
            unsigned __int16 v42 = v161;
            goto LABEL_268;
          }
          unsigned int v133 = *v32;
          int v120 = v32[6] & 0xF | (((v133 >> 8) & 3) << 6) | (v133 >> 6) & 0x30;
          int v35 = *(unsigned __int8 *)(a2 + 20);
          int v134 = *(unsigned __int8 *)(v29 + 1547);
          if (v35 != 9)
          {
            LODWORD(v29) = v164;
            unsigned __int16 v42 = v161;
            goto LABEL_361;
          }
          if (*(unsigned __int8 *)(v29 + 1547) > 0x66u)
          {
            unsigned __int16 v42 = v161;
            if (*(unsigned __int8 *)(v29 + 1547) > 0x72u)
            {
              if (v134 != 115)
              {
                if (v134 == 120 || v134 == 122) {
                  goto LABEL_354;
                }
LABEL_360:
                LODWORD(v29) = v164;
                goto LABEL_361;
              }
              goto LABEL_356;
            }
            if (v134 != 103)
            {
              if (v134 != 112) {
                goto LABEL_360;
              }
LABEL_353:
              if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) != 0x73) {
                goto LABEL_360;
              }
              goto LABEL_354;
            }
          }
          else
          {
            unsigned __int16 v42 = v161;
            if (*(unsigned __int8 *)(v29 + 1547) > 0x52u)
            {
              if (v134 != 83)
              {
                if (v134 != 88 && v134 != 90) {
                  goto LABEL_360;
                }
LABEL_354:
                LODWORD(v29) = v164;
LABEL_358:
                if ((v133 & 0x400) != 0) {
                  v120 |= 0x100u;
                }
LABEL_361:
                int v138 = v134 | 0x20;
                if (v138 == 101) {
                  v120 |= 0x200u;
                }
                if (v138 == 105) {
                  v120 |= 0x400u;
                }
LABEL_268:
                int v45 = 0;
                if (v35 == 12 && v25)
                {
                  uint64_t v121 = v25 - 1;
                  int v45 = v25 - 1 - (v175 + v170);
                  uint64_t v122 = v25 + 1;
                  do
                  {
                    uint64_t v123 = v122;
                    unsigned int v125 = *++v121;
                    uint64_t v124 = v125;
                    ++v45;
                    ++v122;
                  }
                  while (v125 == 32);
                  int v48 = 0;
                  if ((*(_DWORD *)(v20 + 4 * v124) & 0x60000040) != 0)
                  {
                    int v126 = 0;
                    while (1)
                    {
                      if (v124 <= 0x2E)
                      {
                        if (v124 == 45)
                        {
                          if (*(v123 - 2) == 45) {
                            goto LABEL_300;
                          }
                          goto LABEL_281;
                        }
                        if (((1 << v124) & 0x500100000201) != 0) {
                          goto LABEL_300;
                        }
                      }
                      if (v124 == 133 || v124 == 151)
                      {
LABEL_300:
                        unsigned int v47 = v40;
                        unsigned int v43 = v120;
                        int v44 = v151;
                        int v46 = v126;
                        goto LABEL_94;
                      }
LABEL_281:
                      v188[(unsigned __int16)v126++] = v124;
                      int v127 = *v123++;
                      LODWORD(v124) = v127;
                    }
                  }
                  int v45 = 0;
                  int v46 = 0;
                  unsigned int v47 = v40;
                  unsigned int v43 = v120;
                }
                else
                {
                  int v46 = 0;
                  unsigned int v47 = v40;
                  unsigned int v43 = v120;
                  int v48 = 0;
                }
                int v44 = v151;
                goto LABEL_94;
              }
LABEL_356:
              int v137 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548));
              if ((v137 & 0x60000040) == 0) {
                goto LABEL_360;
              }
              LODWORD(v29) = v164;
              if ((v137 & 0x10000000) == 0) {
                goto LABEL_358;
              }
              goto LABEL_361;
            }
            if (v134 != 71) {
              goto LABEL_352;
            }
          }
          if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x6E) {
            goto LABEL_354;
          }
LABEL_352:
          if (v134 != 80) {
            goto LABEL_360;
          }
          goto LABEL_353;
        }
        LODWORD(v29) = 0;
        int v44 = 0;
        int v45 = 0;
        int v46 = 0;
        char v24 = 0;
LABEL_306:
        unsigned int v47 = v40;
        unsigned int v43 = 0;
        goto LABEL_93;
      }
      if (!v141)
      {
        LODWORD(v29) = 0;
        int v44 = 0;
        int v45 = 0;
        int v46 = 0;
        char v24 = 1;
        goto LABEL_306;
      }
      int v48 = 0;
      if ((*(unsigned char *)(v141 + 94) & 2) != 0)
      {
        LODWORD(v29) = 0;
        int v44 = 0;
        int v45 = 0;
        int v46 = 0;
        char v24 = 1;
        unsigned int v47 = v40;
        unsigned int v43 = 0;
        goto LABEL_94;
      }
      unsigned int v128 = *(unsigned __int16 *)(v141 + 98);
      int v129 = (v128 >> 2) & 0xC0 | (v128 >> 6) & 0x30;
      BOOL v130 = *(unsigned __int8 **)(v141 + 16);
      if ((v36 & 1) == 0)
      {
        int v131 = *v130;
        goto LABEL_346;
      }
      int v131 = *v130;
      if (!*(_WORD *)(v141 + 32))
      {
LABEL_346:
        int v136 = v131 | 0x20;
        if (v136 == 101) {
          v129 |= 0x200u;
        }
        LODWORD(v29) = 0;
        int v44 = 0;
        int v45 = 0;
        int v46 = 0;
        if (v136 == 105)
        {
          unsigned int v47 = v40;
          unsigned int v43 = v129 | 0x400;
          char v24 = 1;
        }
        else
        {
          char v24 = 1;
          unsigned int v47 = v40;
          unsigned int v43 = v129;
        }
        goto LABEL_94;
      }
      if (*v130 > 0x66u)
      {
        if (*v130 > 0x72u)
        {
          if (v131 != 115)
          {
            if (v131 != 120 && v131 != 122) {
              goto LABEL_346;
            }
            goto LABEL_344;
          }
          goto LABEL_342;
        }
        if (v131 != 103)
        {
          if (v131 != 112) {
            goto LABEL_346;
          }
LABEL_340:
          if ((v130[1] | 0x20) == 0x73) {
            goto LABEL_344;
          }
          goto LABEL_346;
        }
      }
      else
      {
        if (*v130 > 0x52u)
        {
          if (v131 != 83)
          {
            if (v131 != 88 && v131 != 90) {
              goto LABEL_346;
            }
LABEL_344:
            if ((v128 & 0x400) != 0) {
              v129 |= 0x100u;
            }
            goto LABEL_346;
          }
LABEL_342:
          if ((*(_DWORD *)(v20 + 4 * v130[1]) & 0x60000040) == 0
            || (*(_DWORD *)(v20 + 4 * v130[1]) & 0x10000000) != 0)
          {
            goto LABEL_346;
          }
          goto LABEL_344;
        }
        if (v131 != 71)
        {
LABEL_339:
          if (v131 != 80) {
            goto LABEL_346;
          }
          goto LABEL_340;
        }
      }
      if ((v130[1] | 0x20) == 0x6E) {
        goto LABEL_344;
      }
      goto LABEL_339;
    }
    unsigned int v41 = v40;
    unsigned __int16 v42 = strlen((const char *)(v29 + 1614));
    unsigned int v43 = v41;
    LODWORD(v29) = 0;
    int v44 = 0;
    int v45 = 0;
    int v46 = 0;
    unsigned int v47 = 0;
    char v24 = 1;
LABEL_93:
    int v48 = v158;
LABEL_94:
    __int16 v153 = v47;
    LOBYTE(v49) = 0;
    BOOL v50 = (v43 & 0xF) != 0;
    int v155 = (2 * v50) | (v43 >> 8) & 1 | (v43 >> 2) & 0x3C;
    int v145 = (2 * v50) & 0xF | (v43 >> 8) & 1 | (v43 >> 2) & 0xC;
    int v146 = (v43 >> 2) & 0x30;
    BOOL v51 = (v47 & 0xF) != 0;
    int v148 = (v47 >> 2) & 0x30;
    int v156 = (2 * v51) | (v47 >> 8) & 1 | (v47 >> 2) & 0x3C;
    unsigned int v144 = v43 & 0xC0;
    int v142 = (2 * v51) & 0xF | (v47 >> 8) & 1 | (v47 >> 2) & 0xC;
    unsigned int v154 = v43 & 0x30;
    int v152 = v47 & 0xF;
    int v176 = 1;
    int v147 = 1 << ((v47 & 0xF) - 1);
    int v143 = v47 & 0x600;
    unsigned __int16 v171 = v46;
    unsigned int v160 = v46 + v45;
    unsigned __int16 v150 = v44;
    unsigned int v159 = v44 + v29;
    *(void *)int v166 = v42;
    unsigned __int16 v163 = v29;
    while (2)
    {
      int v52 = *(unsigned __int8 *)(a2 + 20);
      if (v52 != 12)
      {
        if ((v49 & 0xFE) != 0) {
          int v49 = v49;
        }
        else {
          int v49 = 1;
        }
        BOOL v53 = v49 == 3 && v52 == 8;
        if (!v53) {
          goto LABEL_106;
        }
LABEL_120:
        if ((v173 & 1) == 0)
        {
LABEL_121:
          size_t v56 = *(unsigned __int16 *)(v172 + 32);
          __strncpy_chk();
          size_t v18 = v56;
          v187[v56] = 0;
          SLfun((uint64_t)v187, 0, (__int16)(v56 - 1), (unsigned __int16 *)&v184 + 1, &v184);
        }
LABEL_122:
        LOBYTE(v49) = 6;
        if (v48) {
          goto LABEL_116;
        }
        goto LABEL_123;
      }
      if (!(_BYTE)v49 && !v171)
      {
        LOBYTE(v49) = 1;
        goto LABEL_106;
      }
      if (v49 == 2) {
        goto LABEL_122;
      }
      if (v49 == 3) {
        goto LABEL_120;
      }
LABEL_106:
      if (v49 == 1 && (unsigned __int16)v29 == 0)
      {
        BOOL v53 = v52 == 12;
        char v55 = v173;
        if (v53)
        {
          LOBYTE(v49) = 1;
        }
        else
        {
          char v55 = 1;
          LOBYTE(v49) = 2;
        }
        if ((v55 & 1) == 0) {
          goto LABEL_121;
        }
      }
      if (v48)
      {
LABEL_116:
        if ((v49 & 0xF8) == 0) {
          LOBYTE(v49) = 7;
        }
        goto LABEL_127;
      }
LABEL_123:
      char v57 = v173;
      if (v49 <= 1u) {
        char v57 = 0;
      }
      if (v49 <= 6u && (v57 & 1) == 0)
      {
LABEL_127:
        int v58 = 0;
        switch((char)v49)
        {
          case 0:
          case 1:
            if ((_BYTE)v49) {
              size_t v29 = v159;
            }
            else {
              size_t v29 = v160;
            }
            if ((_WORD)v29)
            {
              uint64_t v59 = (unsigned __int16)v29;
              uint64_t v60 = v187;
              uint64_t v61 = (unsigned __int16)v29;
              uint64_t v62 = __s;
              do
              {
                unsigned int v64 = *v62++;
                char v63 = v64;
                char v65 = v64 + 32;
                if ((*(_DWORD *)(v7 + 4 * v64) & 0x40000000) != 0) {
                  char v63 = v65;
                }
                *v60++ = v63;
                --v61;
              }
              while (v61);
            }
            else
            {
              uint64_t v59 = 0;
            }
            v187[v59] = 0;
            SLfun((uint64_t)v187, 0, (__int16)(v29 - 1), (unsigned __int16 *)&v184 + 1, &v184);
            uint64_t result = PRAltHsh(HIWORD(v184), (unsigned __int16)v184, v29, 2 * (v49 != 0), a1, a2, (char **)v183, v186);
            if (!result)
            {
              unsigned int v107 = *(const char **)v183;
              if (!*(void *)v183
                || v49 <= 1u
                && !SLstrcmp(*(unsigned char **)v183, *(unsigned __int8 **)(*(void *)(v149 + 16) + 16)))
              {
                size_t v18 = v29;
                LOWORD(v29) = v163;
                goto LABEL_237;
              }
              uint64_t result = PRSetTmpAlt(v166[0], v163, v150, (unsigned __int16)v45, v171, __s, v107, v49, v17, v157, v172, (uint64_t)v185, (uint64_t)&v181, (uint64_t)&v179, &v178, a1, a2);
              if (!result) {
                goto LABEL_265;
              }
            }
            return result;
          case 2:
            uint64_t v66 = *(unsigned __int16 *)(v172 + 32);
            __strncpy_chk();
            v187[v66] = 32;
            int v67 = v66 + 1;
            if (v166[0])
            {
              uint64_t v68 = &v187[(unsigned __int16)v67];
              uint64_t v69 = *(void *)v166;
              int v70 = __s;
              do
              {
                unsigned int v72 = *v70++;
                char v71 = v72;
                char v73 = v72 + 32;
                if ((*(_DWORD *)(v7 + 4 * v72) & 0x40000000) != 0) {
                  char v71 = v73;
                }
                *v68++ = v71;
                --v69;
              }
              while (v69);
            }
            size_t v18 = (v67 + v166[0]);
            SLfun((uint64_t)v187, 0, (__int16)(v66 + LOWORD(v166[0])), (unsigned __int16 *)&v184 + 1, &v184);
            goto LABEL_143;
          case 3:
            if (!v24 || !v154 || v154 == 48) {
              goto LABEL_237;
            }
LABEL_143:
            uint64_t result = PRAltHsh(HIWORD(v184), (unsigned __int16)v184, v18, v49, a1, a2, (char **)v183, v186);
            if (result) {
              return result;
            }
            uint64_t v75 = *(const char **)v183;
            if (*(void *)v183) {
              goto LABEL_263;
            }
            goto LABEL_237;
          case 4:
            if (!v157) {
              goto LABEL_237;
            }
            uint64_t v76 = *(unsigned __int16 *)(v157 + 32);
            __strncpy_chk();
            v187[v76] = 32;
            strncpy(&v187[(unsigned __int16)(v76 + 1)], *(const char **)(v172 + 16), *(unsigned __int16 *)(v172 + 32));
            int v77 = *(unsigned __int16 *)(v172 + 32);
            size_t v29 = (v77 + v76 + 1);
            v187[(unsigned __int16)(v77 + v76 + 1)] = 0;
            int v48 = v158;
            SLfun((uint64_t)v187, 0, (__int16)(v77 + v76), (unsigned __int16 *)&v184 + 1, &v184);
            size_t v18 = v29;
            LOWORD(v29) = v163;
LABEL_152:
            uint64_t result = PRAltHsh(HIWORD(v184), (unsigned __int16)v184, v18, v49, a1, a2, (char **)v183, v186);
            if (result) {
              return result;
            }
            int v78 = *(unsigned __int8 *)(a2 + 20);
            if (!*(void *)v183) {
              goto LABEL_231;
            }
            int v79 = **(unsigned char **)v183;
            int v80 = *(unsigned __int8 *)(*(void *)v183 + 1);
            if (v78 == 9)
            {
              int v81 = *(unsigned __int8 *)(*(void *)v183 + 2);
              uint64_t v82 = (const char *)(*(void *)v183 + 3);
              *(void *)v183 += 3;
              unsigned int v83 = v156;
              if ((v148 & v79) == 0x30)
              {
                if (v144 == 192 || (unsigned int v83 = v142 | (v144 >> 2), !v144)) {
                  unsigned int v83 = v80 & 0x30 | v142;
                }
              }
              if ((~(v79 & v83) & 0xC) == 0)
              {
                if (v154 && v154 != 48)
                {
                  unsigned int v83 = v83 & 0xFFFFFFF3 | (v154 >> 2);
                }
                else
                {
                  int v84 = v80 & 0xC;
                  if ((v80 & 0xC) != 0 && v84 != 12)
                  {
                    unsigned int v83 = v83 & 0xFFFFFFF3 | v84;
                  }
                  else if (v157 {
                         && v49 == 6
                  }
                         && (__int16 v85 = *(_WORD *)(v157 + 98), (v85 & 0x20) == 0)
                         && ((v80 & 1) == 0 || (v85 & 0x40) != 0)
                         && (v85 & 0x30) != 0
                         && (v85 & 0x30) != 0x30)
                  {
                    v83 &= 0xFFFFFFF3;
                  }
                  else
                  {
                    v83 &= ~8u;
                  }
                }
              }
            }
            else
            {
              uint64_t v82 = (const char *)(*(void *)v183 + 2);
              *(void *)v183 += 2;
              int v81 = v80;
              unsigned int v83 = v156;
            }
            if (!v81) {
              goto LABEL_220;
            }
            int v108 = v83 & v79;
            while (1)
            {
              int v109 = *(unsigned __int8 *)v82;
              if (v108 == v109) {
                break;
              }
              ++v82;
              if (v109)
              {
                while (*(unsigned __int8 *)v82++)
                  ;
              }
              if (!(_WORD)--v81)
              {
LABEL_220:
                *(void *)int v183 = v82;
                goto LABEL_231;
              }
            }
            *(void *)int v183 = v82 + 1;
            uint64_t result = PRSetTmpAlt(v166[0], 0, 0, 0, 0, __s, v82 + 1, v49, v17, v157, v172, (uint64_t)v185, (uint64_t)&v181, (uint64_t)&v179, &v178, a1, a2);
            if (result) {
              return result;
            }
            int v176 = 0;
            int v78 = *(unsigned __int8 *)(a2 + 20);
            int v168 = 1;
LABEL_231:
            BOOL v114 = v78 == 12;
            int v115 = v168;
            if (v114) {
              int v115 = 1;
            }
            int v168 = v115;
            int v116 = v176;
            if (v114) {
              int v116 = 0;
            }
            int v176 = v116;
            goto LABEL_237;
          case 5:
            size_t v86 = *(unsigned __int16 *)(v172 + 32);
            size_t v18 = v86;
            __strncpy_chk();
            v187[v86] = 0;
            SLfun((uint64_t)v187, 0, (__int16)(v86 - 1), (unsigned __int16 *)&v184 + 1, &v184);
            uint64_t result = PRAltHsh(HIWORD(v184), (unsigned __int16)v184, v86, 5, a1, a2, (char **)v183, v186);
            if (result) {
              return result;
            }
            if (!*(void *)v183) {
              goto LABEL_237;
            }
            if (!v152) {
              goto LABEL_237;
            }
            unsigned int v87 = **(unsigned char **)v183;
            if (((*(unsigned __int8 *)(*(void *)v183 + 1) | (v87 << 8)) & v147) == 0) {
              goto LABEL_237;
            }
            int v88 = (char)v87;
            int v89 = (v87 >> 6) & 1;
            char v90 = v143 ? 0 : v89;
            BOOL v91 = (v153 & 0x200) == 0 && v88 < 0;
            BOOL v92 = v91;
            if ((v90 & 1) != 0 || v92) {
              goto LABEL_237;
            }
            *(void *)v183 += 2;
            uint64_t result = PRSetTmpAlt(v166[0], 0, 0, 0, 0, __s, *(const char **)v183, 5u, v17, v157, v172, (uint64_t)v185, (uint64_t)&v181, (uint64_t)&v179, &v178, a1, a2);
            goto LABEL_264;
          case 6:
            goto LABEL_152;
          case 7:
            if (v173) {
              goto LABEL_237;
            }
            uint64_t v93 = *(unsigned __int16 *)(v172 + 32);
            __strncpy_chk();
            v187[v93] = 32;
            int v58 = v93 + 1;
LABEL_190:
            if (v166[0])
            {
              int v94 = &v187[(unsigned __int16)v58];
              uint64_t v95 = *(void *)v166;
              BOOL v96 = __s;
              do
              {
                unsigned int v98 = *v96++;
                char v97 = v98;
                char v99 = v98 + 32;
                if ((*(_DWORD *)(v7 + 4 * v98) & 0x40000000) != 0) {
                  char v97 = v99;
                }
                *v94++ = v97;
                --v95;
              }
              while (v95);
            }
            size_t v18 = (v58 + v166[0]);
            v187[(unsigned __int16)(v58 + LOWORD(v166[0]))] = 0;
            SLfun((uint64_t)v187, 0, (__int16)(v58 + LOWORD(v166[0]) - 1), (unsigned __int16 *)&v184 + 1, &v184);
            uint64_t result = PRAltHsh(HIWORD(v184), (unsigned __int16)v184, v18, v49, a1, a2, (char **)v183, v186);
            if (result) {
              return result;
            }
            if (!*(void *)v183) {
              goto LABEL_237;
            }
            int v100 = **(unsigned char **)v183;
            int v101 = *(unsigned __int8 *)(*(void *)v183 + 1);
            if (*(unsigned char *)(a2 + 20) == 9)
            {
              int v102 = *(unsigned __int8 *)(*(void *)v183 + 2);
              uint64_t v103 = (unsigned __int8 *)(*(void *)v183 + 3);
              *(void *)v183 += 3;
              unsigned int v104 = v155;
              if ((v146 & v100) == 0x30) {
                unsigned int v104 = v101 & 0x30 | v145;
              }
              if ((~(v100 & v104) & 0xC) == 0)
              {
                int v105 = v101 & 0xC;
                if ((v101 & 0xC) != 0 && v105 != 12)
                {
                  unsigned int v104 = v104 & 0xFFFFFFF3 | v105;
                }
                else if (v172 {
                       && v49 == 6
                }
                       && (__int16 v106 = *(_WORD *)(v172 + 98), !(v106 & 0x20 | v101 & 1))
                       && (v106 & 0x30) != 0
                       && (v106 & 0x30) != 0x30)
                {
                  v104 &= 0xFFFFFFF3;
                }
                else
                {
                  v104 &= ~8u;
                }
              }
            }
            else
            {
              uint64_t v103 = (unsigned __int8 *)(*(void *)v183 + 2);
              *(void *)v183 += 2;
              int v102 = v101;
              unsigned int v104 = v155;
            }
            if (!v102) {
              goto LABEL_228;
            }
            int v111 = v104 & v100;
            break;
          case 8:
            goto LABEL_190;
          default:
            goto LABEL_237;
        }
        do
        {
          int v112 = *v103;
          if (v111 == v112)
          {
            uint64_t v75 = (const char *)(v103 + 1);
            *(void *)int v183 = v103 + 1;
LABEL_263:
            uint64_t result = PRSetTmpAlt(v166[0], 0, 0, 0, 0, __s, v75, v49, v17, v157, v172, (uint64_t)v185, (uint64_t)&v181, (uint64_t)&v179, &v178, a1, a2);
LABEL_264:
            size_t v29 = v18;
            if (result) {
              return result;
            }
LABEL_265:
            ++v17;
            int v168 = 1;
            size_t v18 = v29;
            uint64_t v11 = v162;
            if (v17 != v165) {
              goto LABEL_24;
            }
            goto LABEL_367;
          }
          ++v103;
          if (v112)
          {
            while (*v103++)
              ;
          }
          --v102;
        }
        while ((_WORD)v102);
LABEL_228:
        *(void *)int v183 = v103;
LABEL_237:
        LOBYTE(v49) = v49 + 1;
        if (v49 <= 8u && (_BYTE)v176) {
          continue;
        }
      }
      break;
    }
LABEL_247:
    ++v17;
    uint64_t v11 = v162;
  }
  while (v17 != v165);
  if (!(_BYTE)v168) {
    return 0;
  }
LABEL_367:
  uint64_t result = PRProcTmpAlts(v157, v172, v185, (uint64_t)&v181, (uint64_t)&v179, v178, v140, a1);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t PRAltHsh(int a1, int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t a6, char **a7, char *a8)
{
  *a7 = 0;
  uint64_t v8 = *(__int16 **)(a6 + 120);
  if (!v8) {
    return 0;
  }
  int v10 = 0;
  int v40 = 0;
  uint64_t v11 = *((void *)v8 + 2);
  unsigned int v38 = (char *)*((void *)v8 + 3);
  unsigned int v12 = *(_DWORD *)(a6 + 40);
  int v13 = *v8;
  int v14 = *((_DWORD *)v8 + 1);
  unsigned int v15 = (unsigned __int16)v8[1];
  unsigned int v16 = (unsigned __int16)v8[4];
  int v17 = a2 % v13;
  int v36 = a3;
  int v37 = *((_DWORD *)v8 + 3);
  int v18 = 2 * (v14 & a1);
  int v19 = (v14 & a1) + (v14 >> 1) + v13;
  int v35 = a4;
  int v33 = a2;
  int v34 = v18;
  while (1)
  {
    uint64_t v20 = 4 * v17;
    int v21 = *(unsigned __int8 *)(v11 + v20);
    unsigned __int16 v22 = (unsigned __int8 *)(v11 + (int)v20);
    int v23 = v22[1] | (v21 << 8);
    if (!v23)
    {
LABEL_17:
      int v27 = 0;
LABEL_18:
      uint64_t result = 0;
      *a7 = v27;
      return result;
    }
    if (v23 == a1) {
      break;
    }
LABEL_14:
    v17 += v19;
    do
      v17 -= v13;
    while (v17 >= v13);
    BOOL v26 = v15 >= (unsigned __int16)v10++;
    v19 += v18;
    if (!v26) {
      goto LABEL_17;
    }
  }
  unsigned int v24 = v22[3] | (v22[2] << 8);
  if (v24 < v16)
  {
    uint64_t v25 = v38;
    goto LABEL_11;
  }
  if (SLSeek(v12, v37 + v24, 0) != 8)
  {
    if (SLFRead(v12, 128, a8, (unsigned int *)&v40) == 8 || v40 <= 2)
    {
      uint64_t v29 = *(void *)(a5 + 32);
      uint64_t v30 = 0xDC00000070;
      goto LABEL_22;
    }
    unsigned int v24 = 0;
    uint64_t v25 = a8;
    int v18 = v34;
    a4 = v35;
LABEL_11:
    if (v25[v24] == a4
      && v25[v24 + 1] == v36
      && v25[(unsigned __int16)(v24 + 2)] == v33)
    {
      int v27 = &v25[(unsigned __int16)(v24 + 3)];
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v29 = *(void *)(a5 + 32);
  uint64_t v30 = 0xDC0000006FLL;
LABEL_22:
  *(void *)uint64_t v29 = v30;
  *(_WORD *)(v29 + _Block_object_dispose(&STACK[0x510], 8) = 920;
  return 220;
}

uint64_t PRSetTmpAlt(int a1, int a2, int a3, int a4, int a5, char *__s, const char *a7, unsigned int a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _WORD *a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21 = *(void *)(a17 + 8);
  __int16 v22 = strlen(__s);
  unsigned __int16 v23 = strlen(a7);
  __int16 v24 = 0;
  if (a8 != 4 && a10) {
    __int16 v24 = *(_WORD *)(a10 + 48) + *(_WORD *)(a10 + 32);
  }
  if (a11 && a8 <= 8 && ((1 << a8) & 0x103) != 0) {
    v24 += *(_WORD *)(a11 + 32) + *(_WORD *)(a11 + 48);
  }
  uint64_t v25 = __s;
  if (a8 < 2) {
    goto LABEL_25;
  }
  uint64_t v25 = __s;
  if (a8 == 8) {
    goto LABEL_25;
  }
  if (a8 != 4)
  {
    *(_WORD *)(a14 + 2 * a9) = 1;
    if (!*a15) {
      *a15 = 1;
    }
    uint64_t v25 = *(char **)(a11 + 24);
LABEL_25:
    __int16 v29 = 0;
    unsigned int v28 = *(_DWORD *)(v21 + 4 * *v25);
    BOOL v34 = 1;
    goto LABEL_26;
  }
  *(_WORD *)(a14 + 2 * a9) = 2;
  if ((unsigned __int16)*a15 <= 1u) {
    *a15 = 2;
  }
  BOOL v26 = *(unsigned char **)(a10 + 24);
  unsigned int v27 = *v26;
  unsigned int v28 = *(_DWORD *)(v21 + 4 * *v26);
  __int16 v29 = 0;
  if (*v26)
  {
    uint64_t v30 = v26 + 1;
    do
    {
      int v31 = *(_DWORD *)(v21 + 4 * v27);
      if ((v31 & 0x60000040) != 0) {
        ++v29;
      }
      unsigned int v32 = *v30++;
      unsigned int v27 = v32;
      if (v32) {
        BOOL v33 = (v31 & 0x20000000) == 0;
      }
      else {
        BOOL v33 = 0;
      }
    }
    while (v33);
    BOOL v34 = (v31 & 0x20000000) == 0;
LABEL_26:
    int v35 = (v28 >> 30) & 1;
    if (a8 <= 8 && ((1 << a8) & 0x103) != 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
  int v35 = (v28 >> 30) & 1;
  BOOL v34 = 1;
LABEL_73:
  int v49 = *(unsigned char **)(a11 + 24);
  unsigned int v50 = *v49;
  if (*v49) {
    BOOL v51 = !v34;
  }
  else {
    BOOL v51 = 1;
  }
  if (!v51)
  {
    int v52 = v49 + 1;
    do
    {
      int v53 = *(_DWORD *)(v21 + 4 * v50);
      if ((v53 & 0x60000040) != 0) {
        ++v29;
      }
      unsigned int v54 = *v52++;
      unsigned int v50 = v54;
      if (v54) {
        BOOL v55 = (v53 & 0x20000000) == 0;
      }
      else {
        BOOL v55 = 0;
      }
    }
    while (v55);
    if ((v53 & 0x20000000) != 0) {
      BOOL v34 = 0;
    }
  }
LABEL_28:
  if (a8 - 7 <= 0xFFFFFFFC)
  {
    if (a1 && v34)
    {
      int v36 = __s + 1;
      do
      {
        int v37 = *(_DWORD *)(v21 + 4 * *(v36 - 1));
        if ((v37 & 0x60000040) != 0) {
          ++v29;
        }
        if (v36 >= &__s[a1]) {
          break;
        }
        ++v36;
      }
      while ((v37 & 0x20000000) == 0);
      if ((v37 & 0x20000000) != 0) {
        BOOL v34 = 0;
      }
    }
    if (a8 <= 1)
    {
      if (a3 && v34)
      {
        unsigned int v38 = &__s[a2 + 1];
        do
        {
          int v39 = *(_DWORD *)(v21 + 4 * *(v38 - 1));
          if ((v39 & 0x60000040) != 0) {
            ++v29;
          }
          if (v38 >= &__s[a2 + a3]) {
            break;
          }
          ++v38;
        }
        while ((v39 & 0x20000000) == 0);
        if ((v39 & 0x20000000) != 0) {
          BOOL v34 = 0;
        }
      }
      if (!a8)
      {
        if (!a5 || !v34)
        {
          __int16 v44 = v22;
          uint64_t v45 = a12;
          BOOL v42 = (v29 & 0xFFFE) != 0 && v34;
          goto LABEL_90;
        }
        int v40 = &__s[a4 + 1];
        do
        {
          int v41 = *(_DWORD *)(v21 + 4 * *(v40 - 1));
          if ((v41 & 0x60000040) != 0) {
            ++v29;
          }
          if (v40 >= &__s[a4 + a5]) {
            break;
          }
          ++v40;
        }
        while ((v41 & 0x20000000) == 0);
        if ((v41 & 0x20000000) != 0) {
          BOOL v34 = 0;
        }
      }
    }
    BOOL v42 = (v29 & 0xFFFE) != 0 && v34;
    if (a8 - 4 < 3)
    {
      unsigned __int16 v43 = 0;
      __int16 v44 = v22;
      uint64_t v45 = a12;
      goto LABEL_92;
    }
    __int16 v44 = v22;
    if (a8 == 1)
    {
      uint64_t v45 = a12;
      __int16 v47 = a2;
      __int16 v46 = a3;
LABEL_91:
      unsigned __int16 v43 = v46 + v47;
      goto LABEL_92;
    }
    if (a8)
    {
      uint64_t v45 = a12;
      if (a7[v23 - 1] == 39)
      {
        do
        {
          unsigned __int16 v43 = a1;
          int v48 = __s[(unsigned __int16)a1++];
        }
        while (v48 == 32);
      }
      else
      {
        unsigned __int16 v43 = a1;
      }
      goto LABEL_92;
    }
    uint64_t v45 = a12;
LABEL_90:
    __int16 v47 = a4;
    __int16 v46 = a5;
    goto LABEL_91;
  }
  __int16 v44 = v22;
  uint64_t v45 = a12;
  unsigned __int16 v43 = 0;
  BOOL v42 = (v29 & 0xFFFE) != 0 && v34;
LABEL_92:
  unsigned __int16 v56 = v23;
  char v57 = (char *)malloc_type_malloc((unsigned __int16)(v44 + v23 + v24 - v43 + 2), 0xAE0600A2uLL);
  *(void *)(v45 + 8 * a9) = v57;
  if (v57)
  {
    LOBYTE(v5_Block_object_dispose(&STACK[0x510], 8) = *a7;
    if (*a7)
    {
      uint64_t v59 = 0;
      do
      {
        if (v59) {
          int v60 = 0;
        }
        else {
          int v60 = v35;
        }
        if ((v42 || v60) && (*(_DWORD *)(v21 + 4 * v58) & 0x20000000) != 0) {
          LOBYTE(v5_Block_object_dispose(&STACK[0x510], 8) = v58 - 32;
        }
        v57[v59] = v58;
        int v58 = a7[++v59];
      }
      while (v58);
      v57 += v59;
    }
    if (a7[v56 - 1] != 39 && (a8 - 9 > 0xFFFFFFFD || !v43)) {
      *v57++ = 32;
    }
    char v61 = __s[v43];
    if (v61)
    {
      uint64_t v62 = &__s[v43 + 1];
      do
      {
        *v57++ = v61;
        int v63 = *v62++;
        char v61 = v63;
      }
      while (v63);
    }
    uint64_t v64 = 0;
    *char v57 = 0;
    *(_WORD *)(a13 + 2 * a9) = (_WORD)v57 - *(_WORD *)(v45 + 8 * a9);
  }
  else
  {
    uint64_t v65 = *(void *)(a16 + 32);
    *(void *)uint64_t v65 = 0xDC00000078;
    *(_WORD *)(v65 + _Block_object_dispose(&STACK[0x510], 8) = 880;
    return 220;
  }
  return v64;
}

uint64_t PRProcTmpAlts(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a7 + 24);
  uint64_t v12 = *(unsigned __int16 *)(v11 + 18);
  if (!a6)
  {
    if (*(_WORD *)(v11 + 18))
    {
      unsigned __int16 v15 = 0;
      unsigned __int16 v13 = 0;
      goto LABEL_10;
    }
LABEL_36:
    char v28 = 1;
LABEL_37:
    *(_DWORD *)(v11 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_WORD *)(v11 + 24) = 0;
    if (*(_WORD *)(v11 + 16))
    {
      unint64_t v29 = 0;
      uint64_t v30 = *(void *)(v11 + 8);
      do
        *(_WORD *)(v30 + 2 * v29++) = -1;
      while (v29 < *(unsigned __int16 *)(v11 + 16));
    }
    if ((v28 & 1) == 0) {
      goto LABEL_41;
    }
    return 0;
  }
  if (a6 == 2)
  {
    unsigned __int16 v13 = *(_WORD *)(a1 + 48) + *(_WORD *)(a1 + 32);
    uint64_t v14 = a1;
  }
  else
  {
    unsigned __int16 v13 = 0;
    uint64_t v14 = a2;
  }
  unsigned __int16 v15 = *(_WORD *)(a2 + 48) + *(_WORD *)(a2 + 32);
  __int16 v16 = *(_WORD *)(v14 + 8);
  *(_WORD *)(a7 + 2) += *(_WORD *)a7 - v16;
  *(_WORD *)a7 = v16;
  if (*(_WORD *)(a7 + 6))
  {
    *(_WORD *)(a7 + 6) = *(_WORD *)(a7 + 6) - v16 + *(_WORD *)(a7 + 4);
    *(_WORD *)(a7 + 4) = v16;
  }
  if (!v12) {
    goto LABEL_36;
  }
LABEL_10:
  uint64_t v17 = 0;
  uint64_t v18 = v13;
  uint64_t v19 = v15;
  unint64_t v20 = v13 + (unint64_t)v15 + 1;
  do
  {
    if (!a3[v17])
    {
      uint64_t v21 = (const char *)(*(void *)v11 + *(__int16 *)(*(void *)(v11 + 8) + 2 * v17));
      unsigned __int16 v22 = strlen(v21);
      *(_WORD *)(a4 + 2 * v17) = v22;
      unsigned __int16 v23 = (char *)malloc_type_malloc(v20 + v22, 0x199C60CAuLL);
      a3[v17] = v23;
      if (!v23)
      {
        uint64_t v33 = *(void *)(a8 + 32);
        *(void *)uint64_t v33 = 0xDC00000078;
        *(_WORD *)(v33 + _Block_object_dispose(&STACK[0x510], 8) = 860;
        return 220;
      }
      strcpy(v23, v21);
    }
    ++v17;
  }
  while (v12 != v17);
  if (a6)
  {
    uint64_t v24 = 0;
    do
    {
      if (!*(_WORD *)(a5 + 2 * v24))
      {
        if ((*(__int16 *)(a4 + 2 * v24) & 0x80000000) == 0)
        {
          for (uint64_t i = *(unsigned __int16 *)(a4 + 2 * v24); i != -1; --i)
            a3[v24][i + v19] = a3[v24][i];
        }
        strncpy(a3[v24], *(const char **)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
        if (*(_WORD *)(a2 + 48)) {
          strncpy(&a3[v24][*(unsigned __int16 *)(a2 + 32)], *(const char **)(a2 + 40), *(unsigned __int16 *)(a2 + 48));
        }
        *(_WORD *)(a4 + 2 * v24) += v19;
      }
      ++v24;
    }
    while (v24 != v12);
    if (a6 >= 2)
    {
      uint64_t v26 = 0;
      do
      {
        if (*(unsigned __int16 *)(a5 + 2 * v26) <= 1u)
        {
          if ((*(__int16 *)(a4 + 2 * v26) & 0x80000000) == 0)
          {
            for (uint64_t j = *(unsigned __int16 *)(a4 + 2 * v26); j != -1; --j)
              a3[v26][j + v18] = a3[v26][j];
          }
          strncpy(a3[v26], *(const char **)(a1 + 24), *(unsigned __int16 *)(a1 + 32));
          if (*(_WORD *)(a1 + 48)) {
            strncpy(&a3[v26][*(unsigned __int16 *)(a1 + 32)], *(const char **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
          }
        }
        ++v26;
      }
      while (v26 != v12);
    }
  }
  if (v11)
  {
    char v28 = 0;
    goto LABEL_37;
  }
LABEL_41:
  while (1)
  {
    uint64_t result = PRaddList((char **)v11, *a3, 1, 0);
    if (result) {
      break;
    }
    unsigned int v32 = *a3++;
    free(v32);
    if (!--v12) {
      return 0;
    }
  }
  return result;
}

uint64_t PRapp(unsigned __int8 *a1, int a2, int a3)
{
  __int16 v3 = sXXMutex++;
  if (!a1)
  {
    sXXMutex = v3;
    return 230;
  }
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 4) = 0;
  *((_WORD *)a1 + 10) = 0;
  if (bInitXXMtx)
  {
    byte_26AA71C72 = 0;
    bInitXXMtx = 0;
    SLInitMutex((int)"XXAPPMUTEX", &stru_26AA71C80);
  }
  if (SLLockMutex(&stru_26AA71C80))
  {
    --sXXMutex;
    return 220;
  }
  if (a2 == 4)
  {
    uint64_t v11 = PRGetAppElem(*a1);
    if (v11)
    {
      if (a3 == 2048)
      {
        *(unsigned char *)(v11 + 2_Block_object_dispose(&STACK[0x510], 8) = (*((_DWORD *)a1 + 1) & 1) == 0;
LABEL_18:
        --sXXMutex;
        SLUnlockMutex(&stru_26AA71C80);
        return 0;
      }
      --sXXMutex;
      SLUnlockMutex(&stru_26AA71C80);
      uint64_t v13 = 0xE6FFFFFF94;
    }
    else
    {
      --sXXMutex;
      SLUnlockMutex(&stru_26AA71C80);
      uint64_t v13 = 0xE6FFFFFF93;
    }
LABEL_32:
    *(void *)(a1 + 12) = v13;
    *((_WORD *)a1 + 10) = 400;
    return 230;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v8 = (void *)pSystem;
      if (pSystem)
      {
        unsigned int v9 = *(unsigned __int8 *)pSystem;
        if (*(unsigned __int8 *)(pSystem + 1) >= v9)
        {
          uint64_t v10 = ExpandSystem((uint64_t)a1, (unsigned __int8 *)pSystem);
          if (v10)
          {
            uint64_t v7 = v10;
LABEL_55:
            --sXXMutex;
            SLUnlockMutex(&stru_26AA71C80);
            return v7;
          }
          uint64_t v8 = (void *)pSystem;
          unsigned int v9 = *(unsigned __int8 *)pSystem;
          if (!*(unsigned char *)pSystem)
          {
LABEL_41:
            *a1 = v9;
            uint64_t v17 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A00404A9DB07BuLL);
            *(void *)(v8[1] + 8 * v9) = v17;
            if (v17)
            {
              ++*((unsigned char *)v8 + 1);
              uint64_t v18 = *(void *)(v8[1] + 8 * v9);
              uint64_t v19 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
              if (v19)
              {
                unint64_t v20 = v19;
                *uint64_t v19 = 15;
                if (ICpd(0, v19) == 8)
                {
                  FreeAppElem((uint64_t)v8, a1);
                  int v21 = 713;
                  uint64_t v7 = 230;
LABEL_54:
                  *((_DWORD *)a1 + 3) = v21;
                  *((_DWORD *)a1 + 4) = v7;
                  *((_WORD *)a1 + 10) = 400;
                  goto LABEL_55;
                }
                *(_WORD *)(v18 + 8_Block_object_dispose(&STACK[0x510], 8) = *((_WORD *)v20 + 1);
                free(v20);
                unsigned __int16 v22 = malloc_type_calloc(4uLL, 8uLL, 0x2004093837F09uLL);
                *(void *)uint64_t v18 = v22;
                if (v22)
                {
                  *(unsigned char *)(v18 + _Block_object_dispose(&STACK[0x510], 8) = 4;
                  *(unsigned char *)(v18 + 2_Block_object_dispose(&STACK[0x510], 8) = (*((_DWORD *)a1 + 1) & 1) == 0;
                  unsigned __int16 v23 = malloc_type_calloc(1uLL, 0x58uLL, 0x103004048D29B9DuLL);
                  *(void *)(v18 + 16) = v23;
                  if (v23)
                  {
                    uint64_t v24 = malloc_type_calloc(0x10uLL, 6uLL, 0x1000040274DC3F3uLL);
                    *(void *)(v18 + 40) = v24;
                    if (v24)
                    {
                      *(unsigned char *)(v18 + 4_Block_object_dispose(&STACK[0x510], 8) = 0;
                      *((_DWORD *)a1 + 2) &= 0x10u;
                      goto LABEL_18;
                    }
                  }
                }
                FreeAppElem((uint64_t)v8, a1);
              }
            }
            else
            {
              CheckSystem();
            }
            int v21 = 120;
            uint64_t v7 = 220;
            goto LABEL_54;
          }
        }
LABEL_36:
        uint64_t v16 = 0;
        while (*(void *)(v8[1] + 8 * v16))
        {
          if (v9 == ++v16) {
            goto LABEL_41;
          }
        }
        unsigned int v9 = v16;
        goto LABEL_41;
      }
      pSysteuint64_t m = (uint64_t)malloc_type_calloc(1uLL, 0x10uLL, 0x1080040EF48E34EuLL);
      if (pSystem)
      {
        unsigned int v9 = 4;
        uint64_t v14 = malloc_type_calloc(4uLL, 8uLL, 0x2004093837F09uLL);
        uint64_t v8 = (void *)pSystem;
        *(void *)(pSystem + _Block_object_dispose(&STACK[0x510], 8) = v14;
        if (v14)
        {
          *(unsigned char *)uint64_t v8 = 4;
          goto LABEL_36;
        }
        free(v8);
        pSysteuint64_t m = 0;
      }
      *(void *)(a1 + 12) = 0xDC00000078;
      *((_WORD *)a1 + 10) = 400;
      --sXXMutex;
      SLUnlockMutex(&stru_26AA71C80);
      return 220;
    }
    --sXXMutex;
    SLUnlockMutex(&stru_26AA71C80);
    uint64_t v13 = 0xE6FFFFFF95;
    goto LABEL_32;
  }
  if (!pSystem
    || (uint64_t v12 = *a1, v12 >= *(unsigned __int8 *)pSystem)
    || !*(void *)(*(void *)(pSystem + 8) + 8 * v12))
  {
    --sXXMutex;
    SLUnlockMutex(&stru_26AA71C80);
    *(void *)(a1 + 12) = 0xE6FFFFFF93;
    *((_WORD *)a1 + 10) = 400;
    return 220;
  }
  uint64_t v7 = FreeAppElem(pSystem, a1);
  --sXXMutex;
  SLUnlockMutex(&stru_26AA71C80);
  if (!pSystem && !sXXMutex)
  {
    SLTermMutex(&stru_26AA71C80);
    byte_26AA71C72 = 1;
    bInitXXMtx = 1;
  }
  return v7;
}

uint64_t ExpandSystem(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = malloc_type_calloc(*a2 + 4, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    int v5 = v4;
    memcpy(v4, *((const void **)a2 + 1), 8 * *a2);
    free(*((void **)a2 + 1));
    uint64_t result = 0;
    *((void *)a2 + 1) = v5;
    *a2 += 4;
  }
  else
  {
    *(void *)(a1 + 12) = 0xDC00000078;
    *(_WORD *)(a1 + 20) = 400;
    return 220;
  }
  return result;
}

uint64_t FreeAppElem(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
  char v6 = *(unsigned char *)(v5 + 90);
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void ***)(v5 + 56 + 8 * v7);
      if (v8)
      {
        free(v8[97]);
        free(v8);
        char v6 = *(unsigned char *)(v5 + 90) - 1;
        *(unsigned char *)(v5 + 90) = v6;
      }
      if (!v6) {
        break;
      }
    }
    while (v7++ < 3);
  }
  if (*(_WORD *)(v5 + 88))
  {
    uint64_t v10 = malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
    if (!v10)
    {
      *(void *)(a2 + 12) = 0xDC00000078;
      *((_WORD *)a2 + 10) = 400;
      return 220;
    }
    uint64_t v11 = v10;
    *uint64_t v10 = 16;
    *((_WORD *)v10 + 1) = *(_WORD *)(v5 + 88);
    if (ICpd(0, v10) == 8)
    {
      *(void *)(a2 + 12) = 0xE6000002C9;
      *((_WORD *)a2 + 10) = 400;
      return 230;
    }
    free(v11);
  }
  uint64_t v13 = *(void *)(v5 + 16);
  if (v13)
  {
    PRssClr(v13);
    free(*(void **)(v5 + 16));
  }
  char v14 = *(unsigned char *)(v5 + 9);
  if (v14)
  {
    unint64_t v15 = 0;
    do
    {
      if (v15 >= *(unsigned __int8 *)(v5 + 8)) {
        break;
      }
      uint64_t v16 = *(void **)(*(void *)v5 + 8 * v15);
      if (v16)
      {
        PRDbTerm(v5, *(void *)(*(void *)v5 + 8 * v15));
        free(v16);
        char v14 = *(unsigned char *)(v5 + 9) - 1;
        *(unsigned char *)(v5 + 9) = v14;
      }
      ++v15;
    }
    while (v14);
  }
  if (*(void *)v5) {
    free(*(void **)v5);
  }
  uint64_t v17 = *(void **)(v5 + 40);
  if (v17) {
    free(v17);
  }
  free((void *)v5);
  *(void *)(*(void *)(a1 + 8) + 8 * v4) = 0;
  --*(unsigned char *)(a1 + 1);
  CheckSystem();
  return 0;
}

void CheckSystem()
{
  if (!*(unsigned char *)(pSystem + 1))
  {
    free(*(void **)(pSystem + 8));
    free((void *)pSystem);
    pSysteuint64_t m = 0;
  }
}

uint64_t PRGetAppElem(unsigned int a1)
{
  ++sXXMutex;
  if (SLLockMutex(&stru_26AA71C80))
  {
    uint64_t v2 = 0;
  }
  else
  {
    if (pSystem && *(unsigned __int8 *)pSystem > a1) {
      uint64_t v2 = *(void *)(*(void *)(pSystem + 8) + 8 * a1);
    }
    else {
      uint64_t v2 = 0;
    }
    SLUnlockMutex(&stru_26AA71C80);
  }
  --sXXMutex;
  return v2;
}

uint64_t PRbuf(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 230;
  }
  int v4 = a2;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x510], 8) = 0;
  uint64_t v5 = a1 + 64;
  *(_WORD *)(a1 + 72) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (a2 == 17)
  {
    if (v6)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 40);
        PRfreeErr((void *)v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint64_t v8 = 0;
    *(void *)(a1 + 40) = 0;
    return v8;
  }
  uint64_t v10 = PRGetAppElem(*(unsigned __int8 *)(a1 + 8));
  if (!v10)
  {
    uint64_t v14 = 0xE6FFFFFF93;
LABEL_83:
    *(void *)(a1 + 64) = v14;
    *(_WORD *)(a1 + 72) = 480;
    return 230;
  }
  uint64_t v11 = v10;
  *(void *)(v10 + 32) = v5;
  *(_WORD *)(v10 + 24) = 0;
  uint64_t v12 = *(void *)(v10 + 16);
  switch(v4)
  {
    case 12:
      char v13 = 50;
      break;
    case 13:
      char v13 = -106;
      break;
    case 14:
      char v13 = -1;
      break;
    default:
      uint64_t v14 = 0xE6FFFFFF95;
      goto LABEL_83;
  }
  *(unsigned char *)(v10 + 26) = v13;
  if (v4 == 12) {
    int v15 = (a3 >> 3) & 1;
  }
  else {
    int v15 = 0;
  }
  *(unsigned char *)(v10 + 27) = *(unsigned char *)(a1 + 60);
  uint64_t v16 = PRGetDbElem(*(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9));
  if (!v16)
  {
    uint64_t v14 = 0xE6FFFFFF92;
    goto LABEL_83;
  }
  uint64_t v17 = v16;
  v65[0] = 0;
  if ((v15 & 1) == 0 && (*(_WORD *)v16 & 0x20) != 0)
  {
    uint64_t v14 = 0xE6FFFFFF84;
    goto LABEL_83;
  }
  BOOL v18 = *(unsigned char *)(v16 + 23) || *(unsigned char *)(v16 + 24) || *(unsigned char *)(v16 + 25) || *(unsigned char *)(v16 + 26) != 0;
  BOOL v64 = v18;
  if (*(_WORD *)(a1 + 10)) {
    char v19 = v15;
  }
  else {
    char v19 = 1;
  }
  if (v19)
  {
    if (v6)
    {
      do
      {
        uint64_t v20 = *(void *)(v6 + 40);
        PRfreeErr((void *)v6);
        uint64_t v6 = v20;
      }
      while (v20);
    }
    unsigned __int8 v21 = 0;
    uint64_t v22 = 0;
    *(unsigned char *)(v11 + 4_Block_object_dispose(&STACK[0x510], 8) = 0;
    goto LABEL_77;
  }
  uint64_t v23 = 0;
  if (v6)
  {
    uint64_t v24 = *(void *)(v16 + 48);
    while (*(unsigned char *)(v6 + 64))
    {
      if (*(unsigned char *)(v6 + 64) != 1)
      {
        if (!BinarySearch(*(void *)(v24 + 328), *(unsigned __int8 *)(v24 + 336), 1, *(unsigned __int8 *)(v6 + 12), 1, v65))break; {
        *(unsigned char *)(v6 + 13) = 0;
        }
      }
      uint64_t v25 = *(void *)(v6 + 40);
      if (!v23)
      {
        *(void *)(v6 + 40) = 0;
LABEL_47:
        uint64_t v23 = v6;
        goto LABEL_48;
      }
      unsigned int v26 = *(unsigned __int8 *)(v23 + 12);
      uint64_t v27 = v23;
      uint64_t v28 = v23;
      while (*(unsigned __int8 *)(v6 + 12) >= v26)
      {
        uint64_t v28 = v27;
        uint64_t v27 = *(void *)(v27 + 40);
        if (!v27) {
          break;
        }
        unsigned int v26 = *(unsigned __int8 *)(v27 + 12);
      }
      *(void *)(v6 + 40) = v27;
      if (v27 == v23) {
        goto LABEL_47;
      }
      *(void *)(v28 + 40) = v6;
LABEL_48:
      uint64_t v6 = v25;
      if (!v25) {
        goto LABEL_49;
      }
    }
    uint64_t v25 = *(void *)(v6 + 40);
    PRfreeErr((void *)v6);
    goto LABEL_48;
  }
LABEL_49:
  unsigned int v29 = *(unsigned __int8 *)(v11 + 48);
  uint64_t v22 = *(void *)(v11 + 40);
  __memcpy_chk();
  unsigned __int8 v31 = 0;
  uint64_t v32 = v23;
  unsigned __int8 v33 = 0;
  if (v23 && v29)
  {
    unsigned __int8 v33 = 0;
    unsigned __int8 v31 = 0;
    uint64_t v32 = v23;
    do
    {
      unsigned int v34 = *(unsigned __int8 *)(v32 + 12);
      unsigned int v35 = LOBYTE(v65[((3 * v31) & 0x7F) + 2]);
      if (v34 >= v35)
      {
        if (v33 <= 0xFu)
        {
          int v39 = &v65[((3 * v31) & 0x7F) + 1];
          char v40 = *((unsigned char *)v39 + 5);
          LOWORD(v39) = *(_WORD *)((char *)v39 + 3);
          uint64_t v41 = v22 + 6 * v33;
          *(unsigned char *)(v41 + 2) = v35;
          *(unsigned char *)uint64_t v41 = v35;
          *(_WORD *)(v41 + 3) = (_WORD)v39;
          *(unsigned char *)(v41 + 1) = 0;
          *(unsigned char *)(v41 + 5) = v40;
        }
        ++v31;
      }
      else
      {
        if (v33 <= 0xFu)
        {
          char v36 = *(unsigned char *)(v32 + 13);
          char v37 = *(unsigned char *)(v32 + 66);
          unsigned int v38 = (unsigned char *)(v22 + 6 * v33);
          v38[2] = v34;
          *unsigned int v38 = v34;
          v38[4] = v37;
          v38[3] = v36;
          v38[1] = 0;
          v38[5] = -1;
        }
        uint64_t v32 = *(void *)(v32 + 40);
      }
      ++v33;
    }
    while (v32 && v29 > v31);
  }
  for (; v32; ++v33)
  {
    if (v33 <= 0xFu)
    {
      char v42 = *(unsigned char *)(v32 + 13);
      char v43 = *(unsigned char *)(v32 + 66);
      char v44 = *(unsigned char *)(v32 + 12);
      uint64_t v45 = (unsigned char *)(v22 + 6 * v33);
      void v45[2] = v44;
      *uint64_t v45 = v44;
      v45[4] = v43;
      v45[3] = v42;
      v45[1] = 0;
      v45[5] = -1;
    }
    uint64_t v32 = *(void *)(v32 + 40);
  }
  unsigned int v46 = v29 - v31;
  if (v29 <= v31)
  {
    unsigned __int8 v21 = v33;
  }
  else
  {
    unsigned __int8 v47 = 6 * v31;
    unsigned __int8 v21 = v33;
    do
    {
      if (v21 <= 0xFu)
      {
        v30.i32[0] = *(_DWORD *)((char *)&v65[2] + (v47 & 0xFE));
        uint64_t v48 = v22 + 6 * v21;
        *(unsigned char *)uint64_t v48 = vmovl_u8(v30).u8[0];
        *(unsigned char *)(v48 + 1) = 0;
        *(_DWORD *)(v48 + 2) = v30.i32[0];
      }
      ++v21;
      v47 += 6;
      --v46;
    }
    while (v46);
  }
  if (v23)
  {
    do
    {
      uint64_t v49 = *(void *)(v23 + 40);
      PRfreeErr((void *)v23);
      uint64_t v23 = v49;
    }
    while (v49);
  }
LABEL_77:
  *(void *)(a1 + 40) = 0;
  if (!*(unsigned char *)(v17 + 26)) {
    *(unsigned char *)(v17 + 26) = 61;
  }
  if (v15) {
    return PRfastSpell(v11, v17, a1);
  }
  int v50 = *(unsigned __int16 *)(v12 + 18);
  PRssClr(v12);
  unsigned int v51 = *(unsigned __int16 *)(a1 + 14);
  unsigned int v52 = *(unsigned __int16 *)(a1 + 12);
  if (v51 > v52)
  {
    uint64_t v14 = 0xE6FFFFFF85;
    goto LABEL_83;
  }
  if (v51 == v52)
  {
    *(_WORD *)(a1 + 16) = 0;
    return 200;
  }
  uint64_t v54 = PRss(*(unsigned char **)a1, v51, v11, v17, *(void *)(a1 + 32), *(_WORD *)(a1 + 10) & 1, (*(_WORD *)(a1 + 10) & 0x20) != 0);
  if (!v54)
  {
    if ((*(_WORD *)(a1 + 10) & 1) != 0 && v21)
    {
      int v55 = *(unsigned __int16 *)(v12 + 18) - v50;
      if (!v55) {
        LOBYTE(v55) = 0;
      }
      if ((v21 & 0xF0) != 0) {
        uint64_t v56 = 16;
      }
      else {
        uint64_t v56 = v21;
      }
      char v57 = (unsigned char *)(v22 + 5);
      do
      {
        *char v57 = v55 - (*v57 == 255);
        v57 += 6;
        --v56;
      }
      while (v56);
    }
    if (v21) {
      *(unsigned char *)(v11 + 4_Block_object_dispose(&STACK[0x510], 8) = v21;
    }
    *(_WORD *)(a1 + 16) = *(_WORD *)(v12 + 20);
    uint64_t v58 = *(void *)(v12 + 56);
    if (v58)
    {
      uint64_t v59 = PRIcsTokWalk(v58, v11, v17, *(char *)(a1 + 61));
      if (v59)
      {
LABEL_106:
        uint64_t v8 = v59;
LABEL_107:
        PRssClr(v12);
        return v8;
      }
      if ((v4 - 12) <= 2)
      {
        if ((v4 - 13) <= 1)
        {
          if (*(unsigned char *)(v12 + 2) == 2)
          {
            unsigned int v60 = *(unsigned __int8 *)(v17 + 20);
            if (v60 <= 0xC && ((1 << v60) & 0x1320) != 0)
            {
              uint64_t v59 = PRNpBuilder(v11, v17, v12);
              if (v59) {
                goto LABEL_106;
              }
            }
          }
          if (*(void *)(v17 + 80))
          {
            uint64_t v59 = PRPunct(v11, v17);
            if (v59) {
              goto LABEL_106;
            }
          }
          if (*(void *)(v17 + 96))
          {
            uint64_t v59 = PRExprMatch(v12, v11, v17);
            if (v59) {
              goto LABEL_106;
            }
          }
        }
        if (*(void *)(v17 + 112))
        {
          PRPostAgree(v12, v11, v17);
          if (v59) {
            goto LABEL_106;
          }
        }
        if (*(void *)(v17 + 48))
        {
          uint64_t v61 = PRmatchr(v11, v17);
          uint64_t v8 = v61;
          if (v61 == 230 || v61 == 220) {
            goto LABEL_107;
          }
        }
        if ((v4 - 13) <= 1)
        {
          uint64_t v62 = PRmisrul(v11, v17, a1);
          uint64_t v8 = v62;
          if (v62 == 230 || v62 == 220) {
            goto LABEL_107;
          }
        }
        uint64_t v8 = PRspace(a1, v11, v17);
        if (v8) {
          return v8;
        }
        PRprune(a1, v12);
        if (v64)
        {
          uint64_t v63 = *(_WORD *)(v11 + 24) ? *(void *)(a1 + 40) : 0;
          uint64_t v8 = PRfixSpan(v11, v17, v63, a1);
          if (v8) {
            return v8;
          }
          uint64_t v8 = PRfixPars(v11, v17, a1);
          if (v8) {
            return v8;
          }
        }
      }
    }
    return 0;
  }
  uint64_t v8 = v54;
  if (v54 == 200) {
    *(_WORD *)(a1 + 16) = 0;
  }
  return v8;
}

void *PRfreeErrList(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)result[5];
      PRfreeErr(result);
      uint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

uint64_t PRCtGet(char *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  unsigned __int16 v60 = 0;
  unsigned __int16 v59 = 0;
  signed int v58 = 0;
  if (a5)
  {
    *(_DWORD *)(a5 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    *(_WORD *)(a5 + 24) = 0;
    if (*(_WORD *)(a5 + 16))
    {
      unint64_t v7 = 0;
      uint64_t v8 = *(void *)(a5 + 8);
      do
        *(_WORD *)(v8 + 2 * v7++) = -1;
      while (v7 < *(unsigned __int16 *)(a5 + 16));
    }
  }
  *a7 = 0;
  unsigned int v9 = *(__int16 **)(a4 + 72);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *((void *)v9 + 2);
  unsigned int v51 = (char *)*((void *)v9 + 3);
  int v11 = *v9;
  int v12 = *((_DWORD *)v9 + 1);
  unsigned int v57 = (unsigned __int16)v9[1];
  int v49 = *((_DWORD *)v9 + 3);
  unsigned int v50 = *(_DWORD *)(a4 + 40);
  unsigned int v53 = (unsigned __int16)v9[4];
  __int16 v13 = strlen(a1);
  SLfun((uint64_t)a1, 0, (__int16)(v13 - 1), &v60, &v59);
  unsigned __int16 v14 = 0;
  v60 &= ~0x8000u;
  int v15 = (unsigned __int16)(v12 & v60);
  int v16 = v59 % v11;
  int v17 = 2 * v15;
  int v18 = v15 + (v12 >> 1) + v11;
  int v52 = 2 * v15;
  while (1)
  {
    uint64_t v19 = 4 * v16;
    int v20 = *(unsigned __int8 *)(v10 + v19);
    unsigned __int8 v21 = (unsigned __int8 *)(v10 + (int)v19);
    int v22 = v21[1] | (v20 << 8);
    if (!v22) {
      return 0;
    }
    if ((v22 & 0x7FFF) != v60) {
      goto LABEL_22;
    }
    unsigned int v23 = v21[3] | (v21[2] << 8);
    if (v23 < v53)
    {
      uint64_t v24 = v51;
      goto LABEL_15;
    }
    if (SLSeek(v50, v49 + v23, 0) == 8)
    {
      uint64_t v35 = *(void *)(a3 + 32);
      uint64_t v36 = 0xDC0000006FLL;
      goto LABEL_46;
    }
    if (SLFRead(v50, 128, __dst, (unsigned int *)&v58) == 8 || v58 <= 2)
    {
      uint64_t v35 = *(void *)(a3 + 32);
      uint64_t v36 = 0xDC00000070;
LABEL_46:
      *(void *)uint64_t v35 = v36;
      *(_WORD *)(v35 + _Block_object_dispose(&STACK[0x510], 8) = 100;
      return 220;
    }
    unsigned int v23 = 0;
    uint64_t v24 = __dst;
LABEL_15:
    uint64_t v25 = &v24[v23];
    int v26 = *v25;
    uint64_t v27 = v25[1];
    unsigned int v28 = v23 + 3;
    __int16 v29 = v24[(unsigned __int16)(v23 + 2)];
    *a7 = v29;
    if (v26)
    {
      int v30 = 0;
      do
      {
        unsigned int v31 = v28 + 1;
        v63[(__int16)v30++] = v24[(unsigned __int16)v28++];
      }
      while (v26 > (__int16)v30);
    }
    else
    {
      unsigned int v31 = v28;
    }
    v63[v26] = 0;
    if (a2 != 2)
    {
      unsigned int v34 = a7;
      goto LABEL_30;
    }
    int v32 = SLstrcmp(a1, v63);
    int v17 = v52;
    if (!v32) {
      break;
    }
LABEL_22:
    v16 += v18;
    do
      v16 -= v11;
    while (v16 >= v11);
    uint64_t result = 0;
    if (v57 >= v14)
    {
      ++v14;
      v18 += v17;
      if ((char)v20 < 0) {
        continue;
      }
    }
    return result;
  }
  unsigned int v34 = a7;
  __int16 v29 = *a7;
LABEL_30:
  if (v29 < 1)
  {
    unsigned int v38 = v31;
    if (v27) {
      goto LABEL_34;
    }
LABEL_43:
    v62[v27] = 0;
    if (a2 != 1)
    {
      unsigned __int16 v43 = 1;
      uint64_t v41 = (char **)a5;
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  uint64_t v37 = 0;
  do
  {
    unsigned int v38 = v31 + 1;
    *(unsigned char *)(a6 + v37++) = v24[(unsigned __int16)v31++];
  }
  while (v37 < *v34);
  if (!v27) {
    goto LABEL_43;
  }
LABEL_34:
  int v39 = 0;
  do
  {
    uint64_t v40 = (unsigned __int16)v38++;
    v62[(__int16)v39++] = v24[v40];
  }
  while ((int)v27 > (__int16)v39);
  v62[v27] = 0;
  if (a2 == 1)
  {
LABEL_44:
    char v44 = (char *)v63;
    uint64_t v41 = (char **)a5;
    int v45 = 0;
    goto LABEL_49;
  }
  uint64_t v41 = (char **)a5;
  LOWORD(v42) = 0;
  unsigned __int16 v43 = 1;
  do
  {
    uint64_t v42 = (__int16)v42;
    if (v62[(__int16)v42] == 36)
    {
      ++v43;
      v62[v42] = 0;
    }
    LOWORD(v42) = v42 + 1;
  }
  while ((int)v27 > (__int16)v42);
LABEL_48:
  int v45 = v43;
  char v44 = v62;
LABEL_49:
  PRaddList(v41, v44, v45, 0);
  return 0;
}

uint64_t PRdb(unsigned __int8 *a1, int a2, int a3)
{
  unsigned __int8 v58 = 0;
  if (!a1) {
    return 230;
  }
  *((_DWORD *)a1 + 22) = 0;
  uint64_t v6 = a1 + 88;
  *((_DWORD *)a1 + 23) = 0;
  *((_WORD *)a1 + 4_Block_object_dispose(&STACK[0x510], 8) = 0;
  uint64_t v7 = PRGetAppElem(*a1);
  if (!v7)
  {
    uint64_t v11 = 0xE6FFFFFF93;
LABEL_62:
    *((void *)a1 + 11) = v11;
    *((_WORD *)a1 + 4_Block_object_dispose(&STACK[0x510], 8) = 420;
    return 230;
  }
  uint64_t v8 = v7;
  *(void *)(v7 + 32) = v6;
  if (a2 == 4)
  {
    uint64_t v12 = PRGetDbElem(*a1, a1[1]);
    if (!v12) {
      goto LABEL_33;
    }
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)(v12 + 128);
    if (!v15)
    {
      uint64_t v11 = 0xE6FFFFFF88;
      goto LABEL_62;
    }
    if (a3 <= 511)
    {
      if (a3 == 128)
      {
        int v37 = *((__int16 *)a1 + 13);
        int v38 = *((unsigned __int16 *)a1 + 13);
        if ((v38 & ~*((unsigned __int16 *)a1 + 15)) != 0)
        {
          *((_WORD *)a1 + 13) = *(_WORD *)(v12 + 16);
          uint64_t v25 = 0x4FFFFFF97;
        }
        else
        {
          *(_WORD *)(v12 + 16) = v38;
          *(_DWORD *)(v15 + 20) = v37;
          PRPunTerm(v12);
          PRPunLoad(v8, v14);
          PRExprTerm(v14);
          PRExprLoad(v8, v14, *((unsigned __int16 *)a1 + 5), 0);
          uint64_t v39 = *(void *)(v14 + 48);
          int v40 = *(unsigned __int8 *)(v14 + 20);
          if ((a1[26] & 0xF0) == 0x20 && v40 == 16) {
            int v42 = 64;
          }
          else {
            int v42 = a1[26] & 0xF0;
          }
          PRLangDialPos(*(void *)(v14 + 48), &v58, 0, v40, v42);
          LoadDialTable(v8, v39, v58);
          int v43 = *((__int16 *)a1 + 14);
          int v44 = *((unsigned __int16 *)a1 + 14);
          if ((v44 & ~*((unsigned __int16 *)a1 + 16)) == 0)
          {
            *(_WORD *)(v14 + 1_Block_object_dispose(&STACK[0x510], 8) = v44;
            *(_DWORD *)(v15 + 24) = v43;
            goto LABEL_88;
          }
          uint64_t v25 = 0x4FFFFFF96;
        }
      }
      else
      {
        if (a3 != 256) {
          goto LABEL_21;
        }
        if (*(void *)(*(void *)(v15 + 3184) + 216))
        {
          uint64_t v25 = 0x4000001FALL;
        }
        else
        {
          unsigned int v46 = malloc_type_calloc(1uLL, 0x300uLL, 0x1030040B89FAF2CuLL);
          if (!v46)
          {
            uint64_t v11 = 0xE6FFFFFF87;
            goto LABEL_62;
          }
          *(_WORD *)unsigned int v46 = 0;
          v46[745] = a1[24];
          uint64_t v47 = *(void *)(v15 + 3184);
          *(void *)(v47 + 216) = v46;
          if (*((void *)a1 + 6))
          {
            __strcpy_chk();
            __strcpy_chk();
          }
          __strcpy_chk();
          __strcat_chk();
          if (!IHhyp("", *(__int16 **)(v47 + 216)))
          {
            *(_WORD *)v14 |= 2u;
            *(_WORD *)(v15 + 1320) |= 0x100u;
            goto LABEL_88;
          }
          *(_WORD *)(v15 + 1320) |= 0x2000u;
          free(*(void **)(v47 + 216));
          *(void *)(v47 + 216) = 0;
          *(_DWORD *)(v15 + 130_Block_object_dispose(&STACK[0x510], 8) = 0;
          *(_WORD *)v14 &= ~2u;
          uint64_t v25 = 0x4000001F9;
        }
      }
    }
    else
    {
      if (a3 != 512)
      {
        if (a3 != 1024)
        {
          if (a3 != 4096)
          {
LABEL_21:
            uint64_t v11 = 0xE6FFFFFF94;
            goto LABEL_62;
          }
          UpdateDocFormat((uint64_t)a1, v8, v12, v13);
LABEL_88:
          uint64_t v24 = 0;
          *((_WORD *)a1 + 7) = *(_WORD *)v14;
          return v24;
        }
        unsigned int v57 = 0;
        if (SLSeek(*(_DWORD *)(v12 + 40), 1000, 0) == 8)
        {
LABEL_51:
          uint64_t v35 = *(void *)(v8 + 32);
          uint64_t v36 = 0xDC0000006FLL;
LABEL_67:
          *(void *)uint64_t v35 = v36;
          *(_WORD *)(v35 + _Block_object_dispose(&STACK[0x510], 8) = 420;
          return 220;
        }
        if (SLFRead(*(_DWORD *)(v14 + 40), 2, __dst, &v57) != 8)
        {
          if (SLSeek(*(_DWORD *)(v14 + 40), (__dst[0] << 17) | (__dst[1] << 9), 0) == 8) {
            goto LABEL_51;
          }
          unsigned int v53 = malloc_type_calloc(1uLL, 0x400uLL, 0xBB137A29uLL);
          if (!v53) {
            goto LABEL_66;
          }
          uint64_t v54 = v53;
          if (SLRead(*(_DWORD *)(v14 + 40), 0x400u, v53, &v57) != 8)
          {
            int v55 = PRExprInit(v8, v14, (uint64_t)v54, *((unsigned __int16 *)a1 + 5), 1);
            free(v54);
            if (v55)
            {
              uint64_t v11 = 0xE6FFFFFF83;
              goto LABEL_62;
            }
            goto LABEL_88;
          }
          free(v54);
        }
        uint64_t v35 = *(void *)(v8 + 32);
        uint64_t v36 = 0xDC00000070;
        goto LABEL_67;
      }
      uint64_t v34 = *(void *)(*(void *)(v15 + 3184) + 216);
      if (v34)
      {
        IHterm(v34);
        free(*(void **)(*(void *)(v15 + 3184) + 216));
        *(void *)(*(void *)(v15 + 3184) + 216) = 0;
        *(_WORD *)v14 &= ~2u;
        goto LABEL_88;
      }
      uint64_t v25 = 0x4000001FBLL;
    }
    *((void *)a1 + 11) = v25;
    *((_WORD *)a1 + 4_Block_object_dispose(&STACK[0x510], 8) = 420;
    return 4;
  }
  if (a2 == 2)
  {
    if (a3) {
      goto LABEL_21;
    }
    int v16 = (void *)*((void *)a1 + 10);
    if (v16)
    {
      int v17 = (void *)v16[2];
      if (v17)
      {
        do
        {
          if (v17 == (void *)v16[2])
          {
            int v18 = *(unsigned __int8 *)v17;
            uint64_t v19 = (unsigned __int8 *)(v17[1] - 1);
            do
            {
              v17[1] = v19;
              int v20 = *v19--;
            }
            while (v20 != v18);
            free(v19 + 1);
          }
          unsigned __int8 v21 = (void *)v17[3];
          free(v17);
          int v17 = v21;
        }
        while (v21);
      }
    }
    free(v16);
    uint64_t v22 = a1[1];
    if (v22 < *(unsigned __int8 *)(v8 + 8))
    {
      unsigned int v23 = *(void **)(*(void *)v8 + 8 * v22);
      if (v23)
      {
        PRDbTerm(v8, *(void *)(*(void *)v8 + 8 * v22));
        free(v23);
        uint64_t v24 = 0;
        *(void *)(*(void *)v8 + 8 * v22) = 0;
        --*(unsigned char *)(v8 + 9);
        return v24;
      }
    }
LABEL_33:
    uint64_t v11 = 0xE6FFFFFF92;
    goto LABEL_62;
  }
  if (a2 != 1)
  {
    uint64_t v11 = 0xE6FFFFFF95;
    goto LABEL_62;
  }
  if (a3) {
    goto LABEL_21;
  }
  unsigned int v9 = *(unsigned __int8 *)(v7 + 8);
  if (*(unsigned __int8 *)(v7 + 9) < v9) {
    goto LABEL_8;
  }
  uint64_t v24 = ExpandDbElemArray(v7);
  if (v24) {
    return v24;
  }
  unsigned int v9 = *(unsigned __int8 *)(v8 + 8);
  if (*(unsigned char *)(v8 + 8))
  {
LABEL_8:
    uint64_t v10 = 0;
    while (*(void *)(*(void *)v8 + 8 * v10))
    {
      if (v9 == ++v10) {
        goto LABEL_43;
      }
    }
    unsigned int v9 = v10;
  }
LABEL_43:
  int v26 = malloc_type_calloc(1uLL, 0x98uLL, 0x1030040A87721C6uLL);
  if (!v26) {
    goto LABEL_66;
  }
  uint64_t v27 = v26;
  __int16 v28 = *((_WORD *)a1 + 6);
  *((_WORD *)a1 + 7) = v28;
  *int v26 = v28;
  unsigned int v29 = a1[24];
  uint64_t v30 = SLLngToA(v29);
  v27[1] = v30;
  if (!v30)
  {
    free(v27);
    uint64_t v11 = 0xE6FFFFFF9CLL;
    goto LABEL_62;
  }
  unsigned int v31 = malloc_type_calloc(1uLL, 0xC78uLL, 0x1020040DC1EA3C0uLL);
  v27[16] = v31;
  if (!v31)
  {
    free(v27);
LABEL_66:
    uint64_t v35 = *(void *)(v8 + 32);
    uint64_t v36 = 0xDC00000078;
    goto LABEL_67;
  }
  uint64_t v32 = PRDbInit(v29, *((__int16 *)a1 + 13), *((__int16 *)a1 + 14), v8, (uint64_t)v27, (uint64_t)a1);
  if (v32) {
    goto LABEL_47;
  }
  *(unsigned char *)(v8 + 90) = 0;
  __int16 v48 = *(_WORD *)(v8 + 88);
  uint64_t v49 = v27[16];
  *(_WORD *)(v49 + 317_Block_object_dispose(&STACK[0x510], 8) = v48;
  *(_WORD *)(*(void *)(*(void *)(v49 + 3184) + 264) + 3204) = v48;
  if ((a1[12] & 1) == 0) {
    goto LABEL_91;
  }
  unsigned int v50 = (const char *)*((void *)a1 + 7);
  if (v50)
  {
    int v52 = *(const char **)v50;
    v50 += 8;
    unsigned int v51 = v52;
  }
  else
  {
    unsigned int v51 = 0;
  }
  uint64_t v32 = PRinitProfile(v8, (uint64_t)v27, 0, v50, v51);
  if (v32)
  {
LABEL_47:
    uint64_t v24 = v32;
    PRDbTerm(v8, (uint64_t)v27);
    free(v27);
  }
  else
  {
LABEL_91:
    UpdateDocFormat((uint64_t)a1, v8, (uint64_t)v27, v33);
    uint64_t v24 = 0;
    *(void *)(*(void *)v8 + 8 * v9) = v27;
    ++*(unsigned char *)(v8 + 9);
    *((_WORD *)a1 + 7) = *(_WORD *)v27;
    a1[1] = v9;
  }
  return v24;
}

uint64_t ExpandDbElemArray(uint64_t a1)
{
  uint64_t v2 = malloc_type_calloc(*(unsigned __int8 *)(a1 + 8) + 4, 8uLL, 0x2004093837F09uLL);
  if (v2)
  {
    __int16 v3 = v2;
    memcpy(v2, *(const void **)a1, 8 * *(unsigned __int8 *)(a1 + 8));
    free(*(void **)a1);
    uint64_t result = 0;
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) += 4;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)uint64_t v5 = 0xDC00000078;
    *(_WORD *)(v5 + _Block_object_dispose(&STACK[0x510], 8) = 420;
    return 220;
  }
  return result;
}

uint64_t LoadDialTable(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v12 = 0;
  int v4 = *(void **)(a2 + 288);
  unsigned int v5 = *(_DWORD *)a2;
  int v6 = *(unsigned __int16 *)(a2 + 296);
  int v7 = v6 * a3;
  if (!a3) {
    int v7 = 0;
  }
  uint64_t result = SLSeek(v5, *(_DWORD *)(a2 + 4) + *(_DWORD *)(a2 + 300) + v7, 0);
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 0xDC0000006FLL;
LABEL_10:
    *(void *)uint64_t v9 = v10;
    *(_WORD *)(v9 + _Block_object_dispose(&STACK[0x510], 8) = 722;
    return result;
  }
  uint64_t result = SLFRead(v5, v6, v4, &v12);
  if (result) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v12 == v6;
  }
  if (!v11)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 0xDC00000070;
    goto LABEL_10;
  }
  return result;
}

uint64_t UpdateDocFormat(uint64_t result, uint64_t a2, uint64_t a3, uint8x8_t a4)
{
  uint64_t v5 = *(void *)(a3 + 64);
  if (v5)
  {
    uint64_t v6 = v5 + 16;
    if (*(unsigned char *)(a3 + 23)) {
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 23)) = *(_DWORD *)(v5 + 1044);
    }
    if (*(unsigned char *)(a3 + 24)) {
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 24)) = *(_DWORD *)(v5 + 1048);
    }
    if (*(unsigned char *)(a3 + 25)) {
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 25)) = *(_DWORD *)(v5 + 1052);
    }
    if (*(unsigned char *)(a3 + 26)) {
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 26)) = *(_DWORD *)(v5 + 1056);
    }
    if (*(unsigned char *)(a3 + 22)) {
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 22)) = *(_DWORD *)(v5 + 1060);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __int16 v7 = *(_WORD *)(result + 10);
  uint64_t v8 = *(void *)(result + 2);
  *(void *)(a3 + 22) = v8;
  uint64_t v9 = (unsigned char *)(a3 + 22);
  *(_WORD *)(a3 + 30) = v7;
  a4.i32[0] = *(_DWORD *)(a3 + 23);
  *(_DWORD *)(a3 + 32) = a4.i32[0];
  *(unsigned char *)(a3 + 36) = v8;
  if (*(unsigned char *)(a2 + 28))
  {
    v15[0] = v8;
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(unsigned char *)(a3 + 22) = v15[0];
    v15[0] = *(unsigned char *)(a3 + 23);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(unsigned char *)(a3 + 23) = v15[0];
    v15[0] = *(unsigned char *)(a3 + 24);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(unsigned char *)(a3 + 24) = v15[0];
    v15[0] = *(unsigned char *)(a3 + 25);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(unsigned char *)(a3 + 25) = v15[0];
    v15[0] = *(unsigned char *)(a3 + 26);
    uint64_t result = SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    unsigned __int8 v10 = v15[0];
    *(unsigned char *)(a3 + 26) = v15[0];
    if (!v5) {
      return result;
    }
  }
  else
  {
    unsigned __int8 v10 = vmovl_u8(a4).u8[6];
    if (!v5) {
      return result;
    }
  }
  uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if (*(unsigned char *)(a3 + 23))
  {
    *(_DWORD *)(v5 + 1044) = *(_DWORD *)(v6 + 4 * v11);
    *(_DWORD *)(v6 + 4 * v11) = 2048;
  }
  uint64_t v12 = *(unsigned __int8 *)(a3 + 24);
  if (*(unsigned char *)(a3 + 24))
  {
    *(_DWORD *)(v5 + 104_Block_object_dispose(&STACK[0x510], 8) = *(_DWORD *)(v6 + 4 * v12);
    *(_DWORD *)(v6 + 4 * v12) = 2048;
  }
  uint64_t v13 = *(unsigned __int8 *)(a3 + 25);
  if (*(unsigned char *)(a3 + 25))
  {
    *(_DWORD *)(v5 + 1052) = *(_DWORD *)(v6 + 4 * v13);
    *(_DWORD *)(v6 + 4 * v13) = 2048;
  }
  if (v10)
  {
    *(_DWORD *)(v5 + 1056) = *(_DWORD *)(v6 + 4 * v10);
    *(_DWORD *)(v6 + 4 * v10) = 268436480;
  }
  uint64_t v14 = *v9;
  if (*v9)
  {
    *(_DWORD *)(v5 + 1060) = *(_DWORD *)(v6 + 4 * v14);
    *(_DWORD *)(v6 + 4 * v14) = 8;
  }
  *(unsigned char *)(v5 + 1040) = (v11 | v13 | v10 | v12) != 0;
  return result;
}

uint64_t PRDbInit(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v7 = *(void *)(a5 + 128);
  unsigned int v114 = 0;
  if (*(void *)(a6 + 40))
  {
    int v13 = *(unsigned __int8 *)(a6 + 24);
    BOOL v14 = v13 == 18 || v13 == 4;
    if (!v14 || *(void *)(a6 + 72))
    {
      __strcpy_chk();
      __strcpy_chk();
      if (*(void *)(a6 + 48))
      {
        __strcpy_chk();
        __strcpy_chk();
      }
      *(void *)(v7 + 316_Block_object_dispose(&STACK[0x510], 8) = *(unsigned __int16 *)(a6 + 34);
      if (PRIcs(a4, a5, a1, a2, a3, "", 0, v7, 1, 0))
      {
        uint64_t v15 = *(void *)(a4 + 32);
        *(void *)uint64_t v15 = 0xDC000000A0;
        *(_WORD *)(v15 + _Block_object_dispose(&STACK[0x510], 8) = 440;
        *(_WORD *)(v7 + 1320) &= ~0x80u;
        return 220;
      }
      if (*(void *)(a6 + 48))
      {
        __int16 v18 = *(_WORD *)a5;
        if ((*(_WORD *)(v7 + 1320) & 0x2000) != 0)
        {
          *(_WORD *)a5 = v18 & 0xFFFD;
          uint64_t v19 = *(void *)(a4 + 32);
          *(void *)uint64_t v19 = 0x4000001F9;
          *(_WORD *)(v19 + _Block_object_dispose(&STACK[0x510], 8) = 440;
        }
        else
        {
          *(_WORD *)a5 = v18 | 2;
        }
      }
      int v20 = 0;
      unsigned __int8 v21 = 0;
      *(_WORD *)(a6 + 30) = *(_DWORD *)(v7 + 12);
      *(_WORD *)(a6 + 32) = *(_DWORD *)(v7 + 16);
      unsigned int v22 = *(_DWORD *)(*(void *)(*(void *)(v7 + 3184) + 248) + 64);
      *(_DWORD *)(a5 + 40) = v22;
      *(unsigned char *)(a5 + 20) = a1;
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(a6 + 26);
      char v113 = 0;
      if (a1 != 4 && a1 != 18)
      {
        if (SLSeek(v22, 1000, 0) == 8) {
          goto LABEL_27;
        }
        if (SLFRead(*(_DWORD *)(a5 + 40), 2, __dst, &v114) == 8)
        {
LABEL_89:
          uint64_t v29 = *(void *)(a4 + 32);
          uint64_t v30 = 0xDC00000070;
          goto LABEL_126;
        }
        int v31 = (__dst[0] << 17) | (__dst[1] << 9);
        if (!v31)
        {
          uint64_t v29 = *(void *)(a4 + 32);
          uint64_t v30 = 0xDC0000008CLL;
          goto LABEL_126;
        }
        if (SLSeek(*(_DWORD *)(a5 + 40), v31, 0) == 8)
        {
LABEL_27:
          uint64_t v29 = *(void *)(a4 + 32);
          uint64_t v30 = 0xDC0000006FLL;
LABEL_126:
          *(void *)uint64_t v29 = v30;
          *(_WORD *)(v29 + _Block_object_dispose(&STACK[0x510], 8) = 440;
          return 220;
        }
        uint64_t v32 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x400uLL, 0x6F39C0F3uLL);
        if (!v32)
        {
LABEL_125:
          uint64_t v29 = *(void *)(a4 + 32);
          uint64_t v30 = 0xDC00000078;
          goto LABEL_126;
        }
        unsigned __int8 v21 = v32;
        if (SLRead(*(_DWORD *)(a5 + 40), 0x400u, v32, &v114) == 8)
        {
LABEL_88:
          free(v21);
          goto LABEL_89;
        }
        int v20 = (v21[754] << 17) | (v21[755] << 9);
      }
      HIDWORD(v23) = a1;
      LODWORD(v23) = (a1 << 24) - 0x4000000;
      int v24 = 0;
      switch((v23 >> 25))
      {
        case 0u:
        case 7u:
          goto LABEL_20;
        case 4u:
          int v33 = v20 | 0x9C;
          goto LABEL_40;
        case 6u:
          int v33 = v20 | 0x9C;
          SLSeek(*(_DWORD *)(a5 + 40), v20 | 0x9C, 0);
          if (SLFRead(*(_DWORD *)(a5 + 40), 1, &v113, &v114) == 8 || v114 != 1) {
            goto LABEL_89;
          }
          char v34 = v113;
          int v35 = *(unsigned __int16 *)(a6 + 30);
          if (v113 < 0)
          {
            unsigned int v36 = *(unsigned __int16 *)(a6 + 30);
          }
          else
          {
            unsigned int v36 = v35 & 0xFFFFFF7F;
            *(_WORD *)(a6 + 30) = v35 & 0xFF7F;
            __int16 v37 = *(_WORD *)(a6 + 26);
            *(_WORD *)(a6 + 26) = v37 & 0xFF7F;
            if ((v35 & v37 & 0x70) == 0)
            {
              *(_WORD *)(a6 + 26) = v37 & 0xFF0F | 0x40;
              *(void *)(a6 + 8_Block_object_dispose(&STACK[0x510], 8) = 0x4FFFFFF97;
              *(_WORD *)(a6 + 96) = 440;
            }
          }
          if ((v34 & 0x40) != 0)
          {
            unsigned int v73 = v36;
          }
          else
          {
            unsigned int v73 = v36 & 0xFFFFFF9F;
            *(_WORD *)(a6 + 30) = v36 & 0xFF9F;
            __int16 v74 = *(_WORD *)(a6 + 26);
            *(_WORD *)(a6 + 26) = v74 & 0xFF9F;
            if ((v36 & 0x90 & v74) == 0)
            {
              *(_WORD *)(a6 + 26) = v74 & 0xFF0F | 0x80;
              *(void *)(a6 + 8_Block_object_dispose(&STACK[0x510], 8) = 0x4FFFFFF97;
              *(_WORD *)(a6 + 96) = 440;
            }
          }
          if ((~v73 & 3) != 0)
          {
            v73 &= 0xFFFFFFFC;
            *(_WORD *)(a6 + 30) = v73;
          }
          int v75 = *(unsigned __int16 *)(a6 + 26);
          if ((v75 & ~v73 & 0xFFFFFF0F) != 0)
          {
            *(void *)(a6 + 8_Block_object_dispose(&STACK[0x510], 8) = 0x4FFFFFF97;
            *(_WORD *)(a6 + 96) = 440;
            LOWORD(v75) = v73 & v75;
            *(_WORD *)(a6 + 26) = v75;
          }
          int v24 = 0;
          *(_WORD *)(a5 + 16) = v75;
          *(_DWORD *)(v7 + 20) = (__int16)v75;
          if (a1 == 4 || a1 == 18) {
            goto LABEL_20;
          }
          if (a1 != 12) {
            goto LABEL_103;
          }
LABEL_40:
          SLSeek(*(_DWORD *)(a5 + 40), v33, 0);
          if (SLFRead(*(_DWORD *)(a5 + 40), 1, &v113, &v114) == 8 || v114 != 1) {
            goto LABEL_89;
          }
          char v38 = v113;
          int v39 = *(unsigned __int16 *)(a6 + 26);
          if ((v113 & 0x80000000) == 0)
          {
            int v40 = *(_WORD *)(a6 + 30) & 0xFF7F;
            *(_WORD *)(a6 + 30) &= ~0x80u;
            if ((v39 & v40) == 0)
            {
              int v39 = 64;
              *(_WORD *)(a6 + 26) = 64;
            }
          }
          if ((v38 & 0x40) == 0)
          {
            int v41 = *(_WORD *)(a6 + 30) & 0xFFBF;
            *(_WORD *)(a6 + 30) &= ~0x40u;
            if ((v39 & v41) == 0)
            {
              LOWORD(v39) = 128;
              *(_WORD *)(a6 + 26) = 128;
            }
          }
          int v24 = 0;
          *(_WORD *)(a5 + 16) = v39;
          *(_DWORD *)(v7 + 20) = (__int16)v39;
          if (a1 == 4 || a1 == 18) {
            goto LABEL_20;
          }
LABEL_103:
          size_t v76 = __rev16(*((unsigned __int16 *)v21 + 353));
          if (!v76) {
            goto LABEL_138;
          }
          v117[1] = 0;
          int v77 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040CF817D87uLL);
          *(void *)(a5 + 72) = v77;
          if (!v77)
          {
            uint64_t v82 = *(void *)(a4 + 32);
            uint64_t v83 = 0xDC00000078;
            goto LABEL_108;
          }
          int v78 = v77;
          unsigned int v79 = *(_DWORD *)(a5 + 40);
          _WORD *v77 = bswap32(*((unsigned __int16 *)v21 + 350)) >> 16;
          v77[1] = bswap32(*((unsigned __int16 *)v21 + 351)) >> 16;
          *((_DWORD *)v77 + 1) = __rev16(*((unsigned __int16 *)v21 + 352));
          int v80 = bswap32(*((_DWORD *)v21 + 177));
          unsigned int v81 = *((unsigned __int16 *)v21 + 356);
          *((_DWORD *)v77 + 3) = bswap32(*(_DWORD *)(v21 + 714));
          if (SLSeek(v79, v80, 0) == 8)
          {
            uint64_t v82 = *(void *)(a4 + 32);
            uint64_t v83 = 0xDC0000006FLL;
LABEL_108:
            *(void *)uint64_t v82 = v83;
            __int16 v84 = 120;
LABEL_120:
            *(_WORD *)(v82 + _Block_object_dispose(&STACK[0x510], 8) = v84;
            free(v21);
            return 220;
          }
          __int16 v85 = malloc_type_calloc(1uLL, v76, 0x100004077774924uLL);
          *((void *)v78 + 2) = v85;
          if (v85)
          {
            if (SLFRead(v79, v76, v85, (unsigned int *)&v117[1]) != 8 && v117[1] == v76)
            {
              unsigned int v86 = __rev16(v81);
              if (v86 >= 0x200) {
                size_t v87 = 512;
              }
              else {
                size_t v87 = v86;
              }
              if (SLSeek(v79, *((_DWORD *)v78 + 3), 0) == 8)
              {
                uint64_t v82 = *(void *)(a4 + 32);
                *(void *)uint64_t v82 = 0xDC0000006FLL;
                __int16 v84 = 121;
                goto LABEL_120;
              }
              BOOL v91 = malloc_type_calloc(1uLL, v87, 0x27096CA4uLL);
              *((void *)v78 + 3) = v91;
              if (v91)
              {
                if (SLFRead(v79, v87, v91, (unsigned int *)&v117[1]) != 8 && v117[1] == v87)
                {
                  if (v86 >= 0x200)
                  {
                    LOWORD(v87) = 512;
                    while (1)
                    {
                      unsigned int v92 = (unsigned __int16)v87;
                      if (*(unsigned char *)(*((void *)v78 + 3) + (unsigned __int16)v87 - 1) == 33) {
                        break;
                      }
                      LOWORD(v87) = v87 - 1;
                      if (v92 <= 1)
                      {
                        LOWORD(v87) = 0;
                        break;
                      }
                    }
                  }
                  v78[4] = v87;
LABEL_138:
                  uint64_t v62 = PRSfxInit(a4, a5, (uint64_t)v21);
                  if (v62) {
                    goto LABEL_143;
                  }
                  PRSSInit(a4, a5, (uint64_t)v21, v93);
                  if (v62) {
                    goto LABEL_143;
                  }
                  uint64_t v62 = PRPunInit(a4, a5, (uint64_t)v21);
                  if (v62) {
                    goto LABEL_143;
                  }
                  uint64_t v62 = PRExprInit(a4, a5, (uint64_t)v21, *(unsigned __int16 *)(a6 + 10), 0);
                  if (v62) {
                    goto LABEL_143;
                  }
                  uint64_t v62 = PRPostInit(a4, a5, (uint64_t)v21);
                  if (v62) {
                    goto LABEL_143;
                  }
                  uint64_t v17 = PRAmInit(a4, a5, (uint64_t)v21);
                  free(v21);
                  int v24 = v20;
                  if (v17) {
                    return v17;
                  }
LABEL_20:
                  uint64_t v25 = *(uint64_t **)(a6 + 40);
                  if (!v25) {
                    return 0;
                  }
                  *(void *)(a6 + 80) = 0;
                  *(void *)uint64_t v117 = 0;
                  int v26 = malloc_type_calloc(1uLL, 0x158uLL, 0x1030040924E0C2EuLL);
                  *(void *)(a5 + 4_Block_object_dispose(&STACK[0x510], 8) = v26;
                  if (!v26) {
                    goto LABEL_125;
                  }
                  uint64_t v27 = v26;
                  *int v26 = -1;
                  int v28 = *(unsigned __int8 *)(a5 + 20);
                  if (v28 == 18 || v28 == 4)
                  {
                    if (SLOpen((uint64_t)(v25 + 1), *v25, &v117[1], 0) == 8)
                    {
                      uint64_t v29 = *(void *)(a4 + 32);
                      uint64_t v30 = 0xDC0000006ELL;
                      goto LABEL_126;
                    }
                    *uint64_t v27 = v117[1];
                  }
                  else
                  {
                    int v42 = *(_DWORD *)(a5 + 40);
                    *int v26 = v42;
                    v117[1] = v42;
                  }
                  v27[1] = v24;
                  int v43 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x200uLL, 0x61824AE7uLL);
                  if (!v43) {
                    goto LABEL_125;
                  }
                  unsigned __int8 v21 = v43;
                  SLSeek(v117[1], v24, 0);
                  if (SLFRead(v117[1], 512, v21, (unsigned int *)v117) != 8 && v117[0] == 512)
                  {
                    uint64_t v44 = *v21;
                    *((unsigned char *)v27 + _Block_object_dispose(&STACK[0x510], 8) = v44;
                    if (v44)
                    {
                      int v45 = (char *)malloc_type_calloc(v44 + 1, 1uLL, 0x100004077774924uLL);
                      *((void *)v27 + 2) = v45;
                      if (!v45)
                      {
LABEL_123:
                        int v89 = v21;
LABEL_124:
                        free(v89);
                        goto LABEL_125;
                      }
                      strcpy(v45, (const char *)v21 + 1);
                    }
                    *((unsigned char *)v27 + 24) = v21[33];
                    *((unsigned char *)v27 + 25) = v21[34];
                    *((unsigned char *)v27 + 337) = v21[163];
                    *((unsigned char *)v27 + 26) = v21[35];
                    size_t v46 = __rev16(*((unsigned __int16 *)v21 + 38));
                    unsigned int v47 = bswap32(*((_DWORD *)v21 + 18));
                    unsigned int v116 = v47;
                    if (!v46)
                    {
LABEL_75:
                      unsigned int v116 = 0;
                      uint64_t v62 = SetFarTable((void *)v27 + 4, *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x24u, &v116, a4, v24);
                      if (v62) {
                        goto LABEL_143;
                      }
                      uint64_t v62 = SetFarTable((void *)v27 + 5, 2 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x28u, &v116, a4, v24);
                      if (v62) {
                        goto LABEL_143;
                      }
                      size_t v63 = bswap32(*((_DWORD *)v21 + 12));
                      v27[14] = v63;
                      uint64_t v62 = SetHugeTable((char **)v27 + 6, v63, v117[1], (uint64_t)v21, 0x2Cu, a4, v24);
                      if (v62) {
                        goto LABEL_143;
                      }
                      size_t v64 = bswap32(*((_DWORD *)v21 + 14));
                      v27[18] = v64;
                      uint64_t v62 = SetHugeTable((char **)v27 + 8, v64, v117[1], (uint64_t)v21, 0x34u, a4, v24);
                      if (v62) {
                        goto LABEL_143;
                      }
                      unsigned int v65 = bswap32(*((unsigned __int16 *)v21 + 32));
                      size_t v66 = HIWORD(v65);
                      *((_WORD *)v27 + 44) = HIWORD(v65);
                      if (v66)
                      {
                        uint64_t v62 = SetFarTable((void *)v27 + 10, v66, v117[1], (uint64_t)v21, 0x3Cu, &v116, a4, v24);
                        if (v62) {
                          goto LABEL_143;
                        }
                      }
                      unsigned int v67 = bswap32(*((unsigned __int16 *)v21 + 35));
                      size_t v68 = HIWORD(v67);
                      *((_WORD *)v27 + 52) = HIWORD(v67);
                      if (v68)
                      {
                        uint64_t v62 = SetFarTable((void *)v27 + 12, v68, v117[1], (uint64_t)v21, 0x42u, &v116, a4, v24);
                        if (v62) {
                          goto LABEL_143;
                        }
                      }
                      unsigned int v69 = bswap32(*((unsigned __int16 *)v21 + 38));
                      size_t v70 = HIWORD(v69);
                      *((_WORD *)v27 + 60) = HIWORD(v69);
                      if (v70)
                      {
                        uint64_t v62 = SetFarTable((void *)v27 + 14, v70, v117[1], (uint64_t)v21, 0x48u, &v116, a4, v24);
                        if (v62) {
                          goto LABEL_143;
                        }
                      }
                      size_t v71 = bswap32(*((_DWORD *)v21 + 22));
                      v27[34] = v71;
                      if (v71)
                      {
                        uint64_t v62 = SetHugeTable((char **)v27 + 16, v71, v117[1], (uint64_t)v21, 0x54u, a4, v24);
                        if (v62) {
                          goto LABEL_143;
                        }
                        unsigned int v72 = v27[34];
                      }
                      else
                      {
                        unsigned int v72 = 0;
                      }
                      *((_WORD *)v27 + 70) = v72 / 7;
                      unsigned int v95 = bswap32(*((unsigned __int16 *)v21 + 48));
                      size_t v96 = HIWORD(v95);
                      *((_WORD *)v27 + 76) = HIWORD(v95);
                      if (!v96
                        || (uint64_t v62 = SetFarTable((void *)v27 + 18, v96, v117[1], (uint64_t)v21, 0x5Cu, &v116, a4, v24),
                            !v62)
                        && (*((_WORD *)v27 + 77) = *((_WORD *)v27 + 76) >> 2,
                            unsigned int v97 = bswap32(*((unsigned __int16 *)v21 + 51)),
                            *((_WORD *)v27 + 84) = HIWORD(v97),
                            uint64_t v62 = SetFarTable((void *)v27 + 20, HIWORD(v97), v117[1], (uint64_t)v21, 0x62u, &v116, a4, v24), !v62))
                      {
                        uint64_t v62 = SetFarTable((void *)v27 + 22, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x68u, &v116, a4, v24);
                        if (!v62)
                        {
                          v27[48] = bswap32(*((_DWORD *)v21 + 28));
                          size_t v98 = bswap32(*((_DWORD *)v21 + 28));
                          v27[48] = v98;
                          if (!v98
                            || (uint64_t v62 = SetHugeTable((char **)v27 + 23, v98, v117[1], (uint64_t)v21, 0x6Cu, a4, v24),
                                !v62))
                          {
                            __int16 v99 = v27[34] || *((_WORD *)v27 + 84) ? 28 : 32;
                            *(_WORD *)a5 |= v99;
                            uint64_t v62 = SetFarTable((void *)v27 + 25, 2 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x74u, &v116, a4, v24);
                            if (!v62)
                            {
                              unsigned int v100 = *((unsigned __int16 *)v21 + 41);
                              unsigned int v101 = bswap32(v100);
                              size_t v102 = __rev16(v100);
                              *((_WORD *)v27 + 61) = v102;
                              unsigned int v103 = bswap32(*(_DWORD *)(v21 + 78));
                              v27[80] = v103;
                              unsigned int v116 = v103 + HIWORD(v101);
                              uint64_t v62 = SetFarTable((void *)v27 + 38, v102, v117[1], (uint64_t)v21, 0x201u, &v116, a4, v24);
                              if (!v62)
                              {
                                *((unsigned char *)v27 + 324) = 2;
                                uint64_t v62 = SetFarTable((void *)v27 + 26, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x78u, &v116, a4, v24);
                                if (!v62)
                                {
                                  uint64_t v62 = SetHugeTable((char **)v27 + 27, v27[14], v117[1], (uint64_t)v21, 0x7Cu, a4, v24);
                                  if (!v62)
                                  {
                                    if (!bswap32(*((_DWORD *)v21 + 32))
                                      || (uint64_t v62 = SetFarTable((void *)v27 + 28, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x80u, &v116, a4, v24), !v62))
                                    {
                                      unsigned int v104 = bswap32(*((unsigned __int16 *)v21 + 68));
                                      size_t v105 = HIWORD(v104);
                                      *((_WORD *)v27 + 120) = HIWORD(v104);
                                      if (!v105
                                        || (uint64_t v62 = SetFarTable((void *)v27 + 29, v105, v117[1], (uint64_t)v21, 0x84u, &v116, a4, v24), !v62))
                                      {
                                        unsigned int v116 = 499;
                                        uint64_t v62 = SetFarTable((void *)v27 + 31, 0xDuLL, v117[1], (uint64_t)v21, 0x201u, &v116, a4, v24);
                                        if (!v62)
                                        {
                                          unsigned int v106 = bswap32(*((unsigned __int16 *)v21 + 71));
                                          size_t v107 = HIWORD(v106);
                                          *((_WORD *)v27 + 132) = HIWORD(v106);
                                          if (!v107
                                            || (uint64_t v62 = SetFarTable((void *)v27 + 32, v107, v117[1], (uint64_t)v21, 0x8Au, &v116, a4, v24), !v62))
                                          {
                                            unsigned int v108 = bswap32(*((unsigned __int16 *)v21 + 74));
                                            size_t v109 = HIWORD(v108);
                                            *((_WORD *)v27 + 140) = HIWORD(v108);
                                            if (!v109
                                              || (uint64_t v62 = SetFarTable((void *)v27 + 34, v109, v117[1], (uint64_t)v21, 0x90u, &v116, a4, v24), !v62))
                                            {
                                              size_t v110 = v21[154];
                                              *((unsigned char *)v27 + 336) = v110;
                                              if (!v110
                                                || (uint64_t v62 = SetFarTable((void *)v27 + 41, v110, v117[1], (uint64_t)v21, 0x96u, &v116, a4, v24), !v62))
                                              {
                                                unsigned int v111 = bswap32(*(unsigned __int16 *)(v21 + 161));
                                                size_t v112 = HIWORD(v111);
                                                *((_WORD *)v27 + 14_Block_object_dispose(&STACK[0x510], 8) = HIWORD(v111);
                                                v27[75] = bswap32(*(_DWORD *)(v21 + 157));
                                                if (!v112
                                                  || (uint64_t v62 = SetFarTable((void *)v27 + 36, v112, v117[1], (uint64_t)v21, 0x9Du, &v116, a4, v24), !v62))
                                                {
                                                  free(v21);
                                                  return 0;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_143:
                      uint64_t v17 = v62;
                      free(v21);
                      return v17;
                    }
                    __int16 v48 = malloc_type_calloc(1uLL, 0x18uLL, 0x1030040F514C710uLL);
                    *(void *)(a6 + 80) = v48;
                    if (!v48 || (uint64_t v49 = (char *)malloc_type_calloc(1uLL, v46, 0xB5958046uLL)) == 0)
                    {
                      free(v21);
                      int v89 = *(void **)(a6 + 80);
                      if (!v89) {
                        goto LABEL_125;
                      }
                      goto LABEL_124;
                    }
                    unsigned int v50 = v49;
                    SLSeek(v117[1], v47 + v24, 0);
                    if (SLFRead(v117[1], v46, v50, (unsigned int *)v117) != 8 && v117[0] == v46)
                    {
                      int v51 = *((unsigned __int8 *)v27 + 25);
                      **(unsigned char **)(a6 + 80) = v51;
                      if (v51)
                      {
                        int v52 = 0;
                        unsigned int v53 = 0;
                        while (1)
                        {
                          uint64_t v54 = malloc_type_calloc(1uLL, 0x20uLL, 0x1030040BEB8C10EuLL);
                          if (!v54) {
                            goto LABEL_123;
                          }
                          int v55 = v54;
                          *uint64_t v54 = *v50;
                          int v56 = v50[1];
                          uint64_t v57 = *(void *)(a6 + 80);
                          if (!*(void *)(v57 + 16)) {
                            *(void *)(v57 + 16) = v54;
                          }
                          unsigned __int8 v58 = v50 + 2;
                          if (v56)
                          {
                            unsigned __int16 v59 = v54 + 16;
                            do
                            {
                              --v56;
                              char v60 = *v58++;
                              *v59++ = v60;
                            }
                            while ((_BYTE)v56);
                          }
                          unsigned __int16 v61 = strlen(v58);
                          *((void *)v55 + 1) = v58;
                          *((void *)v55 + 3) = 0;
                          if (v53) {
                            *((void *)v53 + 3) = v55;
                          }
                          unsigned int v50 = (char *)&v58[v61 + 1];
                          ++v52;
                          unsigned int v53 = v55;
                          if (*((unsigned __int8 *)v27 + 25) <= (__int16)v52) {
                            goto LABEL_75;
                          }
                        }
                      }
                      goto LABEL_75;
                    }
                    goto LABEL_89;
                  }
                  goto LABEL_88;
                }
                uint64_t v82 = *(void *)(a4 + 32);
                uint64_t v94 = 0xDC00000070;
              }
              else
              {
                uint64_t v82 = *(void *)(a4 + 32);
                uint64_t v94 = 0xDC00000078;
              }
              *(void *)uint64_t v82 = v94;
              __int16 v84 = 123;
              goto LABEL_120;
            }
            uint64_t v82 = *(void *)(a4 + 32);
            uint64_t v88 = 0xDC00000070;
          }
          else
          {
            uint64_t v82 = *(void *)(a4 + 32);
            uint64_t v88 = 0xDC00000078;
          }
          *(void *)uint64_t v82 = v88;
          __int16 v84 = 122;
          goto LABEL_120;
        default:
          goto LABEL_103;
      }
    }
  }
  uint64_t v16 = *(void *)(a4 + 32);
  *(void *)uint64_t v16 = 0xE6FFFFFF90;
  *(_WORD *)(v16 + _Block_object_dispose(&STACK[0x510], 8) = 440;
  return 230;
}

uint64_t PRSfxInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3 = __rev16(*(unsigned __int16 *)(a3 + 724));
  if (!v3) {
    return 0;
  }
  unsigned int v17 = 0;
  size_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040466105CCuLL);
  *(void *)(a2 + 56) = v7;
  if (!v7)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = 0xDC00000078;
    goto LABEL_6;
  }
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(a2 + 40);
  *size_t v7 = bswap32(*(unsigned __int16 *)(a3 + 718)) >> 16;
  v7[1] = bswap32(*(unsigned __int16 *)(a3 + 720)) >> 16;
  *((_DWORD *)v7 + 1) = __rev16(*(unsigned __int16 *)(a3 + 722));
  if (SLSeek(v9, bswap32(*(_DWORD *)(a3 + 726)), 0) != 8)
  {
    int v13 = malloc_type_calloc(1uLL, v3, 0x2302F56BuLL);
    *((void *)v8 + 1) = v13;
    if (!v13)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v15 = 0xDC00000078;
      goto LABEL_15;
    }
    if (SLFRead(v9, v3, v13, &v17) == 8 || v17 != v3)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v15 = 0xDC00000070;
LABEL_15:
      *(void *)uint64_t v10 = v15;
      __int16 v12 = 41;
      goto LABEL_16;
    }
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = 0xDC0000006FLL;
LABEL_6:
  *(void *)uint64_t v10 = v11;
  __int16 v12 = 40;
LABEL_16:
  *(_WORD *)(v10 + _Block_object_dispose(&STACK[0x510], 8) = v12;
  return 220;
}

int8x16_t PRSSInit(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t result)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v4 = __rev16(*(unsigned __int16 *)(a3 + 736));
  if (v4)
  {
    unsigned int v31 = 0;
    uint64_t v8 = malloc_type_calloc(1uLL, 0x428uLL, 0x101004032A3AAA5uLL);
    *(void *)(a2 + 64) = v8;
    if (!v8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      result.i64[0] = 0xDC00000078;
      goto LABEL_7;
    }
    unsigned int v9 = v8;
    unsigned int v10 = *(_DWORD *)(a2 + 40);
    *uint64_t v8 = bswap32(*(unsigned __int16 *)(a3 + 730)) >> 16;
    v8[1] = bswap32(*(unsigned __int16 *)(a3 + 732)) >> 16;
    *((_DWORD *)v8 + 1) = __rev16(*(unsigned __int16 *)(a3 + 734));
    if (SLSeek(v10, bswap32(*(_DWORD *)(a3 + 738)), 0) == 8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      result.i64[0] = 0xDC0000006FLL;
LABEL_7:
      *(void *)uint64_t v11 = result.i64[0];
      __int16 v12 = 320;
LABEL_16:
      *(_WORD *)(v11 + _Block_object_dispose(&STACK[0x510], 8) = v12;
      return result;
    }
    int v13 = malloc_type_calloc(1uLL, v4, 0x54FBAF74uLL);
    *((void *)v9 + 1) = v13;
    if (v13)
    {
      _ZF = SLFRead(v10, v4, v13, &v31) != 8 && v31 == v4;
      if (_ZF && SLFRead(v10, 1024, __dst, &v31) != 8 && v31 == 1024)
      {
        for (uint64_t i = 0; i != 512; i += 32)
        {
          uint64_t v16 = &__dst[i * 2];
          int8x16x4_t v34 = vld4q_s8(v16);
          uint16x8_t v17 = vmovl_u8(*(uint8x8_t *)v34.val[0].i8);
          uint16x8_t v18 = vmovl_high_u8((uint8x16_t)v34.val[0]);
          _Q16 = vmovl_u8(*(uint8x8_t *)v34.val[1].i8);
          _Q17 = vmovl_high_u8((uint8x16_t)v34.val[1]);
          __asm
          {
            SHLL2           V18.4S, V17.8H, #0x10
            SHLL2           V19.4S, V16.8H, #0x10
          }
          uint16x8_t v26 = vmovl_high_u8((uint8x16_t)v34.val[2]);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v34.val[2].i8);
          int8x16_t v28 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v27.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8), 0x18uLL));
          uint16x8_t v29 = vmovl_high_u8((uint8x16_t)v34.val[3]);
          v34.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v34.val[3].i8);
          v34.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v34.val[0]);
          uint64_t result = vorrq_s8(v28, (int8x16_t)vmovl_u16(*(uint16x4_t *)v34.val[0].i8));
          uint64_t v30 = (int8x16_t *)&v9[i + 8];
          int v30[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v26.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8));
          v30[3] = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v26, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v18), 0x18uLL)), (int8x16_t)vmovl_high_u16(v29));
          *uint64_t v30 = result;
          v30[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v27, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v17), 0x18uLL)), v34.val[1]);
        }
        return result;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      result.i64[0] = 0xDC00000070;
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      result.i64[0] = 0xDC00000078;
    }
    *(void *)uint64_t v11 = result.i64[0];
    __int16 v12 = 321;
    goto LABEL_16;
  }
  return result;
}

uint64_t PRPunInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a2 + 8_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)(a3 + 742)) >> 16;
  *(_DWORD *)(a2 + 92) = bswap32(*(_DWORD *)(a3 + 744));
  return PRPunLoad(a1, a2);
}

uint64_t PRExprInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_WORD *)(a2 + 104) = bswap32(*(unsigned __int16 *)(a3 + 748)) >> 16;
  *(_DWORD *)(a2 + 10_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(_DWORD *)(a3 + 750));
  return PRExprLoad(a1, a2, a4, a5);
}

uint64_t PRPostInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = __rev16(*(unsigned __int16 *)(a3 + 762));
  if (!v3) {
    return 0;
  }
  unsigned int v20 = 0;
  size_t v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x10100408797764BuLL);
  *(void *)(a2 + 112) = v7;
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(a2 + 40);
  unsigned int v10 = bswap32(*(unsigned __int16 *)(a3 + 768));
  int v11 = v3 + HIWORD(v10);
  unsigned int v12 = *(_DWORD *)(a3 + 764);
  int v13 = malloc_type_calloc(1uLL, (unsigned __int16)(v3 + HIWORD(v10)), 0xF65C0E8AuLL);
  v8[1] = v13;
  if (!v13 || (v14 = v13, uint64_t v15 = malloc_type_calloc(1uLL, 0x80uLL, 0xB6BEA805uLL), (v8[2] = v15) == 0))
  {
LABEL_7:
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = 0xDC00000078;
    goto LABEL_8;
  }
  if (SLSeek(v9, bswap32(v12), 0))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = 0xDC0000006FLL;
LABEL_8:
    *(void *)uint64_t v16 = v17;
    *(_WORD *)(v16 + _Block_object_dispose(&STACK[0x510], 8) = 0;
    return 220;
  }
  if (SLFRead(v9, v11, v14, &v20)) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v20 == v11;
  }
  if (!v19)
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = 0xDC00000070;
    goto LABEL_8;
  }
  uint64_t result = 0;
  *(_WORD *)uint64_t v8 = bswap32(*(unsigned __int16 *)(a3 + 756)) >> 16;
  *((_WORD *)v8 + 1) = bswap32(*(unsigned __int16 *)(a3 + 758)) >> 16;
  *((_WORD *)v8 + 2) = bswap32(*(unsigned __int16 *)(a3 + 760)) >> 16;
  *((_WORD *)v8 + 3) = v3;
  return result;
}

uint64_t PRAmInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3 = __rev16(*(unsigned __int16 *)(a3 + 780));
  if (!v3) {
    return 0;
  }
  unsigned int v28 = 0;
  size_t v7 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x20uLL, 0x1010040CF817D87uLL);
  *(void *)(a2 + 120) = v7;
  if (!v7) {
    goto LABEL_29;
  }
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(a2 + 40);
  *size_t v7 = bswap32(*(unsigned __int16 *)(a3 + 774)) >> 16;
  v7[1] = bswap32(*(unsigned __int16 *)(a3 + 776)) >> 16;
  *((_DWORD *)v7 + 1) = __rev16(*(unsigned __int16 *)(a3 + 778));
  int v10 = bswap32(*(_DWORD *)(a3 + 782));
  unsigned int v11 = *(unsigned __int16 *)(a3 + 786);
  *((_DWORD *)v7 + 3) = bswap32(*(_DWORD *)(a3 + 788));
  if (SLSeek(v9, v10, 0) == 8)
  {
LABEL_4:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 0xDC0000006FLL;
LABEL_30:
    *(void *)uint64_t v12 = v13;
    *(_WORD *)(v12 + _Block_object_dispose(&STACK[0x510], 8) = 760;
    return 220;
  }
  uint64_t v15 = malloc_type_calloc(1uLL, v3, 0x100004077774924uLL);
  *((void *)v8 + 2) = v15;
  if (!v15) {
    goto LABEL_29;
  }
  if (SLFRead(v9, v3, v15, &v28) == 8 || v28 != v3) {
    goto LABEL_11;
  }
  unsigned int v17 = __rev16(v11);
  if (v17 >= 0x200) {
    size_t v18 = 512;
  }
  else {
    size_t v18 = v17;
  }
  if (SLSeek(v9, *((_DWORD *)v8 + 3), 0) == 8) {
    goto LABEL_4;
  }
  BOOL v19 = malloc_type_calloc(1uLL, v18, 0x552BE1F5uLL);
  *((void *)v8 + 3) = v19;
  if (!v19)
  {
LABEL_29:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 0xDC00000078;
    goto LABEL_30;
  }
  if (SLFRead(v9, v18, v19, &v28) == 8 || v28 != v18)
  {
LABEL_11:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 0xDC00000070;
    goto LABEL_30;
  }
  if (v17 < 0x200)
  {
    uint64_t result = 0;
    v8[4] = v18;
  }
  else
  {
    uint64_t v20 = *v8;
    if (*v8)
    {
      __int16 v21 = 0;
      uint64_t v22 = *((void *)v8 + 2) + 3;
      do
      {
        int v23 = bswap32(*(unsigned __int16 *)(v22 - 1));
        unsigned int v24 = HIWORD(v23);
        int v25 = v23 >> 16;
        if (v25 < 513 && v25 > v21) {
          __int16 v21 = v24;
        }
        v22 += 4;
        --v20;
      }
      while (v20);
      uint64_t v27 = (unsigned __int16)(v21 - 1);
    }
    else
    {
      LOWORD(v27) = -1;
    }
    uint64_t result = 0;
    v8[4] = v27;
  }
  return result;
}

uint64_t PRPunLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 92);
  if (!v2) {
    return 0;
  }
  unsigned int v54 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 88);
  uint64_t v6 = malloc_type_calloc(1uLL, 0x468uLL, 0x1090040F2BAB4E8uLL);
  *(void *)(a2 + 80) = v6;
  if (!v6)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 0xDC00000078;
    goto LABEL_6;
  }
  size_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(a2 + 40);
  if (SLSeek(v8, v2, 0) == 8)
  {
LABEL_4:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = 0xDC0000006FLL;
LABEL_6:
    *(void *)uint64_t v9 = v10;
    __int16 v11 = 180;
    goto LABEL_7;
  }
  unsigned __int16 v13 = 0;
  if (v5 <= 1) {
    __int16 v14 = 1;
  }
  else {
    __int16 v14 = v5;
  }
  while (1)
  {
    if (SLFRead(v8, 6, &__dst, &v54) == 8) {
      goto LABEL_26;
    }
    unsigned int v15 = __rev16(__dst);
    int v16 = *(_WORD *)(a2 + 16) & 0xF0;
    if (v16 == 32 && *(unsigned char *)(a2 + 20) == 16) {
      int v16 = 64;
    }
    if (v15 == v16) {
      break;
    }
    if (v5 <= ++v13)
    {
      unsigned __int16 v13 = v14;
      break;
    }
    v2 += bswap32(v56) + 6;
    if (SLSeek(v8, v2, 0) == 8) {
      goto LABEL_4;
    }
  }
  if (v15 && v5 <= v13) {
    return 8;
  }
  if (SLFRead(v8, 12, &__dst, &v54) == 8) {
    goto LABEL_26;
  }
  uint64_t v19 = 0;
  size_t v20 = __rev16((unsigned __int16)v56);
  size_t v21 = __rev16(HIWORD(v56));
  size_t v22 = __rev16(v57);
  size_t v23 = __rev16(v58);
  v7[548] = v23;
  size_t count = __rev16(v59);
  unsigned int v24 = v7;
  do
  {
    if (SLFRead(v8, 46, &__dst, &v54) == 8 || v54 != 46)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v50 = 0xDC00000070;
LABEL_83:
      *(void *)uint64_t v9 = v50;
      __int16 v11 = 181;
      goto LABEL_7;
    }
    for (uint64_t i = 0; i != 23; ++i)
      v24[i] = bswap32(*(unsigned __int16 *)((char *)&__dst + i * 2)) >> 16;
    ++v19;
    v24 += 23;
  }
  while (v19 != 23);
  uint16x8_t v26 = malloc_type_calloc(v20, 0x30uLL, 0x1000040EED21634uLL);
  *((void *)v7 + 133) = v26;
  if (!v26)
  {
LABEL_82:
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v50 = 0xDC00000078;
    goto LABEL_83;
  }
  if (!v20)
  {
LABEL_42:
    unsigned int v31 = malloc_type_calloc(v21, 6uLL, 0x1000040274DC3F3uLL);
    *((void *)v7 + 134) = v31;
    if (!v31)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v18 = 0xDC00000078;
      goto LABEL_27;
    }
    if (v21)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      while (SLFRead(v8, 6, &__dst, &v54) != 8 && v54 == 6)
      {
        uint64_t v35 = 0;
        uint64_t v36 = *((void *)v7 + 134) + v32;
        do
        {
          *(_WORD *)(v36 + v35) = bswap32(*(unsigned __int16 *)((char *)&__dst + v35)) >> 16;
          v35 += 2;
        }
        while (v35 != 6);
        ++v33;
        v32 += 6;
        if (v33 == v21) {
          goto LABEL_53;
        }
      }
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v51 = 0xDC00000070;
      goto LABEL_86;
    }
LABEL_53:
    __int16 v37 = malloc_type_calloc(v22, 1uLL, 0x100004077774924uLL);
    *((void *)v7 + 135) = v37;
    if (!v37)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v51 = 0xDC00000078;
LABEL_86:
      *(void *)uint64_t v9 = v51;
      __int16 v11 = 183;
      goto LABEL_7;
    }
    if (SLFRead(v8, v22, v37, &v54) == 8 || v54 != v22)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v52 = 0xDC00000070;
    }
    else
    {
      if (!v23) {
        goto LABEL_68;
      }
      char v38 = malloc_type_calloc(v23, 4uLL, 0x100004052888210uLL);
      *((void *)v7 + 13_Block_object_dispose(&STACK[0x510], 8) = v38;
      if (v38)
      {
        if (SLFRead(v8, 4 * (int)v23, &__dst, &v54) == 8 || v54 != 4 * v23) {
          goto LABEL_26;
        }
        int v39 = (_DWORD *)*((void *)v7 + 138);
        int v40 = (char *)&v56 + 1;
        size_t v41 = v23;
        do
        {
          *v39++ = bswap32(*(_DWORD *)(v40 - 3));
          v40 += 4;
          --v41;
        }
        while (v41);
        int v42 = malloc_type_calloc(v23, 1uLL, 0x100004077774924uLL);
        *((void *)v7 + 139) = v42;
        if (v42)
        {
          if (SLFRead(v8, v23, v42, &v54) == 8 || v54 != v23) {
            goto LABEL_26;
          }
          int v43 = malloc_type_calloc(v23, 1uLL, 0x100004077774924uLL);
          *((void *)v7 + 140) = v43;
          if (v43)
          {
            if (SLFRead(v8, v23, v43, &v54) == 8 || v54 != v23) {
              goto LABEL_26;
            }
LABEL_68:
            if (!count) {
              return 0;
            }
            uint64_t v44 = malloc_type_calloc(count, 0x14uLL, 0x1000040A86A77D5uLL);
            *((void *)v7 + 136) = v44;
            if (v44)
            {
              uint64_t v45 = 0;
              uint64_t v46 = 0;
              while (SLFRead(v8, 20, &__dst, &v54) != 8 && v54 == 20)
              {
                uint64_t v48 = 0;
                uint64_t v49 = *((void *)v7 + 136) + v45;
                do
                {
                  *(_WORD *)(v49 + v4_Block_object_dispose(&STACK[0x510], 8) = bswap32(*(unsigned __int16 *)((char *)&__dst + v48)) >> 16;
                  v48 += 2;
                }
                while (v48 != 20);
                uint64_t result = 0;
                ++v46;
                v45 += 20;
                if (v46 == count) {
                  return result;
                }
              }
              goto LABEL_26;
            }
            goto LABEL_82;
          }
        }
      }
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v52 = 0xDC00000078;
    }
    *(void *)uint64_t v9 = v52;
    __int16 v11 = 184;
    goto LABEL_7;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  while (SLFRead(v8, 48, &__dst, &v54) != 8 && v54 == 48)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *((void *)v7 + 133) + v27;
    do
    {
      *(_WORD *)(v30 + v29) = bswap32(*(unsigned __int16 *)((char *)&__dst + v29)) >> 16;
      v29 += 2;
    }
    while (v29 != 48);
    ++v28;
    v27 += 48;
    if (v28 == v20) {
      goto LABEL_42;
    }
  }
LABEL_26:
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v18 = 0xDC00000070;
LABEL_27:
  *(void *)uint64_t v9 = v18;
  __int16 v11 = 182;
LABEL_7:
  *(_WORD *)(v9 + _Block_object_dispose(&STACK[0x510], 8) = v11;
  return 220;
}

uint64_t PRExprLoad(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 108);
  if (!v4) {
    return 0;
  }
  unsigned int v42 = 0;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 104);
  if (a4)
  {
    uint64_t v10 = *(void ***)(a2 + 96);
  }
  else
  {
    uint64_t v10 = (void **)malloc_type_calloc(1uLL, 0x18uLL, 0x30040D3A788E3uLL);
    *(void *)(a2 + 96) = v10;
    if (!v10)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v22 = 0xDC00000078;
LABEL_35:
      *(void *)uint64_t v12 = v22;
      __int16 v14 = 240;
      goto LABEL_36;
    }
  }
  size_t v41 = v10;
  unsigned int v11 = *(_DWORD *)(a2 + 40);
  if (SLSeek(v11, v4, 0))
  {
LABEL_6:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 0xDC0000006FLL;
LABEL_7:
    *(void *)uint64_t v12 = v13;
    __int16 v14 = 241;
LABEL_36:
    *(_WORD *)(v12 + _Block_object_dispose(&STACK[0x510], 8) = v14;
    return 220;
  }
  unsigned __int16 v15 = 0;
  unsigned __int16 v16 = v9 <= 1 ? 1 : v9;
  unsigned __int16 v40 = v16;
  while (1)
  {
    if (SLFRead(v11, 6, __dst, &v42) == 8) {
      goto LABEL_34;
    }
    unsigned int v17 = __rev16(__dst[0]);
    int v18 = (__int16)(v44 << 8) | v45;
    int v19 = *(_WORD *)(a2 + 16) & 0xF0;
    if (v19 == 32 && *(unsigned char *)(a2 + 20) == 16) {
      int v19 = 64;
    }
    if (v17 == v19) {
      goto LABEL_24;
    }
    if (v9 <= ++v15) {
      break;
    }
    int v21 = v4 + v18;
    v4 += v18 + 6;
    if (SLSeek(v11, v21 + 6, 0)) {
      goto LABEL_6;
    }
  }
  unsigned __int16 v15 = v40;
LABEL_24:
  if (v17 && v9 <= v15) {
    return 8;
  }
  if (a4)
  {
    unsigned int v24 = v41;
    int v25 = (unsigned __int8 *)*v41;
  }
  else
  {
    int v25 = (unsigned __int8 *)malloc_type_calloc(1uLL, (__int16)(v44 << 8) | (unint64_t)v45, 0xE90A188FuLL);
    unsigned int v24 = v41;
    *size_t v41 = v25;
    if (!v25)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = 0xDC00000078;
      goto LABEL_7;
    }
  }
  if (SLFRead(v11, v18, v25, &v42)) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v42 == v18;
  }
  if (!v26)
  {
LABEL_34:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v22 = 0xDC00000070;
    goto LABEL_35;
  }
  if (!a4)
  {
    char v38 = malloc_type_calloc(1uLL, 0x180uLL, 0x1030040CE42941AuLL);
    v24[2] = v38;
    if (!v38)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)uint64_t v12 = 0xDC00000078;
      __int16 v14 = 242;
      goto LABEL_36;
    }
    int v39 = malloc_type_calloc(1uLL, 32 * v25[7] + 32, 0x102004038FAAB91uLL);
    v24[1] = v39;
    if (!v39)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)uint64_t v12 = 0xDC00000078;
      __int16 v14 = 243;
      goto LABEL_36;
    }
  }
  if (*(unsigned char *)(a2 + 20) != 8) {
    return 0;
  }
  unsigned int v27 = __rev16(*((unsigned __int16 *)v25 + 5));
  uint64_t v28 = v25[12];
  uint64_t v29 = v25[13];
  uint64_t v30 = __rev16(*((unsigned __int16 *)v25 + 7));
  if (v27)
  {
    unsigned int v31 = 0;
    __int16 v32 = 0;
    uint64_t v33 = &v25[__rev16(*((unsigned __int16 *)v25 + 4))];
    do
    {
      unsigned int v35 = *v33++;
      unsigned int v34 = v35;
      if (v35)
      {
        unsigned int v36 = 0;
        do
        {
          switch(*v33)
          {
            case 0x17u:
            case 0x18u:
              __int16 v32 = 3;
              break;
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
              __int16 v32 = 4;
              break;
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
              __int16 v32 = ActionStringLength(v33 + 1, a3) + 1;
              break;
            case 0x2Au:
              __int16 v32 = 6;
              break;
            case 0x2Bu:
              __int16 v32 = 1;
              break;
            default:
              break;
          }
          ++v36;
          v33 += v32;
        }
        while (v36 < v34);
      }
      ++v31;
    }
    while (v31 < v27);
  }
  if (!v30) {
    return 0;
  }
  uint64_t v37 = (uint64_t)&v25[256 * v28 + 1 + v29];
  do
  {
    AssignSeparator((char *)&v25[__rev16(*(unsigned __int16 *)(v37 - 1))], a3);
    uint64_t result = 0;
    v37 += 2;
    --v30;
  }
  while (v30);
  return result;
}

char *AssignSeparator(char *result, int a2)
{
  switch(*result)
  {
    case 14:
    case 17:
      BOOL v2 = a2 == 0;
      char v3 = 44;
      char v4 = 46;
      goto LABEL_4;
    case 15:
    case 16:
      BOOL v2 = a2 == 0;
      char v3 = 46;
      char v4 = 44;
LABEL_4:
      if (v2) {
        char v3 = v4;
      }
      goto LABEL_13;
    case 18:
      char v3 = 58;
      BOOL v5 = (a2 & 4) == 0;
      char v6 = 46;
      goto LABEL_9;
    case 19:
      char v3 = 46;
      BOOL v5 = (a2 & 4) == 0;
      char v6 = 58;
LABEL_9:
      if (v5) {
        char v6 = v3;
      }
      if ((a2 & 2) != 0) {
        char v3 = v6;
      }
LABEL_13:
      *uint64_t result = v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ActionStringLength(unsigned char *a1, uint64_t a2)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = 0;
    BOOL v5 = a1 + 1;
    __int16 v6 = 1;
    do
    {
      unsigned int v7 = *v5;
      if (v7 > 0x27)
      {
        if (v7 == 40)
        {
          uint64_t v10 = v5 + 1;
          if (v5[1])
          {
            unint64_t v11 = 0;
            do
            {
              AssignSeparator((char *)&v5[v11++ + 2], a2);
              unint64_t v12 = *v10;
            }
            while (v11 < v12);
          }
          else
          {
            unint64_t v12 = 0;
          }
          uint64_t v13 = &v10[v12];
          int v16 = v13[1];
          unsigned __int16 v15 = v13 + 1;
          LODWORD(v14) = v16;
          if (v16)
          {
            unint64_t v17 = 0;
            do
            {
              AssignSeparator((char *)&v15[++v17], a2);
              unint64_t v14 = *v15;
            }
            while (v17 < v14);
          }
          LODWORD(v_Block_object_dispose(&STACK[0x510], 8) = ActionStringLength(&v15[(v14 + 1)], a2) + v12 + 2 + v14;
        }
        else if (v7 == 41)
        {
          LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 3;
        }
        else
        {
          LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 0;
        }
      }
      else if (*v5)
      {
        if (v7 == 5) {
          LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 2;
        }
        else {
          LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = 0;
        }
      }
      else
      {
        LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = v5[1];
        if (v5[1])
        {
          unint64_t v9 = 0;
          do
          {
            AssignSeparator((char *)&v5[v9++ + 2], a2);
            unint64_t v8 = v5[1];
          }
          while (v9 < v8);
        }
        LOWORD(v_Block_object_dispose(&STACK[0x510], 8) = v8 + 2;
      }
      v6 += v8;
      ++v4;
      v5 += (__int16)v8;
    }
    while (v4 < v2);
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t SetFarTable(void *a1, size_t size, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int *a6, uint64_t a7, int a8)
{
  int v14 = size;
  unsigned int v22 = 0;
  int v16 = malloc_type_calloc(1uLL, size, 0x100004077774924uLL);
  *a1 = v16;
  if (!v16)
  {
    uint64_t v19 = *(void *)(a7 + 32);
    uint64_t v20 = 0xDC00000078;
LABEL_9:
    *(void *)uint64_t v19 = v20;
    *(_WORD *)(v19 + _Block_object_dispose(&STACK[0x510], 8) = 440;
    return 220;
  }
  unint64_t v17 = v16;
  if (a5 == 513)
  {
    unsigned int v18 = *a6;
  }
  else
  {
    unsigned int v18 = bswap32(*(_DWORD *)(a4 + a5));
    *a6 = v18;
  }
  SLSeek(a3, v18 + a8, 0);
  if (SLFRead(a3, v14, v17, &v22) == 8 || (uint64_t result = 0, v22 != v14))
  {
    uint64_t v19 = *(void *)(a7 + 32);
    uint64_t v20 = 0xDC00000070;
    goto LABEL_9;
  }
  return result;
}

uint64_t SetHugeTable(char **a1, size_t count, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7)
{
  int v12 = count;
  int v19 = 0;
  int v14 = (char *)malloc_type_calloc(count, 1uLL, 0x17BCF5BCuLL);
  *a1 = v14;
  if (v14)
  {
    unsigned __int16 v15 = v14;
    SLSeek(a3, bswap32(*(_DWORD *)(a4 + a5)) + a7, 0);
    uint64_t result = SLHRead(a3, v12, v15, &v19);
    if (!result) {
      return result;
    }
    uint64_t v17 = *(void *)(a6 + 32);
    uint64_t v18 = 0xDC00000070;
  }
  else
  {
    uint64_t v17 = *(void *)(a6 + 32);
    uint64_t v18 = 0xDC00000078;
  }
  *(void *)uint64_t v17 = v18;
  *(_WORD *)(v17 + _Block_object_dispose(&STACK[0x510], 8) = 440;
  return 220;
}

uint64_t PRGetDbElem(unsigned int a1, unsigned int a2)
{
  uint64_t result = PRGetAppElem(a1);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 8) <= a2) {
      return 0;
    }
    else {
      return *(void *)(*(void *)result + 8 * a2);
    }
  }
  return result;
}

uint64_t PRDbTerm(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD **)(a2 + 128);
  *unsigned int v4 = 2;
  ICspl("", (size_t)v4);
  free(*(void **)(a2 + 128));
  PRloadProfile(a1, a2, 0, 0, 0);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5)
  {
    __int16 v6 = *(void **)(v5 + 16);
    if (v6) {
      free(v6);
    }
    unsigned int v7 = *(void **)(v5 + 32);
    if (v7) {
      free(v7);
    }
    unint64_t v8 = *(void **)(v5 + 40);
    if (v8) {
      free(v8);
    }
    unint64_t v9 = *(void **)(v5 + 48);
    if (v9) {
      free(v9);
    }
    uint64_t v10 = *(void **)(v5 + 64);
    if (v10) {
      free(v10);
    }
    unint64_t v11 = *(void **)(v5 + 80);
    if (v11) {
      free(v11);
    }
    int v12 = *(void **)(v5 + 96);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = *(void **)(v5 + 112);
    if (v13) {
      free(v13);
    }
    int v14 = *(void **)(v5 + 128);
    if (v14) {
      free(v14);
    }
    unsigned __int16 v15 = *(void **)(v5 + 144);
    if (v15) {
      free(v15);
    }
    int v16 = *(void **)(v5 + 160);
    if (v16) {
      free(v16);
    }
    uint64_t v17 = *(void **)(v5 + 176);
    if (v17) {
      free(v17);
    }
    uint64_t v18 = *(void **)(v5 + 184);
    if (v18) {
      free(v18);
    }
    int v19 = *(void **)(v5 + 200);
    if (v19) {
      free(v19);
    }
    uint64_t v20 = *(void **)(v5 + 208);
    if (v20) {
      free(v20);
    }
    int v21 = *(void **)(v5 + 216);
    if (v21) {
      free(v21);
    }
    unsigned int v22 = *(void **)(v5 + 224);
    if (v22) {
      free(v22);
    }
    size_t v23 = *(void **)(v5 + 232);
    if (v23) {
      free(v23);
    }
    unsigned int v24 = *(void **)(v5 + 248);
    if (v24) {
      free(v24);
    }
    int v25 = *(void **)(v5 + 304);
    if (v25) {
      free(v25);
    }
    uint64_t v26 = *(void *)(v5 + 312);
    if (v26)
    {
      if (*(void *)v26) {
        free(*(void **)v26);
      }
      unsigned int v27 = *(void **)(v26 + 8);
      if (v27)
      {
        free(v27);
        *(void *)(v26 + _Block_object_dispose(&STACK[0x510], 8) = 0;
      }
      free(*(void **)(v5 + 312));
    }
    uint64_t v28 = *(void **)(v5 + 256);
    if (v28) {
      free(v28);
    }
    uint64_t v29 = *(void **)(v5 + 272);
    if (v29) {
      free(v29);
    }
    uint64_t v30 = *(void **)(v5 + 328);
    if (v30) {
      free(v30);
    }
    unsigned int v31 = *(void **)(v5 + 288);
    if (v31) {
      free(v31);
    }
    int v32 = *(unsigned __int8 *)(a2 + 20);
    if (v32 == 18 || v32 == 4) {
      SLClose(*(_DWORD *)v5);
    }
    free(*(void **)(a2 + 48));
  }
  uint64_t v33 = *(void *)(a2 + 72);
  if (v33)
  {
    unsigned int v34 = *(void **)(v33 + 16);
    if (v34) {
      free(v34);
    }
    unsigned int v35 = *(void **)(v33 + 24);
    if (v35) {
      free(v35);
    }
    free(*(void **)(a2 + 72));
  }
  unsigned int v36 = *(void ***)(a2 + 56);
  if (v36)
  {
    if (v36[1])
    {
      free(v36[1]);
      unsigned int v36 = *(void ***)(a2 + 56);
    }
    free(v36);
  }
  uint64_t v37 = *(void ***)(a2 + 64);
  if (v37)
  {
    if (v37[1])
    {
      free(v37[1]);
      uint64_t v37 = *(void ***)(a2 + 64);
    }
    free(v37);
  }
  PRPunTerm(a2);
  PRExprTerm(a2);
  uint64_t v38 = *(void *)(a2 + 112);
  if (v38)
  {
    free(*(void **)(v38 + 8));
    free(*(void **)(v38 + 16));
    free(*(void **)(a2 + 112));
  }
  uint64_t v39 = *(void *)(a2 + 120);
  if (v39)
  {
    unsigned __int16 v40 = *(void **)(v39 + 16);
    if (v40) {
      free(v40);
    }
    size_t v41 = *(void **)(v39 + 24);
    if (v41) {
      free(v41);
    }
    free(*(void **)(a2 + 120));
  }
  return 0;
}

uint64_t PRPunTerm(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (v1)
  {
    char v3 = (void *)v1[133];
    if (v3) {
      free(v3);
    }
    unsigned int v4 = (void *)v1[134];
    if (v4) {
      free(v4);
    }
    uint64_t v5 = (void *)v1[135];
    if (v5) {
      free(v5);
    }
    __int16 v6 = (void *)v1[136];
    if (v6) {
      free(v6);
    }
    unsigned int v7 = (void *)v1[138];
    if (v7) {
      free(v7);
    }
    unint64_t v8 = (void *)v1[139];
    if (v8) {
      free(v8);
    }
    unint64_t v9 = (void *)v1[140];
    if (v9) {
      free(v9);
    }
    free(*(void **)(a1 + 80));
  }
  return 0;
}

uint64_t PRExprTerm(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 96);
  if (v1)
  {
    free(*v1);
    free(v1[1]);
    free(v1[2]);
    free(*(void **)(a1 + 96));
  }
  return 0;
}

uint64_t PRdecomp(char *a1, int a2, unsigned char *a3)
{
  __int16 v6 = (const char *)malloc_type_malloc((a2 + 1), 0x7FC840A4uLL);
  if (!v6) {
    return 120;
  }
  unsigned int v7 = (char *)v6;
  if (a2)
  {
    int v8 = 0;
    unint64_t v9 = a3;
    uint64_t v10 = a1;
    unint64_t v11 = (char *)v6;
    while (2)
    {
      unsigned int v12 = *v10;
      int v13 = 8;
      do
      {
        uint64_t v14 = __rev16(*(unsigned __int16 *)&v9[(v12 >> 6) & 2 ^ 2]);
        unsigned __int16 v15 = &a3[4 * v14 + v14];
        unint64_t v9 = v15 - 5;
        if (!*(v15 - 4) && !*v9)
        {
          int v16 = *(v15 - 1);
          if (v16 == 10) {
            *v11++ = 13;
          }
          *v11++ = v16;
          if (++v8 == a2)
          {
            *unint64_t v11 = 0;
            strcpy(a1, v6);
            uint64_t v17 = 0;
            goto LABEL_16;
          }
          unint64_t v9 = a3;
        }
        v12 *= 2;
        --v13;
      }
      while ((_BYTE)v13);
      if (++v10 < &a1[a2]) {
        continue;
      }
      break;
    }
  }
  uint64_t v17 = 115;
LABEL_16:
  free(v7);
  return v17;
}

uint64_t PRDerive(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  int v13 = a4;
  uint64_t v15 = a2;
  int v16 = *(unsigned __int16 *)(a3 + 136);
  int v17 = ((*(_DWORD *)(a3 + 92) >> 17) & 1) + v16;
  if (((*(_DWORD *)(a3 + 92) >> 17) & 1) + (_WORD)v16)
  {
    uint64_t v18 = *(void *)(a3 + 144);
    int v19 = v17;
  }
  else
  {
    if (*(void *)(a3 + 128)) {
      uint64_t v18 = a3 + 128;
    }
    else {
      uint64_t v18 = a3 + 16;
    }
    int v19 = 1;
  }
  unsigned __int16 v128 = 0;
  uint64_t v123 = a5;
  uint64_t v125 = v18;
  __int16 v118 = v17;
  if (a4 > 69)
  {
    if (a4 <= 119)
    {
      if (a4 != 70)
      {
        char v20 = 0;
        LOWORD(v21) = 0;
        if (a4 != 100) {
          goto LABEL_30;
        }
LABEL_82:
        if (!v118)
        {
          int v77 = *(const char **)(a3 + 112);
          if (v77)
          {
            unsigned int v78 = *(unsigned __int8 *)(v15 + 20);
            if (v78 <= 0xB && ((1 << v78) & 0x8C0) != 0)
            {
              char v79 = v20;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = 0;
              *(_WORD *)(a5 + 2 * (unsigned __int16)v21) = 0;
              *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = strlen(v77) + 1;
              int v80 = ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8)
                  + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7);
              __int16 v81 = v80 + 64;
              if ((unsigned __int16)(v80 + 64) > 0x7FECu) {
                __int16 v81 = v80 - 32685;
              }
              *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v81;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v81 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
              if (*(_WORD *)(a8 + 2 * (unsigned __int16)v21) != 1)
              {
                unint64_t v82 = 0;
                do
                {
                  unsigned int v83 = v77[v82]
                      + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7)
                      + ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8);
                  if (v83 > 0x7FEC) {
                    LOWORD(v83) = v83 - 32749;
                  }
                  *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v83;
                  *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v83 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
                  ++v82;
                }
                while (v82 < (unsigned __int16)(*(_WORD *)(a8 + 2 * (unsigned __int16)v21) - 1));
              }
              *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
              *(unsigned char *)(a7 + (unsigned __int16)v21) = 0;
              *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 100;
              LOWORD(v21) = v21 + 1;
              char v20 = v79;
            }
          }
        }
        LOWORD(v22) = v21;
        if (v13 == 100) {
          goto LABEL_125;
        }
        goto LABEL_95;
      }
      LOBYTE(v3_Block_object_dispose(&STACK[0x510], 8) = 0;
      LOWORD(v21) = 0;
LABEL_57:
      uint64_t v117 = v15;
      char v122 = v38;
      if ((*(unsigned char *)(v15 + 20) & 0xFE) == 6)
      {
        uint64_t v59 = 0;
        uint64_t v120 = (unsigned __int16)v19;
        unsigned __int16 v60 = v21;
        do
        {
          unsigned __int16 v61 = *(const char **)(v18 + 8 * v59);
          unsigned __int16 v62 = strlen(v61);
          unsigned __int16 v63 = v62;
          uint64_t v21 = v60;
          *(_WORD *)(a8 + 2 * v60) = v62 + 1;
          *(_WORD *)(a6 + 2 * v60) = 0;
          *(_WORD *)(v123 + 2 * v60) = 42;
          *(_WORD *)(a6 + 2 * v60) = *(_WORD *)(a6 + 2 * v60) & 0x7FFF ^ 0x2A;
          unsigned int v64 = v62;
          if (v62)
          {
            uint64_t v65 = v62;
            do
            {
              int v66 = *(unsigned __int8 *)v61++;
              unsigned int v67 = v66 + 19 * (*(unsigned __int16 *)(v123 + 2 * v21) >> 7) + ((*(_WORD *)(v123 + 2 * v21) & 0x7F) << 8);
              if (v67 > 0x7FEC) {
                LOWORD(v67) = v67 - 32749;
              }
              *(_WORD *)(v123 + 2 * v21) = v67;
              *(_WORD *)(a6 + 2 * v21) = (v67 ^ *(_WORD *)(a6 + 2 * v21)) & 0x7FFF;
              --v65;
            }
            while (v65);
          }
          __int16 v68 = v118 ? v59 : -1;
          *(_WORD *)(a9 + 2 * v21) = v68;
          *(unsigned char *)(a7 + v21) = 0;
          *(_WORD *)(a10 + 2 * v21) = 70;
          uint64_t result = PRSfxGet(*(const char **)(v125 + 8 * v59), 0, v127, v126, &v128, v117);
          if (result) {
            return result;
          }
          uint64_t v69 = v128;
          LOWORD(v21) = v21 + 1;
          if (v128)
          {
            a5 = v123;
            uint64_t v18 = v125;
            do
            {
              unsigned int v70 = v127[--v69];
              if (v64 <= v70)
              {
                __int16 v74 = 42;
                unsigned __int16 v73 = 42;
                unsigned __int16 v76 = v127[v69];
              }
              else
              {
                size_t v71 = (unsigned __int8 *)(*(void *)(v125 + 8 * v59) + v127[v69]);
                unint64_t v72 = v63 - (unint64_t)v127[v69];
                unsigned __int16 v73 = 42;
                __int16 v74 = 42;
                do
                {
                  __int16 v75 = *v71++;
                  unsigned __int16 v73 = ((v73 & 0x7F) << 8) + 19 * (v73 >> 7) + v75;
                  if (v73 > 0x7FECu) {
                    v73 -= 32749;
                  }
                  v74 ^= v73 & 0x7FFF;
                  --v72;
                }
                while (v72);
                unsigned __int16 v76 = v63;
              }
              *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v76 - v70 + 1;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v73;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = v74;
              *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v68;
              *(unsigned char *)(a7 + (unsigned __int16)v21) = v126[v69];
              *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 70;
              unsigned __int16 v128 = v69;
              LOWORD(v21) = v21 + 1;
            }
            while ((_WORD)v69);
          }
          else
          {
            a5 = v123;
            uint64_t v18 = v125;
          }
          ++v59;
          unsigned __int16 v60 = v21;
        }
        while (v59 != v120);
      }
      LOWORD(v22) = v21;
      uint64_t v15 = v117;
      char v20 = v122;
      if (v13 != 70) {
        goto LABEL_82;
      }
LABEL_125:
      uint64_t result = 0;
      *a11 = v22;
      return result;
    }
    char v20 = 0;
    LOWORD(v21) = 0;
    if (a4 == 120)
    {
LABEL_95:
      if (v118)
      {
LABEL_124:
        LOWORD(v22) = v21;
        goto LABEL_125;
      }
      uint64_t v84 = v15;
      uint64_t v85 = *(void *)(a3 + 104);
      if (v85)
      {
        unsigned int v86 = *(unsigned __int8 *)(v84 + 20);
        if (v86 <= 0xB && ((1 << v86) & 0x8C0) != 0)
        {
          char v87 = v20;
          __int16 v88 = strlen(*(const char **)(a3 + 104));
          *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v88 + 1;
          int v89 = (unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21);
          SLfun(v85, 0, (__int16)(v88 - 1), v89, (_WORD *)(a6 + 2 * (unsigned __int16)v21));
          char v20 = v87;
          int v90 = ((*v89 & 0x7F) << 8) + 19 * (*v89 >> 7);
          unsigned __int16 v91 = v90 + 64;
          unsigned __int16 v92 = v90 - 32685;
          if (v91 <= 0x7FECu) {
            unsigned __int16 v92 = v91;
          }
          *int v89 = v92;
          *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v92 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
          *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
          *(unsigned char *)(a7 + (unsigned __int16)v21) = 0;
          *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 120;
          LOWORD(v21) = v21 + 1;
        }
      }
      uint64_t v15 = v84;
LABEL_103:
      int8x16_t v93 = *(unsigned __int8 **)(a3 + 112);
      if (v93 && (*(unsigned char *)(v15 + 20) & 0xFE) == 6)
      {
        char v94 = v20;
        unsigned __int16 v95 = strlen(*(const char **)(a3 + 112));
        unsigned __int16 v96 = v95;
        *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v95 + 2;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = 0;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = 64;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = *(_WORD *)(a6 + 2 * (unsigned __int16)v21) & 0x7FFF ^ 0x40;
        if (v95)
        {
          uint64_t v97 = v95;
          do
          {
            int v98 = *v93++;
            unsigned int v99 = v98
                + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7)
                + ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8);
            if (v99 > 0x7FEC) {
              LOWORD(v99) = v99 - 32749;
            }
            *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v99;
            *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v99 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
            --v97;
          }
          while (v97);
        }
        int v100 = ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8)
             + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7);
        unsigned __int16 v101 = v100 + 42;
        unsigned __int16 v102 = v100 - 32707;
        if (v101 <= 0x7FECu) {
          unsigned __int16 v102 = v101;
        }
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v102;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v102 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
        *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
        *(unsigned char *)(a7 + (unsigned __int16)v21) = 0;
        *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 140;
        LOWORD(v22) = v21 + 1;
        if (!v94)
        {
          uint64_t result = PRSfxGet(*(const char **)(a3 + 112), 1, v127, v126, &v128, v15);
          if (result) {
            return result;
          }
          uint64_t v103 = v128;
          if (v128)
          {
            unsigned __int16 v104 = 0;
            unsigned __int16 v105 = 64;
            __int16 v106 = 64;
            do
            {
              for (unsigned int i = (unsigned __int16)(v96 - v127[--v103]); i > v104; ++v104)
              {
                unsigned __int16 v105 = ((v105 & 0x7F) << 8) + 19 * (v105 >> 7) + *(unsigned __int8 *)(*(void *)(a3 + 112) + v104);
                if (v105 > 0x7FECu) {
                  v105 -= 32749;
                }
                __int16 v106 = (v105 ^ v106) & 0x7FFF;
              }
              *(_WORD *)(a8 + 2 * (unsigned __int16)v22) = v104 + 2;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v22) = v105;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v22) = v106;
              unsigned int v108 = *(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v22);
              int v109 = ((v108 & 0x7F) << 8) + 19 * (v108 >> 7);
              unsigned __int16 v110 = v109 + 42;
              unsigned __int16 v111 = v109 - 32707;
              if (v110 <= 0x7FECu) {
                unsigned __int16 v111 = v110;
              }
              *(_WORD *)(v123 + 2 * (unsigned __int16)v22) = v111;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v22) = (v111 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v22)) & 0x7FFF;
              *(_WORD *)(a9 + 2 * (unsigned __int16)v22) = -1;
              *(unsigned char *)(a7 + (unsigned __int16)v22) = v126[v103];
              *(_WORD *)(a10 + 2 * (unsigned __int16)v22) = 140;
              LOWORD(v22) = v22 + 1;
              unsigned __int16 v128 = v103;
            }
            while ((_WORD)v103);
          }
        }
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    if (a4 == 140)
    {
      if (!v118)
      {
        char v20 = 0;
        LOWORD(v21) = 0;
        goto LABEL_103;
      }
      LOWORD(v22) = 0;
      goto LABEL_125;
    }
LABEL_30:
    uint64_t v39 = *(void *)(a1 + 32);
    *(void *)uint64_t v39 = 0xDC00000068;
    *(_WORD *)(v39 + _Block_object_dispose(&STACK[0x510], 8) = 60;
    return 230;
  }
  int v112 = v19;
  if (a4 == 10 || a4 == 20)
  {
    uint64_t v24 = 0;
    uint64_t v23 = (unsigned __int16)v19;
    do
    {
      while (1)
      {
        uint64_t v25 = v23;
        uint64_t v26 = *(const char **)(v18 + 8 * v24);
        __int16 v27 = strlen(v26);
        *(_WORD *)(a8 + 2 * v24) = v27;
        SLfun((uint64_t)v26, 0, (__int16)(v27 - 1), (unsigned __int16 *)(v123 + 2 * v24), (_WORD *)(a6 + 2 * v24));
        if ((_WORD)v17) {
          break;
        }
        *(_WORD *)(a9 + 2 * v24) = -1;
        *(unsigned char *)(a7 + v24) = 0;
        uint64_t v18 = v125;
        *(_WORD *)(a10 + 2 * v24++) = 20;
        uint64_t v23 = v25;
        if (v24 == v25)
        {
          int v22 = v112;
          a5 = v123;
          int v29 = a4;
          goto LABEL_34;
        }
      }
      int v28 = v24;
      *(_WORD *)(a9 + 2 * v24) = v24;
      *(unsigned char *)(a7 + v24) = 0;
      uint64_t v18 = v125;
      *(_WORD *)(a10 + 2 * v24++) = 20;
      uint64_t v23 = v25;
    }
    while (v24 != v25);
    int v22 = v112;
    a5 = v123;
    int v29 = a4;
    if ((*(unsigned char *)(*(void *)(a3 + 152) + 94) & 2) == 0)
    {
      *(_WORD *)(a9 + 2 * v25) = -1;
      *(unsigned char *)(a7 + v25) = 0;
      uint64_t v30 = *(void *)(a3 + 152);
      uint64_t v31 = *(void *)(v30 + 128);
      if (v31)
      {
        uint64_t v32 = v25;
        __int16 v33 = strlen(*(const char **)(v30 + 128));
        *(_WORD *)(a8 + 2 * v25) = v33;
        unsigned int v34 = (unsigned __int16 *)(v123 + 2 * v25);
        unsigned int v35 = (_WORD *)(a6 + 2 * v25);
        int v36 = (__int16)(v33 - 1);
        uint64_t v37 = v31;
      }
      else
      {
        __int16 v41 = *(_WORD *)(v30 + 32);
        *(_WORD *)(a8 + 2 * v25) = v41;
        uint64_t v37 = *(void *)(v30 + 16);
        unsigned int v34 = (unsigned __int16 *)(v123 + 2 * v25);
        unsigned int v35 = (_WORD *)(a6 + 2 * v25);
        int v36 = (__int16)(v41 - 1);
        uint64_t v32 = v25;
      }
      SLfun(v37, 0, v36, v34, v35);
      uint64_t v18 = v125;
      *(_WORD *)(a10 + 2 * v32) = 30;
      int v22 = v28 + 2;
      a5 = v123;
      uint64_t v23 = v32;
    }
LABEL_34:
    if (v29 == 20) {
      goto LABEL_125;
    }
  }
  else
  {
    if (a4 != 50) {
      goto LABEL_30;
    }
    int v22 = 0;
    uint64_t v23 = (unsigned __int16)v19;
  }
  uint64_t v42 = 0;
  int v38 = 0;
  LODWORD(v21) = v22;
  uint64_t v114 = v23;
  uint64_t v115 = a8;
  while (1)
  {
    int v121 = v38;
    char v119 = *(const char **)(v18 + 8 * v42);
    uint64_t v43 = a5;
    __int16 v44 = strlen(v119);
    *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v44 + 1;
    unsigned __int8 v45 = (unsigned __int16 *)(v43 + 2 * (unsigned __int16)v21);
    SLfun((uint64_t)v119, 0, (__int16)(v44 - 1), v45, (_WORD *)(a6 + 2 * (unsigned __int16)v21));
    int v46 = ((*v45 & 0x7F) << 8) + 19 * (*v45 >> 7);
    unsigned __int16 v47 = v46 + 42;
    unsigned __int16 v48 = v46 - 32707;
    if (v47 <= 0x7FECu) {
      unsigned __int16 v48 = v47;
    }
    *unsigned __int8 v45 = v48;
    *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v48 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
    __int16 v49 = v118 ? v42 : -1;
    *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v49;
    *(unsigned char *)(a7 + (unsigned __int16)v21) = 0;
    *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 50;
    uint64_t result = PRSfxGet(*(const char **)(v125 + 8 * v42), 1, v127, v126, &v128, a2);
    if (result) {
      return result;
    }
    uint64_t v50 = v128;
    int v38 = v121;
    if (!v128) {
      int v38 = 1;
    }
    LODWORD(v21) = v21 + 1;
    if (v128)
    {
      unsigned __int16 v51 = 0;
      unsigned __int16 v52 = 0;
      __int16 v53 = 0;
      a8 = v115;
      a5 = v123;
      uint64_t v18 = v125;
      do
      {
        for (unsigned int j = (unsigned __int16)(v44 - v127[--v50]); j > v51; ++v51)
        {
          unsigned __int16 v52 = ((v52 & 0x7F) << 8) + 19 * (v52 >> 7) + *(unsigned __int8 *)(*(void *)(v125 + 8 * v42) + v51);
          if (v52 > 0x7FECu) {
            v52 -= 32749;
          }
          __int16 v53 = (v52 ^ v53) & 0x7FFF;
        }
        *(_WORD *)(v115 + 2 * (unsigned __int16)v21) = v51 + 1;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v52;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = v53;
        unsigned int v55 = *(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21);
        int v56 = ((v55 & 0x7F) << 8) + 19 * (v55 >> 7);
        unsigned __int16 v57 = v56 + 42;
        unsigned __int16 v58 = v56 - 32707;
        if (v57 <= 0x7FECu) {
          unsigned __int16 v58 = v57;
        }
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v58;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v58 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
        *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v49;
        *(unsigned char *)(a7 + (unsigned __int16)v21) = v126[v50];
        *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 50;
        unsigned __int16 v128 = v50;
        LODWORD(v21) = v21 + 1;
      }
      while ((_WORD)v50);
    }
    else
    {
      a8 = v115;
      a5 = v123;
      uint64_t v18 = v125;
    }
    if (++v42 == v114)
    {
      LOWORD(v22) = v21;
      int v13 = a4;
      LOWORD(v19) = v112;
      uint64_t v15 = a2;
      if (a4 == 50) {
        goto LABEL_125;
      }
      goto LABEL_57;
    }
  }
}

uint64_t PRerr(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unsigned int v54 = 0;
  *((_DWORD *)a1 + 21) = 0;
  *((_DWORD *)a1 + 22) = 0;
  unsigned int v4 = a1 + 84;
  *((_WORD *)a1 + 46) = 0;
  if (!*((void *)a1 + 1))
  {
    uint64_t v26 = 0xE6FFFFFF8ALL;
    goto LABEL_64;
  }
  uint64_t v7 = PRGetAppElem(*a1);
  if (!v7)
  {
    *(void *)(a1 + 84) = 0xE6FFFFFF93;
    __int16 v27 = 480;
LABEL_65:
    *((_WORD *)a1 + 46) = v27;
    return 230;
  }
  uint64_t v8 = v7;
  *(void *)(v7 + 32) = v4;
  uint64_t v9 = PRGetDbElem(*a1, a1[1]);
  if (!v9)
  {
    uint64_t v26 = 0xE6FFFFFF92;
    goto LABEL_64;
  }
  uint64_t v10 = v9;
  unsigned __int8 v55 = 0;
  __int16 v53 = 0;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 48);
  unsigned int v13 = a1[80];
  int v14 = a1[96] & 0xF0;
  if (v14 == 32 && v13 == 16) {
    int v14 = 64;
  }
  if (v13 == 13 && v14 == 32) {
    LOBYTE(v14) = 0x80;
  }
  if (v13 == 13 && (v14 & 0xF0) == 16) {
    unsigned __int8 v16 = 64;
  }
  else {
    unsigned __int8 v16 = v14;
  }
  PRLangDialPos(*(void *)(v9 + 48), &v55, 1, a1[80], v16 & 0xF0);
  int v17 = (unsigned __int8 *)*((void *)a1 + 1);
  unsigned int v18 = v17[12];
  int v19 = v17[13];
  unsigned int v20 = a1[16];
  if (a2 == 18)
  {
    if (!a3)
    {
      int AltEmOff = GetAltEmOff(v12, (uint64_t)v56, v18, v19, v55);
      if (AltEmOff)
      {
        int v21 = AltEmOff;
        goto LABEL_51;
      }
      if (((v57 != 0) & (v20 >> 4)) != 0) {
        char v31 = 16;
      }
      else {
        char v31 = 0;
      }
      a1[16] = v31;
      if ((v20 & 4) != 0 && v58)
      {
        v31 |= 4u;
        a1[16] = v31;
      }
      uint64_t result = 0;
      if ((v20 & 1) != 0 && v59)
      {
        uint64_t result = 0;
        a1[16] = v31 | 1;
      }
      return result;
    }
    uint64_t v26 = 0xE6FFFFFF94;
LABEL_64:
    *(void *)(a1 + 84) = v26;
    __int16 v27 = 540;
    goto LABEL_65;
  }
  if (a2 != 17)
  {
    if (a2 != 16)
    {
      uint64_t v26 = 0xE6FFFFFF95;
      goto LABEL_64;
    }
    if (a3 == 2)
    {
      unsigned __int8 v30 = a1[48];
      if ((v30 & 0x15) != 0)
      {
        if (((a1[48] & 0x10) == 0 || !*((void *)a1 + 7))
          && ((a1[48] & 4) == 0 || !*((void *)a1 + 8))
          && ((a1[48] & 1) == 0 || !*((void *)a1 + 9)))
        {
          if (v17[32])
          {
            uint64_t v40 = *(void *)(v12 + 96);
            int v39 = v17[32];
            int v41 = (*(unsigned __int8 *)(v40 + (4 * v39 - 4)) << 24) | (*(unsigned __int8 *)(v40 + (4 * v39 - 3)) << 16) | (*(unsigned __int8 *)(v40 + (4 * v39 - 2)) << 8) | *(unsigned __int8 *)(v40 + (4 * v39 - 1));
          }
          else
          {
            int v41 = 0;
          }
          if (v17[33])
          {
            uint64_t v43 = *(void *)(v12 + 96);
            int v42 = v17[33];
            int v44 = (*(unsigned __int8 *)(v43 + (4 * v42 - 4)) << 24) | (*(unsigned __int8 *)(v43 + (4 * v42 - 3)) << 16) | (*(unsigned __int8 *)(v43 + (4 * v42 - 2)) << 8) | *(unsigned __int8 *)(v43 + (4 * v42 - 1));
          }
          else
          {
            int v44 = 0;
          }
          int v45 = v17[34];
          if (v45)
          {
            uint64_t v46 = *(void *)(v12 + 96);
            int v47 = (*(unsigned __int8 *)(v46 + (4 * v45 - 4)) << 24) | (*(unsigned __int8 *)(v46 + (4 * v45 - 3)) << 16) | (*(unsigned __int8 *)(v46 + (4 * v45 - 2)) << 8) | *(unsigned __int8 *)(v46 + (4 * v45 - 1));
          }
          else
          {
            int v47 = 0;
          }
          int v21 = 0;
          if ((a1[48] & 0x10) != 0 && v41)
          {
            int v22 = PRgetWarn((char **)a1 + 7, v41, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22) {
              goto LABEL_122;
            }
            int v21 = 1;
          }
          if ((v30 & 4) != 0 && v44)
          {
            int v22 = PRgetWarn((char **)a1 + 8, v44, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22) {
              goto LABEL_122;
            }
            int v21 = 1;
          }
          if ((v30 & 1) != 0 && v47)
          {
            int v22 = PRgetWarn((char **)a1 + 9, v47, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22) {
              goto LABEL_122;
            }
            int v21 = 1;
          }
          if (((v30 & 0x10) == 0 || *((void *)a1 + 7))
            && ((v30 & 4) == 0 || *((void *)a1 + 8))
            && ((v30 & 1) == 0 || *((void *)a1 + 9)))
          {
LABEL_145:
            if (v21) {
              return 0;
            }
            goto LABEL_47;
          }
LABEL_147:
          *(void *)(a1 + 84) = 0x4000001F8;
          *((_WORD *)a1 + 46) = 540;
          return 4;
        }
        goto LABEL_63;
      }
    }
    else if (a3 == 1 && (v20 & 0x15) != 0)
    {
      if (((v20 & 0x10) == 0 || !*((void *)a1 + 3))
        && ((v20 & 4) == 0 || !*((void *)a1 + 4))
        && ((v20 & 1) == 0 || !*((void *)a1 + 5)))
      {
        int v21 = GetAltEmOff(v12, (uint64_t)v56, v18, v19, v55);
        if (!v21)
        {
          if ((v20 & 0x10) != 0 && v57)
          {
            int v22 = PRgetmsg((char **)&v54, v57, v12);
            if (v22) {
              goto LABEL_122;
            }
            int inserted = InsertString((const char **)a1 + 3, *((void *)a1 + 1), (const char **)&v54, 1, v13, v11, v8, v10);
            if (inserted)
            {
LABEL_38:
              int v24 = inserted;
              if (v54) {
                free(v54);
              }
              uint64_t result = 220;
              *((_DWORD *)a1 + 21) = v24;
              *((_DWORD *)a1 + 22) = 220;
              goto LABEL_53;
            }
            if (v13 == 16) {
              ConvertString(*((char **)a1 + 3), v10);
            }
            int v21 = 1;
          }
          if ((v20 & 4) == 0 || !v58) {
            goto LABEL_119;
          }
          int v22 = PRgetmsg((char **)&v54, v58, v12);
          if (!v22)
          {
            int inserted = InsertString((const char **)a1 + 4, *((void *)a1 + 1), (const char **)&v54, 2, v13, v11, v8, v10);
            if (inserted) {
              goto LABEL_38;
            }
            if (v13 == 16) {
              ConvertString(*((char **)a1 + 4), v10);
            }
            int v21 = 1;
LABEL_119:
            if ((v20 & 1) == 0 || !v59) {
              goto LABEL_139;
            }
            unsigned __int16 v48 = (const char **)(a1 + 40);
            int v22 = PRgetmsg((char **)a1 + 5, v59, v12);
            if (v22) {
              goto LABEL_122;
            }
            __int16 v53 = strlen(*v48);
            int v49 = *(unsigned __int8 *)(v10 + 20);
            if (v49 == 6)
            {
              if (*(_WORD *)(v10 + 16) != 64)
              {
LABEL_131:
                if (*(unsigned char *)(v10 + 20) == 8 && (*(_WORD *)(v10 + 18) & 0x40) != 0)
                {
                  __int16 v52 = strlen(*v48);
                  ToUpUnaccentedCnv(*v48, v52, 8, v11);
                }
                if (*(unsigned char *)(v8 + 28)) {
                  SLchcnv((char *)*v48, v53, (unsigned __int8 *)*v48, 0, v13);
                }
                if (v13 == 16) {
                  ConvertString((char *)*v48, v10);
                }
                int v21 = 1;
LABEL_139:
                if (((v20 & 0x10) == 0 || *((void *)a1 + 3))
                  && ((v20 & 4) == 0 || *((void *)a1 + 4))
                  && ((v20 & 1) == 0 || *((void *)a1 + 5)))
                {
                  goto LABEL_145;
                }
                goto LABEL_147;
              }
              OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 223, v8);
              int v49 = *(unsigned __int8 *)(v10 + 20);
            }
            if (v49 == 5)
            {
              __int16 v50 = *(_WORD *)(v10 + 18);
              if ((v50 & 0x10) != 0)
              {
                OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 247, v8);
                OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 230, v8);
                __int16 v50 = *(_WORD *)(v10 + 18);
              }
              if ((v50 & 0x40) != 0)
              {
                __int16 v51 = strlen(*v48);
                ToUpUnaccentedCnv(*v48, v51, 5, v11);
              }
            }
            goto LABEL_131;
          }
LABEL_122:
          int v21 = v22;
          uint64_t result = 220;
          goto LABEL_52;
        }
LABEL_51:
        uint64_t result = 230;
LABEL_52:
        *((_DWORD *)a1 + 21) = v21;
        *((_DWORD *)a1 + 22) = result;
LABEL_53:
        *((_WORD *)a1 + 46) = 540;
        return result;
      }
LABEL_63:
      uint64_t v26 = 0xE6FFFFFF8CLL;
      goto LABEL_64;
    }
LABEL_47:
    uint64_t v26 = 0xE6FFFFFF8BLL;
    goto LABEL_64;
  }
  if (a3) {
    goto LABEL_47;
  }
  int v29 = (void *)*((void *)a1 + 3);
  if (v29)
  {
    free(v29);
    *((void *)a1 + 3) = 0;
    int v21 = 1;
  }
  else
  {
    int v21 = 0;
  }
  uint64_t v32 = (void *)*((void *)a1 + 4);
  if (v32)
  {
    free(v32);
    *((void *)a1 + 4) = 0;
    int v21 = 1;
  }
  __int16 v33 = (void *)*((void *)a1 + 5);
  if (v33)
  {
    free(v33);
    *((void *)a1 + 5) = 0;
    int v21 = 1;
  }
  unsigned int v34 = (void *)*((void *)a1 + 7);
  if (v34)
  {
    free(v34);
    *((void *)a1 + 7) = 0;
    int v21 = 1;
  }
  unsigned int v35 = (void *)*((void *)a1 + 8);
  if (!v35)
  {
    int v38 = a1 + 72;
    uint64_t result = *((void *)a1 + 9);
    if (!result) {
      goto LABEL_145;
    }
LABEL_87:
    free((void *)result);
    uint64_t result = 0;
    *(void *)int v38 = 0;
    return result;
  }
  free(v35);
  uint64_t v37 = *((void *)a1 + 9);
  int v36 = a1 + 72;
  uint64_t result = v37;
  *((void *)v36 - 1) = 0;
  if (v37)
  {
    int v38 = v36;
    goto LABEL_87;
  }
  return result;
}

uint64_t PRLangDialPos(uint64_t a1, unsigned char *a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(const char **)(a1 + 112);
  *a2 = 0;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 25);
  if (*(unsigned char *)(a1 + 25))
  {
    int v11 = 0;
    int v12 = 1;
    while (1)
    {
      int v13 = *(unsigned __int8 *)v5;
      int v14 = v5 + 2;
      int v15 = *((unsigned __int8 *)v5 + 1);
      if (v5[1]) {
        break;
      }
      if (v13 != a4)
      {
        if (a3) {
          *a2 = ++v11;
        }
LABEL_12:
        uint64_t v5 = &v14[strlen(v14) + 1];
        if (v6 > v12++) {
          continue;
        }
      }
      return 0;
    }
    uint64_t v16 = (uint64_t)&v5[(v15 - 1) + 3];
    while (v13 != a4 || *(unsigned __int8 *)v14 != a5)
    {
      --v15;
      ++v14;
      *a2 = ++v11;
      if (!(_BYTE)v15)
      {
        int v14 = (const char *)v16;
        goto LABEL_12;
      }
    }
  }
  return 0;
}

uint64_t GetAltEmOff(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned __int16 v23 = 0;
  if (!BinarySearch(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 26), 1, a3, 1, &v23)) {
    return 115;
  }
  uint64_t v9 = bswap32(*(_DWORD *)(*(void *)(a1 + 48)
                         + 4
                         * (int)(a4 + (bswap32(*(unsigned __int16 *)(*(void *)(a1 + 40) + 2 * v23)) >> 16) - 1)));
  if (v9 == -1) {
    return 115;
  }
  unsigned int v10 = 0;
  int v11 = (unsigned char *)(*(void *)(a1 + 64) + v9);
  unsigned int v12 = *v11;
  unsigned int v13 = v12 >> 6;
  v24[0] = *v11 >> 6;
  do
  {
    v24[1] = (v12 >> 4) & 3;
    v24[2] = (v12 >> 2) & 3;
    v24[3] = v12 & 3;
    if (v10 != a5)
    {
      v24[0] = 0;
      v13 += (v12 & 3) + ((v12 >> 4) & 3) + ((v12 >> 2) & 3) + 1;
      v11 += v13;
      unsigned int v12 = *v11;
    }
  }
  while (v10++ < a5);
  uint64_t v15 = 0;
  uint64_t v16 = v11 + 1;
  do
  {
    *(_DWORD *)(a2 + 4 * v15) = 0;
    unsigned int v17 = v24[v15];
    if (v24[v15])
    {
      unsigned int v18 = 0;
      int v19 = 0;
      do
      {
        *(_DWORD *)(a2 + 4 * v15) = v19 << 8;
        unsigned __int8 v20 = *v16++;
        int v21 = v20 | (v19 << 8);
        *(_DWORD *)(a2 + 4 * v15) = v21;
        ++v18;
        int v19 = v21;
      }
      while (v18 < v17);
      *(_DWORD *)(a2 + 4 * v15) = 4 * v21;
    }
    ++v15;
  }
  while (v15 != 4);
  return 0;
}

uint64_t InsertString(const char **a1, uint64_t a2, const char **a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = a5;
  LOWORD(__n) = 0;
  if (a4 == 1)
  {
    uint64_t v72 = *(void *)(a2 + 24);
    if (a5 == 16)
    {
      if (v72)
      {
        uint64_t v16 = *(unsigned __int16 *)(v72 + 18);
        if (*(_WORD *)(v72 + 18))
        {
          uint64_t v17 = *(void *)v72;
          unsigned int v18 = *(__int16 **)(v72 + 8);
          do
          {
            uint64_t v19 = *v18++;
            unsigned __int8 v20 = (char *)(v17 + v19);
            if (*(unsigned char *)(v17 + v19)) {
              ConvertString(v20, a8);
            }
            --v16;
          }
          while (v16);
        }
      }
    }
    LOWORD(__n) = strlen(*a3);
    if (*(unsigned char *)(a8 + 20) == 5)
    {
      __int16 v21 = *(_WORD *)(a8 + 18);
      if ((v21 & 0x10) != 0)
      {
        OneToMultiChrCnv(a3, (unsigned __int16 *)&__n, 247, a7);
        OneToMultiChrCnv(a3, (unsigned __int16 *)&__n, 230, a7);
        __int16 v21 = *(_WORD *)(a8 + 18);
      }
      if ((v21 & 0x40) != 0) {
        ToUpUnaccentedCnv(*a3, (__int16)__n, 5, a6);
      }
    }
    uint64_t v22 = *(void *)(a2 + 72);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 8);
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v10 = a5;
    if (*(unsigned char *)(a7 + 28)) {
      ConvertAlts(v72, 1, a5);
    }
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v23 = 0;
  }
  int v24 = *(uint64_t **)(a2 + 72);
  unsigned int v70 = a1;
  if (v24) {
    uint64_t v25 = *v24;
  }
  else {
    uint64_t v25 = 0;
  }
  if ((!v72 || !*(_WORD *)(v72 + 18)) && (!v25 || !*(_WORD *)(v25 + 18)) && (!v23 || !*(_WORD *)(v23 + 18)))
  {
    unsigned __int16 v61 = *a3;
    unsigned __int16 v62 = v70;
    *unsigned int v70 = *a3;
    LOWORD(__n) = strlen(v61);
    goto LABEL_94;
  }
  uint64_t v26 = (char *)malloc_type_calloc(1uLL, 0x281uLL, 0xA1C651E4uLL);
  if (!v26) {
    return 120;
  }
  __int16 v27 = v26;
  LOWORD(__n) = strlen(*a3);
  uint64_t v67 = a8;
  uint64_t v68 = a7;
  if (a4 == 1)
  {
    int v28 = 0;
    int v29 = 0;
    int v30 = Alt_Str[0];
    int v31 = Fil_Str[0];
    while (1)
    {
      uint64_t v32 = *a3;
      uint64_t v33 = (unsigned __int16)v29;
      int v34 = (*a3)[(unsigned __int16)v29];
      BOOL v35 = v34 == v30;
      if (v34 != v30 && v34 != v31)
      {
        int v37 = Ref_Str[0];
        unint64_t v38 = (unsigned __int16)v28;
        if ((*a3)[(unsigned __int16)v29]) {
          BOOL v39 = v34 == Ref_Str[0];
        }
        else {
          BOOL v39 = 1;
        }
        if (v39)
        {
          int v40 = (unsigned __int16)v28;
LABEL_53:
          BOOL v35 = 0;
          int v28 = v40;
          goto LABEL_54;
        }
        int v40 = (unsigned __int16)v28;
        if ((unsigned __int16)v28 > 0x27Fu) {
          goto LABEL_53;
        }
        while (1)
        {
          ++v28;
          v27[v38] = v34;
          ++v29;
          uint64_t v32 = *a3;
          uint64_t v33 = (unsigned __int16)v29;
          int v34 = (*a3)[(unsigned __int16)v29];
          BOOL v35 = v34 == v30;
          if (v34 == v30 || v34 == v31) {
            break;
          }
          int v40 = v38 + 1;
          if ((*a3)[(unsigned __int16)v29]) {
            BOOL v42 = v34 == v37;
          }
          else {
            BOOL v42 = 1;
          }
          if (!v42)
          {
            BOOL v43 = v38++ > 0x27E;
            if (!v43) {
              continue;
            }
          }
          goto LABEL_53;
        }
      }
LABEL_54:
      if ((unsigned __int16)v28 > 0x27Fu || !v34)
      {
        LOWORD(v50) = v28;
        goto LABEL_92;
      }
      char v44 = !v35;
      if (!v72) {
        char v44 = 1;
      }
      if ((v44 & 1) != 0 || (int v45 = (void *)v72, v46 = Alt_Str, !*(void *)v72))
      {
        BOOL v47 = v34 != Ref_Str[0] || v23 == 0;
        if (v47 || (int v45 = (void *)v23, v46 = Ref_Str, !*(void *)v23))
        {
          if (!v25) {
            goto LABEL_70;
          }
          int v45 = (void *)v25;
          uint64_t v46 = Fil_Str;
          if (!*(void *)v25) {
            goto LABEL_70;
          }
        }
      }
      int v48 = CompString(v45, (unsigned __int8 *)v46, &v32[v33], (uint64_t)v27, (unsigned __int16)v28);
      int v30 = Alt_Str[0];
      int v31 = Fil_Str[0];
      if (!v48)
      {
        uint64_t v32 = *a3;
LABEL_70:
        char v51 = v32[v33];
        int v50 = v28 + 1;
        v27[(unsigned __int16)v28] = v51;
        int v49 = 1;
        goto LABEL_71;
      }
      int v49 = v48;
      int v50 = strlen(v27);
LABEL_71:
      v29 += v49;
      int v28 = v50;
      if ((unsigned __int16)__n < (unsigned __int16)v29) {
        goto LABEL_92;
      }
    }
  }
  int v50 = 0;
  int v52 = 0;
  do
  {
    int v53 = Fil_Str[0];
    unsigned int v54 = *a3;
    uint64_t v55 = (unsigned __int16)v52;
    int v56 = (*a3)[(unsigned __int16)v52];
    if (v56 != Fil_Str[0])
    {
      unint64_t v57 = (unsigned __int16)v50;
      if (!(*a3)[(unsigned __int16)v52])
      {
        int v58 = (unsigned __int16)v50;
LABEL_83:
        int v50 = v58;
        goto LABEL_84;
      }
      int v58 = (unsigned __int16)v50;
      if ((unsigned __int16)v50 > 0x27Fu) {
        goto LABEL_83;
      }
      while (1)
      {
        ++v50;
        v27[v57] = v56;
        ++v52;
        unsigned int v54 = *a3;
        uint64_t v55 = (unsigned __int16)v52;
        int v56 = (*a3)[(unsigned __int16)v52];
        if (v56 == v53) {
          break;
        }
        int v58 = v57 + 1;
        if ((*a3)[(unsigned __int16)v52])
        {
          BOOL v43 = v57++ > 0x27E;
          if (!v43) {
            continue;
          }
        }
        goto LABEL_83;
      }
    }
LABEL_84:
    if ((unsigned __int16)v50 > 0x27Fu) {
      break;
    }
    int v59 = CompString((void *)v25, (unsigned __int8 *)Fil_Str, &v54[v55], (uint64_t)v27, (unsigned __int16)v50);
    if (v59)
    {
      int v60 = v59;
      int v50 = strlen(v27);
    }
    else
    {
      v27[(unsigned __int16)v50] = (*a3)[v55];
      int v60 = 1;
      ++v50;
    }
    v52 += v60;
  }
  while ((unsigned __int16)__n >= (unsigned __int16)v52);
LABEL_92:
  v27[(unsigned __int16)v50] = 0;
  LOWORD(__n) = strlen(v27);
  unsigned __int16 v63 = (char *)malloc_type_malloc((unsigned __int16)__n + 1, 0xC9CBE997uLL);
  unsigned __int16 v62 = v70;
  *unsigned int v70 = v63;
  if (!v63)
  {
    free(v27);
    return 120;
  }
  strncpy(v63, v27, (unsigned __int16)__n);
  (*v70)[(unsigned __int16)__n] = 0;
  free(v27);
  free((void *)*a3);
  *a3 = 0;
  unsigned int v10 = a5;
  a8 = v67;
  a7 = v68;
LABEL_94:
  int v64 = *(unsigned __int8 *)(a8 + 20);
  if (v64 == 6)
  {
    if (*(_WORD *)(a8 + 16) == 64)
    {
      OneToMultiChrCnv(v62, (unsigned __int16 *)&__n, 223, a7);
      int v64 = *(unsigned __int8 *)(a8 + 20);
      goto LABEL_97;
    }
  }
  else
  {
LABEL_97:
    if (v64 == 8 && (*(_WORD *)(a8 + 18) & 0x40) != 0)
    {
      __int16 v65 = strlen(*v62);
      ToUpUnaccentedCnv(*v62, v65, 8, a6);
    }
  }
  if (*(unsigned char *)(a7 + 28))
  {
    SLchcnv((char *)*v62, (__int16)__n, (unsigned __int8 *)*v62, 0, v10);
    if (*(unsigned char *)(a7 + 28)) {
      ConvertAlts(v72, 0, v10);
    }
  }
  return 0;
}

char *ConvertString(char *result, uint64_t a2)
{
  int v2 = *(_WORD *)(a2 + 16) & 0xF0;
  if (v2 == 64) {
    char v3 = 115;
  }
  else {
    char v3 = 122;
  }
  while (1)
  {
    int v4 = *result;
    if (v4 == 31) {
      break;
    }
    if (v4 == 127)
    {
      *uint64_t result = v3;
    }
    else if (!*result)
    {
      return result;
    }
LABEL_13:
    ++result;
  }
  if (v2 != 128)
  {
    *result++ = 39;
    goto LABEL_13;
  }
  if (result[1])
  {
    *uint64_t result = result[1];
    *++uint64_t result = 39;
    goto LABEL_13;
  }
  return result;
}

uint64_t PRgetWarn(char **a1, int a2, unsigned int *a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unsigned int v14 = *a3;
  if (SLSeek(*a3, a3[1] + a2, 0)) {
    return 111;
  }
  std::__fs::filesystem::path __s = 0;
  unsigned int v38 = 0;
  unsigned __int16 v37 = 0;
  if (SLFRead(v14, 162, __dst, &v38)) {
    return 112;
  }
  char v16 = __dst[0];
  if (__dst[0])
  {
    char v17 = 0;
    int v18 = 0;
    uint64_t v19 = __dst;
    int v20 = 1;
    do
    {
      int v21 = (char)v19[1];
      if (v21 < 0)
      {
        int v18 = v19[2];
        v19 += 3;
        int v22 = 3;
      }
      else
      {
        v19 += 2;
        int v22 = 2;
      }
      --v16;
      int v23 = v21 & 0x7F;
      BOOL v24 = v18 != a5 && v21 <= -1;
      unsigned int v25 = *v19;
      int v26 = v22 + v20;
      if (!v24 && v23 == a4) {
        char v17 = 1;
      }
      if (v17) {
        int v28 = 0;
      }
      else {
        int v28 = *v19;
      }
      int v20 = v26 + v28;
    }
    while (v16);
    uint64_t v29 = v20;
  }
  else
  {
    unsigned int v25 = 0;
    uint64_t v29 = 1;
  }
  size_t v30 = v25;
  int v31 = (char *)malloc_type_malloc(v25 + 1, 0xA5C0EAA2uLL);
  *a1 = v31;
  if (!v31) {
    return 120;
  }
  uint64_t v32 = v31;
  std::__fs::filesystem::path __s = v31;
  memcpy(v31, &__dst[v29], v30);
  v32[v30] = 0;
  SLcrypt(v32, v30, (uint64_t)&SLWkey, 7);
  int v33 = *(unsigned __int8 *)(a8 + 20);
  if (v33 != 6) {
    goto LABEL_29;
  }
  if (*(_WORD *)(a8 + 16) == 64)
  {
    OneToMultiChrCnv((const char **)&__s, &v37, 223, a7);
    int v33 = *(unsigned __int8 *)(a8 + 20);
LABEL_29:
    if (v33 == 5)
    {
      __int16 v34 = *(_WORD *)(a8 + 18);
      if ((v34 & 0x10) != 0)
      {
        OneToMultiChrCnv((const char **)&__s, &v37, 247, a7);
        OneToMultiChrCnv((const char **)&__s, &v37, 230, a7);
        __int16 v34 = *(_WORD *)(a8 + 18);
      }
      if ((v34 & 0x40) != 0)
      {
        __int16 v35 = strlen(__s);
        ToUpUnaccentedCnv(__s, v35, 5, a6);
      }
    }
  }
  if (*(unsigned char *)(a8 + 20) == 8 && (*(_WORD *)(a8 + 18) & 0x40) != 0)
  {
    __int16 v36 = strlen(__s);
    ToUpUnaccentedCnv(__s, v36, 8, a6);
  }
  if (*(unsigned char *)(a7 + 28)) {
    SLchcnv(__s, v30, (unsigned __int8 *)__s, 0, a4);
  }
  return 0;
}

uint64_t ConvertAlts(uint64_t result, int a2, unsigned int a3)
{
  if (result)
  {
    uint64_t v3 = *(unsigned __int16 *)(result + 18);
    if (*(_WORD *)(result + 18))
    {
      uint64_t v6 = *(void *)result;
      uint64_t v7 = *(__int16 **)(result + 8);
      do
      {
        uint64_t v8 = *v7++;
        uint64_t v9 = (char *)(v6 + v8);
        if (*(unsigned char *)(v6 + v8))
        {
          __int16 v10 = strlen(v9);
          uint64_t result = SLchcnv(v9, v10, (unsigned __int8 *)v9, a2, a3);
        }
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t CompString(void *a1, unsigned __int8 *a2, unsigned char *a3, uint64_t a4, unsigned int a5)
{
  if (SLstrncmp(a3, a2, 3)) {
    return 0;
  }
  unsigned int v13 = a1;
  uint64_t v11 = *a1;
  uint64_t v12 = v13[1];
  unsigned __int16 v14 = a3[3] - 49;
  if (*a2 == Alt_Str[0])
  {
    *(unsigned char *)(a4 + a5) = 123;
    LOWORD(a5) = a5 + 1;
  }
  *(unsigned char *)(a4 + (unsigned __int16)a5) = 0;
  __int16 v15 = strlen((const char *)a4);
  char v16 = (const char *)(v11 + *(__int16 *)(v12 + 2 * v14));
  if (*v16)
  {
    __int16 v17 = v15;
    if ((unsigned __int16)(strlen(v16) + v15) >= 0x281uLL)
    {
      strncat((char *)a4, v16, (unsigned __int16)(640 - v17));
      *(unsigned char *)(a4 + 640) = 0;
      return 4;
    }
    strcat((char *)a4, v16);
    if (*a2 != Alt_Str[0]) {
      return 4;
    }
    unsigned __int16 v19 = strlen((const char *)a4);
    *(unsigned char *)(a4 + v19) = 125;
    uint64_t v18 = (unsigned __int16)(v19 + 1);
LABEL_15:
    *(unsigned char *)(a4 + v1_Block_object_dispose(&STACK[0x510], 8) = 0;
    return 4;
  }
  if ((_WORD)a5)
  {
    uint64_t v18 = (unsigned __int16)(a5 - 1);
    if (*(unsigned char *)(a4 + v18) == 32) {
      goto LABEL_15;
    }
  }
  if (a3[4] == 32) {
    return 5;
  }
  else {
    return 4;
  }
}

uint64_t PRevamac(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(_DWORD *)(*a3 + 4);
  switch(a5)
  {
    case 1:
      while (1)
      {
        uint64_t v7 = *(void *)(v7 + 72);
        if (!v7) {
          break;
        }
        __int16 v10 = *(unsigned char **)(v7 + 40);
        if (v10) {
          goto LABEL_7;
        }
      }
      __int16 v10 = *(unsigned char **)(v8 + 24);
      if (!v10) {
        return 1;
      }
LABEL_7:
      uint64_t result = 1;
      do
      {
        int v12 = *v10;
        if (!*v10) {
          return 0;
        }
        if (v12 == 10 || v12 == 13) {
          return 1;
        }
        ++v10;
      }
      while (v12 != *(unsigned __int8 *)(a2 + 22));
      return result;
    case 2:
      __int16 v15 = *(unsigned char **)(v7 + 40);
      if (!v15) {
        return 0;
      }
      uint64_t result = 1;
      do
      {
        int v16 = *v15;
        if (!*v15) {
          return 0;
        }
        if (v16 == 10 || v16 == 13) {
          return 1;
        }
        ++v15;
      }
      while (v16 != *(unsigned __int8 *)(a2 + 22));
      return result;
    case 4:
      uint64_t v19 = *(void *)(v7 + 152);
      int v20 = *(unsigned char **)(v19 + 16);
      int v21 = *(_DWORD *)(v19 + 92);
      if ((v21 & 0x4000) != 0)
      {
        uint64_t v22 = *(void *)(v19 + 176);
        if (v22)
        {
          int v23 = *(unsigned char ***)(v22 + 144);
          if (v23) {
            int v20 = *v23;
          }
        }
      }
      if (v20 && (v21 & 0x10000) == 0) {
        return *v20 == 104;
      }
      return 0;
    case 5:
      uint64_t v24 = *(void *)(v7 + 152);
      int v20 = *(unsigned char **)(v24 + 16);
      int v25 = *(_DWORD *)(v24 + 92);
      if ((v25 & 0x4000) != 0)
      {
        uint64_t v26 = *(void *)(v24 + 176);
        if (v26)
        {
          __int16 v27 = *(unsigned char ***)(v26 + 144);
          if (v27) {
            int v20 = *v27;
          }
        }
      }
      if (!v20 || (v25 & 0x10000) == 0) {
        return 0;
      }
      return *v20 == 104;
    case 6:
      int v28 = *(unsigned __int8 **)(v7 + 16);
      if ((*(unsigned char *)(v7 + 93) & 0x40) != 0)
      {
        uint64_t v29 = *(void *)(v7 + 176);
        if (v29)
        {
          size_t v30 = *(unsigned __int8 ***)(v29 + 144);
          if (v30) {
            int v28 = *v30;
          }
        }
      }
      if (!v28) {
        return 0;
      }
      int v31 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * *v28);
      uint64_t v32 = v31 & 0x60000040;
      uint64_t v33 = v31 & 0x10000000;
      return v32 && v33 == 0;
    case 7:
      __int16 v35 = *(unsigned __int8 **)(v7 + 16);
      if ((*(unsigned char *)(v7 + 93) & 0x40) != 0)
      {
        uint64_t v36 = *(void *)(v7 + 176);
        if (v36)
        {
          unsigned __int16 v37 = *(unsigned __int8 ***)(v36 + 144);
          if (v37) {
            __int16 v35 = *v37;
          }
        }
      }
      return v35 && (*(_DWORD *)(*(void *)(a2 + 8) + 4 * *v35) & 0x10000000) != 0;
    case 8:
      uint64_t result = 1;
      if (v9 > -536870881)
      {
        if (v9 == -536870880 || v9 == 0x40000) {
          return result;
        }
      }
      else if (v9 == -2147483632 || v9 == -536870896)
      {
        return result;
      }
      return 0;
    case 9:
      return (v9 & 0xE0000070) != 0;
    case 10:
      BOOL v39 = *(unsigned __int8 **)(v7 + 16);
      if ((*(unsigned char *)(v7 + 93) & 0x40) != 0)
      {
        uint64_t v40 = *(void *)(v7 + 176);
        if (v40)
        {
          uint64_t v41 = *(unsigned __int8 ***)(v40 + 144);
          if (v41) {
            BOOL v39 = *v41;
          }
        }
      }
      if (!v39) {
        return 0;
      }
      int v42 = *v39;
      int v43 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * *v39);
      if ((v43 & 0x60000040) == 0) {
        return 0;
      }
      uint64_t v44 = v43 & 0x10000000;
      return (v42 & 0xFFFFFFDF) != 0x48 && v44 == 0;
    case 11:
      return *(void *)(*(void *)(v7 + 152) + 40) != 0;
    case 12:
      return (*(_WORD *)(v7 + 98) & 0xC00) != 0;
    case 13:
      return *(unsigned char *)(v7 + 50) != 0;
    case 14:
      uint64_t v46 = *(unsigned char **)(v7 + 16);
      if (v46)
      {
        if (*v46 != 45) {
          return 0;
        }
        if (v46[1]) {
          BOOL v47 = v46[1] == 45;
        }
        else {
          BOOL v47 = 1;
        }
        return !v47;
      }
      uint64_t v130 = *(void *)(v7 + 72);
      if (!v130 || *(void *)(v130 + 40) || *(_WORD *)(v130 + 32) != 1) {
        return 0;
      }
      goto LABEL_497;
    case 15:
      int v48 = *(unsigned __int16 *)(v7 + 32);
      return v48 == a6;
    case 16:
      int v49 = *(char **)(v7 + 16);
      int v50 = 46;
      return strchr(v49, v50) != 0;
    case 17:
      return (*(unsigned char *)(v7 + 93) & 0x80) != 0;
    case 18:
      if ((*(unsigned char *)(v7 + 93) & 0x80) == 0) {
        return 0;
      }
      char v51 = *(unsigned char **)(v7 + 112);
      if (!v51) {
        return 0;
      }
      if (!SLstrncmp(*(unsigned char **)(v7 + 112), "-me", 3)
        || !SLstrncmp(v51, "-te", 3)
        || !SLstrncmp(v51, "-se", 3)
        || !SLstrncmp(v51, "-nos", 4))
      {
        return 1;
      }
      int v52 = "-vos";
      int v53 = v51;
      int v54 = 4;
      return !SLstrncmp(v53, (unsigned __int8 *)v52, v54);
    case 19:
      return (*(unsigned char *)(v7 + 93) & 0x40) != 0;
    case 20:
      uint64_t v55 = *(void *)(v7 + 72);
      int v56 = (void *)(v8 + 24);
      if (v55) {
        unint64_t v57 = (void *)(v55 + 40);
      }
      else {
        unint64_t v57 = v56;
      }
      return *v57 != 0;
    case 21:
      int v49 = *(char **)(v7 + 16);
      int v50 = 47;
      return strchr(v49, v50) != 0;
    case 22:
      uint64_t v58 = *(void *)(v7 + 16);
      if (v58)
      {
        unsigned int v59 = *(unsigned __int16 *)(v7 + 32);
        if (v59 >= 2 && *(unsigned char *)(v58 + v59 - 1) == 45 && *(unsigned char *)(v58 + v59 - 2) != 45) {
          return 1;
        }
      }
      else if (!*(void *)(v7 + 40))
      {
        uint64_t v130 = *(void *)(v7 + 80);
        if (v130)
        {
          if (*(_WORD *)(v130 + 32) == 1)
          {
LABEL_497:
            if (**(unsigned char **)(v130 + 16) == 45) {
              return 1;
            }
          }
        }
      }
      return 0;
    case 23:
      if (v9 != -2147483136) {
        return 0;
      }
      unsigned int v60 = *(unsigned __int16 *)(v7 + 32) - 1;
      if (v60 >= 5) {
        return 0;
      }
      return dword_20CC666B8[(__int16)v60];
    case 24:
      if (v9 != -2147483136)
      {
        if (a4 != 1 && v9 == -2147483632)
        {
          uint64_t v7 = *(void *)(v7 + 72);
          if (v7)
          {
            if (*(_DWORD *)(v7 + 4) == -2147483136 && (*(unsigned __int16 *)(v7 + 32) | 2) == 3) {
              goto LABEL_481;
            }
          }
        }
        return 0;
      }
      int v61 = *(unsigned __int16 *)(v7 + 32);
      if (v61 == 4 || v61 == 7) {
        return 1;
      }
      if (a4 != 1) {
        return 0;
      }
      if ((v61 | 2) != 3) {
        return 0;
      }
      uint64_t v7 = *(void *)(v7 + 80);
      if (!v7) {
        return 0;
      }
      int v63 = *(_DWORD *)(v7 + 4);
      int v64 = -2147483632;
LABEL_368:
      if (v63 != v64) {
        return 0;
      }
      goto LABEL_481;
    case 25:
      BOOL v65 = v9 == 0x40000 || v9 == 268435457;
      if (!v65 && (*(unsigned char *)(v7 + 92) & 0xC) == 0) {
        return (*(_WORD *)(v7 + 98) & 0x80) != 0;
      }
      return 1;
    case 26:
      return (*(_WORD *)(v7 + 98) & 0x80) != 0
          && *(unsigned char *)(*(unsigned __int16 *)(v7 + 32) + *(void *)(v7 + 16) - 1) != 46;
    case 27:
      if (v9 == 0x40000 || v9 == 268435457 || v9 == 268435459) {
        return 1;
      }
      int v68 = *(_DWORD *)(v7 + 92);
      if ((v68 & 8) != 0) {
        return 1;
      }
      if ((*(void *)&v68 & 0xC00000) != 0x400000) {
        return 0;
      }
      return (*(_WORD *)(v7 + 98) & 0x80) != 0;
    case 28:
      uint64_t result = 1;
      if (!a7 || (a7 & 0x10) != 0) {
        return result;
      }
      return 0;
    case 29:
      return (v9 & 0x80000040) == 0x40;
    case 30:
    case 111:
      unsigned int v14 = v9 & 0x80000008;
      return v14 == 8;
    case 31:
      return (*(_WORD *)(v7 + 98) & 0x10) != 0;
    case 32:
      int v69 = *(unsigned __int16 *)(v7 + 98);
      int v70 = 3072;
      return (v70 & ~v69) == 0;
    case 33:
      int v69 = *(unsigned __int16 *)(v7 + 98);
      int v70 = 768;
      return (v70 & ~v69) == 0;
    case 34:
      int v71 = -536870848;
      goto LABEL_318;
    case 35:
      if ((~v9 & 0xC1000000) != 0) {
        goto LABEL_168;
      }
      if ((v9 & 0x1F0000) != 0) {
        return 1;
      }
      v9 &= 0x1FFFF0u;
LABEL_168:
      if (*(unsigned char *)(a2 + 20) != 6) {
        return 0;
      }
      BOOL v72 = v9 == -536870848;
      int v73 = -1073741312;
      return v72 || v9 == v73;
    case 36:
      int v74 = *(unsigned __int8 *)(a2 + 20);
      if (v74 == 6 && v9 == -1073741760) {
        return 1;
      }
      if (v74 == 6) {
        return 0;
      }
      int v76 = -536870848;
      return v9 == v76;
    case 37:
      return (*(_WORD *)(v7 + 96) & 0x100) != 0;
    case 38:
      int v76 = -536870911;
      return v9 == v76;
    case 39:
      if ((~v9 & 0xC1000000) != 0)
      {
        int v126 = *(unsigned __int8 *)(a2 + 20);
        int v127 = -536870848;
LABEL_483:
        int v128 = v127 - 62;
        if (v126 == 6 && v9 == v128) {
          return 1;
        }
      }
      else if ((v9 & 0x3800) != 0)
      {
        return 1;
      }
      return 0;
    case 40:
      int v76 = -2147483584;
      return v9 == v76;
    case 41:
      int v76 = -2147483646;
      return v9 == v76;
    case 42:
      return *(void *)(*(void *)(v7 + 152) + 80) != *(void *)(*(void *)(v7 + 152) + 176);
    case 43:
      return (*(unsigned char *)(v7 + 93) & 1) != 0;
    case 44:
      if (*(_WORD *)(v7 + 32) != 1) {
        return 0;
      }
      int v77 = **(unsigned __int8 **)(v7 + 16);
      uint64_t result = 1;
      BOOL v78 = (v77 - 131) > 0x22 || ((1 << (v77 + 125)) & 0x500000001) == 0;
      if (v78 && v77 != 36) {
        return 0;
      }
      return result;
    case 45:
      return v9 == -2147483644 || v9 == -2147483640 || v9 == -2147483392;
    case 46:
      if ((v9 & 0x80000020) != 0x20) {
        return 0;
      }
      int v81 = *(unsigned __int16 *)(v7 + 32);
      return v81 == 1;
    case 47:
      uint64_t result = 1;
      if ((*(unsigned char *)(v7 + 92) & 1) != 0 || (v9 & 0x80000020) == 0x20) {
        return result;
      }
      return 0;
    case 48:
      return (*(unsigned char *)(v7 + 92) & 2) != 0;
    case 49:
      return (v9 & 0x1F0000) != 0;
    case 50:
      int v76 = -2147483392;
      return v9 == v76;
    case 51:
      return ((v9 + 2147483644) & 0xFFFFFFFB) == 0;
    case 52:
      int v83 = -536870848;
      goto LABEL_259;
    case 53:
      return (*(_WORD *)(v7 + 98) & 0xC00) == 0x800;
    case 54:
      unsigned int v14 = *(_WORD *)(v7 + 96) & 0xC;
      return v14 == 8;
    case 55:
      if ((v9 & 0x80000020) != 0x20) {
        return 0;
      }
      int v53 = *(unsigned char **)(v7 + 16);
      if (!v53) {
        return 0;
      }
      int v52 = "15";
      goto LABEL_236;
    case 56:
      int v84 = 268435458;
      return (v84 & ~v9) == 0;
    case 57:
      return !*(unsigned char *)(v7 + 60);
    case 58:
      int v81 = *(unsigned __int8 *)(v7 + 60);
      return v81 == 1;
    case 59:
      int v85 = *(unsigned __int8 *)(v7 + 60);
      return v85 == 2;
    case 60:
      int v86 = *(unsigned __int8 *)(v7 + 60);
      return v86 == 4;
    case 61:
      return *(void *)(v7 + 104) || *(void *)(v7 + 112);
    case 62:
      if ((v9 & 0x80000020) != 0x20) {
        return 0;
      }
      int v53 = *(unsigned char **)(v7 + 16);
      if (!v53) {
        return 0;
      }
      int v52 = "14";
LABEL_236:
      int v54 = 2;
      return !SLstrncmp(v53, (unsigned __int8 *)v52, v54);
    case 63:
      int v76 = -2147483616;
      return v9 == v76;
    case 64:
      return (*(unsigned char *)(v7 + 93) & 2) != 0;
    case 65:
      return (*(unsigned char *)(v7 + 92) & 0x80) != 0;
    case 66:
      return (v9 & 0x80010000) == 0x10000;
    case 67:
      char v87 = *(unsigned char **)(v7 + 24);
      if (!v87) {
        return 0;
      }
      unsigned int v88 = *v87;
      if (!*v87) {
        return 0;
      }
      int v89 = v87 + 1;
      while (1)
      {
        int v90 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v88);
        if ((v90 & 0x1000000) == 0) {
          break;
        }
        unsigned int v91 = *v89++;
        unsigned int v88 = v91;
        if (!v91) {
          return 0;
        }
      }
      return (v90 & 0x20000000) != 0;
    case 68:
      unsigned __int16 v92 = *(unsigned char **)(v7 + 24);
      if (!v92) {
        return 0;
      }
      unsigned int v93 = *v92;
      if (!*v92) {
        return 0;
      }
      char v94 = v92 + 1;
      while (1)
      {
        int v95 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v93);
        if ((v95 & 0x1000000) == 0) {
          break;
        }
        unsigned int v96 = *v94++;
        unsigned int v93 = v96;
        if (!v96) {
          return 0;
        }
      }
      return (v95 & 0x40000000) != 0;
    case 69:
      int v83 = -1073741760;
LABEL_259:
      int v76 = v83 - 48;
      return v9 == v76;
    case 70:
      return (*(unsigned char *)(v7 + 93) & 8) != 0;
    case 71:
      return (*(unsigned char *)(v7 + 94) & 8) != 0;
    case 72:
      return (*(unsigned char *)(v7 + 94) & 4) != 0;
    case 73:
      int v97 = -1073741760;
      goto LABEL_376;
    case 74:
      return (*(unsigned char *)(v7 + 93) & 0x10) != 0;
    case 75:
      return !*(unsigned char *)(v7 + 51);
    case 76:
      if ((v9 & 0xE0000000) == 0xC0000000 && (v9 & 0x200003D) != 0) {
        return 1;
      }
      int v99 = *(unsigned __int8 *)(a2 + 20);
      if (v99 == 6 && (v9 == -1073741822 || v9 == -1073741760)) {
        return 1;
      }
      BOOL v102 = (v99 & 0xFFFFFFFB) == 8 || v99 == 9 || v99 == 5;
      int v103 = -1073741760;
      goto LABEL_518;
    case 77:
      return (*(_WORD *)(v7 + 98) & 0x20) != 0;
    case 78:
      return (*(_WORD *)(v7 + 98) & 8) != 0;
    case 79:
      return (*(_WORD *)(v7 + 98) & 0xC00) == 0x400;
    case 80:
      int v86 = *(_WORD *)(v7 + 96) & 0xC;
      return v86 == 4;
    case 81:
      return (*(unsigned char *)(v7 + 92) & 4) != 0;
    case 82:
      return *(unsigned char *)(v7 + 51) == 3;
    case 83:
      int v84 = 268435460;
      return (v84 & ~v9) == 0;
    case 84:
      uint64_t result = 1;
      if (!a7 || (a7 & 0x20) != 0) {
        return result;
      }
      return 0;
    case 85:
      if (a4 == 1)
      {
        if ((*(_WORD *)(v7 + 96) & 0x1000) == 0) {
          return 0;
        }
        for (; (*(_WORD *)(v7 + 96) & 0x100) == 0; uint64_t v7 = *(void *)(v7 + 176))
          ;
      }
      else
      {
        if ((*(_WORD *)(v7 + 96) & 0x100) == 0) {
          return 0;
        }
        for (; (*(_WORD *)(v7 + 96) & 0x1000) == 0; uint64_t v7 = *(void *)(v7 + 168))
          ;
      }
LABEL_481:
      *a3 = v7;
      return 1;
    case 86:
      return (v9 & 0x80000020) == 0x20;
    case 87:
      return (*(unsigned char *)(v7 + 93) & 4) != 0;
    case 88:
      return *(_WORD *)(v7 + 32) == 1 && !SLstrcmp(*(unsigned char **)(v7 + 16), "1");
    case 89:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
      return 0;
    case 90:
      int v71 = -1073741760;
LABEL_318:
      int v76 = v71 - 60;
      return v9 == v76;
    case 91:
      if ((~v9 & 0xC2000000) != 0) {
        goto LABEL_322;
      }
      if ((v9 & 0x1F0000) != 0) {
        return 1;
      }
      v9 &= 0x1FFFF0u;
LABEL_322:
      if (*(unsigned char *)(a2 + 20) != 6) {
        return 0;
      }
      int v73 = -1073741760;
      BOOL v72 = v9 == -1073741568;
      return v72 || v9 == v73;
    case 92:
      int v104 = *(unsigned __int8 *)(a2 + 20);
      if (v104 == 6 && v9 == -536870848) {
        return 1;
      }
      if (v104 == 6) {
        return 0;
      }
      int v76 = -1073741760;
      return v9 == v76;
    case 93:
      return (*(_WORD *)(v7 + 96) & 0x1000) != 0;
    case 94:
      int v76 = -1073741823;
      return v9 == v76;
    case 95:
      if ((~v9 & 0xC2000000) == 0) {
        return (v9 & 0xBC00) != 0;
      }
      int v126 = *(unsigned __int8 *)(a2 + 20);
      int v127 = -1073741760;
      goto LABEL_483;
    case 96:
    case 99:
    case 100:
    case 102:
    case 146:
      return (*(unsigned char *)(v7 + 92) & 0x20) != 0;
    case 97:
      return (*(unsigned char *)(v7 + 92) & 0x20) != 0;
    case 98:
    case 124:
      return (*(unsigned char *)(v7 + 94) & 0x10) != 0;
    case 101:
      return (*(unsigned char *)(v7 + 92) & 0x80) != 0;
    case 103:
      BOOL v72 = v9 == -2147483632;
      int v73 = 0x40000;
      return v72 || v9 == v73;
    case 104:
      return (*(unsigned char *)(v7 + 92) & 8) != 0;
    case 105:
      return (*(_WORD *)(v7 + 98) & 0x300) == 0x200;
    case 106:
      int v85 = *(_WORD *)(v7 + 96) & 3;
      return v85 == 2;
    case 107:
      int v48 = (*(_DWORD *)(v7 + 92) >> 28) & 7;
      return v48 == a6;
    case 108:
      if (!*(void *)(v7 + 16)) {
        return 0;
      }
      if (!a4 && v9 == -2147483647)
      {
        uint64_t v7 = *(void *)(v7 + 72);
        if (v7)
        {
          if (*(_WORD *)(v7 + 32)
            && *(unsigned char *)(*(void *)(v7 + 16) + *(unsigned __int16 *)(v7 + 32) - 1) == 115)
          {
            goto LABEL_481;
          }
        }
      }
      uint64_t v106 = *(unsigned __int16 *)(v7 + 32);
      uint64_t v107 = *(void *)(v7 + 16);
      if (*(unsigned char *)(v106 + v107 - 1) != 115) {
        return 0;
      }
      BOOL v108 = v106 >= 2;
      unsigned int v109 = v106 - 2;
      if (v108 && *(unsigned char *)(v107 + v109) == 39) {
        return 1;
      }
      if (a4 != 1) {
        return 0;
      }
      uint64_t v7 = *(void *)(v7 + 80);
      if (!v7) {
        return 0;
      }
      int v63 = *(_DWORD *)(v7 + 4);
      int v64 = -2147483647;
      goto LABEL_368;
    case 109:
      int v48 = *(unsigned char *)(v7 + 95) & 0xF;
      return v48 == a6;
    case 110:
      return v9 < 0;
    case 112:
      int v97 = -536870848;
LABEL_376:
      int v76 = v97 - 32;
      return v9 == v76;
    case 113:
      return (*(_WORD *)(v7 + 98) & 0x40) != 0;
    case 114:
      int v76 = -2147483632;
      return v9 == v76;
    case 115:
      return (*(_WORD *)(v7 + 98) & 4) != 0;
    case 116:
      return (*(unsigned char *)(v7 + 92) & 0x10) != 0;
    case 117:
      int v76 = -2147483520;
      return v9 == v76;
    case 118:
      return v7 == *(void *)(v8 + 72);
    case 119:
      if (*(unsigned __int16 *)(v8 + 14) < *(unsigned __int16 *)(v8 + 18))
      {
        for (uint64_t i = *(void *)(v8 + 80);
              *(void *)(i + 72) && (*(_DWORD *)(i + 4) & 0x80000000) != 0;
        if (i == v7) {
          return 1;
        }
      }
      return 0;
    case 120:
      return *(_WORD *)(v7 + 32) == 1 && !SLstrcmp(*(unsigned char **)(v7 + 16), "7");
    case 121:
      return (*(_WORD *)(v7 + 98) & 0x300) == 0x100;
    case 122:
      unsigned int v111 = v9 & 0x80004000;
      return v111 == 0x4000;
    case 123:
      return (v9 & 0x80001000) == 0x1000;
    case 125:
      int v81 = *(_WORD *)(v7 + 96) & 3;
      return v81 == 1;
    case 126:
      unsigned int v111 = *(_WORD *)(v7 + 98) & 0xC000;
      return v111 == 0x4000;
    case 127:
      return (*(_WORD *)(v7 + 98) & 0xC000) == 0x8000;
    case 128:
      return (v9 & 0xBC00) != 0;
    case 129:
      int v112 = *(_DWORD *)(*a3 + 4) & 0x2000;
      BOOL v113 = *(unsigned __int16 *)(v7 + 32) == 2;
      return v113 && v112 != 0;
    case 130:
      if ((v9 & 0x80000020) == 0x20)
      {
        uint64_t v114 = *(unsigned char **)(v7 + 16);
        if (v114)
        {
          if (!SLstrncmp(v114, "13", 2)) {
            return 1;
          }
        }
      }
      return 0;
    case 131:
    case 132:
      return (*(unsigned char *)(v7 + 92) & 0x40) != 0;
    case 133:
      int v115 = *(unsigned __int8 *)(a2 + 20);
      if ((v9 & 0xE0000000) == 0xC0000000)
      {
        if ((v9 & 0x1000000) != 0) {
          return 1;
        }
      }
      else if ((v9 & 0xE0000000) == 0x80000000)
      {
        if ((v9 & 0xD3) != 0) {
          return 1;
        }
      }
      else if (v9 >> 29 == 7 && (v9 & 0x3D) != 0)
      {
        return 1;
      }
      if (v115 != 6 || (v9 != -536870910 ? (BOOL v132 = v9 == -536870848) : (BOOL v132 = 1), !v132))
      {
        BOOL v133 = (v115 & 0xFFFFFFFB) == 8 || v115 == 9;
        BOOL v102 = v133 || v115 == 5;
        int v103 = -536870848;
LABEL_518:
        if (!v102 || v9 != v103) {
          return 0;
        }
      }
      return 1;
    case 134:
      return *(unsigned char *)(v7 + 51) == 2;
    case 135:
      return (*(unsigned char *)(v7 + 93) & 0x20) != 0;
    case 136:
      uint64_t result = 1;
      if (!a7 || (a7 & 0x40) != 0) {
        return result;
      }
      return 0;
    case 137:
      return (*(unsigned char *)(v7 + 94) & 0x80) != 0 && (*(_WORD *)(v7 + 98) & 0x80) == 0;
    case 141:
      return (*(_WORD *)(v7 + 98) & 3) == 1;
    case 142:
      return (*(_WORD *)(v7 + 98) & 3) == 0;
    case 144:
      return v9 == -2147483647;
    case 145:
      unsigned int v116 = *(unsigned __int16 *)(v7 + 32);
      if (!*(_WORD *)(v7 + 32)) {
        return 0;
      }
      unsigned int v117 = 0;
      uint64_t v118 = *(void *)(v7 + 16);
      break;
    case 147:
      int v84 = 268435464;
      return (v84 & ~v9) == 0;
    case 148:
      unsigned int v119 = ~v9 & 0xC2000000;
      int v112 = v9 & 0x1FBC00;
      goto LABEL_448;
    case 149:
      unsigned int v119 = ~v9 & 0xC1000000;
      int v112 = v9 & 0x1F3800;
LABEL_448:
      BOOL v113 = v119 == 0;
      return v113 && v112 != 0;
    case 150:
      return *(_WORD *)(v7 + 32) == 1 && **(unsigned char **)(v7 + 16) == 38;
    case 151:
      return *(_WORD *)(v7 + 32) == 1 && **(unsigned __int8 **)(v7 + 16) == 150;
    case 159:
      int v121 = *(unsigned char **)(v7 + 16);
      if (!v121 || v9 != 32) {
        return 0;
      }
      unsigned int v122 = *v121;
      if (*v121)
      {
        unsigned __int16 v123 = 0;
        uint64_t v124 = v121 + 1;
        do
        {
          if ((*(_DWORD *)(*(void *)(a2 + 8) + 4 * v122) & 0x8000000) == 0) {
            return 0;
          }
          unsigned __int16 v123 = 10 * v123 + v122 - 48;
          unsigned int v125 = *v124++;
          unsigned int v122 = v125;
        }
        while (v125);
      }
      else
      {
        unsigned __int16 v123 = 0;
      }
      return a6 == v123;
    default:
      uint64_t v18 = *(void *)(a1 + 32);
      *(void *)uint64_t v18 = 0xDC0000008CLL;
      *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x510], 8) = a5;
      return 220;
  }
  while (*(unsigned __int8 *)(v118 + v117) - 48 <= 9)
  {
    if (++v117 >= v116)
    {
      unsigned int v117 = v116;
      break;
    }
  }
  if (!v117 || v117 + 1 != v116) {
    return 0;
  }
  return ((*(unsigned __int8 *)(v118 + v117) - 97) & 0xFB) == 0;
}

uint64_t PRExprMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v59 = 0uLL;
  long long v58 = 0uLL;
  uint64_t v3 = *(unsigned __int16 **)(a1 + 56);
  unsigned int v56 = *(unsigned __int16 *)(a1 + 14);
  int v4 = *(uint64_t **)(a3 + 96);
  uint64_t v5 = v4[1];
  uint64_t v6 = v4[2];
  uint64_t v7 = *v4;
  unsigned int v8 = *(unsigned __int16 *)(*v4 + 4);
  *(void *)&long long v61 = v3;
  *((void *)&v61 + 1) = 0x100000000;
  if (v3)
  {
    int v48 = (unsigned __int8 *)(v7 + __rev16(v8));
    int v9 = (unsigned char *)*((void *)v3 + 3);
    if (v9) {
      LOBYTE(v9) = *v9;
    }
    unint64_t v54 = 0;
    int v10 = 0;
    BYTE14(v61) = (_BYTE)v9;
    int v11 = 0xFFFF;
    do
    {
      int v53 = 0;
      __int16 v49 = 0;
      unsigned __int8 v57 = 0;
      long long v60 = v61;
      uint64_t v12 = 1;
      unsigned int v13 = v48;
      BOOL v47 = v3;
      int v50 = v3;
      if (!v48) {
        goto LABEL_91;
      }
      do
      {
        while (1)
        {
LABEL_6:
          long long v59 = v60;
          BYTE13(v59) = 0;
          unsigned __int8 v14 = v13[1];
          int v15 = v14 & 0xC0;
          if ((v14 & 0xC0) != 0)
          {
            unsigned int v16 = bswap32(*(_DWORD *)(v13 + 2));
            switch(v15)
            {
              case 64:
                int v10 = *(unsigned __int16 *)(v60 + 98);
                break;
              case 192:
                if ((void)v60 == *(void *)(a1 + 64) && v16 == 1) {
                  goto LABEL_90;
                }
                int v10 = *(char *)(v60 + 51);
                break;
              case 128:
                int v10 = *(_DWORD *)(v60 + 4);
                if (!v10)
                {
LABEL_53:
                  __int16 v17 = (unsigned __int16 *)(v13 + 6);
                  goto LABEL_54;
                }
                break;
            }
            int v19 = v14 & 0x30;
            if ((v13[1] & 0x30) != 0)
            {
              if (v19 != 16)
              {
                if (v19 != 32)
                {
                  if ((v13[1] & 4) == 0) {
                    goto LABEL_90;
                  }
                  goto LABEL_53;
                }
                BOOL v20 = (v10 & v16) != 0;
                goto LABEL_50;
              }
              BOOL v27 = v10 == v16;
            }
            else
            {
              BOOL v27 = (v16 & ~v10) == 0;
            }
            BOOL v20 = v27;
LABEL_50:
            if ((((v14 & 4) == 0) ^ v20)) {
              goto LABEL_90;
            }
            goto LABEL_53;
          }
          if ((v13[1] & 0x30) != 0)
          {
            if ((((v56 < (unsigned __int16)(*(_WORD *)v60 + 1)) ^ ((v14 & 0x20) >> 5)) & 1) == 0) {
              goto LABEL_90;
            }
            __int16 v17 = (unsigned __int16 *)(v13 + 2);
          }
          else
          {
            uint64_t v21 = v12;
            __int16 v17 = (unsigned __int16 *)(v13 + 3);
            unint64_t v22 = (unint64_t)&v13[2 * v13[2] + 3];
            while (1)
            {
              uint64_t v23 = __rev16(*v17);
              if (v23 || (void)v59 == 0)
              {
                if (PRdoFsa((unsigned char *)(v7 + v23), (uint64_t *)&v59, v7 + 16) == 4) {
                  break;
                }
              }
              else
              {
                __int16 v25 = 0;
                __int16 v26 = 0;
                switch(BYTE12(v59))
                {
                  case 0:
                    goto LABEL_35;
                  case 1:
                    __int16 v25 = WORD4(v59);
LABEL_35:
                    __int16 v26 = 0;
                    WORD5(v59) += *(_WORD *)(v59 + 32) - v25;
                    goto LABEL_37;
                  case 2:
                    goto LABEL_37;
                  case 3:
                    __int16 v26 = WORD4(v59);
LABEL_37:
                    WORD5(v59) += *(_WORD *)(v59 + 48) - v26;
                    break;
                  default:
                    break;
                }
                *(void *)&long long v59 = *(void *)(v59 + 80);
                WORD4(v59) = 0;
                WORD6(v59) = (4 * ((void)v59 == 0));
              }
              if ((unint64_t)++v17 >= v22) {
                break;
              }
              if (BYTE13(v59)) {
                NEXT_TLPOS(&v59);
              }
            }
            if ((unint64_t)v17 < v22)
            {
LABEL_87:
              uint64_t v12 = v21;
              goto LABEL_90;
            }
            unsigned __int8 v14 = v13[1];
            if ((v14 & 2) != 0)
            {
              unint64_t v31 = *(void *)(v60 + 72);
              if (v31)
              {
                long long v58 = v31;
                BOOL v32 = PRdoFsa((unsigned char *)(v7 + __rev16(*v17)), (uint64_t *)&v58, v7 + 16) == 0;
                unsigned __int8 v14 = v13[1];
                int v33 = v32 ^ ((v14 & 4) >> 2);
                char v34 = *((unsigned char *)v17 + 2);
                unint64_t v54 = v31;
              }
              else
              {
                if ((v13[1] & 4) == 0) {
                  goto LABEL_87;
                }
                char v34 = *((unsigned char *)v17 + 2);
                int v33 = (v34 & 1) == 0;
              }
              uint64_t v12 = v21;
              if (v34)
              {
                if (!v33) {
                  goto LABEL_90;
                }
                uint64_t v38 = *((unsigned __int8 *)v17 + 3);
                uint64_t v39 = v5 + 32 * v38;
                *(void *)uint64_t v39 = v54;
                *(void *)(v39 + _Block_object_dispose(&STACK[0x510], 8) = 0;
                *(_OWORD *)(v39 + 16) = v58;
                if (BYTE13(v58) && BYTE14(v58)) {
                  ++*(_WORD *)(v5 + 32 * v38 + 26);
                }
                v17 += 2;
                unsigned __int8 v14 = v13[1];
              }
              else
              {
                if (!v33) {
                  goto LABEL_90;
                }
                __int16 v17 = (unsigned __int16 *)((char *)v17 + 3);
              }
            }
            else
            {
              uint64_t v12 = v21;
            }
          }
LABEL_54:
          if (v14)
          {
            uint64_t v28 = *(unsigned __int8 *)v17;
            uint64_t v29 = (long long *)(v5 + 32 * v28);
            *uint64_t v29 = v60;
            v29[1] = v59;
            if (BYTE13(v59) && BYTE14(v59)) {
              ++*(_WORD *)(v5 + 32 * v28 + 26);
            }
            __int16 v17 = (unsigned __int16 *)((char *)v17 + 1);
            unsigned __int8 v14 = v13[1];
          }
          if ((v14 & 8) == 0) {
            break;
          }
          if (PRdoAction(a2, a3, (unsigned char *)(v7 + __rev16(*v17)), &v61, v5, v7, v7 + 16, v56 == 0, &v57) == 8) {
            return 220;
          }
          if (v57)
          {
            int v53 = v57;
            unsigned int v35 = *(unsigned __int16 *)v59;
            unsigned int v36 = *v50;
            if (v35 == v36)
            {
              uint64_t v37 = BYTE12(v59);
              if (BYTE12(v59) == v12)
              {
                if (v12 <= 4 && ((1 << v12) & 0x15) != 0) {
                  goto LABEL_90;
                }
                uint64_t v37 = v12;
                if ((__int16)(WORD4(v59) - v49) < 1) {
                  goto LABEL_90;
                }
                goto LABEL_89;
              }
              if (BYTE12(v59) > v12) {
                goto LABEL_89;
              }
            }
            else if (v35 > v36)
            {
              uint64_t v37 = BYTE12(v59);
LABEL_89:
              __int16 v49 = WORD4(v59);
              int v50 = (unsigned __int16 *)v59;
              uint64_t v12 = v37;
            }
          }
          else
          {
            int v53 = 0;
          }
LABEL_90:
          uint64_t v40 = *v13;
          v13 += v40;
          if (!v40) {
            goto LABEL_91;
          }
        }
        uint64_t v30 = v6 + 24 * (__int16)++v11;
        *(_OWORD *)uint64_t v30 = v60;
        *(void *)(v30 + 16) = v13;
        long long v60 = v59;
        if (BYTE13(v59)) {
          NEXT_TLPOS(&v60);
        }
        unsigned int v13 = (unsigned __int8 *)(v7 + __rev16(*v17));
      }
      while (v7);
LABEL_91:
      while ((v11 & 0x8000) == 0)
      {
        uint64_t v41 = v6 + 24 * (unsigned __int16)v11;
        long long v60 = *(_OWORD *)v41;
        int v42 = *(unsigned __int8 **)(v41 + 16);
        uint64_t v43 = *v42;
        uint64_t v44 = &v42[v43];
        --v11;
        if (v43) {
          unsigned int v13 = v44;
        }
        else {
          unsigned int v13 = 0;
        }
        if (v13) {
          goto LABEL_6;
        }
      }
      if (v53) {
        uint64_t v3 = (unsigned __int16 *)*((void *)v50 + 10);
      }
      else {
        uint64_t v3 = (unsigned __int16 *)*((void *)v47 + 10);
      }
      *(void *)&long long v61 = v3;
      DWORD2(v61) = 0;
      BYTE12(v61) = 1;
      if (v3)
      {
        int v45 = (unsigned char *)*((void *)v3 + 3);
        if (v45) {
          LOBYTE(v45) = *v45;
        }
      }
      else
      {
        LOBYTE(v45) = 0;
      }
      BYTE14(v61) = (_BYTE)v45;
    }
    while (v3);
  }
  return 0;
}

uint64_t PRwakeExprData(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6 = *(void **)(a2 + 96);
  *a3 = v6;
  *a4 = *v6;
  *a5 = v6[2];
  *a6 = v6[1];
  return 1;
}

uint64_t PRdoFsa(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  *((unsigned char *)a2 + 13) = 0;
  unsigned int v4 = *((unsigned __int8 *)a2 + 14);
  int v5 = *a1 & 0x10;
  if ((*a1 & 0x10) != 0) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 1;
  }
  if ((*a1 & 0x10) != 0) {
    uint64_t v7 = 3;
  }
  else {
    uint64_t v7 = 2;
  }
  uint64_t v8 = (uint64_t)&a1[((a1[1] - 1) << ((*a1 & 0x10) >> 4)) + 1];
  int v10 = *(char *)(v8 + 1);
  int v9 = (unsigned char *)(v8 + 1);
  if (v10 < 0)
  {
    uint64_t v12 = *a2;
    uint64_t v11 = a2[1];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  unsigned int v13 = a1 + 2;
  while (*((unsigned char *)a2 + 12) == 2)
  {
    if ((*v9 & 4) == 0) {
      goto LABEL_38;
    }
    unsigned __int8 v14 = &v9[-v6];
LABEL_33:
    unint64_t v19 = *v14;
    if (v5) {
      unint64_t v19 = v14[1] | (v19 << 8);
    }
    int v9 = &v13[v19];
    if ((char)v13[v19] < 0)
    {
      *((unsigned char *)a2 + 13) = 1;
      uint64_t v12 = *a2;
      uint64_t v11 = a2[1];
    }
    NEXT_TLPOS(a2);
    unsigned int v4 = *((unsigned __int8 *)a2 + 14);
  }
  if (!*((unsigned char *)a2 + 12))
  {
    if ((*v9 & 8) == 0) {
      goto LABEL_38;
    }
    unsigned __int8 v14 = &v9[-(v6 << ((*v9 & 4) != 0))];
    goto LABEL_33;
  }
  unsigned __int8 v14 = v9 + 1;
  if ((*v9 & 0x40) != 0) {
    goto LABEL_33;
  }
  if ((*v9 & 0x20) != 0)
  {
    unsigned int v15 = v9[1];
    unsigned __int8 v14 = v9 + 2;
    if ((*v9 & 0x10) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v15 = 0;
    if ((*v9 & 0x10) != 0)
    {
LABEL_20:
      int v17 = *v14++;
      int v16 = v17;
      if (!v15) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }
  int v16 = 0;
  if (v15)
  {
LABEL_24:
    uint64_t v18 = &v14[v7 * v15];
    ++v14;
    while (((1 << (v4 & 7)) & *(unsigned __int8 *)(a3 + ((unint64_t)v4 >> 3) + 32 * *(v14 - 1))) == 0)
    {
      --v15;
      v14 += v7;
      if (!(_WORD)v15)
      {
        unsigned __int8 v14 = v18;
        goto LABEL_28;
      }
    }
    goto LABEL_33;
  }
LABEL_28:
  if (v16)
  {
    ++v14;
    while (v4 != *(v14 - 1))
    {
      --v16;
      v14 += v7;
      if (!(_WORD)v16) {
        goto LABEL_38;
      }
    }
    goto LABEL_33;
  }
LABEL_38:
  if (!v12) {
    return 4;
  }
  uint64_t result = 0;
  *a2 = v12;
  a2[1] = v11;
  return result;
}

unsigned char *NEXT_TLPOS(unsigned char *result)
{
  unsigned int v1 = result[12];
  if (v1 > 1)
  {
    if (v1 == 4) {
      return result;
    }
    if (v1 == 3)
    {
      ++*((_WORD *)result + 5);
      LOWORD(v2) = *((_WORD *)result + 4) + 1;
      *((_WORD *)result + 4) = v2;
      uint64_t v2 = (__int16)v2;
    }
    else
    {
      uint64_t v2 = 0;
      result[12] = 3;
      *((_WORD *)result + 4) = 0;
    }
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)(*(void *)result + 40);
    if (v8)
    {
      int v9 = *(unsigned __int8 *)(v8 + v2);
      result[14] = v9;
      if (v9) {
        return result;
      }
    }
    else
    {
      result[14] = 0;
    }
    uint64_t v10 = *(void *)(v7 + 80);
    *(void *)uint64_t result = v10;
    if (v10)
    {
      result[12] = 0;
      return result;
    }
    char v6 = 4;
    goto LABEL_20;
  }
  if (v1 == 1)
  {
    ++*((_WORD *)result + 5);
    LOWORD(v3) = *((_WORD *)result + 4) + 1;
    *((_WORD *)result + 4) = v3;
    uint64_t v3 = (__int16)v3;
  }
  else
  {
    uint64_t v3 = 0;
    result[12] = 1;
    *((_WORD *)result + 4) = 0;
  }
  uint64_t v4 = *(void *)(*(void *)result + 24);
  if (!v4)
  {
    result[12] = 2;
    result[14] = 0;
    return result;
  }
  int v5 = *(unsigned __int8 *)(v4 + v3);
  result[14] = v5;
  if (!v5)
  {
    char v6 = 2;
LABEL_20:
    result[12] = v6;
  }
  return result;
}

uint64_t PRdoAction(uint64_t a1, uint64_t a2, unsigned char *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned char *a9)
{
  *a9 = 1;
  long long v61 = 0;
  int v9 = *a3;
  if (!*a3) {
    return 0;
  }
  unsigned __int8 v13 = 0;
  unsigned __int8 v58 = 0;
  uint64_t v14 = 0;
  unsigned __int16 v60 = 0;
  unsigned int v15 = a3 + 1;
  int v16 = a3 + 1;
  while (2)
  {
    int v18 = *v16;
    v16 += 3;
    __int16 v17 = v18;
    switch(v18)
    {
      case 23:
        long long v59 = *a4;
        if (PRdoFsa((unsigned char *)(a6 + __rev16(*(unsigned __int16 *)(v15 + 1))), (uint64_t *)&v59, a7)) {
          goto LABEL_59;
        }
        *a9 = 0;
        uint64_t v51 = 4;
        goto LABEL_72;
      case 24:
        unsigned __int8 v58 = v15[1];
        unsigned __int8 v13 = v15[2];
        goto LABEL_59;
      case 25:
      case 26:
      case 27:
        uint64_t v21 = v61;
        if (v61) {
          goto LABEL_11;
        }
        int v22 = PRliveRule(a1, a2, 0, v58, v13, 1, a8);
        if (v22)
        {
          if (v22 == 4) {
            return 4;
          }
          else {
            return 8;
          }
        }
        if (PRmkErr(a1, a2, &v61, 0, 0, v58, v13)) {
          goto LABEL_71;
        }
        uint64_t v21 = v61;
        *((_WORD *)v61 + 1) = 0;
        v21[3] = 0;
        v21[5] = 0;
LABEL_11:
        uint64_t v23 = a5 + 32 * v15[2];
        uint64_t v24 = *(void *)v23;
        uint64_t v25 = v15[3];
        uint64_t v26 = a5 + 32 * v25;
        BOOL v27 = *(_WORD **)(v26 + 16);
        __int16 v28 = *(_WORD *)(*(void *)v23 + 8);
        switch(*(unsigned char *)(v23 + 12))
        {
          case 1:
            __int16 v29 = *(_WORD *)(v23 + 8);
            goto LABEL_39;
          case 2:
            __int16 v29 = *(_WORD *)(v24 + 32);
LABEL_39:
            v28 += v29;
            break;
          case 3:
            v28 += *(_WORD *)(v24 + 32) + *(_WORD *)(v23 + 8);
            break;
          case 4:
            uint64_t v52 = *(void *)(a1 + 32);
            *(void *)uint64_t v52 = 0xE6FFFFFF9ALL;
            *(_WORD *)(v52 + _Block_object_dispose(&STACK[0x510], 8) = 0;
            goto LABEL_71;
          default:
            break;
        }
        switch(*(unsigned char *)(v26 + 28))
        {
          case 1:
            uint64_t v40 = a5 + 32 * v25;
            if (*(unsigned char *)(v40 + 29)) {
              __int16 v41 = *(_WORD *)(v40 + 24) + 1;
            }
            else {
              __int16 v41 = *(_WORD *)(v40 + 24);
            }
            break;
          case 2:
            __int16 v41 = v27[16];
            break;
          case 3:
            uint64_t v42 = a5 + 32 * v25;
            BOOL v43 = *(unsigned char *)(v42 + 29) == 0;
            __int16 v41 = *(_WORD *)(v42 + 24) + v27[16];
            if (!v43) {
              ++v41;
            }
            break;
          case 4:
            __int16 v41 = v27[24] + v27[16];
            break;
          default:
            __int16 v41 = 0;
            break;
        }
        __int16 v44 = v27[4];
        int v45 = *v15;
        switch(v45)
        {
          case 27:
            v21[4] = v28;
            uint64_t v46 = v21 + 5;
            break;
          case 26:
            v21[2] = v28;
            uint64_t v46 = v21 + 3;
            break;
          case 25:
            *uint64_t v21 = v28;
            uint64_t v46 = v21 + 1;
            break;
          default:
            goto LABEL_58;
        }
        *uint64_t v46 = v41 - v28 + v44;
        uint64_t v14 = v24;
LABEL_58:
        int v16 = v15 + 4;
        goto LABEL_59;
      case 28:
      case 29:
      case 30:
        uint64_t v20 = *((void *)v61 + 3);
        if (v20) {
          goto LABEL_16;
        }
        uint64_t v30 = PRmkList(a1, (uint64_t *)v61 + 3, 3);
        if (v30) {
          goto LABEL_64;
        }
        uint64_t v20 = *((void *)v61 + 3);
LABEL_16:
        unsigned __int16 v31 = v17 - 27;
        goto LABEL_28;
      case 31:
      case 32:
      case 33:
        BOOL v32 = (void *)*((void *)v61 + 9);
        if (!v32)
        {
          BOOL v32 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          *((void *)v61 + 9) = v32;
          if (!v32) {
            goto LABEL_65;
          }
        }
        uint64_t v34 = v32[1];
        int v33 = v32 + 1;
        uint64_t v20 = v34;
        if (v34) {
          goto LABEL_22;
        }
        uint64_t v30 = PRmkList(a1, v33, 3);
        if (v30) {
          goto LABEL_64;
        }
        uint64_t v20 = *(void *)(*((void *)v61 + 9) + 8);
LABEL_22:
        unsigned __int16 v31 = v17 - 30;
        goto LABEL_28;
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
        unint64_t v19 = (uint64_t *)*((void *)v61 + 9);
        if (v19)
        {
          uint64_t v20 = *v19;
          if (*v19) {
            goto LABEL_27;
          }
        }
        else
        {
          unsigned int v35 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
          *((void *)v61 + 9) = v35;
          if (!v35)
          {
LABEL_65:
            uint64_t v49 = *(void *)(a1 + 32);
            *(void *)uint64_t v49 = 0xDC00000078;
            *(_WORD *)(v49 + _Block_object_dispose(&STACK[0x510], 8) = 0;
            uint64_t v51 = 220;
LABEL_72:
            if (v61) {
              PRfreeErr(v61);
            }
            return v51;
          }
          unint64_t v19 = v35;
          *unsigned int v35 = 0;
          v35[1] = 0;
        }
        uint64_t v30 = PRmkList(a1, v19, 6);
        if (v30)
        {
LABEL_64:
          uint64_t v51 = v30;
          goto LABEL_72;
        }
        uint64_t v20 = **((void **)v61 + 9);
LABEL_27:
        unsigned __int16 v31 = v17 - 33;
LABEL_28:
        if (PRbldStr((unsigned __int8 *)a1, v15 + 1, v20, a5, v31, &v60) == 8)
        {
LABEL_71:
          uint64_t v51 = 8;
          goto LABEL_72;
        }
        int v16 = &v15[v60 + 1];
LABEL_59:
        int v47 = (__int16)v9--;
        unsigned int v15 = v16;
        if (v47 > 1) {
          continue;
        }
        uint64_t v51 = 0;
        if (v14)
        {
          int v48 = v61;
          if (v61)
          {
            uint64_t v51 = 0;
            *((void *)v61 + 5) = *(void *)(v14 + 160);
            *(void *)(v14 + 160) = v48;
          }
        }
        return v51;
      case 42:
        unsigned int v36 = (uint64_t *)(a5 + 32 * v15[1]);
        uint64_t v37 = v36[2];
        unsigned int v38 = bswap32(*(_DWORD *)(v15 + 2));
        for (uint64_t i = *v36; i != v37; uint64_t i = *(void *)(i + 80))
          *(_DWORD *)(i + 92) |= v38;
        *(_DWORD *)(v37 + 92) |= v38;
        int v16 = v15 + 6;
        goto LABEL_59;
      case 43:
        int v16 = v15 + 1;
        goto LABEL_59;
      default:
        uint64_t v50 = *(void *)(a1 + 32);
        *(void *)uint64_t v50 = 0x800000096;
        *(_WORD *)(v50 + _Block_object_dispose(&STACK[0x510], 8) = 260;
        goto LABEL_71;
    }
  }
}

uint64_t CMP_TLPOS(unsigned __int16 **a1, unsigned __int16 **a2)
{
  unsigned int v2 = **a1;
  unsigned int v3 = **a2;
  BOOL v4 = v2 > v3;
  if (v2 == v3 && (v5 = *((unsigned __int8 *)a1 + 12), unsigned int v6 = *((unsigned __int8 *)a2 + 12), v4 = v5 > v6, v5 == v6))
  {
    BOOL v4 = v5 > 4;
    int v7 = (1 << v5) & 0x15;
    if (v4 || v7 == 0) {
      return (__int16)(*((_WORD *)a1 + 4) - *((_WORD *)a2 + 4));
    }
    else {
      return 0;
    }
  }
  else if (v4)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

uint64_t PRdoSub(unsigned char *__src, unsigned __int16 *a2, unsigned __int8 *a3, unsigned int a4, unsigned char *a5, unsigned int a6, void *a7, _WORD *a8, _WORD *a9, char a10)
{
  if (!a4) {
    return 4;
  }
  uint64_t v11 = a2;
  unsigned int v12 = *a2;
  if (v12 < a4) {
    return 4;
  }
  int v18 = __src;
  if (a6 > a4 || a10)
  {
    uint64_t v20 = a5;
    int v21 = v12 % a4 + v12 / a4 * a6;
    uint64_t __src = malloc_type_malloc((unsigned __int16)(v12 % a4 + v12 / a4 * a6), 0xFC541E67uLL);
    *a7 = __src;
    if (!__src) {
      return 8;
    }
    __int16 v49 = v21;
    uint64_t v50 = a8;
    uint64_t v51 = a7;
    BOOL v19 = 0;
    a5 = v20;
  }
  else
  {
    __int16 v49 = 0;
    uint64_t v50 = a8;
    BOOL v19 = a6 >= a4;
    uint64_t v51 = a7;
    *a7 = 0;
  }
  uint64_t v22 = 0;
  int v23 = 0;
  int v24 = 0;
  uint64_t v26 = v18;
  size_t v27 = a6;
  do
  {
    int v28 = 0;
    while (1)
    {
      unsigned __int16 v29 = v24 + 1;
      if (v18[v22] == *a3)
      {
        BOOL v30 = a4 > 1;
        if (a4 >= 2)
        {
          BOOL v30 = a4 > 1;
          if (v12 > v29)
          {
            unsigned __int16 v31 = &v18[v22 + 1];
            unsigned __int16 v32 = 1;
            int v33 = a3 + 1;
            while (1)
            {
              int v34 = *v33++;
              if (*v31 != v34) {
                goto LABEL_20;
              }
              BOOL v30 = ++v32 < a4;
              if (v32 < a4)
              {
                ++v31;
                if (v12 > (unsigned __int16)(v32 + v24)) {
                  continue;
                }
              }
              break;
            }
          }
        }
        if (!v30) {
          break;
        }
      }
LABEL_20:
      ++v28;
      uint64_t v22 = (unsigned __int16)++v24;
      if (v12 <= v29)
      {
        if ((_WORD)v28)
        {
          if (!v19)
          {
            __int16 v36 = v23;
            uint64_t v37 = (uint64_t)a9;
            memcpy(&__src[(unsigned __int16)v23], v26, (unsigned __int16)v28);
            a9 = (_WORD *)v37;
            LOWORD(v23) = v36;
          }
          LOWORD(v23) = v28 + v23;
        }
        goto LABEL_37;
      }
    }
    if ((_WORD)v28)
    {
      if (!v19)
      {
        int v45 = a5;
        int v47 = __src;
        size_t __n = v27;
        uint64_t v41 = (uint64_t)a9;
        int v43 = v23;
        BOOL v39 = v19;
        memcpy(&__src[(unsigned __int16)v23], v26, (unsigned __int16)v28);
        size_t v27 = __n;
        BOOL v19 = v39;
        a5 = v45;
        uint64_t __src = v47;
        a9 = (_WORD *)v41;
        int v23 = v43;
      }
      v23 += v28;
    }
    if (a6)
    {
      if (a6 == 1)
      {
        __src[(unsigned __int16)v23] = *a5;
      }
      else
      {
        uint64_t v46 = a5;
        int v48 = __src;
        size_t v35 = v27;
        uint64_t v42 = (uint64_t)a9;
        int v44 = v23;
        BOOL v40 = v19;
        memcpy(&__src[(unsigned __int16)v23], a5, v27);
        size_t v27 = v35;
        BOOL v19 = v40;
        a5 = v46;
        uint64_t __src = v48;
        a9 = (_WORD *)v42;
        int v23 = v44;
      }
      v23 += a6;
    }
    v24 += a4;
    uint64_t v22 = (unsigned __int16)v24;
    uint64_t v26 = &v18[(unsigned __int16)v24];
  }
  while (v12 > (unsigned __int16)v24);
LABEL_37:
  if (*v51)
  {
    *uint64_t v50 = v49;
    uint64_t v11 = a9;
  }
  uint64_t result = 0;
  *uint64_t v11 = v23;
  return result;
}

uint64_t PRbldStr(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  if (a5)
  {
    unsigned __int16 v10 = a5 - 1;
    unsigned int v11 = *(unsigned __int16 *)(a3 + 18);
    if (v11 < (unsigned __int16)(a5 - 1))
    {
      do
      {
        *(_WORD *)(*(void *)(a3 + 8) + 2 * (unsigned __int16)v11) = *(_WORD *)(a3 + 24);
        uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), "", 1u);
        if (result == 8) {
          goto LABEL_46;
        }
        LOWORD(v11) = *(_WORD *)(a3 + 18) + 1;
        *(_WORD *)(a3 + 1_Block_object_dispose(&STACK[0x510], 8) = v11;
      }
      while ((unsigned __int16)v11 < v10);
    }
    __int16 v13 = *(_WORD *)(a3 + 24);
    uint64_t v14 = *(void *)(a3 + 8);
    *(_WORD *)(a3 + 1_Block_object_dispose(&STACK[0x510], 8) = v11 + 1;
    *(_WORD *)(v14 + 2 * (unsigned __int16)v11) = v13;
  }
  uint64_t v42 = a6;
  unsigned int v15 = a2 + 1;
  int v16 = *a2;
  if (!*a2)
  {
LABEL_45:
    uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), "", 1u);
    if (result == 8) {
      goto LABEL_46;
    }
    uint64_t result = 0;
    *uint64_t v42 = (_WORD)v15 - (_WORD)a2;
    return result;
  }
  *(_OWORD *)uint64_t __src = 0u;
  long long v49 = 0u;
  __int16 v43 = (__int16)a2;
  while (1)
  {
    unsigned int v17 = *v15;
    if (v17 <= 0x27)
    {
      if (*v15)
      {
        if (v17 != 5) {
          goto LABEL_50;
        }
        uint64_t result = PRcatContainer((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), a4 + 32 * v15[1]);
        if (result == 8) {
          goto LABEL_46;
        }
        v15 += 2;
      }
      else
      {
        unsigned int v26 = v15[1];
        uint64_t v25 = v15 + 1;
        uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v25 + 1, v26);
        if (result == 8) {
          goto LABEL_46;
        }
        unsigned int v15 = &v25[*v25 + 1];
      }
      goto LABEL_44;
    }
    if (v17 != 40) {
      break;
    }
    unsigned __int16 v47 = 0;
    uint64_t v46 = 0;
    int v45 = 0;
    uint64_t v27 = (uint64_t)&v15[v15[1] + 1];
    uint64_t v28 = v27 + 1 + *(unsigned __int8 *)(v27 + 1) + 1;
    __src[0] = 0;
    *(_DWORD *)((char *)&v49 + 6) = 0;
    if (PRbldStr(a1, v28, __src, a4, 0, &v47) == 8 && __src[0] != 0)
    {
      free(__src[0]);
      return 8;
    }
    --WORD4(v49);
    if (PRdoSub((unsigned char *)__src[0], (unsigned __int16 *)&v49 + 4, v15 + 2, v15[1], (unsigned char *)(v27 + 2), *(unsigned __int8 *)(v27 + 1), &v46, (_WORD *)&v45 + 1, &v45, 0) == 8)
    {
      uint64_t v41 = __src[0];
      goto LABEL_53;
    }
    BOOL v30 = v46;
    if (v46)
    {
      int v31 = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v46, (unsigned __int16)v45);
      free(v30);
      unsigned __int16 v32 = __src[0];
      if (v31 == 8) {
        goto LABEL_52;
      }
    }
    else
    {
      unsigned __int16 v32 = __src[0];
      if (PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), __src[0], WORD4(v49)) == 8)
      {
LABEL_52:
        uint64_t v41 = v32;
LABEL_53:
        free(v41);
        uint64_t v39 = *((void *)a1 + 4);
        uint64_t v40 = 0x800000078;
LABEL_54:
        *(void *)uint64_t v39 = v40;
        *(_WORD *)(v39 + _Block_object_dispose(&STACK[0x510], 8) = 0;
        return 8;
      }
    }
    free(v32);
    unsigned int v15 = (unsigned __int8 *)(v28 + v47);
LABEL_44:
    int v37 = (__int16)v16--;
    if (v37 <= 1) {
      goto LABEL_45;
    }
  }
  if (v17 != 41)
  {
LABEL_50:
    uint64_t v39 = *((void *)a1 + 4);
    uint64_t v40 = 0x800000096;
    goto LABEL_54;
  }
  a2 = a1;
  uint64_t v18 = v15[2];
  uint64_t v19 = *(void *)(a4 + 32 * v18 + 16);
  for (uint64_t i = *(void *)(a4 + 32 * v15[1]); i != v19; uint64_t i = *(void *)(i + 80))
  {
    int v21 = *(const void **)(i + 24);
    if (!v21
      || (unsigned __int16 v22 = strlen(*(const char **)(i + 24)),
          uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v21, v22),
          result != 8))
    {
      int v23 = *(const void **)(i + 40);
      if (!v23) {
        continue;
      }
      unsigned __int16 v24 = strlen(*(const char **)(i + 40));
      uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v23, v24);
      if (result != 8) {
        continue;
      }
    }
    uint64_t v38 = *((void *)a2 + 4);
    goto LABEL_48;
  }
  int v33 = *(const char **)(v19 + 24);
  a1 = a2;
  LOWORD(a2) = v43;
  if (!v33
    || ((uint64_t v34 = a4 + 32 * v18, *(unsigned char *)(v34 + 28) != 1)
      ? (unsigned int v36 = (unsigned __int16)strlen(v33))
      : (!*(unsigned char *)(v34 + 29) ? (unsigned __int16 v35 = *(_WORD *)(v34 + 24)) : (unsigned __int16 v35 = *(_WORD *)(v34 + 24) + 1), v36 = v35),
        uint64_t result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v33, v36),
        result != 8))
  {
    v15 += 3;
    goto LABEL_44;
  }
LABEL_46:
  uint64_t v38 = *((void *)a1 + 4);
LABEL_48:
  *(void *)uint64_t v38 = 0x800000078;
  *(_WORD *)(v38 + _Block_object_dispose(&STACK[0x510], 8) = 0;
  return result;
}

uint64_t PRcatBytes(const void **a1, unsigned __int16 *a2, _WORD *a3, const void *a4, unsigned int a5)
{
  if (PRgrow(a1, a2, (unsigned __int16)*a3, a5)) {
    return 8;
  }
  memcpy((char *)*a1 + (unsigned __int16)*a3, a4, a5);
  uint64_t result = 0;
  *a3 += a5;
  return result;
}

uint64_t PRcatPascalString(const void **a1, unsigned __int16 *a2, _WORD *a3, unsigned __int8 *a4)
{
  return PRcatBytes(a1, a2, a3, a4 + 1, *a4);
}

uint64_t PRcatContainer(const void **a1, unsigned __int16 *a2, _WORD *a3, uint64_t a4)
{
  int v4 = (__int16)(*(_WORD *)(a4 + 26) - *(_WORD *)(a4 + 10));
  if (v4 >= 1)
  {
    char v8 = 0;
    unsigned __int8 v9 = *(unsigned char *)(a4 + 12);
    uint64_t v10 = *(unsigned __int16 *)(a4 + 8);
    unsigned int v11 = *(void **)a4;
    while (2)
    {
      int v12 = v9;
      uint64_t v13 = 0;
      unsigned __int8 v9 = 3;
      switch(v12)
      {
        case 0:
          LODWORD(v10) = 0;
          goto LABEL_5;
        case 1:
LABEL_5:
          uint64_t v14 = v11[3];
          if (v14 && (char v8 = *(unsigned char *)(v14 + (__int16)v10)) != 0)
          {
            uint64_t v13 = (v10 + 1);
            unsigned __int8 v9 = 1;
          }
          else
          {
            LODWORD(v10) = 0;
LABEL_9:
            uint64_t v15 = v11[5];
            if (!v15 || (char v8 = *(unsigned char *)(v15 + (__int16)v10)) == 0)
            {
              uint64_t v13 = 0;
              unsigned int v11 = (void *)v11[10];
              unsigned __int8 v9 = 1;
              goto LABEL_18;
            }
            uint64_t v13 = (v10 + 1);
            unsigned __int8 v9 = 3;
          }
LABEL_14:
          unsigned int v16 = (unsigned __int16)*a3;
          if (*a2 < (unsigned __int16)(v16 + 1))
          {
            uint64_t result = PRgrow(a1, a2, v16, 1);
            if (result == 8) {
              return result;
            }
            unsigned int v16 = (unsigned __int16)*a3;
          }
          *((unsigned char *)*a1 + v16) = v8;
          ++*a3;
          LOWORD(v4) = v4 - 1;
LABEL_18:
          uint64_t v10 = v13;
          if ((__int16)v4 < 1) {
            return 0;
          }
          continue;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_9;
        default:
          uint64_t v13 = v10;
          goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t PRcatCString(const void **a1, unsigned __int16 *a2, _WORD *a3, char *__s)
{
  unsigned int v8 = (unsigned __int16)strlen(__s);
  return PRcatBytes(a1, a2, a3, __s, v8);
}

uint64_t PRgrow(const void **a1, unsigned __int16 *a2, unsigned int a3, __int16 a4)
{
  if (*a2 >= (unsigned __int16)(a4 + a3)) {
    return 0;
  }
  unsigned __int16 v5 = ((a4 + a3) & 0xFFC0) + 64;
  *a2 = v5;
  unsigned int v6 = *a1;
  size_t v7 = v5 & 0xFFC0;
  if (v6)
  {
    unsigned __int8 v9 = malloc_type_malloc(v7, 0xA1C24CCEuLL);
    if (v9)
    {
      uint64_t v10 = v9;
      memcpy(v9, *a1, a3);
      free((void *)*a1);
      *a1 = v10;
      return 0;
    }
  }
  else
  {
    unsigned int v11 = malloc_type_malloc(v7, 0x3627E278uLL);
    *a1 = v11;
    if (v11) {
      return 0;
    }
  }
  return 8;
}

uint64_t PRfastSpell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  *(_OWORD *)unsigned int v91 = 0u;
  long long v92 = 0u;
  long long v90 = 0u;
  *(_WORD *)(a3 + 16) = 0;
  v102[0] = 0;
  v103[0] = 0;
  int v75 = *(unsigned __int8 *)(a1 + 28);
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(*(void *)(v6 + 3184) + 304) = 11;
  *(_DWORD *)(v6 + 140_Block_object_dispose(&STACK[0x510], 8) = 1;
  *(_DWORD *)uint64_t v6 = 3;
  if (*(unsigned char *)(a3 + 61) && (*(_WORD *)a2 & 2) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)uint64_t v7 = 0xE6000001F9;
    *(_WORD *)(v7 + _Block_object_dispose(&STACK[0x510], 8) = 1020;
    return 230;
  }
  *(unsigned char *)(v6 + 1339) = 0;
  unsigned __int8 v9 = (unsigned char *)(*(void *)a3 + *(unsigned __int16 *)(a3 + 14) + *(unsigned __int16 *)(a3 + 16));
  unsigned int v10 = *v9;
  if (!*v9) {
    goto LABEL_159;
  }
  int v11 = 0;
  unsigned __int8 v12 = 0;
  LOWORD(v13) = 0;
  unsigned __int16 v14 = 0;
  *(void *)unsigned int v88 = v6;
  uint64_t v89 = 0;
  uint64_t v15 = 0;
  int v73 = (char *)(v6 + 1417);
  std::__fs::filesystem::path __s = (char *)(v6 + 1482);
  __s1 = v102;
  unsigned int v16 = v103;
  while (2)
  {
    unsigned __int16 v79 = v14;
    unint64_t v82 = v15;
    int v17 = 0;
    uint64_t v18 = 0;
    int v19 = *(unsigned __int8 *)(a2 + 34);
    int v20 = *(unsigned __int8 *)(a2 + 32);
    int v21 = *(unsigned __int8 *)(a2 + 33);
    uint64_t v22 = *(void *)(a2 + 8);
    do
    {
      if ((*(_DWORD *)(v22 + 4 * v10) & 0x2000000) == 0 && v10 != v19 && v10 != v20 && v10 != v21) {
        break;
      }
      uint64_t v18 = (v18 + 1);
      ++v17;
      unsigned int v10 = v9[(__int16)v18];
      if (*(unsigned char *)(a2 + 32))
      {
        BOOL v23 = v10 != v20 || v20 == v21;
        if (!v23)
        {
          do
          {
            uint64_t v18 = (v18 + 1);
            ++v17;
            unsigned int v10 = v9[(__int16)v18];
            if (v9[(__int16)v18]) {
              BOOL v24 = v10 == v21;
            }
            else {
              BOOL v24 = 1;
            }
          }
          while (!v24);
        }
      }
    }
    while (v10);
    unsigned int v25 = v9[(__int16)v18];
    unsigned __int16 v84 = v13;
    if (!v9[(__int16)v18])
    {
      char v83 = 0;
      int v27 = 0;
      __int16 v30 = 0;
      LOWORD(v13) = 0;
      goto LABEL_86;
    }
    char v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    __int16 v30 = 0;
    do
    {
      int v31 = *(_DWORD *)(v22 + 4 * v25);
      if ((v31 & 0x2000000) != 0) {
        break;
      }
      if (v25 == v19)
      {
        uint64_t v18 = (v18 + 1);
      }
      else
      {
        if (v25 != v20)
        {
          uint64_t v18 = (v18 + 1);
          if (v30 > 63) {
            break;
          }
          if (v29 || (v31 & 0x60000040) == 0)
          {
            if (v29 && v26 && (v31 & 0x60000040) != 0)
            {
              if (v26 == 2)
              {
                if ((v31 & 0x20000000) == 0)
                {
                  char v26 = 2;
                  goto LABEL_50;
                }
                char v35 = 0;
                int v28 = 1;
              }
              else
              {
                if ((v31 & 0x20000000) != 0 || v28)
                {
                  int v28 = 1;
                  goto LABEL_50;
                }
                char v35 = 2;
              }
LABEL_38:
              char v26 = v35;
            }
          }
          else
          {
            int v28 = 0;
            char v35 = 1;
            int v29 = 1;
            if ((v31 & 0x40000000) != 0) {
              goto LABEL_38;
            }
          }
LABEL_50:
          __int16 v36 = v30++;
          v16[v36] = v25;
          if (v25 == *(unsigned __int8 *)(a2 + 26))
          {
            int v37 = *(unsigned __int8 **)(v3 + 32);
            unsigned int v38 = v37[1];
            if (v38 <= 1) {
              unsigned int v38 = 1;
            }
            do
            {
              if (v9[(__int16)v18] == 10) {
                uint64_t v18 = (v18 + 1);
              }
              else {
                uint64_t v18 = v18;
              }
              BOOL v23 = (unsigned __int16)v38-- == 0;
            }
            while (!v23);
            if (v37[3])
            {
              unsigned __int16 v39 = v37[3];
              while (v9[(__int16)v18 + (unint64_t)v39] == 9)
              {
                int v40 = (__int16)v39--;
                if (v40 <= 1) {
                  goto LABEL_62;
                }
              }
            }
            else
            {
LABEL_62:
              uint64_t v18 = v18 + v37[3];
            }
            int v41 = v37[2];
            if (v41)
            {
              unsigned __int16 v42 = v41;
              while (v9[(__int16)v18 + (unint64_t)v42] == 32)
              {
                int v43 = (__int16)v42--;
                if (v43 < 2)
                {
                  uint64_t v18 = (v18 + v41);
                  break;
                }
              }
            }
            int v27 = 1;
          }
          goto LABEL_69;
        }
        do
        {
          uint64_t v32 = v18;
          int v33 = v9[(__int16)v18];
          uint64_t v18 = (v18 + 1);
          if (v33) {
            BOOL v34 = v33 == v21;
          }
          else {
            BOOL v34 = 1;
          }
        }
        while (!v34);
        uint64_t v18 = v32;
      }
LABEL_69:
      unsigned int v25 = v9[(__int16)v18];
    }
    while (v9[(__int16)v18]);
    char v83 = v26;
    unsigned int v44 = v9[(__int16)v18];
    if (v9[(__int16)v18])
    {
      int v13 = 0;
      do
      {
        if ((*(_DWORD *)(v22 + 4 * v44) & 0x2000000) == 0 && v44 != v19 && v44 != v20 && v44 != v21) {
          break;
        }
        LODWORD(v1_Block_object_dispose(&STACK[0x510], 8) = v18 + 1;
        ++v13;
        unsigned int v45 = v9[(__int16)v18];
        if (v44 == v20)
        {
          while (v45 && v45 != v21)
          {
            LODWORD(v1_Block_object_dispose(&STACK[0x510], 8) = v18 + 1;
            ++v13;
            unsigned int v45 = v9[(__int16)v18];
          }
        }
        unsigned int v44 = v45;
      }
      while (v45);
    }
    else
    {
      LOWORD(v13) = 0;
    }
LABEL_86:
    v16[v30] = 0;
    if (*(unsigned char *)(v5 + 28)) {
      SLchcnv(v16, v30, (unsigned __int8 *)v16, 1, *(unsigned __int8 *)(a2 + 20));
    }
    if ((unsigned __int16)v18 <= (unsigned __int16)v17)
    {
      if ((_WORD)v17 && !*(_WORD *)(v3 + 16)) {
        *(_WORD *)(v3 + 16) = v17;
      }
LABEL_159:
      if ((*(_WORD *)(v3 + 10) & 0x20) != 0) {
        return 0;
      }
      else {
        return 200;
      }
    }
    if (*(unsigned char *)(v3 + 61)) {
      BOOL v47 = v27 == 0;
    }
    else {
      BOOL v47 = 1;
    }
    int v48 = !v47;
    *(_DWORD *)(*(void *)v88 + 130_Block_object_dispose(&STACK[0x510], 8) = v48;
    if (ICspl(v16, *(size_t *)v88) == 8)
    {
      uint64_t v70 = *(void *)(v5 + 32);
      *(void *)uint64_t v70 = 0xDC000000A0;
      *(_WORD *)(v70 + _Block_object_dispose(&STACK[0x510], 8) = 1020;
      return 220;
    }
    int v49 = *(_DWORD *)(*(void *)v88 + 4);
    if (v49 == 4 || !*(void *)(*(void *)v88 + 1328) && v49 != 11 && !*(_WORD *)(*(void *)v88 + 1322))
    {
      __s1 = v16;
      goto LABEL_148;
    }
    int v76 = v11;
    unsigned __int16 v50 = v18 - (v17 + v13);
    if (*__s)
    {
      __int16 v51 = strlen(__s);
      LOWORD(v13) = v13 + v51;
      v50 -= v51;
      v16[v50] = 0;
    }
    else
    {
      __int16 v51 = 0;
    }
    if (*v73)
    {
      unsigned __int16 v52 = strlen(v73);
      LOWORD(v17) = v17 + v52;
      v16 += v52;
      unsigned __int16 v81 = v52;
      v50 -= v52;
    }
    else
    {
      unsigned __int16 v81 = 0;
    }
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    *(_OWORD *)unsigned int v91 = 0u;
    long long v92 = 0u;
    long long v90 = 0u;
    WORD4(v90) = v17 + WORD2(v89);
    LOWORD(v92) = v50;
    int v53 = malloc_type_calloc(1uLL, v50 + 1, 0xB82F4717uLL);
    v91[0] = v53;
    if (!v53)
    {
      uint64_t v72 = *(void *)(a1 + 32);
      *(void *)uint64_t v72 = 0xDC00000078;
      *(_WORD *)(v72 + _Block_object_dispose(&STACK[0x510], 8) = 1020;
      return 120;
    }
    strcpy((char *)v53, v16);
    if (PRFillError(a1, a2, (uint64_t)&v90, 0)) {
      return 220;
    }
    free(v91[0]);
    uint64_t v54 = v100;
    if (!(void)v100)
    {
      __s1 = v16;
      uint64_t v3 = a3;
      uint64_t v5 = a1;
      int v11 = v76;
      goto LABEL_148;
    }
    *(void *)(a3 + 40) = v100;
    __int16 v86 = v79 - v84;
    uint64_t v85 = v79 - v84;
    __int16 v80 = v81 + v51;
    __int16 v55 = v18 - v17;
    while (2)
    {
      int v56 = *(unsigned __int8 *)(v54 + 12);
      if (v56 == 5)
      {
        int v57 = *(unsigned __int8 *)(v54 + 13);
        if (v57 == 3) {
          goto LABEL_117;
        }
        if (v57 == 2 && *(_WORD *)v54)
        {
          --*(_WORD *)v54;
LABEL_117:
          ++*(_WORD *)(v54 + 2);
        }
      }
      int v58 = *(unsigned __int8 *)(a2 + 20);
      if (v58 == 16)
      {
        if (v56 == 6)
        {
          *(_WORD *)uint64_t v54 = v89;
          *(_WORD *)(v54 + 2) = v86;
          if (v12)
          {
            ***(unsigned char ***)(v54 + 24) = 65;
            int v58 = *(unsigned __int8 *)(a2 + 20);
            goto LABEL_122;
          }
        }
LABEL_134:
        int v59 = *(unsigned __int8 *)(v54 + 12);
      }
      else
      {
LABEL_122:
        if (v58 != 15) {
          goto LABEL_134;
        }
        int v59 = *(unsigned __int8 *)(v54 + 12);
        if (v59 == 6)
        {
          *(_WORD *)uint64_t v54 = v89;
          *(_WORD *)(v54 + 2) = v85;
          if (*(_WORD *)(*(void *)v88 + 1404) == 2)
          {
            __s1[v85] = 0;
            strcat(__s1, **(const char ***)(v54 + 24));
            uint64_t v60 = *(void *)(v54 + 24);
            if (v60)
            {
              *(_DWORD *)(v60 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
              *(_WORD *)(v60 + 24) = 0;
              if (*(_WORD *)(v60 + 16))
              {
                unint64_t v61 = 0;
                uint64_t v62 = *(void *)(v60 + 8);
                do
                  *(_WORD *)(v62 + 2 * v61++) = -1;
                while (v61 < *(unsigned __int16 *)(v60 + 16));
              }
            }
            PRaddList((char **)v60, __s1, 1, 0);
          }
          if (v12)
          {
            uint64_t v63 = *(void *)(v54 + 24);
            if (*(_WORD *)(v63 + 18))
            {
              unint64_t v64 = 0;
              do
              {
                BOOL v65 = (char *)(*(void *)v63 + *(__int16 *)(*(void *)(v63 + 8) + 2 * v64));
                __int16 v66 = strlen(v65);
                SLrecap((unsigned __int8 *)v65, v66, 0, 0, v12, *(void *)(a2 + 8));
                ++v64;
                uint64_t v63 = *(void *)(v54 + 24);
              }
              while (v64 < *(unsigned __int16 *)(v63 + 18));
            }
          }
          goto LABEL_134;
        }
      }
      if (v59 == 52)
      {
        if (*(unsigned char *)(v54 + 13) == 100)
        {
          *(_WORD *)v54 -= v81;
          *(_WORD *)(v54 + 2) += v80;
        }
      }
      else if (v59 == 4)
      {
        *(_WORD *)uint64_t v54 = WORD2(v89);
        *(_WORD *)(v54 + 2) = v55;
        *(_WORD *)(v54 + _Block_object_dispose(&STACK[0x510], 8) = WORD2(v89);
        *(_WORD *)(v54 + 10) = v55;
      }
      uint64_t v54 = *(void *)(v54 + 40);
      if (v54) {
        continue;
      }
      break;
    }
    int v11 = v76;
    if (v75)
    {
      uint64_t v3 = a3;
      for (uint64_t i = *(void *)(a3 + 40); i; uint64_t i = *(void *)(i + 40))
        ConvertAlts(*(void *)(i + 24), 0, *(unsigned __int8 *)(a2 + 20));
      __s1 = v16;
    }
    else
    {
      __s1 = v16;
      uint64_t v3 = a3;
    }
    uint64_t v5 = a1;
LABEL_148:
    unsigned __int16 v68 = v18 + WORD2(v89);
    uint64_t v69 = *(unsigned __int16 *)(v3 + 14);
    unsigned __int8 v12 = v83;
    if (*(unsigned __int16 *)(v3 + 12) <= (unsigned __int16)(v69 + v18 + WORD2(v89)))
    {
      if ((*(_WORD *)(v3 + 10) & 0x20) != 0)
      {
        uint64_t result = 0;
        *(_WORD *)(v3 + 16) = v68;
      }
      else
      {
        int v71 = *(void **)(v3 + 40);
        if (v71)
        {
          *(_WORD *)(v3 + 16) = WORD2(v89);
          PRfreeErrList(v71);
          *(void *)(v3 + 40) = 0;
        }
        else
        {
          *(_WORD *)(v3 + 16) = v68;
        }
        return 200;
      }
    }
    else
    {
      *(_WORD *)(v3 + 16) = v68;
      if (!*(void *)(v3 + 40) && ++v11 < *(unsigned __int16 *)(a2 + 28))
      {
        LOWORD(v89) = v17 + WORD2(v89);
        unsigned __int16 v14 = v18 - v17;
        uint64_t v15 = v103;
        if (v82 == v103) {
          uint64_t v15 = v102;
        }
        unsigned __int8 v9 = (unsigned char *)(*(void *)v3 + v69 + v68);
        unsigned int v10 = *v9;
        WORD2(v89) += v18;
        unsigned int v16 = v15;
        if (!*v9) {
          goto LABEL_159;
        }
        continue;
      }
      return 0;
    }
    return result;
  }
}

uint64_t PRNpBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 20);
  int v4 = FR_TOUT_STR;
  uint64_t v5 = FR_ARTICLES_STR;
  if (v3 != 5)
  {
    int v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = FR_DE_STR;
  if (v3 != 5) {
    uint64_t v6 = 0;
  }
  if (v3 == 9)
  {
    int v4 = IT_TUTTO_STR;
    uint64_t v5 = IT_ARTICLES_STR;
    uint64_t v6 = IT_DI_STR;
  }
  if (v3 == 8)
  {
    int v4 = SP_TOUT_STR;
    uint64_t v5 = SP_ARTICLES_STR;
    uint64_t v6 = SP_DE_STR;
  }
  if (v3 == 12) {
    int v4 = PO_TOUT_STR;
  }
  __int16 v66 = v4;
  if (v3 == 12) {
    uint64_t v7 = PO_ARTICLES_STR;
  }
  else {
    uint64_t v7 = v5;
  }
  unsigned int v8 = PO_DE_STR;
  if (v3 != 12) {
    unsigned int v8 = v6;
  }
  int v56 = v8;
  int v57 = v7;
  uint64_t v9 = *(void *)(a3 + 56);
  if (v9)
  {
    BOOL v10 = 0;
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v11 = 0;
    unint64_t v69 = 0;
    int v12 = 0;
    int v68 = 0;
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    int v63 = 0;
    BOOL v74 = 0;
    BOOL v62 = 0;
    int v75 = 0;
    LOBYTE(v67) = 0;
    uint64_t v76 = 0;
    int v16 = 0;
    do
    {
      int v72 = v13;
      int v73 = v14;
      uint64_t v17 = v3;
      uint64_t v18 = v9;
      uint64_t v19 = *(void *)(v9 + 152);
      int v71 = v12;
      if (v9 != v19)
      {
        uint64_t v20 = v15;
        int v21 = v75;
        int v22 = 0;
        BOOL v23 = **(unsigned __int8 ***)(v9 + 144);
        BOOL v24 = 1;
        goto LABEL_31;
      }
      if (*(void *)(v9 + 80) == *(void *)(v9 + 176) || (unsigned int v25 = *(unsigned __int8 ***)(v9 + 144)) == 0)
      {
        BOOL v23 = *(unsigned __int8 **)(v18 + 16);
        if (v17 <= 0xC && ((1 << v17) & 0x1120) != 0)
        {
          int v26 = *(unsigned __int8 *)(v18 + 51);
          uint64_t v20 = v15;
          if ((v26 - 2) < 2 || (int v21 = v75, v26 == 1) && v18 != *(void *)(a3 + 72))
          {
            int v21 = 0;
            uint64_t v76 = 0x100000003;
            int v16 = 12;
            LOBYTE(v67) = 1;
            BOOL v24 = 1;
            int v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v20 = v15;
          int v21 = v75;
        }
      }
      else
      {
        uint64_t v20 = v15;
        int v21 = v75;
        BOOL v23 = *v25;
      }
      int v22 = 0;
      BOOL v24 = PRwrdlst(v23, v56) == 0;
LABEL_31:
      BOOL v70 = v24;
      if (v17 == 9)
      {
        if (v10 && PRwrdlst(v23, IT_QUALE_STR))
        {
          BYTE4(v76) = 0;
          *(_WORD *)(v18 + 98) &= ~0x40u;
          int v60 = 1;
        }
        else
        {
          int v60 = 0;
        }
        if (PRwrdlst(v23, IT_I_STR))
        {
          LOBYTE(v67) = 0;
          int v21 = 0;
          uint64_t v76 = 0x100000002;
          int v16 = 4;
          int v22 = 1;
        }
        int v28 = PRwrdlst(v23, IT_GLI_LE_STR);
        if (v28 && *(void *)(v19 + 80) != *(void *)(v19 + 176))
        {
          int v29 = 0;
          LOBYTE(v67) = 0;
          __int16 v30 = (_WORD *)(v18 + 98);
          if (v28 == 1) {
            int v16 = 4;
          }
          else {
            int v16 = 8;
          }
          __int16 v31 = *(_WORD *)(v18 + 98) & 0xF08F | 0x40;
          *__int16 v30 = v31;
          uint64_t v76 = 0x100000002;
          uint64_t v15 = v20;
          uint64_t v3 = v17;
          int v12 = v71;
          int v32 = v72;
          int v14 = v73;
          goto LABEL_64;
        }
        uint64_t v3 = v17;
      }
      else
      {
        uint64_t v3 = v17;
        if (v17 == 12)
        {
          int v27 = PRwrdlst(v23, PO_O_A_STR);
          if (v27)
          {
            int v14 = v73;
            if ((unsigned __int16)v27 == 1) {
              int v16 = 4;
            }
            else {
              int v16 = 8;
            }
            uint64_t v15 = v20;
            int v12 = v71;
            int v32 = v72;
            int v29 = 0;
            LOBYTE(v67) = 0;
            int v60 = 0;
            __int16 v30 = (_WORD *)(v18 + 98);
            __int16 v31 = *(_WORD *)(v18 + 98) & 0xF08F | 0x40;
            *(_WORD *)(v18 + 9_Block_object_dispose(&STACK[0x510], 8) = v31;
            uint64_t v76 = 0x100000001;
            goto LABEL_64;
          }
          int v60 = (unsigned __int16)v27;
        }
        else
        {
          int v60 = 0;
        }
      }
      int v32 = v72;
      int v14 = v73;
      __int16 v30 = (_WORD *)(v18 + 98);
      unsigned int v33 = *(unsigned __int16 *)(v18 + 98);
      if (!v22)
      {
        int v16 = (v33 >> 8) & 0xC;
        LODWORD(v76) = (v33 >> 8) & 3;
        HIDWORD(v76) = (v33 >> 6) & 1;
        int v67 = (v33 >> 5) & 1;
        int v29 = (v33 >> 4) & 1;
        uint64_t v15 = v20;
        int v12 = v71;
        goto LABEL_68;
      }
      __int16 v31 = v33 & 0xF08F;
      if (BYTE4(v76)) {
        v31 |= 0x40u;
      }
      int v29 = v21;
      if ((_BYTE)v21) {
        v31 |= 0x10u;
      }
      if ((_BYTE)v67) {
        v31 |= 0x20u;
      }
      *__int16 v30 = v31;
      if (!(_WORD)v16)
      {
        int v16 = 0;
        uint64_t v15 = v20;
        int v12 = v71;
        goto LABEL_65;
      }
      uint64_t v15 = v20;
      int v12 = v71;
LABEL_64:
      v31 |= (_WORD)v16 << 8;
      *__int16 v30 = v31;
LABEL_65:
      if ((_WORD)v76) {
        *__int16 v30 = v31 | ((_WORD)v76 << 8);
      }
      else {
        LODWORD(v76) = 0;
      }
LABEL_68:
      if ((v3 | 4) == 0xC && PRwrdlst(v23, v66))
      {
        *(_WORD *)(v18 + 98) |= 0x40u;
        BYTE4(v76) = 1;
      }
      if (v32) {
        BOOL v34 = !v74;
      }
      else {
        BOOL v34 = 1;
      }
      if (v34) {
        int v35 = 0;
      }
      else {
        int v35 = v16;
      }
      if ((_BYTE)v29) {
        BOOL v36 = (unsigned __int16)v16 == 0;
      }
      else {
        BOOL v36 = 1;
      }
      if (!v36) {
        int v16 = v35;
      }
      int v75 = v29;
      if (!(_WORD)v16)
      {
        if (v32)
        {
          int v39 = v68;
          uint64_t result = set_np_attributes(v64, v11, (unsigned __int16)v68, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
          if (result) {
            return result;
          }
          uint64_t v15 = 0;
          int v14 = 0;
          int v41 = 1;
          unint64_t v69 = __PAIR64__(v12, v68);
        }
        else
        {
          int v39 = v68;
          int v41 = HIDWORD(v65);
        }
        int v13 = 0;
        int v46 = v65;
        if ((_BYTE)v75) {
          int v46 = 1;
        }
        LODWORD(v65) = v46;
        BOOL v38 = 1;
        goto LABEL_149;
      }
      if (v32)
      {
        if ((!v11 || (*(unsigned char *)(v11 + 94) & 0x80) == 0) && !BYTE4(v76))
        {
          BYTE4(v76) = 0;
          BOOL v38 = v3 != 9 || v60 == 0;
          goto LABEL_98;
        }
        if (v62)
        {
          BOOL v38 = 1;
          BYTE4(v76) = 1;
LABEL_98:
          int v39 = v68;
          int v41 = HIDWORD(v65);
          BOOL v42 = ((unsigned __int16)v16 & (unsigned __int16)v69) == 0;
          if (((unsigned __int16)v76 & WORD2(v69)) == 0) {
            BOOL v42 = 1;
          }
          if ((unsigned __int16)v68 == 12)
          {
            int v39 = v16;
          }
          else if ((unsigned __int16)v68 == 4)
          {
            if (v42) {
              unsigned int v43 = v15;
            }
            else {
              unsigned int v43 = 1;
            }
            if ((unsigned __int16)v16 == 8) {
              uint64_t v15 = v43;
            }
            else {
              uint64_t v15 = v15;
            }
            if ((unsigned __int16)v16 == 8) {
              int v39 = 16;
            }
            else {
              int v39 = 4;
            }
          }
          else
          {
            BOOL v47 = (unsigned __int16)v68 == 8;
            BOOL v48 = (unsigned __int16)v16 == 4;
            if (v42) {
              unsigned int v49 = v15;
            }
            else {
              unsigned int v49 = 1;
            }
            if (v47 && v48) {
              uint64_t v15 = v49;
            }
            else {
              uint64_t v15 = v15;
            }
            if (v47 && v48) {
              int v39 = 16;
            }
          }
          if ((unsigned __int16)v12 == 3)
          {
            int v13 = 1;
            int v12 = v76;
          }
          else
          {
            if ((unsigned __int16)v12 == 1)
            {
              if (v42) {
                int v50 = v14;
              }
              else {
                int v50 = 1;
              }
              if ((unsigned __int16)v76 == 2)
              {
                int v14 = v50;
                int v12 = 32;
              }
              else
              {
                int v12 = 1;
              }
            }
            else
            {
              if (v42) {
                int v51 = v14;
              }
              else {
                int v51 = 1;
              }
              if ((unsigned __int16)v12 == 2 && (unsigned __int16)v76 == 1)
              {
                int v14 = v51;
                int v12 = 32;
              }
            }
            int v13 = 1;
          }
          goto LABEL_149;
        }
        unsigned int v44 = v68;
        uint64_t result = set_np_attributes(v64, v11, (unsigned __int16)v68, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
        if (result) {
          return result;
        }
        uint64_t v15 = 0;
        int v14 = 0;
        BYTE4(v76) = 1;
        int v41 = 1;
        int v45 = v76;
      }
      else
      {
        unsigned int v44 = v69;
        int v12 = HIDWORD(v69);
        int v45 = v76;
        int v41 = HIDWORD(v65);
      }
      LODWORD(v65) = 0;
      BOOL v38 = v67 == 0;
      *(_WORD *)(v18 + 96) |= 0x1000u;
      if (v63) {
        int v52 = v12;
      }
      else {
        int v52 = 0;
      }
      if (v63) {
        unsigned int v53 = v44;
      }
      else {
        unsigned int v53 = 0;
      }
      unint64_t v69 = __PAIR64__(v52, v53);
      int v13 = 1;
      unint64_t v64 = (unsigned __int16 *)v18;
      int v39 = v16;
      int v12 = v45;
LABEL_149:
      if (v70 || (int v54 = 1, !v41) && !(_BYTE)v65) {
        int v54 = 0;
      }
      int v63 = v54;
      if (!v38 || (int v55 = 0, (_WORD)v16) && !*(void *)(v18 + 176))
      {
        uint64_t result = set_np_attributes(v64, v18, (unsigned __int16)v39, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
        if (result) {
          return result;
        }
        uint64_t v15 = 0;
        int v14 = 0;
        int v13 = 0;
        int v55 = 1;
        unint64_t v69 = __PAIR64__(v12, v39);
      }
      if (BYTE4(v76)) {
        BOOL v74 = PRwrdlst(v23, v57) == 0;
      }
      else {
        BOOL v74 = 0;
      }
      int v68 = v39;
      BOOL v62 = PRwrdlst(v23, v66) != 0;
      HIDWORD(v65) = v55;
      BOOL v10 = v3 == 9 && PRwrdlst(v23, IT_IL_LA_STR);
      uint64_t v9 = *(void *)(v18 + 176);
      uint64_t v11 = v18;
    }
    while (v9);
  }
  return 0;
}

uint64_t PRwrdlst(unsigned __int8 *a1, unsigned char *a2)
{
  int v2 = *a2;
  if (*a2)
  {
    int v5 = *a1;
    uint64_t v3 = a1 + 1;
    int v4 = v5;
    __int16 v6 = 1;
    do
    {
      if (v4)
      {
        uint64_t v7 = v3;
        int v8 = v4;
        while (1)
        {
          int v2 = *a2;
          if (v8 != v2) {
            break;
          }
          ++a2;
          int v9 = *v7++;
          int v8 = v9;
          if (!v9)
          {
            int v2 = *a2;
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        if ((v2 | 0x20) == 0x20) {
          return v6;
        }
      }
      while ((v2 | 0x20) != 0x20)
      {
        int v10 = *++a2;
        int v2 = v10;
      }
      if (v2 == 32) {
        ++a2;
      }
      ++v6;
      int v2 = *a2;
    }
    while (*a2);
  }
  return 0;
}

uint64_t set_np_attributes(unsigned __int16 *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  int v13 = *(unsigned __int8 *)(a6 + 20);
  if (a8) {
    __int16 v14 = 12;
  }
  else {
    __int16 v14 = 0;
  }
  if (a8) {
    char v15 = 0;
  }
  else {
    char v15 = 52;
  }
  int v16 = (a8 == 0) << 9;
  if (a8) {
    char v17 = 53;
  }
  else {
    char v17 = 54;
  }
  if (a3 == 16)
  {
    char v18 = v17;
  }
  else
  {
    __int16 v14 = a3;
    char v18 = 53;
  }
  if (a3 != 16)
  {
    char v15 = 0;
    int v16 = 0;
  }
  if (a9) {
    __int16 v19 = 3;
  }
  else {
    __int16 v19 = 0;
  }
  if (a9)
  {
    char v18 = v15;
    int v20 = v16;
  }
  else
  {
    int v20 = v16 | 0x400;
  }
  if (a4 == 32) {
    __int16 v21 = v19;
  }
  else {
    __int16 v21 = a4;
  }
  if (a4 == 32) {
    unsigned __int8 v22 = v18;
  }
  else {
    unsigned __int8 v22 = v15;
  }
  if (a4 == 32) {
    int v23 = v20;
  }
  else {
    int v23 = v16;
  }
  __int16 v24 = v21 | v14;
  *((_DWORD *)a1 + 23) |= v23;
  unsigned int v25 = a1;
  if (a1)
  {
    unsigned int v25 = a1;
    if (a1 != (unsigned __int16 *)a2)
    {
      unsigned int v25 = a1;
      do
      {
        v25[48] |= v24 | 0x2000;
        if (v13 == 9) {
          *((_DWORD *)v25 + 23) |= v23;
        }
        unsigned int v25 = (unsigned __int16 *)*((void *)v25 + 22);
        if (v25) {
          BOOL v26 = v25 == (unsigned __int16 *)a2;
        }
        else {
          BOOL v26 = 1;
        }
      }
      while (!v26);
    }
  }
  *(_WORD *)(a2 + 96) |= v24 | 0x2100;
  if (v13 == 9) {
    *((_DWORD *)v25 + 23) |= v23;
  }
  if (!v22 || *(unsigned char *)(a7 + 2) != 2 || *a1 < *(unsigned __int16 *)(a7 + 16)) {
    return 0;
  }
  int v28 = v22;
  int v29 = PRliveRule(a5, a6, 0, 0x3Au, v22, 1, 1);
  uint64_t result = 0;
  if (!v29)
  {
    unsigned int v33 = 0;
    uint64_t result = PRmkErr(a5, a6, &v33, *((void *)a1 + 19), 0, 0x3Au, v28);
    if (!result)
    {
      __int16 v30 = *(_WORD *)(*((void *)a1 + 19) + 8);
      __int16 v31 = *(_WORD *)(*(void *)(a2 + 152) + 32) + *(_WORD *)(*(void *)(a2 + 152) + 8) - v30;
      int v32 = v33;
      *unsigned int v33 = v30;
      v32[1] = v31;
    }
  }
  return result;
}

uint64_t PRfixSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(*(void *)(a1 + 16) + 40)) {
    return 0;
  }
  uint64_t v4 = a3;
  if (!a3) {
    return 0;
  }
  int v8 = (unsigned __int8 *)(a2 + 32);
  while (1)
  {
    if (*(_WORD *)(v4 + 2))
    {
      uint64_t result = FixSpan(a1, v8, *(void *)(a2 + 8), a4, *(void *)(*(void *)(a1 + 16) + 40), (__int16 *)v4, (__int16 *)(v4 + 2));
      if (result) {
        break;
      }
    }
    if (*(_WORD *)(v4 + 6))
    {
      uint64_t result = FixSpan(a1, v8, *(void *)(a2 + 8), a4, *(void *)(*(void *)(a1 + 16) + 40), (__int16 *)(v4 + 4), (__int16 *)(v4 + 6));
      if (result) {
        break;
      }
    }
    if (*(_WORD *)(v4 + 10))
    {
      uint64_t result = FixSpan(a1, v8, *(void *)(a2 + 8), a4, *(void *)(*(void *)(a1 + 16) + 40), (__int16 *)(v4 + 8), (__int16 *)(v4 + 10));
      if (result) {
        break;
      }
    }
    uint64_t v4 = *(void *)(v4 + 40);
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t FixSpan(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6, __int16 *a7)
{
  int v7 = *a6;
  int v8 = *a7;
  signed int v9 = v7 & 0xFFFFFFF0;
  int v10 = *a2;
  int v11 = a2[1];
  int v12 = a2[2];
  int v13 = a2[3];
  __int16 v14 = (unsigned char *)(*(void *)a4 + *(__int16 *)(a5 + 2 * (v7 >> 4)));
  int v15 = *v14;
  if (*v14) {
    BOOL v16 = v9 < v7;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    do
    {
      if (v15 == v10)
      {
        do
          int v17 = *v14++;
        while (v17 != v11);
      }
      else
      {
        if (v15 != v12)
        {
          if (v15 == v13)
          {
            do
              unsigned int v18 = *++v14;
            while ((*(_DWORD *)(a3 + 4 * v18) & 0x2000000) != 0);
            ++v9;
            goto LABEL_15;
          }
          ++v9;
        }
        ++v14;
      }
LABEL_15:
      int v15 = *v14;
    }
    while (*v14 && v7 > (__int16)v9);
  }
  if (*a7 && !v15)
  {
    uint64_t v19 = *(void *)(a1 + 32);
    *(void *)uint64_t v19 = 0xDCFFFFFF9BLL;
    *(_WORD *)(v19 + _Block_object_dispose(&STACK[0x510], 8) = 3022;
    return 220;
  }
  *a6 = (_WORD)v14 - *(void *)a4 - *(_WORD *)(a4 + 14);
  int v21 = *v14;
  if (*v14) {
    BOOL v22 = v8 < 1;
  }
  else {
    BOOL v22 = 1;
  }
  LOWORD(v23) = (_WORD)v14;
  if (!v22)
  {
    int v23 = v14;
    do
    {
      if (v21 == v10)
      {
        do
          int v24 = *v23++;
        while (v24 != v11);
      }
      else
      {
        if (v21 != v12)
        {
          if (v21 == v13)
          {
            do
              unsigned int v25 = *++v23;
            while ((*(_DWORD *)(a3 + 4 * v25) & 0x2000000) != 0);
            --v8;
            goto LABEL_34;
          }
          --v8;
        }
        ++v23;
      }
LABEL_34:
      int v21 = *v23;
      if (*v23) {
        BOOL v26 = (__int16)v8 <= 0;
      }
      else {
        BOOL v26 = 1;
      }
    }
    while (!v26);
  }
  uint64_t result = 0;
  *a7 = (_WORD)v23 - (_WORD)v14;
  return result;
}

uint64_t PRfixPars(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 40);
  if (!v3) {
    return 0;
  }
  if (!*(_WORD *)(a3 + 16)) {
    return 0;
  }
  __int16 v5 = 0;
  uint64_t result = FixSpan(a1, (unsigned __int8 *)(a2 + 32), *(void *)(a2 + 8), a3, v3, (__int16 *)(a3 + 16), &v5);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t PRgetmsg(char **a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(_DWORD *)a3;
  if (SLSeek(*(_DWORD *)a3, *(_DWORD *)(a3 + 4) + a2, 0)) {
    return 111;
  }
  unsigned int v12 = 0;
  if (SLFRead(v5, 322, &__dst, &v12)) {
    return 112;
  }
  size_t v8 = __rev16(__dst);
  signed int v9 = (char *)malloc_type_malloc((v8 + 1), 0xF6858604uLL);
  *a1 = v9;
  if (!v9) {
    return 120;
  }
  int v10 = v9;
  if (v8 < 0x141)
  {
    memcpy(v9, v14, v8);
  }
  else
  {
    memcpy(v9, v14, 0x140uLL);
    int v11 = v10 + 320;
    if (SLFRead(v5, (int)v8 - 320, v11, &v12))
    {
      free(v11);
      *a1 = 0;
      return 112;
    }
    int v10 = *a1;
  }
  v10[v8] = 0;
  if (v8 && *(_WORD *)(a3 + 88))
  {
    uint64_t v6 = PRdecomp(v10, v8, *(unsigned char **)(a3 + 80));
    if (v6)
    {
      free(v10);
      *a1 = 0;
    }
  }
  else
  {
    SLcrypt(v10, v8, (uint64_t)&SLkey, 7);
    return 0;
  }
  return v6;
}

uint64_t PRIcsTokWalk(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a2;
  uint64_t v84 = *MEMORY[0x263EF8340];
  __int16 v80 = 0;
  size_t v8 = *(void *)(a3 + 128);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 8);
  uint64_t v10 = *(void *)(a3 + 8);
  *(unsigned char *)(v8 + 1339) = 0;
  if (a4 && (*(_WORD *)a3 & 2) == 0)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)uint64_t v11 = 0x4000001F9;
    *(_WORD *)(v11 + _Block_object_dispose(&STACK[0x510], 8) = 821;
  }
  uint64_t result = PRmkList(a2, (uint64_t *)&v80, 7);
  if (result == 220) {
    return result;
  }
  if (!a1)
  {
    *(unsigned char *)(v8 + 1339) = 0;
LABEL_154:
    PRfreeList((void **)v80);
    return 0;
  }
  std::__fs::filesystem::path __s = (char *)(v8 + 1624);
  unsigned __int16 v79 = (char *)(v8 + 1547);
  uint64_t v13 = a1;
  while (1)
  {
    uint64_t v14 = *(void *)(v13 + 72);
    if (v14)
    {
      int v15 = *(_DWORD *)(v14 + 4);
      if ((v15 & 0x80000000) == 0 && (v15 & 0x221C0) != 0)
      {
        BOOL v16 = *(unsigned __int8 **)(v14 + 16);
        if (v16)
        {
          uint64_t v17 = *(unsigned __int16 *)(v14 + 32);
          if (v17)
          {
            int v18 = 0;
            do
            {
              unsigned int v19 = *v16++;
              if ((*(_DWORD *)(v10 + 4 * v19) & 0x60000040) != 0)
              {
                if (v18) {
                  goto LABEL_20;
                }
                int v18 = 1;
              }
              --v17;
            }
            while (v17);
          }
        }
      }
      if (v15 != 4096 && v15 != 0x4000) {
        *(unsigned char *)(v8 + 1339) = 0;
      }
    }
LABEL_20:
    BOOL v21 = 0;
    if (a4)
    {
      if ((*(_WORD *)a3 & 2) != 0)
      {
        int v20 = *(char **)(v13 + 16);
        if (v20)
        {
          if (strchr(v20, *(char *)(a3 + 26))) {
            BOOL v21 = 1;
          }
        }
      }
    }
    *(_DWORD *)(v8 + 130_Block_object_dispose(&STACK[0x510], 8) = v21;
    unsigned int v22 = *(_DWORD *)(v13 + 4);
    if (v22 != -1073733632 && v22 != -1073739776) {
      break;
    }
    LOBYTE(v24) = 1;
    if (v9 <= 0x10)
    {
      if (((1 << v9) & 0x2CC0) != 0)
      {
        uint64_t v25 = *(void *)(v13 + 72);
        if (!v25) {
          goto LABEL_66;
        }
        unint64_t v26 = *(unsigned __int16 *)(v25 + 32);
        if (v26 < 3) {
          goto LABEL_66;
        }
        int v27 = *(unsigned __int8 *)(*(void *)(v25 + 16) + (v26 - 1));
        if ((v27 - 115) > 7 || ((1 << (v27 - 115)) & 0xA1) == 0)
        {
          if (!v27) {
            goto LABEL_66;
          }
          if (v27 != 97 || v9 != 7) {
            goto LABEL_66;
          }
        }
      }
      else
      {
        if (v9 != 16) {
          goto LABEL_67;
        }
        uint64_t v25 = *(void *)(v13 + 72);
        if (!v25
          || (unint64_t v32 = *(unsigned __int16 *)(v25 + 32), v32 < 3)
          || *(unsigned char *)(*(void *)(v25 + 16) + (v32 - 1)) != 115)
        {
LABEL_66:
          LOBYTE(v24) = 1;
          goto LABEL_67;
        }
      }
      if (!*(_WORD *)(v25 + 48))
      {
        unsigned int v22 = -2147483647;
        *(_DWORD *)(v13 + 4) = -2147483647;
      }
      goto LABEL_66;
    }
LABEL_67:
    if ((v22 & 0x221C0) == 0) {
      LOBYTE(v24) = 1;
    }
    if ((v22 & 0x10055011) != 0 || (v24 & 1) == 0)
    {
      if (*(_WORD *)(v13 + 32))
      {
        unint64_t v34 = 0;
        do
        {
          *(unsigned char *)(v8 + 1339 + v34) = *(unsigned char *)(*(void *)(v13 + 16) + v34);
          ++v34;
        }
        while (v34 < *(unsigned __int16 *)(v13 + 32));
      }
      else
      {
        LOWORD(v34) = 0;
      }
      *(unsigned char *)(v8 + (unsigned __int16)v34 + 1339) = 0;
    }
LABEL_77:
    uint64_t v13 = *(void *)(v13 + 80);
    if (!v13)
    {
      int v68 = 0;
      *(unsigned char *)(v8 + 1339) = 0;
      do
      {
        *(_WORD *)(a1 + 8_Block_object_dispose(&STACK[0x510], 8) = v68;
        a1 = *(void *)(a1 + 176);
        ++v68;
      }
      while (a1);
      goto LABEL_154;
    }
  }
  LODWORD(v24) = v22 >> 31;
  if ((v22 & 0x80000000) != 0 || (*(_DWORD *)(v13 + 4) & 0x221C0) == 0) {
    goto LABEL_67;
  }
  if ((*(unsigned char *)(v13 + 92) & 0x10) != 0) {
    goto LABEL_55;
  }
  LODWORD(v24) = (v22 & 0x10000002) != 0;
  if ((*(_DWORD *)(v13 + 4) & 0x20000) != 0) {
    LODWORD(v24) = 0;
  }
  if ((v22 & 0x10000004) != 0 && !v24) {
    goto LABEL_67;
  }
  int v24 = *(unsigned __int8 **)(v13 + 16);
  if (!v24) {
    goto LABEL_67;
  }
  uint64_t v29 = *(unsigned __int16 *)(v13 + 32);
  if (!*(_WORD *)(v13 + 32))
  {
LABEL_55:
    LOBYTE(v24) = 0;
    goto LABEL_67;
  }
  int v30 = 0;
  while (1)
  {
    unsigned int v31 = *v24++;
    if ((*(_DWORD *)(v10 + 4 * v31) & 0x60000040) != 0) {
      break;
    }
LABEL_54:
    if (!--v29) {
      goto LABEL_55;
    }
  }
  if (!v30)
  {
    int v30 = 1;
    goto LABEL_54;
  }
  uint64_t v35 = *(void *)(v13 + 72);
  BOOL v38 = 0;
  if (v35)
  {
    int v36 = *(_DWORD *)(v35 + 4);
    BOOL v37 = v36 == -2147483640 || v36 == -2147483644;
    if (v37 && !*(void *)(v35 + 40)) {
      BOOL v38 = 1;
    }
  }
  *(unsigned char *)(v8 + 1414) = v38;
  if (*(void *)(v13 + 40))
  {
    LOBYTE(v39) = 0;
  }
  else
  {
    uint64_t v39 = *(void *)(v13 + 80);
    if (v39) {
      LOBYTE(v39) = ((*(_DWORD *)(v39 + 4) + 2147483644) & 0xFFFFFFFB) == 0;
    }
  }
  *(unsigned char *)(v8 + 1413) = v39;
  *(unsigned char *)(v8 + 1412) = 0;
  int v40 = PRIcs(v6, a3, 0, 0, 0, *(char **)(v13 + 24), v13, v8, 3, 1);
  if (v40 > 10)
  {
    if (v40 == 11)
    {
      *(_DWORD *)(v13 + 4) |= 0x10000004u;
    }
    else if (v40 == 16)
    {
      *(_DWORD *)(v13 + 4) |= 0x10000008u;
    }
    goto LABEL_143;
  }
  if ((v40 - 2) < 2)
  {
    int v41 = 0x10000000;
    goto LABEL_99;
  }
  if (v40 != 10) {
    goto LABEL_143;
  }
  int v41 = 268435458;
LABEL_99:
  *(_DWORD *)(v13 + 4) |= v41;
  if (!*(void *)(a3 + 72))
  {
LABEL_143:
    int v67 = *(_DWORD *)(v8 + 4);
    if (v67 != 4
      && (*(void *)(v8 + 1328) || v67 == 11 || *(_WORD *)(v8 + 1322))
      && PRFillError(v6, a3, v13, 1))
    {
      return 220;
    }
    goto LABEL_77;
  }
  uint64_t v76 = (uint64_t *)v80;
  uint64_t v77 = v6;
  uint64_t v42 = *(void *)(a3 + 8);
  if (*(_DWORD *)(v8 + 4) == 2 && (*(unsigned char *)(v8 + 1329) & 0x20) != 0)
  {
LABEL_142:
    uint64_t v6 = v77;
    goto LABEL_143;
  }
  unsigned int v43 = *(unsigned __int8 *)(a3 + 20);
  if (v43 <= 0xC && ((1 << v43) & 0x1320) != 0) {
    BOOL v74 = v82;
  }
  else {
    BOOL v74 = 0;
  }
  unsigned __int16 v81 = 0;
  uint64_t v75 = v42;
  if (!*(unsigned char *)(v8 + 1614))
  {
    CompNuuint64_t m = GetCompNum(v79, (uint64_t)v80, (uint64_t)v82, (__int16 *)&v81, v6, a3);
    if (CompNum == 220)
    {
      __int16 v69 = 817;
      goto LABEL_167;
    }
    int v48 = CompNum;
    if (CompNum || *__s)
    {
      if (CompNum) {
        int v49 = CompNum;
      }
      else {
        int v49 = 1;
      }
      int v50 = malloc_type_calloc(v49, 8uLL, 0x10040436913F5uLL);
      *(void *)(v13 + 144) = v50;
      if (v50)
      {
        int v51 = FillWordElems(v48, v79, v76, v74, v81, v13, v75);
        uint64_t v52 = v13;
        if (v51) {
          goto LABEL_139;
        }
        __int16 v69 = 819;
      }
      else
      {
        __int16 v69 = 818;
      }
      goto LABEL_167;
    }
    goto LABEL_142;
  }
  __int16 v73 = *(_WORD *)(v13 + 98);
  *(_WORD *)(v13 + 9_Block_object_dispose(&STACK[0x510], 8) = 0;
  unsigned __int8 v44 = *(unsigned char *)(v8 + 1614);
  if (v44)
  {
    uint64_t v45 = 0;
    int v46 = 0;
    do
    {
      if ((*(_DWORD *)(v42 + 4 * v44) & 0x40000000) != 0) {
        v44 += 32;
      }
      v83[v45] = v44;
      uint64_t v45 = (__int16)++v46;
      unsigned __int8 v44 = *(unsigned char *)(v8 + (__int16)v46 + 1614);
    }
    while (v44);
  }
  else
  {
    uint64_t v45 = 0;
  }
  v83[v45] = 0;
  int v53 = GetCompNum(v83, (uint64_t)v76, (uint64_t)v82, (__int16 *)&v81, v6, a3);
  if (v53 == 220)
  {
    __int16 v69 = 809;
    goto LABEL_167;
  }
  int v54 = v53;
  __int16 v55 = v53;
  if ((v53 & 0xFFFE) == 0) {
    __int16 v55 = 1;
  }
  *(_DWORD *)(v13 + 92) |= 0x20000u;
  int v56 = malloc_type_calloc((__int16)(v55 + 1), 8uLL, 0x10040436913F5uLL);
  *(void *)(v13 + 144) = v56;
  if (!v56)
  {
    __int16 v69 = 810;
    goto LABEL_167;
  }
  uint64_t v57 = v75;
  if (v54)
  {
    int v58 = FillWordElems(v54, v83, v76, v74, v81, v13, v75);
    uint64_t v57 = v75;
    if (!v58)
    {
      __int16 v69 = 812;
      goto LABEL_167;
    }
  }
  if (!AddToWordElems(v13, v83, *(__int16 *)(v13 + 136), 1, v57))
  {
    __int16 v69 = 811;
    goto LABEL_167;
  }
  uint64_t v59 = v77;
  int v60 = GetCompNum(v79, (uint64_t)v76, (uint64_t)v82, (__int16 *)&v81, v77, a3);
  if (v60 == 220)
  {
    __int16 v69 = 813;
  }
  else
  {
    int v72 = v60;
    uint64_t v61 = v13;
    do
    {
      uint64_t v62 = v61;
      uint64_t v61 = *(void *)(v61 + 176);
    }
    while (v61 != *(void *)(v62 + 80));
    if (CreateExpTok(v62))
    {
      uint64_t v71 = *(void *)(v62 + 176);
      *(_WORD *)(v71 + 9_Block_object_dispose(&STACK[0x510], 8) = v73;
      __int16 v63 = v72;
      if ((v72 & 0xFFFE) == 0) {
        __int16 v63 = 1;
      }
      unint64_t v64 = malloc_type_calloc(v63, 8uLL, 0x10040436913F5uLL);
      *(void *)(v71 + 144) = v64;
      if (v64)
      {
        uint64_t v52 = v71;
        if (FillWordElems(v72, v79, v76, v74, v81, v71, v75))
        {
LABEL_139:
          if (!*__s) {
            goto LABEL_142;
          }
          __int16 v65 = strlen(__s);
          __int16 v66 = (char *)malloc_type_malloc(v65 + 1, 0xB2133F2DuLL);
          *(void *)(v52 + 112) = v66;
          if (v66)
          {
            strcpy(v66, __s);
            goto LABEL_142;
          }
          __int16 v69 = 820;
        }
        else
        {
          __int16 v69 = 816;
        }
      }
      else
      {
        __int16 v69 = 815;
      }
    }
    else
    {
      __int16 v69 = 814;
    }
LABEL_167:
    uint64_t v59 = v77;
  }
  uint64_t v70 = *(void *)(v59 + 32);
  *(void *)uint64_t v70 = 0xDC00000078;
  *(_WORD *)(v70 + _Block_object_dispose(&STACK[0x510], 8) = v69;
  return 220;
}

uint64_t GetCompNum(const char *a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6)
{
  int v12 = strlen(a1);
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t v14 = (char *)malloc_type_calloc((__int16)v12 + 1, 1uLL, 0x100004077774924uLL);
  if (v14)
  {
    int v15 = v14;
    if (v12 << 16 >= 1)
    {
      __int16 v16 = 0;
      do
      {
        uint64_t v17 = a1[v16];
        if ((*(_DWORD *)(v13 + 4 * v17) & 0x40000000) != 0) {
          LOBYTE(v17) = v17 + 32;
        }
        v14[v16++] = v17;
      }
      while ((__int16)v12 > v16);
    }
    PRCtGet(v14, 2, a5, a6, a2, a3, a4);
    free(v15);
    return *(__int16 *)(a2 + 18);
  }
  else
  {
    return 220;
  }
}

uint64_t FillWordElems(int a1, char *a2, uint64_t *a3, char *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t result = AddToWordElems(a6, a2, 0, 0, a7);
    if (!result) {
      return result;
    }
    return 1;
  }
  __int16 v13 = a5 - 1;
  if ((_WORD)a5 != 1)
  {
    int v14 = v13;
    if (v13 >= 1)
    {
      LOWORD(v15) = 0;
      uint64_t v16 = a6;
      do
      {
        CreateExpTok(v16);
        uint64_t v16 = *(void *)(v16 + 176);
        uint64_t result = (uint64_t)malloc_type_calloc(a1, 8uLL, 0x10040436913F5uLL);
        *(void *)(v16 + 144) = result;
        if (!result) {
          return result;
        }
        int v15 = (__int16)(v15 + 1);
      }
      while (v15 < v14);
    }
    if (a1 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v32 = (unsigned __int16)a1;
      uint64_t v19 = *a3;
      while (1)
      {
        uint64_t v20 = *(__int16 *)(a3[1] + 2 * v18);
        if (*(unsigned char *)(v19 + v20)) {
          break;
        }
LABEL_19:
        if (++v18 == v32) {
          goto LABEL_27;
        }
      }
      uint64_t v21 = v8;
      while (1)
      {
        for (__int16 i = 0; ; ++i)
        {
          uint64_t v23 = (__int16)v20;
          LODWORD(v20) = *(unsigned __int8 *)(v19 + (__int16)v20);
          if ((v20 | 0x20) == 0x20) {
            break;
          }
          uint64_t v24 = i;
          __s[v24] = v20;
          LOWORD(v20) = v23 + 1;
        }
        __s[i] = 0;
        int v25 = *(unsigned __int8 *)(v19 + v23);
        uint64_t result = AddToWordElems(v21, __s, *(__int16 *)(v21 + 136), 0, a7);
        if (!result) {
          return result;
        }
        if (v25) {
          LOWORD(v20) = v23 + 1;
        }
        else {
          LOWORD(v20) = v23;
        }
        uint64_t v21 = *(void *)(v21 + 176);
        uint64_t v19 = *a3;
        if (!*(unsigned char *)(*a3 + (__int16)v20)) {
          goto LABEL_19;
        }
      }
    }
    goto LABEL_27;
  }
  if (a1 < 1)
  {
LABEL_27:
    if (a4 && (__int16)a5 >= 1)
    {
      uint64_t v28 = a5;
      do
      {
        __int16 v29 = *(_WORD *)(v8 + 98) & 0xF09F;
        *(_WORD *)(v8 + 9_Block_object_dispose(&STACK[0x510], 8) = v29;
        __int16 v30 = v29 & 0xF0FF | ((*a4 & 0xF) << 8);
        *(_WORD *)(v8 + 9_Block_object_dispose(&STACK[0x510], 8) = v30;
        char v31 = *a4;
        if ((*a4 & 0x10) != 0)
        {
          v30 |= 0x40u;
          *(_WORD *)(v8 + 9_Block_object_dispose(&STACK[0x510], 8) = v30;
          char v31 = *a4;
        }
        if ((v31 & 0x20) != 0) {
          *(_WORD *)(v8 + 9_Block_object_dispose(&STACK[0x510], 8) = v30 | 0x20;
        }
        uint64_t v8 = *(void *)(v8 + 176);
        ++a4;
        --v28;
      }
      while (v28);
    }
    return 1;
  }
  uint64_t v26 = 0;
  uint64_t v27 = (unsigned __int16)a1;
  while (1)
  {
    uint64_t result = AddToWordElems(v8, (char *)(*a3 + *(__int16 *)(a3[1] + 2 * v26)), (__int16)v26, 0, a7);
    if (!result) {
      return result;
    }
    if (v27 == ++v26) {
      goto LABEL_27;
    }
  }
}

uint64_t AddToWordElems(uint64_t a1, char *__s, int a3, int a4, uint64_t a5)
{
  int v10 = strlen(__s);
  if (!a3 || a4 || (uint64_t v11 = **(unsigned char ***)(a1 + 144)) == 0 || SLstrcmp(v11, (unsigned __int8 *)__s))
  {
    uint64_t result = (uint64_t)malloc_type_calloc((__int16)v10 + 1, 1uLL, 0x100004077774924uLL);
    *(void *)(*(void *)(a1 + 144) + 8 * a3) = result;
    if (!result) {
      return result;
    }
    strcpy(*(char **)(*(void *)(a1 + 144) + 8 * a3), __s);
    if (v10 << 16 >= 1)
    {
      __int16 v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 144) + 8 * a3);
        uint64_t v15 = *(unsigned __int8 *)(v14 + v13);
        if ((*(_DWORD *)(a5 + 4 * v15) & 0x40000000) != 0) {
          LOBYTE(v15) = v15 + 32;
        }
        *(unsigned char *)(v14 + v13++) = v15;
      }
      while ((__int16)v10 > v13);
    }
    if (!a4) {
      ++*(_WORD *)(a1 + 136);
    }
  }
  return 1;
}

uint64_t CreateExpTok(uint64_t a1)
{
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0xB8uLL, 0x10B00409DE433CAuLL);
  *(void *)(a1 + 176) = result;
  if (result)
  {
    *(void *)(result + 152) = *(void *)(a1 + 152);
    *(_OWORD *)(result + 72) = *(_OWORD *)(a1 + 72);
    uint64_t v3 = *(void *)(a1 + 80);
    *(void *)(result + 16_Block_object_dispose(&STACK[0x510], 8) = a1;
    *(void *)(result + 176) = v3;
    if (v3) {
      *(void *)(v3 + 16_Block_object_dispose(&STACK[0x510], 8) = result;
    }
    return 1;
  }
  return result;
}

uint64_t PRmapost(unsigned int a1, uint64_t a2, unsigned int a3, unsigned int a4, __int16 **a5, char a6, uint64_t a7, __int16 a8, long long *a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v214 = *MEMORY[0x263EF8340];
  __int16 v205 = 0;
  if ((a6 & 0x10) != 0)
  {
    size_t v17 = *(unsigned __int8 *)(a7 + 1);
    uint64_t v18 = *a5;
    long long v19 = a10[1];
    long long v201 = *a10;
    long long v202 = v19;
    long long v20 = a9[1];
    *(_OWORD *)std::__fs::filesystem::path __s = *a9;
    long long v211 = v20;
    long long v212 = a9[2];
    uint64_t v213 = *((void *)a9 + 6);
    EvaActionMacro(v17, v18, (uint64_t)&v201, (uint64_t)__s, a11);
    if (*(char *)(a7 + 1) < 0)
    {
      uint64_t v21 = (char *)(a7 + 2);
      do
      {
        size_t v22 = *v21;
        uint64_t v23 = *a5;
        long long v24 = a10[1];
        long long v201 = *a10;
        long long v202 = v24;
        long long v25 = a9[1];
        *(_OWORD *)std::__fs::filesystem::path __s = *a9;
        long long v211 = v25;
        long long v212 = a9[2];
        uint64_t v213 = *((void *)a9 + 6);
        EvaActionMacro(v22, v23, (uint64_t)&v201, (uint64_t)__s, a11);
        int v26 = *v21++;
      }
      while (v26 < 0);
    }
  }
  v200 = a5;
  uint64_t v27 = 0;
  uint64_t v28 = (uint64_t)*a5;
  long long v29 = a9[1];
  long long v201 = *a9;
  long long v202 = v29;
  long long v203 = a9[2];
  uint64_t v204 = *((void *)a9 + 6);
  while (1)
  {
    if (!*((unsigned char *)&v201 + v27))
    {
LABEL_16:
      unsigned int v33 = (uint64_t *)v200;
      goto LABEL_17;
    }
    __s[0] = 0;
    __int16 v30 = &v201 + v27;
    char v31 = (void *)*((void *)v30 + 1);
    if (v31)
    {
      for (i = (void *)*((void *)v30 + 2); v31 != i; char v31 = (void *)v31[10])
      {
        if (v31[3])
        {
          strlen(__s);
          __strncat_chk();
          if (v31[5])
          {
            strlen(__s);
            __strncat_chk();
          }
        }
      }
      strlen(__s);
      __strncat_chk();
    }
    if (PRaddRefs(a12, v28, __s, 1u, (unsigned __int16)(v27 + 1))) {
      break;
    }
    if (++v27 == 3) {
      goto LABEL_16;
    }
  }
  unsigned int v33 = (uint64_t *)v200;
  if (*(_DWORD *)(*(void *)(a12 + 32) + 4)) {
    return 0;
  }
LABEL_17:
  uint64_t v34 = *v33;
  long long v201 = *a10;
  uint64_t v35 = *((void *)a10 + 3);
  uint64_t v196 = *((void *)a10 + 2);
  uint64_t v197 = v34;
  unsigned int v207 = 0;
  *(_DWORD *)((char *)v206 + 3) = -911886373;
  v206[0] = -612264979;
  uint64_t v36 = a13;
  unsigned __int8 v37 = *(unsigned char *)(a13 + 20);
  BOOL v38 = (unsigned __int8 *)(*(void *)(a2 + 48)
                          + ((unsigned __int16)(4
                                              * (a8
                                               + (bswap32(*(unsigned __int16 *)(*(void *)(a2 + 40) + 2 * a3)) >> 16))
                                              - 4) & 0xFFFC));
  uint64_t v39 = (unsigned __int8 *)(*(void *)(a2 + 64)
                          + ((*v38 << 24) | ((unint64_t)v38[1] << 16) | ((unint64_t)v38[2] << 8) | v38[3]));
  unint64_t v40 = *v39;
  uint64_t v41 = a11;
  if (v40 < 0x40) {
    goto LABEL_37;
  }
  int v42 = 0;
  unint64_t v43 = v40 >> 6;
  unsigned __int8 v44 = v39 + 1;
  do
  {
    int v45 = *v44++;
    int v42 = v45 | (v42 << 8);
    --v43;
  }
  while (v43);
  unsigned int v46 = *(_DWORD *)a2;
  if (SLSeek(*(_DWORD *)a2, *(_DWORD *)(a2 + 4) + 4 * v42, 0) == 8)
  {
    uint64_t v47 = *(void *)(a12 + 32);
    *(void *)uint64_t v47 = 0xDC0000006FLL;
    __int16 v48 = 665;
LABEL_36:
    *(_WORD *)(v47 + _Block_object_dispose(&STACK[0x510], 8) = v48;
    goto LABEL_37;
  }
  if (SLFRead(v46, 2, &__dst, &v207) == 8 || v207 != 2)
  {
    uint64_t v47 = *(void *)(a12 + 32);
    *(void *)uint64_t v47 = 0xDC00000070;
    __int16 v48 = 666;
    goto LABEL_36;
  }
  char v209 = 0;
  unsigned int v51 = __rev16(__dst);
  uint64_t v52 = (unsigned __int8 *)malloc_type_calloc(v51 + 4, 1uLL, 0x100004077774924uLL);
  if (!v52)
  {
    uint64_t v47 = *(void *)(a12 + 32);
    *(void *)uint64_t v47 = 0xDC00000078;
    __int16 v48 = 667;
    goto LABEL_36;
  }
  int v53 = v52;
  unsigned __int8 v190 = v37;
  if (SLFRead(v46, v51 + 3, v52, &v207) == 8 || v207 != v51 + 3)
  {
    free(v53);
    uint64_t v47 = *(void *)(a12 + 32);
    *(void *)uint64_t v47 = 0xDC00000070;
    __int16 v48 = 668;
    goto LABEL_36;
  }
  v53[v51 + 3] = 0;
  unsigned int v64 = *(unsigned __int16 *)v53;
  int v187 = v53;
  __int16 v65 = (char *)(v53 + 3);
  unsigned int v66 = v51;
  unint64_t v67 = v53[2];
  SLcrypt(v53 + 3, v66, (uint64_t)v206, 7);
  if (v67 < 0x40)
  {
    int v68 = 0;
    uint64_t v36 = a13;
    goto LABEL_284;
  }
  unsigned int v69 = bswap32(v64) >> 16;
  unint64_t v199 = v67 >> 6;
  uint64_t v70 = v196;
  do
  {
    uint64_t v71 = v70;
    if (*(unsigned char *)(v70 + 51) != 5) {
      break;
    }
    uint64_t v70 = *(void *)(v70 + 176);
  }
  while (v70);
  uint64_t v189 = v71;
  unint64_t v72 = 0;
  __int16 v73 = 0;
  unsigned int v188 = (a4 >> 2) & 0x1F;
  unsigned int v194 = v67 >> 1;
  int v191 = v67;
  do
  {
    if ((_BYTE)v72) {
      char v74 = v67;
    }
    else {
      char v74 = v69;
    }
    char v75 = v194;
    if (v72 != 1) {
      char v75 = v74;
    }
    *(unsigned char *)(v197 + v72 + 32) = (unsigned __int16)v69 >> 13;
    if ((v69 & 0x800) != 0)
    {
      unint64_t v192 = v72;
      int v82 = *v65;
      uint64_t v83 = v196;
      if (v196 == v35)
      {
        uint64_t v89 = 0;
      }
      else
      {
        int v84 = 0;
        uint64_t v85 = v196;
        BOOL v86 = v82 == 7;
        while (1)
        {
          if (*(_WORD *)(v85 + 32))
          {
            int v87 = *(unsigned __int16 *)(v85 + 32) + v84;
            if (*(void *)(v85 + 40)) {
              ++v87;
            }
          }
          else
          {
            int v87 = v84 + strlen(**(const char ***)(v85 + 144));
          }
          if (v85 == v35) {
            break;
          }
          if (v82 != 3) {
            v87 += *(unsigned __int16 *)(v85 + 48);
          }
          int v84 = v87 + v86;
          uint64_t v85 = *(void *)(v85 + 80);
        }
        unsigned int v88 = (char *)malloc_type_calloc(2 * (unsigned __int16)(v87 + v86) + 2, 1uLL, 0x100004077774924uLL);
        if (!v88)
        {
          uint64_t v94 = *(void *)(a12 + 32);
          *(void *)uint64_t v94 = 0xDC00000078;
          *(_WORD *)(v94 + _Block_object_dispose(&STACK[0x510], 8) = 663;
          unsigned int v33 = (uint64_t *)v200;
LABEL_269:
          int v68 = 0;
          ++v65;
          LODWORD(v67) = v191;
          unint64_t v72 = v192 + 1;
          goto LABEL_270;
        }
        uint64_t v89 = v88;
        char *v88 = 0;
        unsigned int v33 = (uint64_t *)v200;
        uint64_t v83 = v196;
      }
      unsigned __int16 v91 = v73 + 1;
      switch(v82)
      {
        case 3:
          uint64_t v92 = v83;
          if (v83 != v35)
          {
            while (1)
            {
              long long v93 = *(const char **)(v92 + 24);
              if (!v93) {
                long long v93 = **(const char ***)(v92 + 144);
              }
              strcat(v89, v93);
              if (v92 == v35) {
                break;
              }
              uint64_t v92 = *(void *)(v92 + 80);
            }
            goto LABEL_266;
          }
          __int16 v153 = *(char **)(v83 + 24);
          if (!v153) {
            __int16 v153 = **(char ***)(v83 + 144);
          }
          goto LABEL_262;
        case 4:
          uint64_t v105 = v83;
          if (v83 == v35)
          {
            __int16 v153 = *(char **)(v83 + 16);
            goto LABEL_262;
          }
          while (1)
          {
            uint64_t v106 = *(const char **)(v105 + 16);
            if (!v106) {
              uint64_t v106 = **(const char ***)(v105 + 144);
            }
            strcat(v89, v106);
            if (v105 == v35) {
              break;
            }
            uint64_t v107 = *(const char **)(v105 + 40);
            if (v107) {
              strcat(v89, v107);
            }
            uint64_t v105 = *(void *)(v105 + 80);
          }
          goto LABEL_266;
        case 5:
          uint64_t v108 = v83;
          if (v83 != v35)
          {
            do
            {
              unsigned int v109 = *(char **)(v108 + 24);
              if (v109)
              {
                if (!*(unsigned char *)(v108 + 51))
                {
                  uint64_t v110 = *v109;
                  if ((*(_DWORD *)(a11 + 4 * v110) & 0x20000000) != 0) {
                    LOBYTE(v110) = v110 - 32;
                  }
                  *unsigned int v109 = v110;
                  unsigned int v109 = *(char **)(v108 + 24);
                }
                strcat(v89, v109);
                unsigned int v111 = *(const char **)(v108 + 40);
                if (v111) {
                  strcat(v89, v111);
                }
                if (!*(unsigned char *)(v108 + 51))
                {
                  int v112 = *(unsigned char **)(v108 + 24);
                  uint64_t v113 = *v112;
                  if ((*(_DWORD *)(a11 + 4 * v113) & 0x40000000) != 0) {
                    LOBYTE(v113) = v113 + 32;
                  }
                  *int v112 = v113;
                }
                uint64_t v108 = *(void *)(v108 + 80);
              }
            }
            while (v108 != v35);
            uint64_t v114 = *(char **)(v35 + 24);
            if (v114)
            {
              if (!*(unsigned char *)(v35 + 51))
              {
                uint64_t v115 = *v114;
                if ((*(_DWORD *)(a11 + 4 * v115) & 0x20000000) != 0) {
                  LOBYTE(v115) = v115 - 32;
                }
                *uint64_t v114 = v115;
                uint64_t v114 = *(char **)(v35 + 24);
              }
              strcat(v89, v114);
              if (!*(unsigned char *)(v35 + 51))
              {
                unsigned int v116 = *(unsigned char **)(v35 + 24);
                uint64_t v117 = *v116;
                if ((*(_DWORD *)(a11 + 4 * v117) & 0x40000000) != 0) {
                  LOBYTE(v117) = v117 + 32;
                }
                *unsigned int v116 = v117;
              }
            }
            goto LABEL_266;
          }
          if ((a1 & 0x80000000) != 0)
          {
            if (!*(unsigned char *)(v83 + 51))
            {
              uint64_t v170 = *(unsigned char **)(v83 + 24);
              uint64_t v171 = *v170;
              if ((*(_DWORD *)(a11 + 4 * v171) & 0x20000000) != 0) {
                LOBYTE(v171) = v171 - 32;
              }
              *uint64_t v170 = v171;
            }
            PRaddAlts(a12, v197, *(char **)(v83 + 24), 0, 1uLL, v91);
            if (!*(unsigned char *)(v83 + 51))
            {
              uint64_t v172 = *(unsigned char **)(v83 + 24);
              uint64_t v173 = *v172;
              if ((*(_DWORD *)(a11 + 4 * v173) & 0x40000000) != 0) {
                LOBYTE(v173) = v173 + 32;
              }
              *uint64_t v172 = v173;
            }
            goto LABEL_269;
          }
          uint64_t v154 = *(void *)(v83 + 80);
          if (v154)
          {
            uint64_t v155 = *(void *)(v154 + 168);
          }
          else
          {
            uint64_t v175 = *(void *)(v83 + 176);
            do
            {
              uint64_t v155 = v175;
              uint64_t v175 = *(void *)(v175 + 176);
            }
            while (v175);
          }
          if (!*(_WORD *)(v196 + 32)) {
            goto LABEL_261;
          }
          uint64_t v176 = 0;
          int v177 = (unsigned __int16)strlen(*(const char **)(*(void *)(v155 + 144) + 8 * a1));
          while (SLstrncmp((unsigned char *)(*(void *)(v196 + 16) + v176), *(unsigned __int8 **)(*(void *)(v155 + 144) + 8 * a1), v177))
          {
            if (++v176 >= (unint64_t)*(unsigned __int16 *)(v196 + 32)) {
              goto LABEL_261;
            }
          }
          uint64_t v178 = *(void *)(v196 + 24);
          if (v178)
          {
            uint64_t v179 = *(unsigned __int8 *)(v178 + v176);
            if ((*(_DWORD *)(a11 + 4 * v179) & 0x20000000) != 0)
            {
              *(unsigned char *)(v178 + v176) = v179 - 32;
              PRaddAlts(a12, v197, *(char **)(v196 + 24), 0, 1uLL, v91);
              uint64_t v181 = *(unsigned __int8 *)(v178 + v176);
              if ((*(_DWORD *)(a11 + 4 * v181) & 0x40000000) != 0) {
                LOBYTE(v181) = v181 + 32;
              }
              *(unsigned char *)(v178 + v176) = v181;
              goto LABEL_269;
            }
          }
LABEL_261:
          __int16 v153 = *(char **)(v196 + 24);
LABEL_262:
          PRaddAlts(a12, v197, v153, 0, 1uLL, v91);
          goto LABEL_269;
        case 6:
          uint64_t v118 = *(char **)(v83 + 24);
          for (unsigned int j = strchr(v118, 45); j; unsigned int j = strchr(v118, 45))
            *unsigned int j = 32;
          PRaddAlts(a12, v197, v118, 0, 1uLL, (unsigned __int16)(v73 + 1));
          while (1)
          {
            uint64_t v120 = strchr(v118, 32);
            if (!v120) {
              break;
            }
            *uint64_t v120 = 45;
          }
          goto LABEL_269;
        case 7:
          if (v83 == v35) {
            uint64_t v89 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
          }
          int v121 = strcat(v89, *(const char **)(v83 + 24));
          *(_WORD *)&v89[strlen(v121)] = 46;
          if (v83 != v35)
          {
            uint64_t v122 = v83;
            do
            {
              *(_WORD *)&v89[strlen(v89)] = 32;
              uint64_t v122 = *(void *)(v122 + 80);
              unsigned __int16 v123 = strcat(v89, *(const char **)(v122 + 24));
              *(_WORD *)&v89[strlen(v123)] = 46;
            }
            while (v122 != v35);
          }
          int v124 = v91;
          goto LABEL_267;
        case 8:
          unsigned __int16 v125 = 0;
          int v126 = *(unsigned char **)(v83 + 24);
          while (2)
          {
            if (*v126 == 46)
            {
              ++v125;
LABEL_164:
              ++v126;
              continue;
            }
            break;
          }
          if (*v126) {
            goto LABEL_164;
          }
          int v142 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + (unint64_t)v125 + 1, 1uLL, 0x100004077774924uLL);
          uint64_t v89 = v142;
          uint64_t v143 = *(unsigned __int16 *)(v83 + 32);
          if (*(_WORD *)(v83 + 32))
          {
            uint64_t v144 = 0;
            int v145 = 0;
            do
            {
              int v146 = *(unsigned __int8 *)(*(void *)(v83 + 24) + v144);
              v142[(unsigned __int16)v145] = v146;
              if (v146 == 46) {
                v142[(unsigned __int16)++v145] = 32;
              }
              ++v144;
              ++v145;
            }
            while (v143 != v144);
          }
          goto LABEL_266;
        case 9:
          if (v83 != v35)
          {
            strcpy(v89, *(const char **)(v83 + 24));
            goto LABEL_266;
          }
          int v156 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 1, 1uLL, 0x100004077774924uLL);
          if (!v156)
          {
            uint64_t v174 = *(void *)(a12 + 32);
            *(void *)uint64_t v174 = 0xDC00000078;
            *(_WORD *)(v174 + _Block_object_dispose(&STACK[0x510], 8) = 664;
            goto LABEL_269;
          }
          uint64_t v89 = v156;
          strcpy(v156, *(const char **)(v83 + 24));
          uint64_t v157 = *(unsigned __int16 *)(v83 + 32);
          if (*(_WORD *)(v83 + 32))
          {
            unsigned __int16 v152 = 0;
            int v158 = v89;
            do
            {
              int v160 = *v158++;
              char v159 = v160;
              if (v160 != 46)
              {
                uint64_t v161 = v152++;
                v89[v161] = v159;
              }
              --v157;
            }
            while (v157);
          }
          else
          {
            unsigned __int16 v152 = 0;
          }
          goto LABEL_258;
        case 10:
          int v127 = *(char **)(v83 + 24);
          int v128 = &v127[*(unsigned __int16 *)(v83 + 32)];
          int v129 = *(v128 - 1);
          if (v129 == 115)
          {
            if (*(v128 - 2) == 39)
            {
              *(v128 - 2) = 0;
              PRaddAlts(a12, v197, v127, 0, 1uLL, (unsigned __int16)(v73 + 1));
              v127[*(unsigned __int16 *)(v83 + 32) - 2] = 39;
            }
          }
          else if (v129 == 39)
          {
            *(v128 - 1) = 0;
            PRaddAlts(a12, v197, v127, 0, 1uLL, (unsigned __int16)(v73 + 1));
            v127[*(unsigned __int16 *)(v83 + 32) - 1] = 39;
          }
          goto LABEL_269;
        case 12:
          if (v83 == v35) {
            uint64_t v89 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
          }
          int v136 = 0;
          while (1)
          {
            int v137 = *(unsigned __int8 **)(v83 + 24);
            if (v137)
            {
              if (*(unsigned char *)(v83 + 51) != 2)
              {
                unsigned __int8 v138 = *v137;
                if (*v137)
                {
                  uint64_t v139 = v137 + 1;
                  do
                  {
                    if ((*(_DWORD *)(a11 + 4 * v138) & 0x20000000) != 0) {
                      v138 -= 32;
                    }
                    v89[(unsigned __int16)v136++] = v138;
                    int v140 = *v139++;
                    unsigned __int8 v138 = v140;
                  }
                  while (v140);
                }
              }
              if (v83 != v35)
              {
                uint64_t v141 = *(const char **)(v83 + 40);
                if (v141)
                {
                  strcat(v89, v141);
                  ++v136;
                }
              }
            }
            if (v83 == v35) {
              break;
            }
            uint64_t v83 = *(void *)(v83 + 80);
          }
          uint64_t v147 = (unsigned __int16)v136;
          goto LABEL_265;
        default:
          if ((v82 - 13) <= 1)
          {
            if (v83 != v35) {
              goto LABEL_269;
            }
            uint64_t v130 = *(unsigned __int16 *)(v83 + 32);
            int v131 = (char *)malloc_type_calloc(v130 + 1, 1uLL, 0x100004077774924uLL);
            uint64_t v89 = v131;
            if (v130)
            {
              uint64_t v132 = 0;
              unsigned __int16 v133 = 0;
              do
              {
                int v134 = *(unsigned __int8 *)(*(void *)(v83 + 24) + v132);
                if (v134 == 58)
                {
                  if (v82 == 14) {
                    break;
                  }
                }
                else
                {
                  uint64_t v135 = v133++;
                  v131[v135] = v134;
                }
                ++v132;
              }
              while (v130 != v132);
            }
            else
            {
              unsigned __int16 v133 = 0;
            }
            uint64_t v147 = (unsigned __int16)(v133 - (v130 == v133));
            goto LABEL_265;
          }
          if (v82 == 16)
          {
            int v162 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v197 + 2) + 2, 1uLL, 0x100004077774924uLL);
            uint64_t v89 = v162;
            if (v83 == v35) {
              goto LABEL_268;
            }
            int v163 = 0;
            char *v162 = 0;
            while (1)
            {
              int v164 = *(const char **)(v83 + 24);
              if (*v164 == 47 && (unsigned __int16)++v163 == 2)
              {
                int v163 = 2;
                int v164 = " ";
              }
              strcat(v89, v164);
              if (v83 == v35) {
                break;
              }
              uint64_t v83 = *(void *)(v83 + 80);
            }
          }
          else
          {
            if (v82 == 15)
            {
              if (v83 != v35) {
                goto LABEL_268;
              }
              int v148 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
              uint64_t v89 = v148;
              uint64_t v149 = *(unsigned __int16 *)(v83 + 32);
              if (*(_WORD *)(v83 + 32))
              {
                uint64_t v150 = 0;
                while (1)
                {
                  uint64_t v151 = *(unsigned __int8 *)(*(void *)(v83 + 24) + v150);
                  if ((*(_DWORD *)(a11 + 4 * v151) & 0x8000000) == 0) {
                    break;
                  }
                  v148[v150++] = v151;
                  if (v149 == v150)
                  {
                    v148[v149] = 58;
                    unsigned __int16 v152 = v149 + 1;
                    goto LABEL_258;
                  }
                }
                unsigned __int16 v180 = v150;
              }
              else
              {
                unsigned __int16 v180 = 0;
              }
              uint64_t v182 = v180;
              v148[v180] = 58;
              unsigned __int16 v152 = v180 + 1;
              if (v149 > v180)
              {
                do
                  v148[v152++] = *(unsigned char *)(*(void *)(v83 + 24) + v182++);
                while (v149 != v182);
              }
LABEL_258:
              uint64_t v147 = v152;
LABEL_265:
              v89[v147] = 0;
              goto LABEL_266;
            }
            if ((v82 - 17) > 1) {
              goto LABEL_269;
            }
            if (v83 != v35 || *(unsigned char *)(v83 + 51) != 2) {
              goto LABEL_268;
            }
            uint64_t v165 = (char *)malloc_type_calloc(3 * *(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
            uint64_t v89 = v165;
            *uint64_t v165 = 0;
            if (*(_WORD *)(v83 + 32))
            {
              uint64_t v166 = 0;
              int v167 = 0;
              uint64_t v168 = (unsigned __int16)(*(_WORD *)(v83 + 32) - 1);
              while (1)
              {
                int v169 = v167 + 1;
                v165[(unsigned __int16)v167] = *(unsigned char *)(*(void *)(v83 + 24) + v166);
                if (v82 == 18)
                {
                  v165[(unsigned __int16)(v167 + 1)] = 46;
                  int v169 = v167 + 2;
                }
                if (v168 == v166) {
                  break;
                }
                int v167 = v169 + 1;
                v165[(unsigned __int16)v169] = 32;
                ++v166;
              }
            }
          }
LABEL_266:
          int v124 = v91;
LABEL_267:
          PRaddAlts(a12, v197, v89, 0, 1uLL, v124);
LABEL_268:
          free(v89);
          goto LABEL_269;
      }
    }
    unint64_t v76 = v72;
    int v77 = v75 & 1;
    if ((v69 & 0x1000) != 0)
    {
      unsigned __int8 v90 = *(unsigned char *)(v189 + 51);
      *(_OWORD *)std::__fs::filesystem::path __s = v201;
      *(void *)&long long v211 = v196;
      *((void *)&v211 + 1) = v35;
      unint64_t v72 = v76 + 1;
      int v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v90, v75 & 1, v190);
    }
    else
    {
      if (v188 < 2)
      {
LABEL_80:
        __int16 v80 = v65 + 1;
        if (*v65 != 124) {
          __int16 v80 = v65;
        }
        __int16 v65 = v80 - 1;
        do
          int v81 = *++v65;
        while (v81 == 32);
      }
      else
      {
        int v78 = 1;
        while (1)
        {
          unsigned __int16 v79 = strchr(v65, 124);
          if (!v79) {
            break;
          }
          __int16 v65 = v79 + 1;
          if (++v78 >= v188) {
            goto LABEL_80;
          }
        }
        __int16 v65 = 0;
      }
      long long v95 = strchr(v65, 124);
      if (v95)
      {
        long long v96 = v95;
        *long long v95 = 0;
        for (int k = v95; ; *int k = 0)
        {
          int v98 = *--k;
          if (v98 != 32) {
            break;
          }
        }
        unsigned __int8 v99 = *(unsigned char *)(v189 + 51);
        *(_OWORD *)std::__fs::filesystem::path __s = v201;
        *(void *)&long long v211 = v196;
        *((void *)&v211 + 1) = v35;
        int v100 = v77;
        unint64_t v72 = v76 + 1;
        int v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v99, v100, v190);
        __int16 v65 = v96 + 1;
      }
      else
      {
        for (uint64_t m = &v65[strlen(v65)]; ; *uint64_t m = 0)
        {
          int v102 = *--m;
          if (v102 != 32) {
            break;
          }
        }
        unsigned __int8 v103 = *(unsigned char *)(v189 + 51);
        *(_OWORD *)std::__fs::filesystem::path __s = v201;
        *(void *)&long long v211 = v196;
        *((void *)&v211 + 1) = v35;
        int v104 = v77;
        unint64_t v72 = v76 + 1;
        int v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v103, v104, v190);
      }
      LODWORD(v67) = v191;
    }
LABEL_270:
    v65 += strlen(v65) + 1;
    uint64_t v41 = a11;
    if (v72 >= v199) {
      break;
    }
    LOWORD(v69) = 32 * v69;
    __int16 v73 = v72;
  }
  while (!v68);
  uint64_t v36 = a13;
  unsigned int v183 = *(unsigned __int8 *)(a13 + 20);
  if (v183 <= 0xC && ((1 << v183) & 0x1320) != 0)
  {
    *(_OWORD *)std::__fs::filesystem::path __s = v201;
    *(void *)&long long v211 = v196;
    *((void *)&v211 + 1) = v35;
    int v68 = PRAltMod(a12, a13, v197, (uint64_t)__s);
  }
LABEL_284:
  if (v68 || (unsigned int v184 = (v67 >> 4) & 3) == 0)
  {
LABEL_290:
    if (!v68)
    {
      unsigned int v186 = (v67 >> 2) & 3;
      if (v186) {
        PRaddFils(a12, v197, v65, v186, 4);
      }
    }
  }
  else if (!PRaddFils(a12, v197, v65, (v67 >> 4) & 3, 1))
  {
    int v185 = 0;
    do
    {
      v65 += strlen(v65) + 1;
      ++v185;
    }
    while (v184 > v185);
    int v68 = 0;
    uint64_t v36 = a13;
    goto LABEL_290;
  }
  free(v187);
LABEL_37:
  uint64_t v55 = *((void *)a10 + 3);
  if (v55)
  {
    uint64_t v56 = *(void *)(v55 + 40);
    if (v56) {
      LOWORD(v56) = *(_WORD *)(v55 + 48);
    }
  }
  else
  {
    LOWORD(v56) = 0;
  }
  uint64_t v57 = *v33;
  __int16 v58 = *(_WORD *)(*v33 + 2) - v56;
  *(_WORD *)(v57 + 2) = v58;
  *(_WORD *)(v57 + 4) = *(_WORD *)v57;
  *(_WORD *)(v57 + 6) = v58;
  if (*((void *)a10 + 2))
  {
    uint64_t v59 = *(char **)(v57 + 24);
    if (v59)
    {
      int v60 = *(unsigned __int8 *)(v36 + 20);
      if (v60 == 6)
      {
        if (*(_WORD *)(v36 + 16) == 64)
        {
          CalExtBytesAfterCnv(v59, &v205, 223);
          if (v205) {
            AltOneToMultiChrCnv(*(void *)(*v33 + 24), 223, v205, a12);
          }
        }
        int v60 = *(unsigned __int8 *)(v36 + 20);
      }
      if (v60 == 5)
      {
        if ((*(_WORD *)(v36 + 18) & 0x10) != 0)
        {
          CalExtBytesAfterCnv(*(char **)(*v33 + 24), &v205, 247);
          if (v205) {
            AltOneToMultiChrCnv(*(void *)(*v33 + 24), 247, v205, a12);
          }
          CalExtBytesAfterCnv(*(char **)(*v33 + 24), &v205, 230);
          if (v205) {
            AltOneToMultiChrCnv(*(void *)(*v33 + 24), 230, v205, a12);
          }
        }
        if ((*(_WORD *)(v36 + 18) & 0x40) != 0) {
          ToUpUnaccentedCnv(**(unsigned char ***)(*v33 + 24), *(__int16 *)(*(void *)(*v33 + 24) + 24), 5, v41);
        }
      }
      if (*(unsigned char *)(v36 + 20) == 8 && (*(_WORD *)(v36 + 18) & 0x40) != 0) {
        ToUpUnaccentedCnv(**(unsigned char ***)(*v33 + 24), *(__int16 *)(*(void *)(*v33 + 24) + 24), 8, v41);
      }
    }
    uint64_t v61 = *((void *)a10 + 2);
    uint64_t v62 = *(void *)(v61 + 160);
    uint64_t v63 = *v33;
    if (v62)
    {
      *(void *)(v63 + 40) = v62;
      uint64_t v63 = *v33;
    }
    *(void *)(v61 + 160) = v63;
    *unsigned int v33 = 0;
  }
  return 1;
}

size_t EvaActionMacro(size_t result, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  switch(result)
  {
    case 0xB:
      if ((*(unsigned char *)(v6 + 93) & 0x40) == 0) {
        return result;
      }
      a2[4] = *(_WORD *)(v6 + 8);
      uint64_t result = strlen(*(const char **)(*(void *)(v6 + 144) + 8 * *(unsigned __int16 *)(v6 + 136)));
      goto LABEL_31;
    case 2:
      uint64_t v9 = *(void *)(a4 + 8);
      if (!v9) {
        return result;
      }
      uint64_t v10 = *(void *)(a4 + 16);
      int v11 = *(__int16 *)(v9 + 8);
      a2[4] = *(_WORD *)(v9 + 8);
      if (v9 == v10)
      {
        int v12 = 0;
        uint64_t v10 = v9;
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = v9;
        do
        {
          v12 += *(unsigned __int16 *)(v13 + 32);
          if (*(void *)(v13 + 40)) {
            v12 += *(unsigned __int16 *)(v13 + 48);
          }
          uint64_t v13 = *(void *)(v13 + 80);
        }
        while (v13 != v10);
      }
      uint64_t result = *(unsigned __int16 *)(v10 + 32) + v12;
      if (*(_WORD *)(v10 + 48) && (*(_DWORD *)(v10 + 4) & 0x80000000) == 0)
      {
        uint64_t result = result + *(unsigned __int16 *)(v10 + 48);
        goto LABEL_31;
      }
      if (v11 < 1) {
        goto LABEL_31;
      }
      uint64_t v17 = *(void *)(v9 + 72);
      if (!v17) {
        goto LABEL_31;
      }
      int v18 = *(unsigned __int16 *)(v17 + 48);
      if (!v18) {
        goto LABEL_31;
      }
      uint64_t result = (v18 + result);
      __int16 v8 = v11 - v18;
      break;
    case 1:
      uint64_t v7 = *(void *)(a3 + 24);
      if (!*(void *)(v7 + 40))
      {
        uint64_t v14 = *(void *)(v7 + 80);
        if (v14)
        {
          if ((*(_DWORD *)(a5 + 4 * **(unsigned __int8 **)(v14 + 16)) & 0x1000000) != 0)
          {
            uint64_t v15 = *(void *)(v6 + 72);
            if (v15)
            {
              if (*(void *)(v15 + 40))
              {
                int v16 = *(unsigned __int16 *)(v15 + 48);
                a2[4] = *a2 - v16;
                uint64_t result = (unsigned __int16)a2[1] + v16;
                goto LABEL_31;
              }
            }
          }
        }
      }
      uint64_t result = (unsigned __int16)a2[1];
      if ((*(_DWORD *)(v7 + 4) & 0x80000000) != 0) {
        uint64_t result = result - *(unsigned __int16 *)(v7 + 48);
      }
      __int16 v8 = *a2;
      break;
    default:
      return result;
  }
  a2[4] = v8;
LABEL_31:
  a2[5] = result;
  return result;
}

uint64_t CheckAltStr(const char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, unsigned __int8 a7, int a8, unsigned __int8 a9)
{
  uint64_t v14 = (char *)a1;
  uint64_t v104 = *(void *)(a3 + 16);
  uint64_t v15 = a4[3];
  uint64_t v115 = a4[2];
  signed int v16 = (strlen(a1) << 16) - 0x40000;
  uint64_t v113 = a3;
  unsigned __int8 v109 = a7;
  int v111 = a8;
  char v17 = 0;
  if (v16 >= 0)
  {
    __int16 v18 = 0;
    int v19 = v16 >> 16;
    do
    {
      if (SLstrncmp(&v14[v18], "POSTCLITIC", 10)) {
        char v20 = SLstrncmp(&v14[v18], "STEM", 4) == 0;
      }
      else {
        char v20 = 2;
      }
      v17 |= v20;
      ++v18;
    }
    while (v19 >= v18);
  }
  int v21 = a9;
  __int16 v22 = strlen(v14);
  uint64_t v23 = *a4;
  if (*a4)
  {
    uint64_t v24 = *(void *)(v23 + 152);
    if (!v24 || (*(unsigned char *)(v24 + 93) & 0x40) == 0)
    {
      if (*(_WORD *)(v23 + 136))
      {
        uint64_t v25 = *(void *)(v23 + 16);
        BOOL v26 = v25 != 0;
        if (v25) {
          uint64_t v24 = *(void *)(v23 + 176);
        }
        if (v24 && *(_WORD *)(v24 + 136))
        {
          char v105 = 0;
          __int16 v27 = *(_WORD *)(v24 + 136) - 1;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
LABEL_30:
      BOOL v26 = 0;
LABEL_31:
      __int16 v27 = 0;
      __int16 v41 = 0;
LABEL_36:
      char v105 = 0;
      goto LABEL_37;
    }
    uint64_t v29 = *(void *)(a2 + 72);
    if (v29)
    {
      __int16 v30 = *(void **)(v29 + 8);
      if (v30)
      {
        if (!SLstrncmp(v14, "REF", 3))
        {
          unint64_t v31 = v14[3];
          unint64_t v32 = v31 - 49;
          if (v31 >= 0x31)
          {
            if (*(__int16 *)(v24 + 32) < 1) {
              goto LABEL_30;
            }
            uint64_t v33 = *(unsigned __int16 *)(v24 + 32);
            uint64_t v34 = *(__int16 *)(v30[1] + 2 * v32);
            uint64_t v35 = *(unsigned __int8 **)(v24 + 16);
            uint64_t v36 = (unsigned __int8 *)(*v30 + v34);
            while (1)
            {
              unsigned int v38 = *v36++;
              unsigned __int8 v37 = v38;
              unsigned __int8 v39 = v38 + 32;
              if ((*(_DWORD *)(a5 + 4 * v38) & 0x40000000) != 0) {
                unsigned __int8 v37 = v39;
              }
              int v40 = *v35++;
              if (v40 != v37) {
                break;
              }
              if (!--v33) {
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
    BOOL v26 = 0;
    __int16 v27 = *(_WORD *)(v24 + 136);
    char v105 = 1;
    goto LABEL_33;
  }
  uint64_t v28 = a4[1];
  if (!v28)
  {
    BOOL v26 = 0;
    __int16 v27 = 0;
    __int16 v41 = 0;
    uint64_t v24 = 0;
    goto LABEL_36;
  }
  uint64_t v24 = *(void *)(v28 + 176);
  if (!v24 || !*(_WORD *)(v24 + 136))
  {
    __int16 v27 = 0;
    __int16 v41 = 0;
    char v105 = 0;
    BOOL v26 = 1;
    goto LABEL_37;
  }
  char v105 = 0;
  __int16 v27 = *(_WORD *)(v24 + 136) - 1;
  BOOL v26 = 1;
LABEL_33:
  __int16 v41 = strlen(*(const char **)(*(void *)(v24 + 144) + 8 * v27));
LABEL_37:
  __int16 v42 = v41;
  if (!v41 && !v17)
  {
    __int16 v43 = 0;
    unsigned __int8 v44 = 0;
    goto LABEL_99;
  }
  __int16 v112 = v41;
  __int16 v103 = v27;
  if (v17)
  {
    __int16 v101 = v22;
    BOOL v50 = v26;
    uint64_t v24 = v115;
    if (v115 == v15)
    {
LABEL_49:
      uint64_t v51 = *(void *)(v24 + 152);
      if (!*(void *)(v51 + 144)) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v24 = v115;
      while (1)
      {
        uint64_t v51 = *(void *)(v24 + 152);
        if (*(void *)(v51 + 144)) {
          break;
        }
        uint64_t v24 = *(void *)(v24 + 176);
        if (v24 == v15)
        {
          uint64_t v24 = v15;
          goto LABEL_49;
        }
      }
    }
    unsigned int v46 = **(char ***)(*(void *)(v51 + 176) + 144);
    if (v46)
    {
LABEL_52:
      __int16 v52 = strlen(v46);
      __int16 v45 = v52;
      if (*(unsigned char *)(v51 + 51) == 3 && ((*(_DWORD *)(v51 + 52) << (*(_WORD *)(v51 + 32) - v52)) & 0x80000000) != 0) {
        ReCapAltStr((unsigned __int8 *)v46, v104, v51, a5, a9);
      }
      BOOL v26 = v50;
      __int16 v22 = v101;
      if ((v17 & 2) != 0) {
        goto LABEL_42;
      }
LABEL_56:
      __int16 v49 = 0;
      __int16 v48 = 0;
      goto LABEL_58;
    }
LABEL_51:
    unsigned int v46 = *(char **)(*(void *)(v115 + 80) + 24);
    goto LABEL_52;
  }
  __int16 v45 = 0;
  unsigned int v46 = 0;
  if ((v17 & 2) == 0) {
    goto LABEL_56;
  }
LABEL_42:
  uint64_t v47 = *(void *)(v115 + 176);
  __int16 v48 = *(const char **)(v47 + 112);
  if (v48) {
    __int16 v49 = strlen(*(const char **)(v47 + 112));
  }
  else {
    __int16 v49 = 0;
  }
LABEL_58:
  int v53 = (char *)malloc_type_calloc((__int16)(v42 + v22 + v45 + v49 + 2) + 1, 1uLL, 0x100004077774924uLL);
  if (!v53)
  {
    uint64_t v56 = *(void *)(v113 + 32);
    *(void *)uint64_t v56 = 0xDC00000078;
    *(_WORD *)(v56 + _Block_object_dispose(&STACK[0x510], 8) = 661;
    return 220;
  }
  unsigned __int8 v44 = v53;
  BOOL v102 = v26;
  if (v112) {
    char v54 = v26;
  }
  else {
    char v54 = 1;
  }
  if (v54) {
    goto LABEL_63;
  }
  uint64_t v58 = *(void *)(a2 + 72);
  if (!v58
    || (uint64_t v59 = *(void **)(v58 + 8)) == 0
    || SLstrncmp(v14, "REF", 3)
    || (unint64_t v60 = v14[3], v61 = v60 - 49, v60 < 0x31))
  {
LABEL_76:
    strcpy(v44, *(const char **)(*(void *)(v24 + 144) + 8 * v103));
    if ((*(unsigned char *)(v24 + 93) & 0x40) != 0)
    {
      __int16 v55 = v112;
    }
    else
    {
      *(_WORD *)&v44[strlen(v44)] = 32;
      __int16 v55 = ++v112;
    }
    goto LABEL_79;
  }
  if (*(__int16 *)(v24 + 32) >= 1)
  {
    uint64_t v62 = *(unsigned __int16 *)(v24 + 32);
    uint64_t v63 = *(__int16 *)(v59[1] + 2 * v61);
    unsigned int v64 = *(unsigned __int8 **)(v24 + 16);
    __int16 v65 = (unsigned __int8 *)(*v59 + v63);
    do
    {
      unsigned int v67 = *v65++;
      unsigned __int8 v66 = v67;
      unsigned __int8 v68 = v67 + 32;
      if ((*(_DWORD *)(a5 + 4 * v67) & 0x40000000) != 0) {
        unsigned __int8 v66 = v68;
      }
      int v69 = *v64++;
      if (v69 != v66) {
        goto LABEL_76;
      }
    }
    while (--v62);
  }
LABEL_63:
  __int16 v55 = 0;
LABEL_79:
  if (!*v14) {
    goto LABEL_92;
  }
  while (1)
  {
    if (!SLstrncmp(v14, "STEM", 4))
    {
      strcat(v44, v46);
      v14 += 4;
      __int16 v73 = v45;
      goto LABEL_89;
    }
    int v70 = SLstrncmp(v14, "POSTCLITIC", 10);
    if (v48)
    {
      if (!v70) {
        break;
      }
    }
    int v71 = *v14;
    if (v71 == 45)
    {
      int v72 = SLstrncmp(v14 + 1, "POSTCLITIC", 10);
      if (!v48 && !v72) {
        goto LABEL_92;
      }
      LOBYTE(v71) = *v14;
    }
    ++v14;
    v44[v55] = v71;
    __int16 v73 = 1;
LABEL_89:
    v55 += v73;
    if (!*v14) {
      goto LABEL_92;
    }
  }
  strcat(v44, v48);
LABEL_92:
  char v74 = v105;
  if (!v24) {
    char v74 = 1;
  }
  if ((v74 & 1) != 0 || !v102)
  {
    uint64_t v14 = v44;
    __int16 v43 = v112;
    unsigned __int8 v76 = v109;
    int v75 = v111;
    int v21 = a9;
  }
  else
  {
    *(_WORD *)&v44[strlen(v44)] = 32;
    __int16 v43 = v112;
    int v21 = a9;
    if (*(_WORD *)(v24 + 136)) {
      strcat(v44, *(const char **)(*(void *)(v24 + 144) + 8 * (__int16)(*(_WORD *)(v24 + 136) - 1)));
    }
    uint64_t v14 = v44;
LABEL_99:
    unsigned __int8 v76 = v109;
    int v75 = v111;
  }
  int v77 = v76;
  if (v75 && (uint64_t v78 = *(void *)(a2 + 72)) != 0)
  {
    int v107 = a6;
    uint64_t v79 = *(void *)(v78 + 8);
    __int16 v80 = *(const char **)v79;
    int v81 = *(__int16 **)(v79 + 8);
    __int16 v82 = strlen(v14);
    int v116 = v82;
    uint64_t v106 = v44;
    int v110 = v77;
    if (((v82 - 4) & 0x8000) == 0)
    {
      int v83 = 0;
      int v84 = (__int16)(v82 - 4);
      int v85 = v82;
      while (SLstrncmp(&v14[(__int16)v83], "REF1", 4))
      {
        if (!SLstrncmp(&v14[(__int16)v83], "REF2", 4))
        {
          v83 += 4;
          uint64_t v86 = v81[1];
          goto LABEL_111;
        }
        if (!SLstrncmp(&v14[(__int16)v83], "REF3", 4))
        {
          v83 += 4;
          uint64_t v86 = v81[2];
          goto LABEL_111;
        }
        ++v83;
LABEL_112:
        if (v84 < (__int16)v83) {
          goto LABEL_121;
        }
      }
      v83 += 4;
      uint64_t v86 = *v81;
LABEL_111:
      int v85 = v85 + strlen(&v80[v86]) - 4;
      goto LABEL_112;
    }
    LOWORD(v85) = v82;
LABEL_121:
    int v87 = (char *)malloc_type_calloc((__int16)v85 + 1, 1uLL, 0x100004077774924uLL);
    if (v87)
    {
      unsigned int v88 = v87;
      *int v87 = 0;
      __s2[1] = 0;
      if (v116 >= 1)
      {
        int v89 = 0;
        while (1)
        {
          if (!SLstrncmp(&v14[(__int16)v89], "REF1", 4))
          {
            strcat(v88, v80);
            int v90 = v89 + 4;
            int v91 = v116;
            if (!*v80 && v14[(__int16)v90] == 32) {
              int v90 = v89 + 5;
            }
            goto LABEL_138;
          }
          if (!SLstrncmp(&v14[(__int16)v89], "REF2", 4)) {
            break;
          }
          if (!SLstrncmp(&v14[(__int16)v89], "REF3", 4))
          {
            strcat(v88, &v80[v81[2]]);
            int v92 = v89 + 4;
            uint64_t v93 = v81[2];
LABEL_134:
            int v94 = v80[v93];
            int v90 = v92;
            int v91 = v116;
            if (!v94)
            {
              if (v14[(__int16)v92] == 32) {
                int v90 = v89 + 5;
              }
              else {
                int v90 = v92;
              }
            }
            goto LABEL_138;
          }
          __s2[0] = v14[(__int16)v89];
          strcat(v88, __s2);
          int v90 = v89 + 1;
          int v91 = v116;
LABEL_138:
          int v89 = v90;
          if (v91 <= (__int16)v90) {
            goto LABEL_139;
          }
        }
        strcat(v88, &v80[v81[1]]);
        int v92 = v89 + 4;
        uint64_t v93 = v81[1];
        goto LABEL_134;
      }
LABEL_139:
      unsigned __int8 v44 = v106;
      if ((v110 - 1) <= 1)
      {
        long long v95 = v88;
        do
        {
          unsigned int v97 = *v95++;
          unsigned __int8 v96 = v97;
          int v98 = *(_DWORD *)(a5 + 4 * v97);
        }
        while ((v98 & 0x1000000) != 0);
        if ((v98 & 0x20000000) != 0) {
          v96 -= 32;
        }
        *(v95 - 1) = v96;
      }
      if (v88[(__int16)v85 - 1] == 32) {
        v88[(__int16)v85 - 1] = 0;
      }
      PRaddAlts(v113, a2, v88, 0, 1uLL, v107);
      free(v88);
    }
    else
    {
      uint64_t v99 = *(void *)(v113 + 32);
      *(void *)uint64_t v99 = 0xDC00000078;
      *(_WORD *)(v99 + _Block_object_dispose(&STACK[0x510], 8) = 662;
      unsigned __int8 v44 = v106;
    }
    uint64_t v57 = 0;
  }
  else
  {
    if (v76 == 1 || v76 == 3 && (*(_DWORD *)(v115 + 52) & 0x80000000) != 0) {
      ReCapAltStr((unsigned __int8 *)v14, v104, v115, a5, v21);
    }
    uint64_t v57 = PRaddAlts(v113, a2, v14, 0, 1uLL, a6);
  }
  if (v43 || v17) {
    free(v44);
  }
  return v57;
}

unsigned __int8 *ReCapAltStr(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  do
  {
    unsigned int v6 = *result++;
    unsigned __int8 v5 = v6;
    int v7 = *(_DWORD *)(a4 + 4 * v6);
  }
  while ((v7 & 0x1000000) != 0);
  if (a5 != 6) {
    goto LABEL_23;
  }
  if (*(void *)(a2 + 72) == a3 || *(void *)(a2 + 56) == a3)
  {
    BOOL v11 = (v7 & 0x20000000) == 0;
LABEL_24:
    if (!v11) {
      v5 -= 32;
    }
    *(result - 1) = v5;
    return result;
  }
  uint64_t v8 = *(void *)(a3 + 168);
  if (!v8 || !*(void *)(v8 + 16)) {
    return result;
  }
  int v9 = *(_DWORD *)(v8 + 4);
  if (v9 > -1073217537)
  {
    if (v9 > -536870911)
    {
      if (v9 != -536870848)
      {
        int v10 = -536870910;
LABEL_22:
        if (v9 != v10) {
          return result;
        }
      }
    }
    else if (v9 != -1073217536)
    {
      int v10 = -1072693248;
      goto LABEL_22;
    }
LABEL_23:
    BOOL v11 = (v7 & 0x20000000) == 0;
    goto LABEL_24;
  }
  if (v9 == -2147483584 || v9 == -1073725440 || v9 == -1073709056) {
    goto LABEL_23;
  }
  return result;
}

uint64_t PRmatchr(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v93[7] = *MEMORY[0x263EF8340];
  int v85 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 56);
  if (!v4)
  {
    uint64_t v64 = *(void *)(a1 + 32);
    *(void *)uint64_t v64 = 0xE6FFFFFF89;
    *(_WORD *)(v64 + _Block_object_dispose(&STACK[0x510], 8) = 640;
    return 230;
  }
  uint64_t v5 = a2;
  unsigned int v6 = *(unsigned __int16 *)(v3 + 14);
  int v7 = *(void **)(a2 + 48);
  uint64_t result = PRmkErr(a1, a2, &v85, 0, 0, 0, 0);
  if (result) {
    return result;
  }
  LOBYTE(v69) = 0;
  unsigned int v70 = v6;
  char v67 = 0;
  uint64_t v71 = v5;
  uint64_t v72 = v2;
  int v9 = v7;
  int v77 = v7;
  while (1)
  {
    uint64_t v10 = *(void *)(v2 + 32);
    int v11 = *(_DWORD *)(v10 + 4);
    if ((v11 | 4) != 4) {
      break;
    }
    if (!v4) {
      goto LABEL_98;
    }
LABEL_11:
    uint64_t v68 = v4;
    if (*((_DWORD *)v9 + 34))
    {
      unsigned __int16 v87 = 0;
      unsigned __int16 v86 = 0;
      uint64_t v13 = v9[16];
      PRDerive(v2, v5, v4, 10, (uint64_t)v93, (uint64_t)v92, (uint64_t)v91, (uint64_t)v90, (uint64_t)v89, (uint64_t)v88, &v86);
      if (!v86)
      {
        char v67 = 0;
        int v9 = v77;
        goto LABEL_64;
      }
      uint64_t v14 = 0;
      char v67 = 0;
      int v9 = v77;
      uint64_t v76 = v13;
      while (1)
      {
        unsigned __int16 v81 = 0;
        uint64_t v15 = 0;
        unsigned __int8 v75 = 0;
        char v16 = 1;
        uint64_t v74 = v14;
        while (2)
        {
          BOOL v17 = 0;
          int v18 = 0;
          int v73 = (unsigned __int16)v90[v14];
          unsigned int v19 = (unsigned __int16)v92[v14];
          int v20 = *((unsigned __int16 *)v93 + v14);
          unsigned int v21 = *((unsigned __int16 *)v9 + 70);
          unsigned int v22 = *((unsigned __int8 *)v9 + 24);
          int v23 = v19 % v21;
          if (v21 >> 2 >= 0x753) {
            unsigned int v24 = 63;
          }
          else {
            unsigned int v24 = 31;
          }
          if (v21 < 0x9C4) {
            unsigned int v24 = 15;
          }
          if (v21 < 0x3E8) {
            unsigned int v24 = 7;
          }
          int v25 = (v24 >> 1) - (v20 & v24);
          int v26 = 2 * (v20 & v24);
          unsigned int v79 = *((unsigned __int8 *)v9 + 24);
          int v80 = v20;
          int v78 = v26;
          while (1)
          {
            __int16 v27 = (unsigned __int8 *)(v13 - (unsigned __int16)v23 + 8 * (unsigned __int16)v23);
            unsigned int v28 = __rev16(*((unsigned __int16 *)v27 + 1));
            if (!v28)
            {
LABEL_58:
              uint64_t v2 = v72;
LABEL_59:
              uint64_t v14 = v74;
              goto LABEL_60;
            }
            if (v28 != v20) {
              goto LABEL_30;
            }
            if (!(v16 & 1 | v17))
            {
              BOOL v17 = v81 == (unsigned __int16)v23;
LABEL_30:
              v25 += v26;
              int v33 = v25 + v23;
              do
              {
                int v23 = v33;
                v33 -= v21;
              }
              while (v21 <= (unsigned __int16)v23);
              goto LABEL_36;
            }
            BOOL v83 = v17;
            uint64_t v29 = v15;
            int v30 = *v27;
            int v31 = v27[1];
            uint64_t v32 = v27[4];
            if (!BinarySearch(v9[4], *((unsigned __int8 *)v9 + 26), 1, v27[4], 1, &v87))
            {
              uint64_t v2 = v72;
              uint64_t v47 = *(void *)(v72 + 32);
              *(void *)uint64_t v47 = 0xE6FFFFFF8ELL;
              *(_WORD *)(v47 + _Block_object_dispose(&STACK[0x510], 8) = 644;
              uint64_t v13 = v76;
              int v9 = v77;
              goto LABEL_59;
            }
            uint64_t v15 = v29;
            if (v32 >= v29) {
              break;
            }
            int v9 = v77;
LABEL_35:
            uint64_t v13 = v76;
            BOOL v17 = v83;
            unsigned int v22 = v79;
            int v20 = v80;
            int v26 = v78;
LABEL_36:
            if (v22 < v18++) {
              goto LABEL_58;
            }
          }
          int v9 = v77;
          signed int v34 = bswap32(*(_DWORD *)(v77[22] + 4 * v87)) + (v31 | (v30 << 8));
          unsigned int v35 = *(unsigned __int8 *)(v77[23] + v34);
          if (v32 == v29 && v35 <= v75) {
            goto LABEL_35;
          }
          unsigned __int8 v37 = v27[5];
          if ((v73 - 1) >= 0x3F) {
            int v38 = 63;
          }
          else {
            int v38 = (unsigned __int16)(v73 - 1);
          }
          if ((v37 & 0x3F) == v38)
          {
            unsigned int v39 = v27[6];
            uint64_t v14 = v74;
            uint64_t v2 = v72;
            if (v88[v74] != 30)
            {
              int v66 = v34;
              goto LABEL_50;
            }
            if (*(void *)(v68 + 16))
            {
              uint64_t v40 = *(void *)(v68 + 80);
              int v66 = v34;
              if (v40)
              {
                uint64_t v41 = *(void *)(v40 + 168);
                if (v41)
                {
                  char v42 = 1;
                  uint64_t v43 = v68;
                  goto LABEL_51;
                }
              }
LABEL_50:
              char v42 = 0;
              uint64_t v43 = v68;
              uint64_t v41 = v68;
LABEL_51:
              unsigned int v44 = **(unsigned __int16 **)(v43 + 152);
              BOOL v45 = v44 < v70;
              char v67 = 0;
              if (PRliveRule(v72, v71, 0, v32, v35, v45, v44 >= v70))
              {
                uint64_t v15 = v32;
                unsigned __int8 v75 = v35;
                int v9 = v77;
                uint64_t v14 = v74;
                goto LABEL_53;
              }
              char v65 = v42;
              uint64_t v14 = v74;
              char v46 = PRmevrul(v41, (__int16)v89[v74], (uint64_t)v77, v87, v66, v39 >> 7, v45, v91[v74], v32, v39, &v85, v72, v71, v65);
              int v9 = v77;
              char v67 = v46;
              uint64_t v15 = v32;
              unsigned __int8 v75 = v35;
              if ((v37 & 0x40) == 0)
              {
LABEL_57:
                uint64_t v13 = v76;
                break;
              }
            }
            else
            {
LABEL_53:
              if ((v37 & 0x40) == 0) {
                goto LABEL_57;
              }
            }
          }
          else
          {
            uint64_t v2 = v72;
            uint64_t v14 = v74;
            if ((v27[5] & 0x40) == 0) {
              goto LABEL_57;
            }
          }
          char v16 = 0;
          unsigned __int16 v81 = v23;
          uint64_t v13 = v76;
          if (*(_DWORD *)(*(void *)(v2 + 32) + 4) != 220) {
            continue;
          }
          break;
        }
LABEL_60:
        if (++v14 >= (unint64_t)v86)
        {
LABEL_64:
          uint64_t v10 = *(void *)(v2 + 32);
          int v11 = *(_DWORD *)(v10 + 4);
          uint64_t v5 = v71;
          uint64_t v4 = v68;
          break;
        }
      }
    }
    if (v11)
    {
      if (v11 != 210 && v11 != 4) {
        goto LABEL_98;
      }
    }
    if (*((_WORD *)v9 + 84))
    {
      v93[0] = v4;
      uint64_t v84 = *((unsigned __int16 *)v9 + 77);
      if (!*((_WORD *)v9 + 77))
      {
        LOBYTE(v69) = 0;
        goto LABEL_92;
      }
      uint64_t v49 = 0;
      int v69 = 0;
      uint64_t v50 = v9[18];
      v92[0] = 0;
      unsigned int v51 = v70;
      uint64_t v82 = v50;
      do
      {
        if (PRevamac(v2, v5, v93, 1, _byteswap_ushort(*(_WORD *)(v50 + 4 * v49)), 0, 0) == 1)
        {
          unint64_t v52 = *(unsigned __int8 *)(v50 + ((4 * v49) | 3)) | ((unint64_t)*(unsigned __int8 *)(v50 + ((4 * v49) | 2)) << 8);
          int v9 = v77;
          uint64_t v53 = v77[20];
          while (1)
          {
            char v54 = (unsigned char *)(v53 + v52);
            char v55 = *(unsigned char *)(v53 + v52 + 5);
            unsigned int v56 = *(unsigned __int8 *)(v53 + v52 + 4);
            uint64_t v57 = (uint64_t)v9;
            if (!BinarySearch(v9[4], *((unsigned __int8 *)v9 + 26), 1, v56, 1, v92))
            {
              LOBYTE(v69) = 0;
              uint64_t v63 = *(void *)(v2 + 32);
              *(void *)uint64_t v63 = 0xE6FFFFFF8ELL;
              *(_WORD *)(v63 + _Block_object_dispose(&STACK[0x510], 8) = 642;
              uint64_t v5 = v71;
              int v9 = (void *)v57;
              goto LABEL_92;
            }
            int v58 = bswap32(*(_DWORD *)(*(void *)(v57 + 176) + 4 * v92[0]))
                + (bswap32(*(unsigned __int16 *)(v53 + v52)) >> 16);
            unsigned int v59 = **(unsigned __int16 **)(v93[0] + 152);
            BOOL v60 = v59 < v51;
            if (PRliveRule(v2, v71, 0, v56, *(unsigned __int8 *)(*(void *)(v57 + 184) + v58), v60, v59 >= v51))
            {
              unsigned int v51 = v70;
              int v9 = (void *)v57;
              if (*(_DWORD *)(*(void *)(v2 + 32) + 4) == 220) {
                goto LABEL_87;
              }
            }
            else
            {
              int v61 = PRmevrul(v93[0], 0xFFFFFFFF, v57, v92[0], v58, (char)(v55 & 0x80), v60, 0, v56, v54[5], &v85, v2, v71, 0);
              int v62 = v69;
              if (v61) {
                int v62 = 1;
              }
              int v69 = v62;
              if (*(_DWORD *)(*(void *)(v2 + 32) + 4) == 220)
              {
                LOBYTE(v69) = 0;
                uint64_t v5 = v71;
                int v9 = v77;
                goto LABEL_92;
              }
              unsigned int v51 = v70;
              int v9 = v77;
            }
            unint64_t v52 = v54[3] | ((unint64_t)(v54[2] & 0x7F) << 8);
            if (!v52) {
              goto LABEL_87;
            }
          }
        }
        int v9 = v77;
LABEL_87:
        ++v49;
        uint64_t v50 = v82;
        uint64_t v5 = v71;
      }
      while (v49 != v84);
LABEL_92:
      uint64_t v4 = v68;
    }
    if (v67 == 1 || v69 == 1) {
      **(_WORD **)(v2 + 16) = 210;
    }
    uint64_t v4 = *(void *)(v4 + 176);
  }
  if (v11 == 210 && v4 != 0) {
    goto LABEL_11;
  }
LABEL_98:
  if (v85)
  {
    PRfreeErr(v85);
    uint64_t v10 = *(void *)(v2 + 32);
  }
  return *(unsigned int *)(v10 + 4);
}

uint64_t PRmevrul(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, char a8, unsigned __int8 a9, unsigned __int8 a10, __int16 **a11, uint64_t a12, uint64_t a13, char a14)
{
  v116[0] = a6;
  char v115 = a8;
  memset(v112, 0, sizeof(v112));
  __int16 v104 = 0;
  int v103 = 0;
  uint64_t v20 = *(void *)(a13 + 8);
  char v108 = 0;
  v107[0] = 1;
  uint64_t v109 = a1;
  __int16 v106 = 0;
  unsigned __int8 v113 = a10 & 3;
  LOBYTE(v97) = a10 & 3;
  if (a1 && (a10 & 3) != 0) {
    SetRef((uint64_t)v112, a1, 1, a10 & 3);
  }
  unsigned int v21 = (unsigned __int8 *)(*(void *)(a3 + 184) + a5);
  int v22 = *v21;
  uint64_t v114 = v21 + 1;
  int v23 = *a11;
  if (*a11)
  {
    *((unsigned char *)v23 + 12) = a9;
    *((unsigned char *)v23 + 13) = v22;
    int v24 = PRgetSeverity(a12, a13, &v103, 0, a9, v22);
    uint64_t result = 0;
    if (v24) {
      return result;
    }
    *((unsigned char *)*a11 + 14) = v103;
  }
  else
  {
    int v26 = PRmkErr(a12, a13, a11, 0, 0, a9, v22);
    uint64_t result = 0;
    if (v26) {
      return result;
    }
  }
  uint64_t v88 = v20;
  unsigned int v91 = a4;
  long long v110 = 0u;
  long long v111 = 0u;
  if (!a6) {
    goto LABEL_14;
  }
  if (!a14)
  {
    if ((a2 & 0x80000000) != 0 && *(void *)(a1 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if ((a2 & 0x80000000) == 0)
  {
LABEL_11:
    *(void *)&long long v110 = a1;
    *((void *)&v110 + 1) = a1;
  }
LABEL_14:
  uint64_t v87 = a1;
  int v92 = v22;
  uint64_t v90 = a3;
  int v27 = 0;
  LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = 0;
  char v29 = 0;
  BOOL v105 = 0;
  int v30 = 1;
  int v31 = 1;
  unsigned int v89 = a2;
  __int16 v95 = a2;
  uint64_t v32 = 0;
  do
  {
LABEL_15:
    while (1)
    {
      int v93 = v27;
      LOBYTE(v33) = v108;
      while (1)
      {
        uint64_t v34 = *(void *)(a12 + 32);
        if ((*(_DWORD *)(v34 + 4) | 4) != 4 || (v32 & 0x40) != 0)
        {
          char v108 = v33;
          goto LABEL_187;
        }
        if (v30 != 17) {
          int v31 = v30;
        }
        unsigned int v35 = v114;
        char v36 = *v114;
        unsigned int v37 = (char)*v114;
        if ((*v114 & 0x20) != 0) {
          break;
        }
        if ((*v114 & 0x40) != 0)
        {
          unsigned __int8 v98 = *v114;
          unsigned int v37 = v31;
          uint64_t v38 = v32;
          int v39 = 0;
          uint64_t v40 = 0;
          if (v113 && v109)
          {
            int v41 = v114[1];
            if ((v41 - 139) < 2)
            {
              int v39 = 0;
              LOBYTE(v97) = v113;
              uint64_t v40 = v109;
            }
            else
            {
              if (v41 == 3 || v41 == 138)
              {
                uint64_t v40 = 0;
                int v39 = 1;
              }
              else
              {
                uint64_t v40 = 0;
                int v39 = 0;
              }
              LOBYTE(v97) = v113;
            }
          }
          int v28 = EvaMacRulePiece(&v114, &v109, v30, &v115, &v105, a7, v116, &v113, &v104, (uint64_t)v112, a12, a13);
          if (!v28)
          {
            uint64_t v32 = v38;
            int v31 = v37;
            LOBYTE(v37) = v98;
            goto LABEL_60;
          }
          uint64_t v42 = v109;
          if (!v40)
          {
            if (v109) {
              int v46 = v39;
            }
            else {
              int v46 = 0;
            }
            uint64_t v32 = v38;
            int v31 = v37;
            LOBYTE(v37) = v98;
            if (v46 != 1) {
              goto LABEL_50;
            }
            int v45 = v30;
            char v44 = v97;
            uint64_t v43 = v109;
            goto LABEL_49;
          }
          if (v40 == v109)
          {
            v112[v97 - 1] = 1;
            uint64_t v32 = v38;
            int v31 = v37;
            LOBYTE(v37) = v98;
          }
          else
          {
            SetRef((uint64_t)v112, v40, v30, v97);
            uint64_t v32 = v38;
            int v31 = v37;
            LOBYTE(v37) = v98;
            if (!v42 || v113 == v97) {
              goto LABEL_50;
            }
            if (v30 == 1)
            {
              uint64_t v43 = *(void *)(v42 + 168);
              if (v43)
              {
                char v44 = v97;
                int v45 = 1;
LABEL_49:
                SetRef((uint64_t)v112, v43, v45, v44);
              }
            }
            else
            {
              uint64_t v43 = *(void *)(v42 + 176);
              if (v43)
              {
                int v45 = v30;
                char v44 = v97;
                goto LABEL_49;
              }
            }
          }
LABEL_50:
          __int16 v95 = v104;
          goto LABEL_51;
        }
        int v28 = EvaWordRulePiece(&v114, &v109, v30, &v106, &v115, &v104, v116, a12, a13);
        BOOL v105 = 0;
LABEL_51:
        if (v28 == 1 && (v36 & 0x40) == 0 && v106 == 30)
        {
          if (v30 == 1)
          {
            uint64_t v47 = *(void *)(v109 + 80);
            if (!v47)
            {
LABEL_59:
              LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = 1;
              __int16 v95 = v104;
              goto LABEL_60;
            }
            uint64_t v48 = *(void *)(v47 + 168);
          }
          else
          {
            uint64_t v48 = *(void *)(v109 + 152);
          }
          uint64_t v109 = v48;
          goto LABEL_59;
        }
LABEL_60:
        char v29 = v37 & 0x80;
        int v33 = (char)(v33 + 1);
        if (v33 <= 5) {
          v107[v33] = v28;
        }
      }
      uint64_t v32 = v36;
      char v108 = v33;
      int v97 = v113;
      if ((v36 & 0x40) != 0)
      {
        if ((v108 & 0x80000000) == 0) {
          LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = v107[v108];
        }
        if ((_BYTE)v28)
        {
          uint64_t v78 = v109;
          if (v109)
          {
            if (v116[0])
            {
              SetHilite(v109, v95, v31, *a11, &v110);
              uint64_t v78 = v109;
            }
            if (v97 && v78) {
              SetRef((uint64_t)v112, v78, v31, v97);
            }
          }
        }
        if ((_BYTE)v93)
        {
LABEL_188:
          if ((void)v110) {
            BOOL v76 = *((void *)&v110 + 1) == 0;
          }
          else {
            BOOL v76 = 1;
          }
          BOOL v77 = v76 || (void)v110 == *((void *)&v110 + 1);
          if (!v77 && *((void *)&v110 + 1) == *(void *)(*(void *)(v110 + 80) + 168)) {
            long long v110 = 0uLL;
          }
          v101[0] = *(_OWORD *)v112;
          v101[1] = *(_OWORD *)&v112[16];
          v101[2] = *(_OWORD *)&v112[32];
          uint64_t v102 = *(void *)&v112[48];
          v100[0] = v110;
          v100[1] = v111;
          PRmapost(v89, v90, v91, a10, a11, v32, (uint64_t)v114, v92, v101, v100, v88, a12, a13);
          return 1;
        }
LABEL_187:
        if (v28 != 1) {
          goto LABEL_210;
        }
        goto LABEL_188;
      }
      int v49 = 0;
      unsigned __int8 v113 = 0;
      if ((v37 & 0x80000000) != 0)
      {
        int v49 = v114[1] & 3;
        unsigned __int8 v113 = v114[1] & 3;
      }
      int v50 = (v37 >> 1) & 1;
      int v51 = v37 & 1;
      if ((v37 >> 2))
      {
        int v54 = v36;
        __int16 v95 = -1;
        int v27 = v93;
        goto LABEL_77;
      }
      int v52 = (v37 >> 3) & 1;
      int v53 = v37;
      if (v50 | v51) {
        int v27 = v93;
      }
      else {
        int v27 = (v37 >> 4) & 1;
      }
      if (!(v50 | v51)) {
        int v30 = v52;
      }
      int v54 = v53;
      if ((v53 & 3) == 0) {
        break;
      }
LABEL_77:
      EvaLogInGlueByte((uint64_t)v107, &v108, (v54 >> 2) & 1, v50, v51);
      uint64_t v55 = 1;
      if (v54 < 0) {
        uint64_t v55 = 2;
      }
      uint64_t v114 = &v35[v55];
    }
    if ((v32 & 0x80000000) != 0 || (v114[1] & 0x40) == 0)
    {
      if ((v32 & 0x80000000) != 0 && (v114[2] & 0x40) != 0 && v114[3] == 3) {
LABEL_75:
      }
        int v30 = 17;
    }
    else if (v114[2] == 3)
    {
      goto LABEL_75;
    }
    if (*(v114 - 1) != v92 && (*(v114 - 3) & 0x40) != 0 && *(v114 - 2) == 3) {
      int v30 = 17;
    }
    if (v108)
    {
      *(void *)uint64_t v34 = 0xDC000000AALL;
      *(_WORD *)(v34 + _Block_object_dispose(&STACK[0x510], 8) = 650;
      goto LABEL_210;
    }
    char v108 = -1;
    if (!(v107[0] | v93)) {
      goto LABEL_210;
    }
    uint64_t v56 = v109;
    if (v31 == 1 && !(_BYTE)v30)
    {
      if (v107[0] && v109)
      {
        if (v116[0])
        {
          int v57 = v49;
          SetHilite(v109, v95, 1, *a11, &v110);
          int v49 = v57;
          uint64_t v56 = v109;
        }
        if (v97 && v56)
        {
          int v58 = v49;
          SetRef((uint64_t)v112, v56, 1, v97);
          int v49 = v58;
        }
      }
      int v30 = 0;
      if (a14) {
        uint64_t v59 = *(void *)(v87 + 152);
      }
      else {
        uint64_t v59 = v87;
      }
      uint64_t v56 = *(void *)(v59 + 168);
      uint64_t v109 = v56;
      goto LABEL_128;
    }
    if (!v109)
    {
      uint64_t v64 = v114 + 2;
      if (v53 >= 0) {
        uint64_t v64 = v114 + 1;
      }
      uint64_t v114 = v64;
      break;
    }
    if (v107[0])
    {
      int v99 = v49;
      if (v116[0])
      {
        BOOL v60 = *a11;
        int v61 = v95;
        int v62 = v31;
        uint64_t v63 = v109;
        goto LABEL_115;
      }
      if (v29)
      {
        int v62 = v31;
        uint64_t v65 = 176;
        if (v31 == 8) {
          uint64_t v65 = 168;
        }
        uint64_t v63 = *(void *)(v109 + v65);
        BOOL v60 = *a11;
        if (v63 == *(void *)(v63 + 152)) {
          int v61 = -1;
        }
        else {
          int v61 = 0;
        }
LABEL_115:
        SetHilite(v63, v61, v62, v60, &v110);
        int v49 = v99;
      }
      uint64_t v56 = v109;
      if (v97 && v109)
      {
        uint64_t v94 = v109;
        SetRef((uint64_t)v112, v109, v31, v97);
        uint64_t v56 = v94;
        int v49 = v99;
      }
      if (!(_BYTE)v30)
      {
        int v66 = (uint64_t *)(v56 + 168);
        goto LABEL_127;
      }
      if (v30 == 1)
      {
        int v66 = (uint64_t *)(v56 + 176);
LABEL_127:
        uint64_t v56 = *v66;
        uint64_t v109 = *v66;
        __int16 v106 = 0;
        goto LABEL_128;
      }
    }
    __int16 v106 = 0;
    if (v30 == 17)
    {
      if (*(v35 - 1) != v92 && (*(v35 - 3) & 0x40) != 0)
      {
        if (*(v35 - 2) == 3) {
          int v30 = v52;
        }
        else {
          int v30 = 17;
        }
      }
      else
      {
        int v30 = 17;
      }
    }
LABEL_128:
    uint64_t v64 = v35 + 2;
    if (v54 >= 0) {
      uint64_t v64 = v35 + 1;
    }
    uint64_t v114 = v64;
    LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = 1;
  }
  while (v56);
  if (v49) {
    goto LABEL_210;
  }
  if ((*v64 & 0x20) != 0)
  {
    if ((*v64 & 0x80) != 0) {
      goto LABEL_210;
    }
    if ((*v64 & 0x10) != 0) {
      int v27 = 1;
    }
    uint64_t v114 = ++v64;
  }
  char v67 = 0;
  int v68 = 1;
  while (1)
  {
    while (1)
    {
      unsigned int v69 = *v64;
      if ((v69 & 0x20) != 0) {
        break;
      }
      if (((v68 != 0) & (v69 >> 4)) != 0) {
        char v67 = 1;
      }
      if ((v69 & 0x40) == 0)
      {
        int v68 = 0;
        if ((v64[2] & 0x80u) == 0) {
          uint64_t v70 = 3;
        }
        else {
          uint64_t v70 = 4;
        }
        v64 += v70;
        continue;
      }
      int v72 = v64[1] | ((v69 & 0xF) << 8);
      if (v72 == 138 || v72 == 3)
      {
        if (!(_BYTE)v27) {
          goto LABEL_210;
        }
        v64 += 3;
LABEL_172:
        if ((v72 - 107) <= 0x34 && ((1 << (v72 - 107)) & 0x10000000000005) != 0
          || v72 == 15)
        {
          int v68 = 0;
          v64 += 3;
        }
        else
        {
          int v68 = 0;
          v64 += 2;
        }
        continue;
      }
      if ((v72 - 139) > 1) {
        goto LABEL_172;
      }
      unsigned __int8 v75 = v64 + 3;
      if (v72 == 139) {
        v64 += 2;
      }
      if (v72 == 140) {
        uint64_t v64 = v75;
      }
      if ((*v64 & 0x20) != 0)
      {
        if ((*v64 & 0x80) != 0) {
          goto LABEL_210;
        }
LABEL_163:
        ++v64;
        continue;
      }
    }
    if ((v69 & 2) != 0) {
      break;
    }
    if ((v69 & 1) == 0)
    {
      if (!(v27 | v67)) {
        goto LABEL_210;
      }
      goto LABEL_182;
    }
    char v71 = *++v64;
    if ((v71 & 0x20) != 0 && ((_BYTE)v27 || (v69 & 4) != 0)) {
      goto LABEL_182;
    }
  }
  if ((v69 & 0x80) != 0) {
    goto LABEL_210;
  }
  unsigned __int8 v74 = v64[1];
  if ((v74 & 0x20) == 0) {
    goto LABEL_163;
  }
  if ((v64[1] & 4) != 0)
  {
    v64 += 2;
LABEL_182:
    uint64_t v114 = v64;
    char v108 = 0;
    LOBYTE(v2_Block_object_dispose(&STACK[0x510], 8) = 1;
    v107[0] = 1;
    goto LABEL_15;
  }
  ++v64;
  if ((v74 & 3) != 0) {
    goto LABEL_163;
  }
  if ((_BYTE)v27 || (v69 & 4) != 0) {
    goto LABEL_182;
  }
LABEL_210:
  unsigned int v79 = *a11;
  *(void *)(v79 + 3) = 0;
  *(void *)unsigned int v79 = 0;
  uint64_t v80 = *((void *)v79 + 3);
  if (v80)
  {
    free(*(void **)v80);
    *(void *)uint64_t v80 = 0;
    uint64_t v81 = *(void *)(v80 + 8);
    *(_WORD *)(v81 + 4) = -1;
    *(_DWORD *)uint64_t v81 = -1;
    *(void *)(v80 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  }
  uint64_t v82 = (uint64_t *)*((void *)v79 + 9);
  if (!v82) {
    return 0;
  }
  uint64_t v83 = *v82;
  if (*v82)
  {
    free(*(void **)v83);
    *(void *)uint64_t v83 = 0;
    uint64_t v84 = *(void *)(v83 + 8);
    *(_DWORD *)(v84 + _Block_object_dispose(&STACK[0x510], 8) = -1;
    *(void *)uint64_t v84 = -1;
    *(void *)(v83 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
    uint64_t v82 = (uint64_t *)*((void *)v79 + 9);
    if (!v82) {
      return 0;
    }
  }
  uint64_t v85 = v82[1];
  if (!v85) {
    return 0;
  }
  free(*(void **)v85);
  uint64_t result = 0;
  *(void *)uint64_t v85 = 0;
  uint64_t v86 = *(void *)(v85 + 8);
  *(_WORD *)(v86 + 4) = -1;
  *(_DWORD *)uint64_t v86 = -1;
  *(void *)(v85 + 1_Block_object_dispose(&STACK[0x510], 8) = 0;
  return result;
}

uint64_t SetRef(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = (a4 - 1);
  *(unsigned char *)(result + v4) = 1;
  uint64_t v5 = result + 16 * v4;
  uint64_t v8 = *(void *)(v5 + 8);
  unsigned int v6 = (void *)(v5 + 8);
  uint64_t v7 = v8;
  if (v8)
  {
    if ((a3 & 0xFFFFFFEF) == 1)
    {
      int v9 = *(__int16 *)(v7 + 8);
      uint64_t v10 = *(void *)(a2 + 152);
      if (v9 <= *(__int16 *)(v10 + 8)) {
        *(void *)(result + 16 * v4 + 16) = v10;
      }
      else {
        *unsigned int v6 = v10;
      }
    }
    else if (!a3)
    {
      *unsigned int v6 = *(void *)(a2 + 152);
    }
  }
  else
  {
    *unsigned int v6 = *(void *)(a2 + 152);
    *(void *)(result + 16 * v4 + 16) = *(void *)(a2 + 152);
  }
  return result;
}

uint64_t SetHilite(uint64_t result, int a2, int a3, _WORD *a4, void *a5)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a2 < 0) {
        a5[1] = 0;
      }
      else {
        a5[1] = result;
      }
    }
  }
  else if (*(void *)(result + 16) && (a2 < 0 || a5[2]))
  {
    *a5 = 0;
  }
  else
  {
    *a5 = result;
  }
  uint64_t v5 = *(_WORD **)(result + 152);
  if (!*a4 && !a4[1])
  {
    *a4 = v5[4];
    a4[1] = v5[24] + v5[16];
    a5[2] = v5;
    a5[3] = v5;
    return result;
  }
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    uint64_t v9 = a5[2];
    if ((_WORD *)v9 == v5) {
      return result;
    }
    __int16 v8 = a4[1];
    do
    {
      uint64_t v9 = *(void *)(v9 + 72);
      v8 += *(_WORD *)(v9 + 48) + *(_WORD *)(v9 + 32);
    }
    while ((_WORD *)v9 != v5);
    __int16 v10 = v5[4];
    a5[2] = v5;
    *a4 = v10;
LABEL_29:
    a4[1] = v8;
    return result;
  }
  uint64_t v6 = a5[3];
  if (*(__int16 *)(v6 + 8) <= (__int16)v5[4])
  {
    if ((_WORD *)v6 == v5) {
      return result;
    }
    __int16 v8 = a4[1];
    do
    {
      uint64_t v6 = *(void *)(v6 + 80);
      v8 += *(_WORD *)(v6 + 48) + *(_WORD *)(v6 + 32);
    }
    while ((_WORD *)v6 != v5);
    a5[3] = v5;
    goto LABEL_29;
  }
  if ((_WORD *)v6 != v5)
  {
    __int16 v7 = a4[1];
    do
    {
      v7 -= *(_WORD *)(v6 + 48) + *(_WORD *)(v6 + 32);
      uint64_t v6 = *(void *)(v6 + 72);
    }
    while ((_WORD *)v6 != v5);
    a4[1] = v7;
    a5[3] = v5;
  }
  return result;
}

uint64_t EvaLogInGlueByte(uint64_t result, unsigned char *a2, int a3, int a4, int a5)
{
  if (a4)
  {
    int v5 = (char)*a2;
    if (v5 < 0)
    {
      char v6 = 0;
      int v7 = 0;
      goto LABEL_10;
    }
    char v6 = *(unsigned char *)(result + *a2);
    *a2 = v5 - 1;
    if (v5)
    {
      int v7 = *(unsigned __int8 *)(result + (v5 - 1));
      LOBYTE(v5) = v5 - 2;
LABEL_10:
      char v10 = v5 + 1;
      *a2 = v5 + 1;
      if ((char)v5 > 4) {
        goto LABEL_20;
      }
      v6 |= v7;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!a5)
  {
    int v7 = 0;
    goto LABEL_20;
  }
  int v8 = (char)*a2;
  if (v8 < 0)
  {
    char v9 = 0;
    int v7 = 0;
  }
  else
  {
    char v9 = *(unsigned char *)(result + *a2);
    *a2 = v8 - 1;
    if (!v8)
    {
      char v6 = 0;
LABEL_18:
      char v10 = 0;
      int v7 = 0;
      *a2 = 0;
      goto LABEL_19;
    }
    int v7 = *(unsigned __int8 *)(result + (v8 - 1));
    LOBYTE(v_Block_object_dispose(&STACK[0x510], 8) = v8 - 2;
  }
  char v10 = v8 + 1;
  *a2 = v8 + 1;
  if ((char)v8 > 4) {
    goto LABEL_20;
  }
  char v6 = v7 & v9;
LABEL_19:
  *(unsigned char *)(result + v10) = v6;
LABEL_20:
  if (a3)
  {
    int v11 = (char)*a2;
    if ((v11 & 0x80000000) == 0)
    {
      int v7 = *(unsigned __int8 *)(result + *a2);
      LOBYTE(v11) = v11 - 1;
    }
    int v12 = (char)v11;
    uint64_t v13 = (char)v11 + 1;
    *a2 = v13;
    if (v12 <= 4) {
      *(unsigned char *)(result + v13) = v7 == 0;
    }
  }
  return result;
}

uint64_t EvaMacRulePiece(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, unsigned char *a4, BOOL *a5, uint64_t a6, unsigned char *a7, unsigned __int8 *a8, _WORD *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a9 = -1;
  *a7 = **a1 & 0x80;
  char v16 = *a1;
  unsigned __int8 v17 = **a1;
  unsigned __int16 v18 = (*a1)[1] | ((v17 & 0xF) << 8);
  unsigned int v19 = *a1 + 2;
  *a1 = v19;
  if ((v18 & 0xFFE) == 0x8A) {
    goto LABEL_2;
  }
  int v21 = 0;
  if (v18 <= 0x6Cu)
  {
    if (v18 != 3)
    {
      if (v18 != 15 && v18 != 107) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_2:
    __int16 v44 = 0;
    if (v18 == 139)
    {
      unsigned int v20 = 0;
    }
    else
    {
      unsigned int v20 = v16[2];
      unsigned int v19 = v16 + 3;
      *a1 = v16 + 3;
    }
    if ((*v19 & 0x20) != 0)
    {
      LOBYTE(v25) = 0;
      int v24 = v19;
      goto LABEL_45;
    }
    int v22 = v19 + 3;
    if ((*v19 & 0x40) != 0)
    {
      if ((v19[3] & 0x20) != 0 || (v19[2] & 0x20) != 0)
      {
        uint64_t v40 = a8;
        LOBYTE(v25) = EvaMacRulePiece(a1, a2, a3, a4, (char *)&v44 + 1, a6, a7, &v44, a9, 0, a11, a12);
        a8 = v40;
        if ((**a1 & 0x80u) == 0) {
          int v24 = *a1 + 1;
        }
        else {
          int v24 = *a1 + 2;
        }
LABEL_44:
        *a1 = v24;
LABEL_45:
        int v45 = v24;
        if ((~*v24 & 0xA0) != 0) {
          unsigned __int8 v36 = 0;
        }
        else {
          unsigned __int8 v36 = v24[1];
        }
        *a8 = v36;
        if (v18 > 0x8Au)
        {
          if (v18 == 139)
          {
            int v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
            if (*a2 && !v25)
            {
              while (1)
              {
                int v25 = SkipPieces(v19, a3, a6, 1u, (unsigned __int16 **)a2, a11, a12);
                if (!v25) {
                  break;
                }
                if (!*a2)
                {
                  LOBYTE(v25) = 0;
                  goto LABEL_78;
                }
                int v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
                if (!*a2 || v25) {
                  goto LABEL_78;
                }
              }
            }
          }
          else if (v18 == 140)
          {
            int v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
            if (*a2)
            {
              if (v20)
              {
                do
                {
                  if (v25) {
                    break;
                  }
                  int v25 = SkipPieces(v19, a3, a6, 1u, (unsigned __int16 **)a2, a11, a12);
                  if (!v25) {
                    break;
                  }
                  if (!*a2) {
                    goto LABEL_77;
                  }
                  int v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
                  if (!*a2) {
                    break;
                  }
                  --v20;
                }
                while ((_BYTE)v20);
              }
            }
          }
          goto LABEL_78;
        }
        if (v18 == 3)
        {
          LOBYTE(v25) = SkipPieces(v19, a3, a6, v20, (unsigned __int16 **)a2, a11, a12);
LABEL_78:
          *a1 = v45;
          goto LABEL_79;
        }
        if (v18 != 138) {
          goto LABEL_78;
        }
        int v25 = SkipPieces(v19, a3, a6, v20, (unsigned __int16 **)a2, a11, a12);
        if (!v25) {
          goto LABEL_78;
        }
        uint64_t v37 = *a2;
        if (*a2)
        {
          if (!a3)
          {
            uint64_t v38 = *(void *)(v37 + 176);
            goto LABEL_76;
          }
          if (a3 == 1)
          {
            uint64_t v38 = *(void *)(v37 + 168);
LABEL_76:
            *a2 = v38;
          }
        }
LABEL_77:
        LOBYTE(v25) = 1;
        goto LABEL_78;
      }
    }
    else if ((v19[3] & 0x20) != 0 || (v19[4] & 0x20) != 0)
    {
      *a1 = v19 + 2;
      uint64_t v23 = 3;
      if ((v19[2] & 0x80u) != 0)
      {
        uint64_t v23 = 4;
        int v22 = v19 + 4;
      }
      *a1 = v22;
      if ((v19[v23] & 0x80u) == 0) {
        int v24 = v22 + 1;
      }
      else {
        int v24 = v22 + 2;
      }
      LOBYTE(v25) = 0;
      goto LABEL_44;
    }
    LOBYTE(v25) = 0;
LABEL_79:
    int v27 = a5;
    BOOL v29 = (unsigned __int16)(v18 - 139) < 2u;
    goto LABEL_80;
  }
  if (v18 != 109 && v18 != 159)
  {
    if (v18 != 140) {
      goto LABEL_26;
    }
    goto LABEL_2;
  }
LABEL_25:
  int v21 = v16[2];
  *a1 = v16 + 3;
LABEL_26:
  int v26 = a8;
  int v27 = a5;
  uint64_t v28 = *a2;
  LOBYTE(v25) = PRevamac(a11, a12, a2, a3, v18, v21, *a4);
  if ((v25 & 0xFE) != 0) {
    goto LABEL_27;
  }
  if ((v17 & 0x10) != 0) {
    LOBYTE(v25) = v25 == 0;
  }
  if (!a10
    || ((int v30 = *v26, (_BYTE)v25) ? (v31 = v30 == 0) : (v31 = 1),
        v31
     || v28 == *a2
     || (unsigned __int8 v32 = v30 - 1,
         uint64_t v33 = a10 + 16 * (v30 - 1),
         uint64_t v35 = *(void *)(v33 + 8),
         uint64_t v34 = (void *)(v33 + 8),
         BOOL v29 = v35,
         v35)))
  {
LABEL_27:
    BOOL v29 = 0;
  }
  else
  {
    *uint64_t v34 = *(void *)(v28 + 152);
    *(void *)(a10 + 16 * v32 + 16) = *(void *)(v28 + 152);
  }
LABEL_80:
  *int v27 = v29;
  return (char)v25;
}

uint64_t EvaWordRulePiece(unsigned __int8 **a1, uint64_t *a2, int a3, _WORD *a4, unsigned char *a5, _WORD *a6, unsigned char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unsigned __int16 v34 = 0;
  *a7 = **a1 >> 7;
  uint64_t v13 = *a1;
  unsigned int v14 = **a1;
  int v15 = (*a1)[1] | ((v14 & 0xF) << 8);
  *a1 += 2;
  char v16 = v13[2];
  int v17 = v16 & 0x7F;
  *a1 = v13 + 3;
  *a4 = 0;
  if (v16 < 0)
  {
    unsigned __int16 v35 = 0;
    v39[0] = 0;
    v40[0] = 0;
    v38[0] = 0;
    char v20 = v13[3];
    *a1 = v13 + 4;
    if ((v20 & 0x80) == 0)
    {
      if ((v20 & 0x50) != 0) {
        int v21 = 100;
      }
      else {
        int v21 = 120;
      }
      if ((v20 & 0x40) != 0) {
        int v22 = v21;
      }
      else {
        int v22 = 50;
      }
      PRDerive(a8, a9, *a2, v22, (uint64_t)v43, (uint64_t)v42, (uint64_t)v39, (uint64_t)v41, (uint64_t)v38, (uint64_t)v40, &v35);
      if (v35)
      {
        uint64_t v18 = 0;
        while ((v43[v18] & 0xFFF) != v15 || (v42[v18] & 0x7F) != v17)
        {
          if (v35 == ++v18) {
            goto LABEL_23;
          }
        }
        goto LABEL_42;
      }
      goto LABEL_23;
    }
    uint64_t v26 = v20 & 0x3F;
    uint64_t v27 = *a2;
    if (*(void *)(*a2 + 16))
    {
      __int16 v28 = *(_WORD *)(v27 + 32);
    }
    else
    {
      __int16 v28 = strlen(**(const char ***)(v27 + 144));
      uint64_t v26 = v20 & 0x3F;
    }
    if ((int)v26 > v28) {
      goto LABEL_23;
    }
    if ((v20 & 0x40) != 0)
    {
      uint64_t v29 = v26;
      __strncpy_chk();
      int v31 = v29;
      v44[v29] = 43;
    }
    else
    {
      v44[0] = 43;
      uint64_t v29 = v26;
      int v30 = v26;
      __strncpy_chk();
      int v31 = v30;
    }
    v44[v29 + 1] = 0;
    unsigned __int16 v37 = 0;
    __int16 v36 = 0;
    SLfun((uint64_t)v44, 0, v31, &v37, &v36);
    if ((v37 & 0xFFF) != v15 || (v36 & 0x7F) != v17) {
      goto LABEL_23;
    }
    if (a3 == 1)
    {
      uint64_t v32 = *(void *)(*(void *)(*a2 + 152) + 80);
      if (v32)
      {
        LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
        *a2 = *(void *)(v32 + 168);
LABEL_42:
        *a4 = v40[(unsigned __int16)v18];
        *a5 = v39[(unsigned __int16)v18];
        *a6 = v38[(unsigned __int16)v18];
        int v23 = 1;
        return v23 ^ (v14 >> 4) & 1;
      }
      uint64_t v33 = *(void *)(*a2 + 176);
      if (v33)
      {
        LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
        do
        {
          *a2 = v33;
          uint64_t v33 = *(void *)(v33 + 176);
        }
        while (v33);
        goto LABEL_42;
      }
    }
    LOWORD(v1_Block_object_dispose(&STACK[0x510], 8) = 0;
    goto LABEL_42;
  }
  PRDerive(a8, a9, *a2, 20, (uint64_t)v44, (uint64_t)v43, (uint64_t)v39, (uint64_t)v42, (uint64_t)v38, (uint64_t)v40, &v34);
  if (v34)
  {
    uint64_t v18 = 0;
    while ((*(_WORD *)&v44[2 * v18] & 0xFFF) != v15 || (v43[v18] & 0x7F) != v17)
    {
      if (v34 == ++v18)
      {
        uint64_t v19 = v34 - 1;
        goto LABEL_22;
      }
    }
    goto LABEL_42;
  }
  uint64_t v19 = -1;
LABEL_22:
  *a4 = v40[v19];
  *a6 = v38[v19];
LABEL_23:
  int v23 = 0;
  *a5 = 0;
  return v23 ^ (v14 >> 4) & 1;
}

BOOL SkipPieces(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 **a5, uint64_t a6, uint64_t a7)
{
  __int16 v28 = a1;
  char v26 = 0;
  char v23 = 0;
  if (!a4) {
    return 1;
  }
  uint64_t v27 = 0;
  uint64_t v13 = *a5;
  int v14 = 1;
  while (1)
  {
    if (!v13) {
      return 0;
    }
    unsigned int v15 = *v13;
    unsigned int v16 = *(unsigned __int16 *)(*(void *)(a6 + 16) + 14);
    if (a3)
    {
      if (v15 >= v16) {
        return 0;
      }
    }
    else if (v15 < v16)
    {
      return 0;
    }
    if ((*v28 & 0x20) == 0)
    {
      uint64_t v27 = v13;
      int v17 = (*v28 & 0x40) != 0
          ? EvaMacRulePiece(&v28, &v27, a2, &v23, &v24, a3, &v25, &v26, &v22, 0, a6, a7)
          : EvaWordRulePiece(&v28, (uint64_t *)&v27, a2, &v21, &v20, &v22, &v25, a6, a7);
      if (v17 != 1) {
        break;
      }
    }
    if (a2 == 1) {
      uint64_t v18 = 88;
    }
    else {
      uint64_t v18 = 84;
    }
    uint64_t v13 = *(unsigned __int16 **)&(*a5)[v18];
    *a5 = v13;
    if (a4 < ++v14) {
      return 1;
    }
  }
  return a4 != 1;
}

uint64_t EvaOneRulePiece(unsigned __int8 **a1, uint64_t *a2, unsigned char *a3, BOOL a4, uint64_t a5, unsigned char *a6, _WORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = 0;
  char v35 = -1;
  unsigned __int16 v37 = *a1;
  *a3 = 0;
  __int16 v34 = 0;
  char v32 = 0;
  int v14 = 1;
  int v15 = 1;
  while (1)
  {
    unsigned int v16 = v37;
    if (!*a2) {
      goto LABEL_43;
    }
    unsigned int v17 = *v37;
    if ((v17 & 0x20) == 0)
    {
      unsigned int v18 = *(unsigned __int16 *)*a2;
      unsigned int v19 = *(unsigned __int16 *)(*(void *)(a8 + 16) + 14);
      if (a5)
      {
        if (v18 >= v19) {
          goto LABEL_44;
        }
      }
      else if (v18 < v19)
      {
LABEL_44:
        LOBYTE(v15) = 0;
        return (char)v15;
      }
      if ((v17 & 0x40) != 0) {
        int v23 = EvaMacRulePiece(&v37, a2, a4, a6, &v33, a5, a3, &v32, a7, 0, a8, a9);
      }
      else {
        int v23 = EvaWordRulePiece(&v37, a2, a4, &v34, a6, a7, a3, a8, a9);
      }
      if (v23 != 1 || (v17 & 0x40) != 0 || v34 != 30) {
        goto LABEL_30;
      }
      if (a4)
      {
        if (!a4)
        {
LABEL_30:
          if (++v35 <= 5) {
            v36[v35] = v23;
          }
          uint64_t v22 = v13;
          goto LABEL_39;
        }
        char v24 = (uint64_t *)(*(void *)(*a2 + 80) + 168);
      }
      else
      {
        char v24 = (uint64_t *)(*a2 + 152);
      }
      *a2 = *v24;
      goto LABEL_30;
    }
    if ((v17 & 0x40) != 0) {
      break;
    }
    char v32 = 0;
    if ((v17 & 0x80) != 0) {
      char v32 = v37[1] & 3;
    }
    int v20 = (v17 >> 2) & 1;
    int v21 = (v17 >> 1) & 1;
    if (v21 | v17 & 1 | v20)
    {
      uint64_t v22 = v13;
    }
    else
    {
      a4 = (v17 & 8) != 0;
      uint64_t v22 = (v17 >> 4) & 1;
    }
    if (!v14)
    {
      if ((v17 & 7) != 0)
      {
        EvaLogInGlueByte((uint64_t)v36, &v35, v20, v21, v17 & 1);
      }
      else if (v35)
      {
        int v15 = 0;
        uint64_t v25 = *(void *)(a8 + 32);
        *(void *)uint64_t v25 = 0xDC000000AALL;
        *(_WORD *)(v25 + _Block_object_dispose(&STACK[0x510], 8) = 650;
      }
      else
      {
        char v35 = -1;
        if (v36[0] | v13)
        {
          LOBYTE(v15) = 1;
LABEL_43:
          *a1 = v37;
          return (char)v15;
        }
        int v15 = 0;
      }
    }
    int v14 = 0;
    if ((v17 & 0x80) != 0) {
      char v26 = v16 + 2;
    }
    else {
      char v26 = v16 + 1;
    }
    unsigned __int16 v37 = v26;
LABEL_39:
    uint64_t v13 = v22;
    if (!v15) {
      return (char)v15;
    }
  }
  if (v35 < 0) {
    goto LABEL_43;
  }
  LOBYTE(v15) = v36[v35];
  if ((_BYTE)v15) {
    goto LABEL_43;
  }
  return (char)v15;
}

uint64_t PRmisrul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 + 72);
  if (!v6) {
    goto LABEL_10;
  }
  LOWORD(v7) = 0;
  *(void *)__int16 v28 = 0;
  do
  {
    int v7 = (__int16)(v7 + (*(_DWORD *)(v6 + 4) >= 0));
    uint64_t v6 = *(void *)(v6 + 80);
  }
  while (v6);
  if (v7 > *(__int16 *)(*(void *)(a3 + 24) + 6))
  {
    int v8 = PRliveRule(a1, a2, 0, 0xAFu, 1, 1, *(_WORD *)(v5 + 14) == 0);
    uint64_t result = 0;
    if (!v8)
    {
      if (PRmkErr(a1, a2, v28, 0, 0, 0xAFu, 1))
      {
        uint64_t result = *(unsigned int *)(*(void *)(a1 + 32) + 4);
        if (result == 220 || result == 230) {
          return result;
        }
      }
      else
      {
        uint64_t v22 = *(void *)(v5 + 64);
        __int16 v23 = *(_WORD *)(v22 + 8);
        uint64_t v24 = *(void *)v28;
        **(_WORD **)__int16 v28 = v23;
        *(_WORD *)(v24 + 2) = *(_WORD *)(*(void *)(v5 + 80) + 8) - v23 + *(_WORD *)(*(void *)(v5 + 80) + 32);
        uint64_t v25 = *(void *)(v22 + 160);
        if (v25) {
          *(void *)(v24 + 40) = v25;
        }
        *(void *)(v22 + 160) = v24;
        uint64_t result = 210;
        **(_WORD **)(a1 + 16) = 210;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t result = 0;
  }
  if (*(unsigned char *)(a2 + 20) != 6)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(v10 + 72);
    if (!v11) {
      uint64_t v11 = *(void *)(v10 + 56);
    }
    *(void *)__int16 v28 = 0;
    uint64_t v12 = *(void *)(a2 + 8);
    if ((*(_DWORD *)(v12 + 4 * **(unsigned __int8 **)(v11 + 24)) & 0x20000000) != 0)
    {
      int v13 = PRliveRule(a1, a2, 0, 3u, 6, 1, *(unsigned __int16 *)(v10 + 14) == 0);
      uint64_t result = 0;
      if (!v13)
      {
        if (PRmkErr(a1, a2, v28, 0, 0, 3u, 6)) {
          return *(unsigned int *)(*(void *)(a1 + 32) + 4);
        }
        __int16 v14 = *(_WORD *)(v11 + 8);
        int v15 = *(_WORD **)v28;
        **(_WORD **)__int16 v28 = v14;
        __int16 v16 = *(_WORD *)(v11 + 32);
        v15[1] = v16;
        unsigned __int8 v15[2] = v14;
        v15[3] = v16;
        unsigned int v17 = *(unsigned char **)(v11 + 24);
        uint64_t v18 = *v17;
        if ((*(_DWORD *)(v12 + 4 * v18) & 0x20000000) != 0) {
          LOBYTE(v1_Block_object_dispose(&STACK[0x510], 8) = v18 - 32;
        }
        *unsigned int v17 = v18;
        int v19 = PRaddAlts(a1, *(uint64_t *)v28, *(char **)(v11 + 24), 0, 1uLL, 1);
        int v20 = *(unsigned char **)(v11 + 24);
        uint64_t v21 = *v20;
        if ((*(_DWORD *)(v12 + 4 * v21) & 0x40000000) != 0) {
          LOBYTE(v21) = v21 + 32;
        }
        *int v20 = v21;
        if (v19 || PRaddRefs(a1, *(uint64_t *)v28, *(char **)(v11 + 24), 1u, 1))
        {
          return *(unsigned int *)(*(void *)(a1 + 32) + 4);
        }
        else
        {
          uint64_t v26 = *(void *)(v11 + 160);
          uint64_t v27 = *(void *)v28;
          if (v26) {
            *(void *)(*(void *)v28 + 40) = v26;
          }
          *(void *)(v11 + 160) = v27;
          uint64_t result = 210;
          **(_WORD **)(a1 + 16) = 210;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t PRmkErr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, unsigned int a6, int a7)
{
  int v18 = 0;
  __int16 v14 = malloc_type_calloc(1uLL, 0x50uLL, 0x1020040107DC39EuLL);
  if (v14)
  {
    int v15 = v14;
    v14[15] = a5;
    v14[12] = a6;
    v14[13] = a7;
    if (a6)
    {
      uint64_t result = PRgetSeverity(a1, a2, &v18, a5, a6, a7);
      if (result) {
        return result;
      }
      v15[14] = v18;
      ++*(_WORD *)(a1 + 24);
    }
    if (a4)
    {
      *((void *)v15 + 5) = *(void *)(a4 + 160);
      *(void *)(a4 + 160) = v15;
    }
    uint64_t result = 0;
    *a3 = v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(void *)uint64_t v17 = 0xDC00000078;
    *(_WORD *)(v17 + _Block_object_dispose(&STACK[0x510], 8) = 160;
    return 220;
  }
  return result;
}

uint64_t PRfreeErr(void *a1)
{
  uint64_t v2 = (void **)a1[3];
  if (v2) {
    PRfreeList(v2);
  }
  uint64_t v3 = (void ***)a1[9];
  if (v3)
  {
    if (*v3)
    {
      PRfreeList(*v3);
      uint64_t v3 = (void ***)a1[9];
    }
    if (v3[1])
    {
      PRfreeList(v3[1]);
      uint64_t v3 = (void ***)a1[9];
    }
    free(v3);
  }
  free(a1);
  return 0;
}

void PRfreeList(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    free(v3);
  }
  free(a1);
}

uint64_t PRaddAlts(uint64_t a1, uint64_t a2, char *__s, void *__src, size_t __n, int a6)
{
  unsigned int v6 = __n;
  if (a6) {
    unsigned __int16 v11 = a6 - 1;
  }
  else {
    unsigned __int16 v11 = 0;
  }
  int v13 = (uint64_t *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12)
  {
    uint64_t result = PRmkList(a1, (uint64_t *)(a2 + 24), 3);
    if (result) {
      return result;
    }
    uint64_t v12 = *v13;
  }
  uint64_t v14 = *(unsigned __int16 *)(v12 + 16);
  if (v14 <= v11)
  {
    unsigned __int16 v15 = 0;
  }
  else
  {
    unsigned __int16 v15 = 0;
    uint64_t v16 = v14 - v11;
    uint64_t v17 = (__int16 *)(*(void *)(v12 + 8) + 2 * v11);
    do
    {
      int v18 = *v17++;
      if (v18 == -1) {
        ++v15;
      }
      --v16;
    }
    while (v16);
  }
  if (v6 > v15)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)uint64_t v20 = 0xDC00000082;
    __int16 v21 = 161;
LABEL_20:
    *(_WORD *)(v20 + _Block_object_dispose(&STACK[0x510], 8) = v21;
    return 220;
  }
  if (__src)
  {
    memcpy((void *)(a2 + *(unsigned __int16 *)(v12 + 18) + 32), __src, v6);
    uint64_t v12 = *(void *)(a2 + 24);
  }
  uint64_t result = PRaddList((char **)v12, __s, v6, v11);
  if (result)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)uint64_t v20 = 0xDC00000078;
    __int16 v21 = 162;
    goto LABEL_20;
  }
  return result;
}

uint64_t PRmkList(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040E1788B1AuLL);
  *a2 = (uint64_t)v6;
  if (v6 && (int v7 = malloc_type_calloc(a3, 2uLL, 0x1000040BDFB0063uLL), (*(void *)(*a2 + 8) = v7) != 0))
  {
    uint64_t v8 = *a2;
    if (a3 >= 1) {
      memset(*(void **)(v8 + 8), 255, 2 * (unsigned __int16)a3);
    }
    uint64_t result = 0;
    *(_WORD *)(v8 + 16) = a3;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)uint64_t v10 = 0xDC00000078;
    *(_WORD *)(v10 + _Block_object_dispose(&STACK[0x510], 8) = 560;
    return 220;
  }
  return result;
}

uint64_t PRaddList(char **a1, char *__s, int a3, unsigned int a4)
{
  __int16 v4 = a3;
  size_t v7 = *((unsigned __int16 *)a1 + 12);
  uint64_t v8 = a1[1];
  if (*(__int16 *)&v8[2 * a4] != -1)
  {
    while (1)
    {
      LOWORD(a4) = a4 + 1;
      if (*((unsigned __int16 *)a1 + 8) <= (unsigned __int16)a4) {
        break;
      }
      if (*(__int16 *)&v8[2 * (unsigned __int16)a4] == -1) {
        goto LABEL_6;
      }
    }
    LOWORD(a4) = -1;
  }
LABEL_6:
  int v9 = *((unsigned __int16 *)a1 + 12);
  if (a3)
  {
    LOWORD(v9) = *((_WORD *)a1 + 12);
    unsigned __int16 v10 = a4;
    unsigned __int16 v11 = __s;
    do
    {
      *(_WORD *)&v8[2 * v10] = v9;
      ++*((_WORD *)a1 + 9);
      int v12 = strlen(v11);
      int v13 = *((unsigned __int16 *)a1 + 12);
      int v9 = v13 + v12 + 1;
      *((_WORD *)a1 + 12) = v13 + v12 + 1;
      v11 += (unsigned __int16)(v12 + 1);
      --v4;
      while (*((unsigned __int16 *)a1 + 8) > ++v10)
      {
        if (*(__int16 *)&v8[2 * v10] == -1) {
          goto LABEL_13;
        }
      }
      unsigned __int16 v10 = -1;
LABEL_13:
      ;
    }
    while (v4);
  }
  uint64_t v14 = *a1;
  if (*((unsigned __int16 *)a1 + 11) >= (unsigned __int16)v9) {
    goto LABEL_19;
  }
  *((_WORD *)a1 + 11) = (v9 & 0xFFC0) + 64;
  size_t v15 = ((v9 & 0xFFFFFFC0) + 64) & 0xFFC0;
  if (v14)
  {
    uint64_t v16 = (char *)malloc_type_malloc(v15, 0x8D8342C2uLL);
    if (v16)
    {
      uint64_t v14 = v16;
      memcpy(v16, *a1, v7);
      free(*a1);
      *a1 = v14;
LABEL_19:
      memcpy(&v14[v7], __s, (unsigned __int16)(v9 - v7));
      return 0;
    }
  }
  else
  {
    uint64_t v14 = (char *)malloc_type_malloc(v15, 0xE9E45C59uLL);
    *a1 = v14;
    if (v14) {
      goto LABEL_19;
    }
  }
  return 220;
}

uint64_t PRaddFils(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  if (a5) {
    unsigned __int16 v9 = a5 - 1;
  }
  else {
    unsigned __int16 v9 = 0;
  }
  unsigned __int16 v10 = *(uint64_t **)(a2 + 72);
  if (!v10)
  {
    unsigned __int16 v10 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *(void *)(a2 + 72) = v10;
    if (!v10)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = 0xDC00000078;
      goto LABEL_21;
    }
  }
  uint64_t v11 = *v10;
  if (!*v10)
  {
    uint64_t result = PRmkList(a1, v10, 6);
    if (result) {
      return result;
    }
    uint64_t v11 = **(void **)(a2 + 72);
  }
  uint64_t v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 <= v9)
  {
    unsigned __int16 v13 = 0;
  }
  else
  {
    unsigned __int16 v13 = 0;
    uint64_t v14 = v12 - v9;
    size_t v15 = (__int16 *)(*(void *)(v11 + 8) + 2 * v9);
    do
    {
      int v16 = *v15++;
      if (v16 == -1) {
        ++v13;
      }
      --v14;
    }
    while (v14);
  }
  if (a4 > v13)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = 0xDC00000082;
LABEL_21:
    *(void *)uint64_t v18 = v19;
    __int16 v20 = 163;
    goto LABEL_22;
  }
  uint64_t result = PRaddList((char **)v11, __s, a4, v9);
  if (!result) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 32);
  *(void *)uint64_t v18 = 0xDC00000078;
  __int16 v20 = 164;
LABEL_22:
  *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x510], 8) = v20;
  return 220;
}

uint64_t PRaddRefs(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  if (a5) {
    unsigned __int16 v9 = a5 - 1;
  }
  else {
    unsigned __int16 v9 = 0;
  }
  unsigned __int16 v10 = *(void **)(a2 + 72);
  if (!v10)
  {
    unsigned __int16 v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *(void *)(a2 + 72) = v10;
    if (!v10)
    {
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = 0xDC00000078;
      goto LABEL_21;
    }
  }
  uint64_t v13 = v10[1];
  uint64_t v12 = v10 + 1;
  uint64_t v11 = v13;
  if (!v13)
  {
    uint64_t result = PRmkList(a1, v12, 3);
    if (result) {
      return result;
    }
    uint64_t v11 = *(void *)(*(void *)(a2 + 72) + 8);
  }
  uint64_t v14 = *(unsigned __int16 *)(v11 + 16);
  if (v14 <= v9)
  {
    unsigned __int16 v15 = 0;
  }
  else
  {
    unsigned __int16 v15 = 0;
    uint64_t v16 = v14 - v9;
    uint64_t v17 = (__int16 *)(*(void *)(v11 + 8) + 2 * v9);
    do
    {
      int v18 = *v17++;
      if (v18 == -1) {
        ++v15;
      }
      --v16;
    }
    while (v16);
  }
  if (a4 > v15)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = 0xDC00000082;
LABEL_21:
    *(void *)uint64_t v20 = v21;
    __int16 v22 = 165;
    goto LABEL_22;
  }
  uint64_t result = PRaddList((char **)v11, __s, a4, v9);
  if (!result) {
    return result;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  *(void *)uint64_t v20 = 0xDC00000078;
  __int16 v22 = 166;
LABEL_22:
  *(_WORD *)(v20 + _Block_object_dispose(&STACK[0x510], 8) = v22;
  return 220;
}

uint64_t PRpd(unsigned __int8 *a1, int a2, unsigned int a3)
{
  if (!a1) {
    return 230;
  }
  *((_DWORD *)a1 + 5) = 0;
  unsigned int v6 = a1 + 20;
  *((_DWORD *)a1 + 6) = 0;
  *((_WORD *)a1 + 14) = 0;
  uint64_t v7 = PRGetAppElem(*a1);
  uint64_t v21 = v7;
  if (!v7)
  {
    uint64_t v10 = 0xE6FFFFFF93;
    goto LABEL_15;
  }
  uint64_t v8 = v7;
  *(void *)(v7 + 32) = v6;
  if (a2 != 1)
  {
    uint64_t v11 = *(char **)(v7 + 8 * a1[1] + 56);
    if (v11)
    {
      if (a2 != 2)
      {
        LODWORD(result) = -107;
        goto LABEL_13;
      }
      LODWORD(result) = -108;
      if (a3 > 0x20 || ((1 << a3) & 0x100010001) == 0) {
        goto LABEL_13;
      }
      uint64_t v12 = *((void *)v11 + 97);
      *(_WORD *)(v12 + 4) = *(_WORD *)v11;
      *(_WORD *)(v12 + 2) = *(_WORD *)(v8 + 88);
      *(_WORD *)(v12 + 774) = *(_WORD *)(v11 + 769);
      if (a3 == 32 || a3 == 16)
      {
        __strcpy_chk();
        __strcpy_chk();
        if (a3 == 16) {
          char v13 = 11;
        }
        else {
          char v13 = 12;
        }
      }
      else
      {
        char v13 = 14;
      }
      *(unsigned char *)uint64_t v12 = v13;
      int v14 = ICpd(0, (unsigned __int8 *)v12);
      int v15 = v14;
      if (v14 == 8)
      {
        uint64_t v16 = *(void *)(v8 + 32);
        *(void *)uint64_t v16 = 0xE6000002C8;
        *(_WORD *)(v16 + _Block_object_dispose(&STACK[0x510], 8) = 700;
      }
      if (a3 == 32 || a3 == 16)
      {
        if (v14 != 8)
        {
          *(unsigned char *)uint64_t v12 = 13;
          int v17 = ICpd(0, (unsigned __int8 *)v12);
          if (v17 == 8)
          {
            uint64_t v18 = *(void *)(v8 + 32);
            uint64_t v19 = 0xE6000002C7;
            goto LABEL_36;
          }
LABEL_37:
          free((void *)v12);
          free(v11);
          *(void *)(v8 + 8 * a1[1] + 56) = 0;
          --*(unsigned char *)(v8 + 90);
          if (v17 == 8 || v15 == 8) {
            return 8;
          }
          else {
            return 0;
          }
        }
        *(unsigned char *)uint64_t v12 = 14;
        int v15 = ICpd(0, (unsigned __int8 *)v12);
        if (v15 == 8)
        {
          int v17 = 0;
          uint64_t v18 = *(void *)(v8 + 32);
          uint64_t v19 = 0xE6000002C8;
LABEL_36:
          *(void *)uint64_t v18 = v19;
          *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x510], 8) = 700;
          goto LABEL_37;
        }
      }
      int v17 = 0;
      goto LABEL_37;
    }
    uint64_t v10 = 0xE6000002C2;
LABEL_15:
    *(void *)(a1 + 20) = v10;
    *((_WORD *)a1 + 14) = 700;
    return 230;
  }
  uint64_t result = PRInitOrLoad((uint64_t)a1, 1, a3, &v21);
  if (result && result != 220 && result != 230)
  {
    unsigned int v6 = *(unsigned __int8 **)(v8 + 32);
LABEL_13:
    *(_DWORD *)unsigned int v6 = result;
    *((_DWORD *)v6 + 1) = 230;
    *((_WORD *)v6 + 4) = 700;
    return 230;
  }
  return result;
}

uint64_t PRInitOrLoad(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (!*(unsigned char *)(*a4 + 9))
  {
LABEL_41:
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = 0xE6000002C0;
    goto LABEL_42;
  }
  if (*(unsigned char *)(v4 + 90) == 4)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = 0xE6000002C3;
LABEL_42:
    *(void *)uint64_t v5 = v6;
    *(_WORD *)(v5 + _Block_object_dispose(&STACK[0x510], 8) = 700;
    return 230;
  }
  uint64_t v10 = (char *)malloc_type_calloc(1uLL, 0x318uLL, 0x10200408531879CuLL);
  if (!v10)
  {
LABEL_26:
    uint64_t v14 = *(void *)(v4 + 32);
    uint64_t v15 = 0xDC00000078;
LABEL_27:
    *(void *)uint64_t v14 = v15;
    *(_WORD *)(v14 + _Block_object_dispose(&STACK[0x510], 8) = 700;
    return 220;
  }
  uint64_t v11 = v10;
  v10[771] = *(unsigned char *)(a1 + 18);
  *(_WORD *)(v10 + 769) = *(_WORD *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    if (**(unsigned char **)v12)
    {
      __strcpy_chk();
      uint64_t v12 = *(void *)(a1 + 8);
    }
    if (*(unsigned char *)(v12 + 8)) {
      __strcpy_chk();
    }
  }
  uint64_t v13 = 0;
  while (*(void *)(v4 + 8 * v13 + 56))
  {
    if (++v13 == 4)
    {
      uint64_t v14 = *(void *)(v4 + 32);
      uint64_t v15 = 0xDC0000007BLL;
      goto LABEL_27;
    }
  }
  uint64_t result = 4294967188;
  if (a2 == 1 && a3 <= 1)
  {
    int v17 = malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
    if (v17)
    {
      uint64_t v18 = v17;
      v17[387] = *(_WORD *)(v11 + 769);
      *((unsigned char *)v17 + 205_Block_object_dispose(&STACK[0x510], 8) = v11[771];
      v17[1] = *(_WORD *)(v4 + 88);
      int v19 = v11[2];
      *((void *)v11 + 97) = v17;
      if (v19) {
        __strcpy_chk();
      }
      if (v11[258]) {
        __strcpy_chk();
      }
      uint64_t v20 = *(unsigned __int8 *)(v4 + 8);
      if (*(unsigned char *)(v4 + 8))
      {
        uint64_t v21 = *(uint64_t **)v4;
        uint64_t v22 = *(unsigned __int8 *)(v4 + 8);
        while (!*v21)
        {
          ++v21;
          if (!--v22)
          {
            uint64_t v23 = 0;
            goto LABEL_31;
          }
        }
        uint64_t v23 = *(void *)(*v21 + 128);
        if (!v23) {
          goto LABEL_41;
        }
LABEL_31:
        int v24 = *(unsigned __int8 *)(a1 + 18);
        if (*(unsigned char *)(a1 + 18))
        {
          uint64_t v25 = *(uint64_t **)v4;
          do
          {
            uint64_t v26 = *v25;
            if (*v25)
            {
              if (*(unsigned __int8 *)(v26 + 20) == v24) {
                v18[2059] = *(unsigned char *)(v26 + 26);
              }
            }
            ++v25;
            --v20;
          }
          while (v20);
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v23 = 0;
        if (*(unsigned char *)(a1 + 18))
        {
LABEL_39:
          *uint64_t v18 = 10;
          if (ICpd(v23, v18) != 8)
          {
            uint64_t result = 0;
            *(_WORD *)uint64_t v11 = *((_WORD *)v18 + 2);
            *(_WORD *)(v11 + 769) = *((_WORD *)v18 + 387);
            v11[771] = v18[2058];
            *(void *)(v4 + 8 * v13 + 56) = v11;
            ++*(unsigned char *)(v4 + 90);
            *(unsigned char *)(a1 + 1) = v13;
            return result;
          }
          free(v18);
          free(v11);
          goto LABEL_41;
        }
      }
      v18[2059] = -83;
      goto LABEL_39;
    }
    goto LABEL_26;
  }
  return result;
}

double PRPostAgree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t v45 = 0;
  uint64_t v3 = *(unsigned __int16 **)(a3 + 112);
  unsigned int v4 = *v3;
  unsigned int v44 = v3[1];
  unsigned int v5 = v3[2];
  uint64_t v6 = *((void *)v3 + 1);
  unsigned __int16 __dst = (char *)*((void *)v3 + 2);
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7 || (uint64_t v7 = *(void *)(a1 + 56)) != 0)
  {
    uint64_t v42 = v6 + v3[3];
    unsigned int v38 = v5 >> 1;
    unsigned int v39 = v3[2];
    do
    {
      if ((~*(_DWORD *)(v7 + 4) & 0x10000004) == 0 || (*(_DWORD *)(v7 + 92) & 0x82000) != 0)
      {
        int v8 = *(__int16 *)(v7 + 32);
        LOWORD(v9) = v8 - 1;
        if (v8 >= 1 && (_WORD)v8 != 1)
        {
          uint64_t v10 = 0;
          int v11 = 0;
          unsigned __int16 v12 = 0;
          uint64_t v37 = v7;
          uint64_t v43 = *(void *)(v7 + 16);
          do
          {
            int v13 = 0;
            int v14 = ((v12 & 0x7F) << 8) + 19 * (v12 >> 7) + *(unsigned __int8 *)(v43 + (unsigned __int16)v9);
            int v15 = v14 - 32749;
            if ((unsigned __int16)v14 <= 0x7FECu) {
              int v15 = ((v12 & 0x7F) << 8) + 19 * (v12 >> 7) + *(unsigned __int8 *)(v43 + (unsigned __int16)v9);
            }
            int v16 = (unsigned __int16)v15;
            unsigned __int16 v40 = v15;
            int v41 = v15 & 0x7FFF ^ v11;
            int v17 = v15 & v5;
            unsigned int v18 = (unsigned __int16)v41 % v4;
            unsigned int v19 = v38 - v17;
            int v20 = 2 * v17;
            do
            {
              uint64_t v21 = (char *)(v6 + 4 * (v18 & 0x3FFF));
              int v22 = *v21;
              if ((v21[1] | ((v22 & 0x7F) << 8)) == v16)
              {
                uint64_t v23 = (unsigned __int8 *)(v42
                                        + (*(unsigned __int8 *)(v6 + ((4 * (v18 & 0x3FFF)) | 3)) | ((unint64_t)*(unsigned __int8 *)(v6 + ((4 * (v18 & 0x3FFF)) | 2)) << 8)));
                if (!SLstrcmp((unsigned char *)(v43 + (unsigned __int16)v9), v23 + 2)) {
                  uint64_t v10 = (char *)v23;
                }
                if (v10 && *v10 >= 0) {
                  LOWORD(v9) = -1;
                }
              }
              else
              {
                if ((v22 & 0x80000000) == 0) {
                  break;
                }
                v19 += v20;
                unsigned int v25 = v18 + v19;
                do
                {
                  unsigned int v18 = v25;
                  v25 -= v4;
                }
                while (v4 <= (unsigned __int16)v18);
              }
              ++v13;
            }
            while (v44 >= (unsigned __int16)v13 && (__int16)v9 > 0);
            int v9 = (__int16)(v9 - 1);
            unsigned int v5 = v39;
            unsigned __int16 v12 = v40;
            int v11 = v41;
          }
          while (v9 > 0);
          if (v10)
          {
            int v26 = *v10 & 0x7F;
            if (PRliveRule(a2, a3, 0, 0xAu, v26, 0, 0)) {
              return result;
            }
            uint64_t v7 = v37;
            if (PRmkErr(a2, a3, v45, v37, 0, 0xAu, v26))
            {
              uint64_t v33 = *(void *)(a2 + 32);
              *(void *)&double result = 0xDC00000078;
              *(void *)uint64_t v33 = 0xDC00000078;
              *(_WORD *)(v33 + _Block_object_dispose(&STACK[0x510], 8) = 0;
              return result;
            }
            uint64_t v27 = *(void *)v45;
            **(_WORD **)uint64_t v45 = *(_WORD *)(v37 + 8);
            *(_WORD *)(v27 + 2) = *(_WORD *)(v37 + 32);
            if (PRaddRefs(a2, v27, *(char **)(v37 + 24), 1u, 1)) {
              return result;
            }
            uint64_t v28 = v10[1];
            __int16 v29 = *(_WORD *)(v37 + 32) - v28 + 1;
            int v30 = &v10[v28 + 2];
            memcpy(__dst, *(const void **)(v37 + 24), v29);
            size_t v31 = strlen(v30);
            memcpy(&__dst[v29], v30, v31 + 1);
            int v32 = PRaddAlts(a2, *(uint64_t *)v45, __dst, 0, 1uLL, 1);
          }
          else
          {
            int v32 = 0;
            uint64_t v7 = v37;
          }
          if (v32) {
            return result;
          }
        }
      }
      uint64_t v7 = *(void *)(v7 + 80);
    }
    while (v7);
  }
  return result;
}

uint64_t PRinitProfile(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5)
{
  int v28 = 0;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)uint64_t v6 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v6 + _Block_object_dispose(&STACK[0x510], 8) = 720;
    return 230;
  }
  uint64_t v10 = *(void *)(a2 + 48);
  *(unsigned char *)(v10 + 324) = 0;
  int v11 = *(void **)(v10 + 304);
  if (!a5 || !*a5)
  {
    uint64_t v14 = 0;
    int v16 = 0;
    goto LABEL_12;
  }
  int v13 = malloc_type_calloc(1uLL, 0x210uLL, 0x1010040F03745F4uLL);
  *(void *)(v10 + 312) = v13;
  if (v13)
  {
    uint64_t v14 = (uint64_t)v13;
    int v15 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v10 + 122), 0xA21D8EE1uLL);
    *(void *)uint64_t v14 = v15;
    if (v15)
    {
      int v16 = v15;
      size_t v17 = (unsigned __int16)strlen(a5) + 1;
      unsigned int v18 = malloc_type_malloc(v17, 0x58FF89E8uLL);
      *(void *)(v14 + _Block_object_dispose(&STACK[0x510], 8) = v18;
      if (!v18) {
        goto LABEL_19;
      }
      SLpthcpy((char *)(v14 + 16), a4);
      strncpy(*(char **)(v14 + 8), a5, v17);
      unsigned int v19 = &v28;
      if (!SLOpen((uint64_t)a4, (uint64_t)a5, &v28, 0)) {
        return loadProfile(a1, a2, v10, v14, v16, v11, v19, 2, 0);
      }
      *(void *)__int16 v29 = 0;
      if (SLOpen(v14 + 16, *(void *)(v14 + 8), v29, 0x602u))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC00000075;
LABEL_20:
        *(void *)uint64_t v20 = v21;
        __int16 v22 = 721;
        goto LABEL_21;
      }
      unsigned __int16 v23 = 3 * *(_WORD *)(v10 + 122) + 16;
      int v24 = malloc_type_malloc(v23, 0x2FA63502uLL);
      if (!v24)
      {
LABEL_19:
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC00000078;
        goto LABEL_20;
      }
      unsigned int v25 = v24;
      qmemcpy(v24, "PRMDBPRF0000001", 15);
      v24[15] = *(unsigned char *)(a2 + 20);
      if (SLSeek(*(_DWORD *)v10, *(_DWORD *)(v10 + 4) + *(_DWORD *)(v10 + 320), 0))
      {
        free(v25);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC0000006FLL;
        goto LABEL_20;
      }
      if (SLFRead(*(_DWORD *)v10, v23 - 16, v25 + 16, (unsigned int *)&v29[1])
        || v23 - 16 != v29[1])
      {
        free(v25);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC00000070;
        goto LABEL_20;
      }
      int v26 = SLFWrite(v29[0], v23, v25, (unsigned int *)&v29[1]);
      int v27 = v29[1];
      free(v25);
      if (v26 || v27 != v23)
      {
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC00000071;
        goto LABEL_20;
      }
      if (SLClose(v29[0]))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = 0xDC00000072;
        goto LABEL_20;
      }
LABEL_12:
      unsigned int v19 = 0;
      return loadProfile(a1, a2, v10, v14, v16, v11, v19, 2, 0);
    }
    free(*(void **)(v10 + 312));
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)uint64_t v20 = 0xDC00000078;
    __int16 v22 = 724;
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)uint64_t v20 = 0xDC00000078;
    __int16 v22 = 723;
  }
LABEL_21:
  *(_WORD *)(v20 + _Block_object_dispose(&STACK[0x510], 8) = v22;
  return 220;
}

uint64_t loadProfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int *a7, int a8, char a9)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v30 = 0;
  int v31 = 0;
  if ((*(unsigned char *)(a3 + 324) & 0x40) != 0)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)uint64_t v20 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v20 + _Block_object_dispose(&STACK[0x510], 8) = 722;
    return 230;
  }
  if (a5) {
    int v14 = a9;
  }
  else {
    int v14 = 1;
  }
  if (v14)
  {
    int v15 = *(_DWORD *)(a3 + 4);
    int v31 = *(_DWORD *)a3;
    int v16 = v15 + *(_DWORD *)(a3 + 320);
    goto LABEL_7;
  }
  if (a7)
  {
    unsigned int v23 = *a7;
    int v31 = *a7;
  }
  else
  {
    if (SLOpen(a4 + 16, *(void *)(a4 + 8), &v31, 0))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = 0xDC0000006ELL;
      goto LABEL_36;
    }
    unsigned int v23 = v31;
  }
  unsigned int v32 = 0;
  if (SLSeek(v23, 0, 0))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v24 = 0xDC0000006FLL;
LABEL_51:
    *(void *)uint64_t v18 = v24;
    __int16 v28 = 724;
    goto LABEL_52;
  }
  if (SLFRead(v23, 16, __dst, &v32) || v32 != 16)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v24 = 0xDC00000070;
    goto LABEL_51;
  }
  BOOL v29 = *(void *)__dst == 0x46525042444D5250 && *(void *)&__dst[7] == 0x3130303030303046;
  if (!v29 || v34 != *(unsigned char *)(a2 + 20))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v24 = 0xDC00000074;
    goto LABEL_51;
  }
  int v16 = 16;
LABEL_7:
  int v17 = *(unsigned __int16 *)(a3 + 122);
  if (a8 != 2)
  {
    if (a8 != 3) {
      goto LABEL_11;
    }
    v16 += v17;
  }
  v16 += v17;
LABEL_11:
  if (SLSeek(v31, v16, 0))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = 0xDC0000006FLL;
LABEL_36:
    *(void *)uint64_t v18 = v19;
    __int16 v28 = 722;
LABEL_52:
    *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x510], 8) = v28;
    return 220;
  }
  if (a5) {
    unsigned int v25 = a5;
  }
  else {
    unsigned int v25 = a6;
  }
  if (SLFRead(v31, v17, v25, &v30) || v30 != v17)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = 0xDC00000070;
    goto LABEL_36;
  }
  if (a5 && a6) {
    memcpy(a6, a5, (__int16)v17);
  }
  if ((_BYTE)v14) {
    BOOL v26 = a5 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  char v27 = *(unsigned char *)(a3 + 324) | a8;
  if (!v26) {
    v27 |= 0x80u;
  }
  *(unsigned char *)(a3 + 324) = v27;
  if (v27 & 0x40 | v14) {
    return 0;
  }
  uint64_t result = SLClose(v31);
  if (result)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = 0xDC00000072;
    goto LABEL_36;
  }
  return result;
}

uint64_t PRloadProfile(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)uint64_t v6 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v6 + _Block_object_dispose(&STACK[0x510], 8) = 721;
    return 230;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(void **)(v9 + 304);
  if (!v10) {
    return 0;
  }
  int v13 = *(void ***)(v9 + 312);
  if (!v13)
  {
    int v14 = 0;
    goto LABEL_10;
  }
  int v14 = *v13;
  *(void *)uint64_t v20 = 0;
  if ((*(unsigned char *)(v9 + 324) & 0x40) != 0)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(void *)uint64_t v15 = 0xE6FFFFFF8FLL;
    uint64_t result = 230;
LABEL_28:
    *(_WORD *)(v15 + _Block_object_dispose(&STACK[0x510], 8) = 723;
    return result;
  }
  if ((*(unsigned char *)(v9 + 324) & 0x80) != 0)
  {
    int v16 = *(unsigned __int16 *)(v9 + 122);
    if (SLOpen((uint64_t)(v13 + 2), (uint64_t)v13[1], v20, 2u))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v17 = 0xDC0000006ELL;
LABEL_27:
      *(void *)uint64_t v15 = v17;
      uint64_t result = 220;
      goto LABEL_28;
    }
    int v18 = *(unsigned char *)(v9 + 324) & 3;
    int v19 = 16;
    if (v18 != 2)
    {
      if (v18 != 3) {
        goto LABEL_21;
      }
      int v19 = v16 + 16;
    }
    v19 += v16;
LABEL_21:
    if (SLSeek(v20[0], v19, 0))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v17 = 0xDC0000006FLL;
    }
    else if (SLFWrite(v20[0], v16, v14, (unsigned int *)&v20[1]))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v17 = 0xDC00000071;
    }
    else
    {
      *(unsigned char *)(v9 + 324) &= 0x7Cu;
      if (!SLClose(v20[0])) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v17 = 0xDC00000072;
    }
    goto LABEL_27;
  }
  *(unsigned char *)(v9 + 324) &= 0xFCu;
LABEL_10:
  if (!a4) {
    return 0;
  }
  uint64_t result = loadProfile(a1, a2, v9, (uint64_t)v13, v14, v10, 0, a4, a5);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t PRprune(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(PRGetDbElem(*(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9)) + 48);
  if (*(_WORD *)(v5 + 240)) {
    ProcessSupTab(*(void *)(v5 + 232), *(unsigned __int16 *)(v5 + 240), v4, 0);
  }
  uint64_t v6 = PRGetAppElem(*(unsigned __int8 *)(a1 + 8));
  if (!v6)
  {
    *(void *)(a1 + 64) = 0xE6FFFFFF93;
    *(_WORD *)(a1 + 72) = 480;
    return 230;
  }
  uint64_t v49 = a1;
  if (*(unsigned char *)(v6 + 48)) {
    ProcessSupTab(*(void *)(v6 + 40), 6 * *(unsigned __int8 *)(v6 + 48), v4, 1);
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 160);
      if (v7) {
        break;
      }
LABEL_36:
      uint64_t v4 = *(void *)(v4 + 176);
      if (!v4) {
        goto LABEL_37;
      }
    }
    uint64_t v8 = *(void *)(v4 + 160);
    while (1)
    {
      *(_WORD *)(v7 + 66) = *(_WORD *)v4;
      uint64_t v9 = *(uint64_t **)(v7 + 24);
      if (!v9) {
        goto LABEL_24;
      }
      int v10 = *(__int16 *)(v7 + 2);
      if (v10 > 127) {
        goto LABEL_24;
      }
      __s[0] = 0;
      if (v10 >= 1)
      {
        uint64_t v11 = v4;
        do
        {
          strlen(__s);
          __strncat_chk();
          v10 -= *(unsigned __int16 *)(v11 + 32);
          if (!(_WORD)v10) {
            break;
          }
          if (*(_WORD *)(v11 + 48))
          {
            strlen(__s);
            __strncat_chk();
            v10 -= *(unsigned __int16 *)(v11 + 48);
          }
          uint64_t v11 = *(void *)(v11 + 80);
          if (!v11) {
            break;
          }
        }
        while ((__int16)v10 > 0);
      }
      if (*((_WORD *)v9 + 9)) {
        break;
      }
LABEL_22:
      uint64_t v15 = *(void *)(v7 + 40);
      if (v8 == v7)
      {
        PRfreeErr((void *)v7);
        *(void *)(v4 + 160) = v15;
        uint64_t v7 = v15;
      }
      else
      {
        *(void *)(v8 + 40) = v15;
        PRfreeErr((void *)v7);
        uint64_t v15 = *(void *)(v8 + 40);
        uint64_t v7 = v8;
      }
LABEL_33:
      uint64_t v8 = v7;
      uint64_t v7 = v15;
      if (!v15) {
        goto LABEL_36;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = *v9;
    uint64_t v14 = v9[1];
    while (!SLstrcmp((unsigned char *)(v13 + *(__int16 *)(v14 + 2 * v12)), (unsigned __int8 *)__s))
    {
      if (++v12 >= (unint64_t)*((unsigned __int16 *)v9 + 9)) {
        goto LABEL_22;
      }
    }
LABEL_24:
    uint64_t v16 = *(void *)(v7 + 40);
    if (v16)
    {
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = v16;
        while (*(unsigned __int8 *)(v7 + 12) == *(unsigned __int8 *)(v17 + 12)
             && *(unsigned __int8 *)(v7 + 13) == *(unsigned __int8 *)(v17 + 13))
        {
          *(void *)(v18 + 40) = *(void *)(v17 + 40);
          PRfreeErr((void *)v17);
          uint64_t v17 = *(void *)(v18 + 40);
          if (!v17) {
            goto LABEL_32;
          }
        }
        uint64_t v16 = *(void *)(v17 + 40);
      }
      while (v16);
    }
LABEL_32:
    uint64_t v15 = *(void *)(v7 + 40);
    goto LABEL_33;
  }
LABEL_37:
  uint64_t v19 = a1;
  unsigned int v20 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v21 = *(void *)(a2 + 56);
  if (*(_WORD *)(a2 + 14)) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    if ((*(unsigned char *)(a2 + 2) & 0xFE) != 2 || v21 == 0)
    {
      __int16 v28 = 0;
      goto LABEL_99;
    }
    int v50 = 0;
    int v51 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    __int16 v28 = 0;
    char v34 = 0;
    uint64_t v35 = 0;
    __int16 v36 = 0;
    int v52 = 0;
    uint64_t v37 = 0;
    while (1)
    {
      unsigned int v38 = *(unsigned __int16 **)(v21 + 160);
      if (!v38) {
        goto LABEL_88;
      }
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                unsigned int v39 = v38;
                ConvertAlts(*((void *)v38 + 3), 0, v20);
                unsigned int v38 = (unsigned __int16 *)*((void *)v39 + 5);
                *((void *)v39 + 5) = 0;
                int v40 = *((unsigned __int8 *)v39 + 12);
                if (v40 != 1) {
                  break;
                }
                if (*((unsigned char *)v39 + 13) != 1) {
                  goto LABEL_79;
                }
                int v41 = v51;
                int v51 = v39;
                if (v50) {
                  goto LABEL_84;
                }
                int v50 = v39;
                int v51 = v39;
                if (!v38) {
                  goto LABEL_87;
                }
              }
              if (v40 != 58) {
                break;
              }
              int v41 = v36;
              __int16 v36 = v39;
              if (v35) {
                goto LABEL_84;
              }
              uint64_t v35 = v39;
              __int16 v36 = v39;
              if (!v38) {
                goto LABEL_87;
              }
            }
            if (v40 != 3 || *((unsigned __int8 *)v39 + 13) - 2 > 2) {
              break;
            }
            int v41 = v52;
            int v52 = v39;
            if (v28)
            {
LABEL_84:
              *((void *)v41 + 5) = v39;
              if (!v38) {
                goto LABEL_87;
              }
            }
            else
            {
              __int16 v28 = v39;
              int v52 = v39;
              if (!v38) {
                goto LABEL_87;
              }
            }
          }
LABEL_79:
          if (*((unsigned char *)v39 + 14) != 1) {
            break;
          }
          int v41 = v37;
          uint64_t v37 = v39;
          if (v34) {
            goto LABEL_84;
          }
          char v34 = v39;
          uint64_t v37 = v39;
          if (!v38) {
            goto LABEL_87;
          }
        }
        int v41 = v33;
        uint64_t v33 = v39;
        if (v32) {
          goto LABEL_84;
        }
        unsigned int v32 = v39;
        uint64_t v33 = v39;
      }
      while (v38);
LABEL_87:
      *(void *)(v21 + 160) = 0;
LABEL_88:
      uint64_t v21 = *(void *)(v21 + 176);
      if (!v21)
      {
        if (!v35) {
          goto LABEL_92;
        }
        if (v33)
        {
          *((void *)v33 + 5) = v35;
LABEL_92:
          if (v32)
          {
            if (v37) {
              goto LABEL_94;
            }
LABEL_118:
            char v34 = v32;
            uint64_t v19 = v49;
LABEL_119:
            if (v51)
            {
              *((void *)v51 + 5) = v34;
              goto LABEL_121;
            }
            int v50 = v34;
LABEL_124:
            if (v52) {
              *((void *)v52 + 5) = v50;
            }
            else {
              __int16 v28 = v50;
            }
            goto LABEL_99;
          }
        }
        else
        {
          unsigned int v32 = v35;
          if (!v37) {
            goto LABEL_118;
          }
LABEL_94:
          *((void *)v37 + 5) = v32;
        }
        uint64_t v19 = v49;
        if (v34) {
          goto LABEL_119;
        }
LABEL_121:
        if (!v50) {
          goto LABEL_99;
        }
        goto LABEL_124;
      }
    }
  }
  unsigned int v25 = 0;
  BOOL v26 = 0;
  char v27 = 0;
  __int16 v28 = 0;
  do
  {
    BOOL v29 = *(unsigned __int16 **)(v21 + 160);
    if (!v29) {
      goto LABEL_60;
    }
    do
    {
      while (1)
      {
        unsigned int v30 = v29;
        ConvertAlts(*((void *)v29 + 3), 0, v20);
        BOOL v29 = (unsigned __int16 *)*((void *)v30 + 5);
        *((void *)v30 + 5) = 0;
        if (*((unsigned char *)v30 + 12) != 1 || *((unsigned char *)v30 + 13) != 1) {
          break;
        }
        int v31 = v26;
        BOOL v26 = v30;
        if (v28)
        {
LABEL_56:
          *((void *)v31 + 5) = v30;
          if (!v29) {
            goto LABEL_59;
          }
        }
        else
        {
          __int16 v28 = v30;
          BOOL v26 = v30;
          if (!v29) {
            goto LABEL_59;
          }
        }
      }
      int v31 = v25;
      unsigned int v25 = v30;
      if (v27) {
        goto LABEL_56;
      }
      char v27 = v30;
      unsigned int v25 = v30;
    }
    while (v29);
LABEL_59:
    *(void *)(v21 + 160) = 0;
LABEL_60:
    uint64_t v21 = *(void *)(v21 + 176);
  }
  while (v21);
  if (v27)
  {
    if (v26) {
      *((void *)v26 + 5) = v27;
    }
    else {
      __int16 v28 = v27;
    }
  }
  uint64_t v19 = v49;
LABEL_99:
  if ((*(_WORD *)(v19 + 10) & 0x40) != 0)
  {
    uint64_t v42 = v28;
  }
  else
  {
    uint64_t v42 = 0;
    if (v28)
    {
      do
      {
        if (v42)
        {
          uint64_t v43 = 0;
          unsigned int v44 = *v28;
          uint64_t v45 = v42;
          while (1)
          {
            int v46 = v43;
            uint64_t v43 = v45;
            uint64_t v45 = (unsigned __int16 *)*((void *)v45 + 5);
            unsigned int v47 = *v43;
            if (!v45) {
              break;
            }
            if (v44 < v47) {
              goto LABEL_108;
            }
          }
          if (v44 >= v47)
          {
            *((void *)v43 + 5) = v28;
            uint64_t v48 = (unsigned __int16 *)*((void *)v28 + 5);
            *((void *)v28 + 5) = 0;
            goto LABEL_112;
          }
LABEL_108:
          if (!v46)
          {
            uint64_t v48 = (unsigned __int16 *)*((void *)v28 + 5);
            *((void *)v28 + 5) = v42;
            goto LABEL_113;
          }
          *((void *)v46 + 5) = v28;
          uint64_t v48 = (unsigned __int16 *)*((void *)v28 + 5);
          *((void *)v28 + 5) = v43;
LABEL_112:
          __int16 v28 = v42;
        }
        else
        {
          uint64_t v48 = (unsigned __int16 *)*((void *)v28 + 5);
          *((void *)v28 + 5) = 0;
        }
LABEL_113:
        uint64_t v42 = v28;
        __int16 v28 = v48;
      }
      while (v48);
    }
  }
  uint64_t result = 0;
  *(void *)(v19 + 40) = v42;
  return result;
}