double ids_monotonic_time()
{
  if (qword_1E944F130 != -1) {
    dispatch_once(&qword_1E944F130, &unk_1EEFCD538);
  }
  return *(double *)&bst_mach_time_rate * (double)mach_continuous_time();
}

void sub_19D9BF750()
{
  IDSGetMainBundleIdentifier();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB2BB890 = objc_msgSend_isEqualToString_(v2, v0, @"com.apple.identityservicesd", v1);
}

void sub_19D9BF8B8(uint64_t a1, const void *a2)
{
  if (a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
    id v5 = *(id *)(a1 + 16);
    if (!v5)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      *(void *)(a1 + 16) = v5;
    }
    v6 = _Block_copy(a2);
    objc_msgSend_addObject_(v5, v7, (uint64_t)v6, v8);
    if (objc_msgSend_count(v5, v9, v10, v11) == 1) {
      sub_19D9E6780(a1, (void *)1);
    }
    os_unfair_lock_unlock(v4);
  }
}

void sub_19D9BFB90()
{
  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    double v1 = v0;
    byte_1EB2BB881 = CFEqual(v0, @"Vendor") != 0;
    byte_1EB2BB852 = CFEqual(v1, @"VendorNonUI") != 0;
    CFRelease(v1);
    if (byte_1EB2BB881 | byte_1EB2BB852) {
      byte_1E944F950 = 1;
    }
  }
  else
  {
    byte_1EB2BB881 = 0;
    byte_1EB2BB852 = 0;
  }
}

uint64_t sub_19D9BFF20(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  id v83 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 == 200) {
    int v3 = 31;
  }
  else {
    int v3 = 37;
  }
  if (v2 == 100) {
    int v4 = 20;
  }
  else {
    int v4 = v3;
  }
  sub_19DB4A04C(v4, 0);
  sub_19DB4A1E0();
  if (*(void *)(a1 + 72))
  {
    id v5 = [NSString alloc];
    uint64_t v8 = *(void *)(a1 + 72);
    v9 = @"Sync";
    if (v8 == 200) {
      v9 = @"Default";
    }
    if (v8 == 300) {
      uint64_t v10 = objc_msgSend_initWithFormat_(v5, v6, @"TransportThread %@", v7, @"URGENT");
    }
    else {
      uint64_t v10 = objc_msgSend_initWithFormat_(v5, v6, @"TransportThread %@", v7, v9);
    }
    v14 = v10;
    v15 = (const char *)objc_msgSend_UTF8String(v10, v11, v12, v13);
    pthread_setname_np(v15);
  }
  else
  {
    pthread_setname_np("TransportThread Primary");
  }
  uint64_t v93 = a1;
  v16 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.ident) = 0;
    _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "IDSTransportProc started...", (uint8_t *)&buf, 2u);
  }
  uint64_t v17 = os_log_shim_legacy_logging_enabled();
  if (v17)
  {
    uint64_t v17 = _IDSShouldLog();
    a1 = v93;
    if (v17)
    {
      uint64_t v17 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportProc started...");
      a1 = v93;
    }
  }
  int v92 = 0;
  uint64_t v87 = 0;
  os_unfair_lock_t v89 = (os_unfair_lock_t)(a1 + 28);
  p_fflags = &buf.fflags;
  double v19 = 0.0;
  *(void *)&long long v18 = 134217984;
  long long v88 = v18;
  *(void *)&long long v18 = 67109632;
  long long v84 = v18;
  while (1)
  {
    v86 = &v82;
    MEMORY[0x1F4188790](v17);
    v22 = &v82 - 4 * v20;
    unint64_t v23 = 0;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    do
    {
      v25 = &v22[v23 / 8];
      *(_OWORD *)v25 = v24;
      *((_OWORD *)v25 + 1) = v24;
      v23 += 32;
    }
    while (v21 != v23);
    uint64_t v26 = kevent(*(_DWORD *)(a1 + 32), 0, 0, (kevent *)&v82 - v20, v20, 0);
    if ((v26 & 0x80000000) != 0) {
      break;
    }
    ++v87;
    size_t v27 = v26;
    MEMORY[0x1F4188790](v26);
    if (v17)
    {
      int v28 = v17;
      uint64_t v17 = (uint64_t)memset((char *)&v82 - ((v27 + 15) & 0x1FFFFFFF0), 170, v27);
      int v90 = *(_DWORD *)(v93 + 24);
      v29 = (__int16 *)(v22 + 3);
      size_t v30 = v27;
      v91 = (char *)&v82 - ((v27 + 15) & 0x1FFFFFFF0);
      v31 = v91;
      int v32 = v28;
      do
      {
        if (*(v29 - 8) == -7)
        {
          v33 = *(void (***)(void, void))v29;
          unsigned char *v31 = 1;
          v33[2](v33, 0);
          _Block_release(v33);
        }
        ++v31;
        v29 += 16;
        --v30;
      }
      while (v30);
      char v34 = 0;
      do
      {
        v35 = &v22[4 * v30];
        if (*((__int16 *)v35 + 4) == -10)
        {
          uintptr_t v36 = v35[3];
          v91[v30] = 1;
          if (v36 == 3)
          {
            char v34 = 1;
          }
          else if (v36 == 1)
          {
            v37 = v89;
            os_unfair_lock_lock(v89);
            v38 = *(void **)(v93 + 16);
            *(void *)(v93 + 16) = 0;
            os_unfair_lock_unlock(v37);
            long long v96 = 0u;
            long long v97 = 0u;
            memset(v95, 0, sizeof(v95));
            uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)v95, 0.0, &buf, 16);
            if (v41)
            {
              uint64_t v43 = **(void **)&v95[16];
              do
              {
                for (uint64_t i = 0; i != v41; ++i)
                {
                  if (**(void **)&v95[16] != v43) {
                    objc_enumerationMutation(v38);
                  }
                  v45 = *(void (***)(void, void))(*(void *)&v95[8] + 8 * i);
                  if (v45)
                  {
                    v45[2](*(void *)(*(void *)&v95[8] + 8 * i), v34 & 1);
                    _Block_release(v45);
                  }
                }
                uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v40, (uint64_t)v95, v42, &buf, 16);
              }
              while (v41);
            }

            ++v92;
          }
          else
          {
            v46 = OSLogHandleForIDSCategory();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.ident) = v88;
              *(uintptr_t *)((char *)&buf.ident + 4) = v36;
              _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "Unknown control command %lu", (uint8_t *)&buf, 0xCu);
            }
            uint64_t v17 = os_log_shim_legacy_logging_enabled();
            if (v17)
            {
              uint64_t v17 = _IDSShouldLog();
              if (v17) {
                uint64_t v17 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Unknown control command %lu");
              }
            }
          }
        }
        ++v30;
      }
      while (v30 != v27);
      uint64_t v47 = 0;
      uint64_t v48 = v32;
      BOOL v49 = 1;
      v50 = v22;
      do
      {
        if (*((__int16 *)v50 + 4) == -2)
        {
          uint64_t v51 = v50[3];
          uint64_t v52 = *v50;
          v53 = _Block_copy(*(const void **)(*(void *)(v93 + 64) + 8 * v51));
          v54 = v53;
          if (v52 == *(_DWORD *)(*(void *)(v93 + 48) + 4 * v51) && v53 != 0)
          {
            v91[v47] = 1;
            (*((void (**)(void *))v53 + 2))(v53);
            ++v92;
          }
          _Block_release(v54);
          if (v90 != *(_DWORD *)(v93 + 24)) {
            break;
          }
        }
        BOOL v49 = ++v47 < v48;
        v50 += 4;
      }
      while (v27 != v47);
      if (!v49)
      {
        uint64_t v56 = 0;
        BOOL v57 = 1;
        v58 = v22;
        do
        {
          if (*((__int16 *)v58 + 4) == -1)
          {
            uint64_t v59 = v58[3];
            uint64_t v60 = *v58;
            v61 = _Block_copy(*(const void **)(*(void *)(v93 + 56) + 8 * v59));
            v62 = v61;
            if (v60 == *(_DWORD *)(*(void *)(v93 + 48) + 4 * v59) && v61 != 0)
            {
              v91[v56] = 1;
              (*((void (**)(void *))v61 + 2))(v61);
              ++v92;
            }
            _Block_release(v62);
            if (v90 != *(_DWORD *)(v93 + 24)) {
              break;
            }
          }
          BOOL v57 = ++v56 < v48;
          v58 += 4;
        }
        while (v27 != v56);
        if (!v57)
        {
          uint64_t v68 = 0;
          *(void *)&long long v69 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v69 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.data = v69;
          *(_OWORD *)&buf.ident = v69;
          v70 = (__int16 *)(v22 + 1);
          do
          {
            if (!v91[v68])
            {
              uintptr_t v71 = *((void *)v70 - 1);
              int v72 = *v70;
              v73 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v95 = v84;
                *(_DWORD *)&v95[4] = v68;
                *(_WORD *)&v95[8] = 2048;
                *(void *)&v95[10] = v71;
                *(_WORD *)&v95[18] = 1024;
                *(_DWORD *)&v95[20] = v72;
                _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%lu) failed to match event for filter:%hd", v95, 0x18u);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%lu) failed to match event for filter:%hd");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%lu) failed to match event for filter:%hd");
                  }
                }
              }
              buf.ident = v71;
              buf.filter = v72;
              buf.flags = 2;
              v74 = p_fflags;
              *(void *)p_fflags = 0;
              *((void *)v74 + 1) = 0;
              v74[4] = 0;
              uint64_t v17 = kevent(*(_DWORD *)(v93 + 32), &buf, 1, 0, 0, 0);
              if ((v17 & 0x80000000) != 0)
              {
                int v75 = *__error();
                v76 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v95 = v84;
                  *(_DWORD *)&v95[4] = v68;
                  *(_WORD *)&v95[8] = 2048;
                  *(void *)&v95[10] = v71;
                  *(_WORD *)&v95[18] = 1024;
                  *(_DWORD *)&v95[20] = v75;
                  _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)", v95, 0x18u);
                }
                uint64_t v17 = os_log_shim_legacy_logging_enabled();
                if (v17)
                {
                  uint64_t v17 = _IDSShouldLogTransport();
                  if (v17)
                  {
                    _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)");
                    uint64_t v17 = _IDSShouldLog();
                    if (v17) {
                      uint64_t v17 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%lu, READ, DELETE) failed with error(%d)");
                    }
                  }
                }
              }
            }
            v70 += 16;
            ++v68;
          }
          while (v27 != v68);
          goto LABEL_73;
        }
      }
      a1 = v93;
      if (v34) {
        goto LABEL_109;
      }
    }
    else
    {
      char v34 = 0;
      *(void *)&long long v64 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf.data = v64;
      *(_OWORD *)&buf.ident = v64;
LABEL_73:
      if (__ROR8__(0x1CAC083126E978D5 * v87, 3) <= 0x4189374BC6A7EFuLL)
      {
        double v65 = ids_monotonic_time();
        double v66 = v65 - v19;
        if (v66 < 1.0)
        {
          v67 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v95 = v88;
            *(double *)&v95[4] = v66;
            _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "Warning ! _IDSTransportProc processed 1000 iterations in %f seconds.", v95, 0xCu);
          }
          uint64_t v17 = os_log_shim_legacy_logging_enabled();
          if (v17)
          {
            uint64_t v17 = _IDSShouldLogTransport();
            if (v17)
            {
              _IDSLogTransport(@"TPThread", @"IDS", @"Warning ! _IDSTransportProc processed 1000 iterations in %f seconds.");
              uint64_t v17 = _IDSShouldLog();
              if (v17) {
                uint64_t v17 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Warning ! _IDSTransportProc processed 1000 iterations in %f seconds.");
              }
            }
          }
        }
        double v19 = v65;
      }
      if (v92 >= 31)
      {

        uint64_t v17 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28B28]);
        id v83 = (id)v17;
        int v92 = 0;
      }
      a1 = v93;
      if (v34) {
        goto LABEL_109;
      }
    }
  }
  int v77 = *__error();
  v78 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    int v79 = *(_DWORD *)(v93 + 36) + 1;
    LODWORD(buf.ident) = 67109376;
    HIDWORD(buf.ident) = v79;
    buf.filter = 1024;
    *(_DWORD *)&buf.flags = v77;
    _os_log_impl(&dword_19D9BE000, v78, OS_LOG_TYPE_DEFAULT, "kevent failed, (maxfd: %d, error: %d)", (uint8_t *)&buf, 0xEu);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TPThread", @"IDS", @"kevent failed, (maxfd: %d, error: %d)");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent failed, (maxfd: %d, error: %d)");
      }
    }
  }
LABEL_109:

  v80 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.ident) = 0;
    _os_log_impl(&dword_19D9BE000, v80, OS_LOG_TYPE_DEFAULT, "IDSTransportProc ended", (uint8_t *)&buf, 2u);
  }
  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
    _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportProc ended");
  }
  return 0;
}

void sub_19D9C0C4C()
{
  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  double v1 = dispatch_get_global_queue(21, 0);
  dispatch_queue_t v11 = dispatch_queue_create_with_target_V2("com.apple.ids.serverbag.ids", v0, v1);

  id v5 = objc_msgSend_IDSConfig(IDSServerBagConfig, v2, v3, v4);
  v6 = [IDSServerBag alloc];
  uint64_t v9 = objc_msgSend_initWithConfig_queue_(v6, v7, (uint64_t)v5, v8, v11);
  uint64_t v10 = (void *)qword_1EB2BB830;
  qword_1EB2BB830 = v9;
}

void sub_19D9C0D0C()
{
  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  double v1 = dispatch_get_global_queue(21, 0);
  dispatch_queue_t v11 = dispatch_queue_create_with_target_V2("com.apple.ids.serverbag.courier", v0, v1);

  id v5 = objc_msgSend_courierConfig(IDSServerBagConfig, v2, v3, v4);
  v6 = [IDSServerBag alloc];
  uint64_t v9 = objc_msgSend_initWithConfig_queue_(v6, v7, (uint64_t)v5, v8, v11);
  uint64_t v10 = (void *)qword_1EB2BB808;
  qword_1EB2BB808 = v9;
}

id sub_19D9C256C(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    if (!qword_1EB2BB878)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      v6 = (void *)qword_1EB2BB878;
      qword_1EB2BB878 = (uint64_t)v5;
    }
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v39 = v1;
    id v8 = v1;
    uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v40, v10, v44, 16);
    if (v11)
    {
      uint64_t v14 = v11;
      uint64_t v15 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v41 != v15) {
            objc_enumerationMutation(v8);
          }
          uint64_t v17 = *(void *)(*((void *)&v40 + 1) + 8 * i);
          uint64_t v18 = objc_msgSend_indexOfObject_((void *)qword_1EB2BB878, v12, v17, v13);
          v22 = NSNumber;
          if (v18 == 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v23 = objc_msgSend_count((void *)qword_1EB2BB878, v19, v20, v21);
            uint64_t v26 = objc_msgSend_numberWithUnsignedInteger_(v22, v24, v23, v25);
            objc_msgSend_addObject_(v7, v27, (uint64_t)v26, v28);

            objc_msgSend_addObject_((void *)qword_1EB2BB878, v29, v17, v30);
          }
          else
          {
            v31 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v19, v18, v21);
            objc_msgSend_addObject_(v7, v32, (uint64_t)v31, v33);
          }
        }
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v12, (uint64_t)&v40, v13, v44, 16);
      }
      while (v14);
    }

    v37 = objc_msgSend_copy(v7, v34, v35, v36);
    id v1 = v39;
  }
  else
  {
    v37 = 0;
  }

  return v37;
}

void sub_19D9C2D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19D9C30CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_19D9C3608(void *a1, void *a2, void *a3, __SecTrust *a4, int a5, void *a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  CFDataRef v11 = a2;
  CFDataRef v14 = a3;
  if (!a1) {
    goto LABEL_20;
  }
  if (!v11 || !a4)
  {
    v22 = objc_msgSend_config(a1, v12, v13, v15);
    uint64_t v26 = objc_msgSend_logCategory(v22, v23, v24, v25);

    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_19DB82C8C((uint64_t)a1, v26);
    }
    goto LABEL_19;
  }
  SecKeyRef v16 = SecTrustCopyKey(a4);
  if (!v16)
  {
    size_t v27 = objc_msgSend_config(a1, v17, v18, v19);
    uint64_t v26 = objc_msgSend_logCategory(v27, v28, v29, v30);

    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
      sub_19DB82B4C((uint64_t)a1, v26);
    }
    goto LABEL_19;
  }
  SecKeyRef v20 = v16;
  if (a5 == 1)
  {
    double v21 = (const __CFString **)MEMORY[0x1E4F3BAE8];
    goto LABEL_13;
  }
  if (a5)
  {
    CFRelease(v16);
    uint64_t v47 = objc_msgSend_config(a1, v44, v45, v46);
    uint64_t v26 = objc_msgSend_logCategory(v47, v48, v49, v50);

    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
      sub_19DB82BD8((uint64_t)a1, a5, v26);
    }
LABEL_19:

LABEL_20:
    BOOL v33 = 0;
    goto LABEL_28;
  }
  double v21 = (const __CFString **)MEMORY[0x1E4F3BAE0];
LABEL_13:
  CFStringRef v31 = *v21;
  CFDataRef v53 = v14;
  CFErrorRef error = 0;
  int v32 = SecKeyVerifySignature(v16, v31, v14, v11, &error);
  BOOL v33 = v32 != 0;
  v37 = objc_msgSend_config(a1, v34, v35, v36);
  long long v41 = objc_msgSend_logCategory(v37, v38, v39, v40);

  if (v32)
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      uint64_t v42 = objc_opt_class();
      _IDSServerBagHashAlgorithmString(a5);
      long long v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)kevent buf = 138412802;
      uint64_t v56 = v42;
      __int16 v57 = 2048;
      v58 = a1;
      __int16 v59 = 2112;
      CFStringRef v60 = v43;
      _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_INFO, "<%@:%p> Server bag signature verification succeeded {algorithm: %@}", buf, 0x20u);
    }
    CFDataRef v14 = v53;
  }
  else
  {
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v52 = objc_opt_class();
      *(_DWORD *)kevent buf = 138413058;
      uint64_t v56 = v52;
      __int16 v57 = 2048;
      v58 = a1;
      __int16 v59 = 2112;
      CFStringRef v60 = v31;
      __int16 v61 = 2112;
      CFErrorRef v62 = error;
      _os_log_error_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_ERROR, "<%@:%p> Server bag signature failed to verify {secAlgorithm: %@, error: %@}", buf, 0x2Au);
    }

    CFDataRef v14 = v53;
    if (a6) {
      *a6 = error;
    }
  }
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  CFRelease(v20);
LABEL_28:

  return v33;
}

__CFArray *sub_19D9C3934(void *a1, void *a2, int a3, __CFError **a4)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  if (!a1)
  {
LABEL_56:
    Mutable = 0;
    goto LABEL_57;
  }
  CFDataRef v11 = objc_msgSend_config(a1, v7, v8, v10);
  double v15 = objc_msgSend_url(v11, v12, v13, v14);
  double v19 = objc_msgSend_config(a1, v16, v17, v18);
  int v23 = objc_msgSend_validateAgainstIDSPolicy(v19, v20, v21, v22);
  id v24 = v9;
  id v25 = v15;
  if (v25)
  {
    int v125 = v23;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      id v121 = v24;
      v122 = a4;
      int v123 = a3;
      id v124 = v9;
      long long v129 = 0u;
      long long v130 = 0u;
      *(_OWORD *)CFErrorRef error = 0u;
      long long v128 = 0u;
      id v27 = v24;
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)error, v29, buf, 16);
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)v128;
LABEL_6:
        uint64_t v33 = 0;
        while (1)
        {
          if (*(void *)v128 != v32) {
            objc_enumerationMutation(v27);
          }
          CFDataRef v34 = (const __CFData *)*((void *)error[1] + v33);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            break;
          }
          SecCertificateRef v35 = SecCertificateCreateWithData(0, v34);
          if (!v35) {
            break;
          }
          SecCertificateRef v36 = v35;
          CFArrayAppendValue(Mutable, v35);
          CFRelease(v36);
          if (v31 == ++v33)
          {
            uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v37, (uint64_t)error, v38, buf, 16);
            if (v31) {
              goto LABEL_6;
            }
            break;
          }
        }
      }

      SecTrustRef trust = 0;
      CFIndex Count = CFArrayGetCount(Mutable);
      id v9 = v124;
      a4 = v122;
      if (Count == objc_msgSend_count(v27, v40, v41, v42))
      {
        objc_msgSend_host(v25, v43, v44, v45);
        double v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
        SecPolicyRef v47 = v125 ? (SecPolicyRef)SecPolicyCreateAppleIDSService() : SecPolicyCreateSSL(1u, v46);
        SecPolicyRef v48 = v47;

        if (v48)
        {
          if (SecTrustCreateWithCertificates(Mutable, v48, &trust) && trust)
          {
            CFRelease(trust);
            SecTrustRef trust = 0;
          }
          CFRelease(v48);
        }
      }
      CFRelease(Mutable);
      Mutable = trust;
      a3 = v123;
      id v24 = v121;
    }
  }
  else
  {
    Mutable = 0;
  }

  if (Mutable)
  {
    error[0] = 0;
    if (!SecTrustEvaluateWithError(Mutable, error))
    {
      if (!SecTrustIsExpiredOnly())
      {
        v70 = objc_msgSend_config(a1, v49, v50, v51);
        v74 = objc_msgSend_logCategory(v70, v71, v72, v73);

        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v75 = objc_opt_class();
          *(_DWORD *)kevent buf = 138412802;
          uint64_t v132 = v75;
          __int16 v133 = 2048;
          v134 = a1;
          __int16 v135 = 2112;
          CFErrorRef v136 = error[0];
          _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, not expired {errorRef: %@}", buf, 0x20u);
        }

        if (a4)
        {
          v76 = error[0];
          int v77 = a4;
          LODWORD(a4) = 0;
          uint64_t v69 = 0;
          *int v77 = v76;
          if (!a3)
          {
LABEL_49:
            if (IMGetDomainBoolForKey())
            {
              v115 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v112, v113, v114);
              int isInternalInstall = objc_msgSend_isInternalInstall(v115, v116, v117, v118);
            }
            else
            {
              int isInternalInstall = 0;
            }
            if (((a4 | isInternalInstall) & 1) == 0)
            {
              if (error[0])
              {
                CFRelease(error[0]);
                error[0] = 0;
              }
              CFRelease(Mutable);
              goto LABEL_56;
            }
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v69 = 0;
          if (!a3) {
            goto LABEL_49;
          }
        }
LABEL_48:
        v86 = objc_msgSend_config(a1, v66, v67, v68);
        uint64_t v90 = objc_msgSend_sosDomain(v86, v87, v88, v89);
        v94 = objc_msgSend_config(a1, v91, v92, v93);
        uint64_t v98 = objc_msgSend_url(v94, v95, v96, v97);
        v102 = objc_msgSend_absoluteString(v98, v99, v100, v101);
        v105 = objc_msgSend_metricWithDomain_type_error_bagURL_(IDSSOSMetric, v103, v90, v104, v69, 9001, v102);

        v109 = objc_msgSend_logger(IDSSOSLogger, v106, v107, v108);
        objc_msgSend_logMetric_(v109, v110, (uint64_t)v105, v111);

        goto LABEL_49;
      }
      int v52 = a3;
      CFAllocatorRef v53 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v55 = CFDateCreate(v53, Current + -604800.0);
      OSStatus v56 = SecTrustSetVerifyDate(Mutable, v55);
      CFRelease(v55);
      if (v56)
      {
        CFStringRef v60 = objc_msgSend_config(a1, v57, v58, v59);
        long long v64 = objc_msgSend_logCategory(v60, v61, v62, v63);

        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v65 = objc_opt_class();
          *(_DWORD *)kevent buf = 138413058;
          uint64_t v132 = v65;
          __int16 v133 = 2048;
          v134 = a1;
          __int16 v135 = 2112;
          CFErrorRef v136 = error[0];
          __int16 v137 = 1024;
          LODWORD(v138) = v56;
          _os_log_impl(&dword_19D9BE000, v64, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, unable to check verify date {errorRef: %@, setDateStatus: %d}", buf, 0x26u);
        }

        LODWORD(a4) = 0;
LABEL_31:
        uint64_t v69 = 0;
        goto LABEL_47;
      }
      if (error[0])
      {
        CFRelease(error[0]);
        error[0] = 0;
      }
      if (SecTrustEvaluateWithError(Mutable, error))
      {
        LODWORD(a4) = 1;
        uint64_t v69 = 1;
      }
      else
      {
        v78 = objc_msgSend_config(a1, v66, v67, v68);
        uint64_t v82 = objc_msgSend_logCategory(v78, v79, v80, v81);

        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v83 = objc_opt_class();
          *(_DWORD *)kevent buf = 138413058;
          uint64_t v132 = v83;
          __int16 v133 = 2048;
          v134 = a1;
          __int16 v135 = 2112;
          CFErrorRef v136 = error[0];
          __int16 v137 = 2112;
          CFDateRef v138 = v55;
          _os_log_impl(&dword_19D9BE000, v82, OS_LOG_TYPE_DEFAULT, "<%@:%p> Failed trust evaluate, after date adjustment {errorRef: %@, oneWeekAgo: %@}", buf, 0x2Au);
        }

        if (!a4) {
          goto LABEL_31;
        }
        long long v84 = error[0];
        v85 = a4;
        LODWORD(a4) = 0;
        uint64_t v69 = 0;
        *v85 = v84;
      }
LABEL_47:
      if (!v52) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
  }
LABEL_57:

  return Mutable;
}

uint64_t IDSDebuggingRegistrationDebuggingEnabled(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  double v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    uint64_t v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Registration Debugging Enabled !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

__CFString *_IDSBinaryStringForValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x40) {
      char v3 = 64;
    }
    else {
      char v3 = a2;
    }
    id v5 = (__CFString *)objc_alloc_init(MEMORY[0x1E4F28E78]);
    unint64_t v7 = 1 << (v3 - 1);
    do
    {
      if ((v7 & a1) != 0) {
        objc_msgSend_appendFormat_(v5, v4, @"%@", v6, @"1");
      }
      else {
        objc_msgSend_appendFormat_(v5, v4, @"%@", v6, @"0");
      }
      BOOL v8 = v7 > 1;
      v7 >>= 1;
    }
    while (v8);
  }
  else
  {
    id v5 = &stru_1EEFDAD58;
  }
  return v5;
}

id _IDSCopyOrderedAliasStrings(void *a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char v3 = _IDSCopyOrderedAliasesWithGetter(a1, a2, a3, 0, &unk_1EEFCD358);
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v5 = v3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v19, v7, v23, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v20;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v5);
        }
        double v15 = objc_msgSend__stripFZIDPrefix(*(void **)(*((void *)&v19 + 1) + 8 * v14), v9, v10, v11, (void)v19);
        objc_msgSend_addObject_(v4, v16, (uint64_t)v15, v17);

        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v19, v11, v23, 16);
    }
    while (v12);
  }

  return v4;
}

id _IDSCopyOrderedAliasesWithGetter(void *a1, uint64_t a2, int a3, char a4, void *a5)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  uint64_t v87 = a5;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id v9 = v7;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v98, v11, v104, 16);
  if (!v12)
  {
    LOBYTE(v14) = 0;
    goto LABEL_29;
  }
  uint64_t v13 = v12;
  int v14 = 0;
  uint64_t v15 = *(void *)v99;
  SecKeyRef v16 = @"____--SENTINEL--SELF--ALIAS--V0--____";
  do
  {
    uint64_t v17 = 0;
    do
    {
      if (*(void *)v99 != v15) {
        objc_enumerationMutation(v9);
      }
      id v18 = *(id *)(*((void *)&v98 + 1) + 8 * v17);
      if (objc_msgSend__appearsToBePhoneNumber(v18, v19, v20, v21))
      {
        id v26 = _IDSCopyIDForPhoneNumberWithOptions(v18, 0);
        if (v26) {
          objc_msgSend_addObject_(v8, v25, (uint64_t)v26, v27);
        }

        int v14 = 1;
      }
      else
      {
        if (objc_msgSend__appearsToBeEmail(v18, v22, v23, v24))
        {
          if (a2)
          {
            uint64_t v31 = objc_msgSend_lowercaseString(v18, v28, v29, v30);
            if (objc_msgSend_hasMobileMeSuffix(v31, v32, v33, v34))
            {
              objc_msgSend_stripMobileMSuffixIfPresent(v31, v35, v36, v37);
              int v88 = v14;
              id v38 = v8;
              id v39 = v9;
              uint64_t v40 = a2;
              v42 = uint64_t v41 = v16;

              uint64_t v31 = objc_msgSend_stringByAppendingString_(v42, v43, @"@icloud.com", v44);

              SecKeyRef v16 = v41;
              a2 = v40;
              id v9 = v39;
              id v8 = v38;
              int v14 = v88;
            }

            id v18 = v31;
          }
          double v46 = _IDSCopyIDForEmailAddress(v18);
          if (v46) {
            objc_msgSend_addObject_(v8, v45, (uint64_t)v46, v47);
          }
LABEL_17:

          goto LABEL_21;
        }
        if ((objc_msgSend__appearsToBeDSID(v18, v28, v29, v30) & 1) != 0
          || objc_msgSend_isEqualToIgnoringCase_(v18, v48, (uint64_t)v16, v49))
        {
          objc_msgSend_addObject_(v8, v48, (uint64_t)v18, v49);
        }
        else if ((objc_msgSend_isEqualToIgnoringCase_(v18, v48, @"____--SENTINEL--ALIAS--V0--____", v49) & 1) == 0)
        {
          double v46 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v52, v53, v54);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 138412290;
            id v103 = v18;
            _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "Ignoring malformed alias %@ in _IDSCopyOrderedAliases", buf, 0xCu);
          }
          goto LABEL_17;
        }
      }
LABEL_21:

      ++v17;
    }
    while (v13 != v17);
    uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v50, (uint64_t)&v98, v51, v104, 16);
    uint64_t v13 = v55;
  }
  while (v55);
LABEL_29:

  if (_IMWillLog()) {
    _IMAlwaysLog();
  }
  if (v87 == 0 || (v14 & 1) == 0)
  {
    uint64_t v62 = 0;
  }
  else
  {
    OSStatus v56 = v87[2](v87);
    if (objc_msgSend_count(v56, v57, v58, v59))
    {
      uint64_t v62 = objc_msgSend___imArrayByApplyingBlock_(v56, v60, (uint64_t)&unk_1EEFCD338, v61);
    }
    else
    {
      uint64_t v62 = 0;
    }
  }
  double v63 = ValidMobileMeDomains();
  if (a3) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = 100;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19DB167A0;
  aBlock[3] = &unk_1E59754E0;
  id v65 = v62;
  id v92 = v65;
  uint64_t v95 = v64;
  id v66 = v63;
  id v93 = v66;
  id v94 = &unk_1EF029518;
  char v97 = a4;
  uint64_t v96 = 1000;
  uint64_t v67 = _Block_copy(aBlock);
  uintptr_t v71 = objc_msgSend_allObjects(v8, v68, v69, v70);
  v89[0] = MEMORY[0x1E4F143A8];
  v89[1] = 3221225472;
  v89[2] = sub_19DB16A8C;
  v89[3] = &unk_1E5975508;
  id v72 = v67;
  id v90 = v72;
  uint64_t v75 = objc_msgSend_sortedArrayUsingComparator_(v71, v73, (uint64_t)v89, v74);

  id v76 = objc_alloc(MEMORY[0x1E4F1CAA0]);
  int v79 = objc_msgSend_initWithArray_(v76, v77, (uint64_t)v75, v78);
  uint64_t v83 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v80, v81, v82);
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG)) {
    sub_19DB815B8();
  }

  return v79;
}

id _IDSServiceDictionaryForIdentifierBypassPlatforms(uint64_t a1)
{
  if (a1)
  {
    id v1 = sub_19D9C4E54();
    if (objc_msgSend_count(v1, v2, v3, v4) == 1)
    {
      id v7 = objc_msgSend_objectAtIndex_(v1, v5, 0, v6);
    }
    else
    {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

id _IDSServiceDictionaryForIdentifier(uint64_t a1)
{
  return _IDSServiceDictionaryForIdentifierBypassPlatforms(a1);
}

__CFString *_IDSServerBagTypeInternalString(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5974990[a1];
  }
}

__CFString *_IDSServerBagHashAlgorithmString(int a1)
{
  id v1 = @"Unknown";
  if (!a1) {
    id v1 = @"SHA1";
  }
  if (a1 == 1) {
    return @"SHA256";
  }
  else {
    return v1;
  }
}

__CFBundle *IDSGetMainBundleIdentifier()
{
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    CFBundleGetIdentifier(MainBundle);
    MainBundle = (__CFBundle *)objc_claimAutoreleasedReturnValue();
  }
  return MainBundle;
}

id IDSServerBagContentErrorWithUnderlyingError(uint64_t a1, void *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  double v6 = v3;
  if (v3)
  {
    uint64_t v12 = *MEMORY[0x1E4F28A50];
    v13[0] = v3;
    id v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v13, v5, &v12, 1);
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v8, @"com.apple.ids.serverbag.contentprovider", v9, a1, v7);
  }
  else
  {
    id v7 = 0;
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v4, @"com.apple.ids.serverbag.contentprovider", v5, a1, 0);
  uint64_t v10 = };

  return v10;
}

#error "19D9C4E54: too big function (funcsize=0)"

__CFString *IDSDataProtectionClassStringFromDataProtectionClass(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5975688[a1];
  }
}

uint64_t _IDSSupportsDirectMessaging()
{
  return _os_feature_enabled_impl();
}

void IDSTransportThreadAddSyncBlock(const void *a1)
{
}

void IDSTransportThreadAddBlock(const void *a1)
{
}

id IDSLoggableDescriptionSalt()
{
  if (_IDSRunningInDaemon())
  {
    if (qword_1E944F158 != -1) {
      dispatch_once(&qword_1E944F158, &unk_1EEFCD918);
    }
    id v3 = (id)qword_1E944F160;
  }
  else
  {
    if (qword_1E944F3F0 != -1) {
      dispatch_once(&qword_1E944F3F0, &unk_1EEFCE238);
    }
    double v4 = objc_msgSend_sharedInstance((void *)qword_1E944F3F8, v0, v1, v2);
    id v8 = v4;
    if (v4)
    {
      double v9 = objc_msgSend_listener(v4, v5, v6, v7);
    }
    else
    {
      double v9 = 0;
    }

    uint64_t v13 = objc_msgSend_latestPrivateLoggingSalt(v9, v10, v11, v12);

    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E944F3E8);
    if (v13 && (unint64_t)objc_msgSend_length(v13, v14, v15, v16) >= 0x20)
    {
      if ((!qword_1E944F3E0 || (objc_msgSend_isEqualToData_((void *)qword_1E944F3E0, v17, (uint64_t)v13, v18) & 1) == 0)
        && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB74FC8();
      }
      objc_storeStrong((id *)&qword_1E944F3E0, v13);
    }
    id v3 = (id)qword_1E944F3E0;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E944F3E8);
  }
  return v3;
}

uint64_t _IDSRunningInDaemon()
{
  if (qword_1EB2BB8B0 != -1) {
    dispatch_once(&qword_1EB2BB8B0, &unk_1EEFCD778);
  }
  return byte_1EB2BB890;
}

uint64_t sub_19D9E6780(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  changelist.ident = 1;
  *(void *)&changelist.filter = 0x10000000021FFF6;
  changelist.data = 0;
  changelist.udata = a2;
  uint64_t result = kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0);
  if ((result & 0x80000000) != 0)
  {
    int v3 = *__error();
    double v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      int v7 = v3;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "kevent EVFILT_USER failed with error(%d)", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"kevent EVFILT_USER failed with error(%d)");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent EVFILT_USER failed with error(%d)");
        }
      }
    }
  }
  return result;
}

void sub_19D9E68E0(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  uint64_t v5 = objc_msgSend__init(v1, v2, v3, v4);
  uint64_t v6 = (void *)qword_1EB2BB8A0;
  qword_1EB2BB8A0 = v5;
}

void sub_19D9E691C()
{
  os_log_t v0 = os_log_create("com.apple.Registration", "CourierServerBag");
  id v1 = (void *)qword_1EB2BB810;
  qword_1EB2BB810 = (uint64_t)v0;
}

void sub_19D9E6960()
{
  os_log_t v0 = os_log_create("com.apple.Registration", "IDSServerBag");
  id v1 = (void *)qword_1EB2BB828;
  qword_1EB2BB828 = (uint64_t)v0;
}

id sub_19D9E6A54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v8 = objc_msgSend_count(v3, v5, v6, v7);
  id v152 = (id)objc_msgSend_initWithCapacity_(v4, v9, v8, v10);
  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v173 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  v144 = v3;
  int v14 = objc_msgSend_allValues(v3, v12, v13, 0.0);
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v173, v16, v182, 16);
  if (v17)
  {
    uint64_t v20 = v17;
    uint64_t v21 = *(void *)v174;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v174 != v21) {
          objc_enumerationMutation(v14);
        }
        objc_msgSend_addObjectsFromArray_(v11, v18, *(void *)(*((void *)&v173 + 1) + 8 * i), v19);
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v173, v19, v182, 16);
    }
    while (v20);
  }

  id v23 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v24 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  id v25 = v11;
  uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v169, v27, v181, 16);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v170;
    do
    {
      for (uint64_t j = 0; j != v29; ++j)
      {
        if (*(void *)v170 != v30) {
          objc_enumerationMutation(v25);
        }
        uint64_t v32 = *(void **)(*((void *)&v169 + 1) + 8 * j);
        id v33 = v24;
        double v37 = objc_msgSend_URI(v32, v34, v35, v36);
        uint64_t v41 = objc_msgSend_prefixedURI(v37, v38, v39, v40);

        objc_msgSend_objectForKey_(v33, v42, (uint64_t)v41, v43);
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        if (!v45)
        {
          id v45 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          objc_msgSend_setObject_forKey_(v33, v47, (uint64_t)v45, v48, v41);
        }
        objc_msgSend_addObject_(v45, v44, (uint64_t)v32, v46);
      }
      uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v49, (uint64_t)&v169, v50, v181, 16);
    }
    while (v29);
  }
  v142 = v24;
  v143 = v25;

  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  obuint64_t j = v23;
  uint64_t v146 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v165, v52, v180, 16);
  if (v146)
  {
    uint64_t v145 = *(void *)v166;
    do
    {
      uint64_t v55 = 0;
      do
      {
        if (*(void *)v166 != v145) {
          objc_enumerationMutation(obj);
        }
        uint64_t v148 = *(void *)(*((void *)&v165 + 1) + 8 * v55);
        uint64_t v150 = v55;
        OSStatus v56 = objc_msgSend_objectForKey_(obj, v53, v148, v54);
        id v57 = objc_alloc(MEMORY[0x1E4F1CA48]);
        uint64_t v61 = objc_msgSend_count(v56, v58, v59, v60);
        uint64_t v64 = objc_msgSend_initWithCapacity_(v57, v62, v61, v63);
        id v65 = objc_alloc(MEMORY[0x1E4F1CA80]);
        uint64_t v69 = objc_msgSend_count(v56, v66, v67, v68);
        id v72 = objc_msgSend_initWithCapacity_(v65, v70, v69, v71);
        long long v161 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        id v73 = v56;
        uint64_t v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v74, (uint64_t)&v161, v75, v179, 16);
        if (v76)
        {
          uint64_t v79 = v76;
          uint64_t v80 = *(void *)v162;
          do
          {
            for (uint64_t k = 0; k != v79; ++k)
            {
              if (*(void *)v162 != v80) {
                objc_enumerationMutation(v73);
              }
              double v82 = *(void **)(*((void *)&v161 + 1) + 8 * k);
              v85 = objc_msgSend_participantDeviceFromEndpoint_(MEMORY[0x1E4F61170], v77, (uint64_t)v82, v78);
              if (v85) {
                objc_msgSend_addObject_(v64, v83, (uint64_t)v85, v86);
              }
              uint64_t v87 = objc_msgSend_URI(v82, v83, v84, v86);

              if (v87)
              {
                v91 = objc_msgSend_URI(v82, v88, v89, v90);
                uint64_t v95 = objc_msgSend_prefixedURI(v91, v92, v93, v94);
                objc_msgSend_addObject_(v72, v96, (uint64_t)v95, v97);
              }
            }
            uint64_t v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(v73, v77, (uint64_t)&v161, v78, v179, 16);
          }
          while (v79);
        }

        id v98 = objc_alloc(MEMORY[0x1E4F61168]);
        long long v101 = objc_msgSend_initWithAccountPublicKey_aliases_devices_(v98, v99, v148, v100, v72, v64);
        objc_msgSend_addObject_(v152, v102, (uint64_t)v101, v103);

        uint64_t v55 = v150 + 1;
      }
      while (v150 + 1 != v146);
      uint64_t v146 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v53, (uint64_t)&v165, v54, v180, 16);
    }
    while (v146);
  }

  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  id v104 = v142;
  uint64_t v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v105, (uint64_t)&v157, v106, v178, 16);
  if (v151)
  {
    uint64_t v149 = *(void *)v158;
    do
    {
      for (uint64_t m = 0; m != v151; ++m)
      {
        if (*(void *)v158 != v149) {
          objc_enumerationMutation(v104);
        }
        uint64_t v110 = *(void *)(*((void *)&v157 + 1) + 8 * m);
        double v111 = objc_msgSend_objectForKey_(v104, v107, v110, v108);
        id v112 = objc_alloc(MEMORY[0x1E4F1CA48]);
        uint64_t v116 = objc_msgSend_count(v111, v113, v114, v115);
        v119 = objc_msgSend_initWithCapacity_(v112, v117, v116, v118);
        long long v153 = 0u;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v156 = 0u;
        id v120 = v111;
        uint64_t v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v121, (uint64_t)&v153, v122, v177, 16);
        if (v123)
        {
          uint64_t v126 = v123;
          uint64_t v127 = *(void *)v154;
          do
          {
            for (uint64_t n = 0; n != v126; ++n)
            {
              if (*(void *)v154 != v127) {
                objc_enumerationMutation(v120);
              }
              long long v130 = objc_msgSend_participantDeviceFromEndpoint_(MEMORY[0x1E4F61170], v124, *(void *)(*((void *)&v153 + 1) + 8 * n), v125);
              if (v130) {
                objc_msgSend_addObject_(v119, v129, (uint64_t)v130, v131);
              }
            }
            uint64_t v126 = objc_msgSend_countByEnumeratingWithState_objects_count_(v120, v124, (uint64_t)&v153, v125, v177, 16);
          }
          while (v126);
        }

        v134 = objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], v132, v110, v133);
        id v135 = objc_alloc(MEMORY[0x1E4F61168]);
        CFDateRef v138 = objc_msgSend_initWithAccountPublicKey_aliases_devices_(v135, v136, 0, v137, v134, v119);
        objc_msgSend_addObject_(v152, v139, (uint64_t)v138, v140);
      }
      uint64_t v151 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v107, (uint64_t)&v157, v108, v178, 16);
    }
    while (v151);
  }

  return v152;
}

id sub_19D9E70E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  obuint64_t j = v3;
  uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v35, v6, v40, 16);
  if (v30)
  {
    uint64_t v29 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v36 != v29) {
          objc_enumerationMutation(obj);
        }
        double v10 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        id v11 = objc_msgSend_aliases(v10, v7, v8, 0.0);
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v31, v13, v39, 16);
        if (v14)
        {
          uint64_t v17 = v14;
          uint64_t v18 = *(void *)v32;
          do
          {
            for (uint64_t j = 0; j != v17; ++j)
            {
              if (*(void *)v32 != v18) {
                objc_enumerationMutation(v11);
              }
              uint64_t v20 = *(void *)(*((void *)&v31 + 1) + 8 * j);
              objc_msgSend_objectForKeyedSubscript_(v4, v15, v20, v16);
              id v22 = (id)objc_claimAutoreleasedReturnValue();
              if (!v22)
              {
                id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                objc_msgSend_setObject_forKeyedSubscript_(v4, v24, (uint64_t)v22, v25, v20);
              }
              objc_msgSend_addObject_(v22, v21, (uint64_t)v10, v23);
            }
            uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v31, v16, v39, 16);
          }
          while (v17);
        }
      }
      uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v35, v26, v40, 16);
    }
    while (v30);
  }

  return v4;
}

id sub_19D9E72E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v20 = 0;
  double v6 = objc_msgSend_cypherWithEndpoint_error_(IDSLegacyDeviceMessageProtectionCypher, v4, (uint64_t)v3, v5, &v20);
  id v9 = v20;
  if (v6)
  {
    id v11 = objc_alloc(MEMORY[0x1E4F61170]);
    uint64_t v15 = objc_msgSend_pushToken(v3, v12, v13, v14);
    uint64_t v18 = objc_msgSend_initWithDevicePublicKey_cypher_identifier_(v11, v16, 0, v17, v6, v15);
  }
  else
  {
    uint64_t v15 = objc_msgSend_utilities(MEMORY[0x1E4F61160], v7, v8, v10);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138543618;
      id v22 = v3;
      __int16 v23 = 2114;
      id v24 = v9;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "participantDeviceFromEndpoint - failed to create cypher - Fail {endpoint: %{public}@, error: %{public}@}", buf, 0x16u);
    }
    uint64_t v18 = 0;
  }

  return v18;
}

id sub_19D9E7498(double a1, uint64_t a2, void *a3)
{
  id v3 = objc_msgSend__stripPotentialTokenURIWithToken_(a3, (const char *)a3, 0, a1);
  id v4 = [IDSURI alloc];
  double v7 = objc_msgSend_initWithPrefixedURI_(v4, v5, (uint64_t)v3, v6);

  return v7;
}

uint64_t sub_19D9E754C(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

void IDSLoggableDescriptionSetForceRestricted()
{
}

uint64_t IDSShouldUseRestrictedLoggingForService(void *a1)
{
  id v3 = a1;
  if (qword_1EB2BB888 != -1) {
    dispatch_once(&qword_1EB2BB888, &unk_1EEFCD458);
  }
  if (byte_1EB2BB7CA) {
    goto LABEL_11;
  }
  unsigned __int8 v5 = atomic_load(byte_1E944F3C8);
  if (v5) {
    goto LABEL_11;
  }
  if (!byte_1EB2BB7F9)
  {
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  if (!v3 || !objc_msgSend_length(v3, v1, v2, v4))
  {
LABEL_11:
    uint64_t v8 = 1;
  }
  else
  {
    if (qword_1E944F3D8 != -1) {
      dispatch_once(&qword_1E944F3D8, &unk_1EEFCE558);
    }
    uint64_t v8 = objc_msgSend_containsObject_((void *)qword_1E944F3D0, v6, (uint64_t)v3, v7);
  }
LABEL_12:

  return v8;
}

uint64_t sub_19D9E7640()
{
  if (os_variant_has_internal_ui()) {
    char v0 = _os_feature_enabled_impl();
  }
  else {
    char v0 = 1;
  }
  byte_1EB2BB7F9 = v0;
  uint64_t result = _os_feature_enabled_impl();
  byte_1EB2BB7CA = result;
  return result;
}

void sub_19D9E76A4()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v1 = _IDSServiceDictionaries();
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v24, v3, v28, 16);
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v1);
        }
        double v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        id v11 = objc_msgSend__numberForKey_(v10, v5, @"RestrictedLogging", v6, (void)v24);
        int v15 = objc_msgSend_BOOLValue(v11, v12, v13, v14);

        if (v15)
        {
          double v16 = objc_msgSend__stringForKey_(v10, v5, @"Identifier", v6);
          objc_msgSend_addObject_(v0, v17, (uint64_t)v16, v18);
        }
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v5, (uint64_t)&v24, v6, v28, 16);
    }
    while (v7);
  }

  uint64_t v22 = objc_msgSend_copy(v0, v19, v20, v21);
  __int16 v23 = (void *)qword_1E944F3D0;
  qword_1E944F3D0 = v22;
}

void sub_19D9E7828()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CA58]);
  uint64_t v3 = objc_msgSend_initWithLength_(v0, v1, 32, v2);
  uint64_t v4 = (void *)qword_1E944F160;
  qword_1E944F160 = v3;

  uint64_t v8 = objc_msgSend_mutableBytes((void *)qword_1E944F160, v5, v6, v7);
  arc4random_buf(v8, 0x20uLL);
}

id IDSSaltedHash(void *a1, void *a2)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F1CA58];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  id v9 = objc_msgSend_initWithData_(v6, v7, (uint64_t)v4, v8);

  objc_msgSend_appendData_(v9, v10, (uint64_t)v5, v11);
  double v14 = objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v12, 32, v13);
  id v15 = v9;
  double v19 = (const void *)objc_msgSend_bytes(v15, v16, v17, v18);
  CC_LONG v23 = objc_msgSend_length(v15, v20, v21, v22);
  id v24 = v14;
  uint64_t v28 = (unsigned __int8 *)objc_msgSend_mutableBytes(v24, v25, v26, v27);
  CC_SHA256(v19, v23, v28);
  objc_msgSend_setLength_(v24, v29, 12, v30);
  long long v33 = objc_msgSend_base64EncodedStringWithOptions_(v24, v31, 0, v32);
  id v37 = 0;
  if (objc_msgSend_length(v33, v34, v35, v36) == 16) {
    id v37 = v33;
  }

  return v37;
}

id IDSLoggableDescriptionForHandlesOnService(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (IDSShouldUseRestrictedLoggingForService(v4))
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = sub_19D9E7ABC;
      v16[3] = &unk_1E59706A0;
      id v17 = v4;
      double v10 = objc_msgSend___imArrayByApplyingBlock_(v3, v8, (uint64_t)v16, v9);
      double v14 = objc_msgSend_description(v10, v11, v12, v13);
    }
    else
    {
      double v14 = objc_msgSend_description(v3, v5, v6, v7);
    }
  }
  else
  {
    double v14 = 0;
  }

  return v14;
}

id sub_19D9E7ABC(uint64_t a1, void *a2)
{
  return IDSLoggableDescriptionForHandleOnService(a2, *(void **)(a1 + 32));
}

id IDSLoggableDescriptionForHandleOnService(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (IDSShouldUseRestrictedLoggingForService(v4))
    {
      id v26 = 0;
      double v7 = objc_msgSend__stripPotentialTokenURIWithToken_(v3, v5, (uint64_t)&v26, v6);
      id v8 = v26;
      uint64_t v12 = objc_msgSend__stripFZIDPrefix(v7, v9, v10, v11);

      double v13 = IDSLoggableDescriptionSalt();
      double v16 = objc_msgSend_dataUsingEncoding_allowLossyConversion_(v12, v14, 4, v15, 1);
      double v19 = IDSSaltedHash(v13, v16);
      if (v19)
      {
        if (v8 && objc_msgSend_length(v8, v17, v18, v20))
        {
          double v22 = IDSSaltedHash(v13, v8);
          if (v22) {
            objc_msgSend_stringWithFormat_(NSString, v21, @"t:%@/u:%@", v23, v22, v19);
          }
          else {
            objc_msgSend_stringWithFormat_(NSString, v21, @"t:TOKEN/u:%@", v23, v19);
          }
          id v24 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_msgSend_stringWithFormat_(NSString, v17, @"u:%@", v20, v19);
          id v24 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        id v24 = 0;
      }
    }
    else
    {
      id v24 = v3;
    }
  }
  else
  {
    id v24 = 0;
  }

  return v24;
}

id IDSLoggableDescriptionForTokenOnService(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (IDSShouldUseRestrictedLoggingForService(v4))
    {
      id v8 = IDSLoggableDescriptionSalt();
      uint64_t v10 = IDSSaltedHash(v8, v3);
      if (v10)
      {
        uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v9, @"t:%@", v11, v10);
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = objc_msgSend_debugDescription(v3, v5, v6, v7);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

id IDSLoggableDescriptionForObjectOnService(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (IDSShouldUseRestrictedLoggingForService(v4))
    {
      if (objc_opt_respondsToSelector())
      {
        double v9 = NSString;
        uint64_t v10 = objc_opt_class();
        uint64_t v28 = objc_msgSend_count(v3, v11, v12, v13);
        objc_msgSend_stringWithFormat_(v9, v14, @"<redacted %@ count:%llu>", v15, v10, v28);
      }
      else
      {
        char v18 = objc_opt_respondsToSelector();
        double v19 = NSString;
        uint64_t v20 = objc_opt_class();
        uint64_t v24 = v20;
        if (v18)
        {
          uint64_t v29 = objc_msgSend_length(v3, v21, v22, v23);
          objc_msgSend_stringWithFormat_(v19, v25, @"<redacted %@ length:%llu>", v26, v24, v29);
        }
        else
        {
          objc_msgSend_stringWithFormat_(v19, v21, @"<redacted %@>", v23, v20);
        }
      uint64_t v17 = };
    }
    else
    {
      uint64_t v17 = objc_msgSend_description(v3, v6, v7, v8);
    }
    double v16 = (void *)v17;
  }
  else
  {
    double v16 = 0;
  }

  return v16;
}

Class sub_19D9E7EB0()
{
  Class result = NSClassFromString(&cfstr_Idsdaemoncontr.isa);
  qword_1E944F3F8 = (uint64_t)result;
  return result;
}

id sub_19D9E7ED8(void *a1, const char *a2, uint64_t a3, double a4)
{
  id v4 = objc_msgSend_response(a1, a2, a3, a4);
  double v8 = objc_msgSend__cacheTime(v4, v5, v6, v7);

  return v8;
}

id sub_19D9E7F24(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = objc_msgSend_allHeaderFields(a1, v2, v3, v4);
    double v8 = objc_msgSend_objectForKey_(v5, v6, @"Cache-Control", v7);
    if ((int)objc_msgSend_intValue(v8, v9, v10, v11) < 1)
    {
      if (objc_msgSend_rangeOfString_(v8, v12, @"max-age=", v14) == 0x7FFFFFFFFFFFFFFFLL)
      {
        double v19 = 0;
      }
      else
      {
        uint64_t v22 = objc_msgSend_rangeOfString_(v8, v20, @"max-age=", v21);
        long long v25 = objc_msgSend_substringFromIndex_(v8, v23, (uint64_t)&v23[v22], v24);
        uint64_t v29 = objc_msgSend_intValue(v25, v26, v27, v28);
        if ((int)v29 < 1)
        {
          double v19 = 0;
        }
        else
        {
          double v19 = objc_msgSend_numberWithInt_(NSNumber, v30, v29, v31);
        }
      }
    }
    else
    {
      double v15 = NSNumber;
      uint64_t v16 = objc_msgSend_intValue(v8, v12, v13, v14);
      double v19 = objc_msgSend_numberWithInt_(v15, v17, v16, v18);
    }
  }
  else
  {
    double v19 = 0;
  }
  double v32 = NSNumber;
  int v33 = objc_msgSend_intValue(v19, v2, v3, v4);
  double v36 = objc_msgSend_numberWithDouble_(v32, v34, v35, fmax((double)v33, 3600.0));

  return v36;
}

void sub_19D9E8190(uint64_t a1)
{
}

void sub_19D9E819C(uint64_t a1, void *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (!a1) {
    goto LABEL_29;
  }
  double v7 = objc_msgSend_queue((void *)a1, v3, v4, v6);
  dispatch_assert_queue_V2(v7);

  double v11 = objc_msgSend_config((void *)a1, v8, v9, v10);
  if (objc_msgSend_bypassProcessChecks(v11, v12, v13, v14) & 1) != 0 || (_IDSRunningInDaemon())
  {
  }
  else
  {
    if (qword_1EB2BB848 != -1) {
      dispatch_once(&qword_1EB2BB848, &unk_1EEFCD478);
    }
    int v91 = byte_1EB2BB820;

    if (!v91)
    {
      uint64_t v95 = objc_msgSend_config((void *)a1, v92, v93, v94);
      long long v99 = objc_msgSend_logCategory(v95, v96, v97, v98);

      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v100 = objc_opt_class();
        uint64_t v101 = *(void *)(a1 + 64);
        *(_DWORD *)kevent buf = 138412802;
        uint64_t v117 = v100;
        __int16 v118 = 2048;
        uint64_t v119 = a1;
        __int16 v120 = 1024;
        int v121 = v101;
        _os_log_impl(&dword_19D9BE000, v99, OS_LOG_TYPE_DEFAULT, "<%@:%p> not allowed to load, returning {_loaderState: %d}", buf, 0x1Cu);
      }

      goto LABEL_29;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(void *)(a1 + 64))
  {
    double v18 = objc_msgSend_config((void *)a1, v15, v16, v17);
    uint64_t v22 = objc_msgSend_logCategory(v18, v19, v20, v21);

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = objc_opt_class();
      uint64_t v24 = *(void *)(a1 + 64);
      *(_DWORD *)kevent buf = 138412802;
      uint64_t v117 = v23;
      __int16 v118 = 2048;
      uint64_t v119 = a1;
      __int16 v120 = 1024;
      int v121 = v24;
      long long v25 = "<%@:%p> not idle, returning {_loaderState: %d}";
LABEL_27:
      _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, v25, buf, 0x1Cu);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  double v26 = _Block_copy(v5);
  uint64_t v27 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v26;

  if ((sub_19D9E8764((const os_unfair_lock *)a1) & 1) == 0)
  {
    *(void *)(a1 + 64) = 2;
    v102 = objc_msgSend_config((void *)a1, v28, v29, v30);
    uint64_t v22 = objc_msgSend_logCategory(v102, v103, v104, v105);

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v106 = objc_opt_class();
      uint64_t v107 = *(void *)(a1 + 64);
      *(_DWORD *)kevent buf = 138412802;
      uint64_t v117 = v106;
      __int16 v118 = 2048;
      uint64_t v119 = a1;
      __int16 v120 = 1024;
      int v121 = v107;
      long long v25 = "<%@:%p> server not available, returning {_loaderState: %d}";
      goto LABEL_27;
    }
LABEL_28:

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    goto LABEL_29;
  }
  id v31 = objc_alloc(MEMORY[0x1E4F28E88]);
  uint64_t v35 = objc_msgSend_config((void *)a1, v32, v33, v34);
  uint64_t v39 = objc_msgSend_url(v35, v36, v37, v38);
  uint64_t v41 = objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(v31, v40, (uint64_t)v39, 60.0, 1);

  double v42 = NSString;
  double v46 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C320], v43, v44, v45);
  double v50 = objc_msgSend_userAgentString(v46, v47, v48, v49);
  uint64_t v53 = objc_msgSend_stringWithFormat_(v42, v51, @"%@ %@", v52, @"server-bag", v50);

  double v108 = (void *)v53;
  objc_msgSend_setValue_forHTTPHeaderField_(v41, v54, v53, v55, @"user-agent");
  OSStatus v56 = IDSAdditionalRequestHeaders();
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v57, (uint64_t)&v112, 0.0, v124, 16);
  if (v58)
  {
    uint64_t v61 = v58;
    uint64_t v62 = *(void *)v113;
    do
    {
      for (uint64_t i = 0; i != v61; ++i)
      {
        if (*(void *)v113 != v62) {
          objc_enumerationMutation(v56);
        }
        uint64_t v64 = *(void *)(*((void *)&v112 + 1) + 8 * i);
        id v65 = objc_msgSend_objectForKey_(v56, v59, v64, v60);
        objc_msgSend_setValue_forHTTPHeaderField_(v41, v66, (uint64_t)v65, v67, v64);
      }
      uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v59, (uint64_t)&v112, v60, v124, 16);
    }
    while (v61);
  }
  objc_msgSend_setHTTPShouldHandleCookies_(v41, v59, 0, v60);
  double v71 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v68, v69, v70);
  *(void *)(a1 + 64) = 1;
  double v75 = objc_msgSend_config((void *)a1, v72, v73, v74);
  uint64_t v79 = objc_msgSend_logCategory(v75, v76, v77, v78);

  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v80 = objc_opt_class();
    uint64_t v81 = *(void *)(a1 + 64);
    *(_DWORD *)kevent buf = 138413058;
    uint64_t v117 = v80;
    __int16 v118 = 2048;
    uint64_t v119 = a1;
    __int16 v120 = 1024;
    int v121 = v81;
    __int16 v122 = 2112;
    uint64_t v123 = v41;
    _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "<%@:%p> starting load {_loaderState: %d, urlRequest: %@}", buf, 0x26u);
  }

  uint64_t v82 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v83 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v82;

  uint64_t v84 = *(void **)(a1 + 56);
  v109[0] = MEMORY[0x1E4F143A8];
  v109[1] = 3221225472;
  v109[2] = sub_19D9E87E4;
  v109[3] = &unk_1E59706F0;
  v109[4] = a1;
  id v110 = v71;
  id v111 = v5;
  id v85 = v71;
  objc_msgSend_performRequest_completionBlock_(v84, v86, (uint64_t)v41, v87, v109);
  objc_msgSend_finishTasksAndInvalidate(*(void **)(a1 + 56), v88, v89, v90);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));

LABEL_29:
}

const os_unfair_lock *sub_19D9E8764(const os_unfair_lock *result)
{
  if (result)
  {
    id v1 = (os_unfair_lock *)result;
    os_unfair_lock_assert_owner(result + 2);
    id v5 = *(void **)&v1[12]._os_unfair_lock_opaque;
    if (!v5)
    {
      objc_msgSend_connectionMonitorBlock(v1, v2, v3, v4);
      double v6 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
      uint64_t v7 = ((void (**)(void, os_unfair_lock *))v6)[2](v6, v1);
      double v8 = *(void **)&v1[12]._os_unfair_lock_opaque;
      *(void *)&v1[12]._os_unfair_lock_opaque = v7;

      id v5 = *(void **)&v1[12]._os_unfair_lock_opaque;
    }
    return (const os_unfair_lock *)objc_msgSend_isImmediatelyReachable(v5, v2, v3, v4);
  }
  return result;
}

void sub_19D9E87E4(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a4;
  id v12 = a5;
  if (v12)
  {
    double v14 = objc_msgSend_config(*(void **)(a1 + 32), v10, v11, v13);
    double v18 = objc_msgSend_logCategory(v14, v15, v16, v17);

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = objc_opt_class();
      uint64_t v20 = *(void **)(a1 + 32);
      *(_DWORD *)kevent buf = 138413058;
      uint64_t v105 = v19;
      __int16 v106 = 2048;
      uint64_t v107 = v20;
      __int16 v108 = 1024;
      *(_DWORD *)v109 = objc_msgSend_loaderState(v20, v21, v22, v23);
      *(_WORD *)&v109[4] = 2112;
      *(void *)&v109[6] = v12;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "<%@:%p> finished loading with error {_loaderState: %d, error: %@}", buf, 0x26u);
    }

    uint64_t v24 = *(void *)(a1 + 48);
    long long v25 = IDSServerBagContentErrorWithUnderlyingError(100, v12);
    (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v25);
  }
  else
  {
    if (objc_opt_respondsToSelector())
    {
      long long v25 = objc_msgSend_allHeaderFields(v8, v26, v27, v28);
    }
    else
    {
      long long v25 = 0;
    }
    uint64_t v29 = objc_msgSend_config(*(void **)(a1 + 32), v26, v27, v28);
    uint64_t v33 = objc_msgSend_logCategory(v29, v30, v31, v32);

    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = objc_opt_class();
      uint64_t v35 = *(void **)(a1 + 32);
      int v101 = objc_msgSend_loaderState(v35, v36, v37, v38);
      id v42 = v8;
      id v43 = v9;
      int v44 = objc_msgSend_length(v9, v39, v40, v41);
      double v47 = objc_msgSend_descriptionForDictionary_options_(IDSLogFormatter, v45, (uint64_t)v25, v46, 0);
      *(_DWORD *)kevent buf = 138413314;
      uint64_t v105 = v34;
      __int16 v106 = 2048;
      uint64_t v107 = v35;
      __int16 v108 = 1024;
      *(_DWORD *)v109 = v101;
      *(_WORD *)&v109[4] = 1024;
      *(_DWORD *)&v109[6] = v44;
      id v9 = v43;
      id v8 = v42;
      *(_WORD *)&v109[10] = 2112;
      *(void *)&v109[12] = v47;
      _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "<%@:%p> finished loading {_loaderState: %d, resultDataLen: %d, headerFields: %@}", buf, 0x2Cu);
    }
    id v103 = 0;
    double v50 = objc_msgSend_propertyListWithData_options_format_error_(MEMORY[0x1E4F28F98], v48, (uint64_t)v9, v49, 0, 0, &v103);
    id v51 = v103;
    double v55 = v51;
    if (v50)
    {
      id v100 = v51;
      id v102 = v9;
      OSStatus v56 = objc_msgSend__cacheTime(v8, v52, v53, v54);
      objc_msgSend_doubleValue(v56, v57, v58, v59);
      double v61 = v60;

      if (v61 > 86400.0) {
        double v61 = 86400.0;
      }
      double v63 = objc_msgSend__arrayForKey_(v50, v62, @"certs", 86400.0);
      id v66 = objc_msgSend__dataForKey_(v50, v64, @"signature", v65);
      uint64_t v69 = objc_msgSend__dataForKey_(v50, v67, @"bag", v68);
      double v70 = [IDSServerBagRawContents alloc];
      Date_timeToLive_serverSignature_serverCerts_signedBag = objc_msgSend_initWithLoadDate_timeToLive_serverSignature_serverCerts_signedBag_(v70, v71, *(void *)(a1 + 40), v61, v66, v63, v69);
      if (!Date_timeToLive_serverSignature_serverCerts_signedBag)
      {
        long long v99 = v66;
        uint64_t v76 = objc_msgSend_config(*(void **)(a1 + 32), v72, v73, v75);
        uint64_t v80 = objc_msgSend_logCategory(v76, v77, v78, v79);

        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          uint64_t v88 = objc_opt_class();
          uint64_t v97 = *(void **)(a1 + 32);
          int v98 = objc_msgSend_count(v63, v89, v90, v91);
          int v95 = objc_msgSend_length(v69, v92, v93, v94);
          uint64_t v96 = *(void *)(a1 + 40);
          *(_DWORD *)kevent buf = 138413826;
          uint64_t v105 = v88;
          __int16 v106 = 2048;
          uint64_t v107 = v97;
          __int16 v108 = 2048;
          *(double *)v109 = v61;
          *(_WORD *)&v109[8] = 2112;
          *(void *)&v109[10] = v99;
          *(_WORD *)&v109[18] = 1024;
          int v110 = v98;
          __int16 v111 = 1024;
          int v112 = v95;
          __int16 v113 = 2112;
          uint64_t v114 = v96;
          _os_log_error_impl(&dword_19D9BE000, v80, OS_LOG_TYPE_ERROR, "<%@:%p> request succeeded but could not parse raw contents {serverGivenInterval: %f, signature: %@, certificatesCount: %d, signedBagLen: %d, startLoadDate: %@}", buf, 0x40u);
        }

        id v66 = v99;
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

      double v55 = v100;
      id v9 = v102;
    }
    else
    {
      uint64_t v81 = *(void *)(a1 + 48);
      double v63 = IDSServerBagContentErrorWithUnderlyingError(200, v51);
      (*(void (**)(uint64_t, void, void *))(v81 + 16))(v81, 0, v63);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  objc_msgSend_setLoaderState_(*(void **)(a1 + 32), v82, 0, v83);
  objc_msgSend_setStoredCompletion_(*(void **)(a1 + 32), v84, 0, v85);
  objc_msgSend_setURLRequestSession_(*(void **)(a1 + 32), v86, 0, v87);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

void sub_19D9E905C(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  qword_1EB2BB870 = objc_msgSend_UTF8String(@"com.apple.idsremoteurlconnectionagent.embedded.auth", a3, a4, a1);
  getpid();
  uint64_t v15 = qword_1EB2BB870;
  int v4 = sandbox_check();
  *(_OWORD *)task_info_out = 0u;
  long long v18 = 0u;
  mach_msg_type_number_t task_info_outCnt = 8;
  if (task_info(*MEMORY[0x1E4F14960], 0xFu, task_info_out, &task_info_outCnt))
  {
    id v8 = objc_msgSend_serverBag(MEMORY[0x1E4F6C3B8], v5, v6, v7, v15);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_19DB75128(v8);
    }

    char HasEntitlement = 0;
  }
  else if (IMDAuditTokenTaskHasEntitlement())
  {
    char HasEntitlement = 1;
  }
  else
  {
    char HasEntitlement = IMDAuditTokenTaskHasEntitlement();
  }
  if (v4) {
    char v13 = 0;
  }
  else {
    char v13 = HasEntitlement;
  }
  byte_1EB2BB820 = v13;
  double v14 = objc_msgSend_serverBag(MEMORY[0x1E4F6C3B8], v9, v10, v11, v15);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_19DB75068(v4 == 0, HasEntitlement, v14);
  }
}

BOOL IDSQRProtoH3EndToEndChannelRegisterE2EChannelRegisterReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t IDSByteBufferInitForWriteWithAllocatedSpace(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    sub_19DB7516C();
  }
  *(void *)Class result = a2;
  *(void *)(result + 8) = a2 + a3 - 1;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

uint64_t IDSByteBufferInitForWrite(uint64_t a1)
{
  if (!a1) {
    sub_19DB75198();
  }
  uint64_t v1 = a1;
  double v2 = (char *)malloc_type_malloc(0x400uLL, 0xE3DFB912uLL);
  if (v2)
  {
    *(void *)uint64_t v1 = v2;
    *(void *)(v1 + 8) = v2 + 1023;
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v2;
    *(unsigned char *)(v1 + 32) = 1;
  }
  else
  {
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Could not allocate base for ReaderWriter", v5, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSFieldReaderWriter", @"IDS", @"Could not allocate base for ReaderWriter");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSFieldReaderWriter", @"Could not allocate base for ReaderWriter");
        }
      }
    }
    return 0;
  }
  return v1;
}

uint64_t IDSByteBufferInitForRead(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    sub_19DB751C4();
  }
  *(void *)Class result = a2;
  *(void *)(result + 8) = a2 + a3 - 1;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

BOOL sub_19D9E97BC(uint64_t a1)
{
  if (!a1) {
    sub_19DB751F0();
  }
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  size_t v3 = v2 + 1;
  uint64_t v4 = 2 * (v2 + 1);
  if (__CFADD__(v3, v3))
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_19DB7521C(result, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
  char v13 = (char *)malloc_type_malloc(2 * (v2 + 1), 0xC70FD46EuLL);
  if (v13)
  {
    double v14 = v13;
    memcpy(v13, *(const void **)a1, v3);
    free(*(void **)(a1 + 24));
    uint64_t v15 = *(void *)(a1 + 16) - *(void *)a1;
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = &v14[v4 - 1];
    *(void *)(a1 + 16) = &v14[v15];
    *(void *)(a1 + 24) = v14;
    return 1;
  }
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_19DB75258(result, v16, v17, v18, v19, v20, v21, v22);
    return 0;
  }
  return result;
}

BOOL IDSByteBufferWriteField(uint64_t a1, char a2, void *__src, size_t __n)
{
  if (!a1) {
    sub_19DB75294();
  }
  unsigned int v4 = __n;
  size_t v8 = __n;
  unint64_t v9 = __n + 3;
  while (1)
  {
    uint64_t v10 = *(unsigned char **)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 8) - (void)v10 + 1;
    if (v9 <= v11)
    {
      *uint64_t v10 = a2;
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v12 + 1;
      *(_WORD *)(v12 + 1) = __rev16(v4);
      char v13 = (void *)(*(void *)(a1 + 16) + 2);
      *(void *)(a1 + 16) = v13;
      memcpy(v13, __src, v8);
      *(void *)(a1 + 16) += v8;
      return v9 <= v11;
    }
    if (!*(unsigned char *)(a1 + 32)) {
      break;
    }
    if (!sub_19D9E97BC(a1)) {
      return v9 <= v11;
    }
  }
  BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
  if (v14) {
    sub_19DB752C0(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  return v9 <= v11;
}

BOOL IDSByteBufferReadField(uint64_t a1, unsigned char *a2, void *a3, _WORD *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    sub_19DB752FC();
  }
  id v5 = *(unsigned char **)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 8) - (void)v5 - 2) > 0xFFFFFFFFFFFFFFFCLL) {
    return 0;
  }
  *a2 = *v5;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8 + 1;
  uint64_t v9 = bswap32(*(unsigned __int16 *)(v8 + 1)) >> 16;
  *a4 = v9;
  uint64_t v10 = v8 + 3;
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 8) - v10 + 1;
  BOOL v12 = v11 >= v9;
  if (v11 < v9)
  {
    BOOL v14 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *a2;
      int v16 = (unsigned __int16)*a4;
      uint64_t v17 = *(void *)(a1 + 8) - *(void *)(a1 + 16) + 1;
      *(_DWORD *)kevent buf = 67109632;
      int v20 = v15;
      __int16 v21 = 1024;
      int v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = v17;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "readFieldFromByteBuffer not enough bytes, %u %u %ld", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSFieldReaderWriter", @"IDS", @"readFieldFromByteBuffer not enough bytes, %u %u %ld");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSFieldReaderWriter", @"readFieldFromByteBuffer not enough bytes, %u %u %ld");
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  else
  {
    *a3 = v10;
    uint64_t v13 = *(void *)(a1 + 16) + v9;
  }
  *(void *)(a1 + 16) = v13;
  return v12;
}

double IDSByteBufferRelease(uint64_t a1)
{
  if (!a1) {
    sub_19DB75328();
  }
  if (*(unsigned char *)(a1 + 32)) {
    free(*(void **)a1);
  }
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_19D9E9BDC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

BOOL IsSameIP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30) {
        return *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
      }
      else {
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL IsSameSA(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30)
      {
        if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2)) {
          return *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
        }
      }
      else if (*(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2))
      {
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
      }
    }
    return 0;
  }
  return v2;
}

BOOL IsValidSA(BOOL result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30)
    {
      if (*(_WORD *)(result + 2))
      {
        if (*(void *)(result + 8)) {
          BOOL v2 = 0;
        }
        else {
          BOOL v2 = *(void *)(result + 16) == 0;
        }
        return !v2;
      }
    }
    else if (v1 == 2 && *(_WORD *)(result + 2))
    {
      BOOL v2 = *(_DWORD *)(result + 4) == 0;
      return !v2;
    }
    return 0;
  }
  return result;
}

BOOL IsLinkLocalSA(BOOL result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30)
    {
      if (*(unsigned __int8 *)(result + 8) == 254) {
        return (*(unsigned char *)(result + 9) & 0xC0) == 128;
      }
    }
    else if (v1 == 2)
    {
      return *(__int16 *)(result + 4) == -343;
    }
    return 0;
  }
  return result;
}

char *IPv4ToString(char *__str, size_t __size, unsigned int a3)
{
  if (__str) {
    snprintf(__str, __size, "%u.%u.%u.%u", HIBYTE(a3), BYTE2(a3), BYTE1(a3), a3);
  }
  return __str;
}

char *SAToIPPortString(char *__str, size_t __size, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  unsigned int v3 = __size;
  unsigned int v4 = __str;
  if (*(unsigned char *)(a3 + 1) != 30)
  {
    unsigned int v16 = bswap32(*(_DWORD *)(a3 + 4));
    snprintf(__str, __size, "%u.%u.%u.%u:%u", HIBYTE(v16), BYTE2(v16), BYTE1(v16), v16, bswap32(*(unsigned __int16 *)(a3 + 2)) >> 16);
    return v4;
  }
  uint64_t v19 = (uint64_t)&v19;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22[15] = v5;
  *(_OWORD *)int v22 = v5;
  long long v21 = v5;
  MEMORY[0x1F4188790](__str);
  int v6 = 0;
  unsigned int v8 = bswap32(*(unsigned __int16 *)(v7 + 2));
  *(void *)uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v9 = HIWORD(v8);
  uint64_t v10 = v7 + 8;
  char v20 = 0;
  uint64_t v11 = v7 + 10;
  char v12 = 1;
  while (1)
  {
    if ((v12 & 1) == 0 || *(_WORD *)(v10 + 2 * v6))
    {
      if (v6) {
        __strncat_chk();
      }
      snprintf(v18, 8uLL, "%x", bswap32(*(unsigned __int16 *)(v10 + 2 * v6)) >> 16);
      strlen(v18);
      __strncat_chk();
      goto LABEL_9;
    }
    uint64_t v14 = v6;
    __strncat_chk();
    --v6;
    do
    {
      ++v6;
      if (v14 > 6) {
        break;
      }
    }
    while (!*(unsigned __int16 *)(v11 + 2 * v14++));
    if (v6 == 7) {
      break;
    }
    char v12 = 0;
LABEL_9:
    if (v6++ >= 7) {
      goto LABEL_19;
    }
  }
  __strncat_chk();
LABEL_19:
  snprintf(v4, v3, "[%s]:%u", &v20, v9);
  return v4;
}

unsigned __int8 *SAToIPString(uint64_t a1)
{
  int v1 = (unsigned __int8 *)a1;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[6] = v2;
    v22[7] = v2;
    v22[4] = v2;
    v22[5] = v2;
    v22[2] = v2;
    v22[3] = v2;
    v22[0] = v2;
    v22[1] = v2;
    SAToIPPortString((char *)v22, 0x80uLL, a1);
    long long v5 = objc_msgSend_stringWithUTF8String_(NSString, v3, (uint64_t)v22, v4);
    unsigned int v8 = v5;
    int v9 = v1[1];
    if (v9 == 2)
    {
      uint64_t v18 = objc_msgSend_rangeOfString_(v5, v6, @":", v7);
      uint64_t v17 = objc_msgSend_substringToIndex_(v8, v19, v18, v20);
    }
    else
    {
      if (v9 != 30)
      {
        int v1 = 0;
        goto LABEL_8;
      }
      uint64_t v10 = objc_msgSend_rangeOfString_(v5, v6, @"[", v7);
      char v12 = v11;
      uint64_t v14 = objc_msgSend_rangeOfString_(v8, v11, @"]", v13);
      uint64_t v17 = objc_msgSend_substringWithRange_(v8, v15, (uint64_t)&v12[v10], v16, v14 - (void)&v12[v10]);
    }
    int v1 = (unsigned __int8 *)v17;
LABEL_8:
  }
  return v1;
}

uint64_t SAToPort(uint64_t result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 2 || v1 == 30) {
      return bswap32(*(unsigned __int16 *)(result + 2)) >> 16;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SASetPort(uint64_t result, unsigned int a2)
{
  if (result)
  {
    int v2 = *(unsigned __int8 *)(result + 1);
    if (v2 == 2 || v2 == 30) {
      *(_WORD *)(result + 2) = __rev16(a2);
    }
  }
  return result;
}

uint64_t SAToIPVersion(uint64_t result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30) {
      return 96;
    }
    else {
      return 4 * (v1 == 2);
    }
  }
  return result;
}

uint64_t IPPortToSA4(unsigned int a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  if (!a4) {
    goto LABEL_5;
  }
  if (*a4 >= 0x10u)
  {
    *a4 = 16;
LABEL_5:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_WORD *)a3 = 528;
    *(_DWORD *)(a3 + 4) = bswap32(a1);
    *(_WORD *)(a3 + 2) = __rev16(a2);
    return a3;
  }
  return 0;
}

uint64_t IPPortToSA6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t getEffectiveInterface(uint64_t a1, int a2, char *a3, _DWORD *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  *(_OWORD *)char v12 = 0u;
  __strlcpy_chk();
  int v7 = socket(a2, 2, 0);
  if (v7 < 0) {
    return 0;
  }
  int v8 = v7;
  if (ioctl(v7, 0xC020699DuLL, &v11) < 0 || !if_indextoname(v12[0], a3))
  {
    uint64_t v9 = 0;
  }
  else
  {
    if (a4) {
      *a4 = v12[0];
    }
    uint64_t v9 = 1;
  }
  close(v8);
  return v9;
}

BOOL isInterfaceConstrained(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  __strlcpy_chk();
  int v3 = socket(a2, 2, 0);
  if (v3 < 0) {
    return 0;
  }
  int v4 = v3;
  BOOL v6 = ioctl(v3, 0xC02069CCuLL, &v8) != -1 && v9 != 0;
  close(v4);
  return v6;
}

uint64_t IPPortStringToSA(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v6 = objc_msgSend_rangeOfString_(v3, v4, @"[", v5);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v9 = objc_msgSend_rangeOfString_(v3, v7, @":", v8);
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v12 = v9;
      uint64_t v13 = v10;
      uint64_t v14 = objc_msgSend_substringToIndex_(v3, v10, v9, v11);
      uint64_t v17 = objc_msgSend_substringFromIndex_(v3, v15, (uint64_t)&v13[v12], v16);
      LODWORD(v41) = -1431655766;
      id v18 = v14;
      int v22 = (const char *)objc_msgSend_UTF8String(v18, v19, v20, v21);
      if (inet_pton(2, v22, &v41) == 1)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(_WORD *)a2 = 528;
        *(_DWORD *)(a2 + 4) = v41;
LABEL_9:
        *(_WORD *)(a2 + 2) = bswap32(objc_msgSend_intValue(v17, v23, v24, v25, (void)v41)) >> 16;
LABEL_11:

        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v26 = v6;
    uint64_t v27 = v7;
    uint64_t v28 = objc_msgSend_rangeOfString_(v3, v7, @"]:", v8);
    if (v28 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v31 = v28;
      double v32 = v29;
      uint64_t v33 = objc_msgSend_substringWithRange_(v3, v29, (uint64_t)&v27[v26], v30, v28 - (void)&v27[v26]);
      uint64_t v17 = objc_msgSend_substringFromIndex_(v3, v34, (uint64_t)&v32[v31], v35);
      *(void *)&long long v41 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      id v18 = v33;
      uint64_t v39 = (const char *)objc_msgSend_UTF8String(v18, v36, v37, v38);
      if (inet_pton(30, v39, &v41) == 1)
      {
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        *(_DWORD *)(a2 + 24) = 0;
        *(_WORD *)a2 = 7708;
        double v25 = *(double *)&v41;
        *(_OWORD *)(a2 + 8) = v41;
        goto LABEL_9;
      }
LABEL_10:
      a2 = 0;
      goto LABEL_11;
    }
  }
  a2 = 0;
LABEL_12:

  return a2;
}

uint64_t sub_19D9EADFC(double a1, uint64_t a2, const char *a3)
{
  return objc_msgSend_URIWithPrefixedURI_(IDSURI, a3, (uint64_t)a3, a1);
}

uint64_t sub_19D9EB0EC(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

uint64_t IDSQRProtoPluginControlResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_36:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
      }
      uint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19D9EDF80(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  v53[1] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = a4;
  int v15 = objc_msgSend_objectForKey_(v12, v13, (uint64_t)&unk_1EF028948, v14);
  char v18 = objc_msgSend_objectForKey_(v12, v16, (uint64_t)&unk_1EF028960, v17);

  uint64_t v20 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (v15 && v18)
  {
    id v22 = v15;
    CFDictionarySetValue(v20, &unk_1EF028978, v18);
  }
  else
  {
    if (v15)
    {
      id v26 = v15;
    }
    else
    {
      if (!v18)
      {
        uint64_t v48 = *(void **)(a1 + 32);
        double v49 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v19, @"com.apple.ids.IDSDecryptionErrorDomain", v21, 19, 0);
        objc_msgSend_failWithError_(v48, v50, (uint64_t)v49, v51);

        id v22 = 0;
        goto LABEL_21;
      }
      id v26 = v18;
    }
    id v22 = v26;
  }
  if (!objc_msgSend_code(v22, v23, v24, v25))
  {
    double v30 = objc_msgSend_domain(v22, v27, v28, v29);
    int isEqualToString = objc_msgSend_isEqualToString_(v30, v31, @"com.apple.messageprotection", v32);

    if (isEqualToString)
    {

      id v22 = 0;
    }
  }
  if (v9)
  {
    uint64_t v34 = *(void **)(a1 + 32);
    double v35 = [IDSMPDecryptionResult alloc];
    double v38 = objc_msgSend_initWithData_encryptedAttributes_withCommitState_additionalDecryptionResult_(v35, v36, (uint64_t)v9, v37, v10, v11, v20);
    objc_msgSend_fulfillWithValue_(v34, v39, (uint64_t)v38, v40);
  }
  else
  {
    long long v41 = objc_msgSend_accountIdentity(IDSFoundationLog, v27, v28, v29);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_19DB75918();
    }

    if (v22)
    {
      uint64_t v52 = *MEMORY[0x1E4F28A50];
      v53[0] = v22;
      double v38 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v42, (uint64_t)v53, v43, &v52, 1);
    }
    else
    {
      double v38 = 0;
    }
    int v44 = *(void **)(a1 + 32);
    double v45 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v42, @"com.apple.ids.IDSDecryptionErrorDomain", v43, 15, v38);
    objc_msgSend_failWithError_(v44, v46, (uint64_t)v45, v47);
  }
LABEL_21:
}

void sub_19D9EE7DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v11 = a4;
  if (v7)
  {
    char v13 = *(void **)(a1 + 48);
    double v14 = [IDSMPDecryptionResult alloc];
    double v17 = objc_msgSend_initWithData_encryptedAttributes_withCommitState_additionalDecryptionResult_(v14, v15, (uint64_t)v7, v16, 0, v11, 0);
    objc_msgSend_fulfillWithValue_(v13, v18, (uint64_t)v17, v19);
  }
  else
  {
    uint64_t v20 = objc_msgSend_accountIdentity(IDSFoundationLog, v9, v10, v12);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_19DB75AD4();
    }

    if (v8)
    {
      uint64_t v27 = *MEMORY[0x1E4F28A50];
      v28[0] = v8;
      double v17 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v21, (uint64_t)v28, v22, &v27, 1);
    }
    else
    {
      double v17 = 0;
    }
    char v23 = *(void **)(a1 + 48);
    uint64_t v24 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v21, @"com.apple.ids.IDSDecryptionErrorDomain", v22, 18, v17);
    objc_msgSend_failWithError_(v23, v25, (uint64_t)v24, v26);
  }
}

void sub_19D9F15B0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19D9F15D0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_19D9F1618(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

uint64_t sub_19D9F1664(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_19D9F16AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_19D9F16EC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_19D9F170C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_19D9F172C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

uint64_t IDSQRProtoAllocBindTestOptionReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        double v17 = objc_alloc_init(IDSQRProtoExperimentOverride);
        objc_msgSend_addExperimentOverrides_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoExperimentOverrideReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_19D9F2CC0()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F400 = result;
  return result;
}

void sub_19D9F2CF0(uint64_t a1, void *a2)
{
  id v17 = a2;
  if (!objc_msgSend_response(v17, v3, v4, v5) && (uint64_t v7 = *(void *)(a1 + 32)) != 0
    || objc_msgSend_response(v17, v6, v7, v8) == 1 && (uint64_t v7 = *(void *)(a1 + 40)) != 0)
  {
    uint64_t v9 = objc_msgSend_URLWithString_(MEMORY[0x1E4F1CB10], v6, v7, v8);
    if (v9)
    {
      char v13 = (void *)v9;
      double v14 = objc_msgSend_defaultWorkspace((void *)qword_1E944F400, v10, v11, v12);
      objc_msgSend_openURL_configuration_completionHandler_(v14, v15, (uint64_t)v13, v16, 0, &unk_1EEFCDE38);
    }
  }
}

void sub_19D9F2DA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    uint64_t v7 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v3, v4, v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "Failed to send registration push for prompt {error: %@}", (uint8_t *)&v8, 0xCu);
    }
  }
}

void *IDSNAT64PrefixCreate(const void *a1, unsigned int a2, int a3)
{
  size_t v6 = 16 * a2;
  uint64_t v7 = malloc_type_malloc(v6 + 24, 0x1604095AuLL);
  int v8 = v7;
  if (v7)
  {
    void *v7 = v7 + 3;
    memcpy(v7 + 3, a1, v6);
    *((_DWORD *)v8 + 2) = a2;
    *((_DWORD *)v8 + 3) = a3;
  }
  return v8;
}

void IDSNAT64PrefixDestroy(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t IDSNAT64PrefixGetPrefix(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[2];
  return *(void *)a1;
}

void *IDSNAT64PrefixCacheCreate()
{
  uint64_t result = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  *uint64_t result = 0;
  return result;
}

void IDSNAT64PrefixCacheDestroy(void *a1)
{
  if (a1)
  {
    int v2 = (void *)*a1;
    if (v2)
    {
      do
      {
        id v3 = (void *)v2[2];
        free(v2);
        int v2 = v3;
      }
      while (v3);
    }
    free(a1);
  }
}

uint64_t IDSNAT64PrefixCacheGetPrefixes(uint64_t *a1, int a2)
{
  for (uint64_t result = *a1; result; uint64_t result = *(void *)(result + 16))
  {
    if (*(_DWORD *)(result + 12) == a2) {
      break;
    }
  }
  return result;
}

void IDSNAT64PrefixCacheSetPrefixes(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(v4 + 12) == v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *a1;
LABEL_7:
      id v9 = (void *)(v6 + 16);
      if (!v6) {
        id v9 = a1;
      }
      void *v9 = *(void *)(v7 + 16);
      free((void *)v7);
      uint64_t v4 = *a1;
    }
    else
    {
      uint64_t v8 = *a1;
      while (1)
      {
        uint64_t v7 = *(void *)(v8 + 16);
        if (!v7) {
          break;
        }
        uint64_t v6 = v8;
        uint64_t v8 = *(void *)(v8 + 16);
        if (*(_DWORD *)(v7 + 12) == v5) {
          goto LABEL_7;
        }
      }
    }
  }
  *(void *)(a2 + 16) = v4;
  *a1 = a2;
}

uint64_t *IDSNAT64PrefixCacheGetFirstPrefix(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    if (*result)
    {
      while (*(_DWORD *)(v2 + 12) != a2)
      {
        uint64_t v2 = *(void *)(v2 + 16);
        if (!v2) {
          return 0;
        }
      }
      return *(uint64_t **)v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_19D9F4AB8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19D9F4DA4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1E944F0D0;
  qword_1E944F0D0 = (uint64_t)v1;
}

id sub_19D9F5164(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  if (objc_opt_isKindOfClass())
  {
    id v12 = v8;
  }
  else
  {
    if (v8)
    {
      char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v9, v10, v11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        sub_19DB76384((uint64_t)v5, a1, v13);
      }
    }
    id v12 = 0;
  }

  return v12;
}

void sub_19D9F5220(uint64_t a1, void *a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    double v7 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = @"YES";
      uint64_t v9 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(a1 + 64)) {
        uint64_t v8 = @"NO";
      }
      *(_DWORD *)kevent buf = 138413058;
      id v27 = v5;
      __int16 v28 = 2112;
      double v29 = v8;
      __int16 v30 = 2112;
      id v31 = v6;
      __int16 v32 = 2112;
      uint64_t v33 = v9;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "BlastDoorError: Received from blast door, result {%@} Will Fault On error? {%@} error {%@} for incoming payload {%@}", buf, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"IDSBlastDoorConnectionHelper", @"BlastDoorError: Received from blast door, result {%@} Will Fault On error? {%@} error {%@} for incoming payload {%@}");
    }
    (*(void (**)(void, void, void, id))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), v6);
  }
  else
  {
    uint64_t v10 = [IDSAPSUserPayload alloc];
    char v13 = objc_msgSend_initWithBlastDoorObject_(v10, v11, (uint64_t)v5, v12);
    id v17 = v13;
    if (!*(unsigned char *)(a1 + 64)) {
      objc_msgSend_logHeaderDiffAgainstSource_(v13, v14, *(void *)(a1 + 40), v16);
    }
    double v19 = objc_msgSend_payload(v17, v14, v15, v16);
    if (*(unsigned char *)(a1 + 65)) {
      objc_msgSend_addAllowlistedKey_toValidatedPayload_fromOriginalPayload_(*(void **)(a1 + 48), v18, @"i", v20, v19, *(void *)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 66)) {
      objc_msgSend_addAllowlistedKey_toValidatedPayload_fromOriginalPayload_(*(void **)(a1 + 48), v18, @"b", v20, v19, *(void *)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 64))
    {
      objc_msgSend_auditMissingHeaderKeys_target_(*(void **)(a1 + 48), v18, *(void *)(a1 + 32), v20, v19);
      uint64_t v21 = *(void *)(a1 + 56);
      double v25 = objc_msgSend_copy(v19, v22, v23, v24);
      (*(void (**)(uint64_t, void *, void, void))(v21 + 16))(v21, v25, *(unsigned __int8 *)(a1 + 64), 0);
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
}

void sub_19D9F56CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    double v7 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      id v48 = v6;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received Error %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"IDSBlastDoorConnectionHelper", @"IDSBlastDoor: Received Error %@");
    }
    uint64_t v8 = im_primary_queue();
    uint64_t v9 = block;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19D9F5C14;
    block[3] = &unk_1E5970A78;
    id v46 = *(id *)(a1 + 32);
    id v45 = v6;
    dispatch_async(v8, block);

LABEL_23:
    id v16 = (id)v9[5];
    goto LABEL_24;
  }
  uint64_t v10 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412546;
    id v48 = v5;
    __int16 v49 = 2112;
    id v50 = (id)objc_opt_class();
    id v11 = v50;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received result %@ class %@", buf, 0x16u);
  }
  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    objc_opt_class();
    _IDSLogV(0, @"IDSFoundation", @"IDSBlastDoorConnectionHelper", @"IDSBlastDoor: Received result %@ class %@");
  }
  double v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  if ((objc_msgSend_isSubclassOfClass_(v12, v14, v13, v15) & 1) == 0)
  {
    __int16 v30 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "IDSBlastDoor: Received result is not a dictionary", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"IDSBlastDoorConnectionHelper", @"IDSBlastDoor: Received result is not a dictionary");
    }
    id v31 = im_primary_queue();
    uint64_t v9 = v41;
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = sub_19D9F5C30;
    v41[3] = &unk_1E5970A78;
    id v32 = *(id *)(a1 + 32);
    id v42 = 0;
    id v43 = v32;
    dispatch_async(v31, v41);

    goto LABEL_23;
  }
  id v16 = v5;
  double v20 = objc_msgSend_objectForKey_(v16, v17, @"ids-client-message-type", v18);
  if (v20
    && (objc_msgSend_objectForKey_(v16, v19, @"ids-client-message-type", v21),
        double v22 = objc_claimAutoreleasedReturnValue(),
        int isEqual = objc_msgSend_isEqual_(v22, v23, (uint64_t)&unk_1EF028990, v24),
        v22,
        v20,
        isEqual))
  {
    double v26 = im_primary_queue();
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = sub_19D9F5C4C;
    v38[3] = &unk_1E5970A78;
    id v27 = &v40;
    id v28 = *(id *)(a1 + 32);
    double v29 = (id *)&v39;
    uint64_t v39 = 0;
    id v40 = v28;
    dispatch_async(v26, v38);
  }
  else
  {
    uint64_t v33 = im_primary_queue();
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = sub_19D9F5C68;
    v34[3] = &unk_1E5970AA0;
    id v37 = *(id *)(a1 + 32);
    id v35 = v16;
    double v36 = 0;
    dispatch_async(v33, v34);

    id v27 = &v37;
    double v29 = &v35;
    double v26 = v36;
  }

LABEL_24:
}

uint64_t sub_19D9F5C14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

uint64_t sub_19D9F5C30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

uint64_t sub_19D9F5C4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 1, *(void *)(a1 + 32));
}

uint64_t sub_19D9F5C68(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(a1[6] + 16))(a1[6], a1[4], 2, a1[5]);
}

void *IDSOSDataChannelCreate(int a1, uint64_t a2)
{
  *(void *)&v17[5] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) == 0 && a2 || a1 < 0 && !a2)
  {
    uint64_t v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109376;
      v17[0] = a1;
      LOWORD(v17[1]) = 2048;
      *(void *)((char *)&v17[1] + 2) = a2;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "Invalid fd,channel: %d,%p\n", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"Invalid fd,channel: %d,%p\n");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"Invalid fd,channel: %d,%p\n");
        }
      }
    }
    return 0;
  }
  id v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040F1EC886AuLL);
  if (!v5)
  {
    uint64_t v9 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "out of memory", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"out of memory");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"out of memory");
        }
      }
    }
    return 0;
  }
  id v6 = v5;
  if (a2)
  {
    if (os_channel_attr_create())
    {
      if (os_channel_read_attr())
      {
        int v7 = *__error();
        uint64_t v8 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 136315138;
          *(void *)id v17 = strerror(v7);
          _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "os_channel_read_attr failed: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            strerror(v7);
            _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"os_channel_read_attr failed: %s");
            if (_IDSShouldLog())
            {
              strerror(v7);
              _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"os_channel_read_attr failed: %s");
            }
          }
        }
      }
      else if (os_channel_attr_get())
      {
        int v13 = *__error();
        double v14 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 136315138;
          *(void *)id v17 = strerror(v13);
          _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "os_channel_attr_get failed: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            strerror(v13);
            _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"os_channel_attr_get failed: %s");
            if (_IDSShouldLog())
            {
              strerror(v13);
              _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"os_channel_attr_get failed: %s");
            }
          }
        }
      }
      os_channel_attr_destroy();
      v6[5] = 0;
    }
    else
    {
      int v11 = *__error();
      double v12 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315138;
        *(void *)id v17 = strerror(v11);
        _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "os_channel_attr_create failed: %s", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          strerror(v11);
          _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"os_channel_attr_create failed: %s");
          if (_IDSShouldLog())
          {
            strerror(v11);
            _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"os_channel_attr_create failed: %s");
          }
        }
      }
      v6[5] = 0;
    }
    IDSOSDataChannelDestroy(v6);
    return 0;
  }
  uint64_t v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "use socket", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"use socket");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"use socket");
      }
    }
  }
  *(_DWORD *)id v6 = a1;
  return v6;
}

void IDSOSDataChannelDestroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[3];
    if (v2) {
      free(v2);
    }
    id v3 = (void *)a1[4];
    if (v3) {
      free(v3);
    }
    uint64_t v4 = (void *)a1[6];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

uint64_t IDSOSDataChannelFd(unsigned int *a1)
{
  if (a1) {
    return *a1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t IDSOSDataChannelSetNonBlocking(uint64_t a1)
{
  if (a1
    && !*(void *)(a1 + 8)
    && ((int v3 = fcntl(*(_DWORD *)a1, 3, 0), v3 < 0) || fcntl(*(_DWORD *)a1, 4, v3 | 4u) < 0))
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
}

ssize_t IDSOSDataChannelRead(uint64_t a1, char *__dst, size_t __n, int a4, BOOL *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *a5 = 0;
    int v11 = __error();
    int v12 = 9;
    goto LABEL_40;
  }
  size_t v6 = __n;
  int v7 = __dst;
  if (*(void *)(a1 + 8))
  {
    size_t v9 = *(unsigned __int16 *)(a1 + 56);
    if (*(_WORD *)(a1 + 56))
    {
      if (v9 >= v6)
      {
        *a5 = 0;
        memcpy(__dst, *(const void **)(a1 + 48), v6);
        *(_WORD *)(a1 + 56) -= v6;
        return v6;
      }
      memcpy(__dst, *(const void **)(a1 + 48), v9);
      uint64_t v10 = *(unsigned __int16 *)(a1 + 56);
      v6 -= v10;
      double v36 = v7;
      v7 += v10;
      *(_WORD *)(a1 + 56) = 0;
    }
    else
    {
      double v36 = __dst;
    }
    if (*(_DWORD *)(a1 + 16) && v6)
    {
      uint64_t v15 = 0;
      do
      {
        unsigned int v16 = os_channel_available_slot_count();
        if (v16)
        {
          unsigned int v17 = 1;
          while (1)
          {
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v39 = v18;
            long long v40 = v18;
            *(_OWORD *)__na = v18;
            *(_OWORD *)__src = v18;
            uint64_t next_slot = os_channel_get_next_slot();
            double v20 = (char *)__src[0];
            if (v6 < WORD1(__na[0])) {
              break;
            }
            memcpy(v7, __src[0], WORD1(__na[0]));
            v6 -= WORD1(__na[0]);
            v7 += WORD1(__na[0]);
            if (v17 < v16)
            {
              ++v17;
              if (v6) {
                continue;
              }
            }
            if (!next_slot) {
              goto LABEL_29;
            }
            goto LABEL_22;
          }
          memcpy(v7, __src[0], v6);
          unsigned __int16 v21 = WORD1(__na[0]) - v6;
          *(_WORD *)(a1 + 56) = WORD1(__na[0]) - v6;
          memcpy(*(void **)(a1 + 48), &v20[v6], v21);
          v7 += v6;
          size_t v6 = 0;
          if (!next_slot) {
            continue;
          }
LABEL_22:
          int v22 = os_channel_advance_slot();
          if (v22)
          {
            uint64_t v23 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(__na[0]) = 67109120;
              HIDWORD(__na[0]) = v22;
              _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "advance_slot failed for read %d", (uint8_t *)__na, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"advance_slot failed for read %d");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"advance_slot failed for read %d");
                }
              }
            }
          }
        }
LABEL_29:
        ;
      }
      while (++v15 < (unint64_t)*(unsigned int *)(a1 + 16) && v6 != 0);
    }
    uint64_t v25 = *(void *)(a1 + 8);
    if (v25) {
      os_channel_sync();
    }
    *a5 = v25 != 0;
    double v26 = (void *)qword_1E944F990;
    if (qword_1E944F990)
    {
      uint64_t v27 = os_channel_ring_notify_time();
      uint64_t v28 = os_channel_ring_sync_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v26, v29, @"IDSOSDataChannelRead RX", v30, v27, v28);
      id v31 = (void *)qword_1E944F990;
      uint64_t v32 = os_channel_ring_sync_time();
      uint64_t v33 = os_channel_ring_notify_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v31, v34, @"IDSOSDataChannelRead TX", v35, v32, v33);
    }
    size_t v6 = v7 - v36;
    if (v7 > v36) {
      return v6;
    }
    int v11 = __error();
    int v12 = 35;
LABEL_40:
    *int v11 = v12;
    return -1;
  }
  *a5 = 0;
  int v13 = *(_DWORD *)a1;
  return recv(v13, __dst, __n, a4);
}

uint64_t IDSOSDataChannelSync(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !*(void *)(a1 + 8))
  {
    if (a3)
    {
      if (*a3) {
        sub_19DB76484();
      }
    }
    return 0;
  }
  if (!a3)
  {
    os_channel_sync();
    return 1;
  }
  if (!*a3) {
    return 0;
  }
  os_channel_sync();
  *a3 = 0;
  return 1;
}

ssize_t IDSOSDataChannelWrite(uint64_t a1, char *a2, size_t a3, int a4, int a5, _DWORD *a6, unsigned char *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *a7 = 0;
    *__error() = 9;
    return -1;
  }
  size_t v7 = a3;
  if (*(void *)(a1 + 8))
  {
    if (!a6) {
      sub_19DB764B0();
    }
    if (*(_DWORD *)(a1 + 20) && a3)
    {
      id v37 = a7;
      uint64_t v10 = 0;
      int v11 = a2;
      do
      {
        unsigned int v12 = os_channel_available_slot_count();
        if (v12)
        {
          unsigned int v13 = 1;
          do
          {
            *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v40 = v14;
            long long v41 = v14;
            *(_OWORD *)kevent buf = v14;
            *(_OWORD *)__dst = v14;
            uint64_t next_slot = os_channel_get_next_slot();
            *(_WORD *)kevent buf = 0;
            size_t v16 = *(void *)(a1 + 40);
            if (v7 < v16) {
              LOWORD(v16) = v7;
            }
            *(_WORD *)&buf[2] = v16;
            memcpy(__dst[0], v11, (unsigned __int16)v16);
            uint64_t v17 = *(unsigned __int16 *)&buf[2];
            os_channel_set_slot_properties();
            v7 -= v17;
            v11 += v17;
            ++*a6;
            if (v13 >= v12) {
              break;
            }
            ++v13;
          }
          while (v7);
          if (next_slot)
          {
            int v18 = os_channel_advance_slot();
            if (v18)
            {
              double v19 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)kevent buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v18;
                _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "advance_slot failed for write %d", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"IDSOSDataChannel", @"IDS", @"advance_slot failed for write %d");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"IDSOSDataChannel", @"advance_slot failed for write %d");
                  }
                }
              }
            }
          }
        }
      }
      while (++v10 < (unint64_t)*(unsigned int *)(a1 + 20) && v7 != 0);
      a7 = v37;
      unsigned char *v37 = 0;
      BOOL v24 = v11 > a2;
      uint64_t v21 = v11 - a2;
      if (v24)
      {
        if (a5) {
          unsigned char *v37 = IDSOSDataChannelSync(a1, 1, a6);
        }
        goto LABEL_37;
      }
    }
    else
    {
      *a7 = 0;
    }
    *a7 = IDSOSDataChannelSync(a1, 1, a6);
    *__error() = 35;
    uint64_t v21 = -1;
LABEL_37:
    uint64_t v25 = (void *)qword_1E944F990;
    if (qword_1E944F990)
    {
      uint64_t v26 = os_channel_ring_notify_time();
      uint64_t v27 = os_channel_ring_sync_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v25, v28, @"IDSOSDataChannelWrite RX", v29, v26, v27);
      double v30 = (void *)qword_1E944F990;
      uint64_t v31 = os_channel_ring_sync_time();
      uint64_t v32 = os_channel_ring_notify_time();
      objc_msgSend_consumeTimeCheckForEvent_produceTime_consumeTime_(v30, v33, @"IDSOSDataChannelWrite TX", v34, v31, v32);
    }
    return v21;
  }
  *a7 = 0;
  int v22 = *(_DWORD *)a1;
  return send(v22, a2, a3, a4);
}

BOOL IDSQRProtoPutMaterialResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  size_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t IDSQRProtoReallocateIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 24;
          goto LABEL_24;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 48;
          goto LABEL_24;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_24;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_24;
        case 5u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 40;
LABEL_24:
          double v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        case 0xFu:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 56) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
        *(void *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0) {
          goto LABEL_37;
        }
        v21 += 7;
        BOOL v14 = v22++ >= 9;
        if (v14)
        {
          uint64_t v23 = 0;
          goto LABEL_39;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v23 = 0;
      }
LABEL_39:
      *(void *)(a1 + 8) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoTestRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_44;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_46:
          uint64_t v36 = 24;
          goto LABEL_55;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_50:
          uint64_t v36 = 12;
          goto LABEL_55;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          break;
        case 4u:
          uint64_t v34 = PBReaderReadString();
          double v35 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v34;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 == -1 || v32 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
        *(void *)(a2 + v31) = v32 + 1;
        v19 |= (unint64_t)(v33 & 0x7F) << v29;
        if ((v33 & 0x80) == 0) {
          goto LABEL_52;
        }
        v29 += 7;
        BOOL v14 = v30++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_54:
      uint64_t v36 = 8;
LABEL_55:
      *(_DWORD *)(a1 + v36) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoParticipantUpdateParticipantModeInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _IDSCertifiedDeliveryVersion()
{
  if (_os_feature_enabled_impl()) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t IDSQRProtoMaterialInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 16;
          goto LABEL_30;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_41:
          uint64_t v32 = 24;
          goto LABEL_46;
        case 3u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 8;
LABEL_30:
          unsigned int v26 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v30 + 1;
        v22 |= (unint64_t)(v31 & 0x7F) << v27;
        if ((v31 & 0x80) == 0) {
          goto LABEL_43;
        }
        v27 += 7;
        BOOL v14 = v28++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_45:
      uint64_t v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id NWLinkQueue()
{
  if (qword_1E944F250 != -1) {
    dispatch_once(&qword_1E944F250, &unk_1EEFCD4D8);
  }
  id v0 = (void *)qword_1E944F258;
  return v0;
}

void sub_19D9FE348()
{
  id v0 = dispatch_queue_attr_make_initially_inactive(0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.ids-IDSNWLink", v0);
  uint64_t v2 = (void *)qword_1E944F258;
  qword_1E944F258 = (uint64_t)v1;

  int v3 = IDSRealTimeContext();
  nw_queue_context_target_dispatch_queue();

  uint64_t v4 = qword_1E944F258;
  dispatch_activate(v4);
}

id _tokenWithParameters(void *a1, void *a2, void *a3, unint64_t a4, uint64_t a5)
{
  id v9 = a3;
  unint64_t v10 = a2;
  uint64_t v11 = a1;
  hostname = nw_endpoint_get_hostname(v11);
  char v13 = nw_endpoint_get_hostname(v10);
  unsigned int port = nw_endpoint_get_port(v11);

  unsigned int v15 = nw_endpoint_get_port(v10);
  if (a4 - 7 > 3)
  {
    if (a4 > 1)
    {
      char v20 = "UDP";
      switch(a4)
      {
        case 0uLL:
          goto LABEL_13;
        case 1uLL:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s", v17, hostname, port, v13, v15, v9, "CD");
          break;
        case 2uLL:
          unsigned int v19 = NSString;
          uint64_t v18 = "CDH2";
          goto LABEL_5;
        case 3uLL:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s", v17, hostname, port, v13, v15, v9, "RU");
          break;
        case 4uLL:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s", v17, hostname, port, v13, v15, v9, "ID");
          break;
        case 5uLL:
          char v20 = "QR";
LABEL_13:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s", v17, hostname, port, v13, v15, v9, v20);
          break;
        case 6uLL:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s%llu", v17, hostname, port, v13, v15, v9, "QR+", a5);
          break;
        default:
          objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu-%@-%s", v17, hostname, port, v13, v15, v9, "??");
          break;
      }
    }
    else
    {
      objc_msgSend_stringWithFormat_(NSString, v16, @"%s:%hu-%s:%hu", v17, hostname, port, v13, v15);
    }
  }
  else
  {
    uint64_t v18 = off_1E5973BC8[a4 - 7];
    unsigned int v19 = NSString;
LABEL_5:
    objc_msgSend_stringWithFormat_(v19, v16, @"%s:%hu-%s:%hu-%s", v17, hostname, port, v13, v15, v18);
  unsigned int v21 = };

  return v21;
}

id _tokenForNWLinkConnection(void *a1)
{
  id v1 = a1;
  id v5 = objc_msgSend_localEndpoint(v1, v2, v3, v4);
  id v9 = objc_msgSend_remoteEndpoint(v1, v6, v7, v8);
  char v13 = objc_msgSend_sessionID(v1, v10, v11, v12);
  unint64_t v17 = objc_msgSend_type(v1, v14, v15, v16);
  uint64_t v21 = objc_msgSend_connectionID(v1, v18, v19, v20);

  uint64_t v22 = _tokenWithParameters(v5, v9, v13, v17, v21);

  return v22;
}

uint64_t _supportsNAT64(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3 = (int)a2;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1) == 2) {
    uint64_t does_interface_index_support_nat64 = nw_nat64_does_interface_index_support_nat64();
  }
  else {
    uint64_t does_interface_index_support_nat64 = 0;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v22 = v6;
  long long v23 = v6;
  long long v20 = v6;
  long long v21 = v6;
  long long v18 = v6;
  long long v19 = v6;
  *(_OWORD *)__str = v6;
  long long v17 = v6;
  uint64_t v7 = objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, -3.72066208e-103);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = SAToIPPortString(__str, 0x80uLL, a1);
    id v9 = @"NO";
    v11[0] = 67109634;
    v11[1] = v3;
    if (does_interface_index_support_nat64) {
      id v9 = @"YES";
    }
    __int16 v12 = 2080;
    char v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "Interface %d (%s) supports NAT64: %@", (uint8_t *)v11, 0x1Cu);
  }

  return does_interface_index_support_nat64;
}

const char *_getPathForMessageType(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  int v5 = a1 - 1;
  uint64_t result = "/QR/AllocBind";
  switch(v5)
  {
    case 0:
      return result;
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 15:
    case 16:
    case 18:
    case 20:
    case 22:
    case 24:
    case 25:
    case 27:
    case 29:
    case 30:
    case 32:
      goto LABEL_6;
    case 2:
      uint64_t result = "/QR/Indications";
      break;
    case 4:
      uint64_t result = "/QR/Info";
      break;
    case 6:
      uint64_t result = "/QR/ParticipantUpdate";
      break;
    case 9:
      uint64_t result = "/QR/PluginControl";
      break;
    case 13:
      uint64_t result = "/QR/Reallocate";
      break;
    case 14:
      uint64_t result = "/QR/SessionInfo";
      break;
    case 17:
      uint64_t result = "/QR/Stats";
      break;
    case 19:
      uint64_t result = "/QR/Test";
      break;
    case 21:
      uint64_t result = "/QR/UnAllocBind";
      break;
    case 23:
    case 26:
      uint64_t result = "/QR/Material";
      break;
    case 28:
    case 33:
      uint64_t result = "/QR/E2EChannelRegister";
      break;
    case 31:
      uint64_t result = "/QR/E2EChannelRegisterAck";
      break;
    default:
      if (a1 == 1001)
      {
        uint64_t result = "/QR/ChannelData";
      }
      else
      {
LABEL_6:
        uint64_t v7 = objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, a4);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB76780(a1, v7, v8, v9, v10, v11, v12, v13);
        }

        uint64_t result = "/QR/Unknown";
      }
      break;
  }
  return result;
}

uint64_t _getHTTPMethodForMessageType(int a1)
{
  uint64_t result = 1;
  if (a1 > 26)
  {
    if (a1 != 27)
    {
      if (a1 != 1001) {
        return 4;
      }
      return 6;
    }
  }
  else if (a1 != 3)
  {
    return 4;
  }
  return result;
}

NSObject *_createQRContentContext(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a3;
  uint64_t v8 = nw_content_context_create("QR request");
  metadata = nw_http_create_metadata();
  uint64_t v10 = nw_endpoint_copy_address_string(v7);
  int port = nw_endpoint_get_port(v7);

  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v12;
  long long v25 = v12;
  long long v22 = v12;
  long long v23 = v12;
  long long v20 = v12;
  long long v21 = v12;
  *(_OWORD *)__str = v12;
  long long v19 = v12;
  snprintf(__str, 0x80uLL, "https://%s:%u", v10, port);
  free(v10);
  nw_endpoint_t url = nw_endpoint_create_url(__str);
  nw_http_metadata_set_endpoint();
  nw_http_metadata_set_method();
  nw_http_metadata_set_path();
  nw_http_metadata_add_header();
  nw_http_metadata_add_header();
  nw_http_metadata_add_header();
  if (a5)
  {
    nw_http_metadata_add_header();
  }
  else
  {
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)double v16 = v14;
    long long v17 = v14;
    snprintf(v16, 0x20uLL, "%llu", a4);
  }
  nw_http_metadata_add_header();
  nw_content_context_set_metadata_for_protocol(v8, metadata);

  return v8;
}

NSObject *_nwProtocolMetaDataForTrafficClass(int a1)
{
  uint64_t v2 = 0;
  if (a1 > 699)
  {
    switch(a1)
    {
      case 700:
        int v3 = &qword_1E944F420;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E944F420;
        if (!qword_1E944F420)
        {
          nw_service_class_t v5 = nw_service_class_interactive_video;
          goto LABEL_18;
        }
        break;
      case 800:
        int v3 = &qword_1E944F428;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E944F428;
        if (!qword_1E944F428)
        {
          nw_service_class_t v5 = nw_service_class_interactive_voice;
          goto LABEL_18;
        }
        break;
      case 900:
        int v3 = &qword_1E944F430;
        nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E944F430;
        if (!qword_1E944F430)
        {
          nw_service_class_t v5 = nw_service_class_signaling;
LABEL_18:
          nw_protocol_metadata_t metadata = nw_ip_create_metadata();
          nw_protocol_metadata_t v7 = (nw_protocol_metadata_t)*v3;
          *int v3 = (uint64_t)metadata;

          nw_ip_metadata_set_service_class((nw_protocol_metadata_t)*v3, v5);
          nw_ip_metadata_set_enable_fragmentation();
          nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)*v3;
        }
        break;
      default:
        goto LABEL_20;
    }
  }
  else
  {
    if (a1 != 100 && a1 != 200)
    {
      if (a1 != 600) {
        goto LABEL_20;
      }
      int v3 = &qword_1E944F418;
      nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E944F418;
      if (qword_1E944F418) {
        goto LABEL_19;
      }
      nw_service_class_t v5 = nw_service_class_responsive_data;
      goto LABEL_18;
    }
    int v3 = &qword_1E944F410;
    nw_protocol_metadata_t v4 = (nw_protocol_metadata_t)qword_1E944F410;
    if (!qword_1E944F410)
    {
      nw_service_class_t v5 = nw_service_class_background;
      goto LABEL_18;
    }
  }
LABEL_19:
  uint64_t v2 = v4;
LABEL_20:
  return v2;
}

void sub_19D9FF6C4(uint64_t a1, const char *a2, void *a3, double a4)
{
  nw_protocol_metadata_t v4 = *(void **)(a1 + 32);
  objc_msgSend_connection(a3, a2, (uint64_t)a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v4, v5, (uint64_t)v7, v6);
}

void sub_19D9FF71C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v7 = objc_msgSend_connection(v3, v4, v5, v6);
  nw_connection_cancel(v7);

  connectiouint64_t n = objc_msgSend_connection(v3, v8, v9, v10);

  nw_connection_set_state_changed_handler(connection, 0);
}

void sub_19D9FF790(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v7 = objc_msgSend_connection(v3, v4, v5, v6);
  nw_connection_cancel(v7);

  connectiouint64_t n = objc_msgSend_connection(v3, v8, v9, v10);

  nw_connection_set_state_changed_handler(connection, 0);
}

uint64_t sub_19D9FF804(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), a2, a3, a4, 1);
}

uint64_t sub_19D9FF810(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, 1);
}

void sub_19D9FFDB0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  if (a2 != 3
    || (objc_msgSend_IDSNWLink(IDSFoundationLog, v11, v12, v14),
        uint64_t v15 = objc_claimAutoreleasedReturnValue(),
        BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG),
        v15,
        v16))
  {
    unint64_t v17 = objc_msgSend_type(v13, v11, v12, v14);
    if (v17 > 0xA) {
      long long v21 = "??";
    }
    else {
      long long v21 = off_1E5973C08[v17];
    }
    unint64_t v24 = objc_msgSend_state(v13, v18, v19, v20) - 1;
    if (v24 > 3) {
      uint64_t v26 = "Connecting";
    }
    else {
      uint64_t v26 = off_1E5973BE8[v24];
    }
    char v27 = objc_msgSend_sessionID(v13, v22, v23, v25);
    char v31 = objc_msgSend_parent(v13, v28, v29, v30);

    if (v31)
    {
      id v34 = [NSString alloc];
      double v38 = objc_msgSend_parent(v13, v35, v36, v37);
      uint64_t v42 = objc_msgSend_connectionID(v38, v39, v40, v41);
      id v45 = (__CFString *)objc_msgSend_initWithFormat_(v34, v43, @"(C%llu)", v44, v42);

      if (v27)
      {
LABEL_11:
        id v46 = objc_msgSend_substringToIndex_(v27, v32, 8, v33);
        id v47 = [NSString alloc];
        uint64_t v51 = objc_msgSend_connectionID(v13, v48, v49, v50);
        double v54 = objc_msgSend_initWithFormat_(v47, v52, @"%-3s connection %@ [C%llu%@] (%s) %s", v53, v21, v46, v51, v45, v26, a3);

        goto LABEL_14;
      }
    }
    else
    {
      id v45 = &stru_1EEFDAD58;
      if (v27) {
        goto LABEL_11;
      }
    }
    id v55 = [NSString alloc];
    uint64_t v59 = objc_msgSend_connectionID(v13, v56, v57, v58);
    double v54 = objc_msgSend_initWithFormat_(v55, v60, @"%-3s connection [C%llu%@] (%s) %s", v61, v21, v59, v45, v26, a3);
LABEL_14:
    id v62 = [NSString alloc];
    double v67 = objc_msgSend_initWithFormat_arguments_(v62, v63, (uint64_t)v54, v64, &a9);
    switch(a2)
    {
      case 2:
        uint64_t v69 = objc_msgSend_IDSNWLink(IDSFoundationLog, v65, v66, v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
          sub_19DB767EC((uint64_t)v67, v69);
        }
        break;
      case 3:
        uint64_t v69 = objc_msgSend_IDSNWLink(IDSFoundationLog, v65, v66, v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
          sub_19DB76864((uint64_t)v67, v69);
        }
        break;
      case 1:
        uint64_t v69 = objc_msgSend_IDSNWLink(IDSFoundationLog, v65, v66, v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 138412290;
          double v71 = v67;
          _os_log_impl(&dword_19D9BE000, v69, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
        }
        break;
      default:
LABEL_24:

        goto LABEL_25;
    }

    goto LABEL_24;
  }
LABEL_25:
}

uint64_t sub_19DA000BC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__failConnectionsRandomly(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19DA01BA8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
    char v5 = objc_opt_respondsToSelector();

    if (v5)
    {
      id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
      objc_msgSend_link_didMitigateCollision_(v8, v6, *(void *)(a1 + 32), v7, 0);
    }
  }
}

void sub_19DA01C78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
    char v5 = objc_opt_respondsToSelector();

    if (v5)
    {
      id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
      objc_msgSend_link_didMitigateCollision_(v8, v6, *(void *)(a1 + 32), v7, 1);
    }
  }
}

uint64_t sub_19DA01D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA01D48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA01D64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA01D80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA01D9C(void *a1, const char *a2, uint64_t a3, double a4)
{
  char v5 = objc_msgSend_objectForKeyedSubscript_(a1, a2, (uint64_t)a2, a4);
  uint64_t v9 = v5;
  if (v5) {
    a3 = objc_msgSend_longLongValue(v5, v6, v7, v8);
  }

  return a3;
}

uint64_t sub_19DA01DE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA01E00(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v5, v6, v7, v8, v9, v25);
      if ((objc_msgSend_ignoreCancel(*(void **)(a1 + 32), v20, v21, v22) & 1) == 0) {
        objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v23, *(void *)(a1 + 32), v24, *(void *)(a1 + 48));
      }
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
      if (*(void *)(a1 + 56))
      {
        BOOL v19 = objc_msgSend_disconnectionState(*(void **)(a1 + 32), v16, v17, v18) == 2;
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3221225472;
        v27[2] = sub_19DA021F8;
        v27[3] = &unk_1E5973608;
        id v28 = *(id *)(a1 + 56);
        BOOL v29 = v19;
        IDSTransportThreadAddBlock(v27);
      }
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v18, 0);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"ready", v5, v6, v7, v8, v9, v25);
      objc_msgSend__addToRecentQRServerList_(*(void **)(a1 + 40), v11, *(void *)(a1 + 32), v12);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, *(unsigned __int8 *)(*(void *)(a1 + 40) + 13));
      *(unsigned char *)(*(void *)(a1 + 40) + 14) = 1;
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = sub_19DA0201C;
      v30[3] = &unk_1E59735E0;
      id v33 = *(id *)(a1 + 56);
      char v34 = *(unsigned char *)(a1 + 64);
      int8x16_t v26 = *(int8x16_t *)(a1 + 32);
      id v15 = (id)v26.i64[0];
      int8x16_t v31 = vextq_s8(v26, v26, 8uLL);
      id v32 = *(id *)(a1 + 48);
      IDSTransportThreadAddBlock(v30);

      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"state %u", v5, v6, v7, v8, v9, a2);
      break;
  }
}

void sub_19DA0201C(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && !*(unsigned char *)(a1 + 64)) {
    (*(void (**)(uint64_t, uint64_t, void, void))(v2 + 16))(v2, 1, 0, 0);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  objc_msgSend_setState_(*(void **)(a1 + 40), v3, 1, v4);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
  if (!v7)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 104);
    *(void *)(v9 + 104) = Mutable;

    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
  }
  uint64_t v11 = objc_msgSend_objectForKeyedSubscript_(v7, v5, *(void *)(a1 + 48), v6);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 104), v12, 0, v13, *(void *)(a1 + 48));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v14 = v11;
  uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v33, v16, v37, 16);
  if (v17)
  {
    uint64_t v23 = v17;
    uint64_t v24 = *(void *)v34;
    do
    {
      uint64_t v25 = 0;
      do
      {
        if (*(void *)v34 != v24) {
          objc_enumerationMutation(v14);
        }
        uint64_t v26 = *(void *)(*((void *)&v33 + 1) + 8 * v25);
        sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"performing queued peel-off...", v18, v19, v20, v21, v22, v33);
        (*(void (**)(uint64_t, void))(v26 + 16))(v26, *(void *)(a1 + 40));
        ++v25;
      }
      while (v23 != v25);
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v27, (uint64_t)&v33, v28, v37, 16);
    }
    while (v23);
  }

  objc_msgSend__createIndicationConnection_(*(void **)(a1 + 32), v29, *(void *)(a1 + 40), v30);
  objc_msgSend__createChannelDataConnection_(*(void **)(a1 + 32), v31, *(void *)(a1 + 40), v32);
}

uint64_t sub_19DA021F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 1, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_19DA02218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"start: calling ready handler immediately", a4, a5, a6, a7, a8, v11);
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v9();
}

void sub_19DA02C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v57 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19DA02C64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA02C84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DA02C94(uint64_t a1)
{
}

uint64_t sub_19DA02C9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA02CBC(uint64_t a1, const char *a2, double a3)
{
  ConnectedLocalPortAndSetLocalEndpointForConnectiouint64_t n = objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(*(void *)(a1 + 40) + 16);
  uint64_t v6 = ConnectedLocalPortAndSetLocalEndpointForConnection;
  uint64_t v7 = *(void *)(a1 + 40);
  return v5(v7, 1, 0, 0, v6);
}

uint64_t sub_19DA02D20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA02D40(uint64_t a1, id a2)
{
  id v3 = a2;
  sec_protocol_options_add_tls_application_protocol(v3, "h2");
  sec_protocol_options_set_min_tls_protocol_version(v3, tls_protocol_version_TLSv13);
  uint64_t v8 = objc_msgSend_derivePSKFromSessionKey_salt_(IDSNWLink, v4, *(void *)(a1 + 32), v5, *(void *)(a1 + 40));
  if (v8)
  {
    uint64_t v10 = objc_msgSend_length(*(void **)(a1 + 48), v6, v7, v9) + 13;
    id v11 = objc_alloc(MEMORY[0x1E4F1CA58]);
    id v14 = objc_msgSend_initWithLength_(v11, v12, v10, v13);
    uint64_t v18 = (char *)objc_msgSend_mutableBytes(v14, v15, v16, v17);
    *uint64_t v18 = 0;
    id v19 = *(id *)(a1 + 40);
    uint64_t v23 = objc_msgSend_bytes(v19, v20, v21, v22);
    uint64_t v24 = *(void *)v23;
    *(_DWORD *)(v18 + 9) = *(_DWORD *)(v23 + 8);
    *(void *)(v18 + 1) = v24;
    id v25 = *(id *)(a1 + 48);
    BOOL v29 = (const void *)objc_msgSend_bytes(v25, v26, v27, v28);
    size_t v33 = objc_msgSend_length(*(void **)(a1 + 48), v30, v31, v32);
    memcpy(v18 + 13, v29, v33);
    id v34 = v8;
    uint64_t v38 = (const void *)objc_msgSend_bytes(v34, v35, v36, v37);
    long long v39 = dispatch_data_create(v38, 0x20uLL, 0, 0);
    uint64_t v40 = dispatch_data_create(v18, v10, 0, 0);
    sec_protocol_options_add_pre_shared_key(v3, v39, v40);
  }
  else
  {
    double v41 = objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_19DB76AEC();
    }

    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = sub_19DA02F2C;
    v42[3] = &unk_1E59735B8;
    id v43 = *(id *)(a1 + 56);
    IDSTransportThreadAddBlock(v42);
  }
}

uint64_t sub_19DA02F2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA02F4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA02F6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: cancelled", v5, v6, v7, v8, v9, v22);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 32), v15, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v16, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
      if (*(void *)(a1 + 40))
      {
        BOOL v20 = objc_msgSend_disconnectionState(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v17, v18, v19) == 2;
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = sub_19DA03460;
        v25[3] = &unk_1E59736F8;
        v25[4] = *(void *)(a1 + 32);
        long long v24 = *(_OWORD *)(a1 + 40);
        id v21 = (id)v24;
        long long v26 = v24;
        BOOL v27 = v20;
        IDSTransportThreadAddBlock(v25);
      }
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), v17, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v19, 0);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1, (uint64_t)"connectTCP: ready", v5, v6, v7, v8, v9, v22);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 32), v11, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v12, *(unsigned __int8 *)(*(void *)(a1 + 32) + 13));
      *(unsigned char *)(*(void *)(a1 + 32) + 14) = 1;
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      void v28[2] = sub_19DA031B4;
      v28[3] = &unk_1E59736D0;
      uint64_t v13 = *(void *)(a1 + 56);
      v28[4] = *(void *)(a1 + 32);
      uint64_t v30 = v13;
      long long v23 = *(_OWORD *)(a1 + 40);
      id v14 = (id)v23;
      long long v29 = v23;
      IDSTransportThreadAddBlock(v28);

      break;
    default:
      sub_19D9FFDB0(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1, (uint64_t)"state %u", v5, v6, v7, v8, v9, a2);
      break;
  }
}

void sub_19DA031B4(uint64_t a1, const char *a2, double a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  ConnectedLocalPortAndSetLocalEndpointForConnectiouint64_t n = objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  objc_msgSend__removePendingTCPNWLinkConnectionForToken_(*(void **)(a1 + 32), v5, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v6);
  uint64_t v7 = _tokenForNWLinkConnection(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 32), v10, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v11, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t))(v12 + 16))(v12, 1, 0, 0, ConnectedLocalPortAndSetLocalEndpointForConnection);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  objc_msgSend_setState_(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v13, 1, v14);
  double v17 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 104), v15, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v16);

  if (!v17)
  {
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 104), v21, (uint64_t)v20, v22, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
  long long v23 = objc_msgSend_objectForKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 104), v18, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v19);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(void *)(a1 + 32) + 104), v24, 0, v25, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v26 = v23;
  uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v45, v28, v49, 16);
  if (v29)
  {
    uint64_t v35 = v29;
    uint64_t v36 = *(void *)v46;
    do
    {
      uint64_t v37 = 0;
      do
      {
        if (*(void *)v46 != v36) {
          objc_enumerationMutation(v26);
        }
        uint64_t v38 = *(void *)(*((void *)&v45 + 1) + 8 * v37);
        sub_19D9FFDB0(*(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 1, (uint64_t)"performing queued peel-off...", v30, v31, v32, v33, v34, v45);
        (*(void (**)(uint64_t, void))(v38 + 16))(v38, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
        ++v37;
      }
      while (v35 != v37);
      uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v39, (uint64_t)&v45, v40, v49, 16);
    }
    while (v35);
  }

  objc_msgSend__createIndicationConnection_(*(void **)(a1 + 32), v41, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v42);
  objc_msgSend__createChannelDataConnectionForH2_(*(void **)(a1 + 32), v43, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v44);
}

uint64_t sub_19DA03460(uint64_t a1, const char *a2, double a3)
{
  objc_msgSend__getConnectedLocalPortAndSetLocalEndpointForConnection_(*(void **)(a1 + 32), a2, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
  double v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

void sub_19DA03B50(void **a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1[4] + 8))
  {
    double v4 = _tokenWithParameters(a1[5], a1[6], a1[7], 5uLL, 0);
    uint64_t v9 = objc_msgSend__NWLinkConnectionForToken_(a1[4], v7, (uint64_t)v4, v8);
    uint64_t v13 = v9;
    if (v9)
    {
      uint64_t v14 = objc_msgSend_disconnectionState(v9, v10, v11, v12);
      if ((a2 & 1) == 0 && v14 != 3)
      {
        if (v14 != 1)
        {
          uint64_t v30 = objc_msgSend_IDSNWLink(IDSFoundationLog, v15, v16, v22);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            uint64_t v31 = "disconnectWithSessionID cancelled by a new connection";
            goto LABEL_19;
          }
LABEL_20:

          goto LABEL_21;
        }
        double v23 = ids_monotonic_time();
        objc_msgSend_scheduledDisconnectTime(v13, v24, v25, v23);
        double v29 = v28 + -0.5;
        if (v23 < v29)
        {
          uint64_t v30 = objc_msgSend_IDSNWLink(IDSFoundationLog, v26, v27, v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            uint64_t v31 = "disconnectWithSessionID another disconnection scheduled later time - ignoring this";
LABEL_19:
            _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, v31, buf, 2u);
            goto LABEL_20;
          }
          goto LABEL_20;
        }
      }
      sub_19D9FFDB0(v13, 1, (uint64_t)"disconnecting %@", v17, v18, v19, v20, v21, (uint64_t)v4);
      objc_msgSend__cancelNWLinkConnection_remove_(a1[4], v32, (uint64_t)v13, v33, a2);
      if (a2) {
        objc_msgSend_setIgnoreCancel_(v13, v34, 1, v35);
      }
    }
    else
    {
      uint64_t v36 = objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        uint64_t v66 = v4;
        _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "cannot find QR connection to disconnect for %@", buf, 0xCu);
      }
    }
    uint64_t v37 = a1[4];
    uint64_t port = nw_endpoint_get_port((nw_endpoint_t)a1[5]);
    objc_msgSend__removeExtraListener_(v37, v39, port, v40);
    double v41 = _tokenWithParameters(a1[5], a1[6], a1[7], 1uLL, 0);

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v42, (uint64_t)v41, v43, a2);
    objc_msgSend__removeChildConnectionEvaluatorFortoken_(a1[4], v44, (uint64_t)v41, v45);
    long long v46 = _tokenWithParameters(a1[5], a1[6], a1[7], 2uLL, 0);

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v47, (uint64_t)v46, v48, a2);
    objc_msgSend__removeChildConnectionEvaluatorFortoken_(a1[4], v49, (uint64_t)v46, v50);
    uint64_t v51 = _tokenWithParameters(a1[5], a1[6], a1[7], 4uLL, 0);

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v52, (uint64_t)v51, v53, a2);
    objc_msgSend__removeChildConnectionEvaluatorFortoken_(a1[4], v54, (uint64_t)v51, v55);
    OSStatus v56 = _tokenWithParameters(a1[5], a1[6], a1[7], 7uLL, 0);

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v57, (uint64_t)v56, v58, a2);
    objc_msgSend__removeChildConnectionEvaluatorFortoken_(a1[4], v59, (uint64_t)v56, v60);
    double v4 = _tokenWithParameters(a1[5], a1[6], a1[7], 8uLL, 0);

    objc_msgSend__cancelNWLinkConnectionWithToken_removeNWLinkConnectionNow_(a1[4], v61, (uint64_t)v4, v62, a2);
    objc_msgSend__removeChildConnectionEvaluatorFortoken_(a1[4], v63, (uint64_t)v4, v64);
LABEL_21:

    goto LABEL_22;
  }
  double v4 = objc_msgSend_IDSNWLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "disconnectWithSessionID alread invalidated", buf, 2u);
  }
LABEL_22:
}

uint64_t sub_19DA03EEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA04C00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_19DA04C58(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  id v10 = (void *)a1[4];
  uint64_t v11 = @"NO";
  if (a2) {
    uint64_t v11 = @"YES";
  }
  sub_19D9FFDB0(v10, 1, (uint64_t)"createQUICPodP2PConnectionsForSession: create AVC successful: %@", a4, a5, a6, a7, a8, (uint64_t)v11);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  if ((v8 & 1) == 0) {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 0;
  }
  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24) && *(unsigned char *)(*(void *)(a1[8] + 8) + 24))
  {
    double v12 = *(void (**)(void))(a1[5] + 16);
    v12();
  }
}

void sub_19DA04D38(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  id v10 = (void *)a1[4];
  uint64_t v11 = @"NO";
  if (a2) {
    uint64_t v11 = @"YES";
  }
  sub_19D9FFDB0(v10, 1, (uint64_t)"createQUICPodP2PConnectionsForSession: create IDS successful: %@", a4, a5, a6, a7, a8, (uint64_t)v11);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  if ((v8 & 1) == 0) {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 0;
  }
  if (*(unsigned char *)(*(void *)(a1[8] + 8) + 24) && *(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    double v12 = *(void (**)(void))(a1[5] + 16);
    v12();
  }
}

uint64_t sub_19DA05554(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = v3;
  if (v3)
  {
    *(void *)(*(void *)(a1 + 56) + 1288) = objc_msgSend_connectionID(v3, v4, v5, v6);
    unint64_t v10 = objc_msgSend__sendData_withPacketBuffer_NWLinkConnection_(*(void **)(a1 + 32), v8, *(void *)(a1 + 40), v9);
    uint64_t v16 = v10;
    if (v10)
    {
      if (v10 > 0xF) {
        uint64_t v17 = "UnexpectedSendResult";
      }
      else {
        uint64_t v17 = _IDSLinkSendResultStrings[v10];
      }
      sub_19D9FFDB0(v7, 2, (uint64_t)"_sendData failed %s", v11, v12, v13, v14, v15, (uint64_t)v17);
    }
  }
  else
  {
    uint64_t v18 = objc_msgSend_IDSNWLink(IDSFoundationLog, v4, v5, v6);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_19DB76C8C(a1, v18);
    }

    uint64_t v16 = 6;
  }

  return v16;
}

void sub_19DA06B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_19DA06B74(uint64_t a1, void *a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  double v4 = nw_connection_copy_current_path(v3);
  uint64_t interface_index = nw_path_get_interface_index();
  double v6 = nw_connection_copy_parameters(v3);
  uint64_t v7 = nw_parameters_copy_local_endpoint(v6);
  nw_endpoint_t v8 = nw_connection_copy_endpoint(v3);
  nw_endpoint_t v9 = nw_path_copy_effective_remote_endpoint(v4);
  if (objc_msgSend__shouldAllowP2PConnectionTo_anotherRemoteEndpoint_(*(void **)(a1 + 32), v10, (uint64_t)v8, v11, v9))
  {
    double v68 = v6;
    int v74 = interface_index;
    uint64_t v15 = v8;
    uint64_t v16 = nw_endpoint_get_address(v15);
    if (v16->sa_family == 30 && (uint64_t v17 = v16, v73 = 0xAAAAAAAAAAAAAAAALL, v18 = nw_nat64_copy_prefixes(), v18 >= 1))
    {
      unsigned int v67 = interface_index;
      uint64_t v19 = 0;
      *(_DWORD *)&address.sa_data[10] = 0;
      *(void *)&address.sa_data[2] = 0;
      *(_WORD *)&address.sa_leuint64_t n = 528;
      *(_WORD *)address.sa_data = *(_WORD *)v17->sa_data;
      uint64_t v20 = 16 * v18;
      while (!nw_nat64_extract_v4())
      {
        v19 += 16;
        if (v20 == v19)
        {
          uint64_t interface_index = v67;
          goto LABEL_8;
        }
      }
      nw_endpoint_t v8 = nw_endpoint_create_address(&address);
      double v60 = objc_msgSend_IDSNWLink(IDSFoundationLog, v57, v58, v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412802;
        nw_endpoint_t v76 = v8;
        __int16 v77 = 2112;
        uint64_t v78 = v15;
        __int16 v79 = 1024;
        int v80 = v74;
        _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "extracted %@ from %@ on if:%u", buf, 0x1Cu);
      }

      char v21 = 0;
      uint64_t interface_index = v67;
    }
    else
    {
LABEL_8:
      nw_endpoint_t v8 = v15;
      char v21 = 1;
    }

    double v22 = nw_endpoint_get_address(v7);
    if ((v21 & 1) == 0
      && v22->sa_family == 30
      && (unsigned int v25 = objc_msgSend__NAT64LocalAddressForInterfaceIndex_(*(void **)(a1 + 32), v23, interface_index, v24)) != 0)
    {
      *(void *)&address.sa_data[6] = 0;
      *(_WORD *)&address.sa_leuint64_t n = 528;
      *(_DWORD *)&address.sa_data[2] = bswap32(v25);
      *(_WORD *)address.sa_data = __rev16(nw_endpoint_get_port(v7));
      nw_endpoint_t v26 = nw_endpoint_create_address(&address);
      uint64_t v30 = objc_msgSend_IDSNWLink(IDSFoundationLog, v27, v28, v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412546;
        nw_endpoint_t v76 = v7;
        __int16 v77 = 2112;
        uint64_t v78 = v26;
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "converted %@ to %@", buf, 0x16u);
      }
    }
    else
    {
      nw_endpoint_t v26 = v7;
    }
    uint64_t v32 = [NWLinkConnection alloc];
    double v35 = objc_msgSend_initWithType_interfaceIndex_localEndpoint_remoteEndpoint_(v32, v33, 0, v34, interface_index, v26, v8);
    objc_msgSend_setHasRequiredInterface_(v35, v36, 0, v37);
    objc_msgSend_setConnection_(v35, v38, (uint64_t)v3, v39);
    objc_msgSend_setName_(v35, v40, @"UDP connection from listener", v41);
    objc_msgSend_setProtocolStackDescription_(v35, v42, *(void *)(a1 + 40), v43);
    double v44 = _tokenForNWLinkConnection(v35);
    sub_19D9FFDB0(v35, 1, (uint64_t)"new incoming connection %@ from %@(%@)", v45, v46, v47, v48, v49, (uint64_t)v44);
    if ((IMGetDomainBoolForKey() & 1) != 0
      || (IMGetDomainBoolForKeyWithDefaultValue() & 1) != 0
      || *(unsigned char *)(*(void *)(a1 + 32) + 16))
    {
      double v53 = objc_msgSend_IDSNWLink(IDSFoundationLog, v50, v51, v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        double v54 = *(NSObject **)(a1 + 32);
        *(_DWORD *)kevent buf = 134217984;
        nw_endpoint_t v76 = v54;
        _os_log_impl(&dword_19D9BE000, v53, OS_LOG_TYPE_DEFAULT, "<%p> nw_listener_set_new_connection_handler - disabled by forceQuickRelay or disableP2PLinks", buf, 0xCu);
      }

      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 32), v55, (uint64_t)v35, v56, 0);
    }
    else
    {
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = sub_19DA070B8;
      handler[3] = &unk_1E59737C0;
      id v61 = v35;
      uint64_t v62 = *(void *)(a1 + 32);
      id v70 = v61;
      uint64_t v71 = v62;
      id v63 = v44;
      id v72 = v63;
      nw_connection_set_state_changed_handler(v3, handler);
      objc_msgSend__addUDPConnectionInProgress_token_(*(void **)(a1 + 32), v64, (uint64_t)v61, v65, v63);
      uint64_t v66 = NWLinkQueue();
      nw_connection_set_queue(v3, v66);

      nw_connection_start(v3);
    }

    uint64_t v7 = v26;
    double v6 = v68;
  }
  else
  {
    uint64_t v31 = objc_msgSend_IDSNWLink(IDSFoundationLog, v12, v13, v14);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412546;
      nw_endpoint_t v76 = v9;
      __int16 v77 = 2112;
      uint64_t v78 = v8;
      _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, "received a late incoming packet from %@(%@) - ignoring", buf, 0x16u);
    }

    nw_connection_cancel(v3);
  }
}

void sub_19DA070B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v23 = a3;
  if (a2 == 5)
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v5, v6, v7, v8, v9, v22);
    objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v20, *(void *)(a1 + 32), v21, *(void *)(a1 + 48));
  }
  else if (a2 == 3)
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"ready", v5, v6, v7, v8, v9, v22);
    objc_msgSend_setState_(*(void **)(a1 + 32), v10, 1, v11);
    objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v12, *(void *)(a1 + 32), v13, *(void *)(a1 + 48));
    objc_msgSend__removeUDPConnectionInProgress_(*(void **)(a1 + 40), v14, *(void *)(a1 + 48), v15);
    objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v17, *(unsigned __int8 *)(*(void *)(a1 + 40) + 13));
    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v18, *(void *)(a1 + 32), v19, 1);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"state %u", v5, v6, v7, v8, v9, a2);
  }
}

void sub_19DA0719C(uint64_t a1, int a2, void *a3)
{
  *(void *)&v21[13] = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  switch(a2)
  {
    case 4:
      double v13 = objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v18 = 134217984;
        uint64_t v19 = v14;
        _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "listener %p cancelled. Invalidating...", (uint8_t *)&v18, 0xCu);
      }

      nw_listener_set_new_connection_handler(*(nw_listener_t *)(a1 + 32), 0);
      nw_listener_set_state_changed_handler(*(nw_listener_t *)(a1 + 32), 0);
      goto LABEL_13;
    case 3:
      double v15 = objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        int v18 = 134218242;
        uint64_t v19 = v16;
        __int16 v20 = 2112;
        *(void *)double v21 = v16;
        _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "listener %p failed %@", (uint8_t *)&v18, 0x16u);
      }

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
      goto LABEL_13;
    case 2:
      unint64_t v10 = objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = **(unsigned __int16 **)(a1 + 64);
        int v18 = 134218498;
        uint64_t v19 = v11;
        __int16 v20 = 1024;
        *(_DWORD *)double v21 = v12;
        v21[2] = 2112;
        *(void *)&v21[3] = v11;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "listener %p on port %u ready %@", (uint8_t *)&v18, 0x1Cu);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
LABEL_13:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
      goto LABEL_17;
  }
  double v17 = objc_msgSend_IDSNWLink(IDSFoundationLog, v6, v7, v9);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    sub_19DB76E30(a1, a2, v17);
  }

LABEL_17:
}

void sub_19DA07718(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v26 = v5;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v6, v7, v8, v9, v10, v25);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v21, *(void *)(a1 + 32), v22, *(void *)(a1 + 48));
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v23, *(void *)(a1 + 32), v24, 0);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"ready", v6, v7, v8, v9, v10, v25);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, *(void *)(a1 + 48));
      objc_msgSend__removeUDPConnectionInProgress_(*(void **)(a1 + 40), v15, *(void *)(a1 + 48), v16);
      objc_msgSend__setWiFiAssistStateForCellularLink_isEnabled_(*(void **)(a1 + 40), v17, *(void *)(a1 + 32), v18, *(unsigned __int8 *)(*(void *)(a1 + 40) + 13));
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v19, *(void *)(a1 + 32), v20, 1);
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"state %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

uint64_t sub_19DA07A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"_sheduleRetryConnectionIfNeeded(%s): retrying", a4, a5, a6, a7, a8, *(void *)(a1 + 56));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"_sheduleRetryConnectionIfNeeded(%s): logging connection tree after retry", v9, v10, v11, v12, v13, *(void *)(a1 + 56));
  double v17 = *(void **)(a1 + 40);
  return objc_msgSend_logConnectionTree(v17, v14, v15, v16);
}

uint64_t sub_19DA07C8C(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__createChannelDataConnectionForH2_retryIndex_, *(void *)(a1 + 40), a2);
}

void sub_19DA07C9C(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10)
  {
    if (!objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
    {
      objc_msgSend_setName_(v10, v12, @"H2 Channel Data connection", v18);
      id v26 = objc_msgSend_remoteEndpoint(v10, v23, v24, v25);
      uint64_t v27 = _createQRContentContext(6, (uint64_t)"/QR/ChannelData", v26, 0, 1);
      objc_msgSend_setContentContext_(v10, v28, (uint64_t)v27, v29);

      sub_19D9FFDB0(v10, 1, (uint64_t)"_createChannelDataConnectionForH2: sending %s with empty body", v30, v31, v32, v33, v34, (uint64_t)"/QR/ChannelData");
      uint64_t v38 = objc_msgSend_connection(v10, v35, v36, v37);
      double v42 = objc_msgSend_contentContext(v10, v39, v40, v41);
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = sub_19DA07E5C;
      completion[3] = &unk_1E59738B0;
      completion[4] = *(void *)(a1 + 32);
      id v45 = v10;
      uint64_t v46 = "/QR/ChannelData";
      nw_connection_send(v38, MEMORY[0x1E4F14410], v42, 0, completion);

      goto LABEL_7;
    }
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: failed to peel off nwLinkConnection for h2 channeldata connection", v13, v14, v15, v16, v17, v43);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v19, (uint64_t)v10, v20);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: failed to peel off nwLinkConnection for h2 channeldata connection", v5, v6, v7, v8, v9, v43);
  }
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v21, 0, v22, *(void *)(a1 + 40), "CD H2", *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
LABEL_7:
}

void sub_19DA07E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v26 = v3;
  if (v3 || (shouldFail = objc_msgSend__shouldFail(*(void **)(a1 + 32), 0, v4, v10), id v3 = 0, shouldFail))
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"_createChannelDataConnectionForH2: send failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v3);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v14, *(void *)(a1 + 40), v15);
  }
  else
  {
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    double v25 = objc_msgSend_contentContext(v16, 0, v12, v13);
    sub_19D9FFDB0(v16, 1, (uint64_t)"_createChannelDataConnectionForH2: sent %s, h2context: %p", v18, v19, v20, v21, v22, v17);

    objc_msgSend__tryReadH2Header_(*(void **)(a1 + 32), v23, *(void *)(a1 + 40), v24);
  }
}

void sub_19DA07F1C(uint64_t a1, void *a2)
{
  id v11 = a2;
  sub_19D9FFDB0(v11, 2, (uint64_t)"_createChannelDataConnectionForH2: cancelled", v3, v4, v5, v6, v7, v10);
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v8, (uint64_t)v11, v9, *(void *)(a1 + 40), "CD H2", *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_19DA08060(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  double v9 = a3;
  id v17 = a5;
  if (v17 || (objc_msgSend__shouldFail(*(void **)(a1 + 32), v10, v11, v18) & 1) != 0)
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"_tryReadH2Header: receive failed (%@)", v12, v13, v14, v15, v16, (uint64_t)v17);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v19, *(void *)(a1 + 40), v20);
    goto LABEL_4;
  }
  if (!v9)
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"Null context", v12, v13, v14, v15, v16, v57);
    goto LABEL_11;
  }
  uint64_t v21 = nw_protocol_copy_http_definition();
  nw_protocol_metadata_t v22 = nw_content_context_copy_protocol_metadata(v9, v21);

  if (!v22)
  {
LABEL_11:
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"_tryReadH2Header: failed to get metadata; reading some more...",
      v23,
      v24,
      v25,
      v26,
      v27,
      v57);
    objc_msgSend__tryReadH2Header_(*(void **)(a1 + 32), v39, *(void *)(a1 + 40), v40);
    goto LABEL_4;
  }
  uint64_t status = nw_http_metadata_get_status();
  if (status == 200 && (objc_msgSend__shouldFail(*(void **)(a1 + 32), v28, v29, v36) & 1) == 0)
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"_tryReadH2Header: received 200 OK", v30, v31, v32, v33, v34, v57);
    double v41 = [IDSCapsuleParser alloc];
    double v42 = NWLinkQueue();
    id v45 = objc_msgSend_initWithQueue_(v41, v43, (uint64_t)v42, v44);
    objc_msgSend_setCapsuleParser_(*(void **)(a1 + 40), v46, (uint64_t)v45, v47);

    uint64_t v48 = *(void *)(a1 + 48);
    double v52 = objc_msgSend_capsuleParser(*(void **)(a1 + 40), v49, v50, v51);
    objc_msgSend_setConnection_(v52, v53, v48, v54);

    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 32), v55, *(void *)(a1 + 40), v56, 1);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"_tryReadH2Header: response status %u", v30, v31, v32, v33, v34, status);
    id v58 = *(id *)(a1 + 40);
    nw_http_metadata_enumerate_headers();
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v37, *(void *)(a1 + 40), v38);
  }
LABEL_4:
}

uint64_t sub_19DA08280(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  size_t v9 = (a3 + 1);
  if (a3 != -1) {
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  }
  BOOL v10 = __CFADD__(a5, 1);
  size_t v11 = (a5 + 1);
  if (!v10) {
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  }
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"_tryReadH2Header: %s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

uint64_t sub_19DA0878C(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__createChannelDataConnection_retryIndex_, *(void *)(a1 + 40), a2);
}

void sub_19DA0879C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v22 = v5;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"CD cancelled", v6, v7, v8, v9, v10, v21);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(void *)(a1 + 32), v16, *(void *)(a1 + 48));
      objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 40), v17, *(void *)(a1 + 32), v18, *(void *)(a1 + 56), "CD", *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 64));
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"CD failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v19, *(void *)(a1 + 32), v20);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"CD ready", v6, v7, v8, v9, v10, v21);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"CD state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

void sub_19DA08B48(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v20 = v5;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"RU cancelled", v6, v7, v8, v9, v10, v19);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(void *)(a1 + 32), v16, *(void *)(a1 + 48));
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"RU failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v17, *(void *)(a1 + 32), v18, 0);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"RU ready", v6, v7, v8, v9, v10, v19);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"RU state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

uint64_t sub_19DA08FC0(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__createIndicationConnection_retryIndex_, *(void *)(a1 + 40), a2);
}

void sub_19DA08FD0(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10)
  {
    if (!objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
    {
      objc_msgSend_setName_(v10, v12, @"Indication connection", v18);
      __kevent buf = 0xAAAAAAAAAAAAAAAALL;
      arc4random_buf(&__buf, 8uLL);
      uint64_t v26 = objc_msgSend_remoteEndpoint(v10, v23, v24, v25);
      uint64_t v27 = _createQRContentContext(1, (uint64_t)"/QR/Indications", v26, __buf, 0);

      sub_19D9FFDB0(v10, 1, (uint64_t)"sending %s(%llu) with empty body", v28, v29, v30, v31, v32, (uint64_t)"/QR/Indications");
      double v36 = objc_msgSend_connection(v10, v33, v34, v35);
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = sub_19DA09188;
      completion[3] = &unk_1E59738B0;
      completion[4] = *(void *)(a1 + 32);
      id v39 = v10;
      double v40 = "/QR/Indications";
      nw_connection_send(v36, MEMORY[0x1E4F14410], v27, 1, completion);

      goto LABEL_7;
    }
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"failed to peel off nwLinkConnection for indication connection", v13, v14, v15, v16, v17, v37);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v19, (uint64_t)v10, v20);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"failed to peel off nwLinkConnection for indication connection", v5, v6, v7, v8, v9, v37);
  }
  objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), v21, 0, v22, *(void *)(a1 + 40), "ID", *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
LABEL_7:
}

void sub_19DA09188(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10 || objc_msgSend__shouldFail(*(void **)(a1 + 32), v3, v4, v11))
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"send failed (%@)", v5, v6, v7, v8, v9, (uint64_t)v10);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v12, *(void *)(a1 + 40), v13);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"sent %s", v5, v6, v7, v8, v9, *(void *)(a1 + 48));
    uint64_t v17 = objc_msgSend_connection(*(void **)(a1 + 40), v14, v15, v16);
    completion[0] = MEMORY[0x1E4F143A8];
    completion[1] = 3221225472;
    completion[2] = sub_19DA09294;
    completion[3] = &unk_1E5973978;
    double v18 = *(void **)(a1 + 40);
    completion[4] = *(void *)(a1 + 32);
    id v20 = v18;
    nw_connection_receive(v17, 0, 0, completion);
  }
}

void sub_19DA09294(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  uint64_t v9 = a3;
  id v17 = a5;
  if (v17 || (objc_msgSend__shouldFail(*(void **)(a1 + 32), v10, v11, v18) & 1) != 0)
  {
    uint64_t v19 = *(void **)(a1 + 40);
    uint64_t v38 = (uint64_t)v17;
    id v20 = "receive failed (%@)";
LABEL_4:
    sub_19D9FFDB0(v19, 2, (uint64_t)v20, v12, v13, v14, v15, v16, v38);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v21, *(void *)(a1 + 40), v22);
    goto LABEL_5;
  }
  if (!v9)
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 2, (uint64_t)"Null context", v12, v13, v14, v15, v16, v38);
    goto LABEL_12;
  }
  uint64_t v23 = nw_protocol_copy_http_definition();
  nw_protocol_metadata_t v24 = nw_content_context_copy_protocol_metadata(v9, v23);

  if (!v24)
  {
LABEL_12:
    uint64_t v19 = *(void **)(a1 + 40);
    id v20 = "failed to get metadata";
    goto LABEL_4;
  }
  uint64_t status = nw_http_metadata_get_status();
  if (status == 200 && (objc_msgSend__shouldFail(*(void **)(a1 + 32), v25, v26, v33) & 1) == 0)
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"received 200 OK", v27, v28, v29, v30, v31, v38);
    objc_msgSend__handleIncomingIndicationMessage_(*(void **)(a1 + 32), v36, *(void *)(a1 + 40), v37);
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"response status %u", v27, v28, v29, v30, v31, status);
    id v39 = *(id *)(a1 + 40);
    nw_http_metadata_enumerate_headers();
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 32), v34, *(void *)(a1 + 40), v35);
  }
LABEL_5:
}

uint64_t sub_19DA0943C(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  size_t v9 = (a3 + 1);
  if (a3 != -1) {
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  }
  BOOL v10 = __CFADD__(a5, 1);
  size_t v11 = (a5 + 1);
  if (!v10) {
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  }
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

uint64_t sub_19DA0954C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__scheduleRetryConnectionIfNeeded_baseConnection_kind_retryIndex_retryBlock_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3, *(void *)(a1 + 40), "ID", *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_19DA097D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [NWLinkConnection alloc];
  uint64_t v7 = objc_msgSend_initWithBaseNWLinkConnection_type_(v4, v5, (uint64_t)v3, v6, *(void *)(a1 + 64));
  _tokenForNWLinkConnection(v7);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_msgSend_connection(v3, v9, v10, v11);
  uint64_t v13 = nw_connection_copy_parameters(v12);
  nw_parameters_t v14 = nw_parameters_copy(v13);

  double v18 = objc_msgSend_protocolStackDescription(*(void **)(a1 + 32), v15, v16, v17);
  objc_msgSend_setProtocolStackDescription_(v7, v19, (uint64_t)v18, v20);

  uint64_t v21 = *(void **)(a1 + 40);
  isH2Connectiouint64_t n = objc_msgSend_isH2Connection(v3, v22, v23, v24);
  objc_msgSend__setParameters_NWLinkConnection_sharePortWithListener_isTCP_(v21, v26, (uint64_t)v14, v27, v7, 0, isH2Connection);
  uint64_t v30 = nw_connection_create_with_connection();
  if (v30)
  {
    objc_msgSend_setConnection_(v7, v28, (uint64_t)v30, v31);
    objc_msgSend_setName_(v7, v32, @"(unnamed peeled off connection)", v33);
    objc_msgSend_setHasQUICStarted_(v7, v34, 1, v35);
    if (*(void *)(a1 + 64) == 6)
    {
      uint64_t v36 = _tokenForNWLinkConnection(v7);

      id v8 = (id)v36;
    }
    v70[0] = 0;
    v70[1] = v70;
    v70[2] = 0x2020000000;
    char v71 = 0;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_19DA09ABC;
    handler[3] = &unk_1E59739A0;
    id v37 = v7;
    id v64 = v37;
    uint64_t v69 = v70;
    id v38 = *(id *)(a1 + 48);
    uint64_t v39 = *(void *)(a1 + 40);
    id v67 = v38;
    uint64_t v65 = v39;
    id v8 = v8;
    id v66 = v8;
    id v68 = *(id *)(a1 + 56);
    nw_connection_set_state_changed_handler(v30, handler);
    uint64_t v43 = objc_msgSend_connectionID(v37, v40, v41, v42);
    objc_msgSend_connectionID(v3, v44, v45, v46);
    sub_19D9FFDB0(v37, 1, (uint64_t)"peeled off [C%llu(%llu)]", v47, v48, v49, v50, v51, v43);
    objc_msgSend_setParent_(v37, v52, (uint64_t)v3, v53);
    objc_msgSend__addNWLinkConnection_token_(*(void **)(a1 + 40), v54, (uint64_t)v37, v55, v8);
    double v56 = NWLinkQueue();
    nw_connection_set_queue(v30, v56);

    nw_connection_start(v30);
    _Block_object_dispose(v70, 8);
  }
  else
  {
    uint64_t v57 = objc_msgSend_connectionID(v3, v28, v29, v31);
    sub_19D9FFDB0(v7, 2, (uint64_t)"could NOT peel off a new connection from [C%llu] for %@", v58, v59, v60, v61, v62, v57);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_19DA09AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DA09ABC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v19 = v5;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"cancelled", v6, v7, v8, v9, v10, v18);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, *(void *)(a1 + 48));
      uint64_t v15 = *(void *)(a1 + 64);
      if (v15) {
        (*(void (**)(uint64_t, void))(v15 + 16))(v15, *(void *)(a1 + 32));
      }
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      }
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v17);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"ready", v6, v7, v8, v9, v10, v18);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      }
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"state %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

uint64_t sub_19DA09C24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA0A46C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19DA0A4A4(uint64_t a1, void *a2)
{
  id v8 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = nw_qpod_set_secrets();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    sub_19D9FFDB0(*(void **)(a1 + 48), 1, (uint64_t)"setting QUIC ConnectionIDs: localCID %@, remoteCID %@", v3, v4, v5, v6, v7, *(void *)(a1 + 56));
    nw_qpod_set_scid();
    nw_qpod_set_dcid();
  }
}

void sub_19DA0A548(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v21 = v5;
  switch(a2)
  {
    case 5:
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      }
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod cancelled", v6, v7, v8, v9, v10, v20);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(void *)(a1 + 32), v16, *(void *)(a1 + 48));
      break;
    case 4:
      uint64_t v17 = (uint64_t)v5;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        uint64_t v17 = (uint64_t)v21;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      }
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod failed (%@)", v6, v7, v8, v9, v10, v17);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v18, *(void *)(a1 + 32), v19, 0);
      break;
    case 3:
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
        objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      }
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod ready", v6, v7, v8, v9, v10, v20);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

void sub_19DA0AB9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19DA0ABC0(uint64_t a1, void *a2)
{
  id v8 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = nw_qpod_setup_secrets();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"setting QUIC ConnectionIDs: localCID %@, remoteCID %@", v3, v4, v5, v6, v7, *(void *)(a1 + 48));
    nw_qpod_set_scid();
    nw_qpod_set_dcid();
  }
}

void sub_19DA0AC64(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v20 = v5;
  switch(a2)
  {
    case 5:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod cancelled", v6, v7, v8, v9, v10, v19);
      objc_msgSend__removeNWLinkConnection_token_(*(void **)(a1 + 40), v15, *(void *)(a1 + 32), v16, *(void *)(a1 + 48));
      break;
    case 4:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod failed (%@)", v6, v7, v8, v9, v10, (uint64_t)v5);
      objc_msgSend__cancelNWLinkConnection_remove_(*(void **)(a1 + 40), v17, *(void *)(a1 + 32), v18, 0);
      break;
    case 3:
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"QUICPod ready", v6, v7, v8, v9, v10, v19);
      objc_msgSend_setState_(*(void **)(a1 + 32), v11, 1, v12);
      objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v13, *(void *)(a1 + 32), v14, 1);
      break;
    default:
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"QUICPod state: %u", v6, v7, v8, v9, v10, a2);
      break;
  }
}

void sub_19DA0B1B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v11 = v3;
  if (!v3)
  {
    sub_19D9FFDB0(0, 2, (uint64_t)"send failed: no connection", v5, v6, v7, v8, v9, v62);
    goto LABEL_14;
  }
  objc_msgSend_setMessageType_(v3, v4, *(unsigned int *)(a1 + 64), v10);
  objc_msgSend_setTransactionID_(v11, v12, *(void *)(a1 + 56), v13);
  PathForMessageType = _getPathForMessageType(*(unsigned int *)(a1 + 64), v14, v15, v16);
  int v20 = *(_DWORD *)(a1 + 64);
  uint64_t v21 = 1;
  if (v20 > 26)
  {
    if (v20 != 27)
    {
      if (v20 != 1001)
      {
LABEL_9:
        uint64_t v21 = 4;
        goto LABEL_10;
      }
      uint64_t v21 = 6;
    }
  }
  else if (v20 != 3)
  {
    goto LABEL_9;
  }
LABEL_10:
  double v22 = objc_msgSend_stringWithFormat_(NSString, v17, @"%s", v19, PathForMessageType);
  objc_msgSend_setName_(v11, v23, (uint64_t)v22, v24);

  uint64_t v28 = objc_msgSend_remoteEndpoint(v11, v25, v26, v27);
  uint64_t v29 = _createQRContentContext(v21, (uint64_t)PathForMessageType, v28, *(void *)(a1 + 56), 0);

  dispatch_data_get_size(*(dispatch_data_t *)(a1 + 32));
  sub_19D9FFDB0(v11, 1, (uint64_t)"sending %s(%llu) %ldB", v30, v31, v32, v33, v34, (uint64_t)PathForMessageType);
  if (objc_msgSend_hasQUICStarted(*(void **)(a1 + 40), v35, v36, v37))
  {
    double v46 = objc_msgSend_connection(v11, v38, v39, v45);
    uint64_t v47 = *(NSObject **)(a1 + 32);
    completion[0] = MEMORY[0x1E4F143A8];
    completion[1] = 3221225472;
    completion[2] = sub_19DA0B410;
    completion[3] = &unk_1E59738B0;
    id v48 = v11;
    uint64_t v49 = *(void *)(a1 + 48);
    id v65 = v48;
    uint64_t v66 = v49;
    id v67 = PathForMessageType;
    nw_connection_send(v46, v47, v29, 1, completion);
  }
  else
  {
    sub_19D9FFDB0(v11, 1, (uint64_t)"start: got early data; starting connection and sending",
      v40,
      v41,
      v42,
      v43,
      v44,
      v63);
    objc_msgSend_setHasQUICStarted_(*(void **)(a1 + 40), v50, 1, v51);
    double v55 = objc_msgSend_connection(v11, v52, v53, v54);
    nw_connection_send(v55, *(dispatch_data_t *)(a1 + 32), v29, 1, (nw_connection_send_completion_t)*MEMORY[0x1E4F38C50]);

    uint64_t v59 = objc_msgSend_connection(v11, v56, v57, v58);
    nw_connection_start(v59);

    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 48), v60, (uint64_t)v11, v61, 0);
  }

LABEL_14:
}

uint64_t sub_19DA0B410(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)a1[4];
  if (a2)
  {
    sub_19D9FFDB0(v9, 2, (uint64_t)"send failed (%@)", a4, a5, a6, a7, a8, a2);
    uint64_t v13 = a1[4];
    double v12 = (void *)a1[5];
    return objc_msgSend__cancelNWLinkConnection_remove_(v12, v10, v13, v11, 0);
  }
  else
  {
    sub_19D9FFDB0(v9, 1, (uint64_t)"sent %s request", a4, a5, a6, a7, a8, a1[6]);
    uint64_t v18 = a1[4];
    uint64_t v17 = (void *)a1[5];
    return objc_msgSend__handleIncomingMessage_keepWaiting_(v17, v15, v18, v16, 0);
  }
}

uint64_t sub_19DA0B4AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v8 = result;
    sub_19D9FFDB0(*(void **)(result + 32), 2, (uint64_t)"send failed (%@)", a4, a5, a6, a7, a8, a2);
    uint64_t v12 = *(void *)(v8 + 32);
    double v11 = *(void **)(v8 + 40);
    return objc_msgSend__failNWLinkConnection_(v11, v9, v12, v10);
  }
  return result;
}

uint64_t sub_19DA0B508(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v8 = result;
    sub_19D9FFDB0(*(void **)(result + 32), 2, (uint64_t)"_sendData: h2 send failed (%@)", a4, a5, a6, a7, a8, a2);
    uint64_t v12 = *(void *)(v8 + 32);
    double v11 = *(void **)(v8 + 40);
    return objc_msgSend__failNWLinkConnection_(v11, v9, v12, v10);
  }
  return result;
}

void sub_19DA0B734(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  id v10 = a5;
  sub_19D9FFDB0(*(void **)(a1 + 32), 3, (uint64_t)"receive handler called", v11, v12, v13, v14, v15, v152);
  uint64_t v177 = 0;
  v178 = &v177;
  uint64_t v179 = 0x2020000000;
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  v182 = &v181;
  uint64_t v183 = 0xA010000000;
  v184 = &unk_19DBF8FDD;
  double v23 = 0.0;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  if (v10)
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"receive failed (%@)", v18, v19, v20, v21, v22, (uint64_t)v10);
    if (*(_DWORD *)(a1 + 48) == 22)
    {
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"generating empty /QR/UnAllocBind response", v25, v26, v27, v28, v29, v153);
      uint64_t v34 = objc_msgSend_dataWithEmptyUnAllocBindResponse(IDSQRProtoMessage, v31, v32, v33);
      double v35 = _IDSLinkPacketBufferCreate();
      v35[161] = (id)objc_msgSend_connectionID(*(void **)(a1 + 32), v36, v37, v38);
      *((unsigned char *)v35 + 1296) = objc_msgSend_isQUICPod(*(void **)(a1 + 32), v39, v40, v41);
      uint64_t v45 = objc_msgSend_length(v34, v42, v43, v44);
      v35[2] = (id)v45;
      objc_msgSend_getBytes_length_(v34, v46, (uint64_t)*v35, v47, v45);
    }
    else
    {
      double v35 = 0;
    }
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v24, *(void *)(a1 + 32), v30);
    goto LABEL_27;
  }
  if (!v8)
  {
    double v35 = 0;
    if (!v9) {
      goto LABEL_27;
    }
LABEL_13:
    id v64 = nw_protocol_copy_http_definition();
    id v65 = nw_content_context_copy_protocol_metadata(v9, v64);

    if (v65)
    {
      int status = nw_http_metadata_get_status();
      id v67 = *(void **)(a1 + 32);
      PathForMessageType = _getPathForMessageType(*(unsigned int *)(a1 + 48), v68, v69, v70);
      objc_msgSend_transactionID(*(void **)(a1 + 32), v72, v73, v74);
      sub_19D9FFDB0(v67, 1, (uint64_t)"received %s(%llu) %u response %@", v75, v76, v77, v78, v79, (uint64_t)PathForMessageType);
      buffer_ptr = 0;
      p_buffer_ptr = &buffer_ptr;
      uint64_t v174 = 0x2020000000;
      char v175 = 0;
      uint64_t v163 = MEMORY[0x1E4F143A8];
      uint64_t v164 = 3221225472;
      long long v165 = sub_19DA0BEC8;
      long long v166 = &unk_1E5973AB8;
      long long v168 = &v177;
      id v167 = *(id *)(a1 + 32);
      long long v169 = &buffer_ptr;
      long long v170 = &v181;
      int v171 = status;
      nw_http_metadata_enumerate_headers();
      if (*((unsigned char *)p_buffer_ptr + 24))
      {
        double v83 = *(void **)(a1 + 32);
        uint64_t v84 = objc_msgSend_transactionID(v83, v80, v81, v82);
        sub_19D9FFDB0(v83, 1, (uint64_t)"transactionID mismatch! expected: %llu", v85, v86, v87, v88, v89, v84);
        uint64_t v158 = MEMORY[0x1E4F143A8];
        uint64_t v159 = 3221225472;
        long long v160 = sub_19DA0C080;
        long long v161 = &unk_1E5973900;
        id v162 = *(id *)(a1 + 32);
        nw_http_metadata_enumerate_headers();
        uint64_t v90 = *(void *)(a1 + 40);
        if (!*(unsigned char *)(v90 + 15))
        {
          *(unsigned char *)(v90 + 15) = 1;
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 200));
          if (WeakRetained)
          {
            id v147 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 200));
            char v148 = objc_opt_respondsToSelector();

            if (v148)
            {
              id v149 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 200));
              objc_msgSend_linkTransactionIDMismatchDetected_(v149, v150, *(void *)(a1 + 40), v151);
            }
          }
        }
      }
      if (status != 200)
      {
        if (!v35)
        {
          double v35 = _IDSLinkPacketBufferCreate();
          v35[2] = 0;
          v35[161] = (id)objc_msgSend_connectionID(*(void **)(a1 + 32), v91, v92, v93);
          *((unsigned char *)v35 + 1296) = objc_msgSend_isQUICPod(*(void **)(a1 + 32), v94, v95, v96);
        }
        *((_DWORD *)v35 + 318) = *(_DWORD *)(a1 + 48);
        *((_DWORD *)v35 + 319) = status;
      }

      _Block_object_dispose(&buffer_ptr, 8);
    }
    else
    {
      long long v99 = nw_protocol_copy_ip_definition();
      id v65 = nw_content_context_copy_protocol_metadata(v9, v99);

      if (v65 && v35) {
        *((unsigned char *)v35 + 442) = nw_ip_metadata_get_ecn_flag(v65);
      }
    }

    goto LABEL_27;
  }
  buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
  size_t size_ptr = 0xAAAAAAAAAAAAAAAALL;
  dispatch_data_t v48 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
  if (!v48)
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"dispatch_data_create_map failed", v49, v50, v51, v52, v53, v153);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v97, *(void *)(a1 + 32), v98);
    goto LABEL_50;
  }
  dispatch_data_t v54 = v48;
  double v35 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", 3263, size_ptr);
  memcpy(*v35, buffer_ptr, size_ptr);
  v35[2] = (id)size_ptr;
  v35[161] = (id)objc_msgSend_connectionID(*(void **)(a1 + 32), v55, v56, v57);
  *((unsigned char *)v35 + 1296) = objc_msgSend_isQUICPod(*(void **)(a1 + 32), v58, v59, v60);
  if (objc_msgSend_type(*(void **)(a1 + 32), v61, v62, v63) == 3) {
    *((unsigned char *)v35 + 46) = 1;
  }

  if (v9) {
    goto LABEL_13;
  }
LABEL_27:
  if (v35)
  {
    id v100 = objc_msgSend_localEndpoint(*(void **)(a1 + 32), v16, v17, v23);
    sockaddr address = nw_endpoint_get_address(v100);

    uint64_t v105 = objc_msgSend_remoteEndpoint(*(void **)(a1 + 32), v102, v103, v104);
    __int16 v106 = nw_endpoint_get_address(v105);

    memcpy(v35 + 7, address, address->sa_len);
    memcpy(v35 + 23, v106, v106->sa_len);
    memcpy(v35 + 39, v182 + 4, *((unsigned __int8 *)v182 + 32));
    *((unsigned char *)v35 + 44) = *(unsigned char *)(a1 + 52);
    uint64_t v110 = v178[3];
    if (!v110) {
      uint64_t v110 = objc_msgSend_transactionID(*(void **)(a1 + 32), v107, v108, v109);
    }
    v35[157] = (id)v110;
    uint64_t v111 = objc_msgSend_sessionID(*(void **)(a1 + 32), v107, v108, v109);
    id v112 = v35[158];
    v35[158] = (id)v111;

    *((_DWORD *)v35 + 12) = objc_msgSend_interfaceIndex(*(void **)(a1 + 32), v113, v114, v115);
    if (objc_msgSend_type(*(void **)(a1 + 32), v116, v117, v118) == 7
      || objc_msgSend_type(*(void **)(a1 + 32), v119, v120, v121) == 8
      || objc_msgSend_type(*(void **)(a1 + 32), v119, v120, v121) == 9
      || objc_msgSend_type(*(void **)(a1 + 32), v119, v120, v121) == 10)
    {
      __int16 v122 = objc_msgSend_channelNumber(*(void **)(a1 + 32), v119, v120, v121);
    }
    else
    {
      __int16 v122 = 0;
    }
    *((_WORD *)v35 + 640) = v122;
    if (objc_msgSend_type(*(void **)(a1 + 32), v119, v120, v121) == 9
      || objc_msgSend_type(*(void **)(a1 + 32), v123, v124, v130) == 10)
    {
      v134 = "received p2p qpod packet";
    }
    else
    {
      v134 = "received qr qpod packet";
      if (objc_msgSend_type(*(void **)(a1 + 32), v131, v132, v133) != 7
        && objc_msgSend_type(*(void **)(a1 + 32), v143, v144, v145) != 8)
      {
        v134 = "received packet";
      }
    }
    sub_19D9FFDB0(*(void **)(a1 + 32), 3, (uint64_t)v134, v125, v126, v127, v128, v129, v153);
    v155[0] = MEMORY[0x1E4F143A8];
    v155[1] = 3221225472;
    v155[2] = sub_19DA0C190;
    v155[3] = &unk_1E5973AE0;
    long long v157 = v35;
    int8x16_t v154 = *(int8x16_t *)(a1 + 32);
    id v135 = (id)v154.i64[0];
    int8x16_t v156 = vextq_s8(v154, v154, 8uLL);
    IDSTransportThreadAddBlock(v155);
  }
  objc_msgSend_setShouldTreatNextTryAsFirstTry_(*(void **)(a1 + 32), v16, 1, v23);
  if (v10 || !*(unsigned char *)(a1 + 53))
  {
    if (objc_msgSend_type(*(void **)(a1 + 32), v136, v137, v138) != 5)
    {
      uint64_t v142 = *(void *)(a1 + 32);
      v141 = *(void **)(a1 + 40);
      if (v10) {
        objc_msgSend__failNWLinkConnection_(v141, v139, v142, v140);
      }
      else {
        objc_msgSend__cancelNWLinkConnection_remove_(v141, v139, v142, v140, 0);
      }
    }
  }
  else
  {
    objc_msgSend__handleIncomingMessage_keepWaiting_(*(void **)(a1 + 40), v136, *(void *)(a1 + 32), v138, 1);
  }
LABEL_50:
  _Block_object_dispose(&v181, 8);
  _Block_object_dispose(&v177, 8);
}

void sub_19DA0BE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t sub_19DA0BEC8(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  size_t v9 = (a3 + 1);
  if (a3 != -1) {
    memset((char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  }
  size_t v10 = (a5 + 1);
  if (a5 != -1) {
    memset((char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), 170, v10);
  }
  strlcpy((char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), a4, v10);
  if (!strcmp((const char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), "txn_id"))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = strtoull((const char *)v24 - ((v10 + 15) & 0x1FFFFFFF0), 0, 0);
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v19 != objc_msgSend_transactionID(*(void **)(a1 + 32), v20, v21, v22)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  else if (!strcmp((const char *)v24 - ((v9 + 15) & 0x1FFFFFFF0), "client_address"))
  {
    uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v11, (uint64_t)v24 - ((v10 + 15) & 0x1FFFFFFF0), v17);
    IPPortStringToSA(v18, *(void *)(*(void *)(a1 + 56) + 8) + 32);
  }
  if (*(_DWORD *)(a1 + 64) != 200) {
    sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v24 - ((v9 + 15) & 0x1FFFFFFF0));
  }
  return 1;
}

uint64_t sub_19DA0C080(uint64_t a1, char *__source, int a3, const char *a4, int a5)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  size_t v9 = (a3 + 1);
  if (a3 != -1) {
    memset((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), 170, (a3 + 1));
  }
  BOOL v10 = __CFADD__(a5, 1);
  size_t v11 = (a5 + 1);
  if (!v10) {
    memset((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), 170, v11);
  }
  strlcpy((char *)v18 - ((v9 + 15) & 0x1FFFFFFF0), __source, v9);
  strlcpy((char *)v18 - ((v11 + 15) & 0x1FFFFFFF0), a4, v11);
  sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"%s: %s", v12, v13, v14, v15, v16, (uint64_t)v18 - ((v9 + 15) & 0x1FFFFFFF0));
  return 1;
}

void sub_19DA0C190(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
  char v5 = objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v3, *(void *)(a1 + 32), v4, *(void *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 192), *(void *)(*(void *)(a1 + 32) + 184));

  if ((v5 & 1) == 0)
  {
    *(unsigned char *)(**(void **)(a1 + 48) + *(void *)(*(void *)(a1 + 48) + 16)) = 0;
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"content (%dB) \"%s\" NOT processed", v6, v7, v8, v9, v10, *(void *)(*(void *)(a1 + 48) + 16));
  }
  uint64_t v12 = *(void *)(a1 + 48);
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0xD2D, v12, v11);
}

uint64_t sub_19DA0C23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 16725925 || a3 == 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v10();
  }
  else
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"get capsuleType: 0x%x, data: %@", a4, a5, a6, a7, a8, a2);
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 56);
    return objc_msgSend__handleIncomingMessage_keepWaiting_(v14, v12, v15, v13, v16);
  }
}

void sub_19DA0C3A4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a2;
  id v9 = a3;
  id v15 = a5;
  if (v15)
  {
    sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"receive(%u) failed (%@)", v10, v11, v12, v13, v14, 4);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v17);
  }
  else if (v8)
  {
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_t size_ptr = 0xAAAAAAAAAAAAAAAALL;
    dispatch_data_t v23 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
    if (v23 && size_ptr == 4)
    {
      uint64_t v24 = bswap32(*(_DWORD *)buffer_ptr);
      sub_19D9FFDB0(*(void **)(a1 + 32), 1, (uint64_t)"receiving %u byte indication message", v18, v19, v20, v21, v22, v24);
      uint64_t v25 = *(NSObject **)(a1 + 48);
      completion[0] = MEMORY[0x1E4F143A8];
      completion[1] = 3221225472;
      completion[2] = sub_19DA0C53C;
      completion[3] = &unk_1E5973B58;
      id v26 = *(id *)(a1 + 32);
      int v33 = v24;
      uint64_t v27 = *(void *)(a1 + 40);
      id v31 = v26;
      uint64_t v32 = v27;
      nw_connection_receive(v25, v24, v24, completion);
    }
    else
    {
      sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"receive(%u) invalid content (%p, %lu)", v18, v19, v20, v21, v22, 4);
      objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v28, *(void *)(a1 + 32), v29);
    }
  }
}

void sub_19DA0C53C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a2;
  id v9 = a3;
  id v15 = a5;
  if (!v15)
  {
    if (!v8) {
      goto LABEL_10;
    }
    size_t size_ptr = 0xAAAAAAAAAAAAAAAALL;
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    dispatch_data_t v23 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
    if (v23)
    {
      uint64_t v24 = *(unsigned int *)(a1 + 48);
      if (size_ptr == v24)
      {
        uint64_t v25 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", 3452, size_ptr);
        memcpy(*v25, buffer_ptr, size_ptr);
        v25[2] = (id)size_ptr;
        v25[161] = (id)objc_msgSend_connectionID(*(void **)(a1 + 32), v26, v27, v28);
        *((unsigned char *)v25 + 1296) = objc_msgSend_isQUICPod(*(void **)(a1 + 32), v29, v30, v31);
        double v35 = objc_msgSend_localEndpoint(*(void **)(a1 + 32), v32, v33, v34);
        sockaddr address = nw_endpoint_get_address(v35);

        uint64_t v40 = objc_msgSend_remoteEndpoint(*(void **)(a1 + 32), v37, v38, v39);
        double v41 = nw_endpoint_get_address(v40);

        memcpy(v25 + 7, address, address->sa_len);
        memcpy(v25 + 23, v41, v41->sa_len);
        *((unsigned char *)v25 + 44) = 1;
        uint64_t v45 = objc_msgSend_sessionID(*(void **)(a1 + 32), v42, v43, v44);
        id v46 = v25[158];
        v25[158] = (id)v45;

        v25[157] = (id)objc_msgSend_transactionID(*(void **)(a1 + 32), v47, v48, v49);
        *((_DWORD *)v25 + 12) = objc_msgSend_interfaceIndex(*(void **)(a1 + 32), v50, v51, v52);
        objc_msgSend_setShouldTreatNextTryAsFirstTry_(*(void **)(a1 + 32), v53, 1, v54);
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = sub_19DA0C79C;
        v61[3] = &unk_1E5973AE0;
        double v63 = v25;
        int8x16_t v60 = *(int8x16_t *)(a1 + 32);
        id v55 = (id)v60.i64[0];
        int8x16_t v62 = vextq_s8(v60, v60, 8uLL);
        IDSTransportThreadAddBlock(v61);
        objc_msgSend__handleIncomingIndicationMessage_(*(void **)(a1 + 40), v56, *(void *)(a1 + 32), v57);

LABEL_9:
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(a1 + 48);
    }
    sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"receive2(%u) invalid content (%p, %lu)", v18, v19, v20, v21, v22, v24);
    objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v58, *(void *)(a1 + 32), v59);
    goto LABEL_9;
  }
  sub_19D9FFDB0(*(void **)(a1 + 32), 2, (uint64_t)"receive1(%u) failed (%@)", v10, v11, v12, v13, v14, *(unsigned int *)(a1 + 48));
  objc_msgSend__failNWLinkConnection_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v17);
LABEL_10:
}

void sub_19DA0C79C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
  char v5 = objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v3, *(void *)(a1 + 32), v4, *(void *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 192), *(void *)(*(void *)(a1 + 32) + 184));

  if ((v5 & 1) == 0)
  {
    *(unsigned char *)(**(void **)(a1 + 48) + *(void *)(*(void *)(a1 + 48) + 16)) = 0;
    sub_19D9FFDB0(*(void **)(a1 + 40), 1, (uint64_t)"content (%dB) \"%s\" NOT processed", v6, v7, v8, v9, v10, *(void *)(*(void *)(a1 + 48) + 16));
  }
  uint64_t v12 = *(void *)(a1 + 48);
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0xD96, v12, v11);
}

id sub_19DA0C848(NSObject *a1)
{
  nw_protocol_definition_t v1 = nw_protocol_options_copy_definition(a1);
  uint64_t identifier = nw_protocol_definition_get_identifier();
  char v5 = objc_msgSend_stringWithCString_encoding_(NSString, v3, identifier, v4, 4);

  return v5;
}

void sub_19DA0CA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DA0CA40(uint64_t a1, NSObject *a2)
{
  id v3 = NSString;
  sub_19DA0C848(a2);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = objc_msgSend_stringWithFormat_(v3, v4, @".%@%@", v5, v9, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

BOOL sub_19DA0D094(NSObject *a1, void *a2)
{
  id v3 = a2;
  sockaddr address = nw_endpoint_get_address(a1);
  double v5 = nw_endpoint_get_address(v3);

  return IsSameSA((uint64_t)address, (uint64_t)v5);
}

void sub_19DA0EC54(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    uint64_t v8 = v5;
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v10 = objc_msgSend_pointerAtIndex_(*(void **)(a1 + 32), v6, i, v7);
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSNWLink.m", (const char *)0x18A, v10, v11);
    }
  }
}

void sub_19DA0ECD0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t IDSQRProtoSessionExperimentReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v8 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v6)) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        unint64_t v13 = *(void *)(a2 + v12);
        if (v13 == -1 || v13 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        BOOL v15 = v10++ >= 9;
        if (v15)
        {
          unint64_t v11 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(unsigned char *)(a2 + *v6)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      uint64_t v17 = v11 & 7;
      if (v16 || v17 == 4) {
        break;
      }
      uint64_t v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          unsigned int v20 = 0;
          do
          {
            uint64_t v21 = *v4;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
              goto LABEL_54;
            }
            unint64_t v23 = v22 + 1;
            int v24 = *(char *)(*(void *)(a2 + *v8) + v22);
            *(void *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0) {
              break;
            }
          }
          while (v20++ <= 8);
          continue;
        case 2u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 1;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v30 = *v4;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
            }
            else
            {
              char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
              *(void *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                BOOL v15 = v28++ >= 9;
                if (v15)
                {
                  uint64_t v29 = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v6)) {
            uint64_t v29 = 0;
          }
LABEL_49:
          *(unsigned char *)(a1 + 36) = v29 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          *(unsigned char *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 2;
          uint64_t v33 = PBReaderReadString();
          uint64_t v34 = 24;
          goto LABEL_44;
        case 4u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          *(_DWORD *)(a1 + 32) = 3;
          *(unsigned char *)(a1 + 40) |= 1u;
          break;
        case 5u:
          uint64_t v33 = PBReaderReadString();
          uint64_t v34 = 8;
LABEL_44:
          double v41 = *(void **)(a1 + v34);
          *(void *)(a1 + v34) = v33;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v38 = *v4;
        unint64_t v39 = *(void *)(a2 + v38);
        if (v39 == -1 || v39 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v40 = *(unsigned char *)(*(void *)(a2 + *v8) + v39);
        *(void *)(a2 + v38) = v39 + 1;
        v37 |= (unint64_t)(v40 & 0x7F) << v35;
        if ((v40 & 0x80) == 0) {
          goto LABEL_51;
        }
        v35 += 7;
        BOOL v15 = v36++ >= 9;
        if (v15)
        {
          LODWORD(v37) = 0;
          goto LABEL_53;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_51:
      if (*(unsigned char *)(a2 + *v6)) {
        LODWORD(v37) = 0;
      }
LABEL_53:
      *(_DWORD *)(a1 + 16) = v37;
LABEL_54:
      ;
    }
    while (*(void *)(a2 + *v4) < *(void *)(a2 + *v5));
  }
  return *(unsigned char *)(a2 + *v6) == 0;
}

uint64_t sub_19DA11DF4(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  memset(&__b, 170, 0x4000uLL);
  if (v3 < 1025)
  {
    if (v3 < 1) {
      goto LABEL_21;
    }
  }
  else
  {
    double v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109376;
      *(_DWORD *)unsigned int v36 = v3;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = 1024;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "buffer array count too big: %d, use %d", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TCPLink", @"IDS", @"buffer array count too big: %d, use %d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"buffer array count too big: %d, use %d");
        }
      }
    }
    int v3 = 1024;
  }
  uint64_t v8 = 0;
  ssize_t v9 = 0;
  uint64_t v10 = v3;
  p_iov_leuint64_t n = &__b.iov_len;
  do
  {
    uint64_t v12 = (size_t *)v5[v8];
    *(p_iov_len - 1) = *v12;
    size_t v13 = v12[2];
    *p_iov_leuint64_t n = v13;
    p_iov_len += 2;
    v9 += v13;
    ++v8;
  }
  while (v3 != v8);
  if (v9)
  {
    if (!*(unsigned char *)(v6 + 4))
    {
      unsigned int v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "connecting", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"connecting");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"connecting");
          }
        }
      }
      if (!*(void *)(v6 + 288)) {
        *(void *)(v6 + 288) = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", 736, *v5);
      }
      return 14;
    }
    ssize_t v14 = writev(*(_DWORD *)v6, &__b, v3);
    uint64_t v18 = v14;
    if (v14 >= 1)
    {
      uint64_t v19 = *(void **)(v6 + 296);
      *v19 += v14;
      if (v14 >= v9)
      {
        uint64_t result = 0;
        v19[1] += v3;
        return result;
      }
      for (uint64_t i = v5; ; ++i)
      {
        uint64_t v21 = *i;
        uint64_t v22 = *(void *)(*i + 16);
        if (v18 < v22) {
          break;
        }
        ++v19[1];
        v18 -= v22;
        if (!--v10)
        {
          uint64_t v23 = isRunningTests(v17, v14, v15, v16);
          if (v23) {
            throwsIDSAbortException(v25, v23, v24);
          }
          abort();
        }
      }
      IDSLinkPacketBufferAddBufferStart((void *)*i, (const char *)v18, v16, v17);
      goto LABEL_59;
    }
    if (v14 == -1)
    {
      int v30 = *__error();
      if (v30 == 55 || v30 == 35)
      {
        uint64_t v21 = *v5;
      }
      else
      {
        unint64_t v31 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109120;
          *(_DWORD *)unsigned int v36 = v30;
          _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, "write failed: %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TCPLink", @"IDS", @"write failed: %d");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"write failed: %d");
            }
          }
        }
        sub_19DA12B4C((unsigned int *)v6);
        uint64_t v21 = 0;
      }
      uint64_t v18 = -1;
      if (v30 == 35 || v30 == 55)
      {
LABEL_59:
        char v32 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *(void *)(v21 + 16);
          uint64_t v34 = *(void *)(v6 + 288);
          *(_DWORD *)kevent buf = 134218496;
          *(void *)unsigned int v36 = v33;
          *(_WORD *)&v36[8] = 2048;
          uint64_t v37 = v18;
          __int16 v38 = 2048;
          uint64_t v39 = v34;
          _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "would block: %zd %zd %p", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TCPLink", @"IDS", @"would block: %zd %zd %p");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"would block: %zd %zd %p");
            }
          }
        }
        if (!*(void *)(v6 + 288))
        {
          *(void *)(v6 + 288) = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", 782, v21);
          IDSTransportThreadResumeSocket(*(_DWORD *)v6, 2);
        }
        return 14;
      }
    }
    else
    {
      uint64_t v29 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "connection closed by peer", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"connection closed by peer");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"connection closed by peer");
          }
        }
      }
      sub_19DA12B4C((unsigned int *)v6);
    }
    return 11;
  }
LABEL_21:
  id v26 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "nothing to write", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TCPLink", @"IDS", @"nothing to write");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"nothing to write");
      }
    }
  }
  return 0;
}

void sub_19DA12A50(unsigned int *a1)
{
  int v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionDestroy", v3, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TCPLink", @"IDS", @"IDSTCPConnectionDestroy");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"IDSTCPConnectionDestroy");
      }
    }
  }
  sub_19DA12B4C(a1);
  free(a1);
}

uint64_t sub_19DA12B4C(unsigned int *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 134217984;
    uint64_t v10 = a1;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionInvalidate: conn: %p", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TCPLink", @"IDS", @"IDSTCPConnectionInvalidate: conn: %p");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"IDSTCPConnectionInvalidate: conn: %p");
      }
    }
  }
  double v4 = (void *)*((void *)a1 + 2);
  if (v4)
  {
    sub_19DAD7318(v4);
    *((void *)a1 + 2) = 0;
  }
  uint64_t v5 = *((void *)a1 + 35);
  if (v5)
  {
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x1C4, v5, v3);
    *((void *)a1 + 35) = 0;
  }
  uint64_t v6 = *((void *)a1 + 36);
  if (v6)
  {
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x1C8, v6, v3);
    *((void *)a1 + 36) = 0;
  }
  double v7 = (const void *)*((void *)a1 + 41);
  if (v7)
  {
    _Block_release(v7);
    *((void *)a1 + 41) = 0;
  }
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0)
  {
    IDSTransportThreadRemoveSocket(result);
    uint64_t result = close(*a1);
    *a1 = -1;
  }
  *((unsigned char *)a1 + 4) = 0;
  return result;
}

void sub_19DA12CF0(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  socklen_t v6 = 4;
  int v7 = -1431655766;
  if (getsockopt(*(_DWORD *)v1, 0xFFFF, 4103, &v7, &v6))
  {
    int v7 = *__error();
    int v2 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v9) = v7;
      _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "getsockopt failed: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TCPLink", @"IDS", @"getsockopt failed: %d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"getsockopt failed: %d");
        }
      }
    }
  }
  else
  {
    double v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        double v4 = "not connected";
      }
      else {
        double v4 = "connected";
      }
      *(_DWORD *)kevent buf = 136315138;
      ssize_t v9 = v4;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "async connect completed, status: %s", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TCPLink", @"IDS", @"async connect completed, status: %s");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"async connect completed, status: %s");
        }
      }
    }
    if (v7) {
      sub_19DA12B4C((unsigned int *)v1);
    }
    else {
      sub_19DA12FD4(v1);
    }
  }
  if (v7 || !*(_DWORD *)(v1 + 12))
  {
    uint64_t v5 = *(void *)(v1 + 328);
    if (v5)
    {
      (*(void (**)(uint64_t))(v5 + 16))(v5);
      _Block_release(*(const void **)(v1 + 328));
      *(void *)(v1 + 328) = 0;
    }
  }
}

uint64_t sub_19DA12FD4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 288);
    *(_DWORD *)kevent buf = 134217984;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "connect done, outbound packet: %p", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TCPLink", @"IDS", @"connect done, outbound packet: %p");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"connect done, outbound packet: %p");
      }
    }
  }
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t result = sub_19DA1321C((int *)a1, &unk_19DB9B4D0, 0x33uLL);
    if (result)
    {
      unsigned int v5 = *(_DWORD *)a1;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = sub_19DA133A8;
      v9[3] = &unk_1E5970A28;
      v9[4] = a1;
      return IDSTransportThreadAddSocket(v5, v9, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = 1;
    unsigned int v6 = *(_DWORD *)a1;
    v7[4] = a1;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_19DA146D8;
    v8[3] = &unk_1E5970A28;
    v8[4] = a1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = sub_19DA146E0;
    v7[3] = &unk_1E5970A28;
    return IDSTransportThreadAddSocket(v6, v8, v7);
  }
  return result;
}

BOOL sub_19DA1321C(int *a1, const void *a2, size_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  ssize_t v5 = write(*a1, a2, a3);
  if (v5 != a3)
  {
    int v6 = *__error();
    int v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134218496;
      size_t v10 = a3;
      __int16 v11 = 2048;
      ssize_t v12 = v5;
      __int16 v13 = 1024;
      int v14 = v6;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSTCPConnectionSmallWrite: %zu %zd %d", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TCPLink", @"IDS", @"IDSTCPConnectionSmallWrite: %zu %zd %d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"IDSTCPConnectionSmallWrite: %zu %zd %d");
        }
      }
    }
    sub_19DA12B4C((unsigned int *)a1);
  }
  return v5 == a3;
}

void sub_19DA133A8(uint64_t a1)
{
}

void sub_19DA133B0(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v2 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 ***)(a1 + 280);
  double v4 = (unsigned char *)v2[3];
  size_t v5 = v2[1] - (void)v4;
  if (v5 <= 0x3FF)
  {
    sub_19DAD7324(*(void *)(a1 + 16));
    int v6 = (unsigned char *)v2[1];
    double v4 = (unsigned char *)v2[3];
    size_t v5 = v6 - v4;
    if (v6 == v4)
    {
      unsigned int v36 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "buffer full", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"buffer full");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"buffer full");
          }
        }
      }
      goto LABEL_106;
    }
  }
  ssize_t v7 = read(*(_DWORD *)a1, v4, v5);
  if (v7 <= 0)
  {
    if (v7 < 0)
    {
      int v37 = *__error();
      __int16 v38 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v37;
        _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "read failed: %d", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"read failed: %d");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"read failed: %d");
          }
        }
      }
    }
    else
    {
      char v35 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "Connection closed by peer", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"Connection closed by peer");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"Connection closed by peer");
          }
        }
      }
    }
LABEL_106:
    sub_19DA12B4C((unsigned int *)a1);
    return;
  }
  uint64_t v9 = 0;
  size_t v10 = (unsigned __int8 *)(v2[3] + v7);
  v2[3] = (uint64_t)v10;
  *(void *)(*(void *)(a1 + 296) + 16) += v7;
  __int16 v11 = (unsigned __int8 *)v2[2];
  uint64_t v12 = 134217984;
  while (1)
  {
    int v13 = *(_DWORD *)(a1 + 12);
    if (!v13) {
      break;
    }
    if ((unint64_t)(v10 - v11) <= 4)
    {
      char v40 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "partial header received", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"partial header received");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"partial header received");
          }
        }
      }
      return;
    }
    unsigned int v14 = *(unsigned __int16 *)(v11 + 3);
    unint64_t v15 = bswap32(v14) >> 16;
    if (v10 - v11 < (unint64_t)(v15 + 5))
    {
      uint64_t v41 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "partial record received", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"partial record received");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"partial record received");
          }
        }
      }
      return;
    }
    uint64_t v16 = v11 + 5;
    v2[2] = (uint64_t)(v11 + 5);
    switch(*v11)
    {
      case 0x14u:
        double v17 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "SSL change cipher spec", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TCPLink", @"IDS", @"SSL change cipher spec");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL change cipher spec");
            }
          }
        }
        *(_DWORD *)(a1 + 12) = 7;
        goto LABEL_81;
      case 0x15u:
        if ((unsigned __int16)v14 != 512)
        {
          double v47 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "SSL3 slert, bad record length: %u", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"TCPLink", @"IDS", @"SSL3 slert, bad record length: %u");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL3 slert, bad record length: %u");
              }
            }
          }
          goto LABEL_123;
        }
        char v27 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = v11[5];
          int v29 = v11[6];
          *(_DWORD *)kevent buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v28;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v29;
          _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "SSL3 slert: %u %u", buf, 0xEu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            unint64_t v50 = v11[5];
            unint64_t v51 = v11[6];
            _IDSLogTransport(@"TCPLink", @"IDS", @"SSL3 slert: %u %u");
            if (_IDSShouldLog())
            {
              unint64_t v50 = v11[5];
              unint64_t v51 = v11[6];
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL3 slert: %u %u");
            }
          }
        }
        if (*v16 == 2) {
          goto LABEL_123;
        }
        if (*(_DWORD *)(a1 + 12))
        {
          unint64_t v15 = 2;
          uint64_t v9 = 2;
          goto LABEL_83;
        }
        unint64_t v26 = 0;
        unint64_t v15 = 2;
LABEL_82:
        uint64_t v9 = v15;
        unint64_t v15 = v26;
LABEL_83:
        __int16 v11 = (unsigned __int8 *)(v2[2] + v15);
        v2[2] = (uint64_t)v11;
        ++*(void *)(*(void *)(a1 + 296) + 24);
        size_t v10 = (unsigned __int8 *)v2[3];
        if (!*(void *)(a1 + 280) || v10 == v11)
        {
          if (v10 == v11)
          {
            uint64_t v39 = *v2;
            v2[2] = *v2;
            v2[3] = v39;
          }
          return;
        }
        break;
      case 0x16u:
        if (v13 == 7)
        {
          uint64_t v18 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = *(void *)(a1 + 288);
            *(_DWORD *)double v57 = 134217984;
            uint64_t v58 = v19;
            _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "SSL handshake completed, %p", v57, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              unint64_t v50 = *(void *)(a1 + 288);
              _IDSLogTransport(@"TCPLink", @"IDS", @"SSL handshake completed, %p");
              if (_IDSShouldLog())
              {
                unint64_t v50 = *(void *)(a1 + 288);
                _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL handshake completed, %p");
              }
            }
          }
          *(_DWORD *)(a1 + 12) = 8;
          *(unsigned char *)(a1 + 4) = 1;
          unsigned int v20 = *(_DWORD *)a1;
          v53[4] = a1;
          *(void *)kevent buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_19DA14834;
          id v55 = &unk_1E5970A28;
          uint64_t v56 = a1;
          v53[0] = MEMORY[0x1E4F143A8];
          v53[1] = 3221225472;
          void v53[2] = sub_19DA1483C;
          v53[3] = &unk_1E5970A28;
          IDSTransportThreadAddSocket(v20, buf, v53);
          uint64_t v21 = *(void *)(a1 + 328);
          if (v21)
          {
            (*(void (**)(uint64_t, void))(v21 + 16))(v21, 0);
            _Block_release(*(const void **)(a1 + 328));
            *(void *)(a1 + 328) = 0;
          }
        }
        else
        {
          int v30 = *v16;
          switch(v30)
          {
            case 14:
              uint64_t v33 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)double v57 = 0;
                _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "SSL server done", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"TCPLink", @"IDS", @"SSL server done");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL server done");
                  }
                }
              }
              *(_DWORD *)(a1 + 12) = 6;
              if (!sub_19DA1321C((int *)a1, &unk_19DB9B503, 0x6DuLL))
              {
                double v49 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)double v57 = 0;
                  _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "failed to send client hello done", v57, 2u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(@"TCPLink", @"IDS", @"failed to send client hello done");
                    if (_IDSShouldLog()) {
                      _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"failed to send client hello done");
                    }
                  }
                }
                goto LABEL_123;
              }
              break;
            case 12:
              char v32 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)double v57 = 0;
                _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "SSL server key exchange", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"TCPLink", @"IDS", @"SSL server key exchange");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL server key exchange");
                  }
                }
              }
              break;
            case 2:
              unint64_t v31 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)double v57 = 0;
                _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, "SSL server hello", v57, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"TCPLink", @"IDS", @"SSL server hello");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL server hello");
                  }
                }
              }
              break;
            default:
              uint64_t v48 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)double v57 = 67109120;
                LODWORD(v58) = v30;
                _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "Unknown SSL handshake type: %u", v57, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"TCPLink", @"IDS", @"Unknown SSL handshake type: %u");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"Unknown SSL handshake type: %u");
                  }
                }
              }
              goto LABEL_123;
          }
        }
        unint64_t v26 = 0;
        goto LABEL_73;
      case 0x17u:
        if (v15 <= 2)
        {
          id v46 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "SSL user data has no padding: %u", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"TCPLink", @"IDS", @"SSL user data has no padding: %u");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"SSL user data has no padding: %u");
              }
            }
          }
          goto LABEL_123;
        }
        v15 -= 3;
        v11 += 8;
        v2[2] = (uint64_t)v11;
        goto LABEL_28;
      default:
        double v44 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          int v45 = *v11;
          *(_DWORD *)kevent buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v45;
          _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "Unknown SSL record type: %u", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TCPLink", @"IDS", @"Unknown SSL record type: %u");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"Unknown SSL record type: %u");
            }
          }
        }
        goto LABEL_123;
    }
  }
  unint64_t v15 = v9;
LABEL_28:
  *uint64_t v3 = v11;
  v3[2] = (unsigned __int8 *)(v10 - v11);
  char v52 = -86;
  uint64_t isChannelData = objc_msgSend_getPacketLength_isChannelData_(*(void **)(a1 + 320), v8, (uint64_t)v3, *(double *)&v12, &v52, v50, v51);
  if (isChannelData < 0)
  {
    if (isChannelData == -1)
    {
      uint64_t v43 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "need more bytes to find packet length", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TCPLink", @"IDS", @"need more bytes to find packet length");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"need more bytes to find packet length");
          }
        }
      }
      return;
    }
LABEL_123:
    sub_19DA12B4C((unsigned int *)a1);
    return;
  }
  if (v52) {
    BOOL v25 = (isChannelData & 3) == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = isChannelData;
  }
  else {
    unint64_t v26 = (isChannelData & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  if ((uint64_t)v26 > (uint64_t)v3[2]) {
    return;
  }
  v3[2] = (unsigned __int8 *)isChannelData;
  ++*(_DWORD *)(a1 + 8);
  objc_msgSend_processIncomingPacket_(*(void **)(a1 + 320), v23, (uint64_t)v3, v24);
  BOOL v25 = (*(_DWORD *)(a1 + 8))-- == 1;
  if (!v25)
  {
    if ((*(_DWORD *)a1 & 0x80000000) != 0) {
      goto LABEL_125;
    }
LABEL_73:
    if (*(_DWORD *)(a1 + 12))
    {
      if (v15 < v26)
      {
        uint64_t v34 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 134218240;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v26;
          _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "cross SSL record boundary: %zu %zd", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            unint64_t v50 = v15;
            unint64_t v51 = v26;
            _IDSLogTransport(@"TCPLink", @"IDS", @"cross SSL record boundary: %zu %zd");
            if (_IDSShouldLog())
            {
              unint64_t v50 = v15;
              unint64_t v51 = v26;
              _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"cross SSL record boundary: %zu %zd");
            }
          }
        }
      }
LABEL_81:
      uint64_t v9 = v15;
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  sub_19DA12A50((unsigned int *)a1);
LABEL_125:
  uint64_t v42 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "conn was destroyed or invalidated", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TCPLink", @"IDS", @"conn was destroyed or invalidated");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"conn was destroyed or invalidated");
      }
    }
  }
}

void sub_19DA146D8(uint64_t a1)
{
}

void sub_19DA146E0(uint64_t a1)
{
}

void sub_19DA146E8(uint64_t a1)
{
  if (*(void *)(a1 + 288))
  {
    int v2 = (uint64_t *)(a1 + 288);
    uint64_t v3 = sub_19DA11DF4(a1);
    if (*(_DWORD *)a1 != -1 && v3 != 14)
    {
      IDSTransportThreadSuspendSocket(*(_DWORD *)a1, 2);
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSTCPLink.m", (const char *)0x31D, *v2, v5);
      *int v2 = 0;
    }
  }
  else
  {
    IDSTransportThreadSuspendSocket(*(_DWORD *)a1, 2);
    int v6 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)ssize_t v7 = 0;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "nothing to send", v7, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TCPLink", @"IDS", @"nothing to send");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TCPLink", @"nothing to send");
        }
      }
    }
  }
}

uint64_t sub_19DA14834(uint64_t a1)
{
  return sub_19DA133B0(*(void *)(a1 + 32));
}

void sub_19DA1483C(uint64_t a1)
{
}

BOOL IDSQRProtoH3EndToEndChannelRegisterAckE2EChannelRegisterAckReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  int v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t writeStunAddressAttribute(unsigned __int16 *a1, uint64_t a2, int *a3, unint64_t a4, double a5)
{
  uint64_t v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB76EC8();
      }
LABEL_8:

      return 0;
    }
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    if (a4 == 4)
    {
      int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_19DB76F30();
      }
      goto LABEL_12;
    }
    *(unsigned char *)(a2 + 4) = 0;
    if (*((unsigned char *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        if (a4 == 5)
        {
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB770D8();
          }
          goto LABEL_12;
        }
        *(unsigned char *)(a2 + 5) = 2;
        if (a4 - 6 <= 1)
        {
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB77144();
          }
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 0xF)
        {
          int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            sub_19DB771AC();
          }
          goto LABEL_8;
        }
        *(_OWORD *)(a2 + 8) = *((_OWORD *)a1 + 1);
        int v10 = 24;
LABEL_44:
        *(_WORD *)(a2 + 2) = ((_WORD)v10 << 8) - 1024;
        *a3 = v10;
        return 1;
      }
      if (a4 != 5)
      {
        *(unsigned char *)(a2 + 5) = 1;
        if (a4 - 6 <= 1)
        {
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB77008();
          }
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 3)
        {
          int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            sub_19DB77070();
          }
          goto LABEL_8;
        }
        int v9 = *((_DWORD *)a1 + 7);
        goto LABEL_37;
      }
      int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
LABEL_32:
      }
        sub_19DB76F9C();
    }
    else
    {
      if (a4 != 5)
      {
        *(unsigned char *)(a2 + 5) = 1;
        if (a4 - 6 <= 1)
        {
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB77214();
          }
          goto LABEL_12;
        }
        *(_WORD *)(a2 + 6) = a1[5];
        if (a4 - 8 <= 3)
        {
          int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            sub_19DB7727C();
          }
          goto LABEL_8;
        }
        int v9 = *((_DWORD *)a1 + 3);
LABEL_37:
        *(_DWORD *)(a2 + 8) = v9;
        int v10 = 12;
        goto LABEL_44;
      }
      int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
    }
LABEL_12:

    return 0;
  }
  return v5;
}

uint64_t writeStunXORAddressAttribute(unsigned __int16 *a1, void *a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  char v13 = v9;
  uint64_t v14 = 0;
  if (a5 && a1 && v9 && a3 && a4)
  {
    if (a5 <= 3)
    {
      BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 134217984;
        unint64_t v32 = a5;
        uint64_t v16 = "writeStunXORAddressAttribute: for type: remainingLength: %zd < 4";
LABEL_12:
        _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v31, 0xCu);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    *(_WORD *)a3 = bswap32(*a1) >> 16;
    if (a5 == 4)
    {
      BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 134217984;
        unint64_t v32 = 0;
        uint64_t v16 = "writeStunXORAddressAttribute: for payload: remainingLength: %zd < 1";
        goto LABEL_12;
      }
LABEL_13:

      uint64_t v14 = 0;
      goto LABEL_14;
    }
    *(unsigned char *)(a3 + 4) = 0;
    if (*((unsigned char *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        if (a5 == 5)
        {
          BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_13;
          }
          int v31 = 134217984;
          unint64_t v32 = 0;
          uint64_t v16 = "writeStunXORAddressAttribute: for IPv6_v4Mapped: remainingLength: %zd < 1";
          goto LABEL_12;
        }
        *(unsigned char *)(a3 + 5) = 2;
        if (a5 - 6 <= 1)
        {
          BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_13;
          }
          int v31 = 134217984;
          unint64_t v32 = a5 - 6;
          uint64_t v16 = "writeStunXORAddressAttribute: for IPv6_v4Mapped STUN_MAGIC_COOKIE: remainingLength: %zd < 2";
          goto LABEL_12;
        }
        *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
        id v18 = v9;
        uint64_t v22 = objc_msgSend_bytes(v18, v19, v20, v21);
        if (a5 - 8 <= 0xF)
        {
          BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v23, v24, *(double *)v25.i64);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            sub_19DB772E4();
          }
          goto LABEL_13;
        }
        v25.i64[0] = *(void *)v22;
        v25.i32[2] = *(_DWORD *)(v22 + 8);
        int8x16_t v26 = vextq_s8(v25, v25, 0xCuLL);
        v26.i32[0] = 1118048801;
        *(_OWORD *)(a3 + 8) = *((_OWORD *)a1 + 1);
        int v27 = a3 + 24;
        *(int8x16_t *)(a3 + 8) = veorq_s8(*(int8x16_t *)(a3 + 8), v26);
LABEL_42:
        int v29 = v27 - a3;
        *(_WORD *)(a3 + 2) = bswap32(v29 - 4) >> 16;
        *a4 = v29;
        uint64_t v14 = 1;
        goto LABEL_14;
      }
      if (a5 == 5)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        int v31 = 134217984;
        unint64_t v32 = 0;
        uint64_t v16 = "writeStunXORAddressAttribute: for IPv6: remainingLength: %zd < 1";
        goto LABEL_12;
      }
      *(unsigned char *)(a3 + 5) = 1;
      if (a5 - 6 <= 1)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        int v31 = 134217984;
        unint64_t v32 = a5 - 6;
        uint64_t v16 = "writeStunXORAddressAttribute: for IPv6 STUN_MAGIC_COOKIE: remainingLength: %zd < 2";
        goto LABEL_12;
      }
      unint64_t v30 = a5 - 8;
      *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
      if (v30 <= 3)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_13;
        }
        int v31 = 134217984;
        unint64_t v32 = v30;
        uint64_t v16 = "writeStunXORAddressAttribute: for IPv6 STUN_MAGIC_COOKIE: remainingLength: %zd < 4";
        goto LABEL_12;
      }
      int v28 = *((_DWORD *)a1 + 7);
    }
    else
    {
      if (a5 == 5)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_19DB7734C();
        }
        goto LABEL_13;
      }
      *(unsigned char *)(a3 + 5) = 1;
      if (a5 - 6 <= 1)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_19DB773B8();
        }
        goto LABEL_13;
      }
      *(_WORD *)(a3 + 6) = a1[5] ^ 0x1221;
      if (a5 - 8 <= 3)
      {
        BOOL v15 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_19DB77420();
        }
        goto LABEL_13;
      }
      int v28 = *((_DWORD *)a1 + 3);
    }
    *(_DWORD *)(a3 + 8) = v28 ^ 0x42A41221;
    int v27 = a3 + 12;
    goto LABEL_42;
  }
LABEL_14:

  return v14;
}

uint64_t writeStunUINT8Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a4 || !a1 || !a2 || !a3)
  {
    int v10 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = 134218752;
      char v13 = a1;
      __int16 v14 = 2048;
      uint64_t v15 = a2;
      __int16 v16 = 2048;
      double v17 = a3;
      __int16 v18 = 2048;
      unint64_t v19 = a4;
      _os_log_error_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_ERROR, "writeStunUINT8Attribute: invalid parameter, attribute: %p, outputBuffer: %p, outputLength: %p, remainingLength: %zd", (uint8_t *)&v12, 0x2Au);
    }

    return 0;
  }
  if (a4 <= 1)
  {
    id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_19DB77488();
    }
LABEL_20:

    return 0;
  }
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  if (a4 - 2 <= 1)
  {
    id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_19DB774F4();
    }
    goto LABEL_20;
  }
  *(_WORD *)(a2 + 2) = 256;
  if (a4 == 4)
  {
    id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_19DB7755C();
    }
    goto LABEL_20;
  }
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a1 + 8);
  if (a4 - 5 <= 2)
  {
    id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_19DB775C8();
    }
    goto LABEL_20;
  }
  *(unsigned char *)(a2 + 7) = 0;
  *(_WORD *)(a2 + 5) = 0;
  *a3 = 8;
  return 1;
}

uint64_t writeStunUINT16Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 512;
        if (a4 - 4 > 1)
        {
          *(_WORD *)(a2 + 4) = bswap32(a1[4]) >> 16;
          if (a4 - 6 > 1)
          {
            *(_WORD *)(a2 + 6) = 0;
            *a3 = 8;
            return 1;
          }
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB7776C();
          }
        }
        else
        {
          int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            sub_19DB77704();
          }
        }
      }
      else
      {
        int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB7769C();
        }
      }
    }
    else
    {
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB77630();
      }
    }
    return 0;
  }
  return v5;
}

uint64_t writeStunUINT32Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 1024;
        if (a4 - 4 > 3)
        {
          *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)a1 + 2));
          *a3 = 8;
          return 1;
        }
        int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB778A8();
        }
      }
      else
      {
        int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB77840();
        }
      }
    }
    else
    {
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB777D4();
      }
    }
    return 0;
  }
  return v5;
}

uint64_t writeStunUINT64Attribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 1)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      if (a4 - 2 > 1)
      {
        *(_WORD *)(a2 + 2) = 2048;
        if (a4 - 4 > 7)
        {
          *(void *)(a2 + 4) = bswap64(*((void *)a1 + 1));
          *a3 = 12;
          return 1;
        }
        int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB779E4();
        }
      }
      else
      {
        int v7 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_19DB7797C();
        }
      }
    }
    else
    {
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB77910();
      }
    }
    return 0;
  }
  return v5;
}

uint64_t writeStunBinaryDataAttribute(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t result = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 > 3)
    {
      *(_WORD *)a2 = bswap32(*a1) >> 16;
      unint64_t v10 = *((int *)a1 + 2);
      unint64_t v11 = a4 - 4 - v10;
      if (a4 - 4 >= v10)
      {
        int v12 = a2 + 4;
        memcpy((void *)(a2 + 4), a1 + 6, *((int *)a1 + 2));
        int v16 = v10 + 4;
        *(_WORD *)(a2 + 2) = bswap32(v10) >> 16;
        if ((int)v10 <= 0) {
          int v17 = -(-(int)v10 & 3);
        }
        else {
          int v17 = v10 & 3;
        }
        if (v17 >= 1)
        {
          if (v11 < (4 - v17))
          {
            id v9 = objc_msgSend_Stun(IDSFoundationLog, v13, v14, v15);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
              sub_19DB77B38();
            }
            goto LABEL_18;
          }
          int v16 = v12 + v10 + 4 - v17 - a2;
        }
        *a3 = v16;
        return 1;
      }
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77AD0();
      }
    }
    else
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77A68();
      }
    }
LABEL_18:

    return 0;
  }
  return result;
}

uint64_t writeStunErrorCodeAttribute(_DWORD *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t result = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77BA0();
      }
LABEL_26:

      return 0;
    }
    *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a1) >> 16;
    if (a4 - 4 <= 1)
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77C08();
      }
      goto LABEL_26;
    }
    *(_WORD *)a2 = 0;
    if (a4 - 6 <= 1)
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77C70();
      }
      goto LABEL_26;
    }
    uint64_t v10 = a4 - 8;
    *(unsigned char *)(a2 + 6) = a1[2];
    *(unsigned char *)(a2 + 7) = a1[3];
    unint64_t v11 = (int)a1[36];
    unint64_t v12 = a4 - 8 - v11;
    if (a4 - 8 < v11)
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, v11, a5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77CD8((uint64_t)(a1 + 36), v10, v9);
      }
      goto LABEL_26;
    }
    memcpy((void *)(a2 + 8), a1 + 4, v11);
    int v16 = a2 + 8 + a1[36];
    unsigned int v17 = a1[36] + 4;
    *(_WORD *)(a2 + 2) = bswap32(v17) >> 16;
    if (v12 <= 3)
    {
      id v9 = objc_msgSend_Stun(IDSFoundationLog, v13, v14, v15);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_19DB77D54();
      }
      goto LABEL_26;
    }
    BOOL v18 = (-v17 & 0x80000000) != 0;
    int v19 = -v17 & 3;
    int v20 = v17 & 3;
    if (!v18) {
      int v20 = -v19;
    }
    if (v20 <= 0) {
      int v21 = 0;
    }
    else {
      int v21 = 4 - v20;
    }
    *a3 = v16 + v21 - a2;
    return 1;
  }
  return result;
}

uint64_t writeStunUnknownAttribute(int *a1, uint64_t a2, _DWORD *a3, unint64_t a4, double a5)
{
  uint64_t v5 = 0;
  if (a4 && a1 && a2 && a3)
  {
    if (a4 <= 3)
    {
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB77DBC();
      }
LABEL_25:

      return 0;
    }
    unint64_t v7 = a4 - 4;
    *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a1) >> 16;
    char v8 = (_WORD *)(a2 + 4);
    if (a1[2] >= 1)
    {
      uint64_t v9 = v7 >> 1;
      uint64_t v10 = a4 & 1;
      uint64_t v11 = 6;
      uint64_t v12 = -(uint64_t)(v7 >> 1);
      while (v12 + v11 != 6)
      {
        *v8++ = bswap32(*((unsigned __int16 *)a1 + v11)) >> 16;
        v7 -= 2;
        uint64_t v13 = v11 - 5;
        ++v11;
        if (v13 >= a1[2]) {
          goto LABEL_12;
        }
      }
      int v6 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19DB77E24(v9, v10, v6);
      }
      goto LABEL_25;
    }
LABEL_12:
    unsigned int v14 = v8 - a2 - 4;
    *(_WORD *)(a2 + 2) = bswap32(v14) >> 16;
    if (4 - ((int)v8 - (int)a2) >= 0) {
      int v15 = -((4 - (v8 - a2)) & 3);
    }
    else {
      int v15 = v14 & 3;
    }
    if (v7 < (4 - v15))
    {
      int v16 = objc_msgSend_Stun(IDSFoundationLog, (const char *)a2, (uint64_t)a3, a5);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_19DB77E9C();
      }

      return 0;
    }
    if (v15 <= 0) {
      int v17 = 0;
    }
    else {
      int v17 = 4 - v15;
    }
    *a3 = v8 + v17 - a2;
    return 1;
  }
  return v5;
}

uint64_t readStunXORAddressAttribute(int8x16_t *a1, _DWORD *a2, void *a3, uint64_t a4, unsigned int a5)
{
  id v9 = a3;
  uint64_t v13 = v9;
  if (*a2 > (signed int)a5) {
    goto LABEL_23;
  }
  if ((int)a5 > 1)
  {
    if (*(unsigned char *)(a4 + 1) == 2)
    {
      if ((unint64_t)objc_msgSend_length(v9, v10, v11, v12) <= 0xB)
      {
        BOOL v18 = objc_msgSend_Stun(IDSFoundationLog, v15, v16, v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_19DB77F6C();
        }
LABEL_22:

        goto LABEL_23;
      }
      id v19 = v13;
      uint64_t v23 = objc_msgSend_bytes(v19, v20, v21, v22);
      if (a5 < 4)
      {
        BOOL v18 = objc_msgSend_Stun(IDSFoundationLog, v24, v25, *(double *)v26.i64);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_19DB78048();
        }
        goto LABEL_22;
      }
      v26.i64[0] = *(void *)v23;
      v26.i32[2] = *(_DWORD *)(v23 + 8);
      __int16 v27 = *(_WORD *)(a4 + 2);
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1[2].i32[0] = 0;
      a1[1].i64[1] = 0;
      a1->i16[4] = 7708;
      a1->i16[5] = v27 ^ 0x1221;
      if (a5 < 0x14)
      {
        BOOL v18 = objc_msgSend_Stun(IDSFoundationLog, v24, v25, *(double *)v26.i64);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_19DB77FE0();
        }
        goto LABEL_22;
      }
      int8x16_t v32 = vextq_s8(v26, v26, 0xCuLL);
      v32.i32[0] = 1118048801;
      a1[1] = *(int8x16_t *)(a4 + 4);
      a1[1] = veorq_s8(a1[1], v32);
    }
    else
    {
      if (a5 <= 3)
      {
        unsigned int v14 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_19DB780B0();
        }
        goto LABEL_19;
      }
      if (a5 <= 7)
      {
        unsigned int v14 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_19DB78118();
        }
        goto LABEL_19;
      }
      __int16 v30 = *(_WORD *)(a4 + 2) ^ 0x1221;
      int v31 = *(_DWORD *)(a4 + 4) ^ 0x42A41221;
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1->i16[4] = 528;
      a1->i32[3] = v31;
      a1->i16[5] = v30;
    }
    uint64_t v28 = 1;
    goto LABEL_24;
  }
  unsigned int v14 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_19DB77F04();
  }
LABEL_19:

LABEL_23:
  uint64_t v28 = 0;
LABEL_24:

  return v28;
}

uint64_t readStunUINT8Attribute(uint64_t a1, char *a2, unsigned char *a3, int a4, double a5)
{
  if (*(_DWORD *)a2 <= a4)
  {
    if (a4)
    {
      *(unsigned char *)(a1 + 8) = *a3;
      *(_DWORD *)a2 = 4;
      return 1;
    }
    int v6 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_19DB78180(v6, v7, v8);
    }
  }
  return 0;
}

uint64_t readStunUINT16Attribute(uint64_t a1, char *a2, unsigned __int16 *a3, unsigned int a4, double a5)
{
  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 1)
    {
      *(_WORD *)(a1 + 8) = bswap32(*a3) >> 16;
      *(_DWORD *)a2 = 4;
      return 1;
    }
    int v6 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_19DB78204();
    }
  }
  return 0;
}

uint64_t readStunUINT32Attribute(uint64_t a1, char *a2, unsigned int *a3, unsigned int a4, double a5)
{
  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 3)
    {
      *(_DWORD *)(a1 + 8) = bswap32(*a3);
      *(_DWORD *)a2 = 4;
      return 1;
    }
    int v6 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_19DB78278();
    }
  }
  return 0;
}

uint64_t readStunUINT64Attribute(uint64_t a1, char *a2, unint64_t *a3, unsigned int a4, double a5)
{
  if (*(_DWORD *)a2 <= (signed int)a4)
  {
    if (a4 > 7)
    {
      *(void *)(a1 + 8) = bswap64(*a3);
      *(_DWORD *)a2 = 8;
      return 1;
    }
    int v6 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_19DB782EC();
    }
  }
  return 0;
}

BOOL readStunBinaryDataAttribute(uint64_t a1, int *a2, void *__src, int a4)
{
  int v4 = *a2;
  BOOL v6 = *a2 < 1473 && v4 <= a4;
  if (v6)
  {
    *(_DWORD *)(a1 + 8) = v4;
    memcpy((void *)(a1 + 12), __src, *a2);
    if (*a2 <= 0) {
      int v8 = -(-*a2 & 3);
    }
    else {
      int v8 = *a2 & 3;
    }
    if (v8 >= 1) {
      *a2 = *a2 - v8 + 4;
    }
  }
  return v6;
}

uint64_t readStunErrorCodeAttribute(_DWORD *a1, char *a2, unsigned __int8 *a3, int a4, double a5)
{
  if (*(_DWORD *)a2 > a4)
  {
    uint64_t v7 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_19DB78360((int *)a2, a4, v7);
    }

    return 0;
  }
  if (a4 < 2)
  {
    int v8 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_19DB78534();
    }
    goto LABEL_20;
  }
  if (a4 == 2)
  {
    int v8 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_19DB783EC(v8, v9, v10, v11, v12, v13, v14, v15);
    }
LABEL_20:

    return 0;
  }
  a1[2] = a3[2];
  if (a4 <= 3)
  {
    int v8 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_19DB784C4(v8, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_20;
  }
  a1[3] = a3[3];
  uint64_t v17 = *(int *)a2;
  if ((v17 - 5) >= 0x80)
  {
    int v8 = objc_msgSend_Stun(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_19DB7845C();
    }
    goto LABEL_20;
  }
  memcpy(a1 + 4, a3 + 4, v17 - 4);
  a1[36] = v17 - 4;
  if ((v17 & 3) != 0) {
    *(_DWORD *)a2 = *(_DWORD *)a2 - (v17 & 3) + 4;
  }
  return 1;
}

uint64_t readStunUnknownAttribute(uint64_t a1, int *a2, unsigned __int16 *a3, int a4)
{
  uint64_t result = 0;
  int v6 = *a2;
  if (*a2 <= a4 && v6 <= 41)
  {
    if (v6 >= 0) {
      int v7 = *a2;
    }
    else {
      int v7 = v6 + 1;
    }
    uint64_t v8 = (v7 >> 1);
    *(_DWORD *)(a1 + 8) = v8;
    if (v6 <= 1)
    {
LABEL_10:
      if (*a2 <= 0) {
        int v12 = -(-*a2 & 3);
      }
      else {
        int v12 = *a2 & 3;
      }
      if (v12 >= 1) {
        *a2 = *a2 - v12 + 4;
      }
      return 1;
    }
    else
    {
      uint64_t v9 = (_WORD *)(a1 + 12);
      while (1)
      {
        BOOL v10 = __OFSUB__(a4, 2);
        a4 -= 2;
        if (a4 < 0 != v10) {
          return 0;
        }
        unsigned int v11 = *a3++;
        *v9++ = bswap32(v11) >> 16;
        if (!--v8) {
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

BOOL isReservedStunEncryptedAttribute(__int16 a1)
{
  return (unsigned __int16)(a1 + 4599) < 0xF7u;
}

void sub_19DA17500(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19DA17528(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_19DA17548(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

id sub_19DA19040(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = v1;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v25, v5, v29, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v3);
        }
        uint64_t v13 = (void *)qword_1EB2BB878;
        uint64_t v14 = objc_msgSend_unsignedIntegerValue(*(void **)(*((void *)&v25 + 1) + 8 * i), v7, v8, v9, (void)v25);
        uint64_t v17 = objc_msgSend_objectAtIndex_(v13, v15, v14, v16);
        objc_msgSend_addObject_(v2, v18, (uint64_t)v17, v19);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v25, v9, v29, 16);
    }
    while (v10);
  }

  uint64_t v23 = objc_msgSend_copy(v2, v20, v21, v22);
  return v23;
}

uint64_t sub_19DA1B0F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

BOOL IDSQRProtoH3EndToEndChannelUnRegisterResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DA1C2F8()
{
  id v0 = objc_alloc_init(IDSRegistrationKeychainReader);
  id v1 = (void *)qword_1EB2BB768;
  qword_1EB2BB768 = (uint64_t)v0;
}

void sub_19DA1C4F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19DA1C528(uint64_t a1)
{
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend_invalidate(WeakRetained[2], v2, v3, v4);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = 0;
}

void sub_19DA1C588(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = (void *)WeakRetained[2];
  if (v5)
  {
    objc_msgSend_updateTimerInterval_repeats_(v5, v2, 10, v4, 0);
  }
  else
  {
    id v6 = objc_alloc(MEMORY[0x1E4F6C328]);
    int v7 = im_primary_queue();
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = sub_19DA1C680;
    v13[3] = &unk_1E5973CB8;
    id v14 = *(id *)(a1 + 32);
    uint64_t v10 = objc_msgSend_initWithQueue_interval_repeats_handlerBlock_(v6, v8, (uint64_t)v7, v9, 10, 0, v13);
    uint64_t v11 = *(void *)(a1 + 32);
    unint64_t v12 = *(void **)(v11 + 16);
    *(void *)(v11 + 16) = v10;
  }
}

uint64_t sub_19DA1C680(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__flush, a4, a2);
}

void sub_19DA1C688(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    MEMORY[0x1F4181798](a3, sel__flush, a4, a1);
  }
}

uint64_t sub_19DA1DFB8(uint64_t a1, int a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2) {
    return MEMORY[0x1F4181798](v4, sel__readyTransaction_, v5, a3);
  }
  else {
    return MEMORY[0x1F4181798](v4, sel__removeTransaction_, v5, a3);
  }
}

BOOL IDSQRProtoStatsRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
              goto LABEL_53;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
              goto LABEL_56;
            }
          }
          uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientTimestampNtp;
          goto LABEL_54;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
              goto LABEL_53;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__clientLatencyMs;
          goto LABEL_54;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
              goto LABEL_53;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__sentPackets;
          goto LABEL_54;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
          goto LABEL_54;
        }
        v35 += 7;
        BOOL v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
          goto LABEL_56;
        }
      }
      uint64_t v24 = &OBJC_IVAR___IDSQRProtoStatsRequest__receivedPackets;
LABEL_53:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoMaterialReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1) {
        break;
      }
      if (v17 != 3)
      {
        if (v17 != 2)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_49;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        uint64_t v33 = 16;
        goto LABEL_48;
      }
      char v29 = objc_alloc_init(IDSQRProtoMaterialInfo);
      objc_msgSend_addMaterialInfo_(a1, v30, (uint64_t)v29, v31);
      if (!PBReaderPlaceMark() || (IDSQRProtoMaterialInfoReadFrom((uint64_t)v29, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_45;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v20 = 0;
        goto LABEL_47;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_47:
    uint64_t v33 = 8;
LABEL_48:
    *(void *)&a1[v33] = v20;
    goto LABEL_49;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

const char *IDSRadioAccessTechnologyToString(unsigned int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1 < 0xB) {
    return off_1E5973D38[a1];
  }
  uint64_t v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    unsigned int v5 = a1;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Reserved IDS RAT: %u", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(@"GL", @"IDS", @"Reserved IDS RAT: %u");
    if (_IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"GL", @"Reserved IDS RAT: %u");
    }
  }
  return "Reserved";
}

void sub_19DA21234()
{
  id v0 = objc_alloc_init(IDSCellularLinkMonitor);
  id v1 = (void *)qword_1EB2BB770;
  qword_1EB2BB770 = (uint64_t)v0;
}

uint64_t sub_19DA21568(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 48);
  if (!v5)
  {
    uint64_t v6 = objc_msgSend_weakObjectsHashTable(MEMORY[0x1E4F28D30], a2, a3, a4);
    uint64_t v7 = *(void *)(a1 + 32);
    char v8 = *(void **)(v7 + 48);
    *(void *)(v7 + 48) = v6;

    unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 48);
  }
  uint64_t result = objc_msgSend_containsObject_(v5, a2, *(void *)(a1 + 40), a4);
  if ((result & 1) == 0)
  {
    objc_msgSend_addObject_(*(void **)(*(void *)(a1 + 32) + 48), v10, *(void *)(a1 + 40), v11);
    unint64_t v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v15 = v13;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "add cellularLinkDelegate %@.", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"add cellularLinkDelegate %@.");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"add cellularLinkDelegate %@.");
        }
      }
    }
  }
  return result;
}

uint64_t sub_19DA21780(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "remove cellularLinkDelegate %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v7 = *(void *)(a1 + 32);
      _IDSLogTransport(@"GL", @"IDS", @"remove cellularLinkDelegate %@.");
      if (_IDSShouldLog())
      {
        uint64_t v7 = *(void *)(a1 + 32);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"remove cellularLinkDelegate %@.");
      }
    }
  }
  return objc_msgSend_removeObject_(*(void **)(*(void *)(a1 + 40) + 48), v4, *(void *)(a1 + 32), v5, v7);
}

void sub_19DA21A7C(double a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  double v5 = objc_msgSend_copy(a3, (const char *)a3, (uint64_t)a4, a1);
  uint64_t v9 = objc_msgSend_copy(a4, v6, v7, v8);
  uint64_t v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412546;
    unint64_t v12 = v5;
    __int16 v13 = 2112;
    BOOL v14 = v9;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "Data status notification shouldn't be called: %@ %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"Data status notification shouldn't be called: %@ %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Data status notification shouldn't be called: %@ %@");
      }
    }
  }
}

void sub_19DA26914(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_processCTConnectionStateChangeNotification_connectionStatus_(v7, v5, *(void *)(a1 + 32), v6, *(void *)(a1 + 40));
}

void sub_19DA272BC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  if (a2)
  {
    uint64_t v9 = objc_msgSend_objectForKey_(a2, v5, @"kPayloadKey", v8);
    __int16 v13 = objc_msgSend_queue(*(void **)(a1 + 32), v10, v11, v12);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA2742C;
    block[3] = &unk_1E5970A78;
    id v14 = *(id *)(a1 + 40);
    id v21 = v9;
    id v22 = v14;
    id v15 = v9;
    dispatch_async(v13, block);
  }
  else
  {
    uint64_t v16 = objc_msgSend_queue(*(void **)(a1 + 32), v5, v6, v8);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_19DA27444;
    v17[3] = &unk_1E5970A78;
    id v19 = *(id *)(a1 + 40);
    id v18 = v7;
    dispatch_async(v16, v17);

    id v15 = v19;
  }
}

uint64_t sub_19DA2742C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_19DA27444(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_19DA27630(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v9 = objc_msgSend_queue(*(void **)(a1 + 32), v6, v7, v8);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = sub_19DA276F4;
  v12[3] = &unk_1E5970A78;
  id v10 = *(id *)(a1 + 40);
  id v13 = v5;
  id v14 = v10;
  id v11 = v5;
  dispatch_async(v9, v12);
}

uint64_t sub_19DA276F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA277AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v10 = objc_msgSend_queue(*(void **)(a1 + 32), v7, v8, v9);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19DA27894;
  block[3] = &unk_1E5973DE8;
  id v15 = v5;
  id v11 = *(id *)(a1 + 40);
  id v16 = v6;
  id v17 = v11;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v10, block);
}

uint64_t sub_19DA27894(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0, *(void *)(a1 + 40));
}

void sub_19DA279A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_msgSend_queue(*(void **)(a1 + 32), v4, v5, v6);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19DA27A64;
  v10[3] = &unk_1E5970A78;
  id v8 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v8;
  id v9 = v3;
  dispatch_async(v7, v10);
}

uint64_t sub_19DA27A64(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t IDSQRProtoInfoResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if (v18 == 3)
        {
          if (v16 != 2)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            while (1)
            {
              uint64_t v55 = *v3;
              unint64_t v56 = *(void *)(a2 + v55);
              if (v56 == -1 || v56 >= *(void *)(a2 + *v4)) {
                goto LABEL_87;
              }
              char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
              *(void *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                BOOL v14 = v53++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_88;
            }
          }
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            while (1)
            {
              uint64_t v37 = *v3;
              unint64_t v38 = *(void *)(a2 + v37);
              if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_62;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
            PBRepeatedUInt64Add();
          }
LABEL_63:
          PBReaderRecallMark();
          continue;
        }
        if (v18 == 16)
        {
          if (v16 != 2)
          {
            char v46 = 0;
            unsigned int v47 = 0;
            uint64_t v48 = 0;
            while (1)
            {
              uint64_t v49 = *v3;
              unint64_t v50 = *(void *)(a2 + v49);
              if (v50 == -1 || v50 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
              *(void *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                BOOL v14 = v47++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_88;
            }
LABEL_87:
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_88:
            PBRepeatedUInt64Add();
            continue;
          }
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            while (1)
            {
              uint64_t v29 = *v3;
              unint64_t v30 = *(void *)(a2 + v29);
              if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_48;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
            PBRepeatedUInt64Add();
          }
          goto LABEL_63;
        }
      }
      else
      {
        if (v18 == 1)
        {
          uint64_t v32 = PBReaderReadString();
          uint64_t v33 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v32;

          continue;
        }
        if (v18 == 2)
        {
          if (v16 != 2)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            while (1)
            {
              uint64_t v43 = *v3;
              unint64_t v44 = *(void *)(a2 + v43);
              if (v44 == -1 || v44 >= *(void *)(a2 + *v4)) {
                goto LABEL_87;
              }
              char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v44 + 1;
              v42 |= (unint64_t)(v45 & 0x7F) << v40;
              if (v45 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_88;
            }
          }
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v20 = 0;
            unsigned int v21 = 0;
            uint64_t v22 = 0;
            while (1)
            {
              uint64_t v23 = *v3;
              unint64_t v24 = *(void *)(a2 + v23);
              if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_33;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
            PBRepeatedUInt64Add();
          }
          goto LABEL_63;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL sub_19DA2DBE0(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
LABEL_24:
        char v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoSubscribedStreamReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = 0;
              unsigned int v19 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 44) |= 4u;
              while (1)
              {
                uint64_t v21 = *v3;
                unint64_t v22 = *(void *)(a2 + v21);
                if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v18 += 7;
                BOOL v14 = v19++ >= 9;
                if (v14)
                {
                  uint64_t v20 = 0;
                  goto LABEL_58;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v20 = 0;
              }
LABEL_58:
              BOOL v42 = v20 != 0;
              uint64_t v43 = 41;
              goto LABEL_67;
            case 2u:
              char v24 = 0;
              unsigned int v25 = 0;
              uint64_t v26 = 0;
              *(unsigned char *)(a1 + 44) |= 1u;
              while (2)
              {
                uint64_t v27 = *v3;
                unint64_t v28 = *(void *)(a2 + v27);
                if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
                  *(void *)(a2 + v27) = v28 + 1;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if (v29 < 0)
                  {
                    v24 += 7;
                    BOOL v14 = v25++ >= 9;
                    if (v14)
                    {
                      uint64_t v26 = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v26 = 0;
              }
LABEL_62:
              *(void *)(a1 + 32) = v26;
              goto LABEL_78;
            case 3u:
              if (v16 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v30 = 0;
                  unsigned int v31 = 0;
                  uint64_t v32 = 0;
                  while (1)
                  {
                    uint64_t v33 = *v3;
                    unint64_t v34 = *(void *)(a2 + v33);
                    if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
                    *(void *)(a2 + v33) = v34 + 1;
                    v32 |= (unint64_t)(v35 & 0x7F) << v30;
                    if (v35 < 0)
                    {
                      v30 += 7;
                      BOOL v14 = v31++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_47;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
                  PBRepeatedUInt32Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                char v44 = 0;
                unsigned int v45 = 0;
                uint64_t v46 = 0;
                while (1)
                {
                  uint64_t v47 = *v3;
                  unint64_t v48 = *(void *)(a2 + v47);
                  if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
                  *(void *)(a2 + v47) = v48 + 1;
                  v46 |= (unint64_t)(v49 & 0x7F) << v44;
                  if (v49 < 0)
                  {
                    v44 += 7;
                    BOOL v14 = v45++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_77;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_77:
                PBRepeatedUInt32Add();
              }
LABEL_78:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            case 4u:
              char v36 = 0;
              unsigned int v37 = 0;
              uint64_t v38 = 0;
              *(unsigned char *)(a1 + 44) |= 2u;
              while (2)
              {
                uint64_t v39 = *v3;
                unint64_t v40 = *(void *)(a2 + v39);
                if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
                  *(void *)(a2 + v39) = v40 + 1;
                  v38 |= (unint64_t)(v41 & 0x7F) << v36;
                  if (v41 < 0)
                  {
                    v36 += 7;
                    BOOL v14 = v37++ >= 9;
                    if (v14)
                    {
                      uint64_t v38 = 0;
                      goto LABEL_66;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v38 = 0;
              }
LABEL_66:
              BOOL v42 = v38 != 0;
              uint64_t v43 = 40;
LABEL_67:
              *(unsigned char *)(a1 + v43) = v42;
              goto LABEL_78;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_78;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

double sub_19DA2F268()
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  double result = (double)v0 / (double)v1 / 1000000000.0;
  bst_mach_time_rate = *(void *)&result;
  return result;
}

uint64_t TrafficClassForIDSOpenSocketPriorityLevel(uint64_t a1)
{
  if (a1 == 800) {
    int v1 = 800;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 700) {
    int v2 = 700;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 600) {
    unsigned int v3 = 600;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 300) {
    int v4 = 600;
  }
  else {
    int v4 = 0;
  }
  if (a1 == 100) {
    unsigned int v5 = 100;
  }
  else {
    unsigned int v5 = v4;
  }
  if (a1 <= 599) {
    return v5;
  }
  else {
    return v3;
  }
}

void sub_19DA2F300(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  double v6 = (const char *)objc_msgSend_UTF8String(v13, v3, v4, v5);
  uint64_t v7 = fopen(v6, "r");
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v32[15] = v8;
  long long v31 = v8;
  *(_OWORD *)uint64_t v32 = v8;
  long long v29 = v8;
  long long v30 = v8;
  long long v27 = v8;
  long long v28 = v8;
  long long v25 = v8;
  long long v26 = v8;
  long long v23 = v8;
  long long v24 = v8;
  long long v21 = v8;
  long long v22 = v8;
  long long v19 = v8;
  long long v20 = v8;
  *(_OWORD *)__s = v8;
  char v33 = 0;
  if (v7)
  {
    unsigned int v9 = v7;
    while (fgets(__s, 255, v9))
    {
      size_t v10 = strlen(__s);
      if (v10 && __s[v10 - 1] == 10) {
        __s[v10 - 1] = 0;
      }
      uint64_t v11 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v15 = a1;
        __int16 v16 = 2080;
        unint64_t v17 = __s;
        _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "%s: %s", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: %s");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: %s");
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      uint64_t v15 = a1;
      __int16 v16 = 2112;
      unint64_t v17 = (char *)v13;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "%s: No such file %@ to dump", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: No such file %@ to dump");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: No such file %@ to dump");
        }
      }
    }
  }
}

void IDSNetworkingLogDump(uint64_t a1, unsigned int a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 136315394;
    uint64_t v98 = a1;
    __int16 v99 = 2048;
    *(void *)&double v100 = a2;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "%s: asked to dump networking logs flags %lu", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v93 = a1;
      *(void *)&double v94 = a2;
      _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: asked to dump networking logs flags %lu");
      if (_IDSShouldLog())
      {
        uint64_t v93 = a1;
        *(void *)&double v94 = a2;
        _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: asked to dump networking logs flags %lu");
      }
    }
  }
  if ((a2 & 8) != 0)
  {
    long long v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315138;
      uint64_t v98 = a1;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "%s: netdiagnose start packetcapture", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: netdiagnose start packetcapture");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: netdiagnose start packetcapture");
        }
      }
    }
    unsigned int v9 = NSString;
    size_t v10 = NSTemporaryDirectory();
    BOOL v14 = objc_msgSend_stringGUID(NSString, v11, v12, v13);
    unint64_t v17 = objc_msgSend_stringWithFormat_(v9, v15, @"%@/netdiagnose_identityservicesd_%@.txt", v16, v10, v14);

    objc_msgSend_stringWithFormat_(NSString, v18, @"/usr/local/bin/netdiagnose start packetcapture > %@", v19, v17);
    id v20 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_UTF8String(v20, v21, v22, v23);
    IMPerformSystem();
    long long v24 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315138;
      uint64_t v98 = a1;
      _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "%s: wait 1 second to capture", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v93 = a1;
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: wait 1 second to capture");
        if (_IDSShouldLog())
        {
          uint64_t v93 = a1;
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: wait 1 second to capture");
        }
      }
    }
    dispatch_time_t v25 = dispatch_time(0, 1000000000);
    long long v26 = MEMORY[0x1E4F14428];
    id v27 = MEMORY[0x1E4F14428];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA30380;
    block[3] = &unk_1E5970A28;
    void block[4] = a1;
    dispatch_after(v25, v26, block);

    sub_19DA2F300(a1, v17);
  }
  if (a2)
  {
    pid_t v28 = getpid();
    long long v29 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      uint64_t v98 = a1;
      __int16 v99 = 2048;
      *(void *)&double v100 = v28;
      _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "%s: lskq for identityservicesd %lu", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: lskq for identityservicesd %lu");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: lskq for identityservicesd %lu");
        }
      }
    }
    long long v30 = NSString;
    long long v31 = NSTemporaryDirectory();
    char v35 = objc_msgSend_stringGUID(NSString, v32, v33, v34);
    uint64_t v38 = objc_msgSend_stringWithFormat_(v30, v36, @"%@/lskq_identityservicesd_%@.txt", v37, v31, v35);

    objc_msgSend_stringWithFormat_(NSString, v39, @"/usr/bin/lskq -p %lu > %@", v40, v28, v38);
    id v41 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_UTF8String(v41, v42, v43, v44);
    IMPerformSystem();
    unsigned int v45 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      uint64_t v98 = a1;
      __int16 v99 = 2112;
      double v100 = *(double *)&v38;
      _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "%s: === lskq file [%@] ===", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v93 = a1;
        double v94 = *(double *)&v38;
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: === lskq file [%@] ===");
        if (_IDSShouldLog())
        {
          uint64_t v93 = a1;
          double v94 = *(double *)&v38;
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: === lskq file [%@] ===");
        }
      }
    }
    sub_19DA2F300(a1, v38);
  }
  if ((a2 & 0x10) != 0)
  {
    uint64_t v46 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v5, v6, v7);
    int isInternalInstall = objc_msgSend_isInternalInstall(v46, v47, v48, v49);

    if (isInternalInstall)
    {
      pid_t v51 = getpid();
      char v52 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v98 = a1;
        __int16 v99 = 2048;
        *(void *)&double v100 = v51;
        _os_log_impl(&dword_19D9BE000, v52, OS_LOG_TYPE_DEFAULT, "%s: lsof for identityservicesd %lu", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: lsof for identityservicesd %lu");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: lsof for identityservicesd %lu");
          }
        }
      }
      unsigned int v53 = NSString;
      uint64_t v54 = NSTemporaryDirectory();
      uint64_t v58 = objc_msgSend_stringGUID(NSString, v55, v56, v57);
      double v61 = objc_msgSend_stringWithFormat_(v53, v59, @"%@/lsof_identityservicesd_%@.txt", v60, v54, v58);

      objc_msgSend_stringWithFormat_(NSString, v62, @"/usr/sbin/lsof -lnPp %lu > %@", v63, v51, v61);
      id v64 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_UTF8String(v64, v65, v66, v67);
      IMPerformSystem();
      id v68 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v98 = a1;
        __int16 v99 = 2112;
        double v100 = *(double *)&v61;
        _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "%s: === lsof file [%@] ===", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v93 = a1;
          double v94 = *(double *)&v61;
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: === lsof file [%@] ===");
          if (_IDSShouldLog())
          {
            uint64_t v93 = a1;
            double v94 = *(double *)&v61;
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: === lsof file [%@] ===");
          }
        }
      }
      sub_19DA2F300(a1, v61);
    }
  }
  if ((a2 & 2) != 0)
  {
    double v69 = ids_monotonic_time();
    if (*(double *)&qword_1E944F438 == 0.0
      || (double v70 = v69 - *(double *)&qword_1E944F438, v69 - *(double *)&qword_1E944F438 > 10.0))
    {
      id v72 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315138;
        uint64_t v98 = a1;
        _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "%s: simulate crash", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v93 = a1;
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: simulate crash");
          if (_IDSShouldLog())
          {
            uint64_t v93 = a1;
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: simulate crash");
          }
        }
      }
      uint64_t v76 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v73, v74, v75, v93, *(void *)&v94);
      int v80 = objc_msgSend_processName(v76, v77, v78, v79);
      getpid();
      double v83 = objc_msgSend_stringWithUTF8String_(NSString, v81, a1, v82);
      IMLogSimulateCrashForProcessAndPID();
    }
    else
    {
      char v71 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v98 = a1;
        __int16 v99 = 2048;
        double v100 = v70;
        _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "%s: simulate crash skipped - already done recently (%.6lfs ago)", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v94 = v70;
          uint64_t v93 = a1;
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: simulate crash skipped - already done recently (%.6lfs ago)");
          if (_IDSShouldLog())
          {
            double v94 = v70;
            uint64_t v93 = a1;
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: simulate crash skipped - already done recently (%.6lfs ago)");
          }
        }
      }
    }
    qword_1E944F438 = *(void *)&v69;
  }
  if ((a2 & 4) != 0)
  {
    double v84 = ids_monotonic_time();
    if (*(double *)&qword_1E944F440 == 0.0
      || (double v85 = v84 - *(double *)&qword_1E944F440, v84 - *(double *)&qword_1E944F440 > 30.0))
    {
      uint64_t v87 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315138;
        uint64_t v98 = a1;
        _os_log_impl(&dword_19D9BE000, v87, OS_LOG_TYPE_DEFAULT, "%s: kick off sysdiagnose", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v93 = a1;
          _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: kick off sysdiagnose");
          if (_IDSShouldLog())
          {
            uint64_t v93 = a1;
            _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: kick off sysdiagnose");
          }
        }
      }
      double v91 = objc_msgSend_sharedInstance(IDSSysdiagnoseLogCollector, v88, v89, v90, v93, *(void *)&v94);
      v95[0] = MEMORY[0x1E4F143A8];
      v95[1] = 3221225472;
      v95[2] = sub_19DA304EC;
      v95[3] = &unk_1E5973E58;
      v95[4] = a1;
      objc_msgSend_collectSysdiagnoseLog_(v91, v92, (uint64_t)v95, COERCE_DOUBLE(3221225472));
    }
    else
    {
      uint64_t v86 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v98 = a1;
        __int16 v99 = 2048;
        double v100 = v85;
        _os_log_impl(&dword_19D9BE000, v86, OS_LOG_TYPE_DEFAULT, "%s: sysdiagnose skipped - already done recently (%.6lfs ago)", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: sysdiagnose skipped - already done recently (%.6lfs ago)");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: sysdiagnose skipped - already done recently (%.6lfs ago)");
        }
      }
    }
    qword_1E944F440 = *(void *)&v84;
  }
}

void sub_19DA30380(uint64_t a1, const char *a2, double a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  objc_msgSend_stringWithFormat_(NSString, a2, @"/usr/local/bin/netdiagnose stop packetcapture", a3);
  id v4 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_UTF8String(v4, v5, v6, v7);
  IMPerformSystem();
  long long v8 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 136315138;
    uint64_t v11 = v9;
    _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "%s: netdiagnose stop packetcapture", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: netdiagnose stop packetcapture");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: netdiagnose stop packetcapture");
      }
    }
  }
}

void sub_19DA304EC(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "%s: sysdiagnose finished", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"IDSNetworkingLogDump", @"IDS", @"%s: sysdiagnose finished");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"IDSNetworkingLogDump", @"%s: sysdiagnose finished");
      }
    }
  }
}

void sub_19DA30944(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_connectionDidClose_(v5, v3, *(void *)(a1 + 32), v4);
  }
}

uint64_t sub_19DA30AE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA311AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_connection_didReceiveData_(v5, v3, *(void *)(a1 + 32), v4, *(void *)(a1 + 40));
  }
}

void sub_19DA31284(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 40))
  {
    dispatch_source_t v3 = dispatch_source_create(MEMORY[0x1E4F14478], *(int *)(v1 + 56), 0, *(dispatch_queue_t *)(v1 + 32));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(NSObject **)(v6 + 40);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_19DA31344;
    handler[3] = &unk_1E5973BA8;
    void handler[4] = v6;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 40));
  }
}

uint64_t sub_19DA31344(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processBytesAvailable, a4, a2);
}

void sub_19DA31BA8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA31734);
  }
  _Unwind_Resume(a1);
}

void sub_19DA31CBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 48))
  {
    dispatch_source_t v3 = dispatch_source_create(MEMORY[0x1E4F144B0], *(int *)(v2 + 56), 0, *(dispatch_queue_t *)(v2 + 32));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 48) = v3;

    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(NSObject **)(v6 + 48);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_19DA31E6C;
    handler[3] = &unk_1E5973BA8;
    void handler[4] = v6;
    dispatch_source_set_event_handler(v7, handler);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (!*(unsigned char *)(v2 + 88))
  {
    uint64_t v8 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "Resuming write source", v9, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (MarcoShouldLog()) {
        MarcoLog();
      }
      if (IMShouldLog()) {
        IMLogString();
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 88) = 1;
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 48));
  }
}

uint64_t sub_19DA31E6C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sendToConnectedSocket, a4, a2);
}

uint64_t sub_19DA31F64(void *a1, const char *a2, double a3)
{
  objc_msgSend_addObject_(*(void **)(a1[4] + 24), a2, a1[5], a3);
  uint64_t result = a1[4];
  if (!*(void *)(result + 48) || !*(unsigned char *)(result + 88)) {
    uint64_t result = objc_msgSend__setupWriteSource((void *)result, v4, v5, v6);
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

uint64_t sub_19DA327F4(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2[2] < 4) {
    return -1;
  }
  *a3 = 0;
  unsigned int v6 = *(unsigned __int16 *)*a2;
  if (IDSSimpleUInt16List_HasItem(*(void *)(a1 + 32) + 272, v6))
  {
    *a3 = 1;
    return (bswap32(*(unsigned __int16 *)(*a2 + 2)) >> 16) + 4;
  }
  else if ((v6 & 0xC0) != 0)
  {
    uint64_t v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      unsigned int v9 = __rev16(v6);
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "unknown packet, %04x", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"unknown packet, %04x");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"unknown packet, %04x");
      }
    }
    return -2;
  }
  else
  {
    if (a2[2] < 20) {
      return -1;
    }
    return (bswap32(*(unsigned __int16 *)(*a2 + 2)) >> 16) + 20;
  }
}

uint64_t sub_19DA32FB0(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19DA32FB8(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19DA32FC0(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19DA32FC8(double a1, uint64_t a2, const char *a3, void *a4)
{
  return objc_msgSend_invalidate(a4, a3, (uint64_t)a4, a1);
}

uint64_t sub_19DA32FD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA332D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA342B4(uint64_t a1, signed int a2, const void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    signed int v18 = a2;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "prefixCount: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"prefixCount: %d");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"prefixCount: %d");
      }
    }
  }
  if (a2 >= 1 && (uint64_t v7 = IDSNAT64PrefixCreate(a3, a2, *(_DWORD *)(a1 + 48))) != 0)
  {
    uint64_t v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)kevent buf = 67109376;
      signed int v18 = a2;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "receive %d nat64 prefix for if:%d", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"receive %d nat64 prefix for if:%d");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive %d nat64 prefix for if:%d");
      }
    }
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = sub_19DA34664;
    v13[3] = &unk_1E5973F48;
    int v16 = *(_DWORD *)(a1 + 48);
    uint64_t v10 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    uint64_t v15 = v7;
    id v14 = v10;
    IDSTransportThreadAddBlock(v13);
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 552) = 0;
    uint64_t v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      signed int v12 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)kevent buf = 67109120;
      signed int v18 = v12;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "nw_nat64_copy_prefixes_async failed for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"nw_nat64_copy_prefixes_async failed for if:%d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"nw_nat64_copy_prefixes_async failed for if:%d.");
        }
      }
    }
  }
}

uint64_t sub_19DA34664(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)kevent buf = 67109120;
    int v6 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "set nat64 prefix for if:%d in cache.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"set nat64 prefix for if:%d in cache.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"set nat64 prefix for if:%d in cache.");
      }
    }
  }
  IDSNAT64PrefixCacheSetPrefixes(*(void **)(*(void *)(a1 + 32) + 216), *(void *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  }
  return result;
}

void sub_19DA37AE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19DA37B74;
  v5[3] = &unk_1E5973CF8;
  v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  IDSTransportThreadAddBlock(v5);
}

uint64_t sub_19DA37B74(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handle_wifi_path_nwEndPoind_, *(void *)(a1 + 40), a2);
}

void sub_19DA37B84(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_19DA37C18;
  v5[3] = &unk_1E5973CF8;
  v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  IDSTransportThreadAddBlock(v5);
}

uint64_t sub_19DA37C18(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handle_cellular_path_nwEndPoind_, *(void *)(a1 + 40), a2);
}

uint64_t sub_19DA3877C(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(a1 + 64);
  if (*(unsigned char *)(a1 + 92) && (v2 == 0.0 || *(_DWORD *)(a1 + 88) == 10))
  {
    id v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      int v5 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)kevent buf = 134218240;
      *(void *)unint64_t v17 = v4;
      *(_WORD *)&v17[8] = 1024;
      *(_DWORD *)&v17[10] = v5;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u", buf, 0x12u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"initiator: allocateRequestTime: %f, IDSRadioAccessTechnology_Unknown: %u");
        }
      }
    }
  }
  else
  {
    uint64_t v7 = (int)(v2 * 1000.0);
    uint64_t v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)kevent buf = 67109890;
      *(_DWORD *)unint64_t v17 = 402;
      *(_WORD *)&void v17[4] = 2112;
      *(void *)&v17[6] = v9;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "report AWD allocator event %d for request %@, duration %u ms, RAT: %u", buf, 0x1Eu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        uint64_t v14 = v7;
        uint64_t v15 = *(unsigned int *)(a1 + 88);
        uint64_t v12 = 402;
        uint64_t v13 = *(void *)(a1 + 32);
        _IDSLogTransport(@"GL", @"IDS", @"report AWD allocator event %d for request %@, duration %u ms, RAT: %u");
        uint64_t result = _IDSShouldLog();
        if (result)
        {
          uint64_t v14 = v7;
          uint64_t v15 = *(unsigned int *)(a1 + 88);
          uint64_t v12 = 402;
          uint64_t v13 = *(void *)(a1 + 32);
          uint64_t result = _IDSLogV(0, @"IDSFoundation", @"GL", @"report AWD allocator event %d for request %@, duration %u ms, RAT: %u");
        }
      }
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 592);
    if (v11)
    {
      uint64_t result = *(void *)(v11 + 16);
      if (result)
      {
        LOBYTE(v12) = *(unsigned char *)(a1 + 92);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, 402, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 88), (int)v7, *(void *)(a1 + 48), *(void *)(a1 + 56), v12, v13, v14, v15);
      }
    }
  }
  return result;
}

id sub_19DA38EB8(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1CA58]);
  int v5 = objc_msgSend_initWithLength_(v2, v3, 12, v4);
  id v6 = (const __SecRandom *)*MEMORY[0x1E4F3BC60];
  id v7 = v5;
  uint64_t v11 = objc_msgSend_mutableBytes(v7, v8, v9, v10);
  int v12 = SecRandomCopyBytes(v6, 0xCuLL, v11);
  if (v12)
  {
    int v16 = v12;
    unint64_t v17 = objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_19DB7891C(v16, v17);
    }

    id v18 = 0;
  }
  else
  {
    objc_msgSend_deriveAES128CTRKeys_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15);
    id v18 = v7;
  }

  return v18;
}

uint64_t sub_19DA38F8C(uint64_t a1, const char *a2, char a3, int a4, uint64_t a5, double a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a5) {
      objc_msgSend__updateCandidatePair_newLocalPort_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a6, a5);
    }
    id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v7();
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      double v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(*(void **)(a1 + 40), v11, v12, v13)];
        uint64_t v15 = *(void *)(a1 + 40);
        *(_DWORD *)kevent buf = 136315650;
        long long v30 = v14;
        __int16 v31 = 2080;
        uint64_t v32 = off_1E944EAA0;
        __int16 v33 = 2112;
        uint64_t v34 = v15;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v19 = objc_msgSend_state(*(void **)(a1 + 40), v16, v18, v17);
          id v27 = off_1E944EAA0;
          uint64_t v28 = *(void *)(a1 + 40);
          long long v26 = (&_IDSStunCandidatePairStateStrings)[v19];
          _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
          if (_IDSShouldLog())
          {
            uint64_t v21 = objc_msgSend_state(*(void **)(a1 + 40), v16, v20, v17, v26, v27, v28);
            id v27 = off_1E944EAA0;
            uint64_t v28 = *(void *)(a1 + 40);
            long long v26 = (&_IDSStunCandidatePairStateStrings)[v21];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
          }
        }
      }
      objc_msgSend_setState_(*(void **)(a1 + 40), v16, 2, v17, v26, v27, v28);
    }
    if (a4)
    {
      uint64_t v22 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "QR connection(H2) to the QR server failed - reconnecting...", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"QR connection(H2) to the QR server failed - reconnecting...");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"QR connection(H2) to the QR server failed - reconnecting...");
          }
        }
      }
      return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(*(void **)(a1 + 32), v23, *(void *)(a1 + 40), v24, 699, 1);
    }
    else
    {
      dispatch_time_t v25 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "QR connection(H2) to the QR server failed - do not reconnect", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"QR connection(H2) to the QR server failed - do not reconnect");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"QR connection(H2) to the QR server failed - do not reconnect");
          }
        }
      }
    }
  }
  return result;
}

id sub_19DA397AC(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1CA58]);
  int v5 = objc_msgSend_initWithLength_(v2, v3, 12, v4);
  id v6 = (const __SecRandom *)*MEMORY[0x1E4F3BC60];
  id v7 = v5;
  uint64_t v11 = objc_msgSend_mutableBytes(v7, v8, v9, v10);
  int v12 = SecRandomCopyBytes(v6, 0xCuLL, v11);
  if (v12)
  {
    int v16 = v12;
    double v17 = objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_19DB7891C(v16, v17);
    }

    id v18 = 0;
  }
  else
  {
    objc_msgSend_deriveAES128CTRKeys_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15);
    id v18 = v7;
  }

  return v18;
}

uint64_t sub_19DA39880(uint64_t a1, const char *a2, char a3, int a4, double a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      objc_msgSend_setState_(*(void **)(a1 + 32), a2, 0, a5);
    }
    id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v6();
  }
  else
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v9 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        double v13 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(*(void **)(a1 + 32), v10, v11, v12)];
        uint64_t v14 = *(void *)(a1 + 32);
        *(_DWORD *)kevent buf = 136315650;
        long long v29 = v13;
        __int16 v30 = 2080;
        __int16 v31 = off_1E944EAA0;
        __int16 v32 = 2112;
        uint64_t v33 = v14;
        _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v18 = objc_msgSend_state(*(void **)(a1 + 32), v15, v17, v16);
          long long v26 = off_1E944EAA0;
          uint64_t v27 = *(void *)(a1 + 32);
          dispatch_time_t v25 = (&_IDSStunCandidatePairStateStrings)[v18];
          _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
          if (_IDSShouldLog())
          {
            uint64_t v20 = objc_msgSend_state(*(void **)(a1 + 32), v15, v19, v16, v25, v26, v27);
            long long v26 = off_1E944EAA0;
            uint64_t v27 = *(void *)(a1 + 32);
            dispatch_time_t v25 = (&_IDSStunCandidatePairStateStrings)[v20];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
          }
        }
      }
      objc_msgSend_setState_(*(void **)(a1 + 32), v15, 2, v16, v25, v26, v27);
    }
    if (a4)
    {
      uint64_t v21 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "QR connection to the QR server failed - reconnecting...", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"QR connection to the QR server failed - reconnecting...");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"QR connection to the QR server failed - reconnecting...");
          }
        }
      }
      return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(*(void **)(a1 + 40), v22, *(void *)(a1 + 32), v23, 699, 1);
    }
    else
    {
      double v24 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "QR connection to the QR server failed - do not reconnect", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"QR connection to the QR server failed - do not reconnect");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"QR connection to the QR server failed - do not reconnect");
          }
        }
      }
    }
  }
  return result;
}

void sub_19DA3D624(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = a1;
  if (v6)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v9 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v5, a3, v7, *MEMORY[0x1E4F28568]);
    double v12 = objc_msgSend_errorWithDomain_code_userInfo_(v8, v10, @"GlobalLink", v11, a2, v9);

    double v13 = im_primary_queue();
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_19DA88F44;
    v15[3] = &unk_1E5970A78;
    id v16 = v12;
    id v17 = v6;
    id v14 = v12;
    dispatch_async(v13, v15);
  }
}

uint64_t sub_19DA3D73C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 68), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64));
}

uint64_t sub_19DA3D754(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_sendQUICInfoRequest(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_19DA3D75C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_sendQUICInfoRequest(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19DA3D764(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  int v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = objc_msgSend_pendingNoSessionStateAllocbind(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(v5, v10, (uint64_t)v12, v11, 0, 0, 0, v9);
}

void sub_19DA3D7D4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v5 = objc_msgSend_local(*(void **)(a1 + 32), a2, a3, a4);
  unsigned int v9 = objc_msgSend_radioAccessTechnology(v5, v6, v7, v8);

  double v10 = *(void **)(a1 + 40);
  id v14 = objc_msgSend_allValues(*(void **)(*(void *)(a1 + 48) + 224), v11, v12, v13);
  LODWORD(v10) = GLUtilHasRelayCandidatePairSucceededOrConnected(v10, v14, v9);

  if (v10)
  {
    uint64_t v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v20 = (&_IDSStunTransportStrings)[*(void *)(a1 + 72)];
      int v26 = 138412802;
      uint64_t v27 = v19;
      __int16 v28 = 2080;
      long long v29 = v20;
      __int16 v30 = 2080;
      __int16 v31 = IDSRadioAccessTechnologyToString(v9);
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "session %@ is connected to QR, skip [%s] attempt with RAT %s.", (uint8_t *)&v26, 0x20u);
    }
  }
  else
  {
    uint64_t v21 = *(void **)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(unsigned __int8 *)(a1 + 84);
    uint64_t v24 = *(void *)(a1 + 64);
    uint64_t v25 = *(unsigned int *)(a1 + 80);
    objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(v21, v15, v22, v17, 0, v23, v24, v25);
  }
}

uint64_t sub_19DA3EEC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DA3EED4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA42E04(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    id v17 = v5;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "Register plugin: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v15 = v5;
      _IDSLogTransport(@"GL", @"IDS", @"Register plugin: %@");
      if (_IDSShouldLog())
      {
        id v15 = v5;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Register plugin: %@");
      }
    }
  }
  int isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 32), v8, v9, v10, v15);
  id v14 = *(void **)(a1 + 40);
  if (isQUIC) {
    objc_msgSend_sendQUICPluginRegistrationRequestWithOptions_(v14, v11, (uint64_t)v6, v13);
  }
  else {
    objc_msgSend_sendQRPluginRegistrationRequest_options_(v14, v11, 0, v13, v6);
  }
}

uint64_t sub_19DA45A7C(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "session connected message timed out for receiver, disconnect %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v7 = *(void *)(a1 + 32);
      _IDSLogTransport(@"GL", @"IDS", @"session connected message timed out for receiver, disconnect %@.");
      if (_IDSShouldLog())
      {
        uint64_t v7 = *(void *)(a1 + 32);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"session connected message timed out for receiver, disconnect %@.");
      }
    }
  }
  return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 40), v4, *(void *)(a1 + 48), v5, 0, 9, v7);
}

uint64_t sub_19DA469C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA48BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t *sub_19DA48BEC()
{
  qword_1E944F448 = *(void *)MEMORY[0x19F3ADAF0]("kSymptomDiagnosticActionProbePacketCapture", @"SymptomDiagnosticReporter");
  uint64_t result = (uint64_t *)MEMORY[0x19F3ADAF0]("kSymptomDiagnosticActionProbeDuration", @"SymptomDiagnosticReporter");
  qword_1E944F450 = *result;
  return result;
}

uint64_t sub_19DA48C48(uint64_t a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_snapshotWithSignature_delay_events_payload_actions_reply_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(double *)(a1 + 64), 0, 0, *(void *)(a1 + 48), &unk_1EEFCD218))
  {
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v9 = v4;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "SymptomReporter: Sent snapshot for signature %@", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: Sent snapshot for signature %@");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"SymptomReporter: Sent snapshot for signature %@");
        }
      }
    }
  }
  else
  {
    id v6 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v9 = v7;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "SymptomReporter: Failed to send snapshot for signature %@", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: Failed to send snapshot for signature %@");
        uint64_t result = _IDSShouldLog();
        if (result) {
          uint64_t result = _IDSLogV(0, @"IDSFoundation", @"GL", @"SymptomReporter: Failed to send snapshot for signature %@");
        }
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  return result;
}

void sub_19DA48E94(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    id v5 = v2;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "SymptomReporter: got response from diagnosticReporter - %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: got response from diagnosticReporter - %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"SymptomReporter: got response from diagnosticReporter - %@");
      }
    }
  }
}

uint64_t sub_19DA49568(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v20 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "disconnect session %@ for goaway.", buf, 0xCu);
  }

  objc_msgSend_setIsDisconnecting_(*(void **)(a1 + 40), v7, 0, v8);
  unint64_t v13 = objc_msgSend_state(*(void **)(a1 + 40), v9, v10, v11);
  if (v13 < 5) {
    return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 48), v12, *(void *)(a1 + 32), v14, 0, 4);
  }
  id v15 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = (&_IDSStunCandidatePairStateStrings)[v13];
    *(_DWORD *)kevent buf = 138412546;
    uint64_t v20 = v16;
    __int16 v21 = 2080;
    uint64_t v22 = v17;
    _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already disconnecting [%s], ignore.", buf, 0x16u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"GL", @"IDS", @"candidate pair %@ is already disconnecting [%s], ignore.");
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(0, @"IDSFoundation", @"GL", @"candidate pair %@ is already disconnecting [%s], ignore.");
      }
    }
  }
  return result;
}

void sub_19DA49768(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 592);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 672);
      *(_DWORD *)kevent buf = 67109378;
      int v26 = v4;
      __int16 v27 = 2112;
      uint64_t v28 = v5;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "request new allocation with type %d for goaway indication (ids-session-id:%@).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 672);
      _IDSLogTransport(@"GL", @"IDS", @"request new allocation with type %d for goaway indication (ids-session-id:%@).");
      if (_IDSShouldLog())
      {
        uint64_t v22 = *(void *)(a1 + 48);
        uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 672);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"request new allocation with type %d for goaway indication (ids-session-id:%@).");
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(v9 + 592) + 8);
    uint64_t v11 = *(void *)(v9 + 672);
    uint64_t v12 = objc_msgSend_sessionID(*(void **)(a1 + 40), v6, v7, v8, v22, v23);
    uint64_t v13 = *(void *)(a1 + 48);
    double v14 = *(double *)(a1 + 56);
    uint64_t v15 = *(unsigned __int16 *)(a1 + 68);
    int v16 = *(_DWORD *)(a1 + 64);
    uint64_t v20 = objc_msgSend_relaySessionToken(*(void **)(a1 + 40), v17, v18, v19);
    LOWORD(v24) = 0;
    id v21 = (id)(*(uint64_t (**)(uint64_t, uint64_t, void, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, void, _DWORD))(v10 + 16))(v10, v11, 0, v12, v13, 4, (unint64_t)v14, v15, v16, v20, v24, 0);
  }
}

uint64_t sub_19DA4B118(uint64_t a1, const char *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 144);
  void v12[4] = *(_OWORD *)(a1 + 128);
  v12[5] = v2;
  long long v3 = *(_OWORD *)(a1 + 176);
  unsigned int v12[6] = *(_OWORD *)(a1 + 160);
  v12[7] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  v12[0] = *(_OWORD *)(a1 + 64);
  v12[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 112);
  v12[2] = *(_OWORD *)(a1 + 96);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 272);
  v11[4] = *(_OWORD *)(a1 + 256);
  v11[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 304);
  v11[6] = *(_OWORD *)(a1 + 288);
  v11[7] = v7;
  long long v8 = *(_OWORD *)(a1 + 208);
  v11[0] = *(_OWORD *)(a1 + 192);
  v11[1] = v8;
  long long v9 = *(_OWORD *)(a1 + 240);
  _DWORD v11[2] = *(_OWORD *)(a1 + 224);
  v11[3] = v9;
  return objc_msgSend__processReallocIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), *(double *)(a1 + 320), *(void *)(a1 + 48), *(unsigned int *)(a1 + 328), v12, v11, *(void *)(a1 + 56));
}

void sub_19DA4C190(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v7 = objc_msgSend_sessionID(*(void **)(a1 + 32), a2, a3, a4);
  if (v7)
  {
    long long v9 = tokenForStunCandidatePair(*(void *)(a1 + 48), *(void *)(a1 + 56), v7);
    uint64_t v13 = objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 672);
      uint64_t v18 = objc_msgSend_sessionID(*(void **)(a1 + 32), v14, v15, v16);
      int v22 = objc_msgSend_linkID(*(void **)(a1 + 32), v19, v20, v21);
      int v33 = 138413058;
      uint64_t v34 = v17;
      __int16 v35 = 2112;
      char v36 = v18;
      __int16 v37 = 2112;
      uint64_t v38 = v9;
      __int16 v39 = 1024;
      int v40 = v22;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "Realloc Done: Send unallocbind for IDSSessionID: %@ QRSessionID: %@ and %@, linkID: %d", (uint8_t *)&v33, 0x26u);
    }
    int isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 32), v23, v24, v25);
    uint64_t v29 = *(void **)(a1 + 40);
    if (isQUIC) {
      objc_msgSend__sendQUICUnallocbindRequest_reason_(v29, v26, (uint64_t)v9, v28, 3);
    }
    else {
      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v29, v26, (uint64_t)v9, v28, 0, 3);
    }
    objc_msgSend_stopSessionConnectedTimer(*(void **)(a1 + 32), v30, v31, v32);
  }
  else
  {
    long long v9 = objc_msgSend_GlobalLink(IDSFoundationLog, v5, v6, v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v33) = 0;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "invalid sessionID, return", (uint8_t *)&v33, 2u);
    }
  }
}

void sub_19DA4EACC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA4DF34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19DA4EBE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_19DA4EBF8(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

uint64_t sub_19DA4FC5C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_19DA4FC70(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendUnallocbindRequestTimeOut_stunMessage_reason_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_19DA5349C(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(*(void **)(a1 + 32), a2, *(void *)(a1 + 64), a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

uint64_t sub_19DA5465C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DA5723C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  long long v5 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v9 = 0;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "[U+1] now that remote device version is received, processing incoming ConnectionData", v9, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__processCommandConnectionData_candidatePairToken_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));
}

uint64_t sub_19DA57DA0(uint64_t a1, const char *a2, double a3)
{
  uint64_t result = objc_msgSend__sendNowConnectionDataWithRemovedAddressList_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3);
  *(void *)(*(void *)(a1 + 32) + 856) = 0;
  return result;
}

void sub_19DA58924(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DA58994;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DA58994(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleDisconnectTimer, a4, a2);
}

void sub_19DA59758(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DA597C8;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DA597C8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleActivityTimer, a4, a2);
}

void sub_19DA5AD28(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA5AC58);
  }
  _Unwind_Resume(a1);
}

void sub_19DA5AD5C(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_19DA5AE14;
  v2[3] = &unk_1E5974288;
  id v3 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 56);
  IDSTransportThreadAddBlock(v2);
}

void sub_19DA5AE14(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(v7, v5, *(void *)(a1 + 40), v6, *(void *)(a1 + 48), *(unsigned int *)(a1 + 56));
}

void sub_19DA5AE6C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(v7, v5, *(void *)(a1 + 40), v6, 0, *(unsigned int *)(a1 + 48));
}

void sub_19DA5BF40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA5BC44);
  }
  _Unwind_Resume(a1);
}

void sub_19DA5DC18(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 592);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (v4)
    {
      LOWORD(v21) = 0;
      id v5 = (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t, void, void, _DWORD, void, void, _DWORD))(v4 + 16))(v4, *(void *)(v1 + 672), 0, 0, 2, 0xFFFFLL, 0, 0, 0, 0, v21, 0);
      double v6 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = objc_msgSend_address(*(void **)(a1 + 40), v7, v8, v9);
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 672);
        *(_DWORD *)kevent buf = 138412802;
        int v26 = v10;
        __int16 v27 = 2112;
        double v28 = v5;
        __int16 v29 = 2112;
        uint64_t v30 = v11;
        _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "request self allocation for [%@], requestID %@, ids-sesion-id %@", buf, 0x20u);
      }
      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        uint64_t v15 = objc_msgSend_address(*(void **)(a1 + 40), v12, v13, v14);
        uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 672);
        _IDSLogTransport(@"GL", @"IDS", @"request self allocation for [%@], requestID %@, ids-sesion-id %@");

        if (_IDSShouldLog())
        {
          double v19 = objc_msgSend_address(*(void **)(a1 + 40), v16, v17, v18, v15, v5, v22);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"request self allocation for [%@], requestID %@, ids-sesion-id %@");
        }
      }
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 3221225472;
      v23[2] = sub_19DA5DE80;
      v23[3] = &unk_1E5973CF8;
      v23[4] = *(void *)(a1 + 32);
      id v24 = v5;
      id v20 = v5;
      IDSTransportThreadAddBlock(v23);
    }
  }
}

void sub_19DA5DE80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(__CFArray **)(v2 + 616);
  if (v3
    || (id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]),
        uint64_t v5 = *(void *)(a1 + 32),
        double v6 = *(void **)(v5 + 616),
        *(void *)(v5 + 616) = v4,
        v6,
        uint64_t v2 = *(void *)(a1 + 32),
        (id v3 = *(__CFArray **)(v2 + 616)) != 0))
  {
    id v7 = *(const void **)(a1 + 40);
    if (v7)
    {
      CFArrayAppendValue(v3, v7);
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19DA5DF54;
  v8[3] = &unk_1E5973CF8;
  v8[4] = v2;
  id v9 = *(id *)(a1 + 40);
  IDSTransportThreadAddBlockAfter(v8, 10.0);
}

uint64_t sub_19DA5DF54(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleSelfAllocationTimeout_, *(void *)(a1 + 40), a2);
}

void sub_19DA5FF70(uint64_t a1, void *a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  double v75 = a2;
  double v6 = objc_msgSend_linkMetrics(*(void **)(a1 + 32), v3, v4, v5);
  objc_msgSend_sendBindingRequest(v6, v7, v8, v9);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(*(void **)(a1 + 40), v10, *(void *)(a1 + 32), v11);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v12;
  __str[7] = v12;
  __str[4] = v12;
  __str[5] = v12;
  __str[2] = v12;
  __str[3] = v12;
  __str[0] = v12;
  __str[1] = v12;
  v90[6] = v12;
  v90[7] = v12;
  v90[4] = v12;
  v90[5] = v12;
  v90[2] = v12;
  v90[3] = v12;
  v90[0] = v12;
  v90[1] = v12;
  uint64_t v15 = objc_msgSend_local(*(void **)(a1 + 32), v13, v14, -3.72066208e-103);
  uint64_t v19 = objc_msgSend_address(v15, v16, v17, v18);

  uint64_t v23 = objc_msgSend_remote(*(void **)(a1 + 32), v20, v21, v22);
  uint64_t v74 = objc_msgSend_external(v23, v24, v25, v26);

  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v27 = *(id *)(*(void *)(a1 + 40) + 408);
  uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v79, v29, v89, 16);
  if (v32)
  {
    uint64_t v34 = *(void *)v80;
    while (2)
    {
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)v80 != v34) {
          objc_enumerationMutation(v27);
        }
        char v36 = *(void **)(*((void *)&v79 + 1) + 8 * i);
        __int16 v37 = objc_msgSend_address(v36, v30, v31, v33);
        uint64_t v41 = objc_msgSend_sa(v37, v38, v39, v40);

        if (IsSameSA(v41, v19) && objc_msgSend_clat46(v36, v30, v31, v33) && *(unsigned char *)(v19 + 1) == 2)
        {
          BOOL v42 = objc_msgSend_local(*(void **)(a1 + 32), v30, v31, v33);
          objc_msgSend_setIsCLAT46_(v42, v43, 1, v44);

          goto LABEL_13;
        }
      }
      uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v79, v33, v89, 16);
      if (v32) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  uint64_t v48 = objc_msgSend_local(*(void **)(a1 + 32), v45, v46, v47);
  int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v48, v49, v50, v51);

  if (isCellularStunCandidate)
  {
    uint64_t v56 = objc_msgSend_local(*(void **)(a1 + 32), v53, v54, v55);
    objc_msgSend_setCellularSlicingFlags_(v56, v57, *(unsigned __int8 *)(*(void *)(a1 + 40) + 585), v58);
  }
  uint64_t v59 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    double v60 = SAToIPPortString((char *)__str, 0x80uLL, v19);
    double v61 = SAToIPPortString((char *)v90, 0x80uLL, v74);
    *(_DWORD *)kevent buf = 138412802;
    double v84 = v75;
    __int16 v85 = 2080;
    uint64_t v86 = v60;
    __int16 v87 = 2080;
    uint64_t v88 = v61;
    _os_log_impl(&dword_19D9BE000, v59, OS_LOG_TYPE_DEFAULT, "send binding request %@ for %s-%s.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v72 = SAToIPPortString((char *)__str, 0x80uLL, v19);
      uint64_t v73 = SAToIPPortString((char *)v90, 0x80uLL, v74);
      char v71 = v75;
      _IDSLogTransport(@"GL", @"IDS", @"send binding request %@ for %s-%s.");
      if (_IDSShouldLog())
      {
        id v72 = SAToIPPortString((char *)__str, 0x80uLL, v19);
        uint64_t v73 = SAToIPPortString((char *)v90, 0x80uLL, v74);
        char v71 = v75;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"send binding request %@ for %s-%s.");
      }
    }
  }
  objc_msgSend__sendStunMessage_candidatePair_(*(void **)(a1 + 40), v62, (uint64_t)v75, v63, *(void *)(a1 + 32), v71, v72, v73);
  if (!*(void *)(a1 + 56))
  {
    objc_msgSend_setState_(*(void **)(a1 + 32), v64, 1, v65);
    uint64_t v66 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      double v67 = *(char **)(a1 + 48);
      id v68 = (&_IDSStunCandidatePairStateStrings)[*(void *)(a1 + 56)];
      *(_DWORD *)kevent buf = 136315650;
      double v84 = v68;
      __int16 v85 = 2080;
      uint64_t v86 = off_1E944EA98;
      __int16 v87 = 2112;
      uint64_t v88 = v67;
      _os_log_impl(&dword_19D9BE000, v66, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
        }
      }
    }
  }
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 3221225472;
  v76[2] = sub_19DA604E8;
  v76[3] = &unk_1E5974300;
  double v69 = *(void **)(a1 + 48);
  v76[4] = *(void *)(a1 + 40);
  id v77 = v69;
  uint64_t v78 = v75;
  double v70 = v75;
  IDSTransportThreadAddBlockAfter(v76, 1.0);
}

uint64_t sub_19DA604E8(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sendBindingRequest_stunMessage_, *(void *)(a1 + 40), a2);
}

uint64_t sub_19DA604F8(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sendBindingRequest_stunMessage_, *(void *)(a1 + 40), a2);
}

void sub_19DA60508(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_msgSend_blob(v3, v5, v6, v7);
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412546;
    uint64_t v56 = v8;
    __int16 v57 = 2112;
    uint64_t v58 = v9;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "p2p negotiation blob: %@ for:%@", buf, 0x16u);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      char v52 = objc_msgSend_blob(v3, v10, v11, v12);
      uint64_t v53 = *(void *)(a1 + 32);
      _IDSLogTransport(@"GL", @"IDS", @"p2p negotiation blob: %@ for:%@");

      if (_IDSShouldLog())
      {
        char v52 = objc_msgSend_blob(v3, v10, v11, v12, v52, v53);
        uint64_t v53 = *(void *)(a1 + 32);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"p2p negotiation blob: %@ for:%@");
      }
    }
  }
  objc_msgSend_QUICConnectionIDs(*(void **)(a1 + 40), v10, v11, v12, v52, v53);
  uint64_t v15 = (IDSQUICConnectionIDs *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    uint64_t v15 = objc_alloc_init(IDSQUICConnectionIDs);
    id v20 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 48) + 1096), v17, v18, v19);
    id v54 = v20;
    uint64_t v23 = objc_msgSend_generateLocalIDs_(v15, v21, (uint64_t)&v54, v22);
    id v24 = v54;

    objc_msgSend_addObjectsFromArray_(*(void **)(*(void *)(a1 + 48) + 1096), v25, (uint64_t)v23, v26);
    objc_msgSend_setQUICConnectionIDs_(*(void **)(a1 + 40), v27, (uint64_t)v15, v28);
  }
  double v29 = objc_msgSend_blob(v3, v13, v14, v16);
  if (v29)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), @"ids-stun-attribute-tle-p2p-blob", v29);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB79D34();
  }

  uint64_t v30 = NSNumber;
  uint64_t v34 = objc_msgSend_localAVCConnectionID(v15, v31, v32, v33);
  __int16 v37 = objc_msgSend_numberWithUnsignedInt_(v30, v35, v34, v36);
  if (v37)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), @"ids-stun-attribute-tle-p2p-connection-id-avc", v37);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB79CAC();
  }

  uint64_t v38 = NSNumber;
  uint64_t v42 = objc_msgSend_localIDSConnectionID(v15, v39, v40, v41);
  unsigned int v45 = objc_msgSend_numberWithUnsignedInt_(v38, v43, v42, v44);
  if (v45)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), @"ids-stun-attribute-tle-p2p-connection-id-ids", v45);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB79C24();
  }

  objc_msgSend_setTransactionID_attributes_(*(void **)(a1 + 64), v46, 0, v47, *(void *)(a1 + 56));
  uint64_t v48 = *(void **)(a1 + 64);
  double v49 = ids_monotonic_time();
  objc_msgSend_setStartTime_(v48, v50, v51, v49);
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_19DA60DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_19DA60E90;
  v6[3] = &unk_1E5974378;
  id v7 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v4;
  id v5 = v3;
  IDSTransportThreadAddBlock(v6);
}

void sub_19DA60E90(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    double v33 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "getting negotiation from candidate pair %@...", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v29 = *(void *)(a1 + 32);
      _IDSLogTransport(@"GL", @"IDS", @"getting negotiation from candidate pair %@...");
      if (_IDSShouldLog())
      {
        uint64_t v29 = *(void *)(a1 + 32);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"getting negotiation from candidate pair %@...");
      }
    }
  }
  id v7 = objc_msgSend_p2pNegotiation(*(void **)(a1 + 32), v4, v5, v6, v29);

  if (v7)
  {
    id v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = *(void **)(a1 + 32);
      uint64_t v13 = objc_msgSend_p2pNegotiation(v12, v9, v10, v11);
      *(_DWORD *)kevent buf = 138412546;
      double v33 = v12;
      __int16 v34 = 2112;
      __int16 v35 = v13;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "negotiation exists for candidate pair %@: %@", buf, 0x16u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v17 = *(void **)(a1 + 32);
        objc_msgSend_p2pNegotiation(v17, v14, v15, v16);
        v31 = uint64_t v30 = v17;
        _IDSLogTransport(@"GL", @"IDS", @"negotiation exists for candidate pair %@: %@");

        if (_IDSShouldLog())
        {
          uint64_t v18 = *(void **)(a1 + 32);
          objc_msgSend_p2pNegotiation(v18, v14, v15, v16, v30, v31);
          v31 = uint64_t v30 = v18;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"negotiation exists for candidate pair %@: %@");
        }
      }
    }
    uint64_t v19 = *(void *)(a1 + 48);
    id v20 = objc_msgSend_p2pNegotiation(*(void **)(a1 + 32), v14, v15, v16, v30, v31);
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
  }
  else
  {
    uint64_t v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      double v22 = *(void **)(a1 + 32);
      *(_DWORD *)kevent buf = 138412290;
      double v33 = v22;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "creating negotiation for candidate pair %@...", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v30 = *(void **)(a1 + 32);
        _IDSLogTransport(@"GL", @"IDS", @"creating negotiation for candidate pair %@...");
        if (_IDSShouldLog())
        {
          uint64_t v30 = *(void **)(a1 + 32);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"creating negotiation for candidate pair %@...");
        }
      }
    }
    id v20 = objc_msgSend_beginNegotiation(*(void **)(a1 + 40), v23, v24, v25, v30);
    objc_msgSend_setP2pNegotiation_(*(void **)(a1 + 32), v26, (uint64_t)v20, v27);
    double v28 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      double v33 = v20;
      _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "negotiation: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"negotiation: %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"negotiation: %@");
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
  }
}

void sub_19DA62840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t sub_19DA62954(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DA62964(uint64_t a1)
{
}

uint64_t sub_19DA6296C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 80;
  double v6 = objc_msgSend_linkMetrics(*(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a2, a3, a4);
  objc_msgSend_sendBindingResponse(v6, v7, v8, v9);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(*(void **)(a1 + 32), v10, *(void *)(*(void *)(*(void *)v5 + 8) + 40), v11);
  double v12 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  double v16 = objc_msgSend_transactionID(*(void **)(a1 + 40), v13, v14, v15);
  objc_msgSend_setTransactionID_attributes_(v12, v17, (uint64_t)v16, v18, *(void *)(a1 + 48));

  uint64_t v19 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    *(_DWORD *)kevent buf = 138412802;
    uint64_t v52 = v20;
    __int16 v53 = 2112;
    uint64_t v54 = v21;
    __int16 v55 = 2112;
    uint64_t v56 = v22;
    _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "send binding response %@ for %@-%@.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v49 = *(void *)(a1 + 56);
      uint64_t v50 = *(void *)(a1 + 64);
      uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      _IDSLogTransport(@"GL", @"IDS", @"send binding response %@ for %@-%@.");
      if (_IDSShouldLog())
      {
        uint64_t v49 = *(void *)(a1 + 56);
        uint64_t v50 = *(void *)(a1 + 64);
        uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"send binding response %@ for %@-%@.");
      }
    }
  }
  double v26 = *(void **)(a1 + 32);
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  uint64_t v28 = *(unsigned int *)(a1 + 352);
  uint64_t v29 = *(void *)(a1 + 72);
  uint64_t v30 = objc_msgSend_local(*(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v23, v24, v25, v47, v49, v50);
  HIDWORD(v4_Block_object_dispose(&STACK[0x300], 8) = objc_msgSend_mtu(v30, v31, v32, v33);
  LOWORD(v4_Block_object_dispose(&STACK[0x300], 8) = -1;
  objc_msgSend__sendStunMessage_sourceIfIndex_source_destination_stunTransport_token_linkID_delegatedLinkID_MTULimit_(v26, v34, v27, v35, v28, a1 + 96, a1 + 224, 2, v29, v48);

  uint64_t result = objc_msgSend_triggeredCheckTime(*(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v36, v37, v38);
  if (v40 == 0.0)
  {
    double v41 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    double v42 = ids_monotonic_time();
    objc_msgSend_setTriggeredCheckTime_(v41, v43, v44, v42);
    return objc_msgSend__startStunCheck_(*(void **)(a1 + 32), v45, *(void *)(a1 + 72), v46);
  }
  return result;
}

void sub_19DA62C08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412546;
    id v26 = v5;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "p2p info for binding response: %@, %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"p2p info for binding response: %@, %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"p2p info for binding response: %@, %@");
      }
    }
  }
  if (v5)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"ids-stun-attribute-tle-p2p-blob", v5);
    double v9 = NSNumber;
    uint64_t v13 = objc_msgSend_localAVCConnectionID(v6, v10, v11, v12);
    double v16 = objc_msgSend_numberWithUnsignedInt_(v9, v14, v13, v15);
    if (v16)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"ids-stun-attribute-tle-p2p-connection-id-avc", v16);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB79CAC();
    }

    uint64_t v17 = NSNumber;
    uint64_t v21 = objc_msgSend_localIDSConnectionID(v6, v18, v19, v20);
    uint64_t v24 = objc_msgSend_numberWithUnsignedInt_(v17, v22, v21, v23);
    if (v24)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"ids-stun-attribute-tle-p2p-connection-id-ids", v24);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB79C24();
    }
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v8);
}

void sub_19DA633C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19DA634A4;
  v8[3] = &unk_1E5974440;
  id v9 = *(id *)(a1 + 32);
  id v10 = v3;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(void **)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 48);
  id v11 = v4;
  uint64_t v12 = v6;
  id v13 = v5;
  id v7 = v3;
  IDSTransportThreadAddBlock(v8);
}

void sub_19DA634A4(uint64_t a1, const char *a2, double a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_receiveBlob_(*(void **)(a1 + 40), a2, *(void *)(a1 + 48), a3);
  objc_msgSend_setP2pNegotiatedKeys_(*(void **)(a1 + 32), v5, (uint64_t)v4, v6);

  id v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v12 = objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v8, v9, v10);
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 134218498;
    uint64_t v64 = v11;
    __int16 v65 = 2112;
    uint64_t v66 = v12;
    __int16 v67 = 2112;
    uint64_t v68 = v13;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@", buf, 0x20u);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v17 = *(void *)(a1 + 72);
      uint64_t v54 = objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16);
      uint64_t v56 = *(void *)(a1 + 32);
      uint64_t v52 = v17;
      _IDSLogTransport(@"GL", @"IDS", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@");

      if (_IDSShouldLog())
      {
        uint64_t v18 = *(void *)(a1 + 72);
        uint64_t v54 = objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16, v52, v54, v56);
        uint64_t v56 = *(void *)(a1 + 32);
        uint64_t v52 = v18;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated keys:%@ candidatePair:%@");
      }
    }
  }
  uint64_t v19 = objc_msgSend_p2pNegotiatedKeys(*(void **)(a1 + 32), v14, v15, v16, v52, v54, v56);

  if (v19)
  {
    double v20 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 72);
      int v22 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v64 = v21;
      __int16 v65 = 1024;
      LODWORD(v66) = v22;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v53 = *(void *)(a1 + 72);
        uint64_t v55 = *(unsigned int *)(a1 + 80);
        _IDSLogTransport(@"GL", @"IDS", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x");
        if (_IDSShouldLog())
        {
          uint64_t v53 = *(void *)(a1 + 72);
          uint64_t v55 = *(unsigned int *)(a1 + 80);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated AVC connection ID: %08x");
        }
      }
    }
    double v23 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 72);
      int v25 = *(_DWORD *)(a1 + 84);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v64 = v24;
      __int16 v65 = 1024;
      LODWORD(v66) = v25;
      _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v53 = *(void *)(a1 + 72);
        uint64_t v55 = *(unsigned int *)(a1 + 84);
        _IDSLogTransport(@"GL", @"IDS", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x");
        if (_IDSShouldLog())
        {
          uint64_t v53 = *(void *)(a1 + 72);
          uint64_t v55 = *(unsigned int *)(a1 + 84);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_receiveP2PNegotiationBlob[%llu]: p2p negotiated IDS connection ID: %08x");
        }
      }
    }
    objc_msgSend_QUICConnectionIDs(*(void **)(a1 + 32), v26, v27, v28, v53, v55);
    uint64_t v30 = (IDSQUICConnectionIDs *)objc_claimAutoreleasedReturnValue();
    if (!v30)
    {
      uint64_t v30 = objc_alloc_init(IDSQUICConnectionIDs);
      double v35 = objc_msgSend_copy(*(void **)(*(void *)(a1 + 56) + 1096), v32, v33, v34);
      id v62 = v35;
      double v38 = objc_msgSend_generateLocalIDs_(v30, v36, (uint64_t)&v62, v37);
      id v39 = v62;

      objc_msgSend_addObjectsFromArray_(*(void **)(*(void *)(a1 + 56) + 1096), v40, (uint64_t)v38, v41);
      objc_msgSend_setQUICConnectionIDs_(*(void **)(a1 + 32), v42, (uint64_t)v30, v43);
    }
    objc_msgSend_setRemoteAVCConnectionID_(v30, v29, *(unsigned int *)(a1 + 80), v31);
    objc_msgSend_setRemoteIDSConnectionID_(v30, v44, *(unsigned int *)(a1 + 84), v45);
    uint64_t v46 = *(void *)(a1 + 32);
    uint64_t v47 = *(void *)(a1 + 72);
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 3221225472;
    v57[2] = sub_19DA639D0;
    v57[3] = &unk_1E5974418;
    uint64_t v61 = v47;
    uint64_t v48 = *(void **)(a1 + 56);
    id v60 = *(id *)(a1 + 64);
    id v58 = *(id *)(a1 + 40);
    uint64_t v59 = v30;
    uint64_t v49 = v30;
    objc_msgSend_setUpP2PQUICPodConnectionsForCandidatePair_attemptID_completionHandler_(v48, v50, v46, v51, v47, v57);
  }
}

void sub_19DA639D0(uint64_t a1, char a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    id v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 56);
      *(_DWORD *)kevent buf = 134217984;
      uint64_t v16 = v4;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v8 = (uint64_t *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 56);
        _IDSLogTransport(@"GL", @"IDS", @"_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections");
        if (_IDSShouldLog())
        {
          uint64_t v9 = @"_receiveP2PNegotiationBlob[%llu]: set up p2p qpod connections";
LABEL_14:
          uint64_t v14 = *v8;
          _IDSLogV(0, @"IDSFoundation", @"GL", v9);
        }
      }
    }
  }
  else
  {
    double v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 56);
      *(_DWORD *)kevent buf = 134217984;
      uint64_t v16 = v11;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v8 = (uint64_t *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 56);
        _IDSLogTransport(@"GL", @"IDS", @"_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections");
        if (_IDSShouldLog())
        {
          uint64_t v9 = @"_receiveP2PNegotiationBlob[%llu]: failed to set up p2p qpod connections";
          goto LABEL_14;
        }
      }
    }
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = objc_msgSend_blob(*(void **)(a1 + 32), v5, v6, v7, v14);
  (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v13, *(void *)(a1 + 40));
}

void sub_19DA64960(uint64_t a1, void *a2, void *a3)
{
  uint64_t v281 = *MEMORY[0x1E4F143B8];
  id v271 = a2;
  id v272 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a1 + 80;
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = a1 + 208;
  uint64_t v274 = a1;
  id v5 = *(void **)(a1 + 32);
  a1 += 32;
  int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v5, v6, v7, v8);
  double v10 = *(void **)(*(void *)(a1 + 8) + 48);
  uint64_t v14 = objc_msgSend_local(*(void **)a1, v11, v12, v13);
  uint64_t v18 = objc_msgSend_address(v14, v15, v16, v17);
  int v22 = objc_msgSend_remote(*(void **)a1, v19, v20, v21);
  uint64_t v26 = objc_msgSend_address(v22, v23, v24, v25);
  uint64_t v30 = objc_msgSend_sessionID(*(void **)a1, v27, v28, v29);
  double v34 = objc_msgSend_local(*(void **)a1, v31, v32, v33);
  char isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v34, v35, v36, v37);
  if (isRelayStunCandidatePair)
  {
    v273 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v10, v38, v18, v39, v26, 0, v30, 0, 1, isCellularStunCandidate);

    double v40 = *(void **)(*(void *)(v274 + 40) + 48);
    uint64_t v44 = objc_msgSend_local(*(void **)(v274 + 32), v41, v42, v43);
    uint64_t v48 = objc_msgSend_address(v44, v45, v46, v47);
    uint64_t v52 = objc_msgSend_remote(*(void **)(v274 + 32), v49, v50, v51);
    uint64_t v56 = objc_msgSend_address(v52, v53, v54, v55);
    id v60 = objc_msgSend_sessionID(*(void **)(v274 + 32), v57, v58, v59);
    uint64_t v64 = objc_msgSend_local(*(void **)(v274 + 32), v61, v62, v63);
    LOBYTE(v261) = objc_msgSend_isCellularStunCandidate(v64, v65, v66, v67);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v40, v68, v48, v69, v56, 0, v60, 7, 1, v261);
  }
  else
  {
    v273 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v10, v38, v18, v39, v26, 0, v30, 0, 0, isCellularStunCandidate);

    double v70 = *(void **)(*(void *)(v274 + 40) + 48);
    uint64_t v44 = objc_msgSend_local(*(void **)(v274 + 32), v71, v72, v73);
    uint64_t v77 = objc_msgSend_address(v44, v74, v75, v76);
    uint64_t v52 = objc_msgSend_remote(*(void **)(v274 + 32), v78, v79, v80);
    uint64_t v84 = objc_msgSend_address(v52, v81, v82, v83);
    id v60 = objc_msgSend_sessionID(*(void **)(v274 + 32), v85, v86, v87);
    uint64_t v64 = objc_msgSend_local(*(void **)(v274 + 32), v88, v89, v90);
    LOBYTE(v263) = objc_msgSend_isCellularStunCandidate(v64, v91, v92, v93);
    objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v70, v94, v77, v95, v84, 0, v60, 9, 0, v263);
  double v96 = };

  uint64_t v97 = GLUtilConnectionDictionaryForNWConnectionInfo(v273, 1);
  uint64_t v101 = objc_msgSend_connections(*(void **)(v274 + 32), v98, v99, v100);
  objc_msgSend_setObject_forKeyedSubscript_(v101, v102, (uint64_t)v97, v103, @"udp");

  uint64_t shouldUseP2PTLE = objc_msgSend__shouldUseP2PTLE(*(void **)(v274 + 40), v104, v105, v106);
  uint64_t v108 = GLUtilConnectionDictionaryForNWConnectionInfo(v96, shouldUseP2PTLE);
  id v112 = objc_msgSend_connections(*(void **)(v274 + 32), v109, v110, v111);
  objc_msgSend_setObject_forKeyedSubscript_(v112, v113, (uint64_t)v108, v114, @"qpod");

  unint64_t v118 = objc_msgSend_state(*(void **)(v274 + 32), v115, v116, v117);
  if (v118 <= 2)
  {
    unint64_t v122 = v118;
    objc_msgSend_setState_(*(void **)(v274 + 32), v119, 3, v121);
    uint64_t v123 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v124 = (&_IDSStunCandidatePairStateStrings)[v122];
      uint64_t v125 = *(void **)(v274 + 48);
      *(_DWORD *)kevent buf = 136315650;
      v276 = v124;
      __int16 v277 = 2080;
      v278 = off_1E944EAA8;
      __int16 v279 = 2112;
      v280 = v125;
      _os_log_impl(&dword_19D9BE000, v123, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v267 = off_1E944EAA8;
        uint64_t v269 = *(void *)(v274 + 48);
        v262 = (&_IDSStunCandidatePairStateStrings)[v122];
        _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
        if (_IDSShouldLog())
        {
          v267 = off_1E944EAA8;
          uint64_t v269 = *(void *)(v274 + 48);
          v262 = (&_IDSStunCandidatePairStateStrings)[v122];
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
        }
      }
    }
  }
  uint64_t v126 = v274;
  if (*(unsigned char *)(v274 + 350))
  {
    uint64_t v127 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v119, v120, v121);
    BOOL v130 = objc_msgSend_deliveryStatus_(v127, v128, *(void *)(*(void *)(v274 + 40) + 624), v129) == 1;

    uint64_t v126 = v274;
    if (v130)
    {
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(*(void **)(v274 + 40), v131, 0, v132);
      uint64_t v126 = v274;
    }
  }
  uint64_t v134 = *(void *)(v126 + 40);
  double v133 = (void *)(v126 + 40);
  uint64_t v137 = tokenForStunCandidatePair(*(void *)(*(void *)(v133[3] + 8) + 24), *(void *)(*(void *)(v133[4] + 8) + 24), *(void **)(v134 + 624));
  CFDictionaryRef v139 = *(const __CFDictionary **)(*v133 + 224);
  if (!v139 || !v137 || !CFDictionaryGetValue(v139, v137))
  {
    uint64_t v140 = v274;
    v141 = *(void **)(v274 + 56);
    if (v141)
    {
      id v144 = v141;
    }
    else
    {
      objc_msgSend_local(*(void **)(v274 + 32), v135, v136, v138);
      id v144 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v140 = v274;
    }
    uint64_t v146 = objc_msgSend_remote(*(void **)(v140 + 32), v142, v143, v145, v262, v267, v269);
    uint64_t v150 = objc_msgSend_radioAccessTechnology(v146, v147, v148, v149);

    int8x16_t v154 = objc_msgSend_remote(*(void **)(v140 + 32), v151, v152, v153);
    uint64_t v158 = objc_msgSend_mtu(v154, v155, v156, v157);

    long long v161 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v159, 2, v160, 1, v150, v158, 0xFFFFFFFFLL, *(void *)(*(void *)(*(void *)(v274 + 72) + 8) + 24));
    uint64_t v164 = v161;
    uint64_t v165 = v274;
    if (*(_WORD *)(v274 + 348))
    {
      objc_msgSend_setLinkFlags_(v161, v162, *(unsigned __int16 *)(v274 + 348), v163);
      uint64_t v165 = v274;
    }
    uint64_t v166 = *(unsigned int *)(v165 + 344);
    if (v166)
    {
      objc_msgSend_setDataSoMask_(v164, v162, v166, v163);
      uint64_t v165 = v274;
    }
    uint64_t v168 = objc_msgSend_indexOfObject_(*(void **)(*(void *)(v165 + 40) + 448), v162, (uint64_t)v164, v163);
    if (v168 == 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v170 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        v276 = (char *)v164;
        _os_log_impl(&dword_19D9BE000, v170, OS_LOG_TYPE_DEFAULT, "failed to find stored remote candidate %@, this should NOT happen.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          v264 = v164;
          _IDSLogTransport(@"GL", @"IDS", @"failed to find stored remote candidate %@, this should NOT happen.");
          if (_IDSShouldLog())
          {
            v264 = v164;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find stored remote candidate %@, this should NOT happen.");
          }
        }
      }
    }
    else
    {
      uint64_t v173 = objc_msgSend_objectAtIndex_(*(void **)(*(void *)(v274 + 40) + 448), v167, v168, v169);

      uint64_t v164 = (void *)v173;
    }
    uint64_t v174 = v274;
    if (*(_WORD *)(v274 + 348))
    {
      objc_msgSend_setLinkFlags_(v164, v171, *(unsigned __int16 *)(v274 + 348), v172);
      uint64_t v174 = v274;
    }
    uint64_t v175 = *(unsigned int *)(v174 + 344);
    if (v175)
    {
      objc_msgSend_setDataSoMask_(v164, v171, v175, v172);
      uint64_t v174 = v274;
    }
    long long v176 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v171, (uint64_t)v144, v172, v164, *(void *)(*(void *)(v174 + 40) + 624), v264);
    uint64_t v177 = GLUtilConnectionDictionaryForNWConnectionInfo(v273, 1);
    uint64_t v181 = objc_msgSend_connections(v176, v178, v179, v180);
    objc_msgSend_setObject_forKeyedSubscript_(v181, v182, (uint64_t)v177, v183, @"udp");

    uint64_t v187 = objc_msgSend__shouldUseP2PTLE(*(void **)(v174 + 40), v184, v185, v186);
    long long v188 = GLUtilConnectionDictionaryForNWConnectionInfo(v96, v187);
    long long v192 = objc_msgSend_connections(v176, v189, v190, v191);
    objc_msgSend_setObject_forKeyedSubscript_(v192, v193, (uint64_t)v188, v194, @"qpod");

    objc_msgSend_setState_(v176, v195, 3, v196);
    v200 = objc_msgSend_linkUUID(*(void **)(v274 + 32), v197, v198, v199);
    objc_msgSend_setLinkUUID_(v176, v201, (uint64_t)v200, v202);

    if (objc_msgSend_isNominated(*(void **)(v274 + 32), v203, v204, v205)) {
      objc_msgSend_setIsNominated_(v176, v206, 1, v208);
    }
    objc_msgSend_setLastIncomingPacketTime_(v176, v206, v207, *(double *)(v274 + 336));
    uint64_t v209 = v274;
    if (!*(void *)(*(void *)(v274 + 40) + 224))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v211 = *(void *)(v274 + 40);
      v212 = *(void **)(v211 + 224);
      *(void *)(v211 + 224) = Mutable;

      uint64_t v209 = v274;
    }
    id v213 = v176;
    if (v213)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(v209 + 40) + 224), v137, v213);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB79FD8();
    }

    v217 = objc_msgSend_allValues(*(void **)(*(void *)(v274 + 40) + 224), v214, v215, v216);
    v218 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v222 = objc_msgSend_count(v217, v219, v220, v221);
      *(_DWORD *)kevent buf = 138412802;
      v276 = (char *)v213;
      __int16 v277 = 2048;
      v278 = (char *)v222;
      __int16 v279 = 2112;
      v280 = v217;
      _os_log_impl(&dword_19D9BE000, v218, OS_LOG_TYPE_DEFAULT, "add valid pair %@, #total:%lu.\n(%@).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v268 = objc_msgSend_count(v217, v223, v224, v225);
        v270 = v217;
        id v265 = v213;
        _IDSLogTransport(@"GL", @"IDS", @"add valid pair %@, #total:%lu.\n(%@).");
        if (_IDSShouldLog())
        {
          uint64_t v268 = objc_msgSend_count(v217, v223, v224, v225, v213, v268, v217);
          v270 = v217;
          id v265 = v213;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"add valid pair %@, #total:%lu.\n(%@).");
        }
      }
    }
    v226 = *(void **)(v274 + 40);
    uint64_t v227 = objc_msgSend_address(v144, v223, v224, v225, v265, v268, v270);
    uint64_t v231 = objc_msgSend_external(v164, v228, v229, v230);
    objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(v226, v232, (uint64_t)v213, v233, v227, v231, 0);
    objc_msgSend__notifyCandidatePairConnected_(*(void **)(v274 + 40), v234, (uint64_t)v137, v235);
    v236 = *(void **)(v274 + 40);
    v240 = objc_msgSend_local(*(void **)(v274 + 32), v237, v238, v239);
    uint64_t v244 = objc_msgSend_index(v240, v241, v242, v243);
    v247 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(v236, v245, v244, v246);

    v251 = *(void **)(*(void *)(v274 + 40) + 1120);
    if (v251 && objc_msgSend_isEqualToIgnoringCase_(v251, v248, (uint64_t)v247, v250)) {
      objc_msgSend__discardNonSlicedP2PCandidatePairs(*(void **)(v274 + 40), v248, v249, v250);
    }
    if (objc_msgSend_isNominated(v213, v248, v249, v250)
      && (objc_msgSend_isActive(v213, v252, v253, v254) & 1) == 0)
    {
      v255 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        v276 = (char *)v213;
        _os_log_impl(&dword_19D9BE000, v255, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already nominated.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v266 = v213;
          _IDSLogTransport(@"GL", @"IDS", @"candidate pair %@ is already nominated.");
          if (_IDSShouldLog())
          {
            id v266 = v213;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"candidate pair %@ is already nominated.");
          }
        }
      }
      objc_msgSend__updateDefaultCandidatePair_(*(void **)(v274 + 40), v256, (uint64_t)v213, v257, v266);
      objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(*(void **)(v274 + 40), v258, (uint64_t)v137, v259, 0);
    }
    objc_msgSend__selectBetterDefaultCandidatePair_(*(void **)(v274 + 40), v252, (uint64_t)v213, v254);
  }
}

void sub_19DA658F0(uint64_t a1)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_19DA6597C;
  v4[3] = &unk_1E5973CF8;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = v2;
  uint64_t v6 = v3;
  IDSTransportThreadAddBlock(v4);
}

void sub_19DA6597C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendConnectionDataWithRemovedAddressList_(v9, v5, 0, v6);
  objc_msgSend__notifyCandidatePairDisconnected_withReason_(v9, v7, *(void *)(a1 + 40), v8, 13);
}

void sub_19DA67344(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x19DA66F30);
  }
  _Unwind_Resume(a1);
}

void sub_19DA68C5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA68B70);
  }
  _Unwind_Resume(a1);
}

void sub_19DA68F40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19DA68F5C(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend__setupRelayConnectionForNetworkAddressChanges(WeakRetained, v2, v3, v4);
    double v6 = v5[139];
    if (v6)
    {
      dispatch_source_cancel(v6);
      double v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = v5[139];
        int v13 = 134217984;
        uint64_t v14 = v11;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "delay set up new QR link canceled on timer: %p", (uint8_t *)&v13, 0xCu);
      }

      uint64_t v12 = (void *)v5[139];
      v5[139] = 0;
    }
  }
}

uint64_t sub_19DA6A5C4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__setupRelayConnectionForNetworkAddressChangesHelper, a4, a2);
}

void sub_19DA6BC40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA6B57CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19DA6E3BC(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  if (*(void *)(v5 + 648) == 2)
  {
    objc_msgSend_allValues(*(void **)(v5 + 224), a2, a3, a4);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v34, v8, v44, 16);
    if (v11)
    {
      uint64_t v13 = *(void *)v35;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v35 != v13) {
            objc_enumerationMutation(v6);
          }
          uint64_t v15 = *(void **)(*((void *)&v34 + 1) + 8 * i);
          uint64_t v16 = objc_msgSend_sessionID(v15, v9, v10, v12);
          if (objc_msgSend_isEqualToString_(v16, v17, *(void *)(a1[4] + 496), v18))
          {
            BOOL v22 = objc_msgSend_state(v15, v19, v20, v21) == 3;

            if (v22)
            {
              uint64_t v28 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v30 = _IDSLinkStateStrings[*(void *)(a1[4] + 648)];
                *(_DWORD *)kevent buf = 136315650;
                double v39 = v30;
                __int16 v40 = 2112;
                double v41 = v15;
                __int16 v42 = 2080;
                double v43 = off_1E944EAA8;
                _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s", buf, 0x20u);
              }

              if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"skip TCP/TCP-SSL relay set up, GL state [%s], candidatePair %@ in state: %s");
                }
              }

              goto LABEL_27;
            }
          }
          else
          {
          }
        }
        uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v34, v12, v44, 16);
        if (v11) {
          continue;
        }
        break;
      }
    }

    double v23 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA6E7F4;
    block[3] = &unk_1E59744E0;
    double v25 = (void *)a1[5];
    uint64_t v24 = a1[6];
    void block[4] = a1[4];
    uint64_t v33 = v24;
    id v32 = v25;
    dispatch_async(v23, block);

LABEL_27:
  }
  else
  {
    uint64_t v26 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = _IDSLinkStateStrings[*(void *)(a1[4] + 648)];
      *(_DWORD *)kevent buf = 136315138;
      double v39 = v27;
      _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "skip TCP/TCP-SSL relay set up, GL state [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"skip TCP/TCP-SSL relay set up, GL state [%s].");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip TCP/TCP-SSL relay set up, GL state [%s].");
        }
      }
    }
  }
}

void sub_19DA6E7F4(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1[4] + 592);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      double v4 = (&_IDSStunTransportStrings)[a1[6]];
      uint64_t v5 = a1[4];
      uint64_t v6 = *(void *)(v5 + 496);
      uint64_t v7 = *(void *)(v5 + 672);
      *(_DWORD *)kevent buf = 136315650;
      uint64_t v13 = v4;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      __int16 v16 = 2112;
      uint64_t v17 = v7;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "set up %s session: %@, ids-session-id: %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"set up %s session: %@, ids-session-id: %@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"set up %s session: %@, ids-session-id: %@.");
      }
    }
    double v8 = (*(void (**)(void, void, void, void))(*(void *)(*(void *)(a1[4] + 592) + 8) + 16))(*(void *)(*(void *)(a1[4] + 592) + 8), *(void *)(a1[4] + 672), 0, a1[5]);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19DA6EA4C;
    v10[3] = &unk_1E5973CF8;
    void v10[4] = a1[4];
    id v11 = v8;
    id v9 = v8;
    IDSTransportThreadAddBlock(v10);
  }
}

uint64_t sub_19DA6EA4C(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(__CFArray **)(*(void *)(a1 + 32) + 560);
  if (v2
    || (id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]),
        uint64_t v4 = *(void *)(a1 + 32),
        uint64_t v5 = *(void **)(v4 + 560),
        *(void *)(v4 + 560) = v3,
        v5,
        (uint64_t v2 = *(__CFArray **)(*(void *)(a1 + 32) + 560)) != 0))
  {
    uint64_t v6 = *(const void **)(a1 + 40);
    if (v6) {
      CFArrayAppendValue(v2, v6);
    }
  }
  uint64_t v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 560);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v8;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "_requestNonUDPRelayAllocation: targeted allocation request IDs: %@", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"GL", @"IDS", @"_requestNonUDPRelayAllocation: targeted allocation request IDs: %@");
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(0, @"IDSFoundation", @"GL", @"_requestNonUDPRelayAllocation: targeted allocation request IDs: %@");
      }
    }
  }
  return result;
}

void sub_19DA6FA78(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 130))
  {
    if (*(void *)(v4 + 232)
      && (objc_msgSend_numberWithChar_(NSNumber, a2, *(char *)(v4 + 130), a4),
          (uint64_t v6 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = *(void *)(a1 + 32);
      CFDictionaryRef v9 = *(const __CFDictionary **)(v8 + 232);
      uint64_t v10 = objc_msgSend_numberWithChar_(NSNumber, a2, *(char *)(v8 + 130), a4);
      uint64_t v11 = (id)CFDictionaryGetValue(v9, v10);

      if (v11 && objc_msgSend_isQUIC(v11, a2, a3, a4) && objc_msgSend_state(v11, a2, a3, a4) == 4)
      {
        uint64_t v12 = objc_alloc_init(IDSQRProtoGetMaterialRequest);
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v13 = *(id *)(a1 + 40);
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v40, v15, v47, 16);
        if (v16)
        {
          uint64_t v20 = v16;
          uint64_t v21 = *(void *)v41;
          do
          {
            for (uint64_t i = 0; i != v20; ++i)
            {
              if (*(void *)v41 != v21) {
                objc_enumerationMutation(v13);
              }
              uint64_t v23 = objc_msgSend_unsignedLongLongValue(*(void **)(*((void *)&v40 + 1) + 8 * i), v17, v18, v19, (void)v40);
              uint64_t v24 = objc_alloc_init(IDSQRProtoMaterialOwner);
              objc_msgSend_setParticipantId_(v24, v25, v23, v26);
              objc_msgSend_addMaterialType_(v24, v27, *(unsigned int *)(a1 + 48), v28);
              objc_msgSend_addMaterialOwners_(v12, v29, (uint64_t)v24, v30);
            }
            uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v40, v19, v47, 16);
          }
          while (v20);
        }

        double v31 = [IDSQRProtoMessage alloc];
        uint64_t v45 = @"gl-option-materials-request-key";
        uint64_t v46 = v12;
        long long v34 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)&v46, v33, &v45, 1);
        long long v37 = objc_msgSend_initWithType_candidatePair_options_(v31, v35, 27, v36, v11, v34);

        objc_msgSend_sendQUICGetMaterialRequest_(v11, v38, (uint64_t)v37, v39);
LABEL_18:

        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
    uint64_t v12 = (IDSQRProtoGetMaterialRequest *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v12->super.super.super, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, &v12->super.super.super, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: no QUIC link candidate pair", buf, 2u);
    }
    goto LABEL_18;
  }
  uint64_t v11 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: no active QUIC link", buf, 2u);
  }
LABEL_21:
}

uint64_t sub_19DA70410(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__qrMaterialExchangePutMaterial_completionHandler_, *(void *)(a1 + 40), a2);
}

void sub_19DA79464(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (GLUtilShouldSetRemoteInterfacePreference(*(_DWORD *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 32) + 778)))int PreferredRemoteInterface = GLUtilGetPreferredRemoteInterface(*(unsigned char *)(a1 + 44)); {
  else
  }
    int PreferredRemoteInterface = 0;
  int PreferredLocalInterface = GLUtilGetPreferredLocalInterface(*(unsigned __int8 *)(a1 + 44));
  uint64_t v4 = GLUtilLinkTypeMaskToString(*(unsigned char *)(a1 + 44));
  uint64_t v8 = objc_msgSend_GlobalLink(IDSFoundationLog, v5, v6, v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 496);
    uint64_t v11 = *(void *)(v9 + 672);
    *(_DWORD *)kevent buf = 138412802;
    uint64_t v21 = v4;
    __int16 v22 = 2112;
    uint64_t v23 = v10;
    __int16 v24 = 2112;
    uint64_t v25 = v11;
    _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "set up new QR link [%@], accepted session %@, ids-session-id %@.", buf, 0x20u);
  }

  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = v12[74];
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14)
    {
      HIDWORD(v17) = PreferredRemoteInterface;
      LOWORD(v17) = 0;
      double v15 = (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t, void, void, _DWORD, void, uint64_t, int))(v14 + 16))(v14, v12[84], 0, v12[62], 1, 0xFFFFLL, 0, 0, 0, 0, v17, PreferredLocalInterface);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      void v18[2] = sub_19DA79640;
      v18[3] = &unk_1E5973CF8;
      v18[4] = *(void *)(a1 + 32);
      id v19 = v15;
      id v16 = v15;
      IDSTransportThreadAddBlock(v18);
    }
  }
}

void sub_19DA79640(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(__CFArray **)(*(void *)(a1 + 32) + 560);
  if (v5
    || (id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]),
        uint64_t v7 = *(void *)(a1 + 32),
        uint64_t v8 = *(void **)(v7 + 560),
        *(void *)(v7 + 560) = v6,
        v8,
        (uint64_t v5 = *(__CFArray **)(*(void *)(a1 + 32) + 560)) != 0))
  {
    uint64_t v9 = *(const void **)(a1 + 40);
    if (v9) {
      CFArrayAppendValue(v5, v9);
    }
  }
  uint64_t v10 = objc_msgSend_GlobalLink(IDSFoundationLog, (const char *)v9, a4, a2);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 560);
    int v12 = 138412290;
    uint64_t v13 = v11;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_requestNewTwoWayQRAllocation: targeted allocation request IDs: %@", (uint8_t *)&v12, 0xCu);
  }
}

void sub_19DA799EC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  objc_msgSend_sessionInfoDict(*(void **)(a1 + 40), a2, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(v5, v6, (uint64_t)v8, v7, 0, 1, *(void *)(*(void *)(a1 + 32) + 80), 0);
}

uint64_t sub_19DA7A104(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v19 = 138412290;
    uint64_t v20 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: disconnect candidatePairToken %@ for convergence.", (uint8_t *)&v19, 0xCu);
  }

  uint64_t result = objc_msgSend_isDisconnecting(*(void **)(a1 + 40), v7, v8, v9);
  if ((result & 1) == 0)
  {
    int isQUIC = objc_msgSend_isQUIC(*(void **)(a1 + 40), v11, v12, v13);
    uint64_t v17 = *(void **)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    if (isQUIC) {
      return objc_msgSend__sendQUICUnallocbindRequest_reason_(v17, v14, v18, v16, 6);
    }
    else {
      return objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v17, v14, v18, v16, 0, 6);
    }
  }
  return result;
}

void sub_19DA7A1F0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    uint64_t v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v22 = 0;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Try to gather the participant list from the final qr session.", v22, 2u);
    }

    uint64_t v14 = objc_msgSend_delegate(*(void **)(a1 + 32), v11, v12, v13);
    uint64_t v15 = *(void *)(a1 + 32);
    int v19 = objc_msgSend_sessionID(*(void **)(a1 + 40), v16, v17, v18);
    objc_msgSend_link_didFinishConvergenceForRelaySessionID_(v14, v20, v15, v21, v19);
  }
}

void sub_19DA7B088(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_remote(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_external(v5, v6, v7, v8);
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 592);
  if (v13 && *(void *)(v13 + 8))
  {
    int v14 = *(_DWORD *)(v9 + 4);
    uint64_t v15 = objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 672);
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v33 = v16;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "request shared allocation for ids-session-id %@.", buf, 0xCu);
    }

    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void *)(*(void *)(v17 + 592) + 8);
    uint64_t v19 = *(void *)(v17 + 672);
    uint64_t v23 = objc_msgSend_sessionID(*(void **)(a1 + 32), v20, v21, v22);
    double v24 = ids_monotonic_time();
    unint64_t v25 = (unint64_t)v24;
    uint64_t v26 = *(unsigned __int16 *)(a1 + 48);
    double v29 = objc_msgSend_relaySessionToken(*(void **)(a1 + 32), v27, v28, v24);
    LOWORD(v31) = 0;
    id v30 = (id)(*(uint64_t (**)(uint64_t, uint64_t, void, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, void, _DWORD))(v18 + 16))(v18, v19, 0, v23, 3, 2, v25, v26, v14, v29, v31, 0);
  }
}

void sub_19DA7C43C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = NSNumber;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_unsignedLongLongValue(a2, v7, v8, v9);
  objc_msgSend_numberWithUnsignedLongLong_(v5, v11, v10, v12);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKey_(v4, v13, (uint64_t)v6, v14, v15);
}

uint64_t sub_19DA7C7E0(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51));
}

void sub_19DA7F88C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x19DA7F17CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19DA7F9A4(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "session connected message timed out for receiver, disconnect %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v7 = *(void *)(a1 + 32);
      _IDSLogTransport(@"GL", @"IDS", @"session connected message timed out for receiver, disconnect %@.");
      if (_IDSShouldLog())
      {
        uint64_t v7 = *(void *)(a1 + 32);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"session connected message timed out for receiver, disconnect %@.");
      }
    }
  }
  return objc_msgSend__sendQUICUnallocbindRequest_reason_(*(void **)(a1 + 40), v4, *(void *)(a1 + 48), v5, 9, v7);
}

uint64_t sub_19DA80844(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA82378(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA82040);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19DA823C0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  double v5 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v20 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "disconnect session %@ for goaway.", buf, 0xCu);
  }

  objc_msgSend_setIsDisconnecting_(*(void **)(a1 + 40), v7, 0, v8);
  unint64_t v13 = objc_msgSend_state(*(void **)(a1 + 40), v9, v10, v11);
  if (v13 < 5) {
    return objc_msgSend__sendQUICUnallocbindRequest_reason_(*(void **)(a1 + 48), v12, *(void *)(a1 + 32), v14, 4);
  }
  id v15 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = (&_IDSStunCandidatePairStateStrings)[v13];
    *(_DWORD *)kevent buf = 138412546;
    uint64_t v20 = v16;
    __int16 v21 = 2080;
    double v22 = v17;
    _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is already disconnecting [%s], ignore.", buf, 0x16u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"GL", @"IDS", @"candidate pair %@ is already disconnecting [%s], ignore.");
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(0, @"IDSFoundation", @"GL", @"candidate pair %@ is already disconnecting [%s], ignore.");
      }
    }
  }
  return result;
}

void sub_19DA825BC(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 592);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 672);
      *(_DWORD *)kevent buf = 67109378;
      int v26 = v4;
      __int16 v27 = 2112;
      uint64_t v28 = v5;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "request new allocation with type %d for goaway indication (ids-session-id:%@).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 672);
      _IDSLogTransport(@"GL", @"IDS", @"request new allocation with type %d for goaway indication (ids-session-id:%@).");
      if (_IDSShouldLog())
      {
        uint64_t v22 = *(void *)(a1 + 48);
        uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 672);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"request new allocation with type %d for goaway indication (ids-session-id:%@).");
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(v9 + 592) + 8);
    uint64_t v11 = *(void *)(v9 + 672);
    double v12 = objc_msgSend_sessionID(*(void **)(a1 + 40), v6, v7, v8, v22, v23);
    uint64_t v13 = *(void *)(a1 + 48);
    double v14 = *(double *)(a1 + 56);
    uint64_t v15 = *(unsigned __int16 *)(a1 + 68);
    int v16 = *(_DWORD *)(a1 + 64);
    uint64_t v20 = objc_msgSend_relaySessionToken(*(void **)(a1 + 40), v17, v18, v19);
    LOWORD(v24) = 0;
    id v21 = (id)(*(uint64_t (**)(uint64_t, uint64_t, void, void *, uint64_t, uint64_t, unint64_t, uint64_t, int, void *, void, _DWORD))(v10 + 16))(v10, v11, 0, v12, v13, 4, (unint64_t)v14, v15, v16, v20, v24, 0);
  }
}

uint64_t sub_19DA83428(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processQUICReallocIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_, *(void *)(a1 + 40), *(double *)(a1 + 320));
}

void sub_19DA85724(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(v5, v6, (uint64_t)v8, v7, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), 0, *(unsigned __int8 *)(a1 + 50));
}

unint64_t sub_19DA8578C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  unint64_t result = objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4);
  if (result > 1) {
    return result;
  }
  objc_msgSend__removeProtoRequest_status_(*(void **)(a1 + 40), v6, *(void *)(a1 + 72), v7, 0);
  objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), v8, *(void *)(a1 + 72), v9);
  objc_msgSend_setState_(*(void **)(a1 + 32), v10, 2, v11);
  double v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (&_IDSStunCandidatePairStateStrings)[*(void *)(a1 + 80)];
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)kevent buf = 136315650;
    uint64_t v169 = (uint64_t)v13;
    __int16 v170 = 2080;
    int v171 = off_1E944EAA0;
    __int16 v172 = 2112;
    uint64_t v173 = v14;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v162 = off_1E944EAA0;
      uint64_t v164 = *(void *)(a1 + 48);
      double v160 = (&_IDSStunCandidatePairStateStrings)[*(void *)(a1 + 80)];
      _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
      if (_IDSShouldLog())
      {
        id v162 = off_1E944EAA0;
        uint64_t v164 = *(void *)(a1 + 48);
        double v160 = (&_IDSStunCandidatePairStateStrings)[*(void *)(a1 + 80)];
        _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
      }
    }
  }
  uint64_t v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17, v160, v162, v164);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = objc_msgSend_candidatePairToken(*(void **)(a1 + 32), v19, v20, v21);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v169 = (uint64_t)v22;
    _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@ after allocbind timed out", buf, 0xCu);
  }
  uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 48);
  __int16 v27 = objc_msgSend_sessionID(*(void **)(a1 + 32), v24, v25, v26);
  unsigned int v31 = objc_msgSend_local(*(void **)(a1 + 32), v28, v29, v30);
  uint64_t v35 = objc_msgSend_address(v31, v32, v33, v34);
  double v39 = objc_msgSend_remote(*(void **)(a1 + 32), v36, v37, v38);
  uint64_t v43 = objc_msgSend_external(v39, v40, v41, v42);
  objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(v23, v44, (uint64_t)v27, 5.0, v35, v43, 0);

  uint64_t v48 = *(void *)(a1 + 40);
  if (*(void *)(v48 + 952))
  {
    objc_msgSend_invalidateMaterialsInSet_(*(void **)(*(void *)(a1 + 40) + 952), v45, *(void *)(a1 + 56), v47);
    uint64_t v48 = *(void *)(a1 + 40);
  }
  if (*(void *)(v48 + 960))
  {
    objc_msgSend_invalidate(*(void **)(v48 + 960), v45, v46, v47);
    uint64_t v48 = *(void *)(a1 + 40);
  }
  int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_((void *)v48, v45, 3, v47, 4, 0, 0);
  if (((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc | objc_msgSend__hasConnectingRelayCandidatePair(*(void **)(a1 + 40), v50, v51, v52)) & 1) == 0)
  {
    uint64_t v56 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 80));
    id v60 = objc_msgSend_GlobalLink(IDSFoundationLog, v57, v58, v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = *(void *)(*(void *)(a1 + 40) + 672);
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t v62 = "realloc";
      }
      else {
        uint64_t v62 = "allocbind";
      }
      uint64_t v63 = *(void *)(a1 + 88);
      *(_DWORD *)kevent buf = 138412802;
      uint64_t v169 = v61;
      __int16 v170 = 2080;
      int v171 = (char *)v62;
      __int16 v172 = 2048;
      uint64_t v173 = v63;
      _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "Connect to QR server for IDSSessionID: %@, proto message type %s timed out after %lf seconds.", buf, 0x20u);
    }

    double v67 = objc_msgSend_local(*(void **)(a1 + 32), v64, v65, v66);
    uint64_t v68 = *(void **)(a1 + 40);
    uint64_t v72 = objc_msgSend_sessionID(*(void **)(a1 + 32), v69, v70, v71);
    uint64_t AllocBindErrorCodeForSessionID = objc_msgSend_getAllocBindErrorCodeForSessionID_(v68, v73, (uint64_t)v72, v74);

    double v76 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      double v80 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v77, v78, v79)];
      *(_DWORD *)kevent buf = 136315394;
      uint64_t v169 = (uint64_t)v80;
      __int16 v170 = 1024;
      LODWORD(v171) = 7;
      _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        long long v161 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v81, v82, v83)];
        uint64_t v163 = 7;
        _IDSLogTransport(@"GL", @"IDS", @"report session setup failure (%s, %d).");
        if (_IDSShouldLog())
        {
          long long v161 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v67, v84, v85, v86, v161, 7)];
          uint64_t v163 = 7;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"report session setup failure (%s, %d).");
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 7, *(void **)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 40) + 464), *(unsigned __int8 *)(*(void *)(a1 + 40) + 428), 0.0);
    double v87 = GLUCreateQRClientTimeEvent(305, AllocBindErrorCodeForSessionID, *(void **)(a1 + 32), *(void **)(*(void *)(a1 + 40) + 896), 0.0);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
    char v89 = objc_opt_respondsToSelector();

    if (v89)
    {
      id v93 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      objc_msgSend_link_didAddQREvent_(v93, v94, *(void *)(a1 + 40), v95, v87);
    }
    double v96 = objc_msgSend_GlobalLink(IDSFoundationLog, v90, v91, v92, v161, v163);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v100 = objc_msgSend_participantID(*(void **)(a1 + 32), v97, v98, v99);
      double v104 = objc_msgSend_relaySessionToken(*(void **)(a1 + 32), v101, v102, v103);
      objc_msgSend_base64EncodedStringWithOptions_(v104, v105, 0, v106);
      uint64_t v107 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)kevent buf = 134218242;
      uint64_t v169 = v100;
      __int16 v170 = 2112;
      int v171 = v107;
      _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_DEFAULT, "failed participant:[%16llX], token:[%@]", buf, 0x16u);
    }
    if (v56)
    {
      uint64_t v110 = (void *)MEMORY[0x1E4F28C58];
      double v111 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v108, @"Allocbind timed out.", v109, *MEMORY[0x1E4F28568]);
      double v114 = objc_msgSend_errorWithDomain_code_userInfo_(v110, v112, @"GlobalLink", v113, 7, v111);

      double v115 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19DA861FC;
      block[3] = &unk_1E5970A78;
      id v167 = v56;
      id v116 = v114;
      id v166 = v116;
      dispatch_async(v115, block);

      if (*(void *)(*(void *)(a1 + 40) + 96) == 6)
      {
        uint64_t v120 = objc_msgSend_GlobalLink(IDSFoundationLog, v117, v118, v119);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v120, OS_LOG_TYPE_DEFAULT, "QUIC Allocbind timed out. - gathering ABC with packet capture", buf, 2u);
        }

        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(*(void **)(a1 + 40), v121, @"IDSQuickRelayShared", v122, @"FailedToConnect", @"QUICAllocbindTimedout", 15);
      }
    }
    else
    {
      id v123 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      char v124 = objc_opt_respondsToSelector();

      if ((v124 & 1) == 0)
      {
LABEL_39:

        goto LABEL_40;
      }
      id v116 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v116, v125, *(void *)(a1 + 40), v126, 0, *(void *)(*(void *)(a1 + 40) + 624));
    }

    goto LABEL_39;
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 105))
  {
    double v127 = ids_monotonic_time();
    objc_msgSend_startTime(*(void **)(a1 + 64), v128, v129, v127);
    *(float *)&double v127 = (float)((v127 - v130) * 1000.0);
    GLUtilReportAWDClientTimerEvent(308, 23, *(void **)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 40) + 464), *(unsigned __int8 *)(*(void *)(a1 + 40) + 428), *(float *)&v127);
    double v131 = GLUCreateQRClientTimeEvent(308, 23, *(void **)(a1 + 32), *(void **)(*(void *)(a1 + 40) + 896), *(float *)&v127);
    id v132 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
    char v133 = objc_opt_respondsToSelector();

    if (v133)
    {
      id v137 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      objc_msgSend_link_didAddQREvent_(v137, v138, *(void *)(a1 + 40), v139, v131);
    }
    if (objc_msgSend__isExtIPDiscoveryDone(*(void **)(a1 + 40), v134, v135, v136))
    {
      uint64_t v142 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v142, OS_LOG_TYPE_DEFAULT, "discard self allocate candidate pairs", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"discard self allocate candidate pairs");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"discard self allocate candidate pairs");
        }
      }
      objc_msgSend__discardSelfAllocateCandidatePairs(*(void **)(a1 + 40), v143, v144, v145);
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(*(void **)(a1 + 40), v140, 0, v141);
  }
  else
  {
    double v149 = objc_msgSend_linkMetrics(*(void **)(a1 + 32), v53, v54, v55);
    objc_msgSend_allocBindRequestTimeOut(v149, v150, v151, v152);

    float v153 = *(double *)(a1 + 88);
    GLUtilReportAWDStunMessageEventWithType(*(unsigned __int16 *)(a1 + 96), 7, *(void **)(a1 + 32), v153);
    float v154 = *(double *)(a1 + 88);
    double v131 = GLUCreateQRStunMessageEventWithType(*(unsigned __int16 *)(a1 + 96), 7, *(void **)(a1 + 32), 0, v154);
    if (v131)
    {
      id v155 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      char v156 = objc_opt_respondsToSelector();

      if (v156)
      {
        id v157 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
        objc_msgSend_link_didAddQREvent_(v157, v158, *(void *)(a1 + 40), v159, v131);
      }
    }
  }

  return objc_msgSend__reportAWDAllocateTime(*(void **)(a1 + 40), v146, v147, v148);
}

uint64_t sub_19DA861FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA86DB0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  if (objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4) != 6)
  {
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "unallocbind request timed out.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"unallocbind request timed out.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"unallocbind request timed out.");
        }
      }
    }
    objc_msgSend__removeProtoRequest_status_(*(void **)(a1 + 40), v6, *(void *)(a1 + 48), v7, 0);
    objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), v8, *(void *)(a1 + 48), v9);
    uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 336);
    uint64_t v13 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v11, *(void *)(a1 + 48), v12);
    objc_msgSend_removeObjectForKey_(v10, v14, (uint64_t)v13, v15);

    objc_msgSend__notifyCandidatePairDisconnected_withReason_(*(void **)(a1 + 40), v16, *(void *)(a1 + 32), v17, *(unsigned __int8 *)(a1 + 60));
    uint64_t v20 = *(unsigned char **)(a1 + 40);
    if (v20[828])
    {
      objc_msgSend__destroyVirtualRelayLinksForCandidatePair_withReason_(v20, v18, *(void *)(a1 + 32), v19, *(unsigned __int8 *)(a1 + 60));
      uint64_t v20 = *(unsigned char **)(a1 + 40);
    }
    char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(v20, v18, 3, v19, 4, 0, 0);
    uint64_t v24 = *(void *)(a1 + 40);
    if (*(void *)(v24 + 648) == 5)
    {
      objc_msgSend__discardCandidatePairsWithOption_isReinitiating_((void *)v24, v21, 0, v23, 0);
      if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0) {
        objc_msgSend__notifyLinkDisconnectedWithError_reason_(*(void **)(a1 + 40), v25, 8, v26, *(unsigned __int8 *)(a1 + 60));
      }
    }
    else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0 {
           && objc_msgSend_isEqualToString_(*(void **)(v24 + 624), v21, @"12345678-7654-DADA-DADA-DADADADADADA", v23))
    }
    {
      __int16 v27 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", v37, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"no more underlying link is connected.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"no more underlying link is connected.");
          }
        }
      }
      objc_msgSend_disconnectWithCompletionHandler_isReinitiating_(*(void **)(a1 + 40), v28, 0, v29, 0);
    }
    unsigned int v30 = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(v30, 8, *(void **)(a1 + 32), 0.0);
    unsigned int v31 = GLUCreateQRStunMessageEventWithType(v30, 8, *(void **)(a1 + 32), 0, 0.0);
    if (v31)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
      char v33 = objc_opt_respondsToSelector();

      if (v33)
      {
        id v34 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
        objc_msgSend_link_didAddQREvent_(v34, v35, *(void *)(a1 + 40), v36, v31);
      }
    }
  }
}

uint64_t sub_19DA88610(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendChannelDataCommandMessage_packetBuffer_options_candidatePairToken_(*(void **)(a1 + 32), a2, *(void *)(a1 + 56), a3, *(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t sub_19DA88F44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DA88F58()
{
  unint64_t v0 = (void *)qword_1E944F460;
  qword_1E944F460 = (uint64_t)&unk_1EF0294B8;

  objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v1, v2, v3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  byte_1E944F468 = objc_msgSend_isInternalInstall(v7, v4, v5, v6);
}

uint64_t IDSQRProtoPluginControlIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        if (v17 == 15)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v20 |= (unint64_t)(v34 & 0x7F) << v30;
            if ((v34 & 0x80) == 0) {
              goto LABEL_53;
            }
            v30 += 7;
            BOOL v14 = v31++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_55;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_55:
          uint64_t v36 = 16;
        }
        else
        {
          if (v17 != 2)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_45;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_47;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_47:
          uint64_t v36 = 8;
        }
        *(void *)(a1 + v36) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoSessionInfoRequestReadFrom(unsigned char *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = &OBJC_IVAR___IDSEndpointCapabilities__supportsPeopleRequestMessagesV3;
  char v8 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v9 = 0x1E596F000uLL;
  unint64_t v10 = &OBJC_IVAR___IDSEndpointCapabilities__supportsPeopleRequestMessagesV3;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      unint64_t v15 = *(void *)(a2 + v14);
      if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v16 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
      *(void *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v17 = v12++ >= 9;
      if (v17)
      {
        unint64_t v13 = 0;
        int v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    int v19 = v13 & 7;
    if (v18 || v19 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        if (v19 != 2)
        {
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v69 = 0;
          while (1)
          {
            uint64_t v70 = *v3;
            unint64_t v71 = *(void *)(a2 + v70);
            if (v71 == -1 || v71 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v72 = *(unsigned char *)(*(void *)(a2 + *v8) + v71);
            *(void *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v17 = v68++ >= 9;
              if (!v17) {
                continue;
              }
            }
            goto LABEL_115;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_115:
          PBRepeatedUInt32Add();
LABEL_104:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        uint64_t result = PBReaderPlaceMark();
        if (result)
        {
          while (1)
          {
            if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4) || *(unsigned char *)(a2 + *v5))
            {
              PBReaderRecallMark();
              goto LABEL_104;
            }
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            while (1)
            {
              uint64_t v25 = *v3;
              unint64_t v26 = *(void *)(a2 + v25);
              if (v26 == -1 || v26 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v27 = *(unsigned char *)(*(void *)(a2 + *v8) + v26);
              *(void *)(a2 + v25) = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if (v27 < 0)
              {
                v22 += 7;
                BOOL v17 = v23++ >= 9;
                if (!v17) {
                  continue;
                }
              }
              goto LABEL_31;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
            PBRepeatedUInt32Add();
          }
        }
        return result;
      case 2u:
        unint64_t v28 = v10;
        char v29 = v7;
        unint64_t v30 = v9;
        id v31 = objc_alloc_init(*(Class *)(v9 + 3728));
        objc_msgSend_addSubscribedStreams_(a1, v32, (uint64_t)v31, v33);
        if (!PBReaderPlaceMark() || (IDSQRProtoSubscribedStreamReadFrom((uint64_t)v31, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

        unint64_t v9 = v30;
        id v7 = v29;
        unint64_t v10 = v28;
        goto LABEL_104;
      case 3u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        a1[v10[267]] |= 0x20u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v8) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v17 = v35++ >= 9;
              if (v17)
              {
                uint64_t v36 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v36 = 0;
        }
LABEL_82:
        a1[64] = v36 != 0;
        goto LABEL_104;
      case 4u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        a1[v10[267]] |= 8u;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v8) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v17 = v41++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_86:
        uint64_t v66 = 44;
        goto LABEL_103;
      case 6u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v42 = 0;
        a1[v10[267]] |= 4u;
        while (2)
        {
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v8) + v49);
            *(void *)(a2 + v4_Block_object_dispose(&STACK[0x300], 8) = v49 + 1;
            v42 |= (unint64_t)(v50 & 0x7F) << v46;
            if (v50 < 0)
            {
              v46 += 7;
              BOOL v17 = v47++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_90:
        uint64_t v66 = 40;
        goto LABEL_103;
      case 7u:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v42 = 0;
        a1[v10[267]] |= 0x10u;
        while (2)
        {
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + *v8) + v54);
            *(void *)(a2 + v53) = v54 + 1;
            v42 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              BOOL v17 = v52++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_94:
        uint64_t v66 = 48;
        goto LABEL_103;
      case 8u:
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v42 = 0;
        a1[v10[267]] |= 1u;
        while (2)
        {
          uint64_t v58 = *v3;
          unint64_t v59 = *(void *)(a2 + v58);
          if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(a2 + *v8) + v59);
            *(void *)(a2 + v5_Block_object_dispose(&STACK[0x300], 8) = v59 + 1;
            v42 |= (unint64_t)(v60 & 0x7F) << v56;
            if (v60 < 0)
            {
              v56 += 7;
              BOOL v17 = v57++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_98:
        uint64_t v66 = 32;
        goto LABEL_103;
      case 0x10u:
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v42 = 0;
        a1[v10[267]] |= 2u;
        while (2)
        {
          uint64_t v63 = *v3;
          unint64_t v64 = *(void *)(a2 + v63);
          if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(a2 + *v8) + v64);
            *(void *)(a2 + v63) = v64 + 1;
            v42 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              BOOL v17 = v62++ >= 9;
              if (v17)
              {
                LODWORD(v42) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_102:
        uint64_t v66 = 36;
LABEL_103:
        *(_DWORD *)&a1[v66] = v42;
        goto LABEL_104;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_104;
    }
  }
}

uint64_t IDSQRProtoPutMaterialRequestReadFrom(void *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        BOOL v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DA8D93C()
{
  unint64_t v0 = objc_alloc_init(IDSPushHandler);
  uint64_t v1 = (void *)qword_1EB2BB778;
  qword_1EB2BB778 = (uint64_t)v0;
}

uint64_t sub_19DA8DA58()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = (void *)qword_1E944F050;
  qword_1E944F050 = (uint64_t)v0;

  return pthread_mutex_init(&stru_1E944F060, 0);
}

id sub_19DA8E300(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v7 = objc_msgSend_objectForKey_(a2, v5, (uint64_t)v4, v6);
  if (objc_opt_isKindOfClass())
  {
    id v11 = v7;
  }
  else
  {
    if (v7)
    {
      unint64_t v12 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v8, v9, v10);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        sub_19DB7BF60();
      }
    }
    id v11 = 0;
  }

  return v11;
}

void *sub_19DA8E454()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("PLLogRegisteredEvent", @"PowerLog");
  off_1E944F198 = result;
  return result;
}

uint64_t sub_19DA8F3E8(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, a1[6], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

void sub_19DA90080(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19DA8FE88);
  }
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_19DA900E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DA900F8(uint64_t a1)
{
}

uint64_t sub_19DA90100(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, *(void *)(*(void *)(a1[6] + 8) + 40), v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

void sub_19DA90420(uint64_t a1, void *a2, double a3)
{
  if ((objc_msgSend_containsObject_(a2, (const char *)a2, *(void *)(a1 + 32), a3) & 1) == 0)
  {
    objc_msgSend_apsConnection(*(void **)(a1 + 40), v4, v5, v6);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_subscribeToChannel_forTopic_(v9, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 48));
  }
}

uint64_t sub_19DA909E4(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_pushTokenChanged_((void *)a1[4], v4, a1[5], v5, a1[6], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

void sub_19DA91248(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v318 = *MEMORY[0x1E4F143B8];
  id v249 = a2;
  id v245 = a4;
  if (!v245 || !a3)
  {
    objc_msgSend_lock(*(void **)(*(void *)(a1 + 32) + 48), v7, v8, v9);
    if ((objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 24), v12, *(void *)(a1 + 40), v13) & 1) != 0
      || (objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 40), v14, *(void *)(a1 + 40), v16) & 1) != 0)
    {
      int v17 = 1;
    }
    else
    {
      int v17 = objc_msgSend_containsObject_(*(void **)(*(void *)(a1 + 32) + 32), v14, *(void *)(a1 + 40), v16);
    }
    objc_msgSend_unlock(*(void **)(*(void *)(a1 + 32) + 48), v14, v15, v16);
    int v18 = objc_alloc_init(MEMORY[0x1E4F6C370]);
    objc_msgSend_setContext_(v18, v19, *(void *)(a1 + 48), v20);
    double v250 = v18;
    if (v17)
    {
      uint64_t v21 = objc_opt_class();
      double v246 = sub_19DA8E300(v21, v249, @"c");
      uint64_t v22 = objc_opt_class();
      v248 = sub_19DA8E300(v22, v249, @"sP");
      if (!v246)
      {
        double v83 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v84 = *(void *)(a1 + 56);
          *(_DWORD *)kevent buf = 138412290;
          *(void *)&uint8_t buf[4] = v84;
          _os_log_impl(&dword_19D9BE000, v83, OS_LOG_TYPE_DEFAULT, "Received message with no command: %@", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"Received message with no command: %@");
        }
        state.opaque[0] = (uint64_t)_os_activity_create(&dword_19D9BE000, "Dropping push without command", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
        memset(buf, 170, 16);
        os_activity_scope_enter((os_activity_t)state.opaque[0], (os_activity_scope_state_t)buf);
        os_activity_scope_leave((os_activity_scope_state_t)buf);
        cut_arc_os_release();

        goto LABEL_144;
      }
      if (objc_msgSend_integerValue(v246, v23, v24, v25) == 160)
      {
        v304 = _os_activity_create(&dword_19D9BE000, "Incoming storage pending push", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
        state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
        state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
        os_activity_scope_enter(v304, &state);
        char v29 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = *(void *)(a1 + 40);
          *(_DWORD *)kevent buf = 138412546;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v246;
          _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "Received offline pending message for topic %@ with command %@", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          id v237 = *(id *)(a1 + 40);
          v240 = v246;
          _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"Received offline pending message for topic %@ with command %@");
        }
        objc_msgSend_lock(*(void **)(*(void *)(a1 + 32) + 48), v31, v32, v33, v237, v240);
        if (objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 16), v34, v35, v36))
        {
          char v40 = objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E4F28E10], v37, v38, v39);
          long long v301 = 0u;
          long long v302 = 0u;
          long long v299 = 0u;
          long long v300 = 0u;
          id v41 = *(id *)(*(void *)(a1 + 32) + 16);
          uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v299, v43, v312, 16);
          if (v45)
          {
            uint64_t v47 = *(void *)v300;
            do
            {
              for (uint64_t i = 0; i != v45; ++i)
              {
                if (*(void *)v300 != v47) {
                  objc_enumerationMutation(v41);
                }
                uint64_t v49 = *(void *)(*((void *)&v299 + 1) + 8 * i);
                if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v44, v49, v46, sel_handler_receivedOfflineMessagePendingForTopic_messageContext_, *(void *)(a1 + 40), 0))
                {
                  char v50 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v44, v49, v46);
                  objc_msgSend_setObject_forKey_(v40, v51, (uint64_t)v50, v52, v49);
                }
              }
              uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v44, (uint64_t)&v299, v46, v312, 16);
            }
            while (v45);
          }
        }
        else
        {
          id v166 = OSLogHandleForIDSCategory();
          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
          {
            id v167 = NSStringFromSelector(sel_handler_receivedOfflineMessagePendingForTopic_messageContext_);
            uint64_t v168 = *(void *)(a1 + 40);
            uint64_t v169 = *(void *)(a1 + 48);
            *(_DWORD *)kevent buf = 138413058;
            *(void *)&uint8_t buf[4] = v167;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v168;
            __int16 v314 = 2112;
            v315 = 0;
            __int16 v316 = 2112;
            uint64_t v317 = v169;
            _os_log_impl(&dword_19D9BE000, v166, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);
          }
          if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
          {
            char v40 = 0;
            goto LABEL_106;
          }
          NSStringFromSelector(sel_handler_receivedOfflineMessagePendingForTopic_messageContext_);
          id v41 = (id)objc_claimAutoreleasedReturnValue();
          double v243 = 0;
          uint64_t v244 = *(void *)(a1 + 48);
          id v238 = v41;
          uint64_t v241 = *(void *)(a1 + 40);
          _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"No incoming push handler for selector: %@    topic: %@   command: %@   context: %@");
          char v40 = 0;
        }

LABEL_106:
        objc_msgSend_unlock(*(void **)(*(void *)(a1 + 32) + 48), v53, v54, v55, v238, v241, v243, v244);
        long long v297 = 0u;
        long long v298 = 0u;
        long long v295 = 0u;
        long long v296 = 0u;
        id v170 = v40;
        uint64_t v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v170, v171, (uint64_t)&v295, v172, v311, 16);
        if (v174)
        {
          uint64_t v176 = *(void *)v296;
          do
          {
            for (uint64_t j = 0; j != v174; ++j)
            {
              if (*(void *)v296 != v176) {
                objc_enumerationMutation(v170);
              }
              uint64_t v178 = *(void *)(*((void *)&v295 + 1) + 8 * j);
              uint64_t v179 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v173, v178, v175);
              double v183 = objc_msgSend_queue(v179, v180, v181, v182);
              v291[0] = MEMORY[0x1E4F143A8];
              v291[1] = 3221225472;
              v291[2] = sub_19DA92B70;
              v291[3] = &unk_1E59747D0;
              uint64_t v184 = *(void *)(a1 + 32);
              uint64_t v185 = *(void **)(a1 + 40);
              v291[4] = v178;
              v291[5] = v184;
              id v292 = v185;
              v293 = v250;
              id v294 = *(id *)(a1 + 48);
              dispatch_async(v183, v291);
            }
            uint64_t v174 = objc_msgSend_countByEnumeratingWithState_objects_count_(v170, v173, (uint64_t)&v295, v175, v311, 16);
          }
          while (v174);
        }

        objc_msgSend_count(v170, v186, v187, v188);
        os_activity_scope_leave(&state);
        cut_arc_os_release();

LABEL_144:
LABEL_145:
        uint64_t v11 = v250;
        goto LABEL_146;
      }
      if (objc_msgSend_integerValue(v246, v26, v27, v28) == 165)
      {
        v304 = _os_activity_create(&dword_19D9BE000, "Incoming storage empty push", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
        state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
        state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
        os_activity_scope_enter(v304, &state);
        char v89 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v90 = *(void *)(a1 + 40);
          *(_DWORD *)kevent buf = 138412546;
          *(void *)&uint8_t buf[4] = v90;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v246;
          _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "Received offline storage empty message for topic %@ with command %@", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          id v237 = *(id *)(a1 + 40);
          v240 = v246;
          _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"Received offline storage empty message for topic %@ with command %@");
        }
        uint64_t v91 = objc_opt_class();
        v247 = sub_19DA8E300(v91, v249, @"scU");
        objc_msgSend_lock(*(void **)(*(void *)(a1 + 32) + 48), v92, v93, v94);
        if (objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 16), v95, v96, v97))
        {
          uint64_t v101 = objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E4F28E10], v98, v99, v100);
          long long v289 = 0u;
          long long v290 = 0u;
          long long v287 = 0u;
          long long v288 = 0u;
          id v102 = *(id *)(*(void *)(a1 + 32) + 16);
          uint64_t v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v102, v103, (uint64_t)&v287, v104, v310, 16);
          if (v106)
          {
            uint64_t v108 = *(void *)v288;
            do
            {
              for (uint64_t k = 0; k != v106; ++k)
              {
                if (*(void *)v288 != v108) {
                  objc_enumerationMutation(v102);
                }
                uint64_t v110 = *(void *)(*((void *)&v287 + 1) + 8 * k);
                if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v105, v110, v107, sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_, *(void *)(a1 + 40), 0, v237, v240))
                {
                  double v111 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v105, v110, v107);
                  objc_msgSend_setObject_forKey_(v101, v112, (uint64_t)v111, v113, v110);
                }
              }
              uint64_t v106 = objc_msgSend_countByEnumeratingWithState_objects_count_(v102, v105, (uint64_t)&v287, v107, v310, 16);
            }
            while (v106);
          }
        }
        else
        {
          long long v189 = OSLogHandleForIDSCategory();
          if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v190 = NSStringFromSelector(sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_);
            uint64_t v191 = *(void *)(a1 + 40);
            uint64_t v192 = *(void *)(a1 + 48);
            *(_DWORD *)kevent buf = 138413058;
            *(void *)&uint8_t buf[4] = v190;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v191;
            __int16 v314 = 2112;
            v315 = 0;
            __int16 v316 = 2112;
            uint64_t v317 = v192;
            _os_log_impl(&dword_19D9BE000, v189, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);
          }
          if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
          {
            uint64_t v101 = 0;
            goto LABEL_125;
          }
          NSStringFromSelector(sel_handler_receivedNoStorageResponseForTopic_identifier_messageContext_);
          id v102 = (id)objc_claimAutoreleasedReturnValue();
          double v243 = 0;
          uint64_t v244 = *(void *)(a1 + 48);
          id v237 = v102;
          v240 = *(void **)(a1 + 40);
          _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"No incoming push handler for selector: %@    topic: %@   command: %@   context: %@");
          uint64_t v101 = 0;
        }

LABEL_125:
        objc_msgSend_unlock(*(void **)(*(void *)(a1 + 32) + 48), v114, v115, v116, v237, v240, v243, v244);
        long long v285 = 0u;
        long long v286 = 0u;
        long long v283 = 0u;
        long long v284 = 0u;
        id v197 = v101;
        uint64_t v201 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v198, (uint64_t)&v283, v199, v309, 16);
        if (v201)
        {
          uint64_t v203 = *(void *)v284;
          do
          {
            for (uint64_t m = 0; m != v201; ++m)
            {
              if (*(void *)v284 != v203) {
                objc_enumerationMutation(v197);
              }
              uint64_t v205 = *(void *)(*((void *)&v283 + 1) + 8 * m);
              v206 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v200, v205, v202);
              v210 = objc_msgSend_queue(v206, v207, v208, v209);
              v278[0] = MEMORY[0x1E4F143A8];
              v278[1] = 3221225472;
              v278[2] = sub_19DA92D3C;
              v278[3] = &unk_1E59747F8;
              uint64_t v211 = *(void *)(a1 + 32);
              v212 = *(void **)(a1 + 40);
              v278[4] = v205;
              v278[5] = v211;
              id v279 = v212;
              id v280 = v247;
              uint64_t v281 = v250;
              id v282 = *(id *)(a1 + 48);
              dispatch_async(v210, v278);
            }
            uint64_t v201 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v200, (uint64_t)&v283, v202, v309, 16);
          }
          while (v201);
        }

        objc_msgSend_count(v197, v213, v214, v215);
        os_activity_scope_leave(&state);
        cut_arc_os_release();

        goto LABEL_144;
      }
      v304 = _os_activity_create(&dword_19D9BE000, "Incoming message push", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
      state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
      os_activity_scope_enter(v304, &state);
      uint64_t v135 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v136 = *(void *)(a1 + 40);
        *(_DWORD *)kevent buf = 138412546;
        *(void *)&uint8_t buf[4] = v136;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v246;
        _os_log_impl(&dword_19D9BE000, v135, OS_LOG_TYPE_DEFAULT, "Received message for topic %@ with command %@", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
      {
        id v237 = *(id *)(a1 + 40);
        v240 = v246;
        _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"Received message for topic %@ with command %@");
      }
      if (_os_feature_enabled_impl())
      {
        uint64_t v140 = objc_msgSend_topic(*(void **)(a1 + 48), v137, v138, v139);
        int isEqualToString = objc_msgSend_isEqualToString_(v140, v141, @"com.apple.private.alloy.facetime.multi", v142);

        if (isEqualToString)
        {
          objc_msgSend_identifier(*(void **)(a1 + 48), v137, v138, v139);
          kdebug_trace();
        }
      }
      objc_msgSend_lock(*(void **)(*(void *)(a1 + 32) + 48), v137, v138, v139, v237, v240);
      if (objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 16), v144, v145, v146))
      {
        uint64_t v150 = objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E4F28E10], v147, v148, v149);
        long long v276 = 0u;
        long long v277 = 0u;
        long long v274 = 0u;
        long long v275 = 0u;
        id v151 = *(id *)(*(void *)(a1 + 32) + 16);
        uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v152, (uint64_t)&v274, v153, v308, 16);
        if (v155)
        {
          uint64_t v157 = *(void *)v275;
          do
          {
            for (uint64_t n = 0; n != v155; ++n)
            {
              if (*(void *)v275 != v157) {
                objc_enumerationMutation(v151);
              }
              uint64_t v159 = *(void *)(*((void *)&v274 + 1) + 8 * n);
              if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v154, v159, v156, sel_handler_didReceiveMessage_forTopic_fromID_messageContext_, *(void *)(a1 + 40), v246))
              {
                double v160 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v154, v159, v156);
                objc_msgSend_setObject_forKey_(v150, v161, (uint64_t)v160, v162, v159);
              }
            }
            uint64_t v155 = objc_msgSend_countByEnumeratingWithState_objects_count_(v151, v154, (uint64_t)&v274, v156, v308, 16);
          }
          while (v155);
        }
      }
      else
      {
        uint64_t v193 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          double v194 = NSStringFromSelector(sel_handler_didReceiveMessage_forTopic_fromID_messageContext_);
          uint64_t v195 = *(void *)(a1 + 40);
          uint64_t v196 = *(void *)(a1 + 48);
          *(_DWORD *)kevent buf = 138413058;
          *(void *)&uint8_t buf[4] = v194;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v195;
          __int16 v314 = 2112;
          v315 = v246;
          __int16 v316 = 2112;
          uint64_t v317 = v196;
          _os_log_impl(&dword_19D9BE000, v193, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);
        }
        if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
        {
          uint64_t v150 = 0;
          goto LABEL_134;
        }
        NSStringFromSelector(sel_handler_didReceiveMessage_forTopic_fromID_messageContext_);
        id v151 = (id)objc_claimAutoreleasedReturnValue();
        double v243 = v246;
        uint64_t v244 = *(void *)(a1 + 48);
        id v239 = v151;
        uint64_t v242 = *(void *)(a1 + 40);
        _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"No incoming push handler for selector: %@    topic: %@   command: %@   context: %@");
        uint64_t v150 = 0;
      }

LABEL_134:
      objc_msgSend_unlock(*(void **)(*(void *)(a1 + 32) + 48), v163, v164, v165, v239, v242, v243, v244);
      long long v272 = 0u;
      long long v273 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      id v216 = v150;
      uint64_t v220 = objc_msgSend_countByEnumeratingWithState_objects_count_(v216, v217, (uint64_t)&v270, v218, v307, 16);
      if (v220)
      {
        uint64_t v222 = *(void *)v271;
        do
        {
          for (iuint64_t i = 0; ii != v220; ++ii)
          {
            if (*(void *)v271 != v222) {
              objc_enumerationMutation(v216);
            }
            uint64_t v224 = *(void *)(*((void *)&v270 + 1) + 8 * ii);
            double v225 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v219, v224, v221);
            uint64_t v229 = objc_msgSend_queue(v225, v226, v227, v228);
            v264[0] = MEMORY[0x1E4F143A8];
            v264[1] = 3221225472;
            v264[2] = sub_19DA92F0C;
            v264[3] = &unk_1E5974820;
            uint64_t v230 = *(void *)(a1 + 32);
            v264[4] = v224;
            v264[5] = v230;
            id v265 = v249;
            id v266 = *(id *)(a1 + 40);
            id v267 = v248;
            uint64_t v268 = v250;
            id v269 = *(id *)(a1 + 48);
            dispatch_async(v229, v264);
          }
          uint64_t v220 = objc_msgSend_countByEnumeratingWithState_objects_count_(v216, v219, (uint64_t)&v270, v221, v307, 16);
        }
        while (v220);
      }

      BOOL v234 = objc_msgSend_count(v216, v231, v232, v233) == 0;
      if (!v234) {
        objc_msgSend__powerLogIncomingMessage_command_topic_(*(void **)(a1 + 32), v235, (uint64_t)v249, v236, v246, *(void *)(a1 + 40));
      }
      os_activity_scope_leave(&state);
      cut_arc_os_release();

      goto LABEL_144;
    }
    char v56 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 138412290;
      *(void *)&uint8_t buf[4] = v57;
      _os_log_impl(&dword_19D9BE000, v56, OS_LOG_TYPE_DEFAULT, "Recieved message for unknown topic: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    {
      id v237 = *(id *)(a1 + 40);
      _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"Recieved message for unknown topic: %@");
    }
    v304 = _os_activity_create(&dword_19D9BE000, "Dropping push with unknown command", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v304, &state);
    objc_msgSend_lock(*(void **)(*(void *)(a1 + 32) + 48), v58, v59, v60);
    if (objc_msgSend_count(*(void **)(*(void *)(a1 + 32) + 16), v61, v62, v63))
    {
      char v67 = objc_msgSend_weakToStrongObjectsMapTable(MEMORY[0x1E4F28E10], v64, v65, v66);
      long long v262 = 0u;
      long long v263 = 0u;
      long long v260 = 0u;
      long long v261 = 0u;
      id v68 = *(id *)(*(void *)(a1 + 32) + 16);
      uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v260, v70, v306, 16);
      if (v72)
      {
        uint64_t v74 = *(void *)v261;
        do
        {
          for (juint64_t j = 0; jj != v72; ++jj)
          {
            if (*(void *)v261 != v74) {
              objc_enumerationMutation(v68);
            }
            uint64_t v76 = *(void *)(*((void *)&v260 + 1) + 8 * jj);
            if (objc_msgSend__validateHandler_withSelector_topic_command_(*(void **)(a1 + 32), v71, v76, v73, sel_handler_didReceiveMessage_forUnknownTopic_messageContext_, *(void *)(a1 + 40), 0, v237))
            {
              uint64_t v77 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v71, v76, v73);
              objc_msgSend_setObject_forKey_(v67, v78, (uint64_t)v77, v79, v76);
            }
          }
          uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v71, (uint64_t)&v260, v73, v306, 16);
        }
        while (v72);
      }
    }
    else
    {
      uint64_t v85 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        double v86 = NSStringFromSelector(sel_handler_didReceiveMessage_forUnknownTopic_messageContext_);
        uint64_t v87 = *(void *)(a1 + 40);
        uint64_t v88 = *(void *)(a1 + 48);
        *(_DWORD *)kevent buf = 138413058;
        *(void *)&uint8_t buf[4] = v86;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v87;
        __int16 v314 = 2112;
        v315 = 0;
        __int16 v316 = 2112;
        uint64_t v317 = v88;
        _os_log_impl(&dword_19D9BE000, v85, OS_LOG_TYPE_DEFAULT, "No incoming push handler for selector: %@    topic: %@   command: %@   context: %@", buf, 0x2Au);
      }
      if (!os_log_shim_legacy_logging_enabled() || !_IDSShouldLog())
      {
        char v67 = 0;
        goto LABEL_73;
      }
      NSStringFromSelector(sel_handler_didReceiveMessage_forUnknownTopic_messageContext_);
      id v68 = (id)objc_claimAutoreleasedReturnValue();
      double v243 = 0;
      uint64_t v244 = *(void *)(a1 + 48);
      id v237 = v68;
      v240 = *(void **)(a1 + 40);
      _IDSLogV(0, @"IDSFoundation", @"IDSPushHandler", @"No incoming push handler for selector: %@    topic: %@   command: %@   context: %@");
      char v67 = 0;
    }

LABEL_73:
    objc_msgSend_unlock(*(void **)(*(void *)(a1 + 32) + 48), v80, v81, v82, v237, v240, v243, v244);
    long long v258 = 0u;
    long long v259 = 0u;
    long long v256 = 0u;
    long long v257 = 0u;
    id v117 = v67;
    uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v118, (uint64_t)&v256, v119, v305, 16);
    if (v121)
    {
      uint64_t v123 = *(void *)v257;
      do
      {
        for (kuint64_t k = 0; kk != v121; ++kk)
        {
          if (*(void *)v257 != v123) {
            objc_enumerationMutation(v117);
          }
          uint64_t v125 = *(void *)(*((void *)&v256 + 1) + 8 * kk);
          double v126 = objc_msgSend_objectForKey_(*(void **)(*(void *)(a1 + 32) + 16), v120, v125, v122);
          double v130 = objc_msgSend_queue(v126, v127, v128, v129);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_19DA930DC;
          block[3] = &unk_1E59747F8;
          uint64_t v131 = *(void *)(a1 + 32);
          void block[4] = v125;
          void block[5] = v131;
          id v252 = v249;
          id v253 = *(id *)(a1 + 40);
          double v254 = v250;
          id v255 = *(id *)(a1 + 48);
          dispatch_async(v130, block);
        }
        uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v117, v120, (uint64_t)&v256, v122, v305, 16);
      }
      while (v121);
    }

    objc_msgSend_count(v117, v132, v133, v134);
    os_activity_scope_leave(&state);
    cut_arc_os_release();

    goto LABEL_145;
  }
  double v10 = objc_msgSend_daemon(MEMORY[0x1E4F6C350], v7, v8, v9);
  uint64_t v11 = v10;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    sub_19DB7BFC8();
    uint64_t v11 = v10;
  }
LABEL_146:
}

void sub_19DA92808(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA923C4);
  }
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x3A8]);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

uint64_t sub_19DA92B70(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_receivedOfflineMessagePendingForTopic_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

uint64_t sub_19DA92D3C(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_receivedNoStorageResponseForTopic_identifier_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

uint64_t sub_19DA92F0C(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_didReceiveMessage_forTopic_fromID_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], a1[9], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

uint64_t sub_19DA930DC(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = a1[4];
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_didReceiveMessage_forUnknownTopic_messageContext_((void *)a1[4], v4, a1[5], v5, a1[6], a1[7], a1[8], v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

uint64_t sub_19DA93878(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "Making handler call to %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v9 = *(void *)(a1 + 32);
    _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Making handler call to %@");
  }
  objc_msgSend_handler_isConnectedChanged_(*(void **)(a1 + 32), v4, *(void *)(a1 + 40), v5, *(unsigned __int8 *)(a1 + 48), v9);
  double v6 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEBUG, "Call to %@ completed", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result) {
      return _IDSLogV(1, @"IDSFoundation", @"IDSPushHandler", @"Call to %@ completed");
    }
  }
  return result;
}

void sub_19DA93B10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

id sub_19DA93ED8()
{
  if (qword_1E944F480 != -1) {
    dispatch_once(&qword_1E944F480, &unk_1EEFCD598);
  }
  id v0 = (void *)qword_1E944F478;
  return v0;
}

void sub_19DA93F2C()
{
  id v0 = (void **)MEMORY[0x19F3ADAF0]("CKRecordZoneDefaultName", @"CloudKit");
  if (v0)
  {
    uint64_t v1 = *v0;
    objc_storeStrong((id *)&qword_1E944F478, v1);
  }
}

id sub_19DA93F7C()
{
  if (qword_1E944F490 != -1) {
    dispatch_once(&qword_1E944F490, &unk_1EEFCE5F8);
  }
  id v0 = (void *)qword_1E944F488;
  return v0;
}

void sub_19DA93FD0()
{
  id v0 = (void **)MEMORY[0x19F3ADAF0]("CKOwnerDefaultName", @"CloudKit");
  if (v0)
  {
    uint64_t v1 = *v0;
    objc_storeStrong((id *)&qword_1E944F488, v1);
  }
}

id sub_19DA94020()
{
  if (qword_1E944F4A0 != -1) {
    dispatch_once(&qword_1E944F4A0, &unk_1EEFCD938);
  }
  id v0 = (void *)qword_1E944F498;
  return v0;
}

void sub_19DA94074()
{
  id v0 = (void **)MEMORY[0x19F3ADAF0]("CKErrorDomain", @"CloudKit");
  if (v0)
  {
    uint64_t v1 = *v0;
    objc_storeStrong((id *)&qword_1E944F498, v1);
  }
}

uint64_t sub_19DA94118()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4A8 = result;
  return result;
}

uint64_t sub_19DA94268()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4B8 = result;
  return result;
}

uint64_t sub_19DA94314()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4C8 = result;
  return result;
}

uint64_t sub_19DA94414()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4D8 = result;
  return result;
}

uint64_t sub_19DA944C0()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4E8 = result;
  return result;
}

uint64_t sub_19DA9456C()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F4F8 = result;
  return result;
}

uint64_t sub_19DA94618()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F508 = result;
  return result;
}

uint64_t sub_19DA94714()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F518 = result;
  return result;
}

uint64_t sub_19DA9484C()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F528 = result;
  return result;
}

uint64_t sub_19DA9494C()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F538 = result;
  return result;
}

uint64_t sub_19DA94A0C()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F548 = result;
  return result;
}

uint64_t sub_19DA94AB8()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F558 = result;
  return result;
}

uint64_t sub_19DA94BD8()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F568 = result;
  return result;
}

uint64_t sub_19DA94DC0()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F578 = result;
  return result;
}

uint64_t sub_19DA94F88()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F588 = result;
  return result;
}

uint64_t sub_19DA95110()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F598 = result;
  return result;
}

uint64_t sub_19DA951EC()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5A8 = result;
  return result;
}

uint64_t sub_19DA952EC()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5B8 = result;
  return result;
}

uint64_t sub_19DA953BC()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5C8 = result;
  return result;
}

uint64_t sub_19DA95494()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5D8 = result;
  return result;
}

uint64_t sub_19DA95570()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5E8 = result;
  return result;
}

uint64_t sub_19DA9564C()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F5F8 = result;
  return result;
}

uint64_t sub_19DA95728()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F608 = result;
  return result;
}

uint64_t sub_19DA957D4()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F618 = result;
  return result;
}

void *sub_19DA9674C()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMWCreateSessionSeed", @"MessageProtection");
  off_1E944F628 = result;
  return result;
}

void *sub_19DA9677C()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMWCreateSessionSalt", @"MessageProtection");
  off_1E944F638 = result;
  return result;
}

void sub_19DA9700C(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a3, a4, a1);
  double v5 = (void *)qword_1E944F658;
  qword_1E944F658 = v4;
}

void sub_19DA98B04(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DA98950);
  }
  _Unwind_Resume(a1);
}

id IDSLinkHBHDeriveHKDFSha256Keys(void *a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  *(_WORD *)&v60[16] = -21846;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v10;
  *(_OWORD *)double v60 = v10;
  int v13 = objc_msgSend_length(v7, v11, v12, -3.72066208e-103);
  int v17 = objc_msgSend_length(v9, v14, v15, v16);
  id v18 = objc_alloc(MEMORY[0x1E4F1CA58]);
  unsigned int v23 = objc_msgSend_initWithLength_(v18, v19, 64, v20);
  if (v13 != 20 || v17 != 12)
  {
    uint64_t v32 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v21, v22, v24);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      sub_19DB7C030();
    }
    goto LABEL_16;
  }
  WORD4(v59) = 17988;
  *(void *)&long long v59 = *(void *)"QR-HBH-KDF";
  id v25 = objc_alloc(MEMORY[0x1E4F29128]);
  double v28 = objc_msgSend_initWithUUIDString_(v25, v26, (uint64_t)v8, v27);
  uint64_t v32 = v28;
  if (!v28)
  {
    id v41 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v29, v30, v31);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_19DB7C064();
    }
    goto LABEL_15;
  }
  objc_msgSend_getUUIDBytes_(v28, v29, (unint64_t)&v59 | 0xA, v31);
  *(void *)&v60[10] = bswap64(a3);
  id v33 = v9;
  objc_msgSend_bytes(v33, v34, v35, v36);
  if (CCKDFParametersCreateHkdf())
  {
    char v40 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v37, v38, v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
      sub_19DB7C100();
    }

    goto LABEL_16;
  }
  id v42 = v7;
  objc_msgSend_bytes(v42, v43, v44, v45);
  id v46 = v23;
  objc_msgSend_mutableBytes(v46, v47, v48, v49);
  objc_msgSend_length(v46, v50, v51, v52);
  int v53 = CCDeriveKey();
  CCKDFParametersDestroy();
  if (v53)
  {
    id v41 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v54, v55, v56);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_19DB7C098();
    }
LABEL_15:

LABEL_16:
    id v57 = 0;
    goto LABEL_17;
  }
  id v57 = v46;
LABEL_17:

  return v57;
}

id IDSHBHEncryptDataWithKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (a1 && v5)
  {
    long long v10 = objc_alloc_init(PSIDSLinkHBHEncryptedPayload);
    id v11 = objc_alloc(MEMORY[0x1E4F1CA58]);
    uint64_t v14 = objc_msgSend_initWithLength_(v11, v12, 12, v13);
    uint64_t v15 = (const __SecRandom *)*MEMORY[0x1E4F3BC60];
    id v16 = v14;
    double v20 = objc_msgSend_mutableBytes(v16, v17, v18, v19);
    if (SecRandomCopyBytes(v15, 0xCuLL, v20))
    {
      double v24 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v21, v22, v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_19DB7C1D0();
      }
      id v25 = 0;
    }
    else
    {
      id v26 = objc_alloc(MEMORY[0x1E4F1CA58]);
      char v29 = objc_msgSend_initWithLength_(v26, v27, a2, v28);
      id v30 = objc_alloc(MEMORY[0x1E4F1CA58]);
      id v33 = objc_msgSend_initWithLength_(v30, v31, 16, v32);
      id v34 = v9;
      objc_msgSend_bytes(v34, v35, v36, v37);
      objc_msgSend_length(v34, v38, v39, v40);
      id v41 = v16;
      objc_msgSend_bytes(v41, v42, v43, v44);
      double v24 = v29;
      uint64_t v48 = objc_msgSend_mutableBytes(v24, v45, v46, v47);
      id v49 = v33;
      uint64_t v65 = objc_msgSend_mutableBytes(v49, v50, v51, v52);
      if (CCCryptorGCMOneshotEncrypt())
      {
        double v56 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v53, v54, v55, a2, v48, v65, 16);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          sub_19DB7C168();
        }

        id v25 = 0;
      }
      else
      {
        objc_msgSend_setInitializationVector_(v10, v53, (uint64_t)v41, v55, a2, v48, v65, 16);
        objc_msgSend_setCipherText_(v10, v57, (uint64_t)v24, v58);
        objc_msgSend_setAuthenticationTag_(v10, v59, (uint64_t)v49, v60);
        id v25 = objc_msgSend_data(v10, v61, v62, v63);
      }
    }
  }
  else
  {
    objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v6, v7, v8);
    long long v10 = (PSIDSLinkHBHEncryptedPayload *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v10->super.super, OS_LOG_TYPE_ERROR)) {
      sub_19DB7C238((uint64_t)v9, a1, &v10->super.super);
    }
    id v25 = 0;
  }

  return v25;
}

NSObject *IDSHBHDecryptDataWithKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (a1 && v5)
  {
    id v10 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    double v13 = objc_msgSend_initWithBytes_length_(v10, v11, a1, v12, a2);
    uint64_t v14 = [PSIDSLinkHBHEncryptedPayload alloc];
    int v17 = objc_msgSend_initWithData_(v14, v15, (uint64_t)v13, v16);
    uint64_t v21 = v17;
    if (v17)
    {
      uint64_t v22 = objc_msgSend_initializationVector(v17, v18, v19, v20);
      uint64_t v26 = objc_msgSend_length(v22, v23, v24, v25);

      if (v26 == 12)
      {
        id v30 = objc_msgSend_authenticationTag(v21, v27, v28, v29);
        uint64_t v34 = objc_msgSend_length(v30, v31, v32, v33);

        if (v34 == 16)
        {
          uint64_t v38 = objc_msgSend_cipherText(v21, v35, v36, v37);
          uint64_t v42 = objc_msgSend_length(v38, v39, v40, v41);

          id v43 = objc_alloc(MEMORY[0x1E4F1CA58]);
          uint64_t v46 = objc_msgSend_initWithLength_(v43, v44, v42, v45);
          objc_msgSend_initializationVector(v21, v47, v48, v49);
          id v50 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_bytes(v50, v51, v52, v53);

          objc_msgSend_cipherText(v21, v54, v55, v56);
          id v57 = objc_claimAutoreleasedReturnValue();
          objc_msgSend_bytes(v57, v58, v59, v60);

          objc_msgSend_authenticationTag(v21, v61, v62, v63);
          id v64 = objc_claimAutoreleasedReturnValue();
          uint64_t v68 = objc_msgSend_bytes(v64, v65, v66, v67);

          id v69 = v9;
          objc_msgSend_bytes(v69, v70, v71, v72);
          objc_msgSend_length(v69, v73, v74, v75);
          uint64_t v76 = v46;
          uint64_t v90 = objc_msgSend_mutableBytes(v76, v77, v78, v79);
          if (!CCCryptorGCMOneshotDecrypt())
          {
            uint64_t v76 = v76;
            uint64_t v84 = v76;
            goto LABEL_20;
          }
          double v83 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v80, v81, v82, v42, v90, v68, 16);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
            sub_19DB7C2F4();
          }
        }
        else
        {
          uint64_t v76 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v35, v36, v37);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
            sub_19DB7C35C(v21, (const char *)v76, v87, v88);
          }
        }
      }
      else
      {
        uint64_t v76 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v27, v28, v29);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
          sub_19DB7C3EC(v21, (const char *)v76, v85, v86);
        }
      }
    }
    else
    {
      uint64_t v76 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v18, v19, v20);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
        sub_19DB7C2C0();
      }
    }
    uint64_t v84 = 0;
LABEL_20:

    goto LABEL_21;
  }
  double v13 = objc_msgSend_RealTimeEncryptionController(IDSFoundationLog, v6, v7, v8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_19DB7C47C();
  }
  uint64_t v84 = 0;
LABEL_21:

  return v84;
}

void sub_19DA9A480(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void *IDSOSChannelManagerCreate(uint64_t a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v2)
  {
    if (!os_channel_attr_create())
    {
LABEL_15:
      IDSOSChannelManagerDestroy(v2);
      return 0;
    }
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      id v5 = "os_channel_attr_set";
      while (!os_channel_attr_set())
      {
        ++v4;
        v3 += 16;
        if (v4 >= *(unsigned int *)(a1 + 8)) {
          goto LABEL_7;
        }
      }
      goto LABEL_14;
    }
LABEL_7:
    if (*(void *)(a1 + 16) && *(_DWORD *)(a1 + 24) && os_channel_attr_set_key())
    {
      id v5 = "os_channel_attr_set_key";
    }
    else
    {
      uint64_t extended = os_channel_create_extended();
      *uint64_t v2 = extended;
      if (extended)
      {
        os_channel_attr_destroy();
        return v2;
      }
      id v5 = "os_channel_create_extended";
    }
LABEL_14:
    perror(v5);
    os_channel_attr_destroy();
    goto LABEL_15;
  }
  return v2;
}

void IDSOSChannelManagerDestroy(void *a1)
{
  if (a1)
  {
    if (*a1) {
      os_channel_destroy();
    }
    free(a1);
  }
}

uint64_t sub_19DA9E1D0()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
  uint64_t v3 = objc_msgSend_initWithSuiteName_(v0, v1, @"com.apple.ids", v2);
  uint64_t v6 = objc_msgSend_BOOLForKey_(v3, v4, @"IDSClearStateOnLaunch", v5);

  return v6;
}

void sub_19DA9E220(uint64_t a1, uint64_t a2, int a3)
{
  id v4 = objc_alloc(MEMORY[0x1E4F1CB18]);
  uint64_t v7 = objc_msgSend_initWithSuiteName_(v4, v5, @"com.apple.ids", v6);
  id v10 = v7;
  if (a3) {
    objc_msgSend_setBool_forKey_(v7, v8, 1, v9, @"IDSClearStateOnLaunch");
  }
  else {
    objc_msgSend_removeObjectForKey_(v7, v8, @"IDSClearStateOnLaunch", v9);
  }
}

id sub_19DA9E29C()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
  uint64_t v3 = objc_msgSend_initWithSuiteName_(v0, v1, @"com.apple.ids", v2);
  double v6 = objc_msgSend_stringForKey_(v3, v4, @"IDSKTAccountKeyFetchMetricDeviceIDDefault", v5);
  id v10 = objc_msgSend_sharedInstance(IDSCurrentServerTime, v7, v8, v9);
  objc_msgSend_currentServerTimeInterval(v10, v11, v12, v13);
  double v15 = v14;

  objc_msgSend_doubleForKey_(v3, v16, @"IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault", v17);
  if (v20 == 0.0 || (double v21 = v15 - v20, v21 >= 2592000.0))
  {
  }
  else if (v6)
  {
    goto LABEL_7;
  }
  uint64_t v22 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v18, v19, v21);
  double v6 = objc_msgSend_UUIDString(v22, v23, v24, v25);

  objc_msgSend_setObject_forKey_(v3, v26, (uint64_t)v6, v27, @"IDSKTAccountKeyFetchMetricDeviceIDDefault");
  objc_msgSend_setDouble_forKey_(v3, v28, @"IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault", v15);
LABEL_7:

  return v6;
}

id sub_19DA9E3B4()
{
  if (_IDSRunningInDaemon())
  {
    id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
    uint64_t v3 = objc_msgSend_initWithSuiteName_(v0, v1, @"com.apple.ids", v2);
    double v6 = objc_msgSend_objectForKey_(v3, v4, @"FTMessageDeliveryServerTimestamp", v5);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

void sub_19DA9E460(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  if (_IDSRunningInDaemon())
  {
    id v3 = objc_alloc(MEMORY[0x1E4F1CB18]);
    double v6 = objc_msgSend_initWithSuiteName_(v3, v4, @"com.apple.ids", v5);
    objc_msgSend_setObject_forKey_(v6, v7, (uint64_t)v9, v8, @"FTMessageDeliveryServerTimestamp");
  }
}

id sub_19DA9E4D8()
{
  if (_IDSRunningInDaemon())
  {
    id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
    id v3 = objc_msgSend_initWithSuiteName_(v0, v1, @"com.apple.ids", v2);
    double v6 = objc_msgSend_objectForKey_(v3, v4, @"FTMessageDeliveryServerTimestampReceivedDate", v5);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

void sub_19DA9E584(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  if (_IDSRunningInDaemon())
  {
    id v3 = objc_alloc(MEMORY[0x1E4F1CB18]);
    double v6 = objc_msgSend_initWithSuiteName_(v3, v4, @"com.apple.ids", v5);
    objc_msgSend_setObject_forKey_(v6, v7, (uint64_t)v9, v8, @"FTMessageDeliveryServerTimestampReceivedDate");
  }
}

BOOL IDSQRProtoTestTestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

id sub_19DA9F85C(id a1)
{
  return a1;
}

void sub_19DA9FCC8(uint64_t a1, dispatch_queue_t *a2)
{
}

void sub_19DA9FCD0(dispatch_queue_t *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    uint64_t v5 = objc_msgSend_cacheDidReloadBlock(a1, v2, v3, v4);
    if (v5 && (v9 = (void *)v5, int v10 = objc_msgSend_postingNotification(a1, v6, v7, v8), v9, !v10))
    {
      uint64_t v26 = objc_msgSend_config(a1, v6, v7, v8);
      id v30 = objc_msgSend_logCategory(v26, v27, v28, v29);

      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 138412546;
        uint64_t v38 = objc_opt_class();
        __int16 v39 = 2048;
        uint64_t v40 = a1;
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "<%@:%p> processing external reload", (uint8_t *)&v37, 0x16u);
      }

      BOOL v15 = objc_msgSend_loadFromCacheWithError_(a1, v31, 0, v32);
      if (v15)
      {
        objc_msgSend_cacheDidReloadBlock(a1, v33, v34, v35);
        uint64_t v36 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
        ((void (**)(void, NSObject *))v36)[2](v36, v15);
      }
    }
    else
    {
      uint64_t v11 = objc_msgSend_config(a1, v6, v7, v8);
      BOOL v15 = objc_msgSend_logCategory(v11, v12, v13, v14);

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = objc_opt_class();
        uint64_t v22 = objc_msgSend_cacheDidReloadBlock(a1, v17, v18, v19);
        if (v22) {
          uint64_t v24 = @"YES";
        }
        else {
          uint64_t v24 = @"NO";
        }
        int v37 = 138413058;
        if (objc_msgSend_postingNotification(a1, v20, v21, v23)) {
          double v25 = @"YES";
        }
        else {
          double v25 = @"NO";
        }
        uint64_t v38 = v16;
        __int16 v39 = 2048;
        uint64_t v40 = a1;
        __int16 v41 = 2112;
        uint64_t v42 = v24;
        __int16 v43 = 2112;
        double v44 = v25;
        _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "<%@:%p> asked to reload externally, not not in a state to do so {hasCacheDidReloadBlock: %@, postingNotification: %@}", (uint8_t *)&v37, 0x2Au);
      }
    }
  }
}

void sub_19DA9FEFC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_19DAA057C(a2);
  }
}

void sub_19DA9FFEC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = objc_msgSend_serverSignature(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(@"CachedSignature", v5, *(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);

  uint64_t v11 = objc_msgSend_serverCerts(*(void **)(a1 + 32), v8, v9, v10);
  CFPreferencesSetValue(@"CacheCertificate", v11, *(CFStringRef *)(a1 + 48), v6, v7);

  BOOL v15 = objc_msgSend_signedBag(*(void **)(a1 + 32), v12, v13, v14);
  CFPreferencesSetValue(@"CachedBag", v15, *(CFStringRef *)(a1 + 48), v6, v7);

  uint64_t v16 = NSNumber;
  double v20 = objc_msgSend_loadDate(*(void **)(a1 + 32), v17, v18, v19);
  objc_msgSend_timeIntervalSinceReferenceDate(v20, v21, v22, v23);
  double v27 = (const void *)objc_msgSend_numberWithDouble_(v16, v24, v25, v26);
  CFPreferencesSetValue(@"Date", v27, *(CFStringRef *)(a1 + 48), v6, v7);

  uint64_t v28 = NSNumber;
  objc_msgSend_timeToLive(*(void **)(a1 + 32), v29, v30, v31);
  double v35 = (const void *)objc_msgSend_numberWithDouble_(v28, v32, v33, v34);
  CFPreferencesSetValue(@"CacheTime", v35, *(CFStringRef *)(a1 + 48), v6, v7);
  CFPreferencesSynchronize(*(CFStringRef *)(a1 + 48), v6, v7);
  uint64_t v36 = *(dispatch_queue_t **)(a1 + 40);
  sub_19DAA015C(v36);
}

void sub_19DAA015C(dispatch_queue_t *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    objc_msgSend_setPostingNotification_(a1, v2, 1, v3);
    CFStringRef v7 = objc_msgSend_config(a1, v4, v5, v6);
    uint64_t v11 = objc_msgSend_logCategory(v7, v8, v9, v10);

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412546;
      uint64_t v20 = objc_opt_class();
      __int16 v21 = 2048;
      uint64_t v22 = a1;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "<%@:%p> posting external reload notification", buf, 0x16u);
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, @"__k_IDSServerBagFinishedLoadingDistributedNotification", 0, 0, 0);
    dispatch_time_t v13 = dispatch_time(0, 1000000000);
    double v17 = objc_msgSend_queue(a1, v14, v15, v16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DAA0654;
    block[3] = &unk_1E5973BA8;
    void block[4] = a1;
    dispatch_after(v13, v17, block);
  }
}

void sub_19DAA0470(uint64_t a1)
{
}

void sub_19DAA0574(uint64_t a1)
{
}

void sub_19DAA057C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DAA05F8;
    block[3] = &unk_1E5973BA8;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_19DAA05F8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_handleExternalLoadTaskQueue(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_enqueueExecutionWithTarget_afterDelay_(v6, v5, *(void *)(a1 + 32), 0.2);
}

uint64_t sub_19DAA0654(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_setPostingNotification_(*(void **)(a1 + 32), a2, 0, a3);
}

uint64_t IDSQRProtoPeerPublishedStreamReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CFStringRef v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            while (1)
            {
              uint64_t v28 = *v3;
              unint64_t v29 = *(void *)(a2 + v28);
              if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x300], 8) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                BOOL v14 = v26++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_39;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          while (1)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_55;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedUInt32Add();
        }
      }
      else if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_43;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_45:
        *(void *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DAA11F4()
{
  id v0 = objc_alloc_init(IDSNWPathUtils);
  uint64_t v1 = (void *)qword_1E944F310;
  qword_1E944F310 = (uint64_t)v0;
}

void sub_19DAA1754(uint64_t a1, const char *a2, double a3)
{
  objc_msgSend__updateSlicedInterfaceName_(*(void **)(a1 + 32), a2, (uint64_t)a2, a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isSlicedCellularInterface_forSession_(*(void **)(a1 + 32), v4, (uint64_t)v7, v5, *(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
}

void sub_19DAA1BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19DAA1BEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DAA1BFC(uint64_t a1)
{
}

uint64_t sub_19DAA1C04(uint64_t a1, nw_interface_t interface)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  name = nw_interface_get_name(interface);
  id v4 = [NSString alloc];
  uint64_t v7 = objc_msgSend_initWithCString_encoding_(v4, v5, (uint64_t)name, v6, 4);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  char v13 = objc_msgSend_NWPathUtils(IDSFoundationLog, v10, v11, v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    int v16 = 138412290;
    uint64_t v17 = v14;
    _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface Name: %@", (uint8_t *)&v16, 0xCu);
  }

  return 1;
}

uint64_t IDSQRProtoH3EndToEndChannelUnRegisterIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v23 = PBReaderReadData();
        uint64_t v24 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v23;
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_33:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void *sub_19DAA63D8()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPVerifyAndExposeMessage", @"MessageProtection");
  off_1E944F2C0 = result;
  return result;
}

void *sub_19DAA6408()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPCopyProtectedMsgHash", @"MessageProtection");
  off_1E944F188 = result;
  return result;
}

void *sub_19DAA6438()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFICopyProtClass", @"MessageProtection");
  off_1E944EE60 = result;
  return result;
}

void *sub_19DAA6468()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFIUpdateProtClass", @"MessageProtection");
  off_1E944EE70 = result;
  return result;
}

void *sub_19DAA6498()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFIPurgeFromKeychain", @"MessageProtection");
  off_1E944F660 = result;
  return result;
}

void *sub_19DAA64C8()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFullIdentityCreateFromData", @"MessageProtection");
  off_1E944EE80 = result;
  return result;
}

void *sub_19DAA64F8()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFullIdentityCreate", @"MessageProtection");
  off_1E944F670 = result;
  return result;
}

void *sub_19DAA6528()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFullIdentityCreateWithProtClass", @"MessageProtection");
  off_1E944F680 = result;
  return result;
}

void *sub_19DAA6558()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPPublicIdentityCopyFromPrivate", @"MessageProtection");
  off_1E944EEA0 = result;
  return result;
}

void *sub_19DAA6588()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPFIAppendSerialization", @"MessageProtection");
  off_1E944EE50 = result;
  return result;
}

void *sub_19DAA65B8()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPSignAndProtectMessage", @"MessageProtection");
  off_1E944F2B0 = result;
  return result;
}

void *sub_19DAA65E8()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPPublicIdentityCreateFromData", @"MessageProtection");
  off_1E944EEB0 = result;
  return result;
}

void *sub_19DAA6618()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("SecMPPIAppendSerialization", @"MessageProtection");
  off_1E944EE90 = result;
  return result;
}

void sub_19DAA6678(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_19DAA6948(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 2);
    objc_msgSend_setLoadedContents_(v7, v8, (uint64_t)v5, v9);
    char v13 = objc_msgSend_contentProvider(v7, v10, v11, v12);
    char v17 = objc_msgSend_loadOverrideValuesIfPresent(v13, v14, v15, v16);
    unint64_t v21 = objc_msgSend_mutableCopy(v17, v18, v19, v20);
    objc_msgSend_setOverrideValues_(v7, v22, (uint64_t)v21, v23);

    os_unfair_lock_unlock(v7 + 2);
    if (!a3)
    {
      uint64_t v24 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19DAA6A7C;
      block[3] = &unk_1E5973BA8;
      unsigned int v26 = v7;
      dispatch_async(v24, block);
    }
  }
}

void sub_19DAA6A7C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_config(*(void **)(a1 + 32), a2, a3, a4);
  double v9 = objc_msgSend_logCategory(v5, v6, v7, v8);

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    char v13 = *(void **)(a1 + 32);
    BOOL v14 = objc_msgSend_config(v13, v10, v11, v12);
    int v21 = 138543618;
    char v22 = v13;
    __int16 v23 = 2112;
    uint64_t v24 = v14;
    _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ posted finished loading note {config: %@}", (uint8_t *)&v21, 0x16u);
  }
  unsigned int v18 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v15, v16, v17);
  objc_msgSend_postNotificationName_object_(v18, v19, @"_kIDSServerBagFinishedLoadingNotification", v20, *(void *)(a1 + 32));
}

void sub_19DAA7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_19DAA811C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  if (!qword_1E944F398)
  {
    v9[1] = (void *)MEMORY[0x1E4F143A8];
    v9[2] = (void *)3221225472;
    v9[3] = sub_19DAA8248;
    v9[4] = &unk_1E5970A28;
    void v9[5] = v9;
    long long v10 = xmmword_1E5974978;
    uint64_t v11 = 0;
    qword_1E944F398 = _sl_dlopen();
  }
  if (!qword_1E944F398) {
    sub_19DB7DF44(v9, a2, a3, a4);
  }
  if (v9[0]) {
    free(v9[0]);
  }
  Class result = objc_getClass("KTVerifierResult");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_19DB7DFC4(v8, (uint64_t)result, v6, v7);
  }
  qword_1E944F3A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19DAA8248()
{
  uint64_t result = _sl_dlopen();
  qword_1E944F398 = result;
  return result;
}

uint64_t IDSQRProtoSessionInfoIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unsigned int v18 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
        objc_msgSend_addPeerPublishedStreams_((void *)a1, v19, (uint64_t)v18, v20);
        if PBReaderPlaceMark() && (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v18, a2)) {
          goto LABEL_56;
        }
        goto LABEL_103;
      case 2u:
        if (v16 != 2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          while (1)
          {
            uint64_t v55 = *v3;
            unint64_t v56 = *(void *)(a2 + v55);
            if (v56 == -1 || v56 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              BOOL v14 = v53++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_97;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_97:
          PBRepeatedUInt32Add();
          goto LABEL_100;
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            uint64_t v25 = *v3;
            unint64_t v26 = *(void *)(a2 + v25);
            if (v26 == -1 || v26 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_34;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
          PBRepeatedUInt32Add();
        }
        goto LABEL_73;
      case 3u:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            while (1)
            {
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 == -1 || v32 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v30 |= (unint64_t)(v33 & 0x7F) << v28;
              if (v33 < 0)
              {
                v28 += 7;
                BOOL v14 = v29++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_47;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt64Add();
          }
LABEL_73:
          PBReaderRecallMark();
        }
        else
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v60 = 0;
          while (1)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v14 = v59++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_99;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_99:
          PBRepeatedUInt64Add();
        }
        goto LABEL_100;
      case 4u:
        unsigned int v18 = objc_alloc_init(IDSQRProtoAllocBindJoinInfo);
        objc_msgSend_addJoinedParticipants_((void *)a1, v34, (uint64_t)v18, v35);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindJoinInfoReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_103;
        }
        goto LABEL_56;
      case 5u:
        unsigned int v18 = objc_alloc_init(IDSQRProtoUnAllocBindLeaveInfo);
        objc_msgSend_addLeftParticipants_((void *)a1, v36, (uint64_t)v18, v37);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindLeaveInfoReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_103;
        }
        goto LABEL_56;
      case 6u:
        unsigned int v18 = objc_alloc_init(IDSQRProtoParticipantUpdateParticipantModeInfo);
        objc_msgSend_addUpdatedParticipants_((void *)a1, v38, (uint64_t)v18, v39);
        if (PBReaderPlaceMark()
          && (IDSQRProtoParticipantUpdateParticipantModeInfoReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_56:
          PBReaderRecallMark();

LABEL_100:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_103:

        return 0;
      case 0xFu:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        *(unsigned char *)(a1 + 104) |= 1u;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v14 = v41++ >= 9;
              if (v14)
              {
                uint64_t v42 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v42 = 0;
        }
LABEL_77:
        *(void *)(a1 + 56) = v42;
        goto LABEL_100;
      case 0x10u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(unsigned char *)(a1 + 104) |= 2u;
        while (2)
        {
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              BOOL v14 = v47++ >= 9;
              if (v14)
              {
                LODWORD(v4_Block_object_dispose(&STACK[0x300], 8) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v4_Block_object_dispose(&STACK[0x300], 8) = 0;
        }
LABEL_81:
        *(_DWORD *)(a1 + 64) = v48;
        goto LABEL_100;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
    }
  }
}

uint64_t IDSQRProtoPluginControlRequestReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_39;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_41:
          uint64_t v32 = 24;
          goto LABEL_46;
        case 2u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 16;
          goto LABEL_37;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          break;
        case 4u:
          uint64_t v24 = PBReaderReadData();
          uint64_t v25 = 8;
LABEL_37:
          uint64_t v31 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v2_Block_object_dispose(&STACK[0x300], 8) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_45:
      uint64_t v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void IDSAWDSubmitBlockAsync(void *a1, void *a2)
{
  double v3 = a1;
  id v4 = a2;
  char v8 = v4;
  if (v3)
  {
    if (v4)
    {
      unsigned int v9 = objc_msgSend_sharedInstance(IDSAWDLogging, v5, v6, v7);
      int shouldSubmit = objc_msgSend__shouldSubmit(v9, v10, v11, v12);

      if (shouldSubmit)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_19DAABA68;
        block[3] = &unk_1E5973F20;
        id v15 = v8;
        dispatch_async(v3, block);
      }
    }
  }
}

void sub_19DAABA68(uint64_t a1)
{
  double v2 = (void *)MEMORY[0x19F3AEEF0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

double IDSAWDLogFuzzTimeTo10sSecondsForHotShip(double a1)
{
  return ceil(a1 / 10.0) * 10.0;
}

double IDSAWDLogGenerateDataRate(int a1)
{
  return (double)(7 * a1 + 931);
}

BOOL IDSAWDLogShouldSubmitHotShipQuickRelayMetricWithDate(int a1, void *a2)
{
  double v3 = (objc_class *)MEMORY[0x1E4F1C9A8];
  id v4 = a2;
  id v5 = [v3 alloc];
  char v8 = objc_msgSend_initWithCalendarIdentifier_(v5, v6, *MEMORY[0x1E4F1C318], v7);
  id v9 = objc_alloc(MEMORY[0x1E4F1CAF0]);
  double v12 = objc_msgSend_initWithName_(v9, v10, @"GMT", v11);
  objc_msgSend_setTimeZone_(v8, v13, (uint64_t)v12, v14);
  char v17 = objc_msgSend_components_fromDate_(v8, v15, 112, v16, v4);

  uint64_t v21 = objc_msgSend_day(v17, v18, v19, v20);
  uint64_t v25 = objc_msgSend_hour(v17, v22, v23, v24);
  uint64_t v29 = objc_msgSend_minute(v17, v26, v27, v28);
  if (v25 == 23 && v29 > 54)
  {
    BOOL v30 = 0;
  }
  else
  {
    BOOL v31 = (v21 & 0x8000000000000001) == 1;
    if (a1) {
      BOOL v31 = (v21 & 1) == 0;
    }
    if (v25) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = v29 < 6;
    }
    BOOL v30 = !v32 && v31;
  }

  return v30;
}

BOOL IDSAWDLogShouldSubmitHotShipQuickRelayMetric(int a1, const char *a2, uint64_t a3, double a4)
{
  id v5 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], a2, a3, a4);
  BOOL ShouldSubmitHotShipQuickRelayMetricWithDate = IDSAWDLogShouldSubmitHotShipQuickRelayMetricWithDate(a1, v5);

  return ShouldSubmitHotShipQuickRelayMetricWithDate;
}

void sub_19DAABE5C()
{
  id v0 = objc_alloc_init(IDSAWDLogging);
  uint64_t v1 = (void *)qword_1EB2BB780;
  qword_1EB2BB780 = (uint64_t)v0;
}

uint64_t sub_19DAAC038(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__submitAWDMetric_withContainer_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

void sub_19DAADD34(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICRegisterRequest_withOptions_(v5, v6, (uint64_t)v8, v7, *(void *)(a1 + 48));
}

void sub_19DAADD90(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v5 = *(void **)(a1 + 32);
  objc_msgSend_candidatePairToken(*(void **)(a1 + 40), a2, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__sendQUICRegisterRequest_withOptions_(v5, v6, (uint64_t)v8, v7, *(void *)(a1 + 48));
}

void sub_19DAAEA78(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = (id)objc_msgSend_copy(*(void **)(a1 + 48), a2, a3, a4);
  objc_msgSend__sendQUICRegisterAckRequest_withOptions_(v4, v6, v5, v7, v8);
}

void sub_19DAB02D0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DAB01ECLL);
  }
  _Unwind_Resume(a1);
}

void sub_19DAB233C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v5 = objc_msgSend_GFTGL(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "[U+1] now that remote device version is received, processing incoming RelayInterfaceInfo", v9, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend__processCommandRelayInterfaceInfo_candidatePairToken_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));
}

void sub_19DAB3404(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_19DAB34A0;
  v2[3] = &unk_1E5973CF8;
  id v3 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  IDSTransportThreadAddBlock(v2);
}

void sub_19DAB34A0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  double v8 = objc_msgSend_candidatePairToken(*(void **)(a1 + 40), v5, v6, v7);
  objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v11, v9, (uint64_t)v8, v10, 0, 13);
}

void sub_19DAB3514(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v4 = *(void **)(a1 + 32);
  objc_msgSend_sessionID(*(void **)(a1 + 40), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupNewQRLinkIfNecessary_(v4, v5, (uint64_t)v7, v6);
}

void *sub_19DAB3C7C(void *result, const char *a2, uint64_t a3, double a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(result[4] + 592);
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = result;
    double v6 = objc_msgSend_GFTGL(IDSFoundationLog, a2, a3, a4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5[4] + 672);
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v9 = v7;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "request new QR session for group %@.", buf, 0xCu);
    }

    return (id)(*(uint64_t (**)(void, void, void, void))(*(void *)(*(void *)(v5[4] + 592) + 8) + 16))(*(void *)(*(void *)(v5[4] + 592) + 8), *(void *)(v5[4] + 672), 0, 0);
  }
  return result;
}

void sub_19DAB7A8C(uint64_t a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_19DAB7B28;
  v2[3] = &unk_1E5973CF8;
  id v3 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  IDSTransportThreadAddBlock(v2);
}

void sub_19DAB7B28(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_object(*(void **)(a1 + 32), a2, a3, a4);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  double v8 = objc_msgSend_candidatePairToken(*(void **)(a1 + 40), v5, v6, v7);
  objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v11, v9, (uint64_t)v8, v10, 0, 13);
}

void sub_19DAB7B9C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v4 = *(void **)(a1 + 32);
  objc_msgSend_sessionID(*(void **)(a1 + 40), a2, a3, a4);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend__setupNewQRLinkIfNecessary_(v4, v5, (uint64_t)v7, v6);
}

BOOL IDSQRProtoTestResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DAB8BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19DAB8BE4()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F690 = result;
  return result;
}

uint64_t sub_19DAB8C14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DAB8C24(uint64_t a1)
{
}

void sub_19DAB8C2C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  if (!objc_msgSend_response(a2, (const char *)a2, a3, a4))
  {
    objc_msgSend_getTapToRadarURL(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v5, v6, v7);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = objc_msgSend_defaultWorkspace((void *)qword_1E944F690, v8, v9, v10);
    objc_msgSend_openURL_configuration_completionHandler_(v11, v12, (uint64_t)v14, v13, 0, &unk_1EEFCDCD8);
  }
}

void sub_19DABD310(uint64_t a1, void *a2)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (!qword_1E944F140)
  {
    uint64_t v6 = (void **)MEMORY[0x19F3ADAF0]("kSymptomDiagnosticReplySuccess", @"SymptomDiagnosticReporter");
    if (v6) {
      double v7 = *v6;
    }
    else {
      double v7 = 0;
    }
    objc_storeStrong((id *)&qword_1E944F140, v7);
  }
  uint64_t v8 = qword_1E944F138;
  if (!qword_1E944F138)
  {
    uint64_t v9 = (void **)MEMORY[0x19F3ADAF0]("kSymptomDiagnosticReplySessionID", @"SymptomDiagnosticReporter");
    if (v9) {
      double v10 = *v9;
    }
    else {
      double v10 = 0;
    }
    objc_storeStrong((id *)&qword_1E944F138, v10);
    uint64_t v8 = qword_1E944F138;
  }
  if (qword_1E944F140) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    double v13 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v31 = *MEMORY[0x1E4F28228];
    v32[0] = @"Failed to weak link SymptomDiagnosticReporter symbol";
    id v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v3, (uint64_t)v32, v5, &v31, 1);
    char v17 = objc_msgSend_errorWithDomain_code_userInfo_(v13, v15, @"IDSAutoBugCaptureErrorDomain", v16, -100, v14);
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v17);
  }
  else
  {
    unsigned int v18 = objc_msgSend_objectForKeyedSubscript_(v4, v3, qword_1E944F140, v5);
    int v22 = objc_msgSend_BOOLValue(v18, v19, v20, v21);

    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v26 = objc_msgSend_objectForKeyedSubscript_(v4, v24, qword_1E944F138, v25);
    uint64_t v29 = (void *)v26;
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, void))(v23 + 16))(v23, v26, 0);
    }
    else
    {
      BOOL v30 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v27, @"IDSAutoBugCaptureErrorDomain", v28, -300, v4);
      (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v29, v30);
    }
  }
}

void sub_19DABD53C(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  if (objc_msgSend_isSupported(IDSAutoBugCapture, a3, a4, a1))
  {
    id v4 = objc_alloc_init((Class)CUTWeakLinkClass());
    double v5 = (void *)qword_1E944F1B0;
    qword_1E944F1B0 = (uint64_t)v4;
  }
}

id sub_19DABD6CC(void *a1, void *a2)
{
  v38[3] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  v38[0] = @"t";
  v38[1] = @"sP";
  v38[2] = @"tP";
  double v7 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v5, (uint64_t)v38, v6, 3);
  BOOL v11 = objc_msgSend_mutableCopy(v3, v8, v9, v10);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v12 = v3;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v33, v14, v37, 16);
  if (v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *(void *)v34;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(v12);
        }
        uint64_t v21 = *(void *)(*((void *)&v33 + 1) + 8 * v20);
        int v22 = objc_msgSend_objectForKeyedSubscript_(v12, v16, v21, v17, (void)v33);
        if (!objc_msgSend_containsObject_(v7, v23, v21, v24))
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v25 = sub_19DABD6CC(v22, v4);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_16;
            }
            uint64_t v25 = sub_19DABF33C(v22, v4);
          }
          goto LABEL_15;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v25 = IDSLoggableDescriptionForHandleOnService(v22, v4);
LABEL_15:
          BOOL v30 = (void *)v25;
          objc_msgSend_setObject_forKeyedSubscript_(v11, v26, v25, v27, v21);

          goto LABEL_16;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v25 = IDSLoggableDescriptionForTokenOnService(v22, v4);
          goto LABEL_15;
        }
        objc_msgSend_setObject_forKeyedSubscript_(v11, v28, @"<redacted>", v29, v21);
LABEL_16:

        ++v20;
      }
      while (v18 != v20);
      uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v16, (uint64_t)&v33, v17, v37, 16);
      uint64_t v18 = v31;
    }
    while (v31);
  }

  return v11;
}

id sub_19DABDB58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  if (objc_opt_isKindOfClass())
  {
    id v12 = v8;
  }
  else
  {
    if (v8)
    {
      double v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v9, v10, v11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        sub_19DB7E6D8((uint64_t)v5, a1, v13);
      }
    }
    id v12 = 0;
  }

  return v12;
}

id sub_19DABF33C(void *a1, void *a2)
{
  id v3 = a2;
  double v7 = objc_msgSend_mutableCopy(a1, v4, v5, v6);
  if (objc_msgSend_count(v7, v8, v9, v10))
  {
    uint64_t v13 = 0;
    while (1)
    {
      double v14 = objc_msgSend_objectAtIndexedSubscript_(v7, v11, v13, v12);
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v15 = sub_19DABF33C(v14, v3);
        goto LABEL_7;
      }
LABEL_8:

      if (objc_msgSend_count(v7, v19, v20, v21) <= (unint64_t)++v13) {
        goto LABEL_9;
      }
    }
    uint64_t v15 = sub_19DABD6CC(v14, v3);
LABEL_7:
    uint64_t v18 = (void *)v15;
    objc_msgSend_setObject_atIndexedSubscript_(v7, v16, v15, v17, v13);

    goto LABEL_8;
  }
LABEL_9:

  return v7;
}

BOOL IDSQRProtoH3EndToEndChannelUnRegisterE2EChannelUnRegisterReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL IDSQRProtoH3EndToEndChannelRegisterResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoDiagnosticIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if (v17 == 3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_47;
            }
            v27 += 7;
            BOOL v14 = v28++ >= 9;
            if (v14)
            {
              LODWORD(v29) = 0;
              goto LABEL_49;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_49:
          *(_DWORD *)(a1 + 32) = v29;
        }
        else
        {
          if (v17 != 15)
          {
LABEL_40:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0) {
              goto LABEL_43;
            }
            v20 += 7;
            BOOL v14 = v21++ >= 9;
            if (v14)
            {
              uint64_t v22 = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_45:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v22;
        }
      }
      else
      {
        if (v17 == 1)
        {
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
        }
        else
        {
          if (v17 != 2) {
            goto LABEL_40;
          }
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
        }
        uint64_t v26 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id IDSIDAliasHashUUIDString(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  memset(uu, 170, sizeof(uu));
  id v4 = a1;
  char v8 = (const char *)objc_msgSend_UTF8String(v4, v5, v6, v7);
  if (uuid_parse(v8, uu))
  {
    unsigned int v9 = 0;
  }
  else
  {
    *(void *)&v24.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v24.wbuf[6] = v10;
    *(_OWORD *)&v24.wbuf[10] = v10;
    *(_OWORD *)&v24.hash[6] = v10;
    *(_OWORD *)&v24.wbuf[2] = v10;
    *(_OWORD *)v24.count = v10;
    *(_OWORD *)&v24.hash[2] = v10;
    *(_OWORD *)md = v10;
    long long v27 = v10;
    CC_SHA256_Init(&v24);
    CC_SHA256_Update(&v24, uu, 0x10u);
    id v11 = v3;
    int v15 = (const void *)objc_msgSend_bytes(v11, v12, v13, v14);
    CC_LONG v19 = objc_msgSend_length(v11, v16, v17, v18);
    CC_SHA256_Update(&v24, v15, v19);
    CC_SHA256_Final(md, &v24);
    *(void *)&out[29] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uuid_string_t out = v20;
    *(_OWORD *)&out[16] = v20;
    uuid_unparse_upper(md, out);
    unsigned int v9 = objc_msgSend_stringWithUTF8String_(NSString, v21, (uint64_t)out, v22);
  }

  return v9;
}

unint64_t IDSIDAliasHashUInt64(unint64_t a1, void *a2)
{
  data[1] = *MEMORY[0x1E4F143B8];
  data[0] = bswap64(a1);
  *(void *)&v14.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v14.wbuf[6] = v2;
  *(_OWORD *)&v14.wbuf[10] = v2;
  *(_OWORD *)&v14.hash[6] = v2;
  *(_OWORD *)&v14.wbuf[2] = v2;
  *(_OWORD *)v14.count = v2;
  *(_OWORD *)&v14.hash[2] = v2;
  *(_OWORD *)md = v2;
  long long v16 = v2;
  id v3 = a2;
  CC_SHA256_Init(&v14);
  CC_SHA256_Update(&v14, data, 8u);
  id v4 = v3;
  char v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7, *(_OWORD *)v14.count, *(_OWORD *)&v14.hash[2], *(_OWORD *)&v14.hash[6], *(_OWORD *)&v14.wbuf[2], *(_OWORD *)&v14.wbuf[6], *(_OWORD *)&v14.wbuf[10], *(void *)&v14.wbuf[14]);
  CC_LONG v12 = objc_msgSend_length(v4, v9, v10, v11);

  CC_SHA256_Update(&v14, v8, v12);
  CC_SHA256_Final(md, &v14);
  return bswap64(*(unint64_t *)md);
}

id IDSIDAliasFixedSalt()
{
  if (qword_1E944F6A0 != -1) {
    dispatch_once(&qword_1E944F6A0, &unk_1EEFCD6D8);
  }
  id v0 = (void *)qword_1E944F6A8;
  return v0;
}

void sub_19DAC1240(double a1, uint64_t a2, const char *a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = 0x807060504030201;
  uint64_t v3 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], a3, (uint64_t)v5, a1, 8);
  id v4 = (void *)qword_1E944F6A8;
  qword_1E944F6A8 = v3;
}

void sub_19DAC1CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_unfair_lock_t lock)
{
}

void sub_19DAC1DB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DAC1E14(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DAC203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_19DAC2074(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4, double a5)
{
  uint64_t result = objc_msgSend_isEqual_(a2, (const char *)a2, *(void *)(a1 + 32), a5);
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

void sub_19DAC21B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DAC2290(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DAC235C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DAC2370(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  objc_msgSend_first(v5, v7, v8, v9);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = objc_msgSend_second(v5, v10, v11, v12);

  (*(void (**)(uint64_t, id, void *, id))(v4 + 16))(v4, v14, v13, v6);
}

BOOL IDSQRProtoGetMaterialGetMaterialReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DAC2968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_queue(*(void **)(a1 + 32), v7, v8, v9);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_19DAC2A50;
  v15[3] = &unk_1E5974AB0;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void **)(a1 + 40);
  id v16 = v6;
  uint64_t v17 = v11;
  id v18 = v5;
  id v19 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v10, v15);
}

void sub_19DAC2A50(uint64_t *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)(a1 + 4);
  if (a1[4])
  {
    id v6 = objc_opt_class();
    int isItemNotFoundError = objc_msgSend_isItemNotFoundError_(v6, v7, a1[4], v8);
    id v13 = objc_msgSend_accountIdentity(IDSFoundationLog, v10, v11, v12);
    id v14 = v13;
    if (isItemNotFoundError)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "Record not found -- Done", buf, 2u);
      }
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      sub_19DB7E854(v5, v14, v30, v31, v32, v33, v34, v35);
    }

    long long v36 = *(void (**)(void))(a1[7] + 16);
LABEL_15:
    v36();
    return;
  }
  uint64_t v15 = a1[6];
  id v16 = objc_msgSend_accountIdentity(IDSFoundationLog, a2, a3, a4);
  uint64_t v17 = v16;
  if (!v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
      sub_19DB7E810(v17);
    }

    long long v36 = *(void (**)(void))(a1[7] + 16);
    goto LABEL_15;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = a1[6];
    *(_DWORD *)kevent buf = 138543362;
    uint64_t v40 = v18;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_INFO, "Found record {record: %{public}@}", buf, 0xCu);
  }

  id v19 = (void *)a1[5];
  uint64_t v20 = a1[6];
  id v38 = 0;
  uint64_t v23 = objc_msgSend__itemFromRecord_error_(v19, v21, v20, v22, &v38);
  id v24 = v38;
  unsigned int v28 = objc_msgSend_accountIdentity(IDSFoundationLog, v25, v26, v27);
  uint64_t v29 = v28;
  if (v23)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)kevent buf = 138543362;
      uint64_t v40 = (uint64_t)v23;
      _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_INFO, "Constructed item -- Done {item: %{public}@}", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = a1[6];
    *(_DWORD *)kevent buf = 138543618;
    uint64_t v40 = v37;
    __int16 v41 = 2114;
    id v42 = v24;
    _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "Failed to construct item -- Fail {record: %{public}@, itemError: %{public}@}", buf, 0x16u);
  }

  (*(void (**)(void))(a1[7] + 16))();
}

void sub_19DAC2E28(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  double v8 = objc_msgSend_queue(*(void **)(a1 + 32), v5, v6, v7);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_19DAC2EEC;
  v11[3] = &unk_1E5970A78;
  id v9 = *(id *)(a1 + 40);
  id v12 = v4;
  id v13 = v9;
  id v10 = v4;
  dispatch_async(v8, v11);
}

uint64_t sub_19DAC2EEC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DAC31FC(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v9 = objc_msgSend_queue(a1[4], v6, v7, v8);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_19DAC32EC;
  v11[3] = &unk_1E5974AB0;
  id v12 = v5;
  id v13 = a1[5];
  id v15 = a1[7];
  id v14 = a1[6];
  id v10 = v5;
  dispatch_async(v9, v11);
}

uint64_t sub_19DAC32EC(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a1 + 4;
  uint64_t v6 = a1[4];
  uint64_t v7 = objc_msgSend_accountIdentity(IDSFoundationLog, a2, a3, a4);
  double v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_19DB7E8C4((uint64_t)a1, v5, v8);
    }

    id v9 = *(uint64_t (**)(void))(a1[7] + 16);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a1[6];
      int v12 = 138543362;
      uint64_t v13 = v10;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_INFO, "Stored account identity item {item: %{public}@}", (uint8_t *)&v12, 0xCu);
    }

    id v9 = *(uint64_t (**)(void))(a1[7] + 16);
  }
  return v9();
}

void sub_19DAC38C4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t IDSQRProtoH3EndToEndChannelUnRegisterRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoParticipantStatusMapEntryReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            while (1)
            {
              uint64_t v28 = *v3;
              unint64_t v29 = *(void *)(a2 + v28);
              if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x300], 8) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                BOOL v14 = v26++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_39;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          while (1)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_55;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedUInt64Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_43;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_45:
        *(_DWORD *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 24;
        goto LABEL_26;
      case 2u:
        uint64_t v20 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
        objc_storeStrong((id *)(a1 + 16), v20);
        if (PBReaderPlaceMark()
          && (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 32;
LABEL_26:
        uint64_t v21 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x300], 8) = v17;

        goto LABEL_38;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_37:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v24;
        goto LABEL_38;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_38;
    }
  }
}

BOOL sub_19DAC5D20(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == *(unsigned __int8 *)(a2 + 1))
  {
    if (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)) {
        return *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2);
      }
    }
    else if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16))
    {
      return *(unsigned __int16 *)(a1 + 2) == *(unsigned __int16 *)(a2 + 2);
    }
  }
  return 0;
}

uint64_t sub_19DAC5FBC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30)
  {
    int v10 = *(_DWORD *)(a1 + 12);
    int v11 = *(_DWORD *)(a1 + 16);
    int v12 = (*(_DWORD *)(a1 + 8) - v11) ^ __ROR4__(v11, 28);
    int v13 = v11 + v10;
    int v14 = (v10 - v12) ^ __ROR4__(v12, 26);
    int v15 = v12 + v13;
    int v16 = (v13 - v14) ^ __ROR4__(v14, 24);
    int v17 = v14 + v15;
    int v18 = (v15 - v16) ^ __ROR4__(v16, 16);
    int v19 = v16 + v17;
    int v20 = (v17 - v18) ^ __ROR4__(v18, 13);
    int v21 = v18 + v19;
    int v22 = v21 + *(_DWORD *)(a1 + 20);
    int v23 = v21 + *(unsigned __int16 *)(a1 + 2) + v20;
    HIDWORD(v24) = v23;
    LODWORD(v24) = v23;
    int v25 = ((v19 - v20) ^ __ROR4__(v20, 28) ^ v23) - (v24 >> 18);
    HIDWORD(v24) = v25;
    LODWORD(v24) = v25;
    int v26 = (v25 ^ v22) - (v24 >> 21);
    HIDWORD(v24) = v26;
    LODWORD(v24) = v26;
    int v27 = (v26 ^ v23) - (v24 >> 7);
    HIDWORD(v24) = v27;
    LODWORD(v24) = v27;
    int v28 = (v27 ^ v25) - (v24 >> 16);
    HIDWORD(v24) = v28;
    LODWORD(v24) = v28;
    HIDWORD(v24) = (v28 ^ v26) - (v24 >> 28);
    LODWORD(v24) = HIDWORD(v24);
    int v8 = (HIDWORD(v24) ^ v27) - (v24 >> 18);
    int v9 = v8 ^ v28;
    goto LABEL_5;
  }
  if (v1 == 2)
  {
    int v2 = *(unsigned __int16 *)(a1 + 2);
    int v3 = -16383 * v2;
    unsigned int v4 = 33552384 * v2 - ((-16383 * v2) >> 21) + ((-16383 * v2) ^ *(_DWORD *)(a1 + 4));
    HIDWORD(v5) = v4;
    LODWORD(v5) = v4;
    int v6 = (v4 ^ v2) - (v5 >> 7);
    HIDWORD(v5) = v6;
    LODWORD(v5) = v6;
    int v7 = (v6 ^ v3) - (v5 >> 16);
    HIDWORD(v5) = v7;
    LODWORD(v5) = v7;
    HIDWORD(v5) = (v7 ^ v4) - (v5 >> 28);
    LODWORD(v5) = HIDWORD(v5);
    int v8 = (HIDWORD(v5) ^ v6) - (v5 >> 18);
    int v9 = v8 ^ v7;
LABEL_5:
    HIDWORD(v29) = v8;
    LODWORD(v29) = v8;
    return v9 - (v29 >> 8);
  }
  return 0xFFFFFFFFLL;
}

uint64_t IDSAssignPushIdentityToMessage(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1;
  objc_msgSend_setWantsPushSignatures_(v1, v3, 1, v4);
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    Class v5 = NSClassFromString(&cfstr_Apsconnection.isa);
    int v9 = (__SecIdentity *)objc_msgSend_copyIdentity(v5, v6, v7, v8);
    uint64_t v2 = IDSAssignIdentityValuesToMessage(v1, v9);
    if (v9) {
      CFRelease(v9);
    }
  }

  return v2;
}

uint64_t IDSAssignIdentityValuesToMessage(void *a1, __SecIdentity *a2)
{
  id v3 = a1;
  SecKeyRef v7 = IDSCopyPrivateKeyFromIdentity(a2, v4, v5, v6);
  int v12 = IDSCopyCertificateKeyFromIdentity(a2, v8, v9, v10);
  if (v7) {
    objc_msgSend_setPushPrivateKey_(v3, v11, (uint64_t)v7, v13);
  }
  if (v12) {
    objc_msgSend_setPushCertificate_(v3, v11, (uint64_t)v12, v13);
  }
  if (v7)
  {
    CFRelease(v7);
    BOOL v14 = v12 == 0;
  }
  else
  {
    BOOL v14 = 1;
  }
  uint64_t v15 = !v14;

  return v15;
}

SecKeyRef IDSCopyPrivateKeyFromIdentity(__SecIdentity *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  SecKeyRef privateKeyRef = 0;
  if (!a1)
  {
    uint64_t v9 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], a2, a3, a4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      double v10 = "  Missing push identity";
      int v11 = v9;
      uint32_t v12 = 2;
      goto LABEL_7;
    }
LABEL_8:

    return privateKeyRef;
  }
  OSStatus v4 = SecIdentityCopyPrivateKey(a1, &privateKeyRef);
  if (v4)
  {
    OSStatus v8 = v4;
    uint64_t v9 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v5, v6, v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      OSStatus v16 = v8;
      double v10 = "Failed to copy private key: %d";
      int v11 = v9;
      uint32_t v12 = 8;
LABEL_7:
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return privateKeyRef;
}

CFDataRef IDSCopyCertificateKeyFromIdentity(__SecIdentity *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  SecCertificateRef certificateRef = 0;
  if (a1)
  {
    OSStatus v6 = SecIdentityCopyCertificate(a1, &certificateRef);
    if (!v6 && certificateRef)
    {
      CFDataRef v8 = SecCertificateCopyData(certificateRef);
      goto LABEL_11;
    }
    uint64_t v9 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v4, v5, v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      OSStatus v16 = v6;
      double v10 = "Failed to copy certificate: %d";
      int v11 = v9;
      uint32_t v12 = 8;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], a2, a3, a4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      double v10 = "  Missing push identity";
      int v11 = v9;
      uint32_t v12 = 2;
LABEL_9:
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }

  CFDataRef v8 = 0;
LABEL_11:
  if (certificateRef)
  {
    CFRelease(certificateRef);
    SecCertificateRef certificateRef = 0;
  }
  return v8;
}

id sub_19DAC663C(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4);
  uint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);
  if (v9)
  {
    unint64_t v12 = v9;
    unint64_t v13 = 0;
    do
    {
      if (v12 - v13 >= 0x40)
      {
        uint64_t v14 = 64;
        objc_msgSend_substringWithRange_(v1, v10, v13, v11, 64);
      }
      else
      {
        uint64_t v14 = v12 - v13;
        objc_msgSend_substringWithRange_(v1, v10, v13, v11, v12 - v13);
      uint64_t v15 = };
      objc_msgSend_addObject_(v5, v16, (uint64_t)v15, v17);
      v13 += v14;
    }
    while (v13 < v12);
  }

  return v5;
}

uint8_t *sub_19DAC66FC(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_length(v1, v2, v3, v4);
  if ((v5 & 0x8000000000000000) == 0)
  {
    size_t v6 = 2 * v5;
    uint64_t v7 = (uint8_t *)malloc_type_malloc(2 * v5, 0x5C404C1FuLL);
    if (!v7) {
      goto LABEL_7;
    }
    id v8 = v1;
    unint64_t v12 = (const uint8_t *)objc_msgSend_bytes(v8, v9, v10, v11);
    size_t v16 = objc_msgSend_length(v8, v13, v14, v15);
    size_t v17 = compression_encode_buffer(v7, v6, v12, v16, 0, COMPRESSION_ZLIB);
    if (v17)
    {
      objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], v18, (uint64_t)v7, v19, v17, 1);
      uint64_t v7 = (uint8_t *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
    free(v7);
  }
  uint64_t v7 = 0;
LABEL_7:

  return v7;
}

id IDSPEMFormatCertificates(void *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    if (objc_msgSend_count(v1, v5, v6, v7) == 1)
    {
      objc_msgSend_objectAtIndexedSubscript_(v1, v8, 0, v9);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      unint64_t v13 = objc_msgSend_base64EncodedStringWithOptions_(v10, v11, 0, v12);
    }
    else
    {
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v14 = v1;
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v42, v16, v46, 16);
      if (v17)
      {
        uint64_t v20 = v17;
        uint64_t v21 = *(void *)v43;
        do
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v43 != v21) {
              objc_enumerationMutation(v14);
            }
            int v23 = *(void **)(*((void *)&v42 + 1) + 8 * i);
            objc_msgSend_addObject_(v10, v18, @"-----BEGIN CERTIFICATE-----", v19, (void)v42);
            int v26 = objc_msgSend_base64EncodedStringWithOptions_(v23, v24, 0, v25);
            int v27 = sub_19DAC663C(v26);
            objc_msgSend_addObjectsFromArray_(v10, v28, (uint64_t)v27, v29);
            objc_msgSend_addObject_(v10, v30, @"-----END CERTIFICATE-----", v31);
          }
          uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v42, v19, v46, 16);
        }
        while (v20);
      }

      uint64_t v34 = objc_msgSend_componentsJoinedByString_(v10, v32, @"\n", v33);
      uint64_t v37 = objc_msgSend_dataUsingEncoding_(v34, v35, 4, v36);
      id v38 = sub_19DAC66FC(v37);

      unint64_t v13 = objc_msgSend_base64EncodedStringWithOptions_(v38, v39, 0, v40);
    }
  }
  else
  {
    unint64_t v13 = 0;
  }

  return v13;
}

id IDSPEMFormatCertificatesForPushHeader(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    unint64_t v7 = 0;
    id v8 = &stru_1EEFDAD58;
    do
    {
      double v9 = NSString;
      id v10 = objc_msgSend_objectAtIndexedSubscript_(v1, v5, v7, v6);
      unint64_t v13 = objc_msgSend_base64EncodedStringWithOptions_(v10, v11, 0, v12);
      double v16 = objc_msgSend_stringWithFormat_(v9, v14, @"-----BEGIN CERTIFICATE-----\n%@\n-----END CERTIFICATE-----", v15, v13);

      objc_msgSend_stringByAppendingString_(v8, v17, (uint64_t)v16, v18);
      double v19 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend_count(v1, v20, v21, v22) - 1 > v7)
      {
        uint64_t v25 = objc_msgSend_stringByAppendingString_(v19, v23, @"\n\n", v24);

        double v19 = (__CFString *)v25;
      }

      ++v7;
      id v8 = v19;
    }
    while (objc_msgSend_count(v1, v26, v27, v28) > v7);
  }
  else
  {
    double v19 = &stru_1EEFDAD58;
  }
  double v29 = objc_msgSend_dataUsingEncoding_(v19, v5, 4, v6);

  return v29;
}

id IDSParseDERCertificatesFromChain(void *a1)
{
  id v1 = a1;
  uint64_t v5 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4);
  if (!objc_msgSend_length(v1, v6, v7, v8))
  {
    id v27 = v5;
    goto LABEL_11;
  }
  if (objc_msgSend_length(v1, v9, v10, v11))
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      objc_msgSend_subdataWithRange_(v1, v12, v16, v14, v15 - v16 + 1);
      CFDataRef v17 = (const __CFData *)objc_claimAutoreleasedReturnValue();
      SecCertificateRef v18 = SecCertificateCreateWithData(0, v17);
      if (v18)
      {
        CFRelease(v18);
        objc_msgSend_addObject_(v5, v19, (uint64_t)v17, v20);
        uint64_t v16 = v15 + 1;
      }
      ++v15;
    }
    while (v15 < objc_msgSend_length(v1, v21, v22, v23));
  }
  if (!objc_msgSend_length(v1, v12, v13, v14) || objc_msgSend_count(v5, v24, v25, v26))
  {
    id v27 = (id)objc_msgSend_copy(v5, v24, v25, v26);
LABEL_11:
    double v28 = v27;
    goto LABEL_12;
  }
  double v28 = 0;
LABEL_12:

  return v28;
}

BOOL IDSQRProtoH3EndToEndChannelRegisterAckResponseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

id _IDSIDProtocolVersionNumber()
{
  if (os_variant_allows_internal_security_policies() && (uint64_t v0 = IMGetDomainIntForKey(), v0 >= 1))
  {
    uint64_t v3 = objc_msgSend_numberWithInteger_(NSNumber, v1, v0, v2);
  }
  else
  {
    uint64_t v3 = &unk_1EF028BE8;
  }
  return v3;
}

void *_IDSInvitationProtocolVersionNumber()
{
  return &unk_1EF028C00;
}

void *_IDSiMessageProtocolVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSAlloyProtocolVersionNumber()
{
  return &unk_1EF028C18;
}

uint64_t _IDSSessionProtocolVersionNumber(double a1, uint64_t a2, const char *a3)
{
  return objc_msgSend_numberWithInteger_(NSNumber, a3, _IDSSessionProtocolVersionNumber_firstVersionSupporting_guestModeCancel, a1);
}

void *_IDSAllocateProtocolVersionNumber()
{
  return &unk_1EF028C30;
}

void *_IDSQuickRelayProtocolVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSPrivateDeviceDataVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSKeyTransparencyVersionNumber()
{
  return &unk_1EF028C48;
}

void *_IDSKeyTransparencyOptInOutVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSECVersion()
{
  return &unk_1EF028C18;
}

void *_IDSIdentityVersionNumber()
{
  return &unk_1EF028C60;
}

void *_IDSEngramKeyElectorVersion()
{
  return &unk_1EF028C78;
}

void *_IDSActivityMonitorVersionVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSGroupPhotoRefreshVersionNumber()
{
  return &unk_1EF028C18;
}

void *_IDSIdentityGroupCryptoVersionNumber()
{
  return &unk_1EF028C60;
}

void *_IDSSenderKeyMessageVersionNumber()
{
  return &unk_1EF028C18;
}

void sub_19DACA5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
}

void sub_19DACA5F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    uint64_t v10 = objc_msgSend_cloudKit(IDSFoundationLog, v6, v7, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_19DB7ECE4();
    }

    double v14 = objc_msgSend_queue(*(void **)(a1 + 32), v11, v12, v13);
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_19DACA92C;
    v49[3] = &unk_1E5970A78;
    id v51 = *(id *)(a1 + 40);
    id v50 = v8;
    dispatch_async(v14, v49);

    id v15 = v51;
  }
  else
  {
    id v16 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v20 = objc_msgSend_count(v5, v17, v18, v19);
    double v23 = objc_msgSend_initWithCapacity_(v16, v21, v20, v22);
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v24 = v5;
    uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v56, v26, v60, 16);
    if (v27)
    {
      uint64_t v30 = v27;
      uint64_t v31 = *(void *)v57;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v57 != v31) {
            objc_enumerationMutation(v24);
          }
          double v33 = objc_msgSend_objectForKeyedSubscript_(v24, v28, *(void *)(*((void *)&v56 + 1) + 8 * i), v29);
          uint64_t v34 = objc_opt_class();
          id v38 = objc_msgSend__messageFromRecord_(v34, v35, (uint64_t)v33, v36);
          if (v38) {
            objc_msgSend_addObject_(v23, v37, (uint64_t)v38, v39);
          }
        }
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v28, (uint64_t)&v56, v29, v60, 16);
      }
      while (v30);
    }

    long long v43 = objc_msgSend_cloudKit(IDSFoundationLog, v40, v41, v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_INFO, "Fetched hard-coded messages", buf, 2u);
    }

    uint64_t v47 = objc_msgSend_queue(*(void **)(a1 + 32), v44, v45, v46);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DACA90C;
    block[3] = &unk_1E5970A78;
    id v48 = *(id *)(a1 + 40);
    id v53 = v23;
    id v54 = v48;
    id v15 = v23;
    dispatch_async(v47, block);
  }
}

uint64_t sub_19DACA90C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0, 0);
}

uint64_t sub_19DACA92C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

void sub_19DACAB0C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_cloudKit(IDSFoundationLog, v8, v9, v10);
  uint64_t v12 = v11;
  if (v7)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_19DB7ED50();
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)kevent buf = 138477827;
    id v23 = v6;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_INFO, "TransportRecordZone - Create - Done {createdZones: %{private}@}", buf, 0xCu);
  }

  id v16 = objc_msgSend_queue(*(void **)(a1 + 32), v13, v14, v15);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_19DACAC84;
  v19[3] = &unk_1E5970A78;
  id v17 = *(id *)(a1 + 40);
  id v20 = v7;
  id v21 = v17;
  id v18 = v7;
  dispatch_async(v16, v19);
}

uint64_t sub_19DACAC84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DACAE34(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_cloudKit(IDSFoundationLog, v8, v9, v10);
  uint64_t v12 = v11;
  if (v7)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_19DB7EDB8();
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)kevent buf = 138477827;
    id v23 = v6;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_INFO, "TransportRecordZone - Create - Done {deletedZones: %{private}@}", buf, 0xCu);
  }

  id v16 = objc_msgSend_queue(*(void **)(a1 + 32), v13, v14, v15);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_19DACAFAC;
  v19[3] = &unk_1E5970A78;
  id v17 = *(id *)(a1 + 40);
  id v20 = v7;
  id v21 = v17;
  id v18 = v7;
  dispatch_async(v16, v19);
}

uint64_t sub_19DACAFAC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DACB368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state,char a24)
{
}

void sub_19DACB3A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = objc_opt_class();
  objc_msgSend__messageFromRecord_(v4, v5, (uint64_t)v3, v6);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v9 = v10;
  if (v10)
  {
    objc_msgSend_addObject_(*(void **)(a1 + 40), v7, (uint64_t)v10, v8);
    uint64_t v9 = v10;
  }
}

void sub_19DACB424(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a6;
  uint64_t v14 = objc_msgSend_cloudKit(IDSFoundationLog, v11, v12, v13);
  double v15 = v14;
  if (v10)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
      sub_19DB7EE20();
    }

    double v19 = objc_msgSend_queue(a1[4], v16, v17, v18);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DACB708;
    block[3] = &unk_1E5970A78;
    id v52 = a1[6];
    id v51 = v10;
    dispatch_async(v19, block);

    id v20 = v52;
  }
  else
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = NSNumber;
      uint64_t v25 = objc_msgSend_count(a1[5], v21, v22, v23);
      double v28 = objc_msgSend_numberWithUnsignedInteger_(v24, v26, v25, v27);
      *(_DWORD *)kevent buf = 138412290;
      id v54 = v28;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "!setState messages.count=%@", buf, 0xCu);
    }
    unsigned int v32 = objc_msgSend_cloudKit(IDSFoundationLog, v29, v30, v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v35 = objc_msgSend_numberWithBool_(NSNumber, v33, a5, v34);
      *(_DWORD *)kevent buf = 138412290;
      id v54 = v35;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "!setState moreComing=%@", buf, 0xCu);
    }
    double v36 = [IDSCloudKitTransportLogChangeToken alloc];
    double v39 = objc_msgSend_initWithCKToken_(v36, v37, (uint64_t)v9, v38);
    long long v43 = objc_msgSend_queue(a1[4], v40, v41, v42);
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = sub_19DACB728;
    v45[3] = &unk_1E5974BF0;
    id v48 = a1[6];
    id v44 = a1[5];
    char v49 = a5;
    id v46 = v44;
    id v47 = v39;
    id v20 = v39;
    dispatch_async(v43, v45);
  }
}

uint64_t sub_19DACB708(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

uint64_t sub_19DACB728(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 40), 0);
}

void sub_19DACBF7C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id sub_19DACD05C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  id v8 = v6;
  uint64_t v12 = objc_msgSend_bytes(v8, v9, v10, v11) + a3;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_19DACD144;
  v18[3] = &unk_1E5974C40;
  id v19 = v8;
  id v13 = v8;
  id v16 = objc_msgSend_initWithBytesNoCopy_length_deallocator_(v7, v14, v12, v15, a4, v18);

  return v16;
}

id sub_19DACD144()
{
  return self;
}

id sub_19DAD191C(void *a1)
{
  id v1 = sub_19DAD700C(a1);
  double v2 = NSString;
  id v3 = (void *)MEMORY[0x1E4F1C978];
  double v4 = NSHomeDirectory();
  id v7 = objc_msgSend_arrayWithObjects_(v3, v5, (uint64_t)v4, v6, @"/Library/IdentityServices/incomingfiles/", v1, 0);
  uint64_t v10 = objc_msgSend_pathWithComponents_(v2, v8, (uint64_t)v7, v9);

  return v10;
}

id sub_19DAD2ED8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = objc_msgSend_objectForKey_(a2, v6, (uint64_t)v5, v7);
  if (objc_opt_isKindOfClass())
  {
    id v12 = v8;
  }
  else
  {
    if (v8)
    {
      id v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v9, v10, v11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        sub_19DB7F0FC((uint64_t)v5, a1, v13);
      }
    }
    id v12 = 0;
  }

  return v12;
}

void sub_19DAD453C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DAD4434);
  }
  _Unwind_Resume(a1);
}

void sub_19DAD6FB4(uint64_t a1, double a2)
{
}

id sub_19DAD700C(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc(MEMORY[0x1E4F29128]);
  id v5 = objc_msgSend_initWithUUIDString_(v2, v3, (uint64_t)v1, v4);
  double v11 = objc_msgSend_UUIDString(v5, v6, v7, v8);
  if (!v11)
  {
    id v13 = objc_msgSend_lastPathComponent(v1, v9, v10, v12);
    id v16 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v14, @"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", v15);
    id v20 = objc_msgSend_invertedSet(v16, v17, v18, v19);

    double v23 = objc_msgSend_componentsSeparatedByCharactersInSet_(v13, v21, (uint64_t)v20, v22);
    double v11 = objc_msgSend_componentsJoinedByString_(v23, v24, (uint64_t)&stru_1EEFDAD58, v25);
  }
  return v11;
}

id formattedBytes(unint64_t a1, const char *a2, double a3)
{
  if (a1 >> 5 > 0xC34)
  {
    if (a1 > 0x9C3DFF)
    {
      if (a1 >> 22 > 0x18) {
        objc_msgSend_stringWithFormat_(NSString, a2, @"%4llu M", a3, (a1 + 0x80000) >> 20);
      }
      else {
        objc_msgSend_stringWithFormat_(NSString, a2, @"%4.1f M", (double)a1 * 0.000000953674316, (double)a1 * 0.000000953674316);
      }
    }
    else
    {
      objc_msgSend_stringWithFormat_(NSString, a2, @"%4llu K", a3, (a1 + 512) >> 10);
    }
  }
  else
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"%5llu ", a3, a1);
  id v3 = };
  return v3;
}

id formattedSpeed(unint64_t a1, const char *a2, double a3)
{
  if (a1 >> 5 > 0xC34)
  {
    if (a1 > 0x98948B)
    {
      if (a1 > 0x5F5E0FF) {
        objc_msgSend_stringWithFormat_(NSString, a2, @"%4llu M", a3, (a1 + 500000) / 0xF4240);
      }
      else {
        objc_msgSend_stringWithFormat_(NSString, a2, @"%4.1f M", (double)a1 / 1000000.0, (double)a1 / 1000000.0);
      }
    }
    else
    {
      objc_msgSend_stringWithFormat_(NSString, a2, @"%4llu k", a3, (a1 + 500) / 0x3E8uLL);
    }
  }
  else
  {
    objc_msgSend_stringWithFormat_(NSString, a2, @"%5llu ", a3, a1);
  id v3 = };
  return v3;
}

void *sub_19DAD72C4(uint64_t a1, uint64_t a2)
{
  uint64_t result = malloc_type_malloc(a1 + a2 + 40, 0xE977E99BuLL);
  if (result)
  {
    uint64_t v5 = (uint64_t)result + a2 + 40;
    *uint64_t result = v5;
    result[1] = v5 + a1;
    result[2] = v5;
    result[3] = v5;
    result[4] = a2;
  }
  return result;
}

void sub_19DAD7318(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void *sub_19DAD7324(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  id v3 = *(const void **)(a1 + 16);
  if (result < v3)
  {
    size_t v4 = *(void *)(a1 + 24) - (void)v3;
    uint64_t result = memmove(result, v3, v4);
    size_t v5 = *(void *)a1 + v4;
    *(void *)(a1 + 16) = *(void *)a1;
    *(void *)(a1 + 24) = v5;
  }
  return result;
}

uint64_t IDSQRProtoH3MessageReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  size_t v4 = (int *)MEMORY[0x1E4F940E8];
  size_t v5 = (int *)MEMORY[0x1E4F940E0];
  double v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v6) == 0;
  }
  double v8 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v6)) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *v4;
      unint64_t v13 = *(void *)(a2 + v12);
      if (v13 == -1 || v13 >= *(void *)(a2 + *v5)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
      *(void *)(a2 + v12) = v13 + 1;
      v11 |= (unint64_t)(v14 & 0x7F) << v9;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v9 += 7;
      if (v10++ >= 9)
      {
        unint64_t v11 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v6);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v6);
    if (*(unsigned char *)(a2 + *v6)) {
      unint64_t v11 = 0;
    }
LABEL_14:
    uint64_t v17 = v11 & 7;
    if (v16 || v17 == 4) {
      return *(unsigned char *)(a2 + *v6) == 0;
    }
    double v19 = (const char *)(v11 >> 3);
    switch((v11 >> 3))
    {
      case 0u:
        unsigned int v20 = 0;
        do
        {
          uint64_t v21 = *v4;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v5))
          {
            *(unsigned char *)(a2 + *v6) = 1;
            goto LABEL_136;
          }
          unint64_t v23 = v22 + 1;
          int v24 = *(char *)(*(void *)(a2 + *v8) + v22);
          *(void *)(a2 + v21) = v23;
          if ((v24 & 0x80000000) == 0) {
            break;
          }
        }
        while (v20++ <= 8);
        goto LABEL_136;
      case 1u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 1;
        double v26 = objc_alloc_init(IDSQRProtoAllocBindRequest);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindRequestReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 2u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 2;
        double v26 = objc_alloc_init(IDSQRProtoAllocBindResponse);
        objc_storeStrong((id *)(a1 + 16), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindResponseReadFrom(v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 3u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 3;
        double v26 = objc_alloc_init(IDSQRProtoDiagnosticIndication);
        objc_storeStrong((id *)(a1 + 24), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoDiagnosticIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 4u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 4;
        double v26 = objc_alloc_init(IDSQRProtoGoAwayIndication);
        objc_storeStrong((id *)(a1 + 56), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGoAwayIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 5u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 5;
        double v26 = objc_alloc_init(IDSQRProtoInfoRequest);
        objc_storeStrong((id *)(a1 + 64), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoInfoRequestReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 6u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 6;
        double v26 = objc_alloc_init(IDSQRProtoInfoResponse);
        objc_storeStrong((id *)(a1 + 72), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoInfoResponseReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 7u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 7;
        double v26 = objc_alloc_init(IDSQRProtoParticipantUpdateRequest);
        objc_storeStrong((id *)(a1 + 96), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 8u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 8;
        double v26 = objc_alloc_init(IDSQRProtoParticipantUpdateResponse);
        objc_storeStrong((id *)(a1 + 104), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateResponseReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 9u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 9;
        double v26 = objc_alloc_init(IDSQRProtoParticipantUpdateIndication);
        objc_storeStrong((id *)(a1 + 88), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoParticipantUpdateIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xAu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 10;
        double v26 = objc_alloc_init(IDSQRProtoPluginControlRequest);
        objc_storeStrong((id *)(a1 + 120), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPluginControlRequestReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xBu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 11;
        double v26 = objc_alloc_init(IDSQRProtoPluginControlResponse);
        objc_storeStrong((id *)(a1 + 128), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPluginControlResponseReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xCu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 12;
        double v26 = objc_alloc_init(IDSQRProtoPluginControlIndication);
        objc_storeStrong((id *)(a1 + 112), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoPluginControlIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xDu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 13;
        double v26 = objc_alloc_init(IDSQRProtoErrorIndication);
        objc_storeStrong((id *)(a1 + 32), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoErrorIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xEu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 14;
        double v26 = objc_alloc_init(IDSQRProtoReallocateIndication);
        objc_storeStrong((id *)(a1 + 160), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoReallocateIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0xFu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 15;
        double v26 = objc_alloc_init(IDSQRProtoSessionInfoRequest);
        objc_storeStrong((id *)(a1 + 216), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoRequestReadFrom(v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x10u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 16;
        double v26 = objc_alloc_init(IDSQRProtoSessionInfoResponse);
        objc_storeStrong((id *)(a1 + 224), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoResponseReadFrom((char *)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x11u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 17;
        double v26 = objc_alloc_init(IDSQRProtoSessionInfoIndication);
        objc_storeStrong((id *)(a1 + 208), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoSessionInfoIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x12u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 18;
        double v26 = objc_alloc_init(IDSQRProtoStatsRequest);
        objc_storeStrong((id *)(a1 + 232), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoStatsRequestReadFrom((uint64_t)v26, a2)) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x13u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 19;
        double v26 = objc_alloc_init(IDSQRProtoStatsResponse);
        objc_storeStrong((id *)(a1 + 240), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoStatsResponseReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x14u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 20;
        double v26 = objc_alloc_init(IDSQRProtoTestRequest);
        objc_storeStrong((id *)(a1 + 248), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoTestRequestReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x15u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 21;
        double v26 = objc_alloc_init(IDSQRProtoTestResponse);
        objc_storeStrong((id *)(a1 + 256), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoTestResponseReadFrom((uint64_t)v26, a2)) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x16u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 22;
        double v26 = objc_alloc_init(IDSQRProtoUnAllocBindRequest);
        objc_storeStrong((id *)(a1 + 264), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindRequestReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x17u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 23;
        double v26 = objc_alloc_init(IDSQRProtoUnAllocBindResponse);
        objc_storeStrong((id *)(a1 + 272), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoUnAllocBindResponseReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x18u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 24;
        double v26 = objc_alloc_init(IDSQRProtoPutMaterialRequest);
        objc_storeStrong((id *)(a1 + 144), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPutMaterialRequestReadFrom(v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x19u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 25;
        double v26 = objc_alloc_init(IDSQRProtoPutMaterialResponse);
        objc_storeStrong((id *)(a1 + 152), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoPutMaterialResponseReadFrom((uint64_t)v26, a2)) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x1Au:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 26;
        double v26 = objc_alloc_init(IDSQRProtoPutMaterialIndication);
        objc_storeStrong((id *)(a1 + 136), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoPutMaterialIndicationReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x1Bu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 27;
        double v26 = objc_alloc_init(IDSQRProtoGetMaterialRequest);
        objc_storeStrong((id *)(a1 + 40), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGetMaterialRequestReadFrom(v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x1Cu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 28;
        double v26 = objc_alloc_init(IDSQRProtoGetMaterialResponse);
        objc_storeStrong((id *)(a1 + 48), v26);
        if (!PBReaderPlaceMark() || (IDSQRProtoGetMaterialResponseReadFrom(v26, a2) & 1) == 0) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x1Fu:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 29;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterRequest);
        objc_storeStrong((id *)(a1 + 192), v26);
        if (!PBReaderPlaceMark() || !IDSQRProtoH3EndToEndChannelRegisterRequestReadFrom((uint64_t)v26, a2)) {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x20u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 30;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterResponse);
        objc_storeStrong((id *)(a1 + 200), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelRegisterResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x21u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 31;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterIndication);
        objc_storeStrong((id *)(a1 + 184), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelRegisterIndicationReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x22u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 32;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterAckRequest);
        objc_storeStrong((id *)(a1 + 168), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelRegisterAckRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x23u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 33;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterAckResponse);
        objc_storeStrong((id *)(a1 + 176), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelRegisterAckResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x24u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 34;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterRequest);
        objc_storeStrong((id *)(a1 + 288), v26);
        if (!PBReaderPlaceMark()
          || (IDSQRProtoH3EndToEndChannelUnRegisterRequestReadFrom((uint64_t)v26, a2) & 1) == 0)
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x25u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 35;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterResponse);
        objc_storeStrong((id *)(a1 + 296), v26);
        if (!PBReaderPlaceMark()
          || !IDSQRProtoH3EndToEndChannelUnRegisterResponseReadFrom((uint64_t)v26, a2))
        {
          goto LABEL_140;
        }
        goto LABEL_135;
      case 0x26u:
        objc_msgSend_clearOneofValuesForInnerMessage((void *)a1, v19, v17, a3);
        *(unsigned char *)(a1 + 304) |= 1u;
        *(_DWORD *)(a1 + 80) = 36;
        double v26 = objc_alloc_init(IDSQRProtoH3EndToEndChannelUnRegisterIndication);
        objc_storeStrong((id *)(a1 + 280), v26);
        if (PBReaderPlaceMark()
          && (IDSQRProtoH3EndToEndChannelUnRegisterIndicationReadFrom((uint64_t)v26, a2) & 1) != 0)
        {
LABEL_135:
          PBReaderRecallMark();

LABEL_136:
          if (*(void *)(a2 + *v4) >= *(void *)(a2 + *v5)) {
            return *(unsigned char *)(a2 + *v6) == 0;
          }
          continue;
        }
LABEL_140:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_136;
    }
  }
}

void sub_19DADDF64(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unint64_t v11 = objc_msgSend_serverBag(MEMORY[0x1E4F6C3B8], v8, v9, v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 138412546;
    id v22 = v6;
    __int16 v23 = 2112;
    id v24 = v7;
    _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "Finished posting SOS {response: %@, postError: %@}", (uint8_t *)&v21, 0x16u);
  }

  double v15 = objc_msgSend_rateLimiter(*(void **)(a1 + 32), v12, v13, v14);
  objc_msgSend_noteItem_(v15, v16, @"SOSRateLimitItem", v17);

  objc_msgSend_finishTasksAndInvalidate(*(void **)(a1 + 40), v18, v19, v20);
}

BOOL IDSQRProtoUnAllocBindUnAllocBindReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  size_t v4 = (int *)MEMORY[0x1E4F940E0];
  size_t v5 = (int *)MEMORY[0x1E4F940C8];
  id v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t IDSQRCHDataList_Create(uint64_t result, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v3 = (int **)result;
    size_t v4 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v4)
    {
      size_t v5 = v4;
      id v6 = malloc_type_malloc(112 * a2, 0x1010040F86BD4C7uLL);
      v5[1] = v6;
      if (v6)
      {
        *(_DWORD *)size_t v5 = a2;
        *((_DWORD *)v5 + 1) = 0;
        *id v3 = (int *)v5;
        int v7 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          char v8 = *v3;
          int v9 = **v3;
          *(_DWORD *)kevent buf = 134218240;
          char v13 = v8;
          __int16 v14 = 1024;
          int v15 = v9;
          _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: created new list %p, size %d.", buf, 0x12u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLogTransport();
          if (result)
          {
            _IDSLogTransport(@"GL", @"IDS", @"IDSQRCHDataList: created new list %p, size %d.");
            uint64_t result = _IDSShouldLog();
            if (result) {
              return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRCHDataList: created new list %p, size %d.");
            }
          }
        }
      }
      else
      {
        uint64_t v11 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: failed to initialize.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRCHDataList: failed to initialize.");
          }
        }
      }
    }
    else
    {
      uint64_t v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList_Init failed.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"IDSQRCHDataList_Init failed.");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRCHDataList_Init failed.");
          }
        }
      }
    }
  }
  return result;
}

void IDSQRCHDataList_Destroy(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a1 = 0;
    id v2 = (void *)a1[1];
    if (v2) {
      free(v2);
    }
    id v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      size_t v5 = a1;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "IDSQRCHDataList: list %p destroyed.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"IDSQRCHDataList: list %p destroyed.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRCHDataList: list %p destroyed.");
      }
    }
    free(a1);
  }
}

uint64_t IDSQRCHDataList_Count(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t IDSQRCHDataList_ItemAtIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 4) <= a2) {
      return 0;
    }
    else {
      return *(void *)(result + 8) + 112 * a2;
    }
  }
  return result;
}

void *sub_19DADF75C(uint64_t a1, char a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a1 + 536);
  unsigned int v5 = v4 >> 10;
  int v6 = (v4 << 6) & 0x10000;
  if (*(unsigned char *)(a1 + 535)) {
    int v6 = ((v5 & 1) << 16) | 0x200000;
  }
  if (*(unsigned char *)(a1 + 533)) {
    v6 |= 0x40000u;
  }
  if (*(unsigned char *)(a1 + 534)) {
    unsigned int v7 = v6 | 0x80000;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 <= 0x8000) {
    int v8 = v7;
  }
  else {
    int v8 = v7 | 0x8000;
  }
  if (v7 <= 0x8000) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 4;
  }
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = &buf[-v10];
  memset(&buf[-v10], 170, v12);
  int v15 = &v11[v9];
  uint64_t v16 = *(unsigned int *)(a1 + 460);
  if ((v16 - 1) > 0xB)
  {
    if (v16)
    {
      double v20 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(_DWORD *)(a1 + 460);
        *(_DWORD *)kevent buf = 67109120;
        int v35 = v21;
        _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "_prependExtendedChannelHeader failed due to invalid streamID count (%d).", buf, 8u);
      }

      uint64_t result = (void *)os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = (void *)_IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"_prependExtendedChannelHeader failed due to invalid streamID count (%d).");
          uint64_t result = (void *)_IDSShouldLog();
          if (result) {
            return (void *)_IDSLogV(0, @"IDSFoundation", @"GL", @"_prependExtendedChannelHeader failed due to invalid streamID count (%d).");
          }
        }
      }
      return result;
    }
  }
  else
  {
    *(_WORD *)int v15 = bswap32(*(unsigned __int16 *)(a1 + 464)) >> 16;
    if (v16 < 2)
    {
      v8 |= 1u;
      v15 += 2;
    }
    else
    {
      v15[2] = v16 - 1;
      v15 += 3;
      double v17 = (unsigned __int16 *)(a1 + 466);
      uint64_t v18 = v16 - 1;
      do
      {
        unsigned int v19 = *v17++;
        *(_WORD *)int v15 = bswap32(v19) >> 16;
        v15 += 2;
        --v18;
      }
      while (v18);
      v8 |= 3u;
    }
  }
  unint64_t v23 = *(void *)(a1 + 488);
  if (v23)
  {
    v8 |= 4u;
    *(void *)int v15 = bswap64(v23);
    v15 += 8;
  }
  if (*(unsigned char *)(a1 + 496))
  {
    v8 |= 8u;
    *v15++ = *(unsigned char *)(a1 + 496);
  }
  if (*(_WORD *)(a1 + 498))
  {
    v8 |= 0x10u;
    *(_WORD *)int v15 = __rev16(*(unsigned __int16 *)(a1 + 498));
    v15 += 2;
  }
  if (*(unsigned char *)(a1 + 500))
  {
    v8 |= 0x20u;
    *v15++ = *(unsigned char *)(a1 + 500);
  }
  if (*(unsigned char *)(a1 + 501)) {
    unsigned int v24 = v8 | 0x40;
  }
  else {
    unsigned int v24 = v8;
  }
  if ((a2 & 1) == 0)
  {
    v24 |= 0x80u;
    *(_WORD *)int v15 = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    v15 += 2;
  }
  if (*(unsigned char *)(a1 + 502)) {
    v24 |= 0x100u;
  }
  if ((*(unsigned char *)(a1 + 536) & 0x40) != 0)
  {
    v24 |= 0x200u;
    *(_WORD *)int v15 = bswap32(*(unsigned __int16 *)(a1 + 504)) >> 16;
    v15 += 2;
  }
  if (*(unsigned char *)(a1 + 516)) {
    v24 |= 0x800u;
  }
  int v25 = *(_DWORD *)(a1 + 520);
  if ((v25 - 1) <= 3)
  {
    *(_WORD *)int v15 = bswap32(*(unsigned __int16 *)(a1 + 524)) >> 16;
    LOWORD(v26) = (_WORD)v15 + 2;
    int v27 = *(_DWORD *)(a1 + 520);
    if (v27 < 2)
    {
      v24 |= 0x2000u;
    }
    else
    {
      double v26 = v15 + 3;
      v15[2] = v27 - 1;
      v24 |= 0x6000u;
      if (*(int *)(a1 + 520) >= 2)
      {
        uint64_t v28 = 263;
        do
        {
          *v26++ = bswap32(*(unsigned __int16 *)(a1 + 2 * v28)) >> 16;
          uint64_t v29 = v28 - 261;
          ++v28;
        }
        while (v29 < *(int *)(a1 + 520));
      }
    }
    LOWORD(v15) = (_WORD)v26;
    goto LABEL_61;
  }
  if (!v25)
  {
LABEL_61:
    unsigned int v32 = bswap32(v24);
    *(_WORD *)uint64_t v11 = HIWORD(v32);
    if (v7 > 0x8000) {
      *((_WORD *)v11 + 1) = v32;
    }
    unsigned __int16 v33 = (_WORD)v15 - (_WORD)v11;
    IDSLinkPacketBufferAddBufferStart((void *)a1, (const char *)-(unsigned __int16)((_WORD)v15 - (_WORD)v11), v13, v14);
    return memcpy(*(void **)a1, v11, v33);
  }
  uint64_t v30 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = *(_DWORD *)(a1 + 520);
    *(_DWORD *)kevent buf = 67109120;
    int v35 = v31;
    _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "_prependExtendedChannelHeader failed due to invalid relay linkID count (%d).", buf, 8u);
  }

  uint64_t result = (void *)os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = (void *)_IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"GL", @"IDS", @"_prependExtendedChannelHeader failed due to invalid relay linkID count (%d).");
      uint64_t result = (void *)_IDSShouldLog();
      if (result) {
        return (void *)_IDSLogV(0, @"IDSFoundation", @"GL", @"_prependExtendedChannelHeader failed due to invalid relay linkID count (%d).");
      }
    }
  }
  return result;
}

void StunUtilGetMappedParticipantID(uint64_t a1, int a2, void *a3, int a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v8 = a1 + 96 * a2;
  uint64_t v9 = *(void *)(v8 + 488);
  int v15 = objc_msgSend_participantIDMap(v7, v10, v11, v12);
  if (v15)
  {
    unsigned int v19 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v13, v9, v16);
    if (v19)
    {
      objc_msgSend_participantIDMap(v7, v17, v18, v20);
      CFDictionaryRef v21 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      unsigned int v24 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, v9, v23);
      Value = (void *)CFDictionaryGetValue(v21, v24);
      uint64_t v29 = objc_msgSend_unsignedLongLongValue(Value, v26, v27, v28);
    }
    else
    {
      uint64_t v29 = objc_msgSend_unsignedLongLongValue(0, v17, v18, v20);
    }
  }
  else
  {
    uint64_t v29 = objc_msgSend_unsignedLongLongValue(0, v13, v14, v16);
  }

  if (v29) {
    goto LABEL_8;
  }
  if (a4)
  {
    uint64_t v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(char *)(a1 + 1216);
      *(_DWORD *)kevent buf = 134218496;
      uint64_t v36 = v9;
      __int16 v37 = 2048;
      uint64_t v38 = 0;
      __int16 v39 = 1024;
      int v40 = v31;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "Incoming: pid -> epid (%llu->%llu) on link %d.", buf, 0x1Cu);
    }

    if (!os_log_shim_legacy_logging_enabled()) {
      goto LABEL_8;
    }
    if (!_IDSShouldLogTransport()) {
      goto LABEL_8;
    }
    _IDSLogTransport(@"GL", @"IDS", @"Incoming: pid -> epid (%llu->%llu) on link %d.");
    if ((_IDSShouldLog() & 1) == 0) {
      goto LABEL_8;
    }
    unsigned int v32 = @"Incoming: pid -> epid (%llu->%llu) on link %d.";
LABEL_22:
    _IDSLogV(0, @"IDSFoundation", @"GL", v32);
    goto LABEL_8;
  }
  unsigned __int16 v33 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = *(char *)(a1 + 1216);
    *(_DWORD *)kevent buf = 134218496;
    uint64_t v36 = v9;
    __int16 v37 = 2048;
    uint64_t v38 = 0;
    __int16 v39 = 1024;
    int v40 = v34;
    _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "Outgoing: pid -> epid (%llu->%llu) on link %d.", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"Outgoing: pid -> epid (%llu->%llu) on link %d.");
      if (_IDSShouldLog())
      {
        unsigned int v32 = @"Outgoing: pid -> epid (%llu->%llu) on link %d.";
        goto LABEL_22;
      }
    }
  }
LABEL_8:
  *(void *)(v8 + 48_Block_object_dispose(&STACK[0x300], 8) = v29;
}

BOOL StunUtilPrepareOutgoingChannelData(__int16 a1, void **a2, uint64_t a3, uint64_t a4, double a5)
{
  int v5 = a3;
  if ((int)a3 <= 0)
  {
    uint64_t v18 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v20 = 0;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "StunUtilPrepareOutgoingChannelData failed due to invalid parameter.", v20, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilPrepareOutgoingChannelData failed due to invalid parameter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilPrepareOutgoingChannelData failed due to invalid parameter.");
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    unsigned int v10 = 0;
    int v11 = a1 & 0xF0;
    uint64_t v12 = 8 * (a3 - 1);
    uint64_t v13 = 8 * a3;
    do
    {
      uint64_t v14 = (uint64_t)a2[v9 / 8];
      *(unsigned char *)(v14 + 45) = 0;
      if (v11 == 96)
      {
        sub_19DADF75C(v14, v12 == v9);
        uint64_t v14 = (uint64_t)a2[v9 / 8];
      }
      v10 += *(unsigned __int16 *)(v14 + 16);
      v9 += 8;
    }
    while (v13 != v9);
    uint64_t v15 = (uint64_t)*a2;
    IDSLinkPacketBufferAddBufferStart(*a2, (const char *)0xFFFFFFFCLL, a3, a5);
    **(_WORD **)uint64_t v15 = a1;
    *(_WORD *)(*(void *)v15 + 2) = bswap32(v10) >> 16;
    if ((unint64_t)(a4 - 3) < 2 && (v10 & 3) != 0)
    {
      double v16 = a2[v5 - 1];
      size_t v17 = 4 - (v10 & 3);
      memset((void *)(*v16 + v16[2]), 20, v17);
      v16[2] += v17;
    }
  }
  return v5 > 0;
}

uint64_t sub_19DAE0124(unsigned __int16 *a1, uint64_t a2, __int16 a3, _WORD *a4)
{
  if (a2 - (uint64_t)a1 <= 1)
  {
    unsigned int v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: packet is too short for stats-id.", buf, 2u);
    }

    if (!os_log_shim_legacy_logging_enabled()) {
      return 0xFFFFFFFFLL;
    }
    if (!_IDSShouldLogTransport()) {
      return 0xFFFFFFFFLL;
    }
    _IDSLogTransport(@"GL", @"IDS", @"_StunUtilProcessIncomingStats: packet is too short for stats-id.");
    if (!_IDSShouldLog()) {
      return 0xFFFFFFFFLL;
    }
    int v5 = @"_StunUtilProcessIncomingStats: packet is too short for stats-id.";
    goto LABEL_22;
  }
  a4[28] = bswap32(*a1) >> 16;
  if ((a3 & 0x400) == 0)
  {
    int v6 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: missing stats-payload.", v9, 2u);
    }

    if (!os_log_shim_legacy_logging_enabled()) {
      return 0xFFFFFFFFLL;
    }
    if (!_IDSShouldLogTransport()) {
      return 0xFFFFFFFFLL;
    }
    _IDSLogTransport(@"GL", @"IDS", @"_StunUtilProcessIncomingStats: missing stats-payload.");
    if (!_IDSShouldLog()) {
      return 0xFFFFFFFFLL;
    }
    int v5 = @"_StunUtilProcessIncomingStats: missing stats-payload.";
    goto LABEL_22;
  }
  if ((unint64_t)(a2 - (void)(a1 + 1)) > 9)
  {
    a4[29] = bswap32(a1[1]) >> 16;
    a4[30] = bswap32(a1[2]) >> 16;
    a4[31] = bswap32(a1[3]) >> 16;
    a4[32] = bswap32(a1[4]) >> 16;
    a4[33] = bswap32(a1[5]) >> 16;
    return 12;
  }
  id v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v10 = 0;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "_StunUtilProcessIncomingStats: packet is too short for stats-payload.", v10, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"_StunUtilProcessIncomingStats: packet is too short for stats-payload.");
      if (_IDSShouldLog())
      {
        int v5 = @"_StunUtilProcessIncomingStats: packet is too short for stats-payload.";
LABEL_22:
        _IDSLogV(0, @"IDSFoundation", @"GL", v5);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t StunUtilProcessIncomingChannelData(unsigned __int16 **a1, char a2, uint64_t a3, double a4)
{
  unsigned int v6 = bswap32((*a1)[1]) >> 16;
  IDSLinkPacketBufferAddBufferStart(a1, (const char *)4, a3, a4);
  return StunUtilProcessIncomingChannelDataWithoutChannelHeader(a1, a2, v6);
}

uint64_t StunUtilProcessIncomingChannelDataWithoutChannelHeader(unsigned __int16 **a1, char a2, unsigned int a3)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t)a1[2];
  uint64_t v6 = v5;
  if (v5 != a3)
  {
    uint64_t v6 = a3;
    if (v5 <= a3 || ((a3 + 4) & 0x1FFFC) != v5)
    {
      unint64_t v9 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = a1[2];
        *(_DWORD *)kevent buf = 67109376;
        *(_DWORD *)uint64_t v81 = a3;
        *(_WORD *)&v81[4] = 2048;
        *(void *)&v81[6] = v10;
        _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: length mismatch (%u != %zd).", buf, 0x12u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: length mismatch (%u != %zd).");
          uint64_t result = _IDSShouldLog();
          if (result)
          {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: length mismatch (%u != %zd).");
            return 0;
          }
        }
      }
      return result;
    }
    uint64_t v12 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = a1[2];
      *(_DWORD *)kevent buf = 134218240;
      *(void *)uint64_t v81 = v13;
      *(_WORD *)&v81[8] = 1024;
      *(_DWORD *)&v81[10] = a3;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEBUG, "remove padding, length (%zd->%u).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(1, @"IDSFoundation", @"GL", @"remove padding, length (%zd->%u).");
    }
    a1[2] = (unsigned __int16 *)v6;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v55 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      long long v56 = a1[2];
      *(_DWORD *)kevent buf = 134217984;
      *(void *)uint64_t v81 = v56;
      _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEBUG, "processed regular channel data %zdB.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(1, @"IDSFoundation", @"GL", @"processed regular channel data %zdB.");
    }
    return 1;
  }
  bzero(a1 + 56, 0x300uLL);
  if (v6 < 1) {
    return 1;
  }
  uint64_t v15 = 0;
  double v16 = *a1;
  unint64_t v17 = (unint64_t)*a1 + v6;
  uint64_t v18 = (_WORD *)a1 + 233;
  double v79 = (_WORD *)a1 + 263;
  uint64_t v19 = 67109120;
  while (1)
  {
    if ((uint64_t)(v17 - (void)v16) <= 1)
    {
      long long v57 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (!result) {
        return result;
      }
      uint64_t result = _IDSShouldLogTransport();
      if (!result) {
        return result;
      }
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.");
      uint64_t result = _IDSShouldLog();
      if (!result) {
        return result;
      }
      goto LABEL_116;
    }
    if (v15 == 8)
    {
      long long v58 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109376;
        *(_DWORD *)uint64_t v81 = 8;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = 8;
        _os_log_impl(&dword_19D9BE000, v58, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d", buf, 0xEu);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d");
          uint64_t result = _IDSShouldLog();
          if (result)
          {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packetCounter = %d is greater than kLinkPacketBufferMaxCompoundSize: %d");
            return 0;
          }
        }
      }
      return result;
    }
    double v20 = &a1[12 * v15];
    *((_DWORD *)v20 + 134) = 0;
    CFDictionaryRef v21 = v16 + 1;
    unsigned int v22 = bswap32(*v16);
    unsigned int v23 = HIWORD(v22);
    if ((v22 & 0x80000000) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 1)
      {
        uint64_t v78 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v78, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for additional flags.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for additional flags.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for additional flags.");
        return 0;
      }
      unsigned int v24 = bswap32(v16[1]);
      v23 |= HIWORD(v24) << 16;
      CFDictionaryRef v21 = v16 + 2;
      if (HIWORD(v24) >= 0x40u)
      {
        unsigned int v25 = v24 >> 22;
        double v26 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109120;
          *(_DWORD *)uint64_t v81 = v25;
          _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: has unknown attribute: %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: has unknown attribute: %d");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: has unknown attribute: %d");
            }
          }
        }
      }
    }
    uint64_t v27 = v20 + 67;
    if (v23)
    {
      if ((uint64_t)(v17 - (void)v21) > 1)
      {
        unsigned int v28 = *v21++;
        *v27 |= 2u;
        uint64_t v29 = &a1[12 * v15];
        *((_WORD *)v29 + 232) = bswap32(v28) >> 16;
        *((_DWORD *)v29 + 115) = 1;
        goto LABEL_36;
      }
      long long v59 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v59, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (!result) {
        return result;
      }
      uint64_t result = _IDSShouldLogTransport();
      if (!result) {
        return result;
      }
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.");
      uint64_t result = _IDSShouldLog();
      if (!result) {
        return result;
      }
LABEL_116:
      _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for channel-data-flag.");
      return 0;
    }
LABEL_36:
    if ((v23 & 2) == 0) {
      goto LABEL_44;
    }
    if ((uint64_t)(v17 - (void)v21) <= 0)
    {
      uint64_t v60 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count.");
          uint64_t result = _IDSShouldLog();
          if (result)
          {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for secondary-stream-id count.");
            return 0;
          }
        }
      }
      return result;
    }
    uint64_t v30 = *(char *)v21;
    int v31 = &a1[12 * v15];
    int v32 = *((_DWORD *)v31 + 115) + v30;
    *((_DWORD *)v31 + 115) = v32;
    if (v30 > 0xB || v32 >= 13) {
      break;
    }
    CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + 1);
    if ((uint64_t)(v17 - (void)v21) < (2 * v30))
    {
      id v64 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        *(_DWORD *)uint64_t v81 = v30;
        _os_log_impl(&dword_19D9BE000, v64, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for %d stream-id.", buf, 8u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (!result) {
        return result;
      }
      uint64_t result = _IDSShouldLogTransport();
      if (!result) {
        return result;
      }
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for %d stream-id.");
      uint64_t result = _IDSShouldLog();
      if (!result) {
        return result;
      }
      _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for %d stream-id.");
      return 0;
    }
    if (v30)
    {
      unsigned __int16 v33 = v18;
      do
      {
        unsigned int v34 = *v21++;
        *v33++ = bswap32(v34) >> 16;
        --v30;
      }
      while (v30);
    }
LABEL_44:
    if ((v23 & 4) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 7)
      {
        unint64_t v62 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for participant-id.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for participant-id.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for participant-id.");
        return 0;
      }
      unint64_t v35 = *(void *)v21;
      v21 += 4;
      *v27 |= 1u;
      a1[12 * v15 + 61] = (unsigned __int16 *)bswap64(v35);
      if (!v35)
      {
        uint64_t v36 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: we received participant ID 0!!", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: we received participant ID 0!!");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: we received participant ID 0!!");
            }
          }
        }
      }
    }
    if ((v23 & 8) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 0)
      {
        char v63 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v63, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for channel-priority.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for channel-priority.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for channel-priority.");
        return 0;
      }
      *v27 |= 8u;
      char v37 = *(unsigned char *)v21;
      CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + 1);
      LOBYTE(a1[12 * v15 + 62]) = v37;
    }
    if ((v23 & 0x10) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 1)
      {
        uint64_t v65 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v65, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for probe-groupid.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for probe-groupid.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for probe-groupid.");
        return 0;
      }
      unsigned int v38 = *v21++;
      *v27 |= 0x10u;
      WORD1(a1[12 * v15 + 62]) = bswap32(v38) >> 16;
    }
    if ((v23 & 0x20) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 0)
      {
        uint64_t v66 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v66, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for lsb-version-counter.");
        return 0;
      }
      *v27 |= 0x20u;
      char v39 = *(unsigned char *)v21;
      CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + 1);
      BYTE4(a1[12 * v15 + 62]) = v39;
    }
    if ((v23 & 0x40) != 0)
    {
      *v27 |= 4u;
      BYTE5(a1[12 * v15 + 62]) = 1;
    }
    if ((v23 & 0x80) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 1)
      {
        double v67 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for data length.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for data length.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for data length.");
        return 0;
      }
      unsigned int v40 = *v21++;
      int64_t v41 = bswap32(v40) >> 16;
      double v42 = &a1[12 * v15];
      *((_WORD *)v42 + 22_Block_object_dispose(&STACK[0x300], 8) = v41;
      if ((uint64_t)(v17 - (void)v21) < v41)
      {
        id v69 = (unsigned __int16 *)(v42 + 57);
        double v70 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          int v71 = *v69;
          *(_DWORD *)kevent buf = 67109120;
          *(_DWORD *)uint64_t v81 = v71;
          _os_log_impl(&dword_19D9BE000, v70, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for data (%dB).", buf, 8u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for data (%dB).");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for data (%dB).");
        return 0;
      }
    }
    if ((v23 & 0x100) != 0)
    {
      *v27 |= 0x80u;
      BYTE6(a1[12 * v15 + 62]) = 1;
    }
    long long v43 = v20 + 56;
    if ((v23 & 0x200) != 0)
    {
      int v44 = sub_19DAE0124(v21, v17, v23, (_WORD *)v20 + 224);
      if (v44 <= 0)
      {
        uint64_t v68 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid incoming stats.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: invalid incoming stats.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: invalid incoming stats.");
        return 0;
      }
      *v27 |= 0x40u;
      CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + v44);
    }
    if ((v23 & 0x800) != 0)
    {
      *v27 |= 0x100u;
      BYTE4(a1[12 * v15 + 64]) = 1;
    }
    if ((v23 & 0x2000) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 1)
      {
        double v72 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for primary-relaylinkID-flag.");
        return 0;
      }
      unsigned int v45 = *v21++;
      *v27 |= 0x800u;
      id v46 = &a1[12 * v15];
      *((_WORD *)v46 + 262) = bswap32(v45) >> 16;
      *((_DWORD *)v46 + 130) = 1;
    }
    if ((v23 & 0x4000) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) <= 0)
      {
        double v73 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for secondary-relaylinkID-flag.");
        return 0;
      }
      uint64_t v47 = *(char *)v21;
      id v48 = &a1[12 * v15];
      char v49 = (unsigned int *)(v48 + 65);
      if ((int)v47 > 3 || (unsigned int v50 = *((_DWORD *)v48 + 130) + v47, v50 >= 5))
      {
        uint64_t v74 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v75 = *v49;
          *(_DWORD *)kevent buf = 67109376;
          *(_DWORD *)uint64_t v81 = v75;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v47;
          _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)", buf, 0xEu);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: invalid secondary relayLinkid count (%d:%d)");
        return 0;
      }
      CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + 1);
      if ((uint64_t)(v17 - (void)v21) < 2 * (int)v47)
      {
        uint64_t v77 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109120;
          *(_DWORD *)uint64_t v81 = v47;
          _os_log_impl(&dword_19D9BE000, v77, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID.", buf, 8u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (!result) {
          return result;
        }
        uint64_t result = _IDSShouldLogTransport();
        if (!result) {
          return result;
        }
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID.");
        uint64_t result = _IDSShouldLog();
        if (!result) {
          return result;
        }
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for %d secondary relayLinkID.");
        return 0;
      }
      if ((int)v47 >= 1)
      {
        id v51 = v79;
        do
        {
          unsigned int v52 = *v21++;
          *v51++ = bswap32(v52) >> 16;
          --v47;
        }
        while (v47);
      }
      *char v49 = v50;
      *v27 |= 0x1000u;
    }
    if ((v23 & 0x10000) != 0) {
      *v27 |= 0x400u;
    }
    if ((v23 & 0x20000) != 0)
    {
      if ((uint64_t)(v17 - (void)v21) > 0)
      {
        *v27 |= 0x2000u;
        char v53 = *(unsigned char *)v21;
        CFDictionaryRef v21 = (unsigned __int16 *)((char *)v21 + 1);
        BYTE4(a1[12 * v15 + 66]) = v53;
        goto LABEL_91;
      }
      uint64_t v76 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (!result) {
        return result;
      }
      uint64_t result = _IDSShouldLogTransport();
      if (!result) {
        return result;
      }
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB.");
      uint64_t result = _IDSShouldLog();
      if (!result) {
        return result;
      }
      _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: packet is too short for session state counter LSB.");
      return 0;
    }
LABEL_91:
    if ((v23 & 0x40000) != 0)
    {
      *v27 |= 0x10000u;
      if ((v23 & 0x80000) != 0)
      {
LABEL_102:
        *v27 |= 0x20000u;
        if ((v23 & 0x200000) == 0) {
          goto LABEL_95;
        }
LABEL_94:
        HIBYTE(a1[12 * v15 + 66]) = 1;
        goto LABEL_95;
      }
    }
    else if ((v23 & 0x80000) != 0)
    {
      goto LABEL_102;
    }
    if ((v23 & 0x200000) != 0) {
      goto LABEL_94;
    }
LABEL_95:
    *long long v43 = v21;
    if (!v15)
    {
      id v54 = (const char *)(v21 - *(_DWORD *)a1);
      if ((int)v54 >= 1) {
        IDSLinkPacketBufferAddBufferStart(a1, v54, v14, *(double *)&v19);
      }
    }
    if ((v23 & 0x80) == 0)
    {
      LOWORD(a1[12 * v15 + 57]) = v17 - (_WORD)v21;
      *((_DWORD *)a1 + 111) = v15 + 1;
      return 1;
    }
    double v16 = (unsigned __int16 *)((char *)v21 + LOWORD(a1[12 * v15 + 57]));
    v18 += 48;
    v79 += 48;
    uint64_t result = 1;
    ++v15;
    if ((unint64_t)v16 >= v17) {
      return result;
    }
  }
  uint64_t v61 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    *(_DWORD *)uint64_t v81 = v30;
    _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "StunUtilProcessIncomingChannelData: invalid streamID count (%d).", buf, 8u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessIncomingChannelData: invalid streamID count (%d).");
      uint64_t result = _IDSShouldLog();
      if (result)
      {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessIncomingChannelData: invalid streamID count (%d).");
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_19DAE1CC4(void *a1, _WORD *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (a2 && a3 > 0)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v7 = v5;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v24, v9, v29, 16);
    LODWORD(v14) = a2;
    if (v12)
    {
      unint64_t v15 = (unint64_t)a2 + a3;
      uint64_t v16 = *(void *)v25;
      uint64_t v14 = a2;
      while (2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v14;
        do
        {
          if (*(void *)v25 != v16) {
            objc_enumerationMutation(v7);
          }
          unsigned int v19 = objc_msgSend_unsignedShortValue(*(void **)(*((void *)&v24 + 1) + 8 * v17), v10, v11, v13, (void)v24);
          uint64_t v14 = v18 + 1;
          if ((unint64_t)(v18 + 1) > v15)
          {
            unsigned int v22 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)kevent buf = 0;
              _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "StunUtilWritePublishedStreams failed due to short buffer.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"StunUtilWritePublishedStreams failed due to short buffer.");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilWritePublishedStreams failed due to short buffer.");
                }
              }
            }

            goto LABEL_25;
          }
          *uint64_t v18 = __rev16(v19);
          ++v17;
          ++v18;
        }
        while (v12 != v17);
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v24, v13, v29, 16);
        if (v12) {
          continue;
        }
        break;
      }
    }

    uint64_t v20 = (v14 - a2);
  }
  else
  {
    CFDictionaryRef v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "StunUtilWritePublishedStreams failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilWritePublishedStreams failed due to invalid parameter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilWritePublishedStreams failed due to invalid parameter.");
        }
      }
    }
LABEL_25:
    uint64_t v20 = 0xFFFFFFFFLL;
  }

  return v20;
}

uint64_t sub_19DAE1FA0(void *a1, unsigned char *a2, int a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!a2 || a3 <= 0)
  {
    long long v57 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"writeSubscribedStreams failed due to invalid parameter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"writeSubscribedStreams failed due to invalid parameter.");
        }
      }
    }
    uint64_t v58 = 0xFFFFFFFFLL;
    goto LABEL_47;
  }
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v64 = v5;
  obuint64_t j = v5;
  unint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v70, v8, v76, 16);
  LODWORD(v13) = a2;
  if (!v11)
  {
LABEL_45:

    uint64_t v58 = (v13 - a2);
    goto LABEL_46;
  }
  uint64_t v14 = 0;
  unint64_t v15 = (unint64_t)&a2[a3];
  uint64_t v16 = *(void *)v71;
  uint64_t v17 = *(void *)v71;
  double v13 = a2;
  for (uint64_t i = *(void *)v71; ; v16 = i)
  {
    if (v17 != v16) {
      objc_enumerationMutation(obj);
    }
    uint64_t v18 = *(void **)(*((void *)&v70 + 1) + 8 * v14);
    unsigned int v19 = objc_msgSend_participantID(v18, v9, v10, v12);
    unint64_t v23 = objc_msgSend_unsignedLongLongValue(v19, v20, v21, v22);

    long long v27 = objc_msgSend_streamArray(v18, v24, v25, v26);
    char v31 = objc_msgSend_count(v27, v28, v29, v30);

    int v35 = objc_msgSend_anyParticipant(v18, v32, v33, v34);
    char v39 = objc_msgSend_anyStream(v18, v36, v37, v38);
    int v43 = objc_msgSend_anyStream(v18, v40, v41, v42);
    int v44 = v13 + 1;
    if ((unint64_t)(v13 + 1) > v15) {
      break;
    }
    char v45 = v31 | 0x80;
    if (!v35) {
      char v45 = v31;
    }
    if (v43) {
      v45 |= 0x40u;
    }
    *double v13 = v45;
    if (v35)
    {
      ++v13;
      if (v39) {
        goto LABEL_26;
      }
LABEL_17:
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      id v46 = objc_msgSend_streamArray(v18, v9, v10, 0.0);
      uint64_t v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v47, (uint64_t)&v66, v48, v75, 16);
      if (v51)
      {
        uint64_t v53 = *(void *)v67;
        while (2)
        {
          uint64_t v54 = 0;
          uint64_t v55 = v13;
          do
          {
            if (*(void *)v67 != v53) {
              objc_enumerationMutation(v46);
            }
            unsigned int v56 = objc_msgSend_unsignedShortValue(*(void **)(*((void *)&v66 + 1) + 8 * v54), v49, v50, v52);
            double v13 = v55 + 1;
            if ((unint64_t)(v55 + 1) > v15)
            {
              long long v59 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)kevent buf = 0;
                _os_log_impl(&dword_19D9BE000, v59, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write stream-id due to short buffer.", buf, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"writeSubscribedStreams failed to write stream-id due to short buffer.");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"writeSubscribedStreams failed to write stream-id due to short buffer.");
                  }
                }
              }

              goto LABEL_44;
            }
            *uint64_t v55 = __rev16(v56);
            ++v54;
            ++v55;
          }
          while (v51 != v54);
          uint64_t v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v46, v49, (uint64_t)&v66, v52, v75, 16);
          if (v51) {
            continue;
          }
          break;
        }
      }

      goto LABEL_26;
    }
    v13 += 9;
    if ((unint64_t)v13 > v15)
    {
      unint64_t v62 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write participant-id due to short buffer.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"writeSubscribedStreams failed to write participant-id due to short buffer.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"writeSubscribedStreams failed to write participant-id due to short buffer.");
          }
        }
      }
      goto LABEL_44;
    }
    void *v44 = bswap64(v23);
    if ((v39 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_26:
    if (++v14 >= v11)
    {
      unint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v70, v12, v76, 16);
      if (!v11) {
        goto LABEL_45;
      }
      uint64_t v14 = 0;
    }
    uint64_t v17 = *(void *)v71;
  }
  uint64_t v61 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "writeSubscribedStreams failed to write stream-count due to short buffer.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"writeSubscribedStreams failed to write stream-count due to short buffer.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"writeSubscribedStreams failed to write stream-count due to short buffer.");
      }
    }
  }
LABEL_44:

  uint64_t v58 = 0xFFFFFFFFLL;
LABEL_46:
  uint64_t v6 = v64;
LABEL_47:

  return v58;
}

__CFArray *sub_19DAE2564(unsigned __int8 *a1, const char *a2, double a3)
{
  int v3 = (int)a2;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1 || (a2 & 0x80000000) != 0)
  {
    unsigned int v19 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v26) = v3;
      _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "invalid peer published stream data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"invalid peer published stream data length (%d).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"invalid peer published stream data length (%d).");
        }
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
    if (a2)
    {
      unint64_t v4 = (unint64_t)a1;
      id v5 = 0;
      unint64_t v6 = (unint64_t)&a1[a2];
      while (~v4 + v6 > 7)
      {
        int v7 = *(unsigned __int8 *)v4;
        if ((uint64_t)(v6 - (v4 + 9)) < 2 * *(unsigned __int8 *)v4)
        {
          unint64_t v23 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "incomplete packet for stream-ids.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"incomplete packet for stream-ids.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"incomplete packet for stream-ids.");
              }
            }
          }
          goto LABEL_47;
        }
        unint64_t v8 = *(void *)(v4 + 1);
        double v9 = 0;
        for (v4 += 9; v7; --v7)
        {
          unsigned int v11 = *(unsigned __int16 *)v4;
          v4 += 2;
          unsigned int v10 = v11;
          if (!v9)
          {
            double v9 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
            if (!v9) {
              continue;
            }
          }
          uint64_t v12 = bswap32(v10) >> 16;
          double v13 = objc_msgSend_numberWithUnsignedShort_(NSNumber, a2, v12, a3);

          if (v13)
          {
            uint64_t v14 = objc_msgSend_numberWithUnsignedShort_(NSNumber, a2, v12, a3);
            CFArrayAppendValue(v9, v14);
          }
        }
        unint64_t v15 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, bswap64(v8), a3);
        uint64_t v18 = objc_msgSend_streamWithParticipantID_streamArray_anyParticipant_anyStream_(IDSQRParticipantStreams, v16, (uint64_t)v15, v17, v9, 0, 0);

        if (!v5) {
          id v5 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        if (v5 && v18) {
          CFArrayAppendValue(v5, v18);
        }

        if (v4 >= v6) {
          goto LABEL_28;
        }
      }
      double v22 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "incomplete packet for participant-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"incomplete packet for participant-id.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"incomplete packet for participant-id.");
          }
        }
      }
      uint64_t v20 = 0;
    }
    else
    {
      id v5 = 0;
LABEL_28:
      uint64_t v21 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        double v26 = v5;
        _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "processed peer-pub-stream: %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"processed peer-pub-stream: %@.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"processed peer-pub-stream: %@.");
          }
        }
      }
LABEL_47:
      id v5 = v5;
      uint64_t v20 = v5;
    }
  }
  return v20;
}

__CFArray *sub_19DAE2A74(unsigned __int16 *a1, const char *a2, double a3)
{
  int v3 = (int)a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1 || (a2 & 0x80000001) != 0)
  {
    uint64_t v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v16) = v3;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "invalid peer subscribed stream data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"invalid peer subscribed stream data length (%d).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"invalid peer subscribed stream data length (%d).");
        }
      }
    }
    unint64_t v6 = 0;
  }
  else
  {
    int v4 = (unsigned __int16)(a2 >> 1);
    if ((unsigned __int16)(a2 >> 1))
    {
      id v5 = a1;
      unint64_t v6 = 0;
      do
      {
        unsigned int v8 = *v5++;
        unsigned int v7 = v8;
        if (v6 || (unint64_t v6 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
        {
          uint64_t v9 = bswap32(v7) >> 16;
          unsigned int v10 = objc_msgSend_numberWithUnsignedShort_(NSNumber, a2, v9, a3);

          if (v10)
          {
            unsigned int v11 = objc_msgSend_numberWithUnsignedShort_(NSNumber, a2, v9, a3);
            CFArrayAppendValue(v6, v11);
          }
        }
        --v4;
      }
      while (v4);
    }
    else
    {
      unint64_t v6 = 0;
    }
    double v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v16 = v6;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "processed peer-sub-stream: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"processed peer-sub-stream: %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"processed peer-sub-stream: %@.");
        }
      }
    }
  }
  return v6;
}

__CFArray *StunUtilProcessParticipants(void *a1, uint64_t a2, char a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!objc_msgSend_count(v5, v6, v7, v8))
  {
    if ((a3 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v9 = v5;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v31, v11, v35, 16);
  if (!v12)
  {

    if ((a3 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v17 = 0;
    goto LABEL_22;
  }
  uint64_t v16 = v12;
  uint64_t v30 = a2;
  uint64_t v17 = 0;
  uint64_t v18 = *(void *)v32;
  do
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      if (*(void *)v32 != v18) {
        objc_enumerationMutation(v9);
      }
      uint64_t v20 = *(void **)(*((void *)&v31 + 1) + 8 * i);
      if (!v17)
      {
        uint64_t v17 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (!v17) {
          continue;
        }
      }
      uint64_t v21 = objc_msgSend_participantID(v20, v13, v14, v15);

      if (v21)
      {
        double v22 = objc_msgSend_participantID(v20, v13, v14, v15);
        CFArrayAppendValue(v17, v22);
      }
    }
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v13, (uint64_t)&v31, v15, v35, 16);
  }
  while (v16);

  a2 = v30;
  if ((a3 & 1) == 0)
  {
    if (v17)
    {
LABEL_20:
      uint64_t v25 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v23, a2, v24);

      if (v25)
      {
        unsigned int v28 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v26, a2, v27);
        CFArrayAppendValue(v17, v28);
      }
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v17 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (!v17) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
LABEL_22:

  return v17;
}

__CFDictionary *StunUtilProcessStreamInfo(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  memset(__b, 170, sizeof(__b));
  unsigned int v28 = -1431655766;
  if (v5 && (bzero(buf, 0x5D0uLL), (objc_msgSend_getAttribute_attribute_(v5, v6, 65531, v7, buf) & 1) != 0))
  {
    uint64_t v8 = v32;
    if (StunUtilHasValidBinaryDataAttr(v5, 60933, __b, (int *)&v28))
    {
      unsigned int v10 = sub_19DAE2A74(__b, (const char *)v28, v9);
      double v11 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        unsigned int v31 = v28;
        _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "receive peer-sub-stream, length: %dB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v27 = v28;
          _IDSLogTransport(@"GL", @"IDS", @"receive peer-sub-stream, length: %dB.");
          if (_IDSShouldLog())
          {
            uint64_t v27 = v28;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive peer-sub-stream, length: %dB.");
          }
        }
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    if (StunUtilHasValidBinaryDataAttr(v5, 60932, __b, (int *)&v28))
    {
      double v15 = sub_19DAE2564((unsigned __int8 *)__b, (const char *)v28, v14);
      uint64_t v16 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        unsigned int v31 = v28;
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "receive peer-pub-stream, length: %dB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v27 = v28;
          _IDSLogTransport(@"GL", @"IDS", @"receive peer-pub-stream, length: %dB.");
          if (_IDSShouldLog())
          {
            uint64_t v27 = v28;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive peer-pub-stream, length: %dB.");
          }
        }
      }
    }
    else
    {
      double v15 = 0;
    }
    double v13 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    unsigned int v19 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v17, v8, v18);
    if (v19) {
      CFDictionarySetValue(v13, @"stream-info-generation-counter", v19);
    }

    if (v10) {
      CFDictionarySetValue(v13, @"stream-info-peer-subscribed-streams", v10);
    }
    if (v15) {
      CFDictionarySetValue(v13, @"stream-info-peer-published-streams", v15);
    }
    double v22 = objc_msgSend_numberWithChar_(NSNumber, v20, a2, v21, v27);
    if (v22) {
      CFDictionarySetValue(v13, @"gl-option-linkid", v22);
    }

    if ((int)a3 >= 1)
    {
      uint64_t v25 = objc_msgSend_numberWithChar_(NSNumber, v23, a3, v24);
      if (v25) {
        CFDictionarySetValue(v13, @"gl-option-sessioninfo-link-id-to-query", v25);
      }
    }
  }
  else
  {
    uint64_t v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "process streamInfo failed due to invalid generation-counter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"process streamInfo failed due to invalid generation-counter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"process streamInfo failed due to invalid generation-counter.");
        }
      }
    }
    double v13 = 0;
  }

  return v13;
}

uint64_t StunUtilHasValidUInt32Attr(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    uint64_t result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if (result) {
        *a3 = v9;
      }
    }
  }
  return result;
}

uint64_t StunUtilHasValidBinaryDataAttr(void *a1, uint64_t a2, void *a3, int *a4)
{
  *(void *)&v15[1476] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  bzero(v13, 0x5D0uLL);
  uint64_t Attribute_attribute = objc_msgSend_getAttribute_attribute_(a1, v8, a2, v9, v13);
  if (Attribute_attribute)
  {
    if (a3)
    {
      if (a4)
      {
        int v11 = v14;
        if (v14 <= 1472)
        {
          memcpy(a3, v15, v14);
          *a4 = v11;
        }
      }
    }
  }
  return Attribute_attribute;
}

__CFArray *sub_19DAE355C(unint64_t *a1, const char *a2, double a3)
{
  int v3 = (int)a2;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1 || (a2 & 0x80000000) != 0 || (unint64_t v4 = a2, (a2 & 7) != 0))
  {
    id v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v29) = v3;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "invalid participantID data length (%d).", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"invalid participantID data length (%d).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"invalid participantID data length (%d).");
        }
      }
    }
    unint64_t v6 = 0;
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = a1;
      double v9 = 0;
      unint64_t v10 = (unint64_t)a1 + a2;
      while (v4 > 7)
      {
        unint64_t v12 = *v8++;
        unint64_t v11 = v12;
        if (v9 || (double v9 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
        {
          uint64_t v13 = bswap64(v11);
          int v14 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, v13, a3);

          if (v14)
          {
            double v15 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, v13, a3);
            CFArrayAppendValue(v9, v15);
          }
        }
        v4 -= 8;
        if ((unint64_t)v8 >= v10) {
          goto LABEL_24;
        }
      }
      double v26 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantIDs: incomplete packet for participantID.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessParticipantIDs: incomplete packet for participantID.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessParticipantIDs: incomplete packet for participantID.");
          }
        }
      }
      unint64_t v6 = 0;
    }
    else
    {
      double v9 = 0;
LABEL_24:
      uint64_t v16 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 134218242;
        uint64_t v29 = objc_msgSend_count(v9, v17, v18, v19);
        __int16 v30 = 2112;
        unsigned int v31 = v9;
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantIDs: received %lu participants: %@.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v27 = objc_msgSend_count(v9, v20, v21, v22);
          _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessParticipantIDs: received %lu participants: %@.");
          if (_IDSShouldLog())
          {
            objc_msgSend_count(v9, v23, v24, v25, v27, v9);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessParticipantIDs: received %lu participants: %@.");
          }
        }
      }
      double v9 = v9;
      unint64_t v6 = v9;
    }
  }
  return v6;
}

id sub_19DAE3938(void *a1, uint64_t a2)
{
  __b[184] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  memset(__b, 170, 0x5C0uLL);
  unsigned int v8 = -1431655766;
  if (StunUtilHasValidBinaryDataAttr(v3, a2, __b, (int *)&v8))
  {
    id v5 = sub_19DAE355C(__b, (const char *)v8, v4);
    unint64_t v6 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134218242;
      uint64_t v10 = a2;
      __int16 v11 = 2112;
      unint64_t v12 = v5;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessActiveOrLightweightParticipants: type: 0x%lx, %@");
        }
      }
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id StunUtilProcessActiveParticipants(void *a1)
{
  return sub_19DAE3938(a1, 60928);
}

id StunUtilProcessLightweightParticipants(void *a1)
{
  return sub_19DAE3938(a1, 60936);
}

__CFDictionary *StunUtilProcessParticipantUpdate(void *a1, int a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  memset(__b, 170, sizeof(__b));
  unsigned int v38 = -1431655766;
  double v7 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (v5 && (bzero(buf, 0x5D0uLL), objc_msgSend_getAttribute_attribute_(v5, v9, 65489, v10, buf)))
  {
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v6, v42[0], v8);
  }
  else
  {
    if (a2 == 401 || !a2)
    {
      __int16 v11 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid session state counter.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"process participantUpdate failed due to invalid session state counter.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"process participantUpdate failed due to invalid session state counter.");
          }
        }
      }
      goto LABEL_50;
    }
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v6, 0, v8);
  unint64_t v12 = };
  if (v12) {
    CFDictionarySetValue(v7, @"ids-stun-attribute-session-state-counter", v12);
  }

  if (v5)
  {
    bzero(buf, 0x5D0uLL);
    int Attribute_attribute = objc_msgSend_getAttribute_attribute_(v5, v15, 65518, v16, buf);
    if (Attribute_attribute) {
      unsigned __int16 v18 = v42[0];
    }
    else {
      unsigned __int16 v18 = 0;
    }
  }
  else
  {
    unsigned __int16 v18 = 0;
    LOBYTE(Attribute_attribute) = 0;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFEFLL) == 0xFE7 && (Attribute_attribute & 1) == 0)
  {
    double v19 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid operation flags.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"process participantUpdate failed due to invalid operation flags.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"process participantUpdate failed due to invalid operation flags.");
        }
      }
    }
LABEL_50:
    unsigned int v28 = 0;
    goto LABEL_51;
  }
  uint64_t v20 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v13, v18, v14);
  if (v20) {
    CFDictionarySetValue(v7, @"ids-stun-attribute-session-state-type", v20);
  }

  if (StunUtilHasValidBinaryDataAttr(v5, 60928, __b, (int *)&v38))
  {
    uint64_t v24 = sub_19DAE355C(__b, (const char *)v38, v23);
    double v25 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      unsigned int v41 = v38;
      _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "receive participantIDs, length: %dB.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v36 = v38;
        _IDSLogTransport(@"GL", @"IDS", @"receive participantIDs, length: %dB.");
        if (_IDSShouldLog())
        {
          uint64_t v36 = v38;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive participantIDs, length: %dB.");
        }
      }
    }
    id v26 = v24;
    if (v26)
    {
      CFDictionarySetValue(v7, @"ids-stun-attribute-enc-ParticipantIDs", v26);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7F484();
    }
  }
  else if (a3 == 3831 || a2 != 401 && a3 == 4087 || (id v26 = 0, a3 == 4071) && v18 <= 2u)
  {
    uint64_t v27 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "process participantUpdate failed due to invalid participantIDs.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"process participantUpdate failed due to invalid participantIDs.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"process participantUpdate failed due to invalid participantIDs.");
        }
      }
    }
    goto LABEL_50;
  }
  if (v5 && objc_msgSend_hasAttribute_(v5, v21, 65490, v23))
  {
    __int16 v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantUpdate: packetTruncated", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessParticipantUpdate: packetTruncated");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessParticipantUpdate: packetTruncated");
        }
      }
    }
    CFDictionarySetValue(v7, @"ids-stun-attribute-stun-truncated", MEMORY[0x1E4F1CC38]);
  }
  if (a3 > 4070)
  {
    if (a3 == 4087)
    {
      objc_msgSend_numberWithUnsignedShort_(NSNumber, v21, 4, v23, v36);
      goto LABEL_78;
    }
    if (a3 == 4071)
    {
      objc_msgSend_numberWithUnsignedShort_(NSNumber, v21, 3, v23, v36);
      goto LABEL_78;
    }
LABEL_75:
    unsigned int v31 = objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23, v36);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_19DB7F40C(a3, v31);
    }

    objc_msgSend_numberWithUnsignedShort_(NSNumber, v32, 0, v33, v37);
    goto LABEL_78;
  }
  if (a3 == 3815)
  {
    objc_msgSend_numberWithUnsignedShort_(NSNumber, v21, 1, v23, v36);
    goto LABEL_78;
  }
  if (a3 != 3831) {
    goto LABEL_75;
  }
  objc_msgSend_numberWithUnsignedShort_(NSNumber, v21, 5, v23, v36);
  long long v34 = LABEL_78:;
  if (v34)
  {
    CFDictionarySetValue(v7, @"ids-stun-message-type", v34);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7E34C();
  }

  int v35 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109376;
    unsigned int v41 = v18;
    LOWORD(v42[0]) = 2048;
    *(void *)((char *)v42 + 2) = a3;
    _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilProcessParticipantUpdate: operationFlags: %u, messageSTUNType: 0X%lx");
      }
    }
  }
  unsigned int v28 = v7;

LABEL_51:
  return v28;
}

uint64_t StunUtilHasValidUInt16Attr(uint64_t result, uint64_t a2, _WORD *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    uint64_t result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if (result) {
        *a3 = v9;
      }
    }
  }
  return result;
}

void *StunUtilHasValidBooleanAttr(void *result, const char *a2, double a3)
{
  if (result) {
    return objc_msgSend_hasAttribute_(result, a2, (uint64_t)a2, a3);
  }
  return result;
}

uint64_t sub_19DAE43D8(void *a1, void *a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  unint64_t v6 = v5;
  if (a2 && a3 > 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v7 = v5;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v23, v9, v28, 16);
    LODWORD(v14) = a2;
    if (v12)
    {
      unint64_t v15 = (unint64_t)a2 + a3;
      uint64_t v16 = *(void *)v24;
      double v14 = a2;
      while (2)
      {
        uint64_t v17 = 0;
        unsigned __int16 v18 = v14;
        do
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v7);
          }
          double v14 = v18 + 1;
          if ((unint64_t)(v18 + 1) > v15)
          {
            uint64_t v21 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)kevent buf = 0;
              _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "StunUtilWriteParticipantIDs failed to write participant-id due to short buffer.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"StunUtilWriteParticipantIDs failed to write participant-id due to short buffer.");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilWriteParticipantIDs failed to write participant-id due to short buffer.");
                }
              }
            }

            goto LABEL_25;
          }
          *v18++ = bswap64(objc_msgSend_unsignedLongLongValue(*(void **)(*((void *)&v23 + 1) + 8 * v17++), v10, v11, v13, (void)v23));
        }
        while (v12 != v17);
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v23, v13, v28, 16);
        if (v12) {
          continue;
        }
        break;
      }
    }

    uint64_t v19 = (v14 - a2);
  }
  else
  {
    uint64_t v20 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "StunUtilWriteParticipantIDs failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilWriteParticipantIDs failed due to invalid parameter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilWriteParticipantIDs failed due to invalid parameter.");
        }
      }
    }
LABEL_25:
    uint64_t v19 = 0xFFFFFFFFLL;
  }

  return v19;
}

void sub_19DAE46B4(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  double v8 = a4;
  memset(__b, 170, sizeof(__b));
  int v10 = sub_19DAE1CC4(a1, __b, 1472);
  if (v10 >= 1)
  {
    uint64_t v12 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v9, (uint64_t)__b, v11, v10);
    if (v12) {
      CFDictionarySetValue(v8, @"ids-stun-attribute-enc-pub-streams", v12);
    }
  }
  int v13 = sub_19DAE1FA0(v7, __b, 1472);
  if (v13 < 1)
  {
    if ((int)a3 <= 0)
    {
      if (v10 < 1) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)__b, v15, v13);
    if (v16) {
      CFDictionarySetValue(v8, @"ids-stun-attribute-enc-sub-streams", v16);
    }

    if ((int)a3 < 1) {
      goto LABEL_14;
    }
  }
  uint64_t v17 = objc_msgSend_numberWithChar_(NSNumber, v14, a3, v15);
  if (v17) {
    CFDictionarySetValue(v8, @"ids-stun-attribute-max-concurrent-streams", v17);
  }

LABEL_14:
  int v19 = 1414938954;
  unsigned __int16 v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)&v19, v15, 4);
  if (v18) {
    CFDictionarySetValue(v8, @"ids-stun-attribvute-enc-marker", v18);
  }

LABEL_17:
}

void sub_19DAE4898(void *a1, void *a2)
{
  unint64_t __b[184] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  memset(__b, 170, 0x5C0uLL);
  int v4 = sub_19DAE43D8(a1, __b, 1472);
  if (v4 >= 1)
  {
    id v7 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v5, (uint64_t)__b, v6, v4);
    if (v7) {
      CFDictionarySetValue(v3, @"ids-stun-attribute-enc-ParticipantIDs", v7);
    }

    int v11 = 1414938954;
    int v10 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v8, (uint64_t)&v11, v9, 4);
    if (v10) {
      CFDictionarySetValue(v3, @"ids-stun-attribvute-enc-marker", v10);
    }
  }
}

id StunUtilCreateMessage(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(void *)&v307[7] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  CFDictionaryRef v9 = a4;
  int v10 = [IDSStunMessage alloc];
  int v13 = objc_msgSend_initWithType_(v10, v11, a1, v12);
  double v14 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  double v15 = ids_monotonic_time();
  int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v8, v16, v17, v15);
  isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v8, v19, v20, v21);
  v303 = v7;
  if (isRelayStunCandidatePair && (objc_msgSend_isValidRelayStunCandidatePair(v8, v22, v23, v25) & 1) == 0)
  {
    unsigned int v38 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "StunUtilCreateMessage failed due to invalid relay candidate pair.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"StunUtilCreateMessage failed due to invalid relay candidate pair.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"StunUtilCreateMessage failed due to invalid relay candidate pair.");
        }
      }
    }
    id v29 = 0;
  }
  else
  {
    objc_msgSend_setTransactionID_(v13, v22, (uint64_t)v7, v25);
    id v29 = 0;
    switch(a1)
    {
      case 3808:
      case 3809:
        CFDictionarySetValue(v14, @"ids-stun-attribute-requestedtransport", &unk_1EF028CA8);
        double v33 = objc_msgSend_softwareData(v8, v30, v31, v32);

        if (v33)
        {
          uint64_t v37 = objc_msgSend_softwareData(v8, v34, v35, v36);
          if (v37)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-software", v37);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F72C();
          }
        }
        Value = 0;
        if (v9)
        {
          long long v34 = (const char *)@"gl-option-additional-binding";
          if (@"gl-option-additional-binding") {
            Value = (void *)CFDictionaryGetValue(v9, @"gl-option-additional-binding");
          }
        }
        char v94 = objc_msgSend_unsignedIntValue(Value, v34, v35, v36);
        if ((objc_msgSend_isSelfQRSession(v8, v95, v96, v97) & 1) == 0
          && objc_msgSend_hasValidCapabilityFlags(v8, v98, v99, v100))
        {
          uint64_t v102 = objc_msgSend_capabilityFlags(v8, v98, v99, v100);
          double v104 = (const char *)@"gl-option-is-lightweight-participant-key";
          if (@"gl-option-is-lightweight-participant-key") {
            BOOL v105 = v9 != 0;
          }
          else {
            BOOL v105 = 0;
          }
          if (v105) {
            uint64_t v106 = (void *)CFDictionaryGetValue(v9, @"gl-option-is-lightweight-participant-key");
          }
          else {
            uint64_t v106 = 0;
          }
          if (objc_msgSend_BOOLValue(v106, v104, v101, v103)) {
            objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v167, v102 & 0xFFFFFFFFFFDF7FFFLL | 0x8000, v168);
          }
          else {
          uint64_t v169 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v167, v102, v168);
          }
          if (v169)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-capabilityflags", v169);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F6A4();
          }

          if (objc_msgSend_relayProviderType(v8, v215, v216, v217) != 1)
          {
            double v218 = objc_msgSend_local(v8, v98, v99, v100);
            unsigned int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v218, v219, v220, v221);

            double v225 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v223, v94 & 0x30 | isCellularStunCandidate, v224);
            if (v225)
            {
              CFDictionarySetValue(v14, @"ids-stun-attribute-channel-binding-info", v225);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB7F61C();
            }
          }
        }
        if (isSharedQRSession)
        {
          id v249 = objc_msgSend_transactionID(v13, v98, v99, v100);
          objc_msgSend_deriveAES128CTRKeys_(v8, v250, (uint64_t)v249, v251);

          id v255 = objc_msgSend_relaySessionInfo(v8, v252, v253, v254);
          long long v259 = objc_msgSend_publishedStreams(v255, v256, v257, v258);

          long long v263 = objc_msgSend_relaySessionInfo(v8, v260, v261, v262);
          id v267 = objc_msgSend_subscribedStreams(v263, v264, v265, v266);

          long long v271 = objc_msgSend_relaySessionInfo(v8, v268, v269, v270);
          char v275 = objc_msgSend_maxConcurrentStreams(v271, v272, v273, v274);

          sub_19DAE46B4(v259, v267, v275, v14);
          v278 = objc_msgSend_objectForKeyedSubscript_(v9, v276, @"gl-option-materials-key", v277);
          if (v278) {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-materials", v278);
          }
        }
        id v279 = IDSStunAttributeQRReallocTokenKey;
        if (a1 != 3809) {
          id v279 = IDSStunAttributeQRSessionTokenKey;
        }
        uint64_t v171 = *v279;
        long long v283 = objc_msgSend_relaySessionToken(v8, v280, v281, v282);
        if (v283)
        {
          CFDictionarySetValue(v14, (const void *)v171, v283);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F594(v171, v284, v285, v286, v287, v288, v289, v290);
        }

        uint64_t v175 = objc_msgSend_objectForKeyedSubscript_(v9, v291, @"gl-option-qr-server-data-blob", v292);
        if (v175) {
          CFDictionarySetValue(v14, @"ids-stun-attribute-qr-server-blob", (const void *)v175);
        }
        goto LABEL_294;
      case 3810:
        if (objc_msgSend_relayProviderType(v8, v26, v27, v28) == 1)
        {
          objc_msgSend_sessionID(v8, v43, v44, v45);
          id v46 = (id)objc_claimAutoreleasedReturnValue();
          if (v46)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-sessionid", v46);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F7B4();
          }
        }
        else
        {
          unsigned int v89 = objc_msgSend_channelNumber(v8, v43, v44, v45);
          objc_msgSend_numberWithUnsignedShort_(NSNumber, v90, __rev16(v89), v91);
          id v46 = (id)objc_claimAutoreleasedReturnValue();
          if (v46)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v46);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F83C();
          }
        }
        goto LABEL_278;
      case 3811:
        unsigned int v47 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        unint64_t v48 = ntpTime32(v15);
        objc_msgSend_serverLatency(v8, v49, v50, v51);
        double v53 = v52;
        uint64_t v55 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v54, __rev16(v47), v52);
        if (v55)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v55);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F83C();
        }

        double v109 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v107, v48, v108);
        if (v109)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-clienttime", v109);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7FC7C();
        }

        uint64_t v126 = (v53 * 1000.0);
        if (v126)
        {
          double v127 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v125, v126, v53 * 1000.0);
          if (v127)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-clientlatency", v127);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FBF4();
          }
        }
        id v170 = 0;
        if (v9 && @"gl-option-stats-sent-packets") {
          id v170 = (void *)CFDictionaryGetValue(v9, @"gl-option-stats-sent-packets");
        }
        uint64_t v171 = v170;
        double v172 = 0;
        if (v9 && @"gl-option-stats-received-packets") {
          double v172 = (void *)CFDictionaryGetValue(v9, @"gl-option-stats-received-packets");
        }
        uint64_t v175 = v172;
        if (v171 | v175)
        {
          if (v171) {
            CFDictionarySetValue(v14, @"ids-stun-attribute-sent-packets", (const void *)v171);
          }
          if (v175) {
            CFDictionarySetValue(v14, @"ids-stun-attribute-received-packets", (const void *)v175);
          }
        }
        else
        {
          uint64_t v177 = NSNumber;
          uint64_t v178 = objc_msgSend_totalPacketsSentOnLink(v8, v173, v174, v176);
          uint64_t v181 = objc_msgSend_numberWithUnsignedInt_(v177, v179, v178, v180);
          if (v181)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-sent-packets", v181);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FB6C();
          }

          v226 = NSNumber;
          uint64_t v230 = objc_msgSend_totalPacketsReceivedOnLink(v8, v227, v228, v229);
          double v233 = objc_msgSend_numberWithUnsignedInt_(v226, v231, v230, v232);
          if (v233)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-received-packets", v233);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FAE4();
          }
        }
LABEL_294:

        goto LABEL_295;
      case 3812:
        unsigned int v56 = objc_msgSend_transactionID(v13, v26, v27, v28);
        objc_msgSend_deriveAES128CTRKeys_(v8, v57, (uint64_t)v56, v58);

        if ((unint64_t)objc_msgSend_state(v8, v59, v60, v61) < 3)
        {
          double v92 = objc_msgSend_relaySessionToken(v8, v62, v63, v64);
          if (v92)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-sessiontokenkey", v92);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F94C();
          }

          double v209 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            _os_log_impl(&dword_19D9BE000, v209, OS_LOG_TYPE_DEFAULT, "use relay-access-token for info request.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"use relay-access-token for info request.");
              if (_IDSShouldLog())
              {
                uint64_t v208 = @"use relay-access-token for info request.";
                goto LABEL_219;
              }
            }
          }
        }
        else
        {
          unsigned int v65 = objc_msgSend_channelNumber(v8, v62, v63, v64);
          long long v68 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v66, __rev16(v65), v67);
          if (v68)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v68);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F83C();
          }

          uint64_t v205 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            _os_log_impl(&dword_19D9BE000, v205, OS_LOG_TYPE_DEFAULT, "use channel-number for info request.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"use channel-number for info request.");
              if (_IDSShouldLog())
              {
                uint64_t v208 = @"use channel-number for info request.";
LABEL_219:
                _IDSLogV(0, @"IDSFoundation", @"GL", v208);
              }
            }
          }
        }
        v210 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v206, 7, v207);
        if (v210)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-infoflags", v210);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F8C4();
        }

        uint64_t v214 = objc_msgSend_relaySessionKey(v8, v211, v212, v213);
        if (v214)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-messageintegrity", v214);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F50C();
        }

LABEL_295:
        if (isRelayStunCandidatePair)
        {
          objc_msgSend_relaySessionKey(v8, v26, v27, v28);
          id v293 = (id)objc_claimAutoreleasedReturnValue();
          if (v293)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-messageintegrity", v293);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F50C();
          }

          id v294 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109378;
            int v305 = a1;
            __int16 v306 = 2112;
            *(void *)v307 = v293;
            _os_log_impl(&dword_19D9BE000, v294, OS_LOG_TYPE_DEFAULT, "Msg %04X has relay session key %@", buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v298 = a1;
              unint64_t v299 = (unint64_t)v293;
              _IDSLogTransport(@"GL", @"IDS", @"Msg %04X has relay session key %@");
              if (_IDSShouldLog())
              {
                uint64_t v298 = a1;
                unint64_t v299 = (unint64_t)v293;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Msg %04X has relay session key %@");
              }
            }
          }
        }
        objc_msgSend_setAttributes_(v13, v26, (uint64_t)v14, v28, v298, v299, v300);
        objc_msgSend_setStartTime_(v13, v295, v296, v15);
        id v29 = v13;
        break;
      case 3813:
        if (!isSharedQRSession) {
          goto LABEL_295;
        }
        unsigned int v69 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        long long v72 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v70, __rev16(v69), v71);
        if (v72)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v72);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F83C();
        }

        uint64_t v185 = 0;
        if (v9)
        {
          double v182 = (const char *)@"gl-option-sessioninfo-request-type";
          if (@"gl-option-sessioninfo-request-type") {
            uint64_t v185 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-request-type");
          }
        }
        if (objc_msgSend_intValue(v185, v182, v183, v184) == 2)
        {
          if (v9)
          {
            if (@"gl-option-sessioninfo-generation-counter")
            {
              long long v189 = (id)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-generation-counter");
              if (v189)
              {
                uint64_t v190 = v189;
                CFDictionarySetValue(v14, @"ids-stun-attribute-generation-counter", v189);
              }
            }
          }
          uint64_t v191 = 0;
          if (v9 && @"gl-option-sessioninfo-published-streams") {
            uint64_t v191 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-published-streams");
          }
          id v192 = v191;
          uint64_t v193 = 0;
          if (v9 && @"gl-option-sessioninfo-subscribed-streams") {
            uint64_t v193 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-subscribed-streams");
          }
          id v196 = v193;
          uint64_t v198 = 0;
          if (v9)
          {
            double v194 = (const char *)@"gl-option-sessioninfo-max-concurrent-streams";
            if (@"gl-option-sessioninfo-max-concurrent-streams") {
              uint64_t v198 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-max-concurrent-streams");
            }
          }
          char v199 = objc_msgSend_intValue(v198, v194, v195, v197);
          sub_19DAE46B4(v192, v196, v199, v14);
          double v202 = (const char *)@"gl-option-sessioninfo-relay-link-id";
          if (@"gl-option-sessioninfo-relay-link-id") {
            BOOL v203 = v9 != 0;
          }
          else {
            BOOL v203 = 0;
          }
          if (v203) {
            uint64_t v204 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-relay-link-id");
          }
          else {
            uint64_t v204 = 0;
          }
          unsigned __int16 v239 = objc_msgSend_unsignedIntValue(v204, v202, v200, v201);
          if (v239)
          {
            uint64_t v242 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v240, v239, v241);
            if (v242) {
              CFDictionarySetValue(v14, @"ids-stun-attribute-relay-link-id", v242);
            }
          }
        }
        double v243 = 0;
        if (v9)
        {
          double v186 = (const char *)@"gl-option-sessioninfo-request-id";
          if (@"gl-option-sessioninfo-request-id") {
            double v243 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-request-id");
          }
        }
        uint64_t v245 = objc_msgSend_unsignedIntValue(v243, v186, v187, v188);
        if (v245)
        {
          v247 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v244, v245, v246);
          if (v247) {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-request-id", v247);
          }
        }
        v248 = 0;
        if (v9)
        {
          uint64_t v244 = (const char *)@"gl-option-sessioninfo-cookie";
          if (@"gl-option-sessioninfo-cookie") {
            v248 = (void *)CFDictionaryGetValue(v9, @"gl-option-sessioninfo-cookie");
          }
        }
        uint64_t v27 = objc_msgSend_unsignedIntValue(v248, v244, v245, v246);
        if (!v27) {
          goto LABEL_295;
        }
        objc_msgSend_numberWithUnsignedInt_(NSNumber, v26, v27, v28);
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46) {
          CFDictionarySetValue(v14, @"ids-stun-attribute-qr-cookie", v46);
        }
LABEL_278:

        goto LABEL_295;
      case 3814:
        break;
      case 3815:
        unsigned int v73 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        uint64_t v76 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v74, __rev16(v73), v75);
        if (v76)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v76);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F83C();
        }

        double v113 = 0;
        if (v9)
        {
          uint64_t v110 = (const char *)@"gl-option-participant-update-request-type";
          if (@"gl-option-participant-update-request-type") {
            double v113 = (void *)CFDictionaryGetValue(v9, @"gl-option-participant-update-request-type");
          }
        }
        uint64_t v114 = objc_msgSend_unsignedShortValue(v113, v110, v111, v112);
        id v117 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v115, v114, v116);
        if (v117)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-session-state-type", v117);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7FA5C();
        }

        if (v114 > 8 || ((1 << v114) & 0x181) == 0)
        {
          uint64_t v131 = 0;
          if (v9 && @"gl-option-participant-update-blocked-participantIDs") {
            uint64_t v131 = (void *)CFDictionaryGetValue(v9, @"gl-option-participant-update-blocked-participantIDs");
          }
          sub_19DAE4898(v131, v14);
        }
        id v132 = 0;
        if (v9)
        {
          uint64_t v128 = (const char *)@"gl-option-participant-update-request-counter";
          if (@"gl-option-participant-update-request-counter") {
            id v132 = (void *)CFDictionaryGetValue(v9, @"gl-option-participant-update-request-counter");
          }
        }
        uint64_t v133 = objc_msgSend_unsignedIntValue(v132, v128, v129, v130);
        objc_msgSend_numberWithUnsignedInt_(NSNumber, v134, v133, v135);
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-session-state-counter", v46);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F9D4();
        }
        goto LABEL_278;
      case 3816:
        unsigned int v77 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        double v80 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v78, __rev16(v77), v79);
        if (v80)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v80);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F83C();
        }

        if (v9
          && @"gl-option-plugin-operation"
          && (uint64_t v118 = (id)CFDictionaryGetValue(v9, @"gl-option-plugin-operation")) != 0)
        {
          double v119 = v118;
          CFDictionarySetValue(v14, @"ids-stun-attribute-plugin-operation", v118);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB80034();
        }
        double v122 = 0;
        if (v9)
        {
          uint64_t v120 = (const char *)@"gl-option-plugin-name";
          if (@"gl-option-plugin-name") {
            double v122 = (void *)CFDictionaryGetValue(v9, @"gl-option-plugin-name");
          }
        }
        objc_msgSend_dataUsingEncoding_(v122, v120, 4, v121);
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-plugin-name", v46);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7FFAC();
        }

        if (@"gl-option-plugin-raw-public-key") {
          BOOL v136 = v9 != 0;
        }
        else {
          BOOL v136 = 0;
        }
        if (v136)
        {
          id v137 = (id)(id)CFDictionaryGetValue(v9, @"gl-option-plugin-raw-public-key");
          if (v137)
          {
            uint64_t v138 = v137;
            CFDictionarySetValue(v14, @"ids-stun-attribute-raw-public-key", v137);
          }
        }
        goto LABEL_278;
      case 3817:
        unsigned int v81 = objc_msgSend_channelNumber(v8, v26, v27, v28);
        uint64_t v84 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v82, __rev16(v81), v83);
        if (v84)
        {
          CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v84);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7F83C();
        }

        objc_msgSend_objectForKeyedSubscript_(v9, v123, @"gl-option-materials-key", v124);
        id v46 = (id)objc_claimAutoreleasedReturnValue();
        if (v46) {
          CFDictionarySetValue(v14, @"ids-stun-attribute-qr-materials", v46);
        }
        goto LABEL_278;
      default:
        if (a1 == 23)
        {
          unsigned int v85 = objc_msgSend_channelNumber(v8, v26, v27, v28);
          double v88 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v86, __rev16(v85), v87);
          if (v88)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v88);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F83C();
          }

          if (v9
            && @"gl-option-generic-data"
            && (double v162 = (id)CFDictionaryGetValue(v9, @"gl-option-generic-data")) != 0)
          {
            uint64_t v163 = v162;
            CFDictionarySetValue(v14, @"ids-stun-attribute-data", v162);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FD04();
          }
        }
        else
        {
          if (a1 != 2049) {
            break;
          }
          unsigned int v39 = objc_msgSend_channelNumber(v8, v26, v27, v28);
          double v42 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v40, __rev16(v39), v41);
          if (v42)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-channelnumber", v42);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7F83C();
          }

          double v142 = 0;
          if (v9)
          {
            double v139 = (const char *)@"gl-option-test-options-flags";
            if (@"gl-option-test-options-flags") {
              double v142 = (void *)CFDictionaryGetValue(v9, @"gl-option-test-options-flags");
            }
          }
          uint64_t v144 = objc_msgSend_unsignedIntValue(v142, v139, v140, v141);
          double v146 = (const char *)@"gl-option-test-requested-message-type";
          if (@"gl-option-test-requested-message-type") {
            BOOL v147 = v9 != 0;
          }
          else {
            BOOL v147 = 0;
          }
          if (v147) {
            uint64_t v148 = (void *)CFDictionaryGetValue(v9, @"gl-option-test-requested-message-type");
          }
          else {
            uint64_t v148 = 0;
          }
          unsigned __int16 v301 = objc_msgSend_unsignedIntValue(v148, v146, v143, v145);
          id v151 = (const char *)@"gl-option-test-requested-error-code-type";
          if (@"gl-option-test-requested-error-code-type") {
            BOOL v152 = v9 != 0;
          }
          else {
            BOOL v152 = 0;
          }
          if (v152) {
            double v153 = (void *)CFDictionaryGetValue(v9, @"gl-option-test-requested-error-code-type");
          }
          else {
            double v153 = 0;
          }
          unsigned __int16 v154 = objc_msgSend_unsignedIntValue(v153, v151, v149, v150);
          double v156 = (const char *)@"gl-option-test-sub-operation";
          if (@"gl-option-test-sub-operation") {
            BOOL v157 = v9 != 0;
          }
          else {
            BOOL v157 = 0;
          }
          if (v157) {
            uint64_t v158 = (void *)CFDictionaryGetValue(v9, @"gl-option-test-sub-operation");
          }
          else {
            uint64_t v158 = 0;
          }
          long long v302 = objc_msgSend_dataUsingEncoding_(v158, v156, 4, v155);
          long long v161 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v159, v144, v160);
          if (v161)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-testoptions", v161);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FF24();
          }

          if (v144 == 8)
          {
            id v166 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v164, v301, v165);
            if (v166)
            {
              CFDictionarySetValue(v14, @"ids-stun-attribute-qr-test-requested-message", v166);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB7FE9C();
            }

            double v236 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v234, v154, v235);
            if (v236)
            {
              CFDictionarySetValue(v14, @"ids-stun-attribute-qr-test-requested-error-code", v236);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB7FE14();
            }

            id v237 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)kevent buf = 67109632;
              int v305 = 8;
              __int16 v306 = 1024;
              *(_DWORD *)v307 = v301;
              v307[2] = 1024;
              *(_DWORD *)&v307[3] = v154;
              _os_log_impl(&dword_19D9BE000, v237, OS_LOG_TYPE_DEFAULT, "testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u", buf, 0x14u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                unint64_t v299 = v301;
                uint64_t v300 = v154;
                uint64_t v298 = 8;
                _IDSLogTransport(@"GL", @"IDS", @"testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u");
                if (_IDSShouldLog())
                {
                  unint64_t v299 = v301;
                  uint64_t v300 = v154;
                  uint64_t v298 = 8;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"testOptions: %u, requestedMessageType: %u, requestedErrorCode: %u");
                }
              }
            }
          }
          id v238 = v302;
          if (v238)
          {
            CFDictionarySetValue(v14, @"ids-stun-attribute-qr-testsuboperation", v238);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7FD8C();
          }
        }
        goto LABEL_295;
    }
  }

  return v29;
}

uint64_t StunUtilHasValidChannelNumber(void *a1, unsigned int a2, _WORD *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (!v5 || (bzero(v17, 0x5D0uLL), !objc_msgSend_getAttribute_attribute_(v5, v6, 12, v7, v17)))
  {
LABEL_11:
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  unsigned int v8 = HIWORD(v18);
  if (a2)
  {
    unsigned int v9 = __rev16(a2);
    if (v8 != v9)
    {
      int v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109376;
        unsigned int v14 = v8;
        __int16 v15 = 1024;
        unsigned int v16 = v9;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "channel-number mismatch (%04x != %04x).", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"channel-number mismatch (%04x != %04x).");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"channel-number mismatch (%04x != %04x).");
          }
        }
      }
      goto LABEL_11;
    }
  }
  if (a3) {
    *a3 = HIWORD(v18);
  }
  uint64_t v11 = 1;
LABEL_12:

  return v11;
}

uint64_t StunUtilHasValidXorMappedAddress(uint64_t result, void *a2)
{
  __n[185] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v3 = (void *)result;
    bzero(v6, 0x5D0uLL);
    uint64_t result = objc_msgSend_getAttribute_attribute_(v3, v4, 32, v5, v6);
    if (result)
    {
      uint64_t result = IsValidSA((BOOL)__n);
      if (result)
      {
        if (a2) {
          memcpy(a2, __n, LOBYTE(__n[0]));
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t StunUtilHasValidUInt64Attr(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    double v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    uint64_t result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if (result) {
        *a3 = v9;
      }
    }
  }
  return result;
}

uint64_t StunUtilHasValidUInt8Attr(uint64_t result, uint64_t a2, unsigned char *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    double v5 = (void *)result;
    bzero(v8, 0x5D0uLL);
    uint64_t result = objc_msgSend_getAttribute_attribute_(v5, v6, a2, v7, v8);
    if (a3)
    {
      if (result) {
        *a3 = v8[8];
      }
    }
  }
  return result;
}

void *StunUtilHasValidErrorCodeAttr(void *a1, _WORD *a2, char *a3, int *a4)
{
  int Attribute_attribute = a1;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    bzero(v17, 0x5D0uLL);
    int Attribute_attribute = objc_msgSend_getAttribute_attribute_(Attribute_attribute, v8, 9, v9, v17);
    if (Attribute_attribute)
    {
      if (a2) {
        *a2 = v19 + 100 * v18;
      }
      if (a3 && a4)
      {
        int v13 = v21;
        if (v21 > 127)
        {
          unsigned int v14 = objc_msgSend_Stun(IDSFoundationLog, v10, v11, v12);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            v16[0] = 67109120;
            v16[1] = v21;
            _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "StunUtilHasValidErrorCodeAttr potential overflow, error code length: %d", (uint8_t *)v16, 8u);
          }
        }
        else
        {
          *a4 = v21;
          strlcpy(a3, v20, v13 + 1);
        }
      }
    }
  }
  return Attribute_attribute;
}

uint64_t StunUtilDeriveHKDFSha256Keys(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5)
{
  *(void *)&v60[13] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  memset(v60, 170, 24);
  int v15 = objc_msgSend_length(v9, v12, v13, v14);
  int v19 = objc_msgSend_length(v11, v16, v17, v18);
  if (a5 && v15 == 20 && v19 == 12)
  {
    qmemcpy(v59, "QuickRelay KDF", sizeof(v59));
    id v23 = objc_alloc(MEMORY[0x1E4F29128]);
    long long v26 = objc_msgSend_initWithUUIDString_(v23, v24, (uint64_t)v10, v25);
    __int16 v30 = v26;
    if (v10)
    {
      objc_msgSend_getUUIDBytes_(v26, v27, (uint64_t)v60, v29);
      *(void *)&v60[8] = bswap64(a3);
      double v31 = ids_monotonic_time();
      id v32 = v11;
      objc_msgSend_bytes(v32, v33, v34, v35);
      int Hkdf = CCKDFParametersCreateHkdf();
      if (Hkdf)
      {
        int v40 = Hkdf;
        double v41 = objc_msgSend_Stun(IDSFoundationLog, v37, v38, v39);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109120;
          LODWORD(v5_Block_object_dispose(&STACK[0x300], 8) = v40;
          double v42 = "CCKDFParametersCreateHkdf failed with error %d.";
LABEL_17:
          _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, 8u);
        }
      }
      else
      {
        id v45 = v9;
        objc_msgSend_bytes(v45, v46, v47, v48);
        int v49 = CCDeriveKey();
        CCKDFParametersDestroy();
        if (!v49)
        {
          double v54 = ids_monotonic_time();
          double v41 = objc_msgSend_Stun(IDSFoundationLog, v55, v56, v54);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 134217984;
            double v58 = v54 - v31;
            _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "HKDF+SHA256 key derivation time: %.6f.", buf, 0xCu);
          }
          uint64_t v44 = 1;
          goto LABEL_19;
        }
        double v41 = objc_msgSend_Stun(IDSFoundationLog, v50, v51, v52);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109120;
          LODWORD(v5_Block_object_dispose(&STACK[0x300], 8) = v49;
          double v42 = "CCDeriveKey failed with error %d.";
          goto LABEL_17;
        }
      }
      uint64_t v44 = 0;
LABEL_19:

      goto LABEL_20;
    }
    uint64_t v43 = objc_msgSend_Stun(IDSFoundationLog, v27, v28, v29);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "StunUtilDeriveHKDFSha256Keys failed due to invalid session-id.", buf, 2u);
    }
  }
  else
  {
    __int16 v30 = objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "StunUtilDeriveHKDFSha256Keys failed due to invalid parameter.", buf, 2u);
    }
  }
  uint64_t v44 = 0;
LABEL_20:

  return v44;
}

BOOL StunUtilInitAES128CTR(void *a1, CCOperation a2, const void *a3, CCCryptorRef *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v33 = 0;
  id v7 = a1;
  uint64_t v11 = objc_msgSend_bytes(v7, v8, v9, v10);
  int v12 = *(_DWORD *)(v11 + 8);
  uint64_t iv = *(void *)v11;
  int v32 = v12;
  double v13 = ids_monotonic_time();
  CCCryptorStatus v16 = CCCryptorCreateWithMode(a2, 4u, 0, 0, &iv, a3, 0x10uLL, 0, 0, 0, 2u, a4);
  if (v16)
  {
    double v18 = objc_msgSend_Stun(IDSFoundationLog, v14, v15, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = v16;
      int v19 = "CCCryptorCreateWithMode failed for encryption with (%d).";
      uint64_t v20 = v18;
      uint32_t v21 = 8;
LABEL_6:
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    }
  }
  else
  {
    double v22 = ids_monotonic_time();
    double v18 = objc_msgSend_Stun(IDSFoundationLog, v23, v24, v22);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      CCCryptorRef v25 = *a4;
      *(_DWORD *)kevent buf = 134218240;
      CCCryptorRef v28 = v25;
      __int16 v29 = 2048;
      double v30 = v22 - v13;
      int v19 = "AES128-CTR (%p) init time: %.6f.";
      uint64_t v20 = v18;
      uint32_t v21 = 22;
      goto LABEL_6;
    }
  }

  return v16 == 0;
}

BOOL StunUtilDoAES128CTR(_CCCryptor *a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  size_t dataOutMoved = 0;
  double v10 = ids_monotonic_time();
  CCCryptorStatus v13 = CCCryptorUpdate(a1, a2, a3, a4, a3, &dataOutMoved);
  if (v13)
  {
    uint64_t v15 = objc_msgSend_Stun(IDSFoundationLog, v11, v12, v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v29) = v13;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "CCCryptorUpdate failed to enc/dec with (%d).", buf, 8u);
    }
  }
  else
  {
    double v18 = ids_monotonic_time();
    double v19 = v18;
    if (a5) {
      *a5 = dataOutMoved;
    }
    uint64_t v15 = objc_msgSend_Stun(IDSFoundationLog, v16, v17, v18);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      double v22 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v20, (uint64_t)a2, v21, a3);
      CCCryptorRef v25 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v23, (uint64_t)a4, v24, *a5);
      *(_DWORD *)kevent buf = 134218754;
      __int16 v29 = a1;
      __int16 v30 = 2048;
      double v31 = v19 - v10;
      __int16 v32 = 2112;
      int v33 = v22;
      __int16 v34 = 2112;
      double v35 = v25;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "AES128-CTR (%p) time: %.6f (in:%@, out:%@).", buf, 0x2Au);
    }
  }

  return v13 == 0;
}

uint64_t sub_19DAE6D88(CCCryptorRef *a1, CCOperation a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v68 = xmmword_19DB9B790;
  long long v66 = *(_OWORD *)"";
  int v67 = 857870592;
  unint64_t v64 = 0x8877665544332211;
  int v65 = -860116327;
  long long v62 = xmmword_19DB9B7B0;
  long long v63 = xmmword_19DB9B7A0;
  id v4 = objc_alloc(MEMORY[0x1E4F29128]);
  uint64_t v9 = objc_msgSend_initWithUUIDBytes_(v4, v5, (uint64_t)&v68, v6);
  if (v9)
  {
    uint64_t v11 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v7, (uint64_t)&v64, v10, 12);
    double v14 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v12, (uint64_t)&v66, v13, 20);
    double v18 = objc_msgSend_UUIDString(v9, v15, v16, v17);
    char v19 = StunUtilDeriveHKDFSha256Keys(v14, v18, 0x123456789ABCDEFuLL, v11, (uint64_t)&v69);

    if (v19)
    {
      if (a2) {
        id v23 = &v70;
      }
      else {
        id v23 = &v69;
      }
      double v24 = objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v25, (uint64_t)&v63, v26, 16);
        double v53 = v23;
        uint64_t v27 = (_CCCryptor *)objc_claimAutoreleasedReturnValue();
        __int16 v30 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v28, (uint64_t)&v69, v29, 16);
        objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v31, (uint64_t)&v62, v32, 16);
        __int16 v34 = v33 = a1;
        uint64_t v37 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v35, (uint64_t)&v70, v36, 16);
        *(_DWORD *)kevent buf = 138413058;
        CCCryptorRef v55 = v27;
        __int16 v56 = 2112;
        long long v57 = v30;
        __int16 v58 = 2112;
        long long v59 = v34;
        __int16 v60 = 2112;
        double v61 = v37;
        _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "encKeyOut:(%@, %@), encKeyIn:(%@, %@).", buf, 0x2Au);

        a1 = v33;
        id v23 = v53;
      }

      BOOL v41 = (void)v63 == (void)v69 && *((void *)&v63 + 1) == *((void *)&v69 + 1);
      if (v41 && ((void)v62 == (void)v70 ? (BOOL v42 = *((void *)&v62 + 1) == *((void *)&v70 + 1)) : (BOOL v42 = 0), v42))
      {
        BOOL inited = StunUtilInitAES128CTR(v11, a2, v23, a1);
        uint64_t v43 = objc_msgSend_Stun(IDSFoundationLog, v48, v49, v50);
        BOOL v51 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        if (inited)
        {
          if (v51)
          {
            CCCryptorRef v52 = *a1;
            *(_DWORD *)kevent buf = 134217984;
            CCCryptorRef v55 = v52;
            _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "AES128-CTR cryptor instance is created successfully: %p.", buf, 0xCu);
          }
          uint64_t v45 = 1;
          goto LABEL_26;
        }
        if (v51)
        {
          *(_WORD *)kevent buf = 0;
          uint64_t v44 = "failed to create AES128-CTR encoder.";
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v43 = objc_msgSend_Stun(IDSFoundationLog, v38, v39, v40);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          uint64_t v44 = "key derivation failed with mismatch.";
LABEL_24:
          _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, v44, buf, 2u);
        }
      }
    }
    else
    {
      uint64_t v43 = objc_msgSend_Stun(IDSFoundationLog, v20, v21, v22);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        uint64_t v44 = "StunUtilDeriveHKDFSha256Keys failed.";
        goto LABEL_24;
      }
    }
    uint64_t v45 = 0;
LABEL_26:

    goto LABEL_27;
  }
  uint64_t v11 = objc_msgSend_Stun(IDSFoundationLog, v7, v8, v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "_StunUtilTestHKDFSha256KeysDerivationAndInit failed due to invalid sessionUUID.", buf, 2u);
  }
  uint64_t v45 = 0;
LABEL_27:

  return v45;
}

uint64_t StunUtilTestAES128CTREnc(CCCryptorRef *a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  qmemcpy(v58, "Client Attribute Value 1", sizeof(v58));
  uint64_t v57 = 0x402DE734DE3646B1;
  long long v55 = 0u;
  long long v56 = xmmword_19DB9B6DE;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  size_t v32 = 0;
  qmemcpy(v47, "Client Attribute Value 2", 24);
  long long v44 = 0u;
  long long v45 = xmmword_19DB9B70E;
  uint64_t v46 = 0xE7B60E32A2F3586;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  size_t v31 = 0;
  if ((sub_19DAE6D88(a1, 0) & 1) == 0)
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v2, v3, v4);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_WORD *)kevent buf = 0;
    double v17 = "_StunUtilTestHKDFSha256KeysDerivationAndInit failed.";
    double v18 = v10;
    uint32_t v19 = 2;
LABEL_19:
    _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, v58, 0x18uLL, &v48, &v32))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)kevent buf = 136315138;
    __int16 v34 = v58;
    double v17 = "StunUtilDoAES128CTR failed for %s.";
    goto LABEL_18;
  }
  if (v32 != 24
    || ((void)v56 == (void)v48 ? (BOOL v8 = *((void *)&v56 + 1) == *((void *)&v48 + 1)) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = v57 == (void)v49) : (BOOL v9 = 0),
        !v9))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7, v31);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      uint64_t v20 = 0;
      goto LABEL_21;
    }
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v11, (uint64_t)&v48, v12, v32);
    double v13 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)&v56, v15, 24);
    *(_DWORD *)kevent buf = 138412546;
    __int16 v34 = v13;
    __int16 v35 = 2112;
    double v36 = v16;
LABEL_13:
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR result mismatch. (output:%@, expected:%@).", buf, 0x16u);

    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, v47, 0x18uLL, &v37, &v31))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)kevent buf = 136315138;
    __int16 v34 = v47;
    double v17 = "StunUtilDoAES128CTR failed for %s.";
LABEL_18:
    double v18 = v10;
    uint32_t v19 = 12;
    goto LABEL_19;
  }
  if (v31 != 24
    || ((void)v45 == (void)v37 ? (BOOL v25 = *((void *)&v45 + 1) == *((void *)&v37 + 1)) : (BOOL v25 = 0),
        v25 ? (BOOL v26 = v46 == (void)v38) : (BOOL v26 = 0),
        !v26))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24, v31);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v27, (uint64_t)&v37, v28, v31);
    double v13 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v29, (uint64_t)&v45, v30, 24);
    *(_DWORD *)kevent buf = 138412546;
    __int16 v34 = v13;
    __int16 v35 = 2112;
    double v36 = v16;
    goto LABEL_13;
  }
  double v10 = objc_msgSend_Stun(IDSFoundationLog, v22, v23, v24);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilTestAES128CTREnc Success!", buf, 2u);
  }
  uint64_t v20 = 1;
LABEL_21:

  return v20;
}

uint64_t StunUtilTestAES128CTRDec(CCCryptorRef *a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unint64_t v59 = 0xA2B056FE88BACF07;
  long long v58 = xmmword_19DB9B726;
  long long v56 = 0u;
  qmemcpy(v57, "Server Attribute Value 1", 24);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  size_t v33 = 0;
  long long v47 = xmmword_19DB9B756;
  uint64_t v48 = 0x4CF3FC3300AF00CBLL;
  long long v45 = 0u;
  qmemcpy(v46, "Server Attribute Value 2", 24);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  size_t v32 = 0;
  if ((sub_19DAE6D88(a1, 1u) & 1) == 0)
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v2, v3, v4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_StunUtilTestHKDFSha256KeysDerivationAndInit failed.", buf, 2u);
    }
    goto LABEL_20;
  }
  if (!StunUtilDoAES128CTR(*a1, &v58, 0x18uLL, &v49, &v33))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    double v13 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v17, (uint64_t)&v58, v18, 24);
    *(_DWORD *)kevent buf = 138412290;
    __int16 v35 = v13;
LABEL_18:
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR failed for %@.", buf, 0xCu);
    goto LABEL_19;
  }
  if (v33 != 24
    || (*(void *)&v57[0] == (void)v49 ? (BOOL v8 = *((void *)&v57[0] + 1) == *((void *)&v49 + 1)) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = *(void *)&v57[1] == (void)v50) : (BOOL v9 = 0),
        !v9))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v5, v6, v7, v32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      double v13 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v11, (uint64_t)&v49, v12, v33);
      uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)v57, v15, 24);
      *(_DWORD *)kevent buf = 138412546;
      __int16 v35 = v13;
      __int16 v36 = 2112;
      long long v37 = v16;
LABEL_13:
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilDoAES128CTR result mismatch. (output:%@, expected:%@).", buf, 0x16u);

LABEL_19:
    }
LABEL_20:
    uint64_t v19 = 0;
    goto LABEL_21;
  }
  if (!StunUtilDoAES128CTR(*a1, &v47, 0x18uLL, &v38, &v32))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    double v13 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v30, (uint64_t)&v47, v31, 24);
    *(_DWORD *)kevent buf = 138412290;
    __int16 v35 = v13;
    goto LABEL_18;
  }
  if (v32 != 24
    || (*(void *)&v46[0] == (void)v38 ? (BOOL v24 = *((void *)&v46[0] + 1) == *((void *)&v38 + 1)) : (BOOL v24 = 0),
        v24 ? (BOOL v25 = *(void *)&v46[1] == (void)v39) : (BOOL v25 = 0),
        !v25))
  {
    double v10 = objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23, v32);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    double v13 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v26, (uint64_t)&v38, v27, v32);
    uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v28, (uint64_t)v46, v29, 24);
    *(_DWORD *)kevent buf = 138412546;
    __int16 v35 = v13;
    __int16 v36 = 2112;
    long long v37 = v16;
    goto LABEL_13;
  }
  double v10 = objc_msgSend_Stun(IDSFoundationLog, v21, v22, v23);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "StunUtilTestAES128CTRDec Success!", buf, 2u);
  }
  uint64_t v19 = 1;
LABEL_21:

  return v19;
}

uint64_t StunUtilHasValidAttrLength(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3 = (uint64_t)a2 >> 63;
  if (__CFADD__(a1, a2)) {
    ++v3;
  }
  unsigned int v4 = ((v3 & 1) == 0) & ~(v3 << 63 >> 63 != v3);
  if (a1 + a2 <= a3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_19DAE8524(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_setWithObject_(MEMORY[0x1E4F1CAD0], a2, a1, a3);
}

id sub_19DAE8534(uint64_t a1, const char *a2, double a3)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  v6[0] = MEMORY[0x1E4F1CC28];
  uint64_t v3 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v6, a3, &v5, 1);
  return v3;
}

uint64_t IDSQRProtoParticipantUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unsigned int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2) {
        break;
      }
      if (v18 != 3)
      {
        if (v18 == 16)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          while (1)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if ((v31 & 0x80) == 0) {
              goto LABEL_56;
            }
            v26 += 7;
            BOOL v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
              goto LABEL_58;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
          }
LABEL_58:
          uint64_t v38 = 44;
          goto LABEL_63;
        }
        goto LABEL_53;
      }
      long long v37 = objc_alloc_init(IDSQRProtoMaterial);
      objc_storeStrong((id *)(a1 + 32), v37);
      if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v37, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_64:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v18 == 1)
    {
      char v32 = 0;
      unsigned int v33 = 0;
      uint64_t v28 = 0;
      while (1)
      {
        uint64_t v34 = *v3;
        unint64_t v35 = *(void *)(a2 + v34);
        if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v35 + 1;
        v28 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0) {
          goto LABEL_60;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
          goto LABEL_62;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_60:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
      }
LABEL_62:
      uint64_t v38 = 40;
LABEL_63:
      *(_DWORD *)(a1 + v3_Block_object_dispose(&STACK[0x300], 8) = v28;
      goto LABEL_64;
    }
    if (v18 == 2)
    {
      if (v16 == 2)
      {
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          while (1)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_33;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
          PBRepeatedUInt64Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (1)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
          *(void *)(a2 + v42) = v43 + 1;
          v41 |= (unint64_t)(v44 & 0x7F) << v39;
          if (v44 < 0)
          {
            v39 += 7;
            BOOL v14 = v40++ >= 9;
            if (!v14) {
              continue;
            }
          }
          goto LABEL_75;
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_75:
        PBRepeatedUInt64Add();
      }
      goto LABEL_64;
    }
LABEL_53:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
    goto LABEL_64;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoPropertyOverrideReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int v4 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v8 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v6)) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        unint64_t v13 = *(void *)(a2 + v12);
        if (v13 == -1 || v13 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        BOOL v15 = v10++ >= 9;
        if (v15)
        {
          unint64_t v11 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(unsigned char *)(a2 + *v6)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      uint64_t v17 = v11 & 7;
      if (v16 || v17 == 4) {
        break;
      }
      uint64_t v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          unsigned int v20 = 0;
          do
          {
            uint64_t v21 = *v4;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
              goto LABEL_64;
            }
            unint64_t v23 = v22 + 1;
            int v24 = *(char *)(*(void *)(a2 + *v8) + v22);
            *(void *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0) {
              break;
            }
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v30 = *v4;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
            }
            else
            {
              char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
              *(void *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                BOOL v15 = v28++ >= 9;
                if (v15)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v6)) {
            LODWORD(v29) = 0;
          }
LABEL_54:
          uint64_t v46 = 8;
          goto LABEL_63;
        case 2u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 1;
          *(unsigned char *)(a1 + 32) |= 8u;
          while (2)
          {
            uint64_t v36 = *v4;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v8) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v15 = v34++ >= 9;
                if (v15)
                {
                  uint64_t v35 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v6)) {
            uint64_t v35 = 0;
          }
LABEL_58:
          *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x300], 8) = v35 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          *(unsigned char *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 2;
          uint64_t v39 = PBReaderReadString();
          unsigned int v40 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v39;

          continue;
        case 4u:
          objc_msgSend_clearOneofValuesForPropertyValue((void *)a1, v19, v17, a3);
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 12) = 3;
          *(unsigned char *)(a1 + 32) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v43 = *v4;
        unint64_t v44 = *(void *)(a2 + v43);
        if (v44 == -1 || v44 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v45 = *(unsigned char *)(*(void *)(a2 + *v8) + v44);
        *(void *)(a2 + v43) = v44 + 1;
        v29 |= (unint64_t)(v45 & 0x7F) << v41;
        if ((v45 & 0x80) == 0) {
          goto LABEL_60;
        }
        v41 += 7;
        BOOL v15 = v42++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_62;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_60:
      if (*(unsigned char *)(a2 + *v6)) {
        LODWORD(v29) = 0;
      }
LABEL_62:
      uint64_t v46 = 24;
LABEL_63:
      *(_DWORD *)(a1 + v46) = v29;
LABEL_64:
      ;
    }
    while (*(void *)(a2 + *v4) < *(void *)(a2 + *v5));
  }
  return *(unsigned char *)(a2 + *v6) == 0;
}

void sub_19DAECD5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DAECA94);
  }
  _Unwind_Resume(a1);
}

void sub_19DAECE14(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "created %@ proto message %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_19DAEDFC4(void *a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  id v8 = a3;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v9, (uint64_t)&v76, 0.0, v82, 16);
  if (v10)
  {
    uint64_t v14 = v10;
    uint64_t v15 = *(void *)v77;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v77 != v15) {
          objc_enumerationMutation(v7);
        }
        uint64_t v17 = objc_msgSend_unsignedShortValue(*(void **)(*((void *)&v76 + 1) + 8 * i), v11, v12, v13);
        objc_msgSend_addPublishedStreamIds_(v6, v18, v17, v19);
      }
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v11, (uint64_t)&v76, v13, v82, 16);
    }
    while (v14);
  }
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  obuint64_t j = v8;
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v72, v21, v81, 16);
  if (!v22) {
    goto LABEL_33;
  }
  uint64_t v26 = v22;
  uint64_t v27 = *(void *)v73;
  while (2)
  {
    for (uint64_t j = 0; j != v26; ++j)
    {
      if (*(void *)v73 != v27) {
        objc_enumerationMutation(obj);
      }
      uint64_t v29 = *(void **)(*((void *)&v72 + 1) + 8 * j);
      uint64_t v30 = objc_msgSend_participantID(v29, v23, v24, v25);
      uint64_t v34 = objc_msgSend_unsignedLongLongValue(v30, v31, v32, v33);

      int v38 = objc_msgSend_anyParticipant(v29, v35, v36, v37);
      int v42 = objc_msgSend_anyStream(v29, v39, v40, v41);
      int v45 = v42;
      if (v38 && (v42 & 1) != 0)
      {
        objc_msgSend_setAllWildcardSubscription_(v6, v43, 1, v44);
        goto LABEL_33;
      }
      uint64_t v46 = objc_alloc_init(IDSQRProtoSubscribedStream);
      long long v50 = v46;
      if ((v38 | v45) == 1)
      {
        objc_msgSend_setWildcardSubscription_(v46, v47, 1, v49);
        if (v38)
        {
LABEL_17:
          if (v45) {
            goto LABEL_29;
          }
          goto LABEL_21;
        }
      }
      else if (v38)
      {
        goto LABEL_17;
      }
      objc_msgSend_setPeerParticipantId_(v50, v47, v34, v49);
      if (v45) {
        goto LABEL_29;
      }
LABEL_21:
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v51 = objc_msgSend_streamArray(v29, v47, v48, 0.0);
      uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v68, v53, v80, 16);
      if (v54)
      {
        uint64_t v58 = v54;
        uint64_t v59 = *(void *)v69;
        do
        {
          for (uint64_t k = 0; k != v58; ++k)
          {
            if (*(void *)v69 != v59) {
              objc_enumerationMutation(v51);
            }
            uint64_t v61 = objc_msgSend_unsignedShortValue(*(void **)(*((void *)&v68 + 1) + 8 * k), v55, v56, v57);
            objc_msgSend_addPeerStreamIds_(v50, v62, v61, v63);
          }
          uint64_t v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v55, (uint64_t)&v68, v57, v80, 16);
        }
        while (v58);
      }

LABEL_29:
      objc_msgSend_addSubscribedStreams_(v6, v47, (uint64_t)v50, v49);
    }
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v72, v25, v81, 16);
    if (v26) {
      continue;
    }
    break;
  }
LABEL_33:

  objc_msgSend_setMaxConcurrentStreams_(v6, v64, a4, v65);
}

void sub_19DAEE2C4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "_setupAllocbindRequest: materials: %@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_19DAEF37C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "_setupPutmaterialRequest: materials: %@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_19DAEFB54(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_QRProto_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "created proto message %@ with %@", (uint8_t *)&v8, 0x16u);
  }
}

__CFDictionary *ProtoUtilProcessStreamInfo(void *a1, unsigned int a2, int a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  theDict = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (objc_msgSend_hasGenerationCounter(v4, v5, v6, v7))
  {
    int v11 = a3;
    uint64_t v12 = objc_msgSend_generationCounter(v4, v8, v9, v10);
    uint64_t v15 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, v12, v14);
    if (v15) {
      CFDictionarySetValue(theDict, @"stream-info-generation-counter", v15);
    }

    a3 = v11;
  }
  uint64_t v16 = objc_msgSend_peerSubscribedStreamIdsCount(v4, v8, v9, v10);
  unsigned int v20 = (int *)objc_msgSend_peerSubscribedStreamIds(v4, v17, v18, v19);
  int v81 = a3;
  double v21 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    LODWORD(v94) = v16;
    _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "receive %d peer-sub-streams", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v78 = v16;
      _IDSLogTransport(@"GL", @"IDS", @"receive %d peer-sub-streams");
      if (_IDSShouldLog())
      {
        uint64_t v78 = v16;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive %d peer-sub-streams");
      }
    }
  }
  if ((int)v16 < 1)
  {
    theArray = 0;
  }
  else
  {
    theArray = 0;
    uint64_t v24 = v16;
    do
    {
      int v26 = *v20++;
      unsigned __int16 v25 = v26;
      if (theArray || (theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
      {
        uint64_t v27 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v22, v25, v23, v78);
        BOOL v28 = v27 == 0;

        if (!v28)
        {
          uint64_t v29 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v22, v25, v23);
          CFArrayAppendValue(theArray, v29);
        }
      }
      else
      {
        theArray = 0;
      }
      --v24;
    }
    while (v24);
  }
  uint64_t v30 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    char v94 = theArray;
    _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "processed peer-sub-stream: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v78 = (uint64_t)theArray;
      _IDSLogTransport(@"GL", @"IDS", @"processed peer-sub-stream: %@.");
      if (_IDSShouldLog())
      {
        uint64_t v78 = (uint64_t)theArray;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"processed peer-sub-stream: %@.");
      }
    }
  }
  uint64_t v34 = objc_msgSend_peerPublishedStreamsCount(v4, v31, v32, v33, v78);
  uint64_t v35 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    LODWORD(v94) = v34;
    _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "receive %d peer-pub-streams", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v79 = v34;
      _IDSLogTransport(@"GL", @"IDS", @"receive %d peer-pub-streams");
      if (_IDSShouldLog())
      {
        uint64_t v79 = v34;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive %d peer-pub-streams");
      }
    }
  }
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  objc_msgSend_peerPublishedStreams(v4, v36, v37, 0.0, v79);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v88, v39, v92, 16);
  if (v87)
  {
    uint64_t v43 = 0;
    uint64_t v86 = *(void *)v89;
    do
    {
      for (uint64_t i = 0; i != v87; ++i)
      {
        if (*(void *)v89 != v86) {
          objc_enumerationMutation(obj);
        }
        int v45 = *(void **)(*((void *)&v88 + 1) + 8 * i);
        int v46 = objc_msgSend_peerStreamIdsCount(v45, v40, v41, v42);
        uint64_t v50 = objc_msgSend_peerStreamIds(v45, v47, v48, v49);
        if (v46 < 1)
        {
          long long v55 = 0;
        }
        else
        {
          uint64_t v54 = (int *)v50;
          long long v55 = 0;
          uint64_t v56 = v46;
          do
          {
            int v58 = *v54++;
            unsigned __int16 v57 = v58;
            if (v55 || (long long v55 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
            {
              uint64_t v59 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v51, v57, v53);
              BOOL v60 = v59 == 0;

              if (!v60)
              {
                uint64_t v61 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v51, v57, v53);
                CFArrayAppendValue(v55, v61);
              }
            }
            --v56;
          }
          while (v56);
        }
        long long v62 = NSNumber;
        uint64_t v63 = objc_msgSend_peerParticipantId(v45, v51, v52, v53);
        long long v66 = objc_msgSend_numberWithUnsignedLongLong_(v62, v64, v63, v65);
        long long v69 = objc_msgSend_streamWithParticipantID_streamArray_anyParticipant_anyStream_(IDSQRParticipantStreams, v67, (uint64_t)v66, v68, v55, 0, 0);

        if (v43 || (uint64_t v43 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
        {
          if (v69) {
            CFArrayAppendValue(v43, v69);
          }
        }
      }
      uint64_t v87 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v40, (uint64_t)&v88, v42, v92, 16);
    }
    while (v87);
  }
  else
  {
    uint64_t v43 = 0;
  }

  long long v70 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    char v94 = v43;
    _os_log_impl(&dword_19D9BE000, v70, OS_LOG_TYPE_DEFAULT, "processed peer-pub-stream: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      double v80 = v43;
      _IDSLogTransport(@"GL", @"IDS", @"processed peer-pub-stream: %@.");
      if (_IDSShouldLog())
      {
        double v80 = v43;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"processed peer-pub-stream: %@.");
      }
    }
  }
  if (theArray) {
    CFDictionarySetValue(theDict, @"stream-info-peer-subscribed-streams", theArray);
  }
  if (v43) {
    CFDictionarySetValue(theDict, @"stream-info-peer-published-streams", v43);
  }
  long long v73 = objc_msgSend_numberWithChar_(NSNumber, v71, a2, v72, v80);
  if (v73) {
    CFDictionarySetValue(theDict, @"gl-option-linkid", v73);
  }

  if (v81 >= 1)
  {
    long long v76 = objc_msgSend_numberWithChar_(NSNumber, v74, v81, v75);
    if (v76) {
      CFDictionarySetValue(theDict, @"gl-option-sessioninfo-link-id-to-query", v76);
    }
  }
  return theDict;
}

__CFArray *sub_19DAF0A24(int a1, const char *a2, double a3)
{
  if (a1 < 1)
  {
    id v4 = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t *)a2;
    id v4 = 0;
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v3++;
      uint64_t v6 = v7;
      if (v4 || (id v4 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
      {
        int v8 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, v6, a3);

        if (v8)
        {
          uint64_t v9 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, v6, a3);
          CFArrayAppendValue(v4, v9);
        }
      }
      --v5;
    }
    while (v5);
  }
  return v4;
}

id ProtoUtilProcessLightweightParticipants(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v5 = objc_msgSend_lightweightParticipantIdListsCount(v1, v2, v3, v4);
  uint64_t v9 = (const char *)objc_msgSend_lightweightParticipantIdLists(v1, v6, v7, v8);
  int v11 = sub_19DAF0A24(v5, v9, v10);
  uint64_t v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109378;
    int v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "received %d lightweight participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"received %d lightweight participants: %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"received %d lightweight participants: %@");
      }
    }
  }

  return v11;
}

__CFArray *sub_19DAF0C70(void *a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v49 = a2;
  id v6 = a3;
  theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  obuint64_t j = v5;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v55, v8, v60, 16);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v48 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v56 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v55 + 1) + 8 * i);
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        id v13 = v49;
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v51, v15, v59, 16);
        if (v16)
        {
          uint64_t v20 = v16;
          char v21 = 0;
          uint64_t v22 = *(void *)v52;
          do
          {
            for (uint64_t j = 0; j != v20; ++j)
            {
              if (*(void *)v52 != v22) {
                objc_enumerationMutation(v13);
              }
              uint64_t v24 = objc_msgSend_unsignedLongLongValue(*(void **)(*((void *)&v51 + 1) + 8 * j), v17, v18, v19);
              v21 |= v24 == objc_msgSend_participantId(v12, v25, v26, v27);
            }
            uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v51, v19, v59, 16);
          }
          while (v20);
        }
        else
        {
          char v21 = 0;
        }

        if (objc_msgSend_count(v6, v28, v29, v30))
        {
          unint64_t v33 = 0;
          do
          {
            uint64_t v34 = objc_msgSend_objectAtIndexedSubscript_(v6, v31, v33, v32);
            uint64_t v38 = objc_msgSend_unsignedLongLongValue(v34, v35, v36, v37);
            BOOL v42 = v38 == objc_msgSend_participantId(v12, v39, v40, v41);

            v21 |= v42;
            ++v33;
          }
          while (objc_msgSend_count(v6, v43, v44, v45) > v33);
        }
        if ((v21 & 1) == 0 && theArray && v12) {
          CFArrayAppendValue(theArray, v12);
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v55, v32, v60, 16);
    }
    while (v10);
  }

  return theArray;
}

CFMutableDictionaryRef ProtoUtilProcessLeftParticipants(void *a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_19DAF0C70(a1, a2, a3);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  obuint64_t j = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v48, v5, v53, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v42 = *(void *)v49;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v49 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend_participantId(v12, v7, v8, v9);
        uint64_t v17 = objc_msgSend_clientContextBlob(v12, v14, v15, v16);
        char v21 = objc_msgSend_materialInfos(v17, v18, v19, v20);
        uint64_t v22 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v23 = v21;
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v44, v25, v52, 16);
        if (v26)
        {
          uint64_t v30 = v26;
          uint64_t v31 = *(void *)v45;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v45 != v31) {
                objc_enumerationMutation(v23);
              }
              unint64_t v33 = objc_msgSend_materialContent(*(void **)(*((void *)&v44 + 1) + 8 * j), v27, v28, v29);
              uint64_t v34 = v33;
              if (v22 && v33) {
                CFArrayAppendValue(v22, v33);
              }
            }
            uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v44, v29, v52, 16);
          }
          while (v30);
        }

        double v37 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v35, v13, v36);
        objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, (uint64_t)v22, v39, v37);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v48, v9, v53, 16);
    }
    while (v10);
  }

  return Mutable;
}

__CFArray *sub_19DAF1144(void *a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v49 = a2;
  id v6 = a3;
  theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  obuint64_t j = v5;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v55, v8, v60, 16);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v48 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v56 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v55 + 1) + 8 * i);
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        id v13 = v49;
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v51, v15, v59, 16);
        if (v16)
        {
          uint64_t v20 = v16;
          char v21 = 0;
          uint64_t v22 = *(void *)v52;
          do
          {
            for (uint64_t j = 0; j != v20; ++j)
            {
              if (*(void *)v52 != v22) {
                objc_enumerationMutation(v13);
              }
              uint64_t v24 = objc_msgSend_unsignedLongLongValue(*(void **)(*((void *)&v51 + 1) + 8 * j), v17, v18, v19);
              v21 |= v24 == objc_msgSend_participantId(v12, v25, v26, v27);
            }
            uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v51, v19, v59, 16);
          }
          while (v20);
        }
        else
        {
          char v21 = 0;
        }

        if (objc_msgSend_count(v6, v28, v29, v30))
        {
          unint64_t v33 = 0;
          do
          {
            uint64_t v34 = objc_msgSend_objectAtIndexedSubscript_(v6, v31, v33, v32);
            uint64_t v38 = objc_msgSend_unsignedLongLongValue(v34, v35, v36, v37);
            BOOL v42 = v38 == objc_msgSend_participantId(v12, v39, v40, v41);

            v21 |= v42;
            ++v33;
          }
          while (objc_msgSend_count(v6, v43, v44, v45) > v33);
        }
        if ((v21 & 1) != 0 && theArray && v12) {
          CFArrayAppendValue(theArray, v12);
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v55, v32, v60, 16);
    }
    while (v10);
  }

  return theArray;
}

CFMutableDictionaryRef ProtoUtilProcessjoinedParticipants(void *a1, void *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_19DAF1144(a1, a2, a3);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  obuint64_t j = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v48, v5, v53, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v42 = *(void *)v49;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v49 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend_participantId(v12, v7, v8, v9);
        uint64_t v17 = objc_msgSend_clientContextBlob(v12, v14, v15, v16);
        char v21 = objc_msgSend_materialInfos(v17, v18, v19, v20);
        uint64_t v22 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v23 = v21;
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v44, v25, v52, 16);
        if (v26)
        {
          uint64_t v30 = v26;
          uint64_t v31 = *(void *)v45;
          do
          {
            for (uint64_t j = 0; j != v30; ++j)
            {
              if (*(void *)v45 != v31) {
                objc_enumerationMutation(v23);
              }
              unint64_t v33 = objc_msgSend_materialContent(*(void **)(*((void *)&v44 + 1) + 8 * j), v27, v28, v29);
              uint64_t v34 = v33;
              if (v22 && v33) {
                CFArrayAppendValue(v22, v33);
              }
            }
            uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v44, v29, v52, 16);
          }
          while (v30);
        }

        double v37 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v35, v13, v36);
        objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, (uint64_t)v22, v39, v37);
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v48, v9, v53, 16);
    }
    while (v10);
  }

  return Mutable;
}

id ProtoUtilProcessActiveParticipantsFromInfo(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int active = objc_msgSend_activeParticipantsCount(v1, v2, v3, v4);
  double v9 = (const char *)objc_msgSend_activeParticipants(v1, v6, v7, v8);
  int v11 = sub_19DAF0A24(active, v9, v10);
  uint64_t v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109378;
    int v15 = active;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "received %d active participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"received %d active participants: %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"received %d active participants: %@");
      }
    }
  }

  return v11;
}

id ProtoUtilProcessActiveLightweightParticipantsFromInfo(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int active = objc_msgSend_activeLightweightParticipantsCount(v1, v2, v3, v4);
  double v9 = (const char *)objc_msgSend_activeLightweightParticipants(v1, v6, v7, v8);
  int v11 = sub_19DAF0A24(active, v9, v10);
  uint64_t v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109378;
    int v15 = active;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "received %d active lightweight participants: %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"received %d active lightweight participants: %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"received %d active lightweight participants: %@");
      }
    }
  }

  return v11;
}

__CFDictionary *ProtoUtilProcessParticipantUpdate(void *a1, int a2, int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v10 = objc_msgSend_sessionStateCounter(v5, v7, v8, v9);
  uint64_t v13 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v11, v10, v12);
  if (v13) {
    CFDictionarySetValue(v6, @"ids-stun-attribute-session-state-counter", v13);
  }

  unsigned __int16 v17 = objc_msgSend_operationFlags(v5, v14, v15, v16);
  double v20 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v18, v17, v19);
  if (v20) {
    CFDictionarySetValue(v6, @"ids-stun-attribute-session-state-type", v20);
  }

  uint64_t v24 = objc_msgSend_participantIdListsCount(v5, v21, v22, v23);
  uint64_t v28 = (uint64_t *)objc_msgSend_participantIdLists(v5, v25, v26, v27);
  for (uint64_t i = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]); v24; --v24)
  {
    if (i)
    {
      double v32 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v29, *v28, v31);

      if (v32)
      {
        unint64_t v33 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v29, *v28, v31);
        CFArrayAppendValue(i, v33);
      }
    }
    ++v28;
  }
  uint64_t v34 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    long long v44 = i;
    _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "receive participantIDs: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v42 = i;
      _IDSLogTransport(@"GL", @"IDS", @"receive participantIDs: %@");
      if (_IDSShouldLog())
      {
        uint64_t v42 = i;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive participantIDs: %@");
      }
    }
  }
  uint64_t v35 = i;
  if (v35)
  {
    CFDictionarySetValue(v6, @"ids-stun-attribute-enc-ParticipantIDs", v35);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB80150();
  }

  if (a2)
  {
    unsigned __int16 v38 = 4;
  }
  else if ((a3 - 7) >= 3)
  {
    double v39 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      long long v44 = (__CFArray *)a3;
      _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "ProtoUtilProcessParticipantUpdate: unknown messageType: %ld", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v42 = (__CFArray *)a3;
        _IDSLogTransport(@"GL", @"IDS", @"ProtoUtilProcessParticipantUpdate: unknown messageType: %ld");
        if (_IDSShouldLog())
        {
          uint64_t v42 = (__CFArray *)a3;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"ProtoUtilProcessParticipantUpdate: unknown messageType: %ld");
        }
      }
    }
    unsigned __int16 v38 = 0;
  }
  else
  {
    unsigned __int16 v38 = (2 * (a3 - 7)) | 1;
  }
  uint64_t v40 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v36, v38, v37, v42);
  if (v40)
  {
    CFDictionarySetValue(v6, @"ids-stun-message-type", v40);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB800BC();
  }

  return v6;
}

void sub_19DAF1E28()
{
  uint64_t v0 = objc_alloc_init(IDSStunRelayInterfaceInfoController);
  id v1 = (void *)qword_1EB2BB788;
  qword_1EB2BB788 = (uint64_t)v0;
}

uint64_t IDSQRProtoGoAwayIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2) {
        break;
      }
      if (v17 == 3)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
LABEL_39:
        double v32 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_50;
      }
      if (v17 != 15)
      {
LABEL_40:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
      }
      char v20 = 0;
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      *(unsigned char *)(a1 + 40) |= 1u;
      while (1)
      {
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
        *(void *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0) {
          goto LABEL_43;
        }
        v20 += 7;
        BOOL v14 = v21++ >= 9;
        if (v14)
        {
          uint64_t v22 = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v22 = 0;
      }
LABEL_45:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v22;
LABEL_50:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 == 1)
    {
      char v26 = 0;
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      while (1)
      {
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          goto LABEL_47;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v2_Block_object_dispose(&STACK[0x300], 8) = 0;
      }
LABEL_49:
      *(_DWORD *)(a1 + 16) = v28;
      goto LABEL_50;
    }
    if (v17 != 2) {
      goto LABEL_40;
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 24;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoInfoInfoReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DAF5668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_19DAF582C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  if (!qword_1E944F3A0)
  {
    v9[1] = (void *)MEMORY[0x1E4F143A8];
    v9[2] = (void *)3221225472;
    v9[3] = sub_19DAF5958;
    v9[4] = &unk_1E5970A28;
    void v9[5] = v9;
    long long v10 = xmmword_1E5975200;
    uint64_t v11 = 0;
    qword_1E944F3A0 = _sl_dlopen();
  }
  if (!qword_1E944F3A0) {
    sub_19DB805A8(v9, a2, a3, a4);
  }
  if (v9[0]) {
    free(v9[0]);
  }
  Class result = objc_getClass("KTVerifierResult");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_19DB80628(v8, (uint64_t)result, v6, v7);
  }
  qword_1E944F3B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19DAF5958()
{
  uint64_t result = _sl_dlopen();
  qword_1E944F3A0 = result;
  return result;
}

uint64_t IDSQRProtoAllocBindResponseReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_61;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_109:
        uint64_t v75 = 64;
        goto LABEL_130;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 136;
        goto LABEL_61;
      case 4u:
        char v26 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
        objc_msgSend_addPeerPublishedStreams_(a1, v27, (uint64_t)v26, v28);
        if (!PBReaderPlaceMark() || (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_153;
        }
        goto LABEL_104;
      case 5u:
        if (v16 != 2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          while (1)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v81 = *(unsigned char *)(*(void *)(a2 + *v7) + v80);
            *(void *)(a2 + v79) = v80 + 1;
            v78 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              BOOL v14 = v77++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_148;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_148:
          PBRepeatedUInt32Add();
          goto LABEL_131;
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_43;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          PBRepeatedUInt32Add();
        }
        goto LABEL_105;
      case 6u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v22 = 0;
        a1[144] |= 4u;
        while (2)
        {
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x300], 8) = v39 + 1;
            v22 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              BOOL v14 = v37++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_113:
        uint64_t v75 = 84;
        goto LABEL_130;
      case 7u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v22 = 0;
        a1[144] |= 1u;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v22 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              BOOL v14 = v42++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_117:
        uint64_t v75 = 68;
        goto LABEL_130;
      case 9u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 120;
LABEL_61:
        long long v46 = *(void **)&a1[v19];
        *(void *)&a1[v19] = v18;

        goto LABEL_131;
      case 0xAu:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            while (1)
            {
              uint64_t v50 = *v3;
              unint64_t v51 = *(void *)(a2 + v50);
              if (v51 == -1 || v51 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v51 + 1;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                BOOL v14 = v48++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_74;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
            PBRepeatedUInt64Add();
          }
LABEL_105:
          PBReaderRecallMark();
        }
        else
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          while (1)
          {
            uint64_t v85 = *v3;
            unint64_t v86 = *(void *)(a2 + v85);
            if (v86 == -1 || v86 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              BOOL v14 = v83++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_150;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_150:
          PBRepeatedUInt64Add();
        }
        goto LABEL_131;
      case 0xBu:
        char v26 = objc_alloc_init(IDSQRProtoQuicConnectionInfo);
        objc_msgSend_addQuicConnectionInfo_(a1, v53, (uint64_t)v26, v54);
        if (!PBReaderPlaceMark() || (IDSQRProtoQuicConnectionInfoReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_153;
        }
        goto LABEL_104;
      case 0xCu:
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v22 = 0;
        a1[144] |= 8u;
        while (2)
        {
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 1;
            v22 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              BOOL v14 = v56++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_121:
        uint64_t v75 = 96;
        goto LABEL_130;
      case 0xFu:
        char v26 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v60, (uint64_t)v26, v61);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v26, a2) & 1) == 0) {
          goto LABEL_153;
        }
        goto LABEL_104;
      case 0x10u:
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v22 = 0;
        a1[144] |= 2u;
        while (2)
        {
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(a2 + *v7) + v65);
            *(void *)(a2 + v64) = v65 + 1;
            v22 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              v62 += 7;
              BOOL v14 = v63++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_125:
        uint64_t v75 = 80;
        goto LABEL_130;
      case 0x11u:
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v22 = 0;
        a1[144] |= 0x10u;
        while (2)
        {
          uint64_t v69 = *v3;
          unint64_t v70 = *(void *)(a2 + v69);
          if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(a2 + *v7) + v70);
            *(void *)(a2 + v69) = v70 + 1;
            v22 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              v67 += 7;
              BOOL v14 = v68++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_129:
        uint64_t v75 = 128;
LABEL_130:
        *(_DWORD *)&a1[v75] = v22;
        goto LABEL_131;
      case 0x19u:
        char v26 = objc_alloc_init(IDSQRProtoChannelExperiment);
        objc_msgSend_addActiveExperiments_(a1, v72, (uint64_t)v26, v73);
        if PBReaderPlaceMark() && (IDSQRProtoChannelExperimentReadFrom((uint64_t)v26, a2, v74))
        {
LABEL_104:
          PBReaderRecallMark();

LABEL_131:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_153:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_131;
    }
  }
}

uint64_t sub_19DAFADD4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_event_time_, *(void *)(a1 + 32), *(double *)(a1 + 40));
}

id sub_19DAFDCEC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  id v5 = (void *)MEMORY[0x1E4F6C400];
  uint64_t v6 = objc_msgSend_ephemeralSessionConfiguration(MEMORY[0x1E4F290F0], a2, a3, a4);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v11 = objc_msgSend_requiresIDSHost(*(void **)(a1 + 40), v8, v9, v10);
  BOOL v14 = objc_msgSend_sessionWithConfiguration_queue_requiresIDSHost_(v5, v12, (uint64_t)v6, v13, v7, v11);

  return v14;
}

id sub_19DAFDD6C(uint64_t a1, void *a2)
{
  id v2 = (objc_class *)MEMORY[0x1E4F6C318];
  id v3 = a2;
  id v4 = [v2 alloc];
  uint64_t v7 = objc_msgSend_initWithRemoteHost_delegate_(v4, v5, 0, v6, v3);

  return v7;
}

void sub_19DAFDDC8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained(v2);
  sub_19DAFDE2C(WeakRetained, v3, 1, 1);
}

void sub_19DAFDE2C(os_unfair_lock_s *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  if (a1)
  {
    uint64_t v11 = objc_msgSend_queue(a1, v7, v8, v10);
    dispatch_assert_queue_V2(v11);

    if (v9)
    {
      if (a3) {
        a3 = _IDSRunningInDaemon();
      }
      int v15 = objc_msgSend_validator(a1, v12, v13, v14);
      id v51 = 0;
      uint64_t v18 = objc_msgSend_trustedContentsFromRawContents_shouldReport_withError_(v15, v16, (uint64_t)v9, v17, a3, &v51);
      uint64_t v19 = v51;

      if (!v18 || v19)
      {
        long long v46 = objc_msgSend_config(a1, v20, v21, v22);
        uint64_t v28 = objc_msgSend_logCategory(v46, v47, v48, v49);

        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v50 = objc_opt_class();
          *(_DWORD *)kevent buf = 138412802;
          uint64_t v53 = v50;
          __int16 v54 = 2048;
          char v55 = a1;
          __int16 v56 = 2112;
          uint64_t v57 = v19;
          _os_log_impl(&dword_19D9BE000, (os_log_t)v28, OS_LOG_TYPE_DEFAULT, "<%@:%p> content update not validated {cacheValidationError: %@}", buf, 0x20u);
        }
      }
      else
      {
        os_unfair_lock_lock(a1 + 2);
        objc_msgSend_setLoadedRawContents_(a1, v23, (uint64_t)v9, v24);
        uint64_t v28 = objc_msgSend_contentsUpdatedBlock(a1, v25, v26, v27);
        os_unfair_lock_unlock(a1 + 2);
        if (!a4)
        {
          uint64_t v32 = objc_msgSend_cacheLoader(a1, v29, v30, v31);
          id v35 = (id)objc_msgSend_writeRawContents_(v32, v33, (uint64_t)v9, v34);
        }
        if (v28) {
          (*(void (**)(uint64_t, NSObject *, uint64_t))(v28 + 16))(v28, v18, a4);
        }
        char v36 = objc_msgSend_config(a1, v29, v30, v31);
        char v40 = objc_msgSend_logCategory(v36, v37, v38, v39);

        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = objc_opt_class();
          *(_DWORD *)kevent buf = 138412802;
          uint64_t v53 = v41;
          __int16 v54 = 2048;
          char v55 = a1;
          __int16 v56 = 2112;
          uint64_t v57 = v18;
          _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "<%@:%p> content update loaded {loadedContents: %@}", buf, 0x20u);
        }
      }
    }
    else
    {
      unsigned int v42 = objc_msgSend_config(a1, v12, v13, v14);
      uint64_t v19 = objc_msgSend_logCategory(v42, v43, v44, v45);

      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_19DB80C98((uint64_t)a1, v19);
      }
    }
  }
}

void sub_19DAFE0EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = (id)objc_msgSend_updateContentsIfPossibleShouldForce_(WeakRetained, v1, 0, v2);
}

void sub_19DAFE3DC(uint64_t a1)
{
  locatiouint64_t n = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v5 = objc_msgSend_networkLoader(*(void **)(a1 + 32), v2, v3, v4);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = sub_19DAFE4C8;
  v8[3] = &unk_1E59752E0;
  void v8[4] = *(void *)(a1 + 32);
  objc_copyWeak(&v9, &location);
  objc_msgSend_loadBagIfPossibleWithCompletion_(v5, v6, (uint64_t)v8, v7);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void sub_19DAFE4A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19DAFE4C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v8 = a3;
  if (v8)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    double v10 = (uint64_t *)(a1 + 32);
    unint64_t v12 = objc_msgSend_config(v11, v6, v7, v9);
    int v16 = objc_msgSend_logCategory(v12, v13, v14, v15);

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_19DB80D34(v10, (uint64_t)v8, v16);
    }
  }
  else
  {
    id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 40));
    sub_19DAFDE2C(WeakRetained, v5, 1, 0);
  }
}

uint64_t IDSQRProtoSessionInfoResponseReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___IDSEndpointCapabilities__supportsPeopleRequestMessagesV3;
    id v8 = (int *)MEMORY[0x1E4F940B8];
    double v9 = &OBJC_IVAR___IDSEndpointCapabilities__supportsPeopleRequestMessagesV3;
    double v10 = &OBJC_IVAR___IDSEndpointCapabilities__supportsPeopleRequestMessagesV3;
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *v3;
        unint64_t v15 = *(void *)(a2 + v14);
        if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
        *(void *)(a2 + v14) = v15 + 1;
        v13 |= (unint64_t)(v16 & 0x7F) << v11;
        if ((v16 & 0x80) == 0) {
          goto LABEL_12;
        }
        v11 += 7;
        BOOL v17 = v12++ >= 9;
        if (v17)
        {
          unint64_t v13 = 0;
          int v18 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v18 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v13 = 0;
      }
LABEL_14:
      int v19 = v13 & 7;
      if (v18 || v19 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          uint64_t v21 = v10;
          double v22 = v9;
          uint64_t v23 = v7;
          double v24 = objc_alloc_init(IDSQRProtoPeerPublishedStream);
          objc_msgSend_addPeerPublishedStreams_(a1, v25, (uint64_t)v24, v26);
          if PBReaderPlaceMark() && (IDSQRProtoPeerPublishedStreamReadFrom((uint64_t)v24, a2))
          {
            PBReaderRecallMark();

            uint64_t v7 = v23;
            double v9 = v22;
            double v10 = v21;
            goto LABEL_75;
          }

          return 0;
        case 2u:
          if (v19 != 2)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            while (1)
            {
              uint64_t v55 = *v3;
              unint64_t v56 = *(void *)(a2 + v55);
              if (v56 == -1 || v56 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v57 = *(unsigned char *)(*(void *)(a2 + *v8) + v56);
              *(void *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                BOOL v17 = v53++ >= 9;
                if (!v17) {
                  continue;
                }
              }
              goto LABEL_92;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_92:
            PBRepeatedUInt32Add();
            goto LABEL_75;
          }
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            while (1)
            {
              uint64_t v37 = *v3;
              unint64_t v38 = *(void *)(a2 + v37);
              if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v39 = *(unsigned char *)(*(void *)(a2 + *v8) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v17 = v35++ >= 9;
                if (!v17) {
                  continue;
                }
              }
              goto LABEL_42;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
            PBRepeatedUInt32Add();
          }
          goto LABEL_65;
        case 3u:
          if (v19 == 2)
          {
            uint64_t result = PBReaderPlaceMark();
            if (!result) {
              return result;
            }
            while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
            {
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              while (1)
              {
                uint64_t v43 = *v3;
                unint64_t v44 = *(void *)(a2 + v43);
                if (v44 == -1 || v44 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v45 = *(unsigned char *)(*(void *)(a2 + *v8) + v44);
                *(void *)(a2 + v43) = v44 + 1;
                v42 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  BOOL v17 = v41++ >= 9;
                  if (!v17) {
                    continue;
                  }
                }
                goto LABEL_55;
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
              PBRepeatedUInt64Add();
            }
LABEL_65:
            PBReaderRecallMark();
          }
          else
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v60 = 0;
            while (1)
            {
              uint64_t v61 = *v3;
              unint64_t v62 = *(void *)(a2 + v61);
              if (v62 == -1 || v62 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v63 = *(unsigned char *)(*(void *)(a2 + *v8) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v60 |= (unint64_t)(v63 & 0x7F) << v58;
              if (v63 < 0)
              {
                v58 += 7;
                BOOL v17 = v59++ >= 9;
                if (!v17) {
                  continue;
                }
              }
              goto LABEL_94;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_94:
            PBRepeatedUInt64Add();
          }
          goto LABEL_75;
        case 4u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v29 = 0;
          a1[v7[995]] |= 1u;
          while (2)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v8) + v49);
              *(void *)(a2 + v4_Block_object_dispose(&STACK[0x300], 8) = v49 + 1;
              v29 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v17 = v47++ >= 9;
                if (v17)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_73:
          uint64_t v51 = 56;
          goto LABEL_74;
        default:
          if ((v13 >> 3) == 16)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            a1[v7[995]] |= 2u;
            while (1)
            {
              uint64_t v30 = *v3;
              unint64_t v31 = *(void *)(a2 + v30);
              if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
              *(void *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if ((v32 & 0x80) == 0) {
                goto LABEL_67;
              }
              v27 += 7;
              BOOL v17 = v28++ >= 9;
              if (v17)
              {
                LODWORD(v29) = 0;
                goto LABEL_69;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_67:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v29) = 0;
            }
LABEL_69:
            uint64_t v51 = 60;
LABEL_74:
            *(_DWORD *)&a1[v51] = v29;
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
LABEL_75:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoExperimentOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 5)
      {
        uint64_t v24 = PBReaderReadString();
        char v25 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v24;
      }
      else if (v17 == 2)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0) {
            goto LABEL_43;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            uint64_t v28 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 24) = v28 != 0;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoErrorIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 48) |= 2u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_47;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_49;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v19) = 0;
              }
LABEL_49:
              uint64_t v38 = 16;
              goto LABEL_58;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 48) |= 4u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v19 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v19) = 0;
                      goto LABEL_57;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v19) = 0;
              }
LABEL_57:
              uint64_t v38 = 32;
LABEL_58:
              *(_DWORD *)(a1 + v3_Block_object_dispose(&STACK[0x300], 8) = v19;
              goto LABEL_59;
            case 3u:
              uint64_t v34 = PBReaderReadString();
              uint64_t v35 = 40;
              goto LABEL_43;
            case 4u:
              uint64_t v34 = PBReaderReadString();
              uint64_t v35 = 24;
LABEL_43:
              uint64_t v36 = *(void **)(a1 + v35);
              *(void *)(a1 + v35) = v34;

              goto LABEL_59;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 48) |= 1u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_51;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    uint64_t v25 = 0;
                    goto LABEL_53;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
                if (*(unsigned char *)(a2 + *v5)) {
                  uint64_t v25 = 0;
                }
LABEL_53:
                *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_59:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoPutMaterialErrorIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(IDSQRProtoMaterialOwner);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialOwnerReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoMaterialOwnerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            while (1)
            {
              uint64_t v28 = *v3;
              unint64_t v29 = *(void *)(a2 + v28);
              if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x300], 8) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                BOOL v14 = v26++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_39;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          while (1)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_55;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedInt32Add();
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_43;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_45:
        *(void *)(a1 + 32) = v20;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB073AC(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_GlobalLink_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v6, *(void *)(a1 + 40), v7);
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "self participant-id: %@, all participant-ids:%@.", (uint8_t *)&v10, 0x16u);
  }
}

uint64_t IDSQRProtoAllocBindRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 0x20u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_114;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_116;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_114:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_116:
        uint64_t v81 = 128;
        goto LABEL_145;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 72;
        goto LABEL_104;
      case 3u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 64;
        goto LABEL_104;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 172) |= 1u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_120:
        *(void *)(a1 + 32) = v28;
        goto LABEL_146;
      case 5u:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            while (1)
            {
              uint64_t v36 = *v3;
              unint64_t v37 = *(void *)(a2 + v36);
              if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v14 = v34++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_47;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          while (1)
          {
            uint64_t v85 = *v3;
            unint64_t v86 = *(void *)(a2 + v85);
            if (v86 == -1 || v86 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v86 + 1;
            v84 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              BOOL v14 = v83++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_157;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_157:
          PBRepeatedUInt32Add();
        }
        goto LABEL_146;
      case 6u:
        char v39 = objc_alloc_init(IDSQRProtoSubscribedStream);
        objc_msgSend_addSubscribedStreams_((void *)a1, v40, (uint64_t)v39, v41);
        if (!PBReaderPlaceMark() || (IDSQRProtoSubscribedStreamReadFrom((uint64_t)v39, a2) & 1) == 0) {
          goto LABEL_160;
        }
        goto LABEL_112;
      case 7u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + 172) |= 0x80u;
        while (2)
        {
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              BOOL v14 = v43++ >= 9;
              if (v14)
              {
                uint64_t v44 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_124:
        *(unsigned char *)(a1 + 16_Block_object_dispose(&STACK[0x300], 8) = v44 != 0;
        goto LABEL_146;
      case 8u:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 4u;
        while (2)
        {
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 == -1 || v51 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 1;
            v20 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              BOOL v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_128:
        uint64_t v81 = 88;
        goto LABEL_145;
      case 9u:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 2u;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v20 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              BOOL v14 = v54++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_132:
        uint64_t v81 = 48;
        goto LABEL_145;
      case 0xAu:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 8u;
        while (2)
        {
          uint64_t v60 = *v3;
          unint64_t v61 = *(void *)(a2 + v60);
          if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
            *(void *)(a2 + v60) = v61 + 1;
            v20 |= (unint64_t)(v62 & 0x7F) << v58;
            if (v62 < 0)
            {
              v58 += 7;
              BOOL v14 = v59++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_136:
        uint64_t v81 = 92;
        goto LABEL_145;
      case 0xBu:
        char v39 = objc_alloc_init(IDSQRProtoQuicConnectionInfo);
        objc_msgSend_addQuicConnectionInfo_((void *)a1, v63, (uint64_t)v39, v64);
        if (!PBReaderPlaceMark() || (IDSQRProtoQuicConnectionInfoReadFrom((uint64_t)v39, a2) & 1) == 0) {
          goto LABEL_160;
        }
        goto LABEL_112;
      case 0xCu:
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 0x40u;
        while (2)
        {
          uint64_t v67 = *v3;
          unint64_t v68 = *(void *)(a2 + v67);
          if (v68 == -1 || v68 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v69 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
            *(void *)(a2 + v67) = v68 + 1;
            v20 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              BOOL v14 = v66++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_140:
        uint64_t v81 = 144;
        goto LABEL_145;
      case 0xDu:
        char v39 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 56), v39);
        goto LABEL_98;
      case 0xEu:
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 172) |= 0x10u;
        while (2)
        {
          uint64_t v72 = *v3;
          unint64_t v73 = *(void *)(a2 + v72);
          if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v73);
            *(void *)(a2 + v72) = v73 + 1;
            v20 |= (unint64_t)(v74 & 0x7F) << v70;
            if (v74 < 0)
            {
              v70 += 7;
              BOOL v14 = v71++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_144:
        uint64_t v81 = 112;
LABEL_145:
        *(_DWORD *)(a1 + v81) = v20;
        goto LABEL_146;
      case 0xFu:
        char v39 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_((void *)a1, v75, (uint64_t)v39, v76);
LABEL_98:
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v39, a2) & 1) == 0) {
          goto LABEL_160;
        }
        goto LABEL_112;
      case 0x10u:
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 104;
        goto LABEL_104;
      case 0x11u:
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 40;
        goto LABEL_104;
      case 0x12u:
        uint64_t v24 = PBReaderReadData();
        uint64_t v25 = 120;
LABEL_104:
        unsigned int v77 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_146;
      case 0x19u:
        char v39 = objc_alloc_init(IDSQRProtoAllocBindTestOption);
        objc_storeStrong((id *)(a1 + 160), v39);
        if (!PBReaderPlaceMark() || (IDSQRProtoAllocBindTestOptionReadFrom(v39, a2) & 1) == 0) {
          goto LABEL_160;
        }
        goto LABEL_112;
      case 0x1Au:
        char v39 = objc_alloc_init(IDSQRProtoSessionExperiment);
        objc_msgSend_addSessionExperiments_((void *)a1, v78, (uint64_t)v39, v79);
        if PBReaderPlaceMark() && (IDSQRProtoSessionExperimentReadFrom((uint64_t)v39, a2, v80))
        {
LABEL_112:
          PBReaderRecallMark();

LABEL_146:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_160:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_146;
    }
  }
}

uint64_t IDSQRProtoPutMaterialMaterialsReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_19DB0BA68(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  _IMLogString_V();
  uint64_t v8 = _IMLogEventString_V();

  return v8;
}

uint64_t _IDSLog(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  if (IMShouldLog()) {
    uint64_t v9 = _IMLogString_V();
  }
  else {
    uint64_t v9 = 0;
  }
  if (_IMWillLog()) {
    _IMAlwaysLogV();
  }

  return v9;
}

uint64_t _IDSShouldLog()
{
  return IMShouldLog();
}

uint64_t _IDSWarn()
{
  return 1;
}

uint64_t _IDSLogEvent(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_19DB0BA68(a1, v5, v6);
  if (_IMWillLog()) {
    _IMAlwaysLogV();
  }

  return v7;
}

uint64_t _IDSLogV(uint64_t a1, void *a2, void *a3, void *a4)
{
  return _IDSLog(a1, a2, a3, a4);
}

uint64_t _IDSWarnV()
{
  return 1;
}

uint64_t _IDSLogEventV(void *a1, void *a2, void *a3)
{
  return _IDSLogEvent(a1, a2, a3);
}

uint64_t _IDSLogTransport_V(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (IMShouldLog()) {
    uint64_t v8 = _IMLogString_V();
  }
  else {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t _IDSShouldLogTransport()
{
  return IMShouldLog();
}

uint64_t _IDSLogTransport(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (IMShouldLog()) {
    uint64_t v8 = _IMLogString_V();
  }
  else {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t _IDSIsLoggingProfileInstalled()
{
  uint64_t v0 = IMCopyAppValueForKey();
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0) {
    uint64_t v4 = objc_msgSend_BOOLValue(v0, v1, v2, v3);
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_19DB0BFBC()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "CloudKit");
  id v1 = (void *)qword_1E944F6B0;
  qword_1E944F6B0 = (uint64_t)v0;
}

void sub_19DB0C054()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "accountIdentity");
  id v1 = (void *)qword_1E944EEC0;
  qword_1E944EEC0 = (uint64_t)v0;
}

void sub_19DB0C0EC()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "groupCrypto");
  id v1 = (void *)qword_1E944F6C0;
  qword_1E944F6C0 = (uint64_t)v0;
}

void sub_19DB0C130()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Delivery");
  id v1 = (void *)qword_1E944EED0;
  qword_1E944EED0 = (uint64_t)v0;
}

void sub_19DB0C1C8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Delivery-oversized");
  id v1 = (void *)qword_1E944EEE0;
  qword_1E944EEE0 = (uint64_t)v0;
}

void sub_19DB0C260()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Delivery-KeyTransparency");
  id v1 = (void *)qword_1E944F1F8;
  qword_1E944F1F8 = (uint64_t)v0;
}

void sub_19DB0C2F8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDQuery");
  id v1 = (void *)qword_1E944F6D0;
  qword_1E944F6D0 = (uint64_t)v0;
}

void sub_19DB0C390()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "UTunPeer");
  id v1 = (void *)qword_1E944F2A0;
  qword_1E944F2A0 = (uint64_t)v0;
}

void sub_19DB0C428()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "UTunConnection");
  id v1 = (void *)qword_1E944EE40;
  qword_1E944EE40 = (uint64_t)v0;
}

void sub_19DB0C4C0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "LocalDeliveryQueue");
  id v1 = (void *)qword_1E944F6E0;
  qword_1E944F6E0 = (uint64_t)v0;
}

void sub_19DB0C558()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "SPConnection");
  id v1 = (void *)qword_1E944F318;
  qword_1E944F318 = (uint64_t)v0;
}

void sub_19DB0C5F0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "OTRController");
  id v1 = (void *)qword_1E944F6F0;
  qword_1E944F6F0 = (uint64_t)v0;
}

void sub_19DB0C688()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Encryption");
  id v1 = (void *)qword_1E944F700;
  qword_1E944F700 = (uint64_t)v0;
}

void sub_19DB0C720()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "BTLink");
  id v1 = (void *)qword_1E944F710;
  qword_1E944F710 = (uint64_t)v0;
}

void sub_19DB0C7B8()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "UTun");
  id v1 = (void *)qword_1E944F0A0;
  qword_1E944F0A0 = (uint64_t)v0;
}

void sub_19DB0C850()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "DeliveryController");
  id v1 = (void *)qword_1E944F720;
  qword_1E944F720 = (uint64_t)v0;
}

void sub_19DB0C8E8()
{
  os_log_t v0 = os_log_create("com.apple.Registration", "StewieProvisioning");
  id v1 = (void *)qword_1E944F1C8;
  qword_1E944F1C8 = (uint64_t)v0;
}

void sub_19DB0C980()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "StewieMessaging");
  id v1 = (void *)qword_1E944F1B8;
  qword_1E944F1B8 = (uint64_t)v0;
}

void sub_19DB0CA18()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSOffGridMessenger");
  id v1 = (void *)qword_1E944F340;
  qword_1E944F340 = (uint64_t)v0;
}

void sub_19DB0CAB0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSOffGridStateManager");
  id v1 = (void *)qword_1E944F3B8;
  qword_1E944F3B8 = (uint64_t)v0;
}

void sub_19DB0CB48()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSOffGridStateManager-oversize");
  id v1 = (void *)qword_1E944F1D8;
  qword_1E944F1D8 = (uint64_t)v0;
}

void sub_19DB0CBE0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSSKStatusClient");
  id v1 = (void *)qword_1E944F178;
  qword_1E944F178 = (uint64_t)v0;
}

void sub_19DB0CC78()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Opportunistic");
  id v1 = (void *)qword_1E944F0E8;
  qword_1E944F0E8 = (uint64_t)v0;
}

void sub_19DB0CD10()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "BonjourDeliveryController");
  id v1 = (void *)qword_1E944F730;
  qword_1E944F730 = (uint64_t)v0;
}

void sub_19DB0CDA8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "utilities");
  id v1 = (void *)qword_1EB2BB758;
  qword_1EB2BB758 = (uint64_t)v0;
}

void sub_19DB0CE40()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IPsecLink");
  id v1 = (void *)qword_1E944F740;
  qword_1E944F740 = (uint64_t)v0;
}

void sub_19DB0CED8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "xpc");
  id v1 = (void *)qword_1EB2BB7E8;
  qword_1EB2BB7E8 = (uint64_t)v0;
}

void sub_19DB0CF70()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSSession");
  id v1 = (void *)qword_1E944F750;
  qword_1E944F750 = (uint64_t)v0;
}

void sub_19DB0D008()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSDSession");
  id v1 = (void *)qword_1E944F760;
  qword_1E944F760 = (uint64_t)v0;
}

void sub_19DB0D0A0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "GroupStatusNotification-oversize");
  id v1 = (void *)qword_1E944F770;
  qword_1E944F770 = (uint64_t)v0;
}

void sub_19DB0D138()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "QRAllocator");
  id v1 = (void *)qword_1E944EE30;
  qword_1E944EE30 = (uint64_t)v0;
}

void sub_19DB0D1D0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "QRAllocator-oversized");
  id v1 = (void *)qword_1E944F270;
  qword_1E944F270 = (uint64_t)v0;
}

void sub_19DB0D268()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "Stun");
  id v1 = (void *)qword_1E944F290;
  qword_1E944F290 = (uint64_t)v0;
}

void sub_19DB0D300()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "SME");
  id v1 = (void *)qword_1E944F780;
  qword_1E944F780 = (uint64_t)v0;
}

void sub_19DB0D398()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "SME-oversize");
  id v1 = (void *)qword_1E944F790;
  qword_1E944F790 = (uint64_t)v0;
}

void sub_19DB0D430()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "Metrics");
  id v1 = (void *)qword_1E944F7A0;
  qword_1E944F7A0 = (uint64_t)v0;
}

void sub_19DB0D4C8()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "GL");
  id v1 = (void *)qword_1E944F220;
  qword_1E944F220 = (uint64_t)v0;
}

void sub_19DB0D560()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "GL-oversize");
  id v1 = (void *)qword_1E944F230;
  qword_1E944F230 = (uint64_t)v0;
}

void sub_19DB0D5F8()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "FTGL");
  id v1 = (void *)qword_1E944F7B0;
  qword_1E944F7B0 = (uint64_t)v0;
}

void sub_19DB0D690()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "GFTGL");
  id v1 = (void *)qword_1E944F7C0;
  qword_1E944F7C0 = (uint64_t)v0;
}

void sub_19DB0D728()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "NonFTGL");
  id v1 = (void *)qword_1E944F260;
  qword_1E944F260 = (uint64_t)v0;
}

void sub_19DB0D7C0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "SessionController");
  id v1 = (void *)qword_1E944F7D0;
  qword_1E944F7D0 = (uint64_t)v0;
}

void sub_19DB0D858()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "RealTimeEncryption");
  id v1 = (void *)qword_1E944F7E0;
  qword_1E944F7E0 = (uint64_t)v0;
}

void sub_19DB0D8F0()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "RealTimeEncryption-oversize");
  id v1 = (void *)qword_1E944F7F0;
  qword_1E944F7F0 = (uint64_t)v0;
}

void sub_19DB0D988()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "StableEncryption");
  id v1 = (void *)qword_1E944F800;
  qword_1E944F800 = (uint64_t)v0;
}

void sub_19DB0DA20()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "GroupSessionDataCryptor");
  id v1 = (void *)qword_1E944F810;
  qword_1E944F810 = (uint64_t)v0;
}

void sub_19DB0DAB8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSDMessageStore");
  id v1 = (void *)qword_1E944EE10;
  qword_1E944EE10 = (uint64_t)v0;
}

void sub_19DB0DB50()
{
  os_log_t v0 = os_log_create("com.apple.Registration", "KeyTransparency");
  id v1 = (void *)qword_1E944F328;
  qword_1E944F328 = (uint64_t)v0;
}

void sub_19DB0DBE8()
{
  os_log_t v0 = os_log_create("com.apple.Registration", "FeatureToggler");
  id v1 = (void *)qword_1E944F820;
  qword_1E944F820 = (uint64_t)v0;
}

void sub_19DB0DC80()
{
  os_log_t v0 = os_log_create("com.apple.magnetpacketlog", "IDS");
  id v1 = (void *)qword_1EB2BB7D0;
  qword_1EB2BB7D0 = (uint64_t)v0;
}

void sub_19DB0DD18()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSUDPLink");
  id v1 = (void *)qword_1E944F830;
  qword_1E944F830 = (uint64_t)v0;
}

void sub_19DB0DDB0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "IDSNWLink");
  id v1 = (void *)qword_1E944F240;
  qword_1E944F240 = (uint64_t)v0;
}

void sub_19DB0DE48()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "QRProto");
  id v1 = (void *)qword_1E944F840;
  qword_1E944F840 = (uint64_t)v0;
}

void sub_19DB0DEE0()
{
  os_log_t v0 = os_log_create("com.apple.Transport", "QRProto-oversize");
  id v1 = (void *)qword_1E944F280;
  qword_1E944F280 = (uint64_t)v0;
}

void sub_19DB0DF78()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSInterface");
  id v1 = (void *)qword_1E944F850;
  qword_1E944F850 = (uint64_t)v0;
}

void sub_19DB0E010()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "ConnectivityMonitor");
  id v1 = (void *)qword_1E944F860;
  qword_1E944F860 = (uint64_t)v0;
}

void sub_19DB0E0A8()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "TransportLevelAgent");
  id v1 = (void *)qword_1E944F120;
  qword_1E944F120 = (uint64_t)v0;
}

void sub_19DB0E0EC()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "Multiplexer");
  id v1 = (void *)qword_1E944EE20;
  qword_1E944EE20 = (uint64_t)v0;
}

void sub_19DB0E184()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSServerMessaging");
  id v1 = (void *)qword_1E944F870;
  qword_1E944F870 = (uint64_t)v0;
}

void sub_19DB0E21C()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "ClientChannel");
  id v1 = (void *)qword_1E944F880;
  qword_1E944F880 = (uint64_t)v0;
}

void sub_19DB0E2B4()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSNexusAgent");
  id v1 = (void *)qword_1E944F890;
  qword_1E944F890 = (uint64_t)v0;
}

void sub_19DB0E34C()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSNexusManager");
  id v1 = (void *)qword_1E944F0F0;
  qword_1E944F0F0 = (uint64_t)v0;
}

void sub_19DB0E3E4()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSFirewall");
  id v1 = (void *)qword_1E944F148;
  qword_1E944F148 = (uint64_t)v0;
}

void sub_19DB0E47C()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "NWPathUtils");
  id v1 = (void *)qword_1E944F8A0;
  qword_1E944F8A0 = (uint64_t)v0;
}

void sub_19DB0E514()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "GroupSessionKV");
  id v1 = (void *)qword_1E944F8B0;
  qword_1E944F8B0 = (uint64_t)v0;
}

void sub_19DB0E5AC()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "System");
  id v1 = (void *)qword_1E944F8C0;
  qword_1E944F8C0 = (uint64_t)v0;
}

void sub_19DB0E644()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "SimulatorProxy");
  id v1 = (void *)qword_1E944F8D0;
  qword_1E944F8D0 = (uint64_t)v0;
}

void sub_19DB0E6DC()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "ContactsUtilities");
  id v1 = (void *)qword_1E944F210;
  qword_1E944F210 = (uint64_t)v0;
}

void sub_19DB0E774()
{
  os_log_t v0 = os_log_create("com.apple.IDS", "IDSPinnedIdentity");
  id v1 = (void *)qword_1E944F350;
  qword_1E944F350 = (uint64_t)v0;
}

void sub_19DB0E80C()
{
  os_log_t v0 = os_log_create((const char *)*MEMORY[0x1E4F6C838], "PeerLookup_DBCache");
  id v1 = (void *)qword_1E944F1E8;
  qword_1E944F1E8 = (uint64_t)v0;
}

uint64_t IDSQRProtoUnAllocBindRequestReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSShouldPowerLog(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_6;
  }
  if (qword_1E944F118 != -1) {
    dispatch_once(&qword_1E944F118, &unk_1EEFCD758);
  }
  if (off_1E944F110) {
    uint64_t v2 = off_1E944F110(13, v1);
  }
  else {
LABEL_6:
  }
    uint64_t v2 = 0;

  return v2;
}

void *sub_19DB0F228()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("PLShouldLogRegisteredEvent", @"PowerLog");
  off_1E944F110 = result;
  return result;
}

void IDSPowerLogDictionary(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v8 = v4;
  if (!v3 || !v4)
  {
    unint64_t v12 = objc_msgSend_utilities(IDSFoundationLog, v5, v6, v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_19DB80E8C(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_14;
  }
  if (!IDSShouldPowerLog(v3))
  {
    unint64_t v12 = objc_msgSend_utilities(IDSFoundationLog, v9, v10, v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_19DB80E54(v12, v20, v21, v22, v23, v24, v25, v26);
    }
    goto LABEL_14;
  }
  if (qword_1E944F108 != -1) {
    dispatch_once(&qword_1E944F108, &unk_1EEFCE278);
  }
  if (!off_1E944F100)
  {
    unint64_t v12 = objc_msgSend_utilities(IDSFoundationLog, v9, v10, v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_19DB80E1C(v12, v27, v28, v29, v30, v31, v32, v33);
    }
LABEL_14:

    goto LABEL_15;
  }
  off_1E944F100(13, v3, v8, 0);
LABEL_15:
}

void *sub_19DB0F380()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("PLLogTimeSensitiveRegisteredEvent", @"PowerLog");
  off_1E944F100 = result;
  return result;
}

uint64_t IDSQRProtoInfoRequestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadData();
        uint64_t v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoPutMaterialPutMaterialReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DB11F6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = *(void **)(a1 + 32);
  id v9 = a4;
  objc_msgSend_pnrReqList(v5, v6, v7, v8);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

BOOL IDSQRProtoSessionInfoSessionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t IDSDebuggingShouldFakeBadSIM(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking bad SIM, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakeSMSCharge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking SMS charge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakePhoneNumberChallenge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking phone number challenge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldFakeEmailChallenge(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking email challenge, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingFakeIdentityRegeneration(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking identity regeneration, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingShouldForcePhoneRepairTimer(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    char v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Override phone repair timer, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

double IDSDebuggingPhoneRepairTimerOverride(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  double v13 = 0.0;
  if (isInternalInstall && IDSDebuggingShouldForcePhoneRepairTimer(v12, v9, v10, v11)) {
    return (double)IMGetDomainIntForKey();
  }
  return v13;
}

uint64_t IDSDebuggingShouldOverrideGDRResponseCode(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    double v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Faking GDR response code, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

uint64_t IDSDebuggingGDRReponseCodeOverride(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t v11 = IMGetDomainIntForKey();
  if (v11 >= 1)
  {
    double v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v9, v10, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 134217984;
      uint64_t v16 = v11;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Override GDR response code to %ld !! ***********", (uint8_t *)&v15, 0xCu);
    }
  }
  return v11;
}

uint64_t IDSDebuggingShouldPrintBagData(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a3, a4, a1);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (!isInternalInstall) {
    return 0;
  }
  uint64_t result = IMGetDomainBoolForKey();
  if (result)
  {
    double v13 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v10, v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "*********** Printing bag data, switch is ON !! ***********", v14, 2u);
    }

    return 1;
  }
  return result;
}

BOOL IDSQRProtoStatsStatsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  uint64_t v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

BOOL _IDSIsValidPushPriority(uint64_t a1)
{
  return a1 == 5 || a1 == 10;
}

BOOL _IDSIsValidSendMode(unint64_t a1)
{
  return a1 < 4;
}

BOOL _IDSIsValidWakingPushPriority(unint64_t a1)
{
  return a1 < 3;
}

id IDSGetUUIDData(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && (id v3 = v1, (v7 = (const char *)objc_msgSend_UTF8String(v3, v4, v5, v6)) != 0))
  {
    memset(uu, 170, sizeof(uu));
    uuid_parse(v7, uu);
    jw_uuid_to_data();
    id v8 = 0;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id IDSGetUUIDDataFromNSUUID(void *a1, const char *a2, double a3)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    objc_msgSend_getUUIDBytes_(a1, a2, (uint64_t)v7, a3);
    id v3 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    a1 = objc_msgSend_initWithBytes_length_(v3, v4, (uint64_t)v7, v5, 16);
  }
  return a1;
}

__CFString *_IDSStringFromIDSRegistrationStatus(int a1)
{
  if ((a1 + 1) > 6) {
    return @"Unknown";
  }
  else {
    return off_1E59755D8[a1 + 1];
  }
}

__CFString *IDSEncryptionTypeStringFromEncryptionType(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      id v1 = @"otr";
      break;
    case 1:
      uint64_t v2 = IDSMPLegacyIdentityIdentifier;
      goto LABEL_10;
    case 2:
      id v1 = @"none";
      break;
    case 3:
      id v1 = @"engram";
      break;
    case 4:
      uint64_t v2 = IDSNGMDeviceIdentityIdentifier;
      goto LABEL_10;
    case 5:
      uint64_t v2 = IDSSecondaryIdentityIdentifier;
      goto LABEL_10;
    case 6:
      uint64_t v2 = &IDSPaddyIdentityIdentifier;
LABEL_10:
      id v1 = *v2;
      break;
    default:
      id v1 = 0;
      break;
  }
  return v1;
}

uint64_t IDSEncryptionTypeFromEncryptionTypeString(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (objc_msgSend_isEqualToString_(v1, v2, @"otr", v3))
  {
    uint64_t v6 = 0;
  }
  else if (objc_msgSend_isEqualToString_(v1, v4, @"pair", v5))
  {
    uint64_t v6 = 1;
  }
  else if (objc_msgSend_isEqualToString_(v1, v7, @"pair-ec", v8))
  {
    uint64_t v6 = 4;
  }
  else if (objc_msgSend_isEqualToString_(v1, v9, @"pair-tetra", v10))
  {
    uint64_t v6 = 5;
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(v1, v11, @"none", v12) & 1) == 0)
    {
      if (objc_msgSend_isEqualToString_(v1, v13, @"engram", v14))
      {
        uint64_t v6 = 3;
        goto LABEL_15;
      }
      if (objc_msgSend_isEqualToString_(v1, v15, @"paddy", v16))
      {
        uint64_t v6 = 6;
        goto LABEL_15;
      }
      if (v1)
      {
        unsigned int v18 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)kevent buf = 138412290;
          id v20 = v1;
          _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_ERROR, "Invalid encryption type found -- ignoring {encryptionType: %@}", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          _IDSWarnV();
          _IDSLogV(0, @"IDSFoundation", @"Warning", @"Invalid encryption type found -- ignoring {encryptionType: %@}");
          _IDSLogTransport(@"Warning", @"IDS", @"Invalid encryption type found -- ignoring {encryptionType: %@}");
        }
      }
    }
    uint64_t v6 = 2;
  }
LABEL_15:

  return v6;
}

uint64_t _IDSDaemonIsRunning()
{
  if (qword_1E944F8E0 != -1) {
    dispatch_once(&qword_1E944F8E0, &unk_1EEFCE638);
  }
  return byte_1E944F8EC;
}

void sub_19DB13BC8()
{
  IMUserScopedNotification();
  os_log_t v0 = im_primary_queue();
  im_notify_register_dispatch();

  byte_1E944F8EC = 0;
}

void sub_19DB13C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  byte_1E944F8EC = a3 != 0;
}

uint64_t IDSIsScreenSharingRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (@"com.apple.private.alloy.invitation.screensharing" == a1) {
    return 1;
  }
  else {
    return objc_msgSend_isEqualToString_(a1, a2, @"com.apple.private.alloy.invitation.screensharing", a3);
  }
}

uint64_t IDSIsCallingRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (@"Calling" == a1) {
    return 1;
  }
  else {
    return objc_msgSend_isEqualToString_(a1, a2, @"Calling", a3);
  }
}

uint64_t IDSIsFaceTimeRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (@"FaceTime" == a1) {
    return 1;
  }
  else {
    return objc_msgSend_isEqualToString_(a1, a2, @"FaceTime", a3);
  }
}

uint64_t IDSIsMultiwayRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (@"Multiway" == a1) {
    return 1;
  }
  else {
    return objc_msgSend_isEqualToString_(a1, a2, @"Multiway", a3);
  }
}

uint64_t IDSIsAnyFaceTimeRelatedRegistrationServiceType(void *a1)
{
  id v1 = a1;
  id v4 = v1;
  if (@"Multiway" == v1
    || (objc_msgSend_isEqualToString_(v1, v2, @"Multiway", v3) & 1) != 0
    || @"FaceTime" == v4
    || (objc_msgSend_isEqualToString_(v4, v5, @"FaceTime", v6) & 1) != 0
    || @"Calling" == v4)
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v4, v7, @"Calling", v8);
  }

  return isEqualToString;
}

uint64_t IDSIsiMessageRegistrationServiceType(__CFString *a1, const char *a2, double a3)
{
  if (@"iMessage" == a1) {
    return 1;
  }
  else {
    return objc_msgSend_isEqualToString_(a1, a2, @"iMessage", a3);
  }
}

uint64_t IDSIsFaceTimeOriMessageRegistration(void *a1)
{
  id v1 = a1;
  id v4 = v1;
  if (@"FaceTime" == v1
    || (objc_msgSend_isEqualToString_(v1, v2, @"FaceTime", v3) & 1) != 0
    || @"iMessage" == v4
    || (objc_msgSend_isEqualToString_(v4, v5, @"iMessage", v6) & 1) != 0
    || @"Calling" == v4)
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v4, v7, @"Calling", v8);
  }

  return isEqualToString;
}

uint64_t IDSIsAlloyRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, @"com.apple.private.alloy", a3);
}

uint64_t IDSIsMultiplex1RegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, @"com.apple.private.alloy.multiplex1", a3);
}

uint64_t IDSIsiTunesRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, @"com.apple.private.alloy.itunes", a3);
}

uint64_t IDSIsGameCenterRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_hasPrefix_(a1, a2, @"com.apple.private.alloy.arcade", a3);
}

uint64_t IDSIsStewieRegistrationServiceType(void *a1, const char *a2, double a3)
{
  return objc_msgSend_isEqualToString_(a1, a2, @"Stewie", a3);
}

__CFString *_StringForIDSAccountType(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5975610[a1];
  }
}

__CFString *_StringForIDSRegistrationType(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5975628[a1];
  }
}

__CFString *_StringForIDSDRegistrationStatus(unint64_t a1)
{
  if (a1 > 8) {
    return @"Failed";
  }
  else {
    return off_1E5975640[a1];
  }
}

__CFString *_StringForIDSRegistrationServiceType(void *a1)
{
  id v1 = a1;
  id v4 = v1;
  if (@"iMessage" == v1 || (objc_msgSend_isEqualToString_(v1, v2, @"iMessage", v3) & 1) != 0)
  {
    int v7 = @"iMessage";
LABEL_10:

    goto LABEL_11;
  }
  if (@"Calling" == v4 || (objc_msgSend_isEqualToString_(v4, v5, @"Calling", v6) & 1) != 0)
  {
    int v7 = @"Calling";
    goto LABEL_10;
  }
  if (@"FaceTime" == v4
    || (int v7 = v4, objc_msgSend_isEqualToString_(v4, v8, @"FaceTime", v9)))
  {
    int v7 = @"FaceTime";
    goto LABEL_10;
  }
LABEL_11:

  return v7;
}

__CFString *_UIStringForIDSRegistrationServiceType(void *a1)
{
  id v1 = a1;
  id v4 = v1;
  if (@"iMessage" == v1 || objc_msgSend_isEqualToString_(v1, v2, @"iMessage", v3))
  {

    int v7 = @"iMessage";
  }
  else if (@"Calling" == v4 {
         || (objc_msgSend_isEqualToString_(v4, v5, @"Calling", v6) & 1) != 0
  }
         || @"FaceTime" == v4
         || (objc_msgSend_isEqualToString_(v4, v8, @"FaceTime", v9) & 1) != 0
         || @"Multiway" == v4
         || objc_msgSend_isEqualToString_(v4, v10, @"Multiway", v11))
  {

    int v7 = @"FaceTime";
  }
  else
  {
    int hasPrefix = objc_msgSend_hasPrefix_(v4, v12, @"com.apple.private.alloy.itunes", v13);

    if (hasPrefix) {
      int v7 = @"iTunes";
    }
    else {
      int v7 = @"iCloud";
    }
  }

  return v7;
}

__CFString *_IDSRegistrationServiceTypeForString(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v2, @"com.apple.iMessage", v3)) {
    goto LABEL_2;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v4, @"com.apple.FaceTime", v5)) {
    goto LABEL_4;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v7, @"com.apple.Calling", v8)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v9, @"com.apple.private.ac", v10)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v11, @"com.apple.private.ac", v12))
  {
    goto LABEL_8;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v13, @"com.apple.ess", v14)) {
    goto LABEL_4;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v18, @"com.apple.private.alloy.facetime.multi", v19)|| objc_msgSend_isEqualToIgnoringCase_(v1, v20, @"Multiway", v21))
  {
    double v6 = IDSRegistrationServiceTypeMultiway;
    goto LABEL_9;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v22, @"com.apple.madrid", v23)) {
    goto LABEL_2;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v24, @"Calling", v25))
  {
LABEL_8:
    double v6 = IDSRegistrationServiceTypeCalling;
    goto LABEL_9;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v26, @"iMessage", v27)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v28, @"Messenger", v29)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v30, @"Madrid", v31))
  {
LABEL_2:
    double v6 = IDSRegistrationServiceTypeiMessage;
LABEL_9:
    BOOL v15 = *v6;
    goto LABEL_10;
  }
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v32, @"FaceTime", v33)
    || objc_msgSend_isEqualToIgnoringCase_(v1, v34, @"Venice", v35))
  {
LABEL_4:
    double v6 = IDSRegistrationServiceTypeFaceTime;
    goto LABEL_9;
  }
  char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v1, v36, @"com.apple.private.alloy.invitation.screensharing", v37);
  BOOL v15 = @"com.apple.private.alloy.invitation.screensharing";
  if ((isEqualToIgnoringCase & 1) == 0)
  {
    if (objc_msgSend_isEqualToIgnoringCase_(v1, v38, @"com.apple.private.alloy.multiplex1", v40))BOOL v15 = @"com.apple.private.alloy.multiplex1"; {
    else
    }
      BOOL v15 = v1;
  }
LABEL_10:
  double v16 = v15;

  return v16;
}

__CFString *_IDSServiceFromRegistrationServiceType(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v2, @"iMessage", v3))
  {
    double v6 = @"com.apple.madrid";
  }
  else if (objc_msgSend_isEqualToIgnoringCase_(v1, v4, @"FaceTime", v5))
  {
    double v6 = @"com.apple.ess";
  }
  else if (objc_msgSend_isEqualToIgnoringCase_(v1, v7, @"Calling", v8))
  {
    double v6 = @"com.apple.private.ac";
  }
  else if (objc_msgSend_isEqualToIgnoringCase_(v1, v9, @"Multiway", v10))
  {
    double v6 = @"com.apple.private.alloy.facetime.multi";
  }
  else
  {
    double v6 = (__CFString *)v1;
  }

  return v6;
}

__CFString *_KeychainRegistrationServiceTypeForString(void *a1)
{
  id v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, @"com.apple.Calling", v3) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v4, @"Calling", v5) & 1) != 0)
  {
    double v6 = @"com.apple.private.ac";
  }
  else
  {
    _IDSRegistrationServiceTypeForString(v1);
    double v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

__CFString *_IDSRegistrationServiceIdentifierFromServiceType(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    if (@"iMessage" == v1 || (objc_msgSend_isEqualToString_(v1, v5, @"iMessage", v6) & 1) != 0)
    {
      double v9 = @"com.apple.madrid";
    }
    else if (@"Calling" == v1 || (objc_msgSend_isEqualToString_(v1, v7, @"Calling", v8) & 1) != 0)
    {
      double v9 = @"com.apple.private.ac";
    }
    else if (@"FaceTime" == v1 {
           || (objc_msgSend_isEqualToString_(v1, v10, @"FaceTime", v11) & 1) != 0)
    }
    {
      double v9 = @"com.apple.ess";
    }
    else if (@"Multiway" == v1 {
           || (objc_msgSend_isEqualToString_(v1, v12, @"Multiway", v13) & 1) != 0)
    }
    {
      double v9 = @"com.apple.private.alloy.facetime.multi";
    }
    else
    {
      double v9 = v1;
    }
  }
  else
  {
    double v9 = 0;
  }

  return v9;
}

uint64_t _IDSPrefersPhoneNumbersForServiceIdentifier(void *a1)
{
  id v1 = a1;
  if ((objc_msgSend_isEqualToIgnoringCase_(v1, v2, @"com.apple.madrid", v3) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v4, @"com.apple.madrid.lite", v5) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v6, @"com.apple.private.alloy.sms", v7) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v8, @"com.apple.private.alloy.electrictouch", v9) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v10, @"com.apple.private.alloy.tincan.audio", v11) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v12, @"com.apple.private.alloy.facetime.audio", v13) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v14, @"com.apple.private.alloy.facetime.video", v15) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v16, @"com.apple.private.alloy.facetime.lp", v17) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v18, @"com.apple.private.alloy.facetime.multi", v19) & 1) != 0
    || (objc_msgSend_isEqualToIgnoringCase_(v1, v20, @"com.apple.private.alloy.biz", v21) & 1) != 0)
  {
    uint64_t isEqualToIgnoringCase = 1;
  }
  else
  {
    uint64_t isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v1, v22, @"com.apple.private.alloy.health.sync.sharingsetup", v23);
  }

  return isEqualToIgnoringCase;
}

BOOL IDSIsValidAccountType(unsigned int a1)
{
  return a1 < 3;
}

BOOL IDSIsValidSigningAlgorithm(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

BOOL IDSIsValidSigningKeyType(unsigned int a1)
{
  return a1 < 2;
}

id _IDSRegistrationKeychainItemNameForIdentifierAndName(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7))
  {
    objc_msgSend_stringWithFormat_(NSString, v8, @"%@-%@", v9, v3, v4);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = v4;
  }
  double v11 = v10;

  return v11;
}

void _IDSAppleRegistrationCopyKeyPair(void *a1, CFTypeRef *a2, CFTypeRef *a3, void **a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  double v12 = v11;
  if (a2 && a3 && a4 && a5 && a6)
  {
    double v13 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v11, @"identity-rsa-public-key");
    IMGetKeychainData();
    id v134 = 0;

    double v14 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, @"identity-rsa-private-key");
    char v15 = IMGetKeychainData();
    id v16 = 0;

    if ((v15 & 1) == 0)
    {
      id v20 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v17, v18, v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, " ** No private key found, generating one", buf, 2u);
      }
    }
    double v21 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, @"identity-rsa-key-pair-signature-v1");
    char v22 = IMGetKeychainData();
    id v23 = 0;

    if ((v22 & 1) == 0)
    {
      double v27 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v24, v25, v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, " ** No signature found, generating one [Identifier: %@]", buf, 0xCu);
      }
    }
    if (*a6)
    {
      uint64_t v28 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v24, v25, v26);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "Waiting for keychain upgrade to be complete before loading key pair", buf, 2u);
      }
      goto LABEL_96;
    }
    *a6 = 0;
    id v133 = v16;
    if (!v16) {
      goto LABEL_52;
    }
    id v29 = v16;
    objc_msgSend_bytes(v29, v30, v31, v32);
    objc_msgSend_length(v29, v33, v34, v35);
    uint64_t RSAPrivateKey = SecKeyCreateRSAPrivateKey();
    *a3 = (CFTypeRef)RSAPrivateKey;
    if (RSAPrivateKey)
    {
      int v39 = SecKeyCopyPublicBytes();
      if (v39)
      {
        double v41 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v37, v38, v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v39;
          *(_WORD *)&uint8_t buf[8] = 2112;
          *(void *)&buf[10] = v12;
          _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, " => Error loading publicKey: %d [Identifier: %@]", buf, 0x12u);
        }
      }
    }
    id v42 = [NSString alloc];
    uint64_t v45 = objc_msgSend_initWithData_encoding_(v42, v43, (uint64_t)v23, v44, 4);
    unint64_t v46 = *a4;
    *a4 = (void *)v45;

    if (*a2)
    {
      unint64_t Size = SecKeyGetSize();
      unsigned int v54 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v51, v52, v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412546;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = Size;
        _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, " => Loaded Identity public key [Identifier: %@] (Key Size: %lu)", buf, 0x16u);
      }

      if (Size <= 0x7FF)
      {
        char v58 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v55, v56, v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT)) {
          sub_19DB81374();
        }

        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
    }
    else
    {
      unsigned int v59 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v47, v48, v49);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_19D9BE000, v59, OS_LOG_TYPE_DEFAULT, " ** No Identity public key found [Identifier: %@]", buf, 0xCu);
      }
    }
    uint64_t v60 = objc_msgSend_length(*a4, v55, v56, v57);
    double v64 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v61, v62, v63);
    BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
    if (v60)
    {
      if (!v65) {
        goto LABEL_40;
      }
      unsigned int v66 = *a4;
      *(_DWORD *)kevent buf = 138412546;
      *(void *)&uint8_t buf[4] = v66;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v12;
      uint64_t v67 = " => Loaded Identity key pair signature: %@ [Identifier: %@]";
      unint64_t v68 = v64;
      uint32_t v69 = 22;
    }
    else
    {
      if (!v65) {
        goto LABEL_40;
      }
      *(_DWORD *)kevent buf = 138412290;
      *(void *)&uint8_t buf[4] = v12;
      uint64_t v67 = " ** No Identity key pair signature found [Identifier: %@]";
      unint64_t v68 = v64;
      uint32_t v69 = 12;
    }
    _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, v67, buf, v69);
LABEL_40:

    if (*a3)
    {
      unint64_t v73 = SecKeyGetSize();
      unsigned int v77 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v74, v75, v76);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412546;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v73;
        _os_log_impl(&dword_19D9BE000, v77, OS_LOG_TYPE_DEFAULT, " => Loaded Identity private key  [Identifier: %@](Key Size: %lu)", buf, 0x16u);
      }

      if (v73 <= 0x7FF)
      {
        double v79 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v24, v78, v26);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_FAULT)) {
          sub_19DB81374();
        }

        if (*a2)
        {
          CFRelease(*a2);
          *a2 = 0;
        }
        *a5 = 0;
LABEL_79:
        if (*a2)
        {
          if (*a3 && *a4) {
            goto LABEL_97;
          }
          CFRelease(*a2);
          *a2 = 0;
        }
        id v132 = a4;
        id v101 = v23;
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
        uint64_t v102 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v103 = *MEMORY[0x1E4F3B760];
        uint64_t v104 = *MEMORY[0x1E4F3B718];
        uint64_t v105 = *MEMORY[0x1E4F1CFC8];
        uint64_t v106 = *MEMORY[0x1E4F3B6B0];
        double v107 = objc_msgSend_numberWithInt_(NSNumber, v24, 2048, v26);
        uint64_t v28 = objc_msgSend_dictionaryWithObjectsAndKeys_(v102, v108, v103, v109, v104, v105, v106, v107, *MEMORY[0x1E4F3B708], 0);

        OSStatus Pair = SecKeyGeneratePair((CFDictionaryRef)v28, (SecKeyRef *)a2, (SecKeyRef *)a3);
        uint64_t v114 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v111, v112, v113);
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef v115 = *a2;
          CFTypeRef v116 = *a3;
          *(_DWORD *)kevent buf = 134218754;
          *(void *)&uint8_t buf[4] = v115;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v116;
          __int16 v136 = 2112;
          id v137 = v12;
          __int16 v138 = 2048;
          uint64_t v139 = Pair;
          _os_log_impl(&dword_19D9BE000, v114, OS_LOG_TYPE_DEFAULT, " Generated public key: %p   private key: %p  [Identifier: %@]  result: %ld", buf, 0x2Au);
        }

        id v16 = v133;
        id v23 = v101;
        if (*a2 && *a3)
        {
          CFDictionaryRef v117 = (const __CFDictionary *)MEMORY[0x19F3ADEC0]();
          if (CFDictionaryGetValue(v117, (const void *)*MEMORY[0x1E4F3BD38]))
          {
            uint64_t v118 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, @"identity-rsa-private-key");
            char v119 = IMSetKeychainData();

            if ((v119 & 1) == 0)
            {
              double v130 = v12;
              uint64_t v131 = 0;
              _IMWarn();
            }
            uint64_t v123 = objc_msgSend_stringGUID(NSString, v120, v121, v122, v130, v131);
            double v124 = *v132;
            *id v132 = (void *)v123;

            double v127 = objc_msgSend_dataUsingEncoding_(*v132, v125, 4, v126);
            uint64_t v128 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, @"identity-rsa-key-pair-signature-v1");
            char v129 = IMSetKeychainData();

            if ((v129 & 1) == 0) {
              _IMWarn();
            }
          }
          if (v117) {
            CFRelease(v117);
          }
        }
LABEL_96:

LABEL_97:
        goto LABEL_98;
      }
    }
    else
    {
      double v80 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v70, v71, v72);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_19D9BE000, v80, OS_LOG_TYPE_DEFAULT, " ** No Identity private key found [Identifier: %@]", buf, 0xCu);
      }
    }
LABEL_52:
    CFTypeRef v81 = *a2;
    *a5 = 0;
    if (v81 && *a3)
    {
      *(void *)kevent buf = 0;
      objc_msgSend_dataUsingEncoding_(@"KeyVerificationData", v24, 4, v26);
      id v82 = (id)objc_claimAutoreleasedReturnValue();

      CFStringRef v83 = (const __CFString *)*MEMORY[0x1E4F3BAE0];
      CFDataRef Signature = SecKeyCreateSignature((SecKeyRef)*a3, (SecKeyAlgorithm)*MEMORY[0x1E4F3BAE0], (CFDataRef)v82, (CFErrorRef *)buf);
      if (*(void *)buf)
      {
        CFRelease(*(CFTypeRef *)buf);
      }
      else if (!SecKeyVerifySignature((SecKeyRef)*a2, v83, (CFDataRef)v82, Signature, (CFErrorRef *)buf) {
             || *(void *)buf)
      }
      {
        if (*a2)
        {
          CFRelease(*a2);
          *a2 = 0;
        }
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
        unint64_t v86 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v24, v85, v26);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_FAULT)) {
          sub_19DB812DC((id *)buf, v86);
        }
      }
      if (v82) {
        CFRelease(v82);
      }
      if (Signature) {
        CFRelease(Signature);
      }
      if (*a2 && *a3 && !objc_msgSend_length(*a4, v24, v85, v26))
      {
        *a5 = 1;
        uint64_t v88 = objc_msgSend_stringGUID(NSString, v24, v87, v26);
        long long v89 = *a4;
        *a4 = (void *)v88;

        double v92 = objc_msgSend_dataUsingEncoding_(*a4, v90, 4, v91);
        uint64_t v93 = _IDSRegistrationKeychainItemNameForIdentifierAndName(v12, @"identity-rsa-key-pair-signature-v1");
        char v94 = IMSetKeychainData();

        if ((v94 & 1) == 0)
        {
          uint64_t v98 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v95, v96, v97);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT)) {
            sub_19DB81254();
          }
        }
        uint64_t v99 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v95, v96, v97);
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          double v100 = *a4;
          *(_DWORD *)kevent buf = 138412546;
          *(void *)&uint8_t buf[4] = v100;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v12;
          _os_log_impl(&dword_19D9BE000, v99, OS_LOG_TYPE_DEFAULT, " => We have good public and private keys, generating and migrating identity key pair signature: %@ [Identifier: %@]", buf, 0x16u);
        }
      }
    }
    goto LABEL_79;
  }
LABEL_98:
}

void *_IDSTransportVersionNumber()
{
  return &unk_1EF028CD8;
}

void *_IDSWebTunnelServiceVersionNumber()
{
  return &unk_1EF028CF0;
}

void *_IDSScheduledSendVersionNumber()
{
  return &unk_1EF028D08;
}

uint64_t _IDSCopyIDForPushTokenAndIdentitiesWithService(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = objc_msgSend___imHexString(a1, v7, v8, v9);
  if (objc_msgSend_count(v6, v11, v12, v13))
  {
    id v16 = objc_msgSend___imArrayByApplyingBlock_(v6, v14, (uint64_t)&unk_1EEFCE078, v15);

    int isEqualToString = objc_msgSend_isEqualToString_(v5, v17, @"com.apple.private.alloy.bulletinboard", v18);
    int v20 = _IDSPrefersPhoneNumbersForServiceIdentifier(v5);
    id v21 = _IDSCopyCallerIDWithSelfMessagingHint(0, v16, 0, 0, isEqualToString, v20, 1);
    uint64_t v25 = objc_msgSend__FZBestGuessFZIDType(v21, v22, v23, v24);
    uint64_t v28 = objc_msgSend__URIFromFZIDType_(v21, v26, v25, v27);
    id v29 = [NSString alloc];
    uint64_t v32 = objc_msgSend_initWithFormat_(v29, v30, @"self-token:%@/%@", v31, v10, v28);

    id v6 = v16;
  }
  else
  {
    _IMWarn();
    uint64_t v32 = 0;
  }

  return v32;
}

id sub_19DB156F4(double a1, uint64_t a2, void *a3)
{
  id v3 = objc_msgSend__stringForKey_(a3, (const char *)a3, @"uri", a1);
  if (objc_msgSend__appearsToBeDSID(v3, v4, v5, v6))
  {
    id v10 = v3;
  }
  else
  {
    objc_msgSend__stripFZIDPrefix(v3, v7, v8, v9);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v11 = v10;

  return v11;
}

id _IDSCopyCallerIDWithSelfMessagingHint(void *a1, void *a2, void *a3, void *a4, int a5, int a6, char a7)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  int v20 = v16;
  if (a5)
  {
    if (v13 && v16 && (objc_msgSend_isEqualToString_(v13, v17, (uint64_t)v16, v19) & 1) == 0)
    {
      id v21 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v17, v18, v19);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_19DB81450();
      }
    }
    else
    {
      id v21 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v17, v18, v19);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        sub_19DB813DC();
      }
    }

    id v26 = v20;
  }
  else if ((objc_msgSend__appearsToBeDSID(0, v17, v18, v19) & 1) != 0 {
         || objc_msgSend_isEqualToIgnoringCase_(0, v22, @"____--SENTINEL--SELF--ALIAS--V0--____", v24))
  }
  {
    uint64_t v25 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v22, v23, v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_19DB814C8(v25);
    }

    id v26 = 0;
    id v13 = 0;
  }
  else
  {
    id v26 = 0;
  }
  if (!objc_msgSend_count(v14, v22, v23, v24))
  {
    id v31 = 0;
    goto LABEL_76;
  }
  double v97 = v20;
  if (v26)
  {
    id v30 = 0;
    if (v13) {
      goto LABEL_45;
    }
    goto LABEL_47;
  }
  _IDSCopyOrderedAliasesWithGetter(v14, 0, a6, a7, &unk_1EEFCD358);
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  id v32 = (id)objc_claimAutoreleasedReturnValue();
  id v26 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v106, v34, v120, 16);
  if (!v26)
  {
    id v30 = 0;
    goto LABEL_39;
  }
  id v95 = v15;
  id v30 = 0;
  uint64_t v38 = *(void *)v107;
  while (2)
  {
    for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v107 != v38) {
        objc_enumerationMutation(v32);
      }
      double v40 = *(void **)(*((void *)&v106 + 1) + 8 * i);
      if (!v30)
      {
        objc_msgSend__stripFZIDPrefix(*(void **)(*((void *)&v106 + 1) + 8 * i), v35, v36, v37);
        id v30 = (id)objc_claimAutoreleasedReturnValue();
      }
      int v41 = objc_msgSend__appearsToBeDSID(v40, v35, v36, v37);
      if (a5)
      {
        if (v41)
        {
          id v42 = v40;
LABEL_37:
          id v26 = v42;
          goto LABEL_38;
        }
      }
      else if ((v41 & 1) == 0)
      {
        objc_msgSend__stripFZIDPrefix(v40, v35, v36, v37);
        id v42 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_37;
      }
    }
    id v26 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v35, (uint64_t)&v106, v37, v120, 16);
    if (v26) {
      continue;
    }
    break;
  }
LABEL_38:
  id v15 = v95;
LABEL_39:

  if (_IMWillLog())
  {
    unint64_t v46 = @"NO";
    if (a6) {
      unint64_t v46 = @"YES";
    }
    id v90 = v26;
    id v91 = v32;
    id v92 = v14;
    uint64_t v93 = v46;
    _IMAlwaysLog();
  }
  char v47 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v43, v44, v45, v90, v91, v92, v93);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
    long long v89 = @"NO";
    *(_DWORD *)kevent buf = 138413058;
    id v113 = v26;
    __int16 v114 = 2112;
    if (a6) {
      long long v89 = @"YES";
    }
    id v115 = v32;
    __int16 v116 = 2112;
    id v117 = v14;
    __int16 v118 = 2112;
    char v119 = v89;
    _os_log_debug_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEBUG, "CallerID - no fromID - choosing %@ from aliases %@ (originally %@). Prefer phone numbers %@", buf, 0x2Au);
  }

  if (v13)
  {
LABEL_45:
    if ((a5 & 1) == 0)
    {
      uint64_t v48 = objc_msgSend__stripFZIDPrefix(v13, v27, v28, v29);

      id v26 = (id)v48;
      goto LABEL_48;
    }
  }
LABEL_47:
  if (v13)
  {
LABEL_48:
    if (objc_msgSend__appearsToBePseudonymID(v13, v27, v28, v29))
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v96 = v15;
      id v49 = v15;
      uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v102, v51, v111, 16);
      if (v52)
      {
        uint64_t v56 = v52;
        uint64_t v57 = *(void *)v103;
        id v94 = v14;
        while (2)
        {
          for (uint64_t j = 0; j != v56; ++j)
          {
            if (*(void *)v103 != v57) {
              objc_enumerationMutation(v49);
            }
            unsigned int v59 = objc_msgSend_URI(*(void **)(*((void *)&v102 + 1) + 8 * j), v53, v54, v55);
            double v63 = objc_msgSend_prefixedURI(v59, v60, v61, v62);
            char isEqualToString = objc_msgSend_isEqualToString_(v63, v64, (uint64_t)v13, v65);

            if (isEqualToString)
            {
              id v31 = v13;

              id v14 = v94;
              id v15 = v96;
              goto LABEL_75;
            }
          }
          uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v53, (uint64_t)&v102, v55, v111, 16);
          id v14 = v94;
          if (v56) {
            continue;
          }
          break;
        }
      }

      id v31 = 0;
      id v15 = v96;
      goto LABEL_75;
    }
  }
  id v67 = v15;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  id v68 = v14;
  id v69 = v14;
  uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v70, (uint64_t)&v98, v71, v110, 16);
  if (v72)
  {
    uint64_t v75 = v72;
    uint64_t v76 = *(void *)v99;
    while (2)
    {
      for (uint64_t k = 0; k != v75; ++k)
      {
        if (*(void *)v99 != v76) {
          objc_enumerationMutation(v69);
        }
        if (objc_msgSend_isEqualToIgnoringCase_(v26, v73, *(void *)(*((void *)&v98 + 1) + 8 * k), v74))
        {
          id v26 = v26;

          id v31 = v26;
          id v14 = v68;
          id v15 = v67;
          goto LABEL_75;
        }
      }
      uint64_t v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v73, (uint64_t)&v98, v74, v110, 16);
      if (v75) {
        continue;
      }
      break;
    }
  }

  if (!objc_msgSend_length(v30, v78, v79, v80))
  {
    uint64_t v84 = objc_msgSend___imFirstObject(v69, v81, v82, v83);

    if (objc_msgSend_isEqualToIgnoringCase_(v84, v85, @"____--SENTINEL--SELF--ALIAS--V0--____", v86))
    {

      id v30 = 0;
    }
    else
    {
      id v30 = v84;
    }
  }
  id v15 = v67;
  uint64_t v87 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v81, v82, v83);
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)kevent buf = 138412802;
    id v113 = v13;
    __int16 v114 = 2112;
    id v115 = v69;
    __int16 v116 = 2112;
    id v117 = v30;
    _os_log_error_impl(&dword_19D9BE000, v87, OS_LOG_TYPE_ERROR, "Unable to find fromID %@ in set of valid aliases %@   (falling back to: %@)", buf, 0x20u);
  }

  id v30 = v30;
  id v31 = v30;
  id v14 = v68;
LABEL_75:

  int v20 = v97;
LABEL_76:

  return v31;
}

uint64_t _IDSCopyIDForDeviceUniqueID(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    id v5 = [NSString alloc];
    uint64_t v8 = objc_msgSend_initWithFormat_(v5, v6, @"device:%@", v7, v1);
  }
  else
  {
    _IMWarn();
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t _IDSDestinationHasValidPrefix(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB2BB7B8 != -1) {
    dispatch_once(&qword_1EB2BB7B8, &unk_1EEFCD2F8);
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = (id)qword_1EB2BB7B0;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v11, v4, v15, 16);
  if (v6)
  {
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend_hasPrefix_(v1, v5, *(void *)(*((void *)&v11 + 1) + 8 * i), v7, (void)v11))
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v11, v7, v15, 16);
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v6;
}

void sub_19DB15F6C()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v3 = objc_msgSend_initWithObjects_(v0, v1, @"tel:", v2, @"mailto:", @"token:", @"self-token:", @"accessory:", @"device:", @"urn:ck:", @"urn:biz:", @"__IDS_DEFAULT_PAIRED_DEVICE__", @"____--SENTINEL--SELF--ALIAS--V0--____", @"pseud:", @"temp:", @"dev:", 0);
  double v4 = (void *)qword_1EB2BB7B0;
  qword_1EB2BB7B0 = v3;
}

id _IDSCopyIDForOptionalTokenWithURI(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7)) {
    id v8 = (id)_IDSCopyIDForTokenWithURI(v3, v4);
  }
  else {
    id v8 = v4;
  }
  id v9 = v8;

  return v9;
}

uint64_t _IDSCopyIDForTokenWithURI(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7) && objc_msgSend_length(v4, v8, v9, v10))
  {
    id v11 = [NSString alloc];
    id v15 = objc_msgSend___imHexString(v3, v12, v13, v14);
    uint64_t v18 = objc_msgSend_initWithFormat_(v11, v16, @"token:%@/%@", v17, v15, v4);
  }
  else
  {
    _IMWarn();
    uint64_t v18 = 0;
  }

  return v18;
}

id _IDSCopyIDForPhoneNumberWithOptions(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_length(v3, v5, v6, v7))
  {
    if (objc_msgSend_hasPrefix_(v3, v8, @"tel:", v9))
    {
      id v10 = v3;
    }
    else
    {
      id v11 = [NSString alloc];
      long long v12 = IMInternationalForPhoneNumberWithOptions();
      id v10 = (id)objc_msgSend_initWithFormat_(v11, v13, @"tel:%@", v14, v12);
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id _IDSCopyIDForEmailAddress(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    id v8 = objc_msgSend_lowercaseString(v1, v5, v6, v7);

    if (objc_msgSend_hasPrefix_(v8, v9, @"mailto:", v10))
    {
      id v11 = v8;
      id v1 = v11;
    }
    else
    {
      id v12 = [NSString alloc];
      id v11 = (id)objc_msgSend_initWithFormat_(v12, v13, @"mailto:%@", v14, v8);
      id v1 = v8;
    }
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

id _IDSCopyIDForAccessory(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    if (objc_msgSend_hasPrefix_(v1, v5, @"accessory:", v6))
    {
      id v7 = v1;
    }
    else
    {
      id v9 = [NSString alloc];
      id v7 = (id)objc_msgSend_initWithFormat_(v9, v10, @"accessory:%@", v11, v1);
    }
    id v8 = v7;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id _IDSCopyIDForBusinessID(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3, v4))
  {
    id v8 = objc_msgSend_lowercaseString(v1, v5, v6, v7);

    if (objc_msgSend_hasPrefix_(v8, v9, @"urn:biz:", v10))
    {
      id v13 = v8;
      id v1 = v13;
    }
    else
    {
      int hasPrefix = objc_msgSend_hasPrefix_(v8, v11, @"biz:", v12);
      id v15 = [NSString alloc];
      if (hasPrefix) {
        uint64_t v18 = objc_msgSend_initWithFormat_(v15, v16, @"%@%@", v17, @"urn:", v8);
      }
      else {
        uint64_t v18 = objc_msgSend_initWithFormat_(v15, v16, @"%@%@", v17, @"urn:biz:", v8);
      }
      id v13 = (id)v18;
      id v1 = v8;
    }
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

uint64_t IDSSetPhoneNumberChangeNotificationEnabled(uint64_t result)
{
  byte_1E944F0C8 = result;
  return result;
}

id _IDSCopyMyPhoneNumbers(int a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(&stru_1EB2BB7E4);
  id v5 = (void *)qword_1EB2BB7C0;
  if (qword_1EB2BB7C0) {
    BOOL v6 = a1 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    goto LABEL_21;
  }
  double v7 = objc_msgSend_sharedInstance(IDSCTAdapter, v2, v3, v4);
  id v38 = 0;
  double v10 = objc_msgSend_currentSIMsWithError_(v7, v8, (uint64_t)&v38, v9);
  id v11 = v38;
  double v14 = objc_msgSend___imArrayByApplyingBlock_(v10, v12, (uint64_t)&unk_1EEFCD418, v13);

  if (objc_msgSend_count(v14, v15, v16, v17) || v11 == 0)
  {
    id v24 = v14;
  }
  else
  {
    id v26 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v18, v19, v20);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_19DB81544();
    }

    id v24 = 0;
  }
  uint64_t v28 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v22, v23, v25);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    id v40 = v24;
    _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "Returning phone number from _IDSFetchPhoneNumber { phoneNumbers: %@ }", buf, 0xCu);
  }

  double v29 = (void *)MEMORY[0x1E4F1CBF0];
  if (v24) {
    double v29 = v24;
  }
  id v30 = v29;

  id v31 = (void *)qword_1EB2BB7C0;
  qword_1EB2BB7C0 = (uint64_t)v30;

  if (!byte_1E944F0C8) {
    im_dispatch_after_primary_queue();
  }
  id v5 = (void *)qword_1EB2BB7C0;
  if (qword_1EB2BB7C0) {
LABEL_21:
  }
    id v32 = v5;
  else {
    id v32 = 0;
  }
  os_unfair_lock_unlock(&stru_1EB2BB7E4);
  if (objc_msgSend_count(v32, v33, v34, v35)) {
    id v36 = v32;
  }
  else {
    id v36 = 0;
  }

  return v36;
}

void sub_19DB16660()
{
  os_unfair_lock_lock(&stru_1EB2BB7E4);
  id v0 = (void *)qword_1EB2BB7C0;
  qword_1EB2BB7C0 = 0;

  os_unfair_lock_unlock(&stru_1EB2BB7E4);
}

void IDSFetchPhoneNumber()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v0 = _IDSCopyMyPhoneNumbers(1);
  double v4 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v1, v2, v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    BOOL v6 = v0;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "Phone numbers: %@", (uint8_t *)&v5, 0xCu);
  }
}

id sub_19DB1676C(uint64_t a1, void *a2)
{
  id v2 = _IDSCopyIDForPhoneNumberWithOptions(a2, 0);
  return v2;
}

uint64_t sub_19DB167A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_hasPrefix_(v3, v4, @"tel:", v5))
  {
    if (objc_msgSend_count(*(void **)(a1 + 32), v6, v7, v8)
      && objc_msgSend_containsObject_(*(void **)(a1 + 32), v9, (uint64_t)v3, v10))
    {
      uint64_t v11 = *(void *)(a1 + 56) + 1;
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 56) + 2;
    }
  }
  else if (objc_msgSend_hasPrefix_(v3, v6, @"mailto:", v8))
  {
    uint64_t v37 = 0;
    id v38 = &v37;
    uint64_t v39 = 0x2020000000;
    uint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v40 = objc_msgSend_count(*(void **)(a1 + 40), v12, v13, v14);
    uint64_t v33 = 0;
    uint64_t v34 = &v33;
    uint64_t v35 = 0x2020000000;
    char v36 = 0;
    id v15 = *(void **)(a1 + 40);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_19DB169C0;
    v29[3] = &unk_1E5975490;
    id v16 = v3;
    id v30 = v16;
    id v31 = &v37;
    id v32 = &v33;
    objc_msgSend_enumerateObjectsUsingBlock_(v15, v17, (uint64_t)v29, v18);
    if (!*((unsigned char *)v34 + 24))
    {
      uint64_t v19 = *(void **)(a1 + 48);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      void v24[2] = sub_19DB16A2C;
      v24[3] = &unk_1E59754B8;
      id v20 = v16;
      char v28 = *(unsigned char *)(a1 + 72);
      id v25 = v20;
      id v26 = &v37;
      uint64_t v27 = *(void *)(a1 + 64);
      objc_msgSend_enumerateObjectsUsingBlock_(v19, v21, (uint64_t)v24, v22);
    }
    uint64_t v11 = v38[3] + 3;

    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_19DB1699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19DB169C0(uint64_t a1, const char *a2, uint64_t a3, unsigned char *a4, double a5)
{
  uint64_t result = objc_msgSend_hasSuffix_(*(void **)(a1 + 32), a2, (uint64_t)a2, a5);
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += ~a3;
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_19DB16A2C(uint64_t a1, const char *a2, uint64_t a3, unsigned char *a4, double a5)
{
  uint64_t result = objc_msgSend_hasSuffix_(*(void **)(a1 + 32), a2, (uint64_t)a2, a5);
  if (result)
  {
    if (!*(unsigned char *)(a1 + 56))
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(a1 + 48) + a3;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t sub_19DB16A8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v7 >= v8)
  {
    if (v7 > v8) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = objc_msgSend_compare_(v5, v9, (uint64_t)v6, v10);
    }
  }
  else
  {
    uint64_t v11 = -1;
  }

  return v11;
}

uint64_t _IDSCopyOrderedAliases(void *a1, uint64_t a2, int a3)
{
  return objc_claimAutoreleasedReturnValue();
}

id sub_19DB16B54()
{
  return _IDSCopyMyPhoneNumbers(0);
}

id _IDSCopyCallerID(void *a1, void *a2, void *a3, int a4, int a5)
{
  return _IDSCopyCallerIDWithSelfMessagingHint(a1, a2, 0, a3, a4, a5, 0);
}

id _IDSCopyCallerIDWithPseudonyms(void *a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  return _IDSCopyCallerIDWithSelfMessagingHint(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t _IDSAreIDsEquivalent(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v8 = objc_msgSend__FZIDType(v3, v5, v6, v7);
  if (v8 == objc_msgSend__FZIDType(v4, v9, v10, v11))
  {
    double v14 = objc_msgSend__IDFromFZIDType_(v3, v12, v8, v13);
    double v18 = objc_msgSend__stripFZIDPrefix(v14, v15, v16, v17);

    id v21 = objc_msgSend__IDFromFZIDType_(v4, v19, v8, v20);
    uint64_t v25 = objc_msgSend__stripFZIDPrefix(v21, v22, v23, v24);

    if (!objc_msgSend_localizedCaseInsensitiveCompare_(v18, v26, v25, v27))
    {
LABEL_13:
      uint64_t v32 = 1;
LABEL_17:
      id v3 = v18;
      id v4 = (id)v25;
      goto LABEL_18;
    }
    if (v8 == 1)
    {
LABEL_16:
      uint64_t v32 = 0;
      goto LABEL_17;
    }
    char v28 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
    double v29 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
    id v30 = v29;
    if (v28 && v29)
    {
      BOOL v31 = CFEqual(v28, v29) != 0;
    }
    else
    {
      BOOL v31 = 0;
      BOOL v33 = 0;
      if (!v28)
      {
LABEL_10:
        if (v30) {
          CFRelease(v30);
        }
        if (v33) {
          goto LABEL_13;
        }
        uint64_t v34 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
        if (v34) {
          CFRelease(v34);
        }
        goto LABEL_16;
      }
    }
    CFRelease(v28);
    BOOL v33 = v31;
    goto LABEL_10;
  }
  uint64_t v32 = 0;
LABEL_18:

  return v32;
}

uint64_t _IDSTypeForID(void *a1, const char *a2, double a3)
{
  uint64_t v12 = 0;
  id v3 = objc_msgSend__stripPotentialTokenURIWithToken_(a1, a2, (uint64_t)&v12, a3);
  uint64_t v4 = v12;
  switch(objc_msgSend__FZIDType(v3, v5, v6, v7))
  {
    case 0:
      uint64_t v8 = 2 * (v4 != 0);
      break;
    case 1:
      if (v4) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = 1;
      }
      break;
    case 2:
      BOOL v9 = v4 == 0;
      uint64_t v10 = 10;
      goto LABEL_13;
    case 3:
      if (v4) {
        uint64_t v8 = 9;
      }
      else {
        uint64_t v8 = 4;
      }
      break;
    case 4:
      BOOL v9 = v4 == 0;
      uint64_t v10 = 5;
      goto LABEL_13;
    case 5:
      BOOL v9 = v4 == 0;
      uint64_t v10 = 7;
LABEL_13:
      if (v9) {
        uint64_t v8 = v10;
      }
      else {
        uint64_t v8 = v10 + 1;
      }
      break;
    default:
      uint64_t v8 = -1;
      break;
  }

  return v8;
}

uint64_t _IDSFZIDTypeFromIDSIDType(unint64_t a1)
{
  if (a1 > 0xA) {
    return -1;
  }
  else {
    return qword_19DB9B830[a1];
  }
}

uint64_t _IDSIDSIDTypeFromFZIDType(unint64_t a1)
{
  if (a1 > 5) {
    return -1;
  }
  else {
    return qword_19DB9B888[a1];
  }
}

uint64_t _IDSIDTypeHasToken(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) < 0xD) & (0x1698u >> (a1 + 1));
}

uint64_t _IDSIsTrafficAllowed(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((objc_msgSend_containsObject_(v3, v5, @"com.apple.ids.trafficclass.all", v6) & 1) != 0
    || (objc_msgSend_containsObject_(v4, v7, @"com.apple.ids.trafficclass.control", v8) & 1) != 0)
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = objc_msgSend_intersectsSet_(v4, v9, (uint64_t)v3, v10);
  }

  return v11;
}

__CFString *IDSAccountKeyForServerKey(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_isEqualToString_(v1, v2, @"handles", v3))
  {
    double v6 = IDSAuthenticationDictionaryKeyHandles;
LABEL_16:
    id v21 = *v6;
    goto LABEL_17;
  }
  if (objc_msgSend_isEqualToString_(v1, v4, @"email-address", v5))
  {
    double v6 = IDSAuthenticationDictionaryKeyEmailAddress;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v7, @"auth-token", v8))
  {
    double v6 = IDSAuthenticationDictionaryKeyAuthToken;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v9, @"self-handle", v10))
  {
    double v6 = IDSAuthenticationDictionaryKeySelfHandle;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v11, @"invitation-context", v12))
  {
    double v6 = IDSAuthenticationDictionaryKeyInvitationContext;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v13, @"apple-id", v14))
  {
    double v6 = IDSAuthenticationDictionaryKeyAppleID;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v15, @"profile-id", v16)
    || objc_msgSend_isEqualToString_(v1, v17, @"realm-user-id", v18))
  {
    double v6 = IDSAuthenticationDictionaryKeyProfileID;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v19, @"account-exists", v20))
  {
    double v6 = IDSAuthenticationDictionaryKeyAccountExists;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v24, @"status", v25))
  {
    double v6 = IDSAuthenticationDictionaryKeyStatus;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v1, v26, @"alert", v27))
  {
    double v6 = IDSAuthenticationDictionaryKeyAlert;
    goto LABEL_16;
  }
  BOOL v31 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v28, v29, v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT)) {
    sub_19DB81630();
  }

  id v21 = v1;
LABEL_17:
  double v22 = v21;

  return v22;
}

uint64_t IDSAuthenticationDelegateShouldStoreKey(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], v2, @"auth-token", v3, @"auth-token", 0);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v6, v19, 16);
  if (v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)v16;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v4);
        }
        if (!objc_msgSend_caseInsensitiveCompare_(*(void **)(*((void *)&v15 + 1) + 8 * v12), v8, (uint64_t)v1, v9))
        {
          uint64_t v13 = 0;
          goto LABEL_11;
        }
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v15, v9, v19, 16);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = 1;
LABEL_11:

  return v13;
}

void IDSAuthenticationDelegateUpdateTimeOfLastRequestPost(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedDefaults(MEMORY[0x1E4F6C408], a3, a4, a1);
  objc_msgSend_appValueForKey_(v4, v5, @"AuthenticationDelegateResponseTime", v6);
  id v27 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v13 = sub_19DB172D4(v10, v7, v8, v9);
  if (v27) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15 || objc_msgSend_compare_(v13, v11, (uint64_t)v27, v14) == -1)
  {
    long long v16 = objc_msgSend_sharedDefaults(MEMORY[0x1E4F6C408], v11, v12, v14);
    long long v17 = NSNumber;
    objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], v18, v19, v20);
    double v24 = objc_msgSend_numberWithDouble_(v17, v21, v22, v23);
    objc_msgSend_setAppValue_forKey_(v16, v25, (uint64_t)v24, v26, @"AuthenticationDelegateRequestPostedTime");
  }
}

id sub_19DB172D4(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  id v4 = objc_msgSend_sharedDefaults(MEMORY[0x1E4F6C408], a3, a4, a1);
  uint64_t v7 = objc_msgSend_appValueForKey_(v4, v5, @"AuthenticationDelegateRequestPostedTime", v6);

  return v7;
}

id IDSAuthenticationDelegateUpdateTimeOfLastAuthenticationResponseAndGetDelta(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E4F1C9C8], a3, a4, a1);
  double v5 = v4;
  double v8 = objc_msgSend_sharedDefaults(MEMORY[0x1E4F6C408], v6, v7, v4);
  uint64_t v11 = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, v5);
  objc_msgSend_setAppValue_forKey_(v8, v12, (uint64_t)v11, v13, @"AuthenticationDelegateResponseTime");

  double v20 = sub_19DB172D4(v17, v14, v15, v16);
  if (v20)
  {
    uint64_t v22 = objc_msgSend_sharedDefaults(MEMORY[0x1E4F6C408], v18, v19, v21);
    objc_msgSend_removeAppValueForKey_(v22, v23, @"AuthenticationDelegateRequestPostedTime", v24);

    double v25 = NSNumber;
    objc_msgSend_doubleValue(v20, v26, v27, v28);
    uint64_t v32 = objc_msgSend_numberWithDouble_(v25, v30, v31, v5 - v29);
  }
  else
  {
    uint64_t v32 = 0;
  }

  return v32;
}

uint64_t IDSAuthenticationDelegatePrintLoginDelegatesBag(void *a1, const char *a2, double a3)
{
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, a2, (uint64_t)&unk_1EEFCD378, a3);
}

void sub_19DB17430(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (objc_msgSend_isEqual_(v4, v6, @"password", v7))
  {
    uint64_t v11 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v8, v9, v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      uint64_t v12 = "  => password : REDACTED";
      double v13 = v11;
      uint32_t v14 = 2;
LABEL_7:
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v23, v14);
    }
  }
  else
  {
    int isEqual = objc_msgSend_isEqual_(v4, v8, @"message", v10);
    uint64_t v11 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v16, v17, v18);
    BOOL v19 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (isEqual)
    {
      if (v19)
      {
        int v23 = 138543362;
        id v24 = v5;
        uint64_t v12 = "ServerErrorDetail: %{public}@";
        double v13 = v11;
        uint32_t v14 = 12;
        goto LABEL_7;
      }
    }
    else if (v19)
    {
      uint64_t v22 = objc_msgSend_descriptionForObject_options_(IDSLogFormatter, v20, (uint64_t)v5, v21, 6);
      int v23 = 138412546;
      id v24 = v4;
      __int16 v25 = 2112;
      double v26 = v22;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "  => %@ : %@", (uint8_t *)&v23, 0x16u);
    }
  }
}

id IDSParseAuthDictionaryForServiceData(void *a1, const char *a2, double a3)
{
  double v3 = objc_msgSend_objectForKey_(a1, a2, @"service-data", a3);
  IDSParseAuthDictionary(v3);
  objc_claimAutoreleasedReturnValue();

  return v3;
}

id IDSParseAuthDictionary(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v4 = objc_msgSend_arrayWithObjects_(MEMORY[0x1E4F1C978], v2, @"handles", v3, @"email-address", @"auth-token", @"self-handle", @"invitation-context", @"apple-id", @"realm-user-id", 0);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, 0.0, v23, 16);
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)v18;
    uint64_t v10 = 138412290;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        double v13 = objc_msgSend_objectForKey_(v1, v7, v12, *(double *)&v10);

        if (!v13)
        {
          BOOL v15 = objc_msgSend_warning(MEMORY[0x1E4F6C3B8], v7, v14, *(double *)&v10);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)kevent buf = 138412290;
            uint64_t v22 = v12;
            _os_log_error_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_ERROR, "Missing keys in the authentication dictionary service keys.  Please file! [%@]", buf, 0xCu);
          }
        }
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v17, *(double *)&v10, v23, 16);
    }
    while (v8);
  }

  return v1;
}

id IDSAccountPropertiesFromAuthenticationDictionary(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v5 = objc_msgSend_allKeys(v1, v3, v4, 0.0, 0);
    uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v20, v7, v24, 16);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v5);
          }
          uint64_t v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if (IDSAuthenticationDelegateShouldStoreKey(v12))
          {
            BOOL v15 = objc_msgSend_objectForKey_(v1, v13, (uint64_t)v12, v14);
            if (v15)
            {
              long long v17 = IDSAccountKeyForServerKey(v12);
              if (v17) {
                objc_msgSend_setObject_forKey_(v2, v16, (uint64_t)v15, v18, v17);
              }
            }
          }
        }
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v13, (uint64_t)&v20, v14, v24, 16);
      }
      while (v9);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

__CFDictionary *IDSAccountInfoFromAuthenticationDictionary(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F1CA60];
  id v2 = a1;
  double v3 = (__CFDictionary *)objc_alloc_init(v1);
  uint64_t v6 = IDSParseAuthDictionaryForServiceData(v2, v4, v5);

  double v7 = IDSAccountPropertiesFromAuthenticationDictionary(v6);
  uint64_t v10 = objc_msgSend_objectForKey_(v7, v8, @"self-handle", v9);
  double v13 = objc_msgSend_objectForKey_(v10, v11, @"uri", v12);

  uint64_t v16 = objc_msgSend_objectForKey_(v7, v14, @"handles", v15);
  long long v19 = objc_msgSend___imArrayByApplyingBlock_(v16, v17, (uint64_t)&unk_1EEFCD398, v18);

  long long v22 = objc_msgSend_objectForKey_(v7, v20, @"profile-id", v21);
  if (v22) {
    CFDictionarySetValue(v3, @"AuthID", v22);
  }

  uint64_t v25 = objc_msgSend_objectForKey_(v7, v23, @"apple-id", v24);
  if (v25) {
    CFDictionarySetValue(v3, @"AppleID", v25);
  }

  if (objc_msgSend_length(v13, v26, v27, v28)) {
    BOOL v32 = v13 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  if (!v32) {
    CFDictionarySetValue(v3, @"SelfHandle", v13);
  }
  if (objc_msgSend_count(v19, v29, v30, v31) && v19) {
    CFDictionarySetValue(v3, @"VettedAliases", v19);
  }

  return v3;
}

id sub_19DB17B84(uint64_t a1, void *a2)
{
  id v2 = a2;
  double v5 = objc_msgSend_objectForKey_(v2, v3, @"uri", v4);
  uint64_t v8 = objc_msgSend_objectForKey_(v2, v6, @"status", v7);

  LODWORD(v2) = objc_msgSend_intValue(v8, v9, v10, v11);
  if (v2 == 5051)
  {
    double v15 = objc_msgSend__stripFZIDPrefix(v5, v12, v13, v14);
  }
  else
  {
    double v15 = 0;
  }

  return v15;
}

id IDSPrintedCapabilities(__int16 a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  double v5 = v2;
  if (a1) {
    objc_msgSend_appendString_(v2, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandIncomingMessages\n", v4);
  }
  if ((a1 & 2) != 0) {
    objc_msgSend_appendString_(v5, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates\n", v4);
  }
  if ((a1 & 4) != 0) {
    objc_msgSend_appendString_(v5, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandSessionMessages\n", v4);
  }
  if ((a1 & 8) != 0) {
    objc_msgSend_appendString_(v5, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandIncomingData\n", v4);
  }
  if ((a1 & 0x10) != 0) {
    objc_msgSend_appendString_(v5, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf\n", v4);
  }
  if ((a1 & 0x800) != 0) {
    objc_msgSend_appendString_(v5, v3, @"    * kIDSListenerCapConsumesLaunchOnDemandInvitationUpdates\n", v4);
  }
  return v5;
}

id IDSPrettyListOfEnabledCapabilities(__int16 a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = v2;
  if (a1) {
    objc_msgSend_addObject_(v2, v3, @"IncomingMessages", v5);
  }
  if ((a1 & 2) != 0) {
    objc_msgSend_addObject_(v6, v3, @"OutgoingMessageUpdates", v5);
  }
  if ((a1 & 4) != 0) {
    objc_msgSend_addObject_(v6, v3, @"SessionMessages", v5);
  }
  if ((a1 & 8) != 0) {
    objc_msgSend_addObject_(v6, v3, @"IncomingData", v5);
  }
  if ((a1 & 0x10) != 0) {
    objc_msgSend_addObject_(v6, v3, @"IncomingProtobuf", v5);
  }
  if ((a1 & 0x800) != 0) {
    objc_msgSend_addObject_(v6, v3, @"InvitationUpdates", v5);
  }
  if ((a1 & 0x20) != 0) {
    objc_msgSend_addObject_(v6, v3, @"IncomingResource", v5);
  }
  if ((a1 & 0x40) != 0) {
    objc_msgSend_addObject_(v6, v3, @"Engram", v5);
  }
  if ((a1 & 0x80) != 0) {
    objc_msgSend_addObject_(v6, v3, @"NetworkAvailableHint", v5);
  }
  if ((a1 & 0x100) != 0) {
    objc_msgSend_addObject_(v6, v3, @"AccessoryReportMessages", v5);
  }
  if ((a1 & 0x200) != 0) {
    objc_msgSend_addObject_(v6, v3, @"GroupSessionParticipantUpdates", v5);
  }
  if ((a1 & 0x400) != 0) {
    objc_msgSend_addObject_(v6, v3, @"PendingMessageUpdates", v5);
  }
  if ((a1 & 0x1000) != 0) {
    objc_msgSend_addObject_(v6, v3, @"PendingResource", v5);
  }
  double v7 = objc_msgSend_copy(v6, v3, v4, v5);

  return v7;
}

uint64_t IDSDataProtectionClassFromDataProtectionClassString(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_isEqualToIgnoringCase_(v1, v2, @"a", v3))
  {
    uint64_t v6 = 1;
  }
  else if (objc_msgSend_isEqualToIgnoringCase_(v1, v4, @"c", v5))
  {
    uint64_t v6 = 0;
  }
  else
  {
    objc_msgSend_isEqualToIgnoringCase_(v1, v7, @"d", v8);
    uint64_t v6 = 2;
  }

  return v6;
}

void _IDSsetTestOverridesForProfile(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v4 = a2;
  IMSetDomainValueForKey();
  IMSetDomainValueForKey();

  IMSetDomainValueForKey();
}

id sub_19DB18084(void *a1, void *a2, void *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a1;
  unint64_t v48 = bswap64(objc_msgSend_unsignedLongLongValue(a2, v7, v8, v9));
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
  uint64_t v13 = objc_msgSend_dataUsingEncoding_(v6, v11, 4, v12);

  uint64_t v16 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v14, (uint64_t)&v48, v15, 8);
  objc_msgSend_appendData_(v10, v17, (uint64_t)v16, v18);

  double v21 = objc_msgSend_dataUsingEncoding_(v5, v19, 4, v20);

  objc_msgSend_appendData_(v10, v22, (uint64_t)v21, v23);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  macOut[0] = v24;
  macOut[1] = v24;
  id v25 = v13;
  double v29 = (const void *)objc_msgSend_bytes(v25, v26, v27, v28);
  size_t v33 = objc_msgSend_length(v25, v30, v31, v32);
  id v34 = v10;
  id v38 = (const void *)objc_msgSend_bytes(v34, v35, v36, v37);
  size_t v42 = objc_msgSend_length(v34, v39, v40, v41);
  CCHmac(2u, v29, v33, v38, v42, macOut);
  id v43 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  unint64_t v46 = objc_msgSend_initWithBytes_length_(v43, v44, (uint64_t)macOut, v45, 32);

  return v46;
}

id sub_19DB1821C()
{
  id v0 = MEMORY[0x19F3AD8C0](@"com.apple.ids", @"kIDSTestOverridesKey");
  double v3 = objc_msgSend_dataWithJSONObject_options_error_(MEMORY[0x1E4F28D90], v1, (uint64_t)v0, v2, 0, 0);
  id v4 = [NSString alloc];
  double v7 = objc_msgSend_initWithData_encoding_(v4, v5, (uint64_t)v3, v6, 4);

  return v7;
}

id _IDStestOverrideSignatureHeader(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a2;
  id v11 = a1;
  double v12 = sub_19DB18084(a3, v9, a5);
  id v13 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v17 = objc_msgSend_stringValue(v11, v14, v15, v16);

  objc_msgSend_appendString_(v13, v18, (uint64_t)v17, v19);
  objc_msgSend_appendString_(v13, v20, @":", v21);
  objc_msgSend_appendString_(v13, v22, (uint64_t)v10, v23);

  objc_msgSend_appendString_(v13, v24, @":", v25);
  double v29 = objc_msgSend_stringValue(v9, v26, v27, v28);

  objc_msgSend_appendString_(v13, v30, (uint64_t)v29, v31);
  objc_msgSend_appendString_(v13, v32, @":", v33);
  double v37 = objc_msgSend__CUTStringFromBaseData(v12, v34, v35, v36);
  objc_msgSend_appendString_(v13, v38, (uint64_t)v37, v39);

  return v13;
}

__CFDictionary *IDSAdditionalRequestHeaders()
{
  id v0 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v4 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v1, v2, v3);
  int isInternalInstall = objc_msgSend_isInternalInstall(v4, v5, v6, v7);

  if (isInternalInstall && (IMGetDomainBoolForKey() & 1) == 0) {
    CFDictionarySetValue(v0, @"x-internal", @"true");
  }
  double v12 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v9, v10, v11);
  int v16 = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (v16)
  {
    if (IMGetDomainBoolForKey()) {
      CFDictionarySetValue(v0, @"X-Apple-Test-Application", @"true");
    }
    long long v17 = MEMORY[0x19F3AD8C0](@"com.apple.ids", @"testOptionsHeader");
    if (v17) {
      CFDictionarySetValue(v0, @"X-Apple-Test-Options", v17);
    }
    double v18 = MEMORY[0x19F3AD8C0](@"com.apple.ids", @"x-test-opts");
    if (objc_msgSend_length(v18, v19, v20, v21) && v18) {
      CFDictionarySetValue(v0, @"x-test-opts", v18);
    }
    long long v22 = MEMORY[0x19F3AD8C0](@"com.apple.ids", @"kIDSTestOverridesProfileKey");
    if (v22)
    {
      double v23 = MEMORY[0x19F3AD8C0](@"com.apple.ids", @"kIDSTestOverridesSecretKey");
      long long v24 = sub_19DB1821C();
      id v25 = objc_alloc(NSNumber);
      double v29 = objc_msgSend_now(MEMORY[0x1E4F1C9C8], v26, v27, v28);
      objc_msgSend_timeIntervalSince1970(v29, v30, v31, v32);
      uint64_t v35 = objc_msgSend_initWithLongLong_(v25, v34, 1000 * (uint64_t)v33, v33);

      double v36 = _IDStestOverrideSignatureHeader(&unk_1EF028CF0, v22, v23, v35, v24);
      if (v36) {
        CFDictionarySetValue(v0, @"X-Apple-Test-Options-Signature", v36);
      }
      if (v24) {
        CFDictionarySetValue(v0, @"X-Apple-Test-Options-JSON", v24);
      }
    }
  }
  if (((MarcoShouldLog() & 1) != 0 || IMShouldLog()) && (IMGetDomainBoolForKey() & 1) == 0) {
    CFDictionarySetValue(v0, @"x-logging", @"true");
  }
  return v0;
}

uint64_t IDSIsRunningOnN2xAWatch()
{
  if (qword_1E944F390 != -1) {
    dispatch_once(&qword_1E944F390, &unk_1EEFCD3B8);
  }
  return byte_1E944F0B0;
}

uint64_t sub_19DB186EC()
{
  uint64_t result = MGIsDeviceOneOfType();
  byte_1E944F0B0 = result;
  return result;
}

BOOL IDSCommandIsGroupSessionCommand(void *a1)
{
  id v1 = a1;
  BOOL v23 = objc_msgSend_integerValue(v1, v2, v3, v4) == 207
     || objc_msgSend_integerValue(v1, v5, v6, v7) == 208
     || objc_msgSend_integerValue(v1, v8, v9, v10) == 211
     || objc_msgSend_integerValue(v1, v11, v12, v13) == 210
     || objc_msgSend_integerValue(v1, v14, v15, v16) == 209
     || objc_msgSend_integerValue(v1, v17, v18, v19) == 239
     || objc_msgSend_integerValue(v1, v20, v21, v22) == 206;

  return v23;
}

BOOL IDSCommandIsUserInteractiveCommand(void *a1)
{
  id v1 = a1;
  BOOL v89 = objc_msgSend_integerValue(v1, v2, v3, v4) == 1
     || objc_msgSend_integerValue(v1, v5, v6, v7) == 2
     || objc_msgSend_integerValue(v1, v8, v9, v10) == 3
     || objc_msgSend_integerValue(v1, v11, v12, v13) == 4
     || objc_msgSend_integerValue(v1, v14, v15, v16) == 100
     || objc_msgSend_integerValue(v1, v17, v18, v19) == 104
     || objc_msgSend_integerValue(v1, v20, v21, v22) == 117
     || objc_msgSend_integerValue(v1, v23, v24, v25) == 118
     || objc_msgSend_integerValue(v1, v26, v27, v28) == 122
     || objc_msgSend_integerValue(v1, v29, v30, v31) == 195
     || objc_msgSend_integerValue(v1, v32, v33, v34) == 196
     || objc_msgSend_integerValue(v1, v35, v36, v37) == 207
     || objc_msgSend_integerValue(v1, v38, v39, v40) == 209
     || objc_msgSend_integerValue(v1, v41, v42, v43) == 227
     || objc_msgSend_integerValue(v1, v44, v45, v46) == 232
     || objc_msgSend_integerValue(v1, v47, v48, v49) == 233
     || objc_msgSend_integerValue(v1, v50, v51, v52) == 234
     || objc_msgSend_integerValue(v1, v53, v54, v55) == 235
     || objc_msgSend_integerValue(v1, v56, v57, v58) == 236
     || objc_msgSend_integerValue(v1, v59, v60, v61) == 237
     || objc_msgSend_integerValue(v1, v62, v63, v64) == 238
     || objc_msgSend_integerValue(v1, v65, v66, v67) == 239
     || objc_msgSend_integerValue(v1, v68, v69, v70) == 242
     || objc_msgSend_integerValue(v1, v71, v72, v73) == 243
     || objc_msgSend_integerValue(v1, v74, v75, v76) == 245
     || objc_msgSend_integerValue(v1, v77, v78, v79) == 246
     || objc_msgSend_integerValue(v1, v80, v81, v82) == 247
     || objc_msgSend_integerValue(v1, v83, v84, v85) == 248
     || objc_msgSend_integerValue(v1, v86, v87, v88) == 249;

  return v89;
}

uint64_t IDSIsVirtualMachine()
{
  if (qword_1E944F338 != -1) {
    dispatch_once(&qword_1E944F338, &unk_1EEFCD3D8);
  }
  return byte_1E944F8F1;
}

uint64_t sub_19DB18A68()
{
  int v4 = 0;
  size_t v3 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v4, &v3, 0, 0);
  if (result)
  {
    id v1 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_ERROR, "Unable to tell if device is a VM", v2, 2u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"Unable to tell if device is a VM");
      return _IDSLogTransport(@"Warning", @"IDS", @"Unable to tell if device is a VM");
    }
  }
  else
  {
    byte_1E944F8F1 = v4 != 0;
  }
  return result;
}

uint64_t IDSAssertNonFatalErrnoWithSource(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((result - 23) <= 1)
  {
    id v5 = "-";
    if (a2) {
      id v5 = a2;
    }
    objc_msgSend_stringWithFormat_(NSString, a2, @"fatal errno %d for [%s] at %s:%d", a5, result, v5, a3, a4);
    id v6 = objc_claimAutoreleasedReturnValue();
    uint64_t v10 = objc_msgSend_UTF8String(v6, v7, v8, v9);
    IDSNetworkingLogDump(v10, 0x14u);
    double v11 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)kevent buf = 138412546;
      id v23 = v6;
      __int16 v24 = 1024;
      int v25 = 5;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_ERROR, "Fatal error encountered %@, aborting in %d seconds", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"Fatal error encountered %@, aborting in %d seconds");
      _IDSLogTransport(@"Warning", @"IDS", @"Fatal error encountered %@, aborting in %d seconds");
    }
    sleep(5u);
    id v12 = v6;
    qword_1E944EDD0 = objc_msgSend_UTF8String(v12, v13, v14, v15);
    uint64_t v19 = isRunningTests(v18, qword_1E944EDD0, v16, v17);
    if (v19) {
      throwsIDSAbortException(v21, v19, v20);
    }
    abort();
  }
  return result;
}

uint64_t isRunningTests(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int v4 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], a3, a4, a1);
  uint64_t v8 = objc_msgSend_environment(v4, v5, v6, v7);
  double v11 = objc_msgSend_objectForKeyedSubscript_(v8, v9, @"XCTestConfigurationFilePath", v10);
  if (v11)
  {

    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = os_parse_boot_arg_string();
  }

  return v12;
}

void throwsIDSAbortException(double a1, uint64_t a2, const char *a3)
{
  objc_msgSend_exceptionWithName_reason_userInfo_(MEMORY[0x1E4F1CA00], a3, @"IDSAbort", a1, @"IDSAbort called!", 0);
  id v3 = objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v3);
}

void IDSCheckFileDescriptorUsageWithSource(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = socket(2, 2, 0);
  double v7 = __error();
  if (v6 <= 0)
  {
    uint64_t v24 = *v7;
    objc_msgSend_stringWithFormat_(NSString, v8, @"Too many file descriptors detected at %s:%d!", v9, a1, a2);
    id v38 = objc_claimAutoreleasedReturnValue();
    double v28 = (const char *)objc_msgSend_UTF8String(v38, v25, v26, v27);
    IDSAssertNonFatalErrnoWithSource(v24, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSFoundationUtils.m", 1961, v29);
  }
  else
  {
    close(v6);
    if (v6 >= 0xB4)
    {
      uint32_t v10 = arc4random_uniform(0x64u);
      int isSupported = objc_msgSend_isSupported(IDSAutoBugCapture, v11, v12, v13);
      int v15 = v10 < 5 ? 1 : a3;
      if (isSupported && v15)
      {
        if (qword_1E944F908 != -1) {
          dispatch_once(&qword_1E944F908, &unk_1EEFCD3F8);
        }
        os_unfair_lock_lock((os_unfair_lock_t)&dword_1E944F900);
        uint64_t v19 = (void *)qword_1E944F8F8;
        if (qword_1E944F8F8
          && (objc_msgSend_date(MEMORY[0x1E4F1C9C8], v16, v17, v18),
              uint64_t v20 = objc_claimAutoreleasedReturnValue(),
              uint64_t v23 = objc_msgSend_compare_(v19, v21, (uint64_t)v20, v22),
              v20,
              v23 == 1))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)&dword_1E944F900);
        }
        else
        {
          uint64_t v30 = objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E4F1C9C8], v16, v17, 259200.0);
          double v31 = (void *)qword_1E944F8F8;
          qword_1E944F8F8 = v30;

          double v34 = objc_msgSend_stringWithFormat_(NSString, v32, @"Number of file descriptors passed high watermark in %s!", v33, a1);
          v39[0] = MEMORY[0x1E4F143A8];
          v39[1] = 3221225472;
          v39[2] = sub_19DB1912C;
          v39[3] = &unk_1E5975570;
          id v35 = v34;
          id v40 = v35;
          objc_msgSend_triggerCaptureWithEvent_context_completion_(IDSAutoBugCapture, v36, 207, v37, v35, v39);

          os_unfair_lock_unlock((os_unfair_lock_t)&dword_1E944F900);
        }
      }
    }
  }
}

void sub_19DB19104(_Unwind_Exception *a1)
{
}

void sub_19DB19120()
{
  dword_1E944F900 = 0;
}

void sub_19DB1912C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_System(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "Finished capturing AutoBugCapture diagnostics for %@", (uint8_t *)&v7, 0xCu);
  }
}

void IDSInternalAlertSimple(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  double v11 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412802;
    id v23 = v8;
    __int16 v24 = 2112;
    id v25 = v9;
    __int16 v26 = 2112;
    id v27 = v10;
    _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "Raising alert for [%@] [%@] [%@]", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"IDSFoundationUtils", @"IDS", @"Raising alert for [%@] [%@] [%@]");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"IDSFoundationUtils", @"Raising alert for [%@] [%@] [%@]");
      }
    }
  }
  uint64_t v12 = im_primary_queue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19DB19424;
  block[3] = &unk_1E5975598;
  id v18 = v7;
  id v19 = v8;
  id v20 = v9;
  id v21 = v10;
  id v13 = v10;
  id v14 = v9;
  id v15 = v8;
  id v16 = v7;
  dispatch_async(v12, block);
}

void sub_19DB19424(uint64_t *a1, const char *a2, uint64_t a3, double a4)
{
  id v5 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], a2, a3, a4);
  int isInternalInstall = objc_msgSend_isInternalInstall(v5, v6, v7, v8);

  if (isInternalInstall)
  {
    objc_msgSend_date(MEMORY[0x1E4F1C9C8], v10, v11, v12);
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    objc_msgSend_setDateFormat_(v13, v14, @"YYYY-MM-dd", v15);
    id v18 = objc_msgSend_dateFromString_(v13, v16, a1[4], v17);

    objc_msgSend_timeIntervalSinceDate_(v30, v19, (uint64_t)v18, v20);
    if (v22 < 0.0)
    {
      id v23 = objc_msgSend_userNotificationWithIdentifier_title_message_defaultButton_alternateButton_otherButton_(MEMORY[0x1E4F6C410], v21, a1[5], v22, a1[6], a1[7], @"OK", 0, 0);
      id v27 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C418], v24, v25, v26);
      objc_msgSend_addUserNotification_listener_(v27, v28, (uint64_t)v23, v29, 0);
    }
  }
}

uint64_t IDSDeviceTypeFromProductName(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_rangeOfString_(v1, v2, @"iPod", v3) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (objc_msgSend_rangeOfString_(v1, v4, @"iPad", v5) == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend_rangeOfString_(v1, v6, @"iPhone", v7) == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (objc_msgSend_rangeOfString_(v1, v8, @"Mac", v9) == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (objc_msgSend_rangeOfString_(v1, v10, @"AppleTV", v11) == 0x7FFFFFFFFFFFFFFFLL)
          {
            if (objc_msgSend_rangeOfString_(v1, v12, @"Watch", v13) == 0x7FFFFFFFFFFFFFFFLL)
            {
              if (objc_msgSend_rangeOfString_(v1, v14, @"AudioAccessory", v15) == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (objc_msgSend_rangeOfString_(v1, v16, @"Browser", v17) == 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (objc_msgSend_rangeOfString_(v1, v18, @"xrOS", v19) == 0x7FFFFFFFFFFFFFFFLL) {
                    uint64_t v20 = 0;
                  }
                  else {
                    uint64_t v20 = 9;
                  }
                }
                else
                {
                  uint64_t v20 = 8;
                }
              }
              else
              {
                uint64_t v20 = 7;
              }
            }
            else
            {
              uint64_t v20 = 6;
            }
          }
          else
          {
            uint64_t v20 = 5;
          }
        }
        else
        {
          uint64_t v20 = 1;
        }
      }
      else
      {
        uint64_t v20 = 2;
      }
    }
    else
    {
      uint64_t v20 = 4;
    }
  }
  else
  {
    uint64_t v20 = 3;
  }

  return v20;
}

id sub_19DB196A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v5 = (objc_class *)MEMORY[0x1E4F28DC0];
  id v6 = a4;
  id v7 = [v5 alloc];
  id v10 = objc_msgSend_initForReadingFromData_error_(v7, v8, (uint64_t)v6, v9, 0);

  objc_msgSend_setDecodingFailurePolicy_(v10, v11, 0, v12);
  double v15 = objc_msgSend_decodeObjectOfClass_forKey_(v10, v13, a3, v14, *MEMORY[0x1E4F284E8]);
  objc_msgSend_finishDecoding(v10, v16, v17, v18);

  return v15;
}

uint64_t sub_19DB19740(void *a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  objc_msgSend_lockForReading(a1, v5, v6, v7);
  v4[2](v4);

  return objc_msgSend_unlock(a1, v8, v9, v10);
}

uint64_t sub_19DB19798(void *a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  objc_msgSend_lockForWriting(a1, v5, v6, v7);
  v4[2](v4);

  return objc_msgSend_unlock(a1, v8, v9, v10);
}

id sub_19DB197F0(uint64_t a1, uint64_t a2, void *a3)
{
  double v3 = (objc_class *)MEMORY[0x1E4F1C9B8];
  id v4 = a3;
  id v5 = [v3 alloc];
  double v8 = objc_msgSend_initWithBase64EncodedString_options_(v5, v6, (uint64_t)v4, v7, 0);

  return v8;
}

uint64_t sub_19DB1984C(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_phoneNumber(a3, (const char *)a3, a4, a1);
}

void sub_19DB19948(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (IMShouldLog()) {
    IMLogString_V();
  }
}

void sub_19DB199BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (IMShouldLog()) {
    IMLogString_V();
  }
}

uint64_t sub_19DB19CBC(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)double v10 = 0;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "URL Loading service disconnected", v10, 2u);
  }

  uint64_t v3 = os_log_shim_legacy_logging_enabled();
  if (v3)
  {
    sub_19DB19948(v3, (uint64_t)v4, @"URL Loading service disconnected");
    sub_19DB199BC(v7, v8, @"URL Loading service disconnected");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  return objc_msgSend__disconnected(*(void **)(a1 + 32), v4, v5, v6);
}

uint64_t sub_19DB19E50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19DB1A524(uint64_t a1, void *a2)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = MEMORY[0x19F3AFA60]();
  uint64_t v8 = (void (**)(void, void, void, void, void, void))objc_msgSend_copy(*(void **)(*(void *)(a1 + 32) + 24), v5, v6, v7);
  if (v4 == MEMORY[0x1E4F145A8])
  {
    uint64_t v72 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      double v73 = *(void **)(a1 + 32);
      uint64_t v74 = v73[1];
      *(_DWORD *)kevent buf = 138412546;
      *(void *)uint64_t v121 = v74;
      *(_WORD *)&v121[8] = 2048;
      double v122 = v73;
      _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "Loaded disconnected for request: %@  (%p)", buf, 0x16u);
    }

    uint64_t v75 = os_log_shim_legacy_logging_enabled();
    if (v75)
    {
      sub_19DB19948(v75, v76, @"Loaded disconnected for request: %@  (%p)");
      uint64_t v109 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v113 = *(void *)(a1 + 32);
      sub_19DB199BC(v77, v78, @"Loaded disconnected for request: %@  (%p)");
      if (_IMWillLog())
      {
        uint64_t v109 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v113 = *(void *)(a1 + 32);
        _IMAlwaysLog();
      }
    }
    double v79 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      uint64_t v80 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)kevent buf = 138412290;
      *(void *)uint64_t v121 = v80;
      _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_ERROR, "Remote loader crashed for request: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      sub_19DB1B228();
      sub_19DB1B274();
      uint64_t v109 = *(void *)(*(void *)(a1 + 32) + 8);
      _IDSWarnV();
    }
    objc_msgSend__disconnected(*(void **)(a1 + 32), v81, v82, v83, v109, v113);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
    {
      uint64_t v84 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "           Cancelled, not retrying or notifying of failure!", buf, 2u);
      }

      uint64_t v85 = os_log_shim_legacy_logging_enabled();
      if (v85)
      {
        sub_19DB19948(v85, v86, @"           Cancelled, not retrying or notifying of failure!");
        sub_19DB199BC(v87, v88, @"           Cancelled, not retrying or notifying of failure!");
        if (_IMWillLog()) {
          _IMAlwaysLog();
        }
      }
    }
    else if (*(int *)(*(void *)(a1 + 32) + 44) > 4)
    {
      long long v102 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v102, OS_LOG_TYPE_DEFAULT, "Not retrying, calling completion block", buf, 2u);
      }

      uint64_t v103 = os_log_shim_legacy_logging_enabled();
      if (v103)
      {
        sub_19DB19948(v103, (uint64_t)v104, @"Not retrying, calling completion block");
        sub_19DB199BC(v106, v107, @"Not retrying, calling completion block");
        if (_IMWillLog()) {
          _IMAlwaysLog();
        }
      }
      if (v8)
      {
        long long v108 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v104, *MEMORY[0x1E4F6C280], v105, -1, 0);
        ((void (**)(void, void, void, void, void *, void))v8)[2](v8, 0, 0, 0, v108, 0);
      }
    }
    else
    {
      id v90 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        int v91 = *(_DWORD *)(*(void *)(a1 + 32) + 44);
        *(_DWORD *)kevent buf = 67109376;
        *(_DWORD *)uint64_t v121 = v91;
        *(_WORD *)&v121[4] = 1024;
        *(_DWORD *)&v121[6] = 5;
        _os_log_impl(&dword_19D9BE000, v90, OS_LOG_TYPE_DEFAULT, " => Retrying... (%d/%d) retries", buf, 0xEu);
      }

      uint64_t v92 = os_log_shim_legacy_logging_enabled();
      if (v92)
      {
        sub_19DB19948(v92, v93, @" => Retrying... (%d/%d) retries");
        sub_19DB199BC(v94, v95, @" => Retrying... (%d/%d) retries");
        if (_IMWillLog()) {
          _IMAlwaysLog();
        }
      }
      id v96 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        int v97 = *(_DWORD *)(*(void *)(a1 + 32) + 44);
        *(_DWORD *)kevent buf = 67109376;
        *(_DWORD *)uint64_t v121 = v97;
        *(_WORD *)&v121[4] = 1024;
        *(_DWORD *)&v121[6] = 5;
        _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_ERROR, " => Retrying... (%d/%d) retries", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        sub_19DB1B228();
        sub_19DB1B274();
        _IDSWarnV();
      }
      uint64_t v98 = *(void *)(a1 + 32);
      int v99 = *(_DWORD *)(v98 + 44);
      *(_DWORD *)(v98 + 44) = v99 + 1;
      dispatch_time_t v100 = dispatch_time(0, 2000000000 * v99);
      long long v101 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19DB1B2C0;
      block[3] = &unk_1E5973BA8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_after(v100, v101, block);
    }
  }
  else
  {
    uint64_t v9 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      double v13 = *(void **)(a1 + 32);
      uint64_t v14 = v13[1];
      double v15 = objc_msgSend_bundleIdentifierForDataUsage(v13, v10, v11, v12);
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)kevent buf = 138412802;
      *(void *)uint64_t v121 = v14;
      *(_WORD *)&v121[8] = 2112;
      double v122 = v15;
      __int16 v123 = 2048;
      uint64_t v124 = v16;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "Loaded completed for request: %@  (Data usage identifier: %@) (%p)", buf, 0x20u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      uint64_t v20 = *(void **)(a1 + 32);
      uint64_t v21 = v20[1];
      __int16 v114 = objc_msgSend_bundleIdentifierForDataUsage(v20, v17, v18, v19);
      uint64_t v117 = *(void *)(a1 + 32);
      uint64_t v110 = v21;
      sub_19DB19948((uint64_t)v114, v22, @"Loaded completed for request: %@  (Data usage identifier: %@) (%p)");

      uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8);
      id v115 = objc_msgSend_bundleIdentifierForDataUsage(*(void **)(a1 + 32), v24, v25, v26, v110, v114, v117);
      uint64_t v118 = *(void *)(a1 + 32);
      sub_19DB199BC((uint64_t)v115, v27, @"Loaded completed for request: %@  (Data usage identifier: %@) (%p)");

      if (_IMWillLog())
      {
        __int16 v116 = objc_msgSend_bundleIdentifierForDataUsage(*(void **)(a1 + 32), v28, v29, v30, v23, v115, v118);
        _IMAlwaysLog();
      }
    }
    objc_opt_class();
    double v31 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
    objc_opt_class();
    double v32 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
    int64_t int64 = xpc_dictionary_get_int64(v3, (const char *)*MEMORY[0x1E4F6C908]);
    double v34 = IMGetXPCDataFromDictionary();
    id v35 = IMGetXPCDictionaryFromDictionary();
    uint64_t v36 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      *(void *)uint64_t v121 = v31;
      _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "           Response: %@", buf, 0xCu);
    }

    uint64_t v37 = os_log_shim_legacy_logging_enabled();
    if (v37)
    {
      sub_19DB19948(v37, v38, @"           Response: %@");
      sub_19DB199BC(v39, v40, @"           Response: %@");
      if (_IMWillLog()) {
        _IMAlwaysLog();
      }
    }
    double v41 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      *(_DWORD *)uint64_t v121 = int64;
      _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "        Status Code: %d", buf, 8u);
    }

    uint64_t v42 = os_log_shim_legacy_logging_enabled();
    if (v42)
    {
      sub_19DB19948(v42, v43, @"        Status Code: %d");
      sub_19DB199BC(v44, v45, @"        Status Code: %d");
      if (_IMWillLog()) {
        _IMAlwaysLog();
      }
    }
    double v46 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = objc_msgSend_length(v34, v47, v48, v49);
      *(_DWORD *)kevent buf = 67109120;
      *(_DWORD *)uint64_t v121 = v50;
      _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, " Result Data Length: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      uint64_t v111 = objc_msgSend_length(v34, v51, v52, v53);
      sub_19DB19948(v111, v54, @" Result Data Length: %d");
      uint64_t v112 = objc_msgSend_length(v34, v55, v56, v57, v111);
      sub_19DB199BC(v112, v58, @" Result Data Length: %d");
      if (_IMWillLog())
      {
        objc_msgSend_length(v34, v59, v60, v61, v112);
        _IMAlwaysLog();
      }
    }
    double v62 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      *(void *)uint64_t v121 = v32;
      _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "              Error: %@", buf, 0xCu);
    }

    uint64_t v63 = os_log_shim_legacy_logging_enabled();
    if (v63)
    {
      sub_19DB19948(v63, v64, @"              Error: %@");
      sub_19DB199BC(v65, v66, @"              Error: %@");
      if (_IMWillLog()) {
        _IMAlwaysLog();
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 32) + 40))
    {
      double v67 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "           Cancelled, not calling out!", buf, 2u);
      }

      uint64_t v68 = os_log_shim_legacy_logging_enabled();
      if (v68)
      {
        sub_19DB19948(v68, v69, @"           Cancelled, not calling out!");
        sub_19DB199BC(v70, v71, @"           Cancelled, not calling out!");
        if (_IMWillLog()) {
          _IMAlwaysLog();
        }
      }
    }
    else if (v8)
    {
      ((void (**)(void, void *, int64_t, void *, void *, void *))v8)[2](v8, v31, int64, v34, v32, v35);
    }
  }
  id v89 = self;
}

uint64_t sub_19DB1B228()
{
  return IMWarnString_V();
}

uint64_t sub_19DB1B274()
{
  return IMWarnString_V();
}

uint64_t sub_19DB1B2C0(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_load, a4, a2);
}

void sub_19DB1B880()
{
  id v0 = objc_alloc_init(IDSWRMExchange);
  id v1 = (void *)qword_1EB2BB790;
  qword_1EB2BB790 = (uint64_t)v0;
}

uint64_t sub_19DB1BA8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(result + 32) + 96) = a3 != 0;
  return result;
}

void sub_19DB1BB90(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x19F3AEEF0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DB1BE8C(uint64_t a1, uint64_t a2, double a3)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processXPCEvent_, a2, a3);
}

void sub_19DB1BF54(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend__stopXPCConnection(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__startXPCConnection(*(void **)(a1 + 32), v5, v6, v7);
  objc_msgSend__registerWithWRM(*(void **)(a1 + 32), v8, v9, v10);
  objc_msgSend__restartSubscriptionIfNeeded(*(void **)(a1 + 32), v11, v12, v13);
  id updated = (id)objc_msgSend__newSubscribeStatusUpdateMessage(*(void **)(a1 + 32), v14, v15, v16);
  objc_msgSend__sendXPCMessage_(*(void **)(a1 + 32), v17, (uint64_t)updated, v18);
}

uint64_t sub_19DB1C73C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t result = objc_msgSend__restartClient(*(void **)(a1 + 32), a2, a3, a4);
  ++*(_WORD *)(*(void *)(a1 + 32) + 80);
  return result;
}

void sub_19DB1C81C(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(void *)(v5 + 16))
  {
    objc_msgSend__startXPCConnection((void *)v5, a2, a3, a4);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v5 + 48))
  {
    if (*(void *)(v5 + 16) && *(void *)(a1 + 40))
    {
      uint64_t v6 = (void *)MEMORY[0x19F3AF9A0]();
      double v7 = (void *)MEMORY[0x19F3AF9A0](*(void *)(a1 + 40));
      uint64_t v8 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 136315394;
        double v10 = v6;
        __int16 v11 = 2080;
        uint64_t v12 = v7;
        _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "Send to couint64_t n = %s, message = \n %s", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"IDSWRMExchange", @"Send to couint64_t n = %s, message = \n %s");
        }
      }
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 32) + 16), *(xpc_object_t *)(a1 + 40));
      free(v6);
      free(v7);
    }
  }
  else
  {
    objc_msgSend__registerWithWRM((void *)v5, a2, a3, a4);
  }
}

void sub_19DB1CF28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB1CF3C(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    *(_DWORD *)kevent buf = 67109120;
    int v14 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "Subscribe to WRM for link recommendations of type: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
    _IDSLogV(0, @"IDSFoundation", @"IDSWRMExchange", @"Subscribe to WRM for link recommendations of type: %d");
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7 != 2)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = (void **)(a1 + 32);
    *(void *)(v9 + 40) = v7;
    double v10 = objc_msgSend__newSubscribeMessage(*v8, v4, v5, v6);
    objc_msgSend__sendXPCMessage_(*v8, v11, (uint64_t)v10, v12);
    *((unsigned char *)*v8 + 49) = 1;
  }
}

void sub_19DB1D238(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40);
    *(_DWORD *)kevent buf = 67109120;
    int v18 = v3;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "Unsubscribe from WRM for link recommendations of type: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
    _IDSLogV(0, @"IDSFoundation", @"IDSWRMExchange", @"Unsubscribe from WRM for link recommendations of type: %d");
  }
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7[5] != 2)
  {
    uint64_t v8 = objc_msgSend__newUnsubscribeMessage(v7, v4, v5, v6);
    double v10 = *(void **)(a1 + 32);
    uint64_t v9 = (void **)(a1 + 32);
    objc_msgSend__sendXPCMessage_(v10, v11, (uint64_t)v8, v12);
    *((unsigned char *)*v9 + 49) = 0;
    objc_msgSend__setRecommendedLinkType_(*v9, v13, 2, v14);
    *((void *)*v9 + 5) = 2;
    uint64_t v15 = (void *)*((void *)*v9 + 13);
    *((void *)*v9 + 13) = 0;

    double v16 = (void *)*((void *)*v9 + 14);
    *((void *)*v9 + 14) = 0;
  }
}

uint64_t sub_19DB1D91C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sendMetricReportPeriodically, a4, a2);
}

uint64_t sub_19DB1DDD4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__sendMetricReportPeriodically, a4, a2);
}

uint64_t sub_19DB1DE78(uint64_t a1, double a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__updateLocalMetric_, *(void *)(a1 + 40), a2);
}

uint64_t sub_19DB1E270(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend__sendMetricReport(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__sendXPCMessage_(*(void **)(a1 + 32), v5, *(void *)(a1 + 40), v6);
  double v10 = *(void **)(a1 + 32);
  return objc_msgSend__restartSubscriptionIfNeeded(v10, v7, v8, v9);
}

unsigned int *IDSOSNexusManagerCreate(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x40uLL, 0x10300403B4764B1uLL);
  if (!v2) {
    return v2;
  }
  uint64_t v3 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 88), 0x100004052888210uLL);
  *((void *)v2 + 6) = v3;
  if (!v3)
  {
LABEL_20:
    IDSOSNexusManagerDestroy(v2);
    return 0;
  }
  uint64_t v4 = os_nexus_attr_create();
  *(void *)uint64_t v2 = v4;
  if (!v4)
  {
    double v10 = "os_nexus_attr_create";
LABEL_19:
    perror(v10);
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      os_nexus_attr_set();
      ++v6;
      v5 += 16;
    }
    while (v6 < *(unsigned int *)(a1 + 8));
  }
  uint64_t v7 = os_nexus_controller_create();
  *((void *)v2 + 1) = v7;
  if (!v7)
  {
    double v10 = "os_nexus_controller_create";
    goto LABEL_19;
  }
  if (os_nexus_controller_register_provider())
  {
    double v10 = "os_nexus_controller_register_provider";
    goto LABEL_19;
  }
  if (os_nexus_controller_alloc_provider_instance())
  {
    double v10 = "os_nexus_controller_alloc_provider_instance";
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 88))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    double v10 = "os_nexus_controller_bind_provider_instance";
    while (1)
    {
      __int16 v11 = (__int16 *)(*(void *)(a1 + 80) + v8);
      if (os_nexus_controller_bind_provider_instance()) {
        break;
      }
      __int16 v12 = *v11;
      uint64_t v13 = *((void *)v2 + 6);
      uint64_t v14 = v2[14];
      v2[14] = v14 + 1;
      *(_WORD *)(v13 + 2 * v14) = v12;
      ++v9;
      v8 += 48;
      if (v9 >= *(unsigned int *)(a1 + 88)) {
        return v2;
      }
    }
    goto LABEL_19;
  }
  return v2;
}

void IDSOSNexusManagerDestroy(unsigned int *a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      os_nexus_attr_destroy();
    }
    if (*((void *)a1 + 1))
    {
      if (a1[14])
      {
        unint64_t v2 = 0;
        do
        {
          if (os_nexus_controller_unbind_provider_instance()) {
            perror("os_nexus_controller_unbind_provider_instance");
          }
          ++v2;
        }
        while (v2 < a1[14]);
      }
      uint64_t v3 = (void *)*((void *)a1 + 6);
      if (v3) {
        free(v3);
      }
      if (os_nexus_controller_free_provider_instance()) {
        perror("os_nexus_controller_free_provider_instance");
      }
      if (os_nexus_controller_deregister_provider()) {
        perror("os_nexus_controller_deregister_provider");
      }
      os_nexus_controller_destroy();
    }
    free(a1);
  }
}

void sub_19DB1EDFC(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v2 = objc_alloc(MEMORY[0x1E4F23A80]);
  id v13 = (id)objc_msgSend_initWithQueue_(v2, v3, 0, v4);
  uint64_t v8 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C3E0], v5, v6, v7);
  uint64_t v11 = objc_msgSend_initWithCoreTelephonyClient_systemMonitor_(v1, v9, (uint64_t)v13, v10, v8);
  __int16 v12 = (void *)qword_1EB2BB868;
  qword_1EB2BB868 = v11;
}

void sub_19DB1F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DB1F0B8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_dualSIMEnabled(v5, v6, v7, v8);

  if (v9) {
    goto LABEL_18;
  }
  id v13 = *(void **)(*(void *)(a1 + 32) + 16);
  id v35 = 0;
  unint64_t DualSimCapability = objc_msgSend_getDualSimCapability_(v13, v10, (uint64_t)&v35, v12);
  uint64_t v15 = (__CFString *)v35;
  uint64_t v19 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v16, v17, v18);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v37 = v15;
      uint64_t v21 = "Failed loading dual SIM cap { dualSIMError: %@ }";
LABEL_10:
      _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0xCu);
    }
  }
  else if (v20)
  {
    if (DualSimCapability > 4) {
      uint64_t v22 = @"Enabled";
    }
    else {
      uint64_t v22 = off_1E5975830[DualSimCapability];
    }
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v37 = v22;
    uint64_t v21 = "Loaded dual SIM cap { cap: %@ }";
    goto LABEL_10;
  }

  if (DualSimCapability == 4 || DualSimCapability == 2) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = 2;
  }
  uint64_t v28 = objc_msgSend_cache(*(void **)(a1 + 32), v23, v24, v25);
  objc_msgSend_setDualSIMEnabled_(v28, v29, v27, v30);

LABEL_18:
  double v31 = objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_dualSIMEnabled(v31, v32, v33, v34) == 1;
}

void sub_19DB1F2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DB1F314(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t isAnySIMUsable = objc_msgSend_isAnySIMUsable(v5, v6, v7, v8);

  if (!isAnySIMUsable)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v13 = *(void **)(a1 + 32);
    id v54 = 0;
    uint64_t v14 = objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v54, 0.0);
    id v52 = v54;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v55, v16, v63, 16);
    if (v17)
    {
      uint64_t v20 = v17;
      uint64_t v21 = *(void *)v56;
      uint64_t v22 = 138412546;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v56 != v21) {
            objc_enumerationMutation(v14);
          }
          uint64_t v24 = objc_msgSend_context(*(void **)(*((void *)&v55 + 1) + 8 * i), v18, v19, *(double *)&v22);
          double v25 = *(void **)(*(void *)(a1 + 32) + 16);
          id v53 = 0;
          uint64_t v28 = objc_msgSend_getPNRContext_outError_(v25, v26, (uint64_t)v24, v27, &v53);
          id v29 = v53;
          uint64_t v33 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v30, v31, v32);
          BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          if (v28)
          {
            if (v34)
            {
              *(_DWORD *)kevent buf = 138412546;
              id v60 = v28;
              __int16 v61 = 2112;
              id v62 = v24;
              _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "Checking PNRContext isReady { PNRContext: %@, ctx: %@ }", buf, 0x16u);
            }

            if (objc_msgSend_isReady(v28, v35, v36, v37))
            {
              double v41 = objc_msgSend_cache(*(void **)(a1 + 32), v38, v39, v40);
              objc_msgSend_setIsAnySIMUsable_(v41, v42, 1, v43);

              goto LABEL_17;
            }
          }
          else
          {
            if (v34)
            {
              *(_DWORD *)kevent buf = 138412546;
              id v60 = v24;
              __int16 v61 = 2112;
              id v62 = v29;
              _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "Failed loading PNRContext { ctx: %@, PNRErr: %@ }", buf, 0x16u);
            }
          }
        }
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v55, *(double *)&v22, v63, 16);
      }
      while (v20);
    }
LABEL_17:

    if (v52)
    {
      char v47 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v44, v45, v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        id v60 = v52;
        _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "Failed loading SIMs { ctxError: %@ }", buf, 0xCu);
      }
    }
  }
  uint64_t v48 = objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_isAnySIMUsable(v48, v49, v50, v51) == 1;
}

void sub_19DB1F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DB1F6C8(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t isAnySIMInserted = objc_msgSend_isAnySIMInserted(v5, v6, v7, v8);

  if (!isAnySIMInserted)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v13 = *(void **)(a1 + 32);
    id v54 = 0;
    uint64_t v14 = objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v54, 0.0);
    id v52 = v54;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v55, v16, v61, 16);
    if (v17)
    {
      uint64_t v20 = v17;
      uint64_t v21 = *(void *)v56;
      uint64_t v22 = *MEMORY[0x1E4F241F0];
      uint64_t v23 = 138412290;
      do
      {
        uint64_t v24 = 0;
        do
        {
          if (*(void *)v56 != v21) {
            objc_enumerationMutation(v14);
          }
          double v25 = objc_msgSend_context(*(void **)(*((void *)&v55 + 1) + 8 * v24), v18, v19, *(double *)&v23);
          double v26 = *(void **)(*(void *)(a1 + 32) + 16);
          id v53 = 0;
          id v29 = objc_msgSend_getSIMStatus_error_(v26, v27, (uint64_t)v25, v28, &v53);
          id v30 = v53;
          BOOL v34 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v31, v32, v33);
          id v35 = v34;
          if (v29)
          {
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)kevent buf = 138412290;
              id v60 = v29;
              _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "Loaded initial SIM status { SIMStatus: %@ }", buf, 0xCu);
            }

            if ((objc_msgSend_isEqualToString_(v29, v36, v22, v37) & 1) == 0)
            {
              double v41 = objc_msgSend_cache(*(void **)(a1 + 32), v38, v39, v40);
              objc_msgSend_setIsAnySIMInserted_(v41, v42, 1, v43);

              goto LABEL_17;
            }
          }
          else
          {
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)kevent buf = 138412290;
              id v60 = v30;
              _os_log_error_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_ERROR, "Unable to read SIM status { SIMStatusError: %@ }", buf, 0xCu);
            }
          }
          ++v24;
        }
        while (v20 != v24);
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v55, *(double *)&v23, v61, 16);
      }
      while (v20);
    }
LABEL_17:

    if (v52)
    {
      char v47 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v44, v45, v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412290;
        id v60 = v52;
        _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check SIM status { error: %@ }", buf, 0xCu);
      }
    }
  }
  uint64_t v48 = objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_isAnySIMInserted(v48, v49, v50, v51) == 1;
}

uint64_t sub_19DB1FA2C(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_SIMIdentifier(a3, (const char *)a3, a4, a1);
}

void sub_19DB1FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19DB1FB1C(uint64_t a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v2 = MGGetBoolAnswer();
  uint64_t v6 = objc_msgSend_cache(*(void **)(a1 + 32), v3, v4, v5);
  uint64_t v10 = objc_msgSend_supportsIdentification(v6, v7, v8, v9);

  if (!v10)
  {
    if (v2)
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v14 = *(void **)(a1 + 32);
      id v79 = 0;
      uint64_t v15 = objc_msgSend__unlocked_currentSIMsWithError_(v14, v11, (uint64_t)&v79, 0.0);
      uint64_t v77 = v79;
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v80, v17, v88, 16);
      if (v18)
      {
        uint64_t v21 = v18;
        uint64_t v22 = *(void *)v81;
        uint64_t v23 = 138412546;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v81 != v22) {
              objc_enumerationMutation(v15);
            }
            objc_msgSend_context(*(void **)(*((void *)&v80 + 1) + 8 * i), v19, v20, *(double *)&v23);
            double v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
            id v29 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v26, v27, v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)kevent buf = 138412290;
              uint64_t v85 = v25;
              _os_log_debug_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEBUG, "Selected subscription to check isPNRSupported { selectedSubscription: %@ }", buf, 0xCu);
            }

            id v30 = *(void **)(*(void *)(a1 + 32) + 16);
            id v78 = 0;
            int isPNRSupported_outError = objc_msgSend_isPNRSupported_outError_(v30, v31, (uint64_t)v25, v32, &v78);
            BOOL v34 = (__CFString *)v78;
            uint64_t v38 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v35, v36, v37);
            uint64_t v39 = v38;
            if (v34)
            {
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)kevent buf = 138412546;
                uint64_t v85 = v34;
                __int16 v86 = 2112;
                uint64_t v87 = v25;
                _os_log_error_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_ERROR, "Failure checking isPNRSupported{ error: %@, subscription: %@ }", buf, 0x16u);
              }

              *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
            }
            else
            {
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)kevent buf = 138412546;
                double v40 = @"NO";
                if (isPNRSupported_outError) {
                  double v40 = @"YES";
                }
                uint64_t v85 = v40;
                __int16 v86 = 2112;
                uint64_t v87 = v25;
                _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "Determined value for isPNRSupported { isPNRSupported: %@, subscription: %@ }", buf, 0x16u);
              }

              if (isPNRSupported_outError)
              {
                double v51 = objc_msgSend_cache(*(void **)(a1 + 32), v41, v42, v43);
                objc_msgSend_setSupportsIdentification_(v51, v52, 1, v53);

                goto LABEL_25;
              }
            }
          }
          uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v80, *(double *)&v23, v88, 16);
          if (v21) {
            continue;
          }
          break;
        }
      }
LABEL_25:

      uint64_t v50 = v77;
      if (v77)
      {
        long long v57 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v54, v55, v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 138412290;
          uint64_t v85 = (__CFString *)v77;
          _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check isPNRSupported { error: %@ }", buf, 0xCu);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
    }
    else
    {
      uint64_t v44 = objc_msgSend_cache(*(void **)(a1 + 32), v11, v12, v13);
      objc_msgSend_setSupportsIdentification_(v44, v45, 2, v46);

      uint64_t v50 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v47, v48, v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v50, OS_LOG_TYPE_DEFAULT, "Device does not support SMS -- returning NO", buf, 2u);
      }
    }
  }
  long long v58 = objc_msgSend_cache(*(void **)(a1 + 32), v11, v12, v13);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_supportsIdentification(v58, v59, v60, v61) == 1;

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend__legacy_supportsSMSIdentification(*(void **)(a1 + 32), v62, v63, v64);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
      uint64_t v68 = 1;
    }
    else {
      uint64_t v68 = 2;
    }
    uint64_t v69 = objc_msgSend_cache(*(void **)(a1 + 32), v65, v66, v67);
    objc_msgSend_setSupportsIdentification_(v69, v70, v68, v71);

    uint64_t v75 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v72, v73, v74);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        uint64_t v76 = @"YES";
      }
      else {
        uint64_t v76 = @"NO";
      }
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v85 = v76;
      _os_log_impl(&dword_19D9BE000, v75, OS_LOG_TYPE_DEFAULT, "Falling back to legacy PNR supported check { legacyResult: %@ }", buf, 0xCu);
    }
  }
}

void sub_19DB200AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DB200C4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  double v5 = objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t doesAnySIMSupportsSimultaneousVoiceAndDataRightNow = objc_msgSend_doesAnySIMSupportsSimultaneousVoiceAndDataRightNow(v5, v6, v7, v8);

  if (!doesAnySIMSupportsSimultaneousVoiceAndDataRightNow)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    double v13 = *(void **)(a1 + 32);
    id v61 = 0;
    uint64_t v14 = objc_msgSend__unlocked_currentSIMsWithError_(v13, v10, (uint64_t)&v61, 0.0);
    long long v58 = (__CFString *)v61;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v62, v16, v70, 16);
    if (v17)
    {
      uint64_t v20 = v17;
      uint64_t v21 = *(void *)v63;
      uint64_t v59 = *MEMORY[0x1E4F24320];
      uint64_t v22 = 138412546;
      while (2)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v63 != v21) {
            objc_enumerationMutation(v14);
          }
          objc_msgSend_context(*(void **)(*((void *)&v62 + 1) + 8 * i), v18, v19, *(double *)&v22);
          uint64_t v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
          double v25 = *(void **)(*(void *)(a1 + 32) + 16);
          id v60 = 0;
          double v28 = objc_msgSend_context_getSystemCapabilities_(v25, v26, (uint64_t)v24, v27, &v60);
          id v31 = v60;
          if (v31)
          {
            double v33 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v29, v30, v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)kevent buf = 138412546;
              double v67 = v24;
              __int16 v68 = 2112;
              id v69 = v31;
              _os_log_error_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_ERROR, "Unable to read SIM system capabilities { ctx: %@, SIMCapsError: %@ }", buf, 0x16u);
            }
          }
          else
          {
            BOOL v34 = objc_msgSend_objectForKey_(v28, v29, v59, v32);
            int v38 = objc_msgSend_intValue(v34, v35, v36, v37);

            uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
            if (*(unsigned char *)(v39 + 24)) {
              BOOL v40 = 1;
            }
            else {
              BOOL v40 = v38 == 1;
            }
            char v41 = v40;
            *(unsigned char *)(v39 + 24) = v41;
            if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
            {

              goto LABEL_22;
            }
          }
        }
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v18, (uint64_t)&v62, *(double *)&v22, v70, 16);
        if (v20) {
          continue;
        }
        break;
      }
    }
LABEL_22:

    uint64_t v45 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v42, v43, v44);
    BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      if (v46)
      {
        *(_DWORD *)kevent buf = 138412290;
        double v67 = v58;
        _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "Unable to locate subscriptions to check SIM voiceAndDateRightNow { error: %@ }", buf, 0xCu);
      }
    }
    else
    {
      if (v46)
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
          char v47 = @"YES";
        }
        else {
          char v47 = @"NO";
        }
        *(_DWORD *)kevent buf = 138412290;
        double v67 = v47;
        _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "Loaded any SIM supports simultaneous { doesAnySIMSupportsSimultaneousVoiceAndDataRightNow: %@ }", buf, 0xCu);
      }

      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = 2;
      }
      uint64_t v45 = objc_msgSend_cache(*(void **)(a1 + 32), v48, v49, v50);
      objc_msgSend_setDoesAnySIMSupportsSimultaneousVoiceAndDataRightNow_(v45, v52, v51, v53);
    }
  }
  id v54 = objc_msgSend_cache(*(void **)(a1 + 32), v10, v11, v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend_doesAnySIMSupportsSimultaneousVoiceAndDataRightNow(v54, v55, v56, v57) == 1;
}

void *sub_19DB20694()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("_CTServerConnectionCreate", @"CoreTelephony");
  off_1E944F918 = result;
  return result;
}

void *sub_19DB206C4()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("_CTServerConnectionIsPhoneNumberRegistrationSupported", @"CoreTelephony");
  off_1E944F928 = result;
  return result;
}

id sub_19DB20DE8(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v6 = objc_msgSend_labelID(v2, v3, v4, v5);

  if (v6)
  {
    uint64_t v10 = objc_msgSend_label(v2, v7, v8, v9);
    if (objc_msgSend_isEqualToString_(v10, v11, @"Provisioning", v12))
    {
      double v16 = objc_msgSend_labelID(v2, v13, v14, v15);
      int isEqualToString = objc_msgSend_isEqualToString_(v16, v17, @"00000000-0000-0000-0000-000000000000", v18);

      if (isEqualToString)
      {
        uint64_t v23 = objc_msgSend_sms(MEMORY[0x1E4F6C3B8], v20, v21, v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v35 = 138412290;
          id v36 = v2;
          uint64_t v24 = "Hiding provisioning SIM { subscription: %@ }";
LABEL_13:
          _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v35, 0xCu);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    else
    {
    }
    if (objc_msgSend_isSimHidden(v2, v20, v21, v22))
    {
      uint64_t v23 = objc_msgSend_sms(MEMORY[0x1E4F6C3B8], v25, v26, v27);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = 138412290;
        id v36 = v2;
        uint64_t v24 = "Ignoring hidden SIM { subscription: %@ }";
        goto LABEL_13;
      }
LABEL_14:

      uint64_t v6 = 0;
      goto LABEL_15;
    }
    if (objc_msgSend_isSimDataOnly(v2, v25, v26, v27))
    {
      uint64_t v23 = objc_msgSend_sms(MEMORY[0x1E4F6C3B8], v28, v29, v30);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = 138412290;
        id v36 = v2;
        uint64_t v24 = "Ignoring data only SIM { subscription: %@ }";
        goto LABEL_13;
      }
      goto LABEL_14;
    }
    double v32 = [IDSCTSIM alloc];
    uint64_t v6 = objc_msgSend_initWithContext_(v32, v33, (uint64_t)v2, v34);
  }
LABEL_15:

  return v6;
}

void sub_19DB2112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19DB21150(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19DB21160(uint64_t a1)
{
}

void sub_19DB21168(void *a1, const char *a2, double a3)
{
  uint64_t v4 = (void *)a1[4];
  id v11 = 0;
  uint64_t v5 = objc_msgSend__unlocked_currentSIMsWithError_(v4, a2, (uint64_t)&v11, a3);
  id v6 = v11;
  uint64_t v7 = *(void *)(a1[5] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

uint64_t sub_19DB218AC(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (objc_msgSend_hasPrefix_(v3, v5, @"+", v6))
  {
    uint64_t v10 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], v7, @"+", v9);
    uint64_t v13 = objc_msgSend_stringByRemovingCharactersFromSet_(v3, v11, (uint64_t)v10, v12);

    id v3 = (id)v13;
  }
  uint64_t v14 = objc_msgSend_sms(MEMORY[0x1E4F6C3B8], v7, v8, v9);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = 138412546;
    id v26 = v4;
    __int16 v27 = 2112;
    id v28 = v3;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "** Checking numbers for rereg { oldNumber: %@, currentNumber: %@}", (uint8_t *)&v25, 0x16u);
  }

  if (objc_msgSend_length(v4, v15, v16, v17) && objc_msgSend_length(v3, v18, v19, v20)) {
    uint64_t v23 = objc_msgSend_isPhoneNumber_equivalentToExistingPhoneNumber_(IDSCTAdapter, v21, (uint64_t)v3, v22, v4) ^ 1;
  }
  else {
    uint64_t v23 = 1;
  }

  return v23;
}

void sub_19DB223E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [IDSCTSIM alloc];
  id v9 = (id)objc_msgSend_initWithContext_(v4, v5, *(void *)(a1 + 32), v6);
  objc_msgSend_SIM_didUpdateRegistrationState_(v3, v7, (uint64_t)v9, v8, *(void *)(a1 + 40) != 0);
}

void sub_19DB22588(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDualSIMEnabled_(v6, v4, 0, v5);
}

void sub_19DB22698(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setIsAnySIMInserted_(v6, v4, 0, v5);
}

void sub_19DB227C0(uint64_t a1)
{
  id v4 = objc_alloc_init(IDSCTAdapterCache);
  objc_msgSend_setCache_(*(void **)(a1 + 32), v2, (uint64_t)v4, v3);
}

uint64_t sub_19DB22818(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19DB22924(uint64_t a1)
{
  id v4 = objc_alloc_init(IDSCTAdapterCache);
  objc_msgSend_setCache_(*(void **)(a1 + 32), v2, (uint64_t)v4, v3);
}

uint64_t sub_19DB2297C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19DB22A64(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSupportsIdentification_(v6, v4, 0, v5);
}

uint64_t sub_19DB22AAC(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19DB22BA0(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  double v5 = objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_setSupportsIdentification_(v5, v6, 0, v7);

  objc_msgSend_cache(*(void **)(a1 + 32), v8, v9, v10);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setIsAnySIMUsable_(v13, v11, 0, v12);
}

uint64_t sub_19DB22CB4(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_carrierBundleInformationDidChange, a4, a1);
}

uint64_t sub_19DB22CBC(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_SIMInformationDidChange, a4, a1);
}

uint64_t sub_19DB22D68(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_carrierBundleInformationDidChange, a4, a1);
}

uint64_t sub_19DB22D70(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel_SIMInformationDidChange, a4, a1);
}

void sub_19DB22E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [IDSCTSIM alloc];
  id v9 = (id)objc_msgSend_initWithContext_(v4, v5, *(void *)(a1 + 32), v6);
  objc_msgSend_SIM_didDeactivateWithInfo_(v3, v7, (uint64_t)v9, v8, *(void *)(a1 + 40));
}

void sub_19DB22FD4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  objc_msgSend_cache(*(void **)(a1 + 32), a2, a3, a4);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setDoesAnySIMSupportsSimultaneousVoiceAndDataRightNow_(v6, v4, 0, v5);
}

void sub_19DB23150()
{
  id v0 = objc_alloc_init(IDSStunConnectionDataController);
  id v1 = (void *)qword_1EB2BB798;
  qword_1EB2BB798 = (uint64_t)v0;
}

id tokenForStunCandidatePair(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  *(_OWORD *)__str = v5;
  long long v20 = v5;
  *(_OWORD *)id v11 = v5;
  long long v12 = v5;
  long long v13 = v5;
  long long v14 = v5;
  long long v15 = v5;
  long long v16 = v5;
  long long v17 = v5;
  long long v18 = v5;
  id v6 = a3;
  SAToIPPortString(__str, 0x80uLL, a1);
  SAToIPPortString(v11, 0x80uLL, a2);
  id v9 = objc_msgSend_stringWithFormat_(NSString, v7, @"%s-%s-%@", v8, __str, v11, v6);

  return v9;
}

id channelForStunCandidatePair(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v5;
  long long v25 = v5;
  long long v22 = v5;
  long long v23 = v5;
  long long v20 = v5;
  long long v21 = v5;
  *(_OWORD *)__str = v5;
  long long v19 = v5;
  long long v16 = v5;
  long long v17 = v5;
  long long v14 = v5;
  long long v15 = v5;
  long long v12 = v5;
  long long v13 = v5;
  *(_OWORD *)double v10 = v5;
  long long v11 = v5;
  SAToIPPortString(__str, 0x80uLL, a1);
  SAToIPPortString(v10, 0x80uLL, a2);
  double v8 = objc_msgSend_stringWithFormat_(NSString, v6, @"%s-%s-%04x", v7, __str, v10, __rev16(a3));
  return v8;
}

uint64_t localRemoteRelayLinkIDForVirtualStunCandidatePair(unsigned int a1, const char *a2, double a3)
{
  return objc_msgSend_stringWithFormat_(NSString, a2, @"%04x-%04x", a3, a1, a2);
}

uint64_t sub_19DB27BE8(uint64_t result)
{
  if ((int)result <= 402)
  {
    if (!result) {
      return result;
    }
    if (result != 400)
    {
      if (result == 401) {
        return 5;
      }
      return 6;
    }
    return 3;
  }
  switch(result)
  {
    case 0x193:
      return 7;
    case 0x1FC:
      return 1;
    case 0x258:
      return 3;
  }
  return 6;
}

void sub_19DB28334(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB283A4;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB283A4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleNoSessionStateTimer, a4, a2);
}

uint64_t sub_19DB28698(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend__stopReallocTimer(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_19DB288AC(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB2891C;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB2891C(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleReallocTimer, a4, a2);
}

void sub_19DB28E84(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB28EF4;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB28EF4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleSessionConnectedTimer, a4, a2);
}

void sub_19DB29660(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB296D0;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB296D0(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleSessionConvergenceTimer, a4, a2);
}

void sub_19DB29E3C(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB29EAC;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB29EAC(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleSessionGoAwayTimer, a4, a2);
}

void sub_19DB2BA60(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v5 = objc_msgSend_GlobalLink_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(char *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    v8[0] = 67109378;
    v8[1] = v6;
    __int16 v9 = 2112;
    uint64_t v10 = v7;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "updated participantID map for link %d:%@", (uint8_t *)v8, 0x12u);
  }
}

uint64_t sub_19DB2D984(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendStatsRequest_options_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

uint64_t sub_19DB2E028(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendInfoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3);
}

uint64_t sub_19DB2E7C8(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendQRPluginRegistrationRequest_options_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

void sub_19DB2F0EC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB2EFB8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19DB2F164(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendSessionInfoRequest_options_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

uint64_t sub_19DB2F998(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendPutMaterialRequest_options_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

uint64_t sub_19DB302D8(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendParticipantUpdateRequest_options_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

void sub_19DB3068C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB3059CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19DB306C0(uint64_t a1, const char *a2, double a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3))
  {
    id v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v13 = v5;
      __int16 v14 = 1024;
      int v15 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "get material request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"get material request %llu timed out after %d seconds.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"get material request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));

    uint64_t v10 = GLUCreateQRStunMessageEventWithEventSubType(242, 39, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
  }
}

void sub_19DB30C24(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB30B34);
  }
  _Unwind_Resume(a1);
}

void sub_19DB30C58(uint64_t a1, const char *a2, double a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3))
  {
    id v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v16 = v5;
      __int16 v17 = 1024;
      int v18 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "put material request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"put material request %llu timed out after %d seconds.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"put material request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));

    uint64_t v10 = GLUCreateQRStunMessageEventWithEventSubType(244, 40, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
    id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_didReceivePutMaterialResponse_forTxId_(v12, v13, *(void *)(a1 + 32), v14, 0, *(void *)(a1 + 40));
  }
}

uint64_t sub_19DB31574(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend_sendTestRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3);
}

void sub_19DB319F4(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = sub_19DB31A64;
  v1[3] = &unk_1E5973568;
  v1[4] = *(void *)(a1 + 32);
  IDSTransportThreadAddBlock(v1);
}

uint64_t sub_19DB31A64(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleLinkProbingTimer, a4, a2);
}

void sub_19DB32238(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB3212CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19DB32A44(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB32814);
  }
  _Unwind_Resume(a1);
}

void sub_19DB35D5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB3593CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t stunMessageTypeFromProtoMessageType(int a1, int a2)
{
  int v2 = a1 - 1;
  uint64_t result = 2066;
  switch(v2)
  {
    case 0:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 3808;
      goto LABEL_5;
    case 1:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 4064;
LABEL_5:
      if (v4) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v5 + 1;
      }
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 2064;
      break;
    case 4:
      uint64_t result = 3812;
      break;
    case 5:
      uint64_t result = 4068;
      break;
    case 6:
      uint64_t result = 3815;
      break;
    case 7:
      uint64_t result = 4071;
      break;
    case 8:
      uint64_t result = 3831;
      break;
    case 9:
      uint64_t result = 3816;
      break;
    case 10:
      uint64_t result = 4072;
      break;
    case 12:
      uint64_t result = 2067;
      break;
    case 13:
      uint64_t result = 3825;
      break;
    case 14:
      uint64_t result = 3813;
      break;
    case 15:
      uint64_t result = 4069;
      break;
    case 16:
      uint64_t result = 3829;
      break;
    case 17:
      uint64_t result = 3811;
      break;
    case 18:
      uint64_t result = 4067;
      break;
    case 19:
    case 20:
      uint64_t result = 2049;
      break;
    case 21:
      uint64_t result = 3810;
      break;
    case 22:
      uint64_t result = 4066;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_19DB36D4C(uint64_t a1, const char *a2, double a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), a3))
  {
    BOOL v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v21 = v5;
      __int16 v22 = 1024;
      int v23 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "info request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v18 = *(void *)(a1 + 48);
        uint64_t v19 = 10;
        _IDSLogTransport(@"GL", @"IDS", @"info request %llu timed out after %d seconds.");
        if (_IDSShouldLog())
        {
          uint64_t v18 = *(void *)(a1 + 48);
          uint64_t v19 = 10;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"info request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0.0);
    uint64_t v10 = GLUCreateQRStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    double v14 = (uint64_t *)(a1 + 32);
    objc_msgSend_processSessionInfoRequestTimeout_(v12, v9, v13, v11, v18, v19);
    id v15 = objc_loadWeakRetained((id *)(*v14 + 48));
    objc_msgSend_disconnectIdleQUICConnectionForCandidatePair_(v15, v16, *v14, v17);
  }
}

void sub_19DB37428(uint64_t a1, const char *a2, double a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), a3))
  {
    BOOL v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v27 = v5;
      __int16 v28 = 1024;
      int v29 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "participant update request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v24 = *(void *)(a1 + 48);
        uint64_t v25 = 10;
        _IDSLogTransport(@"GL", @"IDS", @"participant update request %llu timed out after %d seconds.");
        if (_IDSShouldLog())
        {
          uint64_t v24 = *(void *)(a1 + 48);
          uint64_t v25 = 10;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"participant update request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 32, *(void **)(a1 + 32), 0.0);
    uint64_t v10 = GLUCreateQRStunMessageEventWithType(WeakRetained, 32, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
    double v14 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    Value = 0;
    if (*(void *)(a1 + 40))
    {
      id v12 = (const char *)@"gl-option-participant-update-request-type";
      if (@"gl-option-participant-update-request-type") {
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"gl-option-participant-update-request-type");
      }
    }
    unsigned __int16 v17 = objc_msgSend_intValue(Value, v12, v13, v15, v24, v25);
    long long v20 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v18, v17, v19);
    if (v20) {
      CFDictionarySetValue(v14, @"ids-stun-attribute-session-state-type", v20);
    }

    CFDictionarySetValue(v14, @"ids-stun-message-type", &unk_1EF028D98);
    id v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_didReceiveParticipantUpdate_status_(v21, v22, *(void *)(a1 + 32), v23, v14, 2);
  }
}

void sub_19DB37C20(uint64_t a1, const char *a2, double a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3))
  {
    BOOL v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v15 = v5;
      __int16 v16 = 1024;
      int v17 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "plugin registration request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = 10;
        _IDSLogTransport(@"GL", @"IDS", @"plugin registration request %llu timed out after %d seconds.");
        if (_IDSShouldLog())
        {
          uint64_t v12 = *(void *)(a1 + 40);
          uint64_t v13 = 10;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"plugin registration request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 48), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 26, *(void **)(a1 + 32), 0.0);
    uint64_t v10 = GLUCreateQRStunMessageEventWithType(WeakRetained, 33, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
    objc_msgSend__removeProtoPluginRegistrationRequest_(*(void **)(a1 + 32), v9, *(void *)(a1 + 40), v11, v12, v13);
  }
}

void sub_19DB383D8(uint64_t a1, const char *a2, double a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), a3))
  {
    BOOL v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v15 = v5;
      __int16 v16 = 1024;
      int v17 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "session-info request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = 10;
        _IDSLogTransport(@"GL", @"IDS", @"session-info request %llu timed out after %d seconds.");
        if (_IDSShouldLog())
        {
          uint64_t v12 = *(void *)(a1 + 48);
          uint64_t v13 = 10;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"session-info request %llu timed out after %d seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 48));

    LODWORD(WeakRetained) = (unsigned __int16)stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 56), 0);
    GLUtilReportAWDStunMessageEventWithType(WeakRetained, 30, *(void **)(a1 + 32), 0.0);
    uint64_t v10 = GLUCreateQRStunMessageEventWithType(WeakRetained, 30, *(void **)(a1 + 32), 0, 10.0);
    if (v10) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v9, (uint64_t)v10, v11);
    }
    objc_msgSend_processSessionInfoRequestTimeout_(*(void **)(a1 + 32), v9, *(void *)(a1 + 40), v11, v12, v13);
  }
}

void sub_19DB38BFC(uint64_t a1, const char *a2, double a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 48), a3))
  {
    if (*(void *)(a1 + 56)) {
      objc_msgSend_removeObjectForKey_(*(void **)(*(void *)(a1 + 32) + 368), v4, *(void *)(a1 + 40), v5);
    }
    int v6 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = *(unsigned __int8 *)(a1 + 68);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "stats request %llu timed out after %u seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"stats request %llu timed out after %u seconds.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"stats request %llu timed out after %u seconds.");
        }
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v10, *(void *)(a1 + 32), v11, *(void *)(a1 + 48));

    unsigned __int16 v12 = stunMessageTypeFromProtoMessageType(*(_DWORD *)(a1 + 64), 0);
    LOBYTE(v13) = *(unsigned char *)(a1 + 68);
    uint64_t v15 = GLUCreateQRStunMessageEventWithType(v12, 41, *(void **)(a1 + 32), 0, (float)v13);
    if (v15) {
      objc_msgSend__notifyQREventAdded_(*(void **)(a1 + 32), v14, (uint64_t)v15, v16);
    }
  }
}

void sub_19DB39434(uint64_t a1, const char *a2, double a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_removeProtoRequest_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3))
  {
    BOOL v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = 10;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "test request %llu timed out after %d seconds.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"test request %llu timed out after %d seconds.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"test request %llu timed out after %d seconds.");
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    objc_msgSend_candidatePair_protoRequestDidTimeOut_(WeakRetained, v7, *(void *)(a1 + 32), v8, *(void *)(a1 + 40));
  }
}

BOOL IDSQRProtoDiagnosticDiagnosticReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  int v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DB3E834(uint64_t a1, const char *a2, double a3)
{
  BOOL v4 = objc_msgSend__metricContainerForMetricType_(*(void **)(a1 + 32), a2, 5316621, a3);
  if (v4)
  {
    id v58 = v4;
    id v7 = objc_alloc_init((Class)CUTWeakLinkClass());
    unsigned int v9 = *(void **)(a1 + 40);
    if (v9)
    {
      uint64_t v10 = objc_msgSend_unsignedIntegerValue(v9, v5, v6, v8);
      objc_msgSend_setEventType_(v7, v11, v10, v12);
      double v16 = *(void **)(a1 + 48);
      if (v16)
      {
        uint64_t v17 = objc_msgSend_unsignedIntegerValue(v16, v13, v14, v15);
        objc_msgSend_setEventSubType_(v7, v18, v17, v19);
      }
      int v20 = *(void **)(a1 + 56);
      if (v20)
      {
        int v21 = *(unsigned __int8 *)(a1 + 144);
        objc_msgSend_doubleValue(v20, v13, v14, v15);
        if (!v21) {
          double v23 = IDSAWDLogFuzzTimeTo10sSecondsForHotShip(v23);
        }
        objc_msgSend_setDuration_(v7, v22, (unint64_t)v23, v23);
      }
      uint64_t v24 = *(void **)(a1 + 64);
      if (v24)
      {
        uint64_t v25 = objc_msgSend_unsignedIntegerValue(v24, v13, v14, v15);
        objc_msgSend_setResultCode_(v7, v26, v25, v27);
      }
      __int16 v28 = *(void **)(a1 + 72);
      if (v28)
      {
        uint64_t v29 = objc_msgSend_unsignedIntegerValue(v28, v13, v14, v15);
        objc_msgSend_setProviderType_(v7, v30, v29, v31);
      }
      double v32 = *(void **)(a1 + 80);
      if (v32)
      {
        uint64_t v33 = objc_msgSend_unsignedIntegerValue(v32, v13, v14, v15);
        objc_msgSend_setTransportType_(v7, v34, v33, v35);
      }
      id v36 = *(void **)(a1 + 88);
      if (v36)
      {
        uint64_t v37 = objc_msgSend_unsignedIntegerValue(v36, v13, v14, v15);
        objc_msgSend_setInterfaceType_(v7, v38, v37, v39);
      }
      BOOL v40 = *(void **)(a1 + 96);
      if (v40)
      {
        uint64_t v41 = objc_msgSend_unsignedIntegerValue(v40, v13, v14, v15);
        objc_msgSend_setSkeEnabled_(v7, v42, v41, v43);
      }
      double v44 = *(void **)(a1 + 104);
      if (v44)
      {
        uint64_t v45 = objc_msgSend_unsignedIntegerValue(v44, v13, v14, v15);
        objc_msgSend_setIsInitiator_(v7, v46, v45, v47);
      }
      uint64_t v48 = *(void **)(a1 + 112);
      if (v48)
      {
        uint64_t v49 = objc_msgSend_unsignedIntegerValue(v48, v13, v14, v15);
        objc_msgSend_setProtocolVersion_(v7, v50, v49, v51);
      }
      id v52 = *(void **)(a1 + 120);
      if (v52)
      {
        uint64_t v53 = objc_msgSend_unsignedIntegerValue(v52, v13, v14, v15);
        objc_msgSend_setRetryCount_(v7, v54, v53, v55);
      }
      uint64_t v56 = *(void *)(a1 + 128);
      if (v56) {
        objc_msgSend_setServiceName_(v7, v13, v56, v15);
      }
      uint64_t v57 = *(void *)(a1 + 136);
      if (v57) {
        objc_msgSend_setSubServiceName_(v7, v13, v57, v15);
      }
      objc_msgSend__submitAWDMetric_withContainer_(*(void **)(a1 + 32), v13, (uint64_t)v7, v15, v58);
    }

    BOOL v4 = v58;
  }
}

uint64_t IDSQRProtoSessionParametersReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 0xAu:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 24;
          goto LABEL_23;
        case 0xBu:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
LABEL_23:
          int v20 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x300], 8) = v17;

          continue;
        case 0xCu:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          while (2)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                BOOL v14 = v22++ >= 9;
                if (v14)
                {
                  uint64_t v23 = 0;
                  goto LABEL_48;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v23 = 0;
          }
LABEL_48:
          uint64_t v38 = 8;
          goto LABEL_53;
        case 0xDu:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v23 |= (unint64_t)(v31 & 0x7F) << v27;
              if (v31 < 0)
              {
                v27 += 7;
                BOOL v14 = v28++ >= 9;
                if (v14)
                {
                  uint64_t v23 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v23 = 0;
          }
LABEL_52:
          uint64_t v38 = 16;
LABEL_53:
          *(void *)(a1 + v3_Block_object_dispose(&STACK[0x300], 8) = v23;
          continue;
        case 0xEu:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_55;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v34) = 0;
          goto LABEL_57;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v34) = 0;
      }
LABEL_57:
      *(_DWORD *)(a1 + 32) = v34;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB40578(uint64_t a1, uint64_t a2, void *a3)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (v7)
  {
    unsigned int v9 = objc_msgSend_groupContext(MEMORY[0x1E4F61160], v5, v6, v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)kevent buf = 138478083;
      uint64_t v34 = v10;
      __int16 v35 = 2114;
      id v36 = v7;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "No data representation - failed {group: %{private}@, error: %{public}@}", buf, 0x16u);
    }
  }
  else
  {
    objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), v5, a2, v8, @"payload");
    uint64_t v11 = [IDSCKModifyRecordsOperation alloc];
    v37[0] = *(void *)(a1 + 32);
    BOOL v14 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v12, (uint64_t)v37, v13, 1);
    unsigned int v9 = objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(v11, v15, (uint64_t)v14, v16, 0);

    objc_msgSend_setSavePolicy_(v9, v17, 2, v18);
    uint64_t v27 = MEMORY[0x1E4F143A8];
    uint64_t v28 = 3221225472;
    uint64_t v29 = sub_19DB40748;
    unint64_t v30 = &unk_1E5973DC0;
    uint64_t v31 = *(void *)(a1 + 40);
    id v32 = *(id *)(a1 + 56);
    objc_msgSend_setModifyRecordsCompletionBlock_(v9, v19, (uint64_t)&v27, v20);
    uint64_t v24 = objc_msgSend_database(*(void **)(a1 + 40), v21, v22, v23, v27, v28, v29, v30, v31);
    objc_msgSend_addOperation_(v24, v25, (uint64_t)v9, v26);
  }
}

void sub_19DB40748(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  unsigned int v9 = objc_msgSend_groupContext(MEMORY[0x1E4F61160], v6, v7, v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_INFO, "Received result from CloudKit - Done", buf, 2u);
  }

  double v13 = objc_msgSend_queue(*(void **)(a1 + 32), v10, v11, v12);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_19DB40858;
  v16[3] = &unk_1E5970A78;
  id v14 = *(id *)(a1 + 40);
  id v17 = v5;
  id v18 = v14;
  id v15 = v5;
  dispatch_async(v13, v16);
}

uint64_t sub_19DB40858(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_19DB40998(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_queue(a1[4], v7, v8, v9);
  if (v5)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DB40B04;
    block[3] = &unk_1E59759A8;
    void block[4] = a1[4];
    id v16 = v5;
    id v17 = a1[5];
    id v18 = a1[6];
    dispatch_async(v10, block);

    uint64_t v11 = v16;
  }
  else
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19DB40BB0;
    v12[3] = &unk_1E5970A78;
    id v14 = a1[6];
    id v13 = v6;
    dispatch_async(v10, v12);

    uint64_t v11 = v14;
  }
}

void sub_19DB40B04(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_19DB40BA0;
  v6[3] = &unk_1E5975980;
  uint64_t v3 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  objc_msgSend_q_groupFromRecord_inContext_completion_(v1, v4, v2, v5, v3, v6);
}

uint64_t sub_19DB40BA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_19DB40BB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_19DB40D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t IDSQRProtoGetMaterialRequestReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        id v17 = objc_alloc_init(IDSQRProtoMaterialOwner);
        objc_msgSend_addMaterialOwners_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialOwnerReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB42E88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_msgSend_state(v3, v4, v5, v6);
  if (v7 == 1)
  {
    objc_msgSend_utilities(IDSFoundationLog, v8, v9, v10);
    double v23 = (char *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEBUG)) {
      sub_19DB81A98(v3, v23, v24, v25);
    }
  }
  else if (!v7)
  {
    uint64_t v11 = objc_msgSend_value(v3, v8, v9, v10);
    uint64_t v12 = *(unsigned __int16 *)(*(void *)(a1 + 32) + 8);
    uint64_t v16 = objc_msgSend_rtcType(*(void **)(a1 + 40), v13, v14, v15);
    double v20 = objc_msgSend_dictionaryRepresentation(*(void **)(a1 + 40), v17, v18, v19);
    objc_msgSend_sendMessageWithCategory_type_payload_error_(v11, v21, v12, v22, v16, v20, 0);
  }
}

uint64_t sub_19DB430F8(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  if (v2 != -1)
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      IDSTransportThreadRemoveSocket(v2);
      unsigned int v2 = *(_DWORD *)(a1 + 32);
    }
    close(v2);
  }
  uint64_t result = *(unsigned int *)(a1 + 36);
  if (result != -1)
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      IDSTransportThreadRemoveSocket(result);
      LODWORD(result) = *(_DWORD *)(a1 + 36);
    }
    return close(result);
  }
  return result;
}

uint64_t sub_19DB43C84()
{
  int v0 = *__error();
  uint64_t result = 14;
  switch(v0)
  {
    case '\'':
    case '9':
      uint64_t result = 6;
      break;
    case '(':
      uint64_t result = 4;
      break;
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '4':
    case '5':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
      goto LABEL_5;
    case '1':
    case '2':
    case '3':
    case '@':
    case 'A':
      uint64_t result = 3;
      break;
    case '6':
      uint64_t result = 2;
      break;
    case '7':
      return result;
    case '8':
      uint64_t result = 5;
      break;
    default:
      if (v0 != 35) {
LABEL_5:
      }
        uint64_t result = 11;
      break;
  }
  return result;
}

uint64_t sub_19DB456D4(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processIncomingPacket, a4, a2);
}

uint64_t sub_19DB456DC(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processIncomingCellularPacket, a4, a2);
}

void sub_19DB4623C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_19DB46268(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Eu);
}

uint64_t IDSQRProtoParticipantUpdateIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 14)
      {
        if (v18 == 15)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          while (1)
          {
            uint64_t v40 = *v3;
            unint64_t v41 = *(void *)(a2 + v40);
            if (v41 == -1 || v41 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if ((v42 & 0x80) == 0) {
              goto LABEL_69;
            }
            v37 += 7;
            BOOL v14 = v38++ >= 9;
            if (v14)
            {
              uint64_t v39 = 0;
              goto LABEL_71;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_69:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v39 = 0;
          }
LABEL_71:
          *(void *)(a1 + 32) = v39;
          continue;
        }
        if (v18 == 16)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_64;
            }
            v25 += 7;
            BOOL v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_66:
          uint64_t v43 = 44;
          goto LABEL_67;
        }
      }
      else
      {
        if (v18 == 3)
        {
          if (v16 == 2)
          {
            uint64_t result = PBReaderPlaceMark();
            if (!result) {
              return result;
            }
            while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
            {
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              while (1)
              {
                uint64_t v34 = *v3;
                unint64_t v35 = *(void *)(a2 + v34);
                if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
                *(void *)(a2 + v34) = v35 + 1;
                v33 |= (unint64_t)(v36 & 0x7F) << v31;
                if (v36 < 0)
                {
                  v31 += 7;
                  BOOL v14 = v32++ >= 9;
                  if (!v14) {
                    continue;
                  }
                }
                goto LABEL_49;
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
              PBRepeatedUInt64Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            while (1)
            {
              uint64_t v47 = *v3;
              unint64_t v48 = *(void *)(a2 + v47);
              if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v46 |= (unint64_t)(v49 & 0x7F) << v44;
              if (v49 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_81;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_81:
            PBRepeatedUInt64Add();
          }
          continue;
        }
        if (v18 == 4)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_60;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_62;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_60:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_62:
          uint64_t v43 = 40;
LABEL_67:
          *(_DWORD *)(a1 + v43) = v21;
          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_19DB47B08(_DWORD **a1, _WORD *a2, unint64_t *a3, unsigned char *a4)
{
  uint64_t v4 = 0;
  if (!a1) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return v4;
  }
  uint64_t v4 = (unsigned __int16)*a2;
  if (!*a2) {
    return v4;
  }
  unint64_t v6 = *(unsigned __int8 *)v5;
  if (v6 > 0x3F)
  {
    unsigned int v8 = v6 >> 6;
    if (v8 == 2)
    {
      if (v4 >= 4)
      {
        unint64_t v6 = bswap32(*v5 & 0xFFFFFF7F);
        unsigned int v7 = 4;
        goto LABEL_8;
      }
    }
    else if (v8 == 1)
    {
      if (v4 >= 2)
      {
        unint64_t v6 = bswap32(*(_WORD *)v5 & 0xFFBF) >> 16;
        unsigned int v7 = 2;
        goto LABEL_8;
      }
    }
    else if (v4 >= 8)
    {
      unint64_t v6 = bswap64(*(void *)v5 & 0xFFFFFFFFFFFFFF3FLL);
      unsigned int v7 = 8;
      goto LABEL_8;
    }
    return 0;
  }
  unsigned int v7 = 1;
LABEL_8:
  *a3 = v6;
  *a1 = (_DWORD *)((char *)v5 + v7);
  *a2 = v4 - v7;
  if (a4) {
    *a4 = v7;
  }
  return 1;
}

void sub_19DB47ED4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL sub_19DB47EF8(uint64_t a1, int a2, int a3, void *__src, unint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 72);
  if (16 - v7 >= a5) {
    size_t v8 = a5;
  }
  else {
    size_t v8 = 16 - v7;
  }
  memcpy((void *)(v6 + v7 + 56), __src, v8);
  *(unsigned char *)(*(void *)(a1 + 32) + 72) += v8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend__parseHeader(*(void **)(a1 + 32), v9, v10, v11);
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;
}

void sub_19DB47F7C(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (v11)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 88), a5);
    int v15 = objc_msgSend_IDSNWLink(IDSFoundationLog, v12, v13, v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      char v19 = objc_msgSend_connection(*(void **)(a1 + 32), v16, v17, v18);
      int v35 = 134218498;
      uint64_t id = nw_connection_get_id();
      __int16 v37 = 2112;
      unsigned int v38 = v9;
      __int16 v39 = 2112;
      id v40 = v11;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "[C%llu] _readHeaderWithCompletionHandler done, data %@ error %@", (uint8_t *)&v35, 0x20u);
    }
  }
  else if (a4)
  {
    error_with_inferred_domaiuint64_t n = nw_error_create_error_with_inferred_domain();
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void **)(v21 + 88);
    *(void *)(v21 + 8_Block_object_dispose(&STACK[0x300], 8) = error_with_inferred_domain;
  }
  uint64_t v23 = *(void *)(a1 + 32);
  if (v9)
  {
    char v24 = *(NSObject **)(v23 + 80);
    if (v24)
    {
      dispatch_data_t concat = dispatch_data_create_concat(v24, v9);
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void **)(v26 + 80);
      *(void *)(v26 + 80) = concat;
    }
    else
    {
      unsigned int v32 = v9;
      uint64_t v27 = *(void **)(v23 + 80);
      *(void *)(v23 + 80) = v32;
    }

    objc_msgSend__readHeader_completionHandler_(*(void **)(a1 + 32), v33, (uint64_t)v9, v34, *(void *)(a1 + 40));
  }
  else
  {
    uint64_t v28 = *(void *)(v23 + 88);
    if (!v28)
    {
      uint64_t v29 = nw_error_create_error_with_inferred_domain();
      uint64_t v30 = *(void *)(a1 + 32);
      char v31 = *(void **)(v30 + 88);
      *(void *)(v30 + 8_Block_object_dispose(&STACK[0x300], 8) = v29;

      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(v23 + 88);
    }
    (*(void (**)(void, void, void, BOOL, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(unsigned char *)(v23 + 72) == 0, v28);
  }
}

void sub_19DB482BC(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  size_t v8 = a2;
  id v9 = a5;
  uint64_t v13 = objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    char v36 = objc_msgSend_connection(*(void **)(a1 + 32), v14, v15, v16);
    int v37 = 134218498;
    uint64_t id = nw_connection_get_id();
    __int16 v39 = 2112;
    id v40 = v8;
    __int16 v41 = 2112;
    id v42 = v9;
    _os_log_debug_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEBUG, "[C%llu] _readWithCompletionHandler done, data %@ error %@", (uint8_t *)&v37, 0x20u);
  }
  if (v9)
  {
    uint64_t v17 = *(void *)(a1 + 32);
    id v18 = v9;
    char v19 = *(void **)(v17 + 88);
    *(void *)(v17 + 8_Block_object_dispose(&STACK[0x300], 8) = v18;
  }
  else
  {
    if (!a4) {
      goto LABEL_8;
    }
    error_with_inferred_domaiuint64_t n = nw_error_create_error_with_inferred_domain();
    uint64_t v21 = *(void *)(a1 + 32);
    char v19 = *(void **)(v21 + 88);
    *(void *)(v21 + 8_Block_object_dispose(&STACK[0x300], 8) = error_with_inferred_domain;
  }

LABEL_8:
  if (!v8)
  {
    if (!*(void *)(*(void *)(a1 + 32) + 88))
    {
      uint64_t v26 = nw_error_create_error_with_inferred_domain();
      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void **)(v27 + 88);
      *(void *)(v27 + 8_Block_object_dispose(&STACK[0x300], 8) = v26;
    }
    char v25 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_14;
  }
  size_t size = dispatch_data_get_size(v8);
  uint64_t v23 = *(void *)(a1 + 32);
  size_t v24 = *(void *)(v23 + 48);
  if (v24 > size)
  {
    *(void *)(v23 + 4_Block_object_dispose(&STACK[0x300], 8) = v24 - size;
    char v25 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_14:
    v25();
    goto LABEL_21;
  }
  if (v24 == size)
  {
    dispatch_data_t subrange = v8;
  }
  else
  {
    size_t v29 = size;
    dispatch_data_t subrange = dispatch_data_create_subrange(v8, 0, v24);
    dispatch_data_t v31 = dispatch_data_create_subrange(v8, *(void *)(*(void *)(a1 + 32) + 48), v29 - *(void *)(*(void *)(a1 + 32) + 48));
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v33 = *(void **)(v32 + 80);
    *(void *)(v32 + 80) = v31;
  }
  uint64_t v34 = 0;
  *(void *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x300], 8) = 0;
  *(void *)(*(void *)(a1 + 32) + 16) = 0;
  int v35 = *(void **)(a1 + 32);
  if (!v35[10]) {
    uint64_t v34 = v35[11];
  }
  (*(void (**)(void, void, dispatch_data_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v35[3], subrange, 1, v34);

LABEL_21:
}

void sub_19DB485D0(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5)
{
  size_t v8 = a3;
  id v9 = a5;
  error_with_inferred_domaiuint64_t n = v9;
  if (v8)
  {
    dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(a1 + 32), v8);
    if (a4) {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else {
      objc_msgSend__readCapsuleWithExistingData_completionHandler_(*(void **)(a1 + 40), v14, (uint64_t)concat, v16, *(void *)(a1 + 48));
    }
  }
  else
  {
    if (!v9) {
      error_with_inferred_domaiuint64_t n = (void *)nw_error_create_error_with_inferred_domain();
    }
    uint64_t v17 = objc_msgSend_IDSNWLink(IDSFoundationLog, v10, v11, v12);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      sub_19DB82598(v17);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_19DB487B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_19DB48850;
  v4[3] = &unk_1E5975AB8;
  void v4[4] = v1;
  id v5 = *(id *)(a1 + 40);
  objc_msgSend__readCapsuleWithExistingData_completionHandler_(v1, v2, MEMORY[0x1E4F14410], v3, v4);
}

uint64_t sub_19DB48850(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 96) = 0;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

_DWORD *IDSHC_CreateContext(void *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = malloc_type_malloc(0x14uLL, 0x1000040A86A77D5uLL);
  uint64_t v15 = result;
  if (result)
  {
    *uint64_t result = a2;
    result[1] = a3;
    result[2] = bswap32(a5 | (a4 << 16));
    result[3] = a6;
    result[4] = a7;
    double v16 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67110400;
      int v18 = a2;
      __int16 v19 = 1024;
      int v20 = a3;
      __int16 v21 = 1024;
      int v22 = a4;
      __int16 v23 = 1024;
      int v24 = a5;
      __int16 v25 = 1024;
      int v26 = a6;
      __int16 v27 = 1024;
      int v28 = a7;
      _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "CreateContext - p:%u c:%u s_port:%u d_port:%u seq:%u ack:%u", buf, 0x26u);
    }

    uint64_t result = (_DWORD *)os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = (_DWORD *)_IDSShouldLog();
      if (result) {
        uint64_t result = (_DWORD *)_IDSLogV(0, @"IDSFoundation", @"IDSHC", @"CreateContext - p:%u c:%u s_port:%u d_port:%u seq:%u ack:%u");
      }
    }
  }
  *a1 = v15;
  return result;
}

void IDSHC_RemoveContext(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t IDSHC_Compress(_DWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*a1 != 6)
  {
    if (*a1 != 17) {
      return 2;
    }
    uint64_t result = 0;
    *a2 += 8;
    int v4 = *a3 - 8;
    goto LABEL_18;
  }
  uint64_t v5 = *a2;
  unsigned int v6 = (*(unsigned __int8 *)(*a2 + 12) >> 2) & 0x3C;
  if (v6 > 0x13)
  {
    uint64_t result = 0;
    uint64_t v8 = 6;
    if ((*(unsigned char *)(v5 + 13) & 0x20) == 0) {
      uint64_t v8 = 8;
    }
    uint64_t v9 = v5 + v8;
    if ((*(unsigned char *)(v5 + 13) & 0x20) != 0) {
      int v10 = -6;
    }
    else {
      int v10 = -8;
    }
    uint64_t v11 = *(void *)(v5 + 4);
    *(_DWORD *)(v9 + _Block_object_dispose(&STACK[0x300], 8) = *(_DWORD *)(v5 + 12);
    *(void *)uint64_t v9 = v11;
    int v4 = v10 + *a3;
    *a2 = v9;
LABEL_18:
    *a3 = v4;
    return result;
  }
  uint64_t v7 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    unsigned int v13 = v6;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSCompressTCPPacket2 - invalid TCP header length %d.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"IDSHC", @"IDSCompressTCPPacket2 - invalid TCP header length %d.");
    }
  }
  return 3;
}

uint64_t IDSHC_DecompressSimple(uint64_t **a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 == 17)
  {
    uint64_t v7 = *a1;
    *((_DWORD *)v7-- - 2) = a3[2];
    *((_WORD *)v7 + 2) = bswap32(*(unsigned __int16 *)a2 + 8) >> 16;
    *((_WORD *)v7 + 3) = 0;
    *a1 = v7;
    int v8 = *a2 + 8;
  }
  else
  {
    if (*a3 != 6) {
      return 2;
    }
    double v3 = *a1;
    int v4 = a3[2];
    if ((*((unsigned char *)*a1 + 9) & 0x20) != 0)
    {
      *(_DWORD *)((char *)v3 - 6) = v4;
      uint64_t v5 = (uint64_t *)((char *)v3 - 6);
      uint64_t v10 = *v3;
      *(_DWORD *)((char *)v3 + 6) = *((_DWORD *)v3 + 2);
      *(uint64_t *)((char *)v3 - 2) = v10;
      *((_WORD *)v3 + 5) = 0;
      int v6 = 6;
    }
    else
    {
      *((_DWORD *)v3 - 2) = v4;
      uint64_t v5 = v3 - 1;
      *(uint64_t *)((char *)v3 - 4) = *v3;
      *(uint64_t *)((char *)v3 + 4) = *((unsigned int *)v3 + 2);
      int v6 = 8;
    }
    int v8 = *a2 + v6;
    *a1 = v5;
  }
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t sub_19DB4997C(uint64_t a1, int a2)
{
  *(void *)&v40[5] = *MEMORY[0x1E4F143B8];
  int v4 = *(_opaque_pthread_t **)a1;
  if (v4 != pthread_self())
  {
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_opaque_pthread_t **)a1;
      *(_DWORD *)kevent buf = 134218240;
      unsigned int v38 = v6;
      __int16 v39 = 2048;
      *(void *)id v40 = pthread_self();
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "should assert real time mode on thread %p, not %p", buf, 0x16u);
    }
    uint64_t v7 = os_log_shim_legacy_logging_enabled();
    if (v7)
    {
      uint64_t v7 = _IDSShouldLogTransport();
      if (v7)
      {
        pthread_self();
        _IDSLogTransport(@"TPThread", @"IDS", @"should assert real time mode on thread %p, not %p");
        uint64_t v7 = _IDSShouldLog();
        if (v7)
        {
          pthread_self();
          uint64_t v7 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"should assert real time mode on thread %p, not %p");
        }
      }
    }
    uint64_t v11 = isRunningTests(v10, v7, v8, v9);
    if (v11) {
      throwsIDSAbortException(v13, v11, v12);
    }
    abort();
  }
  int v14 = *(_DWORD *)(a1 + 80);
  if (a2)
  {
    *(_DWORD *)(a1 + 80) = v14 + 1;
    if (v14 < 1)
    {
      int v36 = -1431655766;
      sub_19DB4A04C(56, &v36);
      *(_DWORD *)(a1 + 84) = v36;
      sub_19DB4A1E0();
      uint64_t v34 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)kevent buf = 134218496;
        unsigned int v38 = v35;
        __int16 v39 = 1024;
        *(_DWORD *)id v40 = v36;
        v40[2] = 1024;
        *(_DWORD *)&v40[3] = 56;
        _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "asserting real time mode on thread %p (%d => %d)", buf, 0x18u);
      }
      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"asserting real time mode on thread %p (%d => %d)");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"asserting real time mode on thread %p (%d => %d)");
          }
        }
      }
    }
    else
    {
      uint64_t v15 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        double v16 = *(_opaque_pthread_t **)a1;
        int v17 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)kevent buf = 134218240;
        unsigned int v38 = v16;
        __int16 v39 = 1024;
        *(_DWORD *)id v40 = v17;
        _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "asserting real time mode on thread %p but already in real time mode (%d assertions)", buf, 0x12u);
      }
      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"asserting real time mode on thread %p but already in real time mode (%d assertions)");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"asserting real time mode on thread %p but already in real time mode (%d assertions)");
          }
        }
      }
    }
  }
  else
  {
    if (!v14)
    {
      __int16 v19 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)kevent buf = 134217984;
        unsigned int v38 = v20;
        _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p but not in real time mode", buf, 0xCu);
      }
      uint64_t v21 = os_log_shim_legacy_logging_enabled();
      if (v21)
      {
        uint64_t v21 = _IDSShouldLogTransport();
        if (v21)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"unasserting real time mode on thread %p but not in real time mode");
          uint64_t v21 = _IDSShouldLog();
          if (v21) {
            uint64_t v21 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"unasserting real time mode on thread %p but not in real time mode");
          }
        }
      }
      uint64_t v25 = isRunningTests(v24, v21, v22, v23);
      if (v25) {
        throwsIDSAbortException(v27, v25, v26);
      }
      abort();
    }
    *(_DWORD *)(a1 + 80) = v14 - 1;
    if (v14 < 2)
    {
      int v31 = *(_DWORD *)(a1 + 84);
      int v36 = -1431655766;
      sub_19DB4A04C(v31, &v36);
      sub_19DB4A1E0();
      uint64_t v32 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)kevent buf = 134218496;
        unsigned int v38 = v33;
        __int16 v39 = 1024;
        *(_DWORD *)id v40 = v36;
        v40[2] = 1024;
        *(_DWORD *)&v40[3] = v31;
        _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p (%d => %d)", buf, 0x18u);
      }
      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"unasserting real time mode on thread %p (%d => %d)");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"unasserting real time mode on thread %p (%d => %d)");
          }
        }
      }
    }
    else
    {
      int v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(_opaque_pthread_t **)a1;
        int v30 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)kevent buf = 134218240;
        unsigned int v38 = v29;
        __int16 v39 = 1024;
        *(_DWORD *)id v40 = v30;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "unasserting real time mode on thread %p but still in real time mode (%d assertions)", buf, 0x12u);
      }
      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLogTransport();
        if (result)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"unasserting real time mode on thread %p but still in real time mode (%d assertions)");
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"unasserting real time mode on thread %p but still in real time mode (%d assertions)");
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19DB4A04C(int a1, int *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sched_param v10 = (sched_param)0xAAAAAAAAAAAAAAAALL;
  int v9 = -1431655766;
  int v4 = IMGetDomainIntForKey();
  if ((v4 - 1) >= 0x63) {
    int v5 = a1;
  }
  else {
    int v5 = v4;
  }
  int v6 = pthread_self();
  pthread_getschedparam(v6, &v9, &v10);
  if (a2) {
    *a2 = v10.sched_priority;
  }
  v10.sched_priority = v5;
  pthread_setschedparam(v6, v9, &v10);
  uint64_t v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    int v12 = v5;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "Set IDSTransportThread priority at %d.", buf, 8u);
  }
  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLogTransport();
    if (result)
    {
      _IDSLogTransport(@"TPThread", @"IDS", @"Set IDSTransportThread priority at %d.");
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Set IDSTransportThread priority at %d.");
      }
    }
  }
  return result;
}

uint64_t sub_19DB4A1E0()
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v0 = (void *)MEMORY[0x19F3AD8C0](@"com.apple.ids", @"IDSTransportCPUConfig");
  if (v0)
  {
    double v3 = objc_msgSend_componentsSeparatedByString_(v0, v1, @":", v2);
    int v9 = 90;
    int v10 = 50;
    if (objc_msgSend_count(v3, v4, v5, v6) == 2)
    {
      uint64_t v11 = objc_msgSend_objectAtIndex_(v3, v7, 0, v8);
      int v15 = objc_msgSend_intValue(v11, v12, v13, v14);
      int v18 = objc_msgSend_objectAtIndex_(v3, v16, 1, v17);
      int v22 = objc_msgSend_intValue(v18, v19, v20, v21);
      BOOL v23 = (v15 - 1) < 0x63;
      BOOL v24 = v22 > 0;
      if (v23 && v24) {
        int v10 = v22;
      }
      else {
        int v10 = 50;
      }
      if (v23 && v24) {
        int v9 = v15;
      }
      else {
        int v9 = 90;
      }
    }
  }
  else
  {
    int v9 = 90;
    int v10 = 50;
  }
  uint64_t v25 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109376;
    int v33 = v9;
    __int16 v34 = 1024;
    int v35 = v10;
    _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "Fix IDSTransportThread CPU limit (%d, %d).", buf, 0xEu);
  }
  uint64_t v26 = os_log_shim_legacy_logging_enabled();
  if (v26)
  {
    uint64_t v26 = _IDSShouldLogTransport();
    if (v26)
    {
      _IDSLogTransport(@"TPThread", @"IDS", @"Fix IDSTransportThread CPU limit (%d, %d).");
      uint64_t v26 = _IDSShouldLog();
      if (v26) {
        uint64_t v26 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Fix IDSTransportThread CPU limit (%d, %d).");
      }
    }
  }
  thread_act_t v27 = MEMORY[0x19F3AE5B0](v26);
  policy_mach_timebase_info info = 0;
  thread_policy_set(v27, 1u, &policy_info, 1u);
  uint64_t result = proc_setthread_cpupercent();
  int v29 = result;
  if (result)
  {
    policy_mach_timebase_info info = 1;
    thread_policy_set(v27, 1u, &policy_info, 1u);
    int v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109632;
      int v33 = v9;
      __int16 v34 = 1024;
      int v35 = v10;
      __int16 v36 = 1024;
      int v37 = v29;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare.", buf, 0x14u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare.");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare.");
        }
      }
    }
  }
  return result;
}

BOOL IDSTransportThreadInit()
{
  if (qword_1E944F208 != -1) {
    dispatch_once(&qword_1E944F208, &unk_1EEFCEAD8);
  }
  int v0 = dword_1E944EFA8;
  if (!dword_1E944EFA8)
  {
    uint64_t v1 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v3 = 0;
      _os_log_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadInit: transport thread not initialized", v3, 2u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadInit: transport thread not initialized");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadInit: transport thread not initialized");
        }
      }
    }
  }
  return v0 != 0;
}

BOOL IDSTransportThreadInitWithPriority(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  switch(a1)
  {
    case 100:
      if (qword_1E944F948 != -1) {
        dispatch_once(&qword_1E944F948, &unk_1EEFCEAB8);
      }
      double v2 = (_opaque_pthread_t **)&unk_1E944EF48;
      break;
    case 200:
      if (qword_1E944F940 != -1) {
        dispatch_once(&qword_1E944F940, &unk_1EEFCE598);
      }
      double v2 = (_opaque_pthread_t **)&unk_1E944EEF0;
      break;
    case 300:
      if (qword_1E944F938 != -1) {
        dispatch_once(&qword_1E944F938, &unk_1EEFCD7F8);
      }
      double v2 = (_opaque_pthread_t **)&unk_1E944EFF8;
      break;
    default:
      if (qword_1E944F208 != -1) {
        dispatch_once(&qword_1E944F208, &unk_1EEFCEAD8);
      }
      double v2 = &qword_1E944EFA0;
      break;
  }
  int v3 = *((_DWORD *)v2 + 2);
  if (!v3)
  {
    int v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      uint64_t v7 = a1;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadInit: transport thread with priority %lu not initialized", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadInit: transport thread with priority %lu not initialized");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadInit: transport thread with priority %lu not initialized");
        }
      }
    }
  }
  return v3 != 0;
}

void IDSTransportThreadAddBlockWithPriority(uint64_t a1, const void *a2)
{
  double v2 = (_opaque_pthread_t **)&unk_1E944EFF8;
  int v3 = &qword_1E944EFA0;
  if (a1 == 200) {
    int v3 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a1 != 300) {
    double v2 = v3;
  }
  if (a1 == 100) {
    int v4 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    int v4 = v2;
  }
  sub_19D9BF8B8((uint64_t)v4, a2);
}

void IDSTransportThreadAddSyncBlockWithPriority(uint64_t a1, const void *a2)
{
  double v2 = (_opaque_pthread_t **)&unk_1E944EFF8;
  int v3 = &qword_1E944EFA0;
  if (a1 == 200) {
    int v3 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a1 != 300) {
    double v2 = v3;
  }
  if (a1 == 100) {
    int v4 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    int v4 = v2;
  }
  sub_19DB4A898(v4, a2);
}

void sub_19DB4A898(_opaque_pthread_t **a1, const void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = *a1;
    if (v4 == pthread_self())
    {
      uint64_t v5 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        double v6 = *a1;
        *(_DWORD *)kevent buf = 134217984;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "should not add a sync block to the current thread %p", buf, 0xCu);
      }
      uint64_t v7 = os_log_shim_legacy_logging_enabled();
      if (v7)
      {
        uint64_t v7 = _IDSShouldLogTransport();
        if (v7)
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"should not add a sync block to the current thread %p");
          uint64_t v7 = _IDSShouldLog();
          if (v7) {
            uint64_t v7 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"should not add a sync block to the current thread %p");
          }
        }
      }
      uint64_t v11 = isRunningTests(v10, v7, v8, v9);
      if (v11) {
        throwsIDSAbortException(v13, v11, v12);
      }
      abort();
    }
    memset(buf, 170, 16);
    pthread_dependency_init_np();
    double v14 = _Block_copy(a2);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = sub_19DB4CFA4;
    v15[3] = &unk_1E5975AE8;
    void v15[4] = v14;
    v15[5] = buf;
    sub_19D9BF8B8((uint64_t)a1, v15);
    pthread_dependency_wait_np();
    _Block_release(v14);
  }
}

uint64_t IDSTransportThreadAddSocket(unsigned int a1, const void *a2, const void *a3)
{
  return sub_19DB4AAA0((uint64_t)&qword_1E944EFA0, a1, a2, a3);
}

uint64_t sub_19DB4AAA0(uint64_t a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v9;
  *(_OWORD *)&changelist.data = v9;
  if ((a2 & 0x80000000) != 0)
  {
    BOOL v24 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      *(_DWORD *)__int16 v36 = a2;
      _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddSocket called with bad socket %d", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadAddSocket called with bad socket %d");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadAddSocket called with bad socket %d");
        }
      }
    }
  }
  else
  {
    double v13 = *(_opaque_pthread_t **)a1;
    if (v13 != pthread_self())
    {
      double v14 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)kevent buf = 134218240;
        *(void *)__int16 v36 = v15;
        *(_WORD *)&v36[8] = 2048;
        pthread_t v37 = pthread_self();
        _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "should add socket on thread %p, not %p", buf, 0x16u);
      }
      uint64_t v16 = os_log_shim_legacy_logging_enabled();
      if (v16)
      {
        uint64_t v16 = _IDSShouldLogTransport();
        if (v16)
        {
          pthread_self();
          _IDSLogTransport(@"TPThread", @"IDS", @"should add socket on thread %p, not %p");
          uint64_t v16 = _IDSShouldLog();
          if (v16)
          {
            pthread_self();
            uint64_t v16 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"should add socket on thread %p, not %p");
          }
        }
      }
      uint64_t v20 = isRunningTests(v19, v16, v17, v18);
      if (v20) {
        throwsIDSAbortException(v22, v20, v21);
      }
      abort();
    }
    sub_19DB4BCB0(a1, a2);
    if ((int)v5 < 1)
    {
      LODWORD(v23) = 0;
    }
    else
    {
      uint64_t v23 = 0;
      while (*(_DWORD *)(v7 + 4 * v23) != -1)
      {
        if (v5 == ++v23)
        {
          LODWORD(v23) = v5;
          break;
        }
      }
    }
    ++*(_DWORD *)(a1 + 24);
    if ((int)v23 >= *(_DWORD *)(a1 + 40))
    {
      uint64_t result = sub_19DB4CB30(a1);
      if (!result) {
        return result;
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
    }
    *(_DWORD *)(v7 + 4 * v23) = a2;
    if (a3)
    {
      *(void *)(v6 + 8 * v23) = _Block_copy(a3);
      changelist.ident = a2;
      *(void *)&changelist.filter = 393215;
      changelist.data = 0;
      changelist.udata = (void *)v23;
      if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
      {
        int v26 = *__error();
        thread_act_t v27 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109632;
          *(_DWORD *)__int16 v36 = v23;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = a2;
          LOWORD(v37) = 1024;
          *(_DWORD *)((char *)&v37 + 2) = v26;
          _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)", buf, 0x14u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, READ, ADD|ENABLE) failed with error(%d)");
            }
          }
        }
      }
    }
    else
    {
      *(void *)(v6 + 8 * v23) = 0;
    }
    if (a4)
    {
      *(void *)(v8 + 8 * v23) = _Block_copy(a4);
      changelist.ident = a2;
      *(void *)&changelist.filter = 393214;
      changelist.data = 0;
      changelist.udata = (void *)v23;
      if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
      {
        int v28 = *__error();
        int v29 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109632;
          *(_DWORD *)__int16 v36 = v23;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = a2;
          LOWORD(v37) = 1024;
          *(_DWORD *)((char *)&v37 + 2) = v28;
          _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)", buf, 0x14u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, WRITE, ADD|ENABLE) failed with error(%d)");
            }
          }
        }
      }
    }
    else
    {
      *(void *)(v8 + 8 * v23) = 0;
    }
    if (*(_DWORD *)(a1 + 36) < (signed int)a2) {
      *(_DWORD *)(a1 + 36) = a2;
    }
    if (v23 == v5) {
      ++*(_DWORD *)(a1 + 44);
    }
    int v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(_DWORD *)(a1 + 44);
      uint64_t v32 = *(void *)(v6 + 8 * v23);
      uint64_t v33 = *(void *)(v8 + 8 * v23);
      *(_DWORD *)kevent buf = 67110144;
      *(_DWORD *)__int16 v36 = a2;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v23;
      LOWORD(v37) = 1024;
      *(_DWORD *)((char *)&v37 + 2) = v31;
      HIWORD(v37) = 2048;
      uint64_t v38 = v32;
      __int16 v39 = 2048;
      uint64_t v40 = v33;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "added socket %d at %d (count:%d) with readBlock %p writeBlock %p", buf, 0x28u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"added socket %d at %d (count:%d) with readBlock %p writeBlock %p");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"added socket %d at %d (count:%d) with readBlock %p writeBlock %p");
        }
      }
    }
  }
  return result;
}

uint64_t IDSTransportThreadAddSocketWithPriority(unsigned int a1, const void *a2, const void *a3, uint64_t a4)
{
  uint64_t v7 = (_opaque_pthread_t **)&unk_1E944EFF8;
  uint64_t v8 = &qword_1E944EFA0;
  if (a4 == 200) {
    uint64_t v8 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a4 != 300) {
    uint64_t v7 = v8;
  }
  if (a4 == 100) {
    long long v9 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    long long v9 = v7;
  }
  return sub_19DB4AAA0((uint64_t)v9, a1, a2, a3);
}

uint64_t IDSTransportThreadSuspendSocket(unsigned int a1, char a2)
{
  return sub_19DB4B1E0((uint64_t)&qword_1E944EFA0, a1, a2);
}

uint64_t sub_19DB4B1E0(uint64_t result, unsigned int a2, char a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)*(unsigned int *)(result + 44);
  uint64_t v5 = *(void *)(result + 48);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v6;
  *(_OWORD *)&changelist.data = v6;
  if ((a2 & 0x80000000) != 0)
  {
    int v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      unsigned int v19 = a2;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadSuspendSocket called with bad socket %d", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadSuspendSocket called with bad socket %d");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadSuspendSocket called with bad socket %d");
        }
      }
    }
  }
  else if ((int)v4 < 1)
  {
LABEL_6:
    double v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"YES";
      *(_DWORD *)kevent buf = 67109634;
      unsigned int v19 = a2;
      if ((a3 & 1) == 0) {
        uint64_t v11 = @"NO";
      }
      __int16 v20 = 2112;
      *(void *)double v21 = v11;
      *(_WORD *)&v21[8] = 1024;
      int v22 = (int)v4;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "suspendSocket(%d, forRead:%@) cannot find socket (count:%d)", buf, 0x18u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"suspendSocket(%d, forRead:%@) cannot find socket (count:%d)");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"suspendSocket(%d, forRead:%@) cannot find socket (count:%d)");
        }
      }
    }
  }
  else
  {
    uint64_t v8 = result;
    long long v9 = 0;
    while (*(_DWORD *)(v5 + 4 * (void)v9) != a2)
    {
      long long v9 = (char *)v9 + 1;
      if (v4 == v9) {
        goto LABEL_6;
      }
    }
    if (a3)
    {
      changelist.ident = a2;
      *(void *)&changelist.filter = 589823;
      changelist.data = 0;
      changelist.udata = v9;
      uint64_t result = kevent(*(_DWORD *)(result + 32), &changelist, 1, 0, 0, 0);
      if ((result & 0x80000000) != 0)
      {
        int v13 = *__error();
        double v14 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109632;
          unsigned int v19 = v9;
          __int16 v20 = 1024;
          *(_DWORD *)double v21 = a2;
          *(_WORD *)&v21[4] = 1024;
          *(_DWORD *)&v21[6] = v13;
          _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)", buf, 0x14u);
        }
        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLogTransport();
          if (result)
          {
            _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)");
            uint64_t result = _IDSShouldLog();
            if (result) {
              uint64_t result = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, READ, DISABLE) failed with error(%d)");
            }
          }
        }
      }
    }
    if ((a3 & 2) != 0)
    {
      changelist.ident = a2;
      *(void *)&changelist.filter = 589822;
      changelist.data = 0;
      changelist.udata = v9;
      uint64_t result = kevent(*(_DWORD *)(v8 + 32), &changelist, 1, 0, 0, 0);
      if ((result & 0x80000000) != 0)
      {
        int v15 = *__error();
        uint64_t v16 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)kevent buf = 67109632;
          unsigned int v19 = v9;
          __int16 v20 = 1024;
          *(_DWORD *)double v21 = a2;
          *(_WORD *)&v21[4] = 1024;
          *(_DWORD *)&v21[6] = v15;
          _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)", buf, 0x14u);
        }
        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLogTransport();
          if (result)
          {
            _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)");
            uint64_t result = _IDSShouldLog();
            if (result) {
              uint64_t result = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, WRITE, DISABLE) failed with error(%d)");
            }
          }
        }
      }
    }
    ++*(_DWORD *)(v8 + 24);
  }
  return result;
}

uint64_t IDSTransportThreadSuspendSocketWithPriority(unsigned int a1, char a2, uint64_t a3)
{
  uint64_t v5 = (_opaque_pthread_t **)&unk_1E944EFF8;
  long long v6 = &qword_1E944EFA0;
  if (a3 == 200) {
    long long v6 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a3 != 300) {
    uint64_t v5 = v6;
  }
  if (a3 == 100) {
    uint64_t v7 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    uint64_t v7 = v5;
  }
  return sub_19DB4B1E0((uint64_t)v7, a1, a2);
}

uint64_t IDSTransportThreadResumeSocket(unsigned int a1, char a2)
{
  return sub_19DB4B73C((uint64_t)&qword_1E944EFA0, a1, a2);
}

uint64_t sub_19DB4B73C(uint64_t result, unsigned int a2, char a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = (void *)*(unsigned int *)(result + 44);
  uint64_t v6 = *(void *)(result + 48);
  uint64_t v5 = *(void *)(result + 56);
  uint64_t v7 = *(void *)(result + 64);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v8;
  *(_OWORD *)&changelist.data = v8;
  if ((a2 & 0x80000000) != 0)
  {
    double v14 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      unsigned int v21 = a2;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadResumeSocket called with bad socket %d", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadResumeSocket called with bad socket %d");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadResumeSocket called with bad socket %d");
        }
      }
    }
  }
  else if ((int)v4 < 1)
  {
LABEL_6:
    int v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = @"YES";
      *(_DWORD *)kevent buf = 67109634;
      unsigned int v21 = a2;
      if ((a3 & 1) == 0) {
        int v13 = @"NO";
      }
      __int16 v22 = 2112;
      *(void *)uint64_t v23 = v13;
      *(_WORD *)&v23[8] = 1024;
      int v24 = (int)v4;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "resumeSocket(%d, forRead:%@) cannot find socket (count:%d)", buf, 0x18u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"resumeSocket(%d, forRead:%@) cannot find socket (count:%d)");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"resumeSocket(%d, forRead:%@) cannot find socket (count:%d)");
        }
      }
    }
  }
  else
  {
    uint64_t v10 = result;
    uint64_t v11 = 0;
    while (*(_DWORD *)(v6 + 4 * (void)v11) != a2)
    {
      uint64_t v11 = (char *)v11 + 1;
      if (v4 == v11) {
        goto LABEL_6;
      }
    }
    if (a3)
    {
      if (*(void *)(v5 + 8 * (void)v11))
      {
        changelist.ident = a2;
        *(void *)&changelist.filter = 327679;
        changelist.data = 0;
        changelist.udata = v11;
        uint64_t result = kevent(*(_DWORD *)(result + 32), &changelist, 1, 0, 0, 0);
        if ((result & 0x80000000) != 0)
        {
          int v15 = *__error();
          uint64_t v16 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109632;
            unsigned int v21 = v11;
            __int16 v22 = 1024;
            *(_DWORD *)uint64_t v23 = a2;
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v15;
            _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)", buf, 0x14u);
          }
          uint64_t result = os_log_shim_legacy_logging_enabled();
          if (result)
          {
            uint64_t result = _IDSShouldLogTransport();
            if (result)
            {
              _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)");
              uint64_t result = _IDSShouldLog();
              if (result) {
                uint64_t result = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, READ, ENABLE) failed with error(%d)");
              }
            }
          }
        }
      }
    }
    if ((a3 & 2) != 0)
    {
      if (*(void *)(v7 + 8 * (void)v11))
      {
        changelist.ident = a2;
        *(void *)&changelist.filter = 327678;
        changelist.data = 0;
        changelist.udata = v11;
        uint64_t result = kevent(*(_DWORD *)(v10 + 32), &changelist, 1, 0, 0, 0);
        if ((result & 0x80000000) != 0)
        {
          int v17 = *__error();
          uint64_t v18 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109632;
            unsigned int v21 = v11;
            __int16 v22 = 1024;
            *(_DWORD *)uint64_t v23 = a2;
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v17;
            _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)", buf, 0x14u);
          }
          uint64_t result = os_log_shim_legacy_logging_enabled();
          if (result)
          {
            uint64_t result = _IDSShouldLogTransport();
            if (result)
            {
              _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)");
              uint64_t result = _IDSShouldLog();
              if (result) {
                uint64_t result = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, WRITE, ENABLE) failed with error(%d)");
              }
            }
          }
        }
      }
    }
    ++*(_DWORD *)(v10 + 24);
  }
  return result;
}

uint64_t IDSTransportThreadResumeSocketWithPriority(unsigned int a1, char a2, uint64_t a3)
{
  uint64_t v5 = (_opaque_pthread_t **)&unk_1E944EFF8;
  uint64_t v6 = &qword_1E944EFA0;
  if (a3 == 200) {
    uint64_t v6 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a3 != 300) {
    uint64_t v5 = v6;
  }
  if (a3 == 100) {
    uint64_t v7 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    uint64_t v7 = v5;
  }
  return sub_19DB4B73C((uint64_t)v7, a1, a2);
}

void IDSTransportThreadRemoveSocket(unsigned int a1)
{
}

void sub_19DB4BCB0(uint64_t a1, unsigned int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = (void *)*(unsigned int *)(a1 + 44);
  int v4 = *(int **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v7;
  *(_OWORD *)&changelist.data = v7;
  if ((a2 & 0x80000000) != 0)
  {
    unsigned int v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      *(_DWORD *)pthread_t v37 = a2;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadRemoveSocket called with bad socket %d", buf, 8u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadRemoveSocket called with bad socket %d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadRemoveSocket called with bad socket %d");
        }
      }
    }
  }
  else
  {
    long long v9 = *(_opaque_pthread_t **)a1;
    if (v9 != pthread_self())
    {
      uint64_t v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(_opaque_pthread_t **)a1;
        *(_DWORD *)kevent buf = 134218240;
        *(void *)pthread_t v37 = v11;
        *(_WORD *)&v37[8] = 2048;
        pthread_t v38 = pthread_self();
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "should remove socket on thread %p, not %p", buf, 0x16u);
      }
      uint64_t v12 = os_log_shim_legacy_logging_enabled();
      if (v12)
      {
        uint64_t v12 = _IDSShouldLogTransport();
        if (v12)
        {
          pthread_self();
          _IDSLogTransport(@"TPThread", @"IDS", @"should remove socket on thread %p, not %p");
          uint64_t v12 = _IDSShouldLog();
          if (v12)
          {
            pthread_self();
            uint64_t v12 = _IDSLogV(0, @"IDSFoundation", @"TPThread", @"should remove socket on thread %p, not %p");
          }
        }
      }
      uint64_t v16 = isRunningTests(v15, v12, v13, v14);
      if (v16) {
        throwsIDSAbortException(v18, v16, v17);
      }
      abort();
    }
    if ((int)v3 < 1)
    {
LABEL_15:
      __int16 v20 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109376;
        *(_DWORD *)pthread_t v37 = a2;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v3;
        _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "removeSocket(%d) cannot find socket (count:%d)", buf, 0xEu);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"removeSocket(%d) cannot find socket (count:%d)");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TPThread", @"removeSocket(%d) cannot find socket (count:%d)");
          }
        }
      }
    }
    else
    {
      unsigned int v19 = 0;
      while (v4[(void)v19] != a2)
      {
        unsigned int v19 = (char *)v19 + 1;
        if (v3 == v19) {
          goto LABEL_15;
        }
      }
      __int16 v22 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(v5 + 8 * (void)v19);
        uint64_t v24 = *(void *)(v6 + 8 * (void)v19);
        *(_DWORD *)kevent buf = 67110144;
        *(_DWORD *)pthread_t v37 = a2;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v19;
        LOWORD(v3_Block_object_dispose(&STACK[0x300], 8) = 1024;
        *(_DWORD *)((char *)&v38 + 2) = v3 - 1;
        HIWORD(v3_Block_object_dispose(&STACK[0x300], 8) = 2048;
        uint64_t v39 = v23;
        __int16 v40 = 2048;
        uint64_t v41 = v24;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "removing socket %d at %d (count:%d) with readBlock %p writeBlock %p", buf, 0x28u);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"TPThread", @"IDS", @"removing socket %d at %d (count:%d) with readBlock %p writeBlock %p");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"TPThread", @"removing socket %d at %d (count:%d) with readBlock %p writeBlock %p");
          }
        }
      }
      v4[(void)v19] = -1;
      if (*(void *)(v5 + 8 * (void)v19))
      {
        changelist.ident = a2;
        *(void *)&changelist.filter = 196607;
        changelist.data = 0;
        changelist.udata = v19;
        if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
        {
          int v25 = *__error();
          int v26 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109632;
            *(_DWORD *)pthread_t v37 = v19;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = a2;
            LOWORD(v3_Block_object_dispose(&STACK[0x300], 8) = 1024;
            *(_DWORD *)((char *)&v38 + 2) = v25;
            _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)", buf, 0x14u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, READ, DELETE) failed with error(%d)");
              }
            }
          }
        }
        thread_act_t v27 = (const void **)(v5 + 8 * (void)v19);
        _Block_release(*v27);
        *thread_act_t v27 = 0;
      }
      if (*(void *)(v6 + 8 * (void)v19))
      {
        changelist.ident = a2;
        *(void *)&changelist.filter = 196606;
        changelist.data = 0;
        changelist.udata = v19;
        if (kevent(*(_DWORD *)(a1 + 32), &changelist, 1, 0, 0, 0) < 0)
        {
          int v28 = *__error();
          int v29 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)kevent buf = 67109632;
            *(_DWORD *)pthread_t v37 = v19;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = a2;
            LOWORD(v3_Block_object_dispose(&STACK[0x300], 8) = 1024;
            *(_DWORD *)((char *)&v38 + 2) = v28;
            _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)", buf, 0x14u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"TPThread", @"IDS", @"kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"TPThread", @"kevent(fd[%d]=%d, WRITE, DELETE) failed with error(%d)");
              }
            }
          }
        }
        int v30 = (const void **)(v6 + 8 * (void)v19);
        _Block_release(*v30);
        *int v30 = 0;
      }
      ++*(_DWORD *)(a1 + 24);
      if (*(_DWORD *)(a1 + 36) == a2)
      {
        uint64_t v31 = *(unsigned int *)(a1 + 44);
        int v32 = -1;
        if ((int)v31 >= 1)
        {
          do
          {
            int v34 = *v4++;
            int v33 = v34;
            if (v34 > v32) {
              int v32 = v33;
            }
            --v31;
          }
          while (v31);
        }
        *(_DWORD *)(a1 + 36) = v32;
      }
    }
  }
}

void IDSTransportThreadRemoveSocketWithPriority(unsigned int a1, uint64_t a2)
{
  int v3 = (_opaque_pthread_t **)&unk_1E944EFF8;
  int v4 = &qword_1E944EFA0;
  if (a2 == 200) {
    int v4 = (_opaque_pthread_t **)&unk_1E944EEF0;
  }
  if (a2 != 300) {
    int v3 = v4;
  }
  if (a2 == 100) {
    uint64_t v5 = (_opaque_pthread_t **)&unk_1E944EF48;
  }
  else {
    uint64_t v5 = v3;
  }
  sub_19DB4BCB0((uint64_t)v5, a1);
}

uint64_t IDSTransportThreadAssertRealTimeMode(int a1)
{
  return sub_19DB4997C((uint64_t)&qword_1E944EFA0, a1);
}

uint64_t IDSTransportThreadAddBlockAfter(const void *a1, double a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&changelist.ident = v3;
  *(_OWORD *)&changelist.data = v3;
  int v4 = _Block_copy(a1);
  if (a2 <= 9223372040.0)
  {
    intptr_t v7 = (uint64_t)(a2 * 1000000000.0);
    uint32_t v6 = 132;
  }
  else if (a2 <= 9.22337204e12)
  {
    intptr_t v7 = (uint64_t)(a2 * 1000000.0);
    uint32_t v6 = 130;
  }
  else if (a2 <= 9.22337204e18)
  {
    intptr_t v7 = (uint64_t)a2;
    uint32_t v6 = 129;
  }
  else
  {
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      double v13 = a2;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadAddBlockAfter - the interval value %f is too big! Please check your value!");
        }
      }
    }
    uint32_t v6 = 129;
    intptr_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  changelist.ident = (uintptr_t)v4;
  *(_DWORD *)&changelist.filter = 1179641;
  changelist.fflags = v6;
  changelist.data = v7;
  changelist.udata = v4;
  uint64_t result = kevent(dword_1E944EFC0, &changelist, 1, 0, 0, 0);
  if ((result & 0x80000000) != 0)
  {
    int v9 = *__error();
    uint64_t v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v13) = v9;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadAddBlockAfter kevent errno %d", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadAddBlockAfter kevent errno %d");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadAddBlockAfter kevent errno %d");
        }
      }
    }
  }
  return result;
}

uint64_t IDSTransportThreadKeventTestInitializer(uint64_t result)
{
  dword_1E944EFC0 = result;
  return result;
}

void sub_19DB4C740()
{
}

void sub_19DB4C750(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = kqueue();
  *(_DWORD *)(a1 + 32) = v4;
  if (v4 == -1)
  {
    int v8 = *__error();
    int v9 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      LODWORD(v13) = v8;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "IDSTransportThreadInit kqueue failed (%d)", buf, 8u);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"IDSTransportThreadInit kqueue failed (%d)");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"IDSTransportThreadInit kqueue failed (%d)");
        }
      }
    }
    goto LABEL_10;
  }
  *(_DWORD *)(a1 + 40) = 32;
  if (sub_19DB4CB30(a1))
  {
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 36) = **(_DWORD **)(a1 + 48);
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x300], 8) = 0;
    *(void *)(a1 + 72) = a2;
    int v5 = pthread_create((pthread_t *)a1, 0, (void *(__cdecl *)(void *))sub_19D9BFF20, (void *)a1);
    if (v5)
    {
      int v6 = v5;
      intptr_t v7 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        LODWORD(v13) = v6;
        _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "failed to create transport thread (%d)", buf, 8u);
      }
      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(@"TPThread", @"IDS", @"failed to create transport thread (%d)");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"TPThread", @"failed to create transport thread (%d)");
        }
      }
LABEL_10:
      sub_19DB4CAE0();
      return;
    }
    uint64_t v10 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      pthread_t v11 = *(pthread_t *)a1;
      *(_DWORD *)kevent buf = 134217984;
      pthread_t v13 = v11;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "Created transport thread with tid(%p).", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Created transport thread with tid(%p).");
    }
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 1;
  }
  else
  {
    sub_19DB4CAE0();
  }
}

void sub_19DB4CAB0()
{
}

void sub_19DB4CAC0()
{
}

void sub_19DB4CAD0()
{
}

double sub_19DB4CAE0()
{
  sub_19DB4CE10((uint64_t)&qword_1E944EFA0);
  sub_19DB4CE10((uint64_t)&unk_1E944EFF8);
  sub_19DB4CE10((uint64_t)&unk_1E944EEF0);
  return sub_19DB4CE10((uint64_t)&unk_1E944EF48);
}

uint64_t sub_19DB4CB30(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v2 = 2 * *(_DWORD *)(a1 + 40);
  long long v3 = malloc_type_realloc(*(void **)(a1 + 48), 4 * v2, 0x100004052888210uLL);
  if (!v3)
  {
    intptr_t v7 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      int v11 = v2;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "realloc(%d) for fds failed", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (!result) {
      return result;
    }
    uint64_t result = _IDSShouldLog();
    if (!result) {
      return result;
    }
    _IDSLogV(0, @"IDSFoundation", @"TPThread", @"realloc(%d) for fds failed");
    return 0;
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x300], 8) = v3;
  int v4 = malloc_type_realloc(*(void **)(a1 + 56), 8 * v2, 0x80040B8603338uLL);
  if (!v4)
  {
    int v8 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      int v11 = v2;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "realloc(%d) for readBlocks failed", buf, 8u);
    }
    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (!result) {
      return result;
    }
    uint64_t result = _IDSShouldLog();
    if (!result) {
      return result;
    }
    _IDSLogV(0, @"IDSFoundation", @"TPThread", @"realloc(%d) for readBlocks failed");
    return 0;
  }
  *(void *)(a1 + 56) = v4;
  int v5 = malloc_type_realloc(*(void **)(a1 + 64), 8 * v2, 0x80040B8603338uLL);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 4sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v2;
    return 1;
  }
  int v9 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    int v11 = v2;
    _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "realloc(%d) for writeBlocks failed", buf, 8u);
  }
  uint64_t result = os_log_shim_legacy_logging_enabled();
  if (result)
  {
    uint64_t result = _IDSShouldLog();
    if (result)
    {
      _IDSLogV(0, @"IDSFoundation", @"TPThread", @"realloc(%d) for writeBlocks failed");
      return 0;
    }
  }
  return result;
}

double sub_19DB4CE10(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  sub_19D9E6780(a1, (void *)3);
  int v2 = *(_opaque_pthread_t **)a1;
  if (*(void *)a1)
  {
    *(void *)kevent buf = 0xAAAAAAAAAAAAAAAALL;
    pthread_join(v2, (void **)buf);
  }
  long long v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_opaque_pthread_t **)a1;
    *(_DWORD *)kevent buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Transport thread with tid(%p) stopped.", buf, 0xCu);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"TPThread", @"IDS", @"Transport thread with tid(%p) stopped.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"TPThread", @"Transport thread with tid(%p) stopped.");
      }
    }
  }

  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 != -1) {
    close(v5);
  }
  *(void *)(a1 + 8sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x300], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_19DB4CFA4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);
  return MEMORY[0x1F40CD9C0](v2, 0);
}

uint64_t IDSQRProtoAllocBindJoinInfoReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    intptr_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if (v17 == 2)
      {
        int v30 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v30);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v30, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoQuicConnectionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    intptr_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadData();
        char v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoAllocBindAllocBindReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  int v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void sub_19DB4EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DB4EA90(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = a3;
  objc_msgSend__writeStringToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v5, a2, v6, *(void *)(*(void *)(a1 + 32) + 8) + 32);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend__writeNumberToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v7, (uint64_t)v15, v8, *(void *)(*(void *)(a1 + 32) + 8) + 32);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend__writeStringToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v9, (uint64_t)v15, v10, *(void *)(*(void *)(a1 + 32) + 8) + 32);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        objc_msgSend__writeDictionaryToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v11, (uint64_t)v15, v12, *(void *)(*(void *)(a1 + 32) + 8) + 32);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          objc_msgSend__writeArrayToByteBuffer_buffer_(IDSSessionInfoMetadataSerializer, v13, (uint64_t)v15, v14, *(void *)(*(void *)(a1 + 32) + 8) + 32);
        }
      }
    }
  }
}

void sub_19DB4EE08(uint64_t a1, void *a2, void *a3)
{
  id v16 = a3;
  id v5 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  unsigned int v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (isKindOfClass) {
    objc_msgSend__writeStringToByteBuffer_buffer_(v9, v6, (uint64_t)v5, v8, v10);
  }
  else {
    objc_msgSend__writeNumberToByteBuffer_buffer_(v9, v6, (uint64_t)v5, v8, v10);
  }

  objc_opt_class();
  char v12 = objc_opt_isKindOfClass();
  double v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  if (v12) {
    objc_msgSend__writeStringToByteBuffer_buffer_(v14, v11, (uint64_t)v16, v13, v15);
  }
  else {
    objc_msgSend__writeArrayToByteBuffer_buffer_(v14, v11, (uint64_t)v16, v13, v15);
  }
}

BOOL IDSQRProtoReallocateReallocateReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

void *sub_19DB4FE44()
{
  uint64_t result = (void *)MEMORY[0x19F3ADAF0]("AnalyticsSendEvent", @"CoreAnalytics");
  off_1E944F0E0 = result;
  return result;
}

uint64_t IDSSimpleUInt16List_Init(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v3 = (uint64_t *)result;
    int v4 = malloc_type_malloc(2 * a2, 0x1000040BDFB0063uLL);
    v3[2] = (uint64_t)v4;
    if (v4)
    {
      *long long v3 = a2;
      v3[1] = 0;
      id v5 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *v3;
        *(_DWORD *)kevent buf = 134217984;
        uint64_t v9 = v6;
        _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: initialized to size %lu.", buf, 0xCu);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(1, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: initialized to size %lu.");
        }
      }
    }
    else
    {
      int v7 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: failed to initialize.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: failed to initialize.");
        }
      }
    }
  }
  return result;
}

void *IDSSimpleUInt16List_Destroy(void *result)
{
  if (result)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v1 = (void *)result[2];
    if (v1) {
      free(v1);
    }
    uint64_t v2 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v3 = 0;
      _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: list destroyed.", v3, 2u);
    }

    uint64_t result = (void *)os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = (void *)_IDSShouldLog();
      if (result) {
        return (void *)_IDSLogV(0, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: list destroyed.");
      }
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_AddItem(uint64_t result, unsigned int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  long long v3 = (uint64_t *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (!v4)
  {
    if (*(void *)result)
    {
LABEL_23:
      uint64_t v10 = *(_WORD **)(result + 16);
      uint64_t v13 = *(void *)(result + 8);
    }
    else
    {
      size_t v7 = 0;
      uint64_t v4 = 0;
      uint64_t v6 = 0;
LABEL_16:
      uint64_t v9 = malloc_type_realloc(*(void **)(result + 16), v7, 0x121291F8uLL);
      if (!v9)
      {
        char v17 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: failed to realloc list.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: failed to realloc list.");
          }
        }
        return result;
      }
      uint64_t v10 = v9;
      uint64_t v11 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *v3;
        *(_DWORD *)kevent buf = 134218240;
        *(void *)unint64_t v21 = v12;
        *(_WORD *)&v21[8] = 2048;
        *(void *)&unsigned char v21[10] = v6;
        _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: list size changed from %lu to %lu.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: list size changed from %lu to %lu.");
      }
      v3[2] = (uint64_t)v10;
      *long long v3 = v6;
      uint64_t v13 = v3[1];
    }
    v10[v4] = a2;
    v3[1] = v13 + 1;
    double v14 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = v3[1];
      *(_DWORD *)kevent buf = 67109376;
      *(_DWORD *)unint64_t v21 = __rev16(a2);
      *(_WORD *)&v21[4] = 2048;
      *(void *)&v21[6] = v15;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: added item %04x, count %lu.", buf, 0x12u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(1, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: added item %04x, count %lu.");
      }
    }
    return result;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if (*(unsigned __int16 *)(*(void *)(result + 16) + 2 * i) == a2)
    {
      id v16 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)kevent buf = 67109120;
        *(_DWORD *)unint64_t v21 = __rev16(a2);
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: item %04x is already in the list, ignore.", buf, 8u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSSimpleUInt16List: item %04x is already in the list, ignore.");
        }
      }
      return result;
    }
  }
  if (v4 != *(void *)result) {
    goto LABEL_23;
  }
  if (v4 < 0)
  {
    unsigned int v18 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *v3;
      *(_DWORD *)kevent buf = 134217984;
      *(void *)unint64_t v21 = v19;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: 2 * list->listSize overflow, list->listunint64_t Size = %lu", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSSimpleUInt16List: 2 * list->listSize overflow, list->listunint64_t Size = %lu");
      }
    }
  }
  else
  {
    uint64_t v6 = 2 * v4;
    size_t v7 = 4 * v4;
    if (((2 * v4) & 0x8000000000000000) == 0) {
      goto LABEL_16;
    }
    char v8 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)kevent buf = 134217984;
      *(void *)unint64_t v21 = 4 * v4;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEBUG, "Error: IDSSimpleUInt16List: sizeof(uint16_t) * newListSize overflow, sizeOfNewListunint64_t Size = %lu", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSSimpleUInt16List: sizeof(uint16_t) * newListSize overflow, sizeOfNewListunint64_t Size = %lu");
      }
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_RemoveItem(uint64_t result, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v5 = 0;
      while (*(unsigned __int16 *)(*(void *)(result + 16) + 2 * v5) != a2)
      {
        if (v4 == ++v5) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    if (v5 == v4)
    {
LABEL_9:
      uint64_t v6 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 67109120;
        unsigned int v10 = __rev16(a2);
        _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "IDSSimpleUInt16List: cannot find item %04x.", buf, 8u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: cannot find item %04x.");
        }
      }
    }
    else
    {
      memmove((void *)(*(void *)(result + 16) + 2 * v5), (const void *)(*(void *)(result + 16) + 2 * v5 + 2), 2 * (v4 + ~v5));
      --*(void *)(v3 + 8);
      size_t v7 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(v3 + 8);
        *(_DWORD *)kevent buf = 67109376;
        unsigned int v10 = __rev16(a2);
        __int16 v11 = 2048;
        uint64_t v12 = v8;
        _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEBUG, "IDSSimpleUInt16List: removed item %04x, count %lu.", buf, 0x12u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(1, @"IDSFoundation", @"GL", @"IDSSimpleUInt16List: removed item %04x, count %lu.");
        }
      }
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_HasItem(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      uint64_t v3 = *(unsigned __int16 **)(result + 16);
      uint64_t v4 = v2 - 1;
      do
      {
        int v5 = *v3++;
        uint64_t result = v5 == a2;
      }
      while (v5 != a2 && v4-- != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t IDSSimpleUInt16List_Count(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t IDSSimpleUInt16List_ElementAtIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(void *)(result + 8) <= (unint64_t)a2) {
      return 0;
    }
    else {
      return *(unsigned __int16 *)(*(void *)(result + 16) + 2 * a2);
    }
  }
  return result;
}

uint64_t IDSQRSendInfoList_Init(uint64_t result, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = (uint64_t **)result;
    uint64_t v4 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = malloc_type_calloc(1uLL, 312 * a2, 0x1000040F005E0B1uLL);
      v5[1] = (uint64_t)v6;
      if (v6)
      {
        *int v5 = a2;
        *uint64_t v3 = v5;
        size_t v7 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *v3;
          uint64_t v9 = **v3;
          *(_DWORD *)kevent buf = 134218240;
          uint64_t v13 = v8;
          __int16 v14 = 2048;
          uint64_t v15 = v9;
          _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: initialized list %p to size %lu.", buf, 0x16u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLogTransport();
          if (result)
          {
            _IDSLogTransport(@"GL", @"IDS", @"IDSQRSendInfoList_Init: initialized list %p to size %lu.");
            uint64_t result = _IDSShouldLog();
            if (result) {
              return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_Init: initialized list %p to size %lu.");
            }
          }
        }
      }
      else
      {
        __int16 v11 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)kevent buf = 0;
          _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: failed to initialize items.", buf, 2u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled();
        if (result)
        {
          uint64_t result = _IDSShouldLog();
          if (result) {
            return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_Init: failed to initialize items.");
          }
        }
      }
    }
    else
    {
      unsigned int v10 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Init: failed to initialize list.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_Init: failed to initialize list.");
        }
      }
    }
  }
  return result;
}

void IDSQRSendInfoList_Destroy(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a1 = 0;
    uint64_t v2 = (void *)a1[1];
    if (v2) {
      free(v2);
    }
    uint64_t v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      int v5 = a1;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_Destroy: list %p destroyed.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"IDSQRSendInfoList_Destroy: list %p destroyed.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_Destroy: list %p destroyed.");
      }
    }
    free(a1);
  }
}

uint64_t IDSQRSendInfoList_AddItemAtIndex(uint64_t result, void *__src, int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  int v5 = (unint64_t *)result;
  unint64_t v6 = *(void *)result;
  if (*(void *)result > (unint64_t)a3)
  {
    size_t v7 = *(char **)(result + 8);
LABEL_4:
    memcpy(&v7[312 * a3], __src, 0x138uLL);
    uint64_t v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134218240;
      uint64_t v20 = (uint64_t)__src;
      __int16 v21 = 1024;
      LODWORD(v22) = a3;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d.", buf, 0x12u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d.");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_AddItemAtIndex: added item %p at index %d.");
        }
      }
    }
    return result;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    unsigned int v10 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *v5;
      *(_DWORD *)kevent buf = 134217984;
      uint64_t v20 = v11;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: list->listSize * 2 overflow, list->listunint64_t Size = %lu", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSQRSendInfoList_AddItemAtIndex: list->listSize * 2 overflow, list->listunint64_t Size = %lu");
      }
    }
  }
  else if (a3 == 0x7FFFFFFF)
  {
    uint64_t v9 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: itemIndex = INT_MAX", buf, 2u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLog();
      if (result) {
        return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSQRSendInfoList_AddItemAtIndex: itemIndex = INT_MAX");
      }
    }
  }
  else
  {
    unint64_t v12 = 2 * v6;
    if (v12 <= a3 + 1) {
      unint64_t v13 = a3 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    if (is_mul_ok(v13, 0x138uLL))
    {
      uint64_t v15 = (char *)malloc_type_realloc(*(void **)(result + 8), 312 * v13, 0xA967F352uLL);
      if (v15)
      {
        size_t v7 = v15;
        uint64_t v16 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *v5;
          *(_DWORD *)kevent buf = 134218240;
          uint64_t v20 = v17;
          __int16 v21 = 2048;
          unint64_t v22 = v13;
          _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: list size changed from %lu to %lu.", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_AddItemAtIndex: list size changed from %lu to %lu.");
        }
        *int v5 = v13;
        v5[1] = (unint64_t)v7;
        goto LABEL_4;
      }
      unsigned int v18 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "IDSQRSendInfoList_AddItemAtIndex: failed to realloc list.", buf, 2u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSQRSendInfoList_AddItemAtIndex: failed to realloc list.");
        }
      }
    }
    else
    {
      __int16 v14 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)kevent buf = 134218240;
        uint64_t v20 = 312;
        __int16 v21 = 2048;
        unint64_t v22 = v13;
        _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEBUG, "Error: IDSQRSendInfoList_AddItemAtIndex: sizeof(IDSQRSendInfo) * newListSize overflow, sizeof(IDSQRSendInfo) = %lu, newListunint64_t Size = %lu", buf, 0x16u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled();
      if (result)
      {
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(1, @"IDSFoundation", @"GL", @"Error: IDSQRSendInfoList_AddItemAtIndex: sizeof(IDSQRSendInfo) * newListSize overflow, sizeof(IDSQRSendInfo) = %lu, newListunint64_t Size = %lu");
        }
      }
    }
  }
  return result;
}

void *IDSQRSendInfoList_ItemAtIndex(void *result, int a2)
{
  if (result)
  {
    if (*result <= (unint64_t)a2) {
      return 0;
    }
    else {
      return (void *)(result[1] + 312 * a2);
    }
  }
  return result;
}

uint64_t IDSQRSendInfoList_AddItemAtIndexFromCandidatePair(uint64_t a1, void *a2, int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  LODWORD(v44) = objc_msgSend_linkID(v5, v6, v7, v8);
  objc_msgSend_local(v5, v9, v10, v11, v44, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0, (unsigned __int128)0,
    (unsigned __int128)0,
    (unsigned __int128)0,
    0,
    0,
    0,
    0,
    0,
    0,
  unint64_t v12 = v48);
  HIDWORD(v44) = objc_msgSend_index(v12, v13, v14, v15);

  uint64_t v19 = objc_msgSend_local(v5, v16, v17, v18);
  uint64_t v47 = objc_msgSend_transport(v19, v20, v21, v22);

  __int16 v45 = objc_msgSend_channelNumber(v5, v23, v24, v25);
  isVirtualRelayStunCandidateOSStatus Pair = objc_msgSend_isVirtualRelayStunCandidatePair(v5, v26, v27, v28);
  int v32 = objc_msgSend_local(v5, v29, v30, v31);
  objc_msgSend_address(v32, v33, v34, v35);

  uint64_t v39 = objc_msgSend_remote(v5, v36, v37, v38);

  objc_msgSend_external(v39, v40, v41, v42);
  __memcpy_chk();
  __memcpy_chk();
  return IDSQRSendInfoList_AddItemAtIndex(a1, &v44, a3);
}

id GLUtilConnectionDictionaryForNWConnectionInfo(void *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v3 = a1;
    double v8 = objc_msgSend_childConnectionID(v3, v4, v5, v6);
    if (!v8)
    {
      memset(uu, 170, sizeof(uu));
      uuid_clear(uu);
      id v10 = objc_alloc(MEMORY[0x1E4F29128]);
      double v8 = objc_msgSend_initWithUUIDBytes_(v10, v11, (uint64_t)uu, v12);
    }
    v37[0] = @"id";
    unint64_t v13 = IDSGetUUIDDataFromNSUUID(v8, v7, v9);
    v38[0] = v13;
    v37[1] = @"protocol-stack";
    uint64_t v17 = objc_msgSend_protocolStackDescription(v3, v14, v15, v16);
    v38[1] = v17;
    void v37[2] = @"nw-connection-id";
    double v18 = NSNumber;
    uint64_t v22 = objc_msgSend_connectionID(v3, v19, v20, v21);
    double v25 = objc_msgSend_numberWithUnsignedLongLong_(v18, v23, v22, v24);
    v38[2] = v25;
    v37[3] = @"nw-connection-token";
    char v29 = objc_msgSend_token(v3, v26, v27, v28);

    v38[3] = v29;
    v37[4] = @"allow-outgoing";
    int v32 = objc_msgSend_numberWithBool_(NSNumber, v30, a2, v31);
    void v38[4] = v32;
    double v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v33, (uint64_t)v38, v34, v37, 5);
  }
  else
  {
    double v35 = 0;
  }
  return v35;
}

id GLUtilConnectionDictionaryForTCPCandidatePair(double a1, uint64_t a2, const char *a3)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"protocol-stack";
  v8[1] = @"allow-outgoing";
  v9[0] = @"tcp";
  id v3 = objc_msgSend_numberWithBool_(NSNumber, a3, (uint64_t)a3, a1);
  v9[1] = v3;
  double v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v9, v5, v8, 2);

  return v6;
}

id GLUtilConnectionDictionaryForUDPCandidatePair(double a1, uint64_t a2, const char *a3)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v8[0] = @"protocol-stack";
  v8[1] = @"allow-outgoing";
  v9[0] = @"udp";
  id v3 = objc_msgSend_numberWithBool_(NSNumber, a3, (uint64_t)a3, a1);
  v9[1] = v3;
  double v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v9, v5, v8, 2);

  return v6;
}

unint64_t ntpTime32(double a1)
{
  if (qword_1E944F2E0 != -1) {
    dispatch_once(&qword_1E944F2E0, &unk_1EEFCD838);
  }
  return (unint64_t)((double)(unint64_t)qword_1E944F2E8 + a1 * 4294967300.0) >> 16;
}

void sub_19DB51870()
{
  if (!qword_1E944F2E8)
  {
    memset(v2, 170, sizeof(v2));
    double v0 = ids_monotonic_time();
    gettimeofday(&v2[1], 0);
    double v1 = ids_monotonic_time();
    gettimeofday(v2, 0);
    if (ids_monotonic_time() - v1 < v1 - v0)
    {
      v2[1] = v2[0];
      double v0 = v1;
    }
    qword_1E944F2E8 = vcvtd_n_u64_f64((double)v2[1].tv_sec + (double)v2[1].tv_usec * 0.000001 + 2208988800.0 - v0, 0x20uLL);
  }
}

uint64_t GLUtilStunErrorToGlobalLinkError(int a1)
{
  uint64_t v1 = 255;
  uint64_t v2 = 34;
  uint64_t v3 = 35;
  uint64_t v4 = 42;
  if (a1 != 613) {
    uint64_t v4 = 255;
  }
  if (a1 != 602) {
    uint64_t v3 = v4;
  }
  if (a1 != 601) {
    uint64_t v2 = v3;
  }
  uint64_t v5 = 19;
  uint64_t v6 = 43;
  if (a1 != 486) {
    uint64_t v6 = 255;
  }
  if (a1 != 442) {
    uint64_t v5 = v6;
  }
  if (a1 <= 600) {
    uint64_t v2 = v5;
  }
  uint64_t v7 = 16;
  uint64_t v8 = 18;
  uint64_t v9 = 17;
  if (a1 != 441) {
    uint64_t v9 = 255;
  }
  if (a1 != 437) {
    uint64_t v8 = v9;
  }
  if (a1 != 420) {
    uint64_t v7 = v8;
  }
  if (a1 == 401) {
    uint64_t v1 = 17;
  }
  if (a1 == 400) {
    uint64_t v1 = 15;
  }
  if (a1 > 419) {
    uint64_t v1 = v7;
  }
  if (a1 <= 441) {
    return v1;
  }
  else {
    return v2;
  }
}

double GLUtilNATCheckTimeout(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_sharedInstance(IDSServerBag, a3, a4, a1);
  uint64_t v7 = objc_msgSend_objectForKey_(v4, v5, @"gk-p2p-nat-type-timeout", v6);

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_floatValue(v7, v8, v9, v10);
    double v12 = v11;
    unint64_t v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      uint64_t v17 = *(__CFString **)&v12;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "got commnat timeout: %f(s)", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"got commnat timeout: %f(s)");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"got commnat timeout: %f(s)");
        }
      }
    }
  }
  else
  {
    uint64_t v14 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      uint64_t v17 = @"gk-p2p-nat-type-timeout";
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "failed to get bag entry with %@ key", buf, 0xCu);
    }

    double v12 = 0.0;
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to get bag entry with %@ key");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get bag entry with %@ key");
        }
      }
    }
  }

  return v12;
}

uint64_t GLUtilGetDefaultInterface(_DWORD *a1, char *a2, unsigned char *a3, double a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_sharedInstance(IDSNWPathUtils, a2, (uint64_t)a3, a4);
  float v11 = objc_msgSend_getDefaultPath(v7, v8, v9, v10);

  uint64_t v15 = objc_msgSend_status(v11, v12, v13, v14);
  if (v15 != 1)
  {
    int v46 = v15;
    uint64_t v47 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412546;
      long long v63 = v11;
      __int16 v64 = 1024;
      int v65 = v46;
      _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "no default path is available (path:%@, status:%d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"no default path is available (path:%@, status:%d).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"no default path is available (path:%@, status:%d).");
        }
      }
    }
    double v31 = 0;
    goto LABEL_18;
  }
  uint64_t v19 = objc_msgSend_interface(v11, v16, v17, v18);
  uint64_t v23 = objc_msgSend_interfaceIndex(v19, v20, v21, v22);

  uint64_t v27 = objc_msgSend_interface(v11, v24, v25, v26);
  double v31 = objc_msgSend_interfaceName(v27, v28, v29, v30);

  char v34 = objc_msgSend_usesInterfaceType_(v11, v32, 2, v33);
  if ((v23 & 0x80000000) != 0 || !v31)
  {
    char v49 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = objc_msgSend_privateDescription(v11, v50, v51, v52);
      *(_DWORD *)kevent buf = 138412802;
      long long v63 = v31;
      __int16 v64 = 1024;
      int v65 = v23;
      __int16 v66 = 2112;
      double v67 = v53;
      _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "invalid default interface [%@:%d], %@.", buf, 0x1Cu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v60 = objc_msgSend_privateDescription(v11, v54, v55, v56);
        _IDSLogTransport(@"GL", @"IDS", @"invalid default interface [%@:%d], %@.");

        if (_IDSShouldLog())
        {
          id v61 = objc_msgSend_privateDescription(v11, v57, v58, v59, v31, v23, v60);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"invalid default interface [%@:%d], %@.");
        }
      }
    }
LABEL_18:
    uint64_t v45 = 0;
    goto LABEL_19;
  }
  char v35 = v34;
  if (a1) {
    *a1 = v23;
  }
  if (a2)
  {
    id v36 = v31;
    uint64_t v40 = (const char *)objc_msgSend_UTF8String(v36, v37, v38, v39);
    uint64_t v44 = objc_msgSend_length(v36, v41, v42, v43);
    strlcpy(a2, v40, v44 + 1);
  }
  if (a3) {
    *a3 = v35;
  }
  uint64_t v45 = 1;
LABEL_19:

  return v45;
}

uint64_t GLUtilGetLinkOverhead(unsigned int a1)
{
  int v1 = ((int)(a1 << 31) >> 31) & 0x14;
  if ((a1 & 2) != 0) {
    v1 |= 0x28u;
  }
  if ((a1 & 4) != 0) {
    v1 += 8;
  }
  int v2 = v1 | (a1 >> 3) & 2;
  if ((a1 & 0x20) != 0) {
    LOWORD(v2) = v2 + 6;
  }
  if ((a1 & 8) != 0) {
    LOWORD(v2) = v2 + 16;
  }
  if ((a1 & 0x40) != 0) {
    LOWORD(v2) = v2 + 2;
  }
  if ((a1 & 0x80) != 0) {
    LOWORD(v2) = v2 + 30;
  }
  if ((a1 & 0x100) != 0) {
    LOWORD(v2) = v2 + 16;
  }
  if ((a1 & 0x200) != 0) {
    LOWORD(v2) = v2 + 5;
  }
  return (unsigned __int16)v2;
}

uint64_t GLUtilGetLocalMTU(unsigned int a1, const char *a2, uint64_t a3, double a4)
{
  if ((a1 & 2) != 0) {
    unsigned int v5 = 1280;
  }
  else {
    unsigned int v5 = 1450;
  }
  if (a2)
  {
    double v6 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, a3, a4);
    unsigned int v10 = objc_msgSend_cellularMTU(v6, v7, v8, v9);

    if (v5 >= v10) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v5;
    }
    if (v10) {
      unsigned int v5 = v11;
    }
  }
  return v5 - GLUtilGetLinkOverhead(a1);
}

uint64_t GLUtilGetRATForIPv4Address(int a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v25, v5, v29, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v26;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v3);
        }
        uint64_t v13 = objc_msgSend_local(*(void **)(*((void *)&v25 + 1) + 8 * v12), v7, v8, v9, (void)v25);
        if (*(unsigned char *)(objc_msgSend_address(v13, v14, v15, v16) + 1) != 30
          && *(_DWORD *)(objc_msgSend_external(v13, v17, v18, v19) + 4) == a1)
        {
          uint64_t v23 = objc_msgSend_radioAccessTechnology(v13, v20, v21, v22);

          goto LABEL_12;
        }

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v25, v9, v29, 16);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v23 = 10;
LABEL_12:

  return v23;
}

uint64_t GLUtilGetRATForIPv6Address(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v27, v5, v31, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v28;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(v3);
        }
        uint64_t v13 = objc_msgSend_local(*(void **)(*((void *)&v27 + 1) + 8 * i), v7, v8, v9, (void)v27);
        if (*(unsigned char *)(objc_msgSend_address(v13, v14, v15, v16) + 1) != 2)
        {
          uint64_t v20 = objc_msgSend_external(v13, v17, v18, v19);
          if (*(void *)(a1 + 8) == *(void *)(v20 + 8) && *(void *)(a1 + 16) == *(void *)(v20 + 16))
          {
            uint64_t v25 = objc_msgSend_radioAccessTechnology(v13, v21, v22, v23);

            goto LABEL_15;
          }
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v27, v9, v31, 16);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v25 = 10;
LABEL_15:

  return v25;
}

uint64_t GLUtilHasV4AddressForInterface(int a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = a2;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v21, v5, v25, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v22;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v3);
        }
        uint64_t v13 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        double v14 = objc_msgSend_address(v13, v7, v8, v9, (void)v21);
        uint64_t v18 = objc_msgSend_sa(v14, v15, v16, v17);

        if (v18 && *(unsigned char *)(v18 + 1) == 2 && objc_msgSend_index(v13, v7, v8, v9) == a1)
        {
          uint64_t v19 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v21, v9, v25, 16);
      if (v10) {
        continue;
      }
      break;
    }
  }
  uint64_t v19 = 0;
LABEL_13:

  return v19;
}

uint64_t GLUtilHasV6Address(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = a1;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v11, v3, v15, 16);
  if (v6)
  {
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v1);
        }
        if (objc_msgSend_IPVersion(*(void **)(*((void *)&v11 + 1) + 8 * i), v4, v5, v7, (void)v11) == 1)
        {
          uint64_t v6 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v11, v7, v15, 16);
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

uint64_t GLUtilHasV4Address(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = a1;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v2, (uint64_t)&v11, v3, v15, 16);
  if (v6)
  {
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v1);
        }
        if (!objc_msgSend_IPVersion(*(void **)(*((void *)&v11 + 1) + 8 * i), v4, v5, v7, (void)v11))
        {
          uint64_t v6 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v1, v4, (uint64_t)&v11, v7, v15, 16);
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v6;
}

uint64_t GLUtilGetFirstUnusedInterface(void *a1, void *a2, void *a3, _DWORD *a4, char *a5, char a6)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v70 = a1;
  id v68 = a2;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  obuint64_t j = a3;
  uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v75, v12, v80, 16);
  if (v66)
  {
    long long v62 = a4;
    long long v63 = a5;
    uint64_t v67 = *(void *)v76;
    while (1)
    {
      uint64_t v16 = 0;
LABEL_4:
      if (*(void *)v76 != v67) {
        objc_enumerationMutation(obj);
      }
      uint64_t v69 = v16;
      int v65 = *(void **)(*((void *)&v75 + 1) + 8 * v16);
      int v17 = objc_msgSend_index(v65, v13, v14, v15);
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      id v18 = v68;
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v71, v20, v79, 16);
      if (!v21) {
        break;
      }
      uint64_t v25 = v21;
      uint64_t v26 = *(void *)v72;
LABEL_8:
      uint64_t v27 = 0;
      while (1)
      {
        if (*(void *)v72 != v26) {
          objc_enumerationMutation(v18);
        }
        long long v28 = *(void **)(*((void *)&v71 + 1) + 8 * v27);
        unint64_t v29 = objc_msgSend_state(v28, v22, v23, v24);
        double v33 = objc_msgSend_local(v28, v30, v31, v32);
        int v37 = objc_msgSend_index(v33, v34, v35, v36);

        if ((a6 & 1) != 0
          || objc_msgSend_isRelayStunCandidatePair(v28, v22, v23, v24)
          && (objc_msgSend_isSelfQRSession(v28, v22, v23, v24) & 1) == 0)
        {
          BOOL v38 = v37 != v17 || v29 == 0;
          if (!v38 && v29 <= 4)
          {
            if (!v70) {
              break;
            }
            uint64_t v40 = objc_msgSend_sessionID(v28, v22, v23, v24);
            char isEqualToString = objc_msgSend_isEqualToString_(v40, v41, (uint64_t)v70, v42);

            if (isEqualToString) {
              break;
            }
          }
        }
        if (v25 == ++v27)
        {
          uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v22, (uint64_t)&v71, v24, v79, 16);
          if (v25) {
            goto LABEL_8;
          }
          goto LABEL_30;
        }
      }

      uint64_t v16 = v69 + 1;
      if (v69 + 1 != v66) {
        goto LABEL_4;
      }
      uint64_t v44 = 0;
      uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v75, v15, v80, 16);
      if (!v66) {
        goto LABEL_36;
      }
    }
LABEL_30:

    if (v62) {
      _DWORD *v62 = v17;
    }
    if (v63)
    {
      objc_msgSend_name(v65, v45, v46, v47);
      id v48 = objc_claimAutoreleasedReturnValue();
      double v52 = (const char *)objc_msgSend_UTF8String(v48, v49, v50, v51);
      double v56 = objc_msgSend_name(v65, v53, v54, v55);
      uint64_t v60 = objc_msgSend_length(v56, v57, v58, v59);
      strlcpy(v63, v52, v60 + 1);
    }
    uint64_t v44 = 1;
  }
  else
  {
    uint64_t v44 = 0;
  }
LABEL_36:

  return v44;
}

uint64_t GLUtilHasDefaultInterface(void *a1)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v18 = 0;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v3 = 0;
  if (GLUtilGetDefaultInterface(&v18, (char *)v20, 0, v2))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v1;
    uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v14, v6, v19, 16);
    if (v3)
    {
      uint64_t v10 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v4);
          }
          int v12 = objc_msgSend_index(*(void **)(*((void *)&v14 + 1) + 8 * i), v7, v8, v9, (void)v14);
          if (v12 == v18)
          {
            uint64_t v3 = 1;
            goto LABEL_12;
          }
        }
        uint64_t v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v14, v9, v19, 16);
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  return v3;
}

id GLUtilCreateRelayCandidatePair(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, void *a9)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  id v81 = a2;
  id v14 = a3;
  id v82 = a9;
  if (a8 == 3) {
    int v15 = 896;
  }
  else {
    int v15 = 0;
  }
  if (a8 == 2) {
    int v16 = 4;
  }
  else {
    int v16 = v15;
  }
  int LinkOverhead = GLUtilGetLinkOverhead(v16 | 0x1Au);
  long long v83 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v18, 3, v19, a8, 0, (1280 - LinkOverhead), 0xFFFFFFFFLL, 0, a4);
  uint64_t v23 = objc_msgSend_address(v14, v20, v21, v22);
  uint64_t v27 = objc_msgSend_sa(v23, v24, v25, v26);

  isCellular = (const char *)objc_msgSend_isCellular(v14, v28, v29, v30);
  if (isCellular)
  {
    uint64_t v35 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v31, v32, v34);
    LODWORD(v39) = objc_msgSend_radioAccessTechnology(v35, v36, v37, v38);

    if (v39 >= 0xA) {
      uint64_t v39 = 10;
    }
    else {
      uint64_t v39 = v39;
    }
  }
  else if (objc_msgSend_isWired(v14, v31, v32, v34))
  {
    uint64_t v39 = 9;
  }
  else
  {
    uint64_t v39 = 0;
  }
  uint64_t v40 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = IDSRadioAccessTechnologyToString(v39);
    uint64_t v45 = objc_msgSend_name(v14, v42, v43, v44);
    *(_DWORD *)kevent buf = 136315394;
    uint64_t v85 = v41;
    __int16 v86 = 2112;
    uint64_t v87 = v45;
    _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "setting RAT %s for interface [%@].", buf, 0x16u);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v48 = IDSRadioAccessTechnologyToString(v39);
      long long v78 = objc_msgSend_name(v14, v49, v50, v51);
      _IDSLogTransport(@"GL", @"IDS", @"setting RAT %s for interface [%@].");

      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v39);
        long long v78 = objc_msgSend_name(v14, v52, v53, v54, v48, v78);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"setting RAT %s for interface [%@].");
      }
    }
  }
  if (*(unsigned char *)(v27 + 1) == 30) {
    int v55 = 2;
  }
  else {
    int v55 = 1;
  }
  uint64_t LocalMTU = GLUtilGetLocalMTU(v16 | v55 | 0x20u, isCellular, v46, v47);
  uint64_t v60 = objc_msgSend_index(v14, v57, v58, v59);
  long long v63 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v61, 3, v62, a8, v39, LocalMTU, v60, v27, v27);
  uint64_t v67 = objc_msgSend_relaySessionID(v13, v64, v65, v66);
  id v70 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v68, (uint64_t)v63, v69, v83, v67, v82);

  long long v71 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v85 = (const char *)v13;
    _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v77 = v13;
      _IDSLogTransport(@"GL", @"IDS", @"GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@");
      if (_IDSShouldLog())
      {
        id v77 = v13;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilCreateRelayCandidatePair: setPropertiesWithRelaySessionInfo, qrSessionInfo = %@");
      }
    }
  }
  objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v70, v72, (uint64_t)v13, v73, v81, a7, v77, v78);
  objc_msgSend_setIsAcceptedRelaySession_(v70, v74, a5, v75);

  return v70;
}

unsigned __int16 *GLUtilGetCandidatePairByLinkID(uint64_t a1, void *a2, void *a3, void *a4)
{
  CFDictionaryRef v7 = a3;
  CFDictionaryRef v9 = a4;
  if (!a1)
  {
    if (a2 && *a2)
    {
      int v16 = (unsigned __int16 *)a2[1];
      if (!v16) {
        goto LABEL_16;
      }
      uint64_t v17 = *(unsigned int *)v16;
      if ((int)v17 < 1)
      {
        int v12 = channelForStunCandidatePair((uint64_t)(v16 + 4), (uint64_t)(v16 + 68), v16[132]);
        Value = 0;
        if (v9 && v12) {
          Value = (void *)CFDictionaryGetValue(v9, v12);
        }
        int v16 = Value;
        goto LABEL_15;
      }
      if (v7)
      {
        int v12 = objc_msgSend_numberWithInt_(NSNumber, v8, v17, v10);
        if (v12)
        {
          id v14 = objc_msgSend_numberWithInt_(NSNumber, v18, *(unsigned int *)v16, v19);
          int v15 = (void *)CFDictionaryGetValue(v7, v14);
          goto LABEL_5;
        }
LABEL_14:
        int v16 = 0;
        goto LABEL_15;
      }
    }
LABEL_13:
    int v16 = 0;
    goto LABEL_16;
  }
  if (!v7) {
    goto LABEL_13;
  }
  int v12 = objc_msgSend_numberWithChar_(NSNumber, v8, a1, v10);
  if (!v12) {
    goto LABEL_14;
  }
  id v14 = objc_msgSend_numberWithChar_(NSNumber, v11, a1, v13);
  int v15 = (void *)CFDictionaryGetValue(v7, v14);
LABEL_5:
  int v16 = v15;

LABEL_15:
LABEL_16:

  return v16;
}

void GLUtilGetLinkInformation(void *a1, uint64_t a2, _DWORD *a3, unsigned char *a4, void *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a5;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, 0.0, v42, 16);
  if (!v10)
  {
    int v15 = 0;
    char v37 = 0;
    goto LABEL_21;
  }
  uint64_t v14 = v10;
  int v15 = 0;
  char v37 = 0;
  uint64_t v16 = *(void *)v39;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v39 != v16) {
        objc_enumerationMutation(v8);
      }
      int v18 = *(void **)(*((void *)&v38 + 1) + 8 * i);
      if (!v7)
      {
        if ((objc_msgSend_isRelayStunCandidatePair(v18, v11, v12, v13) & 1) == 0
          || (objc_msgSend_isSelfQRSession(v18, v11, v12, v13) & 1) != 0)
        {
          continue;
        }
LABEL_14:
        uint64_t v29 = objc_msgSend_local(v18, v11, v12, v13);
        uint64_t v33 = objc_msgSend_transport(v29, v30, v31, v32);

        if (v33 == a2)
        {
          unint64_t v34 = objc_msgSend_state(v18, v11, v12, v13);
          if (v34)
          {
            ++v15;
            v37 |= v34 > 2;
          }
        }
        continue;
      }
      double v19 = objc_msgSend_sessionID(v18, v11, v12, v13);
      if ((objc_msgSend_isEqualToString_(v7, v20, (uint64_t)v19, v21) & 1) == 0
        || (objc_msgSend_isRelayStunCandidatePair(v18, v22, v23, v24) & 1) == 0)
      {

        continue;
      }
      isSelfQRSessiouint64_t n = objc_msgSend_isSelfQRSession(v18, v25, v26, v27);

      if ((isSelfQRSession & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v13, v42, 16);
  }
  while (v14);
LABEL_21:
  if (a3) {
    *a3 = v15;
  }
  if (a4) {
    *a4 = v37 & 1;
  }
}

id GLUtilGetSharedSessionIDs(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v3 = v1;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v23, v5, v27, 16);
  if (v6)
  {
    uint64_t v10 = v6;
    uint64_t v11 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(v3);
        }
        double v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v14 = objc_msgSend_sessionID(v13, v7, v8, v9, (void)v23);
        if (objc_msgSend_isSharedQRSession(v13, v15, v16, v17))
        {
          BOOL v20 = objc_msgSend_containsObject_(v2, v18, (uint64_t)v14, v19) || v2 == 0;
          if (!v20 && v14 != 0) {
            CFArrayAppendValue((CFMutableArrayRef)v2, v14);
          }
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v7, (uint64_t)&v23, v9, v27, 16);
    }
    while (v10);
  }

  return v2;
}

uint64_t GLUtilHasRelayCandidatePairConnected(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        double v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10, (void)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10) == 4)
          {
            if (!v3
              || (objc_msgSend_sessionID(v13, v7, v8, v10),
                  uint64_t v14 = objc_claimAutoreleasedReturnValue(),
                  char isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16),
                  v14,
                  (isEqualToString & 1) != 0))
            {
              uint64_t v9 = 1;
              goto LABEL_14;
            }
          }
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v9;
}

uint64_t GLUtilHasRelayCandidatePairSucceededOrConnected(void *a1, void *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v6 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v28, v8, v32, 16);
  if (v9)
  {
    uint64_t v13 = v9;
    uint64_t v14 = *(void *)v29;
    while (2)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v29 != v14) {
          objc_enumerationMutation(v6);
        }
        double v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v16, v10, v11, v12, (void)v28)
          && (objc_msgSend_state(v16, v10, v11, v12) == 3 || objc_msgSend_state(v16, v10, v11, v12) == 4))
        {
          double v17 = objc_msgSend_local(v16, v10, v11, v12);
          int v21 = objc_msgSend_radioAccessTechnology(v17, v18, v19, v20);

          if (v21 == a3)
          {
            if (!v5
              || (objc_msgSend_sessionID(v16, v10, v11, v12),
                  long long v22 = objc_claimAutoreleasedReturnValue(),
                  char isEqualToString = objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v5, v24),
                  v22,
                  (isEqualToString & 1) != 0))
            {
              uint64_t v26 = 1;
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v10, (uint64_t)&v28, v12, v32, 16);
      if (v13) {
        continue;
      }
      break;
    }
  }
  uint64_t v26 = 0;
LABEL_16:

  return v26;
}

uint64_t GLUtilHasSharedRelayCandidatePairSucceededOrConnected(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (objc_msgSend_allocateType(v13, v7, v8, v10, (void)v19) != 2)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10))
          {
            uint64_t v14 = objc_msgSend_sessionID(v13, v7, v8, v10);
            int isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if (isEqualToString)
            {
              if ((unint64_t)(objc_msgSend_state(v13, v7, v8, v10) - 5) > 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t v9 = 1;
                goto LABEL_14;
              }
            }
          }
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v9;
}

uint64_t GLUtilHasNonSharedRelayCandidatePair(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if ((objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (void)v19) & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10))
          {
            if (objc_msgSend_state(v13, v7, v8, v10))
            {
              if (!v3
                || (objc_msgSend_sessionID(v13, v7, v8, v10),
                    uint64_t v14 = objc_claimAutoreleasedReturnValue(),
                    char isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16),
                    v14,
                    (isEqualToString & 1) != 0))
              {
                uint64_t v9 = 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v9;
}

uint64_t GLUtilHasCandidatePairForSameSharedSession(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (void)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10))
          {
            uint64_t v14 = objc_msgSend_sessionID(v13, v7, v8, v10);
            char isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if (isEqualToString)
            {
              uint64_t v9 = 1;
              goto LABEL_13;
            }
          }
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v9;
}

uint64_t GLUtilHasDifferentSharedRelayCandidatePair(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = a2;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (objc_msgSend_isSharedQRSession(v13, v7, v8, v10, (void)v19))
        {
          if (objc_msgSend_state(v13, v7, v8, v10) == 4)
          {
            uint64_t v14 = objc_msgSend_sessionID(v13, v7, v8, v10);
            int isEqualToString = objc_msgSend_isEqualToString_(v14, v15, (uint64_t)v3, v16);

            if (!isEqualToString)
            {
              uint64_t v9 = 1;
              goto LABEL_13;
            }
          }
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v9;
}

id GLUtilGetDifferentRelayCandidatePairSucceeded(void *a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v4 = a2;
  id v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v47, v6, v51, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v48;
    id v45 = v4;
    while (2)
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v48 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        uint64_t v14 = objc_msgSend_state(v13, v7, v8, v10, v45);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v15, v16, v17)) {
          BOOL v18 = (unint64_t)(v14 - 3) > 1;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18)
        {
          long long v19 = objc_msgSend_sessionID(v3, v7, v8, v10);
          long long v23 = objc_msgSend_sessionID(v13, v20, v21, v22);
          if (objc_msgSend_isEqualToString_(v19, v24, (uint64_t)v23, v25)
            && !objc_msgSend_isEqual_(v3, v26, (uint64_t)v13, v27))
          {
            objc_msgSend_local(v3, v28, v29, v30);
            double v32 = v31 = v3;
            int v46 = objc_msgSend_radioAccessTechnology(v32, v33, v34, v35);
            long long v39 = objc_msgSend_local(v13, v36, v37, v38);
            int v43 = objc_msgSend_radioAccessTechnology(v39, v40, v41, v42);

            id v3 = v31;
            id v4 = v45;

            if (v46 == v43)
            {
              id v9 = v13;
              goto LABEL_18;
            }
          }
          else
          {
          }
        }
      }
      id v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v47, v10, v51, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_18:

  return v9;
}

id GLUtilGetRelayCandidatePairNotSucceededForOppositeIPVersion(void *a1, void *a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v4 = a2;
  id v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v77, v6, v81, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v78;
    id v76 = v4;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v78 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v77 + 1) + 8 * i);
        unint64_t v14 = objc_msgSend_state(v13, v7, v8, v10);
        if (objc_msgSend_isRelayStunCandidatePair(v13, v15, v16, v17)) {
          BOOL v18 = v14 > 2;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18 && v14 != 0)
        {
          long long v20 = objc_msgSend_sessionID(v3, v7, v8, v10);
          uint64_t v24 = objc_msgSend_sessionID(v13, v21, v22, v23);
          if (!objc_msgSend_isEqualToString_(v20, v25, (uint64_t)v24, v26)
            || (objc_msgSend_isEqual_(v3, v27, (uint64_t)v13, v28) & 1) != 0)
          {
            goto LABEL_21;
          }
          double v32 = objc_msgSend_local(v13, v29, v30, v31);
          int v36 = *(unsigned __int8 *)(objc_msgSend_address(v32, v33, v34, v35) + 1);
          long long v40 = objc_msgSend_local(v3, v37, v38, v39);
          if (v36 == *(unsigned __int8 *)(objc_msgSend_address(v40, v41, v42, v43) + 1)) {
            goto LABEL_20;
          }
          double v75 = objc_msgSend_local(v13, v44, v45, v46);
          int v50 = objc_msgSend_radioAccessTechnology(v75, v47, v48, v49);
          long long v74 = objc_msgSend_local(v3, v51, v52, v53);
          if (v50 != objc_msgSend_radioAccessTechnology(v74, v54, v55, v56))
          {

LABEL_20:
            id v4 = v76;
LABEL_21:

            continue;
          }
          long long v71 = objc_msgSend_local(v13, v57, v58, v59);
          uint64_t v73 = objc_msgSend_transport(v71, v60, v61, v62);
          double v66 = objc_msgSend_local(v3, v63, v64, v65);
          uint64_t v72 = objc_msgSend_transport(v66, v67, v68, v69);

          id v4 = v76;
          if (v73 == v72)
          {
            id v9 = v13;
            goto LABEL_24;
          }
        }
      }
      id v9 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v77, v10, v81, 16);
    }
    while (v9);
  }
LABEL_24:

  return v9;
}

uint64_t GLUtilSelectStunTransport(void *a1, uint64_t a2, int a3, int a4, int a5, int a6, void *a7, unint64_t a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v15 = a1;
  id v18 = a7;
  if ((unint64_t)(a2 - 3) > 1)
  {
    int v45 = 0;
    char v44 = -86;
    uint64_t v22 = objc_msgSend_sharedInstance(IDSServerBag, v16, v17, v19);
    double v25 = objc_msgSend_objectForKey_(v22, v23, @"ids-fallback-to-tcp-first", v24);

    int v29 = objc_msgSend_BOOLValue(v25, v26, v27, v28);
    uint64_t v30 = 3;
    if (!v29) {
      uint64_t v30 = 4;
    }
    uint64_t v43 = v30;
    if (a3)
    {
      char HasRelayCandidatePairConnected = GLUtilHasRelayCandidatePairConnected(v15, v18);
      a2 = 2;
      if (a8 <= 3 && (HasRelayCandidatePairConnected & 1) == 0)
      {
        GLUtilGetLinkInformation(v15, 2, &v45, 0, v18);
        a2 = 2;
        if (v45)
        {
          if ((a6 & 1) == 0)
          {
            GLUtilGetLinkInformation(v15, v43, &v45, 0, v18);
            uint64_t v32 = 3;
            if (v29) {
              uint64_t v32 = 4;
            }
            if (v45) {
              a2 = v32;
            }
            else {
              a2 = v43;
            }
          }
        }
      }
    }
    else
    {
      int v33 = GLUtilHasRelayCandidatePairConnected(0, v18);
      if (!a4 || a5)
      {
        GLUtilGetLinkInformation(0, 2, &v45, &v44, v18);
        uint64_t v34 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          double v35 = @"YES";
          if (v44) {
            int v36 = @"YES";
          }
          else {
            int v36 = @"NO";
          }
          *(_DWORD *)kevent buf = 67109890;
          if (v33) {
            uint64_t v37 = @"YES";
          }
          else {
            uint64_t v37 = @"NO";
          }
          *(_DWORD *)long long v47 = v45;
          *(_WORD *)&v47[4] = 2112;
          if (!a6) {
            double v35 = @"NO";
          }
          *(void *)&v47[6] = v36;
          __int16 v48 = 2112;
          double v49 = v37;
          __int16 v50 = 2112;
          double v51 = v35;
          _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@", buf, 0x26u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"linkAttempted: %d, linkConnected: %@, isQRConnected: %@, retryAllocbind: %@");
            }
          }
        }
        if (v45) {
          BOOL v38 = v44 == 0;
        }
        else {
          BOOL v38 = 0;
        }
        if (v38) {
          char v39 = v33;
        }
        else {
          char v39 = 1;
        }
        a2 = 2;
        if ((v39 & 1) == 0 && (a6 & 1) == 0)
        {
          GLUtilGetLinkInformation(0, v43, &v45, &v44, v18);
          uint64_t v40 = 3;
          if (v29) {
            uint64_t v40 = 4;
          }
          if (v44) {
            BOOL v41 = 1;
          }
          else {
            BOOL v41 = v45 == 0;
          }
          if (v41) {
            a2 = v43;
          }
          else {
            a2 = v40;
          }
        }
      }
      else
      {
        a2 = 2;
      }
    }
  }
  else
  {
    long long v20 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = (&_IDSStunTransportStrings)[a2];
      *(_DWORD *)kevent buf = 136315138;
      *(void *)long long v47 = v21;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "found override tranpsort [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"found override tranpsort [%s].");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"found override tranpsort [%s].");
        }
      }
    }
  }

  return a2;
}

__CFArray *GLUtilGetExcludedInterfaceAddressList(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  obuint64_t j = a3;
  uint64_t v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v128, v5, v141, 16);
  if (!v123)
  {
    uint64_t v8 = 0;
    goto LABEL_75;
  }
  uint64_t v8 = 0;
  uint64_t v122 = *(void *)v129;
  uint64_t v9 = 136315906;
  do
  {
    for (uint64_t i = 0; i != v123; ++i)
    {
      if (*(void *)v129 != v122) {
        objc_enumerationMutation(obj);
      }
      uint64_t v11 = *(void **)(*((void *)&v128 + 1) + 8 * i);
      uint64_t v12 = objc_msgSend_index(v11, v6, v7, *(double *)&v9, v114, v116, v117, v118, v119);
      uint64_t v16 = objc_msgSend_delegatedIndex(v11, v13, v14, v15);
      long long v20 = objc_msgSend_address(v11, v17, v18, v19);
      uint64_t v24 = objc_msgSend_sa(v20, v21, v22, v23);

      if (!v24 || IsLinkLocalSA(v24))
      {
        double v28 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v11, v29, v30, v31);
          id v32 = objc_claimAutoreleasedReturnValue();
          uint64_t v36 = objc_msgSend_UTF8String(v32, v33, v34, v35);
          *(_DWORD *)kevent buf = 136315394;
          uint64_t v134 = v36;
          __int16 v135 = 1024;
          int v136 = v12;
          _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d].", buf, 0x12u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v11, v25, v26, v27);
            id v37 = objc_claimAutoreleasedReturnValue();
            uint64_t v115 = objc_msgSend_UTF8String(v37, v38, v39, v40);
            uint64_t v116 = v12;
            _IDSLogTransport(@"GL", @"IDS", @"skip if:[%s:%d].");

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v11, v25, v26, v27, v115, v12);
              id v41 = objc_claimAutoreleasedReturnValue();
              uint64_t v115 = objc_msgSend_UTF8String(v41, v42, v43, v44);
              uint64_t v116 = v12;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"skip if:[%s:%d].");
            }
          }
        }
        if (v8)
        {
          if (!v11) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          if (!v11) {
            goto LABEL_20;
          }
        }
        if (v8) {
          CFArrayAppendValue(v8, v11);
        }
      }
LABEL_20:
      if (!objc_msgSend_isCompanionLink(v11, v25, v26, v27, v115)) {
        goto LABEL_33;
      }
      int v45 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_name(v11, v46, v47, v48);
        id v49 = objc_claimAutoreleasedReturnValue();
        uint64_t v53 = objc_msgSend_UTF8String(v49, v50, v51, v52);
        *(_DWORD *)kevent buf = 136315394;
        uint64_t v134 = v53;
        __int16 v135 = 1024;
        int v136 = v12;
        _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "skip companion link if:[%s:%d].", buf, 0x12u);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          objc_msgSend_name(v11, v6, v7, *(double *)&v9);
          id v54 = objc_claimAutoreleasedReturnValue();
          uint64_t v114 = objc_msgSend_UTF8String(v54, v55, v56, v57);
          uint64_t v116 = v12;
          _IDSLogTransport(@"GL", @"IDS", @"skip companion link if:[%s:%d].");

          if (_IDSShouldLog())
          {
            objc_msgSend_name(v11, v6, v7, *(double *)&v9, v114, v12);
            id v58 = objc_claimAutoreleasedReturnValue();
            uint64_t v114 = objc_msgSend_UTF8String(v58, v59, v60, v61);
            uint64_t v116 = v12;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip companion link if:[%s:%d].");
          }
        }
      }
      if (v8)
      {
        if (!v11) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (!v11) {
          goto LABEL_33;
        }
      }
      if (v8) {
        CFArrayAppendValue(v8, v11);
      }
LABEL_33:
      if ((int)v16 >= 1)
      {
        if (a1 != -1 && v12 == a1) {
          continue;
        }
        if (v8)
        {
          if (!v11) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          if (!v11)
          {
LABEL_62:
            uint64_t v95 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_name(v11, v96, v97, v98);
              id v99 = objc_claimAutoreleasedReturnValue();
              uint64_t v103 = objc_msgSend_UTF8String(v99, v100, v101, v102);
              *(_DWORD *)kevent buf = 136316162;
              uint64_t v134 = v103;
              __int16 v135 = 1024;
              int v136 = v12;
              __int16 v137 = 1024;
              *(_DWORD *)__int16 v138 = v16;
              *(_WORD *)&v138[4] = 2080;
              *(void *)&v138[6] = a2;
              __int16 v139 = 1024;
              int v140 = a1;
              _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d].", buf, 0x28u);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_name(v11, v6, v7, *(double *)&v9);
                id v104 = objc_claimAutoreleasedReturnValue();
                uint64_t v118 = a2;
                uint64_t v119 = a1;
                uint64_t v116 = v12;
                uint64_t v117 = v16;
                uint64_t v114 = objc_msgSend_UTF8String(v104, v105, v106, v107);
                _IDSLogTransport(@"GL", @"IDS", @"skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d].");

                if (_IDSShouldLog())
                {
                  objc_msgSend_name(v11, v6, v7, *(double *)&v9, v114, v12, v16, a2, a1);
                  id v108 = objc_claimAutoreleasedReturnValue();
                  uint64_t v118 = a2;
                  uint64_t v119 = a1;
                  uint64_t v116 = v12;
                  uint64_t v117 = v16;
                  uint64_t v114 = objc_msgSend_UTF8String(v108, v109, v110, v111);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"skip if:[%s:%d] with delegate-if-idx:%d, default-if:[%s:%d].");
                }
              }
            }
            continue;
          }
        }
        if (v8) {
          CFArrayAppendValue(v8, v11);
        }
        goto LABEL_62;
      }
      long long v126 = 0u;
      long long v127 = 0u;
      long long v124 = 0u;
      long long v125 = 0u;
      id v62 = obj;
      uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v63, (uint64_t)&v124, v64, v132, 16);
      if (v67)
      {
        uint64_t v69 = *(void *)v125;
LABEL_41:
        uint64_t v70 = 0;
        while (1)
        {
          if (*(void *)v125 != v69) {
            objc_enumerationMutation(v62);
          }
          if ((a1 & 0x80000000) == 0)
          {
            long long v71 = *(void **)(*((void *)&v124 + 1) + 8 * v70);
            if (objc_msgSend_index(v71, v65, v66, v68) == a1
              && objc_msgSend_delegatedIndex(v71, v65, v66, v68) == v12)
            {
              break;
            }
          }
          if (v67 == ++v70)
          {
            uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v65, (uint64_t)&v124, v68, v132, 16);
            if (v67) {
              goto LABEL_41;
            }
            goto LABEL_49;
          }
        }
        uint64_t v72 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v11, v73, v74, v75);
          id v76 = objc_claimAutoreleasedReturnValue();
          uint64_t v80 = objc_msgSend_UTF8String(v76, v77, v78, v79);
          *(_DWORD *)kevent buf = 136315906;
          uint64_t v134 = v80;
          __int16 v135 = 1024;
          int v136 = v12;
          __int16 v137 = 2080;
          *(void *)__int16 v138 = a2;
          *(_WORD *)&v138[8] = 1024;
          *(_DWORD *)&v138[10] = a1;
          _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "skip if:[%s:%d], default-if:[%s:%d].", buf, 0x22u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v11, v81, v82, v83);
            id v84 = objc_claimAutoreleasedReturnValue();
            uint64_t v117 = a2;
            uint64_t v118 = a1;
            uint64_t v114 = objc_msgSend_UTF8String(v84, v85, v86, v87);
            uint64_t v116 = v12;
            _IDSLogTransport(@"GL", @"IDS", @"skip if:[%s:%d], default-if:[%s:%d].");

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v11, v88, v89, v90, v114, v12, a2, a1);
              id v91 = objc_claimAutoreleasedReturnValue();
              uint64_t v117 = a2;
              uint64_t v118 = a1;
              uint64_t v114 = objc_msgSend_UTF8String(v91, v92, v93, v94);
              uint64_t v116 = v12;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"skip if:[%s:%d], default-if:[%s:%d].");
            }
          }
        }

        if (v8)
        {
          if (!v11) {
            continue;
          }
        }
        else
        {
          uint64_t v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          if (!v11) {
            continue;
          }
        }
        if (v8) {
          CFArrayAppendValue(v8, v11);
        }
      }
      else
      {
LABEL_49:
      }
    }
    uint64_t v123 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v128, *(double *)&v9, v141, 16);
  }
  while (v123);
LABEL_75:

  uint64_t v112 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    uint64_t v134 = (uint64_t)v8;
    _os_log_impl(&dword_19D9BE000, v112, OS_LOG_TYPE_DEFAULT, "excluded interfaces:%@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"excluded interfaces:%@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"excluded interfaces:%@.");
      }
    }
  }

  return v8;
}

id GLUtilSelectInterface(uint64_t a1, int a2, void *a3, void *a4, void *a5, int a6, uint64_t a7, int a8)
{
  v181[2] = *MEMORY[0x1E4F143B8];
  id v149 = a3;
  id v143 = a4;
  id v144 = a5;
  int HasRelayCandidatePairConnected = GLUtilHasRelayCandidatePairConnected(v144, v143);
  int v15 = HasRelayCandidatePairConnected;
  unsigned int v157 = -1;
  unsigned int v158 = -1;
  if ((unint64_t)(a1 - 3) < 2) {
    int v16 = HasRelayCandidatePairConnected;
  }
  else {
    int v16 = 0;
  }
  int v146 = v16;
  char v156 = 0;
  v181[0] = 0;
  v181[1] = 0;
  v180[0] = 0;
  v180[1] = 0;
  if (GLUtilGetDefaultInterface(&v158, (char *)v181, &v156, v14))
  {
    int v148 = (v15 | a2) ^ 1;
  }
  else
  {
    uint64_t v17 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "failed to get default interface, use non-default interface.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to get default interface, use non-default interface.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get default interface, use non-default interface.");
        }
      }
    }
    int v148 = 0;
  }
  double v145 = GLUtilGetExcludedInterfaceAddressList(v158, (uint64_t)v181, v149);
  uint64_t v21 = (__CFString *)objc_msgSend_mutableCopy(v149, v18, v19, v20);
  objc_msgSend_removeObjectsInArray_(v21, v22, (uint64_t)v145, v23);
  uint64_t v24 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    long long v161 = v21;
    _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "remaining interfaces:%@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      long long v127 = v21;
      _IDSLogTransport(@"GL", @"IDS", @"remaining interfaces:%@.");
      if (_IDSShouldLog())
      {
        long long v127 = v21;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining interfaces:%@.");
      }
    }
  }
  double v27 = objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v25, 0, v26, v127);
  uint64_t v30 = objc_msgSend_objectForKey_(v27, v28, @"reduce-cellular-usage", v29);
  char v34 = objc_msgSend_BOOLValue(v30, v31, v32, v33);

  GLUtilGetFirstUnusedInterface(v144, v143, v21, &v157, (char *)v180, v34);
  int v142 = a2 & ~v15;
  double v35 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = @"NO";
    if (v15) {
      id v37 = @"YES";
    }
    else {
      id v37 = @"NO";
    }
    if (v146) {
      BOOL v38 = @"YES";
    }
    else {
      BOOL v38 = @"NO";
    }
    if (v142) {
      uint64_t v39 = @"YES";
    }
    else {
      uint64_t v39 = @"NO";
    }
    long long v161 = (__CFString *)(&_IDSStunTransportStrings)[a1];
    if (v148) {
      double v40 = @"YES";
    }
    else {
      double v40 = @"NO";
    }
    *(_DWORD *)kevent buf = 136317442;
    __int16 v162 = 2112;
    if (v156) {
      uint64_t v36 = @"YES";
    }
    uint64_t v163 = v37;
    __int16 v164 = 2112;
    double v165 = v38;
    __int16 v166 = 2112;
    id v167 = v39;
    __int16 v168 = 2112;
    uint64_t v169 = v40;
    __int16 v170 = 2080;
    uint64_t v171 = v181;
    __int16 v172 = 1024;
    unsigned int v173 = v158;
    __int16 v174 = 2112;
    uint64_t v175 = v36;
    __int16 v176 = 2080;
    uint64_t v177 = v180;
    __int16 v178 = 1024;
    unsigned int v179 = v157;
    _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d]).", buf, 0x5Eu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    id v41 = v15 ? @"YES" : @"NO";
    uint64_t v42 = v146 ? @"YES" : @"NO";
    uint64_t v43 = v142 ? @"YES" : @"NO";
    double v44 = v148 ? @"YES" : @"NO";
    int v45 = v156 ? @"YES" : @"NO";
    int v140 = v180;
    uint64_t v141 = v157;
    uint64_t v138 = v158;
    __int16 v139 = v45;
    int v136 = v44;
    __int16 v137 = v181;
    uint64_t v134 = v42;
    __int16 v135 = v43;
    uint64_t v128 = (uint64_t)(&_IDSStunTransportStrings)[a1];
    long long v129 = v41;
    _IDSLogTransport(@"GL", @"IDS", @"interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d]).");
    if (_IDSShouldLog())
    {
      if (v156) {
        double v46 = @"YES";
      }
      else {
        double v46 = @"NO";
      }
      int v140 = v180;
      uint64_t v141 = v157;
      uint64_t v138 = v158;
      __int16 v139 = v46;
      int v136 = v44;
      __int16 v137 = v181;
      uint64_t v134 = v42;
      __int16 v135 = v43;
      uint64_t v128 = (uint64_t)(&_IDSStunTransportStrings)[a1];
      long long v129 = v41;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"interface preference for %s: (connected:%@, non-cell:%@, cell:%@, use-default:%@, default-if:[%s:%d, Cell:%@], first-unused-if:[%s:%d]).");
    }
  }
  uint64_t v47 = IMGetDomainBoolForKey();
  double v48 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109120;
    LODWORD(v161) = v47;
    _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "forceToUseIPdouble v6 = %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v128 = v47;
      _IDSLogTransport(@"GL", @"IDS", @"forceToUseIPdouble v6 = %d");
      if (_IDSShouldLog())
      {
        uint64_t v128 = v47;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"forceToUseIPdouble v6 = %d");
      }
    }
  }
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  obuint64_t j = v21;
  uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v152, v50, v159, 16);
  if (!v53)
  {
    BOOL v147 = 0;
    goto LABEL_133;
  }
  BOOL v147 = 0;
  uint64_t v55 = *(void *)v153;
  while (2)
  {
    for (uint64_t i = 0; i != v53; ++i)
    {
      if (*(void *)v153 != v55) {
        objc_enumerationMutation(obj);
      }
      double v57 = *(void **)(*((void *)&v152 + 1) + 8 * i);
      int isCellular = objc_msgSend_isCellular(v57, v51, v52, v54, v128, v129, v134, v135, v136, v137, v138, v139, v140, v141);
      int v62 = objc_msgSend_index(v57, v59, v60, v61);
      uint64_t v66 = objc_msgSend_address(v57, v63, v64, v65);
      uint64_t v70 = objc_msgSend_sa(v66, v67, v68, v69);

      int v71 = *(unsigned __int8 *)(v70 + 1);
      if (v47)
      {
        if (v71 == 2) {
          continue;
        }
      }
      else if (v71 == 30 && (GLUtilHasV4AddressForInterface(v62, v149) & 1) != 0)
      {
        continue;
      }
      if (a8 == 1)
      {
        if (!isCellular) {
          continue;
        }
        id v75 = v57;

        uint64_t v88 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v90, v91, v92);
          uint64_t v93 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)kevent buf = 138412546;
          long long v161 = @"IDSGLInterfaceTypeMask_Cellular";
          __int16 v162 = 2112;
          uint64_t v163 = v93;
          _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@", buf, 0x16u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            long long v131 = objc_msgSend_name(v75, v94, v95, v96);
            _IDSLogTransport(@"GL", @"IDS", @"GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@");

            if (_IDSShouldLog())
            {
              BOOL v147 = objc_msgSend_name(v75, v97, v98, v99, @"IDSGLInterfaceTypeMask_Cellular", v131);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@");
              goto LABEL_119;
            }
          }
        }
LABEL_132:
        BOOL v147 = v75;
        goto LABEL_133;
      }
      if (a8 == 2)
      {
        if (isCellular) {
          continue;
        }
        id v75 = v57;

        id v76 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v78, v79, v80);
          id v81 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)kevent buf = 138412546;
          long long v161 = @"IDSGLInterfaceTypeMask_NonCellular";
          __int16 v162 = 2112;
          uint64_t v163 = v81;
          _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@", buf, 0x16u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            long long v130 = objc_msgSend_name(v75, v82, v83, v84);
            _IDSLogTransport(@"GL", @"IDS", @"GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@");

            if (_IDSShouldLog())
            {
              BOOL v147 = objc_msgSend_name(v75, v85, v86, v87, @"IDSGLInterfaceTypeMask_NonCellular", v130);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilSelectInterface: havePreferredLocalInterface %@, selected interface: %@");
LABEL_119:

              BOOL v147 = v57;
              goto LABEL_133;
            }
          }
        }
        goto LABEL_132;
      }
      if (a6 == 1)
      {
        if (!isCellular) {
          continue;
        }
        id v75 = v57;

        uint64_t v113 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v115, v116, v117);
          uint64_t v118 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)kevent buf = 138412546;
          long long v161 = @"IDSGLInterfaceTypeMask_Cellular";
          __int16 v162 = 2112;
          uint64_t v163 = v118;
          _os_log_impl(&dword_19D9BE000, v113, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@", buf, 0x16u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            id v133 = objc_msgSend_name(v75, v119, v120, v121);
            _IDSLogTransport(@"GL", @"IDS", @"GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@");

            if (_IDSShouldLog())
            {
              BOOL v147 = objc_msgSend_name(v75, v122, v123, v124, @"IDSGLInterfaceTypeMask_Cellular", v133);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@");
              goto LABEL_119;
            }
          }
        }
        goto LABEL_132;
      }
      if (a6 == 2)
      {
        if (isCellular) {
          continue;
        }
        id v75 = v57;

        uint64_t v101 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_name(v75, v103, v104, v105);
          uint64_t v106 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)kevent buf = 138412546;
          long long v161 = @"IDSGLInterfaceTypeMask_NonCellular";
          __int16 v162 = 2112;
          uint64_t v163 = v106;
          _os_log_impl(&dword_19D9BE000, v101, OS_LOG_TYPE_DEFAULT, "GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@", buf, 0x16u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            id v132 = objc_msgSend_name(v75, v107, v108, v109);
            _IDSLogTransport(@"GL", @"IDS", @"GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@");

            if (_IDSShouldLog())
            {
              BOOL v147 = objc_msgSend_name(v75, v110, v111, v112, @"IDSGLInterfaceTypeMask_NonCellular", v132);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilSelectInterface: havePreferredInterfaceFromInitiator %@, selected interface: %@");
              goto LABEL_119;
            }
          }
        }
        goto LABEL_132;
      }
      int v72 = v148;
      if ((v158 & 0x80000000) != 0) {
        int v72 = 0;
      }
      if (v72 == 1 && v62 == v158)
      {
LABEL_118:
        id v100 = v57;
        goto LABEL_119;
      }
      if (v146)
      {
        if ((isCellular & 1) == 0) {
          goto LABEL_118;
        }
      }
      else if (v142)
      {
        if (isCellular) {
          goto LABEL_118;
        }
      }
      else if (v157 == -1)
      {
        id v74 = v57;

        BOOL v147 = v74;
      }
      else
      {
        if (v62 == v157) {
          char v73 = v148;
        }
        else {
          char v73 = 1;
        }
        if ((v73 & 1) == 0) {
          goto LABEL_118;
        }
      }
    }
    uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v152, v54, v159, 16);
    if (v53) {
      continue;
    }
    break;
  }
LABEL_133:

  id v125 = v147;
  return v125;
}

void sub_19DB55B98(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19DB55A68);
  }
  _Unwind_Resume(a1);
}

__CFString *GLUtilPreferredInterfaceToString(int a1)
{
  id v1 = @"IDSGLInterfaceTypeMask_Invalid";
  if (a1 == 1) {
    id v1 = @"IDSGLInterfaceTypeMask_Cellular";
  }
  if (a1 == 2) {
    return @"IDSGLInterfaceTypeMask_NonCellular";
  }
  else {
    return v1;
  }
}

uint64_t GLUtilHasValidUInt16Attr(void *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(v9, 0x410uLL);
  uint64_t result = objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9);
  if (a3)
  {
    if (result) {
      *a3 = v10;
    }
  }
  return result;
}

uint64_t GLUtilHasValidUInt32Attr(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(v9, 0x410uLL);
  uint64_t result = objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9);
  if (a3)
  {
    if (result) {
      *a3 = v10;
    }
  }
  return result;
}

double GLUtilHasValidUUIDAttr(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(v9, 0x410uLL);
  if (objc_msgSend_getAttribute_attribute_(a1, v6, a2, v7, v9))
  {
    double result = v10[0];
    *a3 = *(_OWORD *)v10;
  }
  return result;
}

uint64_t GLUtilHasValidBinaryDataAttr(void *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  *(void *)&__n_4[1028] = *MEMORY[0x1E4F143B8];
  bzero(v14, 0x410uLL);
  unsigned int Attribute_attribute = objc_msgSend_getAttribute_attribute_(a1, v8, a2, v9, v14);
  int v11 = __n;
  if (__n < 1025) {
    uint64_t v12 = Attribute_attribute;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12 == 1)
  {
    memcpy(a3, __n_4, __n);
    *a4 = v11;
  }
  return v12;
}

__CFString *GLUtilLinkTypeMaskToString(char a1)
{
  if ((a1 - 1) > 7u) {
    return 0;
  }
  else {
    return off_1E5975B50[(char)(a1 - 1)];
  }
}

id GLUtilInterfaceTypeListToString(char a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  double v6 = v2;
  if ((a1 & 2) != 0) {
    objc_msgSend_appendString_(v2, v3, @"[W", v5);
  }
  if (a1)
  {
    if (objc_msgSend_length(v6, v3, v4, v5)) {
      objc_msgSend_appendString_(v6, v7, @", C", v8);
    }
    else {
      objc_msgSend_appendString_(v6, v7, @"[C", v8);
    }
  }
  if (objc_msgSend_length(v6, v3, v4, v5)) {
    objc_msgSend_appendString_(v6, v9, @"]", v10);
  }
  else {
    objc_msgSend_appendString_(v6, v9, @"[]", v10);
  }
  return v6;
}

id GLUtilLinkTypeListToString(char a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  double v6 = v2;
  if (a1)
  {
    objc_msgSend_appendString_(v2, v3, @"[W-W", v5);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_19:
      if (objc_msgSend_length(v6, v3, v4, v5)) {
        objc_msgSend_appendString_(v6, v14, @", C-W", v15);
      }
      else {
        objc_msgSend_appendString_(v6, v14, @"[C-W", v15);
      }
      if ((a1 & 8) != 0) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (objc_msgSend_length(v6, v3, v4, v5)) {
    objc_msgSend_appendString_(v6, v12, @", W-C", v13);
  }
  else {
    objc_msgSend_appendString_(v6, v12, @"[W-C", v13);
  }
  if ((a1 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_4:
  if ((a1 & 8) != 0)
  {
LABEL_5:
    if (objc_msgSend_length(v6, v3, v4, v5)) {
      objc_msgSend_appendString_(v6, v7, @", C-C", v8);
    }
    else {
      objc_msgSend_appendString_(v6, v7, @"[C-C", v8);
    }
  }
LABEL_8:
  if (objc_msgSend_length(v6, v3, v4, v5)) {
    objc_msgSend_appendString_(v6, v9, @"]", v10);
  }
  else {
    objc_msgSend_appendString_(v6, v9, @"[]", v10);
  }
  return v6;
}

uint64_t GLUtilNewQRLinkType(int a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  if (!a2) {
    goto LABEL_36;
  }
  if (!a3)
  {
    if (a2 != 3) {
      goto LABEL_36;
    }
    uint64_t v8 = 0;
    switch(a1)
    {
      case 1:
        goto LABEL_32;
      case 2:
        goto LABEL_26;
      case 4:
        uint64_t v8 = !GLUtilRelayLinkHasReachedMaxRetryLimit(1, v7);
        break;
      case 8:
        goto LABEL_19;
      default:
        goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (a1)
  {
    if ((a1 & 8) == 0)
    {
      if ((a2 & 1) == 0)
      {
        uint64_t v8 = 0;
        if ((a1 & 2) != 0 || (a3 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_19:
        LODWORD(v_Block_object_dispose(&STACK[0x300], 8) = 2;
        uint64_t v9 = 2;
LABEL_33:
        if (GLUtilRelayLinkHasReachedMaxRetryLimit(v9, v7)) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = v8;
        }
        goto LABEL_37;
      }
      if ((a3 & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v8 = 8;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(8, v7)) {
        goto LABEL_37;
      }
    }
    if ((a1 & 2) == 0)
    {
      uint64_t v8 = 2;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7)) {
        goto LABEL_37;
      }
    }
LABEL_31:
    if ((a1 & 4) != 0) {
      goto LABEL_36;
    }
LABEL_32:
    LODWORD(v_Block_object_dispose(&STACK[0x300], 8) = 4;
    uint64_t v9 = 4;
    goto LABEL_33;
  }
  if ((a2 & 2) == 0)
  {
    if (a2)
    {
      if ((a3 & 2) != 0 && (a1 & 4) == 0)
      {
        uint64_t v8 = 4;
        if (!GLUtilRelayLinkHasReachedMaxRetryLimit(4, v7)) {
          goto LABEL_37;
        }
      }
      uint64_t v8 = 0;
      if ((a1 & 8) != 0 || (a3 & 1) == 0) {
        goto LABEL_37;
      }
      goto LABEL_26;
    }
LABEL_36:
    uint64_t v8 = 0;
    goto LABEL_37;
  }
  if ((a3 & 2) == 0)
  {
    if ((a1 & 2) == 0)
    {
      if ((a3 & 1) == 0) {
        goto LABEL_36;
      }
      uint64_t v8 = 2;
      if (!GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7)) {
        goto LABEL_37;
      }
    }
    uint64_t v8 = 0;
    if ((a1 & 8) != 0 || (a2 & 1) == 0) {
      goto LABEL_37;
    }
LABEL_26:
    LODWORD(v_Block_object_dispose(&STACK[0x300], 8) = 8;
    uint64_t v9 = 8;
    goto LABEL_33;
  }
  uint64_t v8 = 1;
  if (GLUtilRelayLinkHasReachedMaxRetryLimit(1, v7))
  {
    int v11 = a3 & 1;
    if ((a1 & 8) != 0 || (v11 & a2) == 0 || (uint64_t v8 = 8, GLUtilRelayLinkHasReachedMaxRetryLimit(8, v7)))
    {
      if ((a1 & 2) != 0 || !v11 || (uint64_t v8 = 2, GLUtilRelayLinkHasReachedMaxRetryLimit(2, v7)))
      {
        uint64_t v8 = 0;
        if (a1 & 4) == 0 && (a2) {
          goto LABEL_32;
        }
      }
    }
  }
LABEL_37:

  return v8;
}

BOOL GLUtilRelayLinkHasReachedMaxRetryLimit(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  double v6 = objc_msgSend_numberWithInt_(NSNumber, v4, a1, v5);
  uint64_t v9 = objc_msgSend_objectForKey_(v3, v7, (uint64_t)v6, v8);
  int v13 = objc_msgSend_intValue(v9, v10, v11, v12);

  if (v13 >= 8)
  {
    double v14 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if ((a1 - 1) > 7u) {
        double v15 = 0;
      }
      else {
        double v15 = off_1E5975B50[(char)(a1 - 1)];
      }
      *(_DWORD *)kevent buf = 136315650;
      uint64_t v18 = "GLUtilRelayLinkHasReachedMaxRetryLimit";
      __int16 v19 = 2112;
      double v20 = v15;
      __int16 v21 = 1024;
      int v22 = v13;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "%s: retry count for linkType: %@ has exceeded, with %d retries!", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s: retry count for linkType: %@ has exceeded, with %d retries!");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s: retry count for linkType: %@ has exceeded, with %d retries!");
        }
      }
    }
  }

  return v13 > 7;
}

uint64_t GLUtilLinkTypeMaskForCandidatePair(void *a1)
{
  id v1 = a1;
  double v5 = objc_msgSend_local(v1, v2, v3, v4);
  int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v5, v6, v7, v8);

  int v13 = objc_msgSend_remote(v1, v10, v11, v12);

  int v17 = objc_msgSend_isCellularStunCandidate(v13, v14, v15, v16);
  int v18 = v17 ^ 1;
  if (((isCellularStunCandidate ^ 1) & 1) == 0 && !v18) {
    return 8;
  }
  int v20 = isCellularStunCandidate | v18;
  if (isCellularStunCandidate ^ 1 | v17) {
    unsigned int v21 = 1;
  }
  else {
    unsigned int v21 = 4;
  }
  if (v20 == 1) {
    return v21;
  }
  else {
    return 2;
  }
}

void GLUtilReportAWDStunMessageEvent(void *a1, uint64_t a2, void *a3, float a4)
{
  id v11 = a3;
  unsigned __int16 v10 = objc_msgSend_type(a1, v7, v8, v9);
  GLUtilReportAWDStunMessageEventWithType(v10, a2, v11, a4);
}

void GLUtilReportAWDStunMessageEventWithType(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v6, v7, v8, v9);
  uint64_t v154 = sub_19DB56C94(a1, isSharedQRSession);
  if (v154)
  {
    double v14 = objc_msgSend_local(v6, v11, v12, v13);
    unsigned int v156 = objc_msgSend_radioAccessTechnology(v14, v15, v16, v17);

    int v18 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109632;
      int v158 = a1;
      __int16 v159 = 1024;
      int v160 = v154;
      __int16 v161 = 1024;
      int v162 = a2;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d).", buf, 0x14u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v141 = v154;
        uint64_t v142 = a2;
        uint64_t v140 = a1;
        _IDSLogTransport(@"GL", @"IDS", @"report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d).");
        if (_IDSShouldLog())
        {
          uint64_t v142 = a2;
          uint64_t v140 = a1;
          uint64_t v141 = v154;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"report AWD stun message event (messageType:%04x, eventSubType:%u, resultCode:%d).");
        }
      }
    }
    id v144 = [IDSQuickRelayMetric alloc];
    double v150 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, v154, v20);
    if (a4 <= 0.0)
    {
      id v143 = 0;
    }
    else
    {
      *(float *)&double v23 = a4;
      id v143 = objc_msgSend_numberWithFloat_(NSNumber, v21, v22, v23);
    }
    int v148 = objc_msgSend_numberWithInt_(NSNumber, v21, a2, v23, v140, v141, v142);
    double v25 = NSNumber;
    uint64_t v29 = objc_msgSend_relayProviderType(v6, v26, v27, v28);
    int v146 = objc_msgSend_numberWithInteger_(v25, v30, v29, v31);
    uint64_t v32 = NSNumber;
    uint64_t v36 = objc_msgSend_local(v6, v33, v34, v35);
    uint64_t v40 = objc_msgSend_transport(v36, v37, v38, v39);
    double v44 = objc_msgSend_numberWithInteger_(v32, v41, v40, v42);
    uint64_t v46 = v156;
    if (v156 > 0xA)
    {
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v47 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, v156, v45);
      uint64_t v46 = v156;
    }
    BOOL v48 = v46 < 0xB;
    id v49 = NSNumber;
    uint64_t v50 = objc_msgSend_enableSKE(v6, v43, v46, v45);
    uint64_t v53 = objc_msgSend_numberWithBool_(v49, v51, v50, v52);
    double v54 = NSNumber;
    uint64_t isInitiator = objc_msgSend_isInitiator(v6, v55, v56, v57);
    double v61 = objc_msgSend_numberWithBool_(v54, v59, isInitiator, v60);
    int v62 = NSNumber;
    uint64_t v66 = objc_msgSend_protocolVersion(v6, v63, v64, v65);
    double v69 = objc_msgSend_numberWithUnsignedChar_(v62, v67, v66, v68);
    char v73 = objc_msgSend_appName(v6, v70, v71, v72);
    isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCFIndex Count = objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v144, v74, (uint64_t)&unk_1EF028E10, v75, v150, v143, v148, v146, v44, v47, v53, v61, v69, 0, v73, 0, 0);

    if (v48) {
    if (a4 > 0.0)
    }

    uint64_t v79 = objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v76, v77, v78);
    objc_msgSend_logMetric_(v79, v80, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v81);

    id v151 = objc_msgSend_sharedInstance(IDSAWDLogging, v82, v83, v84);
    long long v155 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v85, v154, v86);
    if (a4 <= 0.0)
    {
      BOOL v147 = 0;
    }
    else
    {
      *(float *)&double v89 = a4;
      BOOL v147 = objc_msgSend_numberWithFloat_(NSNumber, v87, v88, v89);
    }
    long long v153 = objc_msgSend_numberWithInt_(NSNumber, v87, a2, v89);
    double v90 = NSNumber;
    uint64_t v94 = objc_msgSend_relayProviderType(v6, v91, v92, v93);
    id v149 = objc_msgSend_numberWithInteger_(v90, v95, v94, v96);
    uint64_t v97 = NSNumber;
    uint64_t v101 = objc_msgSend_local(v6, v98, v99, v100);
    uint64_t v105 = objc_msgSend_transport(v101, v102, v103, v104);
    uint64_t v110 = objc_msgSend_numberWithInteger_(v97, v106, v105, v107);
    if (v156 >= 0xB)
    {
      double v112 = 0;
    }
    else
    {
      double v112 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v108, v156, v111);
    }
    uint64_t v113 = NSNumber;
    uint64_t v114 = objc_msgSend_enableSKE(v6, v108, v109, v111);
    double v117 = objc_msgSend_numberWithBool_(v113, v115, v114, v116);
    uint64_t v118 = NSNumber;
    uint64_t v122 = objc_msgSend_isInitiator(v6, v119, v120, v121);
    id v125 = objc_msgSend_numberWithBool_(v118, v123, v122, v124);
    long long v126 = NSNumber;
    uint64_t v130 = objc_msgSend_protocolVersion(v6, v127, v128, v129);
    id v133 = objc_msgSend_numberWithUnsignedChar_(v126, v131, v130, v132);
    __int16 v137 = objc_msgSend_appName(v6, v134, v135, v136);
    objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v151, v138, (uint64_t)&unk_1EF028E10, v139, v155, v147, v153, v149, v110, v112, v117, v125, v133, 0, v137, 0, 0);

    if (v156 < 0xB) {
    if (a4 > 0.0)
    }
  }
  else
  {
    uint64_t v24 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      int v158 = a1;
      _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "receive unknown stun message type (%04x) for AWD, ignore", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive unknown stun message type (%04x) for AWD, ignore");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive unknown stun message type (%04x) for AWD, ignore");
        }
      }
    }
  }
}

uint64_t sub_19DB56C94(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 4064:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 202;
      unsigned int v6 = 214;
      goto LABEL_29;
    case 4065:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 206;
      unsigned int v6 = 219;
      goto LABEL_29;
    case 4066:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 209;
      goto LABEL_19;
    case 4067:
      return 227;
    case 4068:
      return 230;
    case 4069:
      return 234;
    case 4070:
    case 4073:
    case 4074:
    case 4075:
    case 4076:
    case 4077:
    case 4078:
    case 4079:
      return result;
    case 4071:
      return 247;
    case 4072:
      return 249;
    case 4080:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 203;
      unsigned int v6 = 216;
      goto LABEL_29;
    case 4081:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 207;
      unsigned int v6 = 220;
      goto LABEL_29;
    case 4082:
      BOOL v4 = a2 == 0;
      unsigned int v5 = 210;
LABEL_19:
      unsigned int v6 = 222;
LABEL_29:
      if (v4) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v6;
      }
      break;
    case 4083:
      uint64_t result = 228;
      break;
    case 4084:
LABEL_5:
      uint64_t result = 231;
      break;
    default:
      switch(a1)
      {
        case 3808:
          BOOL v4 = a2 == 0;
          unsigned int v5 = 201;
          unsigned int v6 = 213;
          goto LABEL_29;
        case 3809:
          BOOL v4 = a2 == 0;
          unsigned int v5 = 205;
          unsigned int v6 = 218;
          goto LABEL_29;
        case 3810:
          BOOL v4 = a2 == 0;
          unsigned int v5 = 208;
          unsigned int v6 = 221;
          goto LABEL_29;
        case 3811:
          uint64_t result = 226;
          break;
        case 3812:
          uint64_t result = 229;
          break;
        case 3813:
          uint64_t result = 233;
          break;
        case 3814:
        case 3817:
        case 3818:
        case 3819:
        case 3820:
        case 3821:
        case 3822:
        case 3823:
        case 3824:
        case 3826:
        case 3827:
          return result;
        case 3815:
          uint64_t result = 246;
          break;
        case 3816:
          uint64_t result = 248;
          break;
        case 3825:
          BOOL v4 = a2 == 0;
          unsigned int v5 = 204;
          unsigned int v6 = 217;
          goto LABEL_29;
        case 3828:
          goto LABEL_5;
        case 3829:
          uint64_t result = 236;
          break;
        default:
          if (a1 == 2321) {
            uint64_t result = 704;
          }
          else {
            uint64_t result = 0;
          }
          break;
      }
      break;
  }
  return result;
}

void GLUtilReportAWDActiveLinkRTT(void *a1, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  double v9 = objc_msgSend_local(v5, v6, v7, v8);
  unsigned int v108 = objc_msgSend_radioAccessTechnology(v9, v10, v11, v12);

  uint64_t v16 = objc_msgSend_local(v5, v13, v14, v15);
  uint64_t v107 = objc_msgSend_transport(v16, v17, v18, v19);

  double v20 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = (&_IDSStunTransportStrings)[v107];
    *(_DWORD *)kevent buf = 67109634;
    int v110 = (int)a4;
    __int16 v111 = 2080;
    double v112 = v21;
    __int16 v113 = 2080;
    uint64_t v114 = IDSRadioAccessTechnologyToString(v108);
    _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "report AWD active link rtt: %d ms for %s on RAT [%s].", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v99 = (&_IDSStunTransportStrings)[v107];
      double v100 = IDSRadioAccessTechnologyToString(v108);
      uint64_t v98 = (int)a4;
      _IDSLogTransport(@"GL", @"IDS", @"report AWD active link rtt: %d ms for %s on RAT [%s].");
      if (_IDSShouldLog())
      {
        uint64_t v99 = (&_IDSStunTransportStrings)[v107];
        double v100 = IDSRadioAccessTechnologyToString(v108);
        uint64_t v98 = (int)a4;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"report AWD active link rtt: %d ms for %s on RAT [%s].");
      }
    }
  }
  uint64_t v103 = [IDSQuickRelayMetric alloc];
  if (a4 <= 0.0)
  {
    uint64_t v101 = 0;
  }
  else
  {
    *(float *)&double v24 = a4;
    uint64_t v101 = objc_msgSend_numberWithFloat_(NSNumber, v22, v23, v24);
  }
  double v25 = NSNumber;
  uint64_t v26 = objc_msgSend_relayProviderType(v5, v22, v23, v24, v98, v99, v100);
  uint64_t v29 = objc_msgSend_numberWithInteger_(v25, v27, v26, v28);
  double v33 = objc_msgSend_numberWithInteger_(NSNumber, v30, v107, v31);
  unsigned int v35 = v108;
  if (v108 > 0xA)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v32, v108, v34);
    unsigned int v35 = v108;
  }
  BOOL v37 = v35 < 0xB;
  uint64_t v38 = objc_msgSend_numberWithBool_(NSNumber, v32, a2, v34);
  id v41 = objc_msgSend_numberWithBool_(NSNumber, v39, a3, v40);
  double v42 = NSNumber;
  uint64_t v46 = objc_msgSend_protocolVersion(v5, v43, v44, v45);
  id v49 = objc_msgSend_numberWithUnsignedChar_(v42, v47, v46, v48);
  uint64_t v53 = objc_msgSend_appName(v5, v50, v51, v52);
  isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCFIndex Count = objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v103, v54, (uint64_t)&unk_1EF028E10, v55, &unk_1EF028E28, v101, 0, v29, v33, v36, v38, v41, v49, 0, v53, 0, 0);

  if (v37) {
  if (a4 > 0.0)
  }

  double v59 = objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v56, v57, v58);
  objc_msgSend_logMetric_(v59, v60, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v61);

  uint64_t v67 = objc_msgSend_sharedInstance(IDSAWDLogging, v62, v63, v64);
  if (a4 <= 0.0)
  {
    double v102 = 0;
  }
  else
  {
    *(float *)&double v68 = a4;
    double v102 = objc_msgSend_numberWithFloat_(NSNumber, v65, v66, v68);
  }
  double v69 = NSNumber;
  uint64_t v70 = objc_msgSend_relayProviderType(v5, v65, v66, v68);
  char v73 = objc_msgSend_numberWithInteger_(v69, v71, v70, v72);
  uint64_t v77 = objc_msgSend_numberWithInteger_(NSNumber, v74, v107, v75);
  if (v108 >= 0xB)
  {
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v76, v108, v78);
  }
  double v80 = objc_msgSend_numberWithBool_(NSNumber, v76, a2, v78);
  uint64_t v83 = objc_msgSend_numberWithBool_(NSNumber, v81, a3, v82);
  double v84 = NSNumber;
  uint64_t v88 = objc_msgSend_protocolVersion(v5, v85, v86, v87);
  uint64_t v91 = objc_msgSend_numberWithUnsignedChar_(v84, v89, v88, v90);
  uint64_t v95 = objc_msgSend_appName(v5, v92, v93, v94);
  objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v67, v96, (uint64_t)&unk_1EF028E10, v97, &unk_1EF028E28, v102, 0, v73, v77, v79, v80, v83, v91, 0, v95, 0, 0);

  if (v108 < 0xB) {
  if (a4 > 0.0)
  }
}

void GLUtilReportAWDClientTimerEvent(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, float a6)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  id v135 = a3;
  unsigned __int16 v10 = objc_msgSend_local(v135, v7, v8, v9);
  unsigned int v134 = objc_msgSend_radioAccessTechnology(v10, v11, v12, v13);

  uint64_t v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 67109632;
    int v137 = a1;
    __int16 v138 = 1024;
    int v139 = (int)a6;
    __int16 v140 = 1024;
    int v141 = a2;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d).", buf, 0x14u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v119 = (int)a6;
      uint64_t v120 = a2;
      uint64_t v118 = a1;
      _IDSLogTransport(@"GL", @"IDS", @"report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d).");
      if (_IDSShouldLog())
      {
        uint64_t v119 = (int)a6;
        uint64_t v120 = a2;
        uint64_t v118 = a1;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"report AWD client timer event (eventSubType: %u, duration: %d ms, resultCode: %d).");
      }
    }
  }
  uint64_t v122 = [IDSQuickRelayMetric alloc];
  uint64_t v128 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v15, a1, v16);
  if (a6 <= 0.0)
  {
    double v121 = 0;
  }
  else
  {
    *(float *)&double v19 = a6;
    double v121 = objc_msgSend_numberWithFloat_(NSNumber, v17, v18, v19);
  }
  long long v126 = objc_msgSend_numberWithInt_(NSNumber, v17, a2, v19, v118, v119, v120);
  double v20 = NSNumber;
  uint64_t v24 = objc_msgSend_relayProviderType(v135, v21, v22, v23);
  uint64_t v27 = objc_msgSend_numberWithInteger_(v20, v25, v24, v26);
  double v28 = NSNumber;
  uint64_t v32 = objc_msgSend_local(v135, v29, v30, v31);
  uint64_t v36 = objc_msgSend_transport(v32, v33, v34, v35);
  double v40 = objc_msgSend_numberWithInteger_(v28, v37, v36, v38);
  unsigned int v42 = v134;
  if (v134 > 0xA)
  {
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v39, v134, v41);
    unsigned int v42 = v134;
  }
  BOOL v44 = v42 < 0xB;
  double v45 = objc_msgSend_numberWithBool_(NSNumber, v39, a4, v41);
  double v48 = objc_msgSend_numberWithBool_(NSNumber, v46, a5, v47);
  id v49 = NSNumber;
  uint64_t v53 = objc_msgSend_protocolVersion(v135, v50, v51, v52);
  uint64_t v56 = objc_msgSend_numberWithUnsignedChar_(v49, v54, v53, v55);
  double v60 = objc_msgSend_appName(v135, v57, v58, v59);
  isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCFIndex Count = objc_msgSend_initWithType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v122, v61, (uint64_t)&unk_1EF028E40, v62, v128, v121, v126, v27, v40, v43, v45, v48, v56, 0, v60, 0, 0);

  if (v44) {
  if (a6 > 0.0)
  }

  uint64_t v66 = objc_msgSend_defaultLogger(IDSCoreAnalyticsLogger, v63, v64, v65);
  objc_msgSend_logMetric_(v66, v67, (uint64_t)isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount, v68);

  double v129 = objc_msgSend_sharedInstance(IDSAWDLogging, v69, v70, v71);
  id v133 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v72, a1, v73);
  if (a6 <= 0.0)
  {
    long long v127 = 0;
  }
  else
  {
    *(float *)&double v76 = a6;
    long long v127 = objc_msgSend_numberWithFloat_(NSNumber, v74, v75, v76);
  }
  long long v131 = objc_msgSend_numberWithInt_(NSNumber, v74, a2, v76);
  uint64_t v77 = NSNumber;
  uint64_t v81 = objc_msgSend_relayProviderType(v135, v78, v79, v80);
  double v84 = objc_msgSend_numberWithInteger_(v77, v82, v81, v83);
  uint64_t v85 = NSNumber;
  double v89 = objc_msgSend_local(v135, v86, v87, v88);
  uint64_t v93 = objc_msgSend_transport(v89, v90, v91, v92);
  double v97 = objc_msgSend_numberWithInteger_(v85, v94, v93, v95);
  if (v134 >= 0xB)
  {
    uint64_t v99 = 0;
  }
  else
  {
    uint64_t v99 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v96, v134, v98);
  }
  double v100 = objc_msgSend_numberWithBool_(NSNumber, v96, a4, v98);
  uint64_t v103 = objc_msgSend_numberWithBool_(NSNumber, v101, a5, v102);
  double v104 = NSNumber;
  uint64_t v108 = objc_msgSend_protocolVersion(v135, v105, v106, v107);
  __int16 v111 = objc_msgSend_numberWithUnsignedChar_(v104, v109, v108, v110);
  uint64_t v115 = objc_msgSend_appName(v135, v112, v113, v114);
  objc_msgSend_IDSQuickRelayEventType_eventSubType_duration_resultCode_providerType_transportType_interfaceType_skeEnabled_isInitiator_protocolVersion_retryCount_serviceName_subServiceName_participantCount_(v129, v116, (uint64_t)&unk_1EF028E40, v117, v133, v127, v131, v84, v97, v99, v100, v103, v111, 0, v115, 0, 0);

  if (v134 < 0xB) {
  if (a6 > 0.0)
  }
}

id GLUCreateQRStunMessageEvent(void *a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9 = a4;
  id v10 = a3;
  unsigned __int16 v14 = objc_msgSend_type(a1, v11, v12, v13);
  double v15 = GLUCreateQRStunMessageEventWithType(v14, a2, v10, v9, a5);

  return v15;
}

id GLUCreateQRStunMessageEventWithType(unsigned int a1, uint64_t a2, void *a3, void *a4, float a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v9, v11, v12, v13);
  unsigned int v15 = sub_19DB56C94(a1, isSharedQRSession);
  if ((a2 & 0xFFFFFFFE) == 0x22) {
    uint64_t v16 = 801;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v18 = GLUCreateQRStunMessageEventWithEventSubType(v16, a2, v9, v10, a5);
    uint64_t v22 = objc_msgSend_mutableCopy(v18, v19, v20, v21);

    if (a1 == 4064) {
      char v26 = isSharedQRSession;
    }
    else {
      char v26 = 1;
    }
    if ((v26 & 1) == 0 && (objc_msgSend_pendingNoSessionStateAllocbind(v9, v23, v24, v25) & 1) == 0) {
      objc_msgSend_setObject_forKeyedSubscript_(v22, v27, 0, v28, @"RINF");
    }
  }
  else
  {
    uint64_t v29 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 67109120;
      unsigned int v32 = a1;
      _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "receive unknown stun message type (%04x) for QREvent, ignore", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive unknown stun message type (%04x) for QREvent, ignore");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive unknown stun message type (%04x) for QREvent, ignore");
        }
      }
    }
    uint64_t v22 = 0;
  }

  return v22;
}

CFMutableDictionaryRef GLUCreateQRStunMessageEventWithEventSubType(uint64_t a1, uint64_t a2, void *a3, void *a4, float a5)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned int v15 = objc_msgSend_local(v9, v12, v13, v14);
  double v19 = objc_msgSend_allocbindDataBlob(v15, v16, v17, v18);

  uint64_t v20 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v110 = v19;
    _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "GLUCreateQRStunMessageEvent: reportingDataBlob: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v108 = v19;
      _IDSLogTransport(@"GL", @"IDS", @"GLUCreateQRStunMessageEvent: reportingDataBlob: %@");
      if (_IDSShouldLog())
      {
        uint64_t v108 = v19;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUCreateQRStunMessageEvent: reportingDataBlob: %@");
      }
    }
  }
  if (v10)
  {
    uint64_t v24 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v21, v22, v23);
    objc_msgSend_timeIntervalSinceDate_(v24, v25, (uint64_t)v10, v26);
    if ((a1 & 0xFFFFFFF7) == 0xD6)
    {
      uint64_t v30 = objc_msgSend_numberWithDouble_(NSNumber, v27, v28, v29 * 1000.0);
      objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)v30, v32, @"DELTAT");
    }
  }
  uint64_t v33 = objc_msgSend_local(v9, v21, v22, v23, v108);
  uint64_t v37 = objc_msgSend_radioAccessTechnology(v33, v34, v35, v36);

  double v41 = objc_msgSend_remote(v9, v38, v39, v40);
  uint64_t v45 = objc_msgSend_radioAccessTechnology(v41, v42, v43, v44);

  uint64_t v46 = NSNumber;
  uint64_t v50 = objc_msgSend_protocolVersion(v9, v47, v48, v49);
  uint64_t v53 = objc_msgSend_numberWithUnsignedChar_(v46, v51, v50, v52);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v54, (uint64_t)v53, v55, @"QVER");

  uint64_t v58 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v56, a1, v57);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v59, (uint64_t)v58, v60, @"TYPE");

  *(float *)&double v61 = a5;
  uint64_t v64 = objc_msgSend_numberWithFloat_(NSNumber, v62, v63, v61);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v65, (uint64_t)v64, v66, @"DUR");

  uint64_t v67 = NSNumber;
  double v71 = objc_msgSend_local(v9, v68, v69, v70);
  uint64_t v75 = objc_msgSend_transport(v71, v72, v73, v74);
  double v78 = objc_msgSend_numberWithInteger_(v67, v76, v75, v77);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v79, (uint64_t)v78, v80, @"TRAN");

  if (v37 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v81, 0, v82, @"LINF");
  }
  else
  {
    double v83 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v81, v37, v82);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v84, (uint64_t)v83, v85, @"LINF");
  }
  if (v45 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v86, 0, v87, @"RINF");
  }
  else
  {
    double v88 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v86, v45, v87);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v89, (uint64_t)v88, v90, @"RINF");
  }
  uint64_t v93 = objc_msgSend_numberWithInt_(NSNumber, v91, a2, v92);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v94, (uint64_t)v93, v95, @"SCODE");

  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v96, (uint64_t)v19, v97, @"QBLOB");
  uint64_t v101 = objc_msgSend_local(v9, v98, v99, v100);
  if (*(unsigned char *)(objc_msgSend_address(v101, v102, v103, v104) + 1) == 2) {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v105, @"IPv4", v106, @"LIPV");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v105, @"IPv6", v106, @"LIPV");
  }

  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRActiveLinkRTTEvent(void *a1, float a2)
{
  id v3 = a1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = objc_msgSend_local(v3, v5, v6, v7);
  uint64_t v12 = objc_msgSend_radioAccessTechnology(v8, v9, v10, v11);

  uint64_t v16 = objc_msgSend_remote(v3, v13, v14, v15);
  uint64_t v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

  double v21 = NSNumber;
  uint64_t v25 = objc_msgSend_protocolVersion(v3, v22, v23, v24);
  uint64_t v28 = objc_msgSend_numberWithUnsignedChar_(v21, v26, v25, v27);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v29, (uint64_t)v28, v30, @"QVER");

  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)&unk_1EF028E28, v32, @"TYPE");
  *(float *)&double v33 = a2;
  double v36 = objc_msgSend_numberWithFloat_(NSNumber, v34, v35, v33);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v37, (uint64_t)v36, v38, @"DUR");

  uint64_t v39 = NSNumber;
  uint64_t v43 = objc_msgSend_local(v3, v40, v41, v42);

  uint64_t v47 = objc_msgSend_transport(v43, v44, v45, v46);
  uint64_t v50 = objc_msgSend_numberWithInteger_(v39, v48, v47, v49);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v51, (uint64_t)v50, v52, @"TRAN");

  if (v12 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v53, 0, v54, @"LINF");
  }
  else
  {
    double v55 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v53, v12, v54);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v56, (uint64_t)v55, v57, @"LINF");
  }
  if (v20 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v58, 0, v59, @"RINF");
  }
  else
  {
    double v60 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v58, v20, v59);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v61, (uint64_t)v60, v62, @"RINF");
  }
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v63, 0, v64, @"SCODE");
  return Mutable;
}

CFMutableDictionaryRef GLUCreateLinkConnectedEvent(void *a1, int a2)
{
  id v3 = a1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = objc_msgSend_local(v3, v5, v6, v7);
  uint64_t v12 = objc_msgSend_radioAccessTechnology(v8, v9, v10, v11);

  uint64_t v16 = objc_msgSend_remote(v3, v13, v14, v15);
  uint64_t v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

  double v24 = objc_msgSend_local(v3, v21, v22, v23);
  uint64_t v28 = objc_msgSend_transport(v24, v25, v26, v27);

  switch(v28)
  {
    case 2:
      objc_msgSend_numberWithUnsignedInt_(NSNumber, v29, 313, v30);
      double v33 = LABEL_10:;
      objc_msgSend_setObject_forKeyedSubscript_(Mutable, v34, (uint64_t)v33, v35, @"TYPE");

      goto LABEL_12;
    case 3:
      BOOL v31 = a2 == 0;
      unsigned int v32 = 331;
LABEL_7:
      if (v31) {
        objc_msgSend_numberWithUnsignedInt_(NSNumber, v29, v32 + 1, v30);
      }
      else {
        objc_msgSend_numberWithUnsignedInt_(NSNumber, v29, v32, v30);
      }
      goto LABEL_10;
    case 4:
      BOOL v31 = a2 == 0;
      unsigned int v32 = 332;
      goto LABEL_7;
  }
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v29, 0, v30, @"TYPE");
LABEL_12:
  if (a2) {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)&unk_1EF028E58, v37, @"QFS");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)&unk_1EF028E70, v37, @"QFS");
  }
  if (v12 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v38, 0, v39, @"LINF");
  }
  else
  {
    double v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v38, v12, v39);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v41, (uint64_t)v40, v42, @"LINF");
  }
  if (v20 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v43, 0, v44, @"RINF");
  }
  else
  {
    uint64_t v45 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, v20, v44);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v46, (uint64_t)v45, v47, @"RINF");
  }
  uint64_t v51 = objc_msgSend_local(v3, v48, v49, v50);
  double v55 = objc_msgSend_allocbindDataBlob(v51, v52, v53, v54);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v56, (uint64_t)v55, v57, @"QBLOB");

  uint64_t v58 = NSNumber;
  double v62 = objc_msgSend_local(v3, v59, v60, v61);
  uint64_t v66 = objc_msgSend_transport(v62, v63, v64, v65);
  uint64_t v69 = objc_msgSend_numberWithInteger_(v58, v67, v66, v68);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v70, (uint64_t)v69, v71, @"TRAN");

  return Mutable;
}

uint64_t GLUtilStunTransportToLinkType(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = 331;
  }
  else {
    unsigned int v2 = 332;
  }
  if (a2) {
    int v3 = 332;
  }
  else {
    int v3 = 333;
  }
  if (a1 != 4) {
    int v3 = 0;
  }
  if (a1 != 3) {
    unsigned int v2 = v3;
  }
  if (a1 == 2) {
    return 313;
  }
  else {
    return v2;
  }
}

CFMutableDictionaryRef GLUCreateSetUPlusOneEvent(int a1, void *a2)
{
  id v3 = a2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v3)
  {
    uint64_t v8 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v4, v5, v7);
    objc_msgSend_timeIntervalSinceDate_(v8, v9, (uint64_t)v3, v10);
    uint64_t v14 = objc_msgSend_numberWithDouble_(NSNumber, v12, v13, v11 * 1000.0);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v15, (uint64_t)v14, v16, @"DELTAT");
  }
  if (a1) {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v4, (uint64_t)&unk_1EF028E88, v7, @"UPO");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v4, (uint64_t)&unk_1EF028EA0, v7, @"UPO");
  }

  return Mutable;
}

CFMutableDictionaryRef GLUCreateIPVersionFailureEvent(void *a1)
{
  id v1 = a1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = objc_msgSend_local(v1, v3, v4, v5);
  uint64_t v10 = objc_msgSend_radioAccessTechnology(v6, v7, v8, v9);

  uint64_t v14 = objc_msgSend_remote(v1, v11, v12, v13);
  uint64_t v18 = objc_msgSend_radioAccessTechnology(v14, v15, v16, v17);

  uint64_t v22 = objc_msgSend_local(v1, v19, v20, v21);
  if (*(unsigned char *)(objc_msgSend_address(v22, v23, v24, v25) + 1) == 2) {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v26, (uint64_t)&unk_1EF028EB8, v27, @"TYPE");
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v26, (uint64_t)&unk_1EF028ED0, v27, @"TYPE");
  }

  uint64_t v28 = NSNumber;
  unsigned int v32 = objc_msgSend_local(v1, v29, v30, v31);
  uint64_t v36 = objc_msgSend_transport(v32, v33, v34, v35);
  double v39 = objc_msgSend_numberWithInteger_(v28, v37, v36, v38);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v40, (uint64_t)v39, v41, @"TRAN");

  if (v10 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v42, 0, v43, @"LINF");
  }
  else
  {
    double v44 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v42, v10, v43);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v45, (uint64_t)v44, v46, @"LINF");
  }
  if (v18 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v47, 0, v48, @"RINF");
  }
  else
  {
    uint64_t v49 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v47, v18, v48);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v50, (uint64_t)v49, v51, @"RINF");
  }
  double v55 = objc_msgSend_local(v1, v52, v53, v54);
  double v59 = objc_msgSend_allocbindDataBlob(v55, v56, v57, v58);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v60, (uint64_t)v59, v61, @"QBLOB");

  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRClientTimeEvent(uint64_t a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9 = a3;
  id v10 = a4;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  double v15 = objc_msgSend_local(v9, v12, v13, v14);
  uint64_t v19 = objc_msgSend_radioAccessTechnology(v15, v16, v17, v18);

  double v23 = objc_msgSend_remote(v9, v20, v21, v22);
  uint64_t v27 = objc_msgSend_radioAccessTechnology(v23, v24, v25, v26);

  uint64_t v28 = NSNumber;
  uint64_t v32 = objc_msgSend_protocolVersion(v9, v29, v30, v31);
  double v35 = objc_msgSend_numberWithUnsignedChar_(v28, v33, v32, v34);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)v35, v37, @"QVER");

  double v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v38, a1, v39);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v41, (uint64_t)v40, v42, @"TYPE");

  if (a5 <= 0.0)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v43, 0, v45, @"DUR");
  }
  else
  {
    *(float *)&double v45 = a5;
    double v46 = objc_msgSend_numberWithFloat_(NSNumber, v43, v44, v45);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v47, (uint64_t)v46, v48, @"DUR");
  }
  double v52 = NSNumber;
  uint64_t v53 = objc_msgSend_local(v9, v49, v50, v51);
  uint64_t v57 = objc_msgSend_transport(v53, v54, v55, v56);
  uint64_t v60 = objc_msgSend_numberWithInteger_(v52, v58, v57, v59);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v61, (uint64_t)v60, v62, @"TRAN");

  if (v19 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v63, 0, v64, @"LINF");
  }
  else
  {
    double v65 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v63, v19, v64);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v66, (uint64_t)v65, v67, @"LINF");
  }
  if (v27 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v68, 0, v69, @"RINF");
  }
  else
  {
    double v70 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v68, v27, v69);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v71, (uint64_t)v70, v72, @"RINF");
  }
  uint64_t v75 = objc_msgSend_numberWithInt_(NSNumber, v73, a2, v74);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v76, (uint64_t)v75, v77, @"SCODE");

  if (a1 == 305 && v10)
  {
    uint64_t v81 = objc_msgSend_date(MEMORY[0x1E4F1C9C8], v78, v79, v80);
    objc_msgSend_timeIntervalSinceDate_(v81, v82, (uint64_t)v10, v83);
    double v87 = objc_msgSend_numberWithDouble_(NSNumber, v85, v86, v84 * 1000.0);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v88, (uint64_t)v87, v89, @"DELTAT");
  }
  return Mutable;
}

CFMutableDictionaryRef GLUCreateQRNoSessionStateEvent(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  id v10 = objc_msgSend_local(v5, v7, v8, v9);
  uint64_t v14 = objc_msgSend_radioAccessTechnology(v10, v11, v12, v13);

  double v18 = objc_msgSend_remote(v5, v15, v16, v17);
  uint64_t v22 = objc_msgSend_radioAccessTechnology(v18, v19, v20, v21);

  double v23 = NSNumber;
  uint64_t v27 = objc_msgSend_protocolVersion(v5, v24, v25, v26);
  uint64_t v30 = objc_msgSend_numberWithUnsignedChar_(v23, v28, v27, v29);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v31, (uint64_t)v30, v32, @"QVER");

  double v35 = objc_msgSend_numberWithInt_(NSNumber, v33, a2, v34);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v36, (uint64_t)v35, v37, @"TYPE");

  double v38 = NSNumber;
  double v42 = objc_msgSend_local(v5, v39, v40, v41);

  uint64_t v46 = objc_msgSend_transport(v42, v43, v44, v45);
  uint64_t v49 = objc_msgSend_numberWithInteger_(v38, v47, v46, v48);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v50, (uint64_t)v49, v51, @"TRAN");

  if (v14 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v52, 0, v53, @"LINF");
  }
  else
  {
    double v54 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v52, v14, v53);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v55, (uint64_t)v54, v56, @"LINF");
  }
  if (v22 >= 0xB)
  {
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v57, 0, v58, @"RINF");
  }
  else
  {
    double v59 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v57, v22, v58);
    objc_msgSend_setObject_forKeyedSubscript_(Mutable, v60, (uint64_t)v59, v61, @"RINF");
  }
  double v64 = objc_msgSend_numberWithInt_(NSNumber, v62, a3, v63);
  objc_msgSend_setObject_forKeyedSubscript_(Mutable, v65, (uint64_t)v64, v66, @"SCODE");

  return Mutable;
}

id GLUCreateNetworkInterfaceArrayWithOptions(uint64_t a1, int a2, char a3, int a4, int a5, int a6, char a7, unsigned int a8, void *a9)
{
  uint64_t v205 = *MEMORY[0x1E4F143B8];
  uint64_t v188 = a9;
  char v199 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  if (getifaddrs(&v199) < 0)
  {
    int v22 = *__error();
    double v23 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      *(void *)&uint8_t buf[4] = "GLUCreateNetworkInterfaceArrayWithOptions";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "%s getifaddrs failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s getifaddrs failed errno=%d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s getifaddrs failed errno=%d");
        }
      }
    }
    id v24 = 0;
    goto LABEL_170;
  }
  if (a4)
  {
    uint64_t v16 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
    uint64_t v186 = objc_msgSend_cellularDataInterfaceName(v16, v17, v18, v19);

    BOOL v180 = (v188 | v186) != 0;
    if (!(v188 | v186))
    {
      uint64_t v20 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)kevent buf = 0;
        _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "found no interface for cellular data, skip.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"found no interface for cellular data, skip.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"found no interface for cellular data, skip.");
          }
        }
      }
    }
    double v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412546;
      *(void *)&uint8_t buf[4] = v186;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v188;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - found %@ and/or %@ interface for cellular data.", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        __int16 v172 = (uint8_t *)v186;
        uint64_t v173 = v188;
        _IDSLogTransport(@"GL", @"IDS", @"Sliced Cellular Interface - found %@ and/or %@ interface for cellular data.");
        if (_IDSShouldLog())
        {
          __int16 v172 = (uint8_t *)v186;
          uint64_t v173 = v188;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Sliced Cellular Interface - found %@ and/or %@ interface for cellular data.");
        }
      }
    }
  }
  else
  {
    uint64_t v186 = 0;
    BOOL v180 = 0;
  }
  if (a6)
  {
    uint64_t v25 = objc_msgSend_sharedInstance(IDSNWPathUtils, v13, v14, v15);
    double v29 = objc_msgSend_getDefaultPath(v25, v26, v27, v28);

    uint64_t v35 = objc_msgSend_status(v29, v30, v31, v32);
    if (v35 == 1)
    {
      double v37 = objc_msgSend_interface(v29, v33, v34, v36);
      objc_msgSend_interfaceName(v37, v38, v39, v40);
      id v185 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      double v41 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)kevent buf = 138412546;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v35;
        _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "no default path is available (path:%@, status:%d).", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          __int16 v172 = (uint8_t *)v29;
          uint64_t v173 = v35;
          _IDSLogTransport(@"GL", @"IDS", @"no default path is available (path:%@, status:%d).");
          if (_IDSShouldLog())
          {
            __int16 v172 = (uint8_t *)v29;
            uint64_t v173 = v35;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"no default path is available (path:%@, status:%d).");
          }
        }
      }
      id v185 = 0;
    }
  }
  else
  {
    id v185 = 0;
  }
  double v42 = v199;
  if (!v199)
  {
    MEMORY[0x19F3AE480](0);
    goto LABEL_162;
  }
  id v187 = 0;
  if (v185) {
    int v43 = a6;
  }
  else {
    int v43 = 0;
  }
  int v181 = v43;
  __int16 v177 = __rev16(a8);
  do
  {
    if (a1 == 1)
    {
      if (v42->ifa_addr->sa_family != 30) {
        goto LABEL_53;
      }
    }
    else if (!a1 && v42->ifa_addr->sa_family != 2)
    {
      goto LABEL_53;
    }
    if ((v42->ifa_flags & 9) == 1)
    {
      ifa_addr = v42->ifa_addr;
      if (ifa_addr)
      {
        if (!v42->ifa_netmask
          || (valuint64_t id = IsValidSA((BOOL)v42->ifa_netmask), ifa_addr = v42->ifa_addr, !valid)
          || ifa_addr->sa_family == v42->ifa_netmask->sa_family)
        {
          if (!IsLinkLocalSA((BOOL)ifa_addr) || a5)
          {
            uint64_t v49 = objc_msgSend_sharedInstance(IDSNWPathUtils, v46, v47, v48, v172, v173, v174);
            int isVoWiFiInterface = objc_msgSend_isVoWiFiInterface_(v49, v50, (uint64_t)v42->ifa_name, v51);

            if (isVoWiFiInterface)
            {
              double v54 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                ifa_name = v42->ifa_name;
                *(_DWORD *)kevent buf = 136315138;
                *(void *)&uint8_t buf[4] = ifa_name;
                _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "filter out VoWiFi interface [if:%s]", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  __int16 v172 = (uint8_t *)v42->ifa_name;
                  _IDSLogTransport(@"GL", @"IDS", @"filter out VoWiFi interface [if:%s]");
                  if (_IDSShouldLog())
                  {
                    __int16 v172 = (uint8_t *)v42->ifa_name;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"filter out VoWiFi interface [if:%s]");
                  }
                }
              }
              goto LABEL_53;
            }
            *(void *)__s2 = 0;
            uint64_t v203 = 0;
            int v198 = -1;
            if (!GLUtilGetDefaultInterface(&v198, __s2, 0, v53)
              || (sub_19DB5A164(v42->ifa_name, v42->ifa_addr->sa_family, __s2) & 1) == 0)
            {
              double v59 = objc_msgSend_sharedInstance(IDSNWPathUtils, v56, v57, v58);
              int v62 = objc_msgSend_filterVirtualInterfaces_(v59, v60, (uint64_t)v42->ifa_name, v61);

              if (v62)
              {
                double v63 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  double v64 = v42->ifa_name;
                  *(_DWORD *)kevent buf = 136315138;
                  *(void *)&uint8_t buf[4] = v64;
                  _os_log_impl(&dword_19D9BE000, v63, OS_LOG_TYPE_DEFAULT, "filter out virtual interface [if:%s]", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    __int16 v172 = (uint8_t *)v42->ifa_name;
                    _IDSLogTransport(@"GL", @"IDS", @"filter out virtual interface [if:%s]");
                    if (_IDSShouldLog())
                    {
                      __int16 v172 = (uint8_t *)v42->ifa_name;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"filter out virtual interface [if:%s]");
                    }
                  }
                }
                goto LABEL_53;
              }
            }
            if (v181)
            {
              double v65 = v42->ifa_name;
              int sa_family = v42->ifa_addr->sa_family;
              id v67 = v185;
              double v71 = (char *)objc_msgSend_UTF8String(v67, v68, v69, v70);
              if ((sub_19DB5A164(v65, sa_family, v71) & 1) == 0)
              {
                double v96 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
                {
                  double v97 = v42->ifa_name;
                  id v98 = v67;
                  uint64_t v102 = objc_msgSend_UTF8String(v98, v99, v100, v101);
                  *(_DWORD *)kevent buf = 136315650;
                  *(void *)&uint8_t buf[4] = v97;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = @"12345678-7654-DADA-DADA-DADADADADADA";
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  *(void *)&unsigned char buf[24] = v102;
                  _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_DEFAULT, "filter out non-default interface [if:%s] for %@, defaultIfName: %s", buf, 0x20u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v103 = v42->ifa_name;
                    id v104 = v67;
                    uint64_t v173 = @"12345678-7654-DADA-DADA-DADADADADADA";
                    __int16 v174 = (__CFString *)objc_msgSend_UTF8String(v104, v105, v106, v107);
                    __int16 v172 = (uint8_t *)v103;
                    _IDSLogTransport(@"GL", @"IDS", @"filter out non-default interface [if:%s] for %@, defaultIfName: %s");
                    if (_IDSShouldLog())
                    {
                      uint64_t v108 = v42->ifa_name;
                      id v109 = v104;
                      uint64_t v113 = objc_msgSend_UTF8String(v109, v110, v111, v112, v172, @"12345678-7654-DADA-DADA-DADADADADADA", v174);
                      uint64_t v173 = @"12345678-7654-DADA-DADA-DADADADADADA";
                      __int16 v174 = (__CFString *)v113;
                      __int16 v172 = (uint8_t *)v108;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"filter out non-default interface [if:%s] for %@, defaultIfName: %s");
                    }
                  }
                }
                goto LABEL_53;
              }
            }
            uint64_t v178 = sub_19DB5A224((int)v42->ifa_name, v42->ifa_addr->sa_family);
            int v72 = v42->ifa_addr->sa_family;
            memset(buf, 0, 32);
            __strlcpy_chk();
            int v73 = socket(v72, 2, 0);
            int v74 = v73;
            if (v73 < 0)
            {
              double v92 = __error();
              IDSAssertNonFatalErrnoWithSource(*v92, "GL getInterfaceType", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1820, v93);
            }
            else
            {
              __int16 v172 = buf;
              int v75 = ioctl(v73, 0xC02069ADuLL);
              uint64_t v76 = *(unsigned int *)&buf[16];
              close(v74);
              if (v75 >= 0)
              {
                IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1823, 0);
                uint64_t v77 = v76;
                if (v76 == 5)
                {
                  if (!v180) {
                    goto LABEL_53;
                  }
                  double v78 = v42->ifa_name;
                  int v79 = v42->ifa_addr->sa_family;
                  id v80 = (id) v186;
                  double v84 = (char *)objc_msgSend_UTF8String(v80, v81, v82, v83);
                  if ((sub_19DB5A164(v78, v79, v84) & 1) == 0)
                  {
                    double v85 = v42->ifa_name;
                    int v86 = v42->ifa_addr->sa_family;
                    id v87 = (id) v188;
                    uint64_t v91 = (char *)objc_msgSend_UTF8String(v87, v88, v89, v90);
                    if ((sub_19DB5A164(v85, v86, v91) & 1) == 0) {
                      goto LABEL_53;
                    }
                  }
                  uint64_t v77 = 5;
                }
                else if (a7)
                {
                  if (v76 != 3)
                  {
LABEL_82:
                    double v94 = OSLogHandleForTransportCategory();
                    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                    {
                      double v95 = v42->ifa_name;
                      *(_DWORD *)kevent buf = 136315650;
                      *(void *)&uint8_t buf[4] = v95;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v77;
                      *(_WORD *)&buf[18] = 2112;
                      *(void *)&buf[20] = @"12345678-7654-DADA-DADA-DADADADADADA";
                      _os_log_impl(&dword_19D9BE000, v94, OS_LOG_TYPE_DEFAULT, "filter out interface [if:%s type:%d] for %@.", buf, 0x1Cu);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        uint64_t v173 = v77;
                        __int16 v174 = @"12345678-7654-DADA-DADA-DADADADADADA";
                        __int16 v172 = (uint8_t *)v42->ifa_name;
                        _IDSLogTransport(@"GL", @"IDS", @"filter out interface [if:%s type:%d] for %@.");
                        if (_IDSShouldLog())
                        {
                          uint64_t v173 = v77;
                          __int16 v174 = @"12345678-7654-DADA-DADA-DADADADADADA";
                          __int16 v172 = (uint8_t *)v42->ifa_name;
                          _IDSLogV(0, @"IDSFoundation", @"GL", @"filter out interface [if:%s type:%d] for %@.");
                        }
                      }
                    }
                    goto LABEL_53;
                  }
                  if ((a3 & 1) == 0)
                  {
                    int v137 = OSLogHandleForTransportCategory();
                    if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v138 = v42->ifa_name;
                      *(_DWORD *)kevent buf = 136315650;
                      *(void *)&uint8_t buf[4] = v138;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 3;
                      *(_WORD *)&buf[18] = 2112;
                      *(void *)&buf[20] = @"12345678-7654-DADA-DADA-DADADADADADA";
                      _os_log_impl(&dword_19D9BE000, v137, OS_LOG_TYPE_DEFAULT, "filter out WiFi interface [if:%s type:%d] for %@.", buf, 0x1Cu);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        uint64_t v173 = 3;
                        __int16 v174 = @"12345678-7654-DADA-DADA-DADADADADADA";
                        __int16 v172 = (uint8_t *)v42->ifa_name;
                        _IDSLogTransport(@"GL", @"IDS", @"filter out WiFi interface [if:%s type:%d] for %@.");
                        if (_IDSShouldLog())
                        {
                          uint64_t v173 = 3;
                          __int16 v174 = @"12345678-7654-DADA-DADA-DADADADADADA";
                          __int16 v172 = (uint8_t *)v42->ifa_name;
                          _IDSLogV(0, @"IDSFoundation", @"GL", @"filter out WiFi interface [if:%s type:%d] for %@.");
                        }
                      }
                    }
                    goto LABEL_53;
                  }
                  uint64_t v77 = 3;
                }
                goto LABEL_98;
              }
            }
            IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1823, 0);
            uint64_t v77 = 0;
            if (a7) {
              goto LABEL_82;
            }
LABEL_98:
            if (((a2 & 1) != 0 || (v178 & 0x100000) == 0) && (!a2 || (v178 & 0x20000) != 0))
            {
              uint64_t v176 = v77;
              id v179 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              uint64_t v115 = v42->ifa_addr;
              if (v115->sa_family == 30)
              {
                unsigned int v175 = sub_19DB5A518((uint64_t)v42->ifa_name, v115);
                if ((v175 & 0x101E) == 0)
                {
                  if ((v175 & 0x80) != 0)
                  {
                    long long v196 = 0uLL;
                    long long v197 = 0uLL;
                    long long v194 = 0uLL;
                    long long v195 = 0uLL;
                    id v139 = v187;
                    uint64_t v144 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v140, (uint64_t)&v194, v141, v201, 16);
                    if (v144)
                    {
                      uint64_t v146 = *(void *)v195;
                      do
                      {
                        for (uint64_t i = 0; i != v144; ++i)
                        {
                          if (*(void *)v195 != v146) {
                            objc_enumerationMutation(v139);
                          }
                          int v148 = *(void **)(*((void *)&v194 + 1) + 8 * i);
                          id v149 = v42->ifa_name;
                          objc_msgSend_name(v148, v142, v143, v145, v172);
                          id v150 = objc_claimAutoreleasedReturnValue();
                          uint64_t v154 = (const char *)objc_msgSend_UTF8String(v150, v151, v152, v153);
                          if (!strcmp(v149, v154))
                          {
                            isTemporaryIPuint64_t v6 = objc_msgSend_isTemporaryIPv6(v148, v155, v156, v157);

                            if ((isTemporaryIPv6 & 1) == 0)
                            {
                              objc_msgSend_addObject_(v179, v142, (uint64_t)v148, v145);
                              __int16 v159 = OSLogHandleForTransportCategory();
                              if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)kevent buf = 138412290;
                                *(void *)&uint8_t buf[4] = v148;
                                _os_log_impl(&dword_19D9BE000, v159, OS_LOG_TYPE_DEFAULT, "prune IPv6 interface %@.", buf, 0xCu);
                              }

                              if (os_log_shim_legacy_logging_enabled())
                              {
                                if (_IDSShouldLogTransport())
                                {
                                  __int16 v172 = (uint8_t *)v148;
                                  _IDSLogTransport(@"GL", @"IDS", @"prune IPv6 interface %@.");
                                  if (_IDSShouldLog())
                                  {
                                    __int16 v172 = (uint8_t *)v148;
                                    _IDSLogV(0, @"IDSFoundation", @"GL", @"prune IPv6 interface %@.");
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                          }
                        }
                        uint64_t v144 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v142, (uint64_t)&v194, v145, v201, 16);
                      }
                      while (v144);
                    }
                  }
                  else
                  {
                    long long v192 = 0uLL;
                    long long v193 = 0uLL;
                    long long v190 = 0uLL;
                    long long v191 = 0uLL;
                    id v116 = v187;
                    uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v116, v117, (uint64_t)&v190, v118, v200, 16);
                    if (v121)
                    {
                      uint64_t v123 = *(void *)v191;
                      while (2)
                      {
                        for (uint64_t j = 0; j != v121; ++j)
                        {
                          if (*(void *)v191 != v123) {
                            objc_enumerationMutation(v116);
                          }
                          id v125 = *(void **)(*((void *)&v190 + 1) + 8 * j);
                          long long v126 = v42->ifa_name;
                          objc_msgSend_name(v125, v119, v120, v122);
                          id v127 = objc_claimAutoreleasedReturnValue();
                          long long v131 = (const char *)objc_msgSend_UTF8String(v127, v128, v129, v130);
                          if (!strcmp(v126, v131))
                          {
                            int v135 = objc_msgSend_isTemporaryIPv6(v125, v132, v133, v134);

                            if (v135)
                            {
                              uint64_t v169 = OSLogHandleForTransportCategory();
                              if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)kevent buf = 138412290;
                                *(void *)&uint8_t buf[4] = v125;
                                _os_log_impl(&dword_19D9BE000, v169, OS_LOG_TYPE_DEFAULT, "skip IPv6 interface %@.", buf, 0xCu);
                              }

                              if (os_log_shim_legacy_logging_enabled())
                              {
                                if (_IDSShouldLogTransport())
                                {
                                  __int16 v172 = (uint8_t *)v125;
                                  _IDSLogTransport(@"GL", @"IDS", @"skip IPv6 interface %@.");
                                  if (_IDSShouldLog())
                                  {
                                    __int16 v172 = (uint8_t *)v125;
                                    _IDSLogV(0, @"IDSFoundation", @"GL", @"skip IPv6 interface %@.");
                                  }
                                }
                              }
                              id v187 = v116;
                              goto LABEL_157;
                            }
                          }
                          else
                          {
                          }
                        }
                        uint64_t v121 = objc_msgSend_countByEnumeratingWithState_objects_count_(v116, v119, (uint64_t)&v190, v122, v200, 16);
                        if (v121) {
                          continue;
                        }
                        break;
                      }
                    }
                  }

                  if (objc_msgSend_count(v179, v160, v161, v162)) {
                    objc_msgSend_removeObjectsInArray_(v187, (const char *)v115, (uint64_t)v179, v114);
                  }
                  uint64_t v136 = v175;
LABEL_142:
                  uint64_t v163 = v42->ifa_addr;
                  uint64_t v164 = v176;
                  if (v163->sa_data[2] != 209)
                  {
                    if (!v187)
                    {
                      uint64_t v165 = v136;
                      id v187 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                      uint64_t v163 = v42->ifa_addr;
                      uint64_t v164 = v176;
                      uint64_t v136 = v165;
                    }
                    int v166 = v163->sa_family;
                    if (v166 == 30 || v166 == 2) {
                      *(_WORD *)v163->sa_data = v177;
                    }
                    objc_msgSend_interfaceAddress_eflags_v6flags_iftype_(IDSInterfaceAddress, (const char *)v115, (uint64_t)v42, v114, v178, v136, v164, v172);
                    id v116 = (id)objc_claimAutoreleasedReturnValue();
                    if (v116) {
                      objc_msgSend_addObject_(v187, v167, (uint64_t)v116, v168);
                    }
LABEL_157:
                  }
                }

                goto LABEL_53;
              }
              uint64_t v136 = 0;
              goto LABEL_142;
            }
          }
        }
      }
    }
LABEL_53:
    double v42 = v42->ifa_next;
  }
  while (v42);
  MEMORY[0x19F3AE480](v199);
  if (!v187) {
LABEL_162:
  }
    id v187 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  __int16 v170 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 136315394;
    *(void *)&uint8_t buf[4] = "GLUCreateNetworkInterfaceArrayWithOptions";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v187;
    _os_log_impl(&dword_19D9BE000, v170, OS_LOG_TYPE_DEFAULT, "%s Available network interfaces: %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"%s Available network interfaces: %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"%s Available network interfaces: %@");
      }
    }
  }
  id v24 = v187;

LABEL_170:
  return v24;
}

uint64_t sub_19DB5A164(const char *a1, int a2, char *__s2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!__s2) {
    return 0;
  }
  if (!strncmp(a1, __s2, 0x10uLL)) {
    return 1;
  }
  memset(__s1, 170, sizeof(__s1));
  uint64_t result = getEffectiveInterface((uint64_t)a1, a2, __s1, 0);
  if (result) {
    return strncmp(__s1, __s2, 0x10uLL) == 0;
  }
  return result;
}

uint64_t sub_19DB5A224(int a1, int a2)
{
  char v2 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v3 = socket(a2, 2, 0);
  if (v3 < 0)
  {
    uint64_t v7 = *__error();
    IDSAssertNonFatalErrnoWithSource(v7, "GL getExtendedFlags", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1783, v8);
    double v9 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      double v13 = "getExtendedFlags";
      __int16 v14 = 1024;
      int v15 = v7;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "%s socket failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s socket failed errno=%d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s socket failed errno=%d");
        }
      }
    }
  }
  else
  {
    int v4 = v3;
    IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1788, 0);
    long long v16 = 0u;
    long long v17 = 0u;
    BYTE1(v17) = v2;
    __strlcpy_chk();
    int v5 = ioctl(v4, 0xC020698EuLL, &v16);
    close(v4);
    if ((v5 & 0x80000000) == 0) {
      return v17;
    }
    int v10 = *__error();
    double v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      double v13 = "getExtendedFlags";
      __int16 v14 = 1024;
      int v15 = v10;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "%s ioctl(SIOCGIFEFLAGS) failed errno=%d", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"%s ioctl(SIOCGIFEFLAGS) failed errno=%d");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"%s ioctl(SIOCGIFEFLAGS) failed errno=%d");
      }
    }
  }
  return 0;
}

uint64_t sub_19DB5A518(uint64_t a1, _OWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v3 = socket(30, 2, 0);
  if (v3 < 0)
  {
    uint64_t v7 = *__error();
    IDSAssertNonFatalErrnoWithSource(v7, "GL getIPv6Flags", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLinkUtil.m", 1736, v8);
    double v9 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      double v13 = "getIPv6Flags";
      __int16 v14 = 1024;
      int v15 = v7;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "%s socket failed errno=%d", buf, 0x12u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s socket failed errno=%d");
        uint64_t result = _IDSShouldLog();
        if (result)
        {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s socket failed errno=%d");
          return 0;
        }
      }
    }
  }
  else
  {
    int v4 = v3;
    IDSCheckFileDescriptorUsageWithSource((uint64_t)"IDSGlobalLinkUtil.m", 1741, 0);
    memset(v16, 0, sizeof(v16));
    __strlcpy_chk();
    v16[1] = *a2;
    *(_OWORD *)((char *)&v16[1] + 12) = *(_OWORD *)((char *)a2 + 12);
    int v5 = ioctl(v4, 0xC1206949uLL, v16);
    close(v4);
    if ((v5 & 0x80000000) == 0) {
      return LODWORD(v16[1]);
    }
    int v10 = *__error();
    double v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 136315394;
      double v13 = "getIPv6Flags";
      __int16 v14 = 1024;
      int v15 = v10;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d", buf, 0x12u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d");
        uint64_t result = _IDSShouldLog();
        if (result)
        {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s ioctl(SIOCGIFAFLAG_IN6) failed errno=%d");
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t GLUGetExtendedFlagsForInterface(void *a1)
{
  id v1 = a1;
  objc_msgSend_name(v1, v2, v3, v4);
  id v5 = objc_claimAutoreleasedReturnValue();
  int v9 = objc_msgSend_UTF8String(v5, v6, v7, v8);

  double v13 = objc_msgSend_address(v1, v10, v11, v12);

  uint64_t v17 = objc_msgSend_sa(v13, v14, v15, v16);
  uint64_t v18 = sub_19DB5A224(v9, *(unsigned __int8 *)(v17 + 1));

  return v18;
}

id GLUtilGetRemainingInterfaces(void *a1)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unsigned int v14 = -1;
  v17[0] = 0;
  v17[1] = 0;
  char v13 = 0;
  if (GLUtilGetDefaultInterface(&v14, (char *)v17, &v13, v2))
  {
    uint64_t v3 = GLUtilGetExcludedInterfaceAddressList(v14, (uint64_t)v17, v1);
    uint64_t v7 = objc_msgSend_mutableCopy(v1, v4, v5, v6);
    objc_msgSend_removeObjectsInArray_(v7, v8, (uint64_t)v3, v9);
    int v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 138412290;
      double v16 = v7;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "GLUtilGetRemainingInterfaces: remaining interfaces:%@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"GLUtilGetRemainingInterfaces: remaining interfaces:%@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilGetRemainingInterfaces: remaining interfaces:%@.");
        }
      }
    }
  }
  else
  {
    uint64_t v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"GLUtilGetRemainingInterfaces: Failed to get default interface, can not get remaining interfaces after exclusion!");
        }
      }
    }
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t GLUtilGetPreferredRemoteInterface(char a1)
{
  if ((a1 - 1) > 7u) {
    return 0;
  }
  else {
    return dword_19DB9B910[(char)(a1 - 1)];
  }
}

uint64_t GLUtilGetPreferredLocalInterface(int a1)
{
  unsigned int v1 = 2 * ((a1 - 1) < 2);
  if (a1 == 8) {
    unsigned int v1 = 1;
  }
  if (a1 == 4) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t GLUtilShouldSetRemoteInterfacePreference(int a1, int a2)
{
  if (a1) {
    return a2 ^ 1u;
  }
  else {
    return 0;
  }
}

unint64_t GLUtilStunTransportChar(unint64_t a1)
{
  unint64_t v1 = 0x535452503FuLL >> (8 * a1);
  if (a1 >= 5) {
    LOBYTE(v1) = 63;
  }
  return v1 & 0x7F;
}

uint64_t GLUtilIDSStunTransportToBearer(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 4) {
    return (unsigned __int16)-1;
  }
  else {
    return (unsigned __int16)(0x6000600110011uLL >> (16 * (a1 - 1)));
  }
}

BOOL GLUtilUnderPerformanceTesting(void *a1, int a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v7 = objc_msgSend_local(v3, v4, v5, v6);
  if (objc_msgSend_radioAccessTechnology(v7, v8, v9, v10))
  {

    BOOL v14 = 0;
  }
  else
  {
    double v16 = objc_msgSend_remote(v3, v11, v12, v13);
    int v20 = objc_msgSend_radioAccessTechnology(v16, v17, v18, v19);

    BOOL v14 = 0;
    if (!v20 && a2)
    {
      memset(v58, 0, sizeof(v58));
      double v23 = objc_msgSend_local(v3, v21, v22, 0.0);
      BOOL v27 = *(unsigned __int8 *)(objc_msgSend_address(v23, v24, v25, v26) + 1) == 30;

      uint64_t v31 = objc_msgSend_local(v3, v28, v29, v30);
      uint64_t v35 = objc_msgSend_address(v31, v32, v33, v34);

      uint64_t v39 = objc_msgSend_remote(v3, v36, v37, v38);
      uint64_t v43 = objc_msgSend_external(v39, v40, v41, v42);

      if (v27)
      {
        *(_OWORD *)((char *)v58 + _Block_object_dispose(&STACK[0x300], 8) = *(_OWORD *)(v35 + 8);
        long long v46 = *(_OWORD *)(v43 + 8);
        *(_OWORD *)((char *)&v58[1] + _Block_object_dispose(&STACK[0x300], 8) = v46;
        __int16 v47 = *(_WORD *)(v35 + 2);
        __int16 v48 = *(_WORD *)(v43 + 2);
        char v49 = 96;
      }
      else
      {
        __int16 v47 = *(_WORD *)(v35 + 2);
        __int16 v48 = *(_WORD *)(v43 + 2);
        DWORD2(v58[0]) = *(_DWORD *)(v35 + 4);
        DWORD2(v58[1]) = *(_DWORD *)(v43 + 4);
        char v49 = 4;
      }
      BYTE2(v58[0]) = v49;
      WORD2(v58[0]) = v47;
      WORD3(v58[0]) = v48;
      uint64_t v50 = objc_msgSend_local(v3, v44, v45, *(double *)&v46);
      uint64_t v54 = objc_msgSend_transport(v50, v51, v52, v53);

      BOOL v14 = v54 == 2;
      if (v54 == 2)
      {
        BYTE3(v58[0]) = 17;
        if (sysctlbyname("net.link.generic.system.flow_key_trace", 0, 0, v58, 0x30uLL))
        {
          uint64_t v55 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            int v56 = *__error();
            *(_DWORD *)kevent buf = 67109120;
            int v60 = v56;
            _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "Failed to send flow_key, sysctl returned %d", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              __error();
              _IDSLogTransport(@"GL", @"IDS", @"Failed to send flow_key, sysctl returned %d");
              if (_IDSShouldLog())
              {
                __error();
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Failed to send flow_key, sysctl returned %d");
              }
            }
          }
        }
        else
        {
          uint64_t v57 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)kevent buf = 0;
            _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "Succeeded in sending flow_key", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"Succeeded in sending flow_key");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Succeeded in sending flow_key");
              }
            }
          }
        }
      }
    }
  }

  return v14;
}

uint64_t GLUtilHasVPNInterfaceForSelectedAddress(void *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  double v6 = GLUtilGetRemainingInterfaces(v5);
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v13 = 0;
    goto LABEL_28;
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v8 = v6;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v43, v10, v47, 16);
  if (!v13) {
    goto LABEL_27;
  }
  uint64_t v41 = v7;
  id v42 = v5;
  uint64_t v15 = *(void *)v44;
  while (2)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (*(void *)v44 != v15) {
        objc_enumerationMutation(v8);
      }
      uint64_t v17 = *(void **)(*((void *)&v43 + 1) + 8 * i);
      int v20 = objc_msgSend_delegatedName(v4, v11, v12, v14, v41, v42, (void)v43);
      if (v20)
      {
        double v2 = objc_msgSend_delegatedName(v17, v18, v19, v21);
        if (!v2)
        {
          BOOL v27 = 1;
LABEL_15:

          goto LABEL_16;
        }
      }
      id v24 = objc_msgSend_delegatedName(v17, v18, v19, v21);
      if (v24)
      {
        double v26 = objc_msgSend_delegatedName(v4, v22, v23, v25);
        BOOL v27 = v26 == 0;
      }
      else
      {
        BOOL v27 = 0;
      }

      if (v20) {
        goto LABEL_15;
      }
LABEL_16:

      int isCellular = objc_msgSend_isCellular(v4, v28, v29, v30);
      if (isCellular == objc_msgSend_isCellular(v17, v32, v33, v34))
      {
        uint64_t v35 = objc_msgSend_IPVersion(v4, v11, v12, v14);
        if (v35 == objc_msgSend_IPVersion(v17, v36, v37, v38) && v27)
        {
          uint64_t v13 = 1;
          goto LABEL_26;
        }
      }
    }
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v43, v14, v47, 16);
    if (v13) {
      continue;
    }
    break;
  }
LABEL_26:
  uint64_t v7 = v41;
  id v5 = v42;
LABEL_27:

LABEL_28:
  return v13;
}

__CFString *GLUtilStunTransportToProtocol(uint64_t a1, int a2)
{
  double v2 = @"TCP";
  id v3 = @"H2";
  if (!a2)
  {
    id v3 = @"TCP";
    double v2 = @"TLS";
  }
  if (a1 != 4) {
    double v2 = @"UNKNOWN";
  }
  if (a1 == 3) {
    double v2 = v3;
  }
  if (a1 == 2) {
    return @"QUIC";
  }
  else {
    return v2;
  }
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterAckRequestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v23 = PBReaderReadData();
        id v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v23;
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB5C45C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C528(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C5B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C684(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C70C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C790(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C804(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DB5C918(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5C9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DB5CA2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5CAA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5CB3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5CBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DB5CC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t IDSMPServiceIdentityTypeForName(void *a1, const char *a2, double a3)
{
  return objc_msgSend_isEqualToString_(a1, a2, @"A", a3);
}

__CFString *IDSMPServiceIdentityTypeNameForType(uint64_t a1)
{
  if (a1 == 1) {
    return @"A";
  }
  else {
    return 0;
  }
}

uint64_t _IDSServiceDictionaries()
{
  return sub_19D9C4E54(0, 0);
}

id _IDSServiceDictionaryRepresentableHash()
{
  v50[1] = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v50[0] = @"Identifier";
  uint64_t v37 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v1, (uint64_t)v50, v2, 1);
  context = (void *)MEMORY[0x19F3AEEF0]();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  sub_19D9C4E54(0, 0);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v44, v4, v49, 16);
  if (v38)
  {
    uint64_t v36 = *(void *)v45;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v45 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v39 = v5;
        double v6 = *(void **)(*((void *)&v44 + 1) + 8 * v5);
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v7 = v37;
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v40, v9, v48, 16, context);
        if (v10)
        {
          uint64_t v13 = v10;
          uint64_t v14 = *(void *)v41;
          do
          {
            for (uint64_t i = 0; i != v13; ++i)
            {
              if (*(void *)v41 != v14) {
                objc_enumerationMutation(v7);
              }
              double v16 = objc_msgSend_objectForKey_(v6, v11, *(void *)(*((void *)&v40 + 1) + 8 * i), v12);
              if (v16)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  objc_msgSend_addObject_(v0, v17, (uint64_t)v16, v18);
                }
                else
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    char v22 = objc_msgSend_stringValue(v16, v19, v20, v21);
                    objc_msgSend_addObject_(v0, v23, (uint64_t)v22, v24);
                  }
                }
              }
            }
            uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v11, (uint64_t)&v40, v12, v48, 16);
          }
          while (v13);
        }

        uint64_t v5 = v39 + 1;
      }
      while (v39 + 1 != v38);
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v44, v26, v49, 16);
    }
    while (v38);
  }

  objc_msgSend_sortUsingSelector_(v0, v27, (uint64_t)sel_caseInsensitiveCompare_, v28);
  double v32 = objc_msgSend_SHA256HexString(v0, v29, v30, v31);

  return v32;
}

BOOL IDSQRProtoParticipantUpdateParticipantUpdateReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t IDSQRProtoGetMaterialResponseReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(IDSQRProtoMaterial);
        objc_msgSend_addMaterials_(a1, v18, (uint64_t)v17, v19);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoPluginControlPluginControlReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t writeIDSGLAttrAddress(unsigned __int16 *a1, uint64_t a2, int *a3)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  BOOL v5 = v4 || a3 == 0;
  uint64_t result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(unsigned char *)(a2 + 4) = 0;
    if (*((unsigned char *)a1 + 9) == 30)
    {
      if (*((_DWORD *)a1 + 4) || *((_DWORD *)a1 + 5) || *((_DWORD *)a1 + 6) != -65536)
      {
        *(unsigned char *)(a2 + 5) = 2;
        *(_WORD *)(a2 + 6) = a1[5];
        *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x300], 8) = *((_OWORD *)a1 + 1);
        int v8 = 24;
        goto LABEL_19;
      }
      *(unsigned char *)(a2 + 5) = 1;
      *(_WORD *)(a2 + 6) = a1[5];
      int v7 = *((_DWORD *)a1 + 7);
    }
    else
    {
      *(unsigned char *)(a2 + 5) = 1;
      *(_WORD *)(a2 + 6) = a1[5];
      int v7 = *((_DWORD *)a1 + 3);
    }
    *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x300], 8) = v7;
    int v8 = 12;
LABEL_19:
    *(_WORD *)(a2 + 2) = ((_WORD)v8 << 8) - 1024;
    *a3 = v8;
  }
  return result;
}

uint64_t writeIDSGLAttrU16(unsigned __int16 *a1, _WORD *a2, _DWORD *a3)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  BOOL v5 = v4 || a3 == 0;
  uint64_t result = !v5;
  if (!v5)
  {
    *a2 = bswap32(*a1) >> 16;
    a2[1] = 512;
    a2[2] = bswap32(a1[4]) >> 16;
    *a3 = 6;
  }
  return result;
}

uint64_t writeIDSGLAttrU32(unsigned __int16 *a1, uint64_t a2, _DWORD *a3)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  BOOL v5 = v4 || a3 == 0;
  uint64_t result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(_WORD *)(a2 + 2) = 1024;
    *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)a1 + 2));
    *a3 = 8;
  }
  return result;
}

uint64_t writeIDSGLAttrU64(unsigned __int16 *a1, uint64_t a2, _DWORD *a3)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  BOOL v5 = v4 || a3 == 0;
  uint64_t result = !v5;
  if (!v5)
  {
    *(_WORD *)a2 = bswap32(*a1) >> 16;
    *(_WORD *)(a2 + 2) = 2048;
    *(void *)(a2 + 4) = *((void *)a1 + 1);
    *a3 = 12;
  }
  return result;
}

uint64_t writeIDSGLAttrBinaryData(unsigned __int16 *a1, _WORD *a2, int *a3)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  BOOL v4 = v3 || a3 == 0;
  uint64_t v5 = !v4;
  if (!v4)
  {
    *a2 = bswap32(*a1) >> 16;
    int v9 = a2 + 4;
    memcpy(a2 + 2, a1 + 6, *((int *)a1 + 2));
    int v10 = v9 + *((_DWORD *)a1 + 2) - a2;
    a2[1] = bswap32(v10 - 4) >> 16;
    *a3 = v10;
  }
  return v5;
}

uint64_t readIDSGLAttrAddress(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, double a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((int)a4 <= 1)
  {
    double v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 67109120;
      unsigned int v17 = a4;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrAddress: inputBufferLength: %d < 2, return", (uint8_t *)&v16, 8u);
    }

    return 0;
  }
  unsigned int v7 = a4 - 2;
  if (*(unsigned char *)(a3 + 1) != 2)
  {
    unsigned int v10 = a4 - 4;
    if (a4 >= 4)
    {
      if (a4 > 7)
      {
        __int16 v11 = *(_WORD *)(a3 + 2);
        int v12 = *(_DWORD *)(a3 + 4);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 528;
        *(_DWORD *)(a1 + 12) = v12;
        *(_WORD *)(a1 + 1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v11;
        return 1;
      }
      uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 67109120;
        unsigned int v17 = v10;
        BOOL v15 = "ERROR: readIDSGLAttrAddress: IPv4: inputBufferLength = %d < 4, return";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    int v16 = 67109120;
    unsigned int v17 = v7;
    BOOL v15 = "ERROR: readIDSGLAttrAddress: IPv4: inputBufferLength = %d < 2, return";
LABEL_21:
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v16, 8u);
    goto LABEL_22;
  }
  unsigned int v8 = a4 - 4;
  if (a4 < 4)
  {
    uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    int v16 = 67109120;
    unsigned int v17 = v7;
    BOOL v15 = "ERROR: readIDSGLAttrAddress: IPv6: inputBufferLength = %d < 2, return";
    goto LABEL_21;
  }
  __int16 v9 = *(_WORD *)(a3 + 2);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = 7708;
  *(_WORD *)(a1 + 1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v9;
  if (a4 > 0x13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 4);
    return 1;
  }
  uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, a5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 67109120;
    unsigned int v17 = v8;
    BOOL v15 = "ERROR: readIDSGLAttrAddress: IPv6: inputBufferLength = %d < 16, return";
    goto LABEL_21;
  }
LABEL_22:

  return 0;
}

BOOL readIDSGLAttrU16(uint64_t a1, char *a2, unsigned __int16 *a3, int a4, double a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a4 <= 1)
  {
    double v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a4;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU16 inputBufferLength = %d < 2, return", (uint8_t *)v8, 8u);
    }
  }
  else
  {
    *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = bswap32(*a3) >> 16;
    *(_DWORD *)a2 = 2;
  }
  return a4 > 1;
}

BOOL readIDSGLAttrU32(uint64_t a1, char *a2, unsigned int *a3, int a4, double a5)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a4 <= 3)
  {
    double v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a4;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU32 inputBufferLength = %d < 4, return", (uint8_t *)v8, 8u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = bswap32(*a3);
    *(_DWORD *)a2 = 4;
  }
  return a4 > 3;
}

BOOL readIDSGLAttrU64(uint64_t a1, char *a2, void *a3, unsigned int a4, double a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a4 <= 7)
  {
    double v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, a5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109376;
      v8[1] = a4;
      __int16 v9 = 2048;
      uint64_t v10 = 8;
      _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrU64 inputBufferLength = %d < sizeof(uint64_t):%lu , return", (uint8_t *)v8, 0x12u);
    }
  }
  else
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = *a3;
    *(_DWORD *)a2 = 8;
  }
  return a4 > 7;
}

BOOL readIDSGLAttrBinaryData(uint64_t a1, const char *a2, void *__src, int a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = *(_DWORD *)a2;
  size_t v6 = *(int *)a2;
  if ((int)v6 > a4)
  {
    unsigned int v8 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)__src, a5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)a2;
      v11[0] = 67109376;
      v11[1] = a4;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "ERROR: readIDSGLAttrBinaryData inputBufferLength = %d < *attrLength: %d, return", (uint8_t *)v11, 0xEu);
    }
  }
  else
  {
    memcpy((void *)(a1 + 12), __src, v6);
  }
  return (int)v6 <= a4;
}

uint64_t IDSQRProtoUnAllocBindResponseReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_19DB60060(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  return objc_msgSend_setObject_forKey_(*(void **)(a1 + 32), a2, a3, a4, a2);
}

uint64_t IDSQRProtoPutMaterialIndicationReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0) {
            goto LABEL_37;
          }
          v21 += 7;
          BOOL v14 = v22++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_39:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v23;
      }
      else
      {
        if (v17 == 2)
        {
          uint64_t v18 = objc_alloc_init(IDSQRProtoPutMaterialErrorIndication);
          objc_storeStrong((id *)(a1 + 24), v18);
          if (!PBReaderPlaceMark()
            || (IDSQRProtoPutMaterialErrorIndicationReadFrom((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = objc_alloc_init(IDSQRProtoMaterial);
          objc_msgSend_addMaterials_((void *)a1, v19, (uint64_t)v18, v20);
          if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v18, a2) & 1) == 0) {
            goto LABEL_42;
          }
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB64038()
{
  id v0 = objc_alloc_init(IDSSysdiagnoseLogCollector);
  unint64_t v1 = (void *)qword_1EB2BB7A0;
  qword_1EB2BB7A0 = (uint64_t)v0;
}

void sub_19DB64358(uint64_t a1, void *a2)
{
  xpc_object_t xdict = a2;
  IMPrintf();
  if (MEMORY[0x19F3AFA60](xdict) == MEMORY[0x1E4F14590])
  {
    if (xpc_dictionary_get_BOOL(xdict, "success"))
    {
      xpc_dictionary_get_string(xdict, "path");
      IMPrintf();
      char v8 = 0;
      goto LABEL_7;
    }
    IMPrintf();
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v5, *MEMORY[0x1E4F28798], v6, 5, &unk_1EF02B378);
  }
  else
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v3, *MEMORY[0x1E4F28798], v4, 45, &unk_1EF02B3A0);
  char v8 = };
LABEL_7:
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

uint64_t IDSQRProtoStatsResponseReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_59:
          uint64_t v45 = 16;
          goto LABEL_76;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_63:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v26;
          continue;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_67:
          uint64_t v45 = 24;
          goto LABEL_76;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v19 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_71:
          uint64_t v45 = 20;
          goto LABEL_76;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_73;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_75;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_73:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_75:
      uint64_t v45 = 28;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL IDSQRProtoGoAwayGoAwayReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  double v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v1sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

id *_IDSLinkPacketBufferCreate()
{
  return sub_19DB656E4(0, 0x717uLL);
}

id *sub_19DB656E4(id *a1, unint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0xFFFFFFFFFFFFFA20)
  {
    BOOL v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)kevent buf = 134217984;
      unint64_t v24 = a2;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Cannot create acket buffer, requestedSize too large: %zu", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"PacketBuffer", @"IDS", @"Cannot create acket buffer, requestedSize too large: %zu");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"Cannot create acket buffer, requestedSize too large: %zu");
        }
      }
    }
    return 0;
  }
  if (a2 < 0xFA21) {
    int v6 = 2;
  }
  else {
    int v6 = 3;
  }
  uint64_t v7 = a2 + 200;
  if (a2 < 0xFA21) {
    uint64_t v7 = 64232;
  }
  if (a2 < 0x718) {
    int v8 = 1;
  }
  else {
    int v8 = v6;
  }
  if (a2 >= 0x718) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 2015;
  }
  if (v8 == 2)
  {
    uint64_t v10 = (atomic_uint *)&unk_1E944F974;
    uint64_t v11 = @"large";
    unint64_t v12 = (OSQueueHead *)&unk_1E944F960;
    goto LABEL_25;
  }
  if (v8 != 3)
  {
    uint64_t v10 = (atomic_uint *)&unk_1E944F2F8;
    uint64_t v11 = @"regular";
    unint64_t v12 = (OSQueueHead *)&unk_1E944F300;
LABEL_25:
    if (qword_1E944F2D0 != -1) {
      dispatch_once(&qword_1E944F2D0, &unk_1EEFCD898);
    }
    if (byte_1E944F2DC)
    {
      uint64_t v13 = (uint64_t)OSAtomicDequeue(v12, 0);
      double v4 = (id *)v13;
      if (v13) {
        goto LABEL_35;
      }
    }
    goto LABEL_29;
  }
  uint64_t v10 = (atomic_uint *)&unk_1E944F970;
  uint64_t v11 = @"custom";
LABEL_29:
  double v4 = (id *)malloc_type_calloc(1uLL, v9 + 1304, 0x7E5EA95DuLL);
  atomic_fetch_add(v10, 1u);
  char v17 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = atomic_load((unsigned int *)v10);
    *(_DWORD *)kevent buf = 138412546;
    unint64_t v24 = (unint64_t)v11;
    __int16 v25 = 1024;
    unsigned int v26 = v18;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "%@ packet buffer count: %u", buf, 0x12u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled();
  if (v13)
  {
    uint64_t v13 = _IDSShouldLogTransport();
    if (v13)
    {
      atomic_load((unsigned int *)v10);
      _IDSLogTransport(@"PacketBuffer", @"IDS", @"%@ packet buffer count: %u");
      uint64_t v13 = _IDSShouldLog();
      if (v13)
      {
        atomic_load((unsigned int *)v10);
        uint64_t v13 = _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"%@ packet buffer count: %u");
      }
    }
  }
LABEL_35:
  if (a1)
  {
    memcpy(v4, a1, 0x518uLL);
    v4[158] = 0;
    objc_storeStrong(v4 + 158, a1[158]);
  }
  v4[1] = (id)(v9 - 200);
  if (v9 - 200 < a2)
  {
    uint64_t v19 = isRunningTests(v16, v13, v14, v15);
    if (v19) {
      throwsIDSAbortException(v21, v19, v20);
    }
    abort();
  }
  id *v4 = (char *)v4 + 1497;
  *((_DWORD *)v4 + _Block_object_dispose(&STACK[0x300], 8) = 1;
  *((unsigned char *)v4 + 36) = v8;
  return v4;
}

id *_IDSLinkPacketBufferCreateWithSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_19DB656E4(0, a3);
}

id *_IDSLinkPacketBufferCreateWithUserBuffer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t result = sub_19DB656E4(0, 0x717uLL);
  result[1] = a4;
  result[2] = a4;
  *uint64_t result = a3;
  return result;
}

void _IDSLinkPacketBufferRetain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add((atomic_uint *volatile)(a3 + 32), 1u);
  }
}

void _IDSLinkPacketBufferRelease(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (!*(_DWORD *)(a3 + 32))
    {
      uint64_t v5 = isRunningTests(a4, a1, a2, a3);
      if (v5) {
        throwsIDSAbortException(v7, v5, v6);
      }
      abort();
    }
    if (atomic_fetch_add((atomic_uint *volatile)(a3 + 32), 0xFFFFFFFF) == 1)
    {
      int v8 = *(void **)(a3 + 1264);
      *(void *)(a3 + 1264) = 0;

      int v9 = *(unsigned __int8 *)(a3 + 36);
      bzero((void *)a3, 0x518uLL);
      if (v9 == 3)
      {
        uint64_t v10 = (atomic_uint *)&unk_1E944F970;
        uint64_t v11 = @"custom";
LABEL_23:
        free((void *)a3);
        atomic_fetch_add(v10, 0xFFFFFFFF);
        BOOL v14 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = atomic_load((unsigned int *)v10);
          *(_DWORD *)kevent buf = 138412546;
          char v17 = v11;
          __int16 v18 = 1024;
          unsigned int v19 = v15;
          _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "release %@ packet buffer. count: %u", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            atomic_load((unsigned int *)v10);
            _IDSLogTransport(@"PacketBuffer", @"IDS", @"release %@ packet buffer. count: %u");
            if (_IDSShouldLog())
            {
              atomic_load((unsigned int *)v10);
              _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"release %@ packet buffer. count: %u");
            }
          }
        }
        return;
      }
      if (qword_1E944F2D0 != -1) {
        dispatch_once(&qword_1E944F2D0, &unk_1EEFCD898);
      }
      if (!byte_1E944F2DC)
      {
        BOOL v13 = v9 == 2;
        if (v9 == 2) {
          uint64_t v11 = @"large";
        }
        else {
          uint64_t v11 = @"regular";
        }
        if (v13) {
          uint64_t v10 = (atomic_uint *)&unk_1E944F974;
        }
        else {
          uint64_t v10 = (atomic_uint *)&unk_1E944F2F8;
        }
        goto LABEL_23;
      }
      if (v9 == 2) {
        unint64_t v12 = (OSQueueHead *)&unk_1E944F960;
      }
      else {
        unint64_t v12 = (OSQueueHead *)&unk_1E944F300;
      }
      OSAtomicEnqueue(v12, (void *)a3, 0);
    }
  }
}

void IDSLinkPacketBufferCleanup()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (qword_1E944F2D0 != -1) {
    dispatch_once(&qword_1E944F2D0, &unk_1EEFCD898);
  }
  if (byte_1E944F2DC)
  {
    id v0 = OSAtomicDequeue(&stru_1E944F300, 0);
    if (v0)
    {
      int v1 = 0;
      do
      {
        free(v0);
        ++v1;
        id v0 = OSAtomicDequeue(&stru_1E944F300, 0);
      }
      while (v0);
      atomic_fetch_add(dword_1E944F2F8, -v1);
      double v2 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v3 = atomic_load((unsigned int *)dword_1E944F2F8);
        *(_DWORD *)kevent buf = 67109376;
        int v9 = v1;
        __int16 v10 = 1024;
        unsigned int v11 = v3;
        _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "packet buffer freed: %u remaining count: %u", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          atomic_load((unsigned int *)dword_1E944F2F8);
          _IDSLogTransport(@"PacketBuffer", @"IDS", @"packet buffer freed: %u remaining count: %u");
          if (_IDSShouldLog())
          {
            atomic_load((unsigned int *)dword_1E944F2F8);
            _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"packet buffer freed: %u remaining count: %u");
          }
        }
      }
    }
    double v4 = OSAtomicDequeue(&stru_1E944F960, 0);
    if (v4)
    {
      int v5 = 0;
      do
      {
        free(v4);
        double v4 = OSAtomicDequeue(&stru_1E944F960, 0);
        ++v5;
      }
      while (v4);
      atomic_fetch_add(&dword_1E944F974, -v5);
      int v6 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = atomic_load((unsigned int *)&dword_1E944F974);
        *(_DWORD *)kevent buf = 67109376;
        int v9 = v5;
        __int16 v10 = 1024;
        unsigned int v11 = v7;
        _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "large packet buffer freed: %u remaining count: %u", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        atomic_load((unsigned int *)&dword_1E944F974);
        _IDSLogTransport(@"PacketBuffer", @"IDS", @"large packet buffer freed: %u remaining count: %u");
        if (_IDSShouldLog())
        {
          atomic_load((unsigned int *)&dword_1E944F974);
          _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"large packet buffer freed: %u remaining count: %u");
        }
      }
    }
  }
}

id *_IDSLinkPacketBufferClone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = sub_19DB656E4((id *)a3, *(void *)(a3 + 8));
  int v8 = v4;
  if (v4)
  {
    uint64_t v9 = (uint64_t)v4 + *(_DWORD *)a3 - (int)a3;
    __int16 v10 = (char *)*v4 + (void)v4[1] - v9;
    id *v4 = (id)v9;
    v4[1] = v10;
    v4[2] = 0;
    sub_19DB660E4(v4, v5, v6, v7);
    memcpy(*v8, *(const void **)a3, *(void *)(a3 + 16));
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
  }
  return v8;
}

void *IDSLinkPacketBufferResetBufferStart(void *result, const char *a2, uint64_t a3, double a4)
{
  double v4 = (char *)result + (int)a2 + 1297;
  uint64_t v5 = *result - (void)v4 + result[1];
  *uint64_t result = v4;
  result[1] = v5;
  result[2] = 0;
  return sub_19DB660E4(result, a2, a3, a4);
}

void *sub_19DB660E4(void *result, const char *a2, uint64_t a3, double a4)
{
  if (*result - (void)result <= 0x517uLL)
  {
    uint64_t v4 = isRunningTests(a4, (uint64_t)result, a2, a3);
    if (v4)
    {
      throwsIDSAbortException(v6, v4, v5);
    }
    abort();
  }
  return result;
}

void *IDSLinkPacketBufferAddBufferStart(void *result, const char *a2, uint64_t a3, double a4)
{
  if (a2)
  {
    uint64_t v4 = *result;
    uint64_t v5 = (result[2] - (int)a2) & ~((result[2] - (int)a2) >> 63);
    result[1] -= (int)a2;
    result[2] = v5;
    *uint64_t result = v4 + (int)a2;
    return sub_19DB660E4(result, a2, a3, a4);
  }
  return result;
}

uint64_t bufferChecksum(int8x16_t *a1, uint64_t a2, int a3)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  int v6 = WORD1(a2);
  size_t v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](a1);
  if (v7) {
    memset((char *)v21 - 2 * v7, 170, v8);
  }
  int v9 = v6 + (unsigned __int16)a2;
  __int16 v10 = a1;
  if (a1)
  {
    memcpy((char *)v21 - 2 * v7, a1, v7);
    __int16 v10 = (int8x16_t *)((char *)v21 - 2 * v7);
  }
  uint32x4_t v11 = 0uLL;
  if (a2 >= 16)
  {
    uint64_t v12 = (a2 >> 4) + 1;
    do
    {
      int8x16_t v13 = *v10++;
      uint32x4_t v11 = vpadalq_u16(v11, (uint16x8_t)vrev16q_s8(v13));
      --v12;
    }
    while (v12 > 1);
  }
  unsigned int v14 = v9 + a3 + vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v11), 1), v11).u32[0];
  unsigned int v15 = &a1->i8[a2];
  if (a2)
  {
    int v16 = *--v15;
    v14 += v16 << 8;
  }
  unsigned int v17 = (a2 >> 1) & 7;
  if (v17)
  {
    __int16 v18 = v15 - 1;
    unsigned int v19 = v17 + 1;
    do
    {
      v14 += bswap32(*(unsigned __int16 *)(v18 - 1)) >> 16;
      v18 -= 2;
      --v19;
    }
    while (v19 > 1);
  }
  if (v14 >= 0x10000)
  {
    do
      unsigned int v14 = HIWORD(v14) + (unsigned __int16)v14;
    while (HIWORD(v14));
  }
  return (unsigned __int16)~(_WORD)v14;
}

uint64_t sub_19DB662BC()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  zone_name = malloc_get_zone_name(*(malloc_zone_t **)*MEMORY[0x1E4F14980]);
  if (zone_name)
  {
    int v1 = strcmp(zone_name, "ProbGuardMallocZone");
    BOOL v2 = v1 == 0;
    BOOL v3 = v1 != 0;
  }
  else
  {
    BOOL v2 = 0;
    BOOL v3 = 1;
  }
  byte_1E944F2DC = v3;
  uint64_t result = IMGetDomainBoolForKeyWithDefaultValue();
  byte_1E944F2DC = result;
  if ((result & 1) == 0)
  {
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = @"NO";
      if (v2) {
        int v6 = @"YES";
      }
      *(_DWORD *)kevent buf = 138412290;
      size_t v8 = v6;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "Memory pool disabled! (PGM enabled: %@)", buf, 0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled();
    if (result)
    {
      uint64_t result = _IDSShouldLogTransport();
      if (result)
      {
        _IDSLogTransport(@"PacketBuffer", @"IDS", @"Memory pool disabled! (PGM enabled: %@)");
        uint64_t result = _IDSShouldLog();
        if (result) {
          return _IDSLogV(0, @"IDSFoundation", @"PacketBuffer", @"Memory pool disabled! (PGM enabled: %@)");
        }
      }
    }
  }
  return result;
}

id sub_19DB66800(void *a1, const char *a2, double a3)
{
  BOOL v3 = objc_msgSend_subdataWithRange_(a1, a2, 0, a3, 20);
  size_t v7 = objc_msgSend_debugDescription(v3, v4, v5, v6);

  size_t v8 = NSString;
  uint64_t v12 = objc_msgSend_length(v7, v9, v10, v11);
  unsigned int v15 = objc_msgSend_substringToIndex_(v7, v13, v12 - 1, v14);
  __int16 v18 = objc_msgSend_stringWithFormat_(v8, v16, @"%@ ...>", v17, v15);

  return v18;
}

void sub_19DB66BA0(uint64_t a1, void *a2, unint64_t a3)
{
  id v23 = a2;
  if (!a3 && (*(unsigned char *)(a1 + 48) & 0x10) != 0) {
    objc_msgSend_appendString_(*(void **)(a1 + 32), v5, @"\n", v6);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  if ((v7 & 0x10) != 0 && (v8 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = -1;
    do
    {
      objc_msgSend_appendString_(*(void **)(a1 + 32), v5, @"  ", v6);
      uint64_t v8 = *(void *)(a1 + 56);
      ++v9;
    }
    while (v9 < v8);
    uint64_t v7 = *(void *)(a1 + 48);
  }
  uint64_t v10 = *(void **)(a1 + 32);
  double v11 = objc_msgSend_descriptionForObject_options_level_(*(void **)(a1 + 64), v5, (uint64_t)v23, v6, v7, v8 + 1);
  objc_msgSend_appendString_(v10, v12, (uint64_t)v11, v13);

  if (objc_msgSend_count(*(void **)(a1 + 40), v14, v15, v16) - 1 <= a3)
  {
    if (objc_msgSend_count(*(void **)(a1 + 40), v17, v18, v19) - 1 == a3 && (*(unsigned char *)(a1 + 48) & 0x10) != 0) {
      objc_msgSend_appendString_(*(void **)(a1 + 32), v21, @"\n", v22);
    }
  }
  else
  {
    uint64_t v20 = *(void **)(a1 + 32);
    if ((*(void *)(a1 + 48) & 0x10) != 0) {
      objc_msgSend_appendString_(v20, v17, @",\n", v19);
    }
    else {
      objc_msgSend_appendString_(v20, v17, @", ", v19);
    }
  }
}

uint64_t IDSQRProtoParticipantUpdateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 16) {
        break;
      }
      if (v18 == 2)
      {
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            while (1)
            {
              uint64_t v34 = *v3;
              unint64_t v35 = *(void *)(a2 + v34);
              if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_47;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
            PBRepeatedUInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          while (1)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_68;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_68:
          PBRepeatedUInt64Add();
        }
        goto LABEL_69;
      }
      if (v18 == 1)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_51;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_53:
        uint64_t v37 = 32;
LABEL_58:
        *(_DWORD *)(a1 + v37) = v21;
        goto LABEL_69;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_69:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 40) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v21 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_55;
      }
      v25 += 7;
      BOOL v14 = v26++ >= 9;
      if (v14)
      {
        LODWORD(v21) = 0;
        goto LABEL_57;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v21) = 0;
    }
LABEL_57:
    uint64_t v37 = 36;
    goto LABEL_58;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_19DB69314(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a3, sel__refreshServerTime, a4, a1);
}

id sub_19DB69B70()
{
  if (qword_1E944F360 != -1) {
    dispatch_once(&qword_1E944F360, &unk_1EEFCE758);
  }
  id v0 = (void *)qword_1E944F368;
  return v0;
}

uint64_t sub_19DB69C78()
{
  uint64_t result = CUTWeakLinkClass();
  qword_1E944F368 = result;
  return result;
}

void sub_19DB69CA8()
{
  id v0 = *(void **)MEMORY[0x19F3ADAF0]("APSEnvironmentProduction", @"ApplePushService");
  objc_storeStrong((id *)&qword_1E944F370, v0);
}

void sub_19DB69CEC()
{
  id v0 = *(void **)MEMORY[0x19F3ADAF0]("APSConnectionOverrideNamedDelegatePort", @"ApplePushService");
  objc_storeStrong((id *)&qword_1E944F380, v0);
}

void sub_19DB6A110(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v8 = a1[4];
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "setDesiredMaterialsForSession: sessionID: %@ %lu items, scheduling update, material types: %@", (uint8_t *)&v9, 0x20u);
  }
}

uint64_t sub_19DB6A300(uint64_t result, char a2, uint64_t a3, double a4)
{
  if ((a2 & 1) == 0) {
    return MEMORY[0x1F4181798](*(void *)(result + 32), sel_update, a3, a4);
  }
  return result;
}

void sub_19DB6AAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(IDSQRProtoMaterial);
  uint64_t v8 = objc_msgSend_materialDataByID(v3, v5, v6, v7);
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v10 = *(void **)(a1 + 32);
  __int16 v13 = objc_msgSend_stringWithFormat_(NSString, v11, @"desiredMaterialToSend: %@, materialDataByID: %@", v12, v3, v8);
  objc_msgSend_addObject_(v10, v14, (uint64_t)v13, v15);

  if (v8)
  {
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    v33[2] = sub_19DB6AC5C;
    v33[3] = &unk_1E5975C28;
    v33[4] = *(void *)(a1 + 40);
    id v16 = v3;
    id v34 = v16;
    id v17 = v9;
    id v35 = v17;
    id v36 = *(id *)(a1 + 48);
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v8, v18, (uint64_t)v33, v19);
    if (objc_msgSend_count(v17, v20, v21, v22))
    {
      objc_msgSend_setMaterialInfos_(v4, v23, (uint64_t)v17, v24);
      uint64_t v28 = objc_msgSend_forParticipantID(v16, v25, v26, v27);
      objc_msgSend_setReceiverParticipantId_(v4, v29, v28, v30);
      objc_msgSend_addObject_(*(void **)(a1 + 56), v31, (uint64_t)v4, v32);
    }
  }
}

void sub_19DB6AC5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v8 = a2;
  uint64_t v12 = objc_msgSend_type(v6, v9, v10, v11);
  uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 48);
  uint64_t v17 = objc_msgSend_requireSignature(*(void **)(a1 + 40), v14, v15, v16);
  objc_msgSend_buildMaterialInfoForDesiredMaterialData_materialType_materialID_sessionID_requireSign_(v5, v18, (uint64_t)v7, v19, v12, v8, v13, v17);
  uint64_t v21 = (char *)objc_claimAutoreleasedReturnValue();

  if (v21) {
    objc_msgSend_addObject_(*(void **)(a1 + 48), v21, (uint64_t)v21, v20);
  }
  else {
    objc_msgSend_addObject_(*(void **)(a1 + 56), 0, *(void *)(a1 + 40), v20);
  }
}

void sub_19DB6AD24(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "materialProtosForDesiredMaterials: %@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_19DB6B1DC(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    int v9 = 138412802;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "update: desired: %@, server: %@, delta: %@", (uint8_t *)&v9, 0x20u);
  }
}

void sub_19DB6B2A4(uint64_t a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_ServerMaterialExchange_oversize(IDSFoundationLog, a2, a3, a4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "update: materialsToSend: %@", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t IDSQRProtoUnAllocBindLeaveInfoReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if (v17 == 2)
      {
        double v30 = objc_alloc_init(IDSQRProtoMaterial);
        objc_storeStrong((id *)(a1 + 16), v30);
        if (!PBReaderPlaceMark() || (IDSQRProtoMaterialReadFrom((char *)v30, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 8;
          goto LABEL_23;
        case 2u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 24;
LABEL_23:
          uint64_t v20 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x300], 8) = v17;

          continue;
        case 3u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (2)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                BOOL v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_48;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_48:
          uint64_t v38 = 16;
          goto LABEL_53;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v23 = 0;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v23 |= (unint64_t)(v31 & 0x7F) << v27;
              if (v31 < 0)
              {
                v27 += 7;
                BOOL v14 = v28++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_52:
          uint64_t v38 = 32;
LABEL_53:
          *(_DWORD *)(a1 + v3_Block_object_dispose(&STACK[0x300], 8) = v23;
          continue;
        case 5u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 == -1 || v36 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
        *(void *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_55;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          uint64_t v34 = 0;
          goto LABEL_57;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v34 = 0;
      }
LABEL_57:
      *(unsigned char *)(a1 + 36) = v34 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *IDSEndpointTransparencyVerificationStateString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5975C90[a1 + 1];
  }
}

void sub_19DB6E4C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (IMShouldLog()) {
    IMLogString_V();
  }
}

void sub_19DB6E53C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (IMShouldLog()) {
    IMLogString_V();
  }
}

uint64_t sub_19DB6E838(uint64_t a1)
{
  BOOL v2 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEBUG, "URL Loading service disconnected", v10, 2u);
  }

  uint64_t v3 = os_log_shim_legacy_logging_enabled();
  if (v3)
  {
    sub_19DB6E4C8(v3, (uint64_t)v4, @"URL Loading service disconnected");
    sub_19DB6E53C(v7, v8, @"URL Loading service disconnected");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  return objc_msgSend__disconnected(*(void **)(a1 + 32), v4, v5, v6);
}

void sub_19DB6EAD8(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = IMGetXPCArrayFromDictionary();
  uint64_t v5 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote fetch iMessage account info request response:", buf, 2u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled();
  if (v6)
  {
    sub_19DB6E4C8(v6, v7, @"** RECEIVING remote fetch iMessage account info request response:");
    sub_19DB6E53C(v8, v9, @"** RECEIVING remote fetch iMessage account info request response:");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  unint64_t v10 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v16 = v4;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "                      iMessageAccountInfo: %@", buf, 0xCu);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled();
  if (v11)
  {
    sub_19DB6E4C8(v11, v12, @"                      iMessageAccountInfo: %@");
    sub_19DB6E53C(v13, v14, @"                      iMessageAccountInfo: %@");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_19DB6EE7C(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = IMGetXPCDictionaryFromDictionary();
  uint64_t v5 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote fetch remote accounts info request response:", buf, 2u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled();
  if (v6)
  {
    sub_19DB6E4C8(v6, v7, @"** RECEIVING remote fetch remote accounts info request response:");
    sub_19DB6E53C(v8, v9, @"** RECEIVING remote fetch remote accounts info request response:");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  unint64_t v10 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v16 = v4;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "                      Account Info Map: %@", buf, 0xCu);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled();
  if (v11)
  {
    sub_19DB6E4C8(v11, v12, @"                      Account Info Map: %@");
    sub_19DB6E53C(v13, v14, @"                      Account Info Map: %@");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

uint64_t sub_19DB6F19C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = IMGetXPCBoolFromDictionary();
  uint64_t v6 = objc_msgSend_registration(MEMORY[0x1E4F6C3B8], v3, v4, v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v2) {
      uint64_t v7 = @"YES";
    }
    int v9 = 138412290;
    unint64_t v10 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "Sent IDSRemoteCredentialCommandRequestDeviceInfo command to other side: %@", (uint8_t *)&v9, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_19DB6F4CC(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  return objc_msgSend_prefixedURI(a3, (const char *)a3, a4, a1);
}

void sub_19DB6F4D4(uint64_t a1, void *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v71 = v3;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "IDS Remote Credential Completion block for remote ID Status Query received response %@", buf, 0xCu);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled();
  if (v5)
  {
    sub_19DB6E4C8(v5, v6, @"IDS Remote Credential Completion block for remote ID Status Query received response %@");
    uint64_t v61 = v3;
    sub_19DB6E53C(v7, v8, @"IDS Remote Credential Completion block for remote ID Status Query received response %@");
    if (_IMWillLog())
    {
      uint64_t v61 = v3;
      _IMAlwaysLog();
    }
  }
  unsigned int v63 = IMGetXPCBoolFromDictionary();
  IMGetXPCDictionaryFromDictionary();
  int v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  int v62 = IMGetXPCStringFromDictionary();
  objc_msgSend_URIWithPrefixedURI_withServiceLoggingHint_(IDSURI, v10, (uint64_t)v62, v11, *(void *)(a1 + 32));
  double v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)kevent buf = 0;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "** RECEIVING remote ID Status V2 Query response:", buf, 2u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled();
  if (v13)
  {
    sub_19DB6E4C8(v13, v14, @"** RECEIVING remote ID Status V2 Query response:");
    sub_19DB6E53C(v15, v16, @"** RECEIVING remote ID Status V2 Query response:");
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  uint64_t v17 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = @"NO";
    if (v63) {
      uint64_t v18 = @"YES";
    }
    *(_DWORD *)kevent buf = 138412290;
    double v71 = v18;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "                      Query Result: %@", buf, 0xCu);
  }

  uint64_t v19 = os_log_shim_legacy_logging_enabled();
  if (v19)
  {
    char v21 = v63 ? @"YES" : @"NO";
    sub_19DB6E4C8(v19, v20, @"                      Query Result: %@");
    uint64_t v61 = v21;
    sub_19DB6E53C(v22, v23, @"                      Query Result: %@");
    if (_IMWillLog())
    {
      uint64_t v61 = v21;
      _IMAlwaysLog();
    }
  }
  uint64_t v24 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v71 = v64;
    _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "                      FromURI: %@", buf, 0xCu);
  }

  uint64_t v25 = os_log_shim_legacy_logging_enabled();
  if (v25)
  {
    sub_19DB6E4C8(v25, v26, @"                      FromURI: %@");
    uint64_t v61 = v64;
    sub_19DB6E53C(v27, v28, @"                      FromURI: %@");
    if (_IMWillLog())
    {
      uint64_t v61 = v64;
      _IMAlwaysLog();
    }
  }
  uint64_t v29 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)kevent buf = 138412290;
    double v71 = v9;
    _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "                      ID Status Updates: %@", buf, 0xCu);
  }

  uint64_t v30 = os_log_shim_legacy_logging_enabled();
  if (v30)
  {
    sub_19DB6E4C8(v30, v31, @"                      ID Status Updates: %@");
    uint64_t v61 = v9;
    sub_19DB6E53C(v32, v33, @"                      ID Status Updates: %@");
    if (_IMWillLog())
    {
      uint64_t v61 = v9;
      _IMAlwaysLog();
    }
  }
  uint64_t v34 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = *(__CFString **)(a1 + 32);
    *(_DWORD *)kevent buf = 138412290;
    double v71 = v35;
    _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "                      Service: %@", buf, 0xCu);
  }

  uint64_t v36 = os_log_shim_legacy_logging_enabled();
  if (v36)
  {
    sub_19DB6E4C8(v36, v37, @"                      Service: %@");
    uint64_t v61 = *(__CFString **)(a1 + 32);
    sub_19DB6E53C(v38, v39, @"                      Service: %@");
    if (_IMWillLog())
    {
      uint64_t v61 = *(__CFString **)(a1 + 32);
      _IMAlwaysLog();
    }
  }
  id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v41 = v9;
  uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v65, v43, v69, 16);
  if (v45)
  {
    uint64_t v47 = *(void *)v66;
    do
    {
      for (uint64_t i = 0; i != v45; ++i)
      {
        if (*(void *)v66 != v47) {
          objc_enumerationMutation(v41);
        }
        uint64_t v49 = *(void *)(*((void *)&v65 + 1) + 8 * i);
        double v51 = objc_msgSend_URIWithPrefixedURI_withServiceLoggingHint_(IDSURI, v44, v49, v46, *(void *)(a1 + 32), v61);
        if (v51)
        {
          double v53 = objc_msgSend_objectForKeyedSubscript_(v41, v50, v49, v52);
          objc_msgSend_setObject_forKey_(v40, v54, (uint64_t)v53, v55, v51);
        }
      }
      uint64_t v45 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v44, (uint64_t)&v65, v46, v69, 16);
    }
    while (v45);
  }

  uint64_t v56 = *(void *)(a1 + 40);
  int v60 = objc_msgSend_copy(v40, v57, v58, v59);
  (*(void (**)(uint64_t, void *, __CFString *, void, void, void))(v56 + 16))(v56, v60, v64, *(void *)(a1 + 32), v63, 0);
}

uint64_t sub_19DB6FD60(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = IMGetXPCBoolFromDictionary();
  uint64_t v6 = objc_msgSend_accountSync(MEMORY[0x1E4F6C3B8], v3, v4, v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v2) {
      uint64_t v7 = @"YES";
    }
    int v9 = 138412290;
    unint64_t v10 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "Sent IDSRemoteCredentialCommandAccountSyncMessage to paired device (success: %@)", (uint8_t *)&v9, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, v2, *(void *)(a1 + 32));
  }
  return result;
}

void sub_19DB7005C(void **a1, void *a2)
{
  *(void *)&v55[5] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = MEMORY[0x19F3AFA60]();
  uint64_t v8 = objc_msgSend_copy(a1[6], v5, v6, v7);
  int v9 = (void *)v8;
  if (v4 != MEMORY[0x1E4F145A8])
  {
    if (v8) {
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
    }
    goto LABEL_44;
  }
  if (v3 == (id)MEMORY[0x1E4F14528])
  {
    uint64_t v15 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "received XPC_ERROR_CONNECTION_INVALID", buf, 2u);
    }

    uint64_t v16 = os_log_shim_legacy_logging_enabled();
    if (!v16) {
      goto LABEL_16;
    }
    sub_19DB6E4C8(v16, v17, @"received XPC_ERROR_CONNECTION_INVALID");
    sub_19DB6E53C(v18, v19, @"received XPC_ERROR_CONNECTION_INVALID");
    if ((_IMWillLog() & 1) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v3 != (id)MEMORY[0x1E4F14520]) {
      goto LABEL_16;
    }
    unint64_t v10 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "received XPC_ERROR_CONNECTION_INTERRUPTED", buf, 2u);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled();
    if (!v11) {
      goto LABEL_16;
    }
    sub_19DB6E4C8(v11, v12, @"received XPC_ERROR_CONNECTION_INTERRUPTED");
    sub_19DB6E53C(v13, v14, @"received XPC_ERROR_CONNECTION_INTERRUPTED");
    if ((_IMWillLog() & 1) == 0) {
      goto LABEL_16;
    }
  }
  _IMAlwaysLog();
LABEL_16:
  uint64_t v20 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    char v21 = a1[4];
    *(_DWORD *)kevent buf = 134217984;
    *(void *)double v55 = v21;
    _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "Loaded disconnected for request: (%p)", buf, 0xCu);
  }

  uint64_t v22 = os_log_shim_legacy_logging_enabled();
  if (v22)
  {
    sub_19DB6E4C8(v22, v23, @"Loaded disconnected for request: (%p)");
    uint64_t v50 = a1[4];
    sub_19DB6E53C(v24, v25, @"Loaded disconnected for request: (%p)");
    if (_IMWillLog())
    {
      uint64_t v50 = a1[4];
      _IMAlwaysLog();
    }
  }
  uint64_t v26 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    uint64_t v27 = a1[4];
    *(_DWORD *)kevent buf = 138412290;
    *(void *)double v55 = v27;
    _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_ERROR, "Remote loader crashed for credential request: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    sub_19DB707C0();
    sub_19DB7080C();
    uint64_t v50 = a1[4];
    _IDSWarnV();
  }
  objc_msgSend__disconnected(a1[4], v28, v29, v30, v50);
  if (*((unsigned char *)a1[4] + 20) && *((int *)a1[4] + 4) <= 4)
  {
    uint64_t v31 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = *((_DWORD *)a1[4] + 4);
      *(_DWORD *)kevent buf = 67109376;
      v55[0] = v32;
      LOWORD(v55[1]) = 1024;
      *(_DWORD *)((char *)&v55[1] + 2) = 5;
      _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, " => Retrying... (%d/%d) retries", buf, 0xEu);
    }

    uint64_t v33 = os_log_shim_legacy_logging_enabled();
    if (v33)
    {
      sub_19DB6E4C8(v33, v34, @" => Retrying... (%d/%d) retries");
      sub_19DB6E53C(v35, v36, @" => Retrying... (%d/%d) retries");
      if (_IMWillLog()) {
        _IMAlwaysLog();
      }
    }
    uint64_t v37 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      int v38 = *((_DWORD *)a1[4] + 4);
      *(_DWORD *)kevent buf = 67109376;
      v55[0] = v38;
      LOWORD(v55[1]) = 1024;
      *(_DWORD *)((char *)&v55[1] + 2) = 5;
      _os_log_impl(&dword_19D9BE000, v37, OS_LOG_TYPE_ERROR, " => Retrying... (%d/%d) retries", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      sub_19DB707C0();
      sub_19DB7080C();
      _IDSWarnV();
    }
    uint64_t v39 = a1[4];
    int v40 = v39[4];
    void v39[4] = v40 + 1;
    dispatch_time_t v41 = dispatch_time(0, 2000000000 * v40);
    unint64_t v42 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DB70858;
    block[3] = &unk_1E5975D00;
    void block[4] = a1[4];
    id v52 = a1[5];
    id v53 = a1[6];
    dispatch_after(v41, v42, block);
  }
  else
  {
    double v43 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)kevent buf = 0;
      _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "Not retrying, calling completion block", buf, 2u);
    }

    uint64_t v44 = os_log_shim_legacy_logging_enabled();
    if (v44)
    {
      sub_19DB6E4C8(v44, v45, @"Not retrying, calling completion block");
      sub_19DB6E53C(v46, v47, @"Not retrying, calling completion block");
      if (_IMWillLog()) {
        _IMAlwaysLog();
      }
    }
    uint64_t v48 = (void (**)(void *, void))a1[6];
    if (v48) {
      v48[2](v48, 0);
    }
  }
LABEL_44:
  id v49 = self;
}

uint64_t sub_19DB707C0()
{
  return IMWarnString_V();
}

uint64_t sub_19DB7080C()
{
  return IMWarnString_V();
}

uint64_t sub_19DB70858(uint64_t a1, const char *a2, double a3)
{
  return objc_msgSend__sendMessage_withCompletionBlock_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a3, *(void *)(a1 + 48));
}

uint64_t IDSQRProtoChannelExperimentReadFrom(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
  double v5 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v8 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v6)) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        unint64_t v13 = *(void *)(a2 + v12);
        if (v13 == -1 || v13 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v8) + v13);
        *(void *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v9 += 7;
        BOOL v15 = v10++ >= 9;
        if (v15)
        {
          unint64_t v11 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(unsigned char *)(a2 + *v6)) {
        unint64_t v11 = 0;
      }
LABEL_14:
      uint64_t v17 = v11 & 7;
      if (v16 || v17 == 4) {
        break;
      }
      uint64_t v19 = (const char *)(v11 >> 3);
      switch((v11 >> 3))
      {
        case 0u:
          unsigned int v20 = 0;
          do
          {
            uint64_t v21 = *v4;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
              goto LABEL_66;
            }
            unint64_t v23 = v22 + 1;
            int v24 = *(char *)(*(void *)(a2 + *v8) + v22);
            *(void *)(a2 + v21) = v23;
            if ((v24 & 0x80000000) == 0) {
              break;
            }
          }
          while (v20++ <= 8);
          continue;
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          while (2)
          {
            uint64_t v30 = *v4;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
            }
            else
            {
              char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
              *(void *)(a2 + v3sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                BOOL v15 = v28++ >= 9;
                if (v15)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v6)) {
            LODWORD(v29) = 0;
          }
LABEL_56:
          uint64_t v47 = 8;
          goto LABEL_65;
        case 2u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 4sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 1;
          *(unsigned char *)(a1 + 48) |= 8u;
          while (2)
          {
            uint64_t v36 = *v4;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v5))
            {
              *(unsigned char *)(a2 + *v6) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v8) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v15 = v34++ >= 9;
                if (v15)
                {
                  uint64_t v35 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v6)) {
            uint64_t v35 = 0;
          }
LABEL_60:
          *(unsigned char *)(a1 + 44) = v35 != 0;
          continue;
        case 3u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 4sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 2;
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 32;
          goto LABEL_51;
        case 4u:
          objc_msgSend_clearOneofValuesForTestValue((void *)a1, v19, v17, a3);
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 4sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = 3;
          *(unsigned char *)(a1 + 48) |= 2u;
          break;
        case 5u:
          uint64_t v39 = PBReaderReadString();
          uint64_t v40 = 16;
LABEL_51:
          uint64_t v46 = *(void **)(a1 + v40);
          *(void *)(a1 + v4sub_19DB4C750((uint64_t)&qword_1E944EFA0, 0) = v39;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v43 = *v4;
        unint64_t v44 = *(void *)(a2 + v43);
        if (v44 == -1 || v44 >= *(void *)(a2 + *v5)) {
          break;
        }
        char v45 = *(unsigned char *)(*(void *)(a2 + *v8) + v44);
        *(void *)(a2 + v43) = v44 + 1;
        v29 |= (unint64_t)(v45 & 0x7F) << v41;
        if ((v45 & 0x80) == 0) {
          goto LABEL_62;
        }
        v41 += 7;
        BOOL v15 = v42++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v6) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v6)) {
        LODWORD(v29) = 0;
      }
LABEL_64:
      uint64_t v47 = 24;
LABEL_65:
      *(_DWORD *)(a1 + v47) = v29;
LABEL_66:
      ;
    }
    while (*(void *)(a2 + *v4) < *(void *)(a2 + *v5));
  }
  return *(unsigned char *)(a2 + *v6) == 0;
}

void sub_19DB73AF8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73BAC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73C60(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73D08(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73DA0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73E38(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19DB73EE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id IDSRealTimeContext()
{
  if (qword_1E944F168 != -1) {
    dispatch_once(&qword_1E944F168, &unk_1EEFCD8F8);
  }
  id v0 = (void *)qword_1E944F170;
  return v0;
}

uint64_t sub_19DB7402C()
{
  uint64_t v0 = nw_context_create();
  int v1 = (void *)qword_1E944F170;
  qword_1E944F170 = v0;

  nw_context_set_isolate_protocol_stack();
  nw_context_set_scheduling_mode();
  uint64_t v2 = qword_1E944F170;
  return MEMORY[0x1F40F2D48](v2);
}

BOOL IDSQRProtoH3EndToEndChannelRegisterRequestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfo);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || (IDSQRProtoH3EndToEndChannelRegisterE2EChannelInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_19DB74FC8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E944F3E0) {
    uint64_t v0 = "had salt from daemon, value changed";
  }
  else {
    uint64_t v0 = "just recevied salt from daemon";
  }
  int v1 = 136315138;
  uint64_t v2 = v0;
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "IDSLoggableDescriptionSalt changed - %s", (uint8_t *)&v1, 0xCu);
}

void sub_19DB75068(char a1, char a2, os_log_t log)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = @"YES";
  if (byte_1EB2BB820) {
    uint64_t v4 = @"YES";
  }
  else {
    uint64_t v4 = @"NO";
  }
  if (a1) {
    double v5 = @"YES";
  }
  else {
    double v5 = @"NO";
  }
  int v6 = 138412802;
  double v7 = v4;
  __int16 v8 = 2112;
  unsigned int v9 = v5;
  if ((a2 & 1) == 0) {
    uint64_t v3 = @"NO";
  }
  __int16 v10 = 2112;
  uint64_t v11 = v3;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "Checked bag access permission -- allowed? %@ {hasMachAccess: %@, hasEntitlements: %@}", (uint8_t *)&v6, 0x20u);
}

void sub_19DB75128(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "_processAllowedToLoadBag - Unable to get audit token!", v1, 2u);
}

void sub_19DB7516C()
{
  __assert_rtn("IDSByteBufferInitForWriteWithAllocatedSpace", "IDSFieldReaderWriter.m", 17, "buffer != NULL");
}

void sub_19DB75198()
{
  __assert_rtn("IDSByteBufferInitForWrite", "IDSFieldReaderWriter.m", 28, "buffer != NULL");
}

void sub_19DB751C4()
{
  __assert_rtn("IDSByteBufferInitForRead", "IDSFieldReaderWriter.m", 42, "buffer != NULL");
}

void sub_19DB751F0()
{
  __assert_rtn("IDSByteBufferReallocateBuffer", "IDSFieldReaderWriter.m", 53, "buffer != NULL");
}

void sub_19DB7521C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB75258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB75294()
{
  __assert_rtn("IDSByteBufferWriteField", "IDSFieldReaderWriter.m", 78, "buffer != NULL");
}

void sub_19DB752C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB752FC()
{
  __assert_rtn("IDSByteBufferReadField", "IDSFieldReaderWriter.m", 102, "buffer != NULL");
}

void sub_19DB75328()
{
  __assert_rtn("IDSByteBufferRelease", "IDSFieldReaderWriter.m", 127, "buffer != NULL");
}

void sub_19DB75354(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v1, v2, "Missing kLegacyFullIdentityKey - failed to create IDSMPFullDeviceIdentityContainer from data {dict: %{private}@, dataRepresentation: %{private}@}", (void)v3, DWORD2(v3));
}

void sub_19DB753C4(uint64_t *a1)
{
  if (a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  LODWORD(v4) = 138543619;
  *(void *)((char *)&v4 + 4) = v1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v2, v3, "Failed to create IDSMPFullDeviceIdentityContainer from parameters -- Failed to deserialize IDSMPFullDeviceIdentityContainer {error: %{public}@, dict: %{private}@}", (void)v4, DWORD2(v4));
}

void sub_19DB75444()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19D9F16C8();
  _os_log_error_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_ERROR, "Missing legacyFullIdentity - Fail to create IDSMPFullDeviceIdentityContainer {legacyFullIdentity: %{private}@, ngmFullDeviceIdentity: %{private}@}", v1, 0x16u);
}

void sub_19DB754B8()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  int v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F15B0(&dword_19D9BE000, v7, v8, "Failed to get publicLegacyIdentity - Failed {error: %{public}@, deviceIdentityContainer: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB75544()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  int v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F15B0(&dword_19D9BE000, v7, v8, "Failed to get publicNGMIdentity - Failed to create publicDeviceIdentityContainer {error: %{public}@, deviceIdentityContainer: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB755D0(uint64_t *a1)
{
  if (a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  LODWORD(v4) = 138543619;
  *(void *)((char *)&v4 + 4) = v1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v2, v3, "Failed to serialize legacyFullIdentity - failed to serialize IDSMPFullDeviceIdentityContainer {error: %{public}@, container: %{private}@}", (void)v4, DWORD2(v4));
}

void sub_19DB75650(uint64_t *a1)
{
  if (a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  LODWORD(v4) = 138543619;
  *(void *)((char *)&v4 + 4) = v1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v2, v3, "Failed to serialize - failed to serialize IDSMPFullDeviceIdentityContainer {error: %{public}@, container: %{private}@}", (void)v4, DWORD2(v4));
}

void sub_19DB756D0(void *a1, const char *a2, uint64_t a3, double a4)
{
  long long v4 = objc_msgSend_debugDescription(a1, a2, a3, a4);
  sub_19D9F16EC(&dword_19D9BE000, v5, v6, "Called unseal message without identifier -- This should never happen {container: %{private}@}", v7, v8, v9, v10, 3u);
}

void sub_19DB75758()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  uint64_t v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F15B0(&dword_19D9BE000, v7, v8, "Missing ngm signing identity - fail to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB757E4()
{
  sub_19D9F16E0();
  uint64_t v4 = objc_msgSend_debugDescription(v0, v1, v2, v3);
  sub_19D9F15F0();
  sub_19D9F15B0(&dword_19D9BE000, v5, v6, "Missing ngm encrypting identity - fail to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7, v8, v9, v10, v11);
}

void sub_19DB75870()
{
  sub_19D9F1690();
  uint64_t v5 = objc_msgSend_ngmVersion(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_ngmVersion(v0, v6, v7, v8);
  sub_19D9F1638();
  sub_19D9F172C(&dword_19D9BE000, v10, v11, "Failed  to ngm unseal message due to mismatching versions {encryptingIdentity.ngmVersion: %{public}@, signingIdentity.ngmVersion: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v12, v13, v14, v15, v16);
}

void sub_19DB75918()
{
  sub_19D9F1690();
  double v4 = objc_msgSend_debugDescription(*(void **)(v1 + 40), (const char *)v1, v2, v3);
  double v8 = objc_msgSend_debugDescription(*(void **)(v0 + 48), v5, v6, v7);
  sub_19D9F1670();
  sub_19D9F170C(&dword_19D9BE000, v9, v10, "MessageProtection failed to decrypt with ngm identities - fail to unseal message {error: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v11, v12, v13, v14, v15);
}

void sub_19DB759BC()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  uint64_t v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F1618(&dword_19D9BE000, v7, v8, "Missing legacy signing identity - failed to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB75A48()
{
  sub_19D9F16E0();
  uint64_t v4 = objc_msgSend_debugDescription(v0, v1, v2, v3);
  sub_19D9F15F0();
  sub_19D9F1618(&dword_19D9BE000, v5, v6, "Missing legacy encrypting identity - failed to unseal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7, v8, v9, v10, v11);
}

void sub_19DB75AD4()
{
  sub_19D9F1690();
  uint64_t v4 = objc_msgSend_debugDescription(*(void **)(v1 + 32), (const char *)v1, v2, v3);
  uint64_t v8 = objc_msgSend_debugDescription(*(void **)(v0 + 40), v5, v6, v7);
  sub_19D9F1670();
  sub_19D9F170C(&dword_19D9BE000, v9, v10, "MessageProtection failed to decrypt with ngm identities - fail to unseal paddy message {error: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v11, v12, v13, v14, v15);
}

void sub_19DB75B78()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19D9F16C8();
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_ERROR, "Missing legacyPublicIdentity - Failed to create IDSMPPublicDeviceIdentityContainer {legacyPublicIdentity: %{private}@, ngmPublicDeviceIdentity: %{private}@, ngmVersion: %{public}@}", v2, 0x20u);
}

void sub_19DB75BFC(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v1, v2, "Missing kLegacyFullIdentityKey - failed to create IDSMPPublicDeviceIdentityContainer from data {dict: %{private}@, dataRepresentation: %{private}@}", (void)v3, DWORD2(v3));
}

void sub_19DB75C6C()
{
  sub_19D9F16A0();
  os_log_t v2 = (void *)sub_19D9F1664(v0, v1);
  uint64_t v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F15B0(&dword_19D9BE000, v7, v8, "Missing ngm signing identity - fail to seal paddy message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB75CF8()
{
  sub_19D9F16E0();
  uint64_t v4 = objc_msgSend_debugDescription(v0, v1, v2, v3);
  sub_19D9F15F0();
  sub_19D9F15B0(&dword_19D9BE000, v5, v6, "Missing ngm encrypting identity - fail to seal paddy message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7, v8, v9, v10, v11);
}

void sub_19DB75D84()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  uint64_t v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F1618(&dword_19D9BE000, v7, v8, "Missing legacy signing identity - fail to seal message {publicContainer: %{private}@, signingContainer: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB75E10()
{
  sub_19D9F16E0();
  uint64_t v4 = objc_msgSend_debugDescription(v0, v1, v2, v3);
  sub_19D9F15F0();
  sub_19D9F1618(&dword_19D9BE000, v5, v6, "Missing legacy encrypting identity - fail to seal message {publicContaienr: %{private}@, signingContainer: %{private}@}", v7, v8, v9, v10, v11);
}

void sub_19DB75E9C()
{
  sub_19D9F16A0();
  uint64_t v2 = (void *)sub_19D9F1664(v0, v1);
  uint64_t v6 = objc_msgSend_debugDescription(v2, v3, v4, v5);
  sub_19D9F1598();
  sub_19D9F15B0(&dword_19D9BE000, v7, v8, "Missing ngm signing identity - fail to seal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v9, v10, v11, v12, v13);
}

void sub_19DB75F28()
{
  sub_19D9F16E0();
  uint64_t v4 = objc_msgSend_debugDescription(v0, v1, v2, v3);
  sub_19D9F15F0();
  sub_19D9F15B0(&dword_19D9BE000, v5, v6, "Missing ngm encrypting identity - fail to seal message {encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v7, v8, v9, v10, v11);
}

void sub_19DB75FB4()
{
  sub_19D9F1690();
  uint64_t v5 = objc_msgSend_ngmVersion(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_ngmVersion(v0, v6, v7, v8);
  sub_19D9F1638();
  sub_19D9F172C(&dword_19D9BE000, v10, v11, "Failed  to ngm seal message due to mismatching versions {encryptingIdentity.ngmVersion: %{public}@, signingIdentity.ngmVersion: %{public}@, encryptingIdentity: %{private}@, signingIdentity: %{private}@}", v12, v13, v14, v15, v16);
}

void sub_19DB7605C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to serialize - failed to serialize IDSMPFullDeviceIdentityContainer {container: %{private}@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB760D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7610C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB76144(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_19D9F1608();
  sub_19D9F15D0(&dword_19D9BE000, v1, v2, "Failed to markForStateReset {container: %{private}@, signingIdentity: %{private}@}", (void)v3, DWORD2(v3));
}

void sub_19DB761B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB761EC()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB76274()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB762FC()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB76384(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "BlastDoor: Disabled for framing messages", (uint8_t *)&v3, 0x16u);
}

void sub_19DB7640C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "IDSBlastDoorConnectionHelper: Missing keys in payload received from blastdoor {%@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB76484()
{
  __assert_rtn("IDSOSDataChannelSync", "IDSOSDataChannel.m", 353, "numPending == NULL || *numPending == 0");
}

void sub_19DB764B0()
{
  __assert_rtn("IDSOSDataChannelWrite", "IDSOSDataChannel.m", 281, "pendingTx != NULL");
}

void sub_19DB764DC()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 144, "nil != self->_reallocateToken");
}

void sub_19DB76508()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 149, "nil != self->_sessionId");
}

void sub_19DB76534()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 154, "nil != self->_clientAddress");
}

void sub_19DB76560()
{
  __assert_rtn("-[IDSQRProtoReallocateIndication writeTo:]", "IDSQRProtoReallocateIndication.m", 159, "nil != self->_serverAddress");
}

void sub_19DB7658C()
{
  __assert_rtn("-[IDSQRProtoMaterialInfo writeTo:]", "IDSQRProtoMaterialInfo.m", 122, "nil != self->_materialId");
}

void sub_19DB765B8()
{
  __assert_rtn("-[IDSQRProtoMaterialInfo writeTo:]", "IDSQRProtoMaterialInfo.m", 131, "nil != self->_materialContent");
}

void sub_19DB765E4()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB7666C()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB766F8()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB76780(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB767EC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_19DB76864(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_19DB768DC()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "failed to create default listener", v2, v3, v4, v5, v6);
}

void sub_19DB76910()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "failed to create cellular listener", v2, v3, v4, v5, v6);
}

void sub_19DB76944(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB769B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB76A1C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Invalid PSK salt size", v2, v3, v4, v5, v6);
}

void sub_19DB76A50()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Invalid session key size", v2, v3, v4, v5, v6);
}

void sub_19DB76A84()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "randomSalt generation failed", v2, v3, v4, v5, v6);
}

void sub_19DB76AB8()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "QUIC PSK is nil", v2, v3, v4, v5, v6);
}

void sub_19DB76AEC()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "TCP PSK is nil", v2, v3, v4, v5, v6);
}

void sub_19DB76B20()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localAddress!", v2, v3, v4, v5, v6);
}

void sub_19DB76B54()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid remoteAddress!", v2, v3, v4, v5, v6);
}

void sub_19DB76B88()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid sessionID!", v2, v3, v4, v5, v6);
}

void sub_19DB76BBC()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localQUICConnectionID!", v2, v3, v4, v5, v6);
}

void sub_19DB76BF0()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid localEndpoint!", v2, v3, v4, v5, v6);
}

void sub_19DB76C24()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection due to invalid remoteEndpoint!", v2, v3, v4, v5, v6);
}

void sub_19DB76C58()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Can not peel Off Reliable Unicast Connection, can not find the base NW Connection!", v2, v3, v4, v5, v6);
}

void sub_19DB76C8C(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 64)) {
    uint64_t v3 = "QR";
  }
  else {
    uint64_t v3 = "UDP";
  }
  int v4 = 136315394;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = v2;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "%s connection not found for %@", (uint8_t *)&v4, 0x16u);
}

void sub_19DB76D30(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB76DA0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a2 + 40);
  int v4 = 134218242;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "listener %p failed to start (%@)", (uint8_t *)&v4, 0x16u);
}

void sub_19DB76E30(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 134218498;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  __int16 v8 = 2112;
  uint64_t v9 = v3;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "listener %p got unexpected state: %u, %@", (uint8_t *)&v4, 0x1Cu);
}

void sub_19DB76EC8()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB76F30()
{
  sub_19DA175A8();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for payload: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
}

void sub_19DB76F9C()
{
  sub_19DA175A8();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for STUN_ADDRESS_FAMILY_IPv4: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
}

void sub_19DB77008()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sin6_port: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77070()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sin6_addr.s6_addr: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB770D8()
{
  sub_19DA175A8();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for STUN_ADDRESS_FAMILY_IPv6: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
}

void sub_19DB77144()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sa_in6->sin6_port: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB771AC()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sin6_addr.s6_addr: remainingLength: %zd < 16", v2, v3, v4, v5, v6);
}

void sub_19DB77214()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sockaddr_in: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB7727C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunAddressAttribute: for sin_addr.s_addr: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB772E4()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunXORAddressAttribute: for IPv6_v4Mapped cookieWithTransactionID: remainingLength: %zd < 16", v2, v3, v4, v5, v6);
}

void sub_19DB7734C()
{
  sub_19DA175A8();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunXORAddressAttribute: for IPv4 remainingLength: %zd < 1", v2, v3, v4, v5, v6);
}

void sub_19DB773B8()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunXORAddressAttribute: for IPv4 STUN_MAGIC_COOKIE: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77420()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunXORAddressAttribute: for IPv4 STUN_MAGIC_COOKIE: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77488()
{
  sub_19DA1758C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT8Attribute, for type: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB774F4()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT8Attribute, for length: remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB7755C()
{
  sub_19DA175A8();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT8Attribute, for payload: remainingLength: %zd < 1", v2, v3, v4, v5, v6);
}

void sub_19DB775C8()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT8Attribute, for padding: remainingLength: %zd < 3", v2, v3, v4, v5, v6);
}

void sub_19DB77630()
{
  sub_19DA1758C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT16Attribute: for type: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
}

void sub_19DB7769C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT16Attribute: for length: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77704()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT16Attribute: for payload: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
}

void sub_19DB7776C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT16Attribute: for padding: remainingLength: %zd, < 2", v2, v3, v4, v5, v6);
}

void sub_19DB777D4()
{
  sub_19DA1758C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT32Attribute: for header, remainingLength = %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77840()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT32Attribute: remainingLength = %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB778A8()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT32Attribute: remainingLength = %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77910()
{
  sub_19DA1758C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT64Attribute: for header, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB7797C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUINT64Attribute:  remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB779E4()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  __int16 v2 = 2048;
  uint64_t v3 = 8;
  _os_log_error_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_ERROR, "writeStunUINT64Attribute:  remainingLength: %zd < %lu", v1, 0x16u);
}

void sub_19DB77A68()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunBinaryDataAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77AD0()
{
  sub_19DA17574();
  sub_19DA17528(&dword_19D9BE000, v0, v1, "writeStunBinaryDataAttribute: for payload: remainingLength: %zd < payloadLen: %d", v2, v3);
}

void sub_19DB77B38()
{
  sub_19DA17574();
  sub_19DA17528(&dword_19D9BE000, v0, v1, "writeStunBinaryDataAttribute: for padding: remainingLength: %zd < padLen: %d", v2, v3);
}

void sub_19DB77BA0()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunErrorCodeAttribute: for header, remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77C08()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunErrorCodeAttribute: for header, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77C70()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunErrorCodeAttribute: for errorCode, remainingLength: %zd < 2", v2, v3, v4, v5, v6);
}

void sub_19DB77CD8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LODWORD(v3) = 134218240;
  HIDWORD(v3) = a2;
  sub_19DA17528(&dword_19D9BE000, a2, a3, "writeStunErrorCodeAttribute: for errorCode length, remainingLength: %zd < %d", v3, HIDWORD(a2));
}

void sub_19DB77D54()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunErrorCodeAttribute: for padLen, remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77DBC()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "writeStunUnknownAttribute: for header: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB77E24(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 2048;
  *(void *)((char *)&v3 + 2) = a2;
  sub_19DA17528(&dword_19D9BE000, a2, a3, "writeStunUnknownAttribute: for payload, uint64_t i = %d: remainingLength: %zd < 4", 67109376, (size_t)v3);
}

void sub_19DB77E9C()
{
  sub_19DA17574();
  sub_19DA17528(&dword_19D9BE000, v0, v1, "writeStunUnknownAttribute: for padding: remainingLength: %zd < padLen: %d", v2, v3);
}

void sub_19DB77F04()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: bufferLeuint64_t n = %d < 2, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB77F6C()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_19DA17560();
  uint64_t v3 = 12;
  sub_19DA17548(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: [nsTransactionID length]: %d < STUN_TRANSACTIONID_LEN = %ld, return NO", v2);
}

void sub_19DB77FE0()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: IPv6: bufferLen: %d < 16, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB78048()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: IPv6: bufferLen: %d < 2, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB780B0()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: IPv4: bufferLen: %d < 2, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB78118()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "readStunXORAddressAttribute: IPv4: bufferLen: %d < 4, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB78180(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 67109376;
  v3[1] = 0;
  __int16 v4 = 2048;
  uint64_t v5 = 1;
  sub_19DA17548(&dword_19D9BE000, a1, a3, "bufferLeuint64_t n = %d < sizeof(uint16_t)=%lu, return NO", (uint8_t *)v3);
}

void sub_19DB78204()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_19DA17560();
  uint64_t v3 = 2;
  sub_19DA17548(&dword_19D9BE000, v0, v1, "bufferLeuint64_t n = %d < sizeof(uint16_t)=%lu, return NO", v2);
}

void sub_19DB78278()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_19DA17560();
  uint64_t v3 = 4;
  sub_19DA17548(&dword_19D9BE000, v0, v1, "bufferLeuint64_t n = %d < sizeof(uint32_t)=%lu, return NO", v2);
}

void sub_19DB782EC()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_19DA17560();
  uint64_t v3 = 8;
  sub_19DA17548(&dword_19D9BE000, v0, v1, "bufferLeuint64_t n = %d, < sizeof(uint64_t): %lu, return NO", v2);
}

void sub_19DB78360(int *a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  v4[0] = 67109376;
  v4[1] = a2;
  __int16 v5 = 1024;
  int v6 = v3;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "bufferLeuint64_t n = %d < *attrLeuint64_t n = %d, return NO", (uint8_t *)v4, 0xEu);
}

void sub_19DB783EC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19DA0ECD0(&dword_19D9BE000, a1, a3, "bufferLeuint64_t n = %d < 1, couldn't read errorClass, return NO", a5, a6, a7, a8, 0);
}

void sub_19DB7845C()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "reasonLeuint64_t n = %d, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB784C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19DA0ECD0(&dword_19D9BE000, a1, a3, "bufferLeuint64_t n = %d < 1, couldn't read errorNumber, return NO", a5, a6, a7, a8, 0);
}

void sub_19DB78534()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "bufferLeuint64_t n = %d < 2, return NO", v2, v3, v4, v5, v6);
}

void sub_19DB7859C()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78624()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB786AC()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78734()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB787BC()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78844()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 94, "nil != self->_initializationVector");
}

void sub_19DB78870()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 99, "nil != self->_cipherText");
}

void sub_19DB7889C()
{
  __assert_rtn("-[PSIDSLinkHBHEncryptedPayload writeTo:]", "PSIDSLinkHBHEncryptedPayload.m", 104, "nil != self->_authenticationTag");
}

void sub_19DB788C8(void *a1)
{
  objc_end_catch();
}

void sub_19DB788EC(void *a1)
{
  objc_end_catch();
}

void sub_19DB7891C(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "QUIC PSK SecRandomCopyBytes failed with result %d.", (uint8_t *)v2, 8u);
}

void sub_19DB78994()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78A18()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78A9C()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78B20()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78BA4()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78C28()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78CAC()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB78D30()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB78DB8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB78E40()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB78EC8(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4 = objc_msgSend_requestID(a1, a2, a3, a4);
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v5, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v6, v7, v8, v9, 2u);
}

void sub_19DB78F68()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB78FF0()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79078()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB790FC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79184()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7920C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79294()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7931C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB793A4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7942C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB794B4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7953C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB795C4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7964C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB796D4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7975C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB797E4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7986C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB798F4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7997C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79A04()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79A8C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79B14()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79B9C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79C24()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79CAC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79D34()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79DBC()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB79E40()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79EC8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79F50()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB79FD8()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB7A05C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "_prepareOutgoingChannelData: couldn't find actual candidate pair for %@", v2, v3, v4, v5, v6);
}

void sub_19DB7A0C4()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "_prepareOutgoingChannelData: IDSHBHEncryptDataWithKey failed!", v2, v3, v4, v5, v6);
}

void sub_19DB7A0F8()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "_prepareOutgoingChannelData: encryptedData length is greater than maxBufferLength!", v2, v3, v4, v5, v6);
}

void sub_19DB7A12C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "_prepareOutgoingChannelData: useExtChHdr is not supported for virtual candidate pair %@", v2, v3, v4, v5, v6);
}

void sub_19DB7A194()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A21C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A2A4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A32C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A3B4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A43C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A4C4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A54C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A5D4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A65C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A6E4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A76C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A7F4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A87C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A904()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7A98C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AA14()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AA9C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AB24()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7ABAC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AC34()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7ACBC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AD44()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7ADCC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AE54()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AEDC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AF64()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7AFEC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B074()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B0FC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B184()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B20C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B294()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "startLinkProbing: invalid probing interval, return", v2, v3, v4, v5, v6);
}

void sub_19DB7B2C8()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB7B34C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "sendStatsRequestForClient: couldn't find candidatePair for linkID: %@", v2, v3, v4, v5, v6);
}

void sub_19DB7B3B4()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "linkID %@ is not relay link, return", v2, v3, v4, v5, v6);
}

void sub_19DB7B41C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "sendStatsRequestForClient: invalid request", v2, v3, v4, v5, v6);
}

void sub_19DB7B450()
{
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB7B4D4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B55C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B5E4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B66C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B6F4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7B77C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "didReceivePacket: IDSHBHDecryptDataWithKey failed!", v2, v3, v4, v5, v6);
}

void sub_19DB7B7B0()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "invalid proto message received", v2, v3, v4, v5, v6);
}

void sub_19DB7B7E4(void *a1, char *a2, double a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = objc_msgSend_base64EncodedStringWithOptions_(a1, a2, 33, a3);
  sub_19DA1751C();
  _os_log_error_impl(&dword_19D9BE000, (os_log_t)a2, OS_LOG_TYPE_ERROR, "failed to parse incoming proto message %@", v5, 0xCu);
}

void sub_19DB7B880()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "invalid message %@ received", v2, v3, v4, v5, v6);
}

void sub_19DB7B8E8(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_candidatePairToken(0, a3, a4, a1);
  sub_19DA88FD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v5, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v6, v7, v8, v9, 2u);
}

void sub_19DB7B988()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BA10()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BA98()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BB20()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BBA8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BC30()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BCB8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BD40()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BDC8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BE50()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BED8()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7BF60()
{
  sub_19DA93AF8();
  sub_19DA93B10(&dword_19D9BE000, v0, v1, "Cached push token: %@   Environment: %@");
}

void sub_19DB7BFC8()
{
  sub_19DA93AF8();
  sub_19DA93B10(&dword_19D9BE000, v0, v1, "IDSPushHandler: Error: Diffusing payload {%@} failed with: %@");
}

void sub_19DB7C030()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys failed due to invalid parameters.", v2, v3, v4, v5, v6);
}

void sub_19DB7C064()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys failed due to invalid session-id.", v2, v3, v4, v5, v6);
}

void sub_19DB7C098()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys CCDeriveKey failed with error %d.", v2, v3, v4, v5, v6);
}

void sub_19DB7C100()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "IDSLinkHBHDeriveHKDFSha256Keys CCKDFParametersCreateHkdf failed with error %d.", v2, v3, v4, v5, v6);
}

void sub_19DB7C168()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "IDSHBHEncryptDataWithKey CCCryptorGCMOneshotEncrypt failed with status %d.", v2, v3, v4, v5, v6);
}

void sub_19DB7C1D0()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "IDSHBHEncryptDataWithKey SecRandomCopyBytes failed with result %d.", v2, v3, v4, v5, v6);
}

void sub_19DB7C238(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "IDSHBHEncryptDataWithKey failed due to invalid parameters. derivedKey = %p, plaintext = %p", (uint8_t *)&v3, 0x16u);
}

void sub_19DB7C2C0()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "IDSHBHDecryptDataWithKey failed to parse protobuf with encryptedData.", v2, v3, v4, v5, v6);
}

void sub_19DB7C2F4()
{
  sub_19DA1759C();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "IDSHBHDecryptDataWithKey CCCryptorGCMOneshotDecrypt failed with status %d.", v2, v3, v4, v5, v6);
}

void sub_19DB7C35C(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4 = objc_msgSend_authenticationTag(a1, a2, a3, a4);
  objc_msgSend_length(v4, v5, v6, v7);
  sub_19DA9A46C();
  sub_19DA9A480(&dword_19D9BE000, v8, v9, "IDSHBHDecryptDataWithKey Authentication Tag length should be %u bytes, not %lu bytes.", v10, v11, v12, v13, 0);
}

void sub_19DB7C3EC(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4 = objc_msgSend_initializationVector(a1, a2, a3, a4);
  objc_msgSend_length(v4, v5, v6, v7);
  sub_19DA9A46C();
  sub_19DA9A480(&dword_19D9BE000, v8, v9, "IDSHBHDecryptDataWithKey Initialization Vector length should be %u bytes, not %lu bytes.", v10, v11, v12, v13, 0);
}

void sub_19DB7C47C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "IDSHBHDecryptDataWithKey failed due to invalid parameters.", v2, v3, v4, v5, v6);
}

float sub_19DB7C4B0(unsigned __int16 *a1, NSObject *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  v6[0] = 67109888;
  v6[1] = v2;
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 1024;
  int v10 = v4;
  __int16 v11 = 2048;
  uint64_t v12 = 20;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to add attribute type %d len %d valueType %d, already has max number of attributes %ld", (uint8_t *)v6, 0x1Eu);
  return result;
}

void sub_19DB7C554(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7C5C4()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "write: for type: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB7C62C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "write: for STUN_MAGIC_COOKIE: remainingLength: %zd < 4", v2, v3, v4, v5, v6);
}

void sub_19DB7C694()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "write: for STUN_TRANSACTIONID_LEN: remainingLength: %zd < STUN_TRANSACTIONID_LEN", v2, v3, v4, v5, v6);
}

void sub_19DB7C6FC(int *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = 134218240;
  uint64_t v5 = a2;
  __int16 v6 = 1024;
  int v7 = v3;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "remainingLength: %zd < attributeLen: %d", (uint8_t *)&v4, 0x12u);
}

void sub_19DB7C788(int a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109376;
  v2[1] = a1;
  __int16 v3 = 2048;
  uint64_t v4 = 20;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "write: ptr - outputBuffer: %d < STUN_HEADER_LEN: %ld", (uint8_t *)v2, 0x12u);
}

void sub_19DB7C810(unsigned __int16 *a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "write: len: %d < 1", (uint8_t *)v3, 8u);
}

void sub_19DB7C88C()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_ERROR, "write: invalid outBuf %p %p", v2, 0x16u);
}

void sub_19DB7C910()
{
  sub_19DA0ECC4();
  sub_19D9E9BDC(&dword_19D9BE000, v0, v1, "Process is trying to use NGMFullDeviceIdentity but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
}

void sub_19DB7C944()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7C9D0()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CA5C()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CAE8()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CB74()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CC00()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CC8C()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CD18()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CDA4()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CE30()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CEBC()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CF48()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7CFD4()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D060()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D0EC()
{
  sub_19DA0ECC4();
  sub_19D9E9BDC(&dword_19D9BE000, v0, v1, "Process is trying to use NGMPublicDeviceIdentity but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
}

void sub_19DB7D120()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D1AC()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D238()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D2C4()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D350()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D3DC()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D468()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D4F4()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D580()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D60C()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D698()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D724()
{
  sub_19DA0ECC4();
  sub_19D9E9BDC(&dword_19D9BE000, v0, v1, "Process is trying to use NGMProtocolVersionClassRef but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
}

void sub_19DB7D758()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D7E4()
{
  uint64_t v0 = objc_opt_class();
  id v1 = sub_19DA9F85C(v0);
  sub_19D9F1618(&dword_19D9BE000, v2, v3, "%s on %@ should never be called!", v4, v5, v6, v7, 2u);
}

void sub_19DB7D870()
{
  sub_19DA0ECC4();
  sub_19D9E9BDC(&dword_19D9BE000, v0, v1, "Process is trying to use NGMMessageHasher but does not have MessageProtection linked!", v2, v3, v4, v5, v6);
}

void sub_19DB7D8A4(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 138412546;
  uint64_t v2 = a1;
  __int16 v3 = 2080;
  uint64_t v4 = "_sessionIDToSlicingBitMask";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v1, 0x16u);
}

void sub_19DB7D938(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Deprecated -objectForKey called on IDSMessageContext! {key : %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7D9B0()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelUnRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelUnRegisterIndication.m", 79, "nil != self->_e2eChannelUuid");
}

void sub_19DB7D9DC()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19D9F16C8();
  sub_19DAA6678(&dword_19D9BE000, v0, v1, "Failed to get data protection class from fullLegacyIdentity {error: %{public}@, fullIdentity: %{private}@}", v2);
}

void sub_19DB7DA48()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19D9F16C8();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_ERROR, "Failed to update identity data protection class {error: %{public}@, identity: %{private}@, dataProtectionClass: %d}", v2, 0x1Cu);
}

void sub_19DB7DACC()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DAA6648();
  sub_19DAA6678(&dword_19D9BE000, v0, (uint64_t)v0, "Failed to purge identity from keychain {identity: %{private}@, error: %{public}@}}", v1);
}

void sub_19DB7DB3C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DAA6660();
  sub_19DAA6678(&dword_19D9BE000, v0, v1, "Failed to create full identity from data {data: %{private}@, error: %{public}@}", v2);
}

void sub_19DB7DBA8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to create full identity {error: %{public}@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7DC20(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "Failed to create full identity with data protection class {error: %{public}@, dataProtectionClass: %d}", (uint8_t *)&v3, 0x12u);
}

void sub_19DB7DCA8()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DAA6660();
  sub_19DAA6678(&dword_19D9BE000, v0, v1, "Failed to create public identity from full identity {fullIdentity: %{private}@, error: %{public}@}", v2);
}

void sub_19DB7DD14()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DAA6648();
  sub_19DAA6678(&dword_19D9BE000, v0, (uint64_t)v0, "Failed to create data from full identity {identity: %{private}@, error: %{public}@}}", v1);
}

void sub_19DB7DD84()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DAA6660();
  sub_19DAA6678(&dword_19D9BE000, v0, v1, "Failed to create public identity from data {data: %{private}@, error: %{public}@}", v2);
}

void sub_19DB7DDF0()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DAA6648();
  sub_19DAA6678(&dword_19D9BE000, v0, (uint64_t)v0, "Failed to create data from public identity {identity: %{private}@, error: %{public}@}}", v1);
}

void sub_19DB7DE60(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "IDSServerBag should not be created with init/new, the resulting object will not return any results", v1, 2u);
}

void sub_19DB7DEA4(char a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = @"YES";
  if ((a1 & 1) == 0) {
    uint64_t v3 = @"NO";
  }
  int v4 = 138412546;
  __int16 v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Failure computing hash of message for replay key { isEC: %@, error: %@ }", (uint8_t *)&v4, 0x16u);
}

void sub_19DB7DF44(void *a1, const char *a2, uint64_t a3, double a4)
{
  __int16 v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
  uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"void *TransparencyLibrary(void)", v7);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, v10, @"IDSIDInfoResult.m", 11, @"%s", *a1);

  __break(1u);
}

void sub_19DB7DFC4(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a3, a4, a1);
  double v7 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)"Class getKTVerifierResultClass(void)_block_invoke", v6);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, v9, @"IDSIDInfoResult.m", 12, @"Unable to find class %s", "KTVerifierResult");

  __break(1u);
}

void sub_19DB7E040()
{
  __assert_rtn("-[IDSQRProtoPluginControlRequest writeTo:]", "IDSQRProtoPluginControlRequest.m", 122, "nil != self->_pluginName");
}

void sub_19DB7E06C(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  int v4 = objc_msgSend_GlobalLink(IDSFoundationLog, a3, a4, a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v5 = 0;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "failed to generate connection ID", v5, 2u);
  }

  abort();
}

void sub_19DB7E0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7E158()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Will not send register request, invalid local relay link ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E18C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "Will not send register request, invalid remote relay link ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E1C0()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "processRegisterResponse failed, invalid local relay link ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E1F4()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "processRegisterResponse failed, invalid remote relay link ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E228()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "processRegisterResponse failed, do not have local connection ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E25C()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "processRegisterResponse failed, do not have remote connection ID!", v2, v3, v4, v5, v6);
}

void sub_19DB7E290()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7E318()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "_postProcessAllocbindResponse IDSLinkHBHDeriveHKDFSha256Keys failed!", v2, v3, v4, v5, v6);
}

void sub_19DB7E34C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7E3D4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7E45C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7E4E4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7E56C()
{
  sub_19DAB7F84();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "reportLinkMetricsForLinkID: no candidate pair found for linkID %u", v2, v3, v4, v5, v6);
}

void sub_19DB7E5D4()
{
  sub_19DAB7F84();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "didReceiveProtobufPacketForLinkID: no candidate pair found for linkID %u", v2, v3, v4, v5, v6);
}

void sub_19DB7E63C()
{
  sub_19DAB7F84();
  sub_19DA0ECD0(&dword_19D9BE000, v0, v1, "didReceiveProtobufPacketForLinkID: received proto packet for non-relay-control link with linkID %u", v2, v3, v4, v5, v6);
}

void sub_19DB7E6A4()
{
  sub_19DA0ECC4();
  sub_19D9F16AC(&dword_19D9BE000, v0, v1, "_postProcessQUICAllocbindResponse IDSLinkHBHDeriveHKDFSha256Keys failed!", v2, v3, v4, v5, v6);
}

void sub_19DB7E6D8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Failed type check! {key: %@, class: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_19DB7E760()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterResponse writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterResponse.m", 97, "nil != self->_virtualQuicServerConnectionId");
}

void sub_19DB7E78C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterResponse writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterResponse.m", 102, "self->_channelInfo != nil");
}

void sub_19DB7E7B8()
{
  __assert_rtn("-[IDSQRProtoDiagnosticIndication writeTo:]", "IDSQRProtoDiagnosticIndication.m", 131, "nil != self->_failureSubtype");
}

void sub_19DB7E7E4()
{
  __assert_rtn("-[IDSQRProtoDiagnosticIndication writeTo:]", "IDSQRProtoDiagnosticIndication.m", 136, "nil != self->_failureSubtypeContext");
}

void sub_19DB7E810(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "No error and no record -- Fail", v1, 2u);
}

void sub_19DB7E854(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7E8C4(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  int v5 = 138543618;
  uint64_t v6 = v3;
  __int16 v7 = 2114;
  uint64_t v8 = v4;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Failed to save account identity item {record: %{public}@, error: %{public}@}", (uint8_t *)&v5, 0x16u);
}

void sub_19DB7E954(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7E9C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7EA2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7EA98()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelUnRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelUnRegisterRequest.m", 72, "nil != self->_e2eChannelUuid");
}

void sub_19DB7EAC4()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 115, "nil != self->_e2eChannelUuid");
}

void sub_19DB7EAF0()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 120, "self->_channelInfo != nil");
}

void sub_19DB7EB1C()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterIndication writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterIndication.m", 125, "nil != self->_virtualQuicClientConnectionId");
}

void sub_19DB7EB48(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = 138543875;
  uint64_t v6 = a1;
  __int16 v7 = 2113;
  uint64_t v8 = v3;
  __int16 v9 = 2113;
  uint64_t v10 = v4;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Failed to create publicDeviceContainer - Creating corrupt endpoint {error: %{public}@, URI: %{private}@, pushToken: %{private}@}", (uint8_t *)&v5, 0x20u);
}

void sub_19DB7EBE0(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138478083;
  uint64_t v5 = v2;
  __int16 v6 = 2113;
  uint64_t v7 = v3;
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "Endpoint has ngmPublicDeviceIdentity but no ngmVersion -- creating legacy endpiont {URI: %{private}@, pushToken: %{private}@}", (uint8_t *)&v4, 0x16u);
}

void sub_19DB7EC6C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "Endpoint public identity is not valid {serializedPublicMessageProtectionIdentity : %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7ECE4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  sub_19DACBF7C(&dword_19D9BE000, v0, v1, "Failed to fetch messages {error: %{public}@", v2);
}

void sub_19DB7ED50()
{
  sub_19DA1751C();
  sub_19DAC38C4(&dword_19D9BE000, v0, v1, "TransportRecordZone - Create - Failed {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_19DB7EDB8()
{
  sub_19DA1751C();
  sub_19DAC38C4(&dword_19D9BE000, v0, v1, "TransportRecordZone - Drop - Failed {error: %{public}@}", v2, v3, v4, v5, v6);
}

void sub_19DB7EE20()
{
  sub_19DA1751C();
  sub_19DAC38C4(&dword_19D9BE000, v0, v1, "Failed to fetch records {error: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB7EE88()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_fault_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_FAULT, "Failed to parse record {record: %@, error: %@}", v2, 0x16u);
}

void sub_19DB7EF0C(void *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_payload(a1, a2, a3, a4);
  sub_19DA1751C();
  sub_19DACBF7C(&dword_19D9BE000, a2, v6, "Message without recipient alias: %{private}@", v7);
}

void sub_19DB7EF98(void *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_payload(a1, a2, a3, a4);
  sub_19DA1751C();
  sub_19DACBF7C(&dword_19D9BE000, a2, v6, "Message without sender alias: %{private}@", v7);
}

void sub_19DB7F024()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  sub_19DACBF7C(&dword_19D9BE000, v0, v1, "TransportMessage missing token {message: %{private}@}", v2);
}

void sub_19DB7F090()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  sub_19DACBF7C(&dword_19D9BE000, v0, v1, "TransportMessage missing source paylaod {message: %{private}@", v2);
}

void sub_19DB7F0FC(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Got unhandled socket pair command %d", (uint8_t *)&v3, 0x16u);
}

void sub_19DB7F184()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F20C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F294(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint64_t v4 = objc_msgSend_accountKey(a1, a2, a3, a4);
  sub_19D9F16EC(&dword_19D9BE000, v5, v6, "Key class mismatch -- Fail {key: %{public}@}", v7, v8, v9, v10, 2u);
}

void sub_19DB7F31C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_DEBUG, "LegacyMP cypher data - {data: %{private}@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7F394(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_DEBUG, "LegacyMP decypher data - {decrypted: %{private}@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7F40C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "StunUtilProcessParticipantUpdate: unknown messageType: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_19DB7F484()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F50C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB7F61C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F6A4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F72C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F7B4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F83C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F8C4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F94C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7F9D4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FA5C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FAE4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FB6C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FBF4()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FC7C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FD04()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FD8C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FE14()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FE9C()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FF24()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB7FFAC()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80034()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB800BC()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA88FC0();
  uint64_t v1 = "participantUpdateInfo";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v0, 0x16u);
}

void sub_19DB80150()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA88FC0();
  uint64_t v1 = "participantUpdateInfo";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v0, 0x16u);
}

void sub_19DB801E4(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 138412546;
  uint64_t v2 = a1;
  __int16 v3 = 2080;
  uint64_t v4 = "_tokenToRelayInterfaceInfoDeliveryStatus";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v1, 0x16u);
}

void sub_19DB80278()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80300()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80388()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80410()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80498()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB80520()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB805A8(void *a1, const char *a2, uint64_t a3, double a4)
{
  uint8_t v5 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
  uint64_t v8 = objc_msgSend_stringWithUTF8String_(NSString, v6, (uint64_t)"void *TransparencyLibrary(void)", v7);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v5, v9, (uint64_t)v8, v10, @"IDSQueryKeyTransparencyContext.m", 10, @"%s", *a1);

  __break(1u);
}

void sub_19DB80628(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a3, a4, a1);
  double v7 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)"Class getKTVerifierResultClass(void)_block_invoke", v6);
  objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, v9, @"IDSQueryKeyTransparencyContext.m", 11, @"Unable to find class %s", "KTVerifierResult");

  __break(1u);
}

void sub_19DB806A4()
{
  __assert_rtn("-[IDSQRProtoAllocBindResponse writeTo:]", "IDSQRProtoAllocBindResponse.m", 552, "nil != self->_clientAddress");
}

void sub_19DB806D0()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80758()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB807E0()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80868()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB808F0()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80978()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80A00()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80A88()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80B10()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB80B98(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "Failed to create certifiedDeliveryContext from dataRepresentation : %@, error : %@", (uint8_t *)&v3, 0x16u);
}

void sub_19DB80C20(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to create dataRepresentation from certifiedDeliveryContext, error : %@", (uint8_t *)&v2, 0xCu);
}

void sub_19DB80C98(uint64_t a1, NSObject *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v4 = 138412546;
  uint64_t v5 = objc_opt_class();
  __int16 v6 = 2048;
  uint64_t v7 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "<%@:%p> Told to process contents but none found", (uint8_t *)&v4, 0x16u);
}

void sub_19DB80D34(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = *a1;
  int v8 = 138412802;
  uint64_t v9 = v6;
  __int16 v10 = 2048;
  uint64_t v11 = v7;
  __int16 v12 = 2112;
  uint64_t v13 = a2;
  _os_log_error_impl(&dword_19D9BE000, a3, OS_LOG_TYPE_ERROR, "<%@:%p> Loader failed with error {error: %@}", (uint8_t *)&v8, 0x20u);
}

void sub_19DB80DF0()
{
  __assert_rtn("-[IDSQRProtoPutMaterialErrorIndication writeTo:]", "IDSQRProtoPutMaterialErrorIndication.m", 97, "self->_materialOwner != nil");
}

void sub_19DB80E1C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB80E54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19D9F16AC(&dword_19D9BE000, a1, a3, "IDSShouldPowerLog returned NO.", a5, a6, a7, a8, 0);
}

void sub_19DB80E8C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19DB80EC4()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "Failed to get subscription info! {error: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB80F2C()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "Failed to check if PNR is supported! {error: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB80F94()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "Failed to check if SIM is ready! {error: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB80FFC()
{
  sub_19DA1751C();
  sub_19DA17500(&dword_19D9BE000, v0, v1, "Failed to get PNR Info! {error: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB81064()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  _os_log_fault_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_FAULT, "Missing completion! {self: %@}", v1, 0xCu);
}

void sub_19DB810D8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = 138412802;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = 0;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "Failed to issue phone number registration request due to insufficient context { coreTelephonyClient: %@, error: %@, context: %@ }", (uint8_t *)&v4, 0x20u);
}

void sub_19DB8116C()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  _os_log_debug_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_DEBUG, "IDSCTPNR received carrier bundle change callback {self: %@}", v1, 0xCu);
}

void sub_19DB811E0()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  _os_log_debug_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_DEBUG, "IDSCTPNR received operator bundle change callback {self: %@}", v1, 0xCu);
}

void sub_19DB81254()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_fault_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_FAULT, "Failed storing keypair signature data [Identifier: %@] (error: %d)", v2, 0x12u);
}

void sub_19DB812DC(id *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v3 = *a1;
  sub_19DA1751C();
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "CSR Key validation failed -- regenerating {error: %@ }", v4, 0xCu);
}

void sub_19DB81374()
{
  sub_19DA1751C();
  sub_19DAC38C4(&dword_19D9BE000, v0, v1, " ** Key size is too small, not loading [Identifier: %@]", v2, v3, v4, v5, v6);
}

void sub_19DB813DC()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  _os_log_debug_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_DEBUG, "CallerID - no fromID and this is a ds-based account, using %@", v1, 0xCu);
}

void sub_19DB81450()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA93AF8();
  _os_log_error_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_ERROR, "Asked for callerID with fromID %@ for ds-based account. Forcing fromID = %@", v1, 0x16u);
}

void sub_19DB814C8(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 138412290;
  uint64_t v2 = 0;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "Asked for callerID with fromID %@ from a non-ds-based account.", (uint8_t *)&v1, 0xCu);
}

void sub_19DB81544()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA1751C();
  _os_log_error_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_ERROR, "_IDSFetchPhoneNumber failed due to telephony error { error: %@ }", v1, 0xCu);
}

void sub_19DB815B8()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA93AF8();
  _os_log_debug_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_DEBUG, "_IDSCopyOrderedAliases sorted aliases %@  (my phone numbers: %@)", v1, 0x16u);
}

void sub_19DB81630()
{
  sub_19DA1751C();
  sub_19DAC38C4(&dword_19D9BE000, v0, v1, "Unknown mapping of server key to authentication dictionary key {serverKey: %@}", v2, v3, v4, v5, v6);
}

void sub_19DB81698(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to get mobileCountryCode {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB81710(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "Failed to get mobileNetworkCode {error: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_19DB81788()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA93AF8();
  _os_log_debug_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_DEBUG, "No value found in carrier bundle for provided key { key: %@, fallbackValue: %@ }", v1, 0x16u);
}

void sub_19DB81800()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DA93AF8();
  _os_log_error_impl(&dword_19D9BE000, v0, OS_LOG_TYPE_ERROR, "Failed to fetch SIMContext for SIM {error: %@, context: %@}", v1, 0x16u);
}

void sub_19DB81878()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DB25968();
  uint64_t v1 = "_tokenToConnectionData";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v0, 0x16u);
}

void sub_19DB81900()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_19DB25968();
  uint64_t v1 = "_tokenToDeliveryStatus";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v0, 0x16u);
}

void sub_19DB81988()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB81A10()
{
  sub_19DA88FC0();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
}

void sub_19DB81A98(void *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint8_t v5 = objc_msgSend_error(a1, a2, a3, a4);
  int v6 = 138412290;
  uint64_t v7 = v5;
  _os_log_debug_impl(&dword_19D9BE000, (os_log_t)a2, OS_LOG_TYPE_DEBUG, "Failed to create RTCReporting session. Error: %@", (uint8_t *)&v6, 0xCu);
}

void sub_19DB81B30()
{
  sub_19DB4622C();
  sub_19DB46258();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x18u);
}

void sub_19DB81BB8(_DWORD *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 136315906;
  *(void *)&v3[4] = "-[IDSUDPLink _processIncomingPacketOnSocket:]";
  *(_DWORD *)&v3[14] = *a1;
  *(_WORD *)&v3[18] = 1024;
  LOWORD(v4) = 1024;
  HIWORD(v4) = a2;
  sub_19DB46268(&dword_19D9BE000, a2, a3, "%s no control message len=%d (< %u?) socket %d", *(const char **)v3, (unint64_t)"-[IDSUDPLink _processIncomingPacketOnSocket:]" >> 32, *(_DWORD *)&v3[16], v4);
}

void sub_19DB81C50()
{
  sub_19DB4622C();
  sub_19DB4623C(&dword_19D9BE000, v0, v1, "%s:%d localInterfaceIndex should not be 0 with valid localAddress", v2, v3, v4, v5, 2u);
}

void sub_19DB81CD0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315906;
  sub_19DB4622C();
  *(_DWORD *)&v3[7] = 393;
  v3[9] = v0;
  int v4 = v1;
  __int16 v5 = v0;
  int v6 = 8;
  _os_log_error_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_ERROR, "%s:%d failed due to invalid arraySize: (%d > %d).", (uint8_t *)v3, 0x1Eu);
}

void sub_19DB81D6C()
{
  sub_19DB4622C();
  sub_19DB4623C(&dword_19D9BE000, v0, v1, "%s:%d unsupported address family for local address", v2, v3, v4, v5, 2u);
}

void sub_19DB81DEC()
{
  sub_19DB4622C();
  sub_19DB46258();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
}

void sub_19DB81E84()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)os_log_type_t v2 = 136315650;
  sub_19DB4622C();
  *(_DWORD *)&v2[7] = 506;
  v2[9] = 2048;
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_19D9BE000, v1, OS_LOG_TYPE_ERROR, "%s:%d unsupported IDSInterfaceAddressIPVersion %lu", (uint8_t *)v2, 0x1Cu);
}

void sub_19DB81F18()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315650;
  sub_19DB4622C();
  *(_DWORD *)&v3[7] = 514;
  v3[9] = v0;
  int v4 = v1;
  _os_log_error_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_ERROR, "%s:%d socket creation failed errno=%d", (uint8_t *)v3, 0x18u);
}

void sub_19DB81FA8()
{
  LODWORD(v2) = 136315906;
  sub_19DB4622C();
  sub_19DB46288();
  sub_19DB46268(&dword_19D9BE000, v0, v1, "%s:%d bind failed on socket %d errno=%d", v2, v3, v4, v5);
}

void sub_19DB82024()
{
  LODWORD(v2) = 136315906;
  sub_19DB4622C();
  sub_19DB46288();
  sub_19DB46268(&dword_19D9BE000, v0, v1, "%s:%d getsockname on socket %d failed errno=%d", v2, v3, v4, v5);
}

void sub_19DB820A0()
{
  sub_19DB4622C();
  sub_19DB4623C(&dword_19D9BE000, v0, v1, "%s:%d socket is not created", v2, v3, v4, v5, 2u);
}

void sub_19DB82120()
{
  sub_19DB4622C();
  sub_19DB46258();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x26u);
}

void sub_19DB821B8(NSObject *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  int v3 = 136315650;
  uint64_t v4 = "-[IDSUDPLink reconnectWithLocalAddress:]";
  __int16 v5 = 1024;
  int v6 = 750;
  __int16 v7 = 1024;
  int v8 = v2;
  _os_log_error_impl(&dword_19D9BE000, a1, OS_LOG_TYPE_ERROR, "%s:%d getsockname failed: %d", (uint8_t *)&v3, 0x18u);
}

void sub_19DB82268()
{
  sub_19DB46258();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
}

void sub_19DB822E8()
{
  sub_19DB4622C();
  sub_19DB4623C(&dword_19D9BE000, v0, v1, "%s:%d failed to create default socket", v2, v3, v4, v5, 2u);
}

void sub_19DB82368()
{
  sub_19DB4622C();
  sub_19DB4623C(&dword_19D9BE000, v0, v1, "%s:%d failed to create cellular socket", v2, v3, v4, v5, 2u);
}

void sub_19DB823E8(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = 134218240;
  uint64_t v6 = v3;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  _os_log_debug_impl(&dword_19D9BE000, log, OS_LOG_TYPE_DEBUG, "_parseHeader: _currentCapsuleType: %llu, _currentCapsuleLength: %llu", (uint8_t *)&v5, 0x16u);
}

void sub_19DB82478()
{
  __assert_rtn("-[IDSCapsuleParser _readWithCompletionHandler:]", "IDSCapsuleParser.m", 171, "_waitingBodySize == 0");
}

void sub_19DB824A4()
{
}

void sub_19DB824D0(void *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v5 = objc_msgSend_connection(a1, a2, a3, a4);
  int v6 = 134217984;
  uint64_t id = nw_connection_get_id();
  _os_log_debug_impl(&dword_19D9BE000, (os_log_t)a2, OS_LOG_TYPE_DEBUG, "[C%llu] _readWithCompletionHandler", (uint8_t *)&v6, 0xCu);
}

void sub_19DB8256C()
{
  __assert_rtn("-[IDSCapsuleParser _readWithCompletionHandler:]", "IDSCapsuleParser.m", 177, "_pendingData == nil");
}

void sub_19DB82598(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_19D9BE000, log, OS_LOG_TYPE_DEBUG, "_readCapsuleWithExistingData: data is nil", v1, 2u);
}

void sub_19DB825DC()
{
}

void sub_19DB82608()
{
  __assert_rtn("-[IDSCapsuleParser readCapsuleWithCompletionHandler:]", "IDSCapsuleParser.m", 242, "_state == IDSCapsuleParserStateReadingHeader");
}

void sub_19DB82634()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v0 = 138412546;
  uint64_t v1 = @"qI";
  __int16 v2 = 2080;
  uint64_t v3 = "dictionary";
  _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v0, 0x16u);
}

void sub_19DB826D4()
{
  __assert_rtn("-[IDSQRProtoQuicConnectionInfo writeTo:]", "IDSQRProtoQuicConnectionInfo.m", 91, "nil != self->_quicConnectionId");
}

void sub_19DB82700()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterAckRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterAckRequest.m", 79, "nil != self->_e2eChannelUuid");
}

void sub_19DB8272C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "FAULTING: %@ : Found archived data objects.", (uint8_t *)&v2, 0xCu);
}

void sub_19DB827A4()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB8282C()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB828B4()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB8293C()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB829C4()
{
  sub_19D9F4AD4();
  sub_19D9F4AB8(&dword_19D9BE000, MEMORY[0x1E4F14500], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
}

void sub_19DB82A4C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_19D9BE000, log, OS_LOG_TYPE_FAULT, "We failed to instantiate the APSConnection Class ---- please file a radar", v1, 2u);
}

void sub_19DB82A90(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_19D9BE000, log, OS_LOG_TYPE_ERROR, "_buildMaterialInfoForDesiredMaterialDataRequireSignature: no signing block", v1, 2u);
}

void sub_19DB82AD4(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "_buildMaterialInfoForDesiredMaterialDataRequireSignature: error signing:%@", (uint8_t *)&v2, 0xCu);
}

void sub_19DB82B4C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  sub_19DB7153C();
  _os_log_fault_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_FAULT, "<%@:%p> Could not extract public key from trust for server bag signature verification", v3, 0x16u);
}

void sub_19DB82BD8(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v6 = 138412802;
  uint64_t v7 = objc_opt_class();
  __int16 v8 = 2048;
  uint64_t v9 = a1;
  __int16 v10 = 1024;
  int v11 = a2;
  _os_log_fault_impl(&dword_19D9BE000, a3, OS_LOG_TYPE_FAULT, "<%@:%p> Unsupported server bag signature algorithm {hashAlgorithm: %d}", (uint8_t *)&v6, 0x1Cu);
}

void sub_19DB82C8C(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  sub_19DB7153C();
  _os_log_error_impl(&dword_19D9BE000, a2, OS_LOG_TYPE_ERROR, "<%@:%p> No input signature or trust provided for server bag verification", v3, 0x16u);
}

void sub_19DB82D18()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterRequest.m", 97, "nil != self->_e2eChannelUuid");
}

void sub_19DB82D44()
{
  __assert_rtn("-[IDSQRProtoH3EndToEndChannelRegisterRequest writeTo:]", "IDSQRProtoH3EndToEndChannelRegisterRequest.m", 102, "self->_channelInfo != nil");
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94C0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1F40C94F8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1F40C9500]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1F40C9540]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

uint64_t CCKDFParametersCreateHkdf()
{
  return MEMORY[0x1F40C9630]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1F40C9638]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1F40C96C8](bytes, count);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

uint64_t CUTIsInternalInstall()
{
  return MEMORY[0x1F4112A60]();
}

uint64_t CUTProcessNameForPid()
{
  return MEMORY[0x1F4112A68]();
}

uint64_t CUTWeakLinkClass()
{
  return MEMORY[0x1F4112A70]();
}

uint64_t FastRandomUInt()
{
  return MEMORY[0x1F4123658]();
}

uint64_t IMCopyAppValueForKey()
{
  return MEMORY[0x1F4123690]();
}

uint64_t IMDAuditTokenTaskHasEntitlement()
{
  return MEMORY[0x1F4123700]();
}

uint64_t IMGetCachedDomainBoolForKey()
{
  return MEMORY[0x1F4123788]();
}

uint64_t IMGetCachedDomainIntForKeyWithDefaultValue()
{
  return MEMORY[0x1F41237A0]();
}

uint64_t IMGetConferenceSettings()
{
  return MEMORY[0x1F41237B0]();
}

uint64_t IMGetDomainBoolForKey()
{
  return MEMORY[0x1F41237B8]();
}

uint64_t IMGetDomainBoolForKeyWithDefaultValue()
{
  return MEMORY[0x1F41237C0]();
}

uint64_t IMGetDomainIntForKey()
{
  return MEMORY[0x1F41237C8]();
}

uint64_t IMGetDomainValueForKey()
{
  return MEMORY[0x1F41237D0]();
}

uint64_t IMGetKeychainData()
{
  return MEMORY[0x1F41237E8]();
}

uint64_t IMGetKeychainDataProtectionClassFromSecAttrDataProtectionClass()
{
  return MEMORY[0x1F41237F0]();
}

uint64_t IMGetSecAttrDataProtectionClassFromKeychainDataProtectionClass()
{
  return MEMORY[0x1F4123808]();
}

uint64_t IMGetXPCArrayFromDictionary()
{
  return MEMORY[0x1F4123810]();
}

uint64_t IMGetXPCBoolFromDictionary()
{
  return MEMORY[0x1F4123818]();
}

uint64_t IMGetXPCDataFromDictionary()
{
  return MEMORY[0x1F4123828]();
}

uint64_t IMGetXPCDictionaryFromDictionary()
{
  return MEMORY[0x1F4123830]();
}

uint64_t IMGetXPCKeyedCodableFromDictionaryWithSecureCoding()
{
  return MEMORY[0x1F4123840]();
}

uint64_t IMGetXPCStringFromDictionary()
{
  return MEMORY[0x1F4123848]();
}

uint64_t IMGetiMessageSettings()
{
  return MEMORY[0x1F4123850]();
}

uint64_t IMInsertArraysToXPCDictionary()
{
  return MEMORY[0x1F4123858]();
}

uint64_t IMInsertBoolsToXPCDictionary()
{
  return MEMORY[0x1F4123860]();
}

uint64_t IMInsertCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1F4123868]();
}

uint64_t IMInsertIntsToXPCDictionary()
{
  return MEMORY[0x1F4123880]();
}

uint64_t IMInsertKeyedCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1F4123888]();
}

uint64_t IMInsertNSStringsToXPCDictionary()
{
  return MEMORY[0x1F4123890]();
}

uint64_t IMInternationalForPhoneNumberWithOptions()
{
  return MEMORY[0x1F41238A0]();
}

uint64_t IMLogSimulateCrashForProcess()
{
  return MEMORY[0x1F41238D0]();
}

uint64_t IMLogSimulateCrashForProcessAndPID()
{
  return MEMORY[0x1F41238D8]();
}

uint64_t IMLogString()
{
  return MEMORY[0x1F41238E0]();
}

uint64_t IMLogString_V()
{
  return MEMORY[0x1F41238E8]();
}

uint64_t IMPerformSystem()
{
  return MEMORY[0x1F4123978]();
}

uint64_t IMPhoneNumberRefCopyForPhoneNumber()
{
  return MEMORY[0x1F4123980]();
}

uint64_t IMPrintf()
{
  return MEMORY[0x1F4123990]();
}

uint64_t IMRemoveKeychainData()
{
  return MEMORY[0x1F41239B8]();
}

uint64_t IMSetDomainValueForKey()
{
  return MEMORY[0x1F4123A08]();
}

uint64_t IMSetKeychainData()
{
  return MEMORY[0x1F4123A18]();
}

uint64_t IMShouldLog()
{
  return MEMORY[0x1F4123A30]();
}

uint64_t IMStringIsInHardcodedEmergencyNumberSet()
{
  return MEMORY[0x1F4123A68]();
}

uint64_t IMStringIsPseudonymID()
{
  return MEMORY[0x1F4123A78]();
}

uint64_t IMTimeOfDay()
{
  return MEMORY[0x1F4123AB8]();
}

uint64_t IMUserScopedNotification()
{
  return MEMORY[0x1F4123AE0]();
}

uint64_t IMWarnString_V()
{
  return MEMORY[0x1F4123AE8]();
}

uint64_t IMWeakLinkClass()
{
  return MEMORY[0x1F4123AF0]();
}

uint64_t IMWeakLinkSymbol()
{
  return MEMORY[0x1F4123AF8]();
}

uint64_t IMXPCConfigureConnection()
{
  return MEMORY[0x1F4123B00]();
}

uint64_t IMXPCCreateConnectionForServiceWithQueue()
{
  return MEMORY[0x1F4123B08]();
}

uint64_t IMXPCCreateServerConnection()
{
  return MEMORY[0x1F4123B10]();
}

uint64_t IMXPCCreateSim2HostServerConnection()
{
  return MEMORY[0x1F4123B18]();
}

uint64_t JWDecodeDictionary()
{
  return MEMORY[0x1F4123B60]();
}

uint64_t JWEncodeDictionary()
{
  return MEMORY[0x1F4123B70]();
}

uint64_t JWUUIDPushObjectToString()
{
  return MEMORY[0x1F4123B78]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

uint64_t MarcoLog()
{
  return MEMORY[0x1F412C630]();
}

uint64_t MarcoNoteCheckpoint()
{
  return MEMORY[0x1F412C648]();
}

uint64_t MarcoShouldLog()
{
  return MEMORY[0x1F412C650]();
}

uint64_t MarcoShouldLogCheckpoints()
{
  return MEMORY[0x1F412C658]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1F40E7298](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

uint64_t OSLogHandleForIDSCategory()
{
  return MEMORY[0x1F4123B80]();
}

uint64_t OSLogHandleForTransportCategory()
{
  return MEMORY[0x1F4123B98]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1F4147360]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1F4147368]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1F4147370]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1F4147378]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1F4147380]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1F41473D0]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1F41473D8]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1F41473E0]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1F41473E8]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1F41473F0]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1F41473F8]();
}

uint64_t PBRepeatedUInt64Add()
{
  return MEMORY[0x1F4147408]();
}

uint64_t PBRepeatedUInt64Clear()
{
  return MEMORY[0x1F4147410]();
}

uint64_t PBRepeatedUInt64Copy()
{
  return MEMORY[0x1F4147418]();
}

uint64_t PBRepeatedUInt64Hash()
{
  return MEMORY[0x1F4147420]();
}

uint64_t PBRepeatedUInt64IsEqual()
{
  return MEMORY[0x1F4147428]();
}

uint64_t PBRepeatedUInt64NSArray()
{
  return MEMORY[0x1F4147430]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6AD0](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1F40F6B80](allocator, data);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1F40F6DB8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1F40F6DC0](identityRef, privateKeyRef);
}

uint64_t SecKeyCopyAttributeDictionary()
{
  return MEMORY[0x1F40F6E30]();
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x1F40F6E60]();
}

uint64_t SecKeyCreateRSAPrivateKey()
{
  return MEMORY[0x1F40F6ED0]();
}

uint64_t SecKeyCreateRSAPublicKey()
{
  return MEMORY[0x1F40F6ED8]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

OSStatus SecKeyGeneratePair(CFDictionaryRef parameters, SecKeyRef *publicKey, SecKeyRef *privateKey)
{
  return MEMORY[0x1F40F6F30](parameters, publicKey, privateKey);
}

uint64_t SecKeyGetSize()
{
  return MEMORY[0x1F40F6F48]();
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1F40F6F80](key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateAppleIDSService()
{
  return MEMORY[0x1F40F6FF8]();
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1F40F7088](server, hostname);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1F40F71B8](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

uint64_t SecTrustIsExpiredOnly()
{
  return MEMORY[0x1F40F7240]();
}

OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
{
  return MEMORY[0x1F40F72A8](trust, verifyDate);
}

uint64_t ValidMobileMeDomains()
{
  return MEMORY[0x1F4123BB0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CTServerConnectionCopyCurrentMTU()
{
  return MEMORY[0x1F40DF030]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1F40DF0C8]();
}

uint64_t _CTServerConnectionDropIPPackets()
{
  return MEMORY[0x1F40DF0F8]();
}

uint64_t _CTServerConnectionSetPacketNotificationFilter()
{
  return MEMORY[0x1F40DF210]();
}

uint64_t _CTServerConnectionUpdateProtocolQualityOfService()
{
  return MEMORY[0x1F40DF240]();
}

uint64_t _IMAlwaysLog()
{
  return MEMORY[0x1F4123BB8]();
}

uint64_t _IMAlwaysLogV()
{
  return MEMORY[0x1F4123BC0]();
}

uint64_t _IMLogEventString_V()
{
  return MEMORY[0x1F4123BE0]();
}

uint64_t _IMLogString_V()
{
  return MEMORY[0x1F4123BE8]();
}

uint64_t _IMWarn()
{
  return MEMORY[0x1F4123C00]();
}

uint64_t _IMWillLog()
{
  return MEMORY[0x1F4123C08]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x1F40C9CE0]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CA530](*(void *)&a1, a2, *(void *)&a3);
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CB440](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t cut_arc_os_release()
{
  return MEMORY[0x1F4112A88]();
}

uint64_t cut_dispatch_log_queue()
{
  return MEMORY[0x1F4112A90]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1F40CBA00](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA20](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA30](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA38](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC558](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1F40CC560](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1F40CC648](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

uint64_t im_dispatch_after_primary_queue()
{
  return MEMORY[0x1F4123C18]();
}

uint64_t im_notify_register_dispatch()
{
  return MEMORY[0x1F4123C38]();
}

uint64_t im_primary_queue()
{
  return MEMORY[0x1F4123C48]();
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

uint64_t jw_uuid_to_data()
{
  return MEMORY[0x1F4123C50]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int kevent(int kq, const kevent *changelist, int nchanges, kevent *eventlist, int nevents, const timespec *timeout)
{
  return MEMORY[0x1F40CC718](*(void *)&kq, changelist, *(void *)&nchanges, eventlist, *(void *)&nevents, timeout);
}

int kqueue(void)
{
  return MEMORY[0x1F40CC748]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1F40CCA58]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1F40CCB50](zone);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_copy_connected_local_endpoint()
{
  return MEMORY[0x1F40F2A78]();
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1F40F2A80]();
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1F40F2A90](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2AA0](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1F40F2AC0](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2AD0](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1F40F2AE0](endpoint, parameters);
}

uint64_t nw_connection_create_with_connection()
{
  return MEMORY[0x1F40F2B10]();
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x1F40F2B48]();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2CF0](context, protocol);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1F40F2CF8](context_identifier);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
}

void nw_content_context_set_metadata_for_protocol(nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1F40F2D38]();
}

uint64_t nw_context_create()
{
  return MEMORY[0x1F40F2D70]();
}

uint64_t nw_context_set_isolate_protocol_stack()
{
  return MEMORY[0x1F40F2DB0]();
}

uint64_t nw_context_set_scheduling_mode()
{
  return MEMORY[0x1F40F2DC8]();
}

uint64_t nw_demux_create_options()
{
  return MEMORY[0x1F40F2E20]();
}

uint64_t nw_demux_options_add_pattern()
{
  return MEMORY[0x1F40F2E28]();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1F40F2E38](endpoint);
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2E80](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EA8](hostname, port);
}

nw_endpoint_t nw_endpoint_create_url(const char *url)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EC0](url);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1F40F2ED0](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1F40F2F08](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

uint64_t nw_error_create_error_with_inferred_domain()
{
  return MEMORY[0x1F40F2F58]();
}

uint64_t nw_http2_create_options()
{
  return MEMORY[0x1F40F31C8]();
}

uint64_t nw_http2_set_capsule_handling_disabled()
{
  return MEMORY[0x1F40F31D0]();
}

uint64_t nw_http3_create_options()
{
  return MEMORY[0x1F40F31D8]();
}

uint64_t nw_http3_set_0rtt_enabled()
{
  return MEMORY[0x1F40F31E0]();
}

uint64_t nw_http3_set_initial_remote_settings()
{
  return MEMORY[0x1F40F31E8]();
}

uint64_t nw_http_create_metadata()
{
  return MEMORY[0x1F40F31F0]();
}

uint64_t nw_http_metadata_add_header()
{
  return MEMORY[0x1F40F31F8]();
}

uint64_t nw_http_metadata_enumerate_headers()
{
  return MEMORY[0x1F40F3200]();
}

uint64_t nw_http_metadata_get_status()
{
  return MEMORY[0x1F40F3208]();
}

uint64_t nw_http_metadata_set_endpoint()
{
  return MEMORY[0x1F40F3210]();
}

uint64_t nw_http_metadata_set_method()
{
  return MEMORY[0x1F40F3218]();
}

uint64_t nw_http_metadata_set_path()
{
  return MEMORY[0x1F40F3220]();
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1F40F3230]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1F40F3238]();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1F40F3248](interface);
}

nw_protocol_metadata_t nw_ip_create_metadata(void)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F32B8]();
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F32C0](metadata);
}

void nw_ip_metadata_set_ecn_flag(nw_protocol_metadata_t metadata, nw_ip_ecn_flag_t ecn_flag)
{
}

uint64_t nw_ip_metadata_set_enable_fragmentation()
{
  return MEMORY[0x1F40F32E0]();
}

void nw_ip_metadata_set_service_class(nw_protocol_metadata_t metadata, nw_service_class_t service_class)
{
}

void nw_listener_cancel(nw_listener_t listener)
{
}

uint64_t nw_listener_copy_local_endpoint()
{
  return MEMORY[0x1F40F3318]();
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3320](parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x1F40F3390]();
}

uint64_t nw_nat64_copy_prefixes_async()
{
  return MEMORY[0x1F40F3398]();
}

uint64_t nw_nat64_does_interface_index_support_nat64()
{
  return MEMORY[0x1F40F33A0]();
}

uint64_t nw_nat64_extract_v4()
{
  return MEMORY[0x1F40F33A8]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x1F40F33B0]();
}

uint64_t nw_parameters_allow_sharing_port_with_listener_for_connection()
{
  return MEMORY[0x1F40F33F8]();
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  return (nw_parameters_t)MEMORY[0x1F40F3408](parameters);
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

nw_endpoint_t nw_parameters_copy_local_endpoint(nw_parameters_t parameters)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3438](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1F40F3488]();
}

uint64_t nw_parameters_create_qpod()
{
  return MEMORY[0x1F40F34B0]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34D0](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x1F40F35A0]();
}

uint64_t nw_parameters_set_channel_demux_options()
{
  return MEMORY[0x1F40F35D8]();
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1F40F35E0]();
}

uint64_t nw_parameters_set_delegated_unique_pid()
{
  return MEMORY[0x1F40F35F0]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x1F40F3608]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
}

uint64_t nw_parameters_set_parent_id()
{
  return MEMORY[0x1F40F36B8]();
}

uint64_t nw_parameters_set_prohibited_netagent_classes()
{
  return MEMORY[0x1F40F3718]();
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
}

void nw_parameters_set_service_class(nw_parameters_t parameters, nw_service_class_t service_class)
{
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x1F40F3790]();
}

uint64_t nw_path_assert_agent()
{
  return MEMORY[0x1F40F37F0]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3800](path);
}

nw_endpoint_t nw_path_copy_effective_remote_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3808](path);
}

uint64_t nw_path_copy_inactive_agent_uuids()
{
  return MEMORY[0x1F40F3818]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1F40F3878]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1F40F3880]();
}

uint64_t nw_path_evaluator_get_client_id()
{
  return MEMORY[0x1F40F3890]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1F40F38B0]();
}

uint64_t nw_path_evaluator_start()
{
  return MEMORY[0x1F40F38B8]();
}

uint64_t nw_path_get_client_id()
{
  return MEMORY[0x1F40F38C0]();
}

uint64_t nw_path_get_flow_registration_id()
{
  return MEMORY[0x1F40F38D8]();
}

uint64_t nw_path_get_interface_index()
{
  return MEMORY[0x1F40F38E0]();
}

uint64_t nw_path_get_reason()
{
  return MEMORY[0x1F40F3920]();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1F40F3938](path);
}

BOOL nw_path_is_constrained(nw_path_t path)
{
  return MEMORY[0x1F40F3960](path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return MEMORY[0x1F40F3970](path);
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1F40F3A00](path, *(void *)&interface_type);
}

uint64_t nw_path_uses_nexus()
{
  return MEMORY[0x1F40F3A08]();
}

uint64_t nw_protocol_copy_http_definition()
{
  return MEMORY[0x1F40F3A10]();
}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3A18]();
}

uint64_t nw_protocol_copy_quic_connection_definition()
{
  return MEMORY[0x1F40F3A28]();
}

uint64_t nw_protocol_definition_get_identifier()
{
  return MEMORY[0x1F40F3A80]();
}

nw_protocol_definition_t nw_protocol_options_copy_definition(nw_protocol_options_t options)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3B00](options);
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1F40F3B48]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3B58](stack);
}

nw_protocol_options_t nw_protocol_stack_copy_transport_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3B68](stack);
}

void nw_protocol_stack_iterate_application_protocols(nw_protocol_stack_t stack, nw_protocol_stack_iterate_protocols_block_t iterate_block)
{
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

uint64_t nw_qpod_set_dcid()
{
  return MEMORY[0x1F40F3C50]();
}

uint64_t nw_qpod_set_scid()
{
  return MEMORY[0x1F40F3C58]();
}

uint64_t nw_qpod_set_secrets()
{
  return MEMORY[0x1F40F3C60]();
}

uint64_t nw_qpod_setup_secrets()
{
  return MEMORY[0x1F40F3C68]();
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1F40F3CA0]();
}

uint64_t nw_quic_connection_add_h3_alpn()
{
  return MEMORY[0x1F40F3CC8]();
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1F40F3CE0]();
}

uint64_t nw_quic_connection_set_disable_spin_bit()
{
  return MEMORY[0x1F40F3D10]();
}

uint64_t nw_quic_connection_set_force_version_negotiation()
{
  return MEMORY[0x1F40F3D20]();
}

uint64_t nw_quic_connection_set_keepalive_count()
{
  return MEMORY[0x1F40F3D48]();
}

uint64_t nw_quic_connection_set_pmtud_for_non_transport()
{
  return MEMORY[0x1F40F3D68]();
}

nw_protocol_options_t nw_quic_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3D80]();
}

uint64_t nw_quic_set_remote_transport_parameters()
{
  return MEMORY[0x1F40F3DA0]();
}

uint64_t nw_quic_set_source_connection_id()
{
  return MEMORY[0x1F40F3DA8]();
}

uint64_t nw_quic_stream_copy_shared_connection_options()
{
  return MEMORY[0x1F40F3DB0]();
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1F40F3F58](options);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1F40CD180]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1F40CD188]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1F40CD190]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1F40CD198]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1F40CD1A0]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1F40CD1A8]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1F40CD1B0]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1F40CD1C0]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1F40CD1C8]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1F40CD200]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1F40CD218]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1F40CD250]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1F40CD258]();
}

uint64_t os_channel_ring_notify_time()
{
  return MEMORY[0x1F40CD260]();
}

uint64_t os_channel_ring_sync_time()
{
  return MEMORY[0x1F40CD268]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1F40CD270]();
}

uint64_t os_channel_set_slot_properties()
{
  return MEMORY[0x1F40CD278]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1F40CD298]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1F40CD2A0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

uint64_t os_log_shim_legacy_logging_enabled()
{
  return MEMORY[0x1F40CD3A0]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_nexus_attr_create()
{
  return MEMORY[0x1F40CD3D0]();
}

uint64_t os_nexus_attr_destroy()
{
  return MEMORY[0x1F40CD3D8]();
}

uint64_t os_nexus_attr_set()
{
  return MEMORY[0x1F40CD3E8]();
}

uint64_t os_nexus_controller_alloc_provider_instance()
{
  return MEMORY[0x1F40CD3F0]();
}

uint64_t os_nexus_controller_bind_provider_instance()
{
  return MEMORY[0x1F40CD3F8]();
}

uint64_t os_nexus_controller_create()
{
  return MEMORY[0x1F40CD400]();
}

uint64_t os_nexus_controller_deregister_provider()
{
  return MEMORY[0x1F40CD408]();
}

uint64_t os_nexus_controller_destroy()
{
  return MEMORY[0x1F40CD410]();
}

uint64_t os_nexus_controller_free_provider_instance()
{
  return MEMORY[0x1F40CD418]();
}

uint64_t os_nexus_controller_register_provider()
{
  return MEMORY[0x1F40CD428]();
}

uint64_t os_nexus_controller_unbind_provider_instance()
{
  return MEMORY[0x1F40CD430]();
}

uint64_t os_parse_boot_arg_string()
{
  return MEMORY[0x1F40CD530]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1F40CD630]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1F40CD658]();
}

void perror(const char *a1)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

uint64_t proc_setthread_cpupercent()
{
  return MEMORY[0x1F40CD8F0]();
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

uint64_t pthread_dependency_init_np()
{
  return MEMORY[0x1F40CD9C8]();
}

uint64_t pthread_dependency_wait_np()
{
  return MEMORY[0x1F40CD9D0]();
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1F40CDA18](a1, a2, a3);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1F40CDB68](a1, *(void *)&a2, a3);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDCB8](*(void *)&a1, a2, a3, *(void *)&a4);
}

uint64_t recvmsg_x()
{
  return MEMORY[0x1F40CDCD0]();
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
}

void sec_protocol_options_set_min_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDF30](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDF38](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1F40CDF48](*(void *)&a1, a2, a3, *(void *)&a4, a5, *(void *)&a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1F40CE540](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1F40CE598](__b1, __b2, __len);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void uuid_clear(uuid_t uu)
{
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1F40CEAA0](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}