@interface IDSGlobalLink
+ (Class)getGLClassWithOptions:(id)a3;
- (BOOL)_IsExtIPDiscoveryNeeded:(sockaddr *)a3 candidatePairList:(id)a4;
- (BOOL)_addCandidate:(id)a3 isRemoteCandidate:(BOOL)a4;
- (BOOL)_findTriedCandidatePairForSession:(id)a3 wantOnlyCell:(BOOL)a4 wantOnlyNonCell:(BOOL)a5;
- (BOOL)_getPacketBufferSendInfo:(id *)a3 channelNumber:(unsigned __int16 *)a4 transport:(int64_t *)a5;
- (BOOL)_getSessionParticipants:(id)a3 relaySessionID:(id)a4 options:(id)a5;
- (BOOL)_getSessionStreamInfo:(id)a3 relaySessionID:(id)a4 options:(id)a5;
- (BOOL)_handleRemapping:(id)a3 errorCode:(unsigned __int16)a4 reconnectQUIC:(BOOL)a5;
- (BOOL)_hasActiveAllocbindFailoverTimerForSessionID:(id)a3;
- (BOOL)_hasCandidatePairInState:(unint64_t)a3 anotherState:(unint64_t)a4 relayCandidatePairsOnly:(BOOL)a5 excludeSelfAlloc:(BOOL)a6;
- (BOOL)_hasCandidatePairInState:(unint64_t)a3 relayCandidatePairsOnly:(BOOL)a4 excludeSelfAlloc:(BOOL)a5;
- (BOOL)_hasConnectedP2pLink;
- (BOOL)_hasConnectingRelayCandidatePair;
- (BOOL)_interfaceName:(id)a3 missingFrom:(id)a4;
- (BOOL)_isAcceptedRelaySessionForAllocationRequestID:(id)a3 acceptedRelaySessionID:(id)a4;
- (BOOL)_isCLAT46Interface:(sockaddr *)a3;
- (BOOL)_isCellularInterfaceForCandidatePair:(id)a3 localAddress:(sockaddr *)a4;
- (BOOL)_isExtIPDiscoveryDone;
- (BOOL)_isInterfaceConstrainedWithInterfaceIndex:(unsigned int)a3;
- (BOOL)_isInterfaceDelegatedWithInterfaceIndex:(unsigned int)a3;
- (BOOL)_isInterfaceExpensiveWithInterfaceIndex:(unsigned int)a3;
- (BOOL)_isNWPathFlagsChanged:(id)a3 existingPath:(unsigned __int16 *)a4;
- (BOOL)_isSharedQRSession:(id)a3;
- (BOOL)_isSlicedCellularInterfaceActive:(unsigned int)a3;
- (BOOL)_isUsingSameRATCandidatePair:(id)a3 transportScoreCard:(id)a4;
- (BOOL)_postProcessAllocbindResponse:(id)a3 candidatePair:(id)a4 candidatePairToken:(id)a5;
- (BOOL)_postProcessQUICAllocbindResponse:(id)a3 candidatePair:(id)a4;
- (BOOL)_processAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processBindingRequest:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processBindingResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processChannelDataCommandMessage:(id *)a3 remoteRelayLinkID:(unsigned __int16)a4 channelNumber:(unsigned __int16)a5 fromDeviceUniqueID:(id)a6 cbuuid:(id)a7 arrivalTime:(double)a8;
- (BOOL)_processDataIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5;
- (BOOL)_processGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processIncomingIndicationData:(char *)a3 length:(int)a4 candidatePairToken:(id)a5 arrivalTime:(double)a6 remoteRelayLinkID:(unsigned __int16)a7;
- (BOOL)_processNWLinkAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processProtoPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7;
- (BOOL)_processQUICDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5;
- (BOOL)_processQUICGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processQUICReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processQUICUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_processRegisterAckResponse:(id)a3 candidatePairToken:(id)a4;
- (BOOL)_processRegisterIndication:(id)a3 candidatePairToken:(id)a4;
- (BOOL)_processRegisterResponse:(id)a3 candidatePairToken:(id)a4;
- (BOOL)_processReliableUnicastRegistrationErrorResponse:(id)a3 packetBuffer:(id *)a4 startTime:(double)a5 candidatePair:(id)a6;
- (BOOL)_processRemovedLocalAddressList:(id)a3;
- (BOOL)_processStunPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7;
- (BOOL)_processUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9;
- (BOOL)_qrLinkLimitExceededWithNewLinkType:(unsigned __int8)a3 cellularRelayLinkCount:(unsigned __int16)a4 wifiRelayLinkCount:(unsigned __int16)a5;
- (BOOL)_qrMaterialExchangePutMaterial:(id)a3 completionHandler:(id)a4;
- (BOOL)_requestSelfAllocationForInterfaceAddress:(id)a3;
- (BOOL)_sendInfoRequest:(id)a3 relaySessionID:(id)a4;
- (BOOL)_setupNewQRLinkIfNecessary:(id)a3;
- (BOOL)_shouldSkipCommand:(int64_t)a3 withCandidatePair:(id)a4 connectionDataCounter:(int)a5 relayInterfaceCounter:(int)a6;
- (BOOL)_shouldUseP2PTLE;
- (BOOL)_shouldUseQRTLE;
- (BOOL)_shouldUseVRTLE;
- (BOOL)_skipCommandMessage:(int64_t)a3 candidatePair:(id)a4 timeNow:(double)a5;
- (BOOL)_synthesizeNAT64ForAddress:(sockaddr *)a3 withPrefix:(id *)a4 toAddress:(sockaddr *)a5;
- (BOOL)_triggerSymptomsWithCandidatePairToken:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6;
- (BOOL)_triggerSymptomsWithType:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6;
- (BOOL)hasReachableInterface:(unint64_t)a3;
- (BOOL)link:(id)a3 didReceivePacket:(id *)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6;
- (BOOL)qrMaterialExchangePutMaterial:(id)a3;
- (BOOL)receiveNoSessionStateForCandidatePair:(id)a3 didLocalExternalAddressChange:(BOOL)a4;
- (BOOL)remoteHostAwake;
- (IDSGlobalLink)initWithDeviceUniqueID:(id)a3 cbuuid:(id)a4;
- (IDSLinkDelegate)alternateDelegate;
- (IDSLinkDelegate)delegate;
- (NSString)cbuuid;
- (NSString)deviceUniqueID;
- (NSString)linkTypeString;
- (double)_startTimeForProtoRequest:(unint64_t)a3;
- (double)_startTimeForStunRequest:(id)a3;
- (id)_addSocketAndInterfaceAddress:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5;
- (id)_addSocketAndInterfaceAddressWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5;
- (id)_convergeSharedSessions:(id)a3;
- (id)_createCommandData:(int64_t)a3 options:(id)a4 candidatePair:(id)a5;
- (id)_createIDSContextBlobMaterialProto:(id)a3;
- (id)_createInterfaceAddressArray:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5;
- (id)_createInterfaceAddressArrayWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5;
- (id)_filterNonSlicedLocalCandidates:(id)a3;
- (id)_findCandidatePairWithRelaySessionID:(id)a3;
- (id)_findVirtualCandidatePair:(id)a3;
- (id)_getAllocbindReportingDataBlob:(id)a3;
- (id)_getCandidatePairsWithSessionID:(id)a3 inState:(unint64_t)a4;
- (id)_getLink:(int)a3 stunTransport:(int64_t)a4;
- (id)_getLocalAttribute:(id)a3;
- (id)_getRemoteAttribute:(id)a3;
- (id)_interfaceNameForInterfaceIndex:(unsigned int)a3;
- (id)_interfaceNameForInterfaceIndexIncludingVPN:(unsigned int)a3;
- (id)_tokenForProtoRequest:(unint64_t)a3;
- (id)_translateLinkTransportTypeWhenH2Enabled:(id)a3;
- (id)_transportInterfaceToString:(int64_t)a3;
- (id)copyLinkStatsDict;
- (id)createLinkCycleForCandidatePair:(id)a3;
- (id)generateLinkReport:(double)a3 isCurrentLink:(BOOL)a4;
- (int)_getExpensiveLinkFlagsForCandidatePair:(id)a3;
- (int64_t)_getQRAllocateType;
- (int64_t)_sendPacketBuffer:(id *)a3 stunTransport:(int64_t)a4 token:(id)a5 linkID:(char)a6 delegatedLinkID:(char)a7;
- (int64_t)_sendProtoMessage:(id)a3 candidatePair:(id)a4;
- (int64_t)_sendStunMessage:(id)a3 candidatePair:(id)a4;
- (int64_t)_sendStunMessage:(id)a3 sourceIfIndex:(int)a4 source:(const sockaddr *)a5 destination:(sockaddr *)a6 stunTransport:(int64_t)a7 token:(id)a8 linkID:(char)a9 delegatedLinkID:(char)a10 MTULimit:(int)a11;
- (int64_t)getAllocBindErrorCodeForSessionID:(id)a3;
- (unint64_t)_prepareOutgoingChannelData:(id *)a3 arraySize:(int)a4 channelNumber:(unsigned __int16)a5 candidatePair:(id)a6 linkID:(char)a7 delegatedLinkID:(char *)a8 stunTransport:(int64_t)a9;
- (unint64_t)_sendChannelDataPacketBuffer:(id *)a3 candidatePair:(id)a4;
- (unint64_t)createAliasForParticipantID:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5;
- (unint64_t)defaultLinkType;
- (unint64_t)headerOverhead;
- (unint64_t)participantIDForAlias:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5;
- (unint64_t)sendPacketBuffer:(id *)a3 toDeviceUniqueID:(id)a4 cbuuid:(id)a5;
- (unint64_t)sendPacketBufferArray:(id *)a3 arraySize:(int)a4 toDeviceUniqueID:(id)a5 cbuuid:(id)a6;
- (unint64_t)state;
- (unsigned)_getExternalIPAddressRAT:(id)a3;
- (unsigned)_getNewLinkType:(id)a3 remoteInterface:(int *)a4;
- (void)_addQRAAWDBlock:(id)a3 allocateRequestTime:(double)a4 inferredExternalRAT:(unsigned int)a5 stunTransport:(int64_t)a6 relayProviderType:(int64_t)a7 idsSessionID:(id)a8 reportingDataBlob:(id)a9 isInitiator:(BOOL)a10;
- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4;
- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4 excludeLocalAddress:(sockaddr *)a5;
- (void)_attemptP2PNegotiationForSTUNMessage:(id)a3 candidatePair:(id)a4 completionHandler:(id)a5;
- (void)_buildQrExperiments;
- (void)_callDisconnectCompletionHandler:(id)a3;
- (void)_connectNWLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5;
- (void)_connectNWTCPLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5;
- (void)_connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 allocbindFailover:(BOOL)a6 completionHandler:(id)a7 withLocalInterfacePreference:(int)a8;
- (void)_delayProcessingCellularInterfaces:(id)a3;
- (void)_didReceiveRequestToPurgeRegistration;
- (void)_discardAllCandidatePairs:(BOOL)a3;
- (void)_discardCandidatePairsWithOption:(BOOL)a3 isReinitiating:(BOOL)a4;
- (void)_discardNonAcceptedCandidatePairs;
- (void)_discardNonSlicedP2PCandidatePairs;
- (void)_discardSelfAllocateCandidatePairs;
- (void)_disconnectPluginConnectionsForParticipantID:(unint64_t)a3 andPurgeRegistration:(BOOL)a4;
- (void)_generateTransportScoreCard;
- (void)_getAndProcessDatablobsFromReceivedMaterials:(id)a3;
- (void)_getNAT64PrefixForInterface:(int)a3 interfaceName:(id)a4 completionBlock:(id)a5;
- (void)_getP2PNegotiationForCandidatePair:(id)a3 completionBlock:(id)a4;
- (void)_handleActivityTimer;
- (void)_handleAllocbindFailoverTimer:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5;
- (void)_handleAllocbindFailoverTimerWithTransportScoreCards:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5;
- (void)_handleDisconnect:(BOOL)a3;
- (void)_handleDisconnectTimer;
- (void)_handleNewRATChange;
- (void)_handleSelfAllocationTimeout:(id)a3;
- (void)_handle_cellular_path:(id)a3 nwEndPoind:(id)a4;
- (void)_handle_wifi_path:(id)a3 nwEndPoind:(id)a4;
- (void)_nominateCandidatePair:(id)a3;
- (void)_notifyCandidatePairConnected:(id)a3;
- (void)_notifyCandidatePairDisconnected:(id)a3 withReason:(unsigned __int8)a4;
- (void)_notifyDefaultUnderlyingLinkChanged:(id)a3 error:(int64_t)a4;
- (void)_notifyLinkDisconnectedWithError:(int64_t)a3 reason:(unsigned __int8)a4;
- (void)_notifyQRSessionConnected:(id)a3;
- (void)_notifySessionInfoReceived:(id)a3 relayGroupID:(id)a4 relaySessionID:(id)a5 status:(unsigned int)a6;
- (void)_parseActiveExperiments:(id)a3;
- (void)_parseClientUUID:(id)a3;
- (void)_processCommandConnected:(id)a3 candidatePairToken:(id)a4;
- (void)_processCommandConnectionData:(id)a3 candidatePairToken:(id)a4;
- (void)_processCommandDisconnected:(id)a3 candidatePairToken:(id)a4;
- (void)_processCommandHeartbeat:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5 remoteRelayLinkID:(unsigned __int16)a6;
- (void)_processCommandNominate:(id)a3 candidatePairToken:(id)a4;
- (void)_processDataOnReallocChannel:(unsigned __int16)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5;
- (void)_processDelayedCellularInterfaces;
- (void)_processNewLocalAddressList:(id)a3;
- (void)_processNewRemoteCandidates:(id)a3;
- (void)_processReallocChannelData:(id *)a3 channelNumber:(unsigned __int16)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6 arrivalTime:(double)a7;
- (void)_processRemoteCandidates:(id)a3;
- (void)_processRemoteLinkUUID:(id)a3 candidatePair:(id)a4;
- (void)_processRemovedRemoteCandidates:(id)a3;
- (void)_processXORMappedAddress:(id)a3 arrivalTime:(double)a4;
- (void)_receiveP2PNegotiationBlob:(id)a3 attemptID:(unint64_t)a4 remoteIDSConnectionID:(unsigned int)a5 remoteAVCConnectionID:(unsigned int)a6 candidatePair:(id)a7 completionHandler:(id)a8;
- (void)_removeChannelFromChannelToCandidatePair:(id)a3;
- (void)_removePacketNotificationFilter;
- (void)_removeProtoRequest:(unint64_t)a3 status:(unsigned int)a4;
- (void)_removeStunRequest:(id)a3;
- (void)_reportAWDAllocateTime;
- (void)_reportSessionSetupTime;
- (void)_requestNewTwoWayQRAllocation:(id)a3;
- (void)_requestNonUDPRelayAllocation:(int64_t)a3 relaySessionID:(id)a4;
- (void)_saveProtoRequest:(id)a3 token:(id)a4;
- (void)_saveStunRequest:(id)a3 startTime:(double)a4 token:(id)a5;
- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 isValidSA:(BOOL)a7;
- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 wantOnlyCell:(BOOL)a7 wantOnlyNonCell:(BOOL)a8 isValidSA:(BOOL)a9;
- (void)_sendAllocbindRequest:(id)a3 stunMessage:(id)a4 isRealloc:(BOOL)a5 inResponseToNoSessionState:(BOOL)a6;
- (void)_sendAllocbindRequestForExtIP:(id)a3 startTime:(double)a4;
- (void)_sendBindingRequest:(id)a3 stunMessage:(id)a4;
- (void)_sendChannelDataCommandMessage:(int64_t)a3 packetBuffer:(id *)a4 options:(id)a5 candidatePairToken:(id)a6;
- (void)_sendCommandMessage:(int64_t)a3 stunMessage:(id)a4 options:(id)a5 candidatePairToken:(id)a6;
- (void)_sendConnectionDataWithRemovedAddressList:(id)a3;
- (void)_sendNowConnectionDataWithRemovedAddressList:(id)a3;
- (void)_sendQUICAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 shouldConnectLinkFirst:(BOOL)a6 isPendingInResponseToNoSessionState:(BOOL)a7;
- (void)_sendQUICUnallocbindRequest:(id)a3 reason:(unsigned __int8)a4;
- (void)_sendSKEDataToSucceededCandidatePairs;
- (void)_sendSKEDataWithSelectedCandidatePair;
- (void)_sendSessionDisconnectedCommand;
- (void)_sendUnallocbindRequest:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5;
- (void)_sendUnallocbindRequestTimeOut:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5;
- (void)_setCandidatePairConnected:(id)a3;
- (void)_setChannelToCandidatePair:(id)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5 channelNumber:(unsigned __int16)a6;
- (void)_setFirstDefaultCandidatePair:(id)a3;
- (void)_setLinkMetricsAttributesForCandidatePair:(id)a3;
- (void)_setRemoteGlobalLinkVersionWithCommand:(int64_t)a3 receivedRemoteVersion:(BOOL)a4 versionValue:(unsigned __int16)a5 receivedSKE:(BOOL)a6;
- (void)_setupRelayConnectionForNetworkAddressChanges;
- (void)_setupRelayConnectionForNetworkAddressChangesHelper;
- (void)_startActivityTimer;
- (void)_startAllocbindFailoverTimerOnCandidatePair:(id)a3 delay:(int)a4;
- (void)_startDisconnectTimer;
- (void)_startExtIPDiscovery;
- (void)_startStunCheck:(id)a3;
- (void)_stopActivityTimer;
- (void)_stopAllocbindFailoverTimer:(id)a3;
- (void)_stopDisconnectTimer;
- (void)_stopProbingOnLinkID:(char)a3;
- (void)_updateCandidatePair:(id)a3 newLocalPort:(unsigned __int16)a4;
- (void)_updateDefaultCandidatePair:(id)a3;
- (void)_updateInterfaceAddressesWithAddList:(id)a3 removeList:(id)a4;
- (void)_updateLinkIDForPlugin:(id)a3;
- (void)_updateNominatedCandidatePair:(id)a3;
- (void)_updateSendStatsWithResult:(unint64_t)a3 bytesSent:(int64_t)a4 packetsSent:(int)a5 linkID:(char)a6 delegatedLinkID:(char)a7 token:(id)a8 isClientData:(BOOL)a9 sendTime:(double)a10 stunTransport:(int64_t)a11 packetBuffer:(id *)a12;
- (void)candidatePair:(id)a3 didAddQREvent:(id)a4;
- (void)candidatePair:(id)a3 didReceiveGetMaterialResponse:(id)a4;
- (void)candidatePair:(id)a3 didReceiveMappedParticipantsDict:(id)a4 forLinkID:(char)a5;
- (void)candidatePair:(id)a3 didReceiveParticipantUpdate:(id)a4 status:(unsigned __int16)a5;
- (void)candidatePair:(id)a3 didReceivePluginControlEvent:(unint64_t)a4 operation:(unsigned __int8)a5 transactionID:(id)a6;
- (void)candidatePair:(id)a3 didReceivePluginRegistration:(unint64_t)a4 pluginName:(id)a5;
- (void)candidatePair:(id)a3 didReceivePluginUnregistration:(unint64_t)a4 pluginName:(id)a5;
- (void)candidatePair:(id)a3 didReceivePutMaterialIndication:(id)a4;
- (void)candidatePair:(id)a3 didReceivePutMaterialResponse:(id)a4 forTxId:(unint64_t)a5;
- (void)candidatePair:(id)a3 didReceiveSessionInfo:(id)a4 status:(unsigned int)a5;
- (void)candidatePair:(id)a3 didReceiveSessionStats:(id)a4 success:(BOOL)a5;
- (void)candidatePair:(id)a3 didReceiveStunErrorResponse:(int64_t)a4 errorCode:(unsigned __int16)a5 didLocalExternalAddressChange:(BOOL)a6;
- (void)candidatePair:(id)a3 protoRequestDidTimeOut:(unint64_t)a4;
- (void)connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 completionHandler:(id)a6 withLocalInterfacePreference:(int)a7;
- (void)currentCellularSignalStrength:(int *)a3 signalStrength:(int *)a4 signalGrade:(int *)a5;
- (void)dealloc;
- (void)disconnectIdleQUICConnectionForCandidatePair:(id)a3;
- (void)disconnectWithCompletionHandler:(id)a3 isReinitiating:(BOOL)a4;
- (void)dropIPPackets:(char)a3 payloadArray:(id)a4;
- (void)flushLinkProbingStatus:(id)a3;
- (void)getSessionInfo:(id)a3 relaySessionID:(id)a4 requestType:(int64_t)a5 options:(id)a6;
- (void)handleCellularRATChange;
- (void)handleNetworkAddressChanges:(BOOL)a3 hasIPv6AddressChange:(BOOL)a4;
- (void)invalidate;
- (void)link:(id)a3 didFailConnectionOfType:(id)a4;
- (void)link:(id)a3 didMitigateCollision:(BOOL)a4;
- (void)linkTransactionIDMismatchDetected:(id)a3;
- (void)qrMaterialExchangePutMaterial:(id)a3 completionHandler:(id)a4;
- (void)queryLinkProbingStatus:(id)a3;
- (void)receiveBlockedIndicationWithReason:(unsigned int)a3;
- (void)receiveErrorIndicationWithCode:(unsigned int)a3;
- (void)receiveIdleClientErrorForCandidatePair:(id)a3;
- (void)receiveKeyMaterials:(id)a3;
- (void)registerPluginWithOptions:(id)a3 relayGroupID:(id)a4;
- (void)reportLinkEvent:(id)a3 linkID:(unsigned __int8)a4;
- (void)requestChildConnectionIDForLinkID:(char)a3 relayGroupID:(id)a4;
- (void)requestMaterialsForSession:(id)a3 participantIDs:(id)a4 materialType:(int)a5;
- (void)sendAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 reconnectQUIC:(BOOL)a6;
- (void)sendConnectedLinkInfoToAVC;
- (void)sendProbingRequestWithoptions:(id)a3 candidatePairToken:(id)a4;
- (void)sendStatsRequest:(id)a3;
- (void)sendStatsRequestForClient:(id)a3;
- (void)setAcceptedRelaySession:(id)a3 options:(id)a4;
- (void)setAlternateDelegate:(id)a3;
- (void)setCbuuid:(id)a3;
- (void)setClientUniquePID:(unint64_t)a3;
- (void)setDelegate:(id)a3;
- (void)setDeviceUniqueID:(id)a3;
- (void)setForceTCPFallbackOnCell:(BOOL)a3;
- (void)setForceTCPFallbackOnWiFi:(BOOL)a3;
- (void)setIDSContextBlob:(id)a3;
- (void)setPacketNotificationFilter:(char)a3 uniqueTag:(unsigned int)a4 isEnabled:(BOOL)a5;
- (void)setReceivedRemoteDeviceVersion:(BOOL)a3;
- (void)setRemoteDeviceVersion:(unsigned int)a3;
- (void)setServerDesiredMaterialsForSession:(id)a3 materials:(id)a4 signer:(id)a5;
- (void)setUpP2PQUICPodConnectionsForCandidatePair:(id)a3 attemptID:(unint64_t)a4 completionHandler:(id)a5;
- (void)setWiFiAssistState:(BOOL)a3;
- (void)startLinkProbing:(id)a3;
- (void)startWithOptions:(id)a3;
- (void)stopKeepAlive:(id)a3;
- (void)stopLinkProbing:(id)a3;
- (void)updateProtocolQualityOfService:(char)a3 isGood:(BOOL)a4;
- (void)updateSessionParticipants:(id)a3 relaySessionID:(id)a4 participants:(id)a5;
@end

@implementation IDSGlobalLink

- (IDSGlobalLink)initWithDeviceUniqueID:(id)a3 cbuuid:(id)a4
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  v108.receiver = self;
  v108.super_class = (Class)IDSGlobalLink;
  v9 = [(IDSGlobalLink *)&v108 init];
  v10 = v9;
  if (v9)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_19DA327F4;
    aBlock[3] = &unk_1E5973EF8;
    v11 = v9;
    v107 = v11;
    v12 = _Block_copy(aBlock);
    objc_storeStrong((id *)&v11->_deviceUniqueID, a3);
    objc_storeStrong((id *)&v11->_cbuuid, a4);
    v13 = [IDSUDPLink alloc];
    uint64_t v16 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v13, v14, (uint64_t)v11->_deviceUniqueID, v15, v11->_cbuuid);
    udpLink = v11->_udpLink;
    v11->_udpLink = (IDSUDPLink *)v16;

    objc_msgSend_setDelegate_(v11->_udpLink, v18, (uint64_t)v11, v19);
    v20 = [IDSUDPLink alloc];
    uint64_t v23 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v20, v21, (uint64_t)v11->_deviceUniqueID, v22, v11->_cbuuid);
    udpLinkv6 = v11->_udpLinkv6;
    v11->_udpLinkv6 = (IDSUDPLink *)v23;

    objc_msgSend_setDelegate_(v11->_udpLinkv6, v25, (uint64_t)v11, v26);
    v27 = [IDSTCPLink alloc];
    uint64_t PacketLength = objc_msgSend_initWithDeviceUniqueID_cbuuid_isSSL_getPacketLength_(v27, v28, (uint64_t)v11->_deviceUniqueID, v29, v11->_cbuuid, 0, v12);
    tcpLink = v11->_tcpLink;
    v11->_tcpLink = (IDSTCPLink *)PacketLength;

    objc_msgSend_setDelegate_(v11->_tcpLink, v32, (uint64_t)v11, v33);
    v34 = [IDSTCPLink alloc];
    uint64_t v37 = objc_msgSend_initWithDeviceUniqueID_cbuuid_isSSL_getPacketLength_(v34, v35, (uint64_t)v11->_deviceUniqueID, v36, v11->_cbuuid, 1, v12);
    tcpSSLLink = v11->_tcpSSLLink;
    v11->_tcpSSLLink = (IDSTCPLink *)v37;

    objc_msgSend_setDelegate_(v11->_tcpSSLLink, v39, (uint64_t)v11, v40);
    v41 = [IDSNWLink alloc];
    uint64_t v44 = objc_msgSend_initWithDeviceUniqueID_cbuuid_(v41, v42, (uint64_t)v11->_deviceUniqueID, v43, v11->_cbuuid);
    nwLink = v11->_nwLink;
    v11->_nwLink = (IDSNWLink *)v44;

    objc_msgSend_setDelegate_(v11->_nwLink, v46, (uint64_t)v11, v47);
    double v48 = ids_monotonic_time();
    v11->_previousReportTime = v48;
    v51 = objc_msgSend_sharedInstance(IDSServerBag, v49, v50, v48);
    v54 = objc_msgSend_objectForKey_(v51, v52, @"ids-fallback-to-tcp-first", v53);
    v11->_shouldFallbackToTCPFirst = objc_msgSend_BOOLValue(v54, v55, v56, v57);

    v61 = objc_msgSend_sharedInstance(IDSServerBag, v58, v59, v60);
    uint64_t v64 = objc_msgSend_objectForKey_(v61, v62, @"ids-disable-pure-link-feature", v63);
    v11->_disablePureLinkFeature = objc_msgSend_BOOLValue((void *)v64, v65, v66, v67);

    IDSSimpleUInt16List_Init((uint64_t)&v11->_channelNumberList, 16);
    IDSSimpleUInt16List_Init((uint64_t)&v11->_reallocChannelList, 16);
    v11->_natMappingTimeout = 35.0;
    v11->_nat64PrefixCache = (IDSNAT64PrefixCache_ *)IDSNAT64PrefixCacheCreate();
    IDSQRSendInfoList_Init((uint64_t)&v11->_sendInfoList, 4);
    v11->_remoteGlobalLinkVersion = -1;
    v68 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    activeProbingLinkIDs = v11->_activeProbingLinkIDs;
    v11->_activeProbingLinkIDs = v68;

    v70 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    pluginParticipantIDs = v11->_pluginParticipantIDs;
    v11->_pluginParticipantIDs = v70;

    v72 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    pluginNameToPluginOptionsDict = v11->_pluginNameToPluginOptionsDict;
    v11->_pluginNameToPluginOptionsDict = v72;

    v74 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    putMaterialReqTxIdToCompletionBlock = v11->_putMaterialReqTxIdToCompletionBlock;
    v11->_putMaterialReqTxIdToCompletionBlock = v74;

    v79 = objc_msgSend_sharedInstance(IDSServerBag, v76, v77, v78);
    v82 = objc_msgSend_objectForKey_(v79, v80, @"ids-disable-server-material-exchange", v81);
    LOBYTE(v64) = objc_msgSend_BOOLValue(v82, v83, v84, v85);

    if ((v64 & 1) == 0 && (_os_feature_enabled_impl() & 1) == 0)
    {
      v89 = [IDSServerMaterialExchangeController alloc];
      uint64_t v92 = objc_msgSend_initWithDelegate_(v89, v90, (uint64_t)v11, v91);
      serverMaterialExchangeController = v11->_serverMaterialExchangeController;
      v11->_serverMaterialExchangeController = (IDSServerMaterialExchangeController *)v92;
    }
    uint64_t v94 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v86, v87, v88);
    unusedLinkIDs = v11->_unusedLinkIDs;
    v11->_unusedLinkIDs = (NSMutableArray *)v94;

    int v96 = IMGetDomainIntForKey();
    int v100 = (char)v96;
    if (v96 << 24 < 0x1000000) {
      int v100 = 127;
    }
    v11->_int maxLinkID = v100;
    uint64_t v101 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v97, v98, v99);
    usedLocalConnectionIDs = v11->_usedLocalConnectionIDs;
    v11->_usedLocalConnectionIDs = (NSMutableSet *)v101;

    v103 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      int maxLinkID = v11->_maxLinkID;
      *(_DWORD *)buf = 67109120;
      int v110 = maxLinkID;
      _os_log_impl(&dword_19D9BE000, v103, OS_LOG_TYPE_DEFAULT, "initWithDeviceUniqueID: setting max link ID to %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"initWithDeviceUniqueID: setting max link ID to %d");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"initWithDeviceUniqueID: setting max link ID to %d");
        }
      }
    }
  }
  return v10;
}

- (void)dealloc
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v6 = self;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Dealloc IDSGlobalLink %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"Dealloc IDSGlobalLink %@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Dealloc IDSGlobalLink %@.");
      }
    }
  }
  IDSSimpleUInt16List_Destroy(&self->_channelNumberList.listSize);
  IDSSimpleUInt16List_Destroy(&self->_reallocChannelList.listSize);
  IDSNAT64PrefixCacheDestroy(self->_nat64PrefixCache);
  IDSQRSendInfoList_Destroy(self->_sendInfoList);
  self->_cellularSlicingFlags = 0;
  v4.receiver = self;
  v4.super_class = (Class)IDSGlobalLink;
  [(IDSGlobalLink *)&v4 dealloc];
}

- (void)invalidate
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v90 = self;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "Invalidate IDSGlobalLink %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v86 = self;
      _IDSLogTransport(@"GL", @"IDS", @"Invalidate IDSGlobalLink %@.");
      if (_IDSShouldLog())
      {
        v86 = self;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Invalidate IDSGlobalLink %@.");
      }
    }
  }
  objc_msgSend_invalidate(self->_udpLink, v4, v5, v6, v86);
  objc_msgSend_invalidate(self->_udpLinkv6, v7, v8, v9);
  objc_msgSend_invalidate(self->_tcpLink, v10, v11, v12);
  objc_msgSend_invalidate(self->_tcpSSLLink, v13, v14, v15);
  objc_msgSend_invalidate(self->_nwLink, v16, v17, v18);
  objc_msgSend__stopAllocbindFailoverTimer_(self, v19, 0, v20);
  serverMaterialExchangeController = self->_serverMaterialExchangeController;
  if (serverMaterialExchangeController)
  {
    v25 = objc_msgSend_currentlySentMaterials(self->_serverMaterialExchangeController, v21, v22, v23);
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v26, (uint64_t)v25, v27);
  }
  quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
  if (quicMaterialExchangeProvider) {
    objc_msgSend_invalidate(quicMaterialExchangeProvider, v21, v22, v23);
  }
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_tokenToCandidatePairs, v21, (uint64_t)&unk_1EEFCD558, v23);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_linkIDToCandidatePairs, v29, (uint64_t)&unk_1EEFCD978, v30);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_channelToCandidatePairs, v31, (uint64_t)&unk_1EEFCD1D8, v32);
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(self->_tokenToStunCheckPairs, v33, (uint64_t)&unk_1EEFCD9F8, v34);
  tokenToCandidatePairs = self->_tokenToCandidatePairs;
  self->_tokenToCandidatePairs = 0;

  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  self->_linkIDToCandidatePairs = 0;

  channelToCandidatePairs = self->_channelToCandidatePairs;
  self->_channelToCandidatePairs = 0;

  tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
  self->_tokenToStunCheckPairs = 0;

  reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
  self->_reallocNewCandidatePairToOldCandidatePair = 0;

  retryCountPerLinkType = self->_retryCountPerLinkType;
  self->_retryCountPerLinkType = 0;

  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  self->_transactionIDToRequestMetadata = 0;

  startTimeToStunReqID = self->_startTimeToStunReqID;
  self->_startTimeToStunReqID = 0;

  tokenToStunReqID = self->_tokenToStunReqID;
  self->_tokenToStunReqID = 0;

  tokenToReallocBlocks = self->_tokenToReallocBlocks;
  self->_tokenToReallocBlocks = 0;

  localCandidateList = self->_localCandidateList;
  self->_localCandidateList = 0;

  remoteCandidateList = self->_remoteCandidateList;
  self->_remoteCandidateList = 0;

  nonAcceptedQRSessions = self->_nonAcceptedQRSessions;
  self->_nonAcceptedQRSessions = 0;

  delayedCellInterfaces = self->_delayedCellInterfaces;
  self->_delayedCellInterfaces = 0;

  allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  self->_allocateTimeReportBlocks = 0;

  qraBlocks = self->_qraBlocks;
  self->_qraBlocks = 0;

  selfAllocateRequestIDs = self->_selfAllocateRequestIDs;
  self->_selfAllocateRequestIDs = 0;

  id connectReadyHandler = self->_connectReadyHandler;
  self->_id connectReadyHandler = 0;

  connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
  self->_connectingCandidatePairSessionInfo = 0;

  unallocbindRequestToReason = self->_unallocbindRequestToReason;
  self->_unallocbindRequestToReason = 0;

  connectedLinkIDs = self->_connectedLinkIDs;
  self->_connectedLinkIDs = 0;

  activeProbingLinkIDs = self->_activeProbingLinkIDs;
  self->_activeProbingLinkIDs = 0;

  pluginParticipantIDs = self->_pluginParticipantIDs;
  self->_pluginParticipantIDs = 0;

  pluginNameToPluginOptionsDict = self->_pluginNameToPluginOptionsDict;
  self->_pluginNameToPluginOptionsDict = 0;

  linkIDToStatsData = self->_linkIDToStatsData;
  self->_linkIDToStatsData = 0;

  putMaterialReqTxIdToCompletionBlock = self->_putMaterialReqTxIdToCompletionBlock;
  self->_putMaterialReqTxIdToCompletionBlock = 0;

  linkIDToReorderedPackets = self->_linkIDToReorderedPackets;
  self->_linkIDToReorderedPackets = 0;

  linkIDToRequestTimeStampAndRTT = self->_linkIDToRequestTimeStampAndRTT;
  self->_linkIDToRequestTimeStampAndRTT = 0;

  linkIDToHBCounter = self->_linkIDToHBCounter;
  self->_linkIDToHBCounter = 0;

  avcDataBlob = self->_avcDataBlob;
  self->_avcDataBlob = 0;

  QRServerDataBlob = self->_QRServerDataBlob;
  self->_QRServerDataBlob = 0;

  objc_msgSend__stopDisconnectTimer(self, v66, v67, v68);
  objc_msgSend__stopActivityTimer(self, v69, v70, v71);
  nw_path_evaluator_cancel();
  wifiPathEvaluator = self->_wifiPathEvaluator;
  self->_wifiPathEvaluator = 0;

  nw_path_evaluator_cancel();
  cellularPathEvaluator = self->_cellularPathEvaluator;
  self->_cellularPathEvaluator = 0;

  self->_remoteDeviceVersion = 0;
  uint64_t v77 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v74, v75, v76);
  objc_msgSend_setRemoteDeviceVersion_(v77, v78, self->_remoteDeviceVersion, v79);

  id disconnectCompletionHandler = self->_disconnectCompletionHandler;
  if (disconnectCompletionHandler)
  {
    double v81 = _Block_copy(disconnectCompletionHandler);
    v82 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA32FD0;
    block[3] = &unk_1E5973F20;
    id v88 = v81;
    id v83 = v81;
    dispatch_block_t v84 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    dispatch_async(v82, v84);

    id v85 = self->_disconnectCompletionHandler;
  }
  else
  {
    id v85 = 0;
  }
  self->_id disconnectCompletionHandler = 0;
}

- (id)_getLink:(int)a3 stunTransport:(int64_t)a4
{
  if (a4 == 4)
  {
    BOOL v4 = !self->_H2FallbackEnabled;
    uint64_t v5 = 32;
    uint64_t v6 = 40;
LABEL_5:
    if (v4) {
      uint64_t v5 = v6;
    }
    return *(id *)((char *)&self->super.isa + v5);
  }
  if (a4 == 3)
  {
    BOOL v4 = !self->_H2FallbackEnabled;
    uint64_t v5 = 48;
    uint64_t v6 = 32;
    goto LABEL_5;
  }
  uint64_t v7 = 24;
  if (a3 == 2) {
    uint64_t v7 = 16;
  }
  if (self->_QUICForQREnabled) {
    uint64_t v5 = 48;
  }
  else {
    uint64_t v5 = v7;
  }
  return *(id *)((char *)&self->super.isa + v5);
}

- (void)_callDisconnectCompletionHandler:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = _Block_copy(self->_disconnectCompletionHandler);
    *(_DWORD *)buf = 134218242;
    uint64_t v22 = v6;
    __int16 v23 = 2112;
    id v24 = v4;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "call disconnect completion handler %p error:%@", buf, 0x16u);
  }
  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v16 = _Block_copy(self->_disconnectCompletionHandler);
      _IDSLogTransport(@"GL", @"IDS", @"call disconnect completion handler %p error:%@");

      if (_IDSShouldLog())
      {
        uint64_t v17 = _Block_copy(self->_disconnectCompletionHandler);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"call disconnect completion handler %p error:%@");
      }
    }
  }
  uint64_t v7 = _Block_copy(self->_disconnectCompletionHandler);
  if (v7)
  {
    uint64_t v8 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA332D8;
    block[3] = &unk_1E5970A78;
    id v20 = v7;
    id v19 = v4;
    dispatch_block_t v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    dispatch_async(v8, v9);

    id disconnectCompletionHandler = self->_disconnectCompletionHandler;
    self->_id disconnectCompletionHandler = 0;

    id v11 = v20;
LABEL_11:

    goto LABEL_12;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v13 = objc_opt_respondsToSelector();

  if (v13)
  {
    id v11 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v11, v14, (uint64_t)self, v15, 0, self->_cbuuid);
    goto LABEL_11;
  }
LABEL_12:
}

- (id)_createInterfaceAddressArray:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 24;
  if (!a3) {
    uint64_t v9 = 16;
  }
  id v11 = *(id *)((char *)&self->super.isa + v9);
  if (!self->_startPort) {
    goto LABEL_23;
  }
  unsigned __int16 v13 = self->_startPort + LOWORD(self->_portRange) - 1;
  uint64_t v14 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int startPort = self->_startPort;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)double v48 = startPort;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)&v48[6] = v13;
    *(_WORD *)&v48[10] = 1024;
    *(_DWORD *)&v48[12] = a3;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "use port range [%u, %u] for IPVersion %d.", buf, 0x14u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    uint64_t v45 = v13;
    unint64_t v46 = a3;
    uint64_t v44 = self->_startPort;
    _IDSLogV(0, @"IDSFoundation", @"GL", @"use port range [%u, %u] for IPVersion %d.");
  }
  unsigned int v18 = self->_startPort;
  if (v18 >= v13)
  {
LABEL_12:
    objc_msgSend_setPort_(v11, v16, 0, v17, v44);
    objc_msgSend_setCellularPort_(v11, v28, 0, v29);
    double v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = self->_startPort;
      double v32 = "IPv6";
      *(_DWORD *)buf = 67109634;
      if (!a3) {
        double v32 = "IPv4";
      }
      *(_DWORD *)double v48 = v31;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v13;
      *(_WORD *)&v48[10] = 2080;
      *(void *)&v48[12] = v32;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "all tries failed to bind port range [%u,%u] for %s, trying random port.", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      double v33 = a3 ? "IPv6" : "IPv4";
      uint64_t v45 = v13;
      unint64_t v46 = (unint64_t)v33;
      uint64_t v44 = self->_startPort;
      _IDSLogTransport(@"GL", @"IDS", @"all tries failed to bind port range [%u,%u] for %s, trying random port.");
      if (_IDSShouldLog())
      {
        uint64_t v45 = v13;
        unint64_t v46 = (unint64_t)v33;
        uint64_t v44 = self->_startPort;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"all tries failed to bind port range [%u,%u] for %s, trying random port.");
      }
    }
LABEL_23:
    double v26 = objc_msgSend_newSocketWithIPVersion_wantsAWDL_wantsWiFi_wantsCellular_clientUUID_(v11, v10, a3, v12, 0, v6, v5, self->_clientUUID, v44, v45, v46);
    if (v26)
    {
      double v34 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = "IPv6";
        if (!a3) {
          v35 = "IPv4";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)double v48 = v35;
        _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "bind to random port succeeded for %s.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"bind to random port succeeded for %s.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"bind to random port succeeded for %s.");
          }
        }
      }
    }
    else
    {
      double v36 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "failed binding to random port, remove socket.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed binding to random port, remove socket.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed binding to random port, remove socket.");
          }
        }
      }
      objc_msgSend_removeSocket(v11, v37, v38, v39);
    }
    goto LABEL_47;
  }
  while (1)
  {
    objc_msgSend_setPort_(v11, v16, (unsigned __int16)v18, v17, v44, v45, v46);
    unsigned __int16 v19 = v18 + 1;
    objc_msgSend_setCellularPort_(v11, v20, (unsigned __int16)(v18 + 1), v21);
    double v26 = objc_msgSend_newSocketWithIPVersion_wantsAWDL_wantsWiFi_wantsCellular_clientUUID_(v11, v22, a3, v23, 0, v6, v5, self->_clientUUID);
    if (v26) {
      break;
    }
    objc_msgSend_removeSocket(v11, v24, v25, v27);
    LOWORD(v18) = v18 + 1;
    if (v13 <= v19) {
      goto LABEL_12;
    }
  }
  double v40 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    v41 = "IPv6";
    if (!a3) {
      v41 = "IPv4";
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)double v48 = (unsigned __int16)v18;
    *(_WORD *)&v48[4] = 2080;
    *(void *)&v48[6] = v41;
    _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "bind to udp port %u succeeded for %s.", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"bind to udp port %u succeeded for %s.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"bind to udp port %u succeeded for %s.");
      }
    }
  }
LABEL_47:
  id v42 = v26;

  return v42;
}

- (void)_delayProcessingCellularInterfaces:(id)a3
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef theArray = (CFMutableArrayRef)a3;
  BOOL v6 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v3, v4, v5);
  int v10 = objc_msgSend_dataUsable(v6, v7, v8, v9);

  if (!v10)
  {
    double v71 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    obuint64_t j = theArray;
    uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v36, (uint64_t)&v79, v37, v88, 16);
    if (!v40) {
      goto LABEL_57;
    }
    uint64_t v73 = *(void *)v80;
    uint64_t v41 = 138412290;
    while (1)
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v80 != v73) {
          objc_enumerationMutation(obj);
        }
        double v43 = *(NSMutableArray **)(*((void *)&v79 + 1) + 8 * i);
        if (objc_msgSend_isCellular(v43, v38, v39, *(double *)&v41, v69))
        {
          if (v71 && v43) {
            CFArrayAppendValue(v71, v43);
          }
          uint64_t v44 = objc_msgSend_address(v43, v38, v39, *(double *)&v41);
          uint64_t v48 = objc_msgSend_sa(v44, v45, v46, v47);

          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          uint64_t v49 = self->_delayedCellInterfaces;
          uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v75, v51, v87, 16);
          if (v54)
          {
            uint64_t v56 = *(void *)v76;
            while (2)
            {
              for (uint64_t j = 0; j != v54; ++j)
              {
                if (*(void *)v76 != v56) {
                  objc_enumerationMutation(v49);
                }
                v58 = objc_msgSend_address(*(void **)(*((void *)&v75 + 1) + 8 * j), v52, v53, v55);
                uint64_t v62 = objc_msgSend_sa(v58, v59, v60, v61);

                if (IsSameSA(v48, v62))
                {

                  goto LABEL_55;
                }
              }
              uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v52, (uint64_t)&v75, v55, v87, 16);
              if (v54) {
                continue;
              }
              break;
            }
          }

          delayedCellInterfaces = self->_delayedCellInterfaces;
          if (delayedCellInterfaces)
          {
            if (!v43) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v64 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
            v65 = self->_delayedCellInterfaces;
            self->_delayedCellInterfaces = v64;

            delayedCellInterfaces = self->_delayedCellInterfaces;
            if (!v43)
            {
LABEL_49:
              uint64_t v66 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v91 = v43;
                _os_log_impl(&dword_19D9BE000, v66, OS_LOG_TYPE_DEFAULT, "delay processing cell interface %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v69 = v43;
                  _IDSLogTransport(@"GL", @"IDS", @"delay processing cell interface %@.");
                  if (_IDSShouldLog())
                  {
                    v69 = v43;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"delay processing cell interface %@.");
                  }
                }
              }
              continue;
            }
          }
          if (delayedCellInterfaces) {
            CFArrayAppendValue((CFMutableArrayRef)delayedCellInterfaces, v43);
          }
          goto LABEL_49;
        }
LABEL_55:
        ;
      }
      uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v38, (uint64_t)&v79, *(double *)&v41, v88, 16);
      if (!v40)
      {
LABEL_57:

        objc_msgSend_removeObjectsInArray_(obj, v67, (uint64_t)v71, v68);
        v35 = (NSMutableArray *)v71;
        goto LABEL_58;
      }
    }
  }
  if (self->_delayedCellInterfaces)
  {
    id v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = self->_delayedCellInterfaces;
      *(_DWORD *)buf = 138412290;
      uint64_t v91 = v12;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "add delayed cell interfaces: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v69 = self->_delayedCellInterfaces;
        _IDSLogTransport(@"GL", @"IDS", @"add delayed cell interfaces: %@.");
        if (_IDSShouldLog())
        {
          v69 = self->_delayedCellInterfaces;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"add delayed cell interfaces: %@.");
        }
      }
    }
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    unsigned __int16 v13 = self->_delayedCellInterfaces;
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v83, v15, v89, 16);
    if (v17)
    {
      uint64_t v19 = *(void *)v84;
      do
      {
        for (uint64_t k = 0; k != v17; ++k)
        {
          if (*(void *)v84 != v19) {
            objc_enumerationMutation(v13);
          }
          double v21 = *(void **)(*((void *)&v83 + 1) + 8 * k);
          int v22 = objc_msgSend_containsObject_(theArray, v16, (uint64_t)v21, v18, v69);
          if (v21) {
            BOOL v26 = theArray == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (!v26 && v22 != 1) {
            CFArrayAppendValue(theArray, v21);
          }
          if (objc_msgSend_IPVersion(v21, v23, v24, v25) == 1)
          {
            uint64_t v28 = objc_msgSend_index(v21, v16, v27, v18);
            double v32 = objc_msgSend_name(v21, v29, v30, v31);
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v33, v28, v34, v32, 0);
          }
        }
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v83, v18, v89, 16);
      }
      while (v17);
    }

    v35 = self->_delayedCellInterfaces;
    self->_delayedCellInterfaces = 0;
LABEL_58:
  }
}

- (void)_getNAT64PrefixForInterface:(int)a3 interfaceName:(id)a4 completionBlock:(id)a5
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  int v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v16 = v8;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "[%@:%d] needs nat64 prefix.", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"[%@:%d] needs nat64 prefix.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"[%@:%d] needs nat64 prefix.");
      }
    }
  }
  if (IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, a3))
  {
    id v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = a3;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "nat64 prefix cache hit for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"nat64 prefix cache hit for if:%d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"nat64 prefix cache hit for if:%d.");
        }
      }
    }
    self->_hasPendingAllocation = 0;
  }
  else
  {
    double v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v16) = a3;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "waiting nat64 prefix for if:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"waiting nat64 prefix for if:%d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"waiting nat64 prefix for if:%d.");
        }
      }
    }
    *(_DWORD *)buf = a3;
    unsigned __int16 v13 = im_primary_queue();
    id v14 = v9;
    nw_nat64_copy_prefixes_async();
  }
}

- (BOOL)_synthesizeNAT64ForAddress:(sockaddr *)a3 withPrefix:(id *)a4 toAddress:(sockaddr *)a5
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v5;
  long long v32 = v5;
  long long v29 = v5;
  long long v30 = v5;
  long long v27 = v5;
  long long v28 = v5;
  *(_OWORD *)__str = v5;
  long long v26 = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  long long v20 = v5;
  *(_OWORD *)__int16 v17 = v5;
  long long v18 = v5;
  if (a4)
  {
    if (a3->sa_family == 2)
    {
      if (nw_nat64_synthesize_v6())
      {
        *(_WORD *)&a5->sa_len = 7708;
        *(_WORD *)a5->sa_data = *(_WORD *)a3->sa_data;
        SAToIPPortString(__str, 0x80uLL, (uint64_t)a3);
        SAToIPPortString(v17, 0x80uLL, (uint64_t)a5);
        id v8 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          id v14 = __str;
          __int16 v15 = 2080;
          id v16 = v17;
          _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: nat64 translation: %s -> %s.", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"_synthesizeNAT64ForAddress: nat64 translation: %s -> %s.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"_synthesizeNAT64ForAddress: nat64 translation: %s -> %s.");
            }
          }
        }
      }
      LOBYTE(v9) = 1;
      return v9;
    }
    id v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: address is not AF_INET", buf, 2u);
    }

    int v9 = os_log_shim_legacy_logging_enabled();
    if (v9)
    {
      int v9 = _IDSShouldLogTransport();
      if (v9)
      {
        _IDSLogTransport(@"GL", @"IDS", @"_synthesizeNAT64ForAddress: address is not AF_INET");
        int v9 = _IDSShouldLog();
        if (v9)
        {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_synthesizeNAT64ForAddress: address is not AF_INET");
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    int v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix.", buf, 2u);
    }

    int v9 = os_log_shim_legacy_logging_enabled();
    if (v9)
    {
      int v9 = _IDSShouldLogTransport();
      if (v9)
      {
        _IDSLogTransport(@"GL", @"IDS", @"_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix.");
        int v9 = _IDSShouldLog();
        if (v9)
        {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_synthesizeNAT64ForAddress: nat64 translation failed due to invalid prefix.");
LABEL_23:
          LOBYTE(v9) = 0;
        }
      }
    }
  }
  return v9;
}

- (id)_addSocketAndInterfaceAddress:(unint64_t)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v8 = objc_msgSend__createInterfaceAddressArray_wantsWiFi_wantsCellular_(self, a2, a3, v5, a4, a5);
  double v12 = objc_msgSend_mutableCopy(v8, v9, v10, v11);

  if (v12)
  {
    id v16 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
    char v20 = objc_msgSend_dataUsable(v16, v17, v18, v19);

    if ((v20 & 1) == 0) {
      objc_msgSend__delayProcessingCellularInterfaces_(self, v21, (uint64_t)v12, v23);
    }
    if (a3 == 1)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v24 = v12;
      uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v47, v26, v51, 16);
      if (v29)
      {
        uint64_t v31 = *(void *)v48;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v48 != v31) {
              objc_enumerationMutation(v24);
            }
            uint64_t v33 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            uint64_t v34 = objc_msgSend_index(v33, v27, v28, v30);
            uint64_t v38 = objc_msgSend_name(v33, v35, v36, v37);
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v39, v34, v40, v38, 0);
          }
          uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v27, (uint64_t)&v47, v30, v51, 16);
        }
        while (v29);
      }
    }
    if (objc_msgSend_count(v12, v21, v22, v23)) {
      objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v41, (uint64_t)v12, v42, 0);
    }
    id v43 = v12;
  }
  else
  {
    uint64_t v44 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = "IPv6";
      if (!a3) {
        uint64_t v45 = "IPv4";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v53 = v45;
      _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "failed to create interface address array for %s.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to create interface address array for %s.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create interface address array for %s.");
        }
      }
    }
  }

  return v12;
}

- (void)_parseClientUUID:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  clientUUID = self->_clientUUID;
  uuid_clear(self->_clientUUID);
  if (v4)
  {
    int v9 = objc_msgSend_UUIDString(v4, v6, v7, v8);
    uint64_t v10 = v9;
    if (v9)
    {
      id v11 = v9;
      double v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
      id v16 = v15;
      if (v15 && !uuid_parse(v15, clientUUID))
      {
        double v19 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          long long v21 = v16;
          _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "Client UUID: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"Client UUID: %s");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"Client UUID: %s");
            }
          }
        }
      }
      else
      {
        __int16 v17 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = "null";
          if (v16) {
            uint64_t v18 = v16;
          }
          *(_DWORD *)buf = 136315138;
          long long v21 = v18;
          _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "Invalid client UUID: %s", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"Invalid client UUID: %s");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"Invalid client UUID: %s");
            }
          }
        }
      }
    }
  }
}

+ (Class)getGLClassWithOptions:(id)a3
{
  CFDictionaryRef v5 = (const __CFDictionary *)a3;
  Value = 0;
  if (v5)
  {
    v3 = (const char *)@"gl-option-client-type";
    if (@"gl-option-client-type") {
      Value = (void *)CFDictionaryGetValue(v5, @"gl-option-client-type");
    }
  }
  int v10 = objc_msgSend_unsignedIntValue(Value, v3, v4, v6);
  double v12 = 0;
  if (v5)
  {
    double v8 = (const char *)@"is-multiway-key";
    if (@"is-multiway-key") {
      double v12 = (void *)CFDictionaryGetValue(v5, @"is-multiway-key");
    }
  }
  int v13 = objc_msgSend_BOOLValue(v12, v8, v9, v11);
  if (v10 > 4)
  {
    if ((v10 - 5) >= 2 && v10 != 100) {
      goto LABEL_32;
    }
    goto LABEL_16;
  }
  if (v10 == 1)
  {
LABEL_16:
    if (!v13)
    {
      __int16 v17 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v23 = 0;
        _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for FT", v23, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v16 = @"Selecting GlobalLink for FT";
          _IDSLogTransport(@"GL", @"IDS", @"Selecting GlobalLink for FT");
          if (_IDSShouldLog()) {
            goto LABEL_37;
          }
        }
      }
      goto LABEL_38;
    }
    double v14 = OSLogHandleForTransportCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_WORD *)buf = 0;
    double v15 = buf;
    goto LABEL_19;
  }
  if (v10 != 2 || !v13)
  {
LABEL_32:
    uint64_t v18 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v21 = 0;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for NonFT", v21, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v16 = @"Selecting GlobalLink for NonFT";
        _IDSLogTransport(@"GL", @"IDS", @"Selecting GlobalLink for NonFT");
        if (_IDSShouldLog()) {
          goto LABEL_37;
        }
      }
    }
    goto LABEL_38;
  }
  double v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v22 = 0;
    double v15 = (uint8_t *)&v22;
LABEL_19:
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "Selecting GlobalLink for GFT", v15, 2u);
  }
LABEL_20:

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v16 = @"Selecting GlobalLink for GFT";
      _IDSLogTransport(@"GL", @"IDS", @"Selecting GlobalLink for GFT");
      if (_IDSShouldLog()) {
LABEL_37:
      }
        _IDSLogV(0, @"IDSFoundation", @"GL", v16);
    }
  }
LABEL_38:
  double v19 = objc_opt_class();

  return (Class)v19;
}

- (void)startWithOptions:(id)a3
{
  uint64_t v368 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v4 = (const __CFDictionary *)a3;
  uint64_t v5 = objc_opt_class();
  CFDictionaryRef theDict = v4;
  if (v5 == objc_opt_class())
  {
    double v19 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v6, v7, v8);
    double v23 = objc_msgSend_processName(v19, v20, v21, v22);
    IMLogSimulateCrashForProcess();

    goto LABEL_431;
  }
  Value = 0;
  if (v4 && @"gl-option-metrics-collector-key") {
    Value = (void *)CFDictionaryGetValue(v4, @"gl-option-metrics-collector-key");
  }
  p_metricsCollector = (void **)&self->_metricsCollector;
  objc_storeStrong((id *)&self->_metricsCollector, Value);
  double v11 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = *p_metricsCollector;
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v12;
    _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "startWithOptions: MetricsCollector: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      v336 = *p_metricsCollector;
      _IDSLogTransport(@"GL", @"IDS", @"startWithOptions: MetricsCollector: %@");
      if (_IDSShouldLog())
      {
        v336 = *p_metricsCollector;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"startWithOptions: MetricsCollector: %@");
      }
    }
  }
  BOOL v16 = v4 != 0;
  objc_msgSend_globalLinkStart(*p_metricsCollector, v13, v14, v15, v336);
  if (@"gl-option-p2p-negotiator-key") {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17) {
    uint64_t v18 = (void *)CFDictionaryGetValue(theDict, @"gl-option-p2p-negotiator-key");
  }
  else {
    uint64_t v18 = 0;
  }
  objc_storeStrong((id *)&self->_p2pNegotiatorProvider, v18);
  double v26 = (const char *)@"gl-option-disallow-wifi";
  if (@"gl-option-disallow-wifi") {
    BOOL v27 = theDict != 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (v27) {
    uint64_t v28 = (void *)CFDictionaryGetValue(theDict, @"gl-option-disallow-wifi");
  }
  else {
    uint64_t v28 = 0;
  }
  int v351 = objc_msgSend_BOOLValue(v28, v26, v24, v25);
  self->_disallowWiFuint64_t i = v351;
  if (v351)
  {
    long long v32 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "client disallows WiFi.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"client disallows WiFi.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"client disallows WiFi.");
        }
      }
    }
  }
  uint64_t v33 = 0;
  if (theDict)
  {
    uint64_t v29 = (const char *)@"gl-option-disallow-cellular";
    if (@"gl-option-disallow-cellular") {
      uint64_t v33 = (void *)CFDictionaryGetValue(theDict, @"gl-option-disallow-cellular");
    }
  }
  int v350 = objc_msgSend_BOOLValue(v33, v29, v30, v31);
  self->_disallowCellular = v350;
  if (v350)
  {
    double v37 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v37, OS_LOG_TYPE_DEFAULT, "client disallows Cellular.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"client disallows Cellular.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"client disallows Cellular.");
        }
      }
    }
  }
  else
  {
    uint64_t v41 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v34, v35, v36);
    objc_msgSend_reset(v41, v42, v43, v44);

    long long v48 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v45, v46, v47);
    objc_msgSend_setRemoteDeviceVersion_(v48, v49, self->_remoteDeviceVersion, v50);
  }
  double v51 = 0;
  if (theDict)
  {
    uint64_t v38 = (const char *)@"gl-option-prefer-cellular-for-call-setup";
    if (@"gl-option-prefer-cellular-for-call-setup") {
      double v51 = (void *)CFDictionaryGetValue(theDict, @"gl-option-prefer-cellular-for-call-setup");
    }
  }
  int v52 = objc_msgSend_BOOLValue(v51, v38, v39, v40);
  self->_preferCellularForCallSetup = v52;
  if (v52)
  {
    uint64_t v56 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v56, OS_LOG_TYPE_DEFAULT, "client prefers using cellular for call setup.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"client prefers using cellular for call setup.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"client prefers using cellular for call setup.");
        }
      }
    }
  }
  double v57 = 0;
  CFDictionaryRef v58 = theDict;
  if (theDict)
  {
    uint64_t v53 = (const char *)@"gl-option-client-type";
    if (@"gl-option-client-type")
    {
      double v57 = (void *)CFDictionaryGetValue(theDict, @"gl-option-client-type");
      CFDictionaryRef v58 = theDict;
    }
  }
  BOOL v59 = v58 != 0;
  self->_int64_t clientType = objc_msgSend_unsignedIntValue(v57, v53, v54, v55);
  uint64_t v62 = (const char *)@"gl-option-is-gft-service";
  if (@"gl-option-is-gft-service") {
    BOOL v63 = v59;
  }
  else {
    BOOL v63 = 0;
  }
  if (v63) {
    uint64_t v64 = (void *)CFDictionaryGetValue(theDict, @"gl-option-is-gft-service");
  }
  else {
    uint64_t v64 = 0;
  }
  self->_isAutoDisconnectSupportedForGFTService = objc_msgSend_BOOLValue(v64, v62, v60, v61);
  uint64_t v67 = (const char *)@"gs-is-lightweight-participant-key";
  if (@"gs-is-lightweight-participant-key") {
    BOOL v68 = theDict != 0;
  }
  else {
    BOOL v68 = 0;
  }
  if (v68) {
    v69 = (void *)CFDictionaryGetValue(theDict, @"gs-is-lightweight-participant-key");
  }
  else {
    v69 = 0;
  }
  self->_isLightweightParticipant = objc_msgSend_BOOLValue(v69, v67, v65, v66);
  if (@"participant-data-key") {
    BOOL v70 = theDict != 0;
  }
  else {
    BOOL v70 = 0;
  }
  if (v70) {
    double v71 = (void *)CFDictionaryGetValue(theDict, @"participant-data-key");
  }
  else {
    double v71 = 0;
  }
  objc_storeStrong((id *)&self->_avcDataBlob, v71);
  v72 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v73 = @"YES";
    if (self->_isLightweightParticipant) {
      v74 = @"YES";
    }
    else {
      v74 = @"NO";
    }
    avcDataBlob = self->_avcDataBlob;
    if (!self->_isAutoDisconnectSupportedForGFTService) {
      uint64_t v73 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    *(void *)v357 = v74;
    *(_WORD *)&v357[8] = 2112;
    *(void *)&v357[10] = avcDataBlob;
    __int16 v358 = 2112;
    v359 = v73;
    _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    long long v79 = self->_isLightweightParticipant ? @"YES" : @"NO";
    long long v80 = self->_isAutoDisconnectSupportedForGFTService ? @"YES" : @"NO";
    v342 = self->_avcDataBlob;
    v345 = v80;
    v337 = v79;
    _IDSLogTransport(@"GL", @"IDS", @"_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@");
    if (_IDSShouldLog())
    {
      if (self->_isLightweightParticipant) {
        long long v81 = @"YES";
      }
      else {
        long long v81 = @"NO";
      }
      if (self->_isAutoDisconnectSupportedForGFTService) {
        long long v82 = @"YES";
      }
      else {
        long long v82 = @"NO";
      }
      v342 = self->_avcDataBlob;
      v345 = v82;
      v337 = v81;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"_isLightweightParticipant: %@, avcDataBlob: %@, _isAutoDisconnectSupportedForGFTService: %@");
    }
  }
  long long v83 = 0;
  if (theDict)
  {
    long long v76 = (const char *)@"gl-option-enable-ske";
    if (@"gl-option-enable-ske") {
      long long v83 = (void *)CFDictionaryGetValue(theDict, @"gl-option-enable-ske");
    }
  }
  if (objc_msgSend_BOOLValue(v83, v76, v77, v78, v337, v342, v345))
  {
    self->_enableSKE = 1;
    long long v84 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "Enable SKE for FaceTime call.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Enable SKE for FaceTime call.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Enable SKE for FaceTime call.");
        }
      }
    }
  }
  else
  {
    self->_enableSKE = IMGetDomainBoolForKey();
    uint64_t v87 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_enableSKE) {
        id v88 = @"YES";
      }
      else {
        id v88 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      *(void *)v357 = v88;
      _os_log_impl(&dword_19D9BE000, v87, OS_LOG_TYPE_DEFAULT, "Found EnableSKE user defaults, enable SKE for FaceTime: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v89 = self->_enableSKE ? @"YES" : @"NO";
      v338 = v89;
      _IDSLogTransport(@"GL", @"IDS", @"Found EnableSKE user defaults, enable SKE for FaceTime: %@.");
      if (_IDSShouldLog())
      {
        if (self->_enableSKE) {
          v90 = @"YES";
        }
        else {
          v90 = @"NO";
        }
        v338 = v90;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Found EnableSKE user defaults, enable SKE for FaceTime: %@.");
      }
    }
  }
  uint64_t v91 = objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v85, 0, v86, v338);
  uint64_t v94 = objc_msgSend_objectForKey_(v91, v92, @"reduce-cellular-usage", v93);
  self->_reduceCellularUsage = objc_msgSend_BOOLValue(v94, v95, v96, v97);

  if (self->_reduceCellularUsage)
  {
    int v100 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v100, OS_LOG_TYPE_DEFAULT, "Default set to reduce cellular data usage", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Default set to reduce cellular data usage");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Default set to reduce cellular data usage");
        }
      }
    }
  }
  uint64_t v101 = objc_msgSend_sharedInstanceForBagType_(IDSServerBag, v98, 0, v99);
  v104 = objc_msgSend_objectForKey_(v101, v102, @"reduce-relay-link-creation", v103);
  self->_reduceRelayLinkCreation = objc_msgSend_BOOLValue(v104, v105, v106, v107);

  if (self->_reduceRelayLinkCreation)
  {
    objc_super v108 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v108, OS_LOG_TYPE_DEFAULT, "Default set to reduce relay link creation to 2.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Default set to reduce relay link creation to 2.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Default set to reduce relay link creation to 2.");
        }
      }
    }
  }
  uint64_t v109 = IMGetCachedDomainIntForKeyWithDefaultValue();
  self->_double delayQUICDisconnectionAfterInfo = (double)v109;
  v112 = objc_msgSend_sharedInstance(IDSServerBag, v110, v111, (double)v109);
  v353 = objc_msgSend_objectForKey_(v112, v113, @"ids-quic-disconnection-delay-after-info-2", v114);

  if (v353)
  {
    objc_msgSend_doubleValue(v353, v115, v116, v117);
    self->_double delayQUICDisconnectionAfterInfo = v117;
  }
  v118 = objc_msgSend_GlobalLink(IDSFoundationLog, v115, v116, v117);
  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
  {
    double delayQUICDisconnectionAfterInfo = self->_delayQUICDisconnectionAfterInfo;
    *(_DWORD *)buf = 134218242;
    *(double *)v357 = delayQUICDisconnectionAfterInfo;
    *(_WORD *)&v357[8] = 2112;
    *(void *)&v357[10] = v353;
    _os_log_impl(&dword_19D9BE000, v118, OS_LOG_TYPE_DEFAULT, "QUIC disconnection delay after info request is set to %.1lf (from serverBag: %@)", buf, 0x16u);
  }

  int v120 = IMGetDomainBoolForKeyWithDefaultValue();
  v124 = objc_msgSend_sharedInstance(IDSServerBag, v121, v122, v123);
  v349 = objc_msgSend_objectForKey_(v124, v125, @"ids-rtencryption-mkm-over-qr-enabled-v2", v126);

  if (v349) {
    char v130 = objc_msgSend_BOOLValue(v349, v127, v128, v129);
  }
  else {
    char v130 = v120;
  }
  self->_shouldAcceptIncomingMKMOverQR = v130;
  v131 = objc_msgSend_GlobalLink(IDSFoundationLog, v127, v128, v129);
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_shouldAcceptIncomingMKMOverQR) {
      v135 = @"enabled";
    }
    else {
      v135 = @"disabled";
    }
    int v136 = objc_msgSend_BOOLValue(v349, v132, v133, v134);
    v137 = @"NO";
    if (v136) {
      v138 = @"YES";
    }
    else {
      v138 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    *(void *)v357 = v135;
    *(_WORD *)&v357[8] = 2112;
    *(void *)&v357[10] = v138;
    if (v120) {
      v137 = @"YES";
    }
    __int16 v358 = 2112;
    v359 = v137;
    _os_log_impl(&dword_19D9BE000, v131, OS_LOG_TYPE_DEFAULT, "Accepting MKM over QR %@ - serverBag: %@, defaults: %@", buf, 0x20u);
  }

  self->_islocalCellAttributeInexpensive = IMGetDomainBoolForKey();
  if (@"client-uuid") {
    BOOL v139 = theDict != 0;
  }
  else {
    BOOL v139 = 0;
  }
  if (v139) {
    v140 = (void *)CFDictionaryGetValue(theDict, @"client-uuid");
  }
  else {
    v140 = 0;
  }
  id v346 = v140;
  objc_msgSend__parseClientUUID_(self, v141, (uint64_t)v346, v142);
  self->_QRIPv6Enabled = 1;
  int v143 = _os_feature_enabled_impl();
  v147 = objc_msgSend_sharedInstance(IDSServerBag, v144, v145, v146);
  v348 = objc_msgSend_objectForKey_(v147, v148, @"ids-quic-for-qr-enabled", v149);

  if (v143)
  {
    if (v348) {
      char v153 = objc_msgSend_BOOLValue(v348, v150, v151, v152);
    }
    else {
      char v153 = 1;
    }
  }
  else
  {
    char v153 = 0;
  }
  self->_QUICForQREnabled = v153;
  v154 = objc_msgSend_sharedInstance(IDSServerBag, v150, v151, v152);
  v352 = objc_msgSend_objectForKey_(v154, v155, @"ids-quic-for-qr-enabled-for-twoway", v156);

  v159 = (const char *)@"qat";
  if (@"qat") {
    BOOL v160 = theDict != 0;
  }
  else {
    BOOL v160 = 0;
  }
  if (v160) {
    v161 = (void *)CFDictionaryGetValue(theDict, @"qat");
  }
  else {
    v161 = 0;
  }
  uint64_t v162 = objc_msgSend_intValue(v161, v159, v157, v158);
  v163 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v357 = v162;
    *(_WORD *)&v357[4] = 2112;
    *(void *)&v357[6] = v352;
    _os_log_impl(&dword_19D9BE000, v163, OS_LOG_TYPE_DEFAULT, "QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v339 = v162;
      v343 = v352;
      _IDSLogTransport(@"GL", @"IDS", @"QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@");
      if (_IDSShouldLog())
      {
        uint64_t v339 = v162;
        v343 = v352;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"QR relay allocation type = %d, server bag \"ids-quic-for-qr-enabled-for-twoway\" = %@");
      }
    }
  }
  if (v162 == 1 && v352 && (objc_msgSend_BOOLValue(v352, v164, v165, v166) & 1) == 0)
  {
    v167 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v167, OS_LOG_TYPE_DEFAULT, "Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Server bag \"ids-quic-for-qr-enabled-for-idssession\" is NO and this is a TwoWay allocation. Fallback to STUN");
        }
      }
    }
    self->_QUICForQREnabled = 0;
  }
  int v170 = IMGetDomainBoolForKey();
  if (v170) {
    self->_QUICForQREnabled = 1;
  }
  v172 = objc_msgSend_sharedInstance(IDSServerBag, v168, v169, v171, v339, v343);
  v347 = objc_msgSend_objectForKey_(v172, v173, @"ids-h2-fallback-enabled", v174);

  int v175 = _os_feature_enabled_impl();
  int v179 = v175;
  if (self->_QUICForQREnabled) {
    int v180 = v175;
  }
  else {
    int v180 = 0;
  }
  if (v180 == 1)
  {
    if (v347) {
      char v181 = objc_msgSend_BOOLValue(v347, v176, v177, v178);
    }
    else {
      char v181 = 1;
    }
  }
  else
  {
    char v181 = 0;
  }
  self->_H2FallbackEnabled = v181;
  v182 = objc_msgSend_GlobalLink(IDSFoundationLog, v176, v177, v178);
  if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_QUICForQREnabled) {
      v186 = @"enabled";
    }
    else {
      v186 = @"disabled";
    }
    if (v348)
    {
      if (objc_msgSend_BOOLValue(v348, v183, v184, v185)) {
        v187 = @"YES";
      }
      else {
        v187 = @"NO";
      }
    }
    else
    {
      v187 = @"missing";
    }
    if (v143) {
      v188 = @"YES";
    }
    else {
      v188 = @"NO";
    }
    if (v170) {
      v189 = @"YES";
    }
    else {
      v189 = @"NO";
    }
    if (self->_H2FallbackEnabled) {
      v190 = @"YES";
    }
    else {
      v190 = @"NO";
    }
    if (v179) {
      v191 = @"YES";
    }
    else {
      v191 = @"NO";
    }
    if (v347)
    {
      if (objc_msgSend_BOOLValue(v347, v183, v184, v185)) {
        v192 = @"YES";
      }
      else {
        v192 = @"NO";
      }
    }
    else
    {
      v192 = @"missing";
    }
    *(_DWORD *)buf = 138413826;
    *(void *)v357 = v186;
    *(_WORD *)&v357[8] = 2112;
    *(void *)&v357[10] = v187;
    __int16 v358 = 2112;
    v359 = v188;
    __int16 v360 = 2112;
    v361 = v189;
    __int16 v362 = 2112;
    v363 = v190;
    __int16 v364 = 2112;
    v365 = v191;
    __int16 v366 = 2112;
    v367 = v192;
    _os_log_impl(&dword_19D9BE000, v182, OS_LOG_TYPE_DEFAULT, "QUIC for QR %@ - serverBag: %@, feature-flag: %@, forceEnableQUICForQR: %@, _H2FallbackEnabled: %@, H2 feature-flag: %@, H2 server bag: %@", buf, 0x48u);
  }

  v195 = (const char *)@"gl-option-preferred-address-family";
  if (@"gl-option-preferred-address-family") {
    BOOL v196 = theDict != 0;
  }
  else {
    BOOL v196 = 0;
  }
  if (v196) {
    v197 = (void *)CFDictionaryGetValue(theDict, @"gl-option-preferred-address-family");
  }
  else {
    v197 = 0;
  }
  int v198 = objc_msgSend_unsignedIntValue(v197, v195, v193, v194);
  v202 = objc_msgSend_GlobalLink(IDSFoundationLog, v199, v200, v201);
  if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = v198;
    _os_log_impl(&dword_19D9BE000, v202, OS_LOG_TYPE_DEFAULT, "QR preferredAddressFamily from server: %d", buf, 8u);
  }

  int v203 = IMGetCachedDomainIntForKeyWithDefaultValue();
  v207 = objc_msgSend_GlobalLink(IDSFoundationLog, v204, v205, v206);
  if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = v203;
    _os_log_impl(&dword_19D9BE000, v207, OS_LOG_TYPE_DEFAULT, "QR preferredAddressFamily after reading from defaults: %d", buf, 8u);
  }

  v210 = (const char *)@"gl-option-force-ipv6";
  if (@"gl-option-force-ipv6") {
    BOOL v211 = theDict != 0;
  }
  else {
    BOOL v211 = 0;
  }
  if (v211) {
    v212 = (void *)CFDictionaryGetValue(theDict, @"gl-option-force-ipv6");
  }
  else {
    v212 = 0;
  }
  uint64_t v213 = v351 ^ 1u;
  uint64_t v214 = v350 ^ 1u;
  self->_forceIPdouble v6 = objc_msgSend_BOOLValue(v212, v210, v208, v209);
  if (self->_QUICForQREnabled)
  {
    if (v203 == 1)
    {
      v217 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v217, OS_LOG_TYPE_DEFAULT, "client prefers IPv4, disable IPv6.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"client prefers IPv4, disable IPv6.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"client prefers IPv4, disable IPv6.");
          }
        }
      }
      self->_QRIPv6Enabled = 0;
    }
    else
    {
      v225 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v225, OS_LOG_TYPE_DEFAULT, "Add IPv6 address to the interface", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"Add IPv6 address to the interface");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"Add IPv6 address to the interface");
          }
        }
      }
    }
    id v226 = (id)objc_msgSend__addSocketAndInterfaceAddressWithNWLink_wantsWiFi_wantsCellular_(self, v218, self->_QRIPv6Enabled, v219, v213, v214);
  }
  else
  {
    id v220 = (id)objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v215, 0, v216, v213, v214);
    if (v203 == 1)
    {
      v221 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v221, OS_LOG_TYPE_DEFAULT, "client prefers IPv4, disable IPv6.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"client prefers IPv4, disable IPv6.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"client prefers IPv4, disable IPv6.");
          }
        }
      }
      self->_QRIPv6Enabled = 0;
    }
    else
    {
      v227 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v227, OS_LOG_TYPE_DEFAULT, "Add IPv6 address to the interface", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"Add IPv6 address to the interface");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"Add IPv6 address to the interface");
          }
        }
      }
      id v230 = (id)objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v228, 1, v229, v213, v214);
    }
  }
  v231 = objc_msgSend_sharedInstance(IDSServerBag, v222, v223, v224);
  v234 = objc_msgSend_objectForKey_(v231, v232, @"allow-quic-0rtt", v233);

  if (v234)
  {
    int v238 = objc_msgSend_BOOLValue(v234, v235, v236, v237);
    v239 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
    {
      v240 = @"NO";
      if (v238) {
        v240 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      *(void *)v357 = v240;
      _os_log_impl(&dword_19D9BE000, v239, OS_LOG_TYPE_DEFAULT, "shouldEnable0RTT: got server bag value: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      v241 = v238 ? @"YES" : @"NO";
      v340 = v241;
      _IDSLogTransport(@"GL", @"IDS", @"shouldEnable0RTT: got server bag value: %@");
      if (_IDSShouldLog())
      {
        v340 = v241;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"shouldEnable0RTT: got server bag value: %@");
      }
    }
  }
  int v242 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_shouldEnable0RTT = v242;
  v243 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
  {
    v244 = @"NO";
    if (v242) {
      v244 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    *(void *)v357 = v244;
    *(_WORD *)&v357[8] = 2112;
    *(void *)&v357[10] = @"YES";
    _os_log_impl(&dword_19D9BE000, v243, OS_LOG_TYPE_DEFAULT, "_shouldEnable0RTT: %@ (Default: %@)", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v248 = v242 ? @"YES" : @"NO";
    v340 = v248;
    v344 = @"YES";
    _IDSLogTransport(@"GL", @"IDS", @"_shouldEnable0RTT: %@ (Default: %@)");
    if (_IDSShouldLog())
    {
      v340 = v248;
      v344 = @"YES";
      _IDSLogV(0, @"IDSFoundation", @"GL", @"_shouldEnable0RTT: %@ (Default: %@)");
    }
  }
  v249 = 0;
  if (theDict)
  {
    v245 = (const char *)@"gs-tle-enabled-key";
    if (@"gs-tle-enabled-key") {
      v249 = (void *)CFDictionaryGetValue(theDict, @"gs-tle-enabled-key");
    }
  }
  self->_isTLEEnabled = objc_msgSend_BOOLValue(v249, v245, v246, v247, v340, v344);
  v250 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isTLEEnabled) {
      v251 = @"YES";
    }
    else {
      v251 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v251;
    _os_log_impl(&dword_19D9BE000, v250, OS_LOG_TYPE_DEFAULT, "_isTLEEnabled: %@ based on TU passed feature flag", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v252 = self->_isTLEEnabled ? @"YES" : @"NO";
    v341 = v252;
    _IDSLogTransport(@"GL", @"IDS", @"_isTLEEnabled: %@ based on TU passed feature flag");
    if (_IDSShouldLog())
    {
      if (self->_isTLEEnabled) {
        v253 = @"YES";
      }
      else {
        v253 = @"NO";
      }
      v341 = v253;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"_isTLEEnabled: %@ based on TU passed feature flag");
    }
  }
  int v254 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_forceTLE = v254;
  v255 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
  {
    v256 = @"NO";
    if (v254) {
      v256 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v256;
    _os_log_impl(&dword_19D9BE000, v255, OS_LOG_TYPE_DEFAULT, "forceTLE: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v257 = v254 ? @"YES" : @"NO";
    v341 = v257;
    _IDSLogTransport(@"GL", @"IDS", @"forceTLE: %@ based on defaults");
    if (_IDSShouldLog())
    {
      v341 = v257;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"forceTLE: %@ based on defaults");
    }
  }
  int v258 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_forceP2PTLE = v258;
  v259 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
  {
    v260 = @"NO";
    if (v258) {
      v260 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v260;
    _os_log_impl(&dword_19D9BE000, v259, OS_LOG_TYPE_DEFAULT, "forceP2PTLE: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v261 = v258 ? @"YES" : @"NO";
    v341 = v261;
    _IDSLogTransport(@"GL", @"IDS", @"forceP2PTLE: %@ based on defaults");
    if (_IDSShouldLog())
    {
      v341 = v261;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"forceP2PTLE: %@ based on defaults");
    }
  }
  int v262 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowTLEOverCellular = v262;
  v263 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
  {
    v264 = @"NO";
    if (v262) {
      v264 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v264;
    _os_log_impl(&dword_19D9BE000, v263, OS_LOG_TYPE_DEFAULT, "allowTLEOverCellular: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v265 = v262 ? @"YES" : @"NO";
    v341 = v265;
    _IDSLogTransport(@"GL", @"IDS", @"allowTLEOverCellular: %@ based on defaults");
    if (_IDSShouldLog())
    {
      v341 = v265;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"allowTLEOverCellular: %@ based on defaults");
    }
  }
  int v266 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowTLEOverVRLinks = v266;
  v267 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
  {
    v268 = @"NO";
    if (v266) {
      v268 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v268;
    _os_log_impl(&dword_19D9BE000, v267, OS_LOG_TYPE_DEFAULT, "allowTLEOverVRLinks: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v269 = v266 ? @"YES" : @"NO";
    v341 = v269;
    _IDSLogTransport(@"GL", @"IDS", @"allowTLEOverVRLinks: %@ based on defaults");
    if (_IDSShouldLog())
    {
      v341 = v269;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"allowTLEOverVRLinks: %@ based on defaults");
    }
  }
  Boolean keyExistsAndHasValidFormat = 0;
  BOOL v270 = CFPreferencesGetAppBooleanValue(@"serverTestOptionTLEDisabled", @"com.apple.ids", &keyExistsAndHasValidFormat) != 0;
  int v271 = keyExistsAndHasValidFormat;
  if (keyExistsAndHasValidFormat) {
    int v272 = 0;
  }
  else {
    int v272 = v254;
  }
  if (v272 == 1)
  {
    BOOL v270 = 0;
    int v271 = 1;
    Boolean keyExistsAndHasValidFormat = 1;
  }
  self->_shouldOverrideServerTestOptionTLEDisabled = v271 != 0;
  self->_serverTestOptionTLEDisabled = v270;
  self->_disableDirectDatapath = IMGetDomainBoolForKeyWithDefaultValue();
  v273 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_disableDirectDatapath) {
      v274 = @"YES";
    }
    else {
      v274 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)v357 = v274;
    _os_log_impl(&dword_19D9BE000, v273, OS_LOG_TYPE_DEFAULT, "direct datapath: _disableDirectDatapath: %@ based on defaults", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    v278 = self->_disableDirectDatapath ? @"YES" : @"NO";
    v341 = v278;
    _IDSLogTransport(@"GL", @"IDS", @"direct datapath: _disableDirectDatapath: %@ based on defaults");
    if (_IDSShouldLog())
    {
      if (self->_disableDirectDatapath) {
        v279 = @"YES";
      }
      else {
        v279 = @"NO";
      }
      v341 = v279;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"direct datapath: _disableDirectDatapath: %@ based on defaults");
    }
  }
  if ((objc_msgSend_isSkywalkDemuxSupported(IDSNWLink, v275, v276, v277, v341) & 1) == 0)
  {
    self->_disableDirectDatapath = 1;
    v280 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v280, OS_LOG_TYPE_DEFAULT, "direct datapath: NO because Skywalk Demux is not supported", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"direct datapath: NO because Skywalk Demux is not supported");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"direct datapath: NO because Skywalk Demux is not supported");
        }
      }
    }
  }
  if ((v351 & 1) == 0)
  {
    self->_wifiNWPathFlags = -1;
    v281 = nw_parameters_create();
    nw_parameters_set_required_interface_type(v281, nw_interface_type_wifi);
    evaluator_for_endpoint = (OS_nw_path_evaluator *)nw_path_create_evaluator_for_endpoint();
    wifiPathEvaluator = self->_wifiPathEvaluator;
    self->_wifiPathEvaluator = evaluator_for_endpoint;

    v284 = im_primary_queue();
    nw_path_evaluator_set_update_handler();
  }
  if ((v350 & 1) == 0)
  {
    self->_cellularNWPathFlags = -1;
    v285 = nw_parameters_create();
    nw_parameters_set_required_interface_type(v285, nw_interface_type_cellular);
    v286 = (OS_nw_path_evaluator *)nw_path_create_evaluator_for_endpoint();
    cellularPathEvaluator = self->_cellularPathEvaluator;
    self->_cellularPathEvaluator = v286;

    v288 = im_primary_queue();
    nw_path_evaluator_set_update_handler();
  }
  self->_allowOnlyOneQR = 0;
  if (IMGetDomainBoolForKey())
  {
    self->_allowP2P = 0;
LABEL_388:
    v293 = objc_msgSend_GlobalLink(IDSFoundationLog, v289, v290, v291);
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
    {
LABEL_392:

      goto LABEL_393;
    }
    *(_WORD *)buf = 0;
    v294 = "forceQuickRelay or disableP2PLinks default is set to YES.";
    goto LABEL_390;
  }
  int v292 = IMGetDomainBoolForKeyWithDefaultValue();
  self->_allowP2P = v292 ^ 1;
  if (((v292 ^ 1) & 1) == 0) {
    goto LABEL_388;
  }
  v334 = 0;
  if (theDict)
  {
    v289 = (const char *)@"gl-option-forcerelay";
    if (@"gl-option-forcerelay") {
      v334 = (void *)CFDictionaryGetValue(theDict, @"gl-option-forcerelay");
    }
  }
  if (objc_msgSend_BOOLValue(v334, v289, v290, v291))
  {
    *(_WORD *)&self->_allowOnlyOneQR = 1;
    v293 = objc_msgSend_GlobalLink(IDSFoundationLog, v297, v298, v299);
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_392;
    }
    *(_WORD *)buf = 0;
    v294 = "forceRelay option is set to YES.";
LABEL_390:
    v295 = v293;
    uint32_t v296 = 2;
LABEL_391:
    _os_log_impl(&dword_19D9BE000, v295, OS_LOG_TYPE_DEFAULT, v294, buf, v296);
    goto LABEL_392;
  }
  if (!self->_clientType)
  {
    *(_WORD *)&self->_allowOnlyOneQR = 1;
    v293 = objc_msgSend_GlobalLink(IDSFoundationLog, v297, v298, v299);
    if (!os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_392;
    }
    int64_t clientType = self->_clientType;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v357 = clientType;
    v294 = "use forceQuickRelay for client: %d.";
    v295 = v293;
    uint32_t v296 = 8;
    goto LABEL_391;
  }
LABEL_393:
  v300 = 0;
  if (theDict)
  {
    v297 = (const char *)@"gs-force-tcp-fallback-on-wifi-key";
    if (@"gs-force-tcp-fallback-on-wifi-key") {
      v300 = (void *)CFDictionaryGetValue(theDict, @"gs-force-tcp-fallback-on-wifi-key");
    }
  }
  self->_forceTCPFallbackOnWiFuint64_t i = objc_msgSend_BOOLValue(v300, v297, v298, v299);
  v303 = (const char *)@"gs-force-tcp-fallback-on-cell-key";
  if (@"gs-force-tcp-fallback-on-cell-key") {
    BOOL v304 = theDict != 0;
  }
  else {
    BOOL v304 = 0;
  }
  if (v304) {
    v305 = (void *)CFDictionaryGetValue(theDict, @"gs-force-tcp-fallback-on-cell-key");
  }
  else {
    v305 = 0;
  }
  self->_forceTCPFallbackOnCell = objc_msgSend_BOOLValue(v305, v303, v301, v302);
  v308 = (const char *)@"gs-shortmki-enabled-key";
  if (@"gs-shortmki-enabled-key") {
    BOOL v309 = theDict != 0;
  }
  else {
    BOOL v309 = 0;
  }
  if (v309) {
    v310 = (void *)CFDictionaryGetValue(theDict, @"gs-shortmki-enabled-key");
  }
  else {
    v310 = 0;
  }
  self->_isShortMKIEnabled = objc_msgSend_BOOLValue(v310, v308, v306, v307);
  v313 = (const char *)@"gs-gecko-enabled-key";
  if (@"gs-gecko-enabled-key") {
    BOOL v314 = theDict != 0;
  }
  else {
    BOOL v314 = 0;
  }
  if (v314) {
    v315 = (void *)CFDictionaryGetValue(theDict, @"gs-gecko-enabled-key");
  }
  else {
    v315 = 0;
  }
  int v316 = objc_msgSend_BOOLValue(v315, v313, v311, v312);
  self->_isGeckoEnabled = v316;
  if (self->_serverMaterialExchangeController) {
    int v320 = v316;
  }
  else {
    int v320 = 0;
  }
  if (v320 == 1)
  {
    v321 = objc_msgSend_GlobalLink(IDSFoundationLog, v317, v318, v319);
    if (os_log_type_enabled(v321, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v321, OS_LOG_TYPE_DEFAULT, "startWithOptions: invalidate and dealloc SME because Gecko is enabled", buf, 2u);
    }

    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    v326 = objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v323, v324, v325);
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v327, (uint64_t)v326, v328);

    v329 = self->_serverMaterialExchangeController;
    self->_serverMaterialExchangeController = 0;
  }
  v330 = 0;
  if (theDict)
  {
    v317 = (const char *)@"gs-started-as-u-plus-one-key";
    if (@"gs-started-as-u-plus-one-key") {
      v330 = (void *)CFDictionaryGetValue(theDict, @"gs-started-as-u-plus-one-key");
    }
  }
  if (objc_msgSend_BOOLValue(v330, v317, v318, v319))
  {
    objc_msgSend_setIsUPlusOneSession_(self, v331, 1, v332);
    self->_shouldReportAcceptDelay = 1;
  }
  else
  {
    objc_msgSend_setIsUPlusOneSession_(self, v331, 0, v332);
  }
  v333 = 0;
  if (theDict && @"gl-option-qra-blocks") {
    v333 = (void *)CFDictionaryGetValue(theDict, @"gl-option-qra-blocks");
  }
  objc_storeStrong((id *)&self->_qraBlocks, v333);
  self->_calleeAcceptTime = ids_monotonic_time();
  self->_delayFirstConnectionData = IMGetDomainIntForKey();

LABEL_431:
}

- (BOOL)_isNWPathFlagsChanged:(id)a3 existingPath:(unsigned __int16 *)a4
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  uint64_t v9 = v5;
  if (!v5)
  {
    BOOL v17 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "invalid path, return", (uint8_t *)v31, 2u);
    }

    goto LABEL_20;
  }
  BOOL is_constrained = nw_path_is_constrained(v5);
  uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (is_constrained)
  {
    if (v15)
    {
      LOWORD(v31[0]) = 0;
      int v16 = 2;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Constrained", (uint8_t *)v31, 2u);
    }
    else
    {
      int v16 = 2;
    }
  }
  else
  {
    if (v15)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Not constrained", (uint8_t *)v31, 2u);
    }
    int v16 = 0;
  }

  BOOL is_expensive = nw_path_is_expensive(v9);
  double v22 = objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, v21);
  BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if (is_expensive)
  {
    if (v23)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Expensive", (uint8_t *)v31, 2u);
    }

    v16 |= 1u;
  }
  else
  {
    if (v23)
    {
      LOWORD(v31[0]) = 0;
      _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: Inexpensive", (uint8_t *)v31, 2u);
    }
  }
  if (*a4 == v16)
  {
LABEL_20:
    BOOL v27 = 0;
    goto LABEL_24;
  }
  uint64_t v28 = objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *a4;
    v31[0] = 67109376;
    v31[1] = v29;
    __int16 v32 = 1024;
    int v33 = v16;
    _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "_isNWPathFlagsChanged: existingPath: %u changed to curNWPathFlags: %u", (uint8_t *)v31, 0xEu);
  }

  *a4 = v16;
  BOOL v27 = 1;
LABEL_24:

  return v27;
}

- (void)_handle_wifi_path:(id)a3 nwEndPoind:(id)a4
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (self->_state != 4)
  {
    double v13 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, (uint64_t)a3, v4, a4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      BOOL v17 = _IDSLinkStateStrings[self->_state];
      int v18 = 138412546;
      double v19 = idsSessionID;
      __int16 v20 = 2080;
      double v21 = v17;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "_handle_wifi_path: Session with IDSSessionID: %@ is not connected, state [%s].", (uint8_t *)&v18, 0x16u);
    }
    goto LABEL_9;
  }
  if (objc_msgSend__isNWPathFlagsChanged_existingPath_(self, a2, (uint64_t)a3, v4, &self->_wifiNWPathFlags))
  {
    uint64_t v9 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int wifiNWPathFlags = self->_wifiNWPathFlags;
      int v18 = 67109120;
      LODWORD(v19) = wifiNWPathFlags;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "_handle_wifi_path: for _wifiNWPathFlags: %u", (uint8_t *)&v18, 8u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      double v13 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didWiFiNWPathFlagsChanged_(v13, v14, (uint64_t)self, v15, self->_wifiNWPathFlags);
LABEL_9:
    }
  }
}

- (void)_handle_cellular_path:(id)a3 nwEndPoind:(id)a4
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  uint64_t v9 = v5;
  if (self->_state != 4)
  {
    BOOL v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    idsSessionID = self->_idsSessionID;
    BOOL v27 = _IDSLinkStateStrings[self->_state];
    int v32 = 138412546;
    int v33 = idsSessionID;
    __int16 v34 = 2080;
    uint64_t v35 = v27;
    uint64_t v28 = "_handle_cellular_path: Session with IDSSessionID: %@ is not connected, state [%s].";
    int v29 = v23;
    uint32_t v30 = 22;
LABEL_12:
    _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v32, v30);
    goto LABEL_13;
  }
  nw_path_status_t status = nw_path_get_status(v5);
  if (status != nw_path_status_satisfied)
  {
    nw_path_status_t v31 = status;
    BOOL v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    int v32 = 67109120;
    LODWORD(v33) = v31;
    uint64_t v28 = "_handle_cellular_path: nw_path_status is: %d, return";
    int v29 = v23;
    uint32_t v30 = 8;
    goto LABEL_12;
  }
  objc_msgSend__processDelayedCellularInterfaces(self, v11, v12, v13);
  if (objc_msgSend__isNWPathFlagsChanged_existingPath_(self, v14, (uint64_t)v9, v15, &self->_cellularNWPathFlags))
  {
    double v19 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int cellularNWPathFlags = self->_cellularNWPathFlags;
      int v32 = 67109120;
      LODWORD(v33) = cellularNWPathFlags;
      _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "_handle_cellular_path: for _cellularNWPathFlags: %u", (uint8_t *)&v32, 8u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v22 = objc_opt_respondsToSelector();

    if (v22)
    {
      BOOL v23 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didCellularNWPathFlagsChanged_(v23, v24, (uint64_t)self, v25, self->_cellularNWPathFlags);
LABEL_13:
    }
  }
}

- (unint64_t)defaultLinkType
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v3 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v3 && !*((_DWORD *)v3 + 1))
  {
    uint64_t v17 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "no default link is specified yet.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"no default link is specified yet.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"no default link is specified yet.");
        }
      }
    }
    return 0;
  }
  else
  {
    double v4 = channelForStunCandidatePair((uint64_t)(v3 + 1), (uint64_t)(v3 + 17), *((unsigned __int16 *)v3 + 132));
    channelToCandidatePairs = self->_channelToCandidatePairs;
    if (channelToCandidatePairs
      && v4
      && (double v6 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, v4)) != 0)
    {
      int v10 = v6;
      double v11 = objc_msgSend_local(v6, v7, v8, v9);
      if (objc_msgSend_isCellularStunCandidate(v11, v12, v13, v14)) {
        unint64_t v15 = 4;
      }
      else {
        unint64_t v15 = 3;
      }
    }
    else
    {
      int v16 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v20 = v4;
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "failed to find default link for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to find default link for %@.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find default link for %@.");
          }
        }
      }
      unint64_t v15 = 0;
    }
  }
  return v15;
}

- (BOOL)hasReachableInterface:(unint64_t)a3
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3) {
    int v3 = 30;
  }
  else {
    int v3 = 2;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  double v4 = self->_interfaceAddressArray;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, v6, v23, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = objc_msgSend_address(*(void **)(*((void *)&v19 + 1) + 8 * i), v7, v8, v10, (void)v19);
        uint64_t v17 = v13;
        if (v13 && v3 == *(unsigned __int8 *)(objc_msgSend_sa(v13, v14, v15, v16) + 1))
        {

          LOBYTE(v9) = 1;
          goto LABEL_15;
        }
      }
      uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, v10, v23, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v9;
}

- (void)_addQRAAWDBlock:(id)a3 allocateRequestTime:(double)a4 inferredExternalRAT:(unsigned int)a5 stunTransport:(int64_t)a6 relayProviderType:(int64_t)a7 idsSessionID:(id)a8 reportingDataBlob:(id)a9 isInitiator:(BOOL)a10
{
  id v17 = a3;
  id v18 = a8;
  id v19 = a9;
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 3221225472;
  int v33 = sub_19DA3877C;
  __int16 v34 = &unk_1E5973FC0;
  BOOL v43 = a10;
  double v39 = a4;
  unsigned int v42 = a5;
  id v20 = v17;
  id v35 = v20;
  uint64_t v36 = self;
  int64_t v40 = a7;
  int64_t v41 = a6;
  id v21 = v18;
  id v37 = v21;
  id v22 = v19;
  id v38 = v22;
  BOOL v23 = _Block_copy(&v31);
  BOOL v27 = objc_msgSend_copy(v23, v24, v25, v26, v31, v32, v33, v34);

  allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  if (!allocateTimeReportBlocks)
  {
    int v29 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint32_t v30 = self->_allocateTimeReportBlocks;
    self->_allocateTimeReportBlocks = v29;

    allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
  }
  if (allocateTimeReportBlocks && v27) {
    CFArrayAppendValue((CFMutableArrayRef)allocateTimeReportBlocks, v27);
  }
}

- (void)connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 completionHandler:(id)a6 withLocalInterfacePreference:(int)a7
{
  objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, a2, (uint64_t)a3, v7, a4, a5, 0, a6, *(void *)&a7);
}

- (unsigned)_getExternalIPAddressRAT:(id)a3
{
  id v4 = a3;
  int v8 = objc_msgSend_length(v4, v5, v6, v7);
  if (v8 == 16)
  {
    memset(&v25[1], 170, 20);
    id v17 = v4;
    *(_OWORD *)&v25[1] = *(_OWORD *)objc_msgSend_bytes(v17, v18, v19, v20, 0xAAAAAAAAAAAAAAAALL, *(_OWORD *)&v25[1], v25[3]);
    BOOL v23 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v21, v22, *(double *)&v25[1]);
    unsigned int RATForIPv6Address = GLUtilGetRATForIPv6Address((uint64_t)v25, v23);
  }
  else if (v8 == 4)
  {
    LODWORD(v25[0]) = 0;
    objc_msgSend_getBytes_length_(v4, v9, (uint64_t)v25, v10, 4);
    int v11 = v25[0];
    uint64_t v15 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v12, v13, v14);
    unsigned int RATForIPv6Address = GLUtilGetRATForIPv4Address(v11, v15);
  }
  else
  {
    unsigned int RATForIPv6Address = 10;
  }

  return RATForIPv6Address;
}

- (BOOL)_isAcceptedRelaySessionForAllocationRequestID:(id)a3 acceptedRelaySessionID:(id)a4
{
  id v6 = a4;
  BOOL v11 = ((objc_msgSend_containsObject_(self->_targetedAllocations, v7, (uint64_t)a3, v8) & 1) != 0
      || objc_msgSend_isEqualToString_(self->_acceptedRelaySessionID, v9, (uint64_t)v6, v10))
     && self->_isInitiator;

  return v11;
}

- (void)_connectNWTCPLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  v72[0] = 0;
  uint64_t v13 = objc_msgSend_local(v8, v10, v11, v12);
  unsigned int v17 = objc_msgSend_index(v13, v14, v15, v16);

  id v21 = objc_msgSend_local(v8, v18, v19, v20);
  uint64_t v25 = objc_msgSend_address(v21, v22, v23, v24);

  int v29 = *(unsigned __int8 *)(v25 + 1);
  if (v29 == 2 || v29 == 30) {
    *(_WORD *)(v25 + 2) = 0;
  }
  uint32_t v30 = objc_msgSend_remote(v8, v26, v27, v28);
  uint64_t v34 = objc_msgSend_external(v30, v31, v32, v33);

  objc_msgSend_setIsQUIC_(v8, v35, 1, v36);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19DA38EB8;
  aBlock[3] = &unk_1E5973FE8;
  id v37 = v8;
  id v71 = v37;
  double v39 = _Block_copy(aBlock);
  if (!a4) {
    objc_msgSend_setState_(v37, v38, 1, v40);
  }
  if (IMGetDomainBoolForKey())
  {
    double v44 = objc_msgSend_GlobalLink(IDSFoundationLog, v41, v42, v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "forceH2FallbackToTCP enabled, fallback to TCP STUN", buf, 2u);
    }
  }
  else
  {
    nwLinuint64_t k = self->_nwLink;
    clientUUID = self->_clientUUID;
    objc_msgSend_sessionID(v37, v41, v42, v43);
    uint64_t v45 = v62 = v34;
    long long v49 = objc_msgSend_relaySessionToken(v37, v46, v47, v48);
    objc_msgSend_relaySessionKey(v37, v50, v51, v52);
    v54 = BOOL v53 = a4;
    v66[0] = MEMORY[0x1E4F143A8];
    v66[1] = 3221225472;
    v66[2] = sub_19DA38F8C;
    v66[3] = &unk_1E5974010;
    double v61 = self;
    v66[4] = self;
    id v55 = v37;
    id v67 = v55;
    id v65 = v9;
    id v68 = v9;
    int ready = objc_msgSend_connectTCP_localAddress_remoteAddress_clientUUID_sessionID_relaySessionToken_relaySessionKey_randomSaltBlock_newLocalPort_disconnectAfterUse_readyHandler_(nwLink, v56, v17, v57, v25, v62, clientUUID, v45, v49, v54, v39, v72, v53, v66);

    if (ready && v72[0]) {
      objc_msgSend__updateCandidatePair_newLocalPort_(v61, v59, (uint64_t)v55, v60);
    }

    id v9 = v65;
  }
}

- (void)_connectNWLink:(id)a3 disconnectAfterUse:(BOOL)a4 connectedHandler:(id)a5
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  __int16 v101 = 0;
  uint64_t v13 = objc_msgSend_local(v8, v10, v11, v12);
  unsigned int v92 = objc_msgSend_index(v13, v14, v15, v16);

  double v20 = objc_msgSend_local(v8, v17, v18, v19);
  uint64_t v91 = objc_msgSend_address(v20, v21, v22, v23);

  uint64_t v27 = objc_msgSend_remote(v8, v24, v25, v26);
  uint64_t v90 = objc_msgSend_external(v27, v28, v29, v30);

  objc_msgSend_setIsQUIC_(v8, v31, 1, v32);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19DA397AC;
  aBlock[3] = &unk_1E5973FE8;
  id v33 = v8;
  id v100 = v33;
  double v93 = _Block_copy(aBlock);
  if (!a4) {
    objc_msgSend_setState_(v33, v34, 1, v35);
  }
  int v36 = IMGetDomainBoolForKey();
  int v37 = IMGetDomainBoolForKey();
  int v41 = v37;
  if (v36)
  {
    BOOL v42 = 0;
    if ((v37 & 1) == 0)
    {
LABEL_5:
      BOOL v43 = !self->_forceTCPFallbackOnCell;
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v42 = !self->_forceTCPFallbackOnWiFi;
    if ((v37 & 1) == 0) {
      goto LABEL_5;
    }
  }
  BOOL v43 = 0;
LABEL_8:
  double v44 = objc_msgSend_GlobalLink(IDSFoundationLog, v38, v39, v40);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = @"NO";
    if (v36) {
      uint64_t v46 = @"YES";
    }
    else {
      uint64_t v46 = @"NO";
    }
    BOOL forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
    if (self->_forceTCPFallbackOnWiFi) {
      double v48 = @"YES";
    }
    else {
      double v48 = @"NO";
    }
    *(_DWORD *)buf = 138413058;
    double v103 = v46;
    if (v41) {
      long long v49 = @"YES";
    }
    else {
      long long v49 = @"NO";
    }
    __int16 v104 = 2112;
    v105 = v48;
    if (forceTCPFallbackOnCell) {
      uint64_t v45 = @"YES";
    }
    __int16 v106 = 2112;
    double v107 = v49;
    __int16 v108 = 2112;
    uint64_t v109 = v45;
    _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "connectNWLink forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
      buf,
      0x2Au);
  }

  BOOL v53 = objc_msgSend_local(v33, v50, v51, v52);
  int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v53, v54, v55, v56);

  if (((v42 | isCellularStunCandidate) & 1) == 0)
  {
    long long v84 = objc_msgSend_GlobalLink(IDSFoundationLog, v58, v59, v60);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      long long v85 = "forceTCPFallbackOnWiFi is set, dont connect via WiFi interface";
LABEL_31:
      _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, v85, buf, 2u);
    }
LABEL_32:
    double v78 = v93;
    goto LABEL_33;
  }
  if (((v43 | isCellularStunCandidate ^ 1) & 1) == 0)
  {
    long long v84 = objc_msgSend_GlobalLink(IDSFoundationLog, v58, v59, v60);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      long long v85 = "forceTCPFallbackOnWiFi is set, dont connect via cellular interface";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  nwLinuint64_t k = self->_nwLink;
  id v88 = objc_msgSend_sessionID(v33, v58, v59, v60);
  uint64_t v64 = objc_msgSend_relaySessionToken(v33, v61, v62, v63);
  id v68 = objc_msgSend_relaySessionKey(v33, v65, v66, v67);
  v72 = objc_msgSend_pskTransportParameters(v33, v69, v70, v71);
  long long v76 = objc_msgSend_pskH3Settings(v33, v73, v74, v75);
  BOOL shouldEnable0RTT = self->_shouldEnable0RTT;
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = sub_19DA39880;
  v94[3] = &unk_1E5974038;
  BOOL v98 = a4;
  uint64_t v87 = v33;
  v95 = v87;
  uint64_t v96 = self;
  id v97 = v9;
  HIBYTE(v86) = shouldEnable0RTT;
  LOBYTE(v86) = a4;
  double v78 = v93;
  int ready = objc_msgSend_connect_localAddress_remoteAddress_clientUUID_sessionID_relaySessionToken_relaySessionKey_randomSaltBlock_pskTransportParameters_pskH3Settings_newLocalPort_disconnectAfterUse_holdUntilFirstPacketReady_readyHandler_(nwLink, v79, v92, v80, v91, v90, self->_clientUUID, v88, v64, v68, v93, v72, v76, &v101, v86, v94);

  if (ready && v101) {
    objc_msgSend__updateCandidatePair_newLocalPort_(self, v82, (uint64_t)v87, v83);
  }

  long long v84 = v95;
LABEL_33:
}

- (void)_connectWithSessionInfo:(id)a3 interfaceAddress:(id)a4 joinSession:(BOOL)a5 allocbindFailover:(BOOL)a6 completionHandler:(id)a7 withLocalInterfacePreference:(int)a8
{
  BOOL v9 = a6;
  BOOL v10 = a5;
  uint64_t v762 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v13 = (const __CFDictionary *)a3;
  id v716 = a4;
  id v714 = a7;
  CFDictionaryRef theDict = v13;
  if (!self->_cellularSlicingFlags)
  {
    unsigned int v17 = objc_msgSend_objectForKeyedSubscript_(v13, v14, @"gl-option-session-cell-slicing-flags", v16);
    self->_cellularSlicingFlags = objc_msgSend_unsignedIntValue(v17, v18, v19, v20);
  }
  unint64_t state = self->_state;
  if (state < 5)
  {
    if (state >= 2 && !v10)
    {
      uint64_t v22 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        double v24 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = self;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v24;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending info request.", buf, 0x16u);
      }
      goto LABEL_6;
    }
    BOOL v710 = v10;
    long long v760 = 0u;
    long long v761 = 0u;
    long long v758 = 0u;
    long long v759 = 0u;
    long long v756 = 0u;
    long long v757 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v754, 0, sizeof(v754));
    uint64_t v25 = objc_alloc_init(IDSQuickRelaySessionInfo);
    uint64_t v28 = objc_msgSend_parseSessionInfo_(v25, v26, (uint64_t)v13, v27);
    objc_msgSend_groupID(v25, v29, v30, v31);
    double v32 = (NSString *)objc_claimAutoreleasedReturnValue();
    groupID = self->_groupID;
    self->_groupID = v32;

    int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v34, 3, v35, 4, 0, 1);
    int v40 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
    if (v28 && (hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & v9 & 1) == 0)
    {
      int v41 = objc_msgSend_GlobalLink(IDSFoundationLog, v37, v38, v39);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v42 = @"NO";
        if (v40) {
          BOOL v43 = @"YES";
        }
        else {
          BOOL v43 = @"NO";
        }
        *(_DWORD *)v749 = 134218498;
        *(void *)&v749[4] = v28;
        *(_WORD *)&v749[12] = 2112;
        *(void *)&v749[14] = v43;
        if (v9) {
          BOOL v42 = @"YES";
        }
        *(_WORD *)&v749[22] = 2112;
        *(void *)&v749[24] = v42;
        _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "error code = %ld, hasConnectedCandidatePair = %@, allocbindFailover = %@", v749, 0x20u);
      }

      sub_19DA3D624(v714, v28, @"Invalid session info");
      goto LABEL_470;
    }
    if (!self->_avcDataBlob)
    {
      double v44 = objc_msgSend_avcDataBlob(v25, v37, v38, v39);

      if (v44)
      {
        objc_msgSend_avcDataBlob(v25, v37, v38, v39);
        uint64_t v45 = (NSData *)objc_claimAutoreleasedReturnValue();
        avcDataBlob = self->_avcDataBlob;
        self->_avcDataBlob = v45;

        double v50 = objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = self->_avcDataBlob;
          *(_DWORD *)v749 = 138412290;
          *(void *)&v749[4] = v51;
          _os_log_impl(&dword_19D9BE000, v50, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: _avcDataBlob: %@", v749, 0xCu);
        }
      }
    }
    if (self->_isGeckoEnabled)
    {
      objc_msgSend_quicMaterialExchangeProvider(v25, v37, v38, v39);
      double v52 = (IDSGroupQUICMaterialExchangeProvider *)objc_claimAutoreleasedReturnValue();
      quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
      self->_quicMaterialExchangeProvider = v52;

      objc_msgSend_addHandler_(self->_quicMaterialExchangeProvider, v54, (uint64_t)self, v55);
    }
    else
    {
      double v114 = objc_msgSend_initialServerDesiredMaterial(v25, v37, v38, v39);
      if (v114)
      {
        v115 = objc_msgSend_initialServerDesiredMaterialSigner(v25, v56, v57, v58);
        BOOL v116 = v115 == 0;

        if (!v116)
        {
          double v117 = objc_msgSend_GlobalLink(IDSFoundationLog, v56, v57, v58);
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_initialServerDesiredMaterial(v25, v118, v119, v120);
            id v121 = (id)objc_claimAutoreleasedReturnValue();
            v125 = objc_msgSend_initialServerDesiredMaterialSigner(v25, v122, v123, v124);
            double v126 = _Block_copy(v125);
            *(_DWORD *)v749 = 138412546;
            *(void *)&v749[4] = v121;
            *(_WORD *)&v749[12] = 2112;
            *(void *)&v749[14] = v126;
            _os_log_impl(&dword_19D9BE000, v117, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: initialServerDesiredMaterial: %@ initialServerDesiredMaterialSigner: %@", v749, 0x16u);
          }
          serverMaterialExchangeController = self->_serverMaterialExchangeController;
          if (serverMaterialExchangeController && !self->_hasSetServerDesiredMaterials)
          {
            uint64_t v128 = objc_msgSend_idsSessionID(v25, v56, v57, v58);
            v132 = objc_msgSend_initialServerDesiredMaterial(v25, v129, v130, v131);
            int v136 = objc_msgSend_initialServerDesiredMaterialSigner(v25, v133, v134, v135);
            objc_msgSend_setDesiredMaterialsForSession_materials_signer_(serverMaterialExchangeController, v137, (uint64_t)v128, v138, v132, v136);
          }
        }
      }
    }
    self->_BOOL isInitiator = objc_msgSend_isInitiator(v25, v56, v57, v58);
    self->_uplinkNackDisabled = objc_msgSend_uplinkNackDisabled(v25, v59, v60, v61);
    self->_conversationShouldUseP2PTLEAccordingToServer = objc_msgSend_transportLayerEncryptionDisabled(v25, v62, v63, v64);
    self->_ipDiscoveryDisabled = objc_msgSend_ipDiscoveryDisabled(v25, v65, v66, v67);
    objc_msgSend_qrSessionExperiments(v25, v68, v69, v70);
    double v71 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    qrSessionExperiments = self->_qrSessionExperiments;
    self->_qrSessionExperiments = v71;

    if (objc_msgSend_h2FallbackDisabled(v25, v73, v74, v75) && self->_H2FallbackEnabled)
    {
      self->_H2FallbackEnabled = 0;
      long long v79 = objc_msgSend_GlobalLink(IDSFoundationLog, v76, v77, v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        if (self->_H2FallbackEnabled) {
          double v80 = @"YES";
        }
        else {
          double v80 = @"NO";
        }
        *(_DWORD *)v749 = 138412290;
        *(void *)&v749[4] = v80;
        _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: set _H2FallbackEnabled to %@", v749, 0xCu);
      }
    }
    if (IMGetDomainBoolForKey())
    {
      self->_H2FallbackEnabled = 1;
      long long v84 = objc_msgSend_GlobalLink(IDSFoundationLog, v81, v82, v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v749 = 0;
        _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: force enable h2 fallback", v749, 2u);
      }
    }
    uint64_t Type = objc_msgSend_allocateType(v25, v81, v82, v83);
    v709 = objc_msgSend_allocateRequestID(v25, v85, v86, v87);
    key = objc_msgSend_relaySessionID(v25, v88, v89, v90);
    v707 = objc_msgSend_relaySessionToken(v25, v91, v92, v93);
    v706 = objc_msgSend_relaySessionKey(v25, v94, v95, v96);
    uint64_t v700 = objc_msgSend_participantID(v25, v97, v98, v99);
    objc_msgSend_serverAddress(v25, v100, v101, v102);
    objc_msgSend_serverAddressIPv6(v25, v103, v104, v105);
    __memcpy_chk();
    __memcpy_chk();
    BOOL valid = IsValidSA((BOOL)v754);
    acceptedRelaySessionID = self->_acceptedRelaySessionID;
    BOOL v113 = objc_msgSend_ipPreference(v25, v107, v108, v109) == 1
        || (IMGetDomainBoolForKey() & 1) != 0
        || self->_forceIPv6;
    BOOL v708 = v113;
    BOOL v139 = objc_msgSend_GlobalLink(IDSFoundationLog, v110, v111, v112);
    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_ipPreference(v25, v140, v141, v142) == 1) {
        int v143 = @"YES";
      }
      else {
        int v143 = @"NO";
      }
      if (IMGetDomainBoolForKey()) {
        v144 = @"YES";
      }
      else {
        v144 = @"NO";
      }
      if (self->_forceIPv6) {
        uint64_t v145 = @"YES";
      }
      else {
        uint64_t v145 = @"NO";
      }
      *(_DWORD *)v749 = 138412802;
      *(void *)&v749[4] = v143;
      *(_WORD *)&v749[12] = 2112;
      *(void *)&v749[14] = v144;
      *(_WORD *)&v749[22] = 2112;
      *(void *)&v749[24] = v145;
      _os_log_impl(&dword_19D9BE000, v139, OS_LOG_TYPE_DEFAULT, "force IPv6 options server: %@; default: %@; manual: %@",
        v749,
        0x20u);
    }
    BOOL v146 = Type == 3;

    if (self->_disablePureLinkFeature) {
      double v149 = 2.0;
    }
    else {
      double v149 = 1.0;
    }
    v150 = objc_msgSend_sharedInstance(IDSServerBag, v147, v148, 2.0);
    char v153 = objc_msgSend_objectForKey_(v150, v151, @"disable-transport-score-cards", v152);
    int v157 = objc_msgSend_BOOLValue(v153, v154, v155, v156);

    if (v146 && v710)
    {
      self->_sharedSessionJoined = 1;
      goto LABEL_80;
    }
    if (Type != 3 && !v9)
    {
      v161 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v158, v159, v160);
      int HasNonSharedRelayCandidatePair = GLUtilHasNonSharedRelayCandidatePair(key, v161);

      if (HasNonSharedRelayCandidatePair)
      {
        v163 = objc_msgSend_sharedInstance(IDSServerBag, v158, v159, v160);
        double v166 = objc_msgSend_objectForKey_(v163, v164, @"ids-disallow-receiver-fallback", v165);

        if (objc_msgSend_BOOLValue(v166, v167, v168, v169))
        {
          v173 = objc_msgSend_GlobalLink(IDSFoundationLog, v170, v171, v172);
          if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v749 = 138412290;
            *(void *)&v749[4] = key;
            double v174 = "disallowReceiverFallbackBagValue enabled: relay session %@ already exists, ignore.";
LABEL_77:
            _os_log_impl(&dword_19D9BE000, v173, OS_LOG_TYPE_DEFAULT, v174, v749, 0xCu);
            goto LABEL_78;
          }
          goto LABEL_78;
        }
        if (self->_isInitiator)
        {
          v173 = objc_msgSend_GlobalLink(IDSFoundationLog, v170, v171, v172);
          if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v749 = 138412290;
            *(void *)&v749[4] = key;
            double v174 = "relay session %@ already exists, ignore.";
            goto LABEL_77;
          }
LABEL_78:

LABEL_469:
LABEL_470:

          goto LABEL_471;
        }
      }
    }
LABEL_80:
    if (!v716)
    {
      int v175 = objc_msgSend_GlobalLink(IDSFoundationLog, v158, v159, v160);
      if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
      {
        interfaceAddressArray = self->_interfaceAddressArray;
        *(_DWORD *)v749 = 138412290;
        *(void *)&v749[4] = interfaceAddressArray;
        _os_log_impl(&dword_19D9BE000, v175, OS_LOG_TYPE_DEFAULT, "current available interfaces: %@.", v749, 0xCu);
      }
    }
    if (!v9)
    {
      if (!self->_connectingCandidatePairSessionInfo)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
        self->_connectingCandidatePairSessionInfo = Mutable;
      }
      int v179 = objc_msgSend_GlobalLink(IDSFoundationLog, v158, v159, v160);
      if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v749 = 138412546;
        *(void *)&v749[4] = key;
        *(_WORD *)&v749[12] = 2112;
        *(void *)&v749[14] = @"NO";
        _os_log_impl(&dword_19D9BE000, v179, OS_LOG_TYPE_DEFAULT, "add relaySessionID: %@, allocbindFailover: %@", v749, 0x16u);
      }

      v183 = objc_msgSend_copy(theDict, v180, v181, v182);
      if (v183)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)self->_connectingCandidatePairSessionInfo, key, v183);
      }
      else
      {
        uint64_t v184 = MEMORY[0x1E4F14500];
        id v185 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR)) {
          sub_19DB78A18();
        }
      }
    }
    uint64_t v739 = 0;
    if (((v708 | ~v157) & v146) != 0)
    {
      if (v716)
      {
        BOOL v186 = acceptedRelaySessionID != 0;
        uint64_t v187 = objc_msgSend_linkProtocol(v25, v158, v159, v160);
        BOOL isInitiator = self->_isInitiator;
        v192 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v189, v190, v191);
        uint64_t v739 = GLUtilSelectStunTransport(key, v187, 1, isInitiator, v186, v9, v192, self->_state);

        if ((unint64_t)(v739 - 3) <= 1 && self->_state == 4)
        {
          BOOL v196 = objc_msgSend_GlobalLink(IDSFoundationLog, v193, v194, v195);
          if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
          {
            v197 = (&_IDSStunTransportStrings)[v739];
            *(_DWORD *)v749 = 136315650;
            *(void *)&v749[4] = v197;
            *(_WORD *)&v749[12] = 2112;
            *(void *)&v749[14] = key;
            *(_WORD *)&v749[22] = 2112;
            *(void *)&v749[24] = v709;
            _os_log_impl(&dword_19D9BE000, v196, OS_LOG_TYPE_DEFAULT, "skip %s for session %@, alloc reqID %@ link is connected.", v749, 0x20u);
          }
LABEL_101:

          goto LABEL_469;
        }
        id v207 = v716;
        goto LABEL_118;
      }
      id v738 = 0;
      objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_isValidSA_(self, v158, (uint64_t)&v739, v160, &v738, key, !v708, valid);
      id v207 = v738;
    }
    else
    {
      BOOL v198 = acceptedRelaySessionID != 0;
      uint64_t v199 = objc_msgSend_linkProtocol(v25, v158, v159, v160);
      BOOL v200 = self->_isInitiator;
      v204 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v201, v202, v203);
      uint64_t v739 = GLUtilSelectStunTransport(key, v199, Type == 3, v200, v198, v9, v204, self->_state);

      uint64_t v205 = v739;
      if ((unint64_t)(v739 - 3) <= 1 && self->_state == 4)
      {
        BOOL v196 = objc_msgSend_GlobalLink(IDSFoundationLog, v193, v194, v195);
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
        {
          double v206 = (&_IDSStunTransportStrings)[v739];
          *(_DWORD *)v749 = 136315650;
          *(void *)&v749[4] = v206;
          *(_WORD *)&v749[12] = 2112;
          *(void *)&v749[14] = key;
          *(_WORD *)&v749[22] = 2112;
          *(void *)&v749[24] = v709;
          _os_log_impl(&dword_19D9BE000, v196, OS_LOG_TYPE_DEFAULT, "skip %s for session %@, alloc reqID %@, link is connected.", v749, 0x20u);
        }
        goto LABEL_101;
      }
      id v207 = v716;
      if (v716)
      {
LABEL_118:
        id v716 = v207;
        uint64_t v218 = objc_msgSend_index(v207, v193, v194, v195);
        v222 = objc_msgSend_address(v716, v219, v220, v221);
        int v226 = *(unsigned __int8 *)(objc_msgSend_sa(v222, v223, v224, v225) + 1);

        BOOL v230 = (v708 || !self->_disablePureLinkFeature) && valid;
        BOOL v231 = v226 == 30 && v230;
        v232 = buf;
        if (v231) {
          v232 = (uint8_t *)v754;
        }
        uint64_t v701 = (uint64_t)v232;
        BOOL v703 = v230;
        if (!self->_H2FallbackEnabled)
        {
          uint64_t v702 = v739;
          goto LABEL_135;
        }
        if (v739 == 3)
        {
          uint64_t v233 = 4;
        }
        else
        {
          if (v739 != 4)
          {
            uint64_t v702 = v739;
            goto LABEL_132;
          }
          uint64_t v233 = 3;
        }
        uint64_t v702 = v233;
LABEL_132:
        v234 = objc_msgSend_GlobalLink(IDSFoundationLog, v227, v228, v229);
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
        {
          v235 = (&_IDSStunTransportStrings)[v739];
          uint64_t v236 = (&_IDSStunTransportStrings)[v702];
          *(_DWORD *)v749 = 136315394;
          *(void *)&v749[4] = v235;
          *(_WORD *)&v749[12] = 2080;
          *(void *)&v749[14] = v236;
          _os_log_impl(&dword_19D9BE000, v234, OS_LOG_TYPE_DEFAULT, "current stunTransport is: %s, actualSelectedTransport is: %s", v749, 0x16u);
        }

LABEL_135:
        double v237 = objc_msgSend_GlobalLink(IDSFoundationLog, v227, v228, v229);
        if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
        {
          if (v226 == 30) {
            v241 = "v6";
          }
          else {
            v241 = "v4";
          }
          objc_msgSend_name(v716, v238, v239, v240);
          id v242 = (id)objc_claimAutoreleasedReturnValue();
          v243 = (&_IDSStunTransportStrings)[v702];
          int isInternal = objc_msgSend_isInternal(v25, v244, v245, v246);
          v248 = "prod";
          *(_DWORD *)v749 = 136316674;
          *(void *)&v749[4] = v241;
          *(_WORD *)&v749[12] = 2112;
          if (isInternal) {
            v248 = "carry";
          }
          *(void *)&v749[14] = v242;
          v249 = @"NO";
          *(void *)&v749[24] = v243;
          *(_WORD *)&v749[22] = 2080;
          if (valid) {
            v249 = @"YES";
          }
          *(_WORD *)v750 = 2112;
          *(void *)&v750[2] = v709;
          *(_WORD *)&v750[10] = 2080;
          *(void *)&v750[12] = v248;
          *(_WORD *)&v750[20] = 1024;
          *(_DWORD *)&v750[22] = v703;
          *(_WORD *)&v750[26] = 2112;
          *(void *)&v750[28] = v249;
          _os_log_impl(&dword_19D9BE000, v237, OS_LOG_TYPE_DEFAULT, "selected %s interface [%@] for [%s] allocation %@, %s QR server, isConnectToQRIPv6Enabled = %d, isValidSA = %@", v749, 0x44u);
        }
        BOOL v250 = v226 == 30;

        metricsCollector = self->_metricsCollector;
        v255 = objc_msgSend_name(v716, v252, v253, v254);
        objc_msgSend_selectedLocalInterface_(metricsCollector, v256, (uint64_t)v255, v257);

        if (!v250 || v703)
        {
          FirstPrefix = 0;
        }
        else
        {
          FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v218);
          if (!FirstPrefix)
          {
            double v307 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
            {
              int v311 = objc_msgSend_index(v716, v308, v309, v310);
              *(_DWORD *)v749 = 67109120;
              *(_DWORD *)&v749[4] = v311;
              _os_log_impl(&dword_19D9BE000, v307, OS_LOG_TYPE_DEFAULT, "delay connectWithSessionInfo for if:%d nat64 prefix.", v749, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v684 = objc_msgSend_index(v716, v312, v313, v314);
                _IDSLogTransport(@"GL", @"IDS", @"delay connectWithSessionInfo for if:%d nat64 prefix.");
                if (_IDSShouldLog())
                {
                  objc_msgSend_index(v716, v315, v316, v317, v684);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"delay connectWithSessionInfo for if:%d nat64 prefix.");
                }
              }
            }
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3221225472;
            aBlock[2] = sub_19DA3D73C;
            aBlock[3] = &unk_1E5974060;
            void aBlock[4] = self;
            CFDictionaryRef v733 = theDict;
            id v716 = v716;
            id v734 = v716;
            BOOL v737 = v710;
            id v735 = v714;
            int v736 = a8;
            uint64_t v318 = _Block_copy(aBlock);
            v322 = objc_msgSend_name(v716, v319, v320, v321);
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v323, v218, v324, v322, v318);

            goto LABEL_469;
          }
          int v262 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v749 = 67109120;
            *(_DWORD *)&v749[4] = v218;
            _os_log_impl(&dword_19D9BE000, v262, OS_LOG_TYPE_DEFAULT, "nat64 prefix cache hit for if:%d", v749, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v682 = (NSString *)v218;
              _IDSLogTransport(@"GL", @"IDS", @"nat64 prefix cache hit for if:%d");
              if (_IDSShouldLog())
              {
                v682 = (NSString *)v218;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"nat64 prefix cache hit for if:%d");
              }
            }
          }
        }
        if (!self->_idsSessionID)
        {
          objc_msgSend_idsSessionID(v25, v258, v259, v260);
          v263 = (NSString *)objc_claimAutoreleasedReturnValue();
          idsSessionID = self->_idsSessionID;
          self->_idsSessionID = v263;

          memset(v744, 170, 16);
          id v265 = objc_alloc(MEMORY[0x1E4F29128]);
          v268 = objc_msgSend_initWithUUIDString_(v265, v266, (uint64_t)self->_idsSessionID, v267);
          objc_msgSend_getUUIDBytes_(v268, v269, (uint64_t)v744, v270);

          objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v271, (uint64_t)v744, v272, 16);
          v273 = (NSData *)objc_claimAutoreleasedReturnValue();
          controlMessageKey = self->_controlMessageKey;
          self->_controlMessageKey = v273;

          v275 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v276 = self->_idsSessionID;
            cbuuid = self->_cbuuid;
            *(_DWORD *)v749 = 138412546;
            *(void *)&v749[4] = v276;
            *(_WORD *)&v749[12] = 2112;
            *(void *)&v749[14] = cbuuid;
            _os_log_impl(&dword_19D9BE000, v275, OS_LOG_TYPE_DEFAULT, "update ids-session-id:%@ for cbuuid:%@.", v749, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v682 = self->_idsSessionID;
              v692 = (char *)self->_cbuuid;
              _IDSLogTransport(@"GL", @"IDS", @"update ids-session-id:%@ for cbuuid:%@.");
              if (_IDSShouldLog())
              {
                v682 = self->_idsSessionID;
                v692 = (char *)self->_cbuuid;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"update ids-session-id:%@ for cbuuid:%@.");
              }
            }
          }
        }
        double v279 = ids_monotonic_time();
        double v280 = v279;
        if (Type == 2)
        {
          if (objc_msgSend_containsObject_(self->_selfAllocateRequestIDs, v278, (uint64_t)v709, v279))
          {
            v281 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v749 = 138412290;
              *(void *)&v749[4] = v709;
              _os_log_impl(&dword_19D9BE000, v281, OS_LOG_TYPE_DEFAULT, "receive self allocate response for request %@.", v749, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v682 = (NSString *)v709;
                _IDSLogTransport(@"GL", @"IDS", @"receive self allocate response for request %@.");
                if (_IDSShouldLog())
                {
                  v682 = (NSString *)v709;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"receive self allocate response for request %@.");
                }
              }
            }
            objc_msgSend__sendAllocbindRequestForExtIP_startTime_(self, v282, (uint64_t)v25, v280, v682, v692);
            objc_msgSend_removeObject_(self->_selfAllocateRequestIDs, v283, (uint64_t)v709, v284);
            if (objc_msgSend_count(self->_selfAllocateRequestIDs, v285, v286, v287))
            {
              double v291 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v295 = objc_msgSend_count(self->_selfAllocateRequestIDs, v292, v293, v294);
                *(_DWORD *)v749 = 134217984;
                *(void *)&v749[4] = v295;
                _os_log_impl(&dword_19D9BE000, v291, OS_LOG_TYPE_DEFAULT, "selfAllocation count = %lu", v749, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v683 = objc_msgSend_count(self->_selfAllocateRequestIDs, v296, v297, v298);
                  _IDSLogTransport(@"GL", @"IDS", @"selfAllocation count = %lu");
                  if (_IDSShouldLog())
                  {
                    objc_msgSend_count(self->_selfAllocateRequestIDs, v299, v300, v301, v683);
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"selfAllocation count = %lu");
                  }
                }
              }
            }
            else
            {
              self->_hasPendingSelfAllocation = 0;
              objc_msgSend__discardSelfAllocateCandidatePairs(self, v288, v289, v290);
            }
          }
          else
          {
            uint64_t v306 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v749 = 138412290;
              *(void *)&v749[4] = v709;
              _os_log_impl(&dword_19D9BE000, v306, OS_LOG_TYPE_DEFAULT, "receive self allocate response for unknown request %@.", v749, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"receive self allocate response for unknown request %@.");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"receive self allocate response for unknown request %@.");
                }
              }
            }
          }
          goto LABEL_469;
        }
        unsigned int isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID = objc_msgSend__isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID_(self, v278, (uint64_t)v709, v279, key);
        if ((unint64_t)(v739 - 3) > 1) {
          goto LABEL_252;
        }
        Value = 0;
        if (theDict)
        {
          double v302 = (const char *)@"link-protocol";
          if (@"link-protocol") {
            Value = (void *)CFDictionaryGetValue(theDict, @"link-protocol");
          }
        }
        if (v702 == (int)objc_msgSend_intValue(Value, v302, v303, v304, v682, v692))
        {
          if (!v231)
          {
LABEL_214:
            v337 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v337, OS_LOG_TYPE_DEFAULT))
            {
              v338 = (&_IDSStunTransportStrings)[v702];
              unsigned int v339 = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
              if (self->_QUICForQREnabled) {
                v340 = @"YES";
              }
              else {
                v340 = @"NO";
              }
              *(_DWORD *)v749 = 67109634;
              *(_DWORD *)&v749[4] = v339;
              *(_WORD *)&v749[8] = 2080;
              *(void *)&v749[10] = v338;
              *(_WORD *)&v749[18] = 2112;
              *(void *)&v749[20] = v340;
              _os_log_impl(&dword_19D9BE000, v337, OS_LOG_TYPE_DEFAULT, "use port %u for %s, _QUICForQREnabled: %@", v749, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              v341 = (NSString *)(bswap32(*(unsigned __int16 *)&buf[2]) >> 16);
              v342 = self->_QUICForQREnabled ? @"YES" : @"NO";
              v692 = (&_IDSStunTransportStrings)[v702];
              v695 = v342;
              v682 = v341;
              _IDSLogTransport(@"GL", @"IDS", @"use port %u for %s, _QUICForQREnabled: %@");
              if (_IDSShouldLog())
              {
                v343 = (NSString *)(bswap32(*(unsigned __int16 *)&buf[2]) >> 16);
                if (self->_QUICForQREnabled) {
                  v344 = @"YES";
                }
                else {
                  v344 = @"NO";
                }
                v692 = (&_IDSStunTransportStrings)[v702];
                v695 = v344;
                v682 = v343;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"use port %u for %s, _QUICForQREnabled: %@");
              }
            }
            goto LABEL_229;
          }
        }
        else
        {
          if (v702 == 3) {
            unsigned int v332 = 80;
          }
          else {
            unsigned int v332 = 443;
          }
          __int16 v333 = __rev16(v332);
          *(_WORD *)&uint8_t buf[2] = v333;
          if (!v231) {
            goto LABEL_214;
          }
          WORD1(v754[0]) = v333;
        }
        v334 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT))
        {
          v335 = (&_IDSStunTransportStrings)[v702];
          *(_DWORD *)v749 = 67109378;
          *(_DWORD *)&v749[4] = bswap32(WORD1(v754[0])) >> 16;
          *(_WORD *)&v749[8] = 2080;
          *(void *)&v749[10] = v335;
          _os_log_impl(&dword_19D9BE000, v334, OS_LOG_TYPE_DEFAULT, "IPv6 only: use port %u for %s.", v749, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v682 = (NSString *)(bswap32(WORD1(v754[0])) >> 16);
            v692 = (&_IDSStunTransportStrings)[v702];
            _IDSLogTransport(@"GL", @"IDS", @"IPv6 only: use port %u for %s.");
            if (_IDSShouldLog())
            {
              v682 = (NSString *)(bswap32(WORD1(v754[0])) >> 16);
              v692 = (&_IDSStunTransportStrings)[v702];
              _IDSLogV(0, @"IDSFoundation", @"GL", @"IPv6 only: use port %u for %s.");
            }
          }
        }
LABEL_229:
        if (self->_H2FallbackEnabled)
        {
          if (v702 == 3)
          {
            v345 = self->_tcpLink;
            v349 = objc_msgSend_GlobalLink(IDSFoundationLog, v346, v347, v348);
            if (os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT))
            {
              tcpLinuint64_t k = self->_tcpLink;
              *(_DWORD *)v749 = 138412290;
              *(void *)&v749[4] = tcpLink;
              _os_log_impl(&dword_19D9BE000, v349, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: Use tcpLink since H2 is blocked: %@", v749, 0xCu);
            }

            v354 = objc_msgSend_address(v716, v351, v352, v353);
            uint64_t v358 = objc_msgSend_sa(v354, v355, v356, v357);
            v361 = (unsigned __int8 *)objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v345, v359, v218, v360, v358, LOWORD(self->_portRange), v701, self->_clientUUID, 0);

            if (!v361) {
              goto LABEL_251;
            }
            *(void *)&long long v364 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v364 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v752 = v364;
            long long v753 = v364;
            *(_OWORD *)&v750[32] = v364;
            long long v751 = v364;
            *(_OWORD *)v750 = v364;
            *(_OWORD *)&v750[16] = v364;
            *(_OWORD *)v749 = v364;
            *(_OWORD *)&v749[16] = v364;
            v365 = objc_msgSend_address(v716, v362, v363, -3.72066208e-103);
            uint64_t v369 = objc_msgSend_sa(v365, v366, v367, v368);
            SAToIPPortString(v749, 0x80uLL, v369);

            v373 = objc_msgSend_address(v716, v370, v371, v372);
            v377 = objc_msgSend_sa(v373, v374, v375, v376);
            memcpy(v377, v361, *v361);

            *(void *)&long long v378 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v378 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v747 = v378;
            long long v748 = v378;
            long long v745 = v378;
            long long v746 = v378;
            *(_OWORD *)&v744[32] = v378;
            *(_OWORD *)&v744[48] = v378;
            *(_OWORD *)v744 = v378;
            *(_OWORD *)&v744[16] = v378;
            v381 = objc_msgSend_address(v716, v379, v380, -3.72066208e-103);
            uint64_t v385 = objc_msgSend_sa(v381, v382, v383, v384);
            SAToIPPortString(v744, 0x80uLL, v385);

            v389 = objc_msgSend_GlobalLink(IDSFoundationLog, v386, v387, v388);
            if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v740 = 136315394;
              v741 = v749;
              __int16 v742 = 2080;
              v743 = v744;
              _os_log_impl(&dword_19D9BE000, v389, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: TCP connection: change the local address from %s to: %s", v740, 0x16u);
            }
            goto LABEL_250;
          }
LABEL_252:
          *(void *)&long long v435 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v435 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v752 = v435;
          long long v753 = v435;
          *(_OWORD *)&v750[32] = v435;
          long long v751 = v435;
          *(_OWORD *)v750 = v435;
          *(_OWORD *)&v750[16] = v435;
          *(_OWORD *)v749 = v435;
          *(_OWORD *)&v749[16] = v435;
          if (FirstPrefix == 0
            || v231
            || (objc_msgSend__synthesizeNAT64ForAddress_withPrefix_toAddress_(self, v302, v701, -3.72066208e-103, FirstPrefix, v749) & 1) == 0)
          {
            v436 = (unsigned char *)v701;
          }
          else
          {
            v436 = v749;
          }
          v437 = objc_msgSend_address(v716, v302, v303, *(double *)&v435, v682);
          uint64_t v441 = objc_msgSend_sa(v437, v438, v439, v440);
          tokenForStunCandidatePair(v441, (uint64_t)v436, key);
          v705 = (IDSGlobalLink *)objc_claimAutoreleasedReturnValue();

          tokenToCandidatePairs = self->_tokenToCandidatePairs;
          if (tokenToCandidatePairs
            && v705
            && (v443 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v705)) != 0)
          {
            id v444 = v443;
            v445 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v445, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v744 = 138412546;
              *(void *)&v744[4] = v25;
              *(_WORD *)&v744[12] = 2112;
              *(void *)&v744[14] = theDict;
              _os_log_impl(&dword_19D9BE000, v445, OS_LOG_TYPE_DEFAULT, "setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@", v744, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v685 = v25;
                v692 = (char *)theDict;
                _IDSLogTransport(@"GL", @"IDS", @"setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@");
                if (_IDSShouldLog())
                {
                  v685 = v25;
                  v692 = (char *)theDict;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"setPropertiesWithRelaySessionInfo: qrSessionInfo: %@, sessionInfo: %@");
                }
              }
            }
            unint64_t v449 = objc_msgSend_state(v444, v446, v447, v448, v685, v692);
            unint64_t v452 = v449;
            if (v449 <= 4 && ((1 << v449) & 0x1A) != 0)
            {
              v453 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v453, OS_LOG_TYPE_DEFAULT))
              {
                v454 = (&_IDSStunCandidatePairStateStrings)[v452];
                *(_DWORD *)v744 = 138412546;
                *(void *)&v744[4] = v705;
                *(_WORD *)&v744[12] = 2080;
                *(void *)&v744[14] = v454;
                _os_log_impl(&dword_19D9BE000, v453, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, state [%s]", v744, 0x16u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v686 = v705;
                  v692 = (&_IDSStunCandidatePairStateStrings)[v452];
                  _IDSLogTransport(@"GL", @"IDS", @"skip allocbind request for %@, state [%s]");
                  if (_IDSShouldLog())
                  {
                    v686 = v705;
                    v692 = (&_IDSStunCandidatePairStateStrings)[v452];
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"skip allocbind request for %@, state [%s]");
                  }
                }
              }
            }
            else
            {
              objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v444, v450, (uint64_t)v25, v451, theDict, self->_enableSKE);
            }
            if (v452 <= 4 && ((1 << v452) & 0x1A) != 0) {
              goto LABEL_468;
            }
          }
          else
          {
            if (self->_isSessionAcceptedWithNoCandidatePair)
            {
              BOOL v458 = self->_isInitiator;
              CFDictionaryRef v459 = theDict;
              v460 = v716;
              if (self->_acceptedRelaySessionID && self->_isInitiator)
              {
                self->_isSessionAcceptedWithNoCandidatePair = 0;
                BOOL v458 = 1;
                unsigned int isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID = 1;
              }
            }
            else
            {
              BOOL v458 = self->_isInitiator;
              CFDictionaryRef v459 = theDict;
              v460 = v716;
            }
            v461 = GLUtilCreateRelayCandidatePair(v25, v459, v460, v701, isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID, v458, self->_enableSKE, v739, self);
            v465 = v461;
            if (FirstPrefix != 0 && !v231)
            {
              v466 = objc_msgSend_local(v461, v462, v463, v464);
              objc_msgSend_setPrefix_(v466, v467, (uint64_t)FirstPrefix, v468);

              objc_msgSend_synthesizeNat64WithPrefix(v465, v469, v470, v471);
              objc_msgSend_setIsNAT64_(v465, v472, 1, v473);
              uint64_t v477 = objc_msgSend_candidatePairToken(v465, v474, v475, v476);

              v705 = (IDSGlobalLink *)v477;
            }
            v478 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v478, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v465, v479, v480, v481);
              id v482 = (id)objc_claimAutoreleasedReturnValue();
              v483 = v482;
              v484 = @"NO";
              if (isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID) {
                v484 = @"YES";
              }
              *(_DWORD *)v744 = 138412546;
              *(void *)&v744[4] = v482;
              *(_WORD *)&v744[12] = 2112;
              *(void *)&v744[14] = v484;
              _os_log_impl(&dword_19D9BE000, v478, OS_LOG_TYPE_DEFAULT, "create relay candidate pair, token: %@, isAcceptedRelaySession = %@", v744, 0x16u);
            }
            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              v488 = objc_msgSend_candidatePairToken(v465, v485, v486, v487);
              v489 = isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID ? @"YES" : @"NO";
              v686 = v488;
              v692 = (char *)v489;
              _IDSLogTransport(@"GL", @"IDS", @"create relay candidate pair, token: %@, isAcceptedRelaySession = %@");

              if (_IDSShouldLog())
              {
                v686 = objc_msgSend_candidatePairToken(v465, v490, v491, v492, v488, v489);
                v692 = (char *)v489;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"create relay candidate pair, token: %@, isAcceptedRelaySession = %@");
              }
            }
            if (!self->_tokenToCandidatePairs)
            {
              v493 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              v494 = self->_tokenToCandidatePairs;
              self->_tokenToCandidatePairs = v493;
            }
            id v444 = v465;
            if (v444)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v705, v444);
            }
            else
            {
              v495 = MEMORY[0x1E4F14500];
              id v496 = MEMORY[0x1E4F14500];
              if (os_log_type_enabled(v495, OS_LOG_TYPE_ERROR)) {
                sub_19DB78994();
              }
            }
          }
          v497 = objc_msgSend_local(v444, v455, v456, v457, v686, v692);
          int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v497, v498, v499, v500);

          if (isCellularStunCandidate)
          {
            v505 = objc_msgSend_local(v444, v502, v503, v504);
            objc_msgSend_setCellularSlicingFlags_(v505, v506, self->_cellularSlicingFlags, v507);
          }
          uint64_t v508 = objc_msgSend_clat46(v716, v502, v503, v504);
          v512 = objc_msgSend_local(v444, v509, v510, v511);
          objc_msgSend_setIsCLAT46_(v512, v513, v508, v514);

          objc_msgSend_setIsConnectToQRIPv6Enabled_(v444, v515, v708, v516);
          if (v710)
          {
            v520 = objc_msgSend_local(v444, v517, v518, v519);

            if (v520)
            {
              v524 = objc_msgSend_local(v444, v521, v522, v523);
              uint64_t v528 = objc_msgSend_radioAccessTechnology(v524, v525, v526, v527);
            }
            else
            {
              uint64_t v528 = 10;
            }
            if (theDict) {
              BOOL v540 = @"allocate-time" == 0;
            }
            else {
              BOOL v540 = 1;
            }
            int v541 = !v540;
            if (!v540) {
              CFDictionaryGetValue(theDict, @"allocate-time");
            }
            objc_opt_class();
            double v545 = 0.0;
            if (objc_opt_isKindOfClass())
            {
              if (v541) {
                v546 = (void *)CFDictionaryGetValue(theDict, @"allocate-time");
              }
              else {
                v546 = 0;
              }
              objc_msgSend_doubleValue(v546, v542, v543, v544);
              double v545 = v544;
            }
            uint64_t v551 = v739;
            uint64_t v552 = objc_msgSend_relayServerProviderType(v25, v542, v543, v544);
            v553 = self->_idsSessionID;
            v557 = objc_msgSend_reportingDataBlob(v25, v554, v555, v556);
            LOBYTE(v687) = self->_isInitiator;
            objc_msgSend__addQRAAWDBlock_allocateRequestTime_inferredExternalRAT_stunTransport_relayProviderType_idsSessionID_reportingDataBlob_isInitiator_(self, v558, (uint64_t)v709, v545, v528, v551, v552, v553, v557, v687);

            if (self->_isInitiator)
            {
              double inviteSentTime = self->_inviteSentTime;
              v562 = v716;
              if (inviteSentTime != 0.0) {
                goto LABEL_356;
              }
              v563 = 0;
              if (theDict)
              {
                v559 = @"gl-option-invite-sent-time";
                if (@"gl-option-invite-sent-time") {
                  v563 = (void *)CFDictionaryGetValue(theDict, @"gl-option-invite-sent-time");
                }
              }
              objc_msgSend_doubleValue(v563, (const char *)v559, v560, inviteSentTime);
              self->_double inviteSentTime = v564;
            }
            else
            {
              double inviteRecvTime = self->_inviteRecvTime;
              CFDictionaryRef v566 = theDict;
              if (inviteRecvTime == 0.0)
              {
                v567 = 0;
                if (theDict)
                {
                  v559 = @"gl-option-invite-recv-time";
                  if (@"gl-option-invite-recv-time") {
                    v567 = (void *)CFDictionaryGetValue(theDict, @"gl-option-invite-recv-time");
                  }
                }
                objc_msgSend_doubleValue(v567, (const char *)v559, v560, inviteRecvTime);
                self->_double inviteRecvTime = inviteRecvTime;
                CFDictionaryRef v566 = theDict;
              }
              v568 = 0;
              if (v566)
              {
                v559 = @"gl-option-use-secure-control-message";
                if (@"gl-option-use-secure-control-message") {
                  v568 = (void *)CFDictionaryGetValue(theDict, @"gl-option-use-secure-control-message");
                }
              }
              int v569 = objc_msgSend_BOOLValue(v568, (const char *)v559, v560, inviteRecvTime);
              if (self->_useSecureControlMessage) {
                int v570 = 0;
              }
              else {
                int v570 = v569;
              }
              BOOL v540 = v570 == 1;
              v562 = v716;
              if (!v540) {
                goto LABEL_356;
              }
              self->_useSecureControlMessage = 1;
              v571 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v571, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v744 = 0;
                _os_log_impl(&dword_19D9BE000, v571, OS_LOG_TYPE_DEFAULT, "enable secure control message for Receiver.", v744, 2u);
              }

              int v572 = os_log_shim_legacy_logging_enabled();
              v562 = v716;
              if (!v572
                || (int v573 = _IDSShouldLogTransport(), v562 = v716, !v573)
                || (_IDSLogTransport(@"GL", @"IDS", @"enable secure control message for Receiver."),
                    int v574 = _IDSShouldLog(),
                    v562 = v716,
                    !v574))
              {
LABEL_356:
                double allocbindStartTime = self->_allocbindStartTime;
                if (allocbindStartTime != 0.0) {
                  goto LABEL_373;
                }
                self->_double allocbindStartTime = v280;
                if (self->_isInitiator)
                {
                  v576 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v576, OS_LOG_TYPE_DEFAULT))
                  {
                    double v577 = self->_inviteSentTime;
                    double v578 = self->_allocbindStartTime;
                    *(_DWORD *)v744 = 134218240;
                    *(double *)&v744[4] = v577;
                    *(_WORD *)&v744[12] = 2048;
                    *(double *)&v744[14] = v578;
                    _os_log_impl(&dword_19D9BE000, v576, OS_LOG_TYPE_DEFAULT, "invite sent: %.6f, allocbind start: %.6f.", v744, 0x16u);
                  }

                  int v579 = os_log_shim_legacy_logging_enabled();
                  v562 = v716;
                  if (v579)
                  {
                    int v580 = _IDSShouldLogTransport();
                    v562 = v716;
                    if (v580)
                    {
                      double v690 = self->_inviteSentTime;
                      double v693 = self->_allocbindStartTime;
                      _IDSLogTransport(@"GL", @"IDS", @"invite sent: %.6f, allocbind start: %.6f.");
                      int v581 = _IDSShouldLog();
                      v562 = v716;
                      if (v581)
                      {
                        double v690 = self->_inviteSentTime;
                        double v693 = self->_allocbindStartTime;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"invite sent: %.6f, allocbind start: %.6f.");
LABEL_372:
                        v562 = v716;
                      }
                    }
                  }
                }
                else
                {
                  if (self->_isUPlusOneSession)
                  {
                    self->_calleeAcceptTime = ids_monotonic_time();
                    double v280 = self->_allocbindStartTime;
                  }
                  int v582 = ntpTime32(v280);
                  self->_unsigned int acceptDelayU32 = v582 - ntpTime32(self->_inviteRecvTime);
                  v583 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v583, OS_LOG_TYPE_DEFAULT))
                  {
                    double v584 = self->_inviteRecvTime;
                    double v585 = self->_allocbindStartTime;
                    unsigned int acceptDelayU32 = self->_acceptDelayU32;
                    *(_DWORD *)v744 = 134218752;
                    *(double *)&v744[4] = v584;
                    *(_WORD *)&v744[12] = 2048;
                    *(double *)&v744[14] = v585;
                    *(_WORD *)&v744[22] = 1024;
                    *(_DWORD *)&v744[24] = acceptDelayU32;
                    *(_WORD *)&v744[28] = 2048;
                    *(double *)&v744[30] = v585 - v584;
                    _os_log_impl(&dword_19D9BE000, v583, OS_LOG_TYPE_DEFAULT, "invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f", v744, 0x26u);
                  }

                  int v587 = os_log_shim_legacy_logging_enabled();
                  v562 = v716;
                  if (v587)
                  {
                    int v588 = _IDSShouldLogTransport();
                    v562 = v716;
                    if (v588)
                    {
                      double v697 = self->_allocbindStartTime - self->_inviteRecvTime;
                      v695 = (__CFString *)self->_acceptDelayU32;
                      double v690 = self->_inviteRecvTime;
                      double v693 = self->_allocbindStartTime;
                      _IDSLogTransport(@"GL", @"IDS", @"invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f");
                      int v589 = _IDSShouldLog();
                      v562 = v716;
                      if (v589)
                      {
                        double v697 = self->_allocbindStartTime - self->_inviteRecvTime;
                        v695 = (__CFString *)self->_acceptDelayU32;
                        double v690 = self->_inviteRecvTime;
                        double v693 = self->_allocbindStartTime;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"invite recv: %.6f, allocbind start: %.6f, accept delay: %08x/%.6f");
                        goto LABEL_372;
                      }
                    }
                  }
                }
LABEL_373:
                v590 = self->_metricsCollector;
                v591 = objc_msgSend_name(v562, (const char *)v559, v560, allocbindStartTime, *(void *)&v690, *(void *)&v693, v695, *(void *)&v697);
                objc_msgSend_willSendAllocbindRequestThroughInterface_(v590, v592, (uint64_t)v591, v593);

                v597 = objc_msgSend_GlobalLink(IDSFoundationLog, v594, v595, v596);
                if (os_log_type_enabled(v597, OS_LOG_TYPE_DEFAULT))
                {
                  if (self->_isInitiator) {
                    v601 = "Initiator";
                  }
                  else {
                    v601 = "Receiver";
                  }
                  v602 = (&_IDSStunTransportStrings)[v702];
                  v603 = self->_idsSessionID;
                  objc_msgSend_relaySessionID(v25, v598, v599, v600);
                  id v604 = (id)objc_claimAutoreleasedReturnValue();
                  v605 = v604;
                  *(_DWORD *)v744 = 136316162;
                  v606 = @"NO";
                  *(void *)&v744[4] = v601;
                  *(_WORD *)&v744[12] = 2080;
                  if (isAcceptedRelaySessionForAllocationRequestID_acceptedRelaySessionID) {
                    v606 = @"YES";
                  }
                  *(void *)&v744[14] = v602;
                  *(_WORD *)&v744[22] = 2112;
                  *(void *)&v744[24] = v603;
                  *(_WORD *)&v744[32] = 2112;
                  *(void *)&v744[34] = v604;
                  *(_WORD *)&v744[42] = 2112;
                  *(void *)&v744[44] = v606;
                  _os_log_impl(&dword_19D9BE000, v597, OS_LOG_TYPE_DEFAULT, "*** Connect as %s, actualSelectedTransport: %s, IDSSessionID: %@, QRSessionID: %@, Accepted: %@.", v744, 0x34u);
                }
                self->_hasPendingAllocation = 0;
                if (self->_state <= 1)
                {
                  v607 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v607, OS_LOG_TYPE_DEFAULT))
                  {
                    v608 = _IDSLinkStateStrings[self->_state];
                    *(_DWORD *)v744 = 138412802;
                    *(void *)&v744[4] = self;
                    *(_WORD *)&v744[12] = 2080;
                    *(void *)&v744[14] = v608;
                    *(_WORD *)&v744[22] = 2080;
                    *(char **)&v744[24] = off_1E944E548[0];
                    _os_log_impl(&dword_19D9BE000, v607, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", v744, 0x20u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      v694 = _IDSLinkStateStrings[self->_state];
                      v696 = off_1E944E548[0];
                      v691 = self;
                      _IDSLogTransport(@"GL", @"IDS", @"update GL: %@ state (%s->%s).");
                      if (_IDSShouldLog())
                      {
                        v694 = _IDSLinkStateStrings[self->_state];
                        v696 = off_1E944E548[0];
                        v691 = self;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"update GL: %@ state (%s->%s).");
                      }
                    }
                  }
                  self->_unint64_t state = 2;
                }
                v609 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v609, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v613 = objc_msgSend_length(v707, v610, v611, v612);
                  uint64_t v617 = objc_msgSend_length(v706, v614, v615, v616);
                  *(_DWORD *)v744 = 138413058;
                  *(void *)&v744[4] = v705;
                  *(_WORD *)&v744[12] = 2048;
                  *(void *)&v744[14] = v613;
                  *(_WORD *)&v744[22] = 2048;
                  *(void *)&v744[24] = v617;
                  *(_WORD *)&v744[32] = 2048;
                  *(void *)&v744[34] = v700;
                  _os_log_impl(&dword_19D9BE000, v609, OS_LOG_TYPE_DEFAULT, "start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu", v744, 0x2Au);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v621 = objc_msgSend_length(v707, v618, v619, v620);
                    v696 = (char *)objc_msgSend_length(v706, v622, v623, v624);
                    uint64_t v698 = v700;
                    v691 = v705;
                    v694 = (char *)v621;
                    _IDSLogTransport(@"GL", @"IDS", @"start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu");
                    if (_IDSShouldLog())
                    {
                      uint64_t v628 = objc_msgSend_length(v707, v625, v626, v627, v705, v621, v696, v700);
                      v696 = (char *)objc_msgSend_length(v706, v629, v630, v631);
                      uint64_t v698 = v700;
                      v691 = v705;
                      v694 = (char *)v628;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"start allocbind for %@ (token %lu bytes, key %lu bytes), participantID:%llu");
                    }
                  }
                }
                if (v714)
                {
                  v632 = _Block_copy(v714);
                  id connectReadyHandler = self->_connectReadyHandler;
                  self->_id connectReadyHandler = v632;
                }
                if (self->_QUICForQREnabled)
                {
                  if (v702 == 2)
                  {
                    v634 = OSLogHandleForTransportCategory();
                    if (os_log_type_enabled(v634, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v744 = 0;
                      _os_log_impl(&dword_19D9BE000, v634, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using QUIC", v744, 2u);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        _IDSLogTransport(@"GL", @"IDS", @"_connectWithSessionInfo: using QUIC");
                        if (_IDSShouldLog()) {
                          _IDSLogV(0, @"IDSFoundation", @"GL", @"_connectWithSessionInfo: using QUIC");
                        }
                      }
                    }
                    v638 = objc_msgSend_candidatePairToken(v444, v635, v636, v637, v691, v694, v696, v698);
                    uint64_t v642 = objc_msgSend_pendingNoSessionStateAllocbind(v444, v639, v640, v641);
                    objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v643, (uint64_t)v638, v644, 0, 0, 1, v642);

                    goto LABEL_440;
                  }
                  if (self->_H2FallbackEnabled && v702 == 4)
                  {
                    v651 = OSLogHandleForTransportCategory();
                    if (os_log_type_enabled(v651, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v744 = 0;
                      _os_log_impl(&dword_19D9BE000, v651, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using H2", v744, 2u);
                    }

                    if (os_log_shim_legacy_logging_enabled())
                    {
                      if (_IDSShouldLogTransport())
                      {
                        _IDSLogTransport(@"GL", @"IDS", @"_connectWithSessionInfo: using H2");
                        if (_IDSShouldLog()) {
                          _IDSLogV(0, @"IDSFoundation", @"GL", @"_connectWithSessionInfo: using H2");
                        }
                      }
                    }
                    v726[0] = MEMORY[0x1E4F143A8];
                    v726[1] = 3221225472;
                    v726[2] = sub_19DA3D764;
                    v726[3] = &unk_1E5974088;
                    v726[4] = self;
                    id v727 = v444;
                    objc_msgSend__connectNWTCPLink_disconnectAfterUse_connectedHandler_(self, v652, (uint64_t)v727, v653, 0, v726);

LABEL_440:
                    objc_msgSend__reportAWDAllocateTime(self, v645, v646, v647);
                    if (Type == 3) {
                      objc_msgSend_updateURIToParticipantIDMapping_(v444, v661, (uint64_t)theDict, v663);
                    }
                    *(_DWORD *)v740 = -1431655766;
                    if (self->_shouldFallbackToTCPFirst)
                    {
                      if (v739 != 3)
                      {
                        if (v739 == 2) {
                          goto LABEL_450;
                        }
                        goto LABEL_448;
                      }
                    }
                    else
                    {
                      if (v739 == 4)
                      {
LABEL_450:
                        v669 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v661, v662, v663);
                        GLUtilGetLinkInformation(key, 3, v740, 0, v669);

                        uint64_t v666 = v739;
                        BOOL v667 = *(_DWORD *)v740 == 0;
                        uint64_t v668 = 3;
LABEL_451:
                        if (v667) {
                          uint64_t v664 = v668;
                        }
                        else {
                          uint64_t v664 = v666;
                        }
                        goto LABEL_454;
                      }
                      if (v739 != 2)
                      {
LABEL_448:
                        uint64_t v664 = 0;
LABEL_454:
                        if (!v703)
                        {
                          int HasVPNInterfaceForSelectedAddress = GLUtilHasVPNInterfaceForSelectedAddress(v716, self->_interfaceAddressArray);
                          double v663 = 1.0;
                          if (HasVPNInterfaceForSelectedAddress) {
                            double v149 = 1.0;
                          }
                        }
                        if (Type == 3 || v664 && v664 != v739)
                        {
                          v671 = objc_msgSend_sharedInstance(IDSServerBag, v661, v662, v663, v691);
                          v674 = objc_msgSend_objectForKey_(v671, v672, @"ids-tcp-fallback-disabled-for-two-way", v673);

                          if (Type == 1 && objc_msgSend_BOOLValue(v674, v675, v676, v677))
                          {
                            v678 = objc_msgSend_GlobalLink(IDSFoundationLog, v675, v676, v677);
                            if (os_log_type_enabled(v678, OS_LOG_TYPE_DEFAULT))
                            {
                              v679 = (&_IDSStunTransportStrings)[v664];
                              *(_DWORD *)v744 = 136315138;
                              *(void *)&v744[4] = v679;
                              _os_log_impl(&dword_19D9BE000, v678, OS_LOG_TYPE_DEFAULT, "Two way allocation: don't fallback to %s due to server bag configurations", v744, 0xCu);
                            }
                          }
                          else
                          {
                            v680 = objc_msgSend_GlobalLink(IDSFoundationLog, v675, v676, v677);
                            if (os_log_type_enabled(v680, OS_LOG_TYPE_DEFAULT))
                            {
                              v681 = (&_IDSStunTransportStrings)[v664];
                              *(_DWORD *)v744 = 136315650;
                              *(void *)&v744[4] = v681;
                              *(_WORD *)&v744[12] = 2112;
                              *(void *)&v744[14] = key;
                              *(_WORD *)&v744[22] = 2048;
                              *(double *)&v744[24] = v149;
                              _os_log_impl(&dword_19D9BE000, v680, OS_LOG_TYPE_DEFAULT, "scheduled [%s] for session %@ after %.2f second(s).", v744, 0x20u);
                            }

                            v717[0] = MEMORY[0x1E4F143A8];
                            v717[1] = 3221225472;
                            v717[2] = sub_19DA3D7D4;
                            v717[3] = &unk_1E59740B0;
                            v718 = v444;
                            id v719 = key;
                            v720 = self;
                            uint64_t v723 = v664;
                            CFDictionaryRef v721 = theDict;
                            BOOL v725 = v710;
                            id v722 = v714;
                            int v724 = a8;
                            IDSTransportThreadAddBlockAfter(v717, v149);

                            v678 = v718;
                          }
                        }
                        goto LABEL_468;
                      }
                    }
                    v665 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v661, v662, v663);
                    GLUtilGetLinkInformation(key, 4, v740, 0, v665);

                    uint64_t v666 = v739;
                    BOOL v667 = *(_DWORD *)v740 == 0;
                    uint64_t v668 = 4;
                    goto LABEL_451;
                  }
                  v654 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v654, OS_LOG_TYPE_DEFAULT))
                  {
                    v655 = @"YES";
                    v656 = (&_IDSStunTransportStrings)[v702];
                    if (!self->_H2FallbackEnabled) {
                      v655 = @"NO";
                    }
                    *(_DWORD *)v744 = 138412546;
                    *(void *)&v744[4] = v655;
                    *(_WORD *)&v744[12] = 2080;
                    *(void *)&v744[14] = v656;
                    _os_log_impl(&dword_19D9BE000, v654, OS_LOG_TYPE_DEFAULT, "_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN", v744, 0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                  {
                    v657 = self->_H2FallbackEnabled ? @"YES" : @"NO";
                    v691 = (IDSGlobalLink *)v657;
                    v694 = (&_IDSStunTransportStrings)[v702];
                    _IDSLogTransport(@"GL", @"IDS", @"_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN");
                    if (_IDSShouldLog())
                    {
                      if (self->_H2FallbackEnabled) {
                        v658 = @"YES";
                      }
                      else {
                        v658 = @"NO";
                      }
                      v691 = (IDSGlobalLink *)v658;
                      v694 = (&_IDSStunTransportStrings)[v702];
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"_H2FallbackEnabled: %@, actual transport: %s, _connectWithSessionInfo: using STUN");
                    }
                  }
                }
                else
                {
                  v648 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v648, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)v744 = 0;
                    _os_log_impl(&dword_19D9BE000, v648, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: using STUN", v744, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(@"GL", @"IDS", @"_connectWithSessionInfo: using STUN");
                      if (_IDSShouldLog()) {
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"_connectWithSessionInfo: using STUN");
                      }
                    }
                  }
                }
                objc_msgSend_setIsQUIC_(v444, v649, 0, v650, v691, v694, v696, v698);
                objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v659, (uint64_t)v705, v660, 0, 0, 0);
                goto LABEL_440;
              }
              _IDSLogV(0, @"IDSFoundation", @"GL", @"enable secure control message for Receiver.");
            }
            v562 = v716;
            goto LABEL_356;
          }
          v529 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v529, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_groupID(v25, v530, v531, v532);
            id v533 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v744 = 138412546;
            *(void *)&v744[4] = v533;
            *(_WORD *)&v744[12] = 2112;
            *(void *)&v744[14] = key;
            _os_log_impl(&dword_19D9BE000, v529, OS_LOG_TYPE_DEFAULT, "send info request for active participants for group %@, session %@.", v744, 0x16u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              v688 = objc_msgSend_groupID(v25, v534, v536, v535);
              _IDSLogTransport(@"GL", @"IDS", @"send info request for active participants for group %@, session %@.");

              if (_IDSShouldLog())
              {
                v689 = objc_msgSend_groupID(v25, v534, v537, v535, v688, key);
                _IDSLogV(0, @"IDSFoundation", @"GL", @"send info request for active participants for group %@, session %@.");
              }
            }
          }
          if (self->_QUICForQREnabled)
          {
            if (v739 == 2)
            {
              v730[0] = MEMORY[0x1E4F143A8];
              v730[1] = 3221225472;
              v730[2] = sub_19DA3D754;
              v730[3] = &unk_1E5973BA8;
              id v444 = v444;
              id v731 = v444;
              objc_msgSend__connectNWLink_disconnectAfterUse_connectedHandler_(self, v538, (uint64_t)v444, v539, 1, v730);

LABEL_468:
              goto LABEL_469;
            }
            if (self->_H2FallbackEnabled)
            {
              v728[0] = MEMORY[0x1E4F143A8];
              v728[1] = 3221225472;
              v728[2] = sub_19DA3D75C;
              v728[3] = &unk_1E5973BA8;
              id v444 = v444;
              id v729 = v444;
              objc_msgSend__connectNWTCPLink_disconnectAfterUse_connectedHandler_(self, v549, (uint64_t)v444, v550, 1, v728);

              goto LABEL_468;
            }
          }
          objc_msgSend_setIsQUIC_(v444, v534, 0, v535);
          objc_msgSend_sendInfoRequest_(v444, v547, 0, v548);
          goto LABEL_468;
        }
        if (v702 == 4)
        {
          v345 = self->_tcpSSLLink;
          v393 = objc_msgSend_GlobalLink(IDSFoundationLog, v396, v397, v398);
          if (os_log_type_enabled(v393, OS_LOG_TYPE_DEFAULT))
          {
            tcpSSLLinuint64_t k = self->_tcpSSLLink;
            *(_DWORD *)v749 = 138412290;
            *(void *)&v749[4] = tcpSSLLink;
            v395 = "_connectWithSessionInfo: Use tcpSSLLink: %@";
            goto LABEL_244;
          }
        }
        else
        {
          if (v702 != 3)
          {
            v345 = 0;
            goto LABEL_247;
          }
          v345 = self->_tcpLink;
          v393 = objc_msgSend_GlobalLink(IDSFoundationLog, v390, v391, v392);
          if (os_log_type_enabled(v393, OS_LOG_TYPE_DEFAULT))
          {
            v394 = self->_tcpLink;
            *(_DWORD *)v749 = 138412290;
            *(void *)&v749[4] = v394;
            v395 = "_connectWithSessionInfo: Use tcpLink: %@";
LABEL_244:
            _os_log_impl(&dword_19D9BE000, v393, OS_LOG_TYPE_DEFAULT, v395, v749, 0xCu);
          }
        }

LABEL_247:
        v400 = objc_msgSend_address(v716, v302, v303, v336, v682, v692, v695);
        uint64_t v404 = objc_msgSend_sa(v400, v401, v402, v403);
        v407 = (unsigned __int8 *)objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v345, v405, v218, v406, v404, LOWORD(self->_portRange), v701, self->_clientUUID, 0);

        if (!v407)
        {
LABEL_251:

          goto LABEL_252;
        }
        *(void *)&long long v410 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v410 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v752 = v410;
        long long v753 = v410;
        *(_OWORD *)&v750[32] = v410;
        long long v751 = v410;
        *(_OWORD *)v750 = v410;
        *(_OWORD *)&v750[16] = v410;
        *(_OWORD *)v749 = v410;
        *(_OWORD *)&v749[16] = v410;
        v411 = objc_msgSend_address(v716, v408, v409, -3.72066208e-103);
        uint64_t v415 = objc_msgSend_sa(v411, v412, v413, v414);
        SAToIPPortString(v749, 0x80uLL, v415);

        v419 = objc_msgSend_address(v716, v416, v417, v418);
        v423 = objc_msgSend_sa(v419, v420, v421, v422);
        memcpy(v423, v407, *v407);

        *(void *)&long long v424 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v424 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v747 = v424;
        long long v748 = v424;
        long long v745 = v424;
        long long v746 = v424;
        *(_OWORD *)&v744[32] = v424;
        *(_OWORD *)&v744[48] = v424;
        *(_OWORD *)v744 = v424;
        *(_OWORD *)&v744[16] = v424;
        v427 = objc_msgSend_address(v716, v425, v426, -3.72066208e-103);
        uint64_t v431 = objc_msgSend_sa(v427, v428, v429, v430);
        SAToIPPortString(v744, 0x80uLL, v431);

        v389 = objc_msgSend_GlobalLink(IDSFoundationLog, v432, v433, v434);
        if (os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v740 = 136315394;
          v741 = v749;
          __int16 v742 = 2080;
          v743 = v744;
          _os_log_impl(&dword_19D9BE000, v389, OS_LOG_TYPE_DEFAULT, "_connectWithSessionInfo: TCP connection: change the local address from %s to: %s", v740, 0x16u);
        }
LABEL_250:

        goto LABEL_251;
      }
      if (self->_isInitiator)
      {
        int v208 = 0;
      }
      else
      {
        double v209 = objc_msgSend_objectForKey_(theDict, v193, @"qia", v195);
        int v208 = objc_msgSend_intValue(v209, v210, v211, v212);

        uint64_t v205 = v739;
      }
      BOOL preferCellularForCallSetup = self->_preferCellularForCallSetup;
      uint64_t v214 = self->_interfaceAddressArray;
      v215 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v193, v194, v195);
      if (Type == 3) {
        double v216 = key;
      }
      else {
        double v216 = 0;
      }
      uint64_t v217 = GLUtilSelectInterface(v205, preferCellularForCallSetup, v214, v215, v216, v208, v708, a8);

      id v207 = (id)v217;
    }
    if (!v207)
    {
      double v325 = objc_msgSend_GlobalLink(IDSFoundationLog, v193, v194, v195);
      if (os_log_type_enabled(v325, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v749 = 0;
        _os_log_impl(&dword_19D9BE000, v325, OS_LOG_TYPE_DEFAULT, "Found no local interface available for QR.", v749, 2u);
      }

      if ((v40 & 1) == 0)
      {
        sub_19DA3D624(v714, 6, @"No local interface available");
        if (self->_clientType == 6)
        {
          v329 = objc_msgSend_GlobalLink(IDSFoundationLog, v326, v327, v328);
          if (os_log_type_enabled(v329, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v749 = 0;
            _os_log_impl(&dword_19D9BE000, v329, OS_LOG_TYPE_DEFAULT, "Found no local interface available for QR. - gathering ABC with packet capture", v749, 2u);
          }

          objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v330, @"IDSQuickRelayShared", v331, @"FailedToConnect", @"NoLocalNetwork", 15);
        }
      }
      id v716 = 0;
      goto LABEL_469;
    }
    goto LABEL_118;
  }
  uint64_t v22 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    double v23 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = self;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip connecting to QR.", buf, 0x16u);
  }
LABEL_6:

LABEL_471:
}

- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 isValidSA:(BOOL)a7
{
  objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_wantOnlyCell_wantOnlyNonCell_isValidSA_(self, a2, (uint64_t)a3, v7, a4, a5, a6, 0, 0, a7);
}

- (void)_selectStunTransport:(int64_t *)a3 andInterfaceAddress:(id *)a4 forRelaySessionID:(id)a5 preferIPv4:(BOOL)a6 wantOnlyCell:(BOOL)a7 wantOnlyNonCell:(BOOL)a8 isValidSA:(BOOL)a9
{
  BOOL v9 = a8;
  BOOL v268 = a7;
  BOOL v10 = a6;
  uint64_t v341 = *MEMORY[0x1E4F143B8];
  id v13 = a5;
  allocationsToTransportScoreCards = self->_allocationsToTransportScoreCards;
  if (!allocationsToTransportScoreCards)
  {
    Mutable = (NSDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unsigned int v17 = self->_allocationsToTransportScoreCards;
    self->_allocationsToTransportScoreCards = Mutable;

    allocationsToTransportScoreCards = self->_allocationsToTransportScoreCards;
  }
  objc_msgSend_objectForKeyedSubscript_(allocationsToTransportScoreCards, v12, (uint64_t)v13, v14, a4);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  if (!v20)
  {
    id v22 = objc_alloc(MEMORY[0x1E4F1CA48]);
    id v20 = (id)objc_msgSend_initWithArray_copyItems_(v22, v23, (uint64_t)self->_transportScoreCards, v24, 1);
    if (v20)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_allocationsToTransportScoreCards, v13, v20);
    }
    else
    {
      uint64_t v25 = MEMORY[0x1E4F14500];
      id v26 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_19DB78A9C();
      }
    }
  }
  BOOL v269 = v9;
  BOOL v273 = v10;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v18, v19, v21);
  long long v316 = 0u;
  long long v317 = 0u;
  long long v318 = 0u;
  long long v319 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v27, (uint64_t)&v316, v28, v340, 16);
  if (v29)
  {
    uint64_t v33 = v29;
    uint64_t v34 = *(void *)v317;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v317 != v34) {
          objc_enumerationMutation(obj);
        }
        int v36 = *(void **)(*((void *)&v316 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v36, v30, v31, v32))
        {
          int v37 = objc_msgSend_sessionID(v36, v30, v31, v32);
          if (objc_msgSend_isEqualToString_(v37, v38, (uint64_t)v13, v39))
          {
            char isSelfQRSession = objc_msgSend_isSelfQRSession(v36, v40, v41, v42);

            if ((isSelfQRSession & 1) == 0)
            {
              unint64_t v44 = objc_msgSend_state(v36, v30, v31, v32);
              if (v44 > 4
                || (unint64_t v45 = v44, isDisconnecting = objc_msgSend_isDisconnecting(v36, v30, v31, v32), !v45)
                || isDisconnecting)
              {
                if (objc_msgSend_count(v20, v30, v31, v32))
                {
                  unint64_t v47 = 0;
                  do
                  {
                    objc_msgSend_objectAtIndexedSubscript_(v20, v30, v47, v32);
                    uint64_t v48 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend__isUsingSameRATCandidatePair_transportScoreCard_(self, v49, (uint64_t)v36, v50, v48))v48[36] = 0; {

                    }
                    ++v47;
                  }
                  while (objc_msgSend_count(v20, v51, v52, v53) > v47);
                }
              }
            }
          }
          else
          {
          }
        }
      }
      uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v30, (uint64_t)&v316, v32, v340, 16);
    }
    while (v33);
  }
  double v280 = v13;

  if (!a9)
  {
    long long v314 = 0u;
    long long v315 = 0u;
    long long v312 = 0u;
    long long v313 = 0u;
    id v271 = v20;
    id v277 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v271, v54, (uint64_t)&v312, v55, v339, 16);
    if (v277)
    {
      id v274 = *(id *)v313;
      do
      {
        for (uint64_t j = 0; j != v277; uint64_t j = (char *)j + 1)
        {
          if (*(id *)v313 != v274) {
            objc_enumerationMutation(v271);
          }
          uint64_t v57 = *(void *)(*((void *)&v312 + 1) + 8 * (void)j);
          long long v308 = 0u;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v311 = 0u;
          double v58 = self->_interfaceAddressArray;
          uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v59, (uint64_t)&v308, v60, v338, 16);
          if (v61)
          {
            uint64_t v65 = v61;
            uint64_t v66 = *(void *)v309;
            do
            {
              for (uint64_t k = 0; k != v65; ++k)
              {
                if (*(void *)v309 != v66) {
                  objc_enumerationMutation(v58);
                }
                id v68 = *(void **)(*((void *)&v308 + 1) + 8 * k);
                if (objc_msgSend_index(v68, v62, v63, v64) == *(_DWORD *)(v57 + 32))
                {
                  uint64_t v69 = objc_msgSend_index(v68, v62, v63, v64);
                  int isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v70, v69, v71);
                  uint64_t v76 = objc_msgSend_IPVersion(v68, v73, v74, v75);
                  if (*(unsigned char *)(v57 + 37))
                  {
                    if (v76 == 1 && isInterfaceDelegatedWithInterfaceIndex != *(void *)(v57 + 24) < 4) {
                      *(unsigned char *)(v57 + 36) = (GLUGetExtendedFlagsForInterface(v68) & 0x1000) == 0;
                    }
                  }
                }
              }
              uint64_t v65 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v62, (uint64_t)&v308, v64, v338, 16);
            }
            while (v65);
          }
        }
        id v277 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v271, v77, (uint64_t)&v312, v78, v339, 16);
      }
      while (v277);
    }
  }
  long long v306 = 0u;
  long long v307 = 0u;
  long long v304 = 0u;
  long long v305 = 0u;
  id v278 = obj;
  uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v278, v79, (uint64_t)&v304, v80, v337, 16);
  if (v81)
  {
    uint64_t v85 = v81;
    id obja = *(id *)v305;
    do
    {
      for (uint64_t m = 0; m != v85; ++m)
      {
        if (*(id *)v305 != obja) {
          objc_enumerationMutation(v278);
        }
        double v87 = *(void **)(*((void *)&v304 + 1) + 8 * m);
        if (objc_msgSend_isRelayStunCandidatePair(v87, v82, v83, v84))
        {
          id v88 = objc_msgSend_sessionID(v87, v82, v83, v84);
          if (objc_msgSend_isEqualToString_(v88, v89, (uint64_t)v280, v90))
          {
            char v94 = objc_msgSend_isSelfQRSession(v87, v91, v92, v93);

            if ((v94 & 1) == 0 && (unint64_t)(objc_msgSend_state(v87, v82, v83, v84) - 1) <= 1)
            {
              uint64_t v95 = objc_msgSend_local(v87, v82, v83, v84);
              uint64_t v99 = objc_msgSend_index(v95, v96, v97, v98);

              int v272 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v100, v99, v101);
              double v105 = objc_msgSend_local(v87, v102, v103, v104);
              int v109 = *(unsigned __int8 *)(objc_msgSend_address(v105, v106, v107, v108) + 1);

              if (objc_msgSend_count(v20, v110, v111, v112))
              {
                unint64_t v113 = 0;
                int v275 = v109 == 30;
                do
                {
                  uint64_t v114 = objc_msgSend_objectAtIndexedSubscript_(v20, v82, v113, v84);
                  uint64_t v118 = v114;
                  if (*(_DWORD *)(v114 + 32) == v99)
                  {
                    uint64_t v119 = *(void *)(v114 + 16);
                    double v120 = objc_msgSend_local(v87, v115, v116, v117);
                    if (v119 == objc_msgSend_transport(v120, v121, v122, v123)
                      && *(unsigned __int8 *)(v118 + 37) == v275)
                    {
                      int v124 = *(void *)(v118 + 24) < 4;

                      if (v272 != v124) {
                        *(unsigned char *)(v118 + 36) = 1;
                      }
                    }
                    else
                    {
                    }
                  }

                  ++v113;
                }
                while (objc_msgSend_count(v20, v125, v126, v127) > v113);
              }
            }
          }
          else
          {
          }
        }
      }
      uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v278, v82, (uint64_t)&v304, v84, v337, 16);
    }
    while (v85);
  }

  long long v302 = 0u;
  long long v303 = 0u;
  long long v300 = 0u;
  long long v301 = 0u;
  id v279 = v278;
  uint64_t v130 = objc_msgSend_countByEnumeratingWithState_objects_count_(v279, v128, (uint64_t)&v300, v129, v336, 16);
  BOOL v134 = v273;
  if (v130)
  {
    uint64_t v135 = v130;
    uint64_t v136 = *(void *)v301;
    do
    {
      for (uint64_t n = 0; n != v135; ++n)
      {
        if (*(void *)v301 != v136) {
          objc_enumerationMutation(v279);
        }
        double v138 = *(void **)(*((void *)&v300 + 1) + 8 * n);
        if (objc_msgSend_isRelayStunCandidatePair(v138, v131, v132, v133)
          && (objc_msgSend_isDisconnecting(v138, v131, v132, v133) & 1) == 0)
        {
          BOOL v139 = objc_msgSend_sessionID(v138, v131, v132, v133);
          if (objc_msgSend_isEqualToString_(v139, v140, (uint64_t)v280, v141))
          {
            char v145 = objc_msgSend_isSelfQRSession(v138, v142, v143, v144);

            if ((v145 & 1) == 0
              && (unint64_t)(objc_msgSend_state(v138, v131, v132, v133) - 3) <= 1
              && objc_msgSend_count(v20, v131, v132, v133))
            {
              unint64_t v146 = 0;
              do
              {
                objc_msgSend_objectAtIndexedSubscript_(v20, v131, v146, v133);
                v147 = (unsigned char *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend__isUsingSameRATCandidatePair_transportScoreCard_(self, v148, (uint64_t)v138, v149, v147))v147[36] = 1; {

                }
                ++v146;
              }
              while (objc_msgSend_count(v20, v150, v151, v152) > v146);
            }
          }
          else
          {
          }
        }
      }
      uint64_t v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(v279, v131, (uint64_t)&v300, v133, v336, 16);
    }
    while (v135);
  }

  BOOL v154 = v268;
  BOOL v153 = v269;
  if (self->_cellInterfaceName)
  {
    long long v298 = 0u;
    long long v299 = 0u;
    long long v296 = 0u;
    long long v297 = 0u;
    id v155 = v279;
    uint64_t v158 = objc_msgSend_countByEnumeratingWithState_objects_count_(v155, v156, (uint64_t)&v296, v157, v335, 16);
    if (v158)
    {
      uint64_t v162 = v158;
      uint64_t v163 = *(void *)v297;
      do
      {
        for (iuint64_t i = 0; ii != v162; ++ii)
        {
          if (*(void *)v297 != v163) {
            objc_enumerationMutation(v155);
          }
          double v165 = *(void **)(*((void *)&v296 + 1) + 8 * ii);
          if (objc_msgSend_isRelayStunCandidatePair(v165, v159, v160, v161))
          {
            double v166 = objc_msgSend_sessionID(v165, v159, v160, v161);
            if (objc_msgSend_isEqualToString_(v166, v167, (uint64_t)v280, v168))
            {
              char v172 = objc_msgSend_isSelfQRSession(v165, v169, v170, v171);

              if (v172) {
                continue;
              }
              v173 = objc_msgSend_local(v165, v159, v160, v161);
              uint64_t v177 = objc_msgSend_index(v173, v174, v175, v176);
              double v166 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(self, v178, v177, v179);

              v183 = objc_msgSend_local(v165, v180, v181, v182);
              if (objc_msgSend_isCellularStunCandidate(v183, v184, v185, v186))
              {
                char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v166, v187, (uint64_t)self->_cellInterfaceName, v188);

                if (isEqualToIgnoringCase)
                {

                  BOOL v134 = v273;
                  BOOL v154 = v268;
                  BOOL v153 = v269;
                  goto LABEL_117;
                }
              }
              else
              {
              }
            }
          }
        }
        uint64_t v162 = objc_msgSend_countByEnumeratingWithState_objects_count_(v155, v159, (uint64_t)&v296, v161, v335, 16);
      }
      while (v162);
    }

    BOOL v134 = v273;
    BOOL v154 = v268;
    BOOL v153 = v269;
    if (objc_msgSend_count(v20, v190, v191, v192))
    {
      unint64_t v195 = 0;
      do
      {
        uint64_t v196 = objc_msgSend_objectAtIndexedSubscript_(v20, v193, v195, v194);
        uint64_t v197 = *(void *)(v196 + 24);
        if (v197 == 6 || v197 == 3) {
          *(unsigned char *)(v196 + 36) = 0;
        }

        ++v195;
      }
      while (objc_msgSend_count(v20, v199, v200, v201) > v195);
    }
  }
LABEL_117:
  long long v294 = 0u;
  long long v295 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  id v202 = v20;
  uint64_t v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(v202, v203, (uint64_t)&v292, v204, v334, 16);
  if (v205)
  {
    uint64_t v208 = v205;
    double v270 = 0;
    unint64_t v209 = 0;
    uint64_t v210 = *(void *)v293;
    do
    {
      for (juint64_t j = 0; jj != v208; ++jj)
      {
        if (*(void *)v293 != v210) {
          objc_enumerationMutation(v202);
        }
        uint64_t v212 = *(void *)(*((void *)&v292 + 1) + 8 * jj);
        if (v154)
        {
          uint64_t v213 = *(void *)(v212 + 24);
          if (v213 != 6 && v213 != 3) {
            continue;
          }
        }
        if (v153)
        {
          uint64_t v215 = *(void *)(v212 + 24);
          if (v215 == 3 || v215 == 6) {
            continue;
          }
        }
        if (!*(unsigned char *)(v212 + 36))
        {
          unint64_t v217 = *(void *)(v212 + 8);
          if (v134)
          {
            if (*(unsigned char *)(v212 + 37)) {
              v217 >>= 2;
            }
            else {
              v217 *= 4;
            }
          }
          if (v217 > v209)
          {
            uint64_t v218 = (int64_t *)(id)v212;

            double v270 = v218;
            unint64_t v209 = v217;
          }
        }
      }
      uint64_t v208 = objc_msgSend_countByEnumeratingWithState_objects_count_(v202, v206, (uint64_t)&v292, v207, v334, 16);
    }
    while (v208);
  }
  else
  {
    double v270 = 0;
  }

  v222 = objc_msgSend_GlobalLink(IDSFoundationLog, v219, v220, v221);
  if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v222, OS_LOG_TYPE_DEFAULT, "\t========== TransportScoreCards ==========", buf, 2u);
  }

  long long v290 = 0u;
  long long v291 = 0u;
  long long v288 = 0u;
  long long v289 = 0u;
  id v276 = v202;
  uint64_t v225 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v223, (uint64_t)&v288, v224, v333, 16);
  if (v225)
  {
    uint64_t v228 = v225;
    uint64_t v229 = *(void *)v289;
    uint64_t v230 = 138413570;
    do
    {
      for (kuint64_t k = 0; kk != v228; ++kk)
      {
        if (*(void *)v289 != v229) {
          objc_enumerationMutation(v276);
        }
        uint64_t v232 = *(void *)(*((void *)&v288 + 1) + 8 * kk);
        unint64_t v233 = *(void *)(v232 + 8);
        if (v134)
        {
          if (*(unsigned char *)(v232 + 37)) {
            v233 >>= 2;
          }
          else {
            v233 *= 4;
          }
        }
        v234 = objc_msgSend_GlobalLink(IDSFoundationLog, v226, v227, *(double *)&v230);
        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v237 = v228;
          if (*(unsigned char *)(v232 + 37)) {
            int v238 = @"YES";
          }
          else {
            int v238 = @"NO";
          }
          int objb = *(_DWORD *)(v232 + 32);
          uint64_t v239 = (&_IDSStunTransportStrings)[*(void *)(v232 + 16)];
          objc_msgSend__transportInterfaceToString_(self, v235, *(void *)(v232 + 24), v236);
          id v240 = (id)objc_claimAutoreleasedReturnValue();
          v241 = v240;
          id v242 = @"YES";
          if (!*(unsigned char *)(v232 + 36)) {
            id v242 = @"NO";
          }
          *(_DWORD *)buf = 138413570;
          v322 = v238;
          uint64_t v228 = v237;
          __int16 v323 = 1024;
          int v324 = objb;
          BOOL v134 = v273;
          __int16 v325 = 2080;
          v326 = v239;
          __int16 v327 = 2112;
          id v328 = v240;
          __int16 v329 = 2112;
          v330 = v242;
          __int16 v331 = 2048;
          unint64_t v332 = v233;
          _os_log_impl(&dword_19D9BE000, v234, OS_LOG_TYPE_DEFAULT, "IPV6 = %@, interfaceIndex = %u, stunTransport = %s, transportInterface = %@, alreadySelected = %@, score = %llu", buf, 0x3Au);
        }
      }
      uint64_t v228 = objc_msgSend_countByEnumeratingWithState_objects_count_(v276, v226, (uint64_t)&v288, *(double *)&v230, v333, 16);
    }
    while (v228);
  }

  double v246 = objc_msgSend_GlobalLink(IDSFoundationLog, v243, v244, v245);
  if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v246, OS_LOG_TYPE_DEFAULT, "\t==========================================", buf, 2u);
  }

  if (v270)
  {
    *a3 = v270[2];
    long long v284 = 0u;
    long long v285 = 0u;
    long long v286 = 0u;
    long long v287 = 0u;
    double v247 = self->_interfaceAddressArray;
    uint64_t v250 = objc_msgSend_countByEnumeratingWithState_objects_count_(v247, v248, (uint64_t)&v284, v249, v320, 16);
    if (v250)
    {
      uint64_t v254 = v250;
      uint64_t v255 = *(void *)v285;
      while (2)
      {
        for (muint64_t m = 0; mm != v254; ++mm)
        {
          if (*(void *)v285 != v255) {
            objc_enumerationMutation(v247);
          }
          double v257 = *(void **)(*((void *)&v284 + 1) + 8 * mm);
          if (objc_msgSend_index(v257, v251, v252, v253) == *((_DWORD *)v270 + 8))
          {
            uint64_t v258 = objc_msgSend_index(v257, v251, v252, v253);
            int v261 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v259, v258, v260);
            if (*((unsigned char *)v270 + 37) == (objc_msgSend_IPVersion(v257, v262, v263, v264) == 1) && v261 != v270[3] < 4)
            {
              *int v266 = v257;
              goto LABEL_179;
            }
          }
        }
        uint64_t v254 = objc_msgSend_countByEnumeratingWithState_objects_count_(v247, v251, (uint64_t)&v284, v253, v320, 16);
        if (v254) {
          continue;
        }
        break;
      }
    }
LABEL_179:
  }
}

- (void)disconnectWithCompletionHandler:(id)a3 isReinitiating:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  BOOL v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    uint64_t v83 = self;
    __int16 v84 = 2112;
    uint64_t v85 = idsSessionID;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting IDSGlobalLink %@ with IDSSessionID: %@", buf, 0x16u);
  }

  unint64_t state = self->_state;
  if (state > 3)
  {
    if (state == 4)
    {
      double v32 = _Block_copy(v6);
      id disconnectCompletionHandler = self->_disconnectCompletionHandler;
      self->_id disconnectCompletionHandler = v32;

      objc_msgSend__didReceiveRequestToPurgeRegistration(self, v34, v35, v36);
      if (self->_state != 5)
      {
        int v40 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = _IDSLinkStateStrings[self->_state];
          *(_DWORD *)buf = 138412802;
          uint64_t v83 = self;
          __int16 v84 = 2080;
          uint64_t v85 = v41;
          __int16 v86 = 2080;
          double v87 = off_1E944E560[0];
          _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v72 = (uint64_t)_IDSLinkStateStrings[self->_state];
            uint64_t v73 = off_1E944E560[0];
            double v71 = (char *)self;
            _IDSLogTransport(@"GL", @"IDS", @"update GL: %@ state (%s->%s).");
            if (_IDSShouldLog())
            {
              uint64_t v72 = (uint64_t)_IDSLinkStateStrings[self->_state];
              uint64_t v73 = off_1E944E560[0];
              double v71 = (char *)self;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"update GL: %@ state (%s->%s).");
            }
          }
        }
        self->_unint64_t state = 5;
      }
      objc_msgSend__removePacketNotificationFilter(self, v37, v38, v39, v71, v72, v73);
    }
    else
    {
      double v42 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v43 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 136315138;
        uint64_t v83 = (IDSGlobalLink *)v43;
        _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "session is already disconnecting, state[%s].", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"session is already disconnecting, state[%s].");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"session is already disconnecting, state[%s].");
          }
        }
      }
      if (v6)
      {
        unint64_t v44 = im_primary_queue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_19DA3EED4;
        block[3] = &unk_1E5973F20;
        id v75 = v6;
        dispatch_block_t v45 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
        dispatch_async(v44, v45);
      }
    }
  }
  else
  {
    double v16 = objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = self->_idsSessionID;
      uint64_t v18 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412546;
      uint64_t v83 = (IDSGlobalLink *)v17;
      __int16 v84 = 2080;
      uint64_t v85 = v18;
      _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "Session with IDSSessionID: %@ is not connected, state [%s].", buf, 0x16u);
    }

    self->_unint64_t state = 6;
    double allocbindEndTime = self->_allocbindEndTime;
    if (allocbindEndTime > 0.0)
    {
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      id v22 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v19, v20, 0.0);
      uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v78, v24, v88, 16);
      if (v27)
      {
        uint64_t v29 = *(void *)v79;
        while (2)
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v79 != v29) {
              objc_enumerationMutation(v22);
            }
            uint64_t v31 = *(void **)(*((void *)&v78 + 1) + 8 * i);
            if (objc_msgSend_state(v31, v25, v26, v28) == 3)
            {
              uint64_t v46 = objc_msgSend_local(v31, v25, v26, v28);
              unint64_t v47 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v51 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v46, v48, v49, v50)];
                *(_DWORD *)buf = 136315394;
                uint64_t v83 = (IDSGlobalLink *)v51;
                __int16 v84 = 1024;
                LODWORD(v85) = 21;
                _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  double v71 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v46, v52, v53, v54)];
                  uint64_t v72 = 21;
                  _IDSLogTransport(@"GL", @"IDS", @"report session setup failure (%s, %d).");
                  if (_IDSShouldLog())
                  {
                    double v71 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v46, v55, v56, v57, v71, 21)];
                    uint64_t v72 = 21;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"report session setup failure (%s, %d).");
                  }
                }
              }
              GLUtilReportAWDClientTimerEvent(305, 21, v31, self->_enableSKE, self->_isInitiator, 0.0);
              double v58 = GLUCreateQRClientTimeEvent(305, 21, v31, self->_timeBase, 0.0);
              id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              char v60 = objc_opt_respondsToSelector();

              if (v60)
              {
                id v61 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v61, v62, (uint64_t)self, v63, v58);
              }
              goto LABEL_43;
            }
          }
          uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v25, (uint64_t)&v78, v28, v88, 16);
          if (v27) {
            continue;
          }
          break;
        }
      }
LABEL_43:
    }
    objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v19, 1, allocbindEndTime, v4, v71, v72);
    if (v6)
    {
      double v64 = im_primary_queue();
      v76[0] = MEMORY[0x1E4F143A8];
      v76[1] = 3221225472;
      v76[2] = sub_19DA3EEC0;
      v76[3] = &unk_1E5973F20;
      id v77 = v6;
      dispatch_block_t v65 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, v76);
      dispatch_async(v64, v65);
    }
    else
    {
      id v66 = objc_loadWeakRetained((id *)&self->_delegate);
      char v67 = objc_opt_respondsToSelector();

      if (v67)
      {
        id v68 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v68, v69, (uint64_t)self, v70, 0, self->_cbuuid);
      }
    }
  }
}

- (void)setClientUniquePID:(unint64_t)a3
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    unint64_t v8 = a3;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "Got client unique PID %llu", (uint8_t *)&v7, 0xCu);
  }

  self->_clientUniquePID = a3;
}

- (void)requestChildConnectionIDForLinkID:(char)a3 relayGroupID:(id)a4
{
  uint64_t v4 = a3;
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  if (self->_QUICForQREnabled && !self->_disableDirectDatapath)
  {
    BOOL v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v146) = v4;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "requestChildConnectionIDForLinkID called for linkID %d", buf, 8u);
    }

    uint64_t v11 = GLUtilGetCandidatePairByLinkID(v4, self->_sendInfoList, self->_linkIDToCandidatePairs, self->_channelToCandidatePairs);
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v11, v12, v13, v14))
    {
      uint64_t v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v146) = v4;
        _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "requestChildConnectionIDForLinkID linkID %d is for a virtual link", buf, 8u);
      }
    }
    else
    {
      id v144 = v8;
      if (objc_msgSend_isRelayStunCandidatePair(v11, v15, v16, v17)) {
        uint64_t v22 = 5;
      }
      else {
        uint64_t v22 = 0;
      }
      nwLinuint64_t k = self->_nwLink;
      uint64_t v142 = v22;
      double v23 = objc_msgSend_local(v11, v19, v20, v21);
      uint64_t v27 = objc_msgSend_address(v23, v24, v25, v26);
      uint64_t v31 = objc_msgSend_remote(v11, v28, v29, v30);
      uint64_t v35 = objc_msgSend_external(v31, v32, v33, v34);
      unint64_t clientUniquePID = self->_clientUniquePID;
      int v40 = objc_msgSend_sessionID(v11, v37, v38, v39);
      uint64_t isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v11, v41, v42, v43);
      uint64_t v48 = objc_msgSend_local(v11, v45, v46, v47);
      char isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v48, v49, v50, v51);
      uint64_t v18 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v52, v27, v53, v35, clientUniquePID, v40, v142, isRelayStunCandidatePair, isCellularStunCandidate);

      if (objc_msgSend_isRelayStunCandidatePair(v11, v54, v55, v56))
      {
        unsigned int shouldUseQRTLE = objc_msgSend__shouldUseQRTLE(self, v57, v58, v59);
        v140 = self->_nwLink;
        double v63 = objc_msgSend_local(v11, v60, v61, v62);
        uint64_t v67 = objc_msgSend_address(v63, v64, v65, v66);
        double v71 = objc_msgSend_remote(v11, v68, v69, v70);
        uint64_t v75 = objc_msgSend_external(v71, v72, v73, v74);
        unint64_t v76 = self->_clientUniquePID;
        long long v80 = objc_msgSend_sessionID(v11, v77, v78, v79);
        __int16 v84 = objc_msgSend_local(v11, v81, v82, v83);
        LOBYTE(v137) = objc_msgSend_isCellularStunCandidate(v84, v85, v86, v87);
        objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v140, v88, v67, v89, v75, v76, v80, 7, 1, v137);
      }
      else
      {
        unsigned int shouldUseQRTLE = objc_msgSend__shouldUseP2PTLE(self, v57, v58, v59);
        double v141 = self->_nwLink;
        double v63 = objc_msgSend_local(v11, v90, v91, v92);
        uint64_t v96 = objc_msgSend_address(v63, v93, v94, v95);
        double v71 = objc_msgSend_remote(v11, v97, v98, v99);
        uint64_t v103 = objc_msgSend_external(v71, v100, v101, v102);
        unint64_t v104 = self->_clientUniquePID;
        long long v80 = objc_msgSend_sessionID(v11, v105, v106, v107);
        __int16 v84 = objc_msgSend_local(v11, v108, v109, v110);
        LOBYTE(v137) = objc_msgSend_isCellularStunCandidate(v84, v111, v112, v113);
        objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v141, v114, v96, v115, v103, v104, v80, 9, 0, v137);
      uint64_t v116 = };

      double v120 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v117, v118, v119);
      if (v18)
      {
        id v121 = GLUtilConnectionDictionaryForNWConnectionInfo(v18, 1);
        objc_msgSend_setObject_forKeyedSubscript_(v120, v122, (uint64_t)v121, v123, @"udp");
      }
      if (v116)
      {
        int v124 = GLUtilConnectionDictionaryForNWConnectionInfo(v116, shouldUseQRTLE);
        objc_msgSend_setObject_forKeyedSubscript_(v120, v125, (uint64_t)v124, v126, @"qpod");
      }
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v128 = objc_opt_respondsToSelector();

      if (v128)
      {
        uint64_t v132 = objc_msgSend_GlobalLink(IDSFoundationLog, v129, v130, v131);
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          unint64_t v146 = v120;
          __int16 v147 = 1024;
          unsigned int v148 = v138;
          _os_log_impl(&dword_19D9BE000, v132, OS_LOG_TYPE_DEFAULT, "Send child connections %@ for linkID %d", buf, 0x12u);
        }

        id v133 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didReceiveChildConnections_forLinkID_(v133, v134, (uint64_t)self, v135, v120, v138);
      }
      id v8 = v144;
    }
  }
}

- (void)_updateDefaultCandidatePair:(id)a3
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v59 = a3;
  double v3 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v3)
  {
    if (*((_DWORD *)v3 + 1))
    {
      char v60 = v3;
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v61, v9, v69, 16);
      if (v12)
      {
        uint64_t v13 = *(void *)v62;
        uint64_t v14 = 138412290;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v62 != v13) {
              objc_enumerationMutation(v7);
            }
            uint64_t v16 = *(void **)(*((void *)&v61 + 1) + 8 * i);
            double v17 = objc_msgSend_local(v16, v10, v11, *(double *)&v14, v56);
            uint64_t v21 = objc_msgSend_address(v17, v18, v19, v20);

            uint64_t v25 = objc_msgSend_remote(v16, v22, v23, v24);
            uint64_t v29 = objc_msgSend_external(v25, v26, v27, v28);

            int v33 = objc_msgSend_channelNumber(v16, v30, v31, v32);
            if (IsSameSA(v21, (uint64_t)(v60 + 1))
              && IsSameSA(v29, (uint64_t)(v60 + 17))
              && *((unsigned __int16 *)v60 + 132) == v33)
            {
              objc_msgSend_setIsActive_(v16, v10, 0, *(double *)&v14);
              objc_msgSend_setLastOutgoingPacketTime_(v16, v34, v35, v60[35]);
              objc_msgSend_setLastIncomingPacketTime_(v16, v36, v37, v60[36]);
              uint64_t v38 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                id v66 = v16;
                _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "deactivate candidate pair %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  id v56 = v16;
                  _IDSLogTransport(@"GL", @"IDS", @"deactivate candidate pair %@.");
                  if (_IDSShouldLog())
                  {
                    id v56 = v16;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"deactivate candidate pair %@.");
                  }
                }
              }
            }
          }
          uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v61, *(double *)&v14, v69, 16);
        }
        while (v12);
      }
    }
    IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v59, 0);
    double v39 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = objc_msgSend_linkID(v59, v40, v41, v42);
      *(_DWORD *)buf = 138412546;
      id v66 = v59;
      __int16 v67 = 1024;
      int v68 = v43;
      _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v56 = v59;
        uint64_t v57 = (int)objc_msgSend_linkID(v59, v44, v46, v45);
        _IDSLogTransport(@"GL", @"IDS", @"_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d.");
        if (_IDSShouldLog())
        {
          int v48 = objc_msgSend_linkID(v59, v44, v47, v45, v59, v57);
          id v56 = v59;
          uint64_t v57 = v48;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_updateDefaultCandidatePair: update default sendInfo with:%@, linkID:%d.");
        }
      }
    }
    objc_msgSend_setIsActive_(v59, v44, 1, v45, v56, v57);
    if ((objc_msgSend_isNominated(v59, v49, v50, v51) & 1) == 0)
    {
      objc_msgSend_setIsNominated_(v59, v52, 1, v53);
      double v54 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v66 = v59;
        _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "set nominated flag for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"set nominated flag for %@.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"set nominated flag for %@.");
          }
        }
      }
    }
  }
  else
  {
    uint64_t v55 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "_updateDefaultCandidatePair failed due to invalid list.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_updateDefaultCandidatePair failed due to invalid list.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_updateDefaultCandidatePair failed due to invalid list.");
        }
      }
    }
  }
}

- (BOOL)_hasCandidatePairInState:(unint64_t)a3 relayCandidatePairsOnly:(BOOL)a4 excludeSelfAlloc:(BOOL)a5
{
  return objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, a2, a3, v5, a3, a4, a5);
}

- (BOOL)_hasCandidatePairInState:(unint64_t)a3 anotherState:(unint64_t)a4 relayCandidatePairsOnly:(BOOL)a5 excludeSelfAlloc:(BOOL)a6
{
  BOOL v7 = a6;
  BOOL v8 = a5;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v6);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v29, v13, v37, 16);
  if (v14)
  {
    uint64_t v18 = v14;
    uint64_t v19 = *(void *)v30;
    while (2)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v30 != v19) {
          objc_enumerationMutation(v11);
        }
        uint64_t v21 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        if ((!v7
           || objc_msgSend_allocateType(*(void **)(*((void *)&v29 + 1) + 8 * i), v15, v16, v17, (void)v29) != 2)
          && (!v8 || objc_msgSend_isRelayStunCandidatePair(v21, v15, v16, v17)))
        {
          uint64_t v22 = objc_msgSend_state(v21, v15, v16, v17, (void)v29);
          if (v22 == a3 || v22 == a4)
          {
            uint64_t v25 = v22;
            double v26 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v27 = (&_IDSStunCandidatePairStateStrings)[v25];
              *(_DWORD *)buf = 136315394;
              double v34 = v27;
              __int16 v35 = 2112;
              double v36 = v21;
              _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "Found a CandidatePair in state: %s for %@", buf, 0x16u);
            }

            BOOL v24 = 1;
            goto LABEL_20;
          }
        }
      }
      uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v29, v17, v37, 16);
      if (v18) {
        continue;
      }
      break;
    }
  }
  BOOL v24 = 0;
LABEL_20:

  return v24;
}

- (BOOL)_hasConnectingRelayCandidatePair
{
  return ((uint64_t (*)(IDSGlobalLink *, char *, uint64_t))MEMORY[0x1F4181798])(self, sel__hasCandidatePairInState_relayCandidatePairsOnly_excludeSelfAlloc_, 1);
}

- (id)_getCandidatePairsWithSessionID:(id)a3 inState:(unint64_t)a4
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  BOOL v10 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v7, v8, v9);
  uint64_t v14 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v11, v12, v13);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v34, 0.0, v38, 16);
  if (v16)
  {
    uint64_t v20 = v16;
    uint64_t v21 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v35 != v21) {
          objc_enumerationMutation(v14);
        }
        uint64_t v23 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v24 = objc_msgSend_state(v23, v17, v18, v19);
        if (objc_msgSend_isRelayStunCandidatePair(v23, v25, v26, v27)) {
          BOOL v28 = v24 == a4;
        }
        else {
          BOOL v28 = 0;
        }
        if (v28)
        {
          long long v29 = objc_msgSend_sessionID(v23, v17, v18, v19);
          int isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v6, v31);

          if (isEqualToString) {
            objc_msgSend_addObject_(v10, v17, (uint64_t)v23, v19);
          }
        }
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v34, v19, v38, 16);
    }
    while (v20);
  }

  return v10;
}

- (void)_discardCandidatePairsWithOption:(BOOL)a3 isReinitiating:(BOOL)a4
{
  BOOL v5 = a4;
  BOOL v6 = a3;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v4);
  double v9 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = @"NO";
    if (v6) {
      id v11 = @"YES";
    }
    else {
      id v11 = @"NO";
    }
    if (v5) {
      BOOL v10 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v55 = v11;
    __int16 v56 = 2112;
    uint64_t v57 = v10;
    _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "_discardCandidatePairsWithOption (includeRelay:%@) (isReinitiating:%@).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    uint64_t v12 = v6 ? @"YES" : @"NO";
    double v13 = v5 ? @"YES" : @"NO";
    uint64_t v47 = v12;
    int v48 = v13;
    _IDSLogTransport(@"GL", @"IDS", @"_discardCandidatePairsWithOption (includeRelay:%@) (isReinitiating:%@).");
    if (_IDSShouldLog())
    {
      uint64_t v47 = v12;
      int v48 = v13;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"_discardCandidatePairsWithOption (includeRelay:%@) (isReinitiating:%@).");
    }
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v14 = v8;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v49, v16, v53, 16);
  if (v19)
  {
    uint64_t v20 = *(void *)v50;
    if (v5) {
      unsigned __int8 v21 = 12;
    }
    else {
      unsigned __int8 v21 = 11;
    }
    uint64_t v22 = 138412290;
    do
    {
      uint64_t v23 = 0;
      do
      {
        if (*(void *)v50 != v20) {
          objc_enumerationMutation(v14);
        }
        uint64_t v24 = *(__CFString **)(*((void *)&v49 + 1) + 8 * v23);
        unint64_t v25 = objc_msgSend_state(v24, v17, v18, *(double *)&v22, v47, v48);
        if (objc_msgSend_isRelayStunCandidatePair(v24, v26, v27, v28))
        {
          if (v6 && v25 <= 4)
          {
            long long v29 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v55 = v24;
              _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "disconnect relay candidate pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v47 = v24;
                _IDSLogTransport(@"GL", @"IDS", @"disconnect relay candidate pair %@.");
                if (_IDSShouldLog())
                {
                  uint64_t v47 = v24;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"disconnect relay candidate pair %@.");
                }
              }
            }
            objc_msgSend_stopSessionConnectedTimer(v24, v30, v31, v32, v47);
            objc_msgSend_stopSessionConvergenceTimer(v24, v33, v34, v35);
            int isQUIC = objc_msgSend_isQUIC(v24, v36, v37, v38);
            unint64_t v44 = objc_msgSend_candidatePairToken(v24, v40, v41, v42);
            if (isQUIC) {
              objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v43, (uint64_t)v44, v45, v21);
            }
            else {
              objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v43, (uint64_t)v44, v45, 0, v21);
            }
          }
        }
        else
        {
          objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v17, (uint64_t)v24, *(double *)&v22, 11);
        }
        ++v23;
      }
      while (v19 != v23);
      uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v17, (uint64_t)&v49, *(double *)&v22, v53, 16);
      uint64_t v19 = v46;
    }
    while (v46);
  }
}

- (void)_discardAllCandidatePairs:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v5 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v6 = @"NO";
    if (v3) {
      BOOL v6 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    double v16 = v6;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "discard all candidate pairs isReinitiating: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    double v9 = v3 ? @"YES" : @"NO";
    id v14 = v9;
    _IDSLogTransport(@"GL", @"IDS", @"discard all candidate pairs isReinitiating: %@");
    if (_IDSShouldLog())
    {
      id v14 = v9;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"discard all candidate pairs isReinitiating: %@");
    }
  }
  objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v7, 0, v8, v3, v14);
  if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v10, 3, v11, 4, 0, 0))objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v12, 1, v13, v3); {
  else
  }
    objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v12, 0, v13, 11);
}

- (void)_discardNonAcceptedCandidatePairs
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (self->_isInitiator)
  {
    v2 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "start to discard non-accepted candidate pairs.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"start to discard non-accepted candidate pairs.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"start to discard non-accepted candidate pairs.");
        }
      }
    }
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    obuint64_t j = self->_nonAcceptedQRSessions;
    uint64_t v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v121, v4, v135, 16);
    if (v109)
    {
      uint64_t v108 = *(void *)v122;
      uint64_t v7 = 138412546;
      do
      {
        for (uint64_t i = 0; i != v109; ++i)
        {
          if (*(void *)v122 != v108) {
            objc_enumerationMutation(obj);
          }
          double v8 = *(void **)(*((void *)&v121 + 1) + 8 * i);
          if (objc_msgSend_isRelayStunCandidatePair(v8, v5, v6, *(double *)&v7))
          {
            double v9 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              double v13 = objc_msgSend_candidatePairToken(v8, v10, v11, v12);
              *(_DWORD *)buf = 138412290;
              double v126 = v13;
              _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "disconnect non-accepted relay candidate pair %@.", buf, 0xCu);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v106 = objc_msgSend_candidatePairToken(v8, v14, v15, v16);
                _IDSLogTransport(@"GL", @"IDS", @"disconnect non-accepted relay candidate pair %@.");

                if (_IDSShouldLog())
                {
                  uint64_t v106 = objc_msgSend_candidatePairToken(v8, v14, v15, v16, v106);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"disconnect non-accepted relay candidate pair %@.");
                }
              }
            }
            uint64_t v17 = objc_msgSend_sessionID(v8, v14, v15, v16, v106);
            uint64_t v20 = objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v18, (uint64_t)v17, v19, 3);

            long long v119 = 0u;
            long long v120 = 0u;
            long long v117 = 0u;
            long long v118 = 0u;
            id v111 = v20;
            uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v21, (uint64_t)&v117, v22, v134, 16);
            if (v25)
            {
              uint64_t v27 = *(void *)v118;
              do
              {
                for (uint64_t j = 0; j != v25; ++j)
                {
                  if (*(void *)v118 != v27) {
                    objc_enumerationMutation(v111);
                  }
                  long long v29 = *(void **)(*((void *)&v117 + 1) + 8 * j);
                  long long v30 = objc_msgSend_GlobalLink(IDSFoundationLog, v23, v24, v26);
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v34 = objc_msgSend_sessionID(v8, v31, v32, v33);
                    *(_DWORD *)buf = 138412546;
                    double v126 = v29;
                    __int16 v127 = 2112;
                    char v128 = v34;
                    _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "_discardNonAcceptedCandidatePairs: found succeeded candidate pair %@ with the same QRSessionID %@, send unallocbind request", buf, 0x16u);
                  }
                  int isQUIC = objc_msgSend_isQUIC(v8, v35, v36, v37);
                  int v43 = objc_msgSend_candidatePairToken(v29, v39, v40, v41);
                  if (isQUIC) {
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v42, (uint64_t)v43, v44, 8);
                  }
                  else {
                    objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v42, (uint64_t)v43, v44, 0, 8);
                  }
                }
                uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v23, (uint64_t)&v117, v26, v134, 16);
              }
              while (v25);
            }

            int v48 = objc_msgSend_sessionID(v8, v45, v46, v47);
            long long v51 = objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v49, (uint64_t)v48, v50, 1);

            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            id v52 = v51;
            uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v113, v54, v133, 16);
            if (v57)
            {
              uint64_t v59 = *(void *)v114;
              do
              {
                for (uint64_t k = 0; k != v57; ++k)
                {
                  if (*(void *)v114 != v59) {
                    objc_enumerationMutation(v52);
                  }
                  long long v61 = *(void **)(*((void *)&v113 + 1) + 8 * k);
                  long long v62 = objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v58);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    id v66 = objc_msgSend_sessionID(v8, v63, v64, v65);
                    uint64_t v70 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v61, v67, v68, v69)];
                    *(_DWORD *)buf = 138413058;
                    double v126 = v61;
                    __int16 v127 = 2112;
                    char v128 = v66;
                    __int16 v129 = 2080;
                    uint64_t v130 = v70;
                    __int16 v131 = 2080;
                    uint64_t v132 = off_1E944EAC0;
                    _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "_discardNonAcceptedCandidatePairs: found inProgress candidate pair %@ with the same QRSessionID %@, update state (%s->%s)", buf, 0x2Au);
                  }
                  objc_msgSend_setState_(v61, v71, 6, v72);
                  if (objc_msgSend_isQUIC(v8, v73, v74, v75))
                  {
                    unint64_t v76 = objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v58);
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                    {
                      long long v80 = objc_msgSend_candidatePairToken(v8, v77, v78, v79);
                      *(_DWORD *)buf = 138412290;
                      double v126 = v80;
                      _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "Disconnecting discarded in-progress QUIC connection %@", buf, 0xCu);
                    }
                    nwLinuint64_t k = self->_nwLink;
                    uint64_t v85 = objc_msgSend_sessionID(v61, v82, v83, v84);
                    double v89 = objc_msgSend_local(v61, v86, v87, v88);
                    uint64_t v93 = objc_msgSend_address(v89, v90, v91, v92);
                    uint64_t v97 = objc_msgSend_remote(v61, v94, v95, v96);
                    uint64_t v101 = objc_msgSend_external(v97, v98, v99, v100);
                    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v102, (uint64_t)v85, 5.0, v93, v101, 1);
                  }
                }
                uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v55, (uint64_t)&v113, v58, v133, 16);
              }
              while (v57);
            }
          }
        }
        uint64_t v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v121, *(double *)&v7, v135, 16);
      }
      while (v109);
    }

    objc_msgSend_removeAllObjects(self->_nonAcceptedQRSessions, v103, v104, v105);
  }
}

- (void)_discardSelfAllocateCandidatePairs
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v31, v7, v37, 16);
  if (v10)
  {
    uint64_t v11 = *(void *)v32;
    uint64_t v12 = 138412290;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(v5);
        }
        id v14 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v14, v8, v9, *(double *)&v12)
          && objc_msgSend_allocateType(v14, v8, v9, *(double *)&v12) == 2)
        {
          uint64_t v15 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            double v19 = objc_msgSend_candidatePairToken(v14, v16, v17, v18);
            *(_DWORD *)buf = 138412290;
            uint64_t v36 = v19;
            _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "disconnect self allocate candidate pair %@.", buf, 0xCu);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              long long v30 = objc_msgSend_candidatePairToken(v14, v20, v21, v22);
              _IDSLogTransport(@"GL", @"IDS", @"disconnect self allocate candidate pair %@.");

              if (_IDSShouldLog())
              {
                long long v30 = objc_msgSend_candidatePairToken(v14, v20, v21, v22, v30);
                _IDSLogV(0, @"IDSFoundation", @"GL", @"disconnect self allocate candidate pair %@.");
              }
            }
          }
          int isQUIC = objc_msgSend_isQUIC(v14, v20, v21, v22, v30);
          double v28 = objc_msgSend_candidatePairToken(v14, v24, v25, v26);
          if (isQUIC) {
            objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v27, (uint64_t)v28, v29, 0);
          }
          else {
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v27, (uint64_t)v28, v29, 0, 0);
          }
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v31, *(double *)&v12, v37, 16);
    }
    while (v10);
  }
}

- (void)_removePacketNotificationFilter
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  long long v51 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  id v5 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v7 = v51;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v52, v9, v58, 16);
    if (v12)
    {
      uint64_t v14 = *(void *)v53;
      uint64_t v15 = (uint64_t)(v6 + 1);
      uint64_t v16 = (uint64_t)(v6 + 17);
      while (2)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v53 != v14) {
            objc_enumerationMutation(v7);
          }
          double v18 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          double v19 = objc_msgSend_local(v18, v10, v11, v13);
          uint64_t v23 = objc_msgSend_address(v19, v20, v21, v22);

          uint64_t v27 = objc_msgSend_remote(v18, v24, v25, v26);
          uint64_t v31 = objc_msgSend_external(v27, v28, v29, v30);

          double v35 = objc_msgSend_local(v18, v32, v33, v34);
          if (objc_msgSend_isCellularStunCandidate(v35, v36, v37, v38) && IsSameSA(v23, v15))
          {
            BOOL v39 = IsSameSA(v31, v16);

            if (v39)
            {
              double v41 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v57 = v18;
                _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "remove packet notification filter for %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  double v50 = v18;
                  _IDSLogTransport(@"GL", @"IDS", @"remove packet notification filter for %@.");
                  if (_IDSShouldLog())
                  {
                    double v50 = v18;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"remove packet notification filter for %@.");
                  }
                }
              }
              uint64_t v46 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v43, v44, v45, v50);
              objc_msgSend_removePacketNotificationFilter(v46, v47, v48, v49);

              goto LABEL_28;
            }
          }
          else
          {
          }
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v52, v13, v58, 16);
        if (v12) {
          continue;
        }
        break;
      }
    }
LABEL_28:
  }
  else
  {
    uint64_t v40 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "_removePacketNotificationFilter failed due to invalid default link.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_removePacketNotificationFilter failed due to invalid default link.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_removePacketNotificationFilter failed due to invalid default link.");
        }
      }
    }
  }
}

- (void)_sendSessionDisconnectedCommand
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v25, v7, v31, 16);
  if (v10)
  {
    uint64_t v12 = *(void *)v26;
LABEL_3:
    uint64_t v13 = 0;
    while (1)
    {
      if (*(void *)v26 != v12) {
        objc_enumerationMutation(v5);
      }
      uint64_t v14 = *(void **)(*((void *)&v25 + 1) + 8 * v13);
      if (objc_msgSend_isActive(v14, v8, v9, v11)) {
        break;
      }
      if (v10 == ++v13)
      {
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v25, v11, v31, 16);
        if (v10) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v15 = v14;

    if (!v15) {
      goto LABEL_18;
    }
    double v19 = objc_msgSend_candidatePairToken(v15, v16, v17, v18);
    uint64_t v20 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      double v30 = v19;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "send session disconnected using %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v24 = v19;
        _IDSLogTransport(@"GL", @"IDS", @"send session disconnected using %@.");
        if (_IDSShouldLog())
        {
          uint64_t v24 = v19;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"send session disconnected using %@.");
        }
      }
    }
    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v21, 2, v22, 0, 0, v19, v24);
  }
  else
  {
LABEL_9:

LABEL_18:
    uint64_t v23 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair to send session disconnected command.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair to send session disconnected command.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair to send session disconnected command.");
        }
      }
    }
  }
}

- (void)_setChannelToCandidatePair:(id)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5 channelNumber:(unsigned __int16)a6
{
  unsigned int v6 = a6;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  if (!self->_channelToCandidatePairs)
  {
    Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    channelToCandidatePairs = self->_channelToCandidatePairs;
    self->_channelToCandidatePairs = Mutable;
  }
  uint64_t v13 = channelForStunCandidatePair((uint64_t)a4, (uint64_t)a5, v6);
  id v14 = v10;
  if (v14)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)self->_channelToCandidatePairs, v13, v14);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB78B20();
  }

  id v15 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "set channel %@ for %@.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"set channel %@ for %@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"set channel %@ for %@.");
      }
    }
  }
}

- (void)_setCandidatePairConnected:(id)a3
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  char v172 = v4;
  if (v4)
  {
    int isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v5, v6, v7);
    double linkConnectTime = self->_linkConnectTime;
    if (linkConnectTime == 0.0
      && self->_isUPlusOneSession
      && (objc_msgSend_isRelayStunCandidatePair(v172, v8, v9, linkConnectTime) ^ 1 | isVirtualRelayStunCandidatePair) == 1)
    {
      self->_double linkConnectTime = ids_monotonic_time();
    }
    unsigned __int16 v12 = self->_linkIDCounter + 1;
    self->_linkIDCounter = v12;
    if (self->_maxLinkID >= v12)
    {
LABEL_20:
      uint64_t v29 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)double v179 = (char)v12;
        _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: linkID %d", buf, 8u);
      }

      uint64_t v32 = (char)v12;
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v166 = (char)v12;
          _IDSLogTransport(@"GL", @"IDS", @"_setCandidatePairConnected: linkID %d");
          if (_IDSShouldLog())
          {
            uint64_t v166 = (char)v12;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"_setCandidatePairConnected: linkID %d");
          }
        }
      }
      objc_msgSend_setLinkID_(v172, v30, (char)v12, v31, v166);
      if (((objc_msgSend_isSharedQRSession(v172, v33, v34, v35) ^ 1 | isVirtualRelayStunCandidatePair) & 1) == 0) {
        objc_msgSend__updateLinkIDForPlugin_(self, v36, (uint64_t)v172, v37);
      }
      if (!self->_linkIDToCandidatePairs)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        self->_linkIDToCandidatePairs = Mutable;
      }
      id v40 = v172;
      double v41 = self->_linkIDToCandidatePairs;
      uint64_t v44 = (const void *)objc_msgSend_numberWithChar_(NSNumber, v42, v32, v43);
      CFDictionarySetValue((CFMutableDictionaryRef)v41, v44, v40);

      IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v40, v32);
      double v45 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
      if (v45)
      {
        char v49 = *(_DWORD *)v45 ? 1 : isVirtualRelayStunCandidatePair;
        if ((v49 & 1) == 0) {
          IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v40, 0);
        }
      }
      if ((isVirtualRelayStunCandidatePair & 1) == 0)
      {
        if (objc_msgSend_isSharedQRSession(v40, v46, v47, v48))
        {
          qraBlocks = self->_qraBlocks;
          if (qraBlocks)
          {
            qraCONBlocuint64_t k = (void (**)(id, NSString *, void *))qraBlocks->_qraCONBlock;
            if (qraCONBlock)
            {
              cbuuid = self->_cbuuid;
              long long v54 = objc_msgSend_sessionID(v40, v46, v50, v48);
              qraCONBlock[2](qraCONBlock, cbuuid, v54);
            }
          }
        }
      }
      long long v55 = objc_msgSend__getLocalAttribute_(self, v46, (uint64_t)v40, v48);
      double v171 = objc_msgSend__getRemoteAttribute_(self, v56, (uint64_t)v40, v57);
      if ((isVirtualRelayStunCandidatePair & 1) != 0
        || !objc_msgSend_isRelayStunCandidatePair(v40, v58, v59, v60))
      {
        objc_msgSend_didConnectUnderlyingE2ELink(self->_metricsCollector, v58, v59, v60);
      }
      else
      {
        objc_msgSend_didConnectUnderlyingRelayLink(self->_metricsCollector, v58, v59, v60);
      }
      if (IMGetDomainBoolForKey()
        && self->_isUPlusOneSession
        && !GLUtilUnderPerformanceTesting(v40, isVirtualRelayStunCandidatePair)
        || (locatiouint64_t n = (id *)&self->_delegate,
            id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate),
            char v62 = objc_opt_respondsToSelector(),
            WeakRetained,
            (v62 & 1) == 0))
      {
        uint64_t v170 = v55;
LABEL_95:

        goto LABEL_96;
      }
      unint64_t v66 = 0x1E596F000;
      if (isVirtualRelayStunCandidatePair)
      {
        double v168 = @"VR ";
      }
      else
      {
        int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v40, v63, v64, v65);
        double v72 = @"P2P";
        if (isRelayStunCandidatePair) {
          double v72 = @"RLY";
        }
        double v168 = v72;
        if (objc_msgSend_isRelayStunCandidatePair(v40, v73, v74, v75))
        {
          unint64_t v76 = objc_msgSend_local(v40, v63, v64, v65);
          uint64_t v80 = objc_msgSend_transport(v76, v77, v78, v79);
          long long v81 = GLUtilStunTransportToProtocol(v80, self->_H2FallbackEnabled);

          uint64_t v85 = objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v84);
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            idsSessionID = self->_idsSessionID;
            double v90 = objc_msgSend_sessionID(v40, v86, v87, v88);
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)double v179 = v32;
            *(_WORD *)&v179[4] = 2112;
            *(void *)&v179[6] = v168;
            __int16 v180 = 2112;
            uint64_t v181 = v81;
            __int16 v182 = 2112;
            v183 = idsSessionID;
            __int16 v184 = 2112;
            id v185 = v90;
            __int16 v186 = 2112;
            id v187 = v40;
            _os_log_impl(&dword_19D9BE000, v85, OS_LOG_TYPE_DEFAULT, "Send link connected (%d) %@ using %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x3Au);
          }
          uint64_t v94 = objc_msgSend_local(v40, v91, v92, v93);
          uint64_t v98 = objc_msgSend_transport(v94, v95, v96, v97);

          int v99 = GLUtilStunTransportToLinkType(v98, self->_H2FallbackEnabled);
          if (v99 > 331)
          {
            if (v99 == 332)
            {
              objc_msgSend_linkConnectedUsingTCPSTUN(self->_metricsCollector, v100, v101, v102);
            }
            else if (v99 == 333)
            {
              objc_msgSend_linkConnectedUsingFakeTLS(self->_metricsCollector, v100, v101, v102);
            }
          }
          else if (v99 == 313)
          {
            objc_msgSend_linkConnectedUsingQUIC(self->_metricsCollector, v100, v101, v102);
          }
          else if (v99 == 331)
          {
            objc_msgSend_linkConnectedUsingHTTP2(self->_metricsCollector, v100, v101, v102);
          }
          goto LABEL_77;
        }
        unint64_t v66 = 0x1E596F000uLL;
      }
      long long v81 = objc_msgSend_GlobalLink(*(void **)(v66 + 2896), v63, v64, v65);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v106 = self->_idsSessionID;
        objc_msgSend_sessionID(v40, v103, v104, v105);
        double v107 = (NSString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)double v179 = v32;
        *(_WORD *)&v179[4] = 2112;
        *(void *)&v179[6] = v168;
        __int16 v180 = 2112;
        uint64_t v181 = v106;
        __int16 v182 = 2112;
        v183 = v107;
        __int16 v184 = 2112;
        id v185 = v40;
        _os_log_impl(&dword_19D9BE000, v81, OS_LOG_TYPE_DEFAULT, "Send link connected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x30u);
      }
LABEL_77:

      nwLinuint64_t k = self->_nwLink;
      if (nwLink) {
        objc_msgSend_logConnectionTree(nwLink, v108, v109, v110);
      }
      uint64_t v170 = objc_msgSend__translateLinkTransportTypeWhenH2Enabled_(self, v108, (uint64_t)v55, v110);

      id v112 = objc_loadWeakRetained(location);
      long long v116 = objc_msgSend_linkUUID(v40, v113, v114, v115);
      objc_msgSend_link_didConnectUnderlyingLink_linkUUID_localAttributes_remoteAttributes_(v112, v117, (uint64_t)self, v118, v32, v116, v170, v171);

      if (self->_connectedLinkIDs
        || (long long v121 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]),
            long long v122 = self->_connectedLinkIDs,
            self->_connectedLinkIDs = v121,
            v122,
            self->_connectedLinkIDs))
      {
        long long v123 = objc_msgSend_numberWithInt_(NSNumber, v119, v32, v120);
        BOOL v124 = v123 == 0;

        if (!v124)
        {
          connectedLinkIDs = self->_connectedLinkIDs;
          double v126 = objc_msgSend_numberWithInt_(NSNumber, v119, v32, v120);
          CFArrayAppendValue((CFMutableArrayRef)connectedLinkIDs, v126);
        }
      }
      objc_msgSend__resetRetryCountForCandidatePair_(self, v119, (uint64_t)v40, v120);
      objc_msgSend_linkConnectedWithH2FallbackEnabled_(self->_metricsCollector, v127, self->_H2FallbackEnabled, v128);
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      __int16 v131 = objc_msgSend_connections(v40, v129, v130, 0.0);
      uint64_t v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v132, (uint64_t)&v173, v133, v177, 16);
      if (v136)
      {
        uint64_t v138 = *(void *)v174;
        do
        {
          for (uint64_t i = 0; i != v136; ++i)
          {
            if (*(void *)v174 != v138) {
              objc_enumerationMutation(v131);
            }
            uint64_t v140 = *(void *)(*((void *)&v173 + 1) + 8 * i);
            double v141 = objc_msgSend_connections(v40, v134, v135, v137);
            id v144 = objc_msgSend_objectForKeyedSubscript_(v141, v142, v140, v143);

            unsigned int v148 = objc_msgSend_linkMetrics(v40, v145, v146, v147);
            uint64_t v151 = objc_msgSend_objectForKeyedSubscript_(v144, v149, @"protocol-stack", v150);
            objc_msgSend_linkConnectedWithProtocolStack_(v148, v152, (uint64_t)v151, v153);
          }
          uint64_t v136 = objc_msgSend_countByEnumeratingWithState_objects_count_(v131, v134, (uint64_t)&v173, v137, v177, 16);
        }
        while (v136);
      }

      objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v154, (uint64_t)v40, v155);
      double v156 = GLUCreateLinkConnectedEvent(v40, self->_H2FallbackEnabled);
      uint64_t v160 = objc_msgSend_GlobalLink(IDSFoundationLog, v157, v158, v159);
      if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)double v179 = v156;
        _os_log_impl(&dword_19D9BE000, v160, OS_LOG_TYPE_DEFAULT, "added qrLinkConnectedEvent: %@", buf, 0xCu);
      }

      id v161 = objc_loadWeakRetained(location);
      char v162 = objc_opt_respondsToSelector();

      if (v162)
      {
        id v163 = objc_loadWeakRetained(location);
        objc_msgSend_link_didAddQREvent_(v163, v164, (uint64_t)self, v165, v156);
      }
      goto LABEL_95;
    }
    uint64_t v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int maxLinkID = self->_maxLinkID;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)double v179 = (char)v12;
      *(_WORD *)&v179[4] = 1024;
      *(_DWORD *)&v179[6] = maxLinkID;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse",
        buf,
        0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v166 = (char)v12;
        uint64_t v167 = self->_maxLinkID;
        _IDSLogTransport(@"GL", @"IDS", @"_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse");
        if (_IDSShouldLog())
        {
          uint64_t v166 = (char)v12;
          uint64_t v167 = self->_maxLinkID;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_setCandidatePairConnected: linkID %d > %d; will pick link ID to reuse");
        }
      }
    }
    if (objc_msgSend_count(self->_unusedLinkIDs, v15, v16, v17, v166, v167))
    {
      uint64_t v21 = objc_msgSend_firstObject(self->_unusedLinkIDs, v18, v19, v20);
      LOBYTE(v12) = objc_msgSend_intValue(v21, v22, v23, v24);

      objc_msgSend_removeFirstObject(self->_unusedLinkIDs, v25, v26, v27);
      long long v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)double v179 = (char)v12;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: reusing linkID %d", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v166 = (char)v12;
          _IDSLogTransport(@"GL", @"IDS", @"_setCandidatePairConnected: reusing linkID %d");
          if (_IDSShouldLog())
          {
            uint64_t v166 = (char)v12;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"_setCandidatePairConnected: reusing linkID %d");
          }
        }
      }
      goto LABEL_20;
    }
    uint64_t v68 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: could not find a linkID to reuse", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_setCandidatePairConnected: could not find a linkID to reuse");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_setCandidatePairConnected: could not find a linkID to reuse");
        }
      }
    }
    objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v69, 255, v70, 10);
  }
  else
  {
    __int16 v67 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "_setCandidatePairConnected: invalid candidatePair", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_setCandidatePairConnected: invalid candidatePair");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_setCandidatePairConnected: invalid candidatePair");
        }
      }
    }
  }
LABEL_96:
}

- (id)_translateLinkTransportTypeWhenH2Enabled:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v7 = v4;
  if (!self->_H2FallbackEnabled) {
    goto LABEL_7;
  }
  double v8 = objc_msgSend_objectForKey_(v4, v5, @"gl-attr-transport", v6);
  int v12 = objc_msgSend_unsignedCharValue(v8, v9, v10, v11);

  if (v12 == 3)
  {
    uint64_t v16 = 5;
  }
  else
  {
    if (v12 != 4)
    {
LABEL_7:
      double v17 = v7;
      goto LABEL_15;
    }
    uint64_t v16 = 3;
  }
  if (v16 == v12) {
    goto LABEL_7;
  }
  __int16 v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v26[0] = 67109376;
    v26[1] = v12;
    __int16 v27 = 1024;
    int v28 = v16;
    _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "_translateLinkTransportTypeWhenH2Enabled: %d -> %d", (uint8_t *)v26, 0xEu);
  }

  double v17 = (__CFDictionary *)objc_msgSend_mutableCopy(v7, v19, v20, v21);
  double v24 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v22, v16, v23);
  if (v24)
  {
    CFDictionarySetValue(v17, @"gl-attr-transport", v24);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB78BA4();
  }

LABEL_15:
  return v17;
}

- (void)_setLinkMetricsAttributesForCandidatePair:(id)a3
{
  id v3 = a3;
  if (!v3) {
    goto LABEL_19;
  }
  id v109 = v3;
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v3, v4, v5, v6))
  {
    uint64_t v10 = @"VR ";
  }
  else
  {
    int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v109, v7, v8, v9);
    uint64_t v10 = @"P2P";
    if (isRelayStunCandidatePair) {
      uint64_t v10 = @"RLY";
    }
  }
  int v12 = v10;
  uint64_t v16 = objc_msgSend_linkMetrics(v109, v13, v14, v15);
  objc_msgSend_setLinkType_(v16, v17, (uint64_t)v12, v18);

  double v22 = objc_msgSend_connections(v109, v19, v20, v21);
  long long v25 = objc_msgSend_objectForKeyedSubscript_(v22, v23, @"qpod", v24);

  uint64_t v29 = objc_msgSend_connections(v109, v26, v27, v28);
  uint64_t v32 = objc_msgSend_objectForKeyedSubscript_(v29, v30, @"udp", v31);

  if (v25
    && (objc_msgSend_objectForKeyedSubscript_(v25, v33, @"allow-outgoing", v35),
        uint64_t v36 = objc_claimAutoreleasedReturnValue(),
        int v40 = objc_msgSend_BOOLValue(v36, v37, v38, v39),
        v36,
        v40))
  {
    double v41 = objc_msgSend_linkMetrics(v109, v33, v34, v35);
    uint64_t v44 = objc_msgSend_objectForKeyedSubscript_(v25, v42, @"protocol-stack", v43);
    objc_msgSend_setChannelDataProtocolStack_(v41, v45, (uint64_t)v44, v46);

    uint64_t v50 = objc_msgSend_linkMetrics(v109, v47, v48, v49);
    objc_msgSend_setIsTLEEnabled_(v50, v51, 1, v52);
  }
  else
  {
    if (!v32) {
      goto LABEL_12;
    }
    uint64_t v50 = objc_msgSend_linkMetrics(v109, v33, v34, v35);
    long long v55 = objc_msgSend_objectForKeyedSubscript_(v32, v53, @"protocol-stack", v54);
    objc_msgSend_setChannelDataProtocolStack_(v50, v56, (uint64_t)v55, v57);
  }
LABEL_12:
  double v58 = objc_msgSend_connections(v109, v33, v34, v35);
  long long v61 = objc_msgSend_objectForKeyedSubscript_(v58, v59, @"qr", v60);

  if (v61 && objc_msgSend_isRelayStunCandidatePair(v109, v62, v63, v64))
  {
    double v65 = objc_msgSend_linkMetrics(v109, v62, v63, v64);
    uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v61, v66, @"protocol-stack", v67);
    objc_msgSend_setRelayProtocolStack_(v65, v69, (uint64_t)v68, v70);
  }
  double v71 = objc_msgSend_linkMetrics(v109, v62, v63, v64);
  double v75 = objc_msgSend_local(v109, v72, v73, v74);
  uint64_t v79 = objc_msgSend_radioAccessTechnology(v75, v76, v77, v78);
  objc_msgSend_setLocalRAT_(v71, v80, v79, v81);

  uint64_t v85 = objc_msgSend_linkMetrics(v109, v82, v83, v84);
  double v89 = objc_msgSend_remote(v109, v86, v87, v88);
  uint64_t v93 = objc_msgSend_radioAccessTechnology(v89, v90, v91, v92);
  objc_msgSend_setRemoteRAT_(v85, v94, v93, v95);

  int v99 = objc_msgSend_linkMetrics(v109, v96, v97, v98);
  uint64_t v103 = objc_msgSend_local(v109, v100, v101, v102);
  if (*(unsigned char *)(objc_msgSend_address(v103, v104, v105, v106) + 1) == 30) {
    objc_msgSend_setIPVersion_(v99, v107, 6, v108);
  }
  else {
    objc_msgSend_setIPVersion_(v99, v107, 4, v108);
  }

  id v3 = v109;
LABEL_19:
}

- (void)_updateLinkIDForPlugin:(id)a3
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v8 = v4;
  if (self->_linkIDForPlugin)
  {
    if (self->_linkIDToCandidatePairs)
    {
      uint64_t v10 = objc_msgSend_numberWithChar_(NSNumber, v5, self->_linkIDForPlugin, v7);
      if (v10)
      {
        linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        uint64_t v13 = objc_msgSend_numberWithChar_(NSNumber, v9, self->_linkIDForPlugin, v11);
        uint64_t v14 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v13);
      }
      else
      {
        uint64_t v14 = 0;
      }

      objc_msgSend_local(v14, v21, v22, v23);
    }
    else
    {
      uint64_t v14 = 0;
      objc_msgSend_local(0, v5, v6, v7);
    double v24 = };
    int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v24, v25, v26, v27);

    uint64_t v32 = objc_msgSend_local(v8, v29, v30, v31);
    int v36 = objc_msgSend_isCellularStunCandidate(v32, v33, v34, v35);

    if ((!isCellularStunCandidate || v36)
      && objc_msgSend_state(v14, v37, v38, v39) == 4
      && self->_linkIDForPlugin == objc_msgSend_linkID(v14, v37, v38, v39))
    {
      int v40 = objc_msgSend_sessionID(v8, v37, v38, v39);
      uint64_t v44 = objc_msgSend_sessionID(v14, v41, v42, v43);
      if (objc_msgSend_isEqualToString_(v40, v45, (uint64_t)v44, v46))
      {

LABEL_35:
        uint64_t v63 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          linkIDForPlugiuint64_t n = self->_linkIDForPlugin;
          *(_DWORD *)buf = 67109120;
          int v91 = linkIDForPlugin;
          _os_log_impl(&dword_19D9BE000, v63, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to existing %d", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v85 = self->_linkIDForPlugin;
            _IDSLogTransport(@"GL", @"IDS", @"Setting linkID for Plugin to existing %d");
            if (_IDSShouldLog())
            {
              uint64_t v85 = self->_linkIDForPlugin;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"Setting linkID for Plugin to existing %d");
            }
          }
        }
        id v20 = v14;

        goto LABEL_42;
      }
      objc_msgSend_allocateTime(v8, v47, v48, v49);
      double v53 = v52;
      objc_msgSend_allocateTime(v14, v54, v55, v52);
      double v57 = v56;

      if (v53 <= v57) {
        goto LABEL_35;
      }
      self->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v8, v58, v59, v60);
      long long v61 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        int v62 = self->_linkIDForPlugin;
        *(_DWORD *)buf = 67109120;
        int v91 = v62;
        _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d, after convergence", buf, 8u);
      }

      id v20 = v8;
      if (!os_log_shim_legacy_logging_enabled()) {
        goto LABEL_42;
      }
      id v20 = v8;
      if (!_IDSShouldLogTransport()) {
        goto LABEL_42;
      }
      uint64_t v85 = self->_linkIDForPlugin;
      _IDSLogTransport(@"GL", @"IDS", @"Setting linkID for Plugin to %d, after convergence");
      id v20 = v8;
      if (!_IDSShouldLog()) {
        goto LABEL_42;
      }
      uint64_t v85 = self->_linkIDForPlugin;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"Setting linkID for Plugin to %d, after convergence");
    }
    else
    {
      self->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v8, v37, v38, v39);
      uint64_t v50 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        int v51 = self->_linkIDForPlugin;
        *(_DWORD *)buf = 67109120;
        int v91 = v51;
        _os_log_impl(&dword_19D9BE000, v50, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to new link %d", buf, 8u);
      }

      id v20 = v8;
      if (!os_log_shim_legacy_logging_enabled()) {
        goto LABEL_42;
      }
      id v20 = v8;
      if (!_IDSShouldLogTransport()) {
        goto LABEL_42;
      }
      uint64_t v85 = self->_linkIDForPlugin;
      _IDSLogTransport(@"GL", @"IDS", @"Setting linkID for Plugin to new link %d");
      id v20 = v8;
      if (!_IDSShouldLog()) {
        goto LABEL_42;
      }
      uint64_t v85 = self->_linkIDForPlugin;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"Setting linkID for Plugin to new link %d");
    }
    id v20 = v8;
LABEL_42:
    if (v14)
    {
      if (self->_linkIDForPlugin)
      {
        int v65 = self->_linkIDForPlugin;
        if (v65 != objc_msgSend_linkID(v14, v17, v18, v19))
        {
          objc_msgSend__didReceiveRequestToPurgeRegistration(self, v17, v18, v19);
          unint64_t v66 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            int v70 = objc_msgSend_linkID(v14, v67, v68, v69);
            int v74 = objc_msgSend_linkID(v8, v71, v72, v73);
            *(_DWORD *)buf = 67109376;
            int v91 = v70;
            __int16 v92 = 1024;
            int v93 = v74;
            _os_log_impl(&dword_19D9BE000, v66, OS_LOG_TYPE_DEFAULT, "linkID for Plugin is now changed from %d to %d", buf, 0xEu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v85 = objc_msgSend_linkID(v14, v17, v18, v19);
              uint64_t v86 = (int)objc_msgSend_linkID(v8, v75, v76, v77);
              _IDSLogTransport(@"GL", @"IDS", @"linkID for Plugin is now changed from %d to %d");
              if (_IDSShouldLog())
              {
                uint64_t v85 = objc_msgSend_linkID(v14, v17, v18, v19, v85, v86);
                uint64_t v86 = (int)objc_msgSend_linkID(v8, v78, v79, v80);
                _IDSLogV(0, @"IDSFoundation", @"GL", @"linkID for Plugin is now changed from %d to %d");
              }
            }
          }
        }
      }
    }
    goto LABEL_51;
  }
  self->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v4, v5, v6, v7);
  double v15 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = self->_linkIDForPlugin;
    *(_DWORD *)buf = 67109120;
    int v91 = v16;
    _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v85 = self->_linkIDForPlugin;
      _IDSLogTransport(@"GL", @"IDS", @"Setting linkID for Plugin to %d");
      if (_IDSShouldLog())
      {
        uint64_t v85 = self->_linkIDForPlugin;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"Setting linkID for Plugin to %d");
      }
    }
  }
  uint64_t v14 = 0;
  id v20 = v8;
LABEL_51:
  if (objc_msgSend_count(self->_pluginNameToPluginOptionsDict, v17, v18, v19, v85, v86))
  {
    pluginNameToPluginOptionsDict = self->_pluginNameToPluginOptionsDict;
    v87[0] = MEMORY[0x1E4F143A8];
    v87[1] = 3221225472;
    v87[2] = sub_19DA42E04;
    v87[3] = &unk_1E59740D8;
    id v88 = v8;
    id v89 = v20;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(pluginNameToPluginOptionsDict, v82, (uint64_t)v87, v83);
  }
  else
  {
    double v84 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "No plugin requests found.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"No plugin requests found.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"No plugin requests found.");
        }
      }
    }
  }
}

- (void)_notifyCandidatePairConnected:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (tokenToCandidatePairs
      && (uint64_t v6 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v4)) != 0)
    {
      double v9 = v6;
      objc_msgSend__setCandidatePairConnected_(self, v7, (uint64_t)v6, v8);
      if (self->_linkIDCounter == 1) {
        objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v10, (uint64_t)v4, v11, 0);
      }
      if (self->_delayedConnData)
      {
        int v12 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "connection data is delayed, send it now.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"connection data is delayed, send it now.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"connection data is delayed, send it now.");
            }
          }
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v13, 0, v14);
      }
    }
    else
    {
      double v15 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v17 = v4;
        _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for %@.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for %@.");
          }
        }
      }
      double v9 = 0;
    }
  }
}

- (void)_notifyCandidatePairDisconnected:(id)a3 withReason:(unsigned __int8)a4
{
  uint64_t v4 = a4;
  uint64_t v224 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v10 = v6;
  if (v6)
  {
    uint64_t v11 = objc_msgSend_state(v6, v7, v8, v9);
    uint64_t v15 = objc_msgSend_linkID(v10, v12, v13, v14);
    uint64_t v210 = objc_msgSend_linkUUID(v10, v16, v17, v18);
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v10, v19, v20, v21))
    {
      long long v25 = @"VR ";
    }
    else
    {
      int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v10, v22, v23, v24);
      long long v25 = @"P2P";
      if (isRelayStunCandidatePair) {
        long long v25 = @"RLY";
      }
    }
    double v28 = v25;
    if (v11 == 6) {
      goto LABEL_86;
    }
    objc_msgSend_setState_(v10, v27, 6, v29);
    unint64_t v209 = v28;
    uint64_t v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      double v31 = (&_IDSStunCandidatePairStateStrings)[v11];
      *(_DWORD *)buf = 136315650;
      *(void *)unint64_t v217 = v31;
      *(_WORD *)&v217[8] = 2080;
      *(void *)&v217[10] = off_1E944EAC0;
      *(_WORD *)&v217[18] = 2112;
      *(void *)&v217[20] = v10;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v205 = off_1E944EAC0;
        double v206 = v10;
        double v203 = (&_IDSStunCandidatePairStateStrings)[v11];
        _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
        if (_IDSShouldLog())
        {
          uint64_t v205 = off_1E944EAC0;
          double v206 = v10;
          double v203 = (&_IDSStunCandidatePairStateStrings)[v11];
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
        }
      }
    }
    if (objc_msgSend_isQUIC(v10, v32, v33, v34, v203, v205, v206)
      && ((char isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v10, v35, v36, v37),
           v4 == 5)
        ? (char v39 = 1)
        : (char v39 = isVirtualRelayStunCandidatePair),
          (v39 & 1) == 0))
    {
      double v67 = objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        double v71 = objc_msgSend_candidatePairToken(v10, v68, v69, v70);
        *(_DWORD *)buf = 138412290;
        *(void *)unint64_t v217 = v71;
        _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@", buf, 0xCu);
      }
      if (v4 == 1) {
        double v74 = 0.0;
      }
      else {
        double v74 = 5.0;
      }
      nwLinuint64_t k = self->_nwLink;
      uint64_t v48 = objc_msgSend_sessionID(v10, v72, v73, 5.0);
      double v52 = objc_msgSend_local(v10, v76, v77, v78);
      uint64_t v82 = objc_msgSend_address(v52, v79, v80, v81);
      double v60 = objc_msgSend_remote(v10, v83, v84, v85);
      uint64_t v89 = objc_msgSend_external(v60, v86, v87, v88);
      objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v90, (uint64_t)v48, v74, v82, v89, 1);
    }
    else
    {
      if ((objc_msgSend_isRelayStunCandidatePair(v10, v35, v36, v37) & 1) != 0
        || (objc_msgSend_isVirtualRelayStunCandidatePair(v10, v40, v41, v42) & 1) != 0)
      {
LABEL_30:
        if (self->_QUICForQREnabled
          && (objc_msgSend_isVirtualRelayStunCandidatePair(v10, v40, v41, v42) & 1) == 0
          && !self->_disableDirectDatapath)
        {
          int v91 = self->_nwLink;
          __int16 v92 = objc_msgSend_sessionID(v10, v40, v41, v42);
          uint64_t v96 = objc_msgSend_local(v10, v93, v94, v95);
          uint64_t v100 = objc_msgSend_address(v96, v97, v98, v99);
          uint64_t v104 = objc_msgSend_remote(v10, v101, v102, v103);
          uint64_t v108 = objc_msgSend_external(v104, v105, v106, v107);
          uint64_t v112 = objc_msgSend_isRelayStunCandidatePair(v10, v109, v110, v111);
          objc_msgSend_removeChildConnectionEvaluatorForSessionID_localAddress_remoteAddress_isRelay_(v91, v113, (uint64_t)v92, v114, v100, v108, v112);
        }
        if ((int)v15 <= 0)
        {
          id v202 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)unint64_t v217 = v10;
            _os_log_impl(&dword_19D9BE000, v202, OS_LOG_TYPE_DEFAULT, "skip sending link disconnected with linkID 0 for %@.", buf, 0xCu);
          }

          double v28 = v209;
          if (!os_log_shim_legacy_logging_enabled()) {
            goto LABEL_86;
          }
          double v28 = v209;
          if (!_IDSShouldLogTransport()) {
            goto LABEL_86;
          }
          _IDSLogTransport(@"GL", @"IDS", @"skip sending link disconnected with linkID 0 for %@.");
          double v28 = v209;
          if (!_IDSShouldLog()) {
            goto LABEL_86;
          }
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip sending link disconnected with linkID 0 for %@.");
        }
        else
        {
          if (objc_msgSend_isSharedQRSession(v10, v40, v41, v42))
          {
            qraBlocks = self->_qraBlocks;
            if (qraBlocks)
            {
              qraDISBlocuint64_t k = (void (**)(id, NSString *, void *))qraBlocks->_qraDISBlock;
              if (qraDISBlock)
              {
                cbuuid = self->_cbuuid;
                long long v121 = objc_msgSend_sessionID(v10, v115, v116, v117);
                qraDISBlock[2](qraDISBlock, cbuuid, v121);
              }
            }
          }
          id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
          char v123 = objc_opt_respondsToSelector();

          if (v123)
          {
            __int16 v127 = objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
            {
              idsSessionID = self->_idsSessionID;
              objc_msgSend_sessionID(v10, v128, v129, v130);
              id v208 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend_candidatePairToken(v10, v131, v132, v133);
              id v136 = (id)objc_claimAutoreleasedReturnValue();
              if (qword_1E944F470 != -1) {
                dispatch_once(&qword_1E944F470, &unk_1EEFCE9F8);
              }
              unint64_t v138 = objc_msgSend_count((void *)qword_1E944F460, v134, v135, v137);
              if (v138 > v4)
              {
                char v145 = NSString;
                uint64_t v146 = objc_msgSend_objectAtIndex_((void *)qword_1E944F460, v139, v4, v141);
                uint64_t v149 = objc_msgSend_stringWithFormat_(v145, v147, @"%@ (%d)", v148, v146, v4);
              }
              else
              {
                if (byte_1E944F468)
                {
                  uint64_t v142 = isRunningTests(v141, v138, v139, v140);
                  if (v142) {
                    throwsIDSAbortException(v144, v142, v143);
                  }
                  abort();
                }
                uint64_t v149 = 0;
              }
              *(_DWORD *)buf = 67110658;
              *(_DWORD *)unint64_t v217 = v15;
              *(_WORD *)&v217[4] = 2112;
              *(void *)&v217[6] = v209;
              *(_WORD *)&v217[14] = 2112;
              *(void *)&v217[16] = idsSessionID;
              *(_WORD *)&v217[24] = 2112;
              *(void *)&v217[26] = v208;
              __int16 v218 = 2112;
              id v219 = v136;
              __int16 v220 = 2112;
              double v221 = v210;
              __int16 v222 = 2112;
              uint64_t v223 = v149;
              _os_log_impl(&dword_19D9BE000, v127, OS_LOG_TYPE_DEFAULT, "Send link disconnected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@ linkUUID:%@, reason: %@", buf, 0x44u);
            }
            double v153 = self->_nwLink;
            if (v153) {
              objc_msgSend_logConnectionTree(v153, v150, v151, v152);
            }
            id v154 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didDisconnectUnderlyingLinkID_linkUUID_reason_(v154, v155, (uint64_t)self, v156, v15, v210, v4);

            connectedLinkIDs = self->_connectedLinkIDs;
            uint64_t v160 = objc_msgSend_numberWithInt_(NSNumber, v158, v15, v159);
            objc_msgSend_removeObject_(connectedLinkIDs, v161, (uint64_t)v160, v162);

            objc_msgSend__stopProbingOnLinkID_(self, v163, v15, v164);
          }
          double v165 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          if (*(_DWORD *)v165 == v15)
          {
            *(_DWORD *)double v165 = 0;
            double v169 = objc_msgSend_GlobalLink(IDSFoundationLog, v166, v167, v168);
            if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)unint64_t v217 = v15;
              _os_log_impl(&dword_19D9BE000, v169, OS_LOG_TYPE_DEFAULT, "default link is disconnected, reset default link %d.", buf, 8u);
            }
          }
          if (self->_linkIDForPlugin == v15)
          {
            uint64_t v170 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v166, v167, v168);
            linkIDForPlugiuint64_t n = self->_linkIDForPlugin;
            long long v211 = 0u;
            long long v212 = 0u;
            long long v213 = 0u;
            long long v214 = 0u;
            id v172 = v170;
            uint64_t v177 = objc_msgSend_countByEnumeratingWithState_objects_count_(v172, v173, (uint64_t)&v211, v174, v215, 16);
            if (v177)
            {
              uint64_t v179 = *(void *)v212;
LABEL_59:
              uint64_t v180 = 0;
              while (1)
              {
                if (*(void *)v212 != v179) {
                  objc_enumerationMutation(v172);
                }
                uint64_t v181 = *(void **)(*((void *)&v211 + 1) + 8 * v180);
                if (objc_msgSend_isSharedQRSession(v181, v175, v176, v178))
                {
                  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v181, v175, v176, v178) & 1) == 0
                    && objc_msgSend_state(v181, v175, v176, v178) == 4)
                  {
                    self->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v181, v175, v176, v178);
                    id v185 = objc_msgSend_local(v181, v182, v183, v184);
                    int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v185, v186, v187, v188);

                    if (!isCellularStunCandidate) {
                      break;
                    }
                  }
                }
                if (v177 == ++v180)
                {
                  uint64_t v177 = objc_msgSend_countByEnumeratingWithState_objects_count_(v172, v175, (uint64_t)&v211, v178, v215, 16);
                  if (v177) {
                    goto LABEL_59;
                  }
                  break;
                }
              }
            }

            if (linkIDForPlugin == self->_linkIDForPlugin) {
              self->_linkIDForPlugiuint64_t n = 0;
            }
            uint64_t v190 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
            {
              int v191 = self->_linkIDForPlugin;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)unint64_t v217 = v191;
              _os_log_impl(&dword_19D9BE000, v190, OS_LOG_TYPE_DEFAULT, "Setting linkID for Plugin to %d", buf, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v204 = self->_linkIDForPlugin;
                _IDSLogTransport(@"GL", @"IDS", @"Setting linkID for Plugin to %d");
                if (_IDSShouldLog())
                {
                  uint64_t v204 = self->_linkIDForPlugin;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"Setting linkID for Plugin to %d");
                }
              }
            }
          }
          unusedLinkIDs = self->_unusedLinkIDs;
          uint64_t v193 = objc_msgSend_numberWithChar_(NSNumber, v166, v15, v168, v204);
          LOBYTE(unusedLinkIDs) = objc_msgSend_containsObject_(unusedLinkIDs, v194, (uint64_t)v193, v195);

          double v28 = v209;
          if (unusedLinkIDs) {
            goto LABEL_86;
          }
          BOOL v198 = self->_unusedLinkIDs;
          uint64_t v199 = objc_msgSend_numberWithChar_(NSNumber, v196, v15, v197);
          objc_msgSend_addObject_(v198, v200, (uint64_t)v199, v201);
        }
        double v28 = v209;
LABEL_86:

        goto LABEL_87;
      }
      double v43 = objc_msgSend_GlobalLink(IDSFoundationLog, v40, v41, v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)unint64_t v217 = v15;
        *(_WORD *)&v217[4] = 2112;
        *(void *)&v217[6] = v28;
        *(_WORD *)&v217[14] = 2112;
        *(void *)&v217[16] = v10;
        _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "Disconnecting connection for link (%d) %@ (candidate pair: %@)", buf, 0x1Cu);
      }

      uint64_t v44 = self->_nwLink;
      uint64_t v48 = objc_msgSend_sessionID(v10, v45, v46, v47);
      double v52 = objc_msgSend_local(v10, v49, v50, v51);
      uint64_t v56 = objc_msgSend_address(v52, v53, v54, v55);
      double v60 = objc_msgSend_remote(v10, v57, v58, v59);
      uint64_t v64 = objc_msgSend_external(v60, v61, v62, v63);
      objc_msgSend_disconnectP2PWithSessionID_localAddress_remoteAddress_(v44, v65, (uint64_t)v48, v66, v56, v64);
    }

    goto LABEL_30;
  }
LABEL_87:
}

- (void)_notifyDefaultUnderlyingLinkChanged:(id)a3 error:(int64_t)a4
{
  *(void *)&v23[5] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  if (v6
    && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
    && (uint64_t v8 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v6)) != 0)
  {
    double v9 = v8;
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v11 = objc_opt_respondsToSelector();

    if (v11)
    {
      uint64_t v15 = objc_msgSend_linkID(v9, v12, v13, v14);
      int v16 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v23[0] = v15;
        LOWORD(v23[1]) = 1024;
        *(_DWORD *)((char *)&v23[1] + 2) = a4;
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "send default link changed (link:%d, error:%d).", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send default link changed (link:%d, error:%d).");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send default link changed (link:%d, error:%d).");
          }
        }
      }
      BOOL v17 = a4 == 0;
      id v18 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didDefaultUnderlyingLinkChangeSucceeded_currentDefaultLinkID_(v18, v19, (uint64_t)self, v20, v17, v15);
    }
  }
  else
  {
    double v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v23 = v6;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for %@.");
        }
      }
    }
    double v9 = 0;
  }
}

- (void)_notifyLinkDisconnectedWithError:(int64_t)a3 reason:(unsigned __int8)a4
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (self->_state != 6)
  {
    uint64_t v4 = (char *)a4;
    int v5 = a3;
    double v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v58 = self;
      __int16 v59 = 1024;
      *(_DWORD *)double v60 = v5;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v4;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "IDSGlobalLink %@ disconnected, error(%d), reason(%d).", buf, 0x18u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v48 = (char *)a3;
        uint64_t v50 = (char *)v4;
        uint64_t v46 = self;
        _IDSLogTransport(@"GL", @"IDS", @"IDSGlobalLink %@ disconnected, error(%d), reason(%d).");
        if (_IDSShouldLog())
        {
          uint64_t v48 = (char *)a3;
          uint64_t v50 = v4;
          uint64_t v46 = self;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSGlobalLink %@ disconnected, error(%d), reason(%d).");
        }
      }
    }
    uint64_t v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412802;
      uint64_t v58 = self;
      __int16 v59 = 2080;
      *(void *)double v60 = v9;
      *(_WORD *)&v60[8] = 2080;
      long long v61 = off_1E944E568[0];
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v48 = _IDSLinkStateStrings[self->_state];
        uint64_t v50 = off_1E944E568[0];
        uint64_t v46 = self;
        _IDSLogTransport(@"GL", @"IDS", @"update GL: %@ state (%s->%s).");
        if (_IDSShouldLog())
        {
          uint64_t v48 = _IDSLinkStateStrings[self->_state];
          uint64_t v50 = off_1E944E568[0];
          uint64_t v46 = self;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update GL: %@ state (%s->%s).");
        }
      }
    }
    self->_unint64_t state = 6;
    objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12, v46, v48, v50);
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v52, v15, v56, 16);
    if (v18)
    {
      uint64_t v19 = *(void *)v53;
      uint64_t v20 = 138412546;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v53 != v19) {
            objc_enumerationMutation(v13);
          }
          uint64_t v22 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          uint64_t v23 = objc_msgSend_state(v22, v16, v17, *(double *)&v20);
          int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v22, v24, v25, v26);
          if (v23 == 5) {
            int v28 = isRelayStunCandidatePair;
          }
          else {
            int v28 = 0;
          }
          if (v28 == 1)
          {
            double v29 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v33 = objc_msgSend_candidatePairToken(v22, v30, v31, v32);
              *(_DWORD *)buf = 138412546;
              uint64_t v58 = self;
              __int16 v59 = 2112;
              *(void *)double v60 = v33;
              _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@", buf, 0x16u);
            }
            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v22, v34, v36, v35);
              v49 = double v47 = self;
              _IDSLogTransport(@"GL", @"IDS", @"IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@");

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v22, v34, v37, v35, self, v49);
                v49 = double v47 = self;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"IDSGlobalLink %@ disconnect disconnecting candidate pairs: %@");
              }
            }
            objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v34, (uint64_t)v22, v35, v4, v47, v49);
          }
        }
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v52, *(double *)&v20, v56, 16);
      }
      while (v18);
    }

    if (a3 == 8)
    {
      int v40 = @"Unallocbind timed out.";
    }
    else
    {
      if (a3 != 24)
      {
        double v45 = 0;
        goto LABEL_38;
      }
      int v40 = @"Unallocbind send failure.";
    }
    uint64_t v41 = (void *)MEMORY[0x1E4F28C58];
    double v42 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v38, (uint64_t)v40, v39, *MEMORY[0x1E4F28568]);
    double v45 = objc_msgSend_errorWithDomain_code_userInfo_(v41, v43, @"GlobalLink", v44, a3, v42);

LABEL_38:
    objc_msgSend__callDisconnectCompletionHandler_(self, v38, (uint64_t)v45, v39);
  }
}

- (void)_reportAWDAllocateTime
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 136315394;
    int v28 = v7;
    __int16 v29 = 1024;
    int isExtIPDiscoveryDone = objc_msgSend__isExtIPDiscoveryDone(self, v4, v5, v6);
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v20 = _IDSLinkStateStrings[self->_state];
      uint64_t v21 = objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10);
      _IDSLogTransport(@"GL", @"IDS", @"_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d");
      if (_IDSShouldLog())
      {
        objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10, v20, v21);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_reportAWDAllocateTime state:%s isExtIPDiscoveryDone:%d");
      }
    }
  }
  if (self->_state >= 2 && objc_msgSend__isExtIPDiscoveryDone(self, v8, v9, v10))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v11 = self->_allocateTimeReportBlocks;
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v22, v13, v26, 16);
    if (v14)
    {
      uint64_t v15 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v23 != v15) {
            objc_enumerationMutation(v11);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v22 + 1) + 8 * i) + 16))();
        }
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v17, (uint64_t)&v22, v18, v26, 16);
      }
      while (v14);
    }

    allocateTimeReportBlocks = self->_allocateTimeReportBlocks;
    self->_allocateTimeReportBlocks = 0;
  }
}

- (void)_setFirstDefaultCandidatePair:(id)a3
{
  id v7 = a3;
  uint64_t v4 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (v4 && (!*v4 || !v4[1])) {
    objc_msgSend__updateDefaultCandidatePair_(self, v5, (uint64_t)v7, v6);
  }
}

- (id)_getAllocbindReportingDataBlob:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  bzero(v19, 0x5C0uLL);
  int v12 = 0;
  if (StunUtilHasValidBinaryDataAttr(v3, 65517, v19, &v12))
  {
    double v6 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v4, (uint64_t)v19, v5, v12);
    uint64_t v9 = objc_msgSend_base64EncodedStringWithOptions_(v6, v7, 0, v8);
    if (v9)
    {
      double v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109634;
        int v14 = v12;
        __int16 v15 = 2112;
        int v16 = v6;
        __int16 v17 = 2112;
        double v18 = v9;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "length: %d, receive reporting data blob [%@], base64Encoded: [%@],", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"length: %d, receive reporting data blob [%@], base64Encoded: [%@],");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"length: %d, receive reporting data blob [%@], base64Encoded: [%@],");
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

- (BOOL)_postProcessAllocbindResponse:(id)a3 candidatePair:(id)a4 candidatePairToken:(id)a5
{
  return 0;
}

- (BOOL)_processAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  id v254 = a3;
  id v249 = a4;
  id key = a8;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[7] = v15;
  __str[6] = v15;
  __str[5] = v15;
  __str[4] = v15;
  __str[3] = v15;
  __str[2] = v15;
  __str[1] = v15;
  __str[0] = v15;
  v282[7] = v15;
  v282[6] = v15;
  v282[5] = v15;
  v282[4] = v15;
  v282[3] = v15;
  v282[2] = v15;
  v282[1] = v15;
  v282[0] = v15;
  unsigned __int16 v268 = 0;
  memset(__b, 170, sizeof(__b));
  int v267 = 0;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString((char *)v282, 0x80uLL, (uint64_t)a7);
  double allocbindEndTime = self->_allocbindEndTime;
  if (allocbindEndTime == 0.0) {
    self->_double allocbindEndTime = a9;
  }
  uint64_t v250 = objc_msgSend_type(v254, v16, v17, allocbindEndTime);
  uint64_t v19 = @"allocbind";
  if (v250 != 4064) {
    uint64_t v19 = @"realloc";
  }
  uint64_t v252 = v19;
  Value = 0;
  if (key && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, key);
  }
  id v21 = Value;
  unint64_t v248 = objc_msgSend_state(v21, v22, v23, v24);
  int v28 = objc_msgSend_local(v21, v25, v26, v27);
  BOOL v32 = objc_msgSend_transport(v28, v29, v30, v31) == 2;

  metricsCollector = self->_metricsCollector;
  if (v32)
  {
    objc_msgSend_stunAllocbindResponse(metricsCollector, v33, v34, v35);
    uint64_t v38 = GLUtilConnectionDictionaryForUDPCandidatePair(v37, (uint64_t)v21, (const char *)1);
    double v42 = objc_msgSend_connections(v21, v39, v40, v41);
    objc_msgSend_setObject_forKeyedSubscript_(v42, v43, (uint64_t)v38, v44, @"qr");
    double v45 = @"udp";
  }
  else
  {
    objc_msgSend_tcpAllocbindResponse(metricsCollector, v33, v34, v35);
    uint64_t v38 = GLUtilConnectionDictionaryForTCPCandidatePair(v46, (uint64_t)v21, (const char *)1);
    double v42 = objc_msgSend_connections(v21, v47, v48, v49);
    objc_msgSend_setObject_forKeyedSubscript_(v42, v50, (uint64_t)v38, v51, @"qr");
    double v45 = @"tcp";
  }

  long long v55 = objc_msgSend_linkMetrics(v21, v52, v53, v54);
  objc_msgSend_receiveAllocbindResponse(v55, v56, v57, v58);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v59, (uint64_t)v21, v60);
  objc_msgSend_allocbindResponseForProtocolStack_(self->_metricsCollector, v61, (uint64_t)v45, v62);
  long long v265 = 0u;
  long long v266 = 0u;
  long long v264 = 0u;
  long long v263 = 0u;
  double v63 = self->_interfaceAddressArray;
  uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v263, v65, v280, 16);
  if (v68)
  {
    uint64_t v70 = *(void *)v264;
    while (2)
    {
      for (uint64_t i = 0; i != v68; ++i)
      {
        if (*(void *)v264 != v70) {
          objc_enumerationMutation(v63);
        }
        uint64_t v72 = *(void **)(*((void *)&v263 + 1) + 8 * i);
        if (objc_msgSend_index(v72, v66, v67, v69) == a5)
        {
          uint64_t v73 = self->_metricsCollector;
          double v74 = objc_msgSend_name(v72, v66, v67, v69);
          objc_msgSend_allocbindResponseFromInterface_(v73, v75, (uint64_t)v74, v76);

          goto LABEL_21;
        }
      }
      uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v66, (uint64_t)&v263, v69, v280, 16);
      if (v68) {
        continue;
      }
      break;
    }
  }
LABEL_21:

  uint64_t v80 = objc_msgSend_local(v21, v77, v78, v79);
  uint64_t v84 = objc_msgSend_address(v80, v81, v82, v83);

  int v88 = *(unsigned __int8 *)(v84 + 1);
  if (v88 == 2)
  {
    if (IMGetDomainBoolForKey())
    {
LABEL_24:
      uint64_t v89 = objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v84 + 1) == 30) {
          double v90 = "IPv6";
        }
        else {
          double v90 = "IPv4";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v90;
        _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "_processAllocbindResponse: force dropping [%s] stun allocbind response.", buf, 0xCu);
      }

      goto LABEL_99;
    }
  }
  else if (v88 == 30 && (IMGetDomainBoolForKey() & 1) != 0)
  {
    goto LABEL_24;
  }
  if (self->_state >= 5 && (objc_msgSend_pendingNoSessionStateAllocbind(v21, v85, v86, v87) & 1) == 0)
  {
    uint64_t v200 = objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
    if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v204 = (&_IDSStunCandidatePairStateStrings)[v248];
      int v205 = objc_msgSend_pendingNoSessionStateAllocbind(v21, v201, v202, v203);
      double v206 = @"NO";
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v204;
      *(_WORD *)&buf[12] = 2112;
      if (v205) {
        double v206 = @"YES";
      }
      *(void *)&buf[14] = v206;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&buf[24] = v252;
      _os_log_impl(&dword_19D9BE000, v200, OS_LOG_TYPE_DEFAULT, "_processAllocbindResponse: candidate pair state is [%s], pendingNoSessionStateAllocbind: %@, ignore %@ response.", buf, 0x20u);
    }
    goto LABEL_94;
  }
  if (v248 > 2)
  {
    if (objc_msgSend_pendingNoSessionStateAllocbind(v21, v85, v86, v87)) {
      goto LABEL_41;
    }
    uint64_t v200 = objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
    if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
    {
      double v207 = (&_IDSStunCandidatePairStateStrings)[v248];
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v207;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v252;
      _os_log_impl(&dword_19D9BE000, v200, OS_LOG_TYPE_DEFAULT, "candidate pair state is [%s], ignore %@ response.", buf, 0x16u);
    }
LABEL_94:

    goto LABEL_95;
  }
  double allocbindStartTime = self->_allocbindStartTime;
  double v91 = self->_allocbindEndTime;
  int v93 = objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
  float v94 = (v91 - allocbindStartTime) * 1000.0;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v98 = objc_msgSend_local(v21, v95, v96, v97);
    uint64_t v102 = objc_msgSend_transport(v98, v99, v100, v101);
    int v103 = *(unsigned __int8 *)(v84 + 1);
    idsSessionID = self->_idsSessionID;
    objc_msgSend_sessionID(v21, v105, v106, v107);
    id v108 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138413826;
    *(void *)&uint8_t buf[4] = v252;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = key;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v94;
    LOWORD(v275) = 2048;
    *(void *)((char *)&v275 + 2) = v102;
    WORD5(v275) = 1024;
    HIDWORD(v275) = v103;
    *(_WORD *)id v276 = 2112;
    *(void *)&v276[2] = idsSessionID;
    *(_WORD *)&v276[10] = 2112;
    *(void *)&v276[12] = v108;
    _os_log_impl(&dword_19D9BE000, v93, OS_LOG_TYPE_DEFAULT, "Received %@ response on %@ after %0.6lf ms over protocol: %ld family: %d IDSSessionID: %@ QRSessionID: %@", buf, 0x44u);
  }
  GLUtilReportAWDStunMessageEvent(v254, 0, v21, v94);
  double v111 = objc_msgSend__getAllocbindReportingDataBlob_(self, v109, (uint64_t)v254, v110);
  double v115 = objc_msgSend_local(v21, v112, v113, v114);
  objc_msgSend_setAllocbindDataBlob_(v115, v116, (uint64_t)v111, v117);

  double v118 = GLUCreateQRStunMessageEvent(v254, 0, v21, self->_timeBase, v94);
  if (v118)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v120 = objc_opt_respondsToSelector();

    if (v120)
    {
      id v121 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v121, v122, (uint64_t)self, v123, v118);
    }
  }

LABEL_41:
  *(void *)&long long v127 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v127 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v278 = v127;
  long long v279 = v127;
  *(_OWORD *)&v276[16] = v127;
  long long v277 = v127;
  long long v275 = v127;
  *(_OWORD *)id v276 = v127;
  *(_OWORD *)buf = v127;
  *(_OWORD *)&buf[16] = v127;
  if ((StunUtilHasValidXorMappedAddress((uint64_t)v254, buf) & 1) == 0)
  {
    BOOL v198 = objc_msgSend_GlobalLink(IDSFoundationLog, v128, v129, v130);
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v199 = SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)buf);
      *(_DWORD *)double v270 = 138412546;
      *(void *)id v271 = v252;
      *(_WORD *)&v271[8] = 2080;
      *(void *)int v272 = v199;
      _os_log_impl(&dword_19D9BE000, v198, OS_LOG_TYPE_DEFAULT, "receive %@ response with invalid xor-mapped-address [%s]", v270, 0x16u);
    }
    goto LABEL_98;
  }
  __int16 v131 = objc_msgSend_local(v21, v128, v129, v130);
  objc_msgSend_setExternal_(v131, v132, (uint64_t)buf, v133);

  unsigned int v137 = objc_msgSend_channelNumber(v21, v134, v135, v136);
  if ((StunUtilHasValidChannelNumber(v254, v137, &v268) & 1) == 0)
  {
    BOOL v198 = objc_msgSend_GlobalLink(IDSFoundationLog, v138, v139, v140);
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v270 = 138412290;
      *(void *)id v271 = v252;
      _os_log_impl(&dword_19D9BE000, v198, OS_LOG_TYPE_DEFAULT, "receive %@ response without channel-number.", v270, 0xCu);
    }
LABEL_98:

LABEL_99:
    BOOL v208 = 0;
    goto LABEL_100;
  }
  unsigned int v141 = v268;
  uint64_t v142 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
  {
    int v146 = objc_msgSend_channelNumber(v21, v143, v144, v145);
    *(_DWORD *)double v270 = 67109634;
    *(_DWORD *)id v271 = v146;
    *(_WORD *)&v271[4] = 1024;
    *(_DWORD *)&v271[6] = v268;
    *(_WORD *)int v272 = 2112;
    *(void *)&v272[2] = key;
    _os_log_impl(&dword_19D9BE000, v142, OS_LOG_TYPE_DEFAULT, "update channelNumber (%04x->%04x) for %@.", v270, 0x18u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      unsigned int v150 = objc_msgSend_channelNumber(v21, v147, v149, v148);
      uint64_t v244 = v268;
      id v246 = key;
      uint64_t v242 = v150;
      _IDSLogTransport(@"GL", @"IDS", @"update channelNumber (%04x->%04x) for %@.");
      if (_IDSShouldLog())
      {
        unsigned int v152 = objc_msgSend_channelNumber(v21, v147, v151, v148, v242, v244, key);
        uint64_t v244 = v268;
        id v246 = key;
        uint64_t v242 = v152;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"update channelNumber (%04x->%04x) for %@.");
      }
    }
  }
  uint64_t v153 = bswap32(v141) >> 16;
  objc_msgSend_setChannelNumber_(v21, v147, v153, v148, v242, v244, v246);
  IDSSimpleUInt16List_AddItem((uint64_t)&self->_channelNumberList, v153);
  objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v154, (uint64_t)v21, v155, a6, a7, v153);
  if (StunUtilHasValidBinaryDataAttr(v254, 32802, __b, &v267))
  {
    id v156 = [NSString alloc];
    double v159 = (char *)objc_msgSend_initWithBytes_length_encoding_(v156, v157, (uint64_t)__b, v158, v267, 4);
    uint64_t v160 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v270 = 138412290;
      *(void *)id v271 = v159;
      _os_log_impl(&dword_19D9BE000, v160, OS_LOG_TYPE_DEFAULT, "receive software attribute [%@]", v270, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        v243 = v159;
        _IDSLogTransport(@"GL", @"IDS", @"receive software attribute [%@]");
        if (_IDSShouldLog())
        {
          v243 = v159;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive software attribute [%@]");
        }
      }
    }
  }
  if (StunUtilHasValidUInt16Attr((uint64_t)v254, 65509, &v268)) {
    objc_msgSend_setRelayLinkID_(v21, v161, v268, v163);
  }
  if (v248 > 2) {
    goto LABEL_126;
  }
  objc_msgSend_setState_(v21, v161, 3, v163);
  double v164 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
  {
    double v165 = (&_IDSStunCandidatePairStateStrings)[v248];
    *(_DWORD *)double v270 = 136315650;
    *(void *)id v271 = v165;
    *(_WORD *)&v271[8] = 2080;
    *(void *)int v272 = off_1E944EAA8;
    *(_WORD *)&v272[8] = 2112;
    id v273 = key;
    _os_log_impl(&dword_19D9BE000, v164, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", v270, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      double v245 = off_1E944EAA8;
      id v247 = key;
      v243 = (&_IDSStunCandidatePairStateStrings)[v248];
      _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
      if (_IDSShouldLog())
      {
        double v245 = off_1E944EAA8;
        id v247 = key;
        v243 = (&_IDSStunCandidatePairStateStrings)[v248];
        _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
      }
    }
  }
  if (self->_QUICForQREnabled) {
    objc_msgSend_setConnectedToQR_(self->_nwLink, v166, 1, v168);
  }
  if (objc_msgSend_relayProviderType(v21, v166, v167, v168, v243, v245, v247) == 1) {
    objc_msgSend__stopAllocbindFailoverTimer_(self, v169, 0, v171);
  }
  if (objc_msgSend_isRelayStunCandidatePair(v21, v169, v170, v171)
    && !(objc_msgSend_isSharedQRSession(v21, v172, v173, v174) & 1 | (v250 != 4064)))
  {
    uint64_t v176 = objc_msgSend_sessionID(v21, v172, v175, v174);
    uint64_t v179 = objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v177, (uint64_t)v176, v178, 4);

    long long v261 = 0u;
    long long v262 = 0u;
    long long v259 = 0u;
    long long v260 = 0u;
    id v180 = v179;
    uint64_t v185 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v181, (uint64_t)&v259, v182, v269, 16);
    if (v185)
    {
      uint64_t v187 = *(void *)v260;
      while (2)
      {
        for (uint64_t j = 0; j != v185; ++j)
        {
          if (*(void *)v260 != v187) {
            objc_enumerationMutation(v180);
          }
          id v189 = *(id *)(*((void *)&v259 + 1) + 8 * j);
          if (v189 != v21)
          {
            uint64_t v229 = objc_msgSend_GlobalLink(IDSFoundationLog, v183, v184, v186);
            if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v233 = objc_msgSend_sessionID(v21, v230, v231, v232);
              *(_DWORD *)double v270 = 138412802;
              *(void *)id v271 = v189;
              *(_WORD *)&v271[8] = 2112;
              *(void *)int v272 = v233;
              *(_WORD *)&v272[8] = 2112;
              id v273 = v21;
              _os_log_impl(&dword_19D9BE000, v229, OS_LOG_TYPE_DEFAULT, "Found another connected candidate pair %@ with the same QRSessionID %@ disconnecting %@", v270, 0x20u);
            }
            uint64_t v237 = objc_msgSend_candidatePairToken(v21, v234, v235, v236);
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v238, (uint64_t)v237, v239, 0, 8);

            goto LABEL_95;
          }
        }
        uint64_t v185 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v183, (uint64_t)&v259, v186, v269, 16);
        if (v185) {
          continue;
        }
        break;
      }
    }
  }
  objc_msgSend__setFirstDefaultCandidatePair_(self, v172, (uint64_t)v21, v174);
  if (v250 == 4064)
  {
    objc_msgSend__processXORMappedAddress_arrivalTime_(self, v190, (uint64_t)v21, a9);
    if (objc_msgSend_allocateType(v21, v193, v194, v195) == 2) {
      goto LABEL_95;
    }
  }
  else
  {
    if ((objc_msgSend_hbStarted(v21, v190, v191, v192) & 1) == 0)
    {
      long long v213 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
      {
        int v217 = objc_msgSend_pendingRealloc(v21, v214, v215, v216);
        __int16 v218 = @"NO";
        if (v217) {
          __int16 v218 = @"YES";
        }
        *(_DWORD *)double v270 = 138412290;
        *(void *)id v271 = v218;
        _os_log_impl(&dword_19D9BE000, v213, OS_LOG_TYPE_DEFAULT, "receive reallocate response, send HBR (%@).", v270, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        __int16 v222 = objc_msgSend_pendingRealloc(v21, v219, v221, v220) ? @"YES" : @"NO";
        v243 = (char *)v222;
        _IDSLogTransport(@"GL", @"IDS", @"receive reallocate response, send HBR (%@).");
        if (_IDSShouldLog())
        {
          if (objc_msgSend_pendingRealloc(v21, v219, v223, v220, v243)) {
            uint64_t v224 = @"YES";
          }
          else {
            uint64_t v224 = @"NO";
          }
          v243 = (char *)v224;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive reallocate response, send HBR (%@).");
        }
      }
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v219, 3, v220, 0, 0, key, v243);
      objc_msgSend_setHbStarted_(v21, v225, 1, v226);
    }
    if ((objc_msgSend_isSharedQRSession(v21, v210, v211, v212) & 1) == 0) {
      goto LABEL_95;
    }
  }
  if ((objc_msgSend__postProcessAllocbindResponse_candidatePair_candidatePairToken_(self, v196, (uint64_t)v254, v197, v21, key) & 1) == 0)
  {
    if (self->_delaySessionConnected)
    {
      if (!self->_isInitiator)
      {
        v255[0] = MEMORY[0x1E4F143A8];
        v255[1] = 3221225472;
        v255[2] = sub_19DA45A7C;
        v255[3] = &unk_1E5974100;
        id v256 = v21;
        double v257 = self;
        id v258 = key;
        objc_msgSend_startSessionConnectedTimer_block_(v256, v227, 30, v228, v255);
      }
    }
    else
    {
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v161, 1, v163, 0, 0, key);
    }
LABEL_126:
    if (objc_msgSend_pendingNoSessionStateAllocbind(v21, v161, v162, v163, v243)) {
      objc_msgSend_setPendingNoSessionState_(v21, v240, 0, v241);
    }
  }
LABEL_95:
  BOOL v208 = 1;
LABEL_100:

  return v208;
}

- (BOOL)_processUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  id v15 = a3;
  id v194 = a4;
  id v16 = a8;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v17;
  __str[7] = v17;
  __str[4] = v17;
  __str[5] = v17;
  __str[2] = v17;
  __str[3] = v17;
  __str[0] = v17;
  __str[1] = v17;
  v213[6] = v17;
  v213[7] = v17;
  v213[4] = v17;
  v213[5] = v17;
  v213[2] = v17;
  v213[3] = v17;
  v213[0] = v17;
  v213[1] = v17;
  memset(__b, 170, sizeof(__b));
  int v199 = 0;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString((char *)v213, 0x80uLL, (uint64_t)a7);
  Value = 0;
  if (v16 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v16);
  }
  id v19 = Value;
  uint64_t v193 = objc_msgSend_state(v19, v20, v21, v22);
  if (objc_msgSend_relayProviderType(v19, v23, v24, v25) == 1)
  {
    if (StunUtilHasValidBinaryDataAttr(v15, 65521, __b, &v199))
    {
      id v32 = objc_alloc(MEMORY[0x1E4F29128]);
      double v35 = objc_msgSend_initWithUUIDBytes_(v32, v33, (uint64_t)__b, v34);
      double v39 = objc_msgSend_UUIDString(v35, v36, v37, v38);
      double v43 = objc_msgSend_sessionID(v19, v40, v41, v42);
      char isEqualToString = objc_msgSend_isEqualToString_(v39, v44, (uint64_t)v43, v45);

      if (isEqualToString)
      {

        goto LABEL_9;
      }
      uint64_t v135 = objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v49);
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_sessionID(v19, v136, v137, v138);
        uint64_t v139 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        prots = v39;
        __int16 v202 = 2112;
        double v203 = v139;
        _os_log_impl(&dword_19D9BE000, v135, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with mismatched session-id %@ for %@.", buf, 0x16u);
      }
    }
    else
    {
      long long v55 = objc_msgSend_GlobalLink(IDSFoundationLog, v29, v30, v31);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v59 = objc_msgSend_sessionID(v19, v56, v57, v58);
        *(_DWORD *)buf = 138412290;
        prots = v59;
        _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with invalid session-id for %@.", buf, 0xCu);
      }
    }
  }
  else
  {
    unsigned __int16 v198 = 0;
    unsigned int v53 = objc_msgSend_channelNumber(v19, v26, v27, v28);
    if (StunUtilHasValidChannelNumber(v15, v53, &v198))
    {
LABEL_9:
      if (v193 == 6)
      {
        double v54 = objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          prots = OBJC_PROTOCOL___IDSServerBagContentProvider.prots;
          _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "receive unallocbind response with state [%s], ignore.", buf, 0xCu);
        }

        goto LABEL_89;
      }
      long long v61 = objc_msgSend_requestID(v15, v50, v51, v52);
      objc_msgSend__startTimeForStunRequest_(self, v62, (uint64_t)v61, v63);
      double v65 = v64;

      double v69 = objc_msgSend_GlobalLink(IDSFoundationLog, v66, v67, v68);
      double v70 = (a9 - v65) * 1000.0;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        idsSessionID = self->_idsSessionID;
        objc_msgSend_sessionID(v19, v71, v72, v73);
        double v75 = (char *)objc_claimAutoreleasedReturnValue();
        double v79 = objc_msgSend_local(v19, v76, v77, v78);
        uint64_t v83 = objc_msgSend_transport(v79, v80, v81, v82);
        double v87 = objc_msgSend_local(v19, v84, v85, v86);
        int v91 = *(unsigned __int8 *)(objc_msgSend_address(v87, v88, v89, v90) + 1);
        *(_DWORD *)buf = 138413570;
        prots = idsSessionID;
        __int16 v202 = 2112;
        double v203 = v75;
        __int16 v204 = 2112;
        id v205 = v16;
        __int16 v206 = 2048;
        double v207 = v70;
        __int16 v208 = 2048;
        uint64_t v209 = v83;
        __int16 v210 = 1024;
        int v211 = v91;
        _os_log_impl(&dword_19D9BE000, v69, OS_LOG_TYPE_DEFAULT, "Received unallocbind response for IDSSessionID: %@ QRSessionID: %@ on %@ after %0.6lf ms over protocol: %ld family: %d", buf, 0x3Au);
      }
      float v92 = v70;
      GLUtilReportAWDStunMessageEvent(v15, 0, v19, v92);
      double v95 = GLUCreateQRStunMessageEvent(v15, 0, v19, self->_timeBase, v92);
      if (v95)
      {
        id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        char v98 = objc_opt_respondsToSelector();

        if (v98)
        {
          id v99 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v99, v100, (uint64_t)self, v101, v95);
        }
      }
      if (self->_state > 3)
      {
        if (self->_unallocbindRequestToReason)
        {
          double v143 = objc_msgSend_requestID(v15, v93, v94, v96);
          if (v143)
          {
            unallocbindRequestToReasouint64_t n = self->_unallocbindRequestToReason;
            int v146 = objc_msgSend_requestID(v15, v141, v142, v144);
            double v147 = (void *)CFDictionaryGetValue((CFDictionaryRef)unallocbindRequestToReason, v146);
            unsigned __int8 v151 = objc_msgSend_unsignedIntValue(v147, v148, v149, v150);
          }
          else
          {
            unsigned __int8 v151 = objc_msgSend_unsignedIntValue(0, v141, v142, v144);
          }
        }
        else
        {
          unsigned __int8 v151 = objc_msgSend_unsignedIntValue(0, v93, v94, v96);
        }
        uint64_t v162 = objc_msgSend_requestID(v15, v152, v153, v154);
        if (v162)
        {
          BOOL v165 = self->_unallocbindRequestToReason == 0;

          if (!v165)
          {
            uint64_t v167 = self->_unallocbindRequestToReason;
            double v168 = objc_msgSend_requestID(v15, v163, v166, v164);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v167, v168);
          }
        }
        objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v163, (uint64_t)v19, v164, v151);
        if (self->_isUPlusOneSession) {
          objc_msgSend__destroyVirtualRelayLinksForCandidatePair_withReason_(self, v169, (uint64_t)v19, v170, v151);
        }
        char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v169, 3, v170, 4, 0, 0);
        char v172 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
        if (self->_state == 5)
        {
          objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v106, 0, v108, 0);
          if ((v172 & 1) == 0) {
            objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v106, 0, v108, v151);
          }
        }
        else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0 {
               && objc_msgSend_isEqualToString_(self->_cbuuid, v106, @"12345678-7654-DADA-DADA-DADADADADADA", v108))
        }
        {
          uint64_t v173 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v173, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"no more underlying link is connected.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"no more underlying link is connected.");
              }
            }
          }
          objc_msgSend_disconnectWithCompletionHandler_isReinitiating_(self, v174, 0, v175, 0);
        }
        goto LABEL_81;
      }
      objc_msgSend_setState_(v19, v93, 6, v96);
      uint64_t v102 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        int v103 = (&_IDSStunCandidatePairStateStrings)[v193];
        *(_DWORD *)buf = 136315650;
        prots = v103;
        __int16 v202 = 2080;
        double v203 = off_1E944EAC0;
        __int16 v204 = 2112;
        id v205 = v16;
        _os_log_impl(&dword_19D9BE000, v102, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v188 = off_1E944EAC0;
          id v190 = v16;
          uint64_t v185 = (&_IDSStunCandidatePairStateStrings)[v193];
          _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
          if (_IDSShouldLog())
          {
            double v188 = off_1E944EAC0;
            id v190 = v16;
            uint64_t v185 = (&_IDSStunCandidatePairStateStrings)[v193];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
          }
        }
      }
      if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v104, 3, v105, 4, 0, 0, v185, v188, v190))
      {
LABEL_81:
        if (objc_msgSend_pendingNoSessionStateAllocbind(v19, v106, v107, v108))
        {
          objc_msgSend_setState_(v19, v180, 1, v181);
          double v182 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v183 = (&_IDSStunCandidatePairStateStrings)[v193];
            *(_DWORD *)buf = 136315650;
            prots = v183;
            __int16 v202 = 2080;
            double v203 = off_1E944EA98;
            __int16 v204 = 2112;
            id v205 = v16;
            _os_log_impl(&dword_19D9BE000, v182, OS_LOG_TYPE_DEFAULT, "unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.");
              }
            }
          }
        }
        goto LABEL_88;
      }
      uint64_t v191 = _Block_copy(self->_connectReadyHandler);
      id v109 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        prots = self;
        _os_log_impl(&dword_19D9BE000, v109, OS_LOG_TYPE_DEFAULT, "failed to connect GlobalLink %@ due to session connected message timed out.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v186 = self;
          _IDSLogTransport(@"GL", @"IDS", @"failed to connect GlobalLink %@ due to session connected message timed out.");
          if (_IDSShouldLog())
          {
            double v186 = self;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to connect GlobalLink %@ due to session connected message timed out.");
          }
        }
      }
      double v192 = objc_msgSend_local(v19, v110, v111, v112, v186);
      uint64_t v113 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        double v117 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v114, v115, v116)];
        *(_DWORD *)buf = 136315394;
        prots = v117;
        __int16 v202 = 1024;
        LODWORD(v203) = 22;
        _os_log_impl(&dword_19D9BE000, v113, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v187 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v118, v119, v120)];
          uint64_t v189 = 22;
          _IDSLogTransport(@"GL", @"IDS", @"report session setup failure (%s, %d).");
          if (_IDSShouldLog())
          {
            uint64_t v187 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v192, v121, v122, v123, v187, 22)];
            uint64_t v189 = 22;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"report session setup failure (%s, %d).");
          }
        }
      }
      GLUtilReportAWDClientTimerEvent(305, 22, v19, self->_enableSKE, self->_isInitiator, 0.0);
      BOOL v124 = GLUCreateQRClientTimeEvent(305, 22, v19, self->_timeBase, 0.0);
      id v125 = objc_loadWeakRetained((id *)&self->_delegate);
      char v126 = objc_opt_respondsToSelector();

      if (v126)
      {
        id v130 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v130, v131, (uint64_t)self, v132, v124);
      }
      if (objc_msgSend_isSelfQRSession(v19, v127, v128, v129, v187, v189))
      {

LABEL_88:
LABEL_89:
        BOOL v140 = 1;
        goto LABEL_90;
      }
      if (v191)
      {
        double v155 = (void *)MEMORY[0x1E4F28C58];
        id v156 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v133, @"SessionConnected message timed out.", v134, *MEMORY[0x1E4F28568]);
        double v159 = objc_msgSend_errorWithDomain_code_userInfo_(v155, v157, @"GlobalLink", v158, 9, v156);

        uint64_t v160 = im_primary_queue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_19DA469C8;
        block[3] = &unk_1E5970A78;
        id v196 = v159;
        id v197 = v191;
        id v161 = v159;
        dispatch_async(v160, block);
      }
      else
      {
        id v176 = objc_loadWeakRetained((id *)&self->_delegate);
        char v177 = objc_opt_respondsToSelector();

        if ((v177 & 1) == 0)
        {
LABEL_80:

          goto LABEL_81;
        }
        id v161 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v161, v178, (uint64_t)self, v179, 0, self->_cbuuid);
      }

      goto LABEL_80;
    }
    double v60 = objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(prots) = v198;
      _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "receive unallocbind response invalid channel-number %04x.", buf, 8u);
    }
  }
  BOOL v140 = 0;
LABEL_90:

  return v140;
}

- (BOOL)_processReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v256 = *(void *)&a5;
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v258 = a4;
  id v15 = a8;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v293 = v16;
  long long v294 = v16;
  long long v291 = v16;
  long long v292 = v16;
  long long v289 = v16;
  long long v290 = v16;
  *(_OWORD *)__str = v16;
  long long v288 = v16;
  long long v286 = v16;
  long long v285 = v16;
  long long v284 = v16;
  long long v283 = v16;
  long long v282 = v16;
  long long v281 = v16;
  long long v280 = v16;
  *(_OWORD *)long long v279 = v16;
  memset(__b, 170, sizeof(__b));
  memset(v277, 0, sizeof(v277));
  double v257 = a6;
  SAToIPPortString(__str, 0x80uLL, (uint64_t)a6);
  SAToIPPortString(v279, 0x80uLL, (uint64_t)a7);
  long long v17 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "receive realloc indication on %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v240 = v15;
      _IDSLogTransport(@"GL", @"IDS", @"receive realloc indication on %@");
      if (_IDSShouldLog())
      {
        id v240 = v15;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive realloc indication on %@");
      }
    }
  }
  Value = 0;
  if (v15 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
  }
  id v19 = Value;
  uint64_t v23 = objc_msgSend_local(v19, v20, v21, v22);
  uint64_t v27 = objc_msgSend_transport(v23, v24, v25, v26);

  if (objc_msgSend_getAttribute_attribute_(v14, v28, 65520, v29, __b))
  {
    long long v259 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v30, (uint64_t)&__b[3], v31, __b[2]);
    id v32 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v259;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "receive realloc token %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v240 = v259;
        _IDSLogTransport(@"GL", @"IDS", @"receive realloc token %@");
        if (_IDSShouldLog())
        {
          id v240 = v259;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive realloc token %@");
        }
      }
    }
    if (!objc_msgSend_getAttribute_attribute_(v14, v33, 22, v34, __b, v240)) {
      goto LABEL_35;
    }
    __memcpy_chk();
    uint64_t v36 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v37;
      _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "receive xor-relayed-address [%s].", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v241 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
        _IDSLogTransport(@"GL", @"IDS", @"receive xor-relayed-address [%s].");
        if (_IDSShouldLog())
        {
          double v241 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive xor-relayed-address [%s].");
        }
      }
    }
    if ((unint64_t)(v27 - 3) <= 1)
    {
      if (v27 == 3) {
        unsigned int v38 = 80;
      }
      else {
        unsigned int v38 = 443;
      }
      WORD1(v277[0]) = __rev16(v38);
      double v39 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
        *(_DWORD *)buf = 134218242;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v40;
        _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "stunTransport: %ld, xor-relayed-address [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v241 = (char *)v27;
          double v245 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
          _IDSLogTransport(@"GL", @"IDS", @"stunTransport: %ld, xor-relayed-address [%s].");
          if (_IDSShouldLog())
          {
            double v241 = (char *)v27;
            double v245 = SAToIPPortString(v279, 0x80uLL, (uint64_t)v277);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"stunTransport: %ld, xor-relayed-address [%s].");
          }
        }
      }
    }
    if (IsValidSA((BOOL)v277))
    {
LABEL_35:
      *(void *)&long long v41 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v275 = v41;
      long long v276 = v41;
      long long v273 = v41;
      long long v274 = v41;
      long long v271 = v41;
      long long v272 = v41;
      *(_OWORD *)buf = v41;
      *(_OWORD *)&buf[16] = v41;
      if (!objc_msgSend_getAttribute_attribute_(v14, v35, 32, -3.72066208e-103, __b, v241, v245)) {
        goto LABEL_43;
      }
      __memcpy_chk();
      double v44 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        double v45 = SAToIPPortString(v279, 0x80uLL, (uint64_t)buf);
        *(_DWORD *)long long v260 = 136315138;
        id v261 = v45;
        _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "receive xor-mapped-address [%s].", v260, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v242 = SAToIPPortString(v279, 0x80uLL, (uint64_t)buf);
          _IDSLogTransport(@"GL", @"IDS", @"receive xor-mapped-address [%s].");
          if (_IDSShouldLog())
          {
            uint64_t v242 = SAToIPPortString(v279, 0x80uLL, (uint64_t)buf);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive xor-mapped-address [%s].");
          }
        }
      }
      if (!IsValidSA((BOOL)buf))
      {
        double v71 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long v260 = 0;
          _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_ERROR, "invalid xor-mapped-address.", v260, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          _IDSWarnV();
          _IDSLogV(0, @"IDSFoundation", @"Warning", @"invalid xor-mapped-address.");
          _IDSLogTransport(@"Warning", @"IDS", @"invalid xor-mapped-address.");
        }
        GLUtilReportAWDStunMessageEvent(v14, 4, v19, 0.0);
        uint64_t v255 = GLUCreateQRStunMessageEvent(v14, 4, v19, 0, 0.0);
        if (v255)
        {
          id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
          char v73 = objc_opt_respondsToSelector();

          if (v73) {
            goto LABEL_97;
          }
        }
      }
      else
      {
LABEL_43:
        if (!objc_msgSend_getAttribute_attribute_(v14, v42, 12, v43, __b, v242)) {
          goto LABEL_51;
        }
        if (bswap32(HIWORD(__b[2])) >> 16 == objc_msgSend_channelNumber(v19, v46, v47, v48))
        {
          double v49 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v260 = 67109120;
            LODWORD(v261) = HIWORD(__b[2]);
            _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "receive channel-number [%04x].", v260, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v243 = HIWORD(__b[2]);
              _IDSLogTransport(@"GL", @"IDS", @"receive channel-number [%04x].");
              if (_IDSShouldLog())
              {
                uint64_t v243 = HIWORD(__b[2]);
                _IDSLogV(0, @"IDSFoundation", @"GL", @"receive channel-number [%04x].");
              }
            }
          }
LABEL_51:
          uint64_t v255 = objc_msgSend_sessionID(v19, v46, v47, v48, v243);
          if (v255)
          {
            if (self->_H2FallbackEnabled)
            {
              if (v27 == 4)
              {
                unsigned int v53 = objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  tcpLinuint64_t k = self->_tcpLink;
                  *(_DWORD *)long long v260 = 138412290;
                  id v261 = tcpLink;
                  _os_log_impl(&dword_19D9BE000, v53, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: H2 enabled Use tcpLink: %@", v260, 0xCu);
                }

                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(self->_tcpLink, v55, v256, v56, v257, LOWORD(self->_portRange), v277, self->_clientUUID, 0);
              }
            }
            else
            {
              if (v27 == 4)
              {
                double v90 = objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
                if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                {
                  tcpSSLLinuint64_t k = self->_tcpSSLLink;
                  *(_DWORD *)long long v260 = 138412290;
                  id v261 = tcpSSLLink;
                  _os_log_impl(&dword_19D9BE000, v90, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: Use sslLink: %@", v260, 0xCu);
                }

                uint64_t v84 = self->_tcpSSLLink;
                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v84, v92, v256, v93, v257, LOWORD(self->_portRange), v277, self->_clientUUID, 0);
              }
              else
              {
                if (v27 == 3)
                {
                  uint64_t v84 = self->_tcpLink;
                  int v88 = objc_msgSend_GlobalLink(IDSFoundationLog, v85, v86, v87);
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v89 = self->_tcpLink;
                    *(_DWORD *)long long v260 = 138412290;
                    id v261 = v89;
                    _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "_processReallocIndication: Use tcpLink: %@", v260, 0xCu);
                  }
                }
                else
                {
                  uint64_t v84 = 0;
                }
                objc_msgSend_connect_localAddress_portRange_remoteAddress_clientUUID_completionHandler_(v84, v50, v256, v52, v257, LOWORD(self->_portRange), v277, self->_clientUUID, 0);
              }
            }
            uint64_t v94 = objc_msgSend_local(v19, v50, v51, v52);
            uint64_t v98 = objc_msgSend_radioAccessTechnology(v94, v95, v96, v97);

            uint64_t v102 = objc_msgSend_remote(v19, v99, v100, v101);
            uint64_t v106 = objc_msgSend_radioAccessTechnology(v102, v103, v104, v105);

            double v110 = objc_msgSend_local(v19, v107, v108, v109);
            uint64_t v114 = objc_msgSend_mtu(v110, v111, v112, v113);

            double v118 = objc_msgSend_remote(v19, v115, v116, v117);
            uint64_t v122 = objc_msgSend_mtu(v118, v119, v120, v121);

            unint64_t v250 = v27 - 3;
            if ((unint64_t)(v27 - 3) > 1)
            {
              id v254 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v123, 3, v124, 2, v98, v114, v256, v257, 0);
              uint64_t v27 = 2;
            }
            else
            {
              id v254 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v123, 3, v124, v27, v98, v114, v256, v257, buf);
            }
            uint64_t v252 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v125, 3, v126, v27, v106, v122, 0xFFFFFFFFLL, 0, v277);
            double v253 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v127, (uint64_t)v254, v128, v252, v255, self);
            if (v257->sa_family == 30 && BYTE1(v277[0]) == 2)
            {
              FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v256);
              if (!FirstPrefix)
              {
                double v239 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long v260 = 67109120;
                  LODWORD(v261) = v256;
                  _os_log_impl(&dword_19D9BE000, v239, OS_LOG_TYPE_DEFAULT, "failed to get nat64 prefix for realloc (if:%d).", v260, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(@"GL", @"IDS", @"failed to get nat64 prefix for realloc (if:%d).");
                    if (_IDSShouldLog()) {
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get nat64 prefix for realloc (if:%d).");
                    }
                  }
                }
                BOOL v70 = 0;
                goto LABEL_154;
              }
              double v136 = objc_msgSend_local(v253, v132, v133, v135);
              objc_msgSend_setPrefix_(v136, v137, (uint64_t)FirstPrefix, v138);

              objc_msgSend_synthesizeNat64WithPrefix(v253, v139, v140, v141);
            }
            double v144 = objc_msgSend_candidatePairToken(v253, v129, v130, v131);
            tokenToCandidatePairs = self->_tokenToCandidatePairs;
            if (tokenToCandidatePairs
              && v144
              && (double v147 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v144)) != 0)
            {
              id v148 = v147;
              uint64_t v149 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long v260 = 138412290;
                id v261 = v144;
                _os_log_impl(&dword_19D9BE000, v149, OS_LOG_TYPE_DEFAULT, "found existing candidate pair for %@.", v260, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  id v244 = v144;
                  _IDSLogTransport(@"GL", @"IDS", @"found existing candidate pair for %@.");
                  if (_IDSShouldLog())
                  {
                    id v244 = v144;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"found existing candidate pair for %@.");
                  }
                }
              }
            }
            else
            {
              uint64_t v152 = objc_msgSend_channelNumber(v19, v142, v143, v145);
              IDSSimpleUInt16List_AddItem((uint64_t)&self->_reallocChannelList, v152);
              uint64_t v153 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v157 = objc_msgSend_length(v259, v154, v155, v156);
                id v161 = objc_msgSend_relaySessionKey(v19, v158, v159, v160);
                uint64_t v165 = objc_msgSend_length(v161, v162, v163, v164);
                int v169 = objc_msgSend_channelNumber(v19, v166, v167, v168);
                *(_DWORD *)long long v260 = 138413314;
                id v261 = v19;
                __int16 v262 = 2048;
                uint64_t v263 = v157;
                __int16 v264 = 2048;
                uint64_t v265 = v165;
                __int16 v266 = 1024;
                unsigned int v267 = __rev16(v152);
                __int16 v268 = 1024;
                int v269 = v169;
                _os_log_impl(&dword_19D9BE000, v153, OS_LOG_TYPE_DEFAULT, "start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).", v260, 0x2Cu);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v173 = objc_msgSend_length(v259, v170, v171, v172);
                  char v177 = objc_msgSend_relaySessionKey(v19, v174, v175, v176);
                  uint64_t v181 = objc_msgSend_length(v177, v178, v179, v180);
                  uint64_t v185 = __rev16(v152);
                  uint64_t v248 = v185;
                  uint64_t v249 = objc_msgSend_channelNumber(v19, v182, v183, v184);
                  uint64_t v246 = v173;
                  uint64_t v247 = v181;
                  id v244 = v19;
                  _IDSLogTransport(@"GL", @"IDS", @"start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).");

                  if (_IDSShouldLog())
                  {
                    uint64_t v189 = objc_msgSend_length(v259, v186, v187, v188, v19, v173, v181, v185, v249);
                    uint64_t v193 = objc_msgSend_relaySessionKey(v19, v190, v191, v192);
                    uint64_t v197 = objc_msgSend_length(v193, v194, v195, v196);
                    uint64_t v248 = v185;
                    uint64_t v249 = objc_msgSend_channelNumber(v19, v198, v199, v200);
                    uint64_t v246 = v189;
                    uint64_t v247 = v197;
                    id v244 = v19;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).");
                  }
                }
              }
              id v203 = v253;
              if (v250 <= 1)
              {
                uint64_t v205 = objc_msgSend_channelNumber(v19, v201, v202, v204);
                objc_msgSend_setChannelNumber_(v203, v206, v205, v207);
              }
              objc_msgSend_setPropertiesWithReallocCandidatePair_reallocToken_(v203, v201, (uint64_t)v19, v204, v259, v244, v246, v247, v248, v249);
              int v211 = objc_msgSend_remote(v203, v208, v209, v210);
              uint64_t v215 = objc_msgSend_external(v211, v212, v213, v214);
              objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v216, (uint64_t)v203, v217, v257, v215, v152);

              if (!self->_tokenToCandidatePairs)
              {
                Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                id v219 = self->_tokenToCandidatePairs;
                self->_tokenToCandidatePairs = Mutable;
              }
              id v148 = v203;
              if (v148)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v144, v148);
              }
              else
              {
                double v220 = MEMORY[0x1E4F14500];
                id v221 = MEMORY[0x1E4F14500];
                if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR)) {
                  sub_19DB78994();
                }
              }
            }
            objc_msgSend_setIsRealloc_(v148, v150, 1, v151, v244);
            objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v222, (uint64_t)v144, v223, 0, 1, 0);
            if (!self->_reallocNewCandidatePairToOldCandidatePair)
            {
              uint64_t v224 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              self->_reallocNewCandidatePairToOldCandidatePair = v224;
            }
            id v226 = v19;
            if (v226)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_reallocNewCandidatePairToOldCandidatePair, v144, v226);
            }
            else
            {
              uint64_t v227 = MEMORY[0x1E4F14500];
              id v228 = MEMORY[0x1E4F14500];
              if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR)) {
                sub_19DB78C28();
              }
            }
            GLUtilReportAWDStunMessageEvent(v14, 0, v226, 0.0);
            uint64_t v231 = GLUCreateQRStunMessageEvent(v14, 0, v226, 0, 0.0);
            if (v231)
            {
              id v233 = objc_loadWeakRetained((id *)&self->_delegate);
              char v234 = objc_opt_respondsToSelector();

              if (v234)
              {
                id v235 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v235, v236, (uint64_t)self, v237, v231);
              }
            }
            objc_msgSend_hasRealloc(self->_metricsCollector, v229, v230, v232);

            BOOL v70 = 1;
LABEL_154:

            goto LABEL_155;
          }
          double v74 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v260 = 138412290;
            id v261 = v15;
            _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@.", v260, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for %@.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for %@.");
              }
            }
          }
          GLUtilReportAWDStunMessageEvent(v14, 6, v19, 0.0);
          id v254 = GLUCreateQRStunMessageEvent(v14, 6, v19, 0, 0.0);
          if (v254)
          {
            id v75 = objc_loadWeakRetained((id *)&self->_delegate);
            char v76 = objc_opt_respondsToSelector();

            if (v76)
            {
              id v251 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v251, v77, (uint64_t)self, v78, v254);
              BOOL v70 = 0;

LABEL_155:
              goto LABEL_156;
            }
          }
LABEL_98:
          BOOL v70 = 0;
          goto LABEL_155;
        }
        double v79 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v260 = 0;
          _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "channel-number mismatch in realloc indication.", v260, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"channel-number mismatch in realloc indication.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"channel-number mismatch in realloc indication.");
            }
          }
        }
        GLUtilReportAWDStunMessageEvent(v14, 5, v19, 0.0);
        uint64_t v255 = GLUCreateQRStunMessageEvent(v14, 5, v19, 0, 0.0);
        if (v255)
        {
          id v80 = objc_loadWeakRetained((id *)&self->_delegate);
          char v81 = objc_opt_respondsToSelector();

          if (v81)
          {
LABEL_97:
            id v254 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didAddQREvent_(v254, v82, (uint64_t)self, v83, v255);
            goto LABEL_98;
          }
        }
      }
      BOOL v70 = 0;
LABEL_156:

      goto LABEL_157;
    }
    double v63 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v63, OS_LOG_TYPE_ERROR, "invalid realloc server address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"invalid realloc server address.");
      _IDSLogTransport(@"Warning", @"IDS", @"invalid realloc server address.");
    }
    GLUtilReportAWDStunMessageEvent(v14, 3, v19, 0.0);
    double v64 = GLUCreateQRStunMessageEvent(v14, 3, v19, 0, 0.0);
    if (v64)
    {
      id v65 = objc_loadWeakRetained((id *)&self->_delegate);
      char v66 = objc_opt_respondsToSelector();

      if (v66)
      {
        id v67 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v67, v68, (uint64_t)self, v69, v64);
      }
    }
  }
  else
  {
    uint64_t v57 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_ERROR, "failed to receive realloc token.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"failed to receive realloc token.");
      _IDSLogTransport(@"Warning", @"IDS", @"failed to receive realloc token.");
    }
    GLUtilReportAWDStunMessageEvent(v14, 2, v19, 0.0);
    long long v259 = GLUCreateQRStunMessageEvent(v14, 2, v19, 0, 0.0);
    if (v259)
    {
      id v58 = objc_loadWeakRetained((id *)&self->_delegate);
      char v59 = objc_opt_respondsToSelector();

      if (v59)
      {
        id v60 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v60, v61, (uint64_t)self, v62, v259);
      }
    }
  }
  BOOL v70 = 0;
LABEL_157:

  return v70;
}

- (BOOL)_processDataIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v15 = a8;
  memset(__b, 170, sizeof(__b));
  if (objc_msgSend_getAttribute_attribute_(v13, v16, 19, v17, __b))
  {
    memset(v25, 170, 0x5D0uLL);
    if (objc_msgSend_getAttribute_attribute_(v13, v18, 65509, v19, v25)) {
      unsigned __int16 v21 = v25[4];
    }
    else {
      unsigned __int16 v21 = 0;
    }
    char v22 = objc_msgSend__processIncomingIndicationData_length_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v20, (uint64_t)&__b[3], a9, __b[2], v15, v21);
  }
  else
  {
    uint64_t v23 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v25[0] = 0;
      _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_ERROR, "receive invalid data indication.", (uint8_t *)v25, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"receive invalid data indication.");
      _IDSLogTransport(@"Warning", @"IDS", @"receive invalid data indication.");
    }
    char v22 = 0;
  }

  return v22;
}

- (BOOL)_processDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  int v12 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v9, v10, v11);
  int isInternalInstall = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (!isInternalInstall)
  {
    char v29 = 1;
    goto LABEL_25;
  }
  memset(__b, 170, sizeof(__b));
  int v36 = 0;
  unsigned __int16 v35 = 0;
  if (!StunUtilHasValidBinaryDataAttr(v7, 65514, __b, &v36))
  {
    uint64_t v30 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_ERROR, "receive invalid subtype indication.", buf, 2u);
    }

    uint64_t v20 = 0;
    if ((os_log_shim_legacy_logging_enabled() & 1) == 0) {
      goto LABEL_24;
    }
    double v31 = @"receive invalid subtype indication.";
    goto LABEL_23;
  }
  id v17 = [NSString alloc];
  uint64_t v20 = objc_msgSend_initWithBytes_length_encoding_(v17, v18, (uint64_t)__b, v19, v36, 4);
  unsigned __int16 v21 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unsigned int v38 = v20;
    _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "receive subtype [%@]", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      double v34 = v20;
      _IDSLogTransport(@"GL", @"IDS", @"receive subtype [%@]");
      if (_IDSShouldLog())
      {
        double v34 = v20;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive subtype [%@]");
      }
    }
  }
  if ((StunUtilHasValidBinaryDataAttr(v7, 65515, __b, &v36) & 1) == 0)
  {
    id v32 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_ERROR, "receive invalid subtype context.", buf, 2u);
    }

    if ((os_log_shim_legacy_logging_enabled() & 1) == 0) {
      goto LABEL_24;
    }
    double v31 = @"receive invalid subtype context.";
LABEL_23:
    _IDSWarnV();
    _IDSLogV(0, @"IDSFoundation", @"Warning", v31);
    _IDSLogTransport(@"Warning", @"IDS", v31);
LABEL_24:

    char v29 = 0;
    goto LABEL_25;
  }
  id v22 = [NSString alloc];
  uint64_t v25 = objc_msgSend_initWithBytes_length_encoding_(v22, v23, (uint64_t)__b, v24, v36, 4);
  if (StunUtilHasValidUInt16Attr((uint64_t)v7, 65516, &v35)) {
    unsigned __int16 v28 = v35;
  }
  else {
    unsigned __int16 v28 = 0;
  }
  char v29 = objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v26, (uint64_t)v8, v27, v20, v25, v28, v34);

LABEL_25:
  return v29;
}

- (BOOL)_triggerSymptomsWithCandidatePairToken:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6
{
  uint64_t v6 = a6;
  v43[5] = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  long long v16 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v13, v14, v15);
  int isInternalInstall = objc_msgSend_isInternalInstall(v16, v17, v18, v19);

  if (isInternalInstall)
  {
    Value = 0;
    if (v10 && self->_tokenToCandidatePairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v10);
    }
    v42[0] = &unk_1EF028A98;
    v42[1] = &unk_1EF028AB0;
    v43[0] = @"IDSQuickRelayTwoWay";
    v43[1] = @"IDSQuickRelaySelf";
    v42[2] = &unk_1EF028AC8;
    v42[3] = &unk_1EF028AE0;
    v43[2] = @"IDSQuickRelayShared";
    v43[3] = @"IDSQuickRelayKeepAlive";
    v42[4] = &unk_1EF028AF8;
    v43[4] = @"IDSQuickRelayMax";
    id v22 = (void *)MEMORY[0x1E4F1C9E8];
    id v23 = Value;
    double v26 = objc_msgSend_dictionaryWithObjects_forKeys_count_(v22, v24, (uint64_t)v43, v25, v42, 5);
    double v27 = NSNumber;
    uint64_t Type = objc_msgSend_allocateType(v23, v28, v29, v30);

    double v34 = objc_msgSend_numberWithInteger_(v27, v32, Type, v33);
    uint64_t v37 = objc_msgSend_objectForKey_(v26, v35, (uint64_t)v34, v36);

    char v40 = objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v38, (uint64_t)v37, v39, v11, v12, v6);
  }
  else
  {
    char v40 = 1;
  }

  return v40;
}

- (BOOL)_triggerSymptomsWithType:(id)a3 subType:(id)a4 subTypeContext:(id)a5 duration:(unsigned __int16)a6
{
  uint64_t v6 = a6;
  v51[1] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v44 = 0;
  double v45 = &v44;
  uint64_t v46 = 0x2020000000;
  char v47 = 1;
  uint64_t v14 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v12, v13, COERCE_DOUBLE(0x2020000000));
  int isInternalInstall = objc_msgSend_isInternalInstall(v14, v15, v16, v17);

  if (isInternalInstall)
  {
    id v19 = objc_alloc_init((Class)CUTWeakLinkClass());
    id v23 = objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(v19, v20, @"IDSQuickRelay", v21, v9, v10, v11, @"identityservicesd", 0);
    if (v6)
    {
      if (qword_1E944F458 != -1) {
        dispatch_once(&qword_1E944F458, &unk_1EEFCD1F8);
      }
      uint64_t v50 = qword_1E944F448;
      uint64_t v48 = qword_1E944F450;
      double v25 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v22, v6, v24);
      double v49 = v25;
      unsigned __int16 v28 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v26, (uint64_t)&v49, v27, &v48, 1);
      v51[0] = v28;
      double v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v29, (uint64_t)v51, v30, &v50, 1);
    }
    else
    {
      double v31 = 0;
    }
    id v32 = im_primary_queue();
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = sub_19DA48C48;
    v38[3] = &unk_1E5974148;
    id v39 = v19;
    id v40 = v23;
    id v41 = v31;
    double v42 = &v44;
    uint64_t v43 = 0x402E000000000000;
    id v33 = v31;
    id v34 = v23;
    id v35 = v19;
    dispatch_async(v32, v38);
  }
  BOOL v36 = *((unsigned char *)v45 + 24) != 0;
  _Block_object_dispose(&v44, 8);

  return v36;
}

- (int64_t)_getQRAllocateType
{
  return 1;
}

- (BOOL)_processGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v54 = a4;
  id v15 = a8;
  memset(__b, 170, sizeof(__b));
  char Attribute_attribute = objc_msgSend_getAttribute_attribute_(v14, v16, 9, v17, __b);
  if (Attribute_attribute)
  {
    Value = 0;
    if (v15 && self->_tokenToCandidatePairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
    }
    id v20 = Value;
    unsigned __int16 v21 = LOWORD(__b[3]) + 100 * LOWORD(__b[2]);
    id v22 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      id v69 = v15;
      __int16 v70 = 1024;
      int v71 = v21;
      __int16 v72 = 2080;
      char v73 = &__b[4];
      _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "receive goaway indication for %@, error_code(%u) reason(%s).", buf, 0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v52 = v21;
        unsigned int v53 = &__b[4];
        id v51 = v15;
        _IDSLogTransport(@"GL", @"IDS", @"receive goaway indication for %@, error_code(%u) reason(%s).");
        if (_IDSShouldLog())
        {
          uint64_t v52 = v21;
          unsigned int v53 = &__b[4];
          id v51 = v15;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive goaway indication for %@, error_code(%u) reason(%s).");
        }
      }
    }
    bzero(buf, 0x5C0uLL);
    unsigned int v65 = 0;
    if (StunUtilHasValidBinaryDataAttr(v14, 65503, buf, (int *)&v65))
    {
      double v25 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v66 = 67109120;
        unsigned int v67 = v65;
        _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "This goaway has QR Server data blob(%dB)", v66, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v51 = (id)v65;
          _IDSLogTransport(@"GL", @"IDS", @"This goaway has QR Server data blob(%dB)");
          if (_IDSShouldLog())
          {
            id v51 = (id)v65;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"This goaway has QR Server data blob(%dB)");
          }
        }
      }
      if ((int)v65 >= 1)
      {
        double v26 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v23, (uint64_t)buf, v24);
        double v27 = (void *)MEMORY[0x1E4F1C9E8];
        double v31 = objc_msgSend_sessionID(v20, v28, v29, v30);
        objc_msgSend_dictionaryWithObject_forKey_(v27, v32, (uint64_t)v26, v33, v31);
        id v34 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        QRServerDataBlob = self->_QRServerDataBlob;
        self->_QRServerDataBlob = v34;
      }
    }
    objc_msgSend_setIsDisconnecting_(v20, v23, 1, v24, v51, v52, v53);
    v61[0] = MEMORY[0x1E4F143A8];
    v61[1] = 3221225472;
    v61[2] = sub_19DA49568;
    v61[3] = &unk_1E5974100;
    id v62 = v15;
    id v36 = v20;
    id v63 = v36;
    double v64 = self;
    objc_msgSend_startSessionGoAwayTimer_block_(v36, v37, 5, v38, v61);
    QRAllocateuint64_t Type = objc_msgSend__getQRAllocateType(self, v39, v40, v41);
    int v43 = *(_DWORD *)&a7->sa_data[2];
    uint64_t v44 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA49768;
    block[3] = &unk_1E5974170;
    id v56 = v36;
    uint64_t v57 = QRAllocateType;
    void block[4] = self;
    double v58 = a9;
    unsigned __int16 v60 = v21;
    int v59 = v43;
    id v45 = v36;
    dispatch_async(v44, block);

    objc_msgSend_hasGoaway(self->_metricsCollector, v46, v47, v48);
  }
  else
  {
    double v49 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_ERROR, "receive invalid goaway indication.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      _IDSWarnV();
      _IDSLogV(0, @"IDSFoundation", @"Warning", @"receive invalid goaway indication.");
      _IDSLogTransport(@"Warning", @"IDS", @"receive invalid goaway indication.");
    }
  }

  return Attribute_attribute;
}

- (BOOL)_processStunPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  id v12 = a4;
  id v13 = a5;
  id v14 = [IDSStunMessage alloc];
  double v17 = objc_msgSend_initWithType_(v14, v15, 0, v16);
  if (objc_msgSend_read_inputLength_internal_(v17, v18, (uint64_t)a3->var0, v19, SLODWORD(a3->var2), 0))
  {
    id v20 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)double v147 = v17;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "receive stun message %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
    {
      double v109 = v17;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"receive stun message %@.");
    }
    unsigned __int16 v24 = objc_msgSend_type(v17, v21, v22, v23, v109);
    uint64_t v29 = objc_msgSend_requestID(v17, v25, v26, v27);
    if (!v29)
    {
      uint64_t v47 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "failed to get request-id for stun message.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to get request-id for stun message.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get request-id for stun message.");
          }
        }
      }
      goto LABEL_155;
    }
    objc_msgSend__startTimeForStunRequest_(self, v28, (uint64_t)v29, v30);
    objc_msgSend_setStartTime_(v17, v31, v32, v33);
    tokenToStunReqID = self->_tokenToStunReqID;
    if (tokenToStunReqID)
    {
      id key = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunReqID, v29);
      if (key)
      {
LABEL_49:
        if ((v24 & 0xFEFF) == 1)
        {
          if (self->_state == 4)
          {
            if (!self->_useSecureControlMessage)
            {
              uint64_t v114 = 0;
              uint64_t v115 = 0;
              goto LABEL_108;
            }
            id v36 = self->_controlMessageKey;
            uint64_t v115 = 0;
LABEL_67:
            if (v36)
            {
              uint64_t v114 = v36;
              if ((objc_msgSend_verifyMessageIntegrityWithKey_inputBuffer_inputLength_(v17, v35, (uint64_t)v36, v37, a3->var0, LODWORD(a3->var2)) & 1) == 0)
              {
                unsigned int v53 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109378;
                  *(_DWORD *)double v147 = v24;
                  *(_WORD *)&v147[4] = 2112;
                  *(void *)&v147[6] = key;
                  _os_log_impl(&dword_19D9BE000, v53, OS_LOG_TYPE_DEFAULT, "stun mesasge type %04x failed message-integrity check for %@", buf, 0x12u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v110 = v24;
                    uint64_t v111 = key;
                    _IDSLogTransport(@"GL", @"IDS", @"stun mesasge type %04x failed message-integrity check for %@");
                    if (_IDSShouldLog())
                    {
                      uint64_t v110 = v24;
                      uint64_t v111 = key;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"stun mesasge type %04x failed message-integrity check for %@");
                    }
                  }
                }
                if (v24 == 2066)
                {
                  id v54 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "message integrity fails, trigger symptoms", buf, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(@"GL", @"IDS", @"message integrity fails, trigger symptoms");
                      if (_IDSShouldLog()) {
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"message integrity fails, trigger symptoms");
                      }
                    }
                  }
                  objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v55, (uint64_t)key, v56, @"DiagnosticIndicationFailure", @"BadIntegrity", 15, v110, v111);
                }
                goto LABEL_118;
              }
            }
            else
            {
              uint64_t v114 = 0;
            }
LABEL_108:
            id v62 = objc_msgSend_decKey(v115, v35, (uint64_t)v36, v37);
            char v65 = objc_msgSend_decryptAES128CTRStunAttributes_(v17, v63, (uint64_t)v62, v64);

            if (v65)
            {
              if (objc_msgSend_isActive(v115, v66, v67, v68))
              {
                int v71 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
                if (v71) {
                  v71[36] = a6;
                }
              }
              else
              {
                objc_msgSend_setLastIncomingPacketTime_(v115, v69, v70, a6);
              }
              if (v24 <= 0xFDFu)
              {
                if (v24 > 0x900u)
                {
                  switch(v24)
                  {
                    case 0xEF1u:
                      long long v79 = *(_OWORD *)&a3->var18.__ss_pad2[64];
                      long long v126 = *(_OWORD *)&a3->var18.__ss_pad2[48];
                      long long v127 = v79;
                      long long v80 = *(_OWORD *)&a3->var18.__ss_pad2[96];
                      long long v128 = *(_OWORD *)&a3->var18.__ss_pad2[80];
                      long long v129 = v80;
                      long long v81 = *(_OWORD *)a3->var18.__ss_pad2;
                      long long v122 = *(_OWORD *)&a3->var18.ss_len;
                      long long v123 = v81;
                      long long v82 = *(_OWORD *)&a3->var18.__ss_pad2[32];
                      long long v124 = *(_OWORD *)&a3->var18.__ss_pad2[16];
                      long long v125 = v82;
                      long long v83 = *(_OWORD *)&a3->var19.ss_len;
                      long long v84 = *(_OWORD *)a3->var19.__ss_pad2;
                      long long v85 = *(_OWORD *)&a3->var19.__ss_pad2[32];
                      long long v132 = *(_OWORD *)&a3->var19.__ss_pad2[16];
                      long long v133 = v85;
                      long long v130 = v83;
                      long long v131 = v84;
                      long long v86 = *(_OWORD *)&a3->var19.__ss_pad2[48];
                      long long v87 = *(_OWORD *)&a3->var19.__ss_pad2[64];
                      long long v88 = *(_OWORD *)&a3->var19.__ss_pad2[96];
                      long long v136 = *(_OWORD *)&a3->var19.__ss_pad2[80];
                      long long v137 = v88;
                      long long v134 = v86;
                      long long v135 = v87;
                      unsigned int var17 = a3->var17;
                      aBlock[0] = MEMORY[0x1E4F143A8];
                      aBlock[1] = 3221225472;
                      aBlock[2] = sub_19DA4B118;
                      aBlock[3] = &unk_1E5974198;
                      void aBlock[4] = self;
                      id v119 = v17;
                      id v120 = v12;
                      unsigned int v139 = var17;
                      id v112 = key;
                      id v121 = v112;
                      double v138 = a6;
                      double v90 = (void (**)(void))_Block_copy(aBlock);
                      unint64_t v94 = objc_msgSend_state(v115, v91, v92, v93);
                      if (v94 > 3)
                      {
                        v90[2](v90);
                      }
                      else
                      {
                        double v95 = OSLogHandleForTransportCategory();
                        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v96 = _Block_copy(v90);
                          double v97 = (&_IDSStunCandidatePairStateStrings)[v94];
                          *(_DWORD *)buf = 134218498;
                          *(void *)double v147 = v96;
                          *(_WORD *)&v147[8] = 2112;
                          *(void *)&v147[10] = v112;
                          __int16 v148 = 2080;
                          uint64_t v149 = v97;
                          _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "delay processing realloc block %p for %@, state [%s].", buf, 0x20u);
                        }
                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            uint64_t v98 = _Block_copy(v90);
                            _IDSLogTransport(@"GL", @"IDS", @"delay processing realloc block %p for %@, state [%s].");

                            if (_IDSShouldLog())
                            {
                              id v99 = _Block_copy(v90);
                              _IDSLogV(0, @"IDSFoundation", @"GL", @"delay processing realloc block %p for %@, state [%s].");
                            }
                          }
                        }
                        if (!self->_tokenToReallocBlocks)
                        {
                          Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          tokenToReallocBlocks = self->_tokenToReallocBlocks;
                          self->_tokenToReallocBlocks = Mutable;
                        }
                        uint64_t v102 = _Block_copy(v90);
                        if (v102)
                        {
                          CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToReallocBlocks, v112, v102);
                        }
                        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                        {
                          sub_19DB78CAC();
                        }
                      }
                      break;
                    case 0xEF2u:
                    case 0xEF3u:
                    case 0xEF6u:
                      goto LABEL_162;
                    case 0xEF4u:
                      objc_msgSend_processInfoIndication_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      break;
                    case 0xEF5u:
                      objc_msgSend_processSessionInfoIndication_arrivalTime_isLightweightParticipant_(v115, v72, (uint64_t)v17, a6, self->_isLightweightParticipant);
                      break;
                    case 0xEF7u:
                      objc_msgSend_processParticipantUpdateIndication_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      break;
                    case 0xEF8u:
                      objc_msgSend_processPluginControlIndication_(v115, v72, (uint64_t)v17, v74);
                      break;
                    default:
                      if (v24 == 2305)
                      {
                        objc_msgSend_processTestResponse_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                      }
                      else
                      {
                        if (v24 != 2321) {
                          goto LABEL_162;
                        }
LABEL_122:
                        char v76 = OSLogHandleForTransportCategory();
                        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)double v147 = v24;
                          _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "_processStunPacket, error response: messageType(%04X)", buf, 8u);
                        }

                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            uint64_t v110 = v24;
                            _IDSLogTransport(@"GL", @"IDS", @"_processStunPacket, error response: messageType(%04X)");
                            if (_IDSShouldLog())
                            {
                              uint64_t v110 = v24;
                              _IDSLogV(0, @"IDSFoundation", @"GL", @"_processStunPacket, error response: messageType(%04X)");
                            }
                          }
                        }
                        objc_msgSend_processStunErrorResponse_packetBuffer_headerOverhead_(v115, v77, (uint64_t)v17, v78, a3, a7, v110);
                      }
                      break;
                  }
                }
                else if (v24 <= 0x80Fu)
                {
                  switch(v24)
                  {
                    case 1u:
                      objc_msgSend__processBindingRequest_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                      break;
                    case 0x17u:
                      objc_msgSend__processDataIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                      break;
                    case 0x101u:
                      objc_msgSend__processBindingResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                      break;
                    default:
LABEL_162:
                      uint64_t v104 = OSLogHandleForTransportCategory();
                      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 67109120;
                        *(_DWORD *)double v147 = v24;
                        _os_log_impl(&dword_19D9BE000, v104, OS_LOG_TYPE_DEFAULT, "_processStunPacket - receive unknown STUN message type(%04X).", buf, 8u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          _IDSLogTransport(@"GL", @"IDS", @"_processStunPacket - receive unknown STUN message type(%04X).");
                          if (_IDSShouldLog()) {
                            _IDSLogV(0, @"IDSFoundation", @"GL", @"_processStunPacket - receive unknown STUN message type(%04X).");
                          }
                        }
                      }
                      break;
                  }
                }
                else
                {
                  switch(v24)
                  {
                    case 0x810u:
                      objc_msgSend__processGoAwayIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                      break;
                    case 0x811u:
                      break;
                    case 0x812u:
                      objc_msgSend__processDiagnosticIndication_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, key);
                      break;
                    case 0x813u:
                      objc_msgSend_processDataMessageErrorIndication_(v115, v72, (uint64_t)v17, v74);
                      break;
                    default:
                      goto LABEL_162;
                  }
                }
              }
              else
              {
                switch(v24)
                {
                  case 0xFE0u:
                  case 0xFE1u:
                    objc_msgSend__processAllocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                    break;
                  case 0xFE2u:
                  case 0xFF2u:
                    objc_msgSend__processUnallocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v72, (uint64_t)v17, a6, v12, a3->var17, &a3->var18, &a3->var19, key);
                    break;
                  case 0xFE3u:
                    objc_msgSend_processStatsResponse_arrivalTime_(v115, v72, (uint64_t)v17, a6);
                    break;
                  case 0xFE4u:
                    objc_msgSend_processInfoResponse_packetBuffer_headerOverhead_(v115, v72, (uint64_t)v17, v74, a3, a7);
                    break;
                  case 0xFE5u:
                    objc_msgSend_processSessionInfoResponse_packetBuffer_headerOverhead_isLightweightParticipant_(v115, v72, (uint64_t)v17, v74, a3, a7, self->_isLightweightParticipant);
                    break;
                  case 0xFE7u:
                    objc_msgSend_processParticipantUpdateResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFE8u:
                    objc_msgSend_processPluginRegistrationResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFE9u:
                    objc_msgSend_processPutMaterialResponse_(v115, v72, (uint64_t)v17, v74);
                    break;
                  case 0xFF0u:
                  case 0xFF1u:
                  case 0xFF3u:
                  case 0xFF4u:
                  case 0xFF5u:
                  case 0xFF7u:
                  case 0xFF8u:
                    goto LABEL_122;
                  default:
                    goto LABEL_162;
                }
              }
              if ((v24 & 0x100) != 0)
              {
                double v105 = objc_msgSend_requestID(v17, v72, v73, v74);
                objc_msgSend__removeStunRequest_(self, v106, (uint64_t)v105, v107);
              }
              BOOL v46 = 1;
              goto LABEL_193;
            }
            uint64_t v75 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)double v147 = v24;
              _os_log_impl(&dword_19D9BE000, v75, OS_LOG_TYPE_DEFAULT, "stun mesasge type %04x failed to decrypt - dropped", buf, 8u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"stun mesasge type %04x failed to decrypt - dropped");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"stun mesasge type %04x failed to decrypt - dropped");
                }
              }
            }
LABEL_118:
            BOOL v46 = 0;
LABEL_193:
            long long v61 = v114;
            goto LABEL_194;
          }
          uint64_t v57 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            double v58 = _IDSLinkStateStrings[self->_state];
            *(_DWORD *)buf = 136315394;
            *(void *)double v147 = v58;
            *(_WORD *)&v147[8] = 1024;
            *(_DWORD *)&v147[10] = v24;
            _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "GL state is [%s], ignore stun message type %04x", buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"GL state is [%s], ignore stun message type %04x");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"GL state is [%s], ignore stun message type %04x");
              }
            }
          }
LABEL_101:
          uint64_t v115 = 0;
          long long v61 = 0;
          BOOL v46 = 0;
LABEL_194:

          goto LABEL_195;
        }
        tokenToCandidatePairs = self->_tokenToCandidatePairs;
        if (!tokenToCandidatePairs
          || !key
          || (uint64_t v115 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, key)) == 0)
        {
          tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
          if (!tokenToStunCheckPairs
            || !key
            || (uint64_t v115 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, key)) == 0)
          {
            unsigned __int16 v60 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)double v147 = key;
              _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for incoming stun packet, candidatePairTokeuint64_t n = %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for incoming stun packet, candidatePairTokeuint64_t n = %@");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for incoming stun packet, candidatePairTokeuint64_t n = %@");
                }
              }
            }
            goto LABEL_101;
          }
          uint64_t v52 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v52, OS_LOG_TYPE_DEFAULT, "found candidate pair in stun check pair list.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"found candidate pair in stun check pair list.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"found candidate pair in stun check pair list.");
              }
            }
          }
        }
        if ((v24 & 0xFFFE) != 0xFE0)
        {
          uint64_t v114 = 0;
          if (v24 > 0xFE1u)
          {
            if (v24 != 4072 && v24 != 4066) {
              goto LABEL_108;
            }
          }
          else if (v24 != 2066 && v24 != 3825)
          {
            goto LABEL_108;
          }
        }
        objc_msgSend_relaySessionKey(v115, v35, (uint64_t)v36, v37);
        id v36 = (NSData *)objc_claimAutoreleasedReturnValue();
        goto LABEL_67;
      }
    }
    if ((v24 & 0x110) != 0)
    {
      if ((v24 & 0x110) != 0x10)
      {
        double v48 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)double v147 = v29;
          *(_WORD *)&v147[8] = 1024;
          *(_DWORD *)&v147[10] = v24;
          _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "no matching request with request id %@ for stun message type %04x, ignore.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"no matching request with request id %@ for stun message type %04x, ignore.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"no matching request with request id %@ for stun message type %04x, ignore.");
            }
          }
        }
        BOOL v46 = 1;
        goto LABEL_195;
      }
      bzero(buf, 0x5D0uLL);
      if (objc_msgSend_getAttribute_attribute_(v17, v38, 12, v39, buf))
      {
        if ((*(_DWORD *)&v147[4] & 0xFFFF0000) != 0)
        {
          keya = channelForStunCandidatePair((uint64_t)&a3->var18, (uint64_t)&a3->var19, (unsigned __int16)bswap32(*(unsigned int *)&v147[4]));
          Value = 0;
          if (self->_channelToCandidatePairs && keya) {
            Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_channelToCandidatePairs, keya);
          }
          id v113 = Value;
          objc_msgSend_sessionID(v113, v41, v42, v43);
          uint64_t v44 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (!v44)
          {
            int v103 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v140 = 67109634;
              int v141 = v24;
              __int16 v142 = 2112;
              uint64_t v143 = keya;
              __int16 v144 = 2112;
              id v145 = v113;
              _os_log_impl(&dword_19D9BE000, v103, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@", v140, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for indication type %04x, channel %@, candidatePair: %@");
                }
              }
            }

            goto LABEL_155;
          }
        }
        else
        {
          uint64_t v44 = self->_cbuuid;
        }
        id key = tokenForStunCandidatePair((uint64_t)&a3->var18, (uint64_t)&a3->var19, v44);

        if (key) {
          goto LABEL_49;
        }
      }
      int v59 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v140 = 67109120;
        int v141 = v24;
        _os_log_impl(&dword_19D9BE000, v59, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for indication type %04x.", v140, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for indication type %04x.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for indication type %04x.");
          }
        }
      }
    }
    else
    {
      if (v24 == 1)
      {
        id key = tokenForStunCandidatePair((uint64_t)&a3->var18, (uint64_t)&a3->var19, self->_cbuuid);
        goto LABEL_49;
      }
      double v49 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)double v147 = v24;
        _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "receive invalid stun request (%04x).", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"receive invalid stun request (%04x).");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive invalid stun request (%04x).");
          }
        }
      }
    }
LABEL_155:
    BOOL v46 = 0;
LABEL_195:

    goto LABEL_196;
  }
  id v45 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "failed to process incoming stun message.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to process incoming stun message.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to process incoming stun message.");
      }
    }
  }
  BOOL v46 = 0;
LABEL_196:

  return v46;
}

- (void)_processDataOnReallocChannel:(unsigned __int16)a3 localAddress:(sockaddr *)a4 remoteAddress:(sockaddr *)a5
{
  unsigned int v194 = a3;
  uint64_t v244 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, a3, v5);
  long long v202 = 0u;
  long long v203 = 0u;
  long long v200 = 0u;
  long long v201 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v200, v7, v243, 16);
  if (v10)
  {
    uint64_t v187 = 0;
    int v193 = 0;
    uint64_t v11 = *(void *)v201;
    uint64_t v12 = 136315906;
    while (1)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v201 != v11) {
          objc_enumerationMutation(obj);
        }
        id v14 = *(void **)(*((void *)&v200 + 1) + 8 * i);
        if (objc_msgSend_channelNumber(v14, v8, v9, *(double *)&v12, v183) == v194)
        {
          id v15 = objc_msgSend_local(v14, v8, v9, *(double *)&v12);
          uint64_t v19 = objc_msgSend_address(v15, v16, v17, v18);

          double v23 = objc_msgSend_remote(v14, v20, v21, v22);
          uint64_t v27 = objc_msgSend_external(v23, v24, v25, v26);

          if (!IsSameSA(v19, (uint64_t)a4)
            || !IsSameSA(v27, (uint64_t)a5)
            || !objc_msgSend_pendingRealloc(v14, v28, v29, v30))
          {
            if (objc_msgSend_pendingRealloc(v14, v28, v29, v30))
            {
              *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
              long long v241 = v45;
              long long v242 = v45;
              long long v239 = v45;
              long long v240 = v45;
              long long v237 = v45;
              long long v238 = v45;
              *(_OWORD *)double v236 = v45;
              *(_OWORD *)&v236[16] = v45;
              long long v234 = v45;
              long long v235 = v45;
              long long v232 = v45;
              long long v233 = v45;
              long long v230 = v45;
              long long v231 = v45;
              *(_OWORD *)id v228 = v45;
              long long v229 = v45;
              long long v226 = v45;
              long long v227 = v45;
              long long v224 = v45;
              long long v225 = v45;
              long long v222 = v45;
              long long v223 = v45;
              *(_OWORD *)__str = v45;
              long long v221 = v45;
              long long v218 = v45;
              long long v219 = v45;
              long long v216 = v45;
              long long v217 = v45;
              long long v214 = v45;
              long long v215 = v45;
              *(_OWORD *)double v212 = v45;
              long long v213 = v45;
              BOOL v46 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v47 = SAToIPPortString(v236, 0x80uLL, v19);
                double v48 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                double v49 = SAToIPPortString(v228, 0x80uLL, v27);
                uint64_t v50 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                *(_DWORD *)buf = 136315906;
                uint64_t v205 = v47;
                __int16 v206 = 2080;
                double v207 = v48;
                __int16 v208 = 2080;
                uint64_t v209 = v49;
                __int16 v210 = 2080;
                int v211 = v50;
                _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s", buf, 0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  id v51 = SAToIPPortString(v236, 0x80uLL, v19);
                  uint64_t v52 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                  uint64_t v185 = SAToIPPortString(v228, 0x80uLL, v27);
                  double v186 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                  uint64_t v183 = v51;
                  uint64_t v184 = (uint64_t)v52;
                  _IDSLogTransport(@"GL", @"IDS", @"pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s");
                  if (_IDSShouldLog())
                  {
                    unsigned int v53 = SAToIPPortString(v236, 0x80uLL, v19);
                    id v54 = SAToIPPortString(__str, 0x80uLL, (uint64_t)a4);
                    uint64_t v185 = SAToIPPortString(v228, 0x80uLL, v27);
                    double v186 = SAToIPPortString(v212, 0x80uLL, (uint64_t)a5);
                    uint64_t v183 = v53;
                    uint64_t v184 = (uint64_t)v54;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"pair local: %s, realloc local: %s, pair remote:%s, realloc remote: %s");
                  }
                }
              }
            }
            goto LABEL_84;
          }
          objc_msgSend_setPendingRealloc_(v14, v28, 0, v30);
          id v31 = v14;

          if (self->_reallocNewCandidatePairToOldCandidatePair)
          {
            double v37 = objc_msgSend_candidatePairToken(v31, v32, v33, v34);
            if (v37)
            {
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              uint64_t v40 = objc_msgSend_candidatePairToken(v31, v35, v36, v38);
              double v41 = (id)CFDictionaryGetValue((CFDictionaryRef)reallocNewCandidatePairToOldCandidatePair, v40);
            }
            else
            {
              double v41 = 0;
            }

            objc_msgSend_remote(v41, v55, v56, v57);
          }
          else
          {
            double v41 = 0;
            objc_msgSend_remote(0, v32, v33, v34);
          double v58 = };
          uint64_t v62 = objc_msgSend_external(v58, v59, v60, v61);

          char v66 = objc_msgSend_remote(v31, v63, v64, v65);
          uint64_t v70 = objc_msgSend_external(v66, v67, v68, v69);

          if (v70 && v62)
          {
            if (!IsSameSA(v62, v70))
            {
              double v74 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_candidatePairToken(v31, v75, v76, v77);
                id v78 = (id)objc_claimAutoreleasedReturnValue();
                long long v82 = objc_msgSend_candidatePairToken(v41, v79, v80, v81);
                *(_DWORD *)double v236 = 138412546;
                *(void *)&v236[4] = v78;
                *(_WORD *)&v236[12] = 2112;
                *(void *)&v236[14] = v82;
                _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "Realloc is done for: %@ remove pair: %@", v236, 0x16u);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  objc_msgSend_candidatePairToken(v31, v83, v84, v85);
                  long long v86 = (char *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_candidatePairToken(v41, v87, v88, v89);
                  uint64_t v184 = v183 = v86;
                  _IDSLogTransport(@"GL", @"IDS", @"Realloc is done for: %@ remove pair: %@");

                  if (_IDSShouldLog())
                  {
                    objc_msgSend_candidatePairToken(v31, v83, v84, v85, v86, v184);
                    double v90 = (char *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_candidatePairToken(v41, v91, v92, v93);
                    uint64_t v184 = v183 = v90;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"Realloc is done for: %@ remove pair: %@");
                  }
                }
              }
              unint64_t v94 = objc_msgSend_candidatePairToken(v31, v83, v84, v85, v183);
              if (v94)
              {
                BOOL v95 = self->_reallocNewCandidatePairToOldCandidatePair == 0;

                if (!v95)
                {
                  uint64_t v96 = self->_reallocNewCandidatePairToOldCandidatePair;
                  double v97 = objc_msgSend_candidatePairToken(v31, v71, v72, v73);
                  CFDictionaryRemoveValue((CFMutableDictionaryRef)v96, v97);
                }
              }
            }
            uint64_t v98 = objc_msgSend_local(v41, v71, v72, v73);
            uint64_t v102 = objc_msgSend_address(v98, v99, v100, v101);

            uint64_t v106 = objc_msgSend_remote(v41, v103, v104, v105);
            uint64_t v188 = objc_msgSend_external(v106, v107, v108, v109);

            uint64_t v114 = objc_msgSend_state(v31, v110, v111, v112);
            if (v114 != 4)
            {
              objc_msgSend_setState_(v31, v113, 4, v115);
              uint64_t v116 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
              {
                double v117 = (&_IDSStunCandidatePairStateStrings)[v114];
                *(_DWORD *)double v236 = 136315650;
                *(void *)&v236[4] = v117;
                *(_WORD *)&v236[12] = 2080;
                *(void *)&v236[14] = off_1E944EAB0;
                *(_WORD *)&v236[22] = 2112;
                *(void *)&v236[24] = v31;
                _os_log_impl(&dword_19D9BE000, v116, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", v236, 0x20u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v184 = (uint64_t)off_1E944EAB0;
                  uint64_t v185 = (char *)v31;
                  uint64_t v183 = (&_IDSStunCandidatePairStateStrings)[v114];
                  _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
                  if (_IDSShouldLog())
                  {
                    uint64_t v184 = (uint64_t)off_1E944EAB0;
                    uint64_t v185 = (char *)v31;
                    uint64_t v183 = (&_IDSStunCandidatePairStateStrings)[v114];
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
                  }
                }
              }
              uint64_t v123 = objc_msgSend_linkID(v41, v118, v119, v120, v183);
              if (int)v123 < 1 || (objc_msgSend_isSharedQRSession(v41, v121, v122, v124))
              {
                long long v125 = objc_msgSend_candidatePairToken(v31, v121, v122, v124);
                objc_msgSend__notifyCandidatePairConnected_(self, v126, (uint64_t)v125, v127);
              }
              else
              {
                long long v129 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                {
                  long long v133 = objc_msgSend_candidatePairToken(v41, v130, v131, v132);
                  *(_DWORD *)double v236 = 67109378;
                  *(_DWORD *)&v236[4] = v123;
                  *(_WORD *)&v236[8] = 2112;
                  *(void *)&v236[10] = v133;
                  _os_log_impl(&dword_19D9BE000, v129, OS_LOG_TYPE_DEFAULT, "reuse linkID %d from original pair %@.", v236, 0x12u);
                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    objc_msgSend_candidatePairToken(v41, v134, v136, v135);
                    uint64_t v184 = v183 = (char *)v123;
                    _IDSLogTransport(@"GL", @"IDS", @"reuse linkID %d from original pair %@.");

                    if (_IDSShouldLog())
                    {
                      objc_msgSend_candidatePairToken(v41, v134, v137, v135, v123, v184);
                      uint64_t v184 = v183 = (char *)v123;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"reuse linkID %d from original pair %@.");
                    }
                  }
                }
                objc_msgSend_setLinkID_(v31, v134, v123, v135, v183);
                objc_msgSend_setLinkID_(v41, v138, 0, v139);
                if (!self->_linkIDToCandidatePairs)
                {
                  Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
                  self->_linkIDToCandidatePairs = Mutable;
                }
                id v143 = v31;
                if (v143)
                {
                  id v145 = self->_linkIDToCandidatePairs;
                  int v146 = (const void *)objc_msgSend_numberWithChar_(NSNumber, v142, v123, v144);
                  CFDictionarySetValue((CFMutableDictionaryRef)v145, v146, v143);
                }

                IDSQRSendInfoList_AddItemAtIndexFromCandidatePair((uint64_t)self->_sendInfoList, v143, v123);
              }
            }
            double v147 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
            __int16 v148 = v147;
            if (v147
              && IsSameSA(v102, (uint64_t)(v147 + 1))
              && IsSameSA(v188, (uint64_t)(v148 + 17))
              && *((unsigned __int16 *)v148 + 132) == v194)
            {
              objc_msgSend__updateDefaultCandidatePair_(self, v149, (uint64_t)v31, v150);
            }
            v195[0] = MEMORY[0x1E4F143A8];
            v195[1] = 3221225472;
            v195[2] = sub_19DA4C190;
            v195[3] = &unk_1E59741C0;
            id v151 = v41;
            uint64_t v198 = v102;
            uint64_t v199 = v188;
            id v196 = v151;
            uint64_t v197 = self;
            IDSTransportThreadAddBlockAfter(v195, 5.0);
            if (self->_linkIDForPlugin)
            {
              if (objc_msgSend_isSharedQRSession(v151, v152, v153, v154))
              {
                linkIDForPlugiuint64_t n = self->_linkIDForPlugin;
                if (linkIDForPlugin == objc_msgSend_linkID(v151, v152, v153, v154))
                {
                  self->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v31, v152, v153, v154);
                  double v156 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
                  {
                    int v160 = objc_msgSend_linkID(v151, v157, v158, v159);
                    int v164 = objc_msgSend_linkID(v31, v161, v162, v163);
                    *(_DWORD *)double v236 = 67109376;
                    *(_DWORD *)&v236[4] = v160;
                    *(_WORD *)&v236[8] = 1024;
                    *(_DWORD *)&v236[10] = v164;
                    _os_log_impl(&dword_19D9BE000, v156, OS_LOG_TYPE_DEFAULT, "linkID for Plugin is now changed from %d to %d", v236, 0xEu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      uint64_t v183 = (char *)objc_msgSend_linkID(v151, v152, v153, v154);
                      uint64_t v184 = (int)objc_msgSend_linkID(v31, v165, v166, v167);
                      _IDSLogTransport(@"GL", @"IDS", @"linkID for Plugin is now changed from %d to %d");
                      if (_IDSShouldLog())
                      {
                        uint64_t v183 = (char *)objc_msgSend_linkID(v151, v152, v153, v154, v183, v184);
                        uint64_t v184 = (int)objc_msgSend_linkID(v31, v168, v169, v170);
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"linkID for Plugin is now changed from %d to %d");
                      }
                    }
                  }
                }
              }
            }
            objc_msgSend__didReceiveRequestToPurgeRegistration(self, v152, v153, v154, v183);
            uint64_t v171 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v175 = objc_msgSend_candidatePairToken(v31, v172, v173, v174);
              *(_DWORD *)double v236 = 138412290;
              *(void *)&v236[4] = v175;
              _os_log_impl(&dword_19D9BE000, v171, OS_LOG_TYPE_DEFAULT, "realloc is done for candidatePair: %@.", v236, 0xCu);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                objc_msgSend_candidatePairToken(v31, v176, v177, v178);
                uint64_t v183 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogTransport(@"GL", @"IDS", @"realloc is done for candidatePair: %@.");

                if (_IDSShouldLog())
                {
                  objc_msgSend_candidatePairToken(v31, v179, v180, v181, v183);
                  uint64_t v183 = (char *)objc_claimAutoreleasedReturnValue();
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"realloc is done for candidatePair: %@.");
                }
              }
            }

            uint64_t v187 = v31;
LABEL_84:
            v193 |= objc_msgSend_pendingRealloc(v14, v42, v43, v44, v183, v184, v185, v186);
            continue;
          }
          long long v128 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)double v236 = 134218240;
            *(void *)&v236[4] = v70;
            *(_WORD *)&v236[12] = 2048;
            *(void *)&v236[14] = v62;
            _os_log_impl(&dword_19D9BE000, v128, OS_LOG_TYPE_DEFAULT, "reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue", v236, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v183 = (char *)v70;
              uint64_t v184 = v62;
              _IDSLogTransport(@"GL", @"IDS", @"reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue");
              if (_IDSShouldLog())
              {
                uint64_t v183 = (char *)v70;
                uint64_t v184 = v62;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"reallocNewCandidatePairRemoteAddress: %p, reallocOldCandidatePairRemoteAddress: %p, continue");
              }
            }
          }

          uint64_t v187 = v31;
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v200, *(double *)&v12, v243, 16);
      if (!v10)
      {

        if (v193) {
          goto LABEL_97;
        }
        goto LABEL_90;
      }
    }
  }

  uint64_t v187 = 0;
LABEL_90:
  if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_reallocChannelList, v194))
  {
    IDSSimpleUInt16List_RemoveItem((uint64_t)&self->_reallocChannelList, v194);
    double v182 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v236 = 67109120;
      *(_DWORD *)&v236[4] = __rev16(v194);
      _os_log_impl(&dword_19D9BE000, v182, OS_LOG_TYPE_DEFAULT, "remove channel number %04x from reallocChannelList due to realloc time out.", v236, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"remove channel number %04x from reallocChannelList due to realloc time out.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remove channel number %04x from reallocChannelList due to realloc time out.");
        }
      }
    }
  }
LABEL_97:
}

- (void)_processReallocChannelData:(id *)a3 channelNumber:(unsigned __int16)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6 arrivalTime:(double)a7
{
  uint64_t v8 = a4;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v11 = a5;
  id v12 = a6;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v13;
  long long v31 = v13;
  long long v28 = v13;
  long long v29 = v13;
  long long v26 = v13;
  long long v27 = v13;
  *(_OWORD *)__str = v13;
  long long v25 = v13;
  id v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    unsigned int v21 = __rev16(v8);
    __int16 v22 = 2080;
    double v23 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var19);
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "process channel data on realloc channel %04x from [%s].", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v17 = __rev16(v8);
      uint64_t v18 = v17;
      uint64_t v19 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var19);
      _IDSLogTransport(@"GL", @"IDS", @"process channel data on realloc channel %04x from [%s].");
      if (_IDSShouldLog())
      {
        uint64_t v18 = v17;
        uint64_t v19 = SAToIPPortString(__str, 0x80uLL, (uint64_t)&a3->var19);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"process channel data on realloc channel %04x from [%s].");
      }
    }
  }
  objc_msgSend__processDataOnReallocChannel_localAddress_remoteAddress_(self, v15, v8, v16, &a3->var18, &a3->var19, v18, v19);
}

- (void)_saveStunRequest:(id)a3 startTime:(double)a4 token:(id)a5
{
  id key = a3;
  id v8 = a5;
  id v12 = objc_msgSend_allKeys(self->_startTimeToStunReqID, v9, v10, v11);
  if ((objc_msgSend_containsObject_(v12, v13, (uint64_t)key, v14) & 1) == 0)
  {
    if (!self->_startTimeToStunReqID)
    {
      Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      startTimeToStunReqID = self->_startTimeToStunReqID;
      self->_startTimeToStunReqID = Mutable;
    }
    uint64_t v19 = objc_msgSend_numberWithDouble_(NSNumber, v15, v16, a4);
    if (v19) {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_startTimeToStunReqID, key, v19);
    }

    if (self->_tokenToStunReqID)
    {
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    id v20 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    tokenToStunReqID = self->_tokenToStunReqID;
    self->_tokenToStunReqID = v20;

    if (v8) {
LABEL_8:
    }
      CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToStunReqID, key, v8);
  }
LABEL_9:
}

- (void)_removeStunRequest:(id)a3
{
  startTimeToStunReqID = self->_startTimeToStunReqID;
  id v9 = a3;
  objc_msgSend_removeObjectForKey_(startTimeToStunReqID, v5, (uint64_t)v9, v6);
  objc_msgSend_removeObjectForKey_(self->_tokenToStunReqID, v7, (uint64_t)v9, v8);
}

- (double)_startTimeForStunRequest:(id)a3
{
  Value = 0;
  if (a3)
  {
    startTimeToStunReqID = self->_startTimeToStunReqID;
    if (startTimeToStunReqID) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)startTimeToStunReqID, a3);
    }
    uint64_t v3 = vars8;
  }
  objc_msgSend_doubleValue(Value, a2, (uint64_t)a3, v4);
  return result;
}

- (int64_t)_sendStunMessage:(id)a3 candidatePair:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  uint64_t v10 = objc_msgSend_local(v5, v7, v8, v9);
  uint64_t v14 = objc_msgSend_index(v10, v11, v12, v13);

  uint64_t v18 = objc_msgSend_local(v5, v15, v16, v17);
  uint64_t v22 = objc_msgSend_address(v18, v19, v20, v21);

  long long v26 = objc_msgSend_remote(v5, v23, v24, v25);
  uint64_t v30 = objc_msgSend_external(v26, v27, v28, v29);

  double v34 = objc_msgSend_local(v5, v31, v32, v33);
  uint64_t v38 = objc_msgSend_transport(v34, v35, v36, v37);

  int v42 = objc_msgSend_linkID(v5, v39, v40, v41);
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v5, v43, v44, v45)) {
    char v49 = objc_msgSend_delegatedLinkID(v5, v46, v47, v48);
  }
  else {
    char v49 = -1;
  }
  if (v42) {
    char v50 = v42;
  }
  else {
    char v50 = -1;
  }
  id v51 = objc_msgSend_candidatePairToken(v5, v46, v47, v48);
  long long v55 = objc_msgSend_local(v5, v52, v53, v54);
  objc_msgSend_mtu(v55, v56, v57, v58);
  HIBYTE(v63) = v49;
  LOBYTE(v63) = v50;
  int64_t v61 = objc_msgSend__sendStunMessage_sourceIfIndex_source_destination_stunTransport_token_linkID_delegatedLinkID_MTULimit_(self, v59, (uint64_t)v6, v60, v14, v22, v30, v38, v51, v63);

  return v61;
}

- (int64_t)_sendStunMessage:(id)a3 sourceIfIndex:(int)a4 source:(const sockaddr *)a5 destination:(sockaddr *)a6 stunTransport:(int64_t)a7 token:(id)a8 linkID:(char)a9 delegatedLinkID:(char)a10 MTULimit:(int)a11
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  id v16 = a3;
  id v66 = a8;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v89 = v17;
  long long v90 = v17;
  long long v87 = v17;
  long long v88 = v17;
  long long v85 = v17;
  long long v86 = v17;
  *(_OWORD *)__str = v17;
  long long v84 = v17;
  long long v81 = v17;
  long long v82 = v17;
  long long v79 = v17;
  long long v80 = v17;
  long long v77 = v17;
  long long v78 = v17;
  *(_OWORD *)uint64_t v75 = v17;
  long long v76 = v17;
  uint64_t v18 = _IDSLinkPacketBufferCreate();
  objc_msgSend_write_outputLength_remainingLength_internal_(v16, v19, (uint64_t)*v18, v20, v18 + 2, v18[1], 0);
  SAToIPPortString(__str, 0x80uLL, (uint64_t)a5);
  SAToIPPortString(v75, 0x80uLL, (uint64_t)a6);
  double v23 = objc_msgSend__getLink_stunTransport_(self, v21, *((unsigned __int8 *)v18 + 57), v22, a7);
  uint64_t v24 = (char *)v18[2];
  uint64_t v30 = (NSString *)&v24[objc_msgSend_headerOverhead(v23, v25, v26, v27)];
  if ((uint64_t)v30 <= a11)
  {
    uint64_t v63 = 0;
    int v64 = 1;
  }
  else
  {
    uint64_t v32 = objc_msgSend_GlobalLink(IDSFoundationLog, v28, v29, v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      uint64_t v68 = objc_msgSend_type(v16, v33, v34, v35);
      __int16 v69 = 2048;
      uint64_t v70 = v30;
      __int16 v71 = 1024;
      LODWORD(v72) = a11;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "_sendStunMessage: 0x%lx, bytesSent: %lu, greater than MTU %d", buf, 0x1Cu);
    }

    if (objc_msgSend_type(v16, v36, v37, v38) == 3813)
    {
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0xF58, (uint64_t)v18, v41);
      int64_t v42 = -2;
      goto LABEL_27;
    }
    if (objc_msgSend_type(v16, v39, v40, v41) == 3815 || objc_msgSend_type(v16, v28, v29, v31) == 3808)
    {
      int v64 = 0;
      uint64_t v63 = -2;
    }
    else
    {
      uint64_t v63 = 0;
      int v64 = 1;
    }
  }
  uint64_t v43 = objc_msgSend_GlobalLink(IDSFoundationLog, v28, v29, v31);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "_sendStunMessage: setting up packet buffer", buf, 2u);
  }

  *((unsigned char *)v18 + 45) = 1;
  *((_DWORD *)v18 + 12) = a4;
  memcpy(v18 + 7, a5, a5->sa_len);
  memcpy(v18 + 23, a6, a6->sa_len);
  int64_t v42 = objc_msgSend__sendPacketBuffer_stunTransport_token_linkID_delegatedLinkID_(self, v44, (uint64_t)v18, v45, a7, v66, a9, a10);
  if (v42 < 1)
  {
    double v60 = objc_msgSend_GlobalLink(IDSFoundationLog, v46, v47, v48);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      uint64_t v68 = (uint64_t)v16;
      __int16 v69 = 2112;
      uint64_t v70 = idsSessionID;
      __int16 v71 = 2080;
      uint64_t v72 = __str;
      __int16 v73 = 2080;
      double v74 = v75;
      _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "Failed to send stun message %@ for IDSSessionID: %@ and %s-%s", buf, 0x2Au);
    }
  }
  else
  {
    if ((objc_msgSend_type(v16, v46, v47, v48) & 0x110) == 0)
    {
      uint64_t v52 = objc_msgSend_requestID(v16, v49, v50, v51);
      objc_msgSend_startTime(v16, v53, v54, v55);
      objc_msgSend__saveStunRequest_startTime_token_(self, v56, (uint64_t)v52, v57, v66);
    }
    double v58 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      int v59 = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      uint64_t v68 = (uint64_t)v16;
      __int16 v69 = 2112;
      uint64_t v70 = v59;
      __int16 v71 = 2080;
      uint64_t v72 = __str;
      __int16 v73 = 2080;
      double v74 = v75;
      _os_log_impl(&dword_19D9BE000, v58, OS_LOG_TYPE_DEFAULT, "send stun message %@ for IDSSessionID: %@ and %s-%s.", buf, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"GL", @"send stun message %@ for IDSSessionID: %@ and %s-%s.");
    }
    if (!v64) {
      int64_t v42 = v63;
    }
  }
LABEL_27:

  return v42;
}

- (int64_t)_sendPacketBuffer:(id *)a3 stunTransport:(int64_t)a4 token:(id)a5 linkID:(char)a6 delegatedLinkID:(char)a7
{
  uint64_t v7 = a7;
  uint64_t v8 = a6;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v12 = a5;
  id v15 = objc_msgSend__getLink_stunTransport_(self, v13, a3->var18.ss_family, v14, a4);
  uint64_t v19 = v15;
  if ((int)v7 >= 1) {
    a3->var16 = 1;
  }
  int64_t var2 = a3->var2;
  int64_t v21 = objc_msgSend_headerOverhead(v15, v16, v17, v18) + var2;
  _IDSLinkPacketBufferRetain((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 3970, (uint64_t)a3);
  uint64_t v24 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v19, v22, (uint64_t)a3, v23, self->_deviceUniqueID, self->_cbuuid);
  if (v24)
  {
    unint64_t v28 = v24;
    uint64_t v29 = objc_msgSend_GlobalLink(IDSFoundationLog, v25, v26, v27);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      if (v28 > 0xF) {
        uint64_t v30 = "UnexpectedSendResult";
      }
      else {
        uint64_t v30 = _IDSLinkSendResultStrings[v28];
      }
      *(_DWORD *)buf = 134218242;
      int64_t v35 = v21;
      __int16 v36 = 2080;
      uint64_t v37 = v30;
      _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "Failed to send packet buffer (%ldB) (error:%s).", buf, 0x16u);
    }

    int64_t v21 = -1;
  }
  else
  {
    if (v21 >= 1)
    {
      double v31 = ids_monotonic_time();
      objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_packetBuffer_(self, v32, 0, v31, v21, 1, v8, v7, v12, 0, a4, a3);
    }
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0xF8C, (uint64_t)a3, v27);
  }

  return v21;
}

- (id)_createIDSContextBlobMaterialProto:(id)a3
{
  v42[1] = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  double v4 = objc_alloc_init(IDSQRProtoMaterialInfo);
  objc_msgSend_setMaterialType_(v4, v5, 7, v6);
  uint64_t v10 = objc_msgSend_copy(v3, v7, v8, v9);

  objc_msgSend_setMaterialContent_(v4, v11, (uint64_t)v10, v12);
  int v39 = 0;
  id v15 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v13, (uint64_t)&v39, v14, 4);
  objc_msgSend_setMaterialId_(v4, v16, (uint64_t)v15, v17);
  double v18 = objc_alloc_init(IDSQRProtoMaterial);
  objc_msgSend_setReceiverParticipantId_(v18, v19, 0, v20);
  v42[0] = v4;
  double v23 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v21, (uint64_t)v42, v22, 1);
  double v27 = objc_msgSend_mutableCopy(v23, v24, v25, v26);
  objc_msgSend_setMaterialInfos_(v18, v28, (uint64_t)v27, v29);

  double v33 = objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    double v41 = v18;
    _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "_createDataBlobMaterialProto: %@", buf, 0xCu);
  }

  uint64_t v37 = objc_msgSend_copy(v18, v34, v35, v36);
  return v37;
}

- (void)_sendAllocbindRequest:(id)a3 stunMessage:(id)a4 isRealloc:(BOOL)a5 inResponseToNoSessionState:(BOOL)a6
{
  BOOL v6 = a6;
  int v7 = a5;
  uint64_t v366 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (__CFString *)a3;
  id v11 = a4;
  if (v10)
  {
    if (self->_state >= 5 && !v6)
    {
      double v12 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        double v13 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(void *)double v357 = v10;
        *(_WORD *)&v357[8] = 2080;
        *(void *)&v357[10] = v13;
        _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, GL state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip allocbind request for %@, GL state [%s].");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip allocbind request for %@, GL state [%s].");
          }
        }
      }
      goto LABEL_35;
    }
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (id v16 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v10)) == 0)
    {
      double v33 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "send allocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send allocbind request failed due to invalid candidate pair.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send allocbind request failed due to invalid candidate pair.");
          }
        }
      }
      double v20 = 0;
      goto LABEL_34;
    }
    double v20 = v16;
    if (objc_msgSend_isSharedQRSession(v16, v17, v18, v19) && !self->_sharedSessionHasJoined)
    {
      double v60 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "skip allocbind request, session is not yet joined!", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip allocbind request, session is not yet joined!");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip allocbind request, session is not yet joined!");
          }
        }
      }
      goto LABEL_34;
    }
    unint64_t v24 = objc_msgSend_state(v20, v21, v22, v23);
    int v28 = objc_msgSend_pendingRealloc(v20, v25, v26, v27);
    if (v24 == 2)
    {
      double v32 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "in failed state, send allocbind request ignored", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"in failed state, send allocbind request ignored");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"in failed state, send allocbind request ignored");
          }
        }
      }
LABEL_34:

      goto LABEL_35;
    }
    int v34 = v28;
    int v35 = objc_msgSend_pendingNoSessionStateAllocbind(v20, v29, v30, v31);
    int v39 = v35;
    if (v24 < 3) {
      int v40 = 1;
    }
    else {
      int v40 = v7;
    }
    if ((v7 & (v34 ^ 1) & 1) != 0 || !v40 || (v6 & ~v7 & v35) != 0)
    {
      uint64_t v53 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = @"allocbind";
        double v55 = (&_IDSStunCandidatePairStateStrings)[v24];
        if (v7) {
          uint64_t v54 = @"realloc";
        }
        *(_DWORD *)buf = 138413826;
        *(void *)double v357 = v54;
        uint64_t v56 = @"YES";
        *(_WORD *)&v357[8] = 2112;
        *(void *)&v357[10] = v10;
        if (v34) {
          double v57 = @"YES";
        }
        else {
          double v57 = @"NO";
        }
        *(_WORD *)&unsigned char v357[18] = 2080;
        *(void *)&v357[20] = v55;
        if (v40) {
          double v58 = @"NO";
        }
        else {
          double v58 = @"YES";
        }
        __int16 v358 = 2112;
        if (v6) {
          int v59 = @"YES";
        }
        else {
          int v59 = @"NO";
        }
        v359 = v57;
        if (!v39) {
          uint64_t v56 = @"NO";
        }
        __int16 v360 = 2112;
        v361 = v58;
        __int16 v362 = 2112;
        uint64_t v363 = v59;
        __int16 v364 = 2112;
        v365 = v56;
        _os_log_impl(&dword_19D9BE000, v53, OS_LOG_TYPE_DEFAULT, "skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@", buf, 0x48u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, pendingInResponseToNoSessionState: %@");
          }
        }
      }
      goto LABEL_34;
    }
    unint64_t v340 = v24;
    if (!v11)
    {
      uint64_t v61 = 3808;
      if (v7) {
        uint64_t v61 = 3809;
      }
      uint64_t v342 = v61;
      int v64 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
      unint64_t v66 = 0x1E4F28000;
      if ((v7 & 1) == 0)
      {
        uint64_t v67 = objc_msgSend_sessionID(v20, v62, v63, v65);
        __int16 v71 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v68, v69, v70);
        id v346 = v64;
        HasCandidatePairForSameSharedSessiouint64_t n = GLUtilHasCandidatePairForSameSharedSession(v67, v71);

        BOOL v75 = HasCandidatePairForSameSharedSession == 0;
        int v64 = v346;
        if (v75) {
          unsigned int v76 = 0;
        }
        else {
          unsigned int v76 = 16;
        }
        if (v6) {
          objc_msgSend_numberWithUnsignedInt_(NSNumber, v73, v76 | 0x20, v74);
        }
        else {
        long long v77 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v73, v76, v74);
        }
        if (v77)
        {
          CFDictionarySetValue(v346, @"gl-option-additional-binding", v77);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB78E40();
        }

        objc_msgSend_sessionID(v20, v162, v163, v164);
        uint64_t v165 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(self->_QRServerDataBlob, v166, v167, v168))
        {
          uint64_t v171 = objc_msgSend_objectForKeyedSubscript_(self->_QRServerDataBlob, v169, (uint64_t)v165, v170);
          BOOL v172 = v171 == 0;

          if (v172)
          {
            double v176 = objc_msgSend_allKeys(self->_QRServerDataBlob, v173, v174, v175);
            objc_msgSend_firstObject(v176, v177, v178, v179);
            double v336 = (char *)objc_claimAutoreleasedReturnValue();

            uint64_t v183 = objc_msgSend_allValues(self->_QRServerDataBlob, v180, v181, v182);
            v338 = objc_msgSend_firstObject(v183, v184, v185, v186);

            QRServerDataBlob = self->_QRServerDataBlob;
            self->_QRServerDataBlob = 0;

            uint64_t v188 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)double v357 = objc_msgSend_length(v338, v189, v190, v191);
              *(_WORD *)&v357[4] = 2112;
              *(void *)&v357[6] = v336;
              *(_WORD *)&v357[14] = 2112;
              *(void *)&v357[16] = v165;
              _os_log_impl(&dword_19D9BE000, v188, OS_LOG_TYPE_DEFAULT, "Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@", buf, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                __int16 v333 = v336;
                v335 = v165;
                __int16 v331 = (char *)objc_msgSend_length(v338, v192, v193, v194);
                _IDSLogTransport(@"GL", @"IDS", @"Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@");
                if (_IDSShouldLog())
                {
                  uint64_t v198 = objc_msgSend_length(v338, v195, v196, v197, v331, v336, v165);
                  __int16 v333 = v336;
                  v335 = v165;
                  __int16 v331 = (char *)v198;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@");
                }
              }
            }
            id v199 = v338;
            if (v199)
            {
              CFDictionarySetValue(v346, @"gl-option-qr-server-data-blob", v199);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB78DB8();
            }
          }
        }

        unint64_t v66 = 0x1E4F28000uLL;
      }
      long long v233 = objc_msgSend_numberWithBool_(*(void **)(v66 + 3792), v62, self->_isLightweightParticipant, v65, v331, v333, v335);
      if (v233)
      {
        CFDictionarySetValue(v64, @"gl-option-is-lightweight-participant-key", v233);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB78D30();
      }

      long long v234 = StunUtilCreateMessage(v342, 0, v20, v64);
      v345 = v234;
      if (!v234)
      {
        long long v312 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)double v357 = v342;
          _os_log_impl(&dword_19D9BE000, v312, OS_LOG_TYPE_DEFAULT, "failed to create stun message (%04x).", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to create stun message (%04x).");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create stun message (%04x).");
            }
          }
        }

        id v11 = 0;
        goto LABEL_34;
      }
      long long v238 = objc_msgSend_requestID(v234, v235, v236, v237);
      objc_msgSend_addStunRequest_(v20, v239, (uint64_t)v238, v240);

      uint64_t v244 = objc_msgSend_encKey(v20, v241, v242, v243);
      objc_msgSend_initAES128CTR_(v345, v245, (uint64_t)v244, v246);

LABEL_150:
      uint64_t v247 = objc_msgSend_GlobalLink(IDSFoundationLog, v49, v50, v52);
      if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
      {
        if (v7) {
          id v251 = "realloc";
        }
        else {
          id v251 = "allocbind";
        }
        idsSessionID = self->_idsSessionID;
        objc_msgSend_sessionID(v20, v248, v249, v250);
        double v253 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136316162;
        *(void *)double v357 = v251;
        *(_WORD *)&v357[8] = 2112;
        *(void *)&v357[10] = v345;
        *(_WORD *)&unsigned char v357[18] = 2112;
        *(void *)&v357[20] = idsSessionID;
        __int16 v358 = 2112;
        v359 = v253;
        __int16 v360 = 2112;
        v361 = v10;
        _os_log_impl(&dword_19D9BE000, v247, OS_LOG_TYPE_DEFAULT, "Send %s request %@ for IDSSessionID: %@ QRSessionID: %@ token: %@", buf, 0x34u);
      }
      double v257 = objc_msgSend_local(v20, v254, v255, v256);
      uint64_t v339 = objc_msgSend_transport(v257, v258, v259, v260);

      metricsCollector = self->_metricsCollector;
      unint64_t v344 = v339 - 3;
      if (v339 == 3) {
        objc_msgSend_tcpAllocbindRequest(metricsCollector, v261, v262, v263);
      }
      else {
        objc_msgSend_stunAllocbindRequest(metricsCollector, v261, v262, v263);
      }
      __int16 v268 = objc_msgSend_linkMetrics(v20, v265, v266, v267);
      objc_msgSend_sendAllocbindRequest(v268, v269, v270, v271);

      objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v272, (uint64_t)v20, v273);
      int v274 = IMGetDomainBoolForKey();
      int v275 = IMGetDomainBoolForKey();
      int v279 = v275;
      BOOL v280 = (v274 & 1) != 0 || self->_forceTCPFallbackOnWiFi;
      BOOL v281 = (v275 & 1) != 0 || self->_forceTCPFallbackOnCell;
      BOOL v337 = v281;
      long long v282 = objc_msgSend_GlobalLink(IDSFoundationLog, v276, v277, v278);
      if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
      {
        long long v283 = @"NO";
        if (v274) {
          long long v284 = @"YES";
        }
        else {
          long long v284 = @"NO";
        }
        BOOL forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
        if (self->_forceTCPFallbackOnWiFi) {
          long long v286 = @"YES";
        }
        else {
          long long v286 = @"NO";
        }
        *(_DWORD *)buf = 138413058;
        *(void *)double v357 = v284;
        if (v279) {
          long long v287 = @"YES";
        }
        else {
          long long v287 = @"NO";
        }
        *(_WORD *)&v357[8] = 2112;
        *(void *)&v357[10] = v286;
        if (forceTCPFallbackOnCell) {
          long long v283 = @"YES";
        }
        *(_WORD *)&unsigned char v357[18] = 2112;
        *(void *)&v357[20] = v287;
        __int16 v358 = 2112;
        v359 = v283;
        _os_log_impl(&dword_19D9BE000, v282, OS_LOG_TYPE_DEFAULT, "sendAllocbindRequest forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
          buf,
          0x2Au);
      }

      long long v291 = objc_msgSend_local(v20, v288, v289, v290);
      int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v291, v292, v293, v294);

      int v299 = !v280;
      if (v344 < 0xFFFFFFFFFFFFFFFELL) {
        int v299 = 1;
      }
      if ((v299 | isCellularStunCandidate))
      {
        if (!v337 || v344 < 0xFFFFFFFFFFFFFFFELL || ((isCellularStunCandidate ^ 1) & 1) != 0)
        {
          BOOL v313 = v11 != 0;
          char v314 = objc_msgSend__sendStunMessage_candidatePair_(self, v296, (uint64_t)v345, v298, v20) != -2 || v313;
          if (v314) {
            goto LABEL_189;
          }
          long long v315 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT))
          {
            long long v319 = objc_msgSend_candidatePairToken(v20, v316, v317, v318);
            *(_DWORD *)buf = 138412546;
            *(void *)double v357 = v345;
            *(_WORD *)&v357[8] = 2112;
            *(void *)&v357[10] = v319;
            _os_log_impl(&dword_19D9BE000, v315, OS_LOG_TYPE_DEFAULT, "warning: allocbind request %@ for %@ exceeds MTU size", buf, 0x16u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v20, v320, v321, v322);
              __int16 v331 = (char *)v345;
              __int16 v333 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(@"GL", @"IDS", @"warning: allocbind request %@ for %@ exceeds MTU size");

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v20, v323, v324, v325, v345, v333);
                __int16 v331 = (char *)v345;
                __int16 v333 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, @"IDSFoundation", @"GL", @"warning: allocbind request %@ for %@ exceeds MTU size");
              }
            }
          }
          long long v300 = GLUCreateQRStunMessageEvent(v345, 36, v20, self->_timeBase, 0.0);
          if (v300)
          {
            id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
            char v327 = objc_opt_respondsToSelector();

            if (v327)
            {
              id v328 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v328, v329, (uint64_t)self, v330, v300);
            }
          }
        }
        else
        {
          long long v300 = objc_msgSend_GlobalLink(IDSFoundationLog, v296, v297, v298);
          if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT))
          {
            long long v301 = (&_IDSStunTransportStrings)[v339];
            *(_DWORD *)buf = 136315138;
            *(void *)double v357 = v301;
            long long v302 = "forceTCPFallbackOnCell is set, skip STUN message %s";
LABEL_187:
            _os_log_impl(&dword_19D9BE000, v300, OS_LOG_TYPE_DEFAULT, v302, buf, 0xCu);
          }
        }
      }
      else
      {
        long long v300 = objc_msgSend_GlobalLink(IDSFoundationLog, v296, v297, v298);
        if (os_log_type_enabled(v300, OS_LOG_TYPE_DEFAULT))
        {
          long long v303 = (&_IDSStunTransportStrings)[v339];
          *(_DWORD *)buf = 136315138;
          *(void *)double v357 = v303;
          long long v302 = "forceTCPFallbackOnWiFi is set, skip STUN message %s";
          goto LABEL_187;
        }
      }

LABEL_189:
      if (!v340)
      {
        objc_msgSend_setState_(v20, v304, 1, v305);
        long long v306 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)double v357 = _IDSStunCandidatePairStateStrings;
          *(_WORD *)&v357[8] = 2080;
          *(void *)&v357[10] = off_1E944EA98;
          *(_WORD *)&unsigned char v357[18] = 2112;
          *(void *)&v357[20] = v10;
          _os_log_impl(&dword_19D9BE000, v306, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            __int16 v333 = off_1E944EA98;
            v335 = v10;
            __int16 v331 = _IDSStunCandidatePairStateStrings;
            _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
            if (_IDSShouldLog())
            {
              __int16 v333 = off_1E944EA98;
              v335 = v10;
              __int16 v331 = _IDSStunCandidatePairStateStrings;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
            }
          }
        }
        if ((objc_msgSend_isSelfQRSession(v20, v307, v308, v309, v331, v333, v335) & 1) == 0) {
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v310, (uint64_t)v20, v311, 2);
        }
      }
      if (v344 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v348[0] = MEMORY[0x1E4F143A8];
        v348[1] = 3221225472;
        v348[2] = sub_19DA4EBF8;
        v348[3] = &unk_1E59741E8;
        v348[4] = self;
        v349 = v10;
        id v11 = v345;
        id v350 = v11;
        char v351 = v7;
        BOOL v352 = v6;
        IDSTransportThreadAddBlockAfter(v348, 1.0);
      }
      else
      {
        id v11 = v345;
      }
      goto LABEL_34;
    }
    uint64_t v41 = objc_msgSend_type(v11, v36, v37, v38);
    double v42 = ids_monotonic_time();
    objc_msgSend_startTime(v11, v43, v44, v42);
    double v46 = v42 - v45;
    uint64_t Type = objc_msgSend_allocateType(v20, v47, v48, v45);
    double v52 = 10.0;
    if (Type == 2) {
      double v52 = GLUtilNATCheckTimeout(10.0, 2, v49, v50);
    }
    if (v46 < v52)
    {
      v345 = v11;
      goto LABEL_150;
    }
    objc_msgSend_setState_(v20, v49, 2, v52);
    long long v81 = objc_msgSend_requestID(v11, v78, v79, v80);
    objc_msgSend__removeStunRequest_(self, v82, (uint64_t)v81, v83);

    long long v87 = objc_msgSend_requestID(v11, v84, v85, v86);
    objc_msgSend_removeStunRequest_(v20, v88, (uint64_t)v87, v89);

    long long v90 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v91 = (&_IDSStunCandidatePairStateStrings)[v24];
      *(_DWORD *)buf = 136315650;
      *(void *)double v357 = v91;
      *(_WORD *)&v357[8] = 2080;
      *(void *)&v357[10] = off_1E944EAA0;
      *(_WORD *)&unsigned char v357[18] = 2112;
      *(void *)&v357[20] = v10;
      _os_log_impl(&dword_19D9BE000, v90, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        __int16 v333 = off_1E944EAA0;
        v335 = v10;
        __int16 v331 = (&_IDSStunCandidatePairStateStrings)[v24];
        _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
        if (_IDSShouldLog())
        {
          __int16 v333 = off_1E944EAA0;
          v335 = v10;
          __int16 v331 = (&_IDSStunCandidatePairStateStrings)[v24];
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
        }
      }
    }
    int hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v92, 3, v93, 4, 0, 0, v331, v333, v335);
    if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc | objc_msgSend__hasConnectingRelayCandidatePair(self, v95, v96, v97)))
    {
LABEL_124:
      if (Type == 2)
      {
        objc_msgSend_startTime(v11, v98, v99, v100);
        float v205 = (float)((v42 - v204) * 1000.0);
        GLUtilReportAWDClientTimerEvent(308, 23, v20, self->_enableSKE, self->_isInitiator, v205);
        __int16 v206 = GLUCreateQRClientTimeEvent(308, 23, v20, self->_timeBase, v205);
        id v207 = objc_loadWeakRetained((id *)&self->_delegate);
        char v208 = objc_opt_respondsToSelector();

        if (v208)
        {
          id v212 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v212, v213, (uint64_t)self, v214, v206);
        }
        if (objc_msgSend__isExtIPDiscoveryDone(self, v209, v210, v211))
        {
          long long v217 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v217, OS_LOG_TYPE_DEFAULT, "discard self allocate candidate pairs", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"discard self allocate candidate pairs");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"discard self allocate candidate pairs");
              }
            }
          }
          objc_msgSend__discardSelfAllocateCandidatePairs(self, v218, v219, v220);
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v215, 0, v216);
      }
      else
      {
        long long v221 = objc_msgSend_linkMetrics(v20, v98, v99, v100);
        objc_msgSend_allocBindRequestTimeOut(v221, v222, v223, v224);

        GLUtilReportAWDStunMessageEvent(v11, 7, v20, 0.0);
        __int16 v206 = GLUCreateQRStunMessageEvent(v11, 7, v20, 0, 0.0);
        if (v206)
        {
          id v225 = objc_loadWeakRetained((id *)&self->_delegate);
          char v226 = objc_opt_respondsToSelector();

          if (v226)
          {
            id v227 = objc_loadWeakRetained((id *)&self->_delegate);
            objc_msgSend_link_didAddQREvent_(v227, v228, (uint64_t)self, v229, v206);
          }
        }
      }

      objc_msgSend__reportAWDAllocateTime(self, v230, v231, v232);
      goto LABEL_34;
    }
    uint64_t v347 = _Block_copy(self->_connectReadyHandler);
    uint64_t v104 = objc_msgSend_GlobalLink(IDSFoundationLog, v101, v102, v103);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      double v105 = self->_idsSessionID;
      *(_DWORD *)buf = 138412802;
      *(void *)double v357 = v105;
      *(_WORD *)&v357[8] = 2048;
      *(void *)&v357[10] = v41;
      *(_WORD *)&unsigned char v357[18] = 2048;
      *(void *)&v357[20] = 0x4024000000000000;
      _os_log_impl(&dword_19D9BE000, v104, OS_LOG_TYPE_DEFAULT, "Connect to QR server for IDSSessionID: %@, stun message type %ld timed out after %lf seconds.", buf, 0x20u);
    }

    v343 = objc_msgSend_local(v20, v106, v107, v108);
    double v112 = objc_msgSend_sessionID(v20, v109, v110, v111);
    uint64_t AllocBindErrorCodeForSessionID = objc_msgSend_getAllocBindErrorCodeForSessionID_(self, v113, (uint64_t)v112, v114);

    uint64_t v116 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      double v120 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v117, v118, v119)];
      *(_DWORD *)buf = 136315394;
      *(void *)double v357 = v120;
      *(_WORD *)&v357[8] = 1024;
      *(_DWORD *)&v357[10] = 7;
      _os_log_impl(&dword_19D9BE000, v116, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        unint64_t v332 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v121, v122, v123)];
        uint64_t v334 = 7;
        _IDSLogTransport(@"GL", @"IDS", @"report session setup failure (%s, %d).");
        if (_IDSShouldLog())
        {
          unint64_t v332 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v343, v124, v125, v126, v332, 7)];
          uint64_t v334 = 7;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"report session setup failure (%s, %d).");
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 7, v20, self->_enableSKE, self->_isInitiator, 0.0);
    uint64_t v341 = GLUCreateQRClientTimeEvent(305, AllocBindErrorCodeForSessionID, v20, self->_timeBase, 0.0);
    id v127 = objc_loadWeakRetained((id *)&self->_delegate);
    char v128 = objc_opt_respondsToSelector();

    if (v128)
    {
      id v132 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v132, v133, (uint64_t)self, v134, v341);
    }
    double v135 = objc_msgSend_GlobalLink(IDSFoundationLog, v129, v130, v131, v332, v334);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v139 = objc_msgSend_participantID(v20, v136, v137, v138);
      id v143 = objc_msgSend_relaySessionToken(v20, v140, v141, v142);
      int v146 = objc_msgSend_base64EncodedStringWithOptions_(v143, v144, 0, v145);
      *(_DWORD *)buf = 134218242;
      *(void *)double v357 = v139;
      *(_WORD *)&v357[8] = 2112;
      *(void *)&v357[10] = v146;
      _os_log_impl(&dword_19D9BE000, v135, OS_LOG_TYPE_DEFAULT, "failed participant:[%16llX], token:[%@]", buf, 0x16u);
    }
    if (v347)
    {
      uint64_t v149 = (void *)MEMORY[0x1E4F28C58];
      double v150 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v147, @"Allocbind timed out.", v148, *MEMORY[0x1E4F28568]);
      uint64_t v153 = objc_msgSend_errorWithDomain_code_userInfo_(v149, v151, @"GlobalLink", v152, 7, v150);

      double v154 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19DA4EBE4;
      block[3] = &unk_1E5970A78;
      id v355 = v347;
      id v155 = v153;
      id v354 = v155;
      dispatch_async(v154, block);

      if (self->_clientType == 6)
      {
        double v159 = objc_msgSend_GlobalLink(IDSFoundationLog, v156, v157, v158);
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v159, OS_LOG_TYPE_DEFAULT, "Stun Allocbind timed out. - gathering ABC with packet capture", buf, 2u);
        }

        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(self, v160, @"IDSQuickRelayShared", v161, @"FailedToConnect", @"StunAllocbindTimedout", 15);
      }
    }
    else
    {
      id v200 = objc_loadWeakRetained((id *)&self->_delegate);
      char v201 = objc_opt_respondsToSelector();

      if ((v201 & 1) == 0)
      {
LABEL_123:

        goto LABEL_124;
      }
      id v155 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v155, v202, (uint64_t)self, v203, 0, self->_cbuuid);
    }

    goto LABEL_123;
  }
  double v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "failed to send allocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to send allocbind request due to invalid token.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send allocbind request due to invalid token.");
      }
    }
  }
LABEL_35:
}

- (void)_sendUnallocbindRequestTimeOut:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5
{
  uint64_t v5 = a5;
  id v8 = a3;
  id v9 = a4;
  if (v8
    && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
    && (id v11 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v8)) != 0)
  {
    id v15 = v11;
    if (objc_msgSend_state(v11, v12, v13, v14) != 6)
    {
      id v16 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "_sendUnallocbindRequestTimeOut: unallocbind request timed out.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"_sendUnallocbindRequestTimeOut: unallocbind request timed out.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"_sendUnallocbindRequestTimeOut: unallocbind request timed out.");
          }
        }
      }
      double v20 = objc_msgSend_requestID(v9, v17, v18, v19);
      objc_msgSend__removeStunRequest_(self, v21, (uint64_t)v20, v22);

      uint64_t v26 = objc_msgSend_requestID(v9, v23, v24, v25);
      if (v26)
      {
        unallocbindRequestToReasouint64_t n = self->_unallocbindRequestToReason;

        if (unallocbindRequestToReason)
        {
          double v31 = self->_unallocbindRequestToReason;
          double v32 = objc_msgSend_requestID(v9, v27, v30, v28);
          CFDictionaryRemoveValue((CFMutableDictionaryRef)v31, v32);
        }
      }
      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v27, (uint64_t)v15, v28, v5);
      if (self->_isUPlusOneSession) {
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_withReason_(self, v33, (uint64_t)v15, v34, v5);
      }
      char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v33, 3, v34, 4, 0, 0);
      char v38 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
      if (self->_state == 5)
      {
        objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v36, 0, v37, 0);
        if ((v38 & 1) == 0) {
          objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v39, 8, v40, v5);
        }
      }
      else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0 {
             && objc_msgSend_isEqualToString_(self->_cbuuid, v36, @"12345678-7654-DADA-DADA-DADADADADADA", v37))
      }
      {
        double v42 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)double v51 = 0;
          _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", v51, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"no more underlying link is connected.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"no more underlying link is connected.");
            }
          }
        }
        objc_msgSend_disconnectWithCompletionHandler_isReinitiating_(self, v43, 0, v44, 0);
      }
      GLUtilReportAWDStunMessageEvent(v9, 8, v15, 0.0);
      double v45 = GLUCreateQRStunMessageEvent(v9, 8, v15, 0, 0.0);
      if (v45)
      {
        id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        char v47 = objc_opt_respondsToSelector();

        if (v47)
        {
          id v48 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v48, v49, (uint64_t)self, v50, v45);
        }
      }
    }
  }
  else
  {
    uint64_t v41 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "_sendUnallocbindRequestTimeOut: invalid candidate pair.", v53, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_sendUnallocbindRequestTimeOut: invalid candidate pair.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_sendUnallocbindRequestTimeOut: invalid candidate pair.");
        }
      }
    }
    id v15 = 0;
  }
}

- (void)_sendUnallocbindRequest:(id)a3 stunMessage:(id)a4 reason:(unsigned __int8)a5
{
  uint64_t v5 = a5;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  if (self->_state >= 6)
  {
    uint64_t v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      uint64_t v98 = v11;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "skip unallocbind request, GL state (%s).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request, GL state (%s).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request, GL state (%s).");
        }
      }
    }
    goto LABEL_34;
  }
  if (v8)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (uint64_t v13 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v8)) == 0)
    {
      double v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "send unallocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send unallocbind request failed due to invalid candidate pair.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send unallocbind request failed due to invalid candidate pair.");
          }
        }
      }
      double v17 = 0;
      goto LABEL_27;
    }
    double v17 = v13;
    if ((objc_msgSend_isRelayStunCandidatePair(v13, v14, v15, v16) & 1) == 0)
    {
      uint64_t v30 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v98 = (char *)v8;
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, not over relay.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request for %@, not over relay.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request for %@, not over relay.");
          }
        }
      }
      goto LABEL_27;
    }
    unint64_t v21 = objc_msgSend_state(v17, v18, v19, v20);
    unint64_t v25 = v21;
    if (v21 <= 6 && ((1 << v21) & 0x47) != 0)
    {
      uint64_t v26 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = (&_IDSStunCandidatePairStateStrings)[v25];
        *(_DWORD *)buf = 138412546;
        uint64_t v98 = (char *)v8;
        __int16 v99 = 2080;
        double v100 = v27;
        _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request for %@, state [%s].");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request for %@, state [%s].");
          }
        }
      }
      goto LABEL_27;
    }
    double v33 = objc_msgSend_sessionID(v17, v22, v23, v24);
    if (!v33)
    {
      char v47 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid relay-session-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to send unallocbind request due to invalid relay-session-id.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send unallocbind request due to invalid relay-session-id.");
          }
        }
      }
      goto LABEL_91;
    }
    objc_msgSend_stopSessionConnectedTimer(v17, v31, v32, v34);
    objc_msgSend_stopSessionConvergenceTimer(v17, v35, v36, v37);
    objc_msgSend_stopSessionGoAwayTimer(v17, v38, v39, v40);
    if (v9)
    {
      double v41 = ids_monotonic_time();
      objc_msgSend_startTime(v9, v42, v43, v41);
      double v46 = v41 - v45;
      if (v46 > 3.0)
      {
        objc_msgSend__sendUnallocbindRequestTimeOut_stunMessage_reason_(self, v44, (uint64_t)v8, v46, v9, v5);
LABEL_91:

LABEL_27:
        goto LABEL_34;
      }
    }
    else
    {
      StunUtilCreateMessage(3810, 0, v17, 0);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        double v83 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v83, OS_LOG_TYPE_DEFAULT, "failed to create unallocbind message.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to create unallocbind message.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create unallocbind message.");
            }
          }
        }
        id v9 = 0;
        goto LABEL_91;
      }
    }
    id v48 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v98 = (char *)v9;
      __int16 v99 = 2112;
      double v100 = (char *)v8;
      _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "send unallocbind request %@ for %@.", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v84 = v9;
        id v86 = v8;
        _IDSLogTransport(@"GL", @"IDS", @"send unallocbind request %@ for %@.");
        if (_IDSShouldLog())
        {
          id v84 = v9;
          id v86 = v8;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"send unallocbind request %@ for %@.");
        }
      }
    }
    uint64_t v52 = objc_msgSend__sendStunMessage_candidatePair_(self, v49, (uint64_t)v9, v50, v17, v84, v86);
    if (v25 != 5)
    {
      objc_msgSend_setState_(v17, v51, 5, v53);
      uint64_t v54 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        double v55 = (&_IDSStunCandidatePairStateStrings)[v25];
        *(_DWORD *)buf = 136315650;
        uint64_t v98 = v55;
        __int16 v99 = 2080;
        double v100 = off_1E944EAB8;
        __int16 v101 = 2112;
        id v102 = v8;
        _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          long long v87 = off_1E944EAB8;
          id v88 = v8;
          uint64_t v85 = (&_IDSStunCandidatePairStateStrings)[v25];
          _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
          if (_IDSShouldLog())
          {
            long long v87 = off_1E944EAB8;
            id v88 = v8;
            uint64_t v85 = (&_IDSStunCandidatePairStateStrings)[v25];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
          }
        }
      }
    }
    if (v52 == -1
      && ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v51, 3, v53, 4, 0, 0), self->_state != 5)? (char v57 = 1): (char v57 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc), (v57 & 1) == 0))
    {
      objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v51, 24, v53, v5);
    }
    else
    {
      if (!self->_unallocbindRequestToReason)
      {
        Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        unallocbindRequestToReasouint64_t n = self->_unallocbindRequestToReason;
        self->_unallocbindRequestToReasouint64_t n = Mutable;
      }
      uint64_t v62 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v51, v5, v53, v85, v87, v88);
      if (v62)
      {
        int v64 = self->_unallocbindRequestToReason;
        double v65 = objc_msgSend_requestID(v9, v60, v61, v63);
        CFDictionarySetValue((CFMutableDictionaryRef)v64, v65, v62);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB78EC8(v9, v66, v67, v68);
      }

      uint64_t v72 = objc_msgSend_local(v17, v69, v70, v71);
      uint64_t v76 = objc_msgSend_transport(v72, v73, v74, v75);

      if ((unint64_t)(v76 - 1) > 1)
      {
        if ((unint64_t)(v76 - 3) <= 1)
        {
          v89[0] = MEMORY[0x1E4F143A8];
          v89[1] = 3221225472;
          v89[2] = sub_19DA4FC70;
          v89[3] = &unk_1E5974210;
          v89[4] = self;
          id v90 = v8;
          id v9 = v9;
          id v91 = v9;
          char v92 = v5;
          IDSTransportThreadAddBlockAfter(v89, 3.0);
        }
      }
      else if (v5 != 5 {
             || (objc_msgSend_testOptions(v17, v77, v78, v79) & 8) == 0
      }
             || objc_msgSend_testRequestedErrorCode(v17, v80, v81, v82) != 601)
      {
        v93[0] = MEMORY[0x1E4F143A8];
        v93[1] = 3221225472;
        v93[2] = sub_19DA4FC5C;
        v93[3] = &unk_1E5974210;
        v93[4] = self;
        id v94 = v8;
        id v9 = v9;
        id v95 = v9;
        char v96 = v5;
        IDSTransportThreadAddBlockAfter(v93, 0.5);
      }
    }
    goto LABEL_91;
  }
  double v29 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to send unallocbind request due to invalid token.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send unallocbind request due to invalid token.");
      }
    }
  }
LABEL_34:
}

- (int)_getExpensiveLinkFlagsForCandidatePair:(id)a3
{
  id v4 = a3;
  id v8 = objc_msgSend_local(v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_index(v8, v9, v10, v11);
  int isInterfaceExpensiveWithInterfaceIndex = objc_msgSend__isInterfaceExpensiveWithInterfaceIndex_(self, v13, v12, v14);

  if (self->_islocalCellAttributeInexpensive)
  {
    uint64_t v19 = objc_msgSend_local(v4, v16, v17, v18);
    int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v19, v20, v21, v22);

    if (isCellularStunCandidate) {
      int isInterfaceExpensiveWithInterfaceIndex = 0;
    }
  }

  return isInterfaceExpensiveWithInterfaceIndex;
}

- (id)_createCommandData:(int64_t)a3 options:(id)a4 candidatePair:(id)a5
{
  uint64_t v389 = *MEMORY[0x1E4F143B8];
  id v377 = a4;
  id v379 = a5;
  memset(__b, 170, sizeof(__b));
  int v385 = 0;
  int64_t v378 = a3;
  if (a3 == 1 && self->_remoteGlobalLinkVersion > 0) {
    goto LABEL_16;
  }
  if (self->_remoteGlobalLinkVersion)
  {
    int v11 = 0;
    if (a3 != 1 || !self->_isInitiator) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  BOOL v12 = self->_isInitiator && a3 == 1;
  BOOL v13 = !self->_isInitiator && a3 == 32769;
  if (v13 || v12)
  {
LABEL_16:
    int v11 = 1;
    goto LABEL_17;
  }
  int v11 = 0;
LABEL_17:
  uint64_t v380 = self;
  switch(a3)
  {
    case 1:
      goto LABEL_22;
    case 2:
      goto LABEL_35;
    case 3:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v15 = NSNumber;
      uint64_t v19 = objc_msgSend_hbCounter(v379, v16, v17, v18);
      double v22 = objc_msgSend_numberWithUnsignedShort_(v15, v20, v19, v21);
      if (v22)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-counter", v22);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB795C4();
      }

      objc_msgSend_objectForKey_(v377, v159, @"gl-attr-active-probing-link-id", v160);
      id v55 = (id)objc_claimAutoreleasedReturnValue();
      int v164 = objc_msgSend_charValue(v55, v161, v162, v163);
      int isActive = objc_msgSend_isActive(v379, v165, v166, v167);
      if (v164 > 0) {
        int v169 = 1;
      }
      else {
        int v169 = isActive;
      }
      if (v169 == 1)
      {
        *(void *)&uint8_t buf[4] = 0;
        double v170 = ids_monotonic_time();
        unint64_t v171 = ntpTime32(v170);
        *(_DWORD *)buf = bswap32(v171);
        uint64_t v174 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v172, (uint64_t)buf, v173, 12);
        if (v174)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-rttreport", v174);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB796D4();
        }

        if (v164 > 0)
        {
          if (!v55
            || (CFDictionaryRef linkIDToRequestTimeStampAndRTT = (const __CFDictionary *)v380->_linkIDToRequestTimeStampAndRTT) == 0
            || (id v201 = (id)CFDictionaryGetValue(linkIDToRequestTimeStampAndRTT, v55)) == 0)
          {
            id v201 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          }
          if (objc_msgSend_count(v201, v199, v200, v202) == 250) {
            objc_msgSend_removeObjectAtIndex_(v201, v203, 0, v204);
          }
          float v205 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v203, v171, v204);
          objc_msgSend_addObject_(v201, v206, (uint64_t)v205, v207);

          if (!v380->_linkIDToRequestTimeStampAndRTT)
          {
            CFMutableDictionaryRef v208 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v209 = v380->_linkIDToRequestTimeStampAndRTT;
            v380->_CFDictionaryRef linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)v208;
          }
          if (v201) {
            CFDictionarySetValue((CFMutableDictionaryRef)v380->_linkIDToRequestTimeStampAndRTT, v55, v201);
          }
        }
      }
      goto LABEL_261;
    case 4:
      objc_msgSend__filterNonSlicedLocalCandidates_(self, v8, (uint64_t)self->_localCandidateList, v10);
      id v55 = (id)objc_claimAutoreleasedReturnValue();
      int v59 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v56, v57, v58);
      uint64_t v62 = objc_msgSend_dataFromCandidates_token_remoteDeviceVersion_(v59, v60, (uint64_t)v55, v61, self->_cbuuid, self->_remoteDeviceVersion);

      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      id v63 = v62;
      if (v63)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-conndata", v63);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB7964C();
      }

      uint64_t v177 = objc_msgSend_numberWithInt_(NSNumber, v175, self->_localConnDataCounter, v176);
      if (v177)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-counter", v177);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB795C4();
      }

      uint64_t v181 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v178, v179, v180);
      BOOL v184 = objc_msgSend_deliveryStatus_(v181, v182, (uint64_t)self->_cbuuid, v183) == 0;

      if (v184)
      {
        uint64_t v188 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v185, v186, v187);
        objc_msgSend_setDeliveryStatus_status_(v188, v189, (uint64_t)self->_cbuuid, v190, 1);
      }
      goto LABEL_261;
    case 5:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v66 = objc_msgSend_numberWithInt_(NSNumber, v64, self->_nominateCount, v65);
      id v55 = v66;
      if (v66)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-counter", v66);
        goto LABEL_261;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_261;
      }
      sub_19DB795C4();
      goto LABEL_169;
    case 6:
      id v55 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v381 = 0u;
      long long v382 = 0u;
      long long v383 = 0u;
      long long v384 = 0u;
      uint64_t v69 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v67, v68, 0.0);
      uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v70, (uint64_t)&v381, v71, v387, 16);
      if (v74)
      {
        uint64_t v75 = *(void *)v382;
        uint64_t v76 = 138412290;
        do
        {
          for (uint64_t i = 0; i != v74; ++i)
          {
            if (*(void *)v382 != v75) {
              objc_enumerationMutation(v69);
            }
            uint64_t v78 = *(NSData **)(*((void *)&v381 + 1) + 8 * i);
            if (objc_msgSend_isSharedQRSession(v78, v72, v73, *(double *)&v76, v374)
              && objc_msgSend_state(v78, v72, v73, *(double *)&v76) == 4)
            {
              unsigned __int16 ExpensiveLinkFlagsForCandidatePair = objc_msgSend__getExpensiveLinkFlagsForCandidatePair_(v380, v72, (uint64_t)v78, *(double *)&v76);
              double v83 = objc_msgSend_local(v78, v80, v81, v82);
              uint64_t v87 = objc_msgSend_index(v83, v84, v85, v86);
              int isInterfaceConstrainedWithInterfaceIndex = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(v380, v88, v87, v89);

              if (isInterfaceConstrainedWithInterfaceIndex) {
                unsigned __int16 v94 = ExpensiveLinkFlagsForCandidatePair | 2;
              }
              else {
                unsigned __int16 v94 = ExpensiveLinkFlagsForCandidatePair;
              }
              id v95 = objc_msgSend_local(v78, v91, v92, v93);
              uint64_t v99 = objc_msgSend_index(v95, v96, v97, v98);
              int isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v380, v100, v99, v101);

              if (isInterfaceDelegatedWithInterfaceIndex) {
                v94 |= 4u;
              }
              uint64_t v106 = objc_msgSend_local(v78, v103, v104, v105);
              int v110 = objc_msgSend_cellularSlicingFlags(v106, v107, v108, v109);

              if (v110)
              {
                double v114 = objc_msgSend_local(v78, v111, v112, v113);
                __int16 v118 = objc_msgSend_cellularSlicingFlags(v114, v115, v116, v117);

                v94 |= v118;
              }
              double v119 = objc_msgSend_local(v78, v111, v112, v113);
              objc_msgSend_setLinkFlags_(v119, v120, v94, v121);

              BOOL v122 = v55 == 0;
              if (!v78) {
                BOOL v122 = 1;
              }
              if (!v122) {
                CFArrayAppendValue((CFMutableArrayRef)v55, v78);
              }
              double v123 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v78;
                _os_log_impl(&dword_19D9BE000, v123, OS_LOG_TYPE_DEFAULT, "succeededCandidatePair: %@", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  v374 = v78;
                  _IDSLogTransport(@"GL", @"IDS", @"succeededCandidatePair: %@");
                  if (_IDSShouldLog())
                  {
                    v374 = v78;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"succeededCandidatePair: %@");
                  }
                }
              }
            }
          }
          uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v69, v72, (uint64_t)&v381, *(double *)&v76, v387, 16);
        }
        while (v74);
      }

      id v127 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v124, v125, v126);
      uint64_t v130 = objc_msgSend_createRelayInterfaceInfoFromCandidatePairs_token_(v127, v128, (uint64_t)v55, v129, v380->_cbuuid);

      double v131 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v135 = objc_msgSend_count(v55, v132, v133, v134);
        uint64_t v139 = objc_msgSend_length(v130, v136, v137, v138);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v135;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v139;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&buf[24] = v377;
        _os_log_impl(&dword_19D9BE000, v131, OS_LOG_TYPE_DEFAULT, "candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v143 = objc_msgSend_count(v55, v140, v141, v142);
          uint64_t v375 = objc_msgSend_length(v130, v144, v145, v146);
          double v376 = v377;
          v374 = (NSData *)v143;
          _IDSLogTransport(@"GL", @"IDS", @"candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@");
          if (_IDSShouldLog())
          {
            uint64_t v147 = objc_msgSend_count(v55, v140, v141, v142, v143, v375, v377);
            uint64_t v375 = objc_msgSend_length(v130, v148, v149, v150);
            double v376 = v377;
            v374 = (NSData *)v147;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"candidatePair count: %lu, interfaceInfoRequest length: %lu options: %@");
          }
        }
      }
      Mutable = (__CFDictionary *)objc_msgSend_mutableCopy(v377, v140, v141, v142, v374, v375, v376);
      if (!Mutable) {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      uint64_t v153 = objc_msgSend_numberWithInteger_(NSNumber, v151, 1, v152);
      if (v153)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-capability", v153);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB79294();
      }

      if (v380->_shouldReportAcceptDelay && !v380->_isInitiator)
      {
        uint64_t v193 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v191, v380->_acceptDelayU32, v192);
        if (v193)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-acceptdelay", v193);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB794B4();
        }
      }
      id v213 = v130;
      if (v213)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-relay-link-interface-info", v213);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB7975C();
      }

      double v216 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v214, v380->_localRelayInterfaceCounter, v215);
      if (v216)
      {
        CFDictionarySetValue(Mutable, @"gl-attr-counter", v216);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB795C4();
      }

      goto LABEL_261;
    default:
      if (a3 == 32774)
      {
        double v154 = (__CFDictionary *)objc_msgSend_mutableCopy(v377, v8, v9, v10);
        Mutable = v154;
        if (@"gl-attr-remote-relay-link-id") {
          BOOL v156 = v154 == 0;
        }
        else {
          BOOL v156 = 1;
        }
        if (!v156) {
          CFDictionaryRemoveValue(v154, @"gl-attr-remote-relay-link-id");
        }
        uint64_t v157 = (const char *)@"gl-attr-active-probing-link-id";
        if (@"gl-attr-active-probing-link-id" && Mutable) {
          CFDictionaryRemoveValue(Mutable, @"gl-attr-active-probing-link-id");
        }
        double v158 = objc_msgSend_numberWithInteger_(NSNumber, v157, 1, v155);
        if (v158)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-capability", v158);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB79294();
        }

        if (!self->_shouldReportAcceptDelay || self->_isInitiator) {
          goto LABEL_262;
        }
        unint64_t v66 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v194, self->_acceptDelayU32, v195);
        id v55 = v66;
        if (v66)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-acceptdelay", v66);
        }
        else
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
LABEL_261:

            self = v380;
            goto LABEL_262;
          }
          sub_19DB794B4();
        }
LABEL_169:
        id v55 = v66;
        goto LABEL_261;
      }
      if (a3 != 32769)
      {
LABEL_35:
        if ((unint64_t)(a3 - 32771) > 2)
        {
LABEL_263:
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          self = v380;
          goto LABEL_264;
        }
        double v53 = (__CFDictionary *)objc_msgSend_mutableCopy(v377, v8, v9, v10);
        Mutable = v53;
        if (@"gl-attr-remote-relay-link-id") {
          BOOL v54 = v53 == 0;
        }
        else {
          BOOL v54 = 1;
        }
        if (!v54) {
          CFDictionaryRemoveValue(v53, @"gl-attr-remote-relay-link-id");
        }
        if (@"gl-attr-active-probing-link-id" && Mutable)
        {
          CFDictionaryRemoveValue(Mutable, @"gl-attr-active-probing-link-id");
          goto LABEL_264;
        }
LABEL_262:
        if (!Mutable) {
          goto LABEL_263;
        }
LABEL_264:
        uint64_t v363 = self->_controlMessageKey;
        if (v363)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-hmac", v363);
        }
        else
        {
          __int16 v364 = MEMORY[0x1E4F14500];
          id v365 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR)) {
            sub_19DB78F68();
          }
        }
        double v368 = objc_msgSend_messageWithCommand_attributes_(IDSGlobalLinkMessage, v366, v378, v367, Mutable);
        objc_msgSend_write_outputLength_(v368, v369, (uint64_t)__b, v370, &v385);
        double v197 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v371, (uint64_t)__b, v372, v385);

        goto LABEL_270;
      }
LABEL_22:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v11)
      {
LABEL_189:
        double v229 = objc_msgSend_local(v379, v23, v24, v25, v374, v375, v376);
        uint64_t v233 = objc_msgSend_radioAccessTechnology(v229, v230, v231, v232);

        if (v380->_remoteDeviceVersion <= 2 && v233 == 9)
        {
          uint64_t v236 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v236, OS_LOG_TYPE_DEFAULT, "RATType Wired -> NonCell due to remote version", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"RATType Wired -> NonCell due to remote version");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"RATType Wired -> NonCell due to remote version");
              }
            }
          }
          uint64_t v233 = 0;
        }
        double v237 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v234, v233, v235);
        if (v237)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-rat", v237);
        }
        else
        {
          long long v238 = MEMORY[0x1E4F14500];
          id v239 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR)) {
            sub_19DB7942C();
          }
        }
        double v240 = NSNumber;
        uint64_t v244 = objc_msgSend_local(v379, v241, v242, v243);
        uint64_t v248 = objc_msgSend_transport(v244, v245, v246, v247);
        id v251 = objc_msgSend_numberWithInteger_(v240, v249, v248, v250);

        if (v251)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-transport", v251);
        }
        else
        {
          uint64_t v252 = MEMORY[0x1E4F14500];
          id v253 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR)) {
            sub_19DB793A4();
          }
        }
        id v254 = NSNumber;
        id v258 = objc_msgSend_local(v379, v255, v256, v257);
        uint64_t v262 = objc_msgSend_mtu(v258, v259, v260, v261);
        uint64_t v265 = objc_msgSend_numberWithUnsignedInt_(v254, v263, v262, v264);

        if (v265)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-mtu", v265);
        }
        else
        {
          uint64_t v266 = MEMORY[0x1E4F14500];
          id v267 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR)) {
            sub_19DB7931C();
          }
        }
        uint64_t v270 = objc_msgSend_numberWithInteger_(NSNumber, v268, 1, v269);
        if (v270)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-capability", v270);
        }
        else
        {
          double v271 = MEMORY[0x1E4F14500];
          id v272 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR)) {
            sub_19DB79294();
          }
        }
        long long v276 = objc_msgSend_local(v379, v273, v274, v275);
        uint64_t v280 = objc_msgSend_address(v276, v277, v278, v279);
        long long v283 = objc_msgSend_wrapperWithSockAddr_(IDSSockAddrWrapper, v281, v280, v282);

        id v284 = v283;
        if (v284)
        {
          id v55 = v284;
          CFDictionarySetValue(Mutable, @"gl-attr-relayremoteaddress", v284);
        }
        else
        {
          id v55 = 0;
          long long v285 = MEMORY[0x1E4F14500];
          id v286 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR)) {
            sub_19DB7920C();
          }
        }
        unsigned __int16 v289 = objc_msgSend__getExpensiveLinkFlagsForCandidatePair_(v380, v287, (uint64_t)v379, v288);
        uint64_t v293 = objc_msgSend_local(v379, v290, v291, v292);
        uint64_t v297 = objc_msgSend_index(v293, v294, v295, v296);
        int v300 = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(v380, v298, v297, v299);

        if (v300) {
          unsigned __int16 v304 = v289 | 2;
        }
        else {
          unsigned __int16 v304 = v289;
        }
        if (v380->_remoteDeviceVersion >= 2)
        {
          double v305 = objc_msgSend_local(v379, v301, v302, v303);
          uint64_t v309 = objc_msgSend_index(v305, v306, v307, v308);
          int v312 = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v380, v310, v309, v311);

          if (v312) {
            v304 |= 4u;
          }
        }
        BOOL v313 = objc_msgSend_local(v379, v301, v302, v303);
        objc_msgSend_setLinkFlags_(v313, v314, v304, v315);

        double v318 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v316, v304, v317);
        if (v318)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-link-flags", v318);
        }
        else
        {
          long long v319 = MEMORY[0x1E4F14500];
          id v320 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v319, OS_LOG_TYPE_ERROR)) {
            sub_19DB79184();
          }
        }
        uint64_t v324 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v321, v322, v323);
        uint64_t v328 = objc_msgSend_dataSoMaskBits(v324, v325, v326, v327);

        __int16 v331 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v329, v328, v330);
        if (v331)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-data-so-mask", v331);
        }
        else
        {
          unint64_t v332 = MEMORY[0x1E4F14500];
          id v333 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v332, OS_LOG_TYPE_ERROR)) {
            sub_19DB790FC();
          }
        }
        BOOL v337 = objc_msgSend_local(v379, v334, v335, v336);
        objc_msgSend_setDataSoMask_(v337, v338, v328, v339);

        if (objc_msgSend_isEqualToString_(v380->_cbuuid, v340, @"12345678-7654-DADA-DADA-DADADADADADA", v341))
        {
          v345 = objc_msgSend_defaultRemoteDeviceCBUUID(v379, v342, v343, v344);
          uint64_t v347 = @"gl-attr-remote-cbuuid";
          if (v345)
          {
            memset(buf, 170, 16);
            objc_msgSend_getUUIDBytes_(v345, v346, (uint64_t)buf, v348);
            char v351 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v349, (uint64_t)buf, v350, 16);
            if (v351)
            {
              CFDictionarySetValue(Mutable, v347, v351);
            }
            else
            {
              double v353 = MEMORY[0x1E4F14500];
              id v354 = MEMORY[0x1E4F14500];
              if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR)) {
                sub_19DB79078();
              }
            }
          }
          else
          {
            BOOL v352 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19D9BE000, v352, OS_LOG_TYPE_DEFAULT, "watch cbuuid is missing.", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"watch cbuuid is missing.");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"watch cbuuid is missing.");
                }
              }
            }
          }
        }
        if (v378 == 1)
        {
          memset(buf, 170, 16);
          id v355 = objc_msgSend_linkUUID(v379, v342, v343, v344);
          objc_msgSend_getUUIDBytes_(v355, v356, (uint64_t)buf, v357);

          __int16 v360 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v358, (uint64_t)buf, v359, 16);
          if (v360)
          {
            CFDictionarySetValue(Mutable, @"gl-attr-linkuuid", v360);
          }
          else
          {
            v361 = MEMORY[0x1E4F14500];
            id v362 = MEMORY[0x1E4F14500];
            if (os_log_type_enabled(v361, OS_LOG_TYPE_ERROR)) {
              sub_19DB78FF0();
            }
          }
          CFDictionarySetValue(Mutable, @"gl-attr-version", &unk_1EF028B10);
        }
        goto LABEL_261;
      }
      unsigned __int16 v26 = objc_msgSend_length(self->_skeData, v23, v24, v25);
      uint64_t v27 = v26;
      if (!v26 || self->_skeToRemoteComplete)
      {
        if (!self->_isInitiator)
        {
          objc_msgSend_skeData(v379, v23, v24, v25);
          double v28 = (NSData *)objc_claimAutoreleasedReturnValue();
          if (v28)
          {
            double v29 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              unsigned __int16 v33 = objc_msgSend_length(v28, v30, v31, v32);
              double v37 = objc_msgSend_candidatePairToken(v379, v34, v35, v36);
              *(_DWORD *)buf = 134218498;
              *(void *)&uint8_t buf[4] = v28;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v33;
              *(_WORD *)&buf[18] = 2112;
              *(void *)&buf[20] = v37;
              _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "piggyback SKE data %p (%uB) for realloc pair %@.", buf, 0x1Cu);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                unsigned __int16 v41 = objc_msgSend_length(v28, v38, v39, v40);
                objc_msgSend_candidatePairToken(v379, v42, v43, v44);
                v376 = uint64_t v375 = v41;
                v374 = v28;
                _IDSLogTransport(@"GL", @"IDS", @"piggyback SKE data %p (%uB) for realloc pair %@.");

                if (_IDSShouldLog())
                {
                  unsigned __int16 v48 = objc_msgSend_length(v28, v45, v46, v47, v28, v41, v376);
                  objc_msgSend_candidatePairToken(v379, v49, v50, v51);
                  v376 = uint64_t v375 = v48;
                  v374 = v28;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"piggyback SKE data %p (%uB) for realloc pair %@.");
                }
              }
            }
            uint64_t v52 = v28;
            CFDictionarySetValue(Mutable, @"gl-attr-skedata", v52);
          }
        }
        goto LABEL_189;
      }
      if (v26 < 0x101u)
      {
        uint64_t v210 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
        {
          skeData = self->_skeData;
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = skeData;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          _os_log_impl(&dword_19D9BE000, v210, OS_LOG_TYPE_DEFAULT, "piggyback SKE data %p (%uB), send session connected.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            v374 = self->_skeData;
            uint64_t v375 = v27;
            _IDSLogTransport(@"GL", @"IDS", @"piggyback SKE data %p (%uB), send session connected.");
            if (_IDSShouldLog())
            {
              v374 = self->_skeData;
              uint64_t v375 = v27;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"piggyback SKE data %p (%uB), send session connected.");
            }
          }
        }
        id v212 = self->_skeData;
        if (v212)
        {
          CFDictionarySetValue(Mutable, @"gl-attr-skedata", v212);
        }
        else
        {
          long long v217 = MEMORY[0x1E4F14500];
          id v218 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR)) {
            sub_19DB7953C();
          }
        }
        objc_msgSend_setSentSKEData_(v379, v219, 1, v220);
        self->_delaySessionConnected = 0;
        if (!self->_isInitiator)
        {
          objc_msgSend_setSkeData_(v379, v23, (uint64_t)self->_skeData, v25);
          uint64_t v223 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v221, self->_acceptDelayU32, v222);
          if (v223)
          {
            CFDictionarySetValue(Mutable, @"gl-attr-acceptdelay", v223);
          }
          else
          {
            double v224 = MEMORY[0x1E4F14500];
            id v225 = MEMORY[0x1E4F14500];
            if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR)) {
              sub_19DB794B4();
            }
          }
          BOOL v226 = v378 != 32769;
          if (self->_remoteGlobalLinkVersion) {
            BOOL v226 = 1;
          }
          if (!v226)
          {
            id v227 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
            {
              id v228 = self->_skeData;
              *(_DWORD *)buf = 134217984;
              *(void *)&uint8_t buf[4] = v228;
              _os_log_impl(&dword_19D9BE000, v227, OS_LOG_TYPE_DEFAULT, "SKE is complete for Receiver, remove SKE data %p.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                v374 = self->_skeData;
                _IDSLogTransport(@"GL", @"IDS", @"SKE is complete for Receiver, remove SKE data %p.");
                if (_IDSShouldLog())
                {
                  v374 = self->_skeData;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"SKE is complete for Receiver, remove SKE data %p.");
                }
              }
            }
            self->_skeToRemoteComplete = 1;
          }
        }
        goto LABEL_189;
      }
      uint64_t v196 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v27;
        _os_log_impl(&dword_19D9BE000, v196, OS_LOG_TYPE_DEFAULT, "SKE data is too long (%uB).", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"SKE data is too long (%uB).");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"SKE data is too long (%uB).");
          }
        }
      }
      double v197 = 0;
LABEL_270:

      return v197;
  }
}

- (BOOL)_skipCommandMessage:(int64_t)a3 candidatePair:(id)a4 timeNow:(double)a5
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  unint64_t v13 = objc_msgSend_state(v7, v8, v9, v10);
  if (v13 > 2 || objc_msgSend_isNominated(v7, v11, v12, v14))
  {
    switch(a3)
    {
      case 1:
        LOBYTE(v15) = v13 != 3;
        goto LABEL_20;
      case 2:
        LOBYTE(v15) = v13 == 6;
        goto LABEL_20;
      case 3:
        if (objc_msgSend_pendingRealloc(v7, v11, v12, v14)) {
          goto LABEL_19;
        }
        LODWORD(v15) = objc_msgSend_hbStarted(v7, v16, v17, v18) ^ 1;
        goto LABEL_20;
      case 4:
        uint64_t v19 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v11, v12, v14);
        unint64_t v15 = objc_msgSend_deliveryStatus_(v19, v20, (uint64_t)self->_cbuuid, v21);

        LOBYTE(v15) = v15 > 1;
        goto LABEL_20;
      case 5:
        if ((objc_msgSend_isActive(v7, v11, v12, v14) & 1) != 0
          || (objc_msgSend_isNominated(v7, v22, v23, v24) & 1) == 0)
        {
          break;
        }
        goto LABEL_19;
      case 6:
        double v25 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v11, v12, v14);
        unint64_t v28 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v25, v26, (uint64_t)self->_cbuuid, v27);

        if (v28 < 3) {
          goto LABEL_19;
        }
        double v29 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          unsigned __int16 v33 = objc_msgSend_candidatePairToken(v7, v30, v31, v32);
          *(_DWORD *)buf = 138412290;
          double v40 = v33;
          _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "skip command 0006 for %@", buf, 0xCu);
        }
        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          char v38 = objc_msgSend_candidatePairToken(v7, v34, v35, v36);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip command 0006 for %@");
        }
        break;
      default:
LABEL_19:
        LOBYTE(v15) = 0;
        goto LABEL_20;
    }
  }
  LOBYTE(v15) = 1;
LABEL_20:

  return v15;
}

- (BOOL)_shouldSkipCommand:(int64_t)a3 withCandidatePair:(id)a4 connectionDataCounter:(int)a5 relayInterfaceCounter:(int)a6
{
  *(void *)&v33[5] = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  double v14 = v10;
  if (a3 == 6)
  {
    double v16 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v11, v12, v13);
    uint64_t v19 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v16, v17, (uint64_t)self->_cbuuid, v18);

    if ((unint64_t)(v19 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      double v20 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)unsigned __int16 v33 = v14;
        _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "relay interface info is not in progress or waiting, no need to retransmit: %@, return YES", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"relay interface info is not in progress or waiting, no need to retransmit: %@, return YES");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"relay interface info is not in progress or waiting, no need to retransmit: %@, return YES");
          }
        }
      }
      goto LABEL_44;
    }
    if ((a6 & 0x80000000) == 0 && self->_localRelayInterfaceCounter > a6)
    {
      double v27 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int localRelayInterfaceCounter = self->_localRelayInterfaceCounter;
        *(_DWORD *)buf = 67109376;
        v33[0] = a6;
        LOWORD(v33[1]) = 1024;
        *(_DWORD *)((char *)&v33[1] + 2) = localRelayInterfaceCounter;
        _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "relayInterfaceCounter increased, skip sending old version old %d current %d", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"relayInterfaceCounter increased, skip sending old version old %d current %d");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"relayInterfaceCounter increased, skip sending old version old %d current %d");
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (a3 == 4)
  {
    double v21 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v11, v12, v13);
    uint64_t v24 = objc_msgSend_deliveryStatus_(v21, v22, (uint64_t)self->_cbuuid, v23);

    if (v24 != 1)
    {
      uint64_t v30 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)unsigned __int16 v33 = v14;
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "connection data is not in progress, no need to retransmit: %@, return YES", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"connection data is not in progress, no need to retransmit: %@, return YES");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"connection data is not in progress, no need to retransmit: %@, return YES");
          }
        }
      }
      goto LABEL_44;
    }
    if ((a5 & 0x80000000) == 0 && self->_localConnDataCounter > a5)
    {
      double v25 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int localConnDataCounter = self->_localConnDataCounter;
        *(_DWORD *)buf = 67109376;
        v33[0] = a5;
        LOWORD(v33[1]) = 1024;
        *(_DWORD *)((char *)&v33[1] + 2) = localConnDataCounter;
        _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "connection data counter increased, skip sending old version old %d current %d", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"connection data counter increased, skip sending old version old %d current %d");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"connection data counter increased, skip sending old version old %d current %d");
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (a3 == 1 {
         && self->_enableSKE
  }
         && self->_skeToRemoteComplete
         && objc_msgSend_recvConnectedAck(v10, v11, v12, v13))
  {
    unint64_t v15 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "already received remote SKE, return YES", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"already received remote SKE, return YES");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"already received remote SKE, return YES");
        }
      }
    }
LABEL_44:
    BOOL v29 = 1;
    goto LABEL_45;
  }
  BOOL v29 = 0;
LABEL_45:

  return v29;
}

- (void)_sendCommandMessage:(int64_t)a3 stunMessage:(id)a4 options:(id)a5 candidatePairToken:(id)a6
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  id v215 = a5;
  id v11 = a6;
  double v216 = self;
  long long v217 = v11;
  int64_t v213 = a3;
  double v214 = v10;
  if (self->_state < 6)
  {
    double v16 = v11;
    if (!v11
      || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
      || (uint64_t v19 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v16),
          double v16 = v217,
          !v19))
    {
      if (!v16
        || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (v19 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v16), double v16 = v217, !v19))
      {
        uint64_t v19 = objc_msgSend__findVirtualCandidatePair_(self, v12, (uint64_t)v16, v13);
        double v16 = v217;
        if (!v19)
        {
          double v71 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218242;
            *(void *)id v228 = v213;
            *(_WORD *)&v228[8] = 2112;
            *(void *)double v229 = v217;
            _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "send command %04lx failed due to invalid candidate pair %@", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"send command %04lx failed due to invalid candidate pair %@");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"send command %04lx failed due to invalid candidate pair %@");
              }
            }
          }
          uint64_t v19 = 0;
          goto LABEL_161;
        }
      }
    }
    if (objc_msgSend_isRelayStunCandidatePair(v19, v12, v18, v13))
    {
      objc_msgSend__sendChannelDataCommandMessage_packetBuffer_options_candidatePairToken_(self, v21, v213, v23, 0, v215, v16);
      goto LABEL_161;
    }
    uint64_t v212 = objc_msgSend_state(v19, v21, v22, v23);
    double v27 = objc_msgSend_local(v19, v24, v25, v26);
    uint64_t v31 = objc_msgSend_address(v27, v28, v29, v30);

    if (objc_msgSend_isRelayStunCandidatePair(v19, v32, v33, v34)
      && (unint64_t)(v212 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v225 = 0u;
      long long v226 = 0u;
      long long v223 = 0u;
      long long v224 = 0u;
      double v37 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v35, v36, 0.0);
      uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v223, v39, v230, 16);
      if (v42)
      {
        uint64_t v44 = *(void *)v224;
        while (2)
        {
          for (uint64_t i = 0; i != v42; ++i)
          {
            if (*(void *)v224 != v44) {
              objc_enumerationMutation(v37);
            }
            uint64_t v46 = *(void **)(*((void *)&v223 + 1) + 8 * i);
            double v47 = objc_msgSend_local(v46, v40, v41, v43);
            uint64_t v51 = objc_msgSend_address(v47, v48, v49, v50);

            id v55 = objc_msgSend_sessionID(v46, v52, v53, v54);
            int v59 = objc_msgSend_sessionID(v19, v56, v57, v58);
            if (objc_msgSend_isEqualToString_(v55, v60, (uint64_t)v59, v61)
              && (objc_msgSend_state(v46, v62, v63, v64) == 3 || objc_msgSend_state(v46, v65, v66, v67) == 4))
            {
              BOOL v68 = IsSameSA(v31, v51);

              if (v68)
              {
                uint64_t v72 = v217;
                uint64_t v76 = objc_msgSend_candidatePairToken(v46, v73, v74, v75);
                long long v77 = v46;

                id v78 = v76;
                long long v217 = v78;
                double v79 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v81 = (&_IDSStunCandidatePairStateStrings)[v212];
                  *(_DWORD *)buf = 138413058;
                  *(void *)id v228 = v72;
                  *(_WORD *)&v228[8] = 2080;
                  *(void *)double v229 = v81;
                  *(_WORD *)&v229[8] = 1024;
                  *(_DWORD *)&v229[10] = (unsigned __int16)v213;
                  *(_WORD *)&v229[14] = 2112;
                  *(void *)&v229[16] = v78;
                  _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], send command %04x using %@.", buf, 0x26u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v210 = (unsigned __int16)v213;
                    id v211 = v78;
                    CFMutableDictionaryRef v208 = v72;
                    uint64_t v209 = (&_IDSStunCandidatePairStateStrings)[v212];
                    _IDSLogTransport(@"GL", @"IDS", @"%@ has state [%s], send command %04x using %@.");
                    if (_IDSShouldLog())
                    {
                      uint64_t v210 = (unsigned __int16)v213;
                      id v211 = v78;
                      CFMutableDictionaryRef v208 = v72;
                      uint64_t v209 = (&_IDSStunCandidatePairStateStrings)[v212];
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"%@ has state [%s], send command %04x using %@.");
                    }
                  }
                }

                uint64_t v19 = v77;
                goto LABEL_52;
              }
            }
            else
            {
            }
          }
          uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v40, (uint64_t)&v223, v43, v230, 16);
          if (v42) {
            continue;
          }
          break;
        }
      }

      uint64_t v69 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v70 = (&_IDSStunCandidatePairStateStrings)[v212];
        *(_DWORD *)buf = 138412802;
        *(void *)id v228 = v217;
        *(_WORD *)&v228[8] = 2080;
        *(void *)double v229 = v70;
        *(_WORD *)&v229[8] = 1024;
        *(_DWORD *)&v229[10] = (unsigned __int16)v213;
        _os_log_impl(&dword_19D9BE000, v69, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], Found no other connected candidate pair to send command %04x", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"%@ has state [%s], Found no other connected candidate pair to send command %04x");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"%@ has state [%s], Found no other connected candidate pair to send command %04x");
          }
        }
      }
      goto LABEL_161;
    }
LABEL_52:
    double v82 = ids_monotonic_time();
    id v84 = objc_msgSend_objectForKey_(v215, v83, @"gl-attr-active-probing-link-id", v82);
    uint64_t v88 = objc_msgSend_charValue(v84, v85, v86, v87);

    uint64_t v91 = v213;
    if (!v88)
    {
      if (objc_msgSend__skipCommandMessage_candidatePair_timeNow_(v216, v89, v213, v82, v19))
      {
        double v101 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        {
          double v105 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v19, v102, v103, v104)];
          *(_DWORD *)buf = 134218498;
          *(void *)id v228 = v213;
          *(_WORD *)&v228[8] = 2112;
          *(void *)double v229 = v217;
          *(_WORD *)&v229[8] = 2080;
          *(void *)&v229[10] = v105;
          _os_log_impl(&dword_19D9BE000, v101, OS_LOG_TYPE_DEBUG, "skip session command %04lx for %@, state [%s].", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          objc_msgSend_state(v19, v106, v107, v108);
          _IDSLogV(1, @"IDSFoundation", @"GL", @"skip session command %04lx for %@, state [%s].");
        }
        goto LABEL_161;
      }
      uint64_t v91 = v213;
      if (v213 == 3)
      {
        objc_msgSend_hbStartTime(v19, v89, 3, v90);
        if (v132 == 0.0)
        {
          uint64_t v133 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)id v228 = v19;
            _os_log_impl(&dword_19D9BE000, v133, OS_LOG_TYPE_DEFAULT, "session heartbeat request start now for %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              CFMutableDictionaryRef v208 = v19;
              _IDSLogTransport(@"GL", @"IDS", @"session heartbeat request start now for %@");
              if (_IDSShouldLog())
              {
                CFMutableDictionaryRef v208 = v19;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session heartbeat request start now for %@");
              }
            }
          }
          objc_msgSend_setHbStartTime_(v19, v134, v135, v82, v208, v209, v210, v211);
          uint64_t v91 = 3;
        }
        else
        {
          double v90 = v82 - v132;
          uint64_t v91 = 3;
          if (v90 > 60.0)
          {
            double v204 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)id v228 = v19;
              _os_log_impl(&dword_19D9BE000, v204, OS_LOG_TYPE_DEFAULT, "session heartbeat request message timed out, disconnect %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                CFMutableDictionaryRef v208 = v19;
                _IDSLogTransport(@"GL", @"IDS", @"session heartbeat request message timed out, disconnect %@");
                if (_IDSShouldLog())
                {
                  CFMutableDictionaryRef v208 = v19;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"session heartbeat request message timed out, disconnect %@");
                }
              }
            }
            if (objc_msgSend_isQUIC(v19, v205, v206, v207, v208, v209, v210, v211)) {
              goto LABEL_65;
            }
            goto LABEL_172;
          }
        }
      }
    }
    if (!v214)
    {
      double v111 = objc_msgSend__createCommandData_options_candidatePair_(v216, v89, v91, v90, v215, v19);
      if (!v111)
      {
        double v142 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)id v228 = v213;
          _os_log_impl(&dword_19D9BE000, v142, OS_LOG_TYPE_DEFAULT, "failed to get indication data, skip session command (%04lx) message.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to get indication data, skip session command (%04lx) message.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get indication data, skip session command (%04lx) message.");
            }
          }
        }
        double v214 = 0;
        goto LABEL_161;
      }
      if (objc_msgSend_isRelayStunCandidatePair(v19, v109, v110, v112)) {
        uint64_t v113 = 22;
      }
      else {
        uint64_t v113 = 23;
      }
      double v114 = [IDSStunMessage alloc];
      double v214 = objc_msgSend_initWithType_(v114, v115, v113, v116);
      unsigned int v120 = objc_msgSend_channelNumber(v19, v117, v118, v119);
      double v121 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
      double v124 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v122, __rev16(v120), v123);
      if (v124)
      {
        CFDictionarySetValue(v121, @"ids-stun-attribute-channelnumber", v124);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB797E4();
      }

      CFDictionarySetValue(v121, @"ids-stun-attribute-data", v111);
      uint64_t v145 = objc_msgSend_objectForKey_(v215, v143, @"gl-attr-remote-relay-link-id", v144);
      if (v145) {
        CFDictionarySetValue(v121, @"ids-stun-attribute-relay-link-id", v145);
      }

      objc_msgSend_setTransactionID_attributes_(v214, v146, 0, v147, v121);
      objc_msgSend_setStartTime_(v214, v148, v149, v82);

      goto LABEL_108;
    }
    objc_msgSend_startTime(v214, v89, v91, v90);
    double v94 = v82 - v93;
    if (v94 > 30.0)
    {
      if (v213 == 6)
      {
        uint64_t v174 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v174, OS_LOG_TYPE_DEFAULT, "session relay interface information message timed out.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"session relay interface information message timed out.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"session relay interface information message timed out.");
            }
          }
        }
        objc_msgSend__discardKeyMaterialMessage_(v216, v175, 12, v176, v208);
        double v180 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v177, v178, v179);
        objc_msgSend_setRelayInterfaceInfoDeliveryStatus_status_(v180, v181, (uint64_t)v216->_cbuuid, v182, 4);

        goto LABEL_161;
      }
      if (v213 == 4)
      {
        double v183 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v183, OS_LOG_TYPE_DEFAULT, "session connection data message timed out.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"session connection data message timed out.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"session connection data message timed out.");
            }
          }
        }
        double v187 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v184, v185, v186, v208);
        objc_msgSend_setDeliveryStatus_status_(v187, v188, (uint64_t)v216->_cbuuid, v189, 3);

        goto LABEL_161;
      }
      if (v213 != 1)
      {
LABEL_161:

        goto LABEL_162;
      }
      id v95 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)id v228 = v19;
        _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "session connected message timed out, disconnect %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          CFMutableDictionaryRef v208 = v19;
          _IDSLogTransport(@"GL", @"IDS", @"session connected message timed out, disconnect %@.");
          if (_IDSShouldLog())
          {
            CFMutableDictionaryRef v208 = v19;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"session connected message timed out, disconnect %@.");
          }
        }
      }
      if (objc_msgSend_isQUIC(v19, v96, v97, v98, v208))
      {
LABEL_65:
        objc_msgSend__sendQUICUnallocbindRequest_reason_(v216, v99, (uint64_t)v217, v100, 9);
        goto LABEL_161;
      }
LABEL_172:
      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v216, v99, (uint64_t)v217, v100, 0, 9);
      goto LABEL_161;
    }
    uint64_t v125 = v213;
    if ((v213 & 0xFFFFFFFFFFFF7FFFLL) == 4 && v215)
    {
      double v126 = objc_msgSend_objectForKey_(v215, v92, @"gl-attr-counter", v94);
      uint64_t v130 = objc_msgSend_intValue(v126, v127, v128, v129);
      uint64_t v131 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v130 = 0xFFFFFFFFLL;
      uint64_t v131 = 0xFFFFFFFFLL;
      if ((v213 & 0xFFFFFFFFFFFF7FFFLL) != 6 || !v215)
      {
LABEL_94:
        if (objc_msgSend__shouldSkipCommand_withCandidatePair_connectionDataCounter_relayInterfaceCounter_(v216, v92, v125, v94, v19, v130, v131, v208))goto LABEL_161; {
LABEL_108:
        }
        double v150 = objc_msgSend_GlobalLink(IDSFoundationLog, v139, v140, v141);
        BOOL v151 = os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT);
        if ((int)v88 <= 0)
        {
          if (v151)
          {
            unsigned __int16 v168 = objc_msgSend_type(v214, v152, v153, v154);
            idsSessionID = v216->_idsSessionID;
            double v173 = objc_msgSend_sessionID(v19, v170, v171, v172);
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)id v228 = (unsigned __int16)v213;
            *(_WORD *)&v228[4] = 1024;
            *(_DWORD *)&v228[6] = v168;
            *(_WORD *)double v229 = 2112;
            *(void *)&v229[2] = v217;
            *(_WORD *)&v229[10] = 2112;
            *(void *)&v229[12] = idsSessionID;
            *(_WORD *)&v229[20] = 2112;
            *(void *)&v229[22] = v173;
            _os_log_impl(&dword_19D9BE000, v150, OS_LOG_TYPE_DEFAULT, "Send command %04x (stun:%04x) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x2Cu);
          }
          double v167 = v19;
        }
        else
        {
          if (v151)
          {
            unsigned __int16 v155 = objc_msgSend_type(v214, v152, v153, v154);
            BOOL v156 = v216->_idsSessionID;
            double v160 = objc_msgSend_sessionID(v19, v157, v158, v159);
            *(_DWORD *)buf = 67110402;
            *(_DWORD *)id v228 = (unsigned __int16)v213;
            *(_WORD *)&v228[4] = 1024;
            *(_DWORD *)&v228[6] = v88;
            *(_WORD *)double v229 = 1024;
            *(_DWORD *)&v229[2] = v155;
            *(_WORD *)&v229[6] = 2112;
            *(void *)&v229[8] = v217;
            *(_WORD *)&v229[16] = 2112;
            *(void *)&v229[18] = v156;
            *(_WORD *)&v229[26] = 2112;
            *(void *)&v229[28] = v160;
            _os_log_impl(&dword_19D9BE000, v150, OS_LOG_TYPE_DEFAULT, "Send command %04x (active probing on link %d) (stun:%04x) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x32u);
          }
          if (v216->_linkIDToCandidatePairs)
          {
            double v150 = objc_msgSend_numberWithChar_(NSNumber, v161, v88, v162);
            if (v150)
            {
              CFDictionaryRef linkIDToCandidatePairs = (const __CFDictionary *)v216->_linkIDToCandidatePairs;
              uint64_t v166 = objc_msgSend_numberWithChar_(NSNumber, v163, v88, v164);
              double v167 = (id)CFDictionaryGetValue(linkIDToCandidatePairs, v166);

              uint64_t v19 = v166;
            }
            else
            {
              double v167 = 0;
            }
          }
          else
          {
            double v167 = 0;
            double v150 = v19;
          }
        }

        objc_msgSend__sendStunMessage_candidatePair_(v216, v190, (uint64_t)v214, v191, v167);
        id v195 = 0;
        int64_t v196 = v213;
        if (v213 != 3 && (v213 & 0x8000) == 0) {
          id v195 = v214;
        }
        BOOL v197 = (int)v88 > 0 && v213 == 3;
        if (v197 || (v213 & 0x8000) != 0) {
          goto LABEL_160;
        }
        double v198 = 1.0;
        if (v213 != 6 && v213 != 1)
        {
          uint64_t v200 = v217;
          goto LABEL_159;
        }
        objc_msgSend_startTime(v214, v192, v193, v194, v208);
        if (v82 - v199 < 2.0)
        {
          uint64_t v200 = v217;
          double v201 = v216->_allocbindEndTime - v216->_allocbindStartTime;
          int64_t v196 = v213;
          if (v201 <= 0.0)
          {
LABEL_159:
            v218[0] = MEMORY[0x1E4F143A8];
            v218[1] = 3221225472;
            v218[2] = sub_19DA5349C;
            v218[3] = &unk_1E5974238;
            v218[4] = v216;
            int64_t v222 = v196;
            id v219 = v195;
            id v220 = v215;
            id v221 = v200;
            IDSTransportThreadAddBlockAfter(v218, v198);

LABEL_160:
            uint64_t v19 = v167;
            goto LABEL_161;
          }
          double v202 = v201 + v201;
          if (v201 + v201 > 0.2) {
            double v202 = 0.2;
          }
          if (v202 >= 0.05) {
            double v198 = v202;
          }
          else {
            double v198 = 0.05;
          }
          double v203 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(double *)id v228 = v198;
            *(_WORD *)&v228[8] = 2048;
            *(double *)double v229 = v201;
            _os_log_impl(&dword_19D9BE000, v203, OS_LOG_TYPE_DEFAULT, "use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.");
              }
            }
          }
        }
        uint64_t v200 = v217;
        int64_t v196 = v213;
        goto LABEL_159;
      }
      double v126 = objc_msgSend_objectForKey_(v215, v92, @"gl-attr-counter", v94);
      uint64_t v131 = objc_msgSend_intValue(v126, v136, v137, v138);
    }

    uint64_t v125 = v213;
    goto LABEL_94;
  }
  double v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 134218242;
    *(void *)id v228 = a3;
    *(_WORD *)&v228[8] = 2080;
    *(void *)double v229 = v15;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "skip session command %04lx, GL state (%s).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"skip session command %04lx, GL state (%s).");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"skip session command %04lx, GL state (%s).");
      }
    }
  }
LABEL_162:
}

- (BOOL)_processIncomingIndicationData:(char *)a3 length:(int)a4 candidatePairToken:(id)a5 arrivalTime:(double)a6 remoteRelayLinkID:(unsigned __int16)a7
{
  uint64_t v7 = a7;
  uint64_t v9 = *(void *)&a4;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v12 = a5;
  unint64_t v15 = objc_msgSend_messageWithBuffer_length_(IDSGlobalLinkMessage, v13, (uint64_t)a3, v14, v9);
  uint64_t v20 = objc_msgSend_command(v15, v16, v17, v18);
  if (self->_useSecureControlMessage
    && (objc_msgSend_verifyHMacDigestWithKey_inputBuffer_inputLength_(v15, v19, (uint64_t)self->_controlMessageKey, v21, a3, v9) & 1) == 0)
  {
    double v37 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      int v42 = (unsigned __int16)v20;
      __int16 v43 = 2112;
      id v44 = v12;
      _os_log_impl(&dword_19D9BE000, v37, OS_LOG_TYPE_DEFAULT, "failed to verify HMac, drop command %04x for %@.", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to verify HMac, drop command %04x for %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to verify HMac, drop command %04x for %@.");
        }
      }
    }
    BOOL v38 = 0;
  }
  else
  {
    Value = 0;
    if (v12 && self->_tokenToCandidatePairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v12);
    }
    id v23 = Value;
    double v27 = objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      double v32 = objc_msgSend_sessionID(v23, v28, v29, v30);
      *(_DWORD *)buf = 67109890;
      int v42 = (unsigned __int16)v20;
      __int16 v43 = 2112;
      id v44 = v12;
      __int16 v45 = 2112;
      uint64_t v46 = idsSessionID;
      __int16 v47 = 2112;
      unsigned __int16 v48 = v32;
      _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "Received command %04x on %@ for IDSSessionID: %@ QRSessionID: %@", buf, 0x26u);
    }
    if (!(!v36 & v35))
    {
      switch(v20)
      {
        case 1:
          goto LABEL_12;
        case 2:
          goto LABEL_20;
        case 3:
          goto LABEL_21;
        case 4:
          goto LABEL_22;
        case 5:
          goto LABEL_23;
        case 6:
          goto LABEL_24;
        default:
          JUMPOUT(0);
      }
    }
    switch(v20)
    {
      case 32769:
LABEL_12:
        objc_msgSend__processCommandConnected_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 32770:
LABEL_20:
        objc_msgSend__processCommandDisconnected_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 32771:
LABEL_21:
        objc_msgSend__processCommandHeartbeat_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v33, (uint64_t)v15, a6, v12, v7);
        break;
      case 32772:
LABEL_22:
        objc_msgSend__processCommandConnectionData_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 32773:
LABEL_23:
        objc_msgSend__processCommandNominate_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      case 32774:
LABEL_24:
        objc_msgSend__processCommandRelayInterfaceInfo_candidatePairToken_(self, v33, (uint64_t)v15, v34, v12);
        break;
      default:
        double v39 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v42 = (unsigned __int16)v20;
          _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "receive invalid command %04x.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"receive invalid command %04x.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive invalid command %04x.");
            }
          }
        }
        break;
    }

    BOOL v38 = 1;
  }

  return v38;
}

- (void)_notifyQRSessionConnected:(id)a3
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  double v150 = (IDSGlobalLink *)a3;
  objc_msgSend_candidatePairToken(v150, v3, v4, v5);
  id key = (char *)objc_claimAutoreleasedReturnValue();
  unint64_t v9 = objc_msgSend_state(v150, v6, v7, v8);
  unint64_t v12 = v9;
  if (v9 <= 2)
  {
    double v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "receive session connected message before allocbind response.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive session connected message before allocbind response.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive session connected message before allocbind response.");
        }
      }
    }
LABEL_15:
    double v16 = self;
    if (self->_state == 4)
    {
      if (!self->_allowOnlyOneQR)
      {
        int v147 = 0;
LABEL_54:
        if (v12 <= 3)
        {
          objc_msgSend_setState_(v150, v10, 4, v11);
          uint64_t v73 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v74 = (&_IDSStunCandidatePairStateStrings)[v12];
            *(_DWORD *)buf = 136315650;
            double v159 = (IDSGlobalLink *)v74;
            __int16 v160 = 2080;
            double v161 = off_1E944EAB0;
            __int16 v162 = 2112;
            double v163 = key;
            _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v145 = off_1E944EAB0;
              double v146 = key;
              double v144 = (&_IDSStunCandidatePairStateStrings)[v12];
              _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
              if (_IDSShouldLog())
              {
                uint64_t v145 = off_1E944EAB0;
                double v146 = key;
                double v144 = (&_IDSStunCandidatePairStateStrings)[v12];
                _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
              }
            }
          }
          objc_msgSend_stopSessionConnectedTimer(v150, v75, v76, v77, v144, v145, v146);
          objc_msgSend__notifyCandidatePairConnected_(self, v78, (uint64_t)key, v79);
          if (objc_msgSend_isRelayStunCandidatePair(v150, v80, v81, v82)
            && (objc_msgSend_isSharedQRSession(v150, v83, v84, v85) & 1) == 0)
          {
            double v89 = objc_msgSend_sessionID(v150, v86, v87, v88);
            uint64_t v92 = objc_msgSend__getCandidatePairsWithSessionID_inState_(self, v90, (uint64_t)v89, v91, 3);

            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            id v93 = v92;
            uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v151, v95, v157, 16);
            if (v98)
            {
              uint64_t v99 = *(void *)v152;
              uint64_t v100 = 138412546;
              do
              {
                for (uint64_t i = 0; i != v98; ++i)
                {
                  if (*(void *)v152 != v99) {
                    objc_enumerationMutation(v93);
                  }
                  id v102 = *(IDSGlobalLink **)(*((void *)&v151 + 1) + 8 * i);
                  char isRealloc = objc_msgSend_isRealloc(v102, v96, v97, *(double *)&v100);
                  if (v102 == v150) {
                    char v104 = 1;
                  }
                  else {
                    char v104 = isRealloc;
                  }
                  if ((v104 & 1) == 0)
                  {
                    double v105 = objc_msgSend_GlobalLink(IDSFoundationLog, v96, v97, *(double *)&v100);
                    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
                    {
                      objc_msgSend_sessionID(v102, v106, v107, v108);
                      double v109 = (char *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138412546;
                      double v159 = v102;
                      __int16 v160 = 2112;
                      double v161 = v109;
                      _os_log_impl(&dword_19D9BE000, v105, OS_LOG_TYPE_DEFAULT, "Found another succeeded candidate pair %@ with the same QRSessionID %@, disconnecting", buf, 0x16u);
                    }
                    int isQUIC = objc_msgSend_isQUIC(v102, v110, v111, v112);
                    uint64_t v118 = objc_msgSend_candidatePairToken(v102, v114, v115, v116);
                    if (isQUIC) {
                      objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v117, (uint64_t)v118, v119, 8);
                    }
                    else {
                      objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v117, (uint64_t)v118, v119, 0, 8);
                    }
                  }
                }
                uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v96, (uint64_t)&v151, *(double *)&v100, v157, 16);
              }
              while (v98);
            }
          }
          Value = 0;
          if (self->_tokenToReallocBlocks && key) {
            Value = CFDictionaryGetValue((CFDictionaryRef)self->_tokenToReallocBlocks, key);
          }
          double v121 = (void (**)(void))_Block_copy(Value);
          if (v121)
          {
            BOOL v122 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              double v123 = (IDSGlobalLink *)_Block_copy(v121);
              *(_DWORD *)buf = 134218242;
              double v159 = v123;
              __int16 v160 = 2112;
              double v161 = key;
              _os_log_impl(&dword_19D9BE000, v122, OS_LOG_TYPE_DEFAULT, "process delayed realloc block %p for %@.", buf, 0x16u);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                double v144 = (char *)_Block_copy(v121);
                uint64_t v145 = key;
                _IDSLogTransport(@"GL", @"IDS", @"process delayed realloc block %p for %@.");

                if (_IDSShouldLog())
                {
                  double v144 = (char *)_Block_copy(v121);
                  uint64_t v145 = key;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"process delayed realloc block %p for %@.");
                }
              }
            }
            v121[2](v121);
            if (key)
            {
              tokenToReallocBlocks = self->_tokenToReallocBlocks;
              if (tokenToReallocBlocks) {
                CFDictionaryRemoveValue((CFMutableDictionaryRef)tokenToReallocBlocks, key);
              }
            }
          }

          double v16 = self;
        }
        if (v147)
        {
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(v16, v10, (uint64_t)key, v11, 0);
          double v16 = self;
        }
        objc_msgSend__selectBetterDefaultCandidatePair_(v16, v10, (uint64_t)v150, v11, v144, v145);
        id v127 = objc_msgSend__convergeSharedSessions_(self, v125, (uint64_t)v150, v126);
        BOOL v131 = objc_msgSend_count(v127, v128, v129, v130) == 0;

        if (!v131) {
          objc_msgSend_hasConvergence(self->_metricsCollector, v132, v133, v134);
        }
        if (objc_msgSend_isRelayStunCandidatePair(v150, v132, v133, v134))
        {
          double v138 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v135, v136, v137);
          unint64_t v141 = objc_msgSend_deliveryStatus_(v138, v139, (uint64_t)self->_cbuuid, v140);

          if (v141 <= 1) {
            objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v142, 0, v143);
          }
        }
        goto LABEL_102;
      }
      if (!objc_msgSend_isEqualToString_(self->_cbuuid, v10, @"12345678-7654-DADA-DADA-DADADADADADA", v11))
      {
        int v147 = 0;
        goto LABEL_53;
      }
      uint64_t v17 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        cbuuid = self->_cbuuid;
        *(_DWORD *)buf = 138412546;
        double v159 = v150;
        __int16 v160 = 2112;
        double v161 = (char *)cbuuid;
        _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "candidate pair %@ is connected but GL is already connected, override for %@", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v144 = (char *)v150;
          uint64_t v145 = (char *)self->_cbuuid;
          _IDSLogTransport(@"GL", @"IDS", @"candidate pair %@ is connected but GL is already connected, override for %@");
          if (_IDSShouldLog())
          {
            double v144 = (char *)v150;
            uint64_t v145 = (char *)self->_cbuuid;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"candidate pair %@ is connected but GL is already connected, override for %@");
          }
        }
      }
      objc_msgSend__updateDefaultCandidatePair_(self, v19, (uint64_t)v150, v20, v144, v145);
      int v21 = 1;
LABEL_52:
      int v147 = v21;
LABEL_53:
      double v16 = self;
      goto LABEL_54;
    }
    uint64_t v22 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 138412802;
      double v159 = self;
      __int16 v160 = 2080;
      double v161 = v23;
      __int16 v162 = 2080;
      double v163 = off_1E944E558[0];
      _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "update GL: %@ state (%s->%s).", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v145 = _IDSLinkStateStrings[self->_state];
        double v146 = off_1E944E558[0];
        double v144 = (char *)self;
        _IDSLogTransport(@"GL", @"IDS", @"update GL: %@ state (%s->%s).");
        if (_IDSShouldLog())
        {
          uint64_t v145 = _IDSLinkStateStrings[self->_state];
          double v146 = off_1E944E558[0];
          double v144 = (char *)self;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update GL: %@ state (%s->%s).");
        }
      }
    }
    double v26 = self;
    self->_unint64_t state = 4;
    if (!self->_isUPlusOneSession)
    {
      double v25 = ids_monotonic_time();
      double v26 = self;
      self->_double linkConnectTime = v25;
    }
    objc_msgSend__stopAllocbindFailoverTimer_(v26, v24, 0, v25, v144, v145, v146);
    double v30 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v27, v28, v29);
    int isInternalInstall = objc_msgSend_isInternalInstall(v30, v31, v32, v33);

    if (isInternalInstall) {
      objc_msgSend_setTestOptionsFromUserDefaults(v150, v35, v36, v37);
    }
    BOOL v38 = _Block_copy(self->_connectReadyHandler);
    if (v38)
    {
      double v39 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_19DA5465C;
      block[3] = &unk_1E5973F20;
      id v156 = v38;
      dispatch_block_t v40 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, QOS_CLASS_USER_INTERACTIVE, 0, block);
      dispatch_async(v39, v40);

      id v41 = v156;
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v43 = objc_opt_respondsToSelector();

      if ((v43 & 1) == 0)
      {
LABEL_41:
        id v46 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didConnectForDeviceUniqueID_cbuuid_(v46, v47, (uint64_t)self, v48, self->_deviceUniqueID, self->_cbuuid);

        int isActive = objc_msgSend_isActive(v150, v49, v50, v51);
        if ((isActive & 1) == 0)
        {
          uint64_t v56 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v150, v57, v58, v59);
            double v60 = (IDSGlobalLink *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            double v159 = v60;
            _os_log_impl(&dword_19D9BE000, v56, OS_LOG_TYPE_DEFAULT, "default candidate pair is not connected, switch to %@.", buf, 0xCu);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v150, v61, v63, v62);
              double v144 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(@"GL", @"IDS", @"default candidate pair is not connected, switch to %@.");

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v150, v61, v64, v62, v144);
                double v144 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, @"IDSFoundation", @"GL", @"default candidate pair is not connected, switch to %@.");
              }
            }
          }
          objc_msgSend__updateDefaultCandidatePair_(self, v61, (uint64_t)v150, v62, v144);
        }
        double v65 = self;
        if (self->_skeToRemoteComplete)
        {
          skeData = self->_skeData;
          self->_skeData = 0;

          double v65 = self;
        }
        objc_msgSend__discardNonAcceptedCandidatePairs(v65, v52, v53, v55);
        objc_msgSend__startActivityTimer(self, v67, v68, v69);
        objc_msgSend__startExtIPDiscovery(self, v70, v71, v72);

        int v21 = isActive ^ 1;
        goto LABEL_52;
      }
      id v41 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didConnectOverCloud_cbuuid_(v41, v44, (uint64_t)self, v45, 0, self->_cbuuid);
    }

    goto LABEL_41;
  }
  if (v9 - 5 > 1) {
    goto LABEL_15;
  }
  double v14 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = (&_IDSStunCandidatePairStateStrings)[v12];
    *(_DWORD *)buf = 138412546;
    double v159 = (IDSGlobalLink *)key;
    __int16 v160 = 2080;
    double v161 = v15;
    _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], ignore session connected.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"%@ has state [%s], ignore session connected.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"%@ has state [%s], ignore session connected.");
      }
    }
  }
LABEL_102:
}

- (void)_setRemoteGlobalLinkVersionWithCommand:(int64_t)a3 receivedRemoteVersion:(BOOL)a4 versionValue:(unsigned __int16)a5 receivedSKE:(BOOL)a6
{
  if (a4) {
    goto LABEL_9;
  }
  if (!self->_isInitiator)
  {
    if (a3 != 1) {
      return;
    }
    goto LABEL_8;
  }
  if (a3 == 32769 && self->_enableSKE && a6)
  {
LABEL_8:
    a5 = 0;
LABEL_9:
    self->_remoteGlobalLinkVersiouint64_t n = a5;
  }
}

- (void)_processCommandConnected:(id)a3 candidatePairToken:(id)a4
{
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v279 = objc_msgSend_command(v6, v8, v9, v10);
  if (v7)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (tokenToCandidatePairs)
    {
      unint64_t v12 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7);
      if (v12)
      {
        double v16 = v12;
        if (objc_msgSend_pendingRealloc(v12, v13, v14, v15))
        {
          uint64_t v17 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 67109378;
            buf[1] = (unsigned __int16)v279;
            LOWORD(v300[0]) = 2112;
            *(void *)((char *)v300 + 2) = v7;
            _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "receive session connected command %04x on realloc pair %@, ignore.", (uint8_t *)buf, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"receive session connected command %04x on realloc pair %@, ignore.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"receive session connected command %04x on realloc pair %@, ignore.");
              }
            }
          }
          goto LABEL_18;
        }
        bzero(buf, 0x410uLL);
        if (objc_msgSend_getAttribute_attribute_(v6, v19, 4, v20, buf))
        {
          id v23 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v21, (uint64_t)&v300[1], v22, v300[0]);
          unsigned __int16 v27 = objc_msgSend_length(v23, v24, v25, v26);
          uint64_t v30 = v27;
          if (v27) {
            BOOL enableSKE = self->_enableSKE;
          }
          else {
            BOOL enableSKE = 0;
          }
          if (enableSKE)
          {
            if (self->_recvRemoteSKEData)
            {
              uint64_t v32 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v292) = 0;
                _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "already received remote SKE data, ignore.", (uint8_t *)&v292, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"already received remote SKE data, ignore.");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"already received remote SKE data, ignore.");
                  }
                }
              }
            }
            else
            {
              self->_BOOL recvRemoteSKEData = 1;
              objc_msgSend_setRecvSKEData_(v16, v28, 1, v29);
              id v41 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                int v292 = 67109120;
                unsigned int v293 = v30;
                _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "receive new remote SKE data %u bytes.", (uint8_t *)&v292, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v269 = v30;
                  _IDSLogTransport(@"GL", @"IDS", @"receive new remote SKE data %u bytes.");
                  if (_IDSShouldLog())
                  {
                    uint64_t v269 = v30;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"receive new remote SKE data %u bytes.");
                  }
                }
              }
              id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didReceiveSKEData_(WeakRetained, v43, (uint64_t)self, v44, v23);

              if (!self->_isInitiator)
              {
                self->_skeStartTime = ids_monotonic_time();
                if (self->_skeData)
                {
                  self->_delaySessionConnected = 0;
                  uint64_t v265 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v292) = 0;
                    _os_log_impl(&dword_19D9BE000, v265, OS_LOG_TYPE_DEFAULT, "SKE data is ready, need to send SKE", (uint8_t *)&v292, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(@"GL", @"IDS", @"SKE data is ready, need to send SKE");
                      if (_IDSShouldLog()) {
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"SKE data is ready, need to send SKE");
                      }
                    }
                  }
                }
                else
                {
                  self->_delaySessionConnected = 1;
                  __int16 v268 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v292) = 0;
                    _os_log_impl(&dword_19D9BE000, v268, OS_LOG_TYPE_DEFAULT, "SKE data is not ready, delay session connected.", (uint8_t *)&v292, 2u);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(@"GL", @"IDS", @"SKE data is not ready, delay session connected.");
                      if (_IDSShouldLog()) {
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"SKE data is not ready, delay session connected.");
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            double v33 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              double v34 = @"YES";
              BOOL skeToRemoteComplete = self->_skeToRemoteComplete;
              if (self->_enableSKE) {
                uint64_t v36 = @"YES";
              }
              else {
                uint64_t v36 = @"NO";
              }
              int v292 = 67109634;
              if (!skeToRemoteComplete) {
                double v34 = @"NO";
              }
              unsigned int v293 = v30;
              __int16 v294 = 2112;
              double v295 = *(double *)&v36;
              __int16 v296 = 2112;
              uint64_t v297 = v34;
              _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "ignore SKE data %uB (EnableSKE %@, SKEComplete %@).", (uint8_t *)&v292, 0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
            {
              double v37 = self->_enableSKE ? @"YES" : @"NO";
              BOOL v38 = self->_skeToRemoteComplete ? @"YES" : @"NO";
              id v272 = v37;
              double v275 = v38;
              uint64_t v269 = v30;
              _IDSLogTransport(@"GL", @"IDS", @"ignore SKE data %uB (EnableSKE %@, SKEComplete %@).");
              if (_IDSShouldLog())
              {
                if (self->_enableSKE) {
                  double v39 = @"YES";
                }
                else {
                  double v39 = @"NO";
                }
                if (self->_skeToRemoteComplete) {
                  dispatch_block_t v40 = @"YES";
                }
                else {
                  dispatch_block_t v40 = @"NO";
                }
                id v272 = v39;
                double v275 = v40;
                uint64_t v269 = v30;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"ignore SKE data %uB (EnableSKE %@, SKEComplete %@).");
              }
            }
          }
        }
        else
        {
          BOOL enableSKE = 0;
        }
        unsigned int v281 = 0;
        unsigned __int16 v280 = 0;
        long long v298 = 0uLL;
        if (v279 == 1)
        {
          uint64_t HasValidUInt16Attr = GLUtilHasValidUInt16Attr(v6, 18, &v280);
          objc_msgSend__setRemoteGlobalLinkVersionWithCommand_receivedRemoteVersion_versionValue_receivedSKE_(self, v46, 1, v47, HasValidUInt16Attr, v280, enableSKE, v269, v272, v275);
        }
        else
        {
          objc_msgSend__setRemoteGlobalLinkVersionWithCommand_receivedRemoteVersion_versionValue_receivedSKE_(self, v21, v279, v22, 0, 0, enableSKE, v269, v272, v275);
        }
        if (GLUtilHasValidUInt32Attr(v6, 7, &v281))
        {
          unsigned int v48 = v281;
          self->_unsigned int acceptDelayU32 = v281;
          double v49 = (double)(unsigned __int16)v48 * 0.0000152587891 + (double)HIWORD(v48);
          uint64_t v50 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int acceptDelayU32 = self->_acceptDelayU32;
            int v292 = 67109376;
            unsigned int v293 = acceptDelayU32;
            __int16 v294 = 2048;
            double v295 = v49;
            _os_log_impl(&dword_19D9BE000, v50, OS_LOG_TYPE_DEFAULT, "receive accept delay: %08x/%.6f", (uint8_t *)&v292, 0x12u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v273 = v49;
              uint64_t v270 = (char *)self->_acceptDelayU32;
              _IDSLogTransport(@"GL", @"IDS", @"receive accept delay: %08x/%.6f");
              if (_IDSShouldLog())
              {
                double v273 = v49;
                uint64_t v270 = (char *)self->_acceptDelayU32;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"receive accept delay: %08x/%.6f");
              }
            }
          }
        }
        if (GLUtilHasValidUInt16Attr(v6, 2, &v280))
        {
          double v55 = objc_msgSend_remote(v16, v52, v53, v54);
          uint64_t v58 = v55;
          if (v280 <= 4u) {
            objc_msgSend_updateTransport_(v55, v56, v280, v57, v270, *(void *)&v273);
          }
          else {
            objc_msgSend_updateTransport_(v55, v56, 0, v57, v270, *(void *)&v273);
          }
        }
        if (GLUtilHasValidUInt16Attr(v6, 5, &v280))
        {
          double v62 = objc_msgSend_remote(v16, v59, v60, v61);
          double v65 = v62;
          if (v280 >= 0xAu) {
            objc_msgSend_setRadioAccessTechnology_(v62, v63, 10, v64, v270);
          }
          else {
            objc_msgSend_setRadioAccessTechnology_(v62, v63, v280, v64, v270);
          }
        }
        if (GLUtilHasValidUInt16Attr(v6, 6, &v280))
        {
          double v69 = objc_msgSend_remote(v16, v66, v67, v68);
          objc_msgSend_setMtu_(v69, v70, v280, v71);
        }
        if (GLUtilHasValidUInt16Attr(v6, 12, &v280) && self->_remoteCapabilityFlag != v280)
        {
          self->_remoteCapabilityFlag = v280;
          double v72 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int remoteCapabilityFlag_low = LOWORD(self->_remoteCapabilityFlag);
            int v292 = 67109120;
            unsigned int v293 = remoteCapabilityFlag_low;
            _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "update remote capability: %04X.", (uint8_t *)&v292, 8u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v270 = (char *)LOWORD(self->_remoteCapabilityFlag);
              _IDSLogTransport(@"GL", @"IDS", @"update remote capability: %04X.");
              if (_IDSShouldLog())
              {
                uint64_t v270 = (char *)LOWORD(self->_remoteCapabilityFlag);
                _IDSLogV(0, @"IDSFoundation", @"GL", @"update remote capability: %04X.");
              }
            }
          }
        }
        int v74 = GLUtilHasValidUInt16Attr(v6, 19, &v280);
        if (v280) {
          int v78 = v74;
        }
        else {
          int v78 = 0;
        }
        if (v78 == 1)
        {
          double v79 = objc_msgSend_remote(v16, v75, v76, v77);
          objc_msgSend_setLinkFlags_(v79, v80, v280, v81);
        }
        int HasValidUInt32Attr = GLUtilHasValidUInt32Attr(v6, 20, &v281);
        if (v281) {
          int v86 = HasValidUInt32Attr;
        }
        else {
          int v86 = 0;
        }
        if (v86 == 1)
        {
          uint64_t v87 = objc_msgSend_remote(v16, v83, v84, v85);
          objc_msgSend_setDataSoMask_(v87, v88, v281, v89);
        }
        bzero(&v292, 0x410uLL);
        if (objc_msgSend_getAttribute_attribute_(v6, v90, 8, v91, &v292))
        {
          double v95 = objc_msgSend_relayRemote(v16, v92, v93, v94);
          uint64_t v99 = objc_msgSend_address(v95, v96, v97, v98);

          *(void *)&long long v100 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v290 = v100;
          long long v291 = v100;
          long long v288 = v100;
          long long v289 = v100;
          *(_OWORD *)&v286[32] = v100;
          long long v287 = v100;
          *(_OWORD *)id v286 = v100;
          *(_OWORD *)&v286[16] = v100;
          if (IsValidSA((BOOL)&v294) && (!v99 || !IsSameSA((uint64_t)&v294, v99)))
          {
            char v104 = objc_msgSend_remote(v16, v101, v102, v103, v270);
            uint64_t v108 = objc_msgSend_transport(v104, v105, v106, v107);
            double v112 = objc_msgSend_remote(v16, v109, v110, v111);
            uint64_t v116 = objc_msgSend_radioAccessTechnology(v112, v113, v114, v115);
            unsigned int v120 = objc_msgSend_remote(v16, v117, v118, v119);
            uint64_t v124 = objc_msgSend_mtu(v120, v121, v122, v123);
            id v127 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v125, 3, v126, v108, v116, v124, 0xFFFFFFFFLL, &v294, &v294);

            objc_msgSend_setRelayRemote_(v16, v128, (uint64_t)v127, v129);
            double v130 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v131 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
              *(_DWORD *)double v282 = 136315394;
              long long v283 = v131;
              __int16 v284 = 2112;
              id v285 = v7;
              _os_log_impl(&dword_19D9BE000, v130, OS_LOG_TYPE_DEFAULT, "receive relay-remote-address %s for %@.", v282, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v270 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
                double v273 = *(double *)&v7;
                _IDSLogTransport(@"GL", @"IDS", @"receive relay-remote-address %s for %@.");
                if (_IDSShouldLog())
                {
                  uint64_t v270 = SAToIPPortString(v286, 0x80uLL, (uint64_t)&v294);
                  double v273 = *(double *)&v7;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"receive relay-remote-address %s for %@.");
                }
              }
            }
          }
        }
        double v133 = GLUtilHasValidUUIDAttr(v6, 11, &v298);
        if (!v134)
        {
LABEL_126:
          if (!objc_msgSend_isEqualToString_(self->_cbuuid, v132, @"12345678-7654-DADA-DADA-DADADADADADA", v133, v270, *(void *)&v273))goto LABEL_138; {
          __int16 v162 = objc_msgSend_defaultRemoteDeviceCBUUID(v16, v159, v160, v161);
          }
          GLUtilHasValidUUIDAttr(v6, 13, &v298);
          if (v163)
          {
            id v164 = objc_alloc(MEMORY[0x1E4F29128]);
            double v167 = (char *)objc_msgSend_initWithUUIDBytes_(v164, v165, (uint64_t)&v298, v166);
            if (v167)
            {
              unsigned __int16 v168 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id v286 = 138412546;
                *(void *)&v286[4] = v167;
                *(_WORD *)&v286[12] = 1024;
                *(_DWORD *)&v286[14] = 13;
                _os_log_impl(&dword_19D9BE000, v168, OS_LOG_TYPE_DEFAULT, "receive watch cbuuid: %@, attr(%04x).", v286, 0x12u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  double v271 = v167;
                  uint64_t v274 = 13;
                  _IDSLogTransport(@"GL", @"IDS", @"receive watch cbuuid: %@, attr(%04x).");
                  if (_IDSShouldLog())
                  {
                    double v271 = v167;
                    uint64_t v274 = 13;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"receive watch cbuuid: %@, attr(%04x).");
                  }
                }
              }
              if (objc_msgSend_isEqual_(v162, v169, (uint64_t)v167, v170, v271, v274))
              {

                goto LABEL_137;
              }
              double v264 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id v286 = 138412802;
                *(void *)&v286[4] = v167;
                *(_WORD *)&v286[12] = 2112;
                *(void *)&v286[14] = v162;
                *(_WORD *)&v286[22] = 1024;
                *(_DWORD *)&v286[24] = (unsigned __int16)v279;
                _os_log_impl(&dword_19D9BE000, v264, OS_LOG_TYPE_DEFAULT, "watch cbuuid mismatch (%@, %@), reject session command %04x.", v286, 0x1Cu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"watch cbuuid mismatch (%@, %@), reject session command %04x.");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"watch cbuuid mismatch (%@, %@), reject session command %04x.");
                  }
                }
              }
            }
            else
            {
              double v263 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id v286 = 67109120;
                *(_DWORD *)&v286[4] = (unsigned __int16)v279;
                _os_log_impl(&dword_19D9BE000, v263, OS_LOG_TYPE_DEFAULT, "recieve invalid watch cbuuid, reject session command %04x.", v286, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"recieve invalid watch cbuuid, reject session command %04x.");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"recieve invalid watch cbuuid, reject session command %04x.");
                  }
                }
              }
            }

            goto LABEL_18;
          }
LABEL_137:

LABEL_138:
          uint64_t v171 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
          {
            double v175 = objc_msgSend_remote(v16, v172, v173, v174);
            double v179 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v175, v176, v177, v178)];
            double v183 = objc_msgSend_remote(v16, v180, v181, v182);
            unsigned int v187 = objc_msgSend_radioAccessTechnology(v183, v184, v185, v186);
            uint64_t v188 = IDSRadioAccessTechnologyToString(v187);
            double v192 = objc_msgSend_remote(v16, v189, v190, v191);
            int v196 = objc_msgSend_mtu(v192, v193, v194, v195);
            int v197 = LOWORD(self->_remoteCapabilityFlag);
            remoteGlobalLinkVersiouint64_t n = self->_remoteGlobalLinkVersion;
            *(_DWORD *)id v286 = 136316162;
            *(void *)&v286[4] = v179;
            *(_WORD *)&v286[12] = 2080;
            *(void *)&v286[14] = v188;
            *(_WORD *)&v286[22] = 1024;
            *(_DWORD *)&v286[24] = v196;
            *(_WORD *)&v286[28] = 1024;
            *(_DWORD *)&v286[30] = v197;
            *(_WORD *)&v286[34] = 1024;
            *(_DWORD *)&v286[36] = remoteGlobalLinkVersion;
            _os_log_impl(&dword_19D9BE000, v171, OS_LOG_TYPE_DEFAULT, "session connected message payload (%s/%s/%d/%04X/%d).", v286, 0x28u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v202 = objc_msgSend_remote(v16, v199, v200, v201);
              uint64_t v206 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v202, v203, v204, v205)];
              uint64_t v210 = objc_msgSend_remote(v16, v207, v208, v209);
              unsigned int v214 = objc_msgSend_radioAccessTechnology(v210, v211, v212, v213);
              id v215 = IDSRadioAccessTechnologyToString(v214);
              id v219 = objc_msgSend_remote(v16, v216, v217, v218);
              uint64_t v223 = objc_msgSend_mtu(v219, v220, v221, v222);
              uint64_t v277 = LOWORD(self->_remoteCapabilityFlag);
              uint64_t v278 = self->_remoteGlobalLinkVersion;
              uint64_t v274 = (uint64_t)v215;
              uint64_t v276 = v223;
              double v271 = v206;
              _IDSLogTransport(@"GL", @"IDS", @"session connected message payload (%s/%s/%d/%04X/%d).");

              if (_IDSShouldLog())
              {
                long long v224 = objc_msgSend_remote(v16, v199, v200, v201, v206, v215, v276, v277, v278);
                id v228 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v224, v225, v226, v227)];
                double v232 = objc_msgSend_remote(v16, v229, v230, v231);
                unsigned int v236 = objc_msgSend_radioAccessTechnology(v232, v233, v234, v235);
                double v237 = IDSRadioAccessTechnologyToString(v236);
                long long v241 = objc_msgSend_remote(v16, v238, v239, v240);
                uint64_t v245 = objc_msgSend_mtu(v241, v242, v243, v244);
                uint64_t v277 = LOWORD(self->_remoteCapabilityFlag);
                uint64_t v278 = self->_remoteGlobalLinkVersion;
                uint64_t v274 = (uint64_t)v237;
                uint64_t v276 = v245;
                double v271 = v228;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session connected message payload (%s/%s/%d/%04X/%d).");
              }
            }
          }
          if (v279 != 1)
          {
            if (v279 == 32769)
            {
              BOOL v247 = !self->_enableSKE;
              if (self->_enableSKE) {
                self->_BOOL skeToRemoteComplete = 1;
              }
              objc_msgSend_setRecvConnectedAck_(v16, v199, 1, v201, v271, v274, v276, v277, v278);
            }
            else
            {
              BOOL v247 = 0;
            }
            goto LABEL_159;
          }
          signed __int16 v246 = self->_remoteGlobalLinkVersion;
          BOOL v247 = v246 == 0;
          if (!v246)
          {
            if (self->_isInitiator || self->_delaySessionConnected)
            {
              BOOL v247 = 0;
LABEL_158:
              objc_msgSend_setRecvConnected_(v16, v199, 1, v201, v271);
LABEL_159:
              if (self->_enableSKE) {
                BOOL v247 = self->_recvRemoteSKEData && self->_skeToRemoteComplete;
              }
              if (self->_remoteGlobalLinkVersion >= 2) {
                int v248 = objc_msgSend_recvConnected(v16, v199, v200, v201) ^ 1;
              }
              else {
                int v248 = 0;
              }
              int v249 = objc_msgSend_recvConnectedAck(v16, v199, v200, v201, v271);
              if (v247)
              {
                int v250 = v249;
                if ((v248 | v249 ^ 1) == 1)
                {
                  id v251 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v252 = @"NO";
                    if (v250) {
                      uint64_t v252 = @"YES";
                    }
                    *(_DWORD *)id v286 = 138412290;
                    *(void *)&v286[4] = v252;
                    _os_log_impl(&dword_19D9BE000, v251, OS_LOG_TYPE_DEFAULT, "still not finished Connected command exchange. recvConnectedAcuint64_t k = %@", v286, 0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      _IDSLogTransport(@"GL", @"IDS", @"still not finished Connected command exchange. recvConnectedAcuint64_t k = %@");
                      if (_IDSShouldLog()) {
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"still not finished Connected command exchange. recvConnectedAcuint64_t k = %@");
                      }
                    }
                  }
                  BOOL v247 = 0;
                }
                else
                {
                  BOOL v247 = 1;
                }
              }
              id v253 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
              {
                id v254 = @"YES";
                if (self->_enableSKE) {
                  uint64_t v255 = @"YES";
                }
                else {
                  uint64_t v255 = @"NO";
                }
                BOOL recvRemoteSKEData = self->_recvRemoteSKEData;
                if (self->_skeToRemoteComplete) {
                  double v257 = @"YES";
                }
                else {
                  double v257 = @"NO";
                }
                *(_DWORD *)id v286 = 138413058;
                if (recvRemoteSKEData) {
                  id v258 = @"YES";
                }
                else {
                  id v258 = @"NO";
                }
                *(void *)&v286[4] = v255;
                *(_WORD *)&v286[12] = 2112;
                if (!v247) {
                  id v254 = @"NO";
                }
                *(void *)&v286[14] = v257;
                *(_WORD *)&v286[22] = 2112;
                *(void *)&v286[24] = v258;
                *(_WORD *)&v286[32] = 2112;
                *(void *)&v286[34] = v254;
                _os_log_impl(&dword_19D9BE000, v253, OS_LOG_TYPE_DEFAULT, "SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@", v286, 0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"SKE state enableSKE: %@ local complete: %@ remote complete: %@ isConnected: %@");
                  }
                }
              }
              if (v247)
              {
                objc_msgSend__notifyQRSessionConnected_(self, v259, (uint64_t)v16, v260);
                objc_msgSend__setupNewQRLinkIfNecessary_(self, v261, 0, v262);
              }
              goto LABEL_18;
            }
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 32769, v201, 0, 0, v7);
            objc_msgSend_setRecvConnectedAck_(v16, v266, 1, v267);
            signed __int16 v246 = self->_remoteGlobalLinkVersion;
          }
          if (v246 >= 1)
          {
            if (self->_isInitiator
              || self->_delaySessionConnected
              || !self->_enableSKE
              || self->_skeToRemoteComplete
              || objc_msgSend_sentSKEData(v16, v199, v200, v201))
            {
              objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 32769, v201, 0, 0, v7, v271, v274, v276, v277, v278);
            }
            else
            {
              objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v199, 1, v201, 0, 0, v7, v271, v274, v276, v277, v278);
            }
          }
          goto LABEL_158;
        }
        id v135 = objc_alloc(MEMORY[0x1E4F29128]);
        double v140 = (char *)objc_msgSend_initWithUUIDBytes_(v135, v136, (uint64_t)&v298, v137);
        if (v140)
        {
          double v142 = objc_msgSend_linkUUID(v16, v138, v139, v141);
          if ((objc_msgSend_isEqual_(v140, v143, (uint64_t)v142, v144) & 1) == 0)
          {
            BOOL v145 = !self->_isInitiator;

            if (!v145) {
              goto LABEL_125;
            }
            objc_msgSend_setLinkUUID_(v16, v146, (uint64_t)v140, v147);
            double v148 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_candidatePairToken(v16, v149, v150, v151);
              id v152 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)id v286 = 138412546;
              *(void *)&v286[4] = v140;
              *(_WORD *)&v286[12] = 2112;
              *(void *)&v286[14] = v152;
              _os_log_impl(&dword_19D9BE000, v148, OS_LOG_TYPE_DEFAULT, "update linkUUID %@ for %@.", v286, 0x16u);
            }
            if (!os_log_shim_legacy_logging_enabled()) {
              goto LABEL_125;
            }
            if (!_IDSShouldLogTransport()) {
              goto LABEL_125;
            }
            objc_msgSend_candidatePairToken(v16, v153, v154, v155);
            uint64_t v270 = v140;
            double v273 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            _IDSLogTransport(@"GL", @"IDS", @"update linkUUID %@ for %@.");

            if (!_IDSShouldLog()) {
              goto LABEL_125;
            }
            double v142 = objc_msgSend_candidatePairToken(v16, v156, v157, v158, v140, *(void *)&v273);
            uint64_t v270 = v140;
            double v273 = *(double *)&v142;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update linkUUID %@ for %@.");
          }
        }
LABEL_125:

        goto LABEL_126;
      }
    }
  }
  double v18 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair.", (uint8_t *)buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair.");
      }
    }
  }
  double v16 = 0;
LABEL_18:
}

- (void)_processCommandDisconnected:(id)a3 candidatePairToken:(id)a4
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_command(v6, v8, v9, v10);
  Value = 0;
  if (v7 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v7);
  }
  id v13 = Value;
  double v16 = v13;
  if (v11 == 2)
  {
    objc_msgSend_setRecvDisconnected_(v13, v14, 1, v15);
    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v17, 32770, v18, 0, 0, v7);
    if (self->_allowOnlyOneQR && self->_state <= 4)
    {
      double v22 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v42 = self;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "Disconnecting IDSGlobalLink %@, remote side is disconnecting.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          BOOL v38 = self;
          _IDSLogTransport(@"GL", @"IDS", @"Disconnecting IDSGlobalLink %@, remote side is disconnecting.");
          if (_IDSShouldLog())
          {
            BOOL v38 = self;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"Disconnecting IDSGlobalLink %@, remote side is disconnecting.");
          }
        }
      }
      id v23 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412802;
        int v42 = self;
        __int16 v43 = 2080;
        double v44 = v24;
        __int16 v45 = 2080;
        id v46 = off_1E944E560[0];
        _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "update GL %@ state (%s->%s).", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v39 = _IDSLinkStateStrings[self->_state];
          dispatch_block_t v40 = off_1E944E560[0];
          BOOL v38 = self;
          _IDSLogTransport(@"GL", @"IDS", @"update GL %@ state (%s->%s).");
          if (_IDSShouldLog())
          {
            double v39 = _IDSLinkStateStrings[self->_state];
            dispatch_block_t v40 = off_1E944E560[0];
            BOOL v38 = self;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update GL %@ state (%s->%s).");
          }
        }
      }
      self->_unint64_t state = 5;
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v25, 2, v26, 0, 0, v7, v38, v39, v40);
      objc_msgSend__startDisconnectTimer(self, v27, v28, v29);
    }
  }
  else
  {
    objc_msgSend_setRecvDisconnectedAck_(v13, v14, 1, v15);
  }
  if (objc_msgSend_recvDisconnected(v16, v19, v20, v21)
    && objc_msgSend_recvDisconnectedAck(v16, v30, v31, v32))
  {
    objc_msgSend__stopDisconnectTimer(self, v33, v34, v35);
    objc_msgSend__discardAllCandidatePairs_(self, v36, 0, v37);
  }
}

- (void)_processCommandHeartbeat:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5 remoteRelayLinkID:(unsigned __int16)a6
{
  uint64_t v6 = a6;
  uint64_t v179 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  uint64_t v15 = objc_msgSend_command(v10, v12, v13, v14);
  Value = 0;
  if (v11 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v11);
  }
  double v155 = v11;
  id v17 = Value;
  bzero(v177, 0x410uLL);
  if (objc_msgSend_getAttribute_attribute_(v10, v18, 1, v19, v177)) {
    unsigned __int16 v20 = v178;
  }
  else {
    unsigned __int16 v20 = 0;
  }
  bzero(v173, 0x410uLL);
  long long v153 = v10;
  int Attribute_attribute = objc_msgSend_getAttribute_attribute_(v10, v21, 10, v22, v173);
  int v27 = 0;
  unsigned int v28 = 0;
  uint64_t v29 = 0;
  unsigned int v30 = 0;
  if (Attribute_attribute)
  {
    int v27 = ntpTime32(a5);
    unsigned int v30 = bswap32(v174);
    uint64_t v29 = bswap32(v175);
    unsigned int v28 = bswap32(v176);
  }
  uint64_t v154 = self;
  if (v6)
  {
    unsigned int v31 = objc_msgSend_relayLinkID(v17, v24, v25, v26);
    double v35 = localRemoteRelayLinkIDForVirtualStunCandidatePair(v31, (const char *)v6, v32);
    double v37 = 0;
    if (self->_localRemoteRelayLinkIDToVirtualCandidatePairs && v35) {
      double v37 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_localRemoteRelayLinkIDToVirtualCandidatePairs, v35);
    }
    uint64_t v38 = objc_msgSend_linkID(v37, v33, v34, v36);
  }
  else
  {
    uint64_t v38 = objc_msgSend_linkID(v17, v24, v25, v26);
  }
  if (v15 == 32771)
  {
    if (objc_msgSend_pendingRealloc(v17, v39, v40, v41))
    {
      uint64_t v50 = objc_msgSend_local(v17, v47, v48, v49);
      uint64_t v54 = objc_msgSend_address(v50, v51, v52, v53);

      uint64_t v58 = objc_msgSend_remote(v17, v55, v56, v57);
      uint64_t v62 = objc_msgSend_external(v58, v59, v60, v61);

      uint64_t v66 = objc_msgSend_channelNumber(v17, v63, v64, v65);
      objc_msgSend__processDataOnReallocChannel_localAddress_remoteAddress_(v154, v67, v66, v68, v54, v62);
    }
    if (v29)
    {
      double v69 = (double)((v27 - (v28 + v29)) >> 16);
      double v70 = (double)(unsigned __int16)(v27 - (v28 + v29)) * 0.0000152587891 + v69;
      double v71 = objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v69);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        int isActive = objc_msgSend_isActive(v17, v72, v73, v74);
        *(_DWORD *)buf = 67110658;
        uint64_t v76 = @"NO";
        *(_DWORD *)int v163 = v38;
        *(_WORD *)&v163[4] = 1024;
        if (isActive) {
          uint64_t v76 = @"YES";
        }
        *(_DWORD *)&v163[6] = v20;
        __int16 v164 = 2112;
        *(void *)uint64_t v165 = v76;
        *(_WORD *)&v165[8] = 1024;
        *(_DWORD *)double v166 = v27;
        *(_WORD *)&v166[4] = 1024;
        int v167 = v29;
        __int16 v168 = 1024;
        unsigned int v169 = v28;
        __int16 v170 = 2048;
        double v171 = v70;
        _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "receive rtt response on link %d (counter:%04x active:%@ a:%08x e:%08x, d:%08x), rtt:%.6f sec).", buf, 0x34u);
      }
    }
    else
    {
      double v70 = 0.0;
    }
    if ((int)v38 < 1) {
      goto LABEL_65;
    }
    objc_msgSend_numberWithChar_(NSNumber, v47, v38, v49);
    double v79 = (const void *)objc_claimAutoreleasedReturnValue();
    double v81 = 0;
    double v82 = v154;
    if (v154->_linkIDToHBCounter && v79) {
      double v81 = (void *)CFDictionaryGetValue((CFDictionaryRef)v154->_linkIDToHBCounter, v79);
    }
    int v83 = objc_msgSend_unsignedShortValue(v81, v77, v78, v80);
    if (v20 - v83 >= 0x8000)
    {
      if (v83 == v20)
      {
LABEL_47:
        uint64_t v92 = 0;
        if (v82->_linkIDToRequestTimeStampAndRTT && v79) {
          uint64_t v92 = (void *)CFDictionaryGetValue((CFDictionaryRef)v82->_linkIDToRequestTimeStampAndRTT, v79);
        }
        id key = (void *)v79;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        id v93 = v92;
        uint64_t v96 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v156, v95, v161, 16);
        if (v96)
        {
          uint64_t v97 = v96;
          uint64_t v98 = *(void *)v157;
          while (2)
          {
            for (uint64_t i = 0; i != v97; ++i)
            {
              if (*(void *)v157 != v98) {
                objc_enumerationMutation(v93);
              }
              long long v100 = *(void **)(*((void *)&v156 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                double v103 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v101, v29, v102);
                int isEqualToNumber = objc_msgSend_isEqualToNumber_(v100, v104, (uint64_t)v103, v105);

                if (isEqualToNumber)
                {
                  uint64_t v107 = objc_msgSend_indexOfObject_(v93, v101, (uint64_t)v100, v102);
                  uint64_t v110 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v108, v29, v109);
                  v160[0] = v110;
                  uint64_t v113 = objc_msgSend_numberWithDouble_(NSNumber, v111, v112, v70);
                  v160[1] = v113;
                  uint64_t v116 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v114, (uint64_t)v160, v115, 2);
                  objc_msgSend_replaceObjectAtIndex_withObject_(v93, v117, v107, v118, v116);

                  if (!v154->_linkIDToRequestTimeStampAndRTT)
                  {
                    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFDictionaryRef linkIDToRequestTimeStampAndRTT = v154->_linkIDToRequestTimeStampAndRTT;
                    v154->_CFDictionaryRef linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)Mutable;
                  }
                  if (v93) {
                    CFDictionarySetValue((CFMutableDictionaryRef)v154->_linkIDToRequestTimeStampAndRTT, key, v93);
                  }
                  goto LABEL_64;
                }
              }
            }
            uint64_t v97 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v101, (uint64_t)&v156, v102, v161, 16, key);
            if (v97) {
              continue;
            }
            break;
          }
        }
LABEL_64:

LABEL_65:
        if (v17 && objc_msgSend_hbStarted(v17, v47, v48, v49))
        {
          objc_msgSend_setHbStarted_(v17, v121, 0, v122);
          objc_msgSend_setHbStartTime_(v17, v123, v124, 0.0);
          uint64_t v128 = objc_msgSend_GlobalLink(IDSFoundationLog, v125, v126, v127);
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)int v163 = v155;
            _os_log_impl(&dword_19D9BE000, v128, OS_LOG_TYPE_DEFAULT, "stop HB request for %@.", buf, 0xCu);
          }

          if (objc_msgSend_isActive(v17, v129, v130, v131))
          {
            if (v70 > 0.0)
            {
              float v132 = v70 * 1000.0;
              GLUtilReportAWDActiveLinkRTT(v17, v154->_enableSKE, v154->_isInitiator, v132);
              GLUCreateQRActiveLinkRTTEvent(v17, v132);
              __int16 v43 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
              id WeakRetained = objc_loadWeakRetained((id *)&v154->_delegate);
              char v134 = objc_opt_respondsToSelector();

              if (v134)
              {
                id v135 = objc_loadWeakRetained((id *)&v154->_delegate);
                objc_msgSend_link_didAddQREvent_(v135, v136, (uint64_t)v154, v137, v43);
              }
              goto LABEL_96;
            }
          }
        }
        goto LABEL_97;
      }
      double v88 = 0;
      p_linkIDToReorderedPackets = (CFMutableDictionaryRef *)&v154->_linkIDToReorderedPackets;
      if (v154->_linkIDToReorderedPackets && v79) {
        double v88 = (void *)CFDictionaryGetValue((CFDictionaryRef)v154->_linkIDToReorderedPackets, v79);
      }
      unsigned __int16 v20 = objc_msgSend_unsignedShortValue(v88, v84, v85, v86) + 1;
    }
    else
    {
      p_linkIDToReorderedPackets = (CFMutableDictionaryRef *)&v154->_linkIDToHBCounter;
    }
    if (!*p_linkIDToReorderedPackets)
    {
      CFMutableDictionaryRef v89 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v90 = *p_linkIDToReorderedPackets;
      CFMutableDictionaryRef *p_linkIDToReorderedPackets = v89;
    }
    double v91 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v84, v20, v86);
    if (v91) {
      CFDictionarySetValue(*p_linkIDToReorderedPackets, v79, v91);
    }

    double v82 = v154;
    goto LABEL_47;
  }
  if (v15 == 3)
  {
    int v42 = v20;
    if (v20)
    {
      __int16 v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      id v46 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v44, v20, v45);
      if (v46)
      {
        CFDictionarySetValue(v43, @"gl-attr-counter", v46);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB79A04();
      }

      if (!v30) {
        goto LABEL_85;
      }
    }
    else
    {
      __int16 v43 = 0;
      if (!v30)
      {
LABEL_85:
        if (v6)
        {
          double v148 = objc_msgSend_numberWithChar_(NSNumber, v39, v38, v41);
          if (v148)
          {
            CFDictionarySetValue(v43, @"gl-attr-active-probing-link-id", v148);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB798F4();
          }

          double v151 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v149, v6, v150);
          if (v151)
          {
            CFDictionarySetValue(v43, @"gl-attr-remote-relay-link-id", v151);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7986C();
          }
        }
        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v154, v39, 32771, v41, 0, v43, v155);
LABEL_96:

        goto LABEL_97;
      }
    }
    v172[0] = 0;
    v172[1] = bswap32(v30);
    double v138 = ids_monotonic_time();
    int v139 = ntpTime32(v138);
    unsigned int v141 = v139 - ntpTime32(a5);
    v172[2] = bswap32(v141);
    if (!v43) {
      __int16 v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    double v143 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v140, (uint64_t)v172, v142, 12);
    if (v143)
    {
      CFDictionarySetValue(v43, @"gl-attr-rttreport", v143);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7997C();
    }

    double v147 = objc_msgSend_GlobalLink(IDSFoundationLog, v144, v145, v146);
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)int v163 = v38;
      *(_WORD *)&v163[4] = 1024;
      *(_DWORD *)&v163[6] = v42;
      __int16 v164 = 1024;
      *(_DWORD *)uint64_t v165 = v30;
      *(_WORD *)&v165[4] = 1024;
      *(_DWORD *)&v165[6] = v30;
      *(_WORD *)double v166 = 1024;
      *(_DWORD *)&v166[2] = v141;
      _os_log_impl(&dword_19D9BE000, v147, OS_LOG_TYPE_DEFAULT, "receive rtt request on link %d (counter:%04x m:%08x), send resp (e:%08x d:%08x).", buf, 0x20u);
    }

    goto LABEL_85;
  }
LABEL_97:
}

- (void)_processCommandConnectionData:(id)a3 candidatePairToken:(id)a4
{
  __b[129] = *(id *)MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  unsigned __int16 v66 = 0;
  if (GLUtilHasValidUInt16Attr(v6, 1, &v66))
  {
    if (self->_isUPlusOneSession && !self->_receivedRemoteDeviceVersion)
    {
      uint64_t v47 = objc_msgSend_GlobalLink(IDSFoundationLog, v8, v9, v10);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__b[0]) = 0;
        _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "[U+1] no remote device version received yet. Saving incoming ConnectionData[Ack] for later", (uint8_t *)__b, 2u);
      }

      __b[0] = (id)0xAAAAAAAAAAAAAAAALL;
      objc_initWeak(__b, self);
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = sub_19DA5723C;
      aBlock[3] = &unk_1E5974260;
      objc_copyWeak(&v65, __b);
      id v63 = v6;
      id v64 = v7;
      uint64_t v48 = _Block_copy(aBlock);
      pendingCommandConnectionDataBlocuint64_t k = self->_pendingCommandConnectionDataBlock;
      self->_pendingCommandConnectionDataBlocuint64_t k = v48;

      objc_destroyWeak(&v65);
      objc_destroyWeak(__b);
    }
    else
    {
      if (objc_msgSend_command(v6, v8, v9, v10) == 4)
      {
        memset(__b, 170, 0x400uLL);
        uint64_t v61 = 0;
        if ((GLUtilHasValidBinaryDataAttr(v6, 3, __b, &v61) & 1) == 0)
        {
          double v21 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "_processCommandConnectionData failed due to invalid data.", buf, 2u);
          }
          goto LABEL_36;
        }
        id v17 = (void *)MEMORY[0x1E4F1C9E8];
        double v18 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v14, v66, v16);
        double v21 = objc_msgSend_dictionaryWithObject_forKey_(v17, v19, (uint64_t)v18, v20, @"gl-attr-counter");

        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v22, 32772, v23, 0, v21, v7);
        if (self->_allowP2P)
        {
          if (self->_remoteConnDataCounter < v66)
          {
            self->_remoteConnDataCounter = v66;
            int v27 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              int v68 = v66;
              __int16 v69 = 2048;
              uint64_t v70 = v61;
              _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "receive connection data(count:%u, length:%zdB).", buf, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v59 = v66;
                uint64_t v60 = v61;
                _IDSLogTransport(@"GL", @"IDS", @"receive connection data(count:%u, length:%zdB).");
                if (_IDSShouldLog())
                {
                  uint64_t v59 = v66;
                  uint64_t v60 = v61;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"receive connection data(count:%u, length:%zdB).");
                }
              }
            }
            unsigned int v31 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v28, v29, v30, v59, v60);
            uint64_t v34 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v32, (uint64_t)__b, v33, v61);
            double v37 = objc_msgSend_candidatesFromData_token_(v31, v35, (uint64_t)v34, v36, self->_cbuuid);

            objc_msgSend__processRemoteCandidates_(self, v38, (uint64_t)v37, v39);
            objc_msgSend__setupRelayConnectionForNetworkAddressChanges(self, v40, v41, v42);
            goto LABEL_35;
          }
          double v37 = objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v68 = v66;
            uint64_t v56 = "receive old conn data(count:%u), ignore.";
            double v57 = v37;
            uint32_t v58 = 8;
            goto LABEL_34;
          }
        }
        else
        {
          double v37 = objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            uint64_t v56 = "P2P is not allowed, skip processing remote connection data.";
            double v57 = v37;
            uint32_t v58 = 2;
LABEL_34:
            _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, v56, buf, v58);
          }
        }
LABEL_35:

LABEL_36:
        goto LABEL_37;
      }
      BOOL v44 = self->_localConnDataCounter > v66;
      double v45 = objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
      BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (v44)
      {
        if (v46)
        {
          LODWORD(__b[0]) = 67109120;
          HIDWORD(__b[0]) = v66;
          _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "receive connection data ack(count:%u), ignore.", (uint8_t *)__b, 8u);
        }
      }
      else
      {
        if (v46)
        {
          LODWORD(__b[0]) = 67109120;
          HIDWORD(__b[0]) = v66;
          _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "receive connection data ack(count:%u).", (uint8_t *)__b, 8u);
        }

        double v53 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v50, v51, v52);
        objc_msgSend_setDeliveryStatus_status_(v53, v54, (uint64_t)self->_cbuuid, v55, 2);
      }
    }
  }
  else
  {
    __int16 v43 = objc_msgSend_GlobalLink(IDSFoundationLog, v8, v9, v10);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__b[0]) = 0;
      _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "_processCommandConnectionData failed due to invalid counter.", (uint8_t *)__b, 2u);
    }
  }
LABEL_37:
}

- (void)_processCommandNominate:(id)a3 candidatePairToken:(id)a4
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_command(v6, v8, v9, v10);
  bzero(v56, 0x410uLL);
  if (objc_msgSend_getAttribute_attribute_(v6, v12, 1, v13, v56))
  {
    uint64_t v14 = v57;
    if (v7
      && (tokenToCandidatePairs = self->_tokenToCandidatePairs) != 0
      && (double v16 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7)) != 0)
    {
      id v17 = v16;
      char v18 = 0;
    }
    else
    {
      if (!v7
        || (tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (double v21 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v7)) == 0)
      {
        double v23 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          int v53 = (unsigned __int16)v11;
          __int16 v54 = 2112;
          id v55 = v7;
          _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "failed to process session command %04x due to invalid candidate pair for %@.", buf, 0x12u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to process session command %04x due to invalid candidate pair for %@.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to process session command %04x due to invalid candidate pair for %@.");
            }
          }
        }
        id v17 = 0;
        goto LABEL_31;
      }
      id v17 = v21;
      char v18 = 1;
    }
    if (v11 == 5)
    {
      if (self->_isInitiator)
      {
        double v22 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "receive nomination while being Initiator, this shouldn't happen.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"receive nomination while being Initiator, this shouldn't happen.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive nomination while being Initiator, this shouldn't happen.");
            }
          }
        }
      }
      else if (self->_nominateCount <= (int)v14)
      {
        double v35 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v53 = v14;
          _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "receive new nomination #%d.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v51 = v14;
            _IDSLogTransport(@"GL", @"IDS", @"receive new nomination #%d.");
            if (_IDSShouldLog())
            {
              uint64_t v51 = v14;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive new nomination #%d.");
            }
          }
        }
        self->_nominateCount = v14;
        objc_msgSend__updateNominatedCandidatePair_(self, v36, (uint64_t)v7, v37, v51);
        uint64_t v38 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v41 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v39, v14, v40);
        if (v41)
        {
          CFDictionarySetValue(v38, @"gl-attr-counter", v41);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB79A04();
        }

        objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v42, 32773, v43, 0, v38, v7);
        if ((v18 & 1) == 0 && (objc_msgSend_isActive(v17, v44, v45, v46) & 1) == 0)
        {
          objc_msgSend__updateDefaultCandidatePair_(self, v47, (uint64_t)v17, v48);
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v49, (uint64_t)v7, v50, 0);
        }
      }
      else
      {
        double v32 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v53 = v14;
          _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "receive old nomination #%d.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"receive old nomination #%d.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive old nomination #%d.");
            }
          }
        }
      }
    }
    else if (self->_isInitiator)
    {
      if (self->_nominateCount == v14)
      {
        uint64_t v24 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v53 = v14;
          _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "nomination #%d is accepted.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"nomination #%d is accepted.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"nomination #%d is accepted.");
            }
          }
        }
        if ((v18 & 1) == 0 && (objc_msgSend_isActive(v17, v25, v26, v27) & 1) == 0)
        {
          objc_msgSend__updateDefaultCandidatePair_(self, v28, (uint64_t)v17, v29);
          objc_msgSend__notifyDefaultUnderlyingLinkChanged_error_(self, v30, (uint64_t)v7, v31, 0);
        }
      }
      else
      {
        uint64_t v34 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          int v53 = v14;
          _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "receive nomination #%d ack, ignore.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"receive nomination #%d ack, ignore.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive nomination #%d ack, ignore.");
            }
          }
        }
      }
    }
    else
    {
      double v33 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "receive nomination ack while being Receiver, this shouldn't happen.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"receive nomination ack while being Receiver, this shouldn't happen.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive nomination ack while being Receiver, this shouldn't happen.");
          }
        }
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  double v19 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v53 = (unsigned __int16)v11;
    _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "missing nominate count in command %04x.", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"missing nominate count in command %04x.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"missing nominate count in command %04x.");
      }
    }
  }
LABEL_32:
}

- (void)_sendConnectionDataWithRemovedAddressList:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int64_t delayFirstConnectionData = self->_delayFirstConnectionData;
  if (delayFirstConnectionData < 1)
  {
    if (!delayFirstConnectionData) {
      objc_msgSend__sendNowConnectionDataWithRemovedAddressList_(self, v4, (uint64_t)v5, v6);
    }
  }
  else
  {
    double v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int64_t v9 = self->_delayFirstConnectionData;
      *(_DWORD *)buf = 134217984;
      int64_t v13 = v9;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "delaying first connection data transmission by %lu ms", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"delaying first connection data transmission by %lu ms");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"delaying first connection data transmission by %lu ms");
        }
      }
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_19DA57DA0;
    v10[3] = &unk_1E5973CF8;
    v10[4] = self;
    id v11 = v5;
    IDSTransportThreadAddBlockAfter(v10, (double)self->_delayFirstConnectionData / 1000.0);
    self->_int64_t delayFirstConnectionData = -self->_delayFirstConnectionData;
  }
}

- (void)_sendNowConnectionDataWithRemovedAddressList:(id)a3
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v99 = v4;
  if (self->_allowP2P)
  {
    double v102 = self;
    self->_delayedConnData = 1;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    id v5 = v4;
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v107, v7, v114, 16);
    id v11 = 0;
    if (v10)
    {
      uint64_t v12 = *(void *)v108;
      uint64_t v13 = 138412546;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v108 != v12) {
            objc_enumerationMutation(v5);
          }
          uint64_t v15 = *(void **)(*((void *)&v107 + 1) + 8 * i);
          double v16 = NSNumber;
          uint64_t v17 = objc_msgSend_index(v15, v8, v9, *(double *)&v13, v97, v98);
          double v20 = objc_msgSend_numberWithUnsignedInt_(v16, v18, v17, v19);
          char v23 = objc_msgSend_containsObject_(v11, v21, (uint64_t)v20, v22);

          if ((v23 & 1) == 0)
          {
            if (v11 || (id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
            {
              uint64_t v24 = NSNumber;
              uint64_t v25 = objc_msgSend_index(v15, v8, v9, *(double *)&v13);
              unsigned int v28 = objc_msgSend_numberWithUnsignedInt_(v24, v26, v25, v27);
              LOBYTE(v24) = v28 == 0;

              if ((v24 & 1) == 0)
              {
                double v32 = NSNumber;
                uint64_t v33 = objc_msgSend_index(v15, v29, v30, v31);
                double v36 = objc_msgSend_numberWithUnsignedInt_(v32, v34, v33, v35);
                CFArrayAppendValue((CFMutableArrayRef)v11, v36);
              }
            }
            double v37 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend_name(v15, v38, v39, v40);
              id v41 = (id)objc_claimAutoreleasedReturnValue();
              int v45 = objc_msgSend_index(v15, v42, v43, v44);
              *(_DWORD *)buf = 138412546;
              *(void *)uint64_t v113 = v41;
              *(_WORD *)&v113[8] = 1024;
              *(_DWORD *)&v113[10] = v45;
              _os_log_impl(&dword_19D9BE000, v37, OS_LOG_TYPE_DEFAULT, "removed if_index [%@:%d].", buf, 0x12u);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v97 = objc_msgSend_name(v15, v8, v9, *(double *)&v13);
                uint64_t v98 = objc_msgSend_index(v15, v46, v47, v48);
                _IDSLogTransport(@"GL", @"IDS", @"removed if_index [%@:%d].");

                if (_IDSShouldLog())
                {
                  uint64_t v97 = objc_msgSend_name(v15, v8, v9, *(double *)&v13, v97, v98);
                  uint64_t v98 = objc_msgSend_index(v15, v49, v50, v51);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"removed if_index [%@:%d].");
                }
              }
            }
          }
        }
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v107, *(double *)&v13, v114, 16);
      }
      while (v10);
    }

    objc_msgSend_allValues(v102->_tokenToCandidatePairs, v52, v53, v54);
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v55, (uint64_t)&v103, v56, v111, 16);
    if (!v59)
    {
      long long v100 = 0;
      goto LABEL_51;
    }
    long long v100 = 0;
    char v60 = 0;
    uint64_t v61 = *(void *)v104;
    uint64_t v62 = 67109378;
    while (1)
    {
      for (uint64_t j = 0; j != v59; ++j)
      {
        if (*(void *)v104 != v61) {
          objc_enumerationMutation(obj);
        }
        id v64 = *(void **)(*((void *)&v103 + 1) + 8 * j);
        id v65 = objc_msgSend_local(v64, v57, v58, *(double *)&v62, v97, v98);
        uint64_t v69 = objc_msgSend_index(v65, v66, v67, v68);

        uint64_t v73 = objc_msgSend_state(v64, v70, v71, v72);
        uint64_t v76 = objc_msgSend_numberWithInt_(NSNumber, v74, v69, v75);
        char v79 = objc_msgSend_containsObject_(v11, v77, (uint64_t)v76, v78);

        if ((v79 & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v64, v57, v58, *(double *)&v62))
          {
            if (v73 != 4) {
              continue;
            }
          }
          else if (v73 != 3)
          {
            continue;
          }
          uint64_t v80 = objc_msgSend_candidatePairToken(v64, v57, v58, *(double *)&v62);

          if ((v60 & 1) == 0)
          {
            double v81 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v57, v58, *(double *)&v62);
            objc_msgSend_removeData_(v81, v82, (uint64_t)v102->_cbuuid, v83);

            ++v102->_localConnDataCounter;
          }
          if (v80)
          {
            v102->_delayedConnData = 0;
            uint64_t v84 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              int localConnDataCounter = v102->_localConnDataCounter;
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)uint64_t v113 = localConnDataCounter;
              *(_WORD *)&v113[4] = 2112;
              *(void *)&v113[6] = v80;
              _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "send connection data (count:%d) using %@.", buf, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v97 = v102->_localConnDataCounter;
                uint64_t v98 = v80;
                _IDSLogTransport(@"GL", @"IDS", @"send connection data (count:%d) using %@.");
                if (_IDSShouldLog())
                {
                  uint64_t v97 = v102->_localConnDataCounter;
                  uint64_t v98 = v80;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"send connection data (count:%d) using %@.");
                }
              }
            }
            double v88 = (void *)MEMORY[0x1E4F1C9E8];
            CFMutableDictionaryRef v89 = objc_msgSend_numberWithInt_(NSNumber, v86, v102->_localConnDataCounter, v87, v97, v98);
            uint64_t v97 = @"gl-attr-counter";
            uint64_t v98 = 0;
            uint64_t v92 = objc_msgSend_dictionaryWithObjectsAndKeys_(v88, v90, (uint64_t)v89, v91);

            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v102, v93, 4, v94, 0, v92, v80);
            char v60 = 1;
            long long v100 = (void *)v80;
          }
          else
          {
            long long v100 = 0;
            char v60 = 1;
          }
        }
      }
      uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v103, *(double *)&v62, v111, 16);
      if (!v59)
      {
LABEL_51:

        if (v102->_delayedConnData)
        {
          uint64_t v96 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_DEFAULT, "delay sending connection data, no link is available.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"delay sending connection data, no link is available.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"delay sending connection data, no link is available.");
              }
            }
          }
        }

        goto LABEL_59;
      }
    }
  }
  double v95 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "P2P is not allowed, skip sending connection data.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"P2P is not allowed, skip sending connection data.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"P2P is not allowed, skip sending connection data.");
      }
    }
  }
LABEL_59:
}

- (void)_handleDisconnectTimer
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    disconnectTimer = self->_disconnectTimer;
    *(_DWORD *)buf = 134217984;
    uint64_t v12 = disconnectTimer;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "disconnect timer %p fired.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v10 = self->_disconnectTimer;
      _IDSLogTransport(@"GL", @"IDS", @"disconnect timer %p fired.");
      if (_IDSShouldLog())
      {
        uint64_t v10 = self->_disconnectTimer;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"disconnect timer %p fired.");
      }
    }
  }
  objc_msgSend__discardAllCandidatePairs_(self, v5, 0, v6, v10);
  objc_msgSend__stopDisconnectTimer(self, v7, v8, v9);
}

- (void)_handleDisconnect:(BOOL)a3
{
  objc_msgSend__discardAllCandidatePairs_(self, a2, a3, v3);
  objc_msgSend__stopDisconnectTimer(self, v5, v6, v7);
}

- (void)_startDisconnectTimer
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  disconnectTimer = self->_disconnectTimer;
  if (disconnectTimer) {
    dispatch_source_cancel(disconnectTimer);
  }
  id v4 = im_primary_queue();
  id v5 = (OS_dispatch_source *)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v4);
  uint64_t v6 = self->_disconnectTimer;
  self->_disconnectTimer = v5;

  double v7 = self->_disconnectTimer;
  dispatch_time_t v8 = dispatch_time(0, 3000000000);
  dispatch_source_set_timer(v7, v8, 0xB2D05E00uLL, 0x5F5E100uLL);
  double v9 = self->_disconnectTimer;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = sub_19DA58924;
  handler[3] = &unk_1E5973BA8;
  handler[4] = self;
  dispatch_source_set_event_handler(v9, handler);
  dispatch_resume((dispatch_object_t)self->_disconnectTimer);
  uint64_t v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = self->_disconnectTimer;
    *(_DWORD *)buf = 134217984;
    uint64_t v14 = v11;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "start disconnect timer %p.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(@"GL", @"IDS", @"start disconnect timer %p.");
    if (_IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"GL", @"start disconnect timer %p.");
    }
  }
}

- (void)_stopDisconnectTimer
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  disconnectTimer = self->_disconnectTimer;
  if (disconnectTimer)
  {
    dispatch_source_cancel(disconnectTimer);
    id v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = self->_disconnectTimer;
      *(_DWORD *)buf = 134217984;
      dispatch_time_t v8 = v5;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "stop disconnect timer %p.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"stop disconnect timer %p.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"stop disconnect timer %p.");
      }
    }
    uint64_t v6 = self->_disconnectTimer;
    self->_disconnectTimer = 0;
  }
}

- (void)_handleActivityTimer
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  double v2 = ids_monotonic_time();
  double v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    activityTimer = self->_activityTimer;
    *(_DWORD *)buf = 134218240;
    long long v159 = activityTimer;
    __int16 v160 = 2048;
    double v161 = v2;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "activity timer %p fired (%.6f).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      double v151 = v2;
      uint64_t v149 = self->_activityTimer;
      _IDSLogTransport(@"GL", @"IDS", @"activity timer %p fired (%.6f).");
      if (_IDSShouldLog())
      {
        double v151 = v2;
        uint64_t v149 = self->_activityTimer;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"activity timer %p fired (%.6f).");
      }
    }
  }
  if (self->_state != 4)
  {
    double v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_time_t v8 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      long long v159 = v8;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "GL state is [%s], stop activity timer.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v149 = (OS_dispatch_source *)_IDSLinkStateStrings[self->_state];
        _IDSLogTransport(@"GL", @"IDS", @"GL state is [%s], stop activity timer.");
        if (_IDSShouldLog())
        {
          uint64_t v149 = (OS_dispatch_source *)_IDSLinkStateStrings[self->_state];
          _IDSLogV(0, @"IDSFoundation", @"GL", @"GL state is [%s], stop activity timer.");
        }
      }
    }
    objc_msgSend__stopActivityTimer(self, v9, v10, v11, v149, *(void *)&v151);
  }
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, v149);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v154, v13, v166, 16);
  if (!v16)
  {

    return;
  }
  uint64_t v17 = *(void *)v155;
  double v18 = 0.0;
  *(void *)&double v19 = 138412546;
  do
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      if (*(void *)v155 != v17) {
        objc_enumerationMutation(obj);
      }
      double v21 = *(void **)(*((void *)&v154 + 1) + 8 * i);
      uint64_t v22 = objc_msgSend_state(v21, v14, v15, v19);
      int isActive = objc_msgSend_isActive(v21, v23, v24, v25);
      int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v21, v27, v28, v29);
      char isSelfQRSession = objc_msgSend_isSelfQRSession(v21, v31, v32, v33);
      isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v21, v35, v36, v37);
      if ((unint64_t)(v22 - 5) < 0xFFFFFFFFFFFFFFFELL) {
        char v39 = 1;
      }
      else {
        char v39 = isSelfQRSession;
      }
      if (v39) {
        continue;
      }
      char v40 = isSharedQRSession;
      id v41 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v14, v15, v19);
      int isInternalInstall = objc_msgSend_isInternalInstall(v41, v42, v43, v44);

      if (isInternalInstall)
      {
        objc_msgSend_testStartTime(v21, v46, v47, v48);
        if (v48 != 0.0)
        {
          objc_msgSend_testStartTime(v21, v46, v47, v48);
          if (v2 >= v48)
          {
            if (objc_msgSend_isQUIC(v21, v46, v47, v48)) {
              objc_msgSend_sendQUICTestRequest(v21, v49, v50, v51);
            }
            else {
              objc_msgSend_sendTestRequest_(v21, v49, 0, v51);
            }
            if ((objc_msgSend_testOptions(v21, v52, v53, v54) & 8) != 0
              && objc_msgSend_testRequestedErrorCode(v21, v46, v47, v48) == 601)
            {
              id v55 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "_handleActivityTimer: _sendUnallocbindRequest", buf, 2u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"_handleActivityTimer: _sendUnallocbindRequest");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleActivityTimer: _sendUnallocbindRequest");
                  }
                }
              }
              int isQUIC = objc_msgSend_isQUIC(v21, v56, v57, v58);
              id v64 = objc_msgSend_candidatePairToken(v21, v60, v61, v62);
              if (isQUIC) {
                objc_msgSend__sendQUICUnallocbindRequest_reason_(self, v63, (uint64_t)v64, v65, 5);
              }
              else {
                objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(self, v63, (uint64_t)v64, v65, 0, 5);
              }
            }
          }
        }
      }
      objc_msgSend_lastOutgoingPacketTime(v21, v46, v47, v48);
      double v67 = v66;
      objc_msgSend_lastIncomingPacketTime(v21, v68, v69, v66);
      double v71 = v70;
      objc_msgSend_lastStatsReport(v21, v72, v73, v70);
      double v75 = v74;
      uint64_t v80 = objc_msgSend_linkID(v21, v76, v77, v74);
      if (v80)
      {
        double v81 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v80);
        double v82 = v81;
        if (v81)
        {
          if (v67 < v81[35]) {
            double v67 = v81[35];
          }
          if (v71 < v81[36]) {
            double v71 = v81[36];
          }
          double v83 = v81[37];
          if (v75 < v83) {
            double v75 = v81[37];
          }
          objc_msgSend_setTotalPacketsSentOnLink_(v21, v78, *((unsigned int *)v81 + 76), v83);
          objc_msgSend_setTotalPacketsReceivedOnLink_(v21, v84, *((unsigned int *)v82 + 77), v85);
        }
        if (isActive)
        {
LABEL_52:
          double v86 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          double v87 = v86;
          if (v86)
          {
            if (v67 < v86[35]) {
              double v67 = v86[35];
            }
            if (v71 < v86[36]) {
              double v71 = v86[36];
            }
            if (v75 < v86[37]) {
              double v75 = v86[37];
            }
          }
          goto LABEL_62;
        }
      }
      else
      {
        double v82 = 0;
        if (isActive) {
          goto LABEL_52;
        }
      }
      double v87 = 0;
LABEL_62:
      objc_msgSend_setLastOutgoingPacketTime_(v21, v78, v79, v67);
      objc_msgSend_setLastIncomingPacketTime_(v21, v88, v89, v71);
      if (v18 < v71) {
        double v18 = v71;
      }
      if (!isRelayStunCandidatePair)
      {
        if (v67 > 0.0)
        {
          double natMappingTimeout = self->_natMappingTimeout;
          goto LABEL_80;
        }
LABEL_93:
        if (v71 > 0.0)
        {
          double v137 = v2 - v71;
          if (v137 >= 30.0 && (objc_msgSend_hbStarted(v21, v14, v15, v19) & 1) == 0)
          {
            double v138 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v19);
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              double v142 = objc_msgSend_candidatePairToken(v21, v139, v140, v141);
              *(_DWORD *)buf = 138412546;
              long long v159 = v142;
              __int16 v160 = 2048;
              double v161 = v137;
              _os_log_impl(&dword_19D9BE000, v138, OS_LOG_TYPE_DEFAULT, "%@ has no remote packet for %.6f sec, send HBR.", buf, 0x16u);
            }
            objc_msgSend__startHB_(self, v143, (uint64_t)v21, v144);
          }
        }
        continue;
      }
      unsigned int v90 = objc_msgSend_statsIntervalInSeconds(v21, v14, v15, v19);
      double v19 = v2 - v75;
      if (v2 - v75 >= (double)v90)
      {
        if (v82) {
          v82[37] = v2;
        }
        if (v87) {
          v87[37] = v2;
        }
        objc_msgSend_setLastStatsReport_(v21, v14, v15, v2);
        if (objc_msgSend_isQUIC(v21, v91, v92, v93))
        {
          linkIDToStatsData = self->_linkIDToStatsData;
          uint64_t v97 = objc_msgSend_stringWithFormat_(NSString, v94, @"%d-send", v95, v80);
          long long v100 = objc_msgSend_objectForKeyedSubscript_(linkIDToStatsData, v98, (uint64_t)v97, v99);

          double v101 = self->_linkIDToStatsData;
          long long v104 = objc_msgSend_stringWithFormat_(NSString, v102, @"%d-recv", v103, v80);
          long long v107 = objc_msgSend_objectForKeyedSubscript_(v101, v105, (uint64_t)v104, v106);

          if (v100 && v107)
          {
            objc_msgSend_unsignedIntValue(v100, v108, v109, v110);
            objc_msgSend_unsignedIntValue(v107, v111, v112, v113);
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          objc_msgSend_sendQUICStatsRequestWithOptions_(v21, v115, (uint64_t)Mutable, v116);
        }
        else
        {
          objc_msgSend_sendStatsRequest_options_(v21, v94, 0, v95, 0);
        }
      }
      if ((v40 & 1) == 0)
      {
        double natMappingTimeout = 15.0;
        if (v67 > 0.0)
        {
LABEL_80:
          double v118 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v19);
          double v119 = v2 - v67;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v125 = objc_msgSend_candidatePairToken(v21, v120, v121, v122);
            if (isActive) {
              double v127 = @"YES";
            }
            else {
              double v127 = @"NO";
            }
            int v128 = objc_msgSend_hbStarted(v21, v123, v124, v126);
            *(_DWORD *)buf = 138413058;
            double v129 = @"NO";
            if (v128) {
              double v129 = @"YES";
            }
            long long v159 = v125;
            __int16 v160 = 2048;
            double v161 = v119;
            __int16 v162 = 2112;
            int v163 = v127;
            __int16 v164 = 2112;
            uint64_t v165 = v129;
            _os_log_impl(&dword_19D9BE000, v118, OS_LOG_TYPE_DEFAULT, "%@ is idle for %.6f sec (active:%@, hbStarted:%@).", buf, 0x2Au);
          }
          if (v119 >= natMappingTimeout) {
            int v130 = 1;
          }
          else {
            int v130 = isActive;
          }
          if (v130 == 1 && (objc_msgSend_hbStarted(v21, v14, v15, v19) & 1) == 0)
          {
            objc_msgSend_setHbStarted_(v21, v14, 1, v19);
            char v134 = objc_msgSend_candidatePairToken(v21, v131, v132, v133);
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v135, 3, v136, 0, 0, v134);
          }
        }
        goto LABEL_93;
      }
    }
    uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v154, v19, v166, 16);
  }
  while (v16);

  if (v18 != 0.0 && v2 - v18 >= 60.0)
  {
    uint64_t v145 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v159) = 60;
      _os_log_impl(&dword_19D9BE000, v145, OS_LOG_TYPE_DEFAULT, "No remote packets for %d seconds.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v150 = 60;
      _IDSLogTransport(@"GL", @"IDS", @"No remote packets for %d seconds.");
      if (_IDSShouldLog())
      {
        uint64_t v150 = 60;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"No remote packets for %d seconds.");
      }
    }
    objc_msgSend__handleNoRemotePacket(self, v146, v147, v148, v150);
  }
}

- (void)_startActivityTimer
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  activityTimer = self->_activityTimer;
  if (activityTimer) {
    dispatch_source_cancel(activityTimer);
  }
  id v4 = im_primary_queue();
  id v5 = (OS_dispatch_source *)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v4);
  uint64_t v6 = self->_activityTimer;
  self->_activityTimer = v5;

  double v7 = self->_activityTimer;
  dispatch_time_t v8 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v7, v8, 0x12A05F200uLL, 0x5F5E100uLL);
  uint64_t v9 = self->_activityTimer;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = sub_19DA59758;
  handler[3] = &unk_1E5973BA8;
  handler[4] = self;
  dispatch_source_set_event_handler(v9, handler);
  dispatch_resume((dispatch_object_t)self->_activityTimer);
  uint64_t v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = self->_activityTimer;
    *(_DWORD *)buf = 134217984;
    uint64_t v14 = v11;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "start activity timer %p.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    _IDSLogTransport(@"GL", @"IDS", @"start activity timer %p.");
    if (_IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"GL", @"start activity timer %p.");
    }
  }
}

- (void)_stopActivityTimer
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  activityTimer = self->_activityTimer;
  if (activityTimer)
  {
    dispatch_source_cancel(activityTimer);
    id v4 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = self->_activityTimer;
      *(_DWORD *)buf = 134217984;
      dispatch_time_t v8 = v5;
      _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "stop activity timer %p.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"stop activity timer %p.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"stop activity timer %p.");
      }
    }
    uint64_t v6 = self->_activityTimer;
    self->_activityTimer = 0;
  }
}

- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4 excludeLocalAddress:(sockaddr *)a5
{
  BOOL v5 = a4;
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  double v103 = (NSMutableArray *)a3;
  if (!self->_allowP2P) {
    goto LABEL_92;
  }
  uint64_t v7 = 448;
  if (v5) {
    uint64_t v7 = 440;
  }
  id v8 = *(id *)((char *)&self->super.isa + v7);
  BOOL v106 = v5;
  long long v105 = self;
  id v98 = v8;
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v12 = objc_msgSend_external(v103, v9, v10, v11);
  int hasNATIPv4External = objc_msgSend_hasNATIPv4External(v103, v13, v14, v15);
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  obuint64_t j = self->_localCandidateList;
  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v17, (uint64_t)&v115, v18, v127, 16);
  if (!v21)
  {
LABEL_17:

    id v8 = v98;
LABEL_18:
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    obuint64_t j = (NSMutableArray *)v8;
    uint64_t v104 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v31, (uint64_t)&v111, v32, v126, 16);
    if (!v104) {
      goto LABEL_91;
    }
    BOOL v33 = v5;
    if (!a5) {
      BOOL v33 = 0;
    }
    BOOL v100 = v33;
    uint64_t v102 = *(void *)v112;
    while (1)
    {
      for (uint64_t i = 0; i != v104; ++i)
      {
        if (*(void *)v112 != v102) {
          objc_enumerationMutation(obj);
        }
        double v35 = *(void **)(*((void *)&v111 + 1) + 8 * i);
        if (v106) {
          uint64_t v36 = *(NSMutableArray **)(*((void *)&v111 + 1) + 8 * i);
        }
        else {
          uint64_t v36 = v103;
        }
        if (v106) {
          double v37 = v103;
        }
        else {
          double v37 = *(NSMutableArray **)(*((void *)&v111 + 1) + 8 * i);
        }
        uint64_t v38 = v36;
        char v39 = v37;
        if (objc_msgSend_isCompatibleWithStunCandidate_(v38, v40, (uint64_t)v39, v41))
        {
          if (!v100 || (uint64_t v45 = objc_msgSend_address(v38, v42, v43, v44), !IsSameSA(v45, (uint64_t)a5)))
          {
            if (!v106)
            {
              uint64_t v46 = objc_msgSend_external(v35, v42, v43, v44);
              int v50 = objc_msgSend_hasNATIPv4External(v35, v47, v48, v49);
              long long v109 = 0u;
              long long v110 = 0u;
              long long v107 = 0u;
              long long v108 = 0u;
              double v51 = v105->_localCandidateList;
              uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v107, v53, v125, 16);
              if (v56)
              {
                uint64_t v58 = *(void *)v108;
                while (2)
                {
                  for (uint64_t j = 0; j != v56; ++j)
                  {
                    if (*(void *)v108 != v58) {
                      objc_enumerationMutation(v51);
                    }
                    char v60 = *(void **)(*((void *)&v107 + 1) + 8 * j);
                    uint64_t v61 = objc_msgSend_address(v60, v54, v55, v57, v95, v96, v97);
                    if (v50)
                    {
                      if (IsSameIP(v61, v46)) {
                        goto LABEL_65;
                      }
                    }
                    else if (IsSameSA(v61, v46))
                    {
LABEL_65:
                      double v88 = OSLogHandleForTransportCategory();
                      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        unsigned int v120 = v38;
                        __int16 v121 = 2112;
                        double v122 = v39;
                        __int16 v123 = 2112;
                        uint64_t v124 = v60;
                        _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)", buf, 0x20u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          uint64_t v96 = v39;
                          uint64_t v97 = v60;
                          double v95 = v38;
                          _IDSLogTransport(@"GL", @"IDS", @"skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)");
                          if (_IDSShouldLog())
                          {
                            uint64_t v96 = v39;
                            uint64_t v97 = v60;
                            double v95 = v38;
                            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip invalid local-remote candidate pair %@-%@ (due to local candidate %@)");
                          }
                        }
                      }
                      goto LABEL_81;
                    }
                  }
                  uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v54, (uint64_t)&v107, v57, v125, 16);
                  if (v56) {
                    continue;
                  }
                  break;
                }
              }
            }
            objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v42, (uint64_t)v38, v44, v39, v105->_cbuuid, v95);
            double v51 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            if (v105->_isInitiator)
            {
              double v65 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v62, v63, v64);
              objc_msgSend_setLinkUUID_(v51, v66, (uint64_t)v65, v67);
            }
            if ((objc_msgSend_hasNATIPv4Address(v38, v62, v63, v64) & 1) == 0
              && objc_msgSend_hasNATIPv4External(v39, v68, v69, v70))
            {
              double v71 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_candidatePairToken(v51, v72, v73, v74);
                double v75 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                unsigned int v120 = v75;
                _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "skip stun check pair %@.", buf, 0xCu);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  double v95 = objc_msgSend_candidatePairToken(v51, v76, v77, v78);
                  _IDSLogTransport(@"GL", @"IDS", @"skip stun check pair %@.");

                  if (_IDSShouldLog())
                  {
                    double v95 = objc_msgSend_candidatePairToken(v51, v79, v80, v81, v95);
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"skip stun check pair %@.");
                  }
                }
              }
              goto LABEL_81;
            }
            objc_msgSend_candidatePairToken(v51, v68, v69, v70);
            double v82 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            double v83 = v105;
            CFDictionaryRef tokenToStunCheckPairs = (const __CFDictionary *)v105->_tokenToStunCheckPairs;
            if (tokenToStunCheckPairs && v82)
            {
              if (!CFDictionaryGetValue(tokenToStunCheckPairs, v82))
              {
                double v83 = v105;
                CFDictionaryRef tokenToStunCheckPairs = (const __CFDictionary *)v105->_tokenToStunCheckPairs;
                goto LABEL_61;
              }
            }
            else
            {
LABEL_61:
              if (!tokenToStunCheckPairs)
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                double v86 = v105->_tokenToStunCheckPairs;
                v105->_CFDictionaryRef tokenToStunCheckPairs = (NSMutableDictionary *)Mutable;

                double v83 = v105;
              }
              double v87 = v51;
              if (v87)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)v83->_tokenToStunCheckPairs, v82, v87);
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                unsigned int v120 = v82;
                __int16 v121 = 2080;
                double v122 = "_tokenToStunCheckPairs";
                _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
              }

              uint64_t v89 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                unsigned int v120 = v87;
                _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "add stun check pair %@.", buf, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  double v95 = v87;
                  _IDSLogTransport(@"GL", @"IDS", @"add stun check pair %@.");
                  if (_IDSShouldLog())
                  {
                    double v95 = v87;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"add stun check pair %@.");
                  }
                }
              }
              objc_msgSend__startStunCheck_(v105, v90, (uint64_t)v82, v91, v95);
            }

LABEL_81:
          }
        }
      }
      uint64_t v104 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v92, (uint64_t)&v111, v93, v126, 16);
      if (!v104) {
        goto LABEL_91;
      }
    }
  }
  uint64_t v23 = *(void *)v116;
LABEL_7:
  uint64_t v24 = 0;
  while (1)
  {
    if (*(void *)v116 != v23) {
      objc_enumerationMutation(obj);
    }
    double v25 = *(void **)(*((void *)&v115 + 1) + 8 * v24);
    uint64_t v26 = objc_msgSend_address(v25, v19, v20, v22);
    if (hasNATIPv4External)
    {
      if (IsSameIP(v26, v12)) {
        break;
      }
      goto LABEL_15;
    }
    if (IsSameSA(v26, v12)) {
      break;
    }
    uint64_t v30 = objc_msgSend_external(v25, v27, v28, v29);
    if (IsSameIP(v30, v12)) {
      break;
    }
LABEL_15:
    if (v21 == ++v24)
    {
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v19, (uint64_t)&v115, v22, v127, 16);
      if (!v21) {
        goto LABEL_17;
      }
      goto LABEL_7;
    }
  }
  double v94 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    unsigned int v120 = v103;
    __int16 v121 = 2112;
    double v122 = (const char *)v25;
    _os_log_impl(&dword_19D9BE000, v94, OS_LOG_TYPE_DEFAULT, "skip invalid remote candidate %@ (due to local candidate %@)", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"skip invalid remote candidate %@ (due to local candidate %@)");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"skip invalid remote candidate %@ (due to local candidate %@)");
      }
    }
  }
LABEL_91:

LABEL_92:
}

- (void)_addStunCheckPair:(id)a3 isRemoteCandidate:(BOOL)a4
{
  objc_msgSend__addStunCheckPair_isRemoteCandidate_excludeLocalAddress_(self, a2, (uint64_t)a3, v4, a4, 0);
}

- (BOOL)_addCandidate:(id)a3 isRemoteCandidate:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v10 = v6;
  if (!v6 || (objc_msgSend_isLinkLocalStunCandidate(v6, v7, v8, v9) & 1) != 0) {
    goto LABEL_3;
  }
  if (v4)
  {
    if (objc_msgSend_containsObject_(self->_remoteCandidateList, v11, (uint64_t)v10, v13))
    {
LABEL_3:
      char v14 = 0;
      goto LABEL_4;
    }
    remoteCandidateList = self->_remoteCandidateList;
    if (remoteCandidateList
      || (uint64_t v17 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]),
          double v18 = self->_remoteCandidateList,
          self->_remoteCandidateList = v17,
          v18,
          (remoteCandidateList = self->_remoteCandidateList) != 0))
    {
      CFArrayAppendValue((CFMutableArrayRef)remoteCandidateList, v10);
    }
    double v19 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v48 = v10;
      _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "add remote candidate %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"add remote candidate %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"add remote candidate %@.");
        }
      }
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v20 = objc_msgSend_index(v10, v11, v12, v13);
    double v25 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(self, v21, v20, v22);
    if (self->_cellInterfaceName
      && objc_msgSend_isCellularStunCandidate(v10, v23, v24, v26)
      && (objc_msgSend_isEqualToIgnoringCase_(self->_cellInterfaceName, v23, (uint64_t)v25, v26) & 1) == 0)
    {
      uint64_t v45 = objc_msgSend_GlobalLink(IDSFoundationLog, v23, v27, v26);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        cellInterfaceName = self->_cellInterfaceName;
        *(_DWORD *)buf = 138412546;
        uint64_t v48 = v25;
        __int16 v49 = 2112;
        int v50 = cellInterfaceName;
        _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - currentInterfaceName %@ _cellInterfaceName %@ skip adding currentInterfaceName to _localCandidateList", buf, 0x16u);
      }

      goto LABEL_3;
    }
    char v30 = objc_msgSend_containsObject_(self->_localCandidateList, v23, (uint64_t)v10, v26);
    if ((v30 & 1) == 0)
    {
      uint64_t v32 = objc_msgSend_index(v10, v28, v29, v31);
      if (objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v33, v32, v34))
      {
        int v38 = objc_msgSend_linkFlags(v10, v35, v36, v37);
        objc_msgSend_setLinkFlags_(v10, v39, v38 | 4u, v40);
      }
      localCandidateList = self->_localCandidateList;
      if (localCandidateList
        || (double v42 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]),
            uint64_t v43 = self->_localCandidateList,
            self->_localCandidateList = v42,
            v43,
            (localCandidateList = self->_localCandidateList) != 0))
      {
        CFArrayAppendValue((CFMutableArrayRef)localCandidateList, v10);
      }
      double v44 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v48 = v10;
        _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "add local candidate %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"add local candidate %@.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"add local candidate %@.");
          }
        }
      }
    }

    char v14 = v30 ^ 1;
  }
LABEL_4:

  return v14;
}

- (BOOL)_hasActiveAllocbindFailoverTimerForSessionID:(id)a3
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v8 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  double v9 = v8;
  if (v4)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v10 = v8;
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v41, v12, v47, 16);
    if (v15)
    {
      uint64_t v17 = *(void *)v42;
      while (2)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v42 != v17) {
            objc_enumerationMutation(v10);
          }
          double v19 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          uint64_t v20 = objc_msgSend_sessionID(v19, v13, v14, v16);
          int isEqualToString = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v4, v22);

          if (isEqualToString)
          {
            uint64_t v24 = objc_msgSend_allocbindFailoverTimer(v19, v13, v14, v16);

            if (v24)
            {
              uint64_t v27 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                double v31 = objc_msgSend_allocbindFailoverTimer(v19, v28, v29, v30);
                *(_DWORD *)buf = 134217984;
                uint64_t v46 = v31;
                _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "found active allocbind failover timer: %p", buf, 0xCu);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  char v39 = objc_msgSend_allocbindFailoverTimer(v19, v32, v33, v34);
                  _IDSLogTransport(@"GL", @"IDS", @"found active allocbind failover timer: %p");

                  if (_IDSShouldLog())
                  {
                    double v40 = objc_msgSend_allocbindFailoverTimer(v19, v35, v36, v37, v39);
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"found active allocbind failover timer: %p");
                  }
                }
              }

              BOOL v26 = 1;
              goto LABEL_26;
            }
          }
        }
        uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v13, (uint64_t)&v41, v16, v47, 16);
        if (v15) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    double v25 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "Couldn't find active allocbind failover timer due to invalid relaySessionID", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Couldn't find active allocbind failover timer due to invalid relaySessionID");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Couldn't find active allocbind failover timer due to invalid relaySessionID");
        }
      }
    }
  }
  BOOL v26 = 0;
LABEL_26:

  return v26;
}

- (void)_startAllocbindFailoverTimerOnCandidatePair:(id)a3 delay:(int)a4
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v10 = objc_msgSend_local(v6, v7, v8, v9);
  int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v10, v11, v12, v13);
  if (isCellularStunCandidate) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }

  double v19 = objc_msgSend_allocbindFailoverTimer(v6, v16, v17, v18);
  if (v19)
  {
  }
  else
  {
    if (self->_reduceCellularUsage) {
      char v22 = isCellularStunCandidate;
    }
    else {
      char v22 = 1;
    }
    if (v22)
    {
      uint64_t v23 = objc_msgSend_weakRefWithObject_(MEMORY[0x1E4F59E30], v20, (uint64_t)self, v21);
      uint64_t v24 = v23;
      if (a4 < 1)
      {
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = sub_19DA5AE6C;
        v55[3] = &unk_1E59742D8;
        uint64_t v56 = v23;
        id v57 = v6;
        int v58 = v15;
        IDSTransportThreadAddBlock(v55);
        long long v42 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = objc_msgSend_count(self->_tokenToCandidatePairs, v43, v44, v45);
          *(_DWORD *)buf = 134217984;
          uint64_t v65 = v46;
          _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "start allocbind failover now, _tokenToCandidatePairs: %lu", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v53 = objc_msgSend_count(self->_tokenToCandidatePairs, v47, v48, v49);
            _IDSLogTransport(@"GL", @"IDS", @"start allocbind failover now, _tokenToCandidatePairs: %lu");
            if (_IDSShouldLog())
            {
              objc_msgSend_count(self->_tokenToCandidatePairs, v50, v51, v52, v53);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"start allocbind failover now, _tokenToCandidatePairs: %lu");
            }
          }
        }

        double v30 = v56;
      }
      else
      {
        double v25 = im_primary_queue();
        BOOL v26 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v25);

        objc_msgSend_setAllocbindFailoverTimer_(v6, v27, (uint64_t)v26, v28);
        dispatch_time_t v29 = dispatch_time(0, 1000000000 * a4);
        dispatch_source_set_timer(v26, v29, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        handler[2] = sub_19DA5AD5C;
        handler[3] = &unk_1E59742B0;
        id v60 = v24;
        id v61 = v6;
        double v30 = v26;
        double v62 = v30;
        int v63 = v15;
        dispatch_source_set_event_handler(v30, handler);
        dispatch_resume(v30);
        double v31 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = objc_msgSend_count(self->_tokenToCandidatePairs, v32, v33, v34);
          *(_DWORD *)buf = 134218240;
          uint64_t v65 = (uint64_t)v30;
          __int16 v66 = 2048;
          uint64_t v67 = v35;
          _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, "start allocbind failover timer %p, _tokenToCandidatePairs: %lu", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v54 = objc_msgSend_count(self->_tokenToCandidatePairs, v36, v37, v38);
            _IDSLogTransport(@"GL", @"IDS", @"start allocbind failover timer %p, _tokenToCandidatePairs: %lu");
            if (_IDSShouldLog())
            {
              objc_msgSend_count(self->_tokenToCandidatePairs, v39, v40, v41, v30, v54);
              _IDSLogV(0, @"IDSFoundation", @"GL", @"start allocbind failover timer %p, _tokenToCandidatePairs: %lu");
            }
          }
        }
      }
    }
  }
}

- (void)_handleAllocbindFailoverTimerWithTransportScoreCards:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5
{
  BOOL v5 = *(void **)&a5;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v11 = a4;
  if (v8)
  {
    int isConnectToQRIPv6Enabled = objc_msgSend_isConnectToQRIPv6Enabled(v8, v9, v10, v12);
    isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v8, v14, v15, v16);
    double v21 = objc_msgSend_sharedInstance(IDSServerBag, v18, v19, v20);
    uint64_t v24 = objc_msgSend_objectForKey_(v21, v22, @"disable-transport-score-cards", v23);
    int v28 = objc_msgSend_BOOLValue(v24, v25, v26, v27);

    uint64_t v32 = isConnectToQRIPv6Enabled ^ 1u;
    if (v28 & v32 & 1) != 0 || ((isSharedQRSession ^ 1))
    {
      uint64_t v46 = objc_msgSend_sessionInfoDict(v8, v29, v30, v31);
      objc_msgSend__handleAllocbindFailoverTimer_failoverTimerOnCandidatePair_onInterface_(self, v47, (uint64_t)v46, v48, v11, v5);
    }
    else if (self->_state < 4)
    {
      double v49 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v53 = objc_msgSend_count(self->_tokenToCandidatePairs, v50, v51, v52);
        uint64_t v57 = objc_msgSend_count(self->_interfaceAddressArray, v54, v55, v56);
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v53;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v5;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v57;
        _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu", buf, 0x26u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v61 = objc_msgSend_count(self->_tokenToCandidatePairs, v58, v59, v60);
          long long v113 = v5;
          uint64_t v114 = objc_msgSend_count(self->_interfaceAddressArray, v62, v63, v64);
          id v108 = v11;
          uint64_t v111 = v61;
          _IDSLogTransport(@"GL", @"IDS", @"handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu");
          if (_IDSShouldLog())
          {
            uint64_t v65 = objc_msgSend_count(self->_tokenToCandidatePairs, v58, v59, v60, v11, v61, v5, v114);
            long long v113 = v5;
            uint64_t v114 = objc_msgSend_count(self->_interfaceAddressArray, v66, v67, v68);
            id v108 = v11;
            uint64_t v111 = v65;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu");
          }
        }
      }
      uint64_t v69 = objc_msgSend_sessionID(v8, v58, v59, v60, v108, v111, v113, v114);
      int TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell = objc_msgSend__findTriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell_(self, v70, (uint64_t)v69, v71, v5 == 1, v5 == 2);

      if (TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell)
      {
        uint64_t v73 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleAllocbindFailoverTimerWithTransportScoreCards: no need to try!");
            }
          }
        }
      }
      else
      {
        double v74 = objc_alloc_init(IDSQuickRelaySessionInfo);
        double v78 = objc_msgSend_sessionInfoDict(v8, v75, v76, v77);
        uint64_t v81 = objc_msgSend_parseSessionInfo_(v74, v79, (uint64_t)v78, v80);

        if (v81)
        {
          double v85 = objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v84);
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v89 = objc_msgSend_sessionInfoDict(v8, v86, v87, v88);
            *(_DWORD *)buf = 134218242;
            *(void *)&uint8_t buf[4] = v81;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v89;
            _os_log_impl(&dword_19D9BE000, v85, OS_LOG_TYPE_DEFAULT, "error code = %ld - parsing sessionInfo: %@", buf, 0x16u);
          }
        }
        else
        {
          objc_msgSend_serverAddressIPv6(v74, v82, v83, v84);
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v122 = 0u;
          memset(buf, 0, sizeof(buf));
          __memcpy_chk();
          BOOL valid = IsValidSA((BOOL)buf);
          id v115 = 0;
          uint64_t v116 = 0;
          double v94 = objc_msgSend_sessionID(v8, v91, v92, v93);
          LOBYTE(v109) = valid;
          objc_msgSend__selectStunTransport_andInterfaceAddress_forRelaySessionID_preferIPv4_wantOnlyCell_wantOnlyNonCell_isValidSA_(self, v95, (uint64_t)&v116, v96, &v115, v94, v32, v5 == 1, v5 == 2, v109);
          id v97 = v115;

          if (v97)
          {
            id v98 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long v117 = 67109378;
              int v118 = (int)v5;
              __int16 v119 = 2112;
              id v120 = v97;
              _os_log_impl(&dword_19D9BE000, v98, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@", v117, 0x12u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                long long v110 = v5;
                id v112 = v97;
                _IDSLogTransport(@"GL", @"IDS", @"_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@");
                if (_IDSShouldLog())
                {
                  long long v110 = v5;
                  id v112 = v97;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleAllocbindFailoverTimerWithTransportScoreCards interface: %u, newLocalAddress: %@");
                }
              }
            }
            uint64_t v102 = objc_msgSend_sessionInfoDict(v8, v99, v100, v101, v110, v112);
            objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, v103, (uint64_t)v102, v104, v97, 1, 1, self->_connectReadyHandler, 0);
          }
          else
          {
            long long v107 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long v117 = 0;
              _os_log_impl(&dword_19D9BE000, v107, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!", v117, 2u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                _IDSLogTransport(@"GL", @"IDS", @"_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!");
                if (_IDSShouldLog()) {
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleAllocbindFailoverTimerWithTransportScoreCards: no interface available to connect!");
                }
              }
            }
          }
          objc_msgSend__stopAllocbindFailoverTimer_(self, v105, (uint64_t)v11, v106);
        }
      }
    }
    else
    {
      uint64_t v33 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = _IDSLinkStateStrings[self->_state];
        double v38 = objc_msgSend_sessionInfoDict(v8, v34, v35, v36);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v38;
        _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p", buf, 0x20u);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          long long v42 = _IDSLinkStateStrings[self->_state];
          objc_msgSend_sessionInfoDict(v8, v39, v41, v40);
          v113 = uint64_t v111 = (uint64_t)v42;
          id v108 = v11;
          _IDSLogTransport(@"GL", @"IDS", @"Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p");

          if (_IDSShouldLog())
          {
            uint64_t v44 = _IDSLinkStateStrings[self->_state];
            objc_msgSend_sessionInfoDict(v8, v39, v43, v40, v11, v42, v113);
            v113 = uint64_t v111 = (uint64_t)v44;
            id v108 = v11;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p");
          }
        }
      }
      objc_msgSend__stopAllocbindFailoverTimer_(self, v39, 0, v40, v108, v111, v113);
    }
  }
  else
  {
    double v45 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleAllocbindFailoverTimerWithTransportScoreCards: invalid candidatePair!");
        }
      }
    }
  }
}

- (BOOL)_findTriedCandidatePairForSession:(id)a3 wantOnlyCell:(BOOL)a4 wantOnlyNonCell:(BOOL)a5
{
  int v5 = a5;
  int v6 = a4;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  if (v6 == v5)
  {
    BOOL v36 = 0;
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v11 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, 0.0, 0);
    uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v38, v13, v42, 16);
    if (v14)
    {
      uint64_t v18 = v14;
      uint64_t v19 = *(void *)v39;
      while (2)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v39 != v19) {
            objc_enumerationMutation(v11);
          }
          double v21 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          if (objc_msgSend_isRelayStunCandidatePair(v21, v15, v16, v17))
          {
            char v22 = objc_msgSend_sessionID(v21, v15, v16, v17);
            int isEqual = objc_msgSend_isEqual_(v22, v23, (uint64_t)v10, v24);

            if (isEqual)
            {
              if (objc_msgSend_state(v21, v15, v16, v17)
                && (unint64_t)objc_msgSend_state(v21, v15, v16, v17) <= 4)
              {
                if (v6)
                {
                  uint64_t v26 = objc_msgSend_local(v21, v15, v16, v17);
                  char isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v26, v27, v28, v29);

                  if (isCellularStunCandidate) {
                    goto LABEL_19;
                  }
                }
                if (v5)
                {
                  double v31 = objc_msgSend_local(v21, v15, v16, v17);
                  int v35 = objc_msgSend_isCellularStunCandidate(v31, v32, v33, v34);

                  if (!v35)
                  {
LABEL_19:
                    BOOL v36 = 1;
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v38, v17, v42, 16);
        if (v18) {
          continue;
        }
        break;
      }
    }
    BOOL v36 = 0;
LABEL_20:
  }
  return v36;
}

- (void)_stopAllocbindFailoverTimer:(id)a3
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v82 = a3;
  uint64_t v81 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
  if (v82)
  {
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    id v7 = v81;
    uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v83, v9, v95, 16);
    if (v12)
    {
      uint64_t v14 = *(void *)v84;
      while (2)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v84 != v14) {
            objc_enumerationMutation(v7);
          }
          uint64_t v16 = *(void **)(*((void *)&v83 + 1) + 8 * i);
          objc_msgSend_allocbindFailoverTimer(v16, v10, v11, v13);
          id v17 = (id)objc_claimAutoreleasedReturnValue();
          BOOL v18 = v17 == v82;

          if (v18)
          {
            uint64_t v19 = objc_msgSend_allocbindFailoverTimer(v16, v10, v11, v13);
            dispatch_source_cancel(v19);

            double v20 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v24 = objc_msgSend_count(self->_tokenToCandidatePairs, v21, v22, v23);
              *(_DWORD *)buf = 134218240;
              uint64_t v92 = (uint64_t)v82;
              __int16 v93 = 2048;
              uint64_t v94 = v24;
              _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu", buf, 0x16u);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v79 = v82;
                uint64_t v80 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v27, v26);
                _IDSLogTransport(@"GL", @"IDS", @"stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu");
                if (_IDSShouldLog())
                {
                  uint64_t v29 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v28, v26, v82, v80);
                  uint64_t v79 = v82;
                  uint64_t v80 = v29;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"stop specified allocbind failover timer %p, _tokenToCandidatePairs: %lu");
                }
              }
            }
            objc_msgSend_setAllocbindFailoverTimer_(v16, v25, 0, v26, v79, v80);
            uint64_t v33 = objc_msgSend_sessionID(v16, v30, v31, v32);
            if (v33)
            {
              BOOL v34 = self->_connectingCandidatePairSessionInfo == 0;

              if (!v34)
              {
                connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
                long long v39 = objc_msgSend_sessionID(v16, v35, v36, v37);
                CFDictionaryRemoveValue((CFMutableDictionaryRef)connectingCandidatePairSessionInfo, v39);
              }
            }
            goto LABEL_43;
          }
        }
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v83, v13, v95, 16);
        if (v12) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    long long v40 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v92 = objc_msgSend_count(v81, v41, v42, v43);
      _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "stop all active allocbind failover timer. # candidatePairs = %lu", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v79 = objc_msgSend_count(v81, v44, v45, v46);
        _IDSLogTransport(@"GL", @"IDS", @"stop all active allocbind failover timer. # candidatePairs = %lu");
        if (_IDSShouldLog())
        {
          uint64_t v79 = objc_msgSend_count(v81, v47, v48, v49, v79);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"stop all active allocbind failover timer. # candidatePairs = %lu");
        }
      }
    }
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    id v50 = v81;
    uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v87, v52, v96, 16);
    if (v55)
    {
      uint64_t v56 = *(void *)v88;
      uint64_t v57 = 134217984;
      do
      {
        for (uint64_t j = 0; j != v55; ++j)
        {
          if (*(void *)v88 != v56) {
            objc_enumerationMutation(v50);
          }
          uint64_t v59 = *(void **)(*((void *)&v87 + 1) + 8 * j);
          double v60 = objc_msgSend_allocbindFailoverTimer(v59, v53, v54, *(double *)&v57, v79);

          if (v60)
          {
            uint64_t v61 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v65 = objc_msgSend_allocbindFailoverTimer(v59, v62, v63, v64);
              *(_DWORD *)buf = 134217984;
              uint64_t v92 = (uint64_t)v65;
              _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "stop allocbind failover timer: %p", buf, 0xCu);
            }
            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v79 = objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68);
                _IDSLogTransport(@"GL", @"IDS", @"stop allocbind failover timer: %p");

                if (_IDSShouldLog())
                {
                  uint64_t v79 = objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68, v79);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"stop allocbind failover timer: %p");
                }
              }
            }
            uint64_t v69 = objc_msgSend_allocbindFailoverTimer(v59, v66, v67, v68, v79);
            dispatch_source_cancel(v69);

            objc_msgSend_setAllocbindFailoverTimer_(v59, v70, 0, v71);
            double v75 = objc_msgSend_sessionID(v59, v72, v73, v74);
            if (v75)
            {
              BOOL v76 = self->_connectingCandidatePairSessionInfo == 0;

              if (!v76)
              {
                double v77 = self->_connectingCandidatePairSessionInfo;
                double v78 = objc_msgSend_sessionID(v59, v53, v54, *(double *)&v57);
                CFDictionaryRemoveValue((CFMutableDictionaryRef)v77, v78);
              }
            }
          }
        }
        uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v53, (uint64_t)&v87, *(double *)&v57, v96, 16);
      }
      while (v55);
    }
  }
LABEL_43:
}

- (void)_handleAllocbindFailoverTimer:(id)a3 failoverTimerOnCandidatePair:(id)a4 onInterface:(int)a5
{
  uint64_t v5 = *(char **)&a5;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  id v8 = (char *)a3;
  id v95 = a4;
  double v9 = objc_alloc_init(IDSQuickRelaySessionInfo);
  uint64_t v94 = v9;
  if (objc_msgSend_parseSessionInfo_(v9, v10, (uint64_t)v8, v11))
  {
    p_unint64_t state = &self->_state;
LABEL_3:
    uint64_t v16 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = _IDSLinkStateStrings[*p_state];
      *(_DWORD *)buf = 134218498;
      id v107 = v95;
      __int16 v108 = 2080;
      *(void *)uint64_t v109 = v17;
      *(_WORD *)&v109[8] = 2048;
      *(void *)&v109[10] = v8;
      _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        long long v90 = _IDSLinkStateStrings[*p_state];
        double v91 = v8;
        long long v89 = (char *)v95;
        _IDSLogTransport(@"GL", @"IDS", @"Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p");
        if (_IDSShouldLog())
        {
          long long v90 = _IDSLinkStateStrings[*p_state];
          double v91 = v8;
          long long v89 = (char *)v95;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Return: handling allocbind failover timer %p, _unint64_t state = %s, relaySessionInfo = %p");
        }
      }
    }
    objc_msgSend__stopAllocbindFailoverTimer_(self, v18, 0, v19, v89, v90, v91);
    goto LABEL_10;
  }
  double v20 = objc_msgSend_relaySessionID(v9, v12, v13, v14);
  int TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell = objc_msgSend__findTriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell_(self, v21, (uint64_t)v20, v22, v5 == 1, v5 == 2);

  p_unint64_t state = &self->_state;
  if (self->_state > 3 || TriedCandidatePairForSession_wantOnlyCell_wantOnlyNonCell) {
    goto LABEL_3;
  }
  uint64_t v24 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = objc_msgSend_count(self->_tokenToCandidatePairs, v25, v26, v27);
    uint64_t v32 = objc_msgSend_count(self->_interfaceAddressArray, v29, v30, v31);
    *(_DWORD *)buf = 134218752;
    id v107 = v95;
    __int16 v108 = 2048;
    *(void *)uint64_t v109 = v28;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v5;
    *(_WORD *)&v109[14] = 2048;
    *(void *)&v109[16] = v32;
    _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v36 = objc_msgSend_count(self->_tokenToCandidatePairs, v33, v34, v35);
      double v91 = v5;
      uint64_t v92 = objc_msgSend_count(self->_interfaceAddressArray, v37, v38, v39);
      long long v89 = (char *)v95;
      long long v90 = (char *)v36;
      _IDSLogTransport(@"GL", @"IDS", @"handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu");
      if (_IDSShouldLog())
      {
        uint64_t v43 = objc_msgSend_count(self->_tokenToCandidatePairs, v40, v41, v42, v95, v36, v5, v92);
        double v91 = v5;
        uint64_t v92 = objc_msgSend_count(self->_interfaceAddressArray, v44, v45, v46);
        long long v89 = (char *)v95;
        long long v90 = (char *)v43;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"handling allocbind failover timer: %p, _tokenToCandidatePairs: %lu, on interface: %d, [_interfaceAddressArray count] : %lu");
      }
    }
  }
  uint64_t v47 = GLUtilGetRemainingInterfaces(self->_interfaceAddressArray);
  id v93 = v47;
  if (!v47) {
    goto LABEL_71;
  }
  if (!objc_msgSend_count(v47, v48, v49, v50))
  {
    id v82 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v82, OS_LOG_TYPE_DEFAULT, "Device does not have a second interface to retry", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"Device does not have a second interface to retry");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Device does not have a second interface to retry");
        }
      }
    }
    goto LABEL_70;
  }
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  id v51 = v93;
  uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v100, v53, v105, 16);
  if (v56)
  {
    uint64_t v58 = *(void *)v101;
    while (2)
    {
      for (uint64_t i = 0; i != v56; ++i)
      {
        if (*(void *)v101 != v58) {
          objc_enumerationMutation(v51);
        }
        double v60 = *(void **)(*((void *)&v100 + 1) + 8 * i);
        uint64_t v61 = objc_msgSend_address(v60, v54, v55, v57, v89, v90, v91, v92);
        int v65 = *(unsigned __int8 *)(objc_msgSend_sa(v61, v62, v63, v64) + 1);

        if (v65 == 2)
        {
          if (v5 == 1)
          {
            if (objc_msgSend_isCellular(v60, v54, v55, v57)) {
              goto LABEL_35;
            }
          }
          else if (v5 != 2 || !objc_msgSend_isCellular(v60, v54, v55, v57))
          {
LABEL_35:
            __int16 v66 = v60;

            if (v66) {
              goto LABEL_57;
            }
            goto LABEL_36;
          }
        }
      }
      uint64_t v56 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v54, (uint64_t)&v100, v57, v105, 16);
      if (v56) {
        continue;
      }
      break;
    }
  }

LABEL_36:
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  id v67 = v51;
  uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v68, (uint64_t)&v96, v69, v104, 16);
  if (!v72)
  {
LABEL_49:

LABEL_64:
    long long v88 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v107) = v5;
      _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "Device does not have interface type: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        long long v89 = v5;
        _IDSLogTransport(@"GL", @"IDS", @"Device does not have interface type: %d");
        if (_IDSShouldLog())
        {
          long long v89 = v5;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Device does not have interface type: %d");
        }
      }
    }
    goto LABEL_70;
  }
  uint64_t v74 = *(void *)v97;
LABEL_38:
  uint64_t v75 = 0;
  while (1)
  {
    if (*(void *)v97 != v74) {
      objc_enumerationMutation(v67);
    }
    BOOL v76 = *(void **)(*((void *)&v96 + 1) + 8 * v75);
    double v77 = objc_msgSend_address(v76, v70, v71, v73, v89);
    int v81 = *(unsigned __int8 *)(objc_msgSend_sa(v77, v78, v79, v80) + 1);

    if (v81 != 30) {
      goto LABEL_47;
    }
    if (v5 != 1) {
      break;
    }
    if (objc_msgSend_isCellular(v76, v70, v71, v73)) {
      goto LABEL_56;
    }
LABEL_47:
    if (v72 == ++v75)
    {
      uint64_t v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v67, v70, (uint64_t)&v96, v73, v104, 16);
      if (v72) {
        goto LABEL_38;
      }
      goto LABEL_49;
    }
  }
  if (v5 == 2 && objc_msgSend_isCellular(v76, v70, v71, v73)) {
    goto LABEL_47;
  }
LABEL_56:
  __int16 v66 = v76;

  if (!v66) {
    goto LABEL_64;
  }
LABEL_57:
  long long v85 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    id v107 = v95;
    __int16 v108 = 1024;
    *(_DWORD *)uint64_t v109 = v5;
    *(_WORD *)&v109[4] = 2112;
    *(void *)&v109[6] = v66;
    _os_log_impl(&dword_19D9BE000, v85, OS_LOG_TYPE_DEFAULT, "_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@", buf, 0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      long long v90 = v5;
      double v91 = v66;
      long long v89 = (char *)v95;
      _IDSLogTransport(@"GL", @"IDS", @"_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@");
      if (_IDSShouldLog())
      {
        long long v90 = v5;
        double v91 = v66;
        long long v89 = (char *)v95;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_handleAllocbindFailoverTimer: %p, interface: %u, newLocalAddress: %@");
      }
    }
  }
  objc_msgSend__connectWithSessionInfo_interfaceAddress_joinSession_allocbindFailover_completionHandler_withLocalInterfacePreference_(self, v86, (uint64_t)v8, v87, v66, 1, 1, self->_connectReadyHandler, 0, v89, v90, v91);

LABEL_70:
  objc_msgSend__stopAllocbindFailoverTimer_(self, v83, (uint64_t)v95, v84, v89);
  uint64_t v47 = v93;
LABEL_71:

LABEL_10:
}

- (BOOL)_isExtIPDiscoveryDone
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (self->_hasPendingSelfAllocation)
  {
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = objc_msgSend_count(self->_selfAllocateRequestIDs, v6, v7, v8);
      *(_DWORD *)buf = 67109120;
      LODWORD(v46) = v9;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v39 = objc_msgSend_count(self->_selfAllocateRequestIDs, v10, v11, v12);
        _IDSLogTransport(@"GL", @"IDS", @"_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u");
        if (_IDSShouldLog())
        {
          objc_msgSend_count(self->_selfAllocateRequestIDs, v13, v14, v15, v39);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_isExtIPDiscoveryDone: _hasPendingSelfAllocation, count = %u");
        }
      }
    }
    return 0;
  }
  else
  {
    objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v41, v19, v47, 16);
    if (v22)
    {
      uint64_t v24 = *(void *)v42;
      while (2)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v42 != v24) {
            objc_enumerationMutation(v17);
          }
          uint64_t v26 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          if (objc_msgSend_allocateType(v26, v20, v21, v23) == 2
            && (unint64_t)objc_msgSend_state(v26, v20, v21, v23) <= 1)
          {
            double v27 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v31 = objc_msgSend_state(v26, v28, v29, v30);
              *(_DWORD *)buf = 134217984;
              uint64_t v46 = v31;
              _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "[candidatePair state] = %lu", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v40 = objc_msgSend_state(v26, v32, v33, v34);
                _IDSLogTransport(@"GL", @"IDS", @"[candidatePair state] = %lu");
                if (_IDSShouldLog())
                {
                  objc_msgSend_state(v26, v35, v36, v37, v40);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"[candidatePair state] = %lu");
                }
              }
            }
            BOOL v16 = 0;
            goto LABEL_26;
          }
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v41, v23, v47, 16);
        if (v22) {
          continue;
        }
        break;
      }
    }
    BOOL v16 = 1;
LABEL_26:
  }
  return v16;
}

- (void)_handleSelfAllocationTimeout:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (objc_msgSend_containsObject_(self->_selfAllocateRequestIDs, v5, (uint64_t)v4, v6))
  {
    uint64_t v7 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v4;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "self allocation request %@ timed out.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v16 = v4;
        _IDSLogTransport(@"GL", @"IDS", @"self allocation request %@ timed out.");
        if (_IDSShouldLog())
        {
          id v16 = v4;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"self allocation request %@ timed out.");
        }
      }
    }
    objc_msgSend_removeObject_(self->_selfAllocateRequestIDs, v8, (uint64_t)v4, v9, v16);
    if (!objc_msgSend_count(self->_selfAllocateRequestIDs, v10, v11, v12))
    {
      self->_hasPendingSelfAllocatiouint64_t n = 0;
      objc_msgSend__discardSelfAllocateCandidatePairs(self, v13, v14, v15);
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v13, 0, v15);
  }
}

- (void)_processXORMappedAddress:(id)a3 arrivalTime:(double)a4
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v119 = v6;
  long long v120 = v6;
  long long v117 = v6;
  long long v118 = v6;
  long long v115 = v6;
  long long v116 = v6;
  *(_OWORD *)__str = v6;
  long long v114 = v6;
  long long v111 = v6;
  long long v112 = v6;
  long long v109 = v6;
  long long v110 = v6;
  long long v107 = v6;
  long long v108 = v6;
  *(_OWORD *)long long v105 = v6;
  long long v106 = v6;
  double v9 = objc_msgSend_local(v5, v7, v8, -3.72066208e-103);
  uint64_t v101 = objc_msgSend_address(v9, v10, v11, v12);

  id v16 = objc_msgSend_local(v5, v13, v14, v15);
  uint64_t v20 = objc_msgSend_external(v16, v17, v18, v19);

  SAToIPPortString(__str, 0x80uLL, v101);
  SAToIPPortString(v105, 0x80uLL, v20);
  uint64_t v21 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)double v104 = v105;
    *(_WORD *)&v104[8] = 2080;
    *(void *)&v104[10] = __str;
    _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "discover external address on [%s] on [%s].", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      long long v97 = v105;
      long long v99 = __str;
      _IDSLogTransport(@"GL", @"IDS", @"discover external address on [%s] on [%s].");
      if (_IDSShouldLog())
      {
        long long v97 = v105;
        long long v99 = __str;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"discover external address on [%s] on [%s].");
      }
    }
  }
  double v25 = objc_msgSend_local(v5, v22, v23, v24, v97, v99);
  uint64_t v29 = objc_msgSend_radioAccessTechnology(v25, v26, v27, v28);
  uint64_t v33 = objc_msgSend_local(v5, v30, v31, v32);
  uint64_t v37 = objc_msgSend_mtu(v33, v34, v35, v36);
  long long v41 = objc_msgSend_local(v5, v38, v39, v40);
  uint64_t v45 = objc_msgSend_index(v41, v42, v43, v44);
  uint64_t v49 = objc_msgSend_local(v5, v46, v47, v48);
  uint64_t v53 = objc_msgSend_address(v49, v50, v51, v52);
  uint64_t v56 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v54, 1, v55, 1, v29, v37, v45, v53, v20);

  double v60 = objc_msgSend_local(v5, v57, v58, v59);
  uint64_t v64 = objc_msgSend_linkFlags(v60, v61, v62, v63);
  objc_msgSend_setLinkFlags_(v56, v65, v64, v66);

  uint64_t Type = objc_msgSend_allocateType(v5, v67, v68, v69);
  uint64_t v71 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v75 = objc_msgSend_allocateType(v5, v72, v73, v74);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)double v104 = Type == 2;
    *(_WORD *)&v104[4] = 2048;
    *(void *)&v104[6] = v75;
    _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "isSelfAllocate: %d, [candidatePair allocateType]: %ld", buf, 0x12u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      long long v98 = (char *)(Type == 2);
      uint64_t v100 = objc_msgSend_allocateType(v5, v76, v77, v78);
      _IDSLogTransport(@"GL", @"IDS", @"isSelfAllocate: %d, [candidatePair allocateType]: %ld");
      if (_IDSShouldLog())
      {
        uint64_t v79 = objc_msgSend_allocateType(v5, v76, v77, v78, v98, v100);
        long long v98 = (char *)(Type == 2);
        uint64_t v100 = v79;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"isSelfAllocate: %d, [candidatePair allocateType]: %ld");
      }
    }
  }
  if (Type == 2)
  {
    objc_msgSend_selfAllocateStartTime(v5, v76, v77, v78);
    float v81 = (float)((a4 - v80) * 1000.0);
    GLUtilReportAWDClientTimerEvent(308, 0, v5, self->_enableSKE, self->_isInitiator, v81);
    objc_msgSend__reportAWDAllocateTime(self, v82, v83, v84);
    long long v85 = GLUCreateQRClientTimeEvent(308, 0, v5, self->_timeBase, v81);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v87 = objc_opt_respondsToSelector();

    if (v87)
    {
      id v88 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v88, v89, (uint64_t)self, v90, v85);
    }
  }
  if (*(unsigned __int8 *)(v101 + 1) == *(unsigned __int8 *)(v20 + 1))
  {
    if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v76, (uint64_t)v56, v78, 0))
    {
      objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v91, (uint64_t)v56, v92, 0);
    }
    else
    {
      long long v96 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)double v104 = v105;
        _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_DEFAULT, "external address [%s] already exists, do not add stun check pairs", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          long long v98 = v105;
          _IDSLogTransport(@"GL", @"IDS", @"external address [%s] already exists, do not add stun check pairs");
          if (_IDSShouldLog())
          {
            long long v98 = v105;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"external address [%s] already exists, do not add stun check pairs");
          }
        }
      }
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v93, 0, v94, v98, v100);
  }
  else
  {
    id v95 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "local and external addresses have mismatched family, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"local and external addresses have mismatched family, ignore.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"local and external addresses have mismatched family, ignore.");
        }
      }
    }
  }
}

- (BOOL)_IsExtIPDiscoveryNeeded:(sockaddr *)a3 candidatePairList:(id)a4
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = a4;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v23, v7, v27, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v5);
        }
        double v15 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        if (objc_msgSend_isRelayStunCandidatePair(v15, v9, v10, v11, (void)v23))
        {
          id v16 = objc_msgSend_local(v15, v9, v10, v11);
          uint64_t v20 = objc_msgSend_address(v16, v17, v18, v19);

          if (IsSameSA(v20, (uint64_t)a3))
          {
            BOOL v21 = 0;
            goto LABEL_12;
          }
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v23, v11, v27, 16);
      if (v12) {
        continue;
      }
      break;
    }
  }
  BOOL v21 = 1;
LABEL_12:

  return v21;
}

- (void)_sendAllocbindRequestForExtIP:(id)a3 startTime:(double)a4
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  id v82 = a3;
  uint64_t v8 = objc_msgSend_serverAddress(v82, v5, v6, v7);
  float v81 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v9, 3, v10, 1, 10, 1400, 0xFFFFFFFFLL, 0, v8);
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  obuint64_t j = self->_interfaceAddressArray;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v85, v12, v91, 16);
  if (v15)
  {
    uint64_t v17 = *(void *)v86;
    while (2)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v86 != v17) {
          objc_enumerationMutation(obj);
        }
        double v19 = *(void **)(*((void *)&v85 + 1) + 8 * i);
        uint64_t v20 = objc_msgSend_index(v19, v13, v14, v16);
        long long v24 = objc_msgSend_address(v19, v21, v22, v23);
        uint64_t v28 = objc_msgSend_sa(v24, v25, v26, v27);

        BOOL v29 = IsLinkLocalSA(v28);
        uint64_t v33 = objc_msgSend_IPVersion(v19, v30, v31, v32);
        if (objc_msgSend_isCellular(v19, v34, v35, v36))
        {
          double v40 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v37, v38, v39);
          uint64_t v44 = objc_msgSend_radioAccessTechnology(v40, v41, v42, v43);
        }
        else if (objc_msgSend_isWired(v19, v37, v38, v39))
        {
          uint64_t v44 = 9;
        }
        else
        {
          uint64_t v44 = 0;
        }
        if (v28) {
          BOOL v45 = (int)v20 < 1;
        }
        else {
          BOOL v45 = 1;
        }
        char v46 = v45 || v29;
        if ((v46 & 1) == 0 && v33 != 1 && (objc_msgSend_isCompanionLink(v19, v13, v14, v16) & 1) == 0)
        {
          uint64_t v47 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, v16);
          int IsExtIPDiscoveryNeeded_candidatePairList = objc_msgSend__IsExtIPDiscoveryNeeded_candidatePairList_(self, v48, v28, v49, v47);

          if (IsExtIPDiscoveryNeeded_candidatePairList)
          {
            uint64_t v51 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v13, 3, v16, 1, v44, 1450, v20, v28, v28);
            uint64_t v55 = objc_msgSend_serverAddress(v82, v52, v53, v54);
            double v59 = objc_msgSend_relaySessionID(v82, v56, v57, v58);
            double v60 = tokenForStunCandidatePair(v28, v55, v59);

            uint64_t v64 = objc_msgSend_relaySessionID(v82, v61, v62, v63);
            id v67 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v65, (uint64_t)v51, v66, v81, v64, self);

            uint64_t v68 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v90 = v82;
              _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                id v79 = v82;
                _IDSLogTransport(@"GL", @"IDS", @"_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@");
                if (_IDSShouldLog())
                {
                  id v79 = v82;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"_sendAllocbindRequestForExtIP: setPropertiesWithRelaySessionInfo: qrSessionInfo: %@");
                }
              }
            }
            objc_msgSend_setPropertiesWithRelaySessionInfo_sessionInfoDict_enableSKE_(v67, v69, (uint64_t)v82, v70, 0, self->_enableSKE, v79);
            objc_msgSend_setSelfAllocateStartTime_(v67, v71, v72, a4);
            if (!self->_tokenToCandidatePairs)
            {
              CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              tokenToCandidatePairs = self->_tokenToCandidatePairs;
              self->_tokenToCandidatePairs = Mutable;
            }
            id v75 = v67;
            if (v75)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, v60, v75);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB78994();
            }

            BOOL v76 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v90 = v60;
              _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "start extIP discovery for %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                double v80 = v60;
                _IDSLogTransport(@"GL", @"IDS", @"start extIP discovery for %@.");
                if (_IDSShouldLog())
                {
                  double v80 = v60;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"start extIP discovery for %@.");
                }
              }
            }
            objc_msgSend_sendAllocbindRequest_isRealloc_inResponseToNoSessionState_reconnectQUIC_(self, v77, (uint64_t)v75, v78, 0, 0, 0, v80);

            goto LABEL_43;
          }
        }
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v85, v16, v91, 16);
      if (v15) {
        continue;
      }
      break;
    }
  }
LABEL_43:
}

- (BOOL)_requestSelfAllocationForInterfaceAddress:(id)a3
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v8 = objc_msgSend_address(v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_sa(v8, v9, v10, v11);

  double v16 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, v15);
  char IsExtIPDiscoveryNeeded_candidatePairList = objc_msgSend__IsExtIPDiscoveryNeeded_candidatePairList_(self, v17, v12, v18, v16);

  if (IsExtIPDiscoveryNeeded_candidatePairList)
  {
    if (!self->_hasPendingSelfAllocation) {
      self->_hasPendingSelfAllocatiouint64_t n = 1;
    }
    uint64_t v20 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_19DA5DC18;
    block[3] = &unk_1E5974088;
    void block[4] = self;
    id v36 = v4;
    dispatch_async(v20, block);
  }
  else
  {
    BOOL v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      long long v25 = objc_msgSend_address(v4, v22, v23, v24);
      *(_DWORD *)buf = 138412290;
      uint64_t v38 = v25;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "no need to request self allocation for [%@].", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v33 = objc_msgSend_address(v4, v26, v27, v28);
        _IDSLogTransport(@"GL", @"IDS", @"no need to request self allocation for [%@].");

        if (_IDSShouldLog())
        {
          double v34 = objc_msgSend_address(v4, v29, v30, v31, v33);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"no need to request self allocation for [%@].");
        }
      }
    }
  }

  return IsExtIPDiscoveryNeeded_candidatePairList;
}

- (void)_startExtIPDiscovery
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (self->_allowP2P)
  {
    uint64_t v2 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v2, OS_LOG_TYPE_DEFAULT, "== start external IP discovery for all interfaces ==", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"== start external IP discovery for all interfaces ==");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"== start external IP discovery for all interfaces ==");
        }
      }
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    obuint64_t j = self->_interfaceAddressArray;
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v86, v4, v93, 16);
    if (v7)
    {
      double v78 = 0;
      uint64_t v80 = *(void *)v87;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v87 != v80) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void **)(*((void *)&v86 + 1) + 8 * i);
          uint64_t v11 = objc_msgSend_index(v10, v5, v6, v8);
          double v15 = objc_msgSend_address(v10, v12, v13, v14);
          uint64_t v19 = objc_msgSend_sa(v15, v16, v17, v18);

          BOOL v20 = IsLinkLocalSA(v19);
          uint64_t v24 = objc_msgSend_IPVersion(v10, v21, v22, v23);
          isCompanionLinuint64_t k = objc_msgSend_isCompanionLink(v10, v25, v26, v27);
          if (objc_msgSend_isCellular(v10, v29, v30, v31))
          {
            uint64_t v35 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v32, v33, v34);
            uint64_t v39 = objc_msgSend_radioAccessTechnology(v35, v36, v37, v38);
          }
          else if (objc_msgSend_isWired(v10, v32, v33, v34))
          {
            uint64_t v39 = 9;
          }
          else
          {
            uint64_t v39 = 0;
          }
          if (*(unsigned char *)(v19 + 1) == 30) {
            unsigned int v43 = 6;
          }
          else {
            unsigned int v43 = 5;
          }
          isCellular = (const char *)objc_msgSend_isCellular(v10, v40, v41, v42);
          uint64_t LocalMTU = GLUtilGetLocalMTU(v43, isCellular, v45, v46);
          if (v19) {
            BOOL v48 = (int)v11 < 1;
          }
          else {
            BOOL v48 = 1;
          }
          int v49 = v48 || v20;
          if (((v49 | isCompanionLink) & 1) == 0)
          {
            double v50 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v5, 0, v8, 1, v39, LocalMTU, v11, v19, v19);
            if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v51, (uint64_t)v50, v52, 0)) {
              objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v53, (uint64_t)v50, v54, 0);
            }
            if (v24 != 1)
            {
              uint64_t v55 = v78;
              if (!v78) {
                uint64_t v55 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
              }
              double v78 = v55;
              if (v10 && v55) {
                CFArrayAppendValue(v55, v10);
              }
            }
          }
        }
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v86, v8, v93, 16);
      }
      while (v7);
    }
    else
    {
      double v78 = 0;
    }

    if (objc_msgSend_count(v78, v57, v58, v59))
    {
      double v63 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v92 = v78;
        _os_log_impl(&dword_19D9BE000, v63, OS_LOG_TYPE_DEFAULT, "need external IP discovery for interfaces:%@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v77 = v78;
          _IDSLogTransport(@"GL", @"IDS", @"need external IP discovery for interfaces:%@");
          if (_IDSShouldLog())
          {
            uint64_t v77 = v78;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"need external IP discovery for interfaces:%@");
          }
        }
      }
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      uint64_t v64 = v78;
      uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v65, (uint64_t)&v82, v66, v90, 16);
      if (v68)
      {
        uint64_t v70 = *(void *)v83;
        do
        {
          for (uint64_t j = 0; j != v68; ++j)
          {
            if (*(void *)v83 != v70) {
              objc_enumerationMutation(v64);
            }
            objc_msgSend__requestSelfAllocationForInterfaceAddress_(self, v67, *(void *)(*((void *)&v82 + 1) + 8 * j), v69, v77);
          }
          uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v67, (uint64_t)&v82, v69, v90, 16);
        }
        while (v68);
      }
    }
    if (!self->_hasPendingSelfAllocation || (v72 = objc_msgSend_count(v78, v60, v61, v62), uint64_t v73 = v78, !v72))
    {
      double v74 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "external IP discovery is not needed, send connection data.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"external IP discovery is not needed, send connection data.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"external IP discovery is not needed, send connection data.");
        }
      }
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v75, 0, v76, v77);
      uint64_t v73 = v78;
    }
  }
  else
  {
    uint64_t v56 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v56, OS_LOG_TYPE_DEFAULT, "skip external IP discovery because P2P is not allowed.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"skip external IP discovery because P2P is not allowed.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip external IP discovery because P2P is not allowed.");
        }
      }
    }
  }
}

- (void)_processRemoteCandidates:(id)a3
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v93 = v3;
  if (objc_msgSend_count(v3, v4, v5, v6))
  {
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    obuint64_t j = v3;
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v121, v8, v130, 16);
    if (v10)
    {
      long long v97 = 0;
      uint64_t v12 = *(void *)v122;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v122 != v12) {
            objc_enumerationMutation(obj);
          }
          double v14 = *(const void **)(*((void *)&v121 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_(self->_remoteCandidateList, v9, (uint64_t)v14, v11) & 1) == 0)
          {
            double v15 = v97;
            if (!v97) {
              double v15 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            if (v14) {
              BOOL v16 = v15 == 0;
            }
            else {
              BOOL v16 = 1;
            }
            long long v97 = v15;
            if (!v16) {
              CFArrayAppendValue(v15, v14);
            }
          }
        }
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v121, v11, v130, 16);
      }
      while (v10);
    }
    else
    {
      long long v97 = 0;
    }

    if (objc_msgSend_count(v97, v18, v19, v20)) {
      objc_msgSend__processNewRemoteCandidates_(self, v21, (uint64_t)v97, v22);
    }
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    uint64_t v94 = self->_remoteCandidateList;
    uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v94, v23, (uint64_t)&v117, v24, v129, 16);
    uint64_t v26 = 0;
    if (v25)
    {
      id v95 = *(id *)v118;
      do
      {
        for (uint64_t j = 0; j != v25; ++j)
        {
          if (*(id *)v118 != v95) {
            objc_enumerationMutation(v94);
          }
          double v28 = *(void **)(*((void *)&v117 + 1) + 8 * j);
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          id v29 = obj;
          uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v113, v31, v128, 16);
          if (v34)
          {
            uint64_t v36 = *(void *)v114;
            while (2)
            {
              for (uint64_t k = 0; k != v34; ++k)
              {
                if (*(void *)v114 != v36) {
                  objc_enumerationMutation(v29);
                }
                double v38 = *(void **)(*((void *)&v113 + 1) + 8 * k);
                uint64_t v39 = objc_msgSend_address(v28, v32, v33, v35, v92);
                uint64_t v43 = objc_msgSend_address(v38, v40, v41, v42);
                if (IsSameIP(v39, v43))
                {

                  goto LABEL_52;
                }
              }
              uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v32, (uint64_t)&v113, v35, v128, 16);
              if (v34) {
                continue;
              }
              break;
            }
          }

          if (v26 || (uint64_t v26 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
          {
            if (v28) {
              CFArrayAppendValue(v26, v28);
            }
          }
          double v46 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v132 = v28;
            _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "Try to remove remote candidate %@.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v92 = v28;
              _IDSLogTransport(@"GL", @"IDS", @"Try to remove remote candidate %@.");
              if (_IDSShouldLog())
              {
                uint64_t v92 = v28;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Try to remove remote candidate %@.");
              }
            }
          }
LABEL_52:
          ;
        }
        uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v94, v44, (uint64_t)&v117, v45, v129, 16);
      }
      while (v25);
    }

    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    id obja = v26;
    int v49 = 0;
    uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v47, (uint64_t)&v109, v48, v127, 16);
    if (v52)
    {
      uint64_t v54 = *(void *)v110;
      do
      {
        for (uint64_t m = 0; m != v52; ++m)
        {
          if (*(void *)v110 != v54) {
            objc_enumerationMutation(obja);
          }
          uint64_t v56 = *(void **)(*((void *)&v109 + 1) + 8 * m);
          if (objc_msgSend_type(v56, v50, v51, v53, v92) == 2)
          {
            if (!v49) {
              int v49 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            if (v56) {
              BOOL v57 = v49 == 0;
            }
            else {
              BOOL v57 = 1;
            }
            if (!v57) {
              CFArrayAppendValue(v49, v56);
            }
          }
        }
        uint64_t v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v50, (uint64_t)&v109, v53, v127, 16);
      }
      while (v52);
    }

    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v96 = v49;
    uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v58, (uint64_t)&v105, v59, v126, 16);
    if (v62)
    {
      uint64_t v63 = *(void *)v106;
      uint64_t v64 = 138412290;
      do
      {
        for (uint64_t n = 0; n != v62; ++n)
        {
          if (*(void *)v106 != v63) {
            objc_enumerationMutation(v96);
          }
          double v66 = *(void **)(*((void *)&v105 + 1) + 8 * n);
          id v67 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v60, v61, *(double *)&v64, v92);
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          id v68 = v67;
          uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v69, (uint64_t)&v101, v70, v125, 16);
          if (v73)
          {
            uint64_t v75 = *(void *)v102;
            while (2)
            {
              for (iuint64_t i = 0; ii != v73; ++ii)
              {
                if (*(void *)v102 != v75) {
                  objc_enumerationMutation(v68);
                }
                uint64_t v77 = *(void **)(*((void *)&v101 + 1) + 8 * ii);
                if (objc_msgSend_state(v77, v71, v72, v74) == 3)
                {
                  double v78 = objc_msgSend_remote(v77, v71, v72, v74);
                  uint64_t v82 = objc_msgSend_external(v78, v79, v80, v81);
                  uint64_t v86 = objc_msgSend_external(v66, v83, v84, v85);
                  LOBYTE(v82) = IsSameSA(v82, v86);

                  if (v82)
                  {

                    goto LABEL_90;
                  }
                }
              }
              uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v68, v71, (uint64_t)&v101, v74, v125, 16);
              if (v73) {
                continue;
              }
              break;
            }
          }

          objc_msgSend_removeObject_(obja, v87, (uint64_t)v66, v88);
          long long v89 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v132 = v66;
            _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "Add back removed PRLX remote candidate %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              uint64_t v92 = v66;
              _IDSLogTransport(@"GL", @"IDS", @"Add back removed PRLX remote candidate %@");
              if (_IDSShouldLog())
              {
                uint64_t v92 = v66;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Add back removed PRLX remote candidate %@");
              }
            }
          }
LABEL_90:
        }
        uint64_t v62 = objc_msgSend_countByEnumeratingWithState_objects_count_(v96, v60, (uint64_t)&v105, *(double *)&v64, v126, 16);
      }
      while (v62);
    }

    objc_msgSend__processRemovedRemoteCandidates_(self, v90, (uint64_t)obja, v91);
  }
  else
  {
    uint64_t v17 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v132 = v93;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "invalid remote candidate list %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"invalid remote candidate list %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"invalid remote candidate list %@.");
        }
      }
    }
  }
}

- (void)_startStunCheck:(id)a3
{
}

- (void)_updateNominatedCandidatePair:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v8 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v35, 0.0, v42, 16);
  if (v12)
  {
    uint64_t v14 = *(void *)v36;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v36 != v14) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend_setIsNominated_(*(void **)(*((void *)&v35 + 1) + 8 * v15++), v10, 0, v13);
      }
      while (v12 != v15);
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v35, v13, v42, 16);
    }
    while (v12);
  }
  BOOL v16 = objc_msgSend_allValues(self->_tokenToStunCheckPairs, v10, v11, v13);

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v17 = v16;
  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v31, v19, v41, 16);
  if (v21)
  {
    uint64_t v23 = *(void *)v32;
    do
    {
      uint64_t v24 = 0;
      do
      {
        if (*(void *)v32 != v23) {
          objc_enumerationMutation(v17);
        }
        objc_msgSend_setIsNominated_(*(void **)(*((void *)&v31 + 1) + 8 * v24++), v20, 0, v22);
      }
      while (v21 != v24);
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v31, v22, v41, 16);
    }
    while (v21);
  }

  if (!v4
    || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
    || (id v27 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v4)) == 0)
  {
    Value = 0;
    if (v4 && self->_tokenToStunCheckPairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v4);
    }
    id v27 = Value;
  }
  objc_msgSend_setIsNominated_(v27, v26, 1, v28);
  uint64_t v30 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v40 = v27;
    _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "set nominated flag for %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"set nominated flag for %@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"set nominated flag for %@.");
      }
    }
  }
}

- (void)_nominateCandidatePair:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (self->_isInitiator)
  {
    Value = 0;
    if (v4 && self->_tokenToCandidatePairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v4);
    }
    id v6 = Value;
    if ((objc_msgSend_isSharedQRSession(v6, v7, v8, v9) & 1) == 0)
    {
      ++self->_nominateCount;
      objc_msgSend__updateNominatedCandidatePair_(self, v10, (uint64_t)v4, v11);
      uint64_t v12 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int nominateCount = self->_nominateCount;
        *(_DWORD *)buf = 67109378;
        int v19 = nominateCount;
        __int16 v20 = 2112;
        id v21 = v4;
        _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "start nomination #%d: %@.", buf, 0x12u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v16 = self->_nominateCount;
          id v17 = v4;
          _IDSLogTransport(@"GL", @"IDS", @"start nomination #%d: %@.");
          if (_IDSShouldLog())
          {
            uint64_t v16 = self->_nominateCount;
            id v17 = v4;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"start nomination #%d: %@.");
          }
        }
      }
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v14, 5, v15, 0, 0, v4, v16, v17);
    }
  }
}

- (void)_sendBindingRequest:(id)a3 stunMessage:(id)a4
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (self->_state < 5)
  {
    if (!v6
      || (CFDictionaryRef tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
      || (id v17 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v6)) == 0)
    {
      long long v32 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "send bind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send bind request failed due to invalid candidate pair.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send bind request failed due to invalid candidate pair.");
          }
        }
      }
      if (v7)
      {
        long long v119 = objc_msgSend_requestID(v7, v33, v34, v35);
        objc_msgSend__removeStunRequest_(self, v36, (uint64_t)v119, v37);
        id v13 = 0;
      }
      else
      {
        id v13 = 0;
      }
      goto LABEL_95;
    }
    id v13 = v17;
    unint64_t v23 = objc_msgSend_state(v17, v18, v19, v20);
    if (v23 >= 3)
    {
      uint64_t v25 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = (&_IDSStunCandidatePairStateStrings)[v23];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v26;
        _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "skip binding request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"skip binding request for %@, state [%s].");
      }
      if (v7)
      {
        long long v118 = objc_msgSend_requestID(v7, v27, v28, v29);
        objc_msgSend__removeStunRequest_(self, v30, (uint64_t)v118, v31);
      }
      goto LABEL_95;
    }
    long long v38 = objc_msgSend_local(v13, v21, v22, v24);
    uint64_t v42 = objc_msgSend_index(v38, v39, v40, v41);
    long long v120 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(self, v43, v42, v44);

    if (self->_cellInterfaceName)
    {
      double v48 = objc_msgSend_local(v13, v45, v46, v47);
      if (objc_msgSend_isCellularStunCandidate(v48, v49, v50, v51))
      {
        char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(self->_cellInterfaceName, v52, (uint64_t)v120, v53);

        if ((isEqualToIgnoringCase & 1) == 0)
        {
          uint64_t v55 = OSLogHandleForIDSCategory();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            cellInterfaceName = self->_cellInterfaceName;
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v120;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = cellInterfaceName;
            _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - currentInterfaceName %@ _cellInterfaceName %@ skip binding request on currentInterfaceName", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"Sliced Cellular Interface - currentInterfaceName %@ _cellInterfaceName %@ skip binding request on currentInterfaceName");
          }
          goto LABEL_94;
        }
      }
      else
      {
      }
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_19DA5FF70;
    aBlock[3] = &unk_1E5974328;
    id v13 = v13;
    id v132 = v13;
    uint64_t v133 = self;
    unint64_t v135 = v23;
    id v57 = v6;
    id v134 = v57;
    double v60 = (void (**)(void *, id))_Block_copy(aBlock);
    if (v7)
    {
      objc_msgSend_startTime(v7, v58, v59, v61);
      double v63 = v62;
      double v66 = ids_monotonic_time() - v62;
      if (v66 <= 60.0)
      {
        objc_msgSend_triggeredCheckTime(v13, v64, v65, v66);
        if (v91 <= v63)
        {
          v60[2](v60, v7);
        }
        else
        {
          uint64_t v92 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v7;
            _os_log_impl(&dword_19D9BE000, v92, OS_LOG_TYPE_DEFAULT, "cancel binding request %@ with triggered check", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"cancel binding request %@ with triggered check");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"cancel binding request %@ with triggered check");
              }
            }
          }
          v128[0] = MEMORY[0x1E4F143A8];
          v128[1] = 3221225472;
          v128[2] = sub_19DA604F8;
          v128[3] = &unk_1E5974300;
          v128[4] = self;
          id v129 = v57;
          id v7 = v7;
          id v130 = v7;
          double v93 = ids_monotonic_time();
          IDSTransportThreadAddBlockAfter(v128, v63 + 60.0 - v93 + 0.1);
        }
      }
      else
      {
        objc_msgSend_setState_(v13, v64, 2, v66);
        double v70 = objc_msgSend_requestID(v7, v67, v68, v69);
        objc_msgSend__removeStunRequest_(self, v71, (uint64_t)v70, v72);

        uint64_t v73 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          double v74 = (&_IDSStunCandidatePairStateStrings)[v23];
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v13;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v74;
          __int16 v137 = 2080;
          double v138 = off_1E944EAA0;
          _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "binding request %@ timed out, update state (%s->%s).", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"binding request %@ timed out, update state (%s->%s).");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"binding request %@ timed out, update state (%s->%s).");
            }
          }
        }
      }
      goto LABEL_93;
    }
    uint64_t v75 = [IDSStunMessage alloc];
    id v7 = (id)objc_msgSend_initWithType_(v75, v76, 1, v77);
    double v78 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v82 = objc_msgSend_local(v13, v79, v80, v81);
    uint64_t v86 = objc_msgSend_radioAccessTechnology(v82, v83, v84, v85);

    if (self->_remoteDeviceVersion <= 2 && v86 == 9)
    {
      long long v89 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "RATType Wired -> NonCell due to remote version", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"RATType Wired -> NonCell due to remote version");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"RATType Wired -> NonCell due to remote version");
          }
        }
      }
      uint64_t v86 = 0;
    }
    id v90 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v87, v86, v88);
    if (v90)
    {
      CFDictionarySetValue(v78, @"ids-stun-attribute-cellrat", v90);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB79B9C();
    }

    uint64_t v94 = self->_controlMessageKey;
    if (v94)
    {
      CFDictionarySetValue(v78, @"ids-stun-attribute-messageintegrity", v94);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB79B14();
    }

    if (self->_isInitiator && (self->_remoteCapabilityFlag & 1) != 0)
    {
      memset(buf, 170, 16);
      long long v98 = objc_msgSend_linkUUID(v13, v95, v96, v97);
      objc_msgSend_getUUIDBytes_(v98, v99, (uint64_t)buf, v100);

      long long v103 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v101, (uint64_t)buf, v102, 16);
      if (v103)
      {
        CFDictionarySetValue(v78, @"ids-stun-attribute-linkuuid", v103);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB79A8C();
      }
    }
    if (!objc_msgSend__shouldUseP2PTLE(self, v95, v96, v97)) {
      goto LABEL_83;
    }
    long long v107 = objc_msgSend_local(v13, v104, v105, v106);
    if (objc_msgSend_isCellularStunCandidate(v107, v108, v109, v110))
    {
      BOOL v111 = !self->_allowTLEOverCellular;

      if (v111)
      {
LABEL_83:
        objc_msgSend_setTransactionID_attributes_(v7, v104, 0, v106, v78);
        double v112 = ids_monotonic_time();
        objc_msgSend_setStartTime_(v7, v113, v114, v112);
        v60[2](v60, v7);
LABEL_92:

LABEL_93:
LABEL_94:

        goto LABEL_95;
      }
    }
    else
    {
    }
    long long v115 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v57;
      _os_log_impl(&dword_19D9BE000, v115, OS_LOG_TYPE_DEFAULT, "getting p2p negotiation for: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"getting p2p negotiation for: %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"getting p2p negotiation for: %@");
        }
      }
    }
    v121[0] = MEMORY[0x1E4F143A8];
    v121[1] = 3221225472;
    v121[2] = sub_19DA60508;
    v121[3] = &unk_1E5974350;
    id v122 = v57;
    id v123 = v13;
    long long v124 = self;
    long long v125 = v78;
    id v126 = v7;
    uint64_t v127 = v60;
    objc_msgSend__getP2PNegotiationForCandidatePair_completionBlock_(self, v116, (uint64_t)v123, v117, v121);

    goto LABEL_92;
  }
  uint64_t v8 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "skip bind request, GL state [%s].", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"skip bind request, GL state [%s].");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"skip bind request, GL state [%s].");
      }
    }
  }
  if (v7)
  {
    objc_msgSend_requestID(v7, v10, v11, v12);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend__removeStunRequest_(self, v14, (uint64_t)v13, v15);
LABEL_95:
  }
}

- (BOOL)_shouldUseP2PTLE
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  BOOL forceP2PTLE = self->_forceP2PTLE;
  id v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = @"NO";
    if (forceP2PTLE) {
      id v4 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    id v7 = v4;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "_shouldUseP2PTLE: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"_shouldUseP2PTLE: %@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_shouldUseP2PTLE: %@");
      }
    }
  }
  return forceP2PTLE;
}

- (BOOL)_shouldUseVRTLE
{
  return self->_isTLEEnabled && self->_allowTLEOverVRLinks;
}

- (BOOL)_shouldUseQRTLE
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  BOOL v3 = self->_isTLEEnabled || self->_forceTLE;
  id v4 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = @"NO";
    if (v3) {
      id v6 = @"YES";
    }
    else {
      id v6 = @"NO";
    }
    BOOL forceTLE = self->_forceTLE;
    if (self->_isTLEEnabled) {
      uint64_t v8 = @"YES";
    }
    else {
      uint64_t v8 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    if (forceTLE) {
      uint64_t v5 = @"YES";
    }
    id v13 = v8;
    __int16 v14 = 2112;
    double v15 = v5;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_shouldUseQRTLE: %@ (TLE enabled: %@, force: %@)");
      }
    }
  }
  return v3;
}

- (void)_getP2PNegotiationForCandidatePair:(id)a3 completionBlock:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    p2pNegotiatorProvider = self->_p2pNegotiatorProvider;
    *(_DWORD *)buf = 138412290;
    double v20 = p2pNegotiatorProvider;
    _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "getting p2p negotiator from %@...", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"getting p2p negotiator from %@...");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"getting p2p negotiator from %@...");
      }
    }
  }
  uint64_t v10 = self->_p2pNegotiatorProvider;
  groupID = self->_groupID;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_19DA60DD8;
  v16[3] = &unk_1E59743A0;
  id v17 = v6;
  id v18 = v7;
  id v12 = v7;
  id v13 = v6;
  objc_msgSend_negotiatorForGroup_completionHandler_(v10, v14, (uint64_t)groupID, v15, v16);
}

- (void)_processRemoteLinkUUID:(id)a3 candidatePair:(id)a4
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = v7;
  if (self->_isInitiator)
  {
    id v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "receive linkUUID from Receiver, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive linkUUID from Receiver, ignore.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive linkUUID from Receiver, ignore.");
        }
      }
    }
  }
  else if (v6)
  {
    id v13 = objc_msgSend_linkUUID(v7, v8, v9, v10);
    char isEqual = objc_msgSend_isEqual_(v6, v14, (uint64_t)v13, v15);

    if ((isEqual & 1) == 0)
    {
      objc_msgSend_setLinkUUID_(v11, v17, (uint64_t)v6, v18);
      uint64_t v19 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v23 = objc_msgSend_candidatePairToken(v11, v20, v21, v22);
        *(_DWORD *)buf = 138412546;
        id v34 = v6;
        __int16 v35 = 2112;
        long long v36 = v23;
        _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "_processRemoteLinkUUID: update linkUUID %@ for %@.", buf, 0x16u);
      }
      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v31 = objc_msgSend_candidatePairToken(v11, v24, v25, v26);
          _IDSLogTransport(@"GL", @"IDS", @"_processRemoteLinkUUID: update linkUUID %@ for %@.");

          if (_IDSShouldLog())
          {
            long long v32 = objc_msgSend_candidatePairToken(v11, v27, v28, v29, v6, v31);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"_processRemoteLinkUUID: update linkUUID %@ for %@.");
          }
        }
      }
    }
  }
  else
  {
    uint64_t v30 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "receive invalid linkUUID, ignore.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive invalid linkUUID, ignore.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive invalid linkUUID, ignore.");
        }
      }
    }
  }
}

- (BOOL)_isCellularInterfaceForCandidatePair:(id)a3 localAddress:(sockaddr *)a4
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  double v10 = v6;
  if (v6)
  {
    uint64_t v11 = objc_msgSend_local(v6, v7, v8, v9);
    if (objc_msgSend_radioAccessTechnology(v11, v12, v13, v14))
    {
      double v18 = objc_msgSend_local(v10, v15, v16, v17);
      BOOL v22 = objc_msgSend_radioAccessTechnology(v18, v19, v20, v21) != 9;
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    unint64_t v23 = self->_interfaceAddressArray;
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v47, v25, v51, 16);
    if (v26)
    {
      uint64_t v30 = v26;
      uint64_t v31 = *(void *)v48;
      while (2)
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v48 != v31) {
            objc_enumerationMutation(v23);
          }
          long long v33 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          id v34 = objc_msgSend_address(v33, v27, v28, v29, (void)v47);
          uint64_t v38 = objc_msgSend_sa(v34, v35, v36, v37);
          BOOL v39 = IsSameSA(v38, (uint64_t)a4);

          if (v39 && objc_msgSend_isCellular(v33, v27, v28, v29))
          {
            double v41 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v27, v28, v29);
            int v40 = objc_msgSend_radioAccessTechnology(v41, v42, v43, v44);

            goto LABEL_17;
          }
        }
        uint64_t v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v47, v29, v51, 16);
        if (v30) {
          continue;
        }
        break;
      }
    }
    int v40 = 0;
LABEL_17:

    if (v40) {
      BOOL v45 = v40 == 9;
    }
    else {
      BOOL v45 = 1;
    }
    BOOL v22 = !v45;
  }

  return v22;
}

- (BOOL)_processBindingRequest:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v10 = *(void *)&a5;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v175 = a4;
  id v14 = a8;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v251 = v15;
  long long v252 = v15;
  long long v249 = v15;
  long long v250 = v15;
  long long v247 = v15;
  long long v248 = v15;
  *(_OWORD *)__str = v15;
  long long v246 = v15;
  long long v244 = v15;
  long long v243 = v15;
  long long v242 = v15;
  long long v241 = v15;
  long long v240 = v15;
  long long v239 = v15;
  long long v238 = v15;
  *(_OWORD *)double v237 = v15;
  memset(__b, 170, sizeof(__b));
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v235[7] = v16;
  v235[6] = v16;
  v235[5] = v16;
  v235[4] = v16;
  v235[3] = v16;
  v235[2] = v16;
  v235[1] = v16;
  v235[0] = v16;
  long long v234 = v16;
  long long v233 = v16;
  long long v231 = v16;
  long long v232 = v16;
  long long v229 = v16;
  long long v230 = v16;
  long long v227 = v16;
  long long v228 = v16;
  long long v225 = v16;
  long long v226 = v16;
  long long v223 = v16;
  long long v224 = v16;
  long long v221 = v16;
  long long v222 = v16;
  long long v219 = v16;
  long long v220 = v16;
  __memcpy_chk();
  __memcpy_chk();
  SAToIPPortString(__str, 0x80uLL, (uint64_t)&v227);
  SAToIPPortString(v237, 0x80uLL, (uint64_t)&v219);
  double v17 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v237;
    *(_WORD *)&unsigned char buf[22] = 2080;
    double v216 = __str;
    LOWORD(v217) = 1024;
    *(_DWORD *)((char *)&v217 + 2) = v10;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "receive binding request %@ from %s on %s(%u)", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      __int16 v170 = __str;
      uint64_t v171 = v10;
      id v166 = v13;
      unsigned int v169 = v237;
      _IDSLogTransport(@"GL", @"IDS", @"receive binding request %@ from %s on %s(%u)");
      if (_IDSShouldLog())
      {
        __int16 v170 = __str;
        uint64_t v171 = v10;
        id v166 = v13;
        unsigned int v169 = v237;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive binding request %@ from %s on %s(%u)");
      }
    }
  }
  __memcpy_chk();
  Value = 0;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  double v216 = (char *)sub_19DA62954;
  uint64_t v217 = sub_19DA62964;
  id v218 = (id)0xAAAAAAAAAAAAAAAALL;
  if (v14 && self->_tokenToStunCheckPairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v14);
  }
  id v218 = Value;
  unsigned __int16 v178 = objc_msgSend_linkUUID(*(void **)(*(void *)&buf[8] + 40), v19, v20, v21);
  v186[0] = 0;
  v186[1] = v186;
  v186[2] = 0x3032000000;
  v186[3] = sub_19DA62954;
  v186[4] = sub_19DA62964;
  id v187 = (id)0xAAAAAAAAAAAAAAAALL;
  BOOL v22 = [IDSStunMessage alloc];
  id v187 = (id)objc_msgSend_initWithType_(v22, v23, 257, v24);
  double v25 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  objc_msgSend_wrapperWithSockAddr_(IDSSockAddrWrapper, v26, (uint64_t)v235, v27);
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  if (v28)
  {
    CFDictionarySetValue(v25, @"ids-stun-attribute-xormappedaddress", v28);
  }
  else
  {
    double v29 = MEMORY[0x1E4F14500];
    id v30 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_19DB79F50();
    }

    id v28 = 0;
  }
  unsigned int v174 = v28;

  uint64_t v31 = self->_controlMessageKey;
  if (v31)
  {
    CFDictionarySetValue(v25, @"ids-stun-attribute-messageintegrity", v31);
  }
  else
  {
    long long v32 = MEMORY[0x1E4F14500];
    id v33 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      sub_19DB79B14();
    }
  }
  if (self->_islocalCellAttributeInexpensive) {
    unsigned int isInterfaceExpensiveWithInterfaceIndex = 0;
  }
  else {
    unsigned int isInterfaceExpensiveWithInterfaceIndex = objc_msgSend__isInterfaceExpensiveWithInterfaceIndex_(self, v34, v10, v35);
  }
  if (objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(self, v34, v10, v35, v166, v169, v170, v171))isInterfaceExpensiveWithInterfaceIndex |= 2u; {
  if (self->_remoteDeviceVersion >= 2
  }
    && objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(self, v37, v10, v38))
  {
    isInterfaceExpensiveWithInterfaceIndex |= 4u;
  }
  if (objc_msgSend__isCLAT46Interface_(self, v37, (uint64_t)&v227, v38)) {
    uint64_t v41 = isInterfaceExpensiveWithInterfaceIndex | 8;
  }
  else {
    uint64_t v41 = isInterfaceExpensiveWithInterfaceIndex;
  }
  if objc_msgSend__isCellularInterfaceForCandidatePair_localAddress_(self, v39, *(void *)(*(void *)&buf[8] + 40), v40, &v227)&& (uint64_t v41 = v41 | self->_cellularSlicingFlags, (objc_msgSend__isSlicedCellularInterfaceActive_(self, v42, v10, v43)))
  {
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v42, v41 | 0x80, v43);
  }
  else
  {
    if (!v41) {
      goto LABEL_42;
    }
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v42, v41, v43);
  double v44 = };
  if (v44)
  {
    CFDictionarySetValue(v25, @"ids-stun-attribute-link-attributes", v44);
  }
  else
  {
    BOOL v45 = MEMORY[0x1E4F14500];
    id v46 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      sub_19DB79EC8();
    }
  }
LABEL_42:
  if (objc_msgSend__isCellularInterfaceForCandidatePair_localAddress_(self, v42, *(void *)(*(void *)&buf[8] + 40), v43, &v227))
  {
    long long v50 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v47, v48, v49);
    uint64_t v54 = objc_msgSend_dataSoMaskBits(v50, v51, v52, v53);

    id v57 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v55, v54, v56);
    if (v57)
    {
      CFDictionarySetValue(v25, @"ids-stun-attribute-data-so-masks-attributes", v57);
    }
    else
    {
      uint64_t v58 = MEMORY[0x1E4F14500];
      id v59 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        sub_19DB79E40();
      }
    }
  }
  if (self->_isInitiator && (self->_remoteCapabilityFlag & 1) != 0)
  {
    double v60 = v178;
    if (!v178)
    {
      double v60 = objc_msgSend_UUID(MEMORY[0x1E4F29128], v47, v48, v49);
    }
    memset(v214, 170, sizeof(v214));
    unsigned __int16 v178 = v60;
    objc_msgSend_getUUIDBytes_(v60, v47, (uint64_t)v214, v49);
    double v63 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v61, (uint64_t)v214, v62, 16);
    if (v63)
    {
      CFDictionarySetValue(v25, @"ids-stun-attribute-linkuuid", v63);
    }
    else
    {
      uint64_t v64 = MEMORY[0x1E4F14500];
      id v65 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        sub_19DB79A8C();
      }
    }
  }
  double v66 = objc_msgSend_stringWithCString_encoding_(NSString, v47, (uint64_t)__str, v49, 4);
  double v69 = objc_msgSend_stringWithCString_encoding_(NSString, v67, (uint64_t)v237, v68, 4);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19DA6296C;
  aBlock[3] = &unk_1E59743C8;
  double v195 = buf;
  void aBlock[4] = self;
  long long v201 = v231;
  long long v202 = v232;
  long long v203 = v233;
  long long v204 = v234;
  long long v197 = v227;
  long long v198 = v228;
  long long v199 = v229;
  long long v200 = v230;
  long long v207 = v221;
  long long v208 = v222;
  long long v205 = v219;
  long long v206 = v220;
  long long v211 = v225;
  long long v212 = v226;
  long long v209 = v223;
  long long v210 = v224;
  int v196 = v186;
  id v70 = v13;
  id v190 = v70;
  uint64_t v71 = v25;
  double v191 = v71;
  id v172 = v66;
  id v192 = v172;
  id v173 = v69;
  id v193 = v173;
  int v213 = v10;
  id v72 = v14;
  id v194 = v72;
  uint64_t v177 = (void (**)(void))_Block_copy(aBlock);
  if (objc_msgSend_getAttribute_attribute_(v70, v73, 32775, v74, __b))
  {
    if (__b[2] >= 0xAu) {
      uint64_t v78 = 10;
    }
    else {
      uint64_t v78 = __b[2];
    }
    id v79 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v80 = IDSRadioAccessTechnologyToString(v78);
      *(_DWORD *)unsigned int v214 = 136315138;
      *(void *)&v214[4] = v80;
      _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "receive remote cellular RAT [%s].", v214, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v167 = IDSRadioAccessTechnologyToString(v78);
        _IDSLogTransport(@"GL", @"IDS", @"receive remote cellular RAT [%s].");
        if (_IDSShouldLog())
        {
          uint64_t v167 = IDSRadioAccessTechnologyToString(v78);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive remote cellular RAT [%s].");
        }
      }
    }
  }
  else
  {
    uint64_t v78 = 0;
  }
  double v81 = *(void **)(*(void *)&buf[8] + 40);
  if (!v81)
  {
    if (BYTE1(v219) == 30) {
      unsigned int v82 = 6;
    }
    else {
      unsigned int v82 = 5;
    }
    if (v78) {
      BOOL v83 = v78 == 9;
    }
    else {
      BOOL v83 = 1;
    }
    uint64_t v84 = !v83;
    uint64_t LocalMTU = GLUtilGetLocalMTU(v82, (const char *)v84, v76, v77);
    unsigned int v176 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v86, 2, v87, 1, v78, LocalMTU, 0xFFFFFFFFLL, &v219, &v219);
    double v88 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int v214 = 138412290;
      *(void *)&v214[4] = v176;
      _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "discover remote prlx candidate %@.", v214, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        __int16 v168 = v176;
        _IDSLogTransport(@"GL", @"IDS", @"discover remote prlx candidate %@.");
        if (_IDSShouldLog())
        {
          __int16 v168 = v176;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"discover remote prlx candidate %@.");
        }
      }
    }
    if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v89, (uint64_t)v176, v90, 1, v168)) {
      objc_msgSend__addStunCheckPair_isRemoteCandidate_excludeLocalAddress_(self, v91, (uint64_t)v176, v92, 1, &v227);
    }
    long long v184 = 0u;
    long long v185 = 0u;
    long long v182 = 0u;
    long long v183 = 0u;
    double v93 = self->_interfaceAddressArray;
    uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v94, (uint64_t)&v182, v95, v188, 16);
    if (v98)
    {
      double v100 = v71;
      id v101 = v72;
      uint64_t v102 = *(void *)v183;
      while (2)
      {
        for (uint64_t i = 0; i != v98; ++i)
        {
          if (*(void *)v183 != v102) {
            objc_enumerationMutation(v93);
          }
          long long v104 = *(void **)(*((void *)&v182 + 1) + 8 * i);
          if (objc_msgSend_index(v104, v96, v97, v99) == v10)
          {
            id v72 = v101;
            uint64_t v71 = v100;
            if (objc_msgSend_isCellular(v104, v96, v97, v99))
            {
              long long v108 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v105, v106, v107);
              uint64_t v98 = objc_msgSend_radioAccessTechnology(v108, v109, v110, v111);
            }
            else if (objc_msgSend_isWired(v104, v105, v106, v107))
            {
              uint64_t v98 = 9;
            }
            else
            {
              uint64_t v98 = 0;
            }
            goto LABEL_102;
          }
        }
        uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v93, v96, (uint64_t)&v182, v99, v188, 16);
        if (v98) {
          continue;
        }
        break;
      }
      id v72 = v101;
      uint64_t v71 = v100;
    }
LABEL_102:

    if (v98) {
      BOOL v114 = v98 == 9;
    }
    else {
      BOOL v114 = 1;
    }
    uint64_t v115 = !v114;
    if (BYTE1(v227) == 30) {
      unsigned int v116 = 6;
    }
    else {
      unsigned int v116 = 5;
    }
    uint64_t v117 = GLUtilGetLocalMTU(v116, (const char *)v115, v112, v113);
    long long v120 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v118, 0, v119, 1, v98, v117, v10, &v227, &v227);
    objc_msgSend__addCandidate_isRemoteCandidate_(self, v121, (uint64_t)v120, v122, 0);
    uint64_t v125 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v123, (uint64_t)v120, v124, v176, self->_cbuuid, self);
    id v126 = *(void **)(*(void *)&buf[8] + 40);
    *(void *)(*(void *)&buf[8] + 40) = v125;

    if (self->_isInitiator)
    {
      uint64_t v127 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int v214 = 138412290;
        *(void *)&v214[4] = v178;
        _os_log_impl(&dword_19D9BE000, v127, OS_LOG_TYPE_DEFAULT, "use linkUUID %@ for triggered check.", v214, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v167 = (const char *)v178;
          _IDSLogTransport(@"GL", @"IDS", @"use linkUUID %@ for triggered check.");
          if (_IDSShouldLog())
          {
            uint64_t v167 = (const char *)v178;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"use linkUUID %@ for triggered check.");
          }
        }
      }
      objc_msgSend_setLinkUUID_(*(void **)(*(void *)&buf[8] + 40), v128, (uint64_t)v178, v129, v167);
    }
    if (!self->_tokenToStunCheckPairs)
    {
      CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
      self->_CFDictionaryRef tokenToStunCheckPairs = Mutable;
    }
    id v132 = *(id *)(*(void *)&buf[8] + 40);
    if (v132)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToStunCheckPairs, v72, v132);
    }
    else
    {
      uint64_t v133 = MEMORY[0x1E4F14500];
      id v134 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
        sub_19DB79DBC();
      }
    }
    unint64_t v135 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v136 = *(void *)(*(void *)&buf[8] + 40);
      *(_DWORD *)unsigned int v214 = 138412290;
      *(void *)&v214[4] = v136;
      _os_log_impl(&dword_19D9BE000, v135, OS_LOG_TYPE_DEFAULT, "add stun check pair %@.", v214, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v167 = *(const char **)(*(void *)&buf[8] + 40);
        _IDSLogTransport(@"GL", @"IDS", @"add stun check pair %@.");
        if (_IDSShouldLog())
        {
          uint64_t v167 = *(const char **)(*(void *)&buf[8] + 40);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"add stun check pair %@.");
        }
      }
    }

    double v81 = *(void **)(*(void *)&buf[8] + 40);
  }
  __int16 v137 = objc_msgSend_linkMetrics(v81, v75, v76, v77, v167);
  objc_msgSend_receiveBindingRequest(v137, v138, v139, v140);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v141, *(void *)(*(void *)&buf[8] + 40), v142);
  if (objc_msgSend_getAttribute_attribute_(v70, v143, 32776, v144, __b))
  {
    id v148 = objc_alloc(MEMORY[0x1E4F29128]);
    double v151 = objc_msgSend_initWithUUIDBytes_(v148, v149, (uint64_t)&__b[3], v150);
    objc_msgSend__processRemoteLinkUUID_candidatePair_(self, v152, (uint64_t)v151, v153, *(void *)(*(void *)&buf[8] + 40));
  }
  if (!objc_msgSend__shouldUseP2PTLE(self, v145, v146, v147)) {
    goto LABEL_138;
  }
  long long v157 = objc_msgSend_local(*(void **)(*(void *)&buf[8] + 40), v154, v155, v156);
  if ((objc_msgSend_isCellularStunCandidate(v157, v158, v159, v160) & 1) == 0)
  {

    goto LABEL_140;
  }
  BOOL v161 = !self->_allowTLEOverCellular;

  if (!v161)
  {
LABEL_140:
    uint64_t v162 = *(void *)(*(void *)&buf[8] + 40);
    v179[0] = MEMORY[0x1E4F143A8];
    v179[1] = 3221225472;
    v179[2] = sub_19DA62C08;
    v179[3] = &unk_1E59743F0;
    double v180 = v71;
    uint64_t v181 = v177;
    objc_msgSend__attemptP2PNegotiationForSTUNMessage_candidatePair_completionHandler_(self, v163, (uint64_t)v70, v164, v162, v179);

    goto LABEL_141;
  }
LABEL_138:
  v177[2]();
LABEL_141:

  _Block_object_dispose(v186, 8);
  _Block_object_dispose(buf, 8);

  return 1;
}

- (void)_attemptP2PNegotiationForSTUNMessage:(id)a3 candidatePair:(id)a4 completionHandler:(id)a5
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  unint64_t nextP2PNegotiationAttempt = self->_nextP2PNegotiationAttempt;
  self->_unint64_t nextP2PNegotiationAttempt = nextP2PNegotiationAttempt + 1;
  id v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = nextP2PNegotiationAttempt;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      unint64_t v39 = nextP2PNegotiationAttempt;
      _IDSLogTransport(@"GL", @"IDS", @"_attemptP2PNegotiationForSTUNMessage[%llu]");
      if (_IDSShouldLog())
      {
        unint64_t v39 = nextP2PNegotiationAttempt;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_attemptP2PNegotiationForSTUNMessage[%llu]");
      }
    }
  }
  if (!objc_msgSend__shouldUseP2PTLE(self, v13, v14, v15, v39)) {
    goto LABEL_10;
  }
  uint64_t v19 = objc_msgSend_local(v9, v16, v17, v18);
  if (objc_msgSend_isCellularStunCandidate(v19, v20, v21, v22))
  {
    BOOL v23 = !self->_allowTLEOverCellular;

    if (v23)
    {
LABEL_10:
      (*((void (**)(id, void, void))v10 + 2))(v10, 0, 0);
      goto LABEL_35;
    }
  }
  else
  {
  }
  memset(buf, 170, 0x5D0uLL);
  if (objc_msgSend_getAttribute_attribute_(v8, v24, 36866, v25, buf)) {
    uint64_t v28 = *(unsigned int *)&buf[8];
  }
  else {
    uint64_t v28 = 0;
  }
  if (objc_msgSend_getAttribute_attribute_(v8, v26, 36867, v27, buf)) {
    uint64_t v31 = *(unsigned int *)&buf[8];
  }
  else {
    uint64_t v31 = 0;
  }
  if (v28 && v31 && objc_msgSend_getAttribute_attribute_(v8, v29, 36865, v30, buf))
  {
    id v34 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v32, (uint64_t)&buf[12], v33, *(int *)&buf[8]);
    double v35 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v43 = 134218498;
      unint64_t v44 = nextP2PNegotiationAttempt;
      __int16 v45 = 2112;
      id v46 = v34;
      __int16 v47 = 2112;
      id v48 = v9;
      _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@", v43, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v41 = v34;
        id v42 = v9;
        unint64_t v40 = nextP2PNegotiationAttempt;
        _IDSLogTransport(@"GL", @"IDS", @"_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@");
        if (_IDSShouldLog())
        {
          uint64_t v41 = v34;
          id v42 = v9;
          unint64_t v40 = nextP2PNegotiationAttempt;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_attemptP2PNegotiationForSTUNMessage[%llu]: received p2p negotiation blob: %@ from:%@");
        }
      }
    }
    objc_msgSend__receiveP2PNegotiationBlob_attemptID_remoteIDSConnectionID_remoteAVCConnectionID_candidatePair_completionHandler_(self, v36, (uint64_t)v34, v37, nextP2PNegotiationAttempt, v31, v28, v9, v10, v40, v41, v42);
  }
  else
  {
    double v38 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v43 = 134217984;
      unint64_t v44 = nextP2PNegotiationAttempt;
      _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message", v43, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_attemptP2PNegotiationForSTUNMessage[%llu]: no p2p negotiation info in stun message");
        }
      }
    }
    (*((void (**)(id, void, void))v10 + 2))(v10, 0, 0);
  }
LABEL_35:
}

- (void)_receiveP2PNegotiationBlob:(id)a3 attemptID:(unint64_t)a4 remoteIDSConnectionID:(unsigned int)a5 remoteAVCConnectionID:(unsigned int)a6 candidatePair:(id)a7 completionHandler:(id)a8
{
  id v14 = a3;
  id v15 = a7;
  id v16 = a8;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = sub_19DA633C8;
  v22[3] = &unk_1E5974468;
  id v23 = v15;
  id v24 = v14;
  id v26 = v16;
  unint64_t v27 = a4;
  unsigned int v28 = a6;
  unsigned int v29 = a5;
  double v25 = self;
  id v17 = v16;
  id v18 = v14;
  id v19 = v15;
  objc_msgSend__getP2PNegotiationForCandidatePair_completionBlock_(self, v20, (uint64_t)v19, v21, v22);
}

- (void)setUpP2PQUICPodConnectionsForCandidatePair:(id)a3 attemptID:(unint64_t)a4 completionHandler:(id)a5
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a5;
  nwLinuint64_t k = self->_nwLink;
  cbuuid = self->_cbuuid;
  id v14 = objc_msgSend_local(v7, v11, v12, v13);
  uint64_t v18 = objc_msgSend_address(v14, v15, v16, v17);
  double v22 = objc_msgSend_remote(v7, v19, v20, v21);
  uint64_t v26 = objc_msgSend_address(v22, v23, v24, v25);
  double v30 = objc_msgSend_QUICConnectionIDs(v7, v27, v28, v29);
  id v34 = objc_msgSend_p2pNegotiatedKeys(v7, v31, v32, v33);
  uint64_t v38 = objc_msgSend_channelNumber(v7, v35, v36, v37);
  LOBYTE(nwLink) = objc_msgSend_createQUICPodP2PConnectionsForSession_localAddress_remoteAddress_quicConnectionIDs_negotiatedKeys_channelNumber_completionHandler_(nwLink, v39, (uint64_t)cbuuid, v40, v18, v26, v30, v34, v38, v8);

  if ((nwLink & 1) == 0)
  {
    uint64_t v41 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v44 = a4;
      _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"setUpP2PQUICPodConnectionsForCandidatePair[%llu]: failed to set up p2p connections");
        }
      }
    }
  }
}

- (BOOL)_processBindingResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v11 = *(void *)&a5;
  uint64_t v205 = *MEMORY[0x1E4F143B8];
  id v14 = (char *)a3;
  id v127 = a4;
  id v15 = a8;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v203 = v16;
  long long v204 = v16;
  long long v201 = v16;
  long long v202 = v16;
  long long v199 = v16;
  long long v200 = v16;
  long long v197 = v16;
  long long v198 = v16;
  long long v196 = v16;
  long long v195 = v16;
  long long v194 = v16;
  long long v193 = v16;
  long long v192 = v16;
  long long v191 = v16;
  long long v190 = v16;
  long long v189 = v16;
  __memcpy_chk();
  __memcpy_chk();
  uint64_t v132 = 0;
  uint64_t v133 = &v132;
  uint64_t v134 = 0x2020000000;
  unint64_t v135 = &v197;
  uint64_t v128 = 0;
  double v129 = &v128;
  uint64_t v130 = 0x2020000000;
  double v131 = &v189;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v188 = v17;
  long long v187 = v17;
  long long v186 = v17;
  long long v185 = v17;
  long long v184 = v17;
  long long v183 = v17;
  long long v182 = v17;
  *(_OWORD *)__str = v17;
  long long v180 = v17;
  long long v179 = v17;
  long long v178 = v17;
  long long v177 = v17;
  long long v176 = v17;
  long long v175 = v17;
  long long v174 = v17;
  *(_OWORD *)id v173 = v17;
  memset(__b, 170, sizeof(__b));
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v171[6] = v18;
  v171[7] = v18;
  v171[4] = v18;
  v171[5] = v18;
  v171[2] = v18;
  v171[3] = v18;
  v171[0] = v18;
  v171[1] = v18;
  SAToIPPortString(__str, 0x80uLL, (uint64_t)&v197);
  SAToIPPortString(v173, 0x80uLL, v129[3]);
  id v19 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    double v164 = v14;
    __int16 v165 = 2080;
    id v166 = v173;
    __int16 v167 = 2080;
    __int16 v168 = __str;
    __int16 v169 = 1024;
    int v170 = v11;
    _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "receive binding response %@ from %s on %s(%u)", buf, 0x26u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      double v124 = __str;
      uint64_t v125 = v11;
      long long v120 = v14;
      id v123 = v173;
      _IDSLogTransport(@"GL", @"IDS", @"receive binding response %@ from %s on %s(%u)");
      if (_IDSShouldLog())
      {
        double v124 = __str;
        uint64_t v125 = v11;
        long long v120 = v14;
        id v123 = v173;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive binding response %@ from %s on %s(%u)");
      }
    }
  }
  Value = 0;
  if (v15 && self->_tokenToStunCheckPairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToStunCheckPairs, v15);
  }
  id v21 = Value;
  double v25 = objc_msgSend_linkMetrics(v21, v22, v23, v24);
  objc_msgSend_receiveBindingResponse(v25, v26, v27, v28);

  objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v29, (uint64_t)v21, v30);
  if (!v21)
  {
    uint64_t v50 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      double v164 = (char *)v15;
      _os_log_impl(&dword_19D9BE000, v50, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for %@.");
        if (_IDSShouldLog())
        {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for %@.");
          BOOL v51 = 0;
          goto LABEL_48;
        }
      }
    }
    goto LABEL_47;
  }
  if (objc_msgSend_getAttribute_attribute_(v14, v31, 32776, v32, __b))
  {
    id v35 = objc_alloc(MEMORY[0x1E4F29128]);
    uint64_t v38 = objc_msgSend_initWithUUIDBytes_(v35, v36, (uint64_t)&__b[3], v37);
    objc_msgSend__processRemoteLinkUUID_candidatePair_(self, v39, (uint64_t)v38, v40, v21);
  }
  if ((objc_msgSend_getAttribute_attribute_(v14, v33, 32, v34, __b, v120, v123, v124, v125) & 1) == 0)
  {
    uint64_t v52 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v52, OS_LOG_TYPE_DEFAULT, "failed to receive xor-mapped-address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to receive xor-mapped-address.");
        if (_IDSShouldLog())
        {
          double v53 = @"failed to receive xor-mapped-address.";
LABEL_46:
          _IDSLogV(0, @"IDSFoundation", @"GL", v53);
          BOOL v51 = 0;
          goto LABEL_48;
        }
      }
    }
LABEL_47:
    BOOL v51 = 0;
    goto LABEL_48;
  }
  __memcpy_chk();
  if (!IsValidSA((BOOL)v171))
  {
    uint64_t v54 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "receive invalid xor-mapped-address.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"receive invalid xor-mapped-address.");
        if (_IDSShouldLog())
        {
          double v53 = @"receive invalid xor-mapped-address.";
          goto LABEL_46;
        }
      }
    }
    goto LABEL_47;
  }
  uint64_t v41 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    id v42 = SAToIPPortString(v173, 0x80uLL, (uint64_t)v171);
    *(_DWORD *)buf = 136315138;
    double v164 = v42;
    _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "receive xor-mapped-address [%s].", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      long long v121 = SAToIPPortString(v173, 0x80uLL, (uint64_t)v171);
      _IDSLogTransport(@"GL", @"IDS", @"receive xor-mapped-address [%s].");
      if (_IDSShouldLog())
      {
        long long v121 = SAToIPPortString(v173, 0x80uLL, (uint64_t)v171);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive xor-mapped-address [%s].");
      }
    }
  }
  int Attribute_attribute = objc_msgSend_getAttribute_attribute_(v14, v43, 32803, v44, __b, v121);
  if (__b[2]) {
    int v49 = Attribute_attribute;
  }
  else {
    int v49 = 0;
  }
  if (v49 != 1) {
    goto LABEL_27;
  }
  if ((__b[2] & 0x80) != 0)
  {
    unsigned int v126 = __b[2] & 0x7F | 0x80;
    goto LABEL_50;
  }
  unsigned int v126 = __b[2] & 0x7F;
  if ((__b[2] & 0x7F) != 0)
  {
LABEL_50:
    double v56 = objc_msgSend_remote(v21, v46, v47, v48);
    objc_msgSend_setLinkFlags_(v56, v57, v126, v58);

    goto LABEL_51;
  }
LABEL_27:
  LOWORD(v126) = 0;
LABEL_51:
  int v59 = objc_msgSend_getAttribute_attribute_(v14, v46, 32804, v48, __b);
  uint64_t v63 = __b[2];
  if (__b[2]) {
    int v64 = v59;
  }
  else {
    int v64 = 0;
  }
  if (v64 == 1)
  {
    id v65 = objc_msgSend_remote(v21, v60, v61, v62);
    objc_msgSend_setDataSoMask_(v65, v66, v63, v67);
  }
  else
  {
    LODWORD(v63) = 0;
  }
  double v68 = objc_msgSend_local(v21, v60, v61, v62);
  uint64_t v72 = objc_msgSend_external(v68, v69, v70, v71);

  if (IsSameSA(v72, (uint64_t)v171))
  {
    uint64_t v76 = 0;
    char isRemoteCandidate = 0;
  }
  else
  {
    uint64_t v78 = objc_msgSend_local(v21, v73, v74, v75);
    uint64_t v82 = objc_msgSend_radioAccessTechnology(v78, v79, v80, v81);

    uint64_t v86 = objc_msgSend_local(v21, v83, v84, v85);
    uint64_t v90 = objc_msgSend_mtu(v86, v87, v88, v89);

    objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v91, 2, v92, 1, v82, v90, v11, v133[3], v171);
    uint64_t v76 = (char *)objc_claimAutoreleasedReturnValue();
    double v93 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      double v164 = v76;
      _os_log_impl(&dword_19D9BE000, v93, OS_LOG_TYPE_DEFAULT, "discover local prlx candidate %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v122 = v76;
        _IDSLogTransport(@"GL", @"IDS", @"discover local prlx candidate %@.");
        if (_IDSShouldLog())
        {
          double v122 = v76;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"discover local prlx candidate %@.");
        }
      }
    }
    char isRemoteCandidate = objc_msgSend__addCandidate_isRemoteCandidate_(self, v94, (uint64_t)v76, v95, 0, v122);
    double v99 = objc_msgSend_local(v21, v96, v97, v98);
    uint64_t isCLAT46 = objc_msgSend_isCLAT46(v99, v100, v101, v102);
    objc_msgSend_setIsCLAT46_(v76, v104, isCLAT46, v105);

    uint64_t v109 = objc_msgSend_local(v21, v106, v107, v108);
    uint64_t v113 = objc_msgSend_cellularSlicingFlags(v109, v110, v111, v112);
    objc_msgSend_setCellularSlicingFlags_(v76, v114, v113, v115);
  }
  v136[0] = MEMORY[0x1E4F143A8];
  v136[1] = 3221225472;
  v136[2] = sub_19DA64960;
  v136[3] = &unk_1E5974490;
  long long v147 = v201;
  long long v148 = v202;
  long long v149 = v203;
  long long v150 = v204;
  long long v143 = v197;
  long long v144 = v198;
  long long v145 = v199;
  long long v146 = v200;
  double v141 = &v132;
  double v142 = &v128;
  long long v157 = v195;
  long long v158 = v196;
  long long v155 = v193;
  long long v156 = v194;
  long long v153 = v191;
  long long v154 = v192;
  long long v151 = v189;
  long long v152 = v190;
  id v116 = v21;
  id v137 = v116;
  double v138 = self;
  id v139 = v15;
  char v162 = isRemoteCandidate;
  uint64_t v117 = v76;
  double v140 = v117;
  __int16 v161 = v126;
  int v160 = v63;
  double v159 = a9;
  objc_msgSend__attemptP2PNegotiationForSTUNMessage_candidatePair_completionHandler_(self, v118, (uint64_t)v14, v119, v116, v136);

  BOOL v51 = 1;
LABEL_48:

  _Block_object_dispose(&v128, 8);
  _Block_object_dispose(&v132, 8);

  return v51;
}

- (void)_discardNonSlicedP2PCandidatePairs
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (self->_cellInterfaceName)
  {
    uint64_t v5 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v70, 0.0, v82, 16);
    if (!v7) {
      goto LABEL_21;
    }
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v71;
    int v64 = v67;
    unint64_t v13 = 0x1E596F000uLL;
    *(void *)&long long v10 = 138413058;
    long long v63 = v10;
    id v65 = v5;
    while (1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v71 != v12) {
          objc_enumerationMutation(v5);
        }
        id v15 = *(void **)(*((void *)&v70 + 1) + 8 * i);
        long long v16 = objc_msgSend_local(v15, v8, v9, *(double *)&v10, v63, v64);
        uint64_t v20 = objc_msgSend_index(v16, v17, v18, v19);
        uint64_t v23 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(self, v21, v20, v22);

        if ((objc_msgSend_isRelayStunCandidatePair(v15, v24, v25, v26) & 1) == 0)
        {
          double v30 = objc_msgSend_local(v15, v27, v28, v29);
          if (objc_msgSend_isCellularStunCandidate(v30, v31, v32, v33))
          {
            char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(self->_cellInterfaceName, v34, (uint64_t)v23, v35);

            if (isEqualToIgnoringCase) {
              goto LABEL_19;
            }
            unint64_t v39 = objc_msgSend_sharedInstanceForBagType_(*(void **)(v13 + 3840), v37, 0, v38);
            double v30 = objc_msgSend_objectForKey_(v39, v40, @"ids-delay-for-cellular-default-and-slicing", v41);

            if (v30 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              uint64_t v45 = objc_msgSend_unsignedIntegerValue(v30, v42, v43, v44);
              int v49 = objc_msgSend_GlobalLink(IDSFoundationLog, v46, v47, v48);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                cellInterfaceName = self->_cellInterfaceName;
                *(_DWORD *)buf = v63;
                double v75 = v23;
                __int16 v76 = 2112;
                double v77 = cellInterfaceName;
                __int16 v78 = 2112;
                id v79 = v15;
                __int16 v80 = 1024;
                int v81 = v45;
                _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - currentInterfaceName %@ _cellInterfaceName %@ will discard existing pair: %@ in %u seconds.", buf, 0x26u);
              }

              double v53 = objc_msgSend_weakRefWithObject_(MEMORY[0x1E4F59E30], v51, (uint64_t)self, v52);
              dispatch_time_t v54 = dispatch_time(0, 1000000000 * v45);
              uint64_t v55 = im_primary_queue();
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              v67[0] = sub_19DA658F0;
              v67[1] = &unk_1E5974088;
              id v68 = v53;
              double v69 = v15;
              id v56 = v53;
              dispatch_after(v54, v55, block);

              uint64_t v5 = v65;
              unint64_t v13 = 0x1E596F000;
            }
            else
            {
              id v57 = objc_msgSend_GlobalLink(IDSFoundationLog, v42, v43, v44);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                double v58 = self->_cellInterfaceName;
                *(_DWORD *)buf = 138412802;
                double v75 = v23;
                __int16 v76 = 2112;
                double v77 = v58;
                __int16 v78 = 2112;
                id v79 = v15;
                _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - currentInterfaceName %@ _cellInterfaceName %@ discard existing pair: %@.", buf, 0x20u);
              }

              objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v59, 0, v60);
              objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v61, (uint64_t)v15, v62, 13);
            }
          }
        }
LABEL_19:
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v70, *(double *)&v10, v82, 16);
      if (!v11)
      {
LABEL_21:

        return;
      }
    }
  }
}

- (id)_filterNonSlicedLocalCandidates:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v6 = v4;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v29, v8, v33, 16);
  if (v9)
  {
    uint64_t v13 = v9;
    uint64_t v14 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v30 != v14) {
          objc_enumerationMutation(v6);
        }
        long long v16 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        uint64_t v17 = objc_msgSend_index(v16, v10, v11, v12, (void)v29);
        double v22 = objc_msgSend__interfaceNameForInterfaceIndexIncludingVPN_(self, v18, v17, v19);
        if (self->_cellInterfaceName && objc_msgSend_isCellularStunCandidate(v16, v20, v21, v23))
        {
          if (objc_msgSend_isEqualToIgnoringCase_(self->_cellInterfaceName, v24, (uint64_t)v22, v25)) {
            BOOL v26 = v5 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (!v26 && v16 != 0) {
LABEL_19:
          }
            CFArrayAppendValue(v5, v16);
        }
        else if (v5 && v16)
        {
          goto LABEL_19;
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v10, (uint64_t)&v29, v12, v33, 16);
    }
    while (v13);
  }

  return v5;
}

- (void)_updateInterfaceAddressesWithAddList:(id)a3 removeList:(id)a4
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v9 = a4;
  if (!self->_interfaceAddressArray)
  {
    uint64_t v11 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    interfaceAddressArray = self->_interfaceAddressArray;
    self->_interfaceAddressArray = v11;
  }
  if (objc_msgSend_count(v6, v7, v8, v10)) {
    objc_msgSend_addObjectsFromArray_(self->_interfaceAddressArray, v13, (uint64_t)v6, v15);
  }
  if (objc_msgSend_count(v9, v13, v14, v15)) {
    objc_msgSend_removeObjectsInArray_(self->_interfaceAddressArray, v16, (uint64_t)v9, v17);
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v18 = self->_interfaceAddressArray;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v47, v20, v53, 16);
  if (v23)
  {
    id v25 = 0;
    uint64_t v26 = *(void *)v48;
    do
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (*(void *)v48 != v26) {
          objc_enumerationMutation(v18);
        }
        uint64_t v28 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        if (objc_msgSend_isCellular(v28, v21, v22, v24))
        {
          if (!v25) {
            id v25 = objc_alloc_init(MEMORY[0x1E4F28E60]);
          }
          unsigned int v29 = objc_msgSend_index(v28, v21, v22, v24);
          objc_msgSend_addIndex_(v25, v30, v29, v31);
        }
      }
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v21, (uint64_t)&v47, v24, v53, 16);
    }
    while (v23);

    if (v25)
    {
      double v35 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v52 = v25;
        _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "current cellular interface indices: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v46 = v25;
          _IDSLogTransport(@"GL", @"IDS", @"current cellular interface indices: %@");
          if (_IDSShouldLog())
          {
            id v46 = v25;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"current cellular interface indices: %@");
          }
        }
      }
      objc_msgSend_setCellularInterfaceIndices_(self->_udpLink, v36, (uint64_t)v25, v37, v46);
      objc_msgSend_setCellularInterfaceIndices_(self->_udpLinkv6, v38, (uint64_t)v25, v39);
      objc_msgSend_setCellularInterfaceIndices_(self->_tcpLink, v40, (uint64_t)v25, v41);
      objc_msgSend_setCellularInterfaceIndices_(self->_tcpSSLLink, v42, (uint64_t)v25, v43);
      objc_msgSend_setCellularInterfaceIndices_(self->_nwLink, v44, (uint64_t)v25, v45);
    }
  }
  else
  {

    id v25 = 0;
  }
  objc_msgSend__generateTransportScoreCard(self, v32, v33, v34);
}

- (void)_generateTransportScoreCard
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  transportScoreCards = self->_transportScoreCards;
  if (!transportScoreCards)
  {
    id v6 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v7 = self->_transportScoreCards;
    self->_transportScoreCards = v6;

    transportScoreCards = self->_transportScoreCards;
  }
  objc_msgSend_removeAllObjects(transportScoreCards, a2, v2, v3);
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  obuint64_t j = self->_interfaceAddressArray;
  uint64_t v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v85, v9, v94, 16);
  if (v79)
  {
    uint64_t v78 = *(void *)v86;
    uint64_t v12 = 138412546;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v86 != v78)
        {
          uint64_t v14 = v13;
          objc_enumerationMutation(obj);
          uint64_t v13 = v14;
        }
        uint64_t v80 = v13;
        double v15 = *(void **)(*((void *)&v85 + 1) + 8 * v13);
        if (objc_msgSend_IPVersion(v15, v10, v11, *(double *)&v12, v75, v76)
          || !objc_msgSend_clat46(v15, v16, v17, v18)
          || self->_disablePureLinkFeature)
        {
          if (!self->_cellInterfaceName
            || !objc_msgSend_isCellular(v15, v16, v17, v18)
            || (objc_msgSend_name(v15, v16, v17, v18),
                double v19 = objc_claimAutoreleasedReturnValue(),
                char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v19, v20, (uint64_t)self->_cellInterfaceName, v21), v19, (isEqualToIgnoringCase & 1) != 0))
          {
            unsigned int v23 = objc_msgSend_index(v15, v16, v17, v18);
            uint64_t v27 = objc_msgSend_delegatedName(v15, v24, v25, v26);

            char isWired = objc_msgSend_isWired(v15, v28, v29, v30);
            if (v27)
            {
              if (isWired)
              {
                uint64_t v35 = 31;
                uint64_t v36 = 4;
                goto LABEL_30;
              }
              int isCellular = objc_msgSend_isCellular(v15, v32, v33, v34);
              BOOL v38 = isCellular == 0;
              if (isCellular) {
                uint64_t v35 = 1;
              }
              else {
                uint64_t v35 = 25;
              }
              uint64_t v39 = 5;
LABEL_27:
              if (v38) {
                uint64_t v36 = v39;
              }
              else {
                uint64_t v36 = v39 + 1;
              }
              goto LABEL_30;
            }
            if ((isWired & 1) == 0)
            {
              int v40 = objc_msgSend_isCellular(v15, v32, v33, v34);
              BOOL v38 = v40 == 0;
              if (v40) {
                uint64_t v35 = 3;
              }
              else {
                uint64_t v35 = 27;
              }
              uint64_t v39 = 2;
              goto LABEL_27;
            }
            uint64_t v35 = 33;
            uint64_t v36 = 1;
LABEL_30:
            uint64_t v43 = objc_msgSend_IPVersion(v15, v32, v33, v34);
            if (v43 == 1) {
              v35 *= 4;
            }
            else {
              objc_msgSend_IPVersion(v15, v41, v42, v44);
            }
            BOOL v45 = v43 == 1;
            uint64_t v46 = 2;
            while (2)
            {
              if (v46 == 4)
              {
                char shouldFallbackToTCPFirst = !self->_shouldFallbackToTCPFirst;
              }
              else
              {
                if (v46 != 3)
                {
                  if (v46 == 2) {
                    uint64_t v47 = 100 * v35;
                  }
                  else {
                    uint64_t v47 = v35;
                  }
LABEL_42:
                  long long v49 = objc_alloc_init(IDSTransportScoreCard);
                  v49->score = v47;
                  v49->stunTransport = v46;
                  v49->transportInterface = v36;
                  v49->interfaceIndex = v23;
                  v49->alreadySelected = 0;
                  v49->isIPid v6 = v45;
                  objc_msgSend_addObject_(self->_transportScoreCards, v50, (uint64_t)v49, v51);

                  if (++v46 == 5)
                  {
                    uint64_t v55 = objc_msgSend_allKeys(self->_allocationsToTransportScoreCards, v52, v53, v54);
                    long long v83 = 0u;
                    long long v84 = 0u;
                    long long v81 = 0u;
                    long long v82 = 0u;
                    uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v56, (uint64_t)&v81, 0.0, v89, 16);
                    if (v57)
                    {
                      uint64_t v58 = *(void *)v82;
                      do
                      {
                        for (uint64_t i = 0; i != v57; ++i)
                        {
                          if (*(void *)v82 != v58) {
                            objc_enumerationMutation(v55);
                          }
                          double v60 = *(const void **)(*((void *)&v81 + 1) + 8 * i);
                          id v61 = objc_alloc(MEMORY[0x1E4F1CA48]);
                          int v64 = objc_msgSend_initWithArray_copyItems_(v61, v62, (uint64_t)self->_transportScoreCards, v63, 1);
                          if (v64)
                          {
                            CFDictionarySetValue((CFMutableDictionaryRef)self->_allocationsToTransportScoreCards, v60, v64);
                          }
                          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 138412546;
                            double v91 = (void *)v60;
                            __int16 v92 = 2080;
                            double v93 = "_allocationsToTransportScoreCards";
                            _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
                          }
                        }
                        uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v65, (uint64_t)&v81, v66, v89, 16);
                      }
                      while (v57);
                    }

                    goto LABEL_55;
                  }
                  continue;
                }
                char shouldFallbackToTCPFirst = self->_shouldFallbackToTCPFirst;
              }
              break;
            }
            uint64_t v47 = v35 << shouldFallbackToTCPFirst;
            goto LABEL_42;
          }
          double v67 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
          {
            long long v71 = objc_msgSend_name(v15, v68, v69, v70);
            cellInterfaceName = self->_cellInterfaceName;
            *(_DWORD *)buf = 138412546;
            double v91 = v71;
            __int16 v92 = 2112;
            double v93 = (const char *)cellInterfaceName;
            _os_log_impl(&dword_19D9BE000, v67, OS_LOG_TYPE_DEFAULT, "Sliced Cellular Interface - currentInterfaceName %@, _cellInterfaceName %@ skipping currentInterfaceAddress for transport score card!", buf, 0x16u);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v75 = objc_msgSend_name(v15, v10, v11, *(double *)&v12);
              __int16 v76 = self->_cellInterfaceName;
              _IDSLogTransport(@"GL", @"IDS", @"Sliced Cellular Interface - currentInterfaceName %@, _cellInterfaceName %@ skipping currentInterfaceAddress for transport score card!");

              if (_IDSShouldLog())
              {
                double v75 = objc_msgSend_name(v15, v10, v11, *(double *)&v12, v75, v76);
                __int16 v76 = self->_cellInterfaceName;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"Sliced Cellular Interface - currentInterfaceName %@, _cellInterfaceName %@ skipping currentInterfaceAddress for transport score card!");
              }
            }
          }
        }
        else
        {
          long long v73 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            double v91 = v15;
            _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v75 = v15;
              _IDSLogTransport(@"GL", @"IDS", @"_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!");
              if (_IDSShouldLog())
              {
                double v75 = v15;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"_generateTransportScoreCard: skipping %@ which is a simualted IPv4 interface!");
              }
            }
          }
        }
LABEL_55:
        uint64_t v13 = v80 + 1;
      }
      while (v80 + 1 != v79);
      uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v85, *(double *)&v12, v94, 16);
      uint64_t v79 = v74;
    }
    while (v74);
  }
}

- (BOOL)_isUsingSameRATCandidatePair:(id)a3 transportScoreCard:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  double v10 = objc_msgSend_local(v5, v7, v8, v9);
  if (objc_msgSend_radioAccessTechnology(v10, v11, v12, v13) == 9)
  {
    uint64_t v14 = v6[3];
    if (v14 == 1) {
      goto LABEL_21;
    }

    if (v14 == 4) {
      goto LABEL_24;
    }
  }
  else
  {
  }
  double v10 = objc_msgSend_local(v5, v15, v16, v17);
  if (objc_msgSend_radioAccessTechnology(v10, v18, v19, v20))
  {

LABEL_8:
    double v10 = objc_msgSend_local(v5, v21, v22, v23);
    if (objc_msgSend_radioAccessTechnology(v10, v24, v25, v26))
    {
      double v30 = objc_msgSend_local(v5, v27, v28, v29);
      if (objc_msgSend_radioAccessTechnology(v30, v31, v32, v33) > 8)
      {
        LOBYTE(v14) = 0;
      }
      else
      {
        uint64_t v34 = v6[3];
        LOBYTE(v14) = v34 == 3 || v34 == 6;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
    }
    goto LABEL_21;
  }
  uint64_t v36 = v6[3];
  if (v36 != 2)
  {

    if (v36 == 5)
    {
LABEL_24:
      LOBYTE(v14) = 1;
      goto LABEL_22;
    }
    goto LABEL_8;
  }
  LOBYTE(v14) = 1;
LABEL_21:

LABEL_22:
  return v14;
}

- (id)_transportInterfaceToString:(int64_t)a3
{
  if ((unint64_t)a3 > 6) {
    return 0;
  }
  else {
    return off_1E5974640[a3];
  }
}

- (BOOL)_processRemovedLocalAddressList:(id)a3
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  obuint64_t j = a3;
  uint64_t v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v155, v4, v166, 16);
  if (v137)
  {
    uint64_t v141 = 0;
    CFMutableArrayRef theArray = 0;
    id v140 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v136 = *(void *)v156;
    uint64_t v9 = 138412290;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v156 != v136)
        {
          uint64_t v11 = v10;
          objc_enumerationMutation(obj);
          uint64_t v10 = v11;
        }
        uint64_t v138 = v10;
        uint64_t v12 = objc_msgSend_address(*(void **)(*((void *)&v155 + 1) + 8 * v10), v5, v6, *(double *)&v9, v132);
        uint64_t v16 = objc_msgSend_sa(v12, v13, v14, v15);

        double v20 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v17, v18, v19);

        long long v153 = 0u;
        long long v154 = 0u;
        long long v151 = 0u;
        long long v152 = 0u;
        id v21 = v20;
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v151, v23, v165, 16);
        if (v26)
        {
          uint64_t v28 = *(void *)v152;
          do
          {
            for (uint64_t i = 0; i != v26; ++i)
            {
              if (*(void *)v152 != v28) {
                objc_enumerationMutation(v21);
              }
              double v30 = *(void **)(*((void *)&v151 + 1) + 8 * i);
              double v31 = objc_msgSend_local(v30, v24, v25, v27);
              uint64_t v35 = objc_msgSend_address(v31, v32, v33, v34);
              BOOL v36 = IsSameIP(v16, v35);

              if (v36)
              {
                if (v8 || (uint64_t v8 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
                {
                  double v37 = objc_msgSend_candidatePairToken(v30, v24, v25, v27);
                  BOOL v38 = v37 == 0;

                  if (!v38)
                  {
                    uint64_t v42 = objc_msgSend_candidatePairToken(v30, v39, v40, v41);
                    CFArrayAppendValue(v8, v42);
                  }
                }
                uint64_t v43 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_candidatePairToken(v30, v44, v45, v46);
                  id v47 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  id v160 = v47;
                  _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "remove candidate pair %@.", buf, 0xCu);
                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v132 = objc_msgSend_candidatePairToken(v30, v48, v50, v49);
                    _IDSLogTransport(@"GL", @"IDS", @"remove candidate pair %@.");

                    if (_IDSShouldLog())
                    {
                      uint64_t v132 = objc_msgSend_candidatePairToken(v30, v48, v51, v49, v132);
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"remove candidate pair %@.");
                    }
                  }
                }
                objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v48, (uint64_t)v30, v49, 1, v132);
                LOBYTE(v141) = objc_msgSend_isActive(v30, v52, v53, v54) | v141;
                HIDWORD(v141) |= objc_msgSend_isNominated(v30, v55, v56, v57);
              }
            }
            uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v24, (uint64_t)&v151, v27, v165, 16);
          }
          while (v26);
        }

        id v61 = objc_msgSend_allValues(self->_tokenToStunCheckPairs, v58, v59, v60);

        long long v149 = 0u;
        long long v150 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        id v140 = v61;
        uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v140, v62, (uint64_t)&v147, v63, v164, 16);
        if (v66)
        {
          uint64_t v68 = *(void *)v148;
          do
          {
            for (uint64_t j = 0; j != v66; ++j)
            {
              if (*(void *)v148 != v68) {
                objc_enumerationMutation(v140);
              }
              double v70 = *(void **)(*((void *)&v147 + 1) + 8 * j);
              long long v71 = objc_msgSend_local(v70, v64, v65, v67, v132);
              uint64_t v75 = objc_msgSend_address(v71, v72, v73, v74);
              BOOL v76 = IsSameIP(v16, v75);

              if (v76)
              {
                if (theArray || (CFMutableArrayRef theArray = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
                {
                  double v77 = objc_msgSend_candidatePairToken(v70, v64, v65, v67);
                  BOOL v78 = v77 == 0;

                  if (!v78)
                  {
                    long long v82 = objc_msgSend_candidatePairToken(v70, v79, v80, v81);
                    CFArrayAppendValue(theArray, v82);
                  }
                }
                else
                {
                  CFMutableArrayRef theArray = 0;
                }
                long long v83 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend_candidatePairToken(v70, v84, v85, v86);
                  id v87 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138412290;
                  id v160 = v87;
                  _os_log_impl(&dword_19D9BE000, v83, OS_LOG_TYPE_DEFAULT, "remove stun check pair %@.", buf, 0xCu);
                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v132 = objc_msgSend_candidatePairToken(v70, v64, v65, v67);
                    _IDSLogTransport(@"GL", @"IDS", @"remove stun check pair %@.");

                    if (_IDSShouldLog())
                    {
                      uint64_t v132 = objc_msgSend_candidatePairToken(v70, v64, v65, v67, v132);
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"remove stun check pair %@.");
                    }
                  }
                }
              }
            }
            uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v140, v64, (uint64_t)&v147, v67, v164, 16);
          }
          while (v66);
        }

        long long v145 = 0u;
        long long v146 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v88 = self->_localCandidateList;
        uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v88, v89, (uint64_t)&v143, v90, v163, 16);
        if (v93)
        {
          uint64_t v95 = *(void *)v144;
          do
          {
            for (uint64_t k = 0; k != v93; ++k)
            {
              if (*(void *)v144 != v95) {
                objc_enumerationMutation(v88);
              }
              uint64_t v97 = *(void **)(*((void *)&v143 + 1) + 8 * k);
              uint64_t v98 = objc_msgSend_address(v97, v91, v92, v94, v132);
              if (IsSameIP(v16, v98))
              {
                if (!v7) {
                  uint64_t v7 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                if (v97) {
                  BOOL v99 = v7 == 0;
                }
                else {
                  BOOL v99 = 1;
                }
                if (!v99) {
                  CFArrayAppendValue(v7, v97);
                }
                double v100 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  id v160 = v97;
                  _os_log_impl(&dword_19D9BE000, v100, OS_LOG_TYPE_DEFAULT, "remove local candidate %@.", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v132 = v97;
                    _IDSLogTransport(@"GL", @"IDS", @"remove local candidate %@.");
                    if (_IDSShouldLog())
                    {
                      uint64_t v132 = v97;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"remove local candidate %@.");
                    }
                  }
                }
              }
            }
            uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(v88, v91, (uint64_t)&v143, v94, v163, 16);
          }
          while (v93);
        }

        uint64_t v10 = v138 + 1;
      }
      while (v138 + 1 != v137);
      uint64_t v137 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v155, *(double *)&v9, v166, 16);
    }
    while (v137);
  }
  else
  {
    uint64_t v141 = 0;
    CFMutableArrayRef theArray = 0;
    id v140 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }

  if (objc_msgSend_count(v8, v101, v102, v103))
  {
    objc_msgSend_removeObjectsForKeys_(self->_tokenToCandidatePairs, v104, (uint64_t)v8, v106);
    uint64_t v107 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(self->_tokenToCandidatePairs, v108, v109, v110);
      id v111 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      id v160 = v111;
      _os_log_impl(&dword_19D9BE000, v107, OS_LOG_TYPE_DEFAULT, "remaining candidate pairs: %@.", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v132 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v104, v105, v106);
        _IDSLogTransport(@"GL", @"IDS", @"remaining candidate pairs: %@.");

        if (_IDSShouldLog())
        {
          uint64_t v132 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v104, v105, v106, v132);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining candidate pairs: %@.");
        }
      }
    }
  }
  if (objc_msgSend_count(theArray, v104, v105, v106, v132))
  {
    objc_msgSend_removeObjectsForKeys_(self->_tokenToStunCheckPairs, v112, (uint64_t)theArray, v114);
    double v115 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(self->_tokenToStunCheckPairs, v116, v117, v118);
      id v119 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      id v160 = v119;
      _os_log_impl(&dword_19D9BE000, v115, OS_LOG_TYPE_DEFAULT, "remaining stun check pairs: %@.", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v133 = objc_msgSend_allValues(self->_tokenToStunCheckPairs, v112, v113, v114);
        _IDSLogTransport(@"GL", @"IDS", @"remaining stun check pairs: %@.");

        if (_IDSShouldLog())
        {
          uint64_t v133 = objc_msgSend_allValues(self->_tokenToStunCheckPairs, v112, v113, v114, v133);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining stun check pairs: %@.");
        }
      }
    }
  }
  if (objc_msgSend_count(v7, v112, v113, v114, v133))
  {
    objc_msgSend_removeObjectsInArray_(self->_localCandidateList, v120, (uint64_t)v7, v121);
    double v122 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
      localCandidateList = self->_localCandidateList;
      *(_DWORD *)buf = 138412290;
      id v160 = localCandidateList;
      _os_log_impl(&dword_19D9BE000, v122, OS_LOG_TYPE_DEFAULT, "remaining local candidates: %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v134 = self->_localCandidateList;
        _IDSLogTransport(@"GL", @"IDS", @"remaining local candidates: %@.");
        if (_IDSShouldLog())
        {
          uint64_t v134 = self->_localCandidateList;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining local candidates: %@.");
        }
      }
    }
    objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v124, (uint64_t)obj, v125, v134);
  }
  objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v120, 0, v121, obj);
  unsigned int v126 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
  {
    interfaceAddressArray = self->_interfaceAddressArray;
    *(_DWORD *)buf = 138412290;
    id v160 = interfaceAddressArray;
    _os_log_impl(&dword_19D9BE000, v126, OS_LOG_TYPE_DEFAULT, "remaining local address list: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"remaining local address list: %@.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining local address list: %@.");
      }
    }
  }
  if ((v141 | BYTE4(v141)))
  {
    uint64_t v128 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
    {
      double v129 = @"NO";
      if (v141) {
        uint64_t v130 = @"YES";
      }
      else {
        uint64_t v130 = @"NO";
      }
      if ((v141 & 0x100000000) != 0) {
        double v129 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v160 = v130;
      __int16 v161 = 2112;
      char v162 = v129;
      _os_log_impl(&dword_19D9BE000, v128, OS_LOG_TYPE_DEFAULT, "default/nominated link is removed(default:%@, nominated:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"default/nominated link is removed(default:%@, nominated:%@).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"default/nominated link is removed(default:%@, nominated:%@).");
        }
      }
    }
  }

  return (v141 | BYTE4(v141)) & 1;
}

- (void)_processNewLocalAddressList:(id)a3
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v78 = self;
  objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v5, (uint64_t)v4, v6, 0);
  uint64_t v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    interfaceAddressArray = self->_interfaceAddressArray;
    *(_DWORD *)buf = 138412290;
    id v87 = interfaceAddressArray;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "current local address list: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v74 = (uint64_t)self->_interfaceAddressArray;
      _IDSLogTransport(@"GL", @"IDS", @"current local address list: %@.");
      if (_IDSShouldLog())
      {
        uint64_t v74 = (uint64_t)self->_interfaceAddressArray;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"current local address list: %@.");
      }
    }
  }
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  obuint64_t j = v4;
  uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v81, v10, v85, 16);
  if (v80)
  {
    char v14 = 0;
    double v77 = 0;
    char v75 = 1;
    uint64_t v79 = *(void *)v82;
    do
    {
      for (uint64_t i = 0; i != v80; ++i)
      {
        if (*(void *)v82 != v79) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v81 + 1) + 8 * i);
        double v17 = objc_msgSend_address(v16, v11, v12, v13, v74);
        BOOL v18 = v17 == 0;

        if (!v18)
        {
          double v19 = objc_msgSend_address(v16, v11, v12, v13);
          uint64_t v23 = objc_msgSend_sa(v19, v20, v21, v22);
          BOOL v24 = IsLinkLocalSA(v23);

          if (!v24)
          {
            uint64_t v25 = objc_msgSend_address(v16, v11, v12, v13);
            int v29 = *(unsigned __int8 *)(objc_msgSend_sa(v25, v26, v27, v28) + 1);

            int isCellular = (const char *)objc_msgSend_isCellular(v16, v30, v31, v32);
            if (isCellular)
            {
              double v37 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v33, v34, v36);
              LODWORD(v41) = objc_msgSend_radioAccessTechnology(v37, v38, v39, v40);

              if (v41 >= 0xA) {
                uint64_t v41 = 10;
              }
              else {
                uint64_t v41 = v41;
              }
            }
            else if (objc_msgSend_isWired(v16, v33, v34, v36))
            {
              uint64_t v41 = 9;
            }
            else
            {
              uint64_t v41 = 0;
            }
            if (v29 == 30) {
              unsigned int v44 = 6;
            }
            else {
              unsigned int v44 = 5;
            }
            uint64_t LocalMTU = GLUtilGetLocalMTU(v44, isCellular, v42, v43);
            uint64_t v49 = objc_msgSend_index(v16, v46, v47, v48);
            uint64_t v53 = objc_msgSend_address(v16, v50, v51, v52);
            uint64_t v57 = objc_msgSend_sa(v53, v54, v55, v56);
            id v61 = objc_msgSend_address(v16, v58, v59, v60);
            uint64_t v74 = objc_msgSend_sa(v61, v62, v63, v64);
            uint64_t v67 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v65, 0, v66, 1, v41, LocalMTU, v49, v57);

            if (objc_msgSend__addCandidate_isRemoteCandidate_(v78, v68, v67, v69, 0)) {
              objc_msgSend__addStunCheckPair_isRemoteCandidate_(v78, v11, v67, v13, 0);
            }
            if (v29 != 30)
            {
              if (v78->_allowP2P) {
                objc_msgSend__requestSelfAllocationForInterfaceAddress_(v78, v11, (uint64_t)v16, v13);
              }
              char v75 = 0;
            }
            char v14 = 1;
            double v77 = (void *)v67;
          }
        }
      }
      uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v81, v13, v85, 16);
    }
    while (v80);

    if (v14)
    {
      if (v75)
      {
        double v70 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v70, OS_LOG_TYPE_DEFAULT, "new address list is IPv6 only, send connection data.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"new address list is IPv6 only, send connection data.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"new address list is IPv6 only, send connection data.");
            }
          }
        }
        objc_msgSend__sendConnectionDataWithRemovedAddressList_(v78, v71, 0, v72);
      }
      goto LABEL_49;
    }
  }
  else
  {

    double v77 = 0;
  }
  uint64_t v73 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v73, OS_LOG_TYPE_DEFAULT, "no new valid local address is found, ignore.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"no new valid local address is found, ignore.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"no new valid local address is found, ignore.");
      }
    }
  }
LABEL_49:
}

- (BOOL)_isSlicedCellularInterfaceActive:(unsigned int)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v24, v6, v28, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v4);
        }
        char v14 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (void)v24) == a3)
        {
          uint64_t v16 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v8, v9, v10);
          double v20 = objc_msgSend_name(v14, v17, v18, v19);
          char isSlicedCellularInterfaceActive = objc_msgSend_isSlicedCellularInterfaceActive_(v16, v21, (uint64_t)v20, v22);

          goto LABEL_11;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v24, v10, v28, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  char isSlicedCellularInterfaceActive = 0;
LABEL_11:

  return isSlicedCellularInterfaceActive;
}

- (BOOL)_isCLAT46Interface:(sockaddr *)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v22, v6, v26, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v23 != v12) {
          objc_enumerationMutation(v4);
        }
        char v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        double v15 = objc_msgSend_address(v14, v8, v9, v10, (void)v22);
        uint64_t v19 = objc_msgSend_sa(v15, v16, v17, v18);

        if (IsSameSA(v19, (uint64_t)a3) && objc_msgSend_clat46(v14, v8, v9, v10) && a3->sa_family == 2)
        {
          BOOL v20 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v22, v10, v26, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  BOOL v20 = 0;
LABEL_13:

  return v20;
}

- (BOOL)_isInterfaceExpensiveWithInterfaceIndex:(unsigned int)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v4);
        }
        char v14 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (void)v17) == a3)
        {
          char v15 = objc_msgSend_expensive(v14, v8, v9, v10);
          goto LABEL_11;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  char v15 = 0;
LABEL_11:

  return v15;
}

- (BOOL)_isInterfaceConstrainedWithInterfaceIndex:(unsigned int)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v4);
        }
        char v14 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (void)v17) == a3
          && (objc_msgSend_constrained(v14, v8, v9, v10) & 1) != 0)
        {
          BOOL v15 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  BOOL v15 = 0;
LABEL_12:

  return v15;
}

- (BOOL)_isInterfaceDelegatedWithInterfaceIndex:(unsigned int)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v18, v6, v22, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(v4);
        }
        char v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if (objc_msgSend_index(v14, v8, v9, v10, (void)v18) == a3)
        {
          BOOL v15 = objc_msgSend_delegatedName(v14, v8, v9, v10);

          if (v15)
          {
            BOOL v16 = 1;
            goto LABEL_12;
          }
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v18, v10, v22, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  BOOL v16 = 0;
LABEL_12:

  return v16;
}

- (id)_interfaceNameForInterfaceIndex:(unsigned int)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = self->_interfaceAddressArray;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v17, v6, v21, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v18;
    double v13 = &stru_1EEFDAD58;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v4);
        }
        BOOL v15 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (objc_msgSend_index(v15, v8, v9, v10, (void)v17) == a3)
        {
          objc_msgSend_name(v15, v8, v9, v10);
          double v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_12;
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v8, (uint64_t)&v17, v10, v21, 16);
      if (v11) {
        continue;
      }
      break;
    }
  }
  else
  {
    double v13 = &stru_1EEFDAD58;
  }
LABEL_12:

  return v13;
}

- (id)_interfaceNameForInterfaceIndexIncludingVPN:(unsigned int)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v5 = self->_interfaceAddressArray;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v37, v7, v42, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v38;
LABEL_3:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v38 != v13) {
        objc_enumerationMutation(v5);
      }
      BOOL v15 = *(void **)(*((void *)&v37 + 1) + 8 * v14);
      if (objc_msgSend_index(v15, v9, v10, v11) == a3) {
        break;
      }
      if (v12 == ++v14)
      {
        uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v37, v11, v42, 16);
        if (v12) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    objc_msgSend_name(v15, v9, v10, v11);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    int v21 = objc_msgSend_delegatedIndex(v15, v18, v19, v20);

    if (!v21)
    {
      long long v17 = v16;
      goto LABEL_23;
    }
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v5 = self->_interfaceAddressArray;
    uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v22, (uint64_t)&v33, v23, v41, 16);
    if (v24)
    {
      uint64_t v28 = v24;
      uint64_t v29 = *(void *)v34;
      while (2)
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v34 != v29) {
            objc_enumerationMutation(v5);
          }
          uint64_t v31 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          if (objc_msgSend_index(v31, v25, v26, v27, (void)v33) == v21)
          {
            long long v17 = objc_msgSend_name(v31, v25, v26, v27);

            goto LABEL_21;
          }
        }
        uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v25, (uint64_t)&v33, v27, v41, 16);
        if (v28) {
          continue;
        }
        break;
      }
    }
    long long v17 = v16;
  }
  else
  {
LABEL_9:
    id v16 = 0;
    long long v17 = 0;
  }
LABEL_21:

LABEL_23:
  return v17;
}

- (void)_processRemovedRemoteCandidates:(id)a3
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  id v110 = a3;
  double v108 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v4, v5, v6);
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v119, v8, v127, 16);
  if (v11)
  {
    CFMutableArrayRef theArray = 0;
    uint64_t v109 = *(void *)v120;
    uint64_t v12 = 138412290;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v120 != v109) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v119 + 1) + 8 * i);
        objc_msgSend_candidatePairToken(v14, v9, v10, *(double *)&v12, v102);
        BOOL v15 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isRelayStunCandidatePair(v14, v16, v17, v18))
        {
          uint64_t v22 = objc_msgSend_relayRemote(v14, v19, v20, v21);
          uint64_t v26 = objc_msgSend_address(v22, v23, v24, v25);

          long long v117 = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          id v27 = v110;
          uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v115, v29, v126, 16);
          if (v32)
          {
            uint64_t v34 = *(void *)v116;
            while (2)
            {
              for (uint64_t j = 0; j != v32; ++j)
              {
                if (*(void *)v116 != v34) {
                  objc_enumerationMutation(v27);
                }
                uint64_t v36 = objc_msgSend_address(*(void **)(*((void *)&v115 + 1) + 8 * j), v30, v31, v33);
                if (v36) {
                  BOOL v37 = v26 != 0;
                }
                else {
                  BOOL v37 = 0;
                }
                if (v37 && IsSameIP(v36, v26))
                {
                  uint64_t v43 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    double v125 = v15;
                    _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "remote interface is removed, disconnect relay candidate pair %@.", buf, 0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      uint64_t v102 = v15;
                      _IDSLogTransport(@"GL", @"IDS", @"remote interface is removed, disconnect relay candidate pair %@.");
                      if (_IDSShouldLog())
                      {
                        uint64_t v102 = v15;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"remote interface is removed, disconnect relay candidate pair %@.");
                      }
                    }
                  }
                  if (objc_msgSend_isQUIC(v14, v44, v45, v46, v102)) {
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(v108, v47, (uint64_t)v15, v48, 2);
                  }
                  else {
                    objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v108, v47, (uint64_t)v15, v48, 0, 2);
                  }
                  goto LABEL_41;
                }
              }
              uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v30, (uint64_t)&v115, v33, v126, 16);
              if (v32) {
                continue;
              }
              break;
            }
          }
        }
        else
        {
          objc_msgSend_remote(v14, v19, v20, v21);
          id v27 = (id)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_containsObject_(v110, v38, (uint64_t)v27, v39))
          {
            objc_msgSend__notifyCandidatePairDisconnected_withReason_(v108, v40, (uint64_t)v14, v41, 2);
            uint64_t v42 = theArray;
            if (theArray || (uint64_t v42 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
            {
              if (v15) {
                CFArrayAppendValue(v42, v15);
              }
            }
            CFMutableArrayRef theArray = v42;
            uint64_t v49 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              double v125 = v15;
              _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "remove candidate pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v102 = v15;
                _IDSLogTransport(@"GL", @"IDS", @"remove candidate pair %@.");
                if (_IDSShouldLog())
                {
                  uint64_t v102 = v15;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"remove candidate pair %@.");
                }
              }
            }
          }
        }
LABEL_41:
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v119, *(double *)&v12, v127, 16);
    }
    while (v11);
  }
  else
  {
    CFMutableArrayRef theArray = 0;
  }

  uint64_t v53 = objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v50, v51, v52);

  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id v54 = v53;
  uint64_t v57 = 0;
  uint64_t v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v55, (uint64_t)&v111, v56, v123, 16);
  if (v60)
  {
    uint64_t v61 = *(void *)v112;
    uint64_t v62 = 138412290;
    do
    {
      for (uint64_t k = 0; k != v60; ++k)
      {
        if (*(void *)v112 != v61) {
          objc_enumerationMutation(v54);
        }
        double v64 = *(void **)(*((void *)&v111 + 1) + 8 * k);
        if ((objc_msgSend_isRelayStunCandidatePair(v64, v58, v59, *(double *)&v62, v102) & 1) == 0)
        {
          uint64_t v65 = objc_msgSend_remote(v64, v58, v59, *(double *)&v62);
          int v68 = objc_msgSend_containsObject_(v110, v66, (uint64_t)v65, v67);

          if (v68)
          {
            objc_msgSend_candidatePairToken(v64, v58, v59, *(double *)&v62);
            double v69 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
            if (v57 || (uint64_t v57 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48])) != 0)
            {
              if (v69) {
                CFArrayAppendValue(v57, v69);
              }
            }
            double v70 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              double v125 = v69;
              _os_log_impl(&dword_19D9BE000, v70, OS_LOG_TYPE_DEFAULT, "remove stun check pair %@.", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                uint64_t v102 = v69;
                _IDSLogTransport(@"GL", @"IDS", @"remove stun check pair %@.");
                if (_IDSShouldLog())
                {
                  uint64_t v102 = v69;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"remove stun check pair %@.");
                }
              }
            }
          }
        }
      }
      uint64_t v60 = objc_msgSend_countByEnumeratingWithState_objects_count_(v54, v58, (uint64_t)&v111, *(double *)&v62, v123, 16);
    }
    while (v60);
  }

  if (objc_msgSend_count(v110, v71, v72, v73)) {
    objc_msgSend_removeObjectsInArray_(v108->_remoteCandidateList, v74, (uint64_t)v110, v75);
  }
  BOOL v76 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    remoteCandidateList = v108->_remoteCandidateList;
    *(_DWORD *)buf = 138412290;
    double v125 = remoteCandidateList;
    _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "remaining remote candidates: %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v102 = v108->_remoteCandidateList;
      _IDSLogTransport(@"GL", @"IDS", @"remaining remote candidates: %@.");
      if (_IDSShouldLog())
      {
        uint64_t v102 = v108->_remoteCandidateList;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining remote candidates: %@.");
      }
    }
  }
  if (objc_msgSend_count(theArray, v78, v79, v80, v102))
  {
    objc_msgSend_removeObjectsForKeys_(v108->_tokenToCandidatePairs, v81, (uint64_t)theArray, v83);
    long long v84 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(v108->_tokenToCandidatePairs, v85, v86, v87);
      uint64_t v88 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      double v125 = v88;
      _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "remaining candidate pairs: %@.", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v103 = objc_msgSend_allValues(v108->_tokenToCandidatePairs, v81, v82, v83);
        _IDSLogTransport(@"GL", @"IDS", @"remaining candidate pairs: %@.");

        if (_IDSShouldLog())
        {
          double v103 = objc_msgSend_allValues(v108->_tokenToCandidatePairs, v81, v82, v83, v103);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining candidate pairs: %@.");
        }
      }
    }
  }
  if (objc_msgSend_count(v57, v81, v82, v83, v103))
  {
    objc_msgSend_removeObjectsForKeys_(v108->_tokenToStunCheckPairs, v89, (uint64_t)v57, v90);
    double v91 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v92, v93, v94);
      uint64_t v95 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      double v125 = v95;
      _os_log_impl(&dword_19D9BE000, v91, OS_LOG_TYPE_DEFAULT, "remaining stun check pairs: %@.", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        long long v104 = objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v96, v97, v98);
        _IDSLogTransport(@"GL", @"IDS", @"remaining stun check pairs: %@.");

        if (_IDSShouldLog())
        {
          uint64_t v105 = objc_msgSend_allValues(v108->_tokenToStunCheckPairs, v99, v100, v101, v104);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"remaining stun check pairs: %@.");
        }
      }
    }
  }
}

- (void)_processNewRemoteCandidates:(id)a3
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v4;
    _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "new remote candidates %@.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v15 = v4;
      _IDSLogTransport(@"GL", @"IDS", @"new remote candidates %@.");
      if (_IDSShouldLog())
      {
        id v15 = v4;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"new remote candidates %@.");
      }
    }
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = v4;
  uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v16, v8, v20, 16);
  if (v10)
  {
    uint64_t v12 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if (objc_msgSend__addCandidate_isRemoteCandidate_(self, v9, v14, v11, 1, v15)) {
          objc_msgSend__addStunCheckPair_isRemoteCandidate_(self, v9, v14, v11, 1);
        }
      }
      uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v16, v11, v20, 16);
    }
    while (v10);
  }
}

- (void)_setupRelayConnectionForNetworkAddressChangesHelper
{
  locatiouint64_t n = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, self);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_19DA68F5C;
  v2[3] = &unk_1E59744B8;
  objc_copyWeak(&v3, &location);
  IDSTransportThreadAddBlock(v2);
  objc_destroyWeak(&v3);
  objc_destroyWeak(&location);
}

- (void)_setupRelayConnectionForNetworkAddressChanges
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  id v4 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  uint64_t v97 = GLUtilGetSharedSessionIDs(v4);

  if (objc_msgSend_count(v97, v5, v6, v7))
  {
    double v11 = objc_msgSend_GlobalLink(IDSFoundationLog, v8, v9, v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v109) = objc_msgSend_count(v97, v12, v13, v14);
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "set up new QR link for %d shared session(s).", buf, 8u);
    }

    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    id v15 = v97;
    uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v103, v17, v114, 16);
    if (v20)
    {
      uint64_t v21 = *(void *)v104;
      uint64_t v22 = 138412290;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v104 != v21) {
            objc_enumerationMutation(v15);
          }
          uint64_t v24 = *(IDSGlobalLink **)(*((void *)&v103 + 1) + 8 * i);
          double v25 = objc_msgSend_GlobalLink(IDSFoundationLog, v18, v19, *(double *)&v22);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v109 = v24;
            _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "set up new QR link for shared session %@.", buf, 0xCu);
          }

          double v29 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v26, v27, v28);
          int HasSharedRelayCandidatePairSucceededOrConnected = GLUtilHasSharedRelayCandidatePairSucceededOrConnected(v24, v29);

          if (HasSharedRelayCandidatePairSucceededOrConnected) {
            objc_msgSend__setupNewQRLinkIfNecessary_(self, v18, (uint64_t)v24, *(double *)&v22);
          }
        }
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v103, *(double *)&v22, v114, 16);
      }
      while (v20);
    }
  }
  else if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v8, 3, v10, 4, 0, 1))
  {
    if (self->_allowOnlyOneQR)
    {
      uint64_t v31 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v31, OS_LOG_TYPE_DEFAULT, "skip set up new relay link because only one QR link is allowed.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip set up new relay link because only one QR link is allowed.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip set up new relay link because only one QR link is allowed.");
          }
        }
      }
    }
    else
    {
      long long v38 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "set up new QR link additionally with existing connected pair", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"set up new QR link additionally with existing connected pair");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"set up new QR link additionally with existing connected pair");
          }
        }
      }
      objc_msgSend__setupNewQRLinkIfNecessary_(self, v39, 0, v40);
    }
  }
  else if (self->_allowOnlyOneQR)
  {
    if (!self->_connectReadyHandler)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v33 = objc_opt_respondsToSelector();

      if (v33)
      {
        uint64_t v34 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v109 = self;
          _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "all links are removed due to interface change, disconnect %@ immediately.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"all links are removed due to interface change, disconnect %@ immediately.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"all links are removed due to interface change, disconnect %@ immediately.");
            }
          }
        }
        id v35 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didDisconnectOverCloud_cbuuid_(v35, v36, (uint64_t)self, v37, 0, self->_cbuuid);
      }
    }
  }
  else if (GLUtilHasDefaultInterface(self->_interfaceAddressArray))
  {
    int hasActiveAllocbindFailoverTimerForSessionID = objc_msgSend__hasActiveAllocbindFailoverTimerForSessionID_(self, v41, (uint64_t)self->_acceptedRelaySessionID, v43);
    uint64_t v45 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = objc_msgSend_count(self->_tokenToCandidatePairs, v46, v47, v48);
      uint64_t v50 = @"NO";
      uint64_t v51 = _IDSLinkStateStrings[self->_state];
      if (hasActiveAllocbindFailoverTimerForSessionID) {
        uint64_t v50 = @"YES";
      }
      *(_DWORD *)buf = 134218498;
      uint64_t v109 = (IDSGlobalLink *)v49;
      __int16 v110 = 2112;
      long long v111 = v50;
      __int16 v112 = 2080;
      long long v113 = v51;
      _os_log_impl(&dword_19D9BE000, v45, OS_LOG_TYPE_DEFAULT, "all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL unint64_t state = %s", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v55 = objc_msgSend_count(self->_tokenToCandidatePairs, v52, v53, v54);
      double v56 = hasActiveAllocbindFailoverTimerForSessionID ? @"YES" : @"NO";
      uint64_t v95 = v56;
      uint64_t v96 = _IDSLinkStateStrings[self->_state];
      double v94 = (NSString *)v55;
      _IDSLogTransport(@"GL", @"IDS", @"all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL unint64_t state = %s");
      if (_IDSShouldLog())
      {
        uint64_t v60 = objc_msgSend_count(self->_tokenToCandidatePairs, v57, v58, v59, v94, v56, v96);
        uint64_t v95 = v56;
        uint64_t v96 = _IDSLinkStateStrings[self->_state];
        double v94 = (NSString *)v60;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"all links are removed due to interface change, set up QR link now. %lu, hasActiveAllocbindFailoverTimer: %@, GL unint64_t state = %s");
      }
    }
    if ((hasActiveAllocbindFailoverTimerForSessionID & 1) != 0 || self->_state == 2)
    {
      uint64_t v61 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        acceptedRelaySessionID = self->_acceptedRelaySessionID;
        *(_DWORD *)buf = 138412290;
        uint64_t v109 = (IDSGlobalLink *)acceptedRelaySessionID;
        _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "try to reconnect to the QR server, accepted relay sessionID: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v94 = self->_acceptedRelaySessionID;
          _IDSLogTransport(@"GL", @"IDS", @"try to reconnect to the QR server, accepted relay sessionID: %@");
          if (_IDSShouldLog())
          {
            double v94 = self->_acceptedRelaySessionID;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"try to reconnect to the QR server, accepted relay sessionID: %@");
          }
        }
      }
      connectingCandidatePairSessionInfo = self->_connectingCandidatePairSessionInfo;
      if (connectingCandidatePairSessionInfo
        && (double v64 = self->_acceptedRelaySessionID) != 0
        && (uint64_t v65 = (id)CFDictionaryGetValue((CFDictionaryRef)connectingCandidatePairSessionInfo, v64)) != 0)
      {
        double v69 = v65;
        objc_msgSend_allValues(self->_tokenToCandidatePairs, v66, v67, v68);
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        id v70 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v71, (uint64_t)&v99, v72, v107, 16);
        if (v75)
        {
          uint64_t v77 = *(void *)v100;
LABEL_67:
          uint64_t v78 = 0;
          while (1)
          {
            if (*(void *)v100 != v77) {
              objc_enumerationMutation(v70);
            }
            uint64_t v79 = *(void **)(*((void *)&v99 + 1) + 8 * v78);
            double v80 = objc_msgSend_sessionID(v79, v73, v74, v76, v94, v95, v96);
            char isEqualToString = objc_msgSend_isEqualToString_(v80, v81, (uint64_t)self->_acceptedRelaySessionID, v82);

            if (isEqualToString) {
              break;
            }
            if (v75 == ++v78)
            {
              uint64_t v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v73, (uint64_t)&v99, v76, v107, 16);
              if (v75) {
                goto LABEL_67;
              }
              goto LABEL_73;
            }
          }
          id v90 = v79;

          if (!v90) {
            goto LABEL_92;
          }
          objc_msgSend__handleAllocbindFailoverTimerWithTransportScoreCards_failoverTimerOnCandidatePair_onInterface_(self, v91, (uint64_t)v90, v92, 0, 0);
        }
        else
        {
LABEL_73:

LABEL_92:
          uint64_t v93 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v93, OS_LOG_TYPE_DEFAULT, "couldn't find candidatePair for accepted session, return", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"couldn't find candidatePair for accepted session, return");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"couldn't find candidatePair for accepted session, return");
              }
            }
          }
        }
      }
      else
      {
        uint64_t v85 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v85, OS_LOG_TYPE_DEFAULT, "couldn't find accepted session, return", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"couldn't find accepted session, return");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"couldn't find accepted session, return");
            }
          }
        }
      }
    }
    else
    {
      uint64_t v86 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        double v87 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 136315138;
        uint64_t v109 = (IDSGlobalLink *)v87;
        _os_log_impl(&dword_19D9BE000, v86, OS_LOG_TYPE_DEFAULT, "unint64_t state = %s, try to setup New QR Link ", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v94 = (NSString *)_IDSLinkStateStrings[self->_state];
          _IDSLogTransport(@"GL", @"IDS", @"unint64_t state = %s, try to setup New QR Link ");
          if (_IDSShouldLog())
          {
            double v94 = (NSString *)_IDSLinkStateStrings[self->_state];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"unint64_t state = %s, try to setup New QR Link ");
          }
        }
      }
      objc_msgSend__setupNewQRLinkIfNecessary_(self, v88, 0, v89, v94, v95, v96);
    }
  }
  else
  {
    long long v84 = objc_msgSend_GlobalLink(IDSFoundationLog, v41, v42, v43);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "default interface is not ready, skip setting up QR link.", buf, 2u);
    }
  }
}

- (void)handleNetworkAddressChanges:(BOOL)a3 hasIPv6AddressChange:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  BOOL v129 = a3;
  if (a3 || a4)
  {
    BOOL v128 = a4;
    uint64_t v5 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = @"NO";
      if (v129) {
        double v7 = @"YES";
      }
      else {
        double v7 = @"NO";
      }
      if (v4) {
        uint64_t v6 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v144 = (uint64_t)v7;
      __int16 v145 = 2112;
      long long v146 = v6;
      _os_log_impl(&dword_19D9BE000, v5, OS_LOG_TYPE_DEFAULT, "handleNetworkAddressChange (IPv4:%@, IPv6:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      double v11 = v129 ? @"YES" : @"NO";
      uint64_t v12 = v128 ? @"YES" : @"NO";
      long long v121 = v11;
      double v124 = v12;
      _IDSLogTransport(@"GL", @"IDS", @"handleNetworkAddressChange (IPv4:%@, IPv6:%@).");
      if (_IDSShouldLog())
      {
        long long v121 = v11;
        double v124 = v12;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"handleNetworkAddressChange (IPv4:%@, IPv6:%@).");
      }
    }
    uint64_t v13 = self;
    disallowWiFuint64_t i = self->_disallowWiFi;
    BOOL disallowCellular = self->_disallowCellular;
    if (self->_QUICForQREnabled)
    {
      if ((objc_msgSend_hasListener(self->_nwLink, v8, v9, v10) & 1) == 0)
      {
        double v30 = objc_msgSend__addSocketAndInterfaceAddressWithNWLink_wantsWiFi_wantsCellular_(self, v16, self->_QRIPv6Enabled, v17, !disallowWiFi, !disallowCellular, v121, v124);
        id v24 = (id)objc_msgSend_mutableCopy(v30, v31, v32, v33);

        long long v18 = self->_interfaceAddressArray;
        unsigned int v126 = 0;
        objc_msgSend__delayProcessingCellularInterfaces_(self, v34, (uint64_t)v18, v35, v122);
        goto LABEL_37;
      }
      long long v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      unsigned int v126 = objc_msgSend_copyCurrentNetworkInterfaces(self->_nwLink, v19, v20, v21);
      objc_msgSend_addObjectsFromArray_(v18, v22, (uint64_t)v126, v23);
      id v24 = 0;
    }
    else
    {
      if (v129)
      {
        if (objc_msgSend_socket(self->_udpLink, v8, v9, v10) == -1)
        {
          long long v38 = objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v25, 0, v27, !disallowWiFi, !disallowCellular, v121, v124);
          id v24 = (id)objc_msgSend_mutableCopy(v38, v39, v40, v41);

          uint64_t v13 = self;
          long long v18 = self->_interfaceAddressArray;
          unsigned int v126 = 0;
        }
        else
        {
          unsigned int v126 = objc_msgSend_copyCurrentNetworkInterfaces(self->_udpLink, v25, v26, v27);
          long long v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          objc_msgSend_addObjectsFromArray_(v18, v28, (uint64_t)v126, v29);
          id v24 = 0;
          uint64_t v13 = self;
        }
      }
      else
      {
        unsigned int v126 = 0;
        long long v18 = 0;
        id v24 = 0;
      }
      if (!v128) {
        goto LABEL_36;
      }
      if (objc_msgSend_socket(v13->_udpLinkv6, v8, v9, v10) == -1)
      {
        double v48 = objc_msgSend__addSocketAndInterfaceAddress_wantsWiFi_wantsCellular_(self, v42, 1, v44, !disallowWiFi, !disallowCellular);
        uint64_t v52 = objc_msgSend_mutableCopy(v48, v49, v50, v51);

        uint64_t v53 = self->_interfaceAddressArray;
        long long v18 = v53;
        id v24 = (id)v52;
      }
      else
      {
        uint64_t v45 = objc_msgSend_copyCurrentNetworkInterfaces(self->_udpLinkv6, v42, v43, v44);

        if (!v18) {
          long long v18 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        objc_msgSend_addObjectsFromArray_(v18, v46, v45, v47, v121);
        unsigned int v126 = (void *)v45;
      }
    }
    uint64_t v13 = self;
LABEL_36:
    objc_msgSend__delayProcessingCellularInterfaces_(v13, v8, (uint64_t)v18, v10, v121);
LABEL_37:
    double v131 = objc_msgSend_addressesFromInterfaceAddresses_(IDSInterfaceAddress, v36, (uint64_t)v18, v37);
    double v56 = objc_msgSend_addressesFromInterfaceAddresses_(IDSInterfaceAddress, v54, (uint64_t)self->_interfaceAddressArray, v55);
    long long v139 = 0u;
    long long v140 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    obuint64_t j = v18;
    uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v57, (uint64_t)&v137, v58, v142, 16);
    if (v61)
    {
      uint64_t v63 = *(void *)v138;
      do
      {
        for (uint64_t i = 0; i != v61; ++i)
        {
          if (*(void *)v138 != v63) {
            objc_enumerationMutation(obj);
          }
          uint64_t v65 = *(void **)(*((void *)&v137 + 1) + 8 * i);
          double v66 = objc_msgSend_address(v65, v59, v60, v62);
          char v69 = objc_msgSend_containsObject_(v56, v67, (uint64_t)v66, v68);

          if ((v69 & 1) == 0)
          {
            if (!v24) {
              id v24 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            if (v65) {
              BOOL v70 = v24 == 0;
            }
            else {
              BOOL v70 = 1;
            }
            if (!v70) {
              CFArrayAppendValue((CFMutableArrayRef)v24, v65);
            }
          }
        }
        uint64_t v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v59, (uint64_t)&v137, v62, v142, 16);
      }
      while (v61);
    }

    uint64_t v125 = objc_msgSend_count(v24, v71, v72, v73);
    if (v125)
    {
      uint64_t v74 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v144 = (uint64_t)v24;
        _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "new local address list: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v123 = (__CFArray *)v24;
          _IDSLogTransport(@"GL", @"IDS", @"new local address list: %@");
          if (_IDSShouldLog())
          {
            id v123 = (__CFArray *)v24;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"new local address list: %@");
          }
        }
      }
      objc_msgSend__processNewLocalAddressList_(self, v75, (uint64_t)v24, v76, v123);
    }
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    uint64_t v77 = self->_interfaceAddressArray;
    double v80 = 0;
    uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v78, (uint64_t)&v133, v79, v141, 16);
    if (v83)
    {
      uint64_t v85 = *(void *)v134;
      do
      {
        for (uint64_t j = 0; j != v83; ++j)
        {
          if (*(void *)v134 != v85) {
            objc_enumerationMutation(v77);
          }
          double v87 = *(void **)(*((void *)&v133 + 1) + 8 * j);
          uint64_t v88 = objc_msgSend_address(v87, v81, v82, v84);
          char v91 = objc_msgSend_containsObject_(v131, v89, (uint64_t)v88, v90);

          if ((v91 & 1) == 0)
          {
            double v92 = objc_msgSend_address(v87, v81, v82, v84);
            int v96 = *(unsigned __int8 *)(objc_msgSend_sa(v92, v93, v94, v95) + 1);

            BOOL v97 = v96 == 2 && v129;
            BOOL v98 = v96 == 30 && v128;
            if (v97 || v98)
            {
              if (v80)
              {
                if (!v87) {
                  continue;
                }
              }
              else
              {
                double v80 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
                if (!v87) {
                  continue;
                }
              }
              if (v80) {
                CFArrayAppendValue(v80, v87);
              }
            }
          }
        }
        uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(v77, v81, (uint64_t)&v133, v84, v141, 16);
      }
      while (v83);
    }

    if (objc_msgSend_count(v80, v99, v100, v101))
    {
      long long v105 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v144 = (uint64_t)v80;
        _os_log_impl(&dword_19D9BE000, v105, OS_LOG_TYPE_DEFAULT, "removed local address list: %@.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          id v123 = v80;
          _IDSLogTransport(@"GL", @"IDS", @"removed local address list: %@.");
          if (_IDSShouldLog())
          {
            id v123 = v80;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"removed local address list: %@.");
          }
        }
      }
      objc_msgSend__processRemovedLocalAddressList_(self, v106, (uint64_t)v80, v107, v123);
    }
    else if (!v125)
    {
LABEL_98:

      return;
    }
    if (self->_networkAddressChangeTimer)
    {
      double v108 = objc_msgSend_GlobalLink(IDSFoundationLog, v102, v103, v104);
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
      {
        networkAddressChangeTimer = self->_networkAddressChangeTimer;
        *(_DWORD *)buf = 134217984;
        uint64_t v144 = (uint64_t)networkAddressChangeTimer;
        _os_log_impl(&dword_19D9BE000, v108, OS_LOG_TYPE_DEFAULT, "delay set up new QR link already scheduled on timer: %p", buf, 0xCu);
      }
    }
    else
    {
      __int16 v110 = im_primary_queue();
      long long v111 = (OS_dispatch_source *)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v110);
      __int16 v112 = self->_networkAddressChangeTimer;
      self->_networkAddressChangeTimer = v111;

      long long v113 = self->_networkAddressChangeTimer;
      dispatch_time_t v114 = dispatch_time(0, 2000000000);
      dispatch_source_set_timer(v113, v114, 0x77359400uLL, 0x5F5E100uLL);
      long long v118 = objc_msgSend_GlobalLink(IDSFoundationLog, v115, v116, v117);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
      {
        long long v119 = self->_networkAddressChangeTimer;
        *(_DWORD *)buf = 134218240;
        uint64_t v144 = 0x4000000000000000;
        __int16 v145 = 2048;
        long long v146 = v119;
        _os_log_impl(&dword_19D9BE000, v118, OS_LOG_TYPE_DEFAULT, "delay set up new QR link for %.3f sec timer: %p", buf, 0x16u);
      }

      long long v120 = self->_networkAddressChangeTimer;
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = sub_19DA6A5C4;
      handler[3] = &unk_1E5973BA8;
      void handler[4] = self;
      dispatch_source_set_event_handler(v120, handler);
      dispatch_resume((dispatch_object_t)self->_networkAddressChangeTimer);
    }
    goto LABEL_98;
  }
}

- (BOOL)_interfaceName:(id)a3 missingFrom:(id)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v21, 0.0, v25, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v22;
    char v14 = 1;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v6);
        }
        long long v16 = objc_msgSend_name(*(void **)(*((void *)&v21 + 1) + 8 * i), v9, v10, v11);
        char isEqualToIgnoringCase = objc_msgSend_isEqualToIgnoringCase_(v16, v17, (uint64_t)v5, v18);

        v14 &= isEqualToIgnoringCase ^ 1;
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v21, v11, v25, 16);
    }
    while (v12);
  }
  else
  {
    char v14 = 1;
  }

  return v14;
}

- (void)_processDelayedCellularInterfaces
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (self->_delayedCellInterfaces)
  {
    double v3 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      delayedCellInterfaces = self->_delayedCellInterfaces;
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = delayedCellInterfaces;
      _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "process delayed cell interfaces:%@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      double v11 = self->_delayedCellInterfaces;
      _IDSLogTransport(@"GL", @"IDS", @"process delayed cell interfaces:%@");
      if (_IDSShouldLog())
      {
        double v11 = self->_delayedCellInterfaces;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"process delayed cell interfaces:%@");
      }
    }
    objc_msgSend__processNewLocalAddressList_(self, v5, (uint64_t)self->_delayedCellInterfaces, v6, v11);
    objc_msgSend__setupRelayConnectionForNetworkAddressChanges(self, v7, v8, v9);
    uint64_t v10 = self->_delayedCellInterfaces;
    self->_delayedCellInterfaces = 0;
  }
}

- (void)_handleNewRATChange
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, v2, v3);
  unsigned int v9 = objc_msgSend_radioAccessTechnology(v5, v6, v7, v8);

  uint64_t v10 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v19 = IDSRadioAccessTechnologyToString(v9);
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "handle cellular RAT change (newRAT:%s).", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v9);
      _IDSLogTransport(@"GL", @"IDS", @"handle cellular RAT change (newRAT:%s).");
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v9);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"handle cellular RAT change (newRAT:%s).");
      }
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v12 = objc_opt_respondsToSelector();

  if (v12)
  {
    uint64_t v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = IDSRadioAccessTechnologyToString(v9);
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v14;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "send didRATChange, newRAT:%s.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v9);
      _IDSLogTransport(@"GL", @"IDS", @"send didRATChange, newRAT:%s.");
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v9);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"send didRATChange, newRAT:%s.");
      }
    }
    id v15 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didRATChange_(v15, v16, (uint64_t)self, v17, v9);
  }
}

- (void)handleCellularRATChange
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  objc_msgSend__handleNewRATChange(self, a2, v2, v3);
  double v8 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v5, v6, v7);
  uint64_t v12 = objc_msgSend_cellularMTU(v8, v9, v10, v11);

  if (v12)
  {
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v16 = self->_localCandidateList;
    char v19 = 0;
    uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v59, v18, v66, 16);
    if (v22)
    {
      uint64_t v24 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v60 != v24) {
            objc_enumerationMutation(v16);
          }
          uint64_t v26 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          if (objc_msgSend_isCellularStunCandidate(v26, v20, v21, v23)
            && objc_msgSend_mtu(v26, v20, v21, v23) != v12)
          {
            objc_msgSend_setMtu_(v26, v20, v12, v23);
            char v19 = 1;
          }
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v20, (uint64_t)&v59, v23, v66, 16);
      }
      while (v22);
    }

    objc_msgSend_allValues(self->_tokenToCandidatePairs, v27, v28, v29);
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v30 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v55, v32, v65, 16);
    if (v35)
    {
      uint64_t v37 = *(void *)v56;
      do
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          if (*(void *)v56 != v37) {
            objc_enumerationMutation(v30);
          }
          double v39 = objc_msgSend_local(*(void **)(*((void *)&v55 + 1) + 8 * j), v33, v34, v36);
          if (objc_msgSend_isCellularStunCandidate(v39, v40, v41, v42)
            && objc_msgSend_mtu(v39, v43, v44, v45) != v12)
          {
            objc_msgSend_setMtu_(v39, v46, v12, v47);
          }
        }
        uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v33, (uint64_t)&v55, v36, v65, 16);
      }
      while (v35);
    }

    if (v19)
    {
      double v48 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v64 = v12;
        _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "send cellular MTU change event with new MTU %uB.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v54 = v12;
          _IDSLogTransport(@"GL", @"IDS", @"send cellular MTU change event with new MTU %uB.");
          if (_IDSShouldLog())
          {
            uint64_t v54 = v12;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send cellular MTU change event with new MTU %uB.");
          }
        }
      }
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v50 = objc_opt_respondsToSelector();

      if (v50)
      {
        id v51 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didCellularMTUChange_(v51, v52, (uint64_t)self, v53, (unsigned __int16)v12);
      }
    }
  }
  objc_msgSend__processDelayedCellularInterfaces(self, v13, v14, v15, v54);
}

- (unint64_t)headerOverhead
{
  uint64_t v2 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
  if (!v2) {
    return 255;
  }
  int v3 = 4 * (*((_WORD *)v2 + 132) != 0);
  int v4 = *((unsigned __int8 *)v2 + 9);
  if (v4 == 30)
  {
    return (v3 | 0x30);
  }
  else if (v4 == 2)
  {
    return (v3 + 28);
  }
  else
  {
    return 255;
  }
}

- (NSString)linkTypeString
{
  uint64_t v4 = objc_msgSend_defaultLinkType(self, a2, v2, v3);
  id v5 = @"GlobalLink";
  if (v4 == 4) {
    id v5 = @"GlobalLink-WWAN";
  }
  if (v4 == 3) {
    return (NSString *)@"GlobalLink-WiFi";
  }
  else {
    return &v5->isa;
  }
}

- (id)copyLinkStatsDict
{
  id v3 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v6 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v4, self->_totalBytesReceived, v5);
  unsigned int v9 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v7, self->_totalBytesSent, v8);
  uint64_t v12 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v10, self->_totalPacketsReceived, v11);
  double v15 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v13, self->_totalPacketsSent, v14);
  double v18 = objc_msgSend_initWithObjectsAndKeys_(v3, v16, (uint64_t)v6, v17, @"bytesReceived", v9, @"bytesSent", v12, @"packetsReceived", v15, @"packetsSent", 0);

  return v18;
}

- (BOOL)remoteHostAwake
{
  return 1;
}

- (void)_reportSessionSetupTime
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  id v3 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isUPlusOneSession) {
      uint64_t v4 = @"YES";
    }
    else {
      uint64_t v4 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)double v117 = v4;
    _os_log_impl(&dword_19D9BE000, v3, OS_LOG_TYPE_DEFAULT, "_reportSessionSetupTime (U+1:%@)", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
  {
    double v5 = self->_isUPlusOneSession ? @"YES" : @"NO";
    double v107 = v5;
    _IDSLogTransport(@"GL", @"IDS", @"_reportSessionSetupTime (U+1:%@)");
    if (_IDSShouldLog())
    {
      if (self->_isUPlusOneSession) {
        uint64_t v6 = @"YES";
      }
      else {
        uint64_t v6 = @"NO";
      }
      double v107 = v6;
      _IDSLogV(0, @"IDSFoundation", @"GL", @"_reportSessionSetupTime (U+1:%@)");
    }
  }
  double allocbindEndTime = self->_allocbindEndTime;
  if (self->_isInitiator
    && ((double skeStartTime = self->_skeStartTime, skeStartTime > 0.0)
     || self->_isUPlusOneSession && (double skeStartTime = self->_remoteJoinedUPlusOneTime, skeStartTime > 0.0)))
  {
    double linkConnectTime = self->_linkConnectTime;
    int v10 = (int)((linkConnectTime - skeStartTime) * 1000.0);
    p_firstClientPacketTime = &self->_firstClientPacketTime;
    int v12 = (int)((self->_firstClientPacketTime - linkConnectTime) * 1000.0);
  }
  else
  {
    p_firstClientPacketTime = &self->_firstClientPacketTime;
    double v13 = self->_linkConnectTime;
    int v10 = (int)((v13 - allocbindEndTime) * 1000.0);
    int v12 = (int)((self->_firstClientPacketTime - v13) * 1000.0);
    if (!self->_isInitiator)
    {
LABEL_23:
      int v14 = (int)((self->_firstDataReceivedTime - allocbindEndTime) * 1000.0);
      goto LABEL_25;
    }
  }
  if (self->_isSecondOrLaterParticipant) {
    goto LABEL_23;
  }
  int v14 = 0;
LABEL_25:
  int v111 = v10;
  double allocbindStartTime = self->_allocbindStartTime;
  CFDictionaryRef linkIDToCandidatePairs = (const __CFDictionary *)self->_linkIDToCandidatePairs;
  if (linkIDToCandidatePairs) {
    CFDictionaryRef linkIDToCandidatePairs = (const __CFDictionary *)CFDictionaryGetValue(linkIDToCandidatePairs, &unk_1EF028B28);
  }
  CFDictionaryRef v17 = linkIDToCandidatePairs;
  uint64_t v21 = objc_msgSend_local(v17, v18, v19, v20);
  unsigned int v25 = objc_msgSend_radioAccessTechnology(v21, v22, v23, v24);

  if (v25 >= 0xA) {
    int v29 = 10;
  }
  else {
    int v29 = v25;
  }
  unsigned int v110 = v29;
  id v30 = objc_msgSend_remote(v17, v26, v27, v28, v107);
  unsigned int v34 = objc_msgSend_radioAccessTechnology(v30, v31, v32, v33);

  if (v34 >= 0xA) {
    int v37 = 10;
  }
  else {
    int v37 = v34;
  }
  unsigned int v109 = v37;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v38 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v35, v36, 0.0);
  uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v112, v40, v126, 16);
  if (v43)
  {
    uint64_t v45 = *(void *)v113;
    while (2)
    {
      for (uint64_t i = 0; i != v43; ++i)
      {
        if (*(void *)v113 != v45) {
          objc_enumerationMutation(v38);
        }
        if (objc_msgSend_pendingRealloc(*(void **)(*((void *)&v112 + 1) + 8 * i), v41, v42, v44))
        {
          int v108 = 1;
          goto LABEL_43;
        }
      }
      uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v41, (uint64_t)&v112, v44, v126, 16);
      if (v43) {
        continue;
      }
      break;
    }
  }
  int v108 = 0;
LABEL_43:

  if (v14 >= 1)
  {
    double v47 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)double v117 = v14;
      _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "received data duration: %d ms", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"received data duration: %d ms");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"received data duration: %d ms");
        }
      }
    }
    double v48 = GLUCreateQRClientTimeEvent(310, 0, v17, self->_timeBase, (float)v14);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v50 = objc_opt_respondsToSelector();

    if (v50)
    {
      id v51 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v51, v52, (uint64_t)self, v53, v48);
    }
  }
  if (self->_isInitiator)
  {
    double remoteJoinedUPlusOneTime = self->_skeStartTime;
    if (remoteJoinedUPlusOneTime != 0.0 && remoteJoinedUPlusOneTime < self->_allocbindEndTime) {
      int v56 = (int)((*p_firstClientPacketTime - remoteJoinedUPlusOneTime) * 1000.0);
    }
    else {
      int v56 = v12 + v111;
    }
    double v70 = (double)(unsigned __int16)self->_acceptDelayU32 * 0.0000152587891 + (double)HIWORD(self->_acceptDelayU32);
    if (remoteJoinedUPlusOneTime == 0.0)
    {
      if (!self->_isUPlusOneSession
        || (double remoteJoinedUPlusOneTime = self->_remoteJoinedUPlusOneTime, remoteJoinedUPlusOneTime <= 0.0))
      {
        double remoteJoinedUPlusOneTime = self->_allocbindEndTime;
      }
    }
    int v69 = (int)((remoteJoinedUPlusOneTime - self->_inviteSentTime - v70) * 1000.0);
    long long v71 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_isInitiator) {
        uint64_t v72 = @"YES";
      }
      else {
        uint64_t v72 = @"NO";
      }
      double v73 = IDSRadioAccessTechnologyToString(v110);
      uint64_t v74 = IDSRadioAccessTechnologyToString(v109);
      if (v108) {
        uint64_t v75 = @"YES";
      }
      else {
        uint64_t v75 = @"NO";
      }
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)double v117 = v56;
      *(_WORD *)&uint8_t v117[4] = 2112;
      *(void *)&v117[6] = v72;
      *(_WORD *)&v117[14] = 2080;
      *(void *)&v117[16] = v73;
      *(_WORD *)&v117[24] = 2080;
      *(void *)&v117[26] = v74;
      *(_WORD *)&v117[34] = 1024;
      *(_DWORD *)&v117[36] = v69;
      __int16 v118 = 1024;
      int v119 = v111;
      __int16 v120 = 1024;
      int v121 = v12;
      __int16 v122 = 2112;
      v123[0] = v75;
      _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).", buf, 0x42u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        IDSRadioAccessTechnologyToString(v110);
        IDSRadioAccessTechnologyToString(v109);
        _IDSLogTransport(@"GL", @"IDS", @"got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).");
        if (_IDSShouldLog())
        {
          IDSRadioAccessTechnologyToString(v110);
          IDSRadioAccessTechnologyToString(v109);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"got first client packet %d ms after Accept. (Initiator:%@, localRAT:%s, remoteRAT:%s, invite_time:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).");
        }
      }
    }
    uint64_t v63 = objc_loadWeakRetained((id *)&self->_delegate);
    double v124 = @"gl-attr-acceptdelay";
    double v66 = objc_msgSend_numberWithDouble_(NSNumber, v76, v77, v70 * 1000.0);
    uint64_t v125 = v66;
    double v80 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v78, (uint64_t)&v125, v79, &v124, 1);
    objc_msgSend_link_didReceiveReportEvent_(v63, v81, (uint64_t)self, v82, v80);

    goto LABEL_92;
  }
  int v56 = v12 + v111 + (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
  int v57 = (int)((self->_firstDataReceivedTime - self->_calleeAcceptTime) * 1000.0);
  long long v58 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isInitiator) {
      long long v59 = @"YES";
    }
    else {
      long long v59 = @"NO";
    }
    long long v60 = IDSRadioAccessTechnologyToString(v110);
    long long v61 = IDSRadioAccessTechnologyToString(v109);
    if (v108) {
      long long v62 = @"YES";
    }
    else {
      long long v62 = @"NO";
    }
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)double v117 = v12 + v111 + (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
    *(_WORD *)&uint8_t v117[4] = 1024;
    *(_DWORD *)&v117[6] = v57;
    *(_WORD *)&v117[10] = 2112;
    *(void *)&v117[12] = v59;
    *(_WORD *)&v117[20] = 2080;
    *(void *)&v117[22] = v60;
    *(_WORD *)&v117[30] = 2080;
    *(void *)&v117[32] = v61;
    __int16 v118 = 1024;
    int v119 = (int)((allocbindEndTime - allocbindStartTime) * 1000.0);
    __int16 v120 = 1024;
    int v121 = v111;
    __int16 v122 = 1024;
    LODWORD(v123[0]) = v12;
    WORD2(v123[0]) = 2112;
    *(void *)((char *)v123 + 6) = v62;
    _os_log_impl(&dword_19D9BE000, v58, OS_LOG_TYPE_DEFAULT, "got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).", buf, 0x48u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      IDSRadioAccessTechnologyToString(v110);
      IDSRadioAccessTechnologyToString(v109);
      _IDSLogTransport(@"GL", @"IDS", @"got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).");
      if (_IDSShouldLog())
      {
        IDSRadioAccessTechnologyToString(v110);
        IDSRadioAccessTechnologyToString(v109);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"got first client packet %d ms after Accept, calleeAcceptToFirstIncomingData: %d ms(Initiator:%@, localRAT:%s, remoteRAT:%s, allocbind:%d ms, session_connected:%d ms, wait_after:%d ms, realloc:%@).");
      }
    }
  }
  if (v57 >= 1)
  {
    uint64_t v63 = GLUCreateQRClientTimeEvent(302, 0, v17, self->_timeBase, (float)v57);
    id v64 = objc_loadWeakRetained((id *)&self->_delegate);
    char v65 = objc_opt_respondsToSelector();

    if ((v65 & 1) == 0)
    {
      int v69 = 0;
      goto LABEL_93;
    }
    double v66 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didAddQREvent_(v66, v67, (uint64_t)self, v68, v63);
    int v69 = 0;
LABEL_92:

LABEL_93:
    goto LABEL_94;
  }
  int v69 = 0;
LABEL_94:
  if (v56 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(301, 0, v17, self->_enableSKE, self->_isInitiator, (float)v56);
    uint64_t v83 = GLUCreateQRClientTimeEvent(301, 0, v17, self->_timeBase, (float)v56);
    id v84 = objc_loadWeakRetained((id *)&self->_delegate);
    char v85 = objc_opt_respondsToSelector();

    if (v85)
    {
      id v86 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v86, v87, (uint64_t)self, v88, v83);
    }
  }
  if (v111 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(305, 0, v17, self->_enableSKE, self->_isInitiator, (float)v111);
    double v89 = GLUCreateQRClientTimeEvent(305, 0, v17, self->_timeBase, (float)v111);
    id v90 = objc_loadWeakRetained((id *)&self->_delegate);
    char v91 = objc_opt_respondsToSelector();

    if (v91)
    {
      id v92 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v92, v93, (uint64_t)self, v94, v89);
    }
  }
  if (v12 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(303, 0, v17, self->_enableSKE, self->_isInitiator, (float)v12);
    double v95 = GLUCreateQRClientTimeEvent(303, 0, v17, self->_timeBase, (float)v12);
    id v96 = objc_loadWeakRetained((id *)&self->_delegate);
    char v97 = objc_opt_respondsToSelector();

    if (v97)
    {
      id v98 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v98, v99, (uint64_t)self, v100, v95);
    }
  }
  if (self->_isInitiator && v69 >= 1)
  {
    GLUtilReportAWDClientTimerEvent(306, 0, v17, self->_enableSKE, 1u, (float)v69);
    double v101 = GLUCreateQRClientTimeEvent(306, 0, v17, self->_timeBase, (float)v69);
    id v102 = objc_loadWeakRetained((id *)&self->_delegate);
    char v103 = objc_opt_respondsToSelector();

    if (v103)
    {
      id v104 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v104, v105, (uint64_t)self, v106, v101);
    }
  }
}

- (BOOL)_getPacketBufferSendInfo:(id *)a3 channelNumber:(unsigned __int16 *)a4 transport:(int64_t *)a5
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  double v8 = IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, a3->var25);
  unsigned int v9 = v8;
  if (v8)
  {
    a3->var16 = *((unsigned char *)v8 + 266);
    a3->unsigned int var17 = *((_DWORD *)v8 + 1);
    memcpy(&a3->var18, v8 + 1, *((unsigned __int8 *)v8 + 8));
    memcpy(&a3->var19, v9 + 17, *((unsigned __int8 *)v9 + 136));
    if (a4) {
      *a4 = *((_WORD *)v9 + 132);
    }
    if (a5) {
      *a5 = v9[34];
    }
  }
  else
  {
    int v10 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int var25 = a3->var25;
      *(_DWORD *)buf = 67109120;
      int v14 = var25;
      _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "_getPacketBufferSendInfo failed due to invalid linkID: %d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_getPacketBufferSendInfo failed due to invalid linkID: %d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_getPacketBufferSendInfo failed due to invalid linkID: %d.");
        }
      }
    }
  }
  return v9 != 0;
}

- (void)_updateSendStatsWithResult:(unint64_t)a3 bytesSent:(int64_t)a4 packetsSent:(int)a5 linkID:(char)a6 delegatedLinkID:(char)a7 token:(id)a8 isClientData:(BOOL)a9 sendTime:(double)a10 stunTransport:(int64_t)a11 packetBuffer:(id *)a12
{
  int v13 = a7;
  int v14 = a6;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v21 = a8;
  if (!a3)
  {
    self->_totalPacketsSent += a5;
    self->_totalBytesSent += a4;
    if (a9)
    {
      uint64_t v32 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v14);
      if (v13 == -1) {
        int v33 = v14;
      }
      else {
        int v33 = v13;
      }
      uint64_t v35 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, v33);
      if (v32 && !*((_DWORD *)v32 + 76))
      {
        CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        uint64_t v75 = objc_msgSend_numberWithInt_(NSNumber, v34, *(unsigned int *)v32, v36);
        uint64_t v78 = objc_msgSend_objectForKeyedSubscript_(linkIDToCandidatePairs, v37, (uint64_t)v75, v38);

        double v76 = objc_msgSend_linkMetrics(v78, v39, v40, v41);
        objc_msgSend_event_(v76, v42, @"glr", v43);
      }
      if (v35)
      {
        v35[35] = a10;
        *((_DWORD *)v35 + 76) += a5;
      }
      if (v32 != v35)
      {
        v32[35] = a10;
        *((_DWORD *)v32 + 76) += a5;
      }
      kdebug_trace();
      double v44 = ids_monotonic_time();
      objc_msgSend_reportLinkMetricsForLinkID_lastPacketReceivedTime_lastPacketSentTime_(self, v45, v14, 0.0, v44);
      uint64_t v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v46, v47, v48);
      BOOL v49 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (v13 != -1)
      {
        if (v49)
        {
          int v50 = GLUtilStunTransportChar(a11);
          BOOL var37 = a12->var37;
          unint64_t var36 = a12->var36;
          *(_DWORD *)buf = 134219522;
          if (var37) {
            double v53 = "qpod";
          }
          else {
            double v53 = "udp";
          }
          int64_t v80 = a4;
          __int16 v81 = 1024;
          int v82 = a5;
          __int16 v83 = 1024;
          int v84 = v50;
          __int16 v85 = 1024;
          *(_DWORD *)id v86 = v14;
          *(_WORD *)&v86[4] = 1024;
          *(_DWORD *)&v86[6] = v13;
          *(_WORD *)&v86[10] = 2080;
          *(void *)&v86[12] = v53;
          *(_WORD *)&v86[20] = 2048;
          *(void *)&v86[22] = var36;
          int v29 = "GLW %zdB/%1d (%c %d/%d — %s [C%llu])";
          id v30 = v23;
          uint32_t v31 = 56;
          goto LABEL_50;
        }
        goto LABEL_51;
      }
      if (!v49) {
        goto LABEL_51;
      }
      int v67 = GLUtilStunTransportChar(a11);
      BOOL v68 = a12->var37;
      unint64_t v69 = a12->var36;
      *(_DWORD *)buf = 134219266;
      if (v68) {
        double v70 = "qpod";
      }
      else {
        double v70 = "udp";
      }
      int64_t v80 = a4;
      __int16 v81 = 1024;
      int v82 = a5;
      __int16 v83 = 1024;
      int v84 = v67;
      __int16 v85 = 1024;
      *(_DWORD *)id v86 = v14;
      *(_WORD *)&v86[4] = 2080;
      *(void *)&v86[6] = v70;
      *(_WORD *)&v86[14] = 2048;
      *(void *)&v86[16] = v69;
      int v29 = "GLW %zdB/%1d (%c %d — %s [C%llu])";
    }
    else
    {
      Value = 0;
      if (v21 && self->_tokenToCandidatePairs) {
        Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v21);
      }
      objc_msgSend_setLastOutgoingPacketTime_(Value, v19, v20, a10);
      uint64_t v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v59, v60, v61);
      BOOL v62 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (v13 == -1)
      {
        if (v62)
        {
          int v71 = GLUtilStunTransportChar(a11);
          BOOL v72 = a12->var37;
          unint64_t v73 = a12->var36;
          *(_DWORD *)buf = 134219010;
          if (v72) {
            uint64_t v74 = "qpod";
          }
          else {
            uint64_t v74 = "udp";
          }
          int64_t v80 = a4;
          __int16 v81 = 1024;
          int v82 = v71;
          __int16 v83 = 1024;
          int v84 = v14;
          __int16 v85 = 2080;
          *(void *)id v86 = v74;
          *(_WORD *)&v86[8] = 2048;
          *(void *)&v86[10] = v73;
          int v29 = "NCD %zdB (%c %d — %s [C%llu])";
          id v30 = v23;
          uint32_t v31 = 44;
          goto LABEL_50;
        }
        goto LABEL_51;
      }
      if (!v62) {
        goto LABEL_51;
      }
      int v63 = GLUtilStunTransportChar(a11);
      BOOL v64 = a12->var37;
      unint64_t v65 = a12->var36;
      *(_DWORD *)buf = 134219266;
      if (v64) {
        double v66 = "qpod";
      }
      else {
        double v66 = "udp";
      }
      int64_t v80 = a4;
      __int16 v81 = 1024;
      int v82 = v63;
      __int16 v83 = 1024;
      int v84 = v14;
      __int16 v85 = 1024;
      *(_DWORD *)id v86 = v13;
      *(_WORD *)&v86[4] = 2080;
      *(void *)&v86[6] = v66;
      *(_WORD *)&v86[14] = 2048;
      *(void *)&v86[16] = v65;
      int v29 = "NCD %zdB (%c %d/%d — %s [C%llu])";
    }
    id v30 = v23;
    uint32_t v31 = 50;
LABEL_50:
    _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    goto LABEL_51;
  }
  uint64_t v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, v22);
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (v13 == -1)
  {
    if (v24)
    {
      int v54 = GLUtilStunTransportChar(a11);
      long long v55 = _IDSLinkSendResultStrings[a3];
      unint64_t v56 = a12->var36;
      if (a12->var37) {
        int v57 = "qpod";
      }
      else {
        int v57 = "udp";
      }
      *(_DWORD *)buf = 134219522;
      int64_t v80 = a4;
      __int16 v81 = 1024;
      int v82 = a5;
      __int16 v83 = 1024;
      int v84 = v54;
      __int16 v85 = 1024;
      *(_DWORD *)id v86 = v14;
      *(_WORD *)&v86[4] = 2080;
      *(void *)&v86[6] = v57;
      *(_WORD *)&v86[14] = 2048;
      *(void *)&v86[16] = v56;
      *(_WORD *)&v86[24] = 2080;
      *(void *)&v86[26] = v55;
      int v29 = "GLW failed %zdB/%1d (%c %d — %s [C%llu]) (%s)";
      id v30 = v23;
      uint32_t v31 = 60;
      goto LABEL_50;
    }
  }
  else if (v24)
  {
    int v25 = GLUtilStunTransportChar(a11);
    uint64_t v26 = _IDSLinkSendResultStrings[a3];
    unint64_t v27 = a12->var36;
    if (a12->var37) {
      double v28 = "qpod";
    }
    else {
      double v28 = "udp";
    }
    *(_DWORD *)buf = 134219778;
    int64_t v80 = a4;
    __int16 v81 = 1024;
    int v82 = a5;
    __int16 v83 = 1024;
    int v84 = v25;
    __int16 v85 = 1024;
    *(_DWORD *)id v86 = v14;
    *(_WORD *)&v86[4] = 1024;
    *(_DWORD *)&v86[6] = v13;
    *(_WORD *)&v86[10] = 2080;
    *(void *)&v86[12] = v28;
    *(_WORD *)&v86[20] = 2048;
    *(void *)&v86[22] = v27;
    *(_WORD *)&v86[30] = 2080;
    *(void *)&v86[32] = v26;
    int v29 = "GLW failed %zdB/%1d (%c %d/%d — %s [C%llu]) (%s)";
    id v30 = v23;
    uint32_t v31 = 66;
    goto LABEL_50;
  }
LABEL_51:
}

- (unint64_t)_prepareOutgoingChannelData:(id *)a3 arraySize:(int)a4 channelNumber:(unsigned __int16)a5 candidatePair:(id)a6 linkID:(char)a7 delegatedLinkID:(char *)a8 stunTransport:(int64_t)a9
{
  uint64_t v10 = a7;
  int v11 = a5;
  uint64_t v12 = *(void *)&a4;
  id v15 = a6;
  id v16 = v15;
  if (!v11)
  {
    unint64_t v66 = 0;
    goto LABEL_48;
  }
  if (!v15 || (v10 & 0x80000000) == 0)
  {
    uint64_t v17 = GLUtilGetCandidatePairByLinkID(v10, self->_sendInfoList, self->_linkIDToCandidatePairs, self->_channelToCandidatePairs);

    id v16 = (id)v17;
  }
  id v16 = v16;
  BOOL v24 = v16;
  if (!objc_msgSend_isVirtualRelayStunCandidatePair(v16, v18, v19, v20)) {
    goto LABEL_13;
  }
  uint64_t v25 = objc_msgSend_delegatedLinkID(v16, v21, v22, v23);
  *a8 = v25;
  if (!self->_linkIDToCandidatePairs
    || (objc_msgSend_numberWithChar_(NSNumber, v26, v25, v27),
        (uint64_t v28 = objc_claimAutoreleasedReturnValue()) == 0))
  {

    goto LABEL_28;
  }
  uint32_t v31 = (void *)v28;
  CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  int v33 = objc_msgSend_numberWithChar_(NSNumber, v29, *a8, v30);
  BOOL v24 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v33);

  if (!v24)
  {
LABEL_28:
    int v67 = objc_msgSend_GlobalLink(IDSFoundationLog, v34, v35, v36);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A05C();
    }

    if ((int)v12 >= 1)
    {
      uint64_t v69 = v12;
      unint64_t v66 = 9;
      do
      {
        uint64_t v70 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x209A, v70, v68);
        --v69;
      }
      while (v69);
      BOOL v24 = 0;
      goto LABEL_47;
    }
    BOOL v24 = 0;
LABEL_35:
    unint64_t v66 = 9;
    goto LABEL_47;
  }
  if ((v11 & 0xF0) != 0x60)
  {
    uint64_t v78 = objc_msgSend_GlobalLink(IDSFoundationLog, v34, v35, v36);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A12C();
    }

    if ((int)v12 >= 1)
    {
      uint64_t v80 = v12;
      unint64_t v66 = 9;
      do
      {
        uint64_t v81 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x20A9, v81, v79);
        --v80;
      }
      while (v80);
      goto LABEL_47;
    }
    goto LABEL_35;
  }
  __int16 v37 = objc_msgSend_remoteRelayLinkID(v16, v34, v35, v36);
  if ((int)v12 < 1)
  {
LABEL_25:
    StunUtilPrepareOutgoingChannelData(v11, (void **)a3, v12, a9, v23);
    unint64_t v66 = 0;
    goto LABEL_47;
  }
  uint64_t v38 = v12;
  double v39 = a3;
  do
  {
    uint64_t v40 = (uint64_t)*v39++;
    *(_WORD *)(v40 + 524) = v37;
    *(_DWORD *)(v40 + 520) = 1;
    --v38;
  }
  while (v38);
LABEL_13:
  if ((int)v12 < 1) {
    goto LABEL_25;
  }
  id v82 = v16;
  uint64_t v41 = v12;
  uint64_t v42 = v12;
  double v43 = (uint64_t *)a3;
  do
  {
    if (*(unsigned char *)(*v43 + 536)) {
      StunUtilGetMappedParticipantID(*v43, 0, v24, 0);
    }
    ++v43;
    --v42;
  }
  while (v42);
  uint64_t v44 = v12;
  uint64_t v45 = a3;
  while (1)
  {
    double v46 = (uint64_t *)*v45;
    if ((*((unsigned char *)*v45 + 537) & 4) == 0) {
      goto LABEL_23;
    }
    uint64_t v47 = *v46;
    uint64_t v48 = v46[2];
    BOOL v49 = objc_msgSend_hbhEncKey(v24, v21, v22, v23);
    int v50 = IDSHBHEncryptDataWithKey(v47, v48, v49);

    if (!v50) {
      break;
    }
    unint64_t v54 = *((void *)*v45 + 1);
    if (v54 < objc_msgSend_length(v50, v51, v52, v53))
    {
      uint64_t v74 = objc_msgSend_GlobalLink(IDSFoundationLog, v55, v56, v57);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
        sub_19DB7A0F8();
      }

      do
      {
        uint64_t v76 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x20C2, v76, v75);
        --v41;
      }
      while (v41);

      unint64_t v66 = 4;
      goto LABEL_46;
    }
    uint64_t v58 = objc_msgSend_length(v50, v55, v56, v57);
    long long v59 = *v45;
    *((void *)v59 + 2) = v58;
    uint64_t v60 = *(void **)v59;
    id v61 = v50;
    unint64_t v65 = (const void *)objc_msgSend_bytes(v61, v62, v63, v64);
    memcpy(v60, v65, *((void *)*v45 + 2));

LABEL_23:
    ++v45;
    if (!--v44)
    {
      id v16 = v82;
      goto LABEL_25;
    }
  }
  int v71 = objc_msgSend_GlobalLink(IDSFoundationLog, v51, v52, v53);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
    sub_19DB7A0C4();
  }

  unint64_t v66 = 11;
  do
  {
    uint64_t v73 = (uint64_t)*a3++;
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x20BB, v73, v72);
    --v41;
  }
  while (v41);
LABEL_46:
  id v16 = v82;
LABEL_47:

LABEL_48:
  return v66;
}

- (unint64_t)_sendChannelDataPacketBuffer:(id *)a3 candidatePair:(id)a4
{
  unint64_t v65 = a3;
  id v6 = a4;
  uint64_t v10 = objc_msgSend_channelNumber(v6, v7, v8, v9);
  int v14 = objc_msgSend_local(v6, v11, v12, v13);
  uint64_t v18 = objc_msgSend_transport(v14, v15, v16, v17);

  double v19 = ids_monotonic_time();
  uint64_t v22 = objc_msgSend_local(v6, v20, v21, v19);
  unsigned int v26 = objc_msgSend_index(v22, v23, v24, v25);

  double v30 = objc_msgSend_local(v6, v27, v28, v29);
  unsigned int v34 = (unsigned __int8 *)objc_msgSend_address(v30, v31, v32, v33);

  uint64_t v38 = objc_msgSend_remote(v6, v35, v36, v37);
  uint64_t v42 = (unsigned __int8 *)objc_msgSend_external(v38, v39, v40, v41);

  a3->unsigned int var17 = v26;
  memcpy(&a3->var18, v34, *v34);
  memcpy(&a3->var19, v42, *v42);
  a3->var16 = objc_msgSend_isVirtualRelayStunCandidatePair(v6, v43, v44, v45);
  uint64_t v48 = objc_msgSend__getLink_stunTransport_(self, v46, a3->var18.ss_family, v47, v18);
  unsigned int v52 = objc_msgSend_linkID(v6, v49, v50, v51);
  if (v52) {
    uint64_t v55 = v52;
  }
  else {
    uint64_t v55 = 0xFFFFFFFFLL;
  }
  char v64 = -1;
  uint64_t v56 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v53, (uint64_t)&v65, v54, 1, v10, v6, v55, &v64, v18);

  if (!v56)
  {
    _IDSLinkPacketBufferRetain((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 8424, (uint64_t)v65);
    int64_t var2 = v65->var2;
    uint64_t v56 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v48, v58, (uint64_t)v65, v59, self->_deviceUniqueID, self->_cbuuid);
    LOBYTE(v63) = 1;
    objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_packetBuffer_(self, v60, v56, v19, var2, 1, (char)v55, v64, 0, v63, v18, v65);
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x20EC, (uint64_t)v65, v61);
  }

  return v56;
}

- (unint64_t)sendPacketBuffer:(id *)a3 toDeviceUniqueID:(id)a4 cbuuid:(id)a5
{
  id v6 = a3;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v33 = a3;
  id v8 = a4;
  id v9 = a5;
  unsigned __int16 v32 = 0;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  double v12 = ids_monotonic_time();
  double firstClientPacketTime = self->_firstClientPacketTime;
  if (firstClientPacketTime == 0.0 && (!self->_isUPlusOneSession || v6->var2 >= 11))
  {
    self->_double firstClientPacketTime = v12;
    self->_reportClientPacketTime = 1;
    int v14 = objc_msgSend_GlobalLink(IDSFoundationLog, v10, v11, firstClientPacketTime);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_reportDataReceivedTime) {
        id v15 = @"YES";
      }
      else {
        id v15 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v15;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "sendPacketBuffer: _firstDataReceivedTime _reportDataReceivedTime: %@", buf, 0xCu);
    }

    if (self->_reportDataReceivedTime)
    {
      objc_msgSend__reportSessionSetupTime(self, v10, v16, firstClientPacketTime);
      self->_reportClientPacketTime = 0;
    }
  }
  if (!v6->var25 && (v6->var24[0].var20 & 0x4000) != 0) {
    v6->uint64_t var25 = self->_linkIDForPlugin;
  }
  if (objc_msgSend__getPacketBufferSendInfo_channelNumber_transport_(self, v10, (uint64_t)v6, firstClientPacketTime, &v32, &v31))
  {
    double v20 = objc_msgSend__getLink_stunTransport_(self, v17, v6->var18.ss_family, v18, v31);
    buf[0] = -1;
    uint64_t var25 = v6->var25;
    if (!v6->var15)
    {
      uint64_t v26 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v19, (uint64_t)&v33, v21, 1, v32, 0, var25, buf, v31);
      if (v26) {
        goto LABEL_19;
      }
      id v6 = v33;
    }
    _IDSLinkPacketBufferRetain((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 8471, (uint64_t)v6);
    int64_t var2 = v33->var2;
    uint64_t v26 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(v20, v24, (uint64_t)v33, v25, v8, v9);
    LOBYTE(v30) = 1;
    objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_packetBuffer_(self, v27, v26, v12, var2, 1, var25, (char)buf[0], 0, v30, v31, v33);
    _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x211D, (uint64_t)v33, v28);
LABEL_19:

    goto LABEL_20;
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2105, (uint64_t)v6, v18);
  uint64_t v26 = 9;
LABEL_20:

  return v26;
}

- (unint64_t)sendPacketBufferArray:(id *)a3 arraySize:(int)a4 toDeviceUniqueID:(id)a5 cbuuid:(id)a6
{
  uint64_t v7 = *(void *)&a4;
  id v10 = a5;
  id v12 = a6;
  if (v7 == 1)
  {
    uint64_t v14 = objc_msgSend_sendPacketBuffer_toDeviceUniqueID_cbuuid_(self, v11, (uint64_t)*a3, v13, v10, v12);
  }
  else if ((v7 - 9) > 0xFFFFFFF7)
  {
    double v17 = *a3;
    _IDSLinkPacketBufferRetain((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 8492, (uint64_t)*a3);
    unsigned __int16 v46 = 0;
    uint64_t v45 = 0;
    double v19 = ids_monotonic_time();
    double v20 = v19;
    uint64_t v21 = 0;
    uint64_t v22 = v7;
    do
    {
      double v23 = a3[v21];
      if (!*((unsigned char *)v23 + 1216) && (*((unsigned char *)v23 + 537) & 0x40) != 0) {
        *((unsigned char *)v23 + 1216) = self->_linkIDForPlugin;
      }
      ++v21;
    }
    while (v7 != v21);
    if (objc_msgSend__getPacketBufferSendInfo_channelNumber_transport_(self, v18, (uint64_t)v17, v19, &v46, &v45))
    {
      uint64_t v26 = objc_msgSend__getLink_stunTransport_(self, v24, *((unsigned __int8 *)v17 + 57), v25, v45);
      char v44 = -1;
      char v27 = *((unsigned char *)v17 + 1216);
      uint64_t v30 = objc_msgSend__prepareOutgoingChannelData_arraySize_channelNumber_candidatePair_linkID_delegatedLinkID_stunTransport_(self, v28, (uint64_t)a3, v29, v7, v46, 0, v27, &v44, v45);
      if (v30)
      {
        uint64_t v14 = v30;
        uint64_t v33 = 8520;
      }
      else
      {
        uint64_t v36 = v26;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        do
          v38 += *((void *)a3[v37++] + 2);
        while (v7 != v37);
        double v39 = v36;
        uint64_t v14 = objc_msgSend_sendPacketBufferArray_arraySize_toDeviceUniqueID_cbuuid_(v36, v31, (uint64_t)a3, v32, v7, v10, v12);
        LOBYTE(v43) = 1;
        uint64_t v40 = v38;
        uint64_t v26 = v39;
        objc_msgSend__updateSendStatsWithResult_bytesSent_packetsSent_linkID_delegatedLinkID_token_isClientData_sendTime_stunTransport_packetBuffer_(self, v41, v14, v20, v40, v7, v27, v44, 0, v43, v45, v17);
        uint64_t v33 = 8531;
      }
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)v33, (uint64_t)v17, v32);
    }
    else
    {
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2139, (uint64_t)v17, v25);
      uint64_t v14 = 9;
      do
      {
        uint64_t v35 = (uint64_t)*a3++;
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x213C, v35, v34);
        --v22;
      }
      while (v22);
    }
  }
  else if ((int)v7 < 1)
  {
    uint64_t v14 = 9;
  }
  else
  {
    uint64_t v15 = v7;
    uint64_t v14 = 9;
    do
    {
      uint64_t v16 = (uint64_t)*a3++;
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x2126, v16, v13);
      --v15;
    }
    while (v15);
  }

  return v14;
}

- (id)generateLinkReport:(double)a3 isCurrentLink:(BOOL)a4
{
  double previousReportTime = self->_previousReportTime;
  if (previousReportTime == 0.0)
  {
    double v13 = 0;
  }
  else
  {
    double v7 = a3 - previousReportTime;
    unint64_t v8 = self->_totalBytesSent - self->_previousBytesSent;
    unint64_t v9 = self->_totalBytesReceived - self->_previousBytesReceived;
    if (a4) {
      uint64_t v10 = 42;
    }
    else {
      uint64_t v10 = 32;
    }
    uint64_t v36 = v10;
    uint64_t v37 = NSString;
    unint64_t state = self->_state;
    if (state > 6) {
      id v12 = "UnexpectedState";
    }
    else {
      id v12 = _IDSLinkStateStrings[state];
    }
    uint64_t v35 = v12;
    unint64_t v34 = self->_totalPacketsSent - self->_previousPacketsSent;
    uint64_t v14 = formattedBytes(v8, a2, previousReportTime);
    uint64_t v16 = formattedSpeed((unint64_t)((double)(8 * v8) / v7 + 0.5), v15, (double)(8 * v8) / v7 + 0.5);
    unint64_t totalPacketsSent = self->_totalPacketsSent;
    double v20 = formattedBytes(self->_totalBytesSent, v18, v19);
    unint64_t v21 = self->_totalPacketsReceived - self->_previousPacketsReceived;
    uint64_t v24 = formattedBytes(v9, v22, v23);
    uint64_t v26 = formattedSpeed((unint64_t)((double)(8 * v9) / v7 + 0.5), v25, (double)(8 * v9) / v7 + 0.5);
    unint64_t totalPacketsReceived = self->_totalPacketsReceived;
    uint64_t v30 = formattedBytes(self->_totalBytesReceived, v28, v29);
    double v13 = objc_msgSend_stringWithFormat_(v37, v31, @"%c GlobalLink(%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B\n                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B\n", v32, v36, v35, v34, v14, v16, totalPacketsSent, v20, v21, v24, v26, totalPacketsReceived, v30);
  }
  self->_double previousReportTime = a3;
  self->_previousBytesSent = self->_totalBytesSent;
  *(_OWORD *)&self->_previousPacketsSent = *(_OWORD *)&self->_totalPacketsSent;
  self->_previousPacketsReceived = self->_totalPacketsReceived;
  return v13;
}

- (void)_sendSKEDataWithSelectedCandidatePair
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  int v108 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  if (!self->_isInitiator)
  {
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    id v62 = v108;
    uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v63, (uint64_t)&v113, v64, v121, 16);
    if (v67)
    {
      uint64_t v69 = *(void *)v114;
LABEL_53:
      uint64_t v70 = 0;
      while (1)
      {
        if (*(void *)v114 != v69) {
          objc_enumerationMutation(v62);
        }
        int v71 = *(void **)(*((void *)&v113 + 1) + 8 * v70);
        if (objc_msgSend_recvSKEData(v71, v65, v66, v68)) {
          break;
        }
        if (v67 == ++v70)
        {
          uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v65, (uint64_t)&v113, v68, v121, 16);
          if (v67) {
            goto LABEL_53;
          }
          goto LABEL_59;
        }
      }
      double v51 = v71;

      if (!v51) {
        goto LABEL_60;
      }
      goto LABEL_71;
    }
    goto LABEL_59;
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  obuint64_t j = v108;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v117, v5, v132, 16);
  if (!v8)
  {
LABEL_59:

    goto LABEL_60;
  }
  unsigned int v110 = 0;
  uint64_t v112 = *(void *)v118;
  uint64_t v9 = 136316162;
LABEL_4:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v118 != v112) {
      objc_enumerationMutation(obj);
    }
    uint64_t v11 = *(__CFString **)(*((void *)&v117 + 1) + 8 * v10);
    uint64_t v12 = objc_msgSend_state(v11, v6, v7, *(double *)&v9);
    double v13 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_isAcceptedRelaySession(v11, v14, v15, v16)) {
        double v20 = @"YES";
      }
      else {
        double v20 = @"NO";
      }
      int v21 = objc_msgSend_pendingRealloc(v11, v17, v18, v19);
      int v25 = objc_msgSend_sentSKEData(v11, v22, v23, v24);
      *(_DWORD *)buf = 136316162;
      if (v21) {
        uint64_t v26 = @"YES";
      }
      else {
        uint64_t v26 = @"NO";
      }
      id v123 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
      if (v25) {
        char v27 = @"YES";
      }
      else {
        char v27 = @"NO";
      }
      __int16 v124 = 2112;
      uint64_t v125 = v11;
      __int16 v126 = 2112;
      uint64_t v127 = v20;
      __int16 v128 = 2112;
      BOOL v129 = v26;
      __int16 v130 = 2112;
      double v131 = v27;
      _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      unint64_t v34 = objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30) ? @"YES" : @"NO";
      uint64_t v38 = objc_msgSend_pendingRealloc(v11, v31, v32, v33) ? @"YES" : @"NO";
      double v39 = objc_msgSend_sentSKEData(v11, v35, v36, v37) ? @"YES" : @"NO";
      double v106 = v38;
      double v107 = v39;
      id v104 = v11;
      long long v105 = v34;
      char v103 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
      _IDSLogTransport(@"GL", @"IDS", @"%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@");
      if (_IDSShouldLog())
      {
        if (objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30, "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]", v11, v34, v38, v107))uint64_t v43 = @"YES"; {
        else
        }
          uint64_t v43 = @"NO";
        if (objc_msgSend_pendingRealloc(v11, v40, v41, v42)) {
          double v47 = @"YES";
        }
        else {
          double v47 = @"NO";
        }
        if (objc_msgSend_sentSKEData(v11, v44, v45, v46)) {
          uint64_t v48 = @"YES";
        }
        else {
          uint64_t v48 = @"NO";
        }
        double v106 = v47;
        double v107 = v48;
        id v104 = v11;
        long long v105 = v43;
        char v103 = "-[IDSGlobalLink _sendSKEDataWithSelectedCandidatePair]";
        _IDSLogV(0, @"IDSFoundation", @"GL", @"%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@");
      }
    }
    if (objc_msgSend_isAcceptedRelaySession(v11, v28, v29, v30, v103, v104, v105, v106, v107)
      && (objc_msgSend_pendingRealloc(v11, v6, v7, *(double *)&v9) & 1) == 0)
    {
      char v49 = objc_msgSend_sentSKEData(v11, v6, v7, *(double *)&v9);
      char v50 = (unint64_t)(v12 - 5) < 0xFFFFFFFFFFFFFFFELL ? 1 : v49;
      if ((v50 & 1) == 0)
      {
        double v51 = v11;

        uint64_t v55 = objc_msgSend_local(v51, v52, v53, v54);
        int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v55, v56, v57, v58);

        unsigned int v110 = v51;
        if (!isCellularStunCandidate) {
          break;
        }
      }
    }
    if (v8 == ++v10)
    {
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v117, *(double *)&v9, v132, 16);
      double v51 = v110;
      if (v8) {
        goto LABEL_4;
      }
      break;
    }
  }

  if (v51)
  {
    objc_msgSend_setSentSKEData_(v51, v60, 1, v61);
LABEL_71:
    uint64_t v74 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_candidatePairToken(v51, v75, v76, v77);
      uint64_t v78 = (char *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      id v123 = v78;
      _os_log_impl(&dword_19D9BE000, v74, OS_LOG_TYPE_DEFAULT, "send SKE data using %@.", buf, 0xCu);
    }
    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        objc_msgSend_candidatePairToken(v51, v79, v80, v81);
        char v103 = (char *)objc_claimAutoreleasedReturnValue();
        _IDSLogTransport(@"GL", @"IDS", @"send SKE data using %@.");

        if (_IDSShouldLog())
        {
          objc_msgSend_candidatePairToken(v51, v82, v83, v84, v103);
          char v103 = (char *)objc_claimAutoreleasedReturnValue();
          _IDSLogV(0, @"IDSFoundation", @"GL", @"send SKE data using %@.");
        }
      }
    }
    double v85 = ids_monotonic_time() - self->_skeStartTime;
    id v86 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v87 = @"YES";
      if (!self->_isInitiator) {
        uint64_t v87 = @"NO";
      }
      *(_DWORD *)buf = 134218242;
      id v123 = *(const char **)&v85;
      __int16 v124 = 2112;
      uint64_t v125 = v87;
      _os_log_impl(&dword_19D9BE000, v86, OS_LOG_TYPE_DEFAULT, "send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      char v91 = self->_isInitiator ? @"YES" : @"NO";
      id v104 = v91;
      char v103 = *(char **)&v85;
      _IDSLogTransport(@"GL", @"IDS", @"send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).");
      if (_IDSShouldLog())
      {
        if (self->_isInitiator) {
          id v92 = @"YES";
        }
        else {
          id v92 = @"NO";
        }
        id v104 = v92;
        char v103 = *(char **)&v85;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).");
      }
    }
    if (self->_remoteGlobalLinkVersion)
    {
      uint64_t v93 = objc_msgSend_candidatePairToken(v51, v88, v89, v90);
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v94, 1, v95, 0, 0, v93);
    }
    else
    {
      BOOL v96 = !self->_isInitiator;
      if (self->_isInitiator) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = 32769;
      }
      id v98 = objc_msgSend_candidatePairToken(v51, v88, v89, v90, v103, v104);
      objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v99, v97, v100, 0, 0, v98);

      if (v96) {
        objc_msgSend__notifyQRSessionConnected_(self, v101, (uint64_t)v51, v102);
      }
    }
    goto LABEL_98;
  }
LABEL_60:
  double v72 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    if (self->_isInitiator) {
      uint64_t v73 = @"YES";
    }
    else {
      uint64_t v73 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    id v123 = (const char *)v73;
    _os_log_impl(&dword_19D9BE000, v72, OS_LOG_TYPE_DEFAULT, "failed to select candidate pair to send SKE data (isInitiator:%@).", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to select candidate pair to send SKE data (isInitiator:%@).");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to select candidate pair to send SKE data (isInitiator:%@).");
      }
    }
  }
  double v51 = 0;
LABEL_98:
}

- (void)_sendSKEDataToSucceededCandidatePairs
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  long long v120 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  __int16 v122 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7);
  if (!self->_isInitiator)
  {
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    uint64_t v55 = v120;
    uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v69, (uint64_t)&v130, v70, v139, 16);
    if (v73)
    {
      uint64_t v75 = *(void *)v131;
      do
      {
        for (uint64_t i = 0; i != v73; ++i)
        {
          if (*(void *)v131 != v75) {
            objc_enumerationMutation(v55);
          }
          double v77 = *(void **)(*((void *)&v130 + 1) + 8 * i);
          if (objc_msgSend_recvSKEData(v77, v71, v72, v74) && objc_msgSend_state(v77, v71, v72, v74) == 3) {
            objc_msgSend_addObject_(v122, v71, (uint64_t)v77, v74);
          }
        }
        uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v71, (uint64_t)&v130, v74, v139, 16);
      }
      while (v73);
    }
    goto LABEL_63;
  }
  long long v136 = 0u;
  long long v137 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  obuint64_t j = v120;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v134, v9, v150, 16);
  if (!v12)
  {
    uint64_t v55 = obj;
    goto LABEL_63;
  }
  int v121 = 0;
  id v124 = *(id *)v135;
  uint64_t v13 = 136316162;
LABEL_4:
  uint64_t v14 = 0;
  while (1)
  {
    if (*(id *)v135 != v124) {
      objc_enumerationMutation(obj);
    }
    uint64_t v15 = *(__CFString **)(*((void *)&v134 + 1) + 8 * v14);
    uint64_t v16 = objc_msgSend_state(v15, v10, v11, *(double *)&v13);
    double v17 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_isAcceptedRelaySession(v15, v18, v19, v20)) {
        double v24 = @"YES";
      }
      else {
        double v24 = @"NO";
      }
      int v25 = objc_msgSend_pendingRealloc(v15, v21, v22, v23);
      int v29 = objc_msgSend_sentSKEData(v15, v26, v27, v28);
      *(_DWORD *)buf = 136316162;
      if (v25) {
        double v30 = @"YES";
      }
      else {
        double v30 = @"NO";
      }
      uint64_t v141 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
      if (v29) {
        unint64_t v31 = @"YES";
      }
      else {
        unint64_t v31 = @"NO";
      }
      __int16 v142 = 2112;
      long long v143 = v15;
      __int16 v144 = 2112;
      __int16 v145 = v24;
      __int16 v146 = 2112;
      uint64_t v147 = v30;
      __int16 v148 = 2112;
      long long v149 = v31;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v38 = objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34) ? @"YES" : @"NO";
      double v42 = objc_msgSend_pendingRealloc(v15, v35, v36, v37) ? @"YES" : @"NO";
      uint64_t v43 = objc_msgSend_sentSKEData(v15, v39, v40, v41) ? @"YES" : @"NO";
      long long v118 = v42;
      long long v119 = v43;
      long long v116 = v15;
      long long v117 = v38;
      long long v115 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
      _IDSLogTransport(@"GL", @"IDS", @"%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@");
      if (_IDSShouldLog())
      {
        if (objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34, "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]", v15, v38, v42, v119))double v47 = @"YES"; {
        else
        }
          double v47 = @"NO";
        if (objc_msgSend_pendingRealloc(v15, v44, v45, v46)) {
          double v51 = @"YES";
        }
        else {
          double v51 = @"NO";
        }
        if (objc_msgSend_sentSKEData(v15, v48, v49, v50)) {
          unsigned int v52 = @"YES";
        }
        else {
          unsigned int v52 = @"NO";
        }
        long long v118 = v51;
        long long v119 = v52;
        long long v116 = v15;
        long long v117 = v47;
        long long v115 = "-[IDSGlobalLink _sendSKEDataToSucceededCandidatePairs]";
        _IDSLogV(0, @"IDSFoundation", @"GL", @"%s: candidatePair %@ isAcceptedRelaySession %@ pendingRealloc %@ sentSKEData %@");
      }
    }
    if (objc_msgSend_isAcceptedRelaySession(v15, v32, v33, v34, v115, v116, v117, v118, v119)
      && (objc_msgSend_pendingRealloc(v15, v10, v11, *(double *)&v13) & 1) == 0)
    {
      char v53 = objc_msgSend_sentSKEData(v15, v10, v11, *(double *)&v13);
      char v54 = (unint64_t)(v16 - 5) < 0xFFFFFFFFFFFFFFFELL ? 1 : v53;
      if ((v54 & 1) == 0)
      {
        uint64_t v55 = v15;

        double v59 = objc_msgSend_local(v55, v56, v57, v58);
        int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v59, v60, v61, v62);

        int v121 = v55;
        if (!isCellularStunCandidate) {
          break;
        }
      }
    }
    if (v12 == ++v14)
    {
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v134, *(double *)&v13, v150, 16);
      uint64_t v55 = v121;
      if (v12) {
        goto LABEL_4;
      }
      break;
    }
  }

  if (v55)
  {
    objc_msgSend_setSentSKEData_(v55, v64, 1, v66);
    objc_msgSend_addObject_(v122, v67, (uint64_t)v55, v68);
LABEL_63:
  }
  if (objc_msgSend_count(v122, v64, v65, v66))
  {
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    id v125 = v122;
    uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v78, (uint64_t)&v126, v79, v138, 16);
    if (v80)
    {
      uint64_t v81 = *(void *)v127;
      do
      {
        for (uint64_t j = 0; j != v80; ++j)
        {
          if (*(void *)v127 != v81) {
            objc_enumerationMutation(v125);
          }
          uint64_t v83 = *(void **)(*((void *)&v126 + 1) + 8 * j);
          double v84 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v83, v85, v86, v87);
            double v88 = (char *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            uint64_t v141 = v88;
            _os_log_impl(&dword_19D9BE000, v84, OS_LOG_TYPE_DEFAULT, "_sendSKEDataToSucceededCandidatePairs: send SKE data using %@.", buf, 0xCu);
          }
          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              objc_msgSend_candidatePairToken(v83, v89, v90, v91);
              long long v115 = (char *)objc_claimAutoreleasedReturnValue();
              _IDSLogTransport(@"GL", @"IDS", @"_sendSKEDataToSucceededCandidatePairs: send SKE data using %@.");

              if (_IDSShouldLog())
              {
                objc_msgSend_candidatePairToken(v83, v92, v93, v94, v115);
                long long v115 = (char *)objc_claimAutoreleasedReturnValue();
                _IDSLogV(0, @"IDSFoundation", @"GL", @"_sendSKEDataToSucceededCandidatePairs: send SKE data using %@.");
              }
            }
          }
          double v95 = ids_monotonic_time() - self->_skeStartTime;
          BOOL v96 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v97 = @"YES";
            if (!self->_isInitiator) {
              uint64_t v97 = @"NO";
            }
            *(_DWORD *)buf = 134218242;
            uint64_t v141 = *(const char **)&v95;
            __int16 v142 = 2112;
            long long v143 = v97;
            _os_log_impl(&dword_19D9BE000, v96, OS_LOG_TYPE_DEFAULT, "_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
          {
            double v101 = @"YES";
            if (!self->_isInitiator) {
              double v101 = @"NO";
            }
            long long v116 = v101;
            long long v115 = *(char **)&v95;
            _IDSLogTransport(@"GL", @"IDS", @"_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).");
            if (_IDSShouldLog())
            {
              double v102 = @"YES";
              if (!self->_isInitiator) {
                double v102 = @"NO";
              }
              long long v116 = v102;
              long long v115 = *(char **)&v95;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"_sendSKEDataToSucceededCandidatePairs: send delayed session connected with SKE data (waitTime:%.6f sec, initiator:%@).");
            }
          }
          if (self->_remoteGlobalLinkVersion)
          {
            char v103 = objc_msgSend_candidatePairToken(v83, v98, v99, v100);
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v104, 1, v105, 0, 0, v103);
          }
          else
          {
            BOOL v108 = !self->_isInitiator;
            if (self->_isInitiator) {
              uint64_t v109 = 1;
            }
            else {
              uint64_t v109 = 32769;
            }
            unsigned int v110 = objc_msgSend_candidatePairToken(v83, v98, v99, v100, v115, v116);
            objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, v111, v109, v112, 0, 0, v110);

            if (v108) {
              objc_msgSend__notifyQRSessionConnected_(self, v106, (uint64_t)v83, v107);
            }
          }
        }
        uint64_t v80 = objc_msgSend_countByEnumeratingWithState_objects_count_(v125, v106, (uint64_t)&v126, v107, v138, 16);
      }
      while (v80);
    }
  }
  else
  {
    long long v113 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      if (self->_isInitiator) {
        long long v114 = @"YES";
      }
      else {
        long long v114 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v141 = (const char *)v114;
      _os_log_impl(&dword_19D9BE000, v113, OS_LOG_TYPE_DEFAULT, "failed to get candidate pair to send SKE data (isInitiator:%@).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to get candidate pair to send SKE data (isInitiator:%@).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get candidate pair to send SKE data (isInitiator:%@).");
        }
      }
    }
  }
}

- (void)_requestNonUDPRelayAllocation:(int64_t)a3 relaySessionID:(id)a4
{
  id v6 = a4;
  double v7 = v6;
  if ((unint64_t)(a3 - 5) >= 0xFFFFFFFFFFFFFFFELL)
  {
    BOOL shouldFallbackToTCPFirst = self->_shouldFallbackToTCPFirst;
    if (a3 == 3) {
      int v9 = 3;
    }
    else {
      int v9 = 5;
    }
    if (a3 == 4) {
      int v10 = 3;
    }
    else {
      int v10 = 5;
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19DA6E3BC;
    v12[3] = &unk_1E5973AE0;
    if (shouldFallbackToTCPFirst) {
      int v11 = v9;
    }
    else {
      int v11 = v10;
    }
    v12[4] = self;
    int64_t v14 = a3;
    id v13 = v6;
    IDSTransportThreadAddBlockAfter(v12, (double)v11);
  }
}

- (void)setAcceptedRelaySession:(id)a3 options:(id)a4
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  double v7 = (NSData *)a3;
  CFDictionaryRef theDict = (const __CFDictionary *)a4;
  if (self->_isInitiator)
  {
    if (v7)
    {
      p_acceptedRelaySessionID = &self->_acceptedRelaySessionID;
      long long v115 = self;
      acceptedRelaySessionID = self->_acceptedRelaySessionID;
      objc_storeStrong((id *)p_acceptedRelaySessionID, a3);
      int v10 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = objc_msgSend_count(v115->_tokenToCandidatePairs, v11, v12, v13);
        *(_DWORD *)buf = 138412546;
        long long v127 = v7;
        __int16 v128 = 2048;
        uint64_t v129 = v14;
        _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v109 = v7;
          uint64_t v111 = objc_msgSend_count(v115->_tokenToCandidatePairs, v15, v16, v17);
          _IDSLogTransport(@"GL", @"IDS", @"receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu");
          if (_IDSShouldLog())
          {
            uint64_t v18 = objc_msgSend_count(v115->_tokenToCandidatePairs, v15, v16, v17, v7, v111);
            uint64_t v109 = v7;
            uint64_t v111 = v18;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive accepted relay-session-id %@, _tokenToCandidatePairs count = %lu");
          }
        }
      }
      Value = 0;
      if (theDict)
      {
        uint64_t v15 = (const char *)@"gl-option-use-secure-control-message";
        if (@"gl-option-use-secure-control-message") {
          Value = (void *)CFDictionaryGetValue(theDict, @"gl-option-use-secure-control-message");
        }
      }
      int v20 = objc_msgSend_BOOLValue(Value, v15, v16, v17, v109, v111);
      if (v115->_useSecureControlMessage) {
        int v21 = 0;
      }
      else {
        int v21 = v20;
      }
      if (v21 == 1)
      {
        v115->_useSecureControlMessage = 1;
        uint64_t v22 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "enable secure control message for Initiator.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"enable secure control message for Initiator.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"enable secure control message for Initiator.");
            }
          }
        }
      }
      double v23 = ids_monotonic_time();
      tokenToCandidatePairs = v115->_tokenToCandidatePairs;
      v115->_double skeStartTime = v23;
      long long v113 = objc_msgSend_allValues(tokenToCandidatePairs, v25, v26, v23);
      if (!objc_msgSend_count(v115->_tokenToCandidatePairs, v27, v28, v29))
      {
        double v62 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "No valid candiate pair, _isSessionAccepted yes", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"No valid candiate pair, _isSessionAccepted yes");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"No valid candiate pair, _isSessionAccepted yes");
            }
          }
        }
        uint64_t v33 = 0;
        uint64_t v63 = v115;
        v115->_isSessionAcceptedWithNoCandidatePair = 1;
LABEL_89:
        if (v63->_skeData)
        {
          double v102 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            skeData = v63->_skeData;
            *(_DWORD *)buf = 134217984;
            long long v127 = skeData;
            _os_log_impl(&dword_19D9BE000, v102, OS_LOG_TYPE_DEFAULT, "found saved SKE data %p, send it immediately.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              unsigned int v110 = v115->_skeData;
              _IDSLogTransport(@"GL", @"IDS", @"found saved SKE data %p, send it immediately.");
              if (_IDSShouldLog())
              {
                unsigned int v110 = v115->_skeData;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"found saved SKE data %p, send it immediately.");
              }
            }
          }
          objc_msgSend__sendSKEDataWithSelectedCandidatePair(v115, v104, v105, v106, v110);
          uint64_t v63 = v115;
        }
        if (v33 == 2)
        {
          objc_msgSend__requestNonUDPRelayAllocation_relaySessionID_(v63, v58, 3, v59, v7);
          objc_msgSend__requestNonUDPRelayAllocation_relaySessionID_(v115, v107, 4, v108, v7);
        }

        goto LABEL_100;
      }
      if (acceptedRelaySessionID)
      {
        long long v118 = 0uLL;
        long long v119 = 0uLL;
        long long v116 = 0uLL;
        long long v117 = 0uLL;
        id v30 = v113;
        uint64_t v33 = 0;
        uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v116, v32, v124, 16);
        if (v36)
        {
          uint64_t v37 = *(void *)v117;
          uint64_t v38 = 138412546;
          do
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              if (*(void *)v117 != v37) {
                objc_enumerationMutation(v30);
              }
              uint64_t v40 = *(void **)(*((void *)&v116 + 1) + 8 * i);
              if (objc_msgSend_isRelayStunCandidatePair(v40, v34, v35, *(double *)&v38, v110, v112))
              {
                double v41 = objc_msgSend_sessionID(v40, v34, v35, *(double *)&v38);
                int isEqualToString = objc_msgSend_isEqualToString_(v41, v42, (uint64_t)v7, v43);

                if (isEqualToString)
                {
                  objc_msgSend_setIsAcceptedRelaySession_(v40, v34, 1, *(double *)&v38);
                  uint64_t v48 = objc_msgSend_local(v40, v45, v46, v47);
                  uint64_t v33 = objc_msgSend_transport(v48, v49, v50, v51);

                  unsigned int v52 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_candidatePairToken(v40, v53, v54, v55);
                    uint64_t v56 = (NSData *)objc_claimAutoreleasedReturnValue();
                    uint64_t v57 = (&_IDSStunTransportStrings)[v33];
                    *(_DWORD *)buf = 138412546;
                    long long v127 = v56;
                    __int16 v128 = 2080;
                    uint64_t v129 = (uint64_t)v57;
                    _os_log_impl(&dword_19D9BE000, v52, OS_LOG_TYPE_DEFAULT, "new relay candidate pair %@ is accepted, transport: %s.", buf, 0x16u);
                  }
                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      unsigned int v110 = objc_msgSend_candidatePairToken(v40, v34, v35, *(double *)&v38);
                      double v112 = (&_IDSStunTransportStrings)[v33];
                      _IDSLogTransport(@"GL", @"IDS", @"new relay candidate pair %@ is accepted, transport: %s.");

                      if (_IDSShouldLog())
                      {
                        unsigned int v110 = objc_msgSend_candidatePairToken(v40, v34, v35, *(double *)&v38, v110, v112);
                        double v112 = (&_IDSStunTransportStrings)[v33];
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"new relay candidate pair %@ is accepted, transport: %s.");
                      }
                    }
                  }
                }
              }
            }
            uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v34, (uint64_t)&v116, *(double *)&v38, v124, 16);
          }
          while (v36);
        }

LABEL_88:
        uint64_t v63 = v115;
        goto LABEL_89;
      }
      long long v122 = 0uLL;
      long long v123 = 0uLL;
      long long v120 = 0uLL;
      long long v121 = 0uLL;
      id v64 = v113;
      uint64_t v33 = 0;
      uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v65, (uint64_t)&v120, v66, v125, 16);
      if (!v69) {
        goto LABEL_87;
      }
      uint64_t v70 = *(void *)v121;
      uint64_t v71 = 138412290;
LABEL_61:
      uint64_t v72 = 0;
      while (1)
      {
        if (*(void *)v121 != v70) {
          objc_enumerationMutation(v64);
        }
        uint64_t v73 = *(void **)(*((void *)&v120 + 1) + 8 * v72);
        if (!objc_msgSend_isRelayStunCandidatePair(v73, v67, v68, *(double *)&v71, v110, v112)) {
          goto LABEL_85;
        }
        double v74 = objc_msgSend_sessionID(v73, v67, v68, *(double *)&v71);
        int v77 = objc_msgSend_isEqualToString_(v74, v75, (uint64_t)v7, v76);

        if (!v77) {
          break;
        }
        objc_msgSend_setIsAcceptedRelaySession_(v73, v78, 1, v79);
        uint64_t v83 = objc_msgSend_local(v73, v80, v81, v82);
        uint64_t v33 = objc_msgSend_transport(v83, v84, v85, v86);

        double v87 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_candidatePairToken(v73, v88, v89, v90);
          double v91 = (NSData *)objc_claimAutoreleasedReturnValue();
          id v92 = (&_IDSStunTransportStrings)[v33];
          *(_DWORD *)buf = 138412546;
          long long v127 = v91;
          __int16 v128 = 2080;
          uint64_t v129 = (uint64_t)v92;
          _os_log_impl(&dword_19D9BE000, v87, OS_LOG_TYPE_DEFAULT, "relay candidate pair %@ is accepted, transport: %s.", buf, 0x16u);
        }
        if (!os_log_shim_legacy_logging_enabled()) {
          goto LABEL_85;
        }
        if (!_IDSShouldLogTransport()) {
          goto LABEL_85;
        }
        unsigned int v110 = objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71);
        double v112 = (&_IDSStunTransportStrings)[v33];
        _IDSLogTransport(@"GL", @"IDS", @"relay candidate pair %@ is accepted, transport: %s.");

        if (!_IDSShouldLog()) {
          goto LABEL_85;
        }
        uint64_t v93 = objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71, v110, v112);
        unsigned int v110 = v93;
        double v112 = (&_IDSStunTransportStrings)[v33];
        _IDSLogV(0, @"IDSFoundation", @"GL", @"relay candidate pair %@ is accepted, transport: %s.");
LABEL_84:

LABEL_85:
        if (v69 == ++v72)
        {
          uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v67, (uint64_t)&v120, *(double *)&v71, v125, 16);
          if (!v69)
          {
LABEL_87:

            goto LABEL_88;
          }
          goto LABEL_61;
        }
      }
      nonAcceptedQRSessions = (__CFArray *)v115->_nonAcceptedQRSessions;
      if (nonAcceptedQRSessions)
      {
        if (!v73) {
          goto LABEL_78;
        }
      }
      else
      {
        double v95 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
        BOOL v96 = v115->_nonAcceptedQRSessions;
        v115->_nonAcceptedQRSessions = v95;

        nonAcceptedQRSessions = (__CFArray *)v115->_nonAcceptedQRSessions;
        if (!v73)
        {
LABEL_78:
          uint64_t v97 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_candidatePairToken(v73, v98, v99, v100);
            double v101 = (NSData *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            long long v127 = v101;
            _os_log_impl(&dword_19D9BE000, v97, OS_LOG_TYPE_DEFAULT, "relay candidate pair %@ is not accepted, added to remove list.", buf, 0xCu);
          }
          if (!os_log_shim_legacy_logging_enabled()) {
            goto LABEL_85;
          }
          if (!_IDSShouldLogTransport()) {
            goto LABEL_85;
          }
          unsigned int v110 = objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71);
          _IDSLogTransport(@"GL", @"IDS", @"relay candidate pair %@ is not accepted, added to remove list.");

          if (!_IDSShouldLog()) {
            goto LABEL_85;
          }
          uint64_t v93 = objc_msgSend_candidatePairToken(v73, v67, v68, *(double *)&v71, v110);
          unsigned int v110 = v93;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"relay candidate pair %@ is not accepted, added to remove list.");
          goto LABEL_84;
        }
      }
      if (nonAcceptedQRSessions) {
        CFArrayAppendValue(nonAcceptedQRSessions, v73);
      }
      goto LABEL_78;
    }
    uint64_t v61 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "setAcceptedRelaySession failed due to invalid relay-session-id.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"setAcceptedRelaySession failed due to invalid relay-session-id.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"setAcceptedRelaySession failed due to invalid relay-session-id.");
        }
      }
    }
  }
  else
  {
    uint64_t v60 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v60, OS_LOG_TYPE_DEFAULT, "setAcceptedRelaySession failed, not Initiator.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"setAcceptedRelaySession failed, not Initiator.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"setAcceptedRelaySession failed, not Initiator.");
        }
      }
    }
  }
LABEL_100:
}

- (void)setServerDesiredMaterialsForSession:(id)a3 materials:(id)a4 signer:(id)a5
{
  serverMaterialExchangeController = self->_serverMaterialExchangeController;
  if (serverMaterialExchangeController)
  {
    self->_hasSetServerDesiredMaterials = 1;
    objc_msgSend_setDesiredMaterialsForSession_materials_signer_(serverMaterialExchangeController, a2, (uint64_t)a3, v5, a4, a5);
  }
}

- (void)requestMaterialsForSession:(id)a3 participantIDs:(id)a4 materialType:(int)a5
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  int v10 = IMGetDomainBoolForKey();
  uint64_t v14 = objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: ignoring because DisableQUICMaterialRecovery is set", buf, 2u);
    }
  }
  else
  {
    if (v15)
    {
      *(_DWORD *)buf = 67109378;
      int v24 = a5;
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: Trying to request material of type %d over active QUIC link for IDSSessionID: %@", buf, 0x12u);
    }

    if (self->_serverMaterialExchangeController || self->_quicMaterialExchangeProvider)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_19DA6FA78;
      v20[3] = &unk_1E59742D8;
      v20[4] = self;
      id v21 = v9;
      int v22 = a5;
      IDSTransportThreadAddBlock(v20);
    }
    else
    {
      uint64_t v19 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v19, OS_LOG_TYPE_DEFAULT, "requestMaterialsForSession: SME disabled", buf, 2u);
      }
    }
  }
}

- (BOOL)qrMaterialExchangePutMaterial:(id)a3
{
  return ((uint64_t (*)(IDSGlobalLink *, char *, id))MEMORY[0x1F4181798])(self, sel__qrMaterialExchangePutMaterial_completionHandler_, a3);
}

- (BOOL)_qrMaterialExchangePutMaterial:(id)a3 completionHandler:(id)a4
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  id v111 = a3;
  id v6 = a4;
  int v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    id v132 = v111;
    __int16 v133 = 2112;
    long long v134 = idsSessionID;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: Trying to send material %@ over active QUIC link for IDSSessionID: %@", buf, 0x16u);
  }

  if (self->_linkIDForPlugin)
  {
    aBlocuint64_t k = v6;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    BOOL v15 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v12, v13, 0.0);
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v121, v17, v130, 16);
    if (v18)
    {
      uint64_t v21 = v18;
      double v112 = self;
      char v22 = 0;
      uint64_t v23 = *(void *)v122;
      uint64_t v24 = 138412290;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v122 != v23) {
            objc_enumerationMutation(v15);
          }
          id v26 = *(void **)(*((void *)&v121 + 1) + 8 * i);
          uint64_t v27 = objc_msgSend_state(v26, v19, v20, *(double *)&v24);
          if (objc_msgSend_isActualRelayStunCandidatePair(v26, v28, v29, v30))
          {
            if (objc_msgSend_isQUIC(v26, v19, v20, *(double *)&v24) && v27 == 4)
            {
              double v32 = [IDSQRProtoMessage alloc];
              __int16 v128 = @"gl-option-materials-key";
              id v129 = v111;
              uint64_t v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v33, (uint64_t)&v129, v34, &v128, 1);
              uint64_t v38 = objc_msgSend_initWithType_candidatePair_options_(v32, v36, 24, v37, v26, v35);

              double v42 = objc_msgSend_GlobalLink(IDSFoundationLog, v39, v40, v41);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                id v132 = v26;
                _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: send quic message on %@", buf, 0xCu);
              }

              int v45 = objc_msgSend_sendQUICPutMaterialRequest_(v26, v43, (uint64_t)v38, v44);
              v22 |= v45;
              if (aBlock && v45)
              {
                putMaterialReqTxIdToCompletionBlocuint64_t k = v112->_putMaterialReqTxIdToCompletionBlock;
                double v47 = _Block_copy(aBlock);
                uint64_t v48 = NSNumber;
                uint64_t v52 = objc_msgSend_transactionID(v38, v49, v50, v51);
                double v55 = objc_msgSend_numberWithUnsignedLongLong_(v48, v53, v52, v54);
                objc_msgSend_setObject_forKey_(putMaterialReqTxIdToCompletionBlock, v56, (uint64_t)v47, v57, v55);

                char v22 = 1;
              }
            }
          }
        }
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v121, *(double *)&v24, v130, 16);
      }
      while (v21);

      self = v112;
      if (v22)
      {
        char v60 = 1;
        id v6 = aBlock;
        goto LABEL_54;
      }
    }
    else
    {
    }
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    uint64_t v63 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v58, v59, 0.0);
    uint64_t v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v64, (uint64_t)&v117, v65, v127, 16);
    if (v66)
    {
      uint64_t v69 = v66;
      char v62 = 0;
      uint64_t v70 = *(void *)v118;
      uint64_t v71 = 138412546;
      uint64_t v106 = *(void *)v118;
      double v107 = v63;
      do
      {
        uint64_t v72 = 0;
        uint64_t v108 = v69;
        do
        {
          if (*(void *)v118 != v70) {
            objc_enumerationMutation(v63);
          }
          uint64_t v73 = *(void **)(*((void *)&v117 + 1) + 8 * v72);
          uint64_t v74 = objc_msgSend_state(v73, v67, v68, *(double *)&v71);
          if (objc_msgSend_isActualRelayStunCandidatePair(v73, v75, v76, v77)
            && (objc_msgSend_isQUIC(v73, v67, v68, *(double *)&v71) & 1) == 0
            && v74 == 4)
          {
            uint64_t v109 = v72;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v113 = 0u;
            long long v114 = 0u;
            id v78 = v111;
            uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v79, (uint64_t)&v113, v80, v126, 16);
            if (v81)
            {
              uint64_t v82 = v81;
              uint64_t v83 = *(void *)v114;
              do
              {
                for (uint64_t j = 0; j != v82; ++j)
                {
                  if (*(void *)v114 != v83) {
                    objc_enumerationMutation(v78);
                  }
                  uint64_t v85 = *(NSString **)(*((void *)&v113 + 1) + 8 * j);
                  id v86 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                  double v87 = objc_alloc_init(IDSQRProtoPutMaterialMaterials);
                  id v125 = v85;
                  double v90 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v88, (uint64_t)&v125, v89, 1);
                  double v94 = objc_msgSend_mutableCopy(v90, v91, v92, v93);
                  objc_msgSend_setMaterials_(v87, v95, (uint64_t)v94, v96);

                  double v100 = objc_msgSend_GlobalLink(IDSFoundationLog, v97, v98, v99);
                  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    id v132 = v73;
                    __int16 v133 = 2112;
                    long long v134 = v85;
                    _os_log_impl(&dword_19D9BE000, v100, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: send stun message on %@ for key material %@", buf, 0x16u);
                  }

                  objc_msgSend_sendPutMaterialRequest_options_(v73, v101, 0, v102, v86);
                }
                uint64_t v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v78, v103, (uint64_t)&v113, v104, v126, 16);
              }
              while (v82);
            }

            char v62 = 1;
            uint64_t v70 = v106;
            uint64_t v63 = v107;
            uint64_t v69 = v108;
            uint64_t v72 = v109;
          }
          ++v72;
        }
        while (v72 != v69);
        uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v63, v67, (uint64_t)&v117, *(double *)&v71, v127, 16);
      }
      while (v69);
    }
    else
    {
      char v62 = 0;
    }

    char v60 = v62;
    id v6 = aBlock;
    if (aBlock)
    {
LABEL_53:
      (*((void (**)(id, void))v6 + 2))(v6, v62 & 1);
      char v60 = v62;
    }
  }
  else
  {
    uint64_t v61 = objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v61, OS_LOG_TYPE_DEFAULT, "qrMaterialExchangePutMaterial: no active QUIC link", buf, 2u);
    }

    char v62 = 0;
    char v60 = 0;
    if (v6) {
      goto LABEL_53;
    }
  }
LABEL_54:

  return v60 & 1;
}

- (void)qrMaterialExchangePutMaterial:(id)a3 completionHandler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_19DA70410;
  v10[3] = &unk_1E5974508;
  v10[4] = self;
  id v11 = v6;
  id v12 = v7;
  id v8 = v7;
  id v9 = v6;
  IDSTransportThreadAddBlock(v10);
}

- (void)setIDSContextBlob:(id)a3
{
}

- (id)_getLocalAttribute:(id)a3
{
  uint64_t v497 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  unsigned int isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v6, v7, v8);
  id v12 = objc_msgSend_local(v4, v9, v10, v11);
  uint64_t v16 = objc_msgSend_transport(v12, v13, v14, v15);

  if (v16 == 2)
  {
    int v20 = 4;
  }
  else
  {
    uint64_t v21 = objc_msgSend_local(v4, v17, v18, v19);
    uint64_t v25 = objc_msgSend_transport(v21, v22, v23, v24);

    if (v25 == 3) {
      int v20 = 896;
    }
    else {
      int v20 = 0;
    }
  }
  id v26 = objc_msgSend_local(v4, v17, v18, v19);
  uint64_t v30 = objc_msgSend_address(v26, v27, v28, v29);

  *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v495 = v31;
  long long v496 = v31;
  long long v493 = v31;
  long long v494 = v31;
  long long v491 = v31;
  long long v492 = v31;
  *(_OWORD *)__str = v31;
  long long v490 = v31;
  SAToIPPortString(__str, 0x80uLL, v30);
  objc_msgSend_stringWithFormat_(NSString, v32, @"%s", v33, __str);
  id v34 = (id)objc_claimAutoreleasedReturnValue();
  if (v34)
  {
    CFDictionarySetValue(v5, @"gl-attr-local-address-key", v34);
  }
  else
  {
    uint64_t v35 = MEMORY[0x1E4F14500];
    id v36 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      sub_19DB7ADCC();
    }
  }
  int v40 = *(unsigned __int8 *)(v30 + 1);
  int v41 = v20 | 1;
  if (v40 != 2) {
    int v41 = v20;
  }
  if (v40 == 30) {
    uint64_t v42 = 2;
  }
  else {
    uint64_t v42 = v40 == 2;
  }
  if (v40 == 30) {
    int v43 = v20 | 2;
  }
  else {
    int v43 = v41;
  }
  unsigned int v482 = v43;
  CFDictionaryRef theDict = v5;
  if (objc_msgSend_isRelayStunCandidatePair(v4, v37, v38, v39))
  {
    double v47 = objc_msgSend_local(v4, v44, v45, v46);
    uint64_t v51 = objc_msgSend_transport(v47, v48, v49, v50);
  }
  else
  {
    uint64_t v51 = 1;
  }
  uint64_t v52 = objc_msgSend_local(v4, v44, v45, v46);
  unsigned int v481 = objc_msgSend_mtu(v52, v53, v54, v55);

  int ExpensiveLinkFlagsForCandidatePair = objc_msgSend__getExpensiveLinkFlagsForCandidatePair_(self, v56, (uint64_t)v4, v57);
  char v62 = objc_msgSend_local(v4, v59, v60, v61);
  uint64_t v66 = objc_msgSend_index(v62, v63, v64, v65);
  v484 = self;
  int isInterfaceConstrainedWithInterfaceIndex = objc_msgSend__isInterfaceConstrainedWithInterfaceIndex_(self, v67, v66, v68);

  if (isInterfaceConstrainedWithInterfaceIndex) {
    int v73 = ExpensiveLinkFlagsForCandidatePair | 2;
  }
  else {
    int v73 = ExpensiveLinkFlagsForCandidatePair;
  }
  if (v484->_remoteDeviceVersion >= 2)
  {
    uint64_t v74 = objc_msgSend_local(v4, v70, v71, v72);
    uint64_t v78 = objc_msgSend_index(v74, v75, v76, v77);
    int isInterfaceDelegatedWithInterfaceIndex = objc_msgSend__isInterfaceDelegatedWithInterfaceIndex_(v484, v79, v78, v80);

    if (isInterfaceDelegatedWithInterfaceIndex) {
      v73 |= 4u;
    }
  }
  uint64_t v82 = objc_msgSend_remote(v4, v70, v71, v72);
  objc_msgSend_linkFlags(v82, v83, v84, v85);

  int v89 = *(unsigned __int8 *)(v30 + 1);
  if (v89 == 2)
  {
    double v90 = objc_msgSend_local(v4, v86, v87, v88);
    int isCLAT46 = objc_msgSend_isCLAT46(v90, v91, v92, v93);

    int v89 = *(unsigned __int8 *)(v30 + 1);
  }
  else
  {
    int isCLAT46 = 0;
  }
  id v478 = v34;
  int v95 = v73;
  if (v89 == 30)
  {
    if (objc_msgSend_isNAT64(v4, v86, v87, v88)) {
      int v95 = v73 | 0x10;
    }
    else {
      int v95 = v73;
    }
  }
  if (isCLAT46) {
    int v96 = v73 | 8;
  }
  else {
    int v96 = v95;
  }
  uint64_t v97 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v86, v87, v88);
  unsigned int v472 = objc_msgSend_dataSoMaskBits(v97, v98, v99, v100);

  double v104 = objc_msgSend_local(v4, v101, v102, v103);
  uint64_t v108 = objc_msgSend_radioAccessTechnology(v104, v105, v106, v107);

  if (v108) {
    BOOL v112 = v108 == 9;
  }
  else {
    BOOL v112 = 1;
  }
  char v113 = !v112;
  char v471 = v113;
  uint64_t v114 = objc_msgSend_relayProviderType(v4, v109, v110, v111);
  v474 = objc_msgSend_relaySessionToken(v4, v115, v116, v117);
  double v476 = objc_msgSend_relaySessionKey(v4, v118, v119, v120);
  long long v124 = objc_msgSend_local(v4, v121, v122, v123);
  uint64_t v128 = objc_msgSend_index(v124, v125, v126, v127);
  long long v131 = objc_msgSend__interfaceNameForInterfaceIndex_(v484, v129, v128, v130);

  uint64_t v135 = objc_msgSend_local(v4, v132, v133, v134);
  int v139 = v96 | objc_msgSend_cellularSlicingFlags(v135, v136, v137, v138);

  long long v143 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v140, v141, v142);
  int isSlicedCellularInterfaceActive = objc_msgSend_isSlicedCellularInterfaceActive_(v143, v144, (uint64_t)v131, v145);

  if (isSlicedCellularInterfaceActive)
  {
    LOWORD(v139) = v139 | 0x80;
    long long v150 = objc_msgSend_local(v4, v147, v148, v149);
    objc_msgSend_setCellularSlicingFlags_(v150, v151, v139, v152);
  }
  long long v153 = objc_msgSend_numberWithInteger_(NSNumber, v147, v42, v149);
  long long v154 = theDict;
  if (v153)
  {
    CFDictionarySetValue(theDict, @"gl-attr-ipfamily", v153);
  }
  else
  {
    long long v155 = MEMORY[0x1E4F14500];
    id v156 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR)) {
      sub_19DB7AD44();
    }
  }
  double v159 = objc_msgSend_numberWithInteger_(NSNumber, v157, v51, v158);
  if (v159)
  {
    CFDictionarySetValue(theDict, @"gl-attr-transport", v159);
  }
  else
  {
    id v160 = MEMORY[0x1E4F14500];
    id v161 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
      sub_19DB7ACBC();
    }
  }
  double v164 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v162, v108, v163);
  if (v164)
  {
    CFDictionarySetValue(theDict, @"gl-attr-rat", v164);
  }
  else
  {
    __int16 v165 = MEMORY[0x1E4F14500];
    id v166 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR)) {
      sub_19DB7AC34();
    }
  }
  __int16 v169 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v167, (unsigned __int16)v139, v168);
  if (v169)
  {
    CFDictionarySetValue(theDict, @"gl-attr-link-flags", v169);
    uint64_t v170 = isVirtualRelayStunCandidatePair;
  }
  else
  {
    uint64_t v171 = MEMORY[0x1E4F14500];
    id v172 = MEMORY[0x1E4F14500];
    uint64_t v170 = isVirtualRelayStunCandidatePair;
    if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR)) {
      sub_19DB7ABAC();
    }
  }
  id v173 = NSNumber;
  uint64_t v177 = objc_msgSend_delegatedLinkID(v4, v174, v175, v176);
  long long v180 = objc_msgSend_numberWithChar_(v173, v178, v177, v179);
  if (v180)
  {
    CFDictionarySetValue(theDict, @"gl-attr-delegated-link-id", v180);
  }
  else
  {
    uint64_t v181 = MEMORY[0x1E4F14500];
    id v182 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR)) {
      sub_19DB7AB24();
    }
  }
  long long v183 = NSNumber;
  uint64_t v187 = objc_msgSend_relayLinkID(v4, v184, v185, v186);
  long long v190 = objc_msgSend_numberWithUnsignedShort_(v183, v188, v187, v189);
  if (v190)
  {
    CFDictionarySetValue(theDict, @"gl-attr-local-relay-link-id", v190);
  }
  else
  {
    long long v191 = MEMORY[0x1E4F14500];
    id v192 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR)) {
      sub_19DB7AA9C();
    }
  }
  long long v193 = NSNumber;
  uint64_t v197 = objc_msgSend_remoteRelayLinkID(v4, v194, v195, v196);
  long long v200 = objc_msgSend_numberWithUnsignedShort_(v193, v198, v197, v199);
  if (v200)
  {
    CFDictionarySetValue(theDict, @"gl-attr-remote-relay-link-id", v200);
  }
  else
  {
    long long v201 = MEMORY[0x1E4F14500];
    id v202 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR)) {
      sub_19DB7AA14();
    }
  }
  if (v108 && v108 != 9)
  {
    uint64_t v205 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v203, v472, v204);
    if (v205)
    {
      CFDictionarySetValue(theDict, @"gl-attr-data-so-mask", v205);
    }
    else
    {
      long long v206 = MEMORY[0x1E4F14500];
      id v207 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR)) {
        sub_19DB7A98C();
      }
    }
  }
  long long v208 = objc_msgSend_numberWithInteger_(NSNumber, v203, v114, v204);
  if (v208)
  {
    CFDictionarySetValue(theDict, @"qr-server-provider", v208);
  }
  else
  {
    long long v209 = MEMORY[0x1E4F14500];
    id v210 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A904();
    }
  }
  id v211 = v474;
  if (v211)
  {
    CFDictionarySetValue(theDict, @"gl-attr-relay-sessiontoken", v211);
  }
  else
  {
    long long v212 = MEMORY[0x1E4F14500];
    id v213 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A87C();
    }
  }
  id v214 = v476;
  if (v214)
  {
    CFDictionarySetValue(theDict, @"gl-attr-relay-sessionkey", v214);
  }
  else
  {
    id v215 = MEMORY[0x1E4F14500];
    id v216 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A7F4();
    }
  }
  long long v220 = objc_msgSend_sessionID(v4, v217, v218, v219);
  if (v220)
  {
    CFDictionarySetValue(theDict, @"gl-attr-relay-sessionid", v220);
  }
  else
  {
    long long v221 = MEMORY[0x1E4F14500];
    id v222 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A76C();
    }
  }
  long long v223 = NSNumber;
  uint64_t IsDegraded = objc_msgSend_serverIsDegraded(v4, v224, v225, v226);
  long long v230 = objc_msgSend_numberWithBool_(v223, v228, IsDegraded, v229);
  if (v230)
  {
    CFDictionarySetValue(theDict, @"gl-attr-relay-serverdegraded", v230);
  }
  else
  {
    long long v231 = MEMORY[0x1E4F14500];
    id v232 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A6E4();
    }
  }
  double v235 = objc_msgSend_numberWithBool_(NSNumber, v233, v170, v234);
  if (v235)
  {
    CFDictionarySetValue(theDict, @"gl-attr-is-virtual-link", v235);
  }
  else
  {
    unsigned int v236 = MEMORY[0x1E4F14500];
    id v237 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A65C();
    }
  }
  id v238 = v131;
  if (v238)
  {
    CFDictionarySetValue(theDict, @"gl-attr-interface-name", v238);
    long long v239 = v484;
  }
  else
  {
    long long v240 = MEMORY[0x1E4F14500];
    id v241 = MEMORY[0x1E4F14500];
    long long v239 = v484;
    if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A5D4();
    }
  }
  unsigned int v242 = v482;

  if (v239->_QUICForQREnabled)
  {
    long long v246 = objc_msgSend_GlobalLink(IDSFoundationLog, v243, v244, v245);
    if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
    {
      if (v170) {
        uint64_t v170 = @"YES";
      }
      else {
        uint64_t v170 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      *(void *)uint64_t v486 = v4;
      *(_WORD *)&v486[8] = 2112;
      *(void *)&v486[10] = v170;
      LOBYTE(v170) = isVirtualRelayStunCandidatePair;
      __int16 v487 = 1024;
      int v488 = objc_msgSend_delegatedLinkID(v4, v247, v248, v249);
      _os_log_impl(&dword_19D9BE000, v246, OS_LOG_TYPE_DEFAULT, "Setting up child connection for candidatepair %@ isVirtualRelayLink %@ delegatedLinkID %d", buf, 0x1Cu);
    }

    if ((v170 & 1) != 0 || v239->_disableDirectDatapath) {
      unint64_t clientUniquePID = 0;
    }
    else {
      unint64_t clientUniquePID = v239->_clientUniquePID;
    }
    id v475 = v211;
    id v477 = v214;
    id v473 = v238;
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v250, v251, v252))
    {
      unsigned int shouldUseVRTLE = objc_msgSend__shouldUseVRTLE(v239, v254, v255, v256);
    }
    else if (objc_msgSend_isRelayStunCandidatePair(v4, v254, v255, v256))
    {
      unsigned int shouldUseVRTLE = objc_msgSend__shouldUseQRTLE(v239, v262, v263, v264);
    }
    else
    {
      unsigned int shouldUseVRTLE = objc_msgSend__shouldUseP2PTLE(v239, v262, v263, v264);
    }
    unsigned int v470 = shouldUseVRTLE;
    nwLinuint64_t k = v239->_nwLink;
    uint64_t v266 = objc_msgSend_local(v4, v258, v259, v260);
    uint64_t v270 = objc_msgSend_address(v266, v267, v268, v269);
    uint64_t v274 = objc_msgSend_remote(v4, v271, v272, v273);
    uint64_t v278 = objc_msgSend_external(v274, v275, v276, v277);
    double v282 = objc_msgSend_sessionID(v4, v279, v280, v281);
    uint64_t isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v4, v283, v284, v285);
    long long v290 = objc_msgSend_local(v4, v287, v288, v289);
    LOBYTE(v467) = objc_msgSend_isCellularStunCandidate(v290, v291, v292, v293);
    uint64_t v480 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v294, v270, v295, v278, clientUniquePID, v282, 0, isRelayStunCandidatePair, v467);

    if ((objc_msgSend_isRelayStunCandidatePair(v4, v296, v297, v298) & 1) != 0
      || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v299, v300, v301))
    {
      uint64_t v302 = v484->_nwLink;
      double v303 = objc_msgSend_local(v4, v299, v300, v301);
      uint64_t v307 = objc_msgSend_address(v303, v304, v305, v306);
      double v311 = objc_msgSend_remote(v4, v308, v309, v310);
      uint64_t v315 = objc_msgSend_external(v311, v312, v313, v314);
      long long v319 = objc_msgSend_sessionID(v4, v316, v317, v318);
      double v323 = objc_msgSend_local(v4, v320, v321, v322);
      LOBYTE(v468) = objc_msgSend_isCellularStunCandidate(v323, v324, v325, v326);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v302, v327, v307, v328, v315, clientUniquePID, v319, 7, 1, v468);
    }
    else
    {
      __int16 v329 = v484->_nwLink;
      double v303 = objc_msgSend_local(v4, v299, v300, v301);
      uint64_t v333 = objc_msgSend_address(v303, v330, v331, v332);
      double v311 = objc_msgSend_remote(v4, v334, v335, v336);
      uint64_t v340 = objc_msgSend_external(v311, v337, v338, v339);
      long long v319 = objc_msgSend_sessionID(v4, v341, v342, v343);
      double v323 = objc_msgSend_local(v4, v344, v345, v346);
      LOBYTE(v468) = objc_msgSend_isCellularStunCandidate(v323, v347, v348, v349);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v329, v350, v333, v351, v340, clientUniquePID, v319, 9, 0, v468);
    BOOL v352 = };

    long long v239 = v484;
    id v238 = v473;
    if (objc_msgSend_isRelayStunCandidatePair(v4, v353, v354, v355))
    {
      double v359 = v484->_nwLink;
      __int16 v360 = objc_msgSend_local(v4, v356, v357, v358);
      uint64_t v364 = objc_msgSend_address(v360, v361, v362, v363);
      double v368 = objc_msgSend_remote(v4, v365, v366, v367);
      uint64_t v372 = objc_msgSend_external(v368, v369, v370, v371);
      double v376 = objc_msgSend_sessionID(v4, v373, v374, v375);
      LOBYTE(v469) = v471;
      id v379 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v359, v377, v364, v378, v372, 0, v376, 5, 1, v469);

      long long v383 = objc_msgSend_GlobalLink(IDSFoundationLog, v380, v381, v382);
      if (os_log_type_enabled(v383, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v387 = objc_msgSend_protocolStackDescription(v379, v384, v385, v386);
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v486 = v387;
        _os_log_impl(&dword_19D9BE000, v383, OS_LOG_TYPE_DEFAULT, "relay control connection has protocol stack: %@", buf, 0xCu);
      }
      uint64_t v391 = objc_msgSend_protocolStackDescription(v379, v388, v389, v390);
      if (v391)
      {
        CFDictionarySetValue(theDict, @"gl-relay-protocol-stack", v391);
      }
      else
      {
        double v392 = MEMORY[0x1E4F14500];
        id v393 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(v392, OS_LOG_TYPE_ERROR)) {
          sub_19DB7A54C();
        }
      }
    }
    if (v352) {
      unsigned int v394 = v470;
    }
    else {
      unsigned int v394 = 0;
    }
    char isP2P = objc_msgSend_isP2P(v4, v356, v357, v358);
    long long v154 = theDict;
    id v211 = v475;
    if (v394 == 1)
    {
      v399 = (void *)v480;
      if ((isP2P & 1) != 0 || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v396, v397, v398)) {
        v481 -= GLUtilGetLinkOverhead(8u);
      }
    }
    else
    {
      v399 = (void *)v480;
    }
    uint64_t v402 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v396, v397, v398);
    if (v399)
    {
      uint64_t v404 = GLUtilConnectionDictionaryForNWConnectionInfo(v399, 1);
      objc_msgSend_setObject_forKeyedSubscript_(v402, v405, (uint64_t)v404, v406, @"udp");
    }
    if (v352)
    {
      v407 = GLUtilConnectionDictionaryForNWConnectionInfo(v352, v470);
      objc_msgSend_setObject_forKeyedSubscript_(v402, v408, (uint64_t)v407, v409, @"qpod");
    }
    long long v410 = objc_msgSend_GlobalLink(IDSFoundationLog, v400, v401, v403);
    if (os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT))
    {
      int v414 = objc_msgSend_linkID(v4, v411, v412, v413);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)uint64_t v486 = v414;
      *(_WORD *)&v486[4] = 2112;
      *(void *)&v486[6] = v402;
      _os_log_impl(&dword_19D9BE000, v410, OS_LOG_TYPE_DEFAULT, "connections for link %d: %@", buf, 0x12u);
    }

    uint64_t v415 = NSNumber;
    uint64_t v419 = objc_msgSend_channelNumber(v4, v416, v417, v418);
    double v422 = objc_msgSend_numberWithUnsignedShort_(v415, v420, v419, v421);
    if (v422)
    {
      CFDictionarySetValue(theDict, @"gl-attr-linkchannelnumber", v422);
    }
    else
    {
      v423 = MEMORY[0x1E4F14500];
      id v424 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v423, OS_LOG_TYPE_ERROR)) {
        sub_19DB7A4C4();
      }
    }
    v428 = objc_msgSend_hbhEncKey(v4, v425, v426, v427);
    if (v428)
    {
      CFDictionarySetValue(theDict, @"gl-attr-hbhenckey", v428);
    }
    else
    {
      uint64_t v429 = MEMORY[0x1E4F14500];
      id v430 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v429, OS_LOG_TYPE_ERROR)) {
        sub_19DB7A43C();
      }
    }
    double v434 = objc_msgSend_hbhDecKey(v4, v431, v432, v433);
    if (v434)
    {
      CFDictionarySetValue(theDict, @"gl-attr-hbhdeckey", v434);
    }
    else
    {
      long long v435 = MEMORY[0x1E4F14500];
      id v436 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v435, OS_LOG_TYPE_ERROR)) {
        sub_19DB7A3B4();
      }
    }
    id v437 = v402;
    if (v437)
    {
      CFDictionarySetValue(theDict, @"gl-attr-connections", v437);
      v438 = (void *)v480;
    }
    else
    {
      uint64_t v439 = MEMORY[0x1E4F14500];
      id v440 = MEMORY[0x1E4F14500];
      BOOL v441 = os_log_type_enabled(v439, OS_LOG_TYPE_ERROR);
      v438 = (void *)v480;
      if (v441) {
        sub_19DB7A32C();
      }
    }
    unsigned int v242 = v482;
    if (v394)
    {
      unsigned int v242 = v482 | 8;
      int v261 = 16;
    }
    else
    {
      int v261 = 32;
    }
    id v214 = v477;
  }
  else
  {
    int v261 = 32;
  }
  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v4, v243, v244, v245) & 1) != 0
    || objc_msgSend_isRelayStunCandidatePair(v4, v442, v443, v444))
  {
    v242 |= v261;
  }
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v442, v443, v444)) {
    v242 |= 0x40u;
  }
  v445 = v239->_qrExperiments;
  if (v445)
  {
    CFDictionarySetValue(v154, @"gl-attr-qr-experiments", v445);
  }
  else
  {
    v446 = MEMORY[0x1E4F14500];
    id v447 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v446, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A2A4();
    }
  }
  v450 = objc_msgSend_numberWithInt_(NSNumber, v448, v481, v449);
  if (v450)
  {
    CFDictionarySetValue(v154, @"gl-attr-mtu", v450);
  }
  else
  {
    double v451 = MEMORY[0x1E4F14500];
    id v452 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v451, OS_LOG_TYPE_ERROR)) {
      sub_19DB7A21C();
    }
  }
  v453 = NSNumber;
  uint64_t LinkOverhead = GLUtilGetLinkOverhead(v242);
  double v457 = objc_msgSend_numberWithUnsignedShort_(v453, v455, LinkOverhead, v456);
  if (v457)
  {
    CFDictionarySetValue(v154, @"gl-attr-constant-overhead", v457);
    BOOL v458 = v478;
  }
  else
  {
    CFDictionaryRef v459 = MEMORY[0x1E4F14500];
    id v460 = MEMORY[0x1E4F14500];
    BOOL v461 = os_log_type_enabled(v459, OS_LOG_TYPE_ERROR);
    BOOL v458 = v478;
    if (v461) {
      sub_19DB7A194();
    }
  }
  v465 = objc_msgSend_copy(v154, v462, v463, v464);

  return v465;
}

- (id)_getRemoteAttribute:(id)a3
{
  uint64_t v202 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  char isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v4, v6, v7, v8);
  uint64_t v13 = objc_msgSend_remote(v4, v10, v11, v12);
  uint64_t v17 = objc_msgSend_transport(v13, v14, v15, v16);

  if (v17 == 2)
  {
    int v21 = 4;
  }
  else
  {
    char v22 = objc_msgSend_remote(v4, v18, v19, v20);
    uint64_t v26 = objc_msgSend_transport(v22, v23, v24, v25);

    if (v26 == 3) {
      int v21 = 896;
    }
    else {
      int v21 = 0;
    }
  }
  uint64_t v27 = objc_msgSend_remote(v4, v18, v19, v20);
  uint64_t v31 = objc_msgSend_external(v27, v28, v29, v30);

  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v200 = v32;
  long long v201 = v32;
  long long v198 = v32;
  long long v199 = v32;
  long long v196 = v32;
  long long v197 = v32;
  *(_OWORD *)__str = v32;
  long long v195 = v32;
  SAToIPPortString(__str, 0x80uLL, v31);
  objc_msgSend_stringWithFormat_(NSString, v33, @"%s", v34, __str);
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  if (v35)
  {
    CFDictionarySetValue(v5, @"gl-attr-remote-address-key", v35);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7B20C();
  }

  int v39 = *(unsigned __int8 *)(v31 + 1);
  int v40 = v21 | 1;
  if (v39 != 2) {
    int v40 = v21;
  }
  BOOL v41 = v39 == 30;
  if (v39 == 30) {
    uint64_t v42 = 2;
  }
  else {
    uint64_t v42 = v39 == 2;
  }
  uint64_t v191 = v42;
  if (v41) {
    int v43 = v21 | 2;
  }
  else {
    int v43 = v40;
  }
  if (objc_msgSend_isRelayStunCandidatePair(v4, v36, v37, v38))
  {
    double v47 = objc_msgSend_local(v4, v44, v45, v46);
    uint64_t v192 = objc_msgSend_transport(v47, v48, v49, v50);
  }
  else
  {
    uint64_t v192 = 1;
  }
  uint64_t v51 = objc_msgSend_remote(v4, v44, v45, v46);
  unsigned int v193 = objc_msgSend_mtu(v51, v52, v53, v54);

  if (self->_QUICForQREnabled)
  {
    if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v55, v56, v57))
    {
      int shouldUseVRTLE = objc_msgSend__shouldUseVRTLE(self, v58, v59, v60);
    }
    else if (objc_msgSend_isRelayStunCandidatePair(v4, v58, v59, v60))
    {
      int shouldUseVRTLE = objc_msgSend__shouldUseQRTLE(self, v66, v67, v68);
    }
    else
    {
      int shouldUseVRTLE = objc_msgSend__shouldUseP2PTLE(self, v66, v67, v68);
    }
    int v187 = shouldUseVRTLE;
    char v188 = isVirtualRelayStunCandidatePair;
    id v190 = v35;
    double v189 = self;
    if ((objc_msgSend_isRelayStunCandidatePair(v4, v62, v63, v64) & 1) != 0
      || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v69, v70, v71))
    {
      nwLinuint64_t k = self->_nwLink;
      int v73 = objc_msgSend_local(v4, v69, v70, v71);
      uint64_t v77 = objc_msgSend_address(v73, v74, v75, v76);
      uint64_t v81 = objc_msgSend_remote(v4, v78, v79, v80);
      uint64_t v85 = objc_msgSend_external(v81, v82, v83, v84);
      int v89 = objc_msgSend_sessionID(v4, v86, v87, v88);
      double v93 = objc_msgSend_local(v4, v90, v91, v92);
      LOBYTE(v186) = objc_msgSend_isCellularStunCandidate(v93, v94, v95, v96);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v97, v77, v98, v85, 0, v89, 7, 1, v186);
    }
    else
    {
      uint64_t v99 = self->_nwLink;
      int v73 = objc_msgSend_local(v4, v69, v70, v71);
      uint64_t v103 = objc_msgSend_address(v73, v100, v101, v102);
      uint64_t v81 = objc_msgSend_remote(v4, v104, v105, v106);
      uint64_t v110 = objc_msgSend_external(v81, v107, v108, v109);
      int v89 = objc_msgSend_sessionID(v4, v111, v112, v113);
      double v93 = objc_msgSend_local(v4, v114, v115, v116);
      LOBYTE(v186) = objc_msgSend_isCellularStunCandidate(v93, v117, v118, v119);
      objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(v99, v120, v103, v121, v110, 0, v89, 9, 0, v186);
    uint64_t v122 = };

    char isP2P = objc_msgSend_isP2P(v4, v123, v124, v125);
    if (v122) {
      int v65 = v187;
    }
    else {
      int v65 = 0;
    }
    if (v65 == 1)
    {
      self = v189;
      char isVirtualRelayStunCandidatePair = v188;
      if ((isP2P & 1) != 0 || objc_msgSend_isVirtualRelayStunCandidatePair(v4, v127, v128, v129)) {
        v193 -= GLUtilGetLinkOverhead(8u);
      }
    }
    else
    {
      self = v189;
      char isVirtualRelayStunCandidatePair = v188;
    }

    id v35 = v190;
  }
  else
  {
    int v65 = 0;
  }
  double v130 = objc_msgSend_remote(v4, v55, v56, v57);
  unsigned __int16 v134 = objc_msgSend_linkFlags(v130, v131, v132, v133);

  if ((isVirtualRelayStunCandidatePair & 1) == 0 && self->_remoteDeviceVersion < 2) {
    v134 &= ~4u;
  }
  double v138 = objc_msgSend_remote(v4, v135, v136, v137);
  uint64_t v142 = objc_msgSend_dataSoMask(v138, v139, v140, v141);

  __int16 v146 = objc_msgSend_remote(v4, v143, v144, v145);
  uint64_t v150 = objc_msgSend_radioAccessTechnology(v146, v147, v148, v149);

  if (v65) {
    int v154 = v43 | 8;
  }
  else {
    int v154 = v43;
  }
  if ((objc_msgSend_isVirtualRelayStunCandidatePair(v4, v151, v152, v153) & 1) != 0
    || objc_msgSend_isRelayStunCandidatePair(v4, v155, v156, v157))
  {
    if (v65) {
      int v158 = 16;
    }
    else {
      int v158 = 32;
    }
    v154 |= v158;
  }
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v155, v156, v157)) {
    unsigned int v161 = v154 | 0x40;
  }
  else {
    unsigned int v161 = v154;
  }
  char v162 = objc_msgSend_numberWithInteger_(NSNumber, v159, v191, v160);
  if (v162)
  {
    CFDictionarySetValue(v5, @"gl-attr-ipfamily", v162);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7B184();
  }

  __int16 v165 = objc_msgSend_numberWithInteger_(NSNumber, v163, v192, v164);
  if (v165)
  {
    CFDictionarySetValue(v5, @"gl-attr-transport", v165);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7B0FC();
  }

  double v168 = objc_msgSend_numberWithInt_(NSNumber, v166, v193, v167);
  if (v168)
  {
    CFDictionarySetValue(v5, @"gl-attr-mtu", v168);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7B074();
  }

  __int16 v169 = NSNumber;
  uint64_t LinkOverhead = GLUtilGetLinkOverhead(v161);
  id v173 = objc_msgSend_numberWithUnsignedShort_(v169, v171, LinkOverhead, v172);
  if (v173)
  {
    CFDictionarySetValue(v5, @"gl-attr-constant-overhead", v173);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7AFEC();
  }

  double v176 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v174, v150, v175);
  if (v176)
  {
    CFDictionarySetValue(v5, @"gl-attr-rat", v176);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7AF64();
  }

  double v179 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v177, v134, v178);
  if (v179)
  {
    CFDictionarySetValue(v5, @"gl-attr-link-flags", v179);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7AEDC();
  }

  if (v150 && v150 != 9)
  {
    long long v183 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v180, v142, v182);
    if (v183)
    {
      CFDictionarySetValue(v5, @"gl-attr-data-so-mask", v183);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7AE54();
    }
  }
  long long v184 = objc_msgSend_copy(v5, v180, v181, v182);

  return v184;
}

- (void)sendConnectedLinkInfoToAVC
{
  id v4 = self;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  double v5 = objc_msgSend_copy(self->_connectedLinkIDs, a2, v2, v3);
  id v9 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v91 = v5;
    _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "sendConnectedLinkInfoToAVC: current connected links: %@", buf, 0xCu);
  }

  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  obuint64_t j = v5;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v86, v11, v98, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v84 = *(void *)v87;
    p_delegate = (id *)&v4->_delegate;
    do
    {
      uint64_t v15 = 0;
      uint64_t v82 = v13;
      do
      {
        if (*(void *)v87 != v84) {
          objc_enumerationMutation(obj);
        }
        double v16 = *(void **)(*((void *)&v86 + 1) + 8 * v15);
        CFDictionaryRef linkIDToCandidatePairs = (const __CFDictionary *)v4->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs) {
          BOOL v18 = v16 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18) {
          Value = 0;
        }
        else {
          Value = (void *)CFDictionaryGetValue(linkIDToCandidatePairs, *(const void **)(*((void *)&v86 + 1) + 8 * v15));
        }
        id v20 = Value;
        char isVirtualRelayStunCandidatePair = objc_msgSend_isVirtualRelayStunCandidatePair(v20, v21, v22, v23);
        uint64_t v27 = objc_msgSend__getLocalAttribute_(v4, v25, (uint64_t)v20, v26);
        uint64_t v28 = v4;
        uint64_t v31 = objc_msgSend__getRemoteAttribute_(v4, v29, (uint64_t)v20, v30);
        unsigned int v85 = objc_msgSend_charValue(v16, v32, v33, v34);
        id v35 = p_delegate;
        id WeakRetained = objc_loadWeakRetained(p_delegate);
        char v37 = objc_opt_respondsToSelector();

        if (v37)
        {
          BOOL v41 = @"VR";
          if ((isVirtualRelayStunCandidatePair & 1) == 0)
          {
            int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v20, v38, v39, v40);
            BOOL v41 = @"P2P";
            if (isRelayStunCandidatePair) {
              BOOL v41 = @"RLY";
            }
          }
          int v43 = v41;
          double v47 = objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            idsSessionID = v28->_idsSessionID;
            uint64_t v52 = objc_msgSend_sessionID(v20, v48, v49, v50);
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)uint64_t v91 = v85;
            *(_WORD *)&v91[4] = 2112;
            *(void *)&v91[6] = v43;
            __int16 v92 = 2112;
            double v93 = idsSessionID;
            __int16 v94 = 2112;
            uint64_t v95 = v52;
            __int16 v96 = 2112;
            id v97 = v20;
            _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "Send link cached connected (%d) %@ for IDSSessionID: %@ QRSessionID: %@ and %@.", buf, 0x30u);
          }
          uint64_t v55 = objc_msgSend__translateLinkTransportTypeWhenH2Enabled_(v28, v53, (uint64_t)v27, v54);

          p_delegate = v35;
          id v4 = v28;
          id v56 = objc_loadWeakRetained(p_delegate);
          double v60 = objc_msgSend_linkUUID(v20, v57, v58, v59);
          objc_msgSend_link_didConnectUnderlyingLink_linkUUID_localAttributes_remoteAttributes_(v56, v61, (uint64_t)v4, v62, v85, v60, v55, v31);

          uint64_t v27 = (void *)v55;
          uint64_t v13 = v82;
        }
        else
        {
          p_delegate = v35;
          id v4 = v28;
        }
        id v63 = objc_loadWeakRetained(p_delegate);
        char v64 = objc_opt_respondsToSelector();

        if (v64)
        {
          double v68 = objc_msgSend_GlobalLink(IDSFoundationLog, v65, v66, v67);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            double v72 = objc_msgSend_participantIDMap(v20, v69, v70, v71);
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)uint64_t v91 = v85;
            *(_WORD *)&v91[4] = 2112;
            *(void *)&v91[6] = v72;
            _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "Send updated participantID cached map for link: %d, map: %@", buf, 0x12u);
          }
          id v73 = objc_loadWeakRetained(p_delegate);
          uint64_t v77 = objc_msgSend_participantIDMap(v20, v74, v75, v76);
          objc_msgSend_link_didReceiveMappedParticipantsDict_forLinkID_(v73, v78, (uint64_t)v4, v79, v77, v85);
        }
        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v80, (uint64_t)&v86, v81, v98, 16);
    }
    while (v13);
  }
}

- (void)reportLinkEvent:(id)a3 linkID:(unsigned __int8)a4
{
  uint64_t v4 = a4;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  uint64_t v10 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v8, v4, v9);
  uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(linkIDToCandidatePairs, v11, (uint64_t)v10, v12);

  uint64_t v17 = objc_msgSend_GlobalLink(IDSFoundationLog, v14, v15, v16);
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v18)
    {
      int v25 = 138412546;
      *(void *)double v26 = v6;
      *(_WORD *)&v26[8] = 2112;
      *(void *)&v26[10] = v13;
      _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "reportLinkEvent: eventName: %@, candidate pair: %@", (uint8_t *)&v25, 0x16u);
    }

    uint64_t v17 = objc_msgSend_linkMetrics(v13, v19, v20, v21);
    objc_msgSend_event_(v17, v22, (uint64_t)v6, v23);
  }
  else if (v18)
  {
    uint64_t v24 = self->_linkIDToCandidatePairs;
    int v25 = 67109378;
    *(_DWORD *)double v26 = v4;
    *(_WORD *)&v26[4] = 2112;
    *(void *)&v26[6] = v24;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "reportLinkEvent: no candidate pair found for linkID %d; candidate pairs: %@",
      (uint8_t *)&v25,
      0x12u);
  }
}

- (void)setPacketNotificationFilter:(char)a3 uniqueTag:(unsigned int)a4 isEnabled:(BOOL)a5
{
  uint64_t v6 = a3;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  if (self->_state < 5 || !a5)
  {
    if (!self->_linkIDToCandidatePairs) {
      goto LABEL_22;
    }
    BOOL v9 = a5;
    uint64_t v10 = *(void *)&a4;
    double v12 = objc_msgSend_numberWithChar_(NSNumber, a2, a3, v5);
    if (!v12) {
      goto LABEL_22;
    }
    CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
    uint64_t v15 = objc_msgSend_numberWithChar_(NSNumber, v11, v6, v13);
    double v16 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v15);

    if (v16)
    {
      if ((unint64_t)objc_msgSend_state(v16, v17, v18, v19) < 5)
      {
        uint64_t v27 = objc_msgSend_local(v16, v20, v21, v22);
        uint64_t v31 = (unsigned char *)objc_msgSend_address(v27, v28, v29, v30);

        id v35 = objc_msgSend_remote(v16, v32, v33, v34);
        uint64_t v39 = objc_msgSend_external(v35, v36, v37, v38);

        if (v9)
        {
          uint64_t v115 = (_OWORD *)v39;
          self->_basebandPacketChannelNumber = objc_msgSend_channelNumber(v16, v40, v41, v42);
          self->_basebandPacketLinkID = v6;
          if (self->_clientType == 5) {
            char v46 = 1;
          }
          else {
            char v46 = 2;
          }
          unsigned __int8 v113 = v46;
          double v47 = objc_msgSend_local(v16, v43, v44, v45);
          int v51 = objc_msgSend_index(v47, v48, v49, v50);

          long long v122 = 0u;
          long long v123 = 0u;
          long long v120 = 0u;
          long long v121 = 0u;
          uint64_t v52 = self->_interfaceAddressArray;
          uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v120, v54, v133, 16);
          if (v57)
          {
            uint64_t v59 = *(void *)v121;
LABEL_37:
            uint64_t v60 = 0;
            while (1)
            {
              if (*(void *)v121 != v59) {
                objc_enumerationMutation(v52);
              }
              double v61 = *(void **)(*((void *)&v120 + 1) + 8 * v60);
              if (objc_msgSend_index(v61, v55, v56, v58) == v51) {
                break;
              }
              if (v57 == ++v60)
              {
                uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v55, (uint64_t)&v120, v58, v133, 16);
                if (v57) {
                  goto LABEL_37;
                }
                goto LABEL_43;
              }
            }
            objc_msgSend_name(v61, v55, v56, v58);
            id v114 = (id)objc_claimAutoreleasedReturnValue();
            int v70 = objc_msgSend_delegatedIndex(v61, v67, v68, v69);

            if (!v70)
            {
              double v62 = v114;
              goto LABEL_66;
            }
            long long v118 = 0u;
            long long v119 = 0u;
            long long v116 = 0u;
            long long v117 = 0u;
            uint64_t v52 = self->_interfaceAddressArray;
            uint64_t v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v73, (uint64_t)&v116, v74, v132, 16);
            if (v77)
            {
              uint64_t v79 = *(void *)v117;
LABEL_48:
              uint64_t v80 = 0;
              while (1)
              {
                if (*(void *)v117 != v79) {
                  objc_enumerationMutation(v52);
                }
                double v81 = *(void **)(*((void *)&v116 + 1) + 8 * v80);
                if (objc_msgSend_index(v81, v75, v76, v78) == v70) {
                  break;
                }
                if (v77 == ++v80)
                {
                  uint64_t v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v75, (uint64_t)&v116, v78, v132, 16);
                  if (v77) {
                    goto LABEL_48;
                  }
                  goto LABEL_63;
                }
              }
              if (!objc_msgSend_isCellular(v81, v75, v76, v78)) {
                goto LABEL_63;
              }
              uint64_t v82 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
              {
                long long v86 = objc_msgSend_name(v81, v83, v84, v85);
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v114;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v86;
                _os_log_impl(&dword_19D9BE000, v82, OS_LOG_TYPE_DEFAULT, "setPacketNotificationFilter: overriding source interface [%@] with [%@]", buf, 0x16u);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  objc_msgSend_name(v81, v87, v88, v89);
                  v112 = id v111 = v114;
                  _IDSLogTransport(@"GL", @"IDS", @"setPacketNotificationFilter: overriding source interface [%@] with [%@]");

                  if (_IDSShouldLog())
                  {
                    objc_msgSend_name(v81, v87, v88, v89, v114, v112);
                    v112 = id v111 = v114;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"setPacketNotificationFilter: overriding source interface [%@] with [%@]");
                  }
                }
              }
              double v62 = objc_msgSend_name(v81, v87, v88, v89, v111, v112);

              double v93 = objc_msgSend_address(v81, v90, v91, v92);
              uint64_t v31 = (unsigned char *)objc_msgSend_sa(v93, v94, v95, v96);
            }
            else
            {
LABEL_63:
              double v62 = v114;
            }
          }
          else
          {
LABEL_43:
            id v114 = 0;
            double v62 = 0;
          }

LABEL_66:
          *(void *)&long long v97 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v97 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v130 = v97;
          long long v131 = v97;
          long long v128 = v97;
          long long v129 = v97;
          long long v126 = v97;
          long long v127 = v97;
          *(_OWORD *)buf = v97;
          *(_OWORD *)&uint8_t buf[16] = v97;
          v124[6] = v97;
          v124[7] = v97;
          v124[4] = v97;
          v124[5] = v97;
          v124[2] = v97;
          v124[3] = v97;
          v124[0] = v97;
          v124[1] = v97;
          if (self->_QUICForQREnabled)
          {
            nwLinuint64_t k = self->_nwLink;
            uint64_t v99 = objc_msgSend_sessionID(v16, v71, v72, -3.72066208e-103);
            uint64_t isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v16, v100, v101, v102);
            isQRConnectiouint64_t n = objc_msgSend_getEffectiveSourceAddress_fromSourceAddress_effectiveDestinationAddress_fromDestinationAddress_sessionID_isQRConnection_(nwLink, v104, (uint64_t)buf, v105, v31, v124, v115, v99, isRelayStunCandidatePair);

            if (isQRConnection) {
              uint64_t v31 = buf;
            }
            double v107 = v115;
            if (isQRConnection) {
              double v107 = v124;
            }
            uint64_t v115 = v107;
          }
          uint64_t v108 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v71, v72, *(double *)&v97);
          objc_msgSend_setPacketNotificationFilter_remote_uniqueTag_callType_ifname_(v108, v109, (uint64_t)v31, v110, v115, v10, v113, v62);
        }
        else
        {
          id v63 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v40, v41, v42);
          objc_msgSend_removePacketNotificationFilter(v63, v64, v65, v66);

          self->_basebandPacketChannelNumber = 0;
          self->_basebandPacketLinkID = 0;
        }
      }
      else
      {
        double v23 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v6;
          _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "candidate pair for linkID:%d has been already disconnected.", buf, 8u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"candidate pair for linkID:%d has been already disconnected.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"candidate pair for linkID:%d has been already disconnected.");
            }
          }
        }
      }
    }
    else
    {
LABEL_22:
      double v26 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for linkID:%d.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for linkID:%d.");
          }
        }
      }
      double v16 = 0;
    }
  }
  else
  {
    uint64_t v24 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "GL link already disconnected - not setting packet notification filter for link %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"GL link already disconnected - not setting packet notification filter for link %d");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"GL link already disconnected - not setting packet notification filter for link %d");
      }
    }
  }
}

- (void)dropIPPackets:(char)a3 payloadArray:(id)a4
{
  uint64_t v4 = a3;
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  if (!self->_linkIDToCandidatePairs) {
    goto LABEL_6;
  }
  uint64_t v10 = objc_msgSend_numberWithChar_(NSNumber, v6, v4, v8);
  if (!v10) {
    goto LABEL_6;
  }
  CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  double v13 = objc_msgSend_numberWithChar_(NSNumber, v9, v4, v11);
  uint64_t v14 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v13);

  if (v14)
  {
    if (objc_msgSend_isSharedQRSession(v14, v15, v16, v17)) {
      unsigned __int8 v107 = objc_msgSend_channelNumber(v14, v18, v19, v20);
    }
    else {
      unsigned __int8 v107 = 0;
    }
    double v22 = objc_msgSend_local(v14, v18, v19, v20);
    double v26 = (unsigned char *)objc_msgSend_address(v22, v23, v24, v25);

    double v30 = objc_msgSend_remote(v14, v27, v28, v29);
    uint64_t v109 = objc_msgSend_external(v30, v31, v32, v33);

    uint64_t v37 = objc_msgSend_local(v14, v34, v35, v36);
    int v41 = objc_msgSend_index(v37, v38, v39, v40);

    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    double v42 = self->_interfaceAddressArray;
    uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v114, v44, v127, 16);
    if (v47)
    {
      uint64_t v49 = *(void *)v115;
LABEL_15:
      uint64_t v50 = 0;
      while (1)
      {
        if (*(void *)v115 != v49) {
          objc_enumerationMutation(v42);
        }
        int v51 = *(void **)(*((void *)&v114 + 1) + 8 * v50);
        if (objc_msgSend_index(v51, v45, v46, v48) == v41) {
          break;
        }
        if (v47 == ++v50)
        {
          uint64_t v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v45, (uint64_t)&v114, v48, v127, 16);
          if (v47) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }
      }
      objc_msgSend_name(v51, v45, v46, v48);
      id v108 = (id)objc_claimAutoreleasedReturnValue();
      int v56 = objc_msgSend_delegatedIndex(v51, v53, v54, v55);

      if (!v56)
      {
        uint64_t v52 = v108;
        goto LABEL_43;
      }
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      double v42 = self->_interfaceAddressArray;
      uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v59, (uint64_t)&v110, v60, v126, 16);
      if (v63)
      {
        uint64_t v65 = *(void *)v111;
LABEL_25:
        uint64_t v66 = 0;
        while (1)
        {
          if (*(void *)v111 != v65) {
            objc_enumerationMutation(v42);
          }
          double v67 = *(void **)(*((void *)&v110 + 1) + 8 * v66);
          if (objc_msgSend_index(v67, v61, v62, v64) == v56) {
            break;
          }
          if (v63 == ++v66)
          {
            uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v61, (uint64_t)&v110, v64, v126, 16);
            if (v63) {
              goto LABEL_25;
            }
            goto LABEL_40;
          }
        }
        if (!objc_msgSend_isCellular(v67, v61, v62, v64)) {
          goto LABEL_40;
        }
        uint64_t v68 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v72 = objc_msgSend_name(v67, v69, v70, v71);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v108;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v72;
          _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "dropIPPackets: overriding source interface [%@] with [%@]", buf, 0x16u);
        }
        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            objc_msgSend_name(v67, v73, v74, v75);
            double v106 = v105 = v108;
            _IDSLogTransport(@"GL", @"IDS", @"dropIPPackets: overriding source interface [%@] with [%@]");

            if (_IDSShouldLog())
            {
              objc_msgSend_name(v67, v73, v74, v75, v108, v106);
              double v106 = v105 = v108;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"dropIPPackets: overriding source interface [%@] with [%@]");
            }
          }
        }
        uint64_t v52 = objc_msgSend_name(v67, v73, v74, v75, v105, v106);

        uint64_t v79 = objc_msgSend_address(v67, v76, v77, v78);
        double v26 = (unsigned char *)objc_msgSend_sa(v79, v80, v81, v82);
      }
      else
      {
LABEL_40:
        uint64_t v52 = v108;
      }
    }
    else
    {
LABEL_21:
      id v108 = 0;
      uint64_t v52 = 0;
    }

LABEL_43:
    *(void *)&long long v83 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v124 = v83;
    long long v125 = v83;
    long long v122 = v83;
    long long v123 = v83;
    long long v120 = v83;
    long long v121 = v83;
    *(_OWORD *)buf = v83;
    *(_OWORD *)&uint8_t buf[16] = v83;
    v118[6] = v83;
    v118[7] = v83;
    v118[4] = v83;
    v118[5] = v83;
    v118[2] = v83;
    v118[3] = v83;
    v118[0] = v83;
    v118[1] = v83;
    if (self->_QUICForQREnabled)
    {
      nwLinuint64_t k = self->_nwLink;
      double v85 = objc_msgSend_sessionID(v14, v57, v58, -3.72066208e-103);
      uint64_t isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v14, v86, v87, v88);
      isQRConnectiouint64_t n = objc_msgSend_getEffectiveSourceAddress_fromSourceAddress_effectiveDestinationAddress_fromDestinationAddress_sessionID_isQRConnection_(nwLink, v90, (uint64_t)buf, v91, v26, v118, v109, v85, isRelayStunCandidatePair);

      if (isQRConnection) {
        double v26 = buf;
      }
      double v93 = (_OWORD *)v109;
      if (isQRConnection) {
        double v93 = v118;
      }
      uint64_t v109 = (uint64_t)v93;
    }
    __int16 v94 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v57, v58, *(double *)&v83);
    double v98 = objc_msgSend_local(v14, v95, v96, v97);
    uint64_t isRelayStunCandidate = objc_msgSend_isRelayStunCandidate(v98, v99, v100, v101);
    objc_msgSend_dropIPPackets_localAddress_remoteAddress_isRelay_channelNumberMSB_ifname_(v94, v103, (uint64_t)v7, v104, v26, v109, isRelayStunCandidate, v107, v52);
  }
  else
  {
LABEL_6:
    uint64_t v21 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for linkID:%d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for linkID:%d.");
        }
      }
    }
  }
}

- (void)updateProtocolQualityOfService:(char)a3 isGood:(BOOL)a4
{
  uint64_t v5 = a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!self->_linkIDToCandidatePairs) {
    goto LABEL_7;
  }
  BOOL v6 = a4;
  BOOL v9 = objc_msgSend_numberWithChar_(NSNumber, a2, a3, v4);
  if (!v9) {
    goto LABEL_7;
  }
  CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
  double v12 = objc_msgSend_numberWithChar_(NSNumber, v8, v5, v10);
  id v28 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v12);

  if (v28)
  {
    uint64_t v16 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v13, v14, v15);
    double v20 = objc_msgSend_local(v28, v17, v18, v19);
    uint64_t v24 = objc_msgSend_address(v20, v21, v22, v23);
    objc_msgSend_updateProtocolQualityOfService_localAddress_(v16, v25, v6, v26, v24);
  }
  else
  {
LABEL_7:
    uint64_t v27 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v30 = v5;
      _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for linkID:%d.", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for linkID:%d.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for linkID:%d.");
        }
      }
    }
  }
}

- (void)stopKeepAlive:(id)a3
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  double v4 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v6 = v3;
    _os_log_impl(&dword_19D9BE000, v4, OS_LOG_TYPE_DEFAULT, "stop heart beat for linkIDs:%@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"stop heart beat for linkIDs:%@");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"stop heart beat for linkIDs:%@");
      }
    }
  }
}

- (void)currentCellularSignalStrength:(int *)a3 signalStrength:(int *)a4 signalGrade:(int *)a5
{
  if (a3 && a4 && a5)
  {
    objc_msgSend_sharedInstance(IDSCellularLinkMonitor, a2, (uint64_t)a3, v5);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_currentCellularSignalStrength_signalStrength_signalGrade_(v12, v9, (uint64_t)a3, v10, a4, a5);
  }
  else
  {
    double v11 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "currentCellularSignalStrength failed due to invalid parameter.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"currentCellularSignalStrength failed due to invalid parameter.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"currentCellularSignalStrength failed due to invalid parameter.");
        }
      }
    }
  }
}

- (void)setWiFiAssistState:(BOOL)a3
{
  BOOL v4 = a3;
  objc_msgSend_setWiFiAssistState_(self->_udpLink, a2, a3, v3);
  objc_msgSend_setWiFiAssistState_(self->_udpLinkv6, v6, v4, v7);
  objc_msgSend_setWiFiAssistState_(self->_tcpLink, v8, v4, v9);
  objc_msgSend_setWiFiAssistState_(self->_tcpSSLLink, v10, v4, v11);
  nwLinuint64_t k = self->_nwLink;
  objc_msgSend_setWiFiAssistState_(nwLink, v12, v4, v13);
}

- (void)startLinkProbing:(id)a3
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  double v8 = objc_msgSend_objectForKeyedSubscript_(v4, v6, @"ids-extchannel-probing-link-ids-key", v7);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v11 = objc_msgSend_objectForKeyedSubscript_(v4, v9, @"ids-extchannel-probing-link-ids-key", v10);
    int isEqualToString = objc_msgSend_isEqualToString_(v11, v12, @"ids-extchannel-probing-all-links-value", v13);

    if (isEqualToString)
    {
      uint64_t v18 = objc_msgSend_copy(self->_connectedLinkIDs, v15, v16, v17);
      goto LABEL_9;
    }
  }
  else
  {
  }
  Value = 0;
  if (v4 && @"ids-extchannel-probing-link-ids-key") {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-link-ids-key");
  }
  uint64_t v18 = objc_msgSend_copy(Value, v15, v16, v17);
LABEL_9:
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id v20 = v18;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v88, v22, v97, 16);
  if (v23)
  {
    uint64_t v26 = v23;
    uint64_t v27 = *(void *)v89;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v89 != v27) {
          objc_enumerationMutation(v20);
        }
        uint64_t v29 = *(void *)(*((void *)&v88 + 1) + 8 * i);
        if ((objc_msgSend_containsObject_(self->_activeProbingLinkIDs, v24, v29, v25) & 1) == 0) {
          objc_msgSend_addObject_(v5, v24, v29, v25);
        }
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v88, v25, v97, 16);
    }
    while (v26);
  }

  double v33 = objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    double v93 = v5;
    __int16 v94 = 2112;
    *(void *)uint64_t v95 = activeProbingLinkIDs;
    _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "startLinkProbing: add new probing linkIDs: %@, to activeProbingLinkIDs: %@", buf, 0x16u);
  }

  objc_msgSend_addObjectsFromArray_(self->_activeProbingLinkIDs, v35, (uint64_t)v5, v36);
  double v40 = 0;
  if (v4)
  {
    uint64_t v37 = (const char *)@"ids-extchannel-probing-timeout-key";
    if (@"ids-extchannel-probing-timeout-key") {
      double v40 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-timeout-key");
    }
  }
  unsigned int v43 = objc_msgSend_unsignedIntValue(v40, v37, v38, v39);
  double v45 = 0;
  self->_unsigned int probingTimeout = v43;
  long long v83 = v20;
  if (v4)
  {
    int v41 = (const char *)@"ids-extchannel-probing-interval-key";
    if (@"ids-extchannel-probing-interval-key") {
      double v45 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-interval-key");
    }
  }
  uint64_t v46 = objc_msgSend_unsignedIntValue(v45, v41, v42, v44);
  if (v46)
  {
    uint64_t v50 = v46;
    uint64_t v81 = v5;
    id v82 = v4;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    int v51 = v5;
    uint64_t v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v52, (uint64_t)&v84, v53, v96, 16);
    if (v54)
    {
      uint64_t v55 = v54;
      int v56 = 0;
      uint64_t v57 = *(void *)v85;
      do
      {
        for (uint64_t j = 0; j != v55; ++j)
        {
          if (*(void *)v85 != v57) {
            objc_enumerationMutation(v51);
          }
          uint64_t v59 = *(const void **)(*((void *)&v84 + 1) + 8 * j);
          CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
          if (linkIDToCandidatePairs) {
            BOOL v61 = v59 == 0;
          }
          else {
            BOOL v61 = 1;
          }
          if (v61) {
            uint64_t v62 = 0;
          }
          else {
            uint64_t v62 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, *(const void **)(*((void *)&v84 + 1) + 8 * j));
          }
          uint64_t v63 = v62;
          if (objc_msgSend_isSharedQRSession(v63, v64, v65, v66))
          {
            uint64_t v70 = objc_msgSend_GlobalLink(IDSFoundationLog, v67, v68, v69);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              double v93 = v63;
              _os_log_impl(&dword_19D9BE000, v70, OS_LOG_TYPE_DEFAULT, "startLinkProbing: skipped shared QR session %@", buf, 0xCu);
            }

            if (!v56) {
              int v56 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            if (v56 && v59) {
              CFArrayAppendValue(v56, v59);
            }
          }
          else
          {
            objc_msgSend_startLinkProbingTimer_(v63, v67, v50, v69);
          }
        }
        uint64_t v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v51, v71, (uint64_t)&v84, v72, v96, 16);
      }
      while (v55);
    }
    else
    {
      int v56 = 0;
    }

    objc_msgSend_removeObjectsInArray_(self->_activeProbingLinkIDs, v73, (uint64_t)v56, v74);
    double v78 = objc_msgSend_GlobalLink(IDSFoundationLog, v75, v76, v77);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v79 = self->_activeProbingLinkIDs;
      unsigned int probingTimeout = self->_probingTimeout;
      *(_DWORD *)buf = 138412802;
      double v93 = v79;
      __int16 v94 = 1024;
      *(_DWORD *)uint64_t v95 = v50;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = probingTimeout;
      _os_log_impl(&dword_19D9BE000, v78, OS_LOG_TYPE_DEFAULT, "startLinkProbing: activeProbingLinkIDs: %@, probingInterval: %u, _probingTimeout: %u", buf, 0x18u);
    }

    double v5 = v81;
    id v4 = v82;
  }
  else
  {
    objc_msgSend_GlobalLink(IDSFoundationLog, v47, v48, v49);
    int v56 = (__CFArray *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_ERROR)) {
      sub_19DB7B294();
    }
  }
}

- (void)stopLinkProbing:(id)a3
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, @"ids-extchannel-probing-link-ids-key", v6);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v10 = objc_msgSend_objectForKeyedSubscript_(v4, v8, @"ids-extchannel-probing-link-ids-key", v9);
    int isEqualToString = objc_msgSend_isEqualToString_(v10, v11, @"ids-extchannel-probing-all-links-value", v12);

    if (isEqualToString)
    {
      id v17 = (id)objc_msgSend_copy(self->_activeProbingLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {
  }
  Value = 0;
  if (v4 && @"ids-extchannel-probing-link-ids-key") {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-link-ids-key");
  }
  id v17 = Value;
LABEL_9:
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v19 = v17;
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v43, v21, v51, 16);
  if (v22)
  {
    uint64_t v25 = v22;
    uint64_t v26 = *(void *)v44;
    do
    {
      uint64_t v27 = 0;
      do
      {
        if (*(void *)v44 != v26) {
          objc_enumerationMutation(v19);
        }
        id v28 = *(const char **)(*((void *)&v43 + 1) + 8 * v27);
        CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs) {
          BOOL v30 = v28 == 0;
        }
        else {
          BOOL v30 = 1;
        }
        if (v30)
        {
          objc_msgSend_stopLinkProbingTimer(0, v28, v23, v24, (void)v43);
        }
        else
        {
          uint64_t v31 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v28);
          objc_msgSend_stopLinkProbingTimer(v31, v32, v33, v34, (void)v43);
        }
        ++v27;
      }
      while (v25 != v27);
      uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v35, (uint64_t)&v43, v24, v51, 16);
    }
    while (v25);
  }

  objc_msgSend_removeObjectsInArray_(self->_activeProbingLinkIDs, v36, (uint64_t)v19, v37);
  int v41 = objc_msgSend_GlobalLink(IDSFoundationLog, v38, v39, v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    id v48 = v19;
    __int16 v49 = 2112;
    uint64_t v50 = activeProbingLinkIDs;
    _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "stopLinkProbing: linkIDs: %@, activeProbingLinkIDs: %@", buf, 0x16u);
  }
}

- (void)_stopProbingOnLinkID:(char)a3
{
  uint64_t v4 = a3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  double v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v22 = v4;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "_stopProbingOnLinkID: %d", buf, 8u);
  }

  id v19 = @"ids-extchannel-probing-link-ids-key";
  double v9 = objc_msgSend_numberWithChar_(NSNumber, v7, v4, v8);
  uint64_t v18 = v9;
  double v12 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v10, (uint64_t)&v18, v11, 1);
  id v20 = v12;
  uint64_t v15 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v13, (uint64_t)&v20, v14, &v19, 1);
  objc_msgSend_stopLinkProbing_(self, v16, (uint64_t)v15, v17);
}

- (void)queryLinkProbingStatus:(id)a3
{
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  double v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, @"ids-extchannel-probing-link-ids-key", v6);
  objc_opt_class();
  long long v180 = v4;
  if (objc_opt_isKindOfClass())
  {
    double v10 = objc_msgSend_objectForKeyedSubscript_(v4, v8, @"ids-extchannel-probing-link-ids-key", v9);
    int isEqualToString = objc_msgSend_isEqualToString_(v10, v11, @"ids-extchannel-probing-all-links-value", v12);

    if (isEqualToString)
    {
      double v17 = (__CFString *)objc_msgSend_copy(self->_connectedLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {
  }
  double v21 = 0;
  if (v4 && @"ids-extchannel-probing-link-ids-key") {
    double v21 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-link-ids-key");
  }
  double v17 = v21;
LABEL_9:
  int v22 = v17;
  uint64_t v23 = objc_msgSend_GlobalLink(IDSFoundationLog, v18, v19, v20, @"ids-extchannel-probing-link-ids-key");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    long long v206 = v22;
    _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: linkIDs: %@", buf, 0xCu);
  }

  long long v201 = 0u;
  long long v202 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  double v24 = v22;
  uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v199, v26, v215, 16);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = 0;
    uint64_t v30 = *(void *)v200;
    uint64_t v181 = *(void *)v200;
    double v182 = v24;
    uint64_t v192 = self;
    while (1)
    {
      uint64_t v31 = 0;
      uint64_t v184 = v28;
      do
      {
        if (*(void *)v200 != v30) {
          objc_enumerationMutation(v24);
        }
        double v32 = *(const void **)(*((void *)&v199 + 1) + 8 * v31);
        CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
        if (linkIDToCandidatePairs) {
          BOOL v34 = v32 == 0;
        }
        else {
          BOOL v34 = 1;
        }
        if (v34) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = (void *)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, *(const void **)(*((void *)&v199 + 1) + 8 * v31));
        }
        double v36 = v35;
        objc_msgSend_candidatePairToken(v36, v37, v38, v39);
        double v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_isSharedQRSession(v36, v41, v42, v43))
        {
          uint64_t v47 = v32;
          id v48 = objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            long long v206 = v36;
            _os_log_impl(&dword_19D9BE000, v48, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: skipped shared QR session %@", buf, 0xCu);
          }

          if (!v29) {
            uint64_t v29 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          }
          if (v29 && v47) {
            CFArrayAppendValue(v29, v47);
          }
          goto LABEL_98;
        }
        __int16 v49 = 0;
        if (self->_linkIDToRequestTimeStampAndRTT && v32) {
          __int16 v49 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_linkIDToRequestTimeStampAndRTT, v32);
        }
        id key = (const char *)v32;
        id v50 = v49;
        double v53 = objc_msgSend_objectAtIndexedSubscript_(v50, v51, 0, v52);
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        uint64_t v57 = objc_msgSend_objectAtIndexedSubscript_(v50, v55, 0, v56);
        BOOL v61 = v57;
        if (isKindOfClass)
        {
          unsigned int v62 = objc_msgSend_unsignedIntValue(v57, v58, v59, v60);
        }
        else
        {
          uint64_t v63 = objc_msgSend_objectAtIndexedSubscript_(v57, v58, 0, v60);
          unsigned int v62 = objc_msgSend_unsignedIntValue(v63, v64, v65, v66);
        }
        uint64_t v186 = v36;

        double v67 = ((double)(unsigned __int16)v62 * 0.0000152587891 + (double)HIWORD(v62)) * 1000.0;
        uint64_t v68 = v67;
        double v71 = objc_msgSend_GlobalLink(IDSFoundationLog, v69, v70, v67);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v75 = objc_msgSend_count(v50, v72, v73, v74);
          double v78 = objc_msgSend_objectAtIndexedSubscript_(v50, v76, 0, v77);
          *(_DWORD *)buf = 138413314;
          long long v206 = v40;
          __int16 v207 = 2112;
          long long v208 = key;
          __int16 v209 = 1024;
          int v210 = v68;
          __int16 v211 = 2048;
          uint64_t v212 = v75;
          __int16 v213 = 2112;
          id v214 = v78;
          _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: candidatePairToken %@, linkID: %@, baseRequestTimeStampInMS: %u, requestTimeStampAndRTTs count: %lu, requestTimeStampAndRTTs: %@ ...", buf, 0x30u);
        }
        uint64_t v185 = v40;
        uint64_t v187 = v31;
        char v188 = v29;

        id v194 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id value = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        double v79 = ids_monotonic_time();
        unsigned int v80 = ntpTime32(v79);
        long long v195 = 0u;
        long long v196 = 0u;
        long long v197 = 0u;
        long long v198 = 0u;
        obuint64_t j = v50;
        uint64_t v83 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v81, (uint64_t)&v195, v82, v204, 16);
        if (v83)
        {
          uint64_t v84 = v83;
          unsigned __int16 v85 = 0;
          unsigned __int16 v86 = 0;
          unsigned int v191 = (((double)(unsigned __int16)v80 * 0.0000152587891 + (double)HIWORD(v80)) * 1000.0);
          uint64_t v87 = *(void *)v196;
          while (1)
          {
            for (uint64_t i = 0; i != v84; ++i)
            {
              if (*(void *)v196 != v87) {
                objc_enumerationMutation(obj);
              }
              long long v89 = *(void **)(*((void *)&v195 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unsigned int v93 = objc_msgSend_unsignedIntValue(v89, v90, v91, v92);
                double v96 = ((double)(unsigned __int16)v93 * 0.0000152587891 + (double)HIWORD(v93)) * 1000.0;
                unsigned int v97 = v96;
                if (v191 - v96 < v192->_probingTimeout)
                {
                  objc_msgSend_addObject_(value, v94, (uint64_t)v89, v96);
                  continue;
                }
                unsigned int v108 = v97 - v68;
                if (v97 - v68 >= 0x10000)
                {
                  long long v116 = objc_msgSend_GlobalLink(IDSFoundationLog, v94, v95, v96);
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    LODWORD(v206) = v108;
                    _os_log_impl(&dword_19D9BE000, v116, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: ProbingTimeout: differenceInMS: %u is out of scope", buf, 8u);
                  }

                  LOWORD(v108) = -1;
                }
                LOWORD(v115) = -1;
              }
              else
              {
                uint64_t v100 = objc_msgSend_objectAtIndexedSubscript_(v89, v90, 0, v92);
                unsigned int v104 = objc_msgSend_unsignedIntValue(v100, v101, v102, v103);

                double v107 = ((double)(unsigned __int16)v104 * 0.0000152587891 + (double)HIWORD(v104)) * 1000.0;
                unsigned int v108 = v107 - v68;
                if (v108 >= 0x10000)
                {
                  uint64_t v109 = objc_msgSend_GlobalLink(IDSFoundationLog, v105, v106, v107);
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    LODWORD(v206) = v108;
                    _os_log_impl(&dword_19D9BE000, v109, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: differenceInMS: %u is out of scope", buf, 8u);
                  }

                  LOWORD(v108) = -1;
                }
                ++v86;
                long long v110 = objc_msgSend_objectAtIndexedSubscript_(v89, v105, 1, v107);
                objc_msgSend_doubleValue(v110, v111, v112, v113);
                unsigned int v115 = (v114 * 1000.0);

                if (v115 >= 0x10000) {
                  LOWORD(v115) = -2;
                }
              }
              ++v85;
              long long v117 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v94, (unsigned __int16)v108, v96);
              v203[0] = v117;
              long long v120 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v118, (unsigned __int16)v115, v119);
              v203[1] = v120;
              long long v123 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v121, (uint64_t)v203, v122, 2);
              objc_msgSend_addObject_(v194, v124, (uint64_t)v123, v125);
            }
            uint64_t v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v98, (uint64_t)&v195, v99, v204, 16);
            if (!v84) {
              goto LABEL_62;
            }
          }
        }
        unsigned __int16 v85 = 0;
        unsigned __int16 v86 = 0;
LABEL_62:

        long long v126 = 0;
        self = v192;
        if (v192->_linkIDToReorderedPackets && key) {
          long long v126 = (void *)CFDictionaryGetValue((CFDictionaryRef)v192->_linkIDToReorderedPackets, key);
        }
        id v127 = v126;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        long long v131 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v129, v68, v130);
        if (v131)
        {
          CFDictionarySetValue(Mutable, @"ids-extchannel-time-stamp-key", v131);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          long long v206 = @"ids-extchannel-time-stamp-key";
          __int16 v207 = 2080;
          long long v208 = "linkStatus";
          _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        id v132 = v127;
        if (v132)
        {
          CFDictionarySetValue(Mutable, @"ids-extchannel-number-reordered-packets-key", v132);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          long long v206 = @"ids-extchannel-number-reordered-packets-key";
          __int16 v207 = 2080;
          long long v208 = "linkStatus";
          _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        id v133 = v194;
        if (v133)
        {
          CFDictionarySetValue(Mutable, @"ids-extchannel-probing-request-offset-rtt-key", v133);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          long long v206 = @"ids-extchannel-probing-request-offset-rtt-key";
          __int16 v207 = 2080;
          long long v208 = "linkStatus";
          _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
        }

        uint64_t v136 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v134, v85, v135);
        if (v136)
        {
          CFDictionarySetValue(Mutable, @"ids-extchannel-number-requests-key", v136);
          uint64_t v29 = v188;
        }
        else
        {
          uint64_t v29 = v188;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            long long v206 = @"ids-extchannel-number-requests-key";
            __int16 v207 = 2080;
            long long v208 = "linkStatus";
            _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
          }
        }

        int v139 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v137, v86, v138);
        if (v139)
        {
          CFDictionarySetValue(Mutable, @"ids-extchannel-number-response-key", v139);
          uint64_t v31 = v187;
        }
        else
        {
          uint64_t v31 = v187;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            long long v206 = @"ids-extchannel-number-response-key";
            __int16 v207 = 2080;
            long long v208 = "linkStatus";
            _os_log_error_impl(&dword_19D9BE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", buf, 0x16u);
          }
        }

        objc_msgSend_setObject_forKeyedSubscript_(theDict, v140, (uint64_t)Mutable, v141, key);
        double v145 = value;
        if (key)
        {
          linkIDToReorderedPackets = (__CFDictionary *)v192->_linkIDToReorderedPackets;
          if (linkIDToReorderedPackets)
          {
            CFDictionaryRemoveValue(linkIDToReorderedPackets, key);
            double v145 = value;
          }
          CFDictionaryRef linkIDToRequestTimeStampAndRTT = (__CFDictionary *)v192->_linkIDToRequestTimeStampAndRTT;
          if (linkIDToRequestTimeStampAndRTT)
          {
            CFDictionaryRemoveValue(linkIDToRequestTimeStampAndRTT, key);
            double v145 = value;
          }
        }
        uint64_t v148 = v145;
        if (objc_msgSend_count(v145, v142, v143, v144))
        {
          uint64_t v152 = objc_msgSend_GlobalLink(IDSFoundationLog, v149, v150, v151);
          if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v156 = objc_msgSend_count(value, v153, v154, v155);
            *(_DWORD *)buf = 134217984;
            long long v206 = (__CFString *)v156;
            _os_log_impl(&dword_19D9BE000, v152, OS_LOG_TYPE_DEFAULT, "queryLinkProbingStatus: remainingTimeStamp count: %lu", buf, 0xCu);
          }

          if (!v192->_linkIDToRequestTimeStampAndRTT)
          {
            CFMutableDictionaryRef v157 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            int v158 = v192->_linkIDToRequestTimeStampAndRTT;
            v192->_CFDictionaryRef linkIDToRequestTimeStampAndRTT = (NSMutableDictionary *)v157;
          }
          uint64_t v148 = value;
          if (value) {
            CFDictionarySetValue((CFMutableDictionaryRef)v192->_linkIDToRequestTimeStampAndRTT, key, value);
          }
        }

        uint64_t v30 = v181;
        double v24 = v182;
        uint64_t v28 = v184;
        double v40 = v185;
        double v36 = v186;
LABEL_98:

        ++v31;
      }
      while (v31 != v28);
      uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v159, (uint64_t)&v199, v160, v215, 16);
      if (!v28) {
        goto LABEL_102;
      }
    }
  }
  uint64_t v29 = 0;
LABEL_102:

  if (objc_msgSend_count(v29, v161, v162, v163))
  {
    double v167 = objc_msgSend_mutableCopy(v24, v164, v165, v166);
    objc_msgSend_removeObjectsInArray_(v167, v168, (uint64_t)v29, v169);
    uint64_t v172 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v170, (uint64_t)v167, v171);

    double v24 = (__CFString *)v172;
  }
  if (!theDict) {
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  id v173 = v24;
  if (v173)
  {
    CFDictionarySetValue(theDict, v179, v173);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_19DB7B2C8();
  }

  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v175 = objc_opt_respondsToSelector();

  if (v175)
  {
    id v176 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didGetLinkProbingStatus_(v176, v177, (uint64_t)self, v178, theDict);
  }
}

- (void)flushLinkProbingStatus:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, @"ids-extchannel-probing-link-ids-key", v6);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v10 = objc_msgSend_objectForKeyedSubscript_(v4, v8, @"ids-extchannel-probing-link-ids-key", v9);
    int isEqualToString = objc_msgSend_isEqualToString_(v10, v11, @"ids-extchannel-probing-all-links-value", v12);

    if (isEqualToString)
    {
      id v17 = (id)objc_msgSend_copy(self->_connectedLinkIDs, v14, v15, v16);
      goto LABEL_9;
    }
  }
  else
  {
  }
  Value = 0;
  if (v4 && @"ids-extchannel-probing-link-ids-key") {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-probing-link-ids-key");
  }
  id v17 = Value;
LABEL_9:
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v19 = v17;
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v37, v21, v45, 16);
  if (v22)
  {
    uint64_t v25 = v22;
    uint64_t v26 = *(void *)v38;
    do
    {
      uint64_t v27 = 0;
      do
      {
        if (*(void *)v38 != v26) {
          objc_enumerationMutation(v19);
        }
        uint64_t v28 = *(const void **)(*((void *)&v37 + 1) + 8 * v27);
        if (v28)
        {
          linkIDToReorderedPackets = self->_linkIDToReorderedPackets;
          if (linkIDToReorderedPackets) {
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToReorderedPackets, *(const void **)(*((void *)&v37 + 1) + 8 * v27));
          }
          CFDictionaryRef linkIDToRequestTimeStampAndRTT = self->_linkIDToRequestTimeStampAndRTT;
          if (linkIDToRequestTimeStampAndRTT) {
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToRequestTimeStampAndRTT, v28);
          }
          linkIDToHBCounter = self->_linkIDToHBCounter;
          if (linkIDToHBCounter) {
            CFDictionaryRemoveValue((CFMutableDictionaryRef)linkIDToHBCounter, v28);
          }
        }
        ++v27;
      }
      while (v25 != v27);
      uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v23, (uint64_t)&v37, v24, v45, 16);
    }
    while (v25);
  }

  uint64_t v35 = objc_msgSend_GlobalLink(IDSFoundationLog, v32, v33, v34, (void)v37);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    activeProbingLinkIDs = self->_activeProbingLinkIDs;
    *(_DWORD *)buf = 138412546;
    id v42 = v19;
    __int16 v43 = 2112;
    long long v44 = activeProbingLinkIDs;
    _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "flushLinkProbingStatus: linkIDs: %@, activeProbingLinkIDs: %@", buf, 0x16u);
  }
}

- (void)sendStatsRequestForClient:(id)a3
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v7 = objc_msgSend_objectForKeyedSubscript_(v4, v5, @"linkid-key", v6);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v10 = objc_msgSend_objectForKeyedSubscript_(v4, v8, @"ids-extchannel-stat-identifier-key", v9);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      Value = 0;
      if (v4 && @"linkid-key") {
        Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"linkid-key");
      }
      double v16 = Value;
      id v17 = 0;
      if (v4 && @"ids-extchannel-stat-identifier-key") {
        id v17 = (void *)CFDictionaryGetValue((CFDictionaryRef)v4, @"ids-extchannel-stat-identifier-key");
      }
      id v18 = v17;
      uint64_t v22 = objc_msgSend_GlobalLink(IDSFoundationLog, v19, v20, v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 138412546;
        id v42 = v16;
        __int16 v43 = 2112;
        id v44 = v18;
        _os_log_impl(&dword_19D9BE000, v22, OS_LOG_TYPE_DEFAULT, "sendStatsRequestForClient: linkID: %@, statIdentifier: %@", (uint8_t *)&v41, 0x16u);
      }

      CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      if (linkIDToCandidatePairs
        && v16
        && (uint64_t v27 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v16)) != 0)
      {
        uint64_t v28 = v27;
        if (objc_msgSend_isRelayStunCandidatePair(v27, v23, v24, v25))
        {
          double v32 = ids_monotonic_time();
          objc_msgSend_setLastStatsReport_(v28, v33, v34, v32);
          if (objc_msgSend_isQUIC(v28, v35, v36, v37)) {
            objc_msgSend_sendQUICStatsRequestWithOptions_(v28, v38, (uint64_t)v4, v39);
          }
          else {
            objc_msgSend_sendStatsRequest_options_(v28, v38, 0, v39, v4);
          }
        }
        else
        {
          long long v40 = objc_msgSend_GlobalLink(IDSFoundationLog, v29, v30, v31);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            sub_19DB7B3B4();
          }
        }
      }
      else
      {
        uint64_t v28 = objc_msgSend_GlobalLink(IDSFoundationLog, v23, v24, v25);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          sub_19DB7B34C();
        }
      }

      goto LABEL_23;
    }
  }
  else
  {
  }
  double v16 = objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_19DB7B41C();
  }
LABEL_23:
}

- (void)sendStatsRequest:(id)a3
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v7 = ids_monotonic_time();
  double v8 = v7;
  if (!self->_linkIDToStatsData)
  {
    CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    linkIDToStatsData = self->_linkIDToStatsData;
    self->_linkIDToStatsData = Mutable;
  }
  double v71 = v4;
  double v11 = (NSMutableDictionary *)objc_msgSend_mutableCopy(v4, v5, v6, v7);
  double v12 = self->_linkIDToStatsData;
  self->_linkIDToStatsData = v11;

  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v15 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v13, v14, 0.0);
  uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v72, v17, v76, 16);
  if (v18)
  {
    uint64_t v22 = v18;
    uint64_t v23 = *(void *)v73;
    uint64_t v70 = v15;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v73 != v23) {
          objc_enumerationMutation(v15);
        }
        double v25 = *(void **)(*((void *)&v72 + 1) + 8 * i);
        uint64_t v26 = objc_msgSend_state(v25, v19, v20, v21);
        int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v25, v27, v28, v29);
        char isSelfQRSession = objc_msgSend_isSelfQRSession(v25, v31, v32, v33);
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL && (isSelfQRSession & 1) == 0)
        {
          objc_msgSend_lastStatsReport(v25, v19, v20, v21);
          double v36 = v8 - v35;
          double v21 = (double)objc_msgSend_statsIntervalInSeconds(v25, v37, v38, v35);
          if (v36 >= v21)
          {
            uint64_t v39 = (int)objc_msgSend_linkID(v25, v19, v20, v21);
            id v42 = objc_msgSend_stringWithFormat_(NSString, v40, @"%d-send", v41, v39);
            uint64_t v45 = objc_msgSend_objectForKeyedSubscript_(v71, v43, (uint64_t)v42, v44);

            id v48 = objc_msgSend_stringWithFormat_(NSString, v46, @"%d-recv", v47, v39);
            int v51 = objc_msgSend_objectForKeyedSubscript_(v71, v49, (uint64_t)v48, v50);

            if (v45)
            {
              if (v51)
              {
                objc_msgSend_unsignedIntValue(v45, v52, v53, v54);
                objc_msgSend_unsignedIntValue(v51, v55, v56, v57);
                if (isRelayStunCandidatePair)
                {
                  if (objc_msgSend_isQUIC(v25, v58, v59, v60))
                  {
                    CFMutableDictionaryRef v63 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    objc_msgSend_setLastStatsReport_(v25, v64, v65, v8);
                    objc_msgSend_sendQUICStatsRequestWithOptions_(v25, v66, (uint64_t)v63, v67);
                  }
                  else
                  {
                    objc_msgSend_setLastStatsReport_(v25, v61, v62, v8);
                    objc_msgSend_sendStatsRequest_options_(v25, v68, 0, v69, 0);
                  }
                }
              }
            }

            uint64_t v15 = v70;
          }
        }
      }
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v72, v21, v76, 16);
    }
    while (v22);
  }
}

- (void)setReceivedRemoteDeviceVersion:(BOOL)a3
{
  int v4 = a3;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  receivedRemoteDeviceVersiouint64_t n = self->_receivedRemoteDeviceVersion;
  double v7 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (receivedRemoteDeviceVersion == v4)
  {
    if (v8)
    {
      double v9 = @"YES";
      if (self->_receivedRemoteDeviceVersion) {
        double v10 = @"YES";
      }
      else {
        double v10 = @"NO";
      }
      if (!v4) {
        double v9 = @"NO";
      }
      int v31 = 138412546;
      uint64_t v32 = v10;
      __int16 v33 = 2112;
      uint64_t v34 = v9;
      _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: _receivedRemoteDeviceVersion: %@ is the same as receivedRemoteDeviceVersion: %@", (uint8_t *)&v31, 0x16u);
    }
    goto LABEL_22;
  }
  if (v8)
  {
    double v11 = @"NO";
    if (v4) {
      double v11 = @"YES";
    }
    int v31 = 138412290;
    uint64_t v32 = v11;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "setReceivedRemoteDeviceVersion: %@", (uint8_t *)&v31, 0xCu);
  }

  self->_receivedRemoteDeviceVersiouint64_t n = v4;
  if (v4)
  {
    uint64_t v15 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v12, v13, v14);
    uint64_t v18 = objc_msgSend_relayInterfaceInfoDeliveryStatus_(v15, v16, (uint64_t)self->_cbuuid, v17);

    if (v18 == 1) {
      objc_msgSend__sendRelayInterfaceInfo_(self, v19, 0, v21);
    }
    uint64_t v22 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v19, v20, v21);
    uint64_t v25 = objc_msgSend_deliveryStatus_(v22, v23, (uint64_t)self->_cbuuid, v24);

    if (!v25) {
      objc_msgSend__sendConnectionDataWithRemovedAddressList_(self, v26, 0, v27);
    }
    pendingCommandConnectionDataBlocuint64_t k = (void (**)(void))self->_pendingCommandConnectionDataBlock;
    if (pendingCommandConnectionDataBlock)
    {
      pendingCommandConnectionDataBlock[2]();
      id v29 = self->_pendingCommandConnectionDataBlock;
      self->_pendingCommandConnectionDataBlocuint64_t k = 0;
    }
    pendingCommandRelayInterfaceInfoBlocuint64_t k = (void (**)(void))self->_pendingCommandRelayInterfaceInfoBlock;
    if (pendingCommandRelayInterfaceInfoBlock)
    {
      pendingCommandRelayInterfaceInfoBlock[2]();
      double v7 = self->_pendingCommandRelayInterfaceInfoBlock;
      self->_pendingCommandRelayInterfaceInfoBlocuint64_t k = 0;
LABEL_22:
    }
  }
}

- (void)setRemoteDeviceVersion:(unsigned int)a3
{
  uint64_t v4 = *(void *)&a3;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, *(uint64_t *)&a3, v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v67) = v4;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: version: %u", buf, 8u);
  }

  self->_remoteDeviceVersiouint64_t n = v4;
  double v10 = objc_msgSend_sharedInstance(IDSCellularLinkMonitor, v7, v8, v9);
  objc_msgSend_setRemoteDeviceVersion_(v10, v11, v4, v12);

  objc_msgSend_setReceivedRemoteDeviceVersion_(self, v13, 1, v14);
  if (self->_remoteDeviceVersion == 1)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v15 = self->_localCandidateList;
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v61, v17, v68, 16);
    if (v18)
    {
      uint64_t v22 = v18;
      uint64_t v23 = *(void *)v62;
      *(void *)&long long v21 = 138412290;
      long long v55 = v21;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v62 != v23) {
            objc_enumerationMutation(v15);
          }
          uint64_t v25 = *(void **)(*((void *)&v61 + 1) + 8 * i);
          if (objc_msgSend_radioAccessTechnology(v25, v19, v20, *(double *)&v21, v55) == 8)
          {
            objc_msgSend_setRadioAccessTechnology_(v25, v19, 5, *(double *)&v21);
            id v29 = objc_msgSend_GlobalLink(IDSFoundationLog, v26, v27, v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v55;
              double v67 = v25;
              _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: update local %@ local RAT from NR to LTE", buf, 0xCu);
            }
          }
        }
        uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v61, *(double *)&v21, v68, 16);
      }
      while (v22);
    }

    __int16 v33 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v30, v31, v32);
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v57, 0.0, v65, 16);
    if (v35)
    {
      uint64_t v39 = v35;
      uint64_t v40 = *(void *)v58;
      *(void *)&long long v38 = 138412290;
      long long v56 = v38;
      do
      {
        for (uint64_t j = 0; j != v39; ++j)
        {
          if (*(void *)v58 != v40) {
            objc_enumerationMutation(v33);
          }
          id v42 = *(void **)(*((void *)&v57 + 1) + 8 * j);
          __int16 v43 = objc_msgSend_local(v42, v36, v37, *(double *)&v38, v56);
          int v47 = objc_msgSend_radioAccessTechnology(v43, v44, v45, v46);

          if (v47 == 8)
          {
            id v48 = objc_msgSend_local(v42, v36, v37, *(double *)&v38);
            objc_msgSend_setRadioAccessTechnology_(v48, v49, 5, v50);

            double v54 = objc_msgSend_GlobalLink(IDSFoundationLog, v51, v52, v53);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v56;
              double v67 = v42;
              _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "setRemoteDeviceVersion: update candidate pair %@ local RAT from NR to LTE", buf, 0xCu);
            }
          }
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v57, *(double *)&v38, v65, 16);
      }
      while (v39);
    }
  }
}

- (BOOL)_sendInfoRequest:(id)a3 relaySessionID:(id)a4
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  double v54 = self;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, v10);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  double v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v55, v13, v63, 16);
  if (!v14) {
    goto LABEL_14;
  }
  uint64_t v18 = v14;
  uint64_t v19 = *(void *)v56;
  while (2)
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (*(void *)v56 != v19) {
        objc_enumerationMutation(v11);
      }
      long long v21 = *(void **)(*((void *)&v55 + 1) + 8 * i);
      uint64_t v22 = objc_msgSend_groupID(v21, v15, v16, v17);
      if (!objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v6, v24)) {
        goto LABEL_11;
      }
      double v28 = objc_msgSend_sessionID(v21, v25, v26, v27);
      if ((objc_msgSend_isEqualToString_(v28, v29, (uint64_t)v7, v30) & 1) == 0)
      {

LABEL_11:
        continue;
      }
      uint64_t v34 = objc_msgSend_state(v21, v31, v32, v33);

      if (v34 == 4)
      {
        double v41 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          int v46 = objc_msgSend_linkID(v21, v43, v44, v45);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)long long v60 = v46;
          *(_WORD *)&v60[4] = 2112;
          *(void *)&v60[6] = v6;
          *(_WORD *)&v60[14] = 2112;
          *(void *)&v60[16] = v7;
          _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "send info request using link %d for group %@, session %@.", buf, 0x1Cu);
        }

        if (objc_msgSend_isQUIC(v21, v47, v48, v49)) {
          objc_msgSend_sendQUICInfoRequest(v21, v50, v51, v52);
        }
        else {
          objc_msgSend_sendInfoRequest_(v21, v50, 0, v52);
        }
        BOOL v40 = 1;
        long long v38 = v11;
        goto LABEL_24;
      }
    }
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v55, v17, v63, 16);
    if (v18) {
      continue;
    }
    break;
  }
LABEL_14:

  if (v54->_state < 2)
  {
    BOOL v40 = 0;
  }
  else
  {
    long long v38 = objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = _IDSLinkStateStrings[v54->_state];
      *(_DWORD *)buf = 138413058;
      *(void *)long long v60 = v54;
      *(_WORD *)&v60[8] = 2080;
      *(void *)&unsigned char v60[10] = v39;
      *(_WORD *)&v60[18] = 2112;
      *(void *)&v60[20] = v6;
      __int16 v61 = 2112;
      id v62 = v7;
      _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending info request for group %@, session %@.", buf, 0x2Au);
    }
    BOOL v40 = 0;
LABEL_24:
  }
  return v40;
}

- (BOOL)_getSessionParticipants:(id)a3 relaySessionID:(id)a4 options:(id)a5
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  uint64_t v76 = self;
  id v77 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v78, v15, v86, 16);
  if (!v18) {
    goto LABEL_14;
  }
  uint64_t v20 = *(void *)v79;
  while (2)
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (*(void *)v79 != v20) {
        objc_enumerationMutation(v13);
      }
      uint64_t v22 = *(void **)(*((void *)&v78 + 1) + 8 * i);
      uint64_t v23 = objc_msgSend_groupID(v22, v16, v17, v19);
      if (!objc_msgSend_isEqualToString_(v23, v24, (uint64_t)v8, v25)) {
        goto LABEL_11;
      }
      id v29 = objc_msgSend_sessionID(v22, v26, v27, v28);
      if ((objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v9, v31) & 1) == 0)
      {

LABEL_11:
        continue;
      }
      BOOL v35 = objc_msgSend_state(v22, v32, v33, v34) == 4;

      if (v35)
      {
        id v42 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v19);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = objc_msgSend_linkID(v22, v44, v45, v46);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)uint64_t v83 = v47;
          *(_WORD *)&v83[4] = 2112;
          *(void *)&v83[6] = v8;
          *(_WORD *)&v83[14] = 2112;
          *(void *)&v83[16] = v9;
          _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "request participants session-info using link %d for group %@, session %@.", buf, 0x1Cu);
        }

        uint64_t v48 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
        CFDictionarySetValue(v48, @"gl-option-sessioninfo-request-type", &unk_1EF028A98);
        double v49 = NSNumber;
        uint64_t SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v22, v50, v51, v52);
        long long v56 = objc_msgSend_numberWithUnsignedInt_(v49, v54, SessionInfoReqID, v55);
        if (v56)
        {
          CFDictionarySetValue(v48, @"gl-option-sessioninfo-request-id", v56);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          sub_19DB7B4D4();
        }

        long long v59 = objc_msgSend_objectForKey_(v77, v57, @"gl-option-sessioninfo-command-flag", v58);
        uint64_t v63 = objc_msgSend_unsignedIntValue(v59, v60, v61, v62);

        if (v63)
        {
          double v67 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v64, v63, v66);
          if (v67)
          {
            CFDictionarySetValue(v48, @"gl-option-sessioninfo-command-flag", v67);
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            sub_19DB7B450();
          }
        }
        if (objc_msgSend_isQUIC(v22, v64, v65, v66)) {
          objc_msgSend_sendQUICSessionInfoRequestWithOptions_(v22, v71, (uint64_t)v48, v72);
        }
        else {
          objc_msgSend_sendSessionInfoRequest_options_(v22, v71, 0, v72, v48);
        }

        goto LABEL_43;
      }
    }
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v78, v19, v86, 16);
    if (v18) {
      continue;
    }
    break;
  }
LABEL_14:

  if (v77)
  {
    if (v76->_state >= 2)
    {
      uint64_t v39 = objc_msgSend_GlobalLink(IDSFoundationLog, v36, v37, v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v40 = _IDSLinkStateStrings[v76->_state];
        *(_DWORD *)buf = 138413058;
        *(void *)uint64_t v83 = v76;
        *(_WORD *)&v83[8] = 2080;
        *(void *)&v83[10] = v40;
        *(_WORD *)&v83[18] = 2112;
        *(void *)&v83[20] = v8;
        __int16 v84 = 2112;
        id v85 = v9;
        _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "%@ is in [%s] state, skip sending session-info request for group %@, session %@.", buf, 0x2Au);
      }

      goto LABEL_19;
    }
    uint64_t v68 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v83 = v8;
      *(_WORD *)&v83[8] = 2112;
      *(void *)&v83[10] = v9;
      _os_log_impl(&dword_19D9BE000, v68, OS_LOG_TYPE_DEFAULT, "trying cached response for group %@, session %@.", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        id v74 = v8;
        id v75 = v9;
        _IDSLogTransport(@"GL", @"IDS", @"trying cached response for group %@, session %@.");
        if (_IDSShouldLog())
        {
          id v74 = v8;
          id v75 = v9;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"trying cached response for group %@, session %@.");
        }
      }
    }
    objc_msgSend_connectWithSessionInfo_interfaceAddress_joinSession_completionHandler_withLocalInterfacePreference_(v76, v69, (uint64_t)v77, v70, 0, 0, 0, 0, v74, v75);
LABEL_43:
    BOOL v41 = 1;
  }
  else
  {
LABEL_19:
    BOOL v41 = 0;
  }

  return v41;
}

- (BOOL)_getSessionStreamInfo:(id)a3 relaySessionID:(id)a4 options:(id)a5
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  CFDictionaryRef v12 = (const __CFDictionary *)a5;
  Value = 0;
  if (v12)
  {
    double v10 = (const char *)@"gl-option-linkid";
    if (@"gl-option-linkid") {
      Value = (void *)CFDictionaryGetValue(v12, @"gl-option-linkid");
    }
  }
  char v17 = objc_msgSend_intValue(Value, v10, v11, v13);
  double v19 = 0;
  if (v12 && @"gl-option-sessioninfo-link-id-to-query") {
    double v19 = (void *)CFDictionaryGetValue(v12, @"gl-option-sessioninfo-link-id-to-query");
  }
  int v22 = objc_msgSend_intValue(v19, v15, v16, v18);
  uint64_t v24 = (char)v22;
  unint64_t v25 = 0x1E4F28000uLL;
  if (self->_linkIDToCandidatePairs)
  {
    double v28 = objc_msgSend_numberWithChar_(NSNumber, v20, v24, v23);
    if (v28)
    {
      CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(NSNumber, v26, v24, v29);
      uint64_t v32 = v31 = v8;
      CFDictionaryRef v33 = (const __CFDictionary *)linkIDToCandidatePairs;
      unint64_t v25 = 0x1E4F28000;
      double v34 = (void *)CFDictionaryGetValue(v33, v32);
      unsigned int v186 = objc_msgSend_relayLinkID(v34, v35, v36, v37);

      id v8 = v31;
    }
    else
    {
      unsigned int v186 = objc_msgSend_relayLinkID(0, v26, v27, v29);
    }
  }
  else
  {
    unsigned int v186 = objc_msgSend_relayLinkID(0, v20, v21, v23);
  }
  BOOL v41 = 0;
  if (v12)
  {
    double v38 = (const char *)@"stream-info-generation-counter";
    if (@"stream-info-generation-counter") {
      BOOL v41 = (void *)CFDictionaryGetValue(v12, @"stream-info-generation-counter");
    }
  }
  unsigned int v187 = objc_msgSend_unsignedIntValue(v41, v38, v39, v40);
  int v45 = v22 << 24;
  double v46 = self->_linkIDToCandidatePairs;
  uint64_t v47 = v17;
  if (!v45)
  {
    if (v46)
    {
      uint64_t v48 = objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v42, v17, v44);
      double v52 = v48;
      if (v48)
      {
        double v53 = self->_linkIDToCandidatePairs;
        objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v49, v47, v51);
        goto LABEL_23;
      }
LABEL_25:
      unsigned int SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v48, v49, v50, v51);
      goto LABEL_26;
    }
LABEL_24:
    unsigned int SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(0, v42, v43, v44);
    goto LABEL_27;
  }
  if (!v46) {
    goto LABEL_24;
  }
  uint64_t v48 = objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v42, v24, v44);
  double v52 = v48;
  if (!v48) {
    goto LABEL_25;
  }
  double v53 = self->_linkIDToCandidatePairs;
  objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v49, v24, v51);
  double v54 = LABEL_23:;
  double v55 = (void *)CFDictionaryGetValue((CFDictionaryRef)v53, v54);
  unsigned int SessionInfoReqID = objc_msgSend_nextSessionInfoReqID(v55, v56, v57, v58);

  unint64_t v25 = 0x1E4F28000;
LABEL_26:

LABEL_27:
  unint64_t v63 = 0x1E596F000uLL;
  uint64_t v64 = objc_msgSend_GlobalLink(IDSFoundationLog, v60, v61, v62);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)id v190 = v187;
    *(_WORD *)&v190[4] = 1024;
    *(_DWORD *)&v190[6] = v47;
    LOWORD(v191) = 1024;
    *(_DWORD *)((char *)&v191 + 2) = v24;
    HIWORD(v191) = 1024;
    unsigned int v192 = v186;
    __int16 v193 = 1024;
    unsigned int v194 = SessionInfoReqID;
    __int16 v195 = 2112;
    id v196 = v8;
    __int16 v197 = 2112;
    id v198 = v9;
    _os_log_impl(&dword_19D9BE000, v64, OS_LOG_TYPE_DEFAULT, "request session info (gc:%u, linkID:%1d, linkIDToQuery:%1d, relayLinkID:%04x, reqID:%08x) for group %@, session %@.", buf, 0x34u);
  }

  if (self->_linkIDToCandidatePairs)
  {
    uint64_t v69 = objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v65, v47, v67);
    if (v69)
    {
      double v71 = self->_linkIDToCandidatePairs;
      objc_msgSend_numberWithChar_(NSNumber, v68, v47, v70);
      unsigned int v72 = SessionInfoReqID;
      v74 = id v73 = v8;
      CFDictionaryRef v75 = (const __CFDictionary *)v71;
      unint64_t v25 = 0x1E4F28000;
      uint64_t v76 = (id)CFDictionaryGetValue(v75, v74);

      id v8 = v73;
      unsigned int SessionInfoReqID = v72;
      unint64_t v63 = 0x1E596F000;
    }
    else
    {
      uint64_t v76 = 0;
    }
  }
  else
  {
    uint64_t v76 = 0;
  }
  if (self->_linkIDToCandidatePairs)
  {
    long long v78 = objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v65, v24, v67);
    if (v78)
    {
      long long v80 = self->_linkIDToCandidatePairs;
      long long v81 = objc_msgSend_numberWithChar_(*(void **)(v25 + 3792), v77, v24, v79);
      double v82 = (id)CFDictionaryGetValue((CFDictionaryRef)v80, v81);
    }
    else
    {
      double v82 = 0;
    }
  }
  else
  {
    double v82 = 0;
  }
  char v188 = v9;
  if (!objc_msgSend_isSharedQRSession(v76, v65, v66, v67)
    || (objc_msgSend_isSharedQRSession(v82, v83, v84, v85) & 1) == 0)
  {
    long long v129 = objc_msgSend_GlobalLink(*(void **)(v63 + 2896), v83, v84, v85);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)id v190 = v76;
      *(_WORD *)&v190[8] = 2112;
      unsigned int v191 = v82;
      _os_log_impl(&dword_19D9BE000, v129, OS_LOG_TYPE_DEFAULT, "try to query with invalid candidate pairs: %@, %@ return", buf, 0x16u);
    }
    goto LABEL_51;
  }
  unsigned __int16 v86 = objc_msgSend_remote(v76, v83, v84, v85);
  unsigned int v185 = SessionInfoReqID;
  if (!objc_msgSend_external(v86, v87, v88, v89)) {
    goto LABEL_56;
  }
  unsigned int v93 = objc_msgSend_remote(v82, v90, v91, v92);
  if (!objc_msgSend_external(v93, v94, v95, v96))
  {
LABEL_55:

LABEL_56:
    goto LABEL_57;
  }
  id v184 = v8;
  uint64_t v100 = objc_msgSend_remote(v76, v97, v98, v99);
  int v104 = *(unsigned __int8 *)(objc_msgSend_external(v100, v101, v102, v103) + 1);
  unsigned int v108 = objc_msgSend_remote(v82, v105, v106, v107);
  if (v104 != *(unsigned __int8 *)(objc_msgSend_external(v108, v109, v110, v111) + 1))
  {

    id v8 = v184;
    goto LABEL_55;
  }
  long long v183 = objc_msgSend_remote(v76, v112, v113, v114);
  uint64_t v182 = objc_msgSend_external(v183, v115, v116, v117);
  long long v121 = objc_msgSend_remote(v82, v118, v119, v120);
  uint64_t v125 = objc_msgSend_external(v121, v122, v123, v124);
  LOBYTE(v182) = IsSameSA(v182, v125);

  id v8 = v184;
  if ((v182 & 1) == 0)
  {
    long long v129 = objc_msgSend_GlobalLink(*(void **)(v63 + 2896), v126, v127, v128);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      id v133 = objc_msgSend_remote(v76, v130, v131, v132);
      double v137 = objc_msgSend_remote(v82, v134, v135, v136);
      *(_DWORD *)buf = 138412546;
      *(void *)id v190 = v133;
      *(_WORD *)&v190[8] = 2112;
      unsigned int v191 = v137;
      double v138 = "linkID's server: %@ is different from linkIDToQuery's server: %@, return";
LABEL_63:
      _os_log_impl(&dword_19D9BE000, v129, OS_LOG_TYPE_DEFAULT, v138, buf, 0x16u);

      goto LABEL_51;
    }
    goto LABEL_51;
  }
LABEL_57:
  double v141 = objc_msgSend_sessionID(v76, v126, v127, v128);
  double v145 = objc_msgSend_sessionID(v82, v142, v143, v144);
  char isEqualToString = objc_msgSend_isEqualToString_(v141, v146, (uint64_t)v145, v147);

  if (isEqualToString)
  {
    if (!v76)
    {
      BOOL v139 = 0;
      goto LABEL_53;
    }
    long long v129 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-request-type", &unk_1EF028AB0);
    uint64_t v154 = objc_msgSend_numberWithChar_(NSNumber, v152, v24, v153);
    if (v154)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-link-id-to-query", v154);
      uint64_t v155 = v185;
    }
    else
    {
      uint64_t v155 = v185;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        sub_19DB7B450();
      }
    }

    double v164 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v162, v186, v163);
    if (v164)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-relay-link-id", v164);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7B6F4();
    }

    double v167 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v165, v155, v166);
    if (v167)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-request-id", v167);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7B4D4();
    }

    uint64_t v170 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v168, v187, v169);
    if (v170)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-generation-counter", v170);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7B66C();
    }

    if (v12
      && @"stream-info-published-streams"
      && (double v171 = (id)CFDictionaryGetValue(v12, @"stream-info-published-streams")) != 0)
    {
      uint64_t v172 = v171;
      CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-published-streams", v171);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7B5E4();
      if (!v12) {
        goto LABEL_89;
      }
    }
    else if (!v12)
    {
      goto LABEL_89;
    }
    if (@"stream-info-subscribed-streams")
    {
      id v173 = (id)CFDictionaryGetValue(v12, @"stream-info-subscribed-streams");
      if (v173)
      {
        long long v174 = v173;
        CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-subscribed-streams", v173);

LABEL_91:
        uint64_t v177 = (const char *)@"stream-info-max-concurrent-streams";
        if (@"stream-info-max-concurrent-streams")
        {
          double v178 = (id)CFDictionaryGetValue(v12, @"stream-info-max-concurrent-streams");
          if (v178)
          {
            double v179 = v178;
            CFDictionarySetValue((CFMutableDictionaryRef)v129, @"gl-option-sessioninfo-max-concurrent-streams", v178);
          }
        }
        goto LABEL_94;
      }
    }
LABEL_89:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      sub_19DB7B55C();
      if (v12) {
        goto LABEL_91;
      }
    }
    else if (v12)
    {
      goto LABEL_91;
    }
LABEL_94:
    if (objc_msgSend_isQUIC(v76, v177, v175, v176)) {
      objc_msgSend_sendQUICSessionInfoRequestWithOptions_(v76, v180, (uint64_t)v129, v181);
    }
    else {
      objc_msgSend_sendSessionInfoRequest_options_(v76, v180, 0, v181, v129);
    }
    BOOL v139 = 1;
    goto LABEL_52;
  }
  long long v129 = objc_msgSend_GlobalLink(*(void **)(v63 + 2896), v149, v150, v151);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    id v133 = objc_msgSend_sessionID(v76, v156, v157, v158);
    double v137 = objc_msgSend_sessionID(v82, v159, v160, v161);
    *(_DWORD *)buf = 138412546;
    *(void *)id v190 = v133;
    *(_WORD *)&v190[8] = 2112;
    unsigned int v191 = v137;
    double v138 = "linkID's session %@, linkIDToQuery's session: %@ are different, return";
    goto LABEL_63;
  }
LABEL_51:
  BOOL v139 = 0;
LABEL_52:

LABEL_53:
  return v139;
}

- (void)getSessionInfo:(id)a3 relaySessionID:(id)a4 requestType:(int64_t)a5 options:(id)a6
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  uint64_t v16 = v12;
  if (a5 == 2)
  {
    if (objc_msgSend__getSessionStreamInfo_relaySessionID_options_(self, v13, (uint64_t)v10, v15, v11, v12)) {
      goto LABEL_12;
    }
  }
  else if (a5 == 1)
  {
    char v17 = objc_msgSend_objectForKey_(v12, v13, @"gl-option-info-request-type", v15);
    uint64_t v21 = objc_msgSend_unsignedIntegerValue(v17, v18, v19, v20);

    if (v21 == 1)
    {
      if (objc_msgSend__sendInfoRequest_relaySessionID_(self, v22, (uint64_t)v10, v23, v11)) {
        goto LABEL_12;
      }
    }
    else if (objc_msgSend__getSessionParticipants_relaySessionID_options_(self, v22, (uint64_t)v10, v23, v11, v16))
    {
      goto LABEL_12;
    }
  }
  uint64_t v24 = objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 138412802;
    id v28 = v10;
    __int16 v29 = 2112;
    id v30 = v11;
    __int16 v31 = 1024;
    int v32 = a5;
    _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "get session info failed for group %@, session %@, request-type %d.", (uint8_t *)&v27, 0x1Cu);
  }

  objc_msgSend__notifySessionInfoReceived_relayGroupID_relaySessionID_status_(self, v25, 0, v26, v10, v11, 5);
LABEL_12:
}

- (void)updateSessionParticipants:(id)a3 relaySessionID:(id)a4 participants:(id)a5
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v37 = a5;
  double v13 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v38, 0.0, v46, 16);
  if (v15)
  {
    uint64_t v19 = v15;
    uint64_t v20 = *(void *)v39;
    *(void *)&long long v18 = 138412546;
    long long v36 = v18;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v39 != v20) {
          objc_enumerationMutation(v13);
        }
        int v22 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        double v23 = objc_msgSend_sessionID(v22, v16, v17, *(double *)&v18, v36);
        if (objc_msgSend_isEqualToString_(v23, v24, (uint64_t)v9, v25))
        {
          __int16 v29 = objc_msgSend_groupID(v22, v26, v27, v28);
          int isEqualToString = objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v8, v31);

          if (isEqualToString)
          {
            uint64_t v33 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, *(double *)&v18);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v36;
              id v43 = v8;
              __int16 v44 = 2112;
              id v45 = v9;
              _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "updateSessionParticipants for group %@, session %@.", buf, 0x16u);
            }

            objc_msgSend_updateParticipantIDMap_(v22, v34, (uint64_t)v37, v35);
          }
        }
        else
        {
        }
      }
      uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v38, *(double *)&v18, v46, 16);
    }
    while (v19);
  }
}

- (void)registerPluginWithOptions:(id)a3 relayGroupID:(id)a4
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = (const __CFDictionary *)a3;
  id v8 = a4;
  if (self->_linkIDToCandidatePairs)
  {
    uint64_t v11 = objc_msgSend_numberWithChar_(NSNumber, v7, self->_linkIDForPlugin, v9);
    if (v11)
    {
      CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
      uint64_t v14 = objc_msgSend_numberWithChar_(NSNumber, v10, self->_linkIDForPlugin, v12);
      uint64_t v15 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  Value = 0;
  if (v6 && @"gl-option-plugin-name") {
    Value = CFDictionaryGetValue(v6, @"gl-option-plugin-name");
  }
  objc_msgSend_setObject_forKey_(self->_pluginNameToPluginOptionsDict, v7, (uint64_t)v6, v9, Value);
  uint64_t v20 = objc_msgSend_groupID(v15, v17, v18, v19);
  if (objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v8, v22)
    && objc_msgSend_state(v15, v23, v24, v25) == 4)
  {
    isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v15, v26, v27, v28);

    if (isSharedQRSession)
    {
      uint64_t v33 = objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        int v44 = 138412546;
        id v45 = v8;
        __int16 v46 = 2112;
        CFDictionaryRef v47 = v6;
        _os_log_impl(&dword_19D9BE000, v33, OS_LOG_TYPE_DEFAULT, "Register plugin for group %@ and options %@", (uint8_t *)&v44, 0x16u);
      }

      if (objc_msgSend_isQUIC(v15, v34, v35, v36)) {
        objc_msgSend_sendQUICPluginRegistrationRequestWithOptions_(v15, v37, (uint64_t)v6, v38);
      }
      else {
        objc_msgSend_sendQRPluginRegistrationRequest_options_(v15, v37, 0, v38, v6);
      }
      goto LABEL_21;
    }
  }
  else
  {
  }
  long long v39 = objc_msgSend_GlobalLink(IDSFoundationLog, v30, v31, v32);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    id v42 = objc_msgSend_objectForKeyedSubscript_(v6, v40, @"gl-option-plugin-name", v41);
    linkIDForPlugiuint64_t n = self->_linkIDForPlugin;
    int v44 = 138412802;
    id v45 = v42;
    __int16 v46 = 2112;
    CFDictionaryRef v47 = (const __CFDictionary *)v8;
    __int16 v48 = 1024;
    int v49 = linkIDForPlugin;
    _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "FAILED: Register plugin %@ for group %@. linkID %d is not for a valid link", (uint8_t *)&v44, 0x1Cu);
  }
LABEL_21:
}

- (void)setForceTCPFallbackOnWiFi:(BOOL)a3
{
  BOOL v4 = a3;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138412290;
    double v9 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "Setting ForceTCPFallbackOnWiFi %@", (uint8_t *)&v8, 0xCu);
  }

  self->_forceTCPFallbackOnWiFuint64_t i = v4;
}

- (void)setForceTCPFallbackOnCell:(BOOL)a3
{
  BOOL v4 = a3;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = objc_msgSend_GlobalLink(IDSFoundationLog, a2, a3, v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138412290;
    double v9 = v7;
    _os_log_impl(&dword_19D9BE000, v6, OS_LOG_TYPE_DEFAULT, "Setting ForceTCPFallbackOnCell %@", (uint8_t *)&v8, 0xCu);
  }

  self->_BOOL forceTCPFallbackOnCell = v4;
}

- (id)_findVirtualCandidatePair:(id)a3
{
  return 0;
}

- (unint64_t)createAliasForParticipantID:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v10, v11, v12);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  double v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v41, v15, v49, 16);
  if (v16)
  {
    uint64_t v20 = v16;
    uint64_t v21 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v42 != v21) {
          objc_enumerationMutation(v13);
        }
        double v23 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        uint64_t v24 = objc_msgSend_groupID(v23, v17, v18, v19, (void)v41);
        if (objc_msgSend_isEqualToString_(v24, v25, (uint64_t)v9, v26)
          && objc_msgSend_state(v23, v27, v28, v29) == 4)
        {
          isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v23, v30, v31, v32);

          if (isSharedQRSession)
          {
            uint64_t AliasForParticipantID_salt = objc_msgSend_createAliasForParticipantID_salt_(v23, v17, a3, v19, v8);
            if (AliasForParticipantID_salt)
            {
              unint64_t v38 = AliasForParticipantID_salt;
              long long v39 = v13;
              goto LABEL_17;
            }
          }
        }
        else
        {
        }
      }
      uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v17, (uint64_t)&v41, v19, v49, 16);
    }
    while (v20);
  }

  long long v39 = objc_msgSend_GlobalLink(IDSFoundationLog, v35, v36, v37);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    unint64_t v46 = a3;
    __int16 v47 = 2112;
    id v48 = v8;
    _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "createAliasForParticipantID could not find participantID %llu salt %@", buf, 0x16u);
  }
  unint64_t v38 = 0;
LABEL_17:

  return v38;
}

- (unint64_t)participantIDForAlias:(unint64_t)a3 salt:(id)a4 relayGroupID:(id)a5
{
  unint64_t v56 = a3;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v57 = (__CFString *)a4;
  id v7 = a5;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v8, v9, v10);
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v58, v13, v68, 16);
  if (!v14) {
    goto LABEL_20;
  }
  uint64_t v17 = v14;
  uint64_t v18 = *(void *)v59;
  uint64_t v19 = 134218242;
  do
  {
    for (uint64_t i = 0; i != v17; ++i)
    {
      if (*(void *)v59 != v18) {
        objc_enumerationMutation(v11);
      }
      uint64_t v21 = *(void **)(*((void *)&v58 + 1) + 8 * i);
      double v22 = objc_msgSend_groupID(v21, v15, v16, *(double *)&v19, v56);
      if (!objc_msgSend_isEqualToString_(v22, v23, (uint64_t)v7, v24)
        || objc_msgSend_state(v21, v25, v26, v27) != 4)
      {

LABEL_12:
        uint64_t v36 = objc_msgSend_groupID(v21, v32, v33, v34);
        int isEqualToString = objc_msgSend_isEqualToString_(v36, v37, (uint64_t)v7, v38);

        if (isEqualToString)
        {
          long long v40 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, *(double *)&v19);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v44 = objc_msgSend_state(v21, v41, v42, v43);
            isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v21, v45, v46, v47);
            *(_DWORD *)buf = 134218242;
            int v49 = @"NO";
            if (isSharedQRSession) {
              int v49 = @"YES";
            }
            unint64_t v63 = v44;
            __int16 v64 = 2112;
            uint64_t v65 = v49;
            _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "participantIDForAlias: found candidate pair with state: %lu, isSharedSession: %@", buf, 0x16u);
          }
        }
        continue;
      }
      int v31 = objc_msgSend_isSharedQRSession(v21, v28, v29, v30);

      if (!v31) {
        goto LABEL_12;
      }
      uint64_t v35 = objc_msgSend_participantIDForAlias_salt_(v21, v32, v56, v34, v57);
      if (v35)
      {
        unint64_t v53 = v35;
        double v54 = v11;
        goto LABEL_23;
      }
    }
    uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v15, (uint64_t)&v58, *(double *)&v19, v68, 16);
  }
  while (v17);
LABEL_20:

  double v54 = objc_msgSend_GlobalLink(IDSFoundationLog, v50, v51, v52);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    unint64_t v63 = v56;
    __int16 v64 = 2112;
    uint64_t v65 = v57;
    __int16 v66 = 2112;
    id v67 = v7;
    _os_log_impl(&dword_19D9BE000, v54, OS_LOG_TYPE_DEFAULT, "participantIDForAlias could not find candidate pair that matches the alias %llu salt %@, for %@", buf, 0x20u);
  }
  unint64_t v53 = 0;
LABEL_23:

  return v53;
}

- (BOOL)link:(id)a3 didReceivePacket:(id *)a4 fromDeviceUniqueID:(id)a5 cbuuid:(id)a6
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  if (a4)
  {
    if (!a4->var2 && a4->var34 == 200)
    {
      LOBYTE(a4) = 0;
      goto LABEL_186;
    }
    int64x2_t v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = a4->var2;
    *(int64x2_t *)&self->_totalBytesReceived = vaddq_s64(*(int64x2_t *)&self->_totalBytesReceived, v13);
    double v16 = ids_monotonic_time();
    double v17 = v16;
    if (a4->var13)
    {
      uint64_t v18 = objc_msgSend_headerOverhead(v10, v14, v15, v16);
      char v20 = objc_msgSend__processProtoPacket_fromDeviceUniqueID_cbuuid_arrivalTime_headerOverhead_(self, v19, (uint64_t)a4, v17, v11, v12, v18);
LABEL_7:
      LOBYTE(a4) = v20;
      goto LABEL_186;
    }
    uint64_t var35 = a4->var35;
    if (a4->var2 > 3 || a4->var35)
    {
      if (a4->var35)
      {
        if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_channelNumberList, a4->var35))
        {
          BOOL v185 = (var35 & 0xF0) == 96;
          if (StunUtilProcessIncomingChannelDataWithoutChannelHeader((unsigned __int16 **)a4, (var35 & 0xF0) == 96, LOWORD(a4->var2)))goto LABEL_13; {
          goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t var35 = *(unsigned __int16 *)a4->var0;
        if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_channelNumberList, *(unsigned __int16 *)a4->var0))
        {
          BOOL v185 = (var35 & 0xF0) == 96;
          if (StunUtilProcessIncomingChannelData((unsigned __int16 **)a4, (var35 & 0xF0) == 96, v23, v24))
          {
LABEL_13:
            if (a4->var23 >= 1 && a4->var24[0].var19)
            {
              if (a4->var24[0].var14 < 1) {
                uint64_t v25 = 0;
              }
              else {
                uint64_t v25 = a4->var24[0].var15[0];
              }
              unsigned int v97 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v25;
                _os_log_impl(&dword_19D9BE000, v97, OS_LOG_TYPE_DEFAULT, "received command message with remote relay linkID %u", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v176 = v25;
                  _IDSLogTransport(@"GL", @"IDS", @"received command message with remote relay linkID %u");
                  if (_IDSShouldLog())
                  {
                    uint64_t v176 = v25;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"received command message with remote relay linkID %u");
                  }
                }
              }
              char v20 = objc_msgSend__processChannelDataCommandMessage_remoteRelayLinkID_channelNumber_fromDeviceUniqueID_cbuuid_arrivalTime_(self, v98, (uint64_t)a4, v17, v25, var35, v11, v12, v176);
              goto LABEL_7;
            }
            if (IDSSimpleUInt16List_HasItem((uint64_t)&self->_reallocChannelList, var35)) {
              objc_msgSend__processReallocChannelData_channelNumber_fromDeviceUniqueID_cbuuid_arrivalTime_(self, v92, (uint64_t)a4, v17, var35, v11, v12);
            }
            goto LABEL_40;
          }
LABEL_19:
          uint64_t v26 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            int64_t var2 = a4->var2;
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = var2;
            _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "drop channel data (%zdB).", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"drop channel data (%zdB).");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"drop channel data (%zdB).");
              }
            }
          }
          goto LABEL_185;
        }
      }
      if ((var35 & 0xC0) != 0)
      {
        if (self->_shouldProcessBasebandNotification && a4->var2 >= 4 && *(_DWORD *)a4->var0 == -272716322)
        {
          LODWORD(var35) = self->_basebandPacketChannelNumber;
          uint64_t v28 = OSLogHandleForIDSCategory();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEBUG, "receive baseband notification packet.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
            _IDSLogV(1, @"IDSFoundation", @"GL", @"receive baseband notification packet.");
          }
          BOOL v185 = 0;
          int v29 = 1;
          goto LABEL_41;
        }
      }
      else if (a4->var2 >= 20 && *((_DWORD *)a4->var0 + 1) == 1118048801)
      {
        uint64_t v30 = objc_msgSend_headerOverhead(v10, v22, v23, v24);
        objc_msgSend__processStunPacket_fromDeviceUniqueID_cbuuid_arrivalTime_headerOverhead_(self, v31, (uint64_t)a4, v17, v11, v12, v30);
        LODWORD(var35) = 0;
        BOOL v185 = 0;
        int v29 = 0;
        int v32 = 0;
        goto LABEL_42;
      }
      LODWORD(var35) = 0;
    }
    BOOL v185 = 0;
LABEL_40:
    int v29 = 0;
LABEL_41:
    int v32 = 1;
LABEL_42:
    uint64_t v33 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
    double v37 = v33;
    if (v33)
    {
      BOOL v38 = IsSameSA((uint64_t)(v33 + 1), (uint64_t)&a4->var18);
      if (v38) {
        BOOL v38 = IsSameSA((uint64_t)(v37 + 17), (uint64_t)&a4->var19);
      }
      if (!v32) {
        goto LABEL_185;
      }
    }
    else
    {
      BOOL v38 = 0;
      if (!v32)
      {
LABEL_185:
        LOBYTE(a4) = 1;
        goto LABEL_186;
      }
    }
    int var14 = a4->var24[0].var14;
    if (v38 && *((unsigned __int16 *)v37 + 132) == var35 && var14 <= 0)
    {
      if (v37) {
        char v40 = v29;
      }
      else {
        char v40 = 1;
      }
      if ((v40 & 1) == 0) {
        v37[36] = v17;
      }
      if (self->_supportChannelData)
      {
        int v41 = *(_DWORD *)v37;
        a4->uint64_t var25 = *(_DWORD *)v37;
        if (v185)
        {
          if (self->_linkIDToCandidatePairs)
          {
            double v43 = objc_msgSend_numberWithChar_(NSNumber, v34, (char)v41, v36);
            if (v43)
            {
              CFDictionaryRef linkIDToCandidatePairs = self->_linkIDToCandidatePairs;
              uint64_t v46 = objc_msgSend_numberWithChar_(NSNumber, v42, a4->var25, v44);
              double v47 = (id)CFDictionaryGetValue((CFDictionaryRef)linkIDToCandidatePairs, v46);
            }
            else
            {
              double v47 = 0;
            }

            double v99 = v47;
          }
          else
          {
            double v99 = 0;
          }
          id key = v99;
          char v108 = objc_msgSend_capabilityFlags(v99, v34, v35, v36);
          int var23 = a4->var23;
          if (var23 >= 1)
          {
            char v110 = v108;
            uint64_t v111 = 0;
            uint64_t v112 = 536;
            do
            {
              if (v110 & 8) != 0 && (*((unsigned char *)&a4->var0 + v112))
              {
                StunUtilGetMappedParticipantID((uint64_t)a4, v111, key, 1);
                int var23 = a4->var23;
              }
              ++v111;
              v112 += 96;
            }
            while (v111 < var23);
          }
          char v183 = -1;
LABEL_131:

          char v48 = v183;
          if ((v29 & 1) == 0) {
            goto LABEL_132;
          }
          goto LABEL_63;
        }
      }
LABEL_62:
      char v48 = -1;
      if ((v29 & 1) == 0)
      {
LABEL_132:
        char v184 = v48;
        uint64_t v113 = (unsigned int *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, a4->var25);
        unsigned int v115 = (const char *)v184;
        if ((int)v115 < 1) {
          uint64_t v116 = 0;
        }
        else {
          uint64_t v116 = (unsigned int *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, (int)v115);
        }
        if (v116) {
          double v117 = v116;
        }
        else {
          double v117 = v113;
        }
        if (!v117[77])
        {
          long long v118 = self->_linkIDToCandidatePairs;
          uint64_t v119 = objc_msgSend_numberWithInt_(NSNumber, v115, *v117, v114);
          double v122 = objc_msgSend_objectForKeyedSubscript_(v118, v120, (uint64_t)v119, v121);

          if (v122)
          {
            long long v126 = objc_msgSend_linkMetrics(v122, v123, v124, v125);
            objc_msgSend_event_(v126, v127, @"glr", v128);
          }
        }
        if (v116) {
          ++v116[77];
        }
        if (v113) {
          ++v113[77];
        }
        kdebug_trace();
        double firstDataReceivedTime = self->_firstDataReceivedTime;
        if (firstDataReceivedTime == 0.0 && a4->var2 >= 1)
        {
          self->_reportDataReceivedTime = 1;
          self->_double firstDataReceivedTime = v17;
          double v132 = objc_msgSend_GlobalLink(IDSFoundationLog, v129, v130, firstDataReceivedTime);
          if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
          {
            if (self->_reportClientPacketTime) {
              id v133 = @"YES";
            }
            else {
              id v133 = @"NO";
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v133;
            _os_log_impl(&dword_19D9BE000, v132, OS_LOG_TYPE_DEFAULT, "didReceivePacket: _firstDataReceivedTime, _reportClientPacketTime: %@", buf, 0xCu);
          }

          if (self->_reportClientPacketTime)
          {
            objc_msgSend__reportSessionSetupTime(self, v129, v130, firstDataReceivedTime);
            self->_reportDataReceivedTime = 0;
          }
        }
        if (v185)
        {
          if (self->_linkIDToCandidatePairs)
          {
            uint64_t v135 = objc_msgSend_numberWithChar_(NSNumber, v129, a4->var25, firstDataReceivedTime);
            if (v135)
            {
              double v137 = self->_linkIDToCandidatePairs;
              double v138 = objc_msgSend_numberWithChar_(NSNumber, v134, a4->var25, v136);
              BOOL v139 = (id)CFDictionaryGetValue((CFDictionaryRef)v137, v138);
            }
            else
            {
              BOOL v139 = 0;
            }
          }
          else
          {
            BOOL v139 = 0;
          }
          if ((a4->var24[0].var20 & 0x400) != 0)
          {
            var0 = a4->var0;
            int64_t v141 = a4->var2;
            uint64_t v142 = objc_msgSend_hbhDecKey(v139, v129, v130, firstDataReceivedTime);
            uint64_t v143 = IDSHBHDecryptDataWithKey((uint64_t)var0, v141, v142);

            if (!v143)
            {
              uint64_t v175 = objc_msgSend_GlobalLink(IDSFoundationLog, v144, v145, v146);
              if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR)) {
                sub_19DB7B77C();
              }

              goto LABEL_185;
            }
            a4->int64_t var2 = objc_msgSend_length(v143, v144, v145, v146);
            double v147 = a4->var0;
            id v148 = v143;
            uint64_t v152 = (const void *)objc_msgSend_bytes(v148, v149, v150, v151);
            memcpy(v147, v152, a4->var2);
          }
        }
        uint64_t var25 = a4->var25;
        double v154 = ids_monotonic_time();
        objc_msgSend_reportLinkMetricsForLinkID_lastPacketReceivedTime_lastPacketSentTime_(self, v155, var25, v154, 0.0);
        double v159 = objc_msgSend_GlobalLink(IDSFoundationLog, v156, v157, v158);
        BOOL v160 = os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT);
        if (v184 == -1)
        {
          if (v160)
          {
            int64_t v166 = a4->var2;
            if (var35) {
              int v167 = 82;
            }
            else {
              int v167 = 80;
            }
            int v168 = a4->var25;
            double v169 = "qpod";
            unint64_t var36 = a4->var36;
            if (!a4->var37) {
              double v169 = "udp";
            }
            *(_DWORD *)buf = 134219010;
            *(void *)&uint8_t buf[4] = v166;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v167;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v168;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = v169;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = var36;
            _os_log_impl(&dword_19D9BE000, v159, OS_LOG_TYPE_DEFAULT, "GLR %zdB (%c %d — %s [C%llu])", buf, 0x2Cu);
          }

          goto LABEL_184;
        }
        if (v160)
        {
          int64_t v161 = a4->var2;
          int v162 = a4->var25;
          if (var35) {
            int v163 = 82;
          }
          else {
            int v163 = 80;
          }
          double v164 = "qpod";
          unint64_t v165 = a4->var36;
          if (!a4->var37) {
            double v164 = "udp";
          }
          *(_DWORD *)buf = 134219266;
          *(void *)&uint8_t buf[4] = v161;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v163;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v184;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = v162;
          *(_WORD *)&buf[30] = 2080;
          *(void *)&unsigned char buf[32] = v164;
          *(_WORD *)&buf[40] = 2048;
          *(void *)&buf[42] = v165;
          _os_log_impl(&dword_19D9BE000, v159, OS_LOG_TYPE_DEFAULT, "GLR %zdB (%c %d/%d — %s [C%llu])", buf, 0x32u);
        }

        char v48 = v184;
LABEL_175:
        a4->uint64_t var25 = v48;
LABEL_184:
        a4->var6 = 1;
        a4->var28 = v17;
        id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didReceivePacket_fromDeviceUniqueID_cbuuid_(WeakRetained, v172, (uint64_t)self, v173, a4, v11, v12);

        goto LABEL_185;
      }
LABEL_63:
      if (v48 == -1) {
        goto LABEL_184;
      }
      goto LABEL_175;
    }
    if (a4->var15) {
      goto LABEL_62;
    }
    __dst = &a4->var18;
    p_var19 = &a4->var19;
    id key = channelForStunCandidatePair((uint64_t)&a4->var18, (uint64_t)&a4->var19, var35);
    channelToCandidatePairs = self->_channelToCandidatePairs;
    if (channelToCandidatePairs)
    {
      if (key)
      {
        CFDictionaryRef v52 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, key);
        if (v52)
        {
          if ((v29 & 1) == 0)
          {
            CFDictionaryRef v54 = v52;
            objc_msgSend_setLastIncomingPacketTime_(v52, v49, v53, v17);
            CFDictionaryRef v52 = v54;
          }
          goto LABEL_70;
        }
      }
    }
    if (v29 && self->_basebandPacketLinkID)
    {
      if (!self->_linkIDToCandidatePairs) {
        goto LABEL_86;
      }
      uint64_t v69 = objc_msgSend_numberWithChar_(NSNumber, v49, self->_basebandPacketLinkID, v50);
      if (!v69) {
        goto LABEL_86;
      }
      CFDictionaryRef theDictb = (const __CFDictionary *)self->_linkIDToCandidatePairs;
      double v71 = objc_msgSend_numberWithChar_(NSNumber, v68, self->_basebandPacketLinkID, v70);
      CFDictionaryRef theDicta = (id)CFDictionaryGetValue(theDictb, v71);

      if (theDicta)
      {
        CFDictionaryRef v75 = objc_msgSend_remote(theDicta, v72, v73, v74);
        uint64_t v79 = objc_msgSend_external(v75, v76, v77, v78);
        if (IsSameSA(v79, (uint64_t)p_var19))
        {
          BOOL v83 = objc_msgSend_channelNumber(theDicta, v80, v81, v82) == var35;

          if (v83)
          {
            uint64_t v87 = objc_msgSend_local(theDicta, v84, v85, v86);
            uint64_t v91 = (unsigned __int8 *)objc_msgSend_address(v87, v88, v89, v90);

            memcpy(__dst, v91, *v91);
            a4->uint64_t var25 = self->_basebandPacketLinkID;

            CFDictionaryRef v52 = 0;
LABEL_70:
            if (!self->_supportChannelData)
            {
              char v183 = -1;
LABEL_121:

              goto LABEL_131;
            }
            CFDictionaryRef theDict = v52;
            a4->uint64_t var25 = objc_msgSend_linkID(v52, v49, v53, v50);
            if (var14 < 1)
            {
              char v67 = -1;
LABEL_113:
              CFDictionaryRef v52 = theDict;
              char v183 = v67;
              if (v185)
              {
                char v103 = objc_msgSend_capabilityFlags(theDict, v55, v56, v57);
                int v104 = a4->var23;
                if (v104 >= 1)
                {
                  char v105 = v103;
                  uint64_t v106 = 0;
                  uint64_t v107 = 536;
                  do
                  {
                    if (v105 & 8) != 0 && (*((unsigned char *)&a4->var0 + v107))
                    {
                      StunUtilGetMappedParticipantID((uint64_t)a4, v106, theDict, 1);
                      int v104 = a4->var23;
                    }
                    ++v106;
                    v107 += 96;
                  }
                  while (v106 < v104);
                }
                CFDictionaryRef v52 = theDict;
              }
              goto LABEL_121;
            }
            unsigned int v58 = objc_msgSend_relayLinkID(theDict, v55, v56, v57);
            long long v60 = localRemoteRelayLinkIDForVirtualStunCandidatePair(v58, (const char *)a4->var24[0].var15[0], v59);
            localRemoteRelayLinkIDToVirtualCandidatePairs = self->_localRemoteRelayLinkIDToVirtualCandidatePairs;
            if (localRemoteRelayLinkIDToVirtualCandidatePairs)
            {
              if (v60)
              {
                double v62 = (id)CFDictionaryGetValue((CFDictionaryRef)localRemoteRelayLinkIDToVirtualCandidatePairs, v60);
                if (v62)
                {
                  __int16 v66 = v62;
                  char v67 = objc_msgSend_linkID(v62, v63, v64, v65);

                  goto LABEL_113;
                }
              }
            }
            *(void *)&long long v100 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v205 = v100;
            long long v206 = v100;
            long long v203 = v100;
            long long v204 = v100;
            *(_OWORD *)&unsigned char buf[32] = v100;
            *(_OWORD *)&uint8_t buf[48] = v100;
            *(_OWORD *)buf = v100;
            *(_OWORD *)&uint8_t buf[16] = v100;
            long long v200 = v100;
            long long v201 = v100;
            long long v198 = v100;
            long long v199 = v100;
            long long v196 = v100;
            long long v197 = v100;
            *(_OWORD *)__str = v100;
            long long v195 = v100;
            double v101 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
            {
              int64_t v102 = a4->var2;
              *(_DWORD *)unsigned int v186 = 134218754;
              int64_t v187 = v102;
              __int16 v188 = 2112;
              double v189 = key;
              __int16 v190 = 2080;
              unsigned int v191 = SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
              __int16 v192 = 2080;
              __int16 v193 = SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
              _os_log_impl(&dword_19D9BE000, v101, OS_LOG_TYPE_DEFAULT, "No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]", v186, 0x2Au);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
                SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
                _IDSLogTransport(@"GL", @"IDS", @"No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]");
                if (_IDSShouldLog())
                {
                  SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
                  SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"No valid virtual candidate pair. Drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]");
                }
              }
            }

            goto LABEL_111;
          }
        }
        else
        {
        }
        CFDictionaryRef v93 = theDicta;
      }
      else
      {
LABEL_86:
        CFDictionaryRef v93 = 0;
      }
    }
    *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v205 = v94;
    long long v206 = v94;
    long long v203 = v94;
    long long v204 = v94;
    *(_OWORD *)&unsigned char buf[32] = v94;
    *(_OWORD *)&uint8_t buf[48] = v94;
    *(_OWORD *)buf = v94;
    *(_OWORD *)&uint8_t buf[16] = v94;
    long long v200 = v94;
    long long v201 = v94;
    long long v198 = v94;
    long long v199 = v94;
    long long v196 = v94;
    long long v197 = v94;
    *(_OWORD *)__str = v94;
    long long v195 = v94;
    uint64_t v95 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      int64_t v96 = a4->var2;
      *(_DWORD *)unsigned int v186 = 134218754;
      int64_t v187 = v96;
      __int16 v188 = 2112;
      double v189 = key;
      __int16 v190 = 2080;
      unsigned int v191 = SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
      __int16 v192 = 2080;
      __int16 v193 = SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
      _os_log_impl(&dword_19D9BE000, v95, OS_LOG_TYPE_DEFAULT, "drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]", v186, 0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
        SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
        _IDSLogTransport(@"GL", @"IDS", @"drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]");
        if (_IDSShouldLog())
        {
          SAToIPPortString(__str, 0x80uLL, (uint64_t)__dst);
          SAToIPPortString(buf, 0x80uLL, (uint64_t)p_var19);
          _IDSLogV(0, @"IDSFoundation", @"GL", @"drop incoming packet %zuB on channel %@, local address [%s], remote address [%s]");
        }
      }
    }
LABEL_111:

    goto LABEL_185;
  }
LABEL_186:

  return (char)a4;
}

- (void)link:(id)a3 didMitigateCollision:(BOOL)a4
{
}

- (void)linkTransactionIDMismatchDetected:(id)a3
{
  objc_msgSend_transactionIDMismatchDetected(self->_metricsCollector, a2, (uint64_t)a3, v3);
  objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v5, (uint64_t)&stru_1EEFDAD58, v6, @"NWLinkError", @"transactionIDMismatch", 15);
}

- (void)link:(id)a3 didFailConnectionOfType:(id)a4
{
}

- (BOOL)_qrLinkLimitExceededWithNewLinkType:(unsigned __int8)a3 cellularRelayLinkCount:(unsigned __int16)a4 wifiRelayLinkCount:(unsigned __int16)a5
{
  if (self->_reduceRelayLinkCreation || self->_reduceCellularUsage) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = 8;
  }
  if (a5 + a4 >= v5) {
    return 1;
  }
  BOOL v6 = a3 == 4 || a3 == 8;
  if (v6 && a4 < 2u) {
    return 0;
  }
  return (a3 - 3) < 0xFFFFFFFE || a5 > 1u;
}

- (unsigned)_getNewLinkType:(id)a3 remoteInterface:(int *)a4
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  id v119 = a3;
  uint64_t v116 = a4;
  *a4 = 0;
  BOOL v6 = GLUtilGetRemainingInterfaces(self->_interfaceAddressArray);
  id v8 = v6;
  if (!v6)
  {
    LOBYTE(v19) = 0;
    goto LABEL_82;
  }
  long long v130 = 0u;
  long long v131 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v128, 0.0, v139, 16);
  if (v9)
  {
    uint64_t v13 = v9;
    int v118 = 0;
    uint64_t v14 = *(void *)v129;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v129 != v14) {
          objc_enumerationMutation(v8);
        }
        double v16 = *(void **)(*((void *)&v128 + 1) + 8 * i);
        double v17 = objc_msgSend_delegatedName(v16, v10, v11, v12);

        if (!v17)
        {
          if (objc_msgSend_isCellular(v16, v10, v11, v12)) {
            int v18 = 1;
          }
          else {
            int v18 = 2;
          }
          v118 |= v18;
        }
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v128, v12, v139, 16);
    }
    while (v13);
  }
  else
  {
    int v118 = 0;
  }
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  char v20 = self->_remoteCandidateList;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v124, v22, v138, 16);
  if (v23)
  {
    uint64_t v27 = v23;
    uint64_t v28 = *(void *)v125;
    do
    {
      for (uint64_t j = 0; j != v27; ++j)
      {
        if (*(void *)v125 != v28) {
          objc_enumerationMutation(v20);
        }
        uint64_t v30 = *(void **)(*((void *)&v124 + 1) + 8 * j);
        if ((objc_msgSend_linkFlags(v30, v24, v25, v26) & 4) == 0)
        {
          if (objc_msgSend_isCellularStunCandidate(v30, v24, v25, v26)) {
            int v31 = 1;
          }
          else {
            int v31 = 2;
          }
          *v116 |= v31;
        }
      }
      uint64_t v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v24, (uint64_t)&v124, v26, v138, 16);
    }
    while (v27);
  }
  double v114 = v8;

  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  unsigned int v115 = self;
  double v34 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v32, v33, 0.0);
  uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v35, (uint64_t)&v120, v36, v137, 16);
  if (!v37)
  {
    unsigned __int16 v117 = 0;
    unsigned __int16 v42 = 0;
    unsigned __int8 v43 = 0;
    goto LABEL_65;
  }
  uint64_t v41 = v37;
  unsigned __int16 v117 = 0;
  unsigned __int16 v42 = 0;
  unsigned __int8 v43 = 0;
  uint64_t v44 = *(void *)v121;
  do
  {
    uint64_t v45 = 0;
    do
    {
      if (*(void *)v121 != v44) {
        objc_enumerationMutation(v34);
      }
      uint64_t v46 = *(void **)(*((void *)&v120 + 1) + 8 * v45);
      uint64_t v47 = objc_msgSend_state(v46, v38, v39, v40);
      int isRelayStunCandidatePair = objc_msgSend_isRelayStunCandidatePair(v46, v48, v49, v50);
      __int16 v52 = isRelayStunCandidatePair;
      if (v119)
      {
        if (v47 == 4) {
          int v53 = isRelayStunCandidatePair;
        }
        else {
          int v53 = 0;
        }
        if (v53 != 1) {
          goto LABEL_55;
        }
        CFDictionaryRef v54 = objc_msgSend_sessionID(v46, v38, v39, v40);
        char isEqualToString = objc_msgSend_isEqualToString_(v119, v55, (uint64_t)v54, v56);

        if ((isEqualToString & 1) == 0) {
          goto LABEL_55;
        }
      }
      else if (isRelayStunCandidatePair)
      {
        if (v47 != 4) {
          goto LABEL_55;
        }
      }
      else if (v47 != 3)
      {
        goto LABEL_55;
      }
      unsigned int v58 = objc_msgSend_local(v46, v38, v39, v40);
      int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v58, v59, v60, v61);

      __int16 v66 = objc_msgSend_remote(v46, v63, v64, v65);
      int v70 = objc_msgSend_isCellularStunCandidate(v66, v67, v68, v69);

      if (v70) {
        char v71 = 8;
      }
      else {
        char v71 = 4;
      }
      if (v70) {
        char v72 = 2;
      }
      else {
        char v72 = 1;
      }
      if (isCellularStunCandidate) {
        __int16 v73 = v52;
      }
      else {
        __int16 v73 = 0;
      }
      v117 += v73;
      if (isCellularStunCandidate) {
        __int16 v74 = 0;
      }
      else {
        __int16 v74 = v52;
      }
      v42 += v74;
      if (!isCellularStunCandidate) {
        char v71 = v72;
      }
      v43 |= v71;
LABEL_55:
      ++v45;
    }
    while (v41 != v45);
    uint64_t v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v34, v38, (uint64_t)&v120, v40, v137, 16);
    uint64_t v41 = v75;
  }
  while (v75);
LABEL_65:

  uint64_t v79 = objc_msgSend_GlobalLink(IDSFoundationLog, v76, v77, v78);
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    long long v80 = GLUtilInterfaceTypeListToString(v118);
    uint64_t v81 = GLUtilInterfaceTypeListToString(*v116);
    double v82 = GLUtilLinkTypeListToString(v43);
    *(_DWORD *)buf = 138412802;
    *(void *)id v133 = v80;
    *(_WORD *)&v133[8] = 2112;
    uint64_t v134 = v81;
    __int16 v135 = 2112;
    double v136 = v82;
    _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "current interface types L:%@, R:%@, link types: %@.", buf, 0x20u);
  }
  retryCountPerLinkuint64_t Type = v115->_retryCountPerLinkType;
  if (!retryCountPerLinkType)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v85 = v115->_retryCountPerLinkType;
    v115->_retryCountPerLinkuint64_t Type = (NSMutableDictionary *)Mutable;

    retryCountPerLinkuint64_t Type = v115->_retryCountPerLinkType;
  }
  uint64_t v19 = GLUtilNewQRLinkType(v43, v118, *v116, retryCountPerLinkType);
  if (v19)
  {
    if (objc_msgSend__qrLinkLimitExceededWithNewLinkType_cellularRelayLinkCount_wifiRelayLinkCount_(v115, v86, v19, v88, v117, v42))
    {
      double v92 = objc_msgSend_GlobalLink(IDSFoundationLog, v89, v90, v91);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)id v133 = v117;
        *(_WORD *)&v133[4] = 1024;
        *(_DWORD *)&v133[6] = v42;
        CFDictionaryRef v93 = "skip set up new QR link, exceeded limit cellularLinkcount: %d wifiLinkCount: %d";
        long long v94 = v92;
        uint32_t v95 = 14;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    int64_t v96 = v115->_retryCountPerLinkType;
    unsigned int v97 = objc_msgSend_numberWithInt_(NSNumber, v89, v19, v91);
    double v92 = objc_msgSend_objectForKey_(v96, v98, (uint64_t)v97, v99);

    if (v92)
    {
      uint64_t v103 = objc_msgSend_intValue(v92, v100, v101, v102) + 1;
      int v104 = v115->_retryCountPerLinkType;
      objc_msgSend_numberWithInt_(NSNumber, v105, v103, v106);
    }
    else
    {
      int v104 = v115->_retryCountPerLinkType;
      objc_msgSend_numberWithInt_(NSNumber, v100, 1, v102);
    uint64_t v107 = };
    char v110 = objc_msgSend_numberWithInt_(NSNumber, v108, v19, v109);
    objc_msgSend_setObject_forKey_(v104, v111, (uint64_t)v107, v112, v110);
  }
  else
  {
    double v92 = objc_msgSend_GlobalLink(IDSFoundationLog, v86, v87, v88);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      CFDictionaryRef v93 = "set up new QR link is not needed.";
      long long v94 = v92;
      uint32_t v95 = 2;
LABEL_75:
      _os_log_impl(&dword_19D9BE000, v94, OS_LOG_TYPE_DEFAULT, v93, buf, v95);
LABEL_76:
      LOBYTE(v19) = 0;
    }
  }

  id v8 = v114;
LABEL_82:

  return v19;
}

- (id)_findCandidatePairWithRelaySessionID:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, 0);
  id v12 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v22, v9, v26, 16);
  if (v12)
  {
    uint64_t v14 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v14) {
          objc_enumerationMutation(v7);
        }
        double v16 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if ((objc_msgSend_isVirtualRelayStunCandidatePair(v16, v10, v11, v13) & 1) == 0)
        {
          if (objc_msgSend_isRelayStunCandidatePair(v16, v10, v11, v13))
          {
            double v17 = objc_msgSend_sessionID(v16, v10, v11, v13);
            char isEqualToString = objc_msgSend_isEqualToString_(v4, v18, (uint64_t)v17, v19);

            if (isEqualToString)
            {
              id v12 = v16;
              goto LABEL_13;
            }
          }
        }
      }
      id v12 = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v22, v13, v26, 16);
      if (v12) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v12;
}

- (BOOL)_isSharedQRSession:(id)a3
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v7 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, 0.0, 0);
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v25, v9, v29, 16);
  if (v12)
  {
    uint64_t v14 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v7);
        }
        double v16 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        double v17 = objc_msgSend_sessionID(v16, v10, v11, v13);
        if (objc_msgSend_isEqualToString_(v4, v18, (uint64_t)v17, v19))
        {
          isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v16, v20, v21, v22);

          if (isSharedQRSession)
          {
            LOBYTE(v12) = 1;
            goto LABEL_12;
          }
        }
        else
        {
        }
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v10, (uint64_t)&v25, v13, v29, 16);
    }
    while (v12);
  }
LABEL_12:

  return v12;
}

- (void)_requestNewTwoWayQRAllocation:(id)a3
{
  int v16 = -1431655766;
  int NewLinkType_remoteInterface = objc_msgSend__getNewLinkType_remoteInterface_(self, a2, (uint64_t)a3, v3, &v16);
  if (NewLinkType_remoteInterface)
  {
    char v9 = NewLinkType_remoteInterface;
    self->_hasPendingAllocatiouint64_t n = 1;
    id v10 = im_primary_queue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_19DA79464;
    v12[3] = &unk_1E5974530;
    int v13 = v16;
    v12[4] = self;
    char v14 = v9;
    dispatch_async(v10, v12);
  }
  else
  {
    uint64_t v11 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v11, OS_LOG_TYPE_DEFAULT, "skip set up new QR link, no more QR link is required or not possible", buf, 2u);
    }
  }
}

- (BOOL)_setupNewQRLinkIfNecessary:(id)a3
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v4 = (char *)a3;
  if (!objc_msgSend__isSharedQRSession_(self, v5, (uint64_t)v4, v6) || !self->_sharedSessionJoined)
  {
    if (self->_state == 4) {
      goto LABEL_4;
    }
LABEL_9:
    id v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      char v14 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      int v29 = v14;
      uint64_t v11 = "skip set up new QR link, GL state [%s].";
      uint64_t v12 = v10;
      uint32_t v13 = 12;
      goto LABEL_11;
    }
LABEL_12:
    BOOL v15 = 0;
    goto LABEL_19;
  }
  if (self->_state > 4) {
    goto LABEL_9;
  }
LABEL_4:
  if (!self->_allowConcurrentQRSetup
    && objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v7, 1, v9, 3, 1, 1))
  {
    id v10 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v11 = "skip set up new QR link, concurrent QR setup not allowed with a connecting candidate pair.";
      uint64_t v12 = v10;
      uint32_t v13 = 2;
LABEL_11:
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    BOOL v15 = 1;
    goto LABEL_20;
  }
  int v16 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v9);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    idsSessionID = self->_idsSessionID;
    *(_DWORD *)buf = 138412546;
    int v29 = v4;
    __int16 v30 = 2112;
    int v31 = idsSessionID;
    _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "set up new QR link for %@, ids-sesion-id %@.", buf, 0x16u);
  }

  char v20 = objc_msgSend__findCandidatePairWithRelaySessionID_(self, v18, (uint64_t)v4, v19);
  long long v24 = objc_msgSend_GlobalLink(IDSFoundationLog, v21, v22, v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int v29 = v4;
    _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "found candidate pair for QR session %@.", buf, 0xCu);
  }

  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  _DWORD v26[2] = sub_19DA799EC;
  v26[3] = &unk_1E5973CF8;
  v26[4] = self;
  id v27 = v20;
  id v10 = v20;
  IDSTransportThreadAddBlock(v26);

  BOOL v15 = 1;
LABEL_19:

LABEL_20:
  return v15;
}

- (id)_convergeSharedSessions:(id)a3
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (!objc_msgSend_isSharedQRSession(v4, v5, v6, v7))
  {
    id v119 = 0;
    goto LABEL_56;
  }
  uint64_t v11 = objc_msgSend_sessionID(v4, v8, v9, v10);
  BOOL v15 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v12, v13, v14);
  int HasDifferentSharedRelayCandidatePair = GLUtilHasDifferentSharedRelayCandidatePair(v11, v15);

  if (!HasDifferentSharedRelayCandidatePair)
  {
    id v119 = 0;
    goto LABEL_55;
  }
  id v119 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (!v119) {
    id v119 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  char v20 = objc_msgSend_GlobalLink(IDSFoundationLog, v17, v18, v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)BOOL v139 = v11;
    _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: start session convergence for session %@.", buf, 0xCu);
  }

  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  double v23 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v21, v22, 0.0);
  uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v133, v25, v140, 16);
  long long v120 = v11;
  if (!v26)
  {
    char v118 = 0;
    goto LABEL_41;
  }
  uint64_t v29 = v26;
  char v118 = 0;
  obuint64_t j = 0;
  uint64_t v30 = *(void *)v134;
  uint64_t v31 = 67109376;
  do
  {
    uint64_t v32 = 0;
    do
    {
      if (*(void *)v134 != v30) {
        objc_enumerationMutation(v23);
      }
      uint64_t v33 = *(void **)(*((void *)&v133 + 1) + 8 * v32);
      if (objc_msgSend_isSharedQRSession(v33, v27, v28, *(double *)&v31))
      {
        double v34 = objc_msgSend_sessionID(v33, v27, v28, *(double *)&v31);
        if (objc_msgSend_isEqualToString_(v34, v35, (uint64_t)v11, v36)) {
          goto LABEL_14;
        }
        uint64_t v40 = objc_msgSend_state(v33, v37, v38, v39);

        if (v40 == 4)
        {
          objc_msgSend_allocateTime(v4, v27, v28, *(double *)&v31);
          double v42 = v41;
          objc_msgSend_allocateTime(v33, v43, v44, v41);
          if (v42 < *(double *)&v31) {
            goto LABEL_27;
          }
          objc_msgSend_allocateTime(v4, v27, v28, *(double *)&v31);
          double v46 = v45;
          objc_msgSend_allocateTime(v33, v47, v48, v45);
          if (v46 != *(double *)&v31) {
            goto LABEL_20;
          }
          id v49 = objc_alloc(MEMORY[0x1E4F29128]);
          __int16 v52 = objc_msgSend_initWithUUIDString_(v49, v50, (uint64_t)v11, v51);
          id v53 = objc_alloc(MEMORY[0x1E4F29128]);
          double v57 = objc_msgSend_sessionID(v33, v54, v55, v56);
          uint64_t v60 = objc_msgSend_initWithUUIDString_(v53, v58, (uint64_t)v57, v59);

          uint64_t v63 = objc_msgSend_compare_(v52, v61, (uint64_t)v60, v62);
          BOOL v64 = v63 == 1;
          uint64_t v11 = v120;
          if (v64)
          {
LABEL_20:
            if ((objc_msgSend_isDisconnecting(v33, v27, v28, *(double *)&v31) & 1) == 0) {
              objc_msgSend_addObject_(v119, v65, (uint64_t)v33, v67);
            }
            serverMaterialExchangeController = self->_serverMaterialExchangeController;
            double v69 = objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v65, v66, v67);
            objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v70, (uint64_t)v69, v71);

            char v72 = self;
            linkIDForPlugiuint64_t n = self->_linkIDForPlugin;
            if (linkIDForPlugin)
            {
              uint64_t v11 = v120;
              if (linkIDForPlugin == objc_msgSend_linkID(v33, v27, v28, *(double *)&v31))
              {
                self = v72;
                v72->_linkIDForPlugiuint64_t n = objc_msgSend_linkID(v4, v27, v28, *(double *)&v31);
                double v34 = objc_msgSend_GlobalLink(IDSFoundationLog, v74, v75, v76);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                {
                  int v80 = objc_msgSend_linkID(v33, v77, v78, v79);
                  int v81 = v72->_linkIDForPlugin;
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)BOOL v139 = v80;
                  *(_WORD *)&v139[4] = 1024;
                  *(_DWORD *)&v139[6] = v81;
                  _os_log_impl(&dword_19D9BE000, v34, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: linkID for Plugin is now changed from %d to %d", buf, 0xEu);
                }
                char v118 = 1;
LABEL_14:

                goto LABEL_28;
              }
              self = v72;
            }
            else
            {
              self = v72;
              uint64_t v11 = v120;
            }
          }
          else
          {
LABEL_27:
            obuint64_t j = 1;
          }
        }
      }
LABEL_28:
      ++v32;
    }
    while (v29 != v32);
    uint64_t v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v27, (uint64_t)&v133, *(double *)&v31, v140, 16);
    uint64_t v29 = v82;
  }
  while (v82);

  if (obj)
  {
    double v23 = objc_msgSend_candidatePairToken(v4, v83, v84, v85);
    uint64_t v89 = objc_msgSend_GlobalLink(IDSFoundationLog, v86, v87, v88);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)BOOL v139 = v23;
      _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Should remove the current candidatePair %@.", buf, 0xCu);
    }

    if ((objc_msgSend_isDisconnecting(v4, v90, v91, v92) & 1) == 0) {
      objc_msgSend_addObject_(v119, v93, (uint64_t)v4, v94);
    }
LABEL_41:
  }
  if (objc_msgSend_count(v119, v83, v84, v85))
  {
    unsigned __int16 v117 = v4;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    id obja = v119;
    uint64_t v100 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v98, (uint64_t)&v129, v99, v137, 16);
    if (v100)
    {
      uint64_t v103 = v100;
      uint64_t v104 = *(void *)v130;
      uint64_t v105 = 138412290;
      do
      {
        for (uint64_t i = 0; i != v103; ++i)
        {
          if (*(void *)v130 != v104) {
            objc_enumerationMutation(obja);
          }
          uint64_t v107 = *(void **)(*((void *)&v129 + 1) + 8 * i);
          char v108 = objc_msgSend_candidatePairToken(v107, v101, v102, *(double *)&v105, v117);
          double v112 = objc_msgSend_GlobalLink(IDSFoundationLog, v109, v110, v111);
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)BOOL v139 = v108;
            _os_log_impl(&dword_19D9BE000, v112, OS_LOG_TYPE_DEFAULT, "_convergeSharedSessions: Setting timer to disconnect candidatePairToken %@ for convergence.", buf, 0xCu);
          }

          v125[0] = MEMORY[0x1E4F143A8];
          v125[1] = 3221225472;
          v125[2] = sub_19DA7A104;
          v125[3] = &unk_1E5974100;
          id v126 = v108;
          long long v127 = v107;
          long long v128 = self;
          id v113 = v108;
          objc_msgSend_startSessionConvergenceTimer_block_(v107, v114, 5, v115, v125);
        }
        uint64_t v103 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v101, (uint64_t)&v129, *(double *)&v105, v137, 16);
      }
      while (v103);
    }

    v123[0] = MEMORY[0x1E4F143A8];
    v123[1] = 3221225472;
    void v123[2] = sub_19DA7A1F0;
    v123[3] = &unk_1E5973CF8;
    v123[4] = self;
    id v4 = v117;
    id v124 = v117;
    IDSTransportThreadAddBlockAfter(v123, 8.0);

    uint64_t v11 = v120;
  }
  if (v118) {
    objc_msgSend__didReceiveRequestToPurgeRegistration(self, v95, v96, v97);
  }
LABEL_55:

LABEL_56:
  return v119;
}

- (void)_notifySessionInfoReceived:(id)a3 relayGroupID:(id)a4 relaySessionID:(id)a5 status:(unsigned int)a6
{
  uint64_t v6 = *(void *)&a6;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v14 = objc_opt_respondsToSelector();

  if (v14)
  {
    uint64_t v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 138413058;
      id v31 = v11;
      __int16 v32 = 2112;
      id v33 = v12;
      __int16 v34 = 1024;
      int v35 = v6;
      __int16 v36 = 2112;
      id v37 = v10;
      _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "notify session-info received for group %@, session %@, status: %u: %@.", (uint8_t *)&v30, 0x26u);
    }

    id v19 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveSessionInfo_relayGroupID_relaySessionID_status_(v19, v20, (uint64_t)self, v21, v10, v11, v12, v6);
  }
  if (v10)
  {
    if (self->_isUPlusOneSession)
    {
      uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v10, v15, @"gl-option-sessioninfo-response-participants-key", v17);
      uint64_t v26 = objc_msgSend_count(v22, v23, v24, v25);

      if (v26 == 2)
      {
        double remoteJoinedUPlusOneTime = self->_remoteJoinedUPlusOneTime;
        if (remoteJoinedUPlusOneTime == 0.0)
        {
          double remoteJoinedUPlusOneTime = ids_monotonic_time();
          self->_double remoteJoinedUPlusOneTime = remoteJoinedUPlusOneTime;
        }
        objc_msgSend__enableE2E(self, v27, v28, remoteJoinedUPlusOneTime);
      }
    }
  }
}

- (void)candidatePair:(id)a3 didReceiveSessionInfo:(id)a4 status:(unsigned int)a5
{
  uint64_t v5 = *(void *)&a5;
  id v8 = a4;
  id v9 = a3;
  objc_msgSend_groupID(v9, v10, v11, v12);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = objc_msgSend_sessionID(v9, v13, v14, v15);

  objc_msgSend__notifySessionInfoReceived_relayGroupID_relaySessionID_status_(self, v17, (uint64_t)v8, v18, v19, v16, v5);
}

- (void)candidatePair:(id)a3 didReceiveSessionStats:(id)a4 success:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v11 = objc_opt_respondsToSelector();

  if (v11)
  {
    double v12 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_groupID(v8, v13, v14, v15);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v20 = objc_msgSend_sessionID(v8, v17, v18, v19);
      double v21 = (void *)v20;
      uint64_t v22 = @"NO";
      *(_DWORD *)buf = 138413058;
      id v52 = v16;
      if (v5) {
        uint64_t v22 = @"YES";
      }
      __int16 v53 = 2112;
      uint64_t v54 = v20;
      __int16 v55 = 2112;
      double v56 = v22;
      __int16 v57 = 2112;
      id v58 = v9;
      _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "notify session stats received for group %@, session %@, success:%@: %@.", buf, 0x2Au);
    }
    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
    {
      uint64_t v26 = objc_msgSend_groupID(v8, v23, v24, v25);
      int v30 = objc_msgSend_sessionID(v8, v27, v28, v29);
      if (v5) {
        id v31 = @"YES";
      }
      else {
        id v31 = @"NO";
      }
      _IDSLogTransport(@"GL", @"IDS", @"notify session stats received for group %@, session %@, success:%@: %@.");

      if (_IDSShouldLog())
      {
        int v35 = objc_msgSend_groupID(v8, v32, v33, v34, v26, v30, v31, v9);
        double v50 = objc_msgSend_sessionID(v8, v36, v37, v38);
        _IDSLogV(0, @"IDSFoundation", @"GL", @"notify session stats received for group %@, session %@, success:%@: %@.");
      }
    }
    id v39 = objc_loadWeakRetained((id *)&self->_delegate);
    unsigned __int8 v43 = objc_msgSend_groupID(v8, v40, v41, v42);
    uint64_t v47 = objc_msgSend_sessionID(v8, v44, v45, v46);
    objc_msgSend_link_didReceiveSessionStats_relayGroupID_relaySessionID_success_(v39, v48, (uint64_t)self, v49, v9, v43, v47, v5);
  }
}

- (void)_removeChannelFromChannelToCandidatePair:(id)a3
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v8 = objc_msgSend_local(v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_address(v8, v9, v10, v11);

  id v16 = objc_msgSend_remote(v4, v13, v14, v15);
  uint64_t v20 = objc_msgSend_external(v16, v17, v18, v19);

  unsigned int v24 = objc_msgSend_channelNumber(v4, v21, v22, v23);
  double v25 = channelForStunCandidatePair(v12, v20, v24);
  double v29 = objc_msgSend_GlobalLink(IDSFoundationLog, v26, v27, v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = 138412546;
    double v34 = v25;
    __int16 v35 = 2112;
    id v36 = v4;
    _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "remove channel %@ from _channelToCandidatePairs for candidatePair: %@", (uint8_t *)&v33, 0x16u);
  }

  if (!self->_channelToCandidatePairs)
  {
    CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    channelToCandidatePairs = self->_channelToCandidatePairs;
    self->_channelToCandidatePairs = Mutable;
  }
  if (v25)
  {
    __int16 v32 = self->_channelToCandidatePairs;
    if (v32) {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v32, v25);
    }
  }
}

- (BOOL)_handleRemapping:(id)a3 errorCode:(unsigned __int16)a4 reconnectQUIC:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v6 = a4;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v8 = (__CFString *)a3;
  uint64_t v12 = objc_msgSend_state(v8, v9, v10, v11);
  if (v5
    || ((unint64_t v56 = v12, hasNoSessionStateTestOptions = objc_msgSend_hasNoSessionStateTestOptions(v8, v13, v14, v15), v56 > 4)
      ? (char v58 = hasNoSessionStateTestOptions)
      : (char v58 = 0),
        (v58 & 1) != 0 || v56 - 2 <= 2))
  {
    id v16 = objc_msgSend_GlobalLink(IDSFoundationLog, v13, v14, v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend_pendingNoSessionStateAllocbind(v8, v17, v18, v19)) {
        double v23 = @"YES";
      }
      else {
        double v23 = @"NO";
      }
      *(_DWORD *)buf = 134218754;
      if (objc_msgSend_hasNoSessionStateTestOptions(v8, v20, v21, v22)) {
        unsigned int v24 = @"YES";
      }
      else {
        unsigned int v24 = @"NO";
      }
      BOOL v64 = (char *)v6;
      if (v5) {
        double v25 = @"YES";
      }
      else {
        double v25 = @"NO";
      }
      __int16 v65 = 2112;
      uint64_t v66 = (char *)v23;
      __int16 v67 = 2112;
      uint64_t v68 = v24;
      __int16 v69 = 2112;
      int v70 = v25;
      _os_log_impl(&dword_19D9BE000, v16, OS_LOG_TYPE_DEFAULT, "_handleRemapping: error code: %ld, pendingNoSessionStateAllocbind = %@, char hasNoSessionStateTestOptions = %@, reconnectQUIC = %@", buf, 0x2Au);
    }

    if ((objc_msgSend_pendingNoSessionStateAllocbind(v8, v26, v27, v28) & 1) == 0)
    {
      double v29 = GLUCreateQRNoSessionStateEvent(v8, 237, v6);
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v31 = objc_opt_respondsToSelector();

      if (v31)
      {
        id v34 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v34, v35, (uint64_t)self, v36, v29);
      }
      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v32, (uint64_t)v8, v33, 5);
      objc_msgSend__removeChannelFromChannelToCandidatePair_(self, v37, (uint64_t)v8, v38);
      if (self->_isUPlusOneSession) {
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_withReason_(self, v39, (uint64_t)v8, v41, 5);
      }
      uint64_t v42 = objc_msgSend_state(v8, v39, v40, v41);
      objc_msgSend_setState_(v8, v43, 1, v44);
      objc_msgSend_setChannelNumber_(v8, v45, 0, v46);
      objc_msgSend_setLinkID_(v8, v47, 0, v48);
      double v49 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        double v50 = (&_IDSStunCandidatePairStateStrings)[v42];
        *(_DWORD *)buf = 136315650;
        BOOL v64 = v50;
        __int16 v65 = 2080;
        uint64_t v66 = off_1E944EA98;
        __int16 v67 = 2112;
        uint64_t v68 = v8;
        _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          double v61 = off_1E944EA98;
          double v62 = v8;
          uint64_t v60 = (&_IDSStunCandidatePairStateStrings)[v42];
          _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
          if (_IDSShouldLog())
          {
            double v61 = off_1E944EA98;
            double v62 = v8;
            uint64_t v60 = (&_IDSStunCandidatePairStateStrings)[v42];
            _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
          }
        }
      }
      objc_msgSend_sendAllocbindRequest_isRealloc_inResponseToNoSessionState_reconnectQUIC_(self, v51, (uint64_t)v8, v52, 0, 1, v5, v60, v61, v62);
      objc_msgSend_setPendingNoSessionState_(v8, v53, 1, v54);
    }
    BOOL v55 = 1;
  }
  else
  {
    BOOL v55 = 0;
  }

  return v55;
}

- (BOOL)_hasConnectedP2pLink
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v15, v6, v21, 16);
  if (v9)
  {
    uint64_t v11 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v9; uint64_t i = ((char *)i + 1))
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v4);
        }
        uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if ((objc_msgSend_state(v13, v7, v8, v10, (void)v15) == 3 || objc_msgSend_state(v13, v7, v8, v10) == 4)
          && (objc_msgSend_isRelayStunCandidatePair(v13, v7, v8, v10) & 1) == 0)
        {
          id v9 = objc_msgSend_GlobalLink(IDSFoundationLog, v7, v8, v10);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v20 = v13;
            _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "has connected P2P link: %@", buf, 0xCu);
          }

          LOBYTE(v9) = 1;
          goto LABEL_15;
        }
      }
      id v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v15, v10, v21, 16);
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return (char)v9;
}

- (void)candidatePair:(id)a3 didReceiveStunErrorResponse:(int64_t)a4 errorCode:(unsigned __int16)a5 didLocalExternalAddressChange:(BOOL)a6
{
  BOOL v6 = a6;
  int v7 = a5;
  id v10 = a3;
  uint64_t v14 = v10;
  if (a4 == 4080)
  {
    if (!objc_msgSend_isSharedQRSession(v10, v11, v12, v13)) {
      goto LABEL_30;
    }
    if (v7 <= 607)
    {
      if (v7 == 441)
      {
        objc_msgSend__didReceiveRequestToPurgeRegistration(self, v15, v16, v17);
        uint64_t v26 = im_primary_queue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        void block[2] = sub_19DA7B088;
        block[3] = &unk_1E5974558;
        id v33 = v14;
        id v34 = self;
        __int16 v35 = 441;
        dispatch_async(v26, block);

        goto LABEL_30;
      }
      if (v7 == 486)
      {
        objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, 52, v17);
        goto LABEL_30;
      }
      if (v7 != 603) {
        goto LABEL_30;
      }
LABEL_21:
      if (v7 == 603) {
        uint64_t v25 = 44;
      }
      else {
        uint64_t v25 = 46;
      }
      objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, v25, v17);
      goto LABEL_30;
    }
    if (v7 != 608)
    {
      if (v7 != 611)
      {
        if (v7 == 613) {
          objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, 50, v17);
        }
        goto LABEL_30;
      }
      goto LABEL_21;
    }
    objc_msgSend_receiveBlockedIndicationWithReason_(self, v15, 49, v17);
    uint64_t v22 = objc_msgSend_candidatePairToken(v14, v27, v28, v29);
    objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v30, (uint64_t)v22, v31, @"DiagnosticRemoveParticipant", @"NotUploadKeys", 15);
LABEL_29:

    goto LABEL_30;
  }
  if (v7 != 602)
  {
    if (v7 == 601) {
      objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v11, (uint64_t)v10, v13, 601, !v6);
    }
    goto LABEL_30;
  }
  if (self->_isUPlusOneSession && objc_msgSend__hasConnectedP2pLink(self, v11, v12, v13))
  {
    objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v18, (uint64_t)v14, v19, 602, 1);
    goto LABEL_30;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v21 = objc_opt_respondsToSelector();

  if (v21)
  {
    uint64_t v22 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_terminateCallDueToIdleClientForLink_(v22, v23, (uint64_t)self, v24);
    goto LABEL_29;
  }
LABEL_30:
}

- (void)candidatePair:(id)a3 didAddQREvent:(id)a4
{
  id v10 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    id v7 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didAddQREvent_(v7, v8, (uint64_t)self, v9, v10);
  }
}

- (void)candidatePair:(id)a3 didReceiveParticipantUpdate:(id)a4 status:(unsigned __int16)a5
{
  uint64_t v5 = a5;
  id v19 = a4;
  double v9 = objc_msgSend_objectForKey_(v19, v7, @"ids-stun-attribute-session-state-type", v8);
  int v13 = objc_msgSend_unsignedShortValue(v9, v10, v11, v12);

  if (v5 && (v13 - 7) <= 1) {
    self->_isLightweightParticipant = v13 != 7;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v15 = objc_opt_respondsToSelector();

  if (v15)
  {
    id v16 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveParticipantUpdate_status_(v16, v17, (uint64_t)self, v18, v19, v5);
  }
}

- (void)candidatePair:(id)a3 didReceivePluginRegistration:(unint64_t)a4 pluginName:(id)a5
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v65 = a5;
  uint64_t v11 = objc_msgSend_groupID(v7, v8, v9, v10);
  uint64_t v66 = v7;
  char v15 = objc_msgSend_sessionID(v7, v12, v13, v14);
  BOOL v64 = self;
  id v19 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v16, v17, v18);
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v68, 0.0, v73, 16);
  if (v21)
  {
    uint64_t v25 = v21;
    uint64_t v26 = *(void *)v69;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v69 != v26) {
          objc_enumerationMutation(v19);
        }
        uint64_t v28 = *(void **)(*((void *)&v68 + 1) + 8 * i);
        double v29 = objc_msgSend_sessionID(v28, v22, v23, v24);
        if (objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v15, v31))
        {
          __int16 v35 = objc_msgSend_groupID(v28, v32, v33, v34);
          if (objc_msgSend_isEqualToString_(v35, v36, (uint64_t)v11, v37)
            && objc_msgSend_state(v28, v38, v39, v40) == 4)
          {
            isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v28, v41, v42, v43);

            if (!isSharedQRSession) {
              continue;
            }
            double v29 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, a4, v24);
            char v72 = v29;
            __int16 v35 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v45, (uint64_t)&v72, v46, 1);
            objc_msgSend_updateParticipantIDMap_(v28, v47, (uint64_t)v35, v48);
          }
        }
      }
      uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v68, v24, v73, 16);
    }
    while (v25);
  }
  if (v65)
  {
    pluginParticipantIDs = v64->_pluginParticipantIDs;
    double v50 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, a4, v24);
    objc_msgSend_setObject_forKey_(pluginParticipantIDs, v51, (uint64_t)v65, v52, v50);
  }
  id WeakRetained = objc_loadWeakRetained((id *)&v64->_delegate);
  char v54 = objc_opt_respondsToSelector();

  if (v54)
  {
    id v58 = objc_loadWeakRetained((id *)&v64->_delegate);
    objc_msgSend_link_didReceivePluginRegistration_pluginName_(v58, v59, (uint64_t)v64, v60, a4, v65);
  }
  if (v64->_linkIDForPlugin != objc_msgSend_linkID(v66, v55, v56, v57)) {
    objc_msgSend__didReceiveRequestToPurgeRegistration(v64, v61, v62, v63);
  }
}

- (void)candidatePair:(id)a3 didReceivePluginUnregistration:(unint64_t)a4 pluginName:(id)a5
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v61 = a5;
  uint64_t v11 = objc_msgSend_groupID(v7, v8, v9, v10);
  uint64_t v62 = v7;
  char v15 = objc_msgSend_sessionID(v7, v12, v13, v14);
  double v60 = self;
  id v19 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v16, v17, v18);
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v64, 0.0, v69, 16);
  if (v21)
  {
    uint64_t v25 = v21;
    uint64_t v26 = *(void *)v65;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v65 != v26) {
          objc_enumerationMutation(v19);
        }
        uint64_t v28 = *(void **)(*((void *)&v64 + 1) + 8 * i);
        double v29 = objc_msgSend_sessionID(v28, v22, v23, v24);
        if (objc_msgSend_isEqualToString_(v29, v30, (uint64_t)v15, v31))
        {
          __int16 v35 = objc_msgSend_groupID(v28, v32, v33, v34);
          if (objc_msgSend_isEqualToString_(v35, v36, (uint64_t)v11, v37)
            && objc_msgSend_state(v28, v38, v39, v40) == 4)
          {
            isSharedQRSessiouint64_t n = objc_msgSend_isSharedQRSession(v28, v41, v42, v43);

            if (!isSharedQRSession) {
              continue;
            }
            double v29 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, a4, v24);
            long long v68 = v29;
            __int16 v35 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v45, (uint64_t)&v68, v46, 1);
            objc_msgSend_removeFromParticipantIDMap_(v28, v47, (uint64_t)v35, v48);
          }
        }
      }
      uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v64, v24, v69, 16);
    }
    while (v25);
  }
  if (v61)
  {
    pluginParticipantIDs = v60->_pluginParticipantIDs;
    double v50 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, a4, v24);
    objc_msgSend_removeObjectForKey_(pluginParticipantIDs, v51, (uint64_t)v50, v52);

    objc_msgSend_removeObjectForKey_(v60->_pluginNameToPluginOptionsDict, v53, (uint64_t)v61, v54);
  }
  id WeakRetained = objc_loadWeakRetained((id *)&v60->_delegate);
  char v56 = objc_opt_respondsToSelector();

  if (v56)
  {
    id v57 = objc_loadWeakRetained((id *)&v60->_delegate);
    objc_msgSend_link_didReceivePluginUnregistration_pluginName_(v57, v58, (uint64_t)v60, v59, a4, v61);
  }
}

- (void)candidatePair:(id)a3 didReceivePluginControlEvent:(unint64_t)a4 operation:(unsigned __int8)a5 transactionID:(id)a6
{
  int v7 = a5;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  id v11 = a6;
  double v14 = v11;
  if (v7 != 2) {
    goto LABEL_13;
  }
  if (!v11)
  {
LABEL_12:
    objc_msgSend__disconnectPluginConnectionsForParticipantID_andPurgeRegistration_(self, v12, a4, v13, 0);
    goto LABEL_13;
  }
  if ((objc_msgSend_containsObject_(self->_pluginControlDisconnectRecentTransactionIDs, v12, (uint64_t)v11, v13) & 1) == 0)
  {
    if ((unint64_t)objc_msgSend_count(self->_pluginControlDisconnectRecentTransactionIDs, v15, v16, v17) >= 0x14)
    {
      do
        objc_msgSend_removeObjectAtIndex_(self->_pluginControlDisconnectRecentTransactionIDs, v19, 0, v20);
      while ((unint64_t)objc_msgSend_count(self->_pluginControlDisconnectRecentTransactionIDs, v21, v22, v23) > 0x13);
    }
    pluginControlDisconnectRecentTransactionIDs = self->_pluginControlDisconnectRecentTransactionIDs;
    if (!pluginControlDisconnectRecentTransactionIDs)
    {
      uint64_t v25 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v26 = self->_pluginControlDisconnectRecentTransactionIDs;
      self->_pluginControlDisconnectRecentTransactionIDs = v25;

      pluginControlDisconnectRecentTransactionIDs = self->_pluginControlDisconnectRecentTransactionIDs;
    }
    objc_msgSend_addObject_(pluginControlDisconnectRecentTransactionIDs, v19, (uint64_t)v14, v20);
    goto LABEL_12;
  }
  double v18 = objc_msgSend_GlobalLink(IDSFoundationLog, v15, v16, v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 138412290;
    uint64_t v28 = v14;
    _os_log_impl(&dword_19D9BE000, v18, OS_LOG_TYPE_DEFAULT, "PluginControl indication event has duplicate transactionID %@ - dropped", (uint8_t *)&v27, 0xCu);
  }

LABEL_13:
}

- (void)candidatePair:(id)a3 didReceiveMappedParticipantsDict:(id)a4 forLinkID:(char)a5
{
  uint64_t v5 = a5;
  id v12 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v8 = objc_opt_respondsToSelector();

  if (v8)
  {
    id v9 = objc_loadWeakRetained((id *)&self->_delegate);
    objc_msgSend_link_didReceiveMappedParticipantsDict_forLinkID_(v9, v10, (uint64_t)self, v11, v12, v5);
  }
}

- (void)candidatePair:(id)a3 didReceivePutMaterialIndication:(id)a4
{
  id v5 = a4;
  if (IMGetDomainBoolForKey())
  {
    id v9 = objc_msgSend_GlobalLink(IDSFoundationLog, v6, v7, v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v19 = 0;
      _os_log_impl(&dword_19D9BE000, v9, OS_LOG_TYPE_DEFAULT, "didReceivePutMaterialIndication: ignoring because DisableQUICMaterialIndication is set", v19, 2u);
    }
  }
  else
  {
    id v10 = objc_msgSend_materials(v5, v6, v7, v8);
    objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(self, v11, (uint64_t)v10, v12);
    uint64_t v16 = objc_msgSend_materials(v5, v13, v14, v15);
    objc_msgSend_receiveKeyMaterials_(self, v17, (uint64_t)v16, v18);
  }
}

- (void)candidatePair:(id)a3 didReceiveGetMaterialResponse:(id)a4
{
  id v5 = a4;
  id v9 = objc_msgSend_materials(v5, v6, v7, v8);
  objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(self, v10, (uint64_t)v9, v11);

  objc_msgSend_materials(v5, v12, v13, v14);
  id v17 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_receiveKeyMaterials_(self, v15, (uint64_t)v17, v16);
}

- (void)receiveKeyMaterials:(id)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v30 = v4;
    obuint64_t j = v4;
    uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v38, v8, v45, 16);
    if (v33)
    {
      uint64_t v32 = *(void *)v39;
      uint64_t v11 = 138412290;
      do
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (*(void *)v39 != v32) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          double v14 = objc_msgSend_GlobalLink(IDSFoundationLog, v9, v10, *(double *)&v11);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            double v44 = v13;
            _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "receiveKeyMaterials received material: %@", buf, 0xCu);
          }

          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v17 = objc_msgSend_materialInfos(v13, v15, v16, 0.0);
          uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v34, v19, v42, 16);
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = *(void *)v35;
            do
            {
              for (uint64_t j = 0; j != v21; ++j)
              {
                if (*(void *)v35 != v22) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v24 = *(void *)(*((void *)&v34 + 1) + 8 * j);
                id v25 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didReceiveMaterialInfo_material_(v25, v26, (uint64_t)self, v27, v24, v13);
              }
              uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v28, (uint64_t)&v34, v29, v42, 16);
            }
            while (v21);
          }
        }
        uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v38, *(double *)&v11, v45, 16);
      }
      while (v33);
    }

    id v4 = v30;
  }
}

- (void)candidatePair:(id)a3 didReceivePutMaterialResponse:(id)a4 forTxId:(unint64_t)a5
{
  putMaterialReqTxIdToCompletionBlocuint64_t k = self->_putMaterialReqTxIdToCompletionBlock;
  uint64_t v10 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, a5, v5);
  uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(putMaterialReqTxIdToCompletionBlock, v11, (uint64_t)v10, v12);

  uint64_t v13 = (void *)v20;
  if (v20)
  {
    (*(void (**)(uint64_t, BOOL))(v20 + 16))(v20, a4 != 0);
    double v14 = self->_putMaterialReqTxIdToCompletionBlock;
    id v17 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v15, a5, v16);
    objc_msgSend_removeObjectForKey_(v14, v18, (uint64_t)v17, v19);

    uint64_t v13 = (void *)v20;
  }
}

- (void)_didReceiveRequestToPurgeRegistration
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  double v5 = objc_msgSend_allValues(self->_tokenToCandidatePairs, a2, v2, v3);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v18, 0.0, v22, 16);
  if (v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(v5);
        }
        double v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if (objc_msgSend_state(v14, v8, v9, v10) == 4 && objc_msgSend_isSharedQRSession(v14, v8, v9, v10))
        {
          double v15 = objc_msgSend_allKeys(self->_pluginParticipantIDs, v8, v9, v10);
          objc_msgSend_removeFromParticipantIDMap_(v14, v16, (uint64_t)v15, v17);
        }
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v18, v10, v22, 16);
    }
    while (v11);
  }
  objc_msgSend__disconnectPluginConnectionsForParticipantID_andPurgeRegistration_(self, v8, 0, v10, 1);
}

- (void)_disconnectPluginConnectionsForParticipantID:(unint64_t)a3 andPurgeRegistration:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  double v10 = v7;
  pluginParticipantIDs = self->_pluginParticipantIDs;
  if (a3)
  {
    uint64_t v12 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v8, a3, v9);
    double v15 = objc_msgSend_objectForKeyedSubscript_(pluginParticipantIDs, v13, (uint64_t)v12, v14);

    if (v15)
    {
      long long v19 = self->_pluginParticipantIDs;
      long long v20 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v16, a3, v18);
      uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v19, v21, (uint64_t)v20, v22);
      uint64_t v26 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v24, a3, v25);
      objc_msgSend_setObject_forKey_(v10, v27, (uint64_t)v23, v28, v26);

      if (v4)
      {
        double v31 = self->_pluginParticipantIDs;
        uint64_t v32 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v29, a3, v30);
        objc_msgSend_removeObjectForKey_(v31, v33, (uint64_t)v32, v34);

        objc_msgSend_removeObjectForKey_(self->_pluginNameToPluginOptionsDict, v35, (uint64_t)v15, v36);
      }
    }
    else
    {
      BOOL v55 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v18);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v90 = a3;
        _os_log_impl(&dword_19D9BE000, v55, OS_LOG_TYPE_DEFAULT, "_disconnectPluginConnectionsForParticipantID cannot find pluginName for participantID %llu", buf, 0xCu);
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v57 = objc_opt_respondsToSelector();

    if (v57)
    {
      id v58 = objc_loadWeakRetained((id *)&self->_delegate);
      id v61 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v59, a3, v60);
      double v88 = v61;
      long long v64 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v62, (uint64_t)&v88, v63, 1);
      objc_msgSend_link_didReceivePluginDisconnect_(v58, v65, (uint64_t)self, v66, v64);
    }
  }
  else
  {
    uint64_t v83 = MEMORY[0x1E4F143A8];
    uint64_t v84 = 3221225472;
    double v85 = sub_19DA7C43C;
    double v86 = &unk_1E5974580;
    id v37 = v7;
    id v87 = v37;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(pluginParticipantIDs, v38, (uint64_t)&v83, v39);
    if (v4)
    {
      objc_msgSend_removeAllObjects(self->_pluginParticipantIDs, v40, v41, v42, v83, v84, v85, v86);
      objc_msgSend_removeAllObjects(self->_pluginNameToPluginOptionsDict, v43, v44, v45);
    }
    id v46 = objc_loadWeakRetained((id *)&self->_delegate);
    char v47 = objc_opt_respondsToSelector();

    if (v47)
    {
      id v48 = objc_loadWeakRetained((id *)&self->_delegate);
      double v52 = objc_msgSend_allKeys(v37, v49, v50, v51);
      objc_msgSend_link_didReceivePluginDisconnect_(v48, v53, (uint64_t)self, v54, v52);
    }
    double v15 = v87;
  }

  if (v4)
  {
    if (objc_msgSend_count(v10, v67, v68, v69))
    {
      id v70 = objc_loadWeakRetained((id *)&self->_delegate);
      char v71 = objc_opt_respondsToSelector();

      if (v71)
      {
        uint64_t v75 = objc_msgSend_GlobalLink(IDSFoundationLog, v72, v73, v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v79 = objc_msgSend_count(v10, v76, v77, v78);
          *(_DWORD *)buf = 134217984;
          unint64_t v90 = v79;
          _os_log_impl(&dword_19D9BE000, v75, OS_LOG_TYPE_DEFAULT, "didReceiveRequestToPurgeRegistration for %lu plugins.", buf, 0xCu);
        }

        id v80 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didReceiveRequestToPurgeRegistration_(v80, v81, (uint64_t)self, v82, v10);
      }
    }
  }
}

- (void)candidatePair:(id)a3 protoRequestDidTimeOut:(unint64_t)a4
{
  objc_msgSend__removeProtoRequest_status_(self, a2, a4, v4, 0);
}

- (void)disconnectIdleQUICConnectionForCandidatePair:(id)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (objc_msgSend_isQUIC(v4, v5, v6, v7) && (unint64_t)objc_msgSend_state(v4, v8, v9, v10) <= 2)
  {
    double v14 = objc_msgSend_GlobalLink(IDSFoundationLog, v11, v12, v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      double v18 = objc_msgSend_candidatePairToken(v4, v15, v16, v17);
      int v41 = 138412290;
      double v42 = v18;
      _os_log_impl(&dword_19D9BE000, v14, OS_LOG_TYPE_DEFAULT, "Disconnecting QUIC connection %@ after Info request", (uint8_t *)&v41, 0xCu);
    }
    nwLinuint64_t k = self->_nwLink;
    uint64_t v23 = objc_msgSend_sessionID(v4, v20, v21, v22);
    double v27 = objc_msgSend_local(v4, v24, v25, v26);
    uint64_t v31 = objc_msgSend_address(v27, v28, v29, v30);
    long long v35 = objc_msgSend_remote(v4, v32, v33, v34);
    uint64_t v39 = objc_msgSend_external(v35, v36, v37, v38);
    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v40, (uint64_t)v23, self->_delayQUICDisconnectionAfterInfo, v31, v39, 0);
  }
}

- (void)sendAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 reconnectQUIC:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  BOOL v8 = a4;
  id v10 = a3;
  double v14 = objc_msgSend_candidatePairToken(v10, v11, v12, v13);
  if (objc_msgSend_isQUIC(v10, v15, v16, v17))
  {
    uint64_t v23 = objc_msgSend_pendingNoSessionStateAllocbind(v10, v18, v19, v20);
    if (v6)
    {
      nwLinuint64_t k = self->_nwLink;
      char v44 = v23;
      uint64_t v25 = objc_msgSend_sessionID(v10, v21, v22, v24);
      uint64_t v29 = objc_msgSend_local(v10, v26, v27, v28);
      uint64_t v33 = objc_msgSend_address(v29, v30, v31, v32);
      uint64_t v37 = objc_msgSend_remote(v10, v34, v35, v36);
      uint64_t v41 = objc_msgSend_external(v37, v38, v39, v40);
      objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v42, (uint64_t)v25, 0.0, v33, v41, 1);

      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = sub_19DA7C7E0;
      v45[3] = &unk_1E59742D8;
      v45[4] = self;
      id v46 = v14;
      BOOL v47 = v8;
      BOOL v48 = v7;
      BOOL v49 = v6;
      char v50 = v44;
      IDSTransportThreadAddBlockAfter(v45, 0.5);
    }
    else
    {
      objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v21, (uint64_t)v14, v24, v8, v7, 0, v23);
    }
  }
  else
  {
    objc_msgSend__sendAllocbindRequest_stunMessage_isRealloc_inResponseToNoSessionState_(self, v18, (uint64_t)v14, v20, 0, v8, v7);
  }
}

- (void)sendProbingRequestWithoptions:(id)a3 candidatePairToken:(id)a4
{
  objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(self, a2, 3, v4, 0, a3, a4);
}

- (BOOL)receiveNoSessionStateForCandidatePair:(id)a3 didLocalExternalAddressChange:(BOOL)a4
{
  return objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, a2, (uint64_t)a3, v4, 601, !a4);
}

- (void)receiveIdleClientErrorForCandidatePair:(id)a3
{
  id v14 = a3;
  if (self->_isUPlusOneSession && objc_msgSend__hasConnectedP2pLink(self, v4, v5, v6))
  {
    objc_msgSend__handleRemapping_errorCode_reconnectQUIC_(self, v7, (uint64_t)v14, v8, 602, 1);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      id v11 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_terminateCallDueToIdleClientForLink_(v11, v12, (uint64_t)self, v13);
    }
  }
}

- (void)receiveBlockedIndicationWithReason:(unsigned int)a3
{
  uint64_t v3 = *(void *)&a3;
  p_delegate = &self->_delegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v7 = objc_opt_respondsToSelector();

  if (v7)
  {
    id v10 = objc_loadWeakRetained((id *)p_delegate);
    objc_msgSend_didReceiveBlockedIndicationForLink_reason_(v10, v8, (uint64_t)self, v9, v3);
  }
}

- (void)receiveErrorIndicationWithCode:(unsigned int)a3
{
  uint64_t v3 = *(void *)&a3;
  p_delegate = &self->_delegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  char v7 = objc_opt_respondsToSelector();

  if (v7)
  {
    id v10 = objc_loadWeakRetained((id *)p_delegate);
    objc_msgSend_link_didReceiveErrorIndicationWithCode_(v10, v8, (uint64_t)self, v9, v3);
  }
}

- (id)createLinkCycleForCandidatePair:(id)a3
{
  id v4 = a3;
  if ((objc_msgSend_isRelayStunCandidatePair(v4, v5, v6, v7) & 1) == 0
    && (objc_msgSend_isVirtualRelayStunCandidatePair(v4, v8, v9, v10) & 1) == 0)
  {
    if (self->_tokenToStunCheckPairs)
    {
      id v11 = objc_msgSend_local(v4, v8, v9, v10);
      uint64_t v15 = objc_msgSend_address(v11, v12, v13, v14);
      uint64_t v19 = objc_msgSend_remote(v4, v16, v17, v18);
      uint64_t v23 = objc_msgSend_address(v19, v20, v21, v22);
      double v26 = tokenForStunCandidatePair(v15, v23, self->_cbuuid);
      if (v26)
      {
        CFDictionaryRef tokenToStunCheckPairs = self->_tokenToStunCheckPairs;
        uint64_t v29 = objc_msgSend_local(v4, v24, v25, v27);
        uint64_t v33 = objc_msgSend_address(v29, v30, v31, v32);
        uint64_t v37 = objc_msgSend_remote(v4, v34, v35, v36);
        uint64_t v41 = objc_msgSend_address(v37, v38, v39, v40);
        double v42 = tokenForStunCandidatePair(v33, v41, self->_cbuuid);
        uint64_t v43 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v42);
      }
      else
      {
        uint64_t v43 = 0;
      }

      if (v43)
      {
        BOOL v47 = objc_msgSend_linkMetrics(v43, v44, v45, v46);

        if (v47)
        {
          double v51 = objc_msgSend_linkMetrics(v43, v48, v49, v50);

          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v43 = 0;
    }
  }
  double v51 = objc_msgSend_createLinkCycle(self->_metricsCollector, v8, v9, v10);
LABEL_13:

  return v51;
}

- (id)_createInterfaceAddressArrayWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  BOOL v6 = a5;
  BOOL v7 = a4;
  *(void *)&v57[5] = *MEMORY[0x1E4F143B8];
  if (!self->_startPort)
  {
LABEL_23:
    uint64_t v19 = objc_msgSend_newListenerWithClientUUID_wantsWiFi_wantsCellular_(self->_nwLink, a2, (uint64_t)self->_clientUUID, v5, v7, v6, v52, v54);
    if (v19)
    {
      uint64_t v25 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = objc_msgSend_port(self->_nwLink, v26, v27, v28);
        int v33 = objc_msgSend_cellularPort(self->_nwLink, v30, v31, v32);
        *(_DWORD *)buf = 67109376;
        v57[0] = v29;
        LOWORD(v57[1]) = 1024;
        *(_DWORD *)((char *)&v57[1] + 2) = v33;
        _os_log_impl(&dword_19D9BE000, v25, OS_LOG_TYPE_DEFAULT, "bind to random ports(%u,%u) succeeded", buf, 0xEu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v53 = objc_msgSend_port(self->_nwLink, v34, v35, v36);
          uint64_t v55 = objc_msgSend_cellularPort(self->_nwLink, v37, v38, v39);
          _IDSLogTransport(@"GL", @"IDS", @"bind to random ports(%u,%u) succeeded");
          if (_IDSShouldLog())
          {
            objc_msgSend_port(self->_nwLink, v40, v41, v42, v53, v55);
            objc_msgSend_cellularPort(self->_nwLink, v43, v44, v45);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"bind to random ports(%u,%u) succeeded");
          }
        }
      }
    }
    else
    {
      double v46 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v46, OS_LOG_TYPE_DEFAULT, "failed binding to random port, remove listeners.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed binding to random port, remove listeners.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed binding to random port, remove listeners.");
          }
        }
      }
      objc_msgSend_cleanup(self->_nwLink, v47, v48, v49);
    }
    goto LABEL_37;
  }
  unsigned __int16 v9 = self->_startPort + LOWORD(self->_portRange) - 1;
  double v10 = OSLogHandleForIDSCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int startPort = self->_startPort;
    *(_DWORD *)buf = 67109376;
    v57[0] = startPort;
    LOWORD(v57[1]) = 1024;
    *(_DWORD *)((char *)&v57[1] + 2) = v9;
    _os_log_impl(&dword_19D9BE000, v10, OS_LOG_TYPE_DEFAULT, "use port range [%u, %u]", buf, 0xEu);
  }

  if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
  {
    double v52 = (void *)self->_startPort;
    uint64_t v54 = v9;
    _IDSLogV(0, @"IDSFoundation", @"GL", @"use port range [%u, %u]");
  }
  unsigned int v14 = self->_startPort;
  if (v14 >= v9)
  {
LABEL_17:
    objc_msgSend_setPort_(self->_nwLink, v12, 0, *(double *)&v13, v52);
    objc_msgSend_setCellularPort_(self->_nwLink, v21, 0, v22);
    uint64_t v23 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = self->_startPort;
      *(_DWORD *)buf = 67109376;
      v57[0] = v24;
      LOWORD(v57[1]) = 1024;
      *(_DWORD *)((char *)&v57[1] + 2) = v9;
      _os_log_impl(&dword_19D9BE000, v23, OS_LOG_TYPE_DEFAULT, "all tries failed to bind port range [%u,%u], trying random port.", buf, 0xEu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v52 = (void *)self->_startPort;
        uint64_t v54 = v9;
        _IDSLogTransport(@"GL", @"IDS", @"all tries failed to bind port range [%u,%u], trying random port.");
        if (_IDSShouldLog())
        {
          double v52 = (void *)self->_startPort;
          uint64_t v54 = v9;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"all tries failed to bind port range [%u,%u], trying random port.");
        }
      }
    }
    goto LABEL_23;
  }
  uint64_t v13 = 138412290;
  while (1)
  {
    objc_msgSend_setPort_(self->_nwLink, v12, (unsigned __int16)v14, *(double *)&v13, v52, v54);
    objc_msgSend_setCellularPort_(self->_nwLink, v15, (unsigned __int16)(v14 + 1), v16);
    uint64_t v19 = objc_msgSend_newListenerWithClientUUID_wantsWiFi_wantsCellular_(self->_nwLink, v17, (uint64_t)self->_clientUUID, v18, v7, v6);
    double v20 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)char v57 = v19;
      _os_log_impl(&dword_19D9BE000, v20, OS_LOG_TYPE_DEFAULT, "Interface address array = %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v52 = v19;
        _IDSLogTransport(@"GL", @"IDS", @"Interface address array = %@");
        if (_IDSShouldLog())
        {
          double v52 = v19;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"Interface address array = %@");
        }
      }
    }
    if (v19) {
      break;
    }
    LOWORD(v14) = v14 + 2;
    if (v9 <= (unsigned __int16)v14) {
      goto LABEL_17;
    }
  }
LABEL_37:
  id v50 = v19;

  return v50;
}

- (id)_addSocketAndInterfaceAddressWithNWLink:(BOOL)a3 wantsWiFi:(BOOL)a4 wantsCellular:(BOOL)a5
{
  BOOL v6 = a3;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v8 = objc_msgSend__createInterfaceAddressArrayWithNWLink_wantsWiFi_wantsCellular_(self, a2, a3, v5, a4, a5);
  uint64_t v12 = objc_msgSend_mutableCopy(v8, v9, v10, v11);

  if (v12)
  {
    objc_msgSend__delayProcessingCellularInterfaces_(self, v13, (uint64_t)v12, v14);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v15 = v12;
    uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v41, v17, v45, 16);
    if (v20)
    {
      uint64_t v22 = *(void *)v42;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v42 != v22) {
            objc_enumerationMutation(v15);
          }
          int v24 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          if (objc_msgSend_IPVersion(v24, v18, v19, v21) == 1)
          {
            uint64_t v25 = objc_msgSend_index(v24, v18, v19, v21);
            int v29 = objc_msgSend_name(v24, v26, v27, v28);
            objc_msgSend__getNAT64PrefixForInterface_interfaceName_completionBlock_(self, v30, v25, v31, v29, 0);
          }
        }
        uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v41, v21, v45, 16);
      }
      while (v20);
    }

    if (objc_msgSend_count(v15, v32, v33, v34)) {
      objc_msgSend__updateInterfaceAddressesWithAddList_removeList_(self, v35, (uint64_t)v15, v36, 0);
    }
    id v37 = v15;
  }
  else
  {
    uint64_t v38 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      double v39 = @"NO";
      if (v6) {
        double v39 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      BOOL v47 = v39;
      _os_log_impl(&dword_19D9BE000, v38, OS_LOG_TYPE_DEFAULT, "failed to create interface address array enableIPv6 %@.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to create interface address array enableIPv6 %@.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create interface address array enableIPv6 %@.");
        }
      }
    }
  }

  return v12;
}

- (void)_getAndProcessDatablobsFromReceivedMaterials:(id)a3
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (__CFDictionary *)a3;
  BOOL v7 = objc_msgSend_GlobalLink(IDSFoundationLog, v4, v5, v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFMutableDictionaryRef v72 = v3;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "_getAndProcessDatablobsFromReceivedMaterials: materials: %@", buf, 0xCu);
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  obuint64_t j = v3;
  uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v65, v10, v70, 16);
  if (v59)
  {
    uint64_t v58 = *(void *)v66;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v66 != v58) {
          objc_enumerationMutation(obj);
        }
        uint64_t v60 = v14;
        id v15 = objc_msgSend_materialInfos(*(void **)(*((void *)&v65 + 1) + 8 * v14), v11, v12, v13);
        long long v61 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v61, 0.0, v69, 16);
        if (v17)
        {
          uint64_t v21 = v17;
          uint64_t v22 = *(void *)v62;
          do
          {
            for (uint64_t i = 0; i != v21; ++i)
            {
              if (*(void *)v62 != v22) {
                objc_enumerationMutation(v15);
              }
              int v24 = *(void **)(*((void *)&v61 + 1) + 8 * i);
              uint64_t v25 = objc_msgSend_materialType(v24, v18, v19, v20);
              double v30 = objc_msgSend_materialContent(v24, v26, v27, v28);
              if (v25 == 12 || v25 == 6)
              {
                uint64_t v33 = objc_msgSend_numberWithInt_(NSNumber, v29, v25, v31);
                objc_msgSend_objectForKey_(Mutable, v34, (uint64_t)v33, v35);
                id v36 = (id)objc_claimAutoreleasedReturnValue();

                if (!v36) {
                  id v36 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                }
                objc_msgSend_addObject_(v36, v37, (uint64_t)v30, v38);
                long long v41 = objc_msgSend_numberWithInt_(NSNumber, v39, v25, v40);
                objc_msgSend_setObject_forKey_(Mutable, v42, (uint64_t)v36, v43, v41);
              }
            }
            uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v61, v20, v69, 16);
          }
          while (v21);
        }

        uint64_t v14 = v60 + 1;
      }
      while (v60 + 1 != v59);
      uint64_t v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v65, v13, v70, 16);
    }
    while (v59);
  }

  BOOL v47 = objc_msgSend_GlobalLink(IDSFoundationLog, v44, v45, v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFMutableDictionaryRef v72 = Mutable;
    _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "_getAndProcessDatablobsFromReceivedMaterials: typeToEncryptedDataBlobs: %@", buf, 0xCu);
  }

  if (objc_msgSend_count(Mutable, v48, v49, v50))
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
    char v52 = objc_opt_respondsToSelector();

    if (v52)
    {
      id v53 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didReceiveEncryptedDataBlobs_(v53, v54, (uint64_t)self, v55, Mutable);
    }
  }
}

- (BOOL)_postProcessQUICAllocbindResponse:(id)a3 candidatePair:(id)a4
{
  return 0;
}

- (void)_parseActiveExperiments:(id)a3
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v5 = v3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v49, v7, v55, 16);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v11 = v8;
  uint64_t v12 = *(void *)v50;
  uint64_t v13 = 67109378;
  while (2)
  {
    uint64_t v14 = 0;
    do
    {
      if (*(void *)v50 != v12) {
        objc_enumerationMutation(v5);
      }
      id v15 = *(void **)(*((void *)&v49 + 1) + 8 * v14);
      double v16 = objc_msgSend_experimentName(v15, v9, v10, *(double *)&v13);

      if (!v16)
      {
        long long v42 = objc_msgSend_GlobalLink(IDSFoundationLog, v17, v18, v19);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v54[0] = v15;
          _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "Experiment name is not set in IDSQRProtoChannelExperiment: %@. Skipping...", buf, 0xCu);
        }

        goto LABEL_23;
      }
      double v20 = objc_msgSend_experimentName(v15, v17, v18, v19);
      int v24 = objc_msgSend_testValue(v15, v21, v22, v23);
      if (v24 == 3)
      {
        id v36 = NSNumber;
        uint64_t v37 = objc_msgSend_int32Value(v15, v25, v26, v27);
        uint64_t v33 = objc_msgSend_numberWithInt_(v36, v38, v37, v39);
        goto LABEL_13;
      }
      int v28 = v24;
      if (v24 == 2)
      {
        uint64_t v33 = objc_msgSend_stringValue(v15, v25, v26, v27);
        goto LABEL_13;
      }
      if (v24 == 1)
      {
        int v29 = NSNumber;
        uint64_t v30 = objc_msgSend_BOOLValue(v15, v25, v26, v27);
        uint64_t v33 = objc_msgSend_numberWithBool_(v29, v31, v30, v32);
LABEL_13:
        double v40 = v33;
        objc_msgSend_setObject_forKey_(v4, v34, v33, v35, v20);
        goto LABEL_14;
      }
      double v40 = objc_msgSend_GlobalLink(IDSFoundationLog, v25, v26, v27);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        LODWORD(v54[0]) = v28;
        WORD2(v54[0]) = 2112;
        *(void *)((char *)v54 + 6) = v15;
        _os_log_impl(&dword_19D9BE000, v40, OS_LOG_TYPE_DEFAULT, "Received unknown IDSQRProtoChannelExperiment_TestValue: %d in IDSQRProtoChannelExperiment: %@", buf, 0x12u);
      }
LABEL_14:

      ++v14;
    }
    while (v11 != v14);
    uint64_t v41 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v49, *(double *)&v13, v55, 16);
    uint64_t v11 = v41;
    if (v41) {
      continue;
    }
    break;
  }
LABEL_23:

  double v46 = (NSDictionary *)objc_msgSend_copy(v4, v43, v44, v45);
  qrChannelExperiments = self->_qrChannelExperiments;
  self->_qrChannelExperiments = v46;
}

- (void)_buildQrExperiments
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (objc_msgSend_count(self->_qrSessionExperiments, v4, v5, v6))
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v10 = self->_qrSessionExperiments;
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v51, v12, v56, 16);
    if (v13)
    {
      uint64_t v16 = v13;
      uint64_t v17 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v52 != v17) {
            objc_enumerationMutation(v10);
          }
          uint64_t v19 = *(void *)(*((void *)&v51 + 1) + 8 * i);
          double v20 = objc_msgSend_objectForKey_(self->_qrSessionExperiments, v14, v19, v15);
          double v23 = objc_msgSend_stringWithFormat_(NSString, v21, @"qrse_%@", v22, v19);
          objc_msgSend_setObject_forKey_(v3, v24, (uint64_t)v20, v25, v23);
        }
        uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v14, (uint64_t)&v51, v15, v56, 16);
      }
      while (v16);
    }
  }
  if (objc_msgSend_count(self->_qrChannelExperiments, v7, v8, v9))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    int v29 = self->_qrChannelExperiments;
    uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v47, v31, v55, 16);
    if (v32)
    {
      uint64_t v35 = v32;
      uint64_t v36 = *(void *)v48;
      do
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          if (*(void *)v48 != v36) {
            objc_enumerationMutation(v29);
          }
          uint64_t v38 = *(void *)(*((void *)&v47 + 1) + 8 * j);
          double v39 = objc_msgSend_objectForKey_(self->_qrChannelExperiments, v33, v38, v34);
          long long v42 = objc_msgSend_stringWithFormat_(NSString, v40, @"qrce_%@", v41, v38);
          objc_msgSend_setObject_forKey_(v3, v43, (uint64_t)v39, v44, v42);
        }
        uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v33, (uint64_t)&v47, v34, v55, 16);
      }
      while (v35);
    }
  }
  double v45 = (NSDictionary *)objc_msgSend_copy(v3, v26, v27, v28);
  qrExperiments = self->_qrExperiments;
  self->_qrExperiments = v45;
}

- (BOOL)_processNWLinkAllocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v470 = *MEMORY[0x1E4F143B8];
  id v430 = a3;
  id v425 = a4;
  id key = a8;
  double allocbindEndTime = self->_allocbindEndTime;
  if (allocbindEndTime == 0.0) {
    self->_double allocbindEndTime = a9;
  }
  objc_msgSend_quicAllocbindResponse(self->_metricsCollector, v16, v17, allocbindEndTime);
  long long v448 = 0u;
  long long v449 = 0u;
  long long v446 = 0u;
  long long v447 = 0u;
  uint64_t v431 = self;
  uint64_t v19 = self->_interfaceAddressArray;
  uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v446, v21, v469, 16);
  if (v24)
  {
    uint64_t v26 = *(void *)v447;
    while (2)
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v447 != v26) {
          objc_enumerationMutation(v19);
        }
        double v28 = *(void **)(*((void *)&v446 + 1) + 8 * i);
        if (objc_msgSend_index(v28, v22, v23, v25) == a5)
        {
          metricsCollector = v431->_metricsCollector;
          uint64_t v30 = objc_msgSend_name(v28, v22, v23, v25);
          objc_msgSend_allocbindResponseFromInterface_(metricsCollector, v31, (uint64_t)v30, v32);

          goto LABEL_13;
        }
      }
      uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v22, (uint64_t)&v446, v25, v469, 16);
      if (v24) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  uint64_t v36 = objc_msgSend_messageType(v430, v33, v34, v35);
  int v40 = v36;
  if (v36 >= 0x25)
  {
    objc_msgSend_stringWithFormat_(NSString, v37, @"(unknown: %i)", v39, v36);
    uint64_t v426 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v426 = off_1E5974678[(int)v36];
  }
  uint64_t v429 = objc_msgSend_allocbindResponse(v430, v37, v38, v39);
  if (v429)
  {
    Value = 0;
    if (key && v431->_tokenToCandidatePairs) {
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v431->_tokenToCandidatePairs, key);
    }
    double v433 = Value;
    unint64_t v424 = objc_msgSend_state(v433, v45, v46, v47);
    nwLinuint64_t k = v431->_nwLink;
    long long v52 = objc_msgSend_sessionID(v433, v49, v50, v51);
    uint64_t v56 = objc_msgSend_local(v433, v53, v54, v55);
    LOBYTE(v410) = objc_msgSend_isCellularStunCandidate(v56, v57, v58, v59);
    double v427 = objc_msgSend_connectionInfoForLocalAddress_remoteAddress_clientUniquePID_sessionID_type_isRelay_isCellular_(nwLink, v60, (uint64_t)a6, v61, a7, 0, v52, 5, 1, v410);

    long long v62 = v431->_metricsCollector;
    long long v66 = objc_msgSend_protocolStackDescription(v427, v63, v64, v65);
    objc_msgSend_allocbindResponseForProtocolStack_(v62, v67, (uint64_t)v66, v68);

    double v69 = GLUtilConnectionDictionaryForNWConnectionInfo(v427, 1);
    uint64_t v73 = objc_msgSend_connections(v433, v70, v71, v72);
    objc_msgSend_setObject_forKeyedSubscript_(v73, v74, (uint64_t)v69, v75, @"qr");

    uint64_t v79 = objc_msgSend_linkMetrics(v433, v76, v77, v78);
    objc_msgSend_receiveAllocbindResponse(v79, v80, v81, v82);

    objc_msgSend__setLinkMetricsAttributesForCandidatePair_(v431, v83, (uint64_t)v433, v84);
    double v88 = objc_msgSend_local(v433, v85, v86, v87);
    uint64_t v92 = objc_msgSend_address(v88, v89, v90, v91);

    int v96 = *(unsigned __int8 *)(v92 + 1);
    if (v96 == 2)
    {
      if (!IMGetDomainBoolForKey()) {
        goto LABEL_23;
      }
    }
    else if (v96 != 30 || (IMGetDomainBoolForKey() & 1) == 0)
    {
LABEL_23:
      uint64_t v97 = objc_msgSend_transactionID(v430, v93, v94, v95);
      if (objc_msgSend_removeProtoRequest_(v433, v98, v97, v99))
      {
        int isRealloc = objc_msgSend_isRealloc(v433, v100, v101, v102);
        if (v431->_state < 5 || (objc_msgSend_pendingNoSessionStateAllocbind(v433, v103, v104, v105) & 1) != 0)
        {
          uint64_t v423 = objc_msgSend_materials(v429, v103, v104, v105);
          objc_msgSend__getAndProcessDatablobsFromReceivedMaterials_(v431, v106, v423, v107);
          if (v424 > 2)
          {
            if ((objc_msgSend_pendingNoSessionStateAllocbind(v433, v108, v109, v110) & 1) == 0)
            {
              long long v198 = objc_msgSend_GlobalLink(IDSFoundationLog, v149, v150, v151);
              if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
              {
                long long v199 = (&_IDSStunCandidatePairStateStrings)[v424];
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v199;
                *(_WORD *)&uint8_t buf[12] = 2112;
                *(void *)&buf[14] = v426;
                _os_log_impl(&dword_19D9BE000, v198, OS_LOG_TYPE_DEFAULT, "candidate pair state is [%s], ignore %@", buf, 0x16u);
              }
              BOOL v153 = 1;
              goto LABEL_209;
            }
          }
          else
          {
            double allocbindStartTime = v431->_allocbindStartTime;
            double v111 = v431->_allocbindEndTime;
            id v113 = objc_msgSend_GlobalLink(IDSFoundationLog, v108, v109, v110);
            float v114 = (v111 - allocbindStartTime) * 1000.0;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              char v118 = objc_msgSend_local(v433, v115, v116, v117);
              uint64_t v122 = objc_msgSend_transport(v118, v119, v120, v121);
              int v123 = *(unsigned __int8 *)(v92 + 1);
              idsSessionID = v431->_idsSessionID;
              objc_msgSend_sessionID(v433, v125, v126, v127);
              id v128 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138413826;
              *(void *)&uint8_t buf[4] = v426;
              *(_WORD *)&uint8_t buf[12] = 2112;
              *(void *)&buf[14] = key;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(double *)&unsigned char buf[24] = v114;
              LOWORD(v463) = 2048;
              *(void *)((char *)&v463 + 2) = v122;
              WORD5(v463) = 1024;
              HIDWORD(v463) = v123;
              *(_WORD *)double v464 = 2112;
              *(void *)&v464[2] = idsSessionID;
              *(_WORD *)&v464[10] = 2112;
              *(void *)&v464[12] = v128;
              _os_log_impl(&dword_19D9BE000, v113, OS_LOG_TYPE_DEFAULT, "Received %@ on %@ after %0.6lf ms over protocol: %ld family: %d IDSSessionID: %@ QRSessionID: %@", buf, 0x44u);
            }
            unsigned __int16 v129 = stunMessageTypeFromProtoMessageType(v40, isRealloc);
            GLUtilReportAWDStunMessageEventWithType(v129, 0, v433, v114);
            long long v133 = objc_msgSend_reportingDataBlob(v429, v130, v131, v132);
            double v137 = objc_msgSend_local(v433, v134, v135, v136);
            uint64_t v140 = objc_msgSend_base64EncodedStringWithOptions_(v133, v138, 0, v139);
            objc_msgSend_setAllocbindDataBlob_(v137, v141, (uint64_t)v140, v142);

            uint64_t v143 = GLUCreateQRStunMessageEventWithType(v129, 0, v433, v431->_timeBase, v114);
            if (v143)
            {
              id WeakRetained = objc_loadWeakRetained((id *)&v431->_delegate);
              char v145 = objc_opt_respondsToSelector();

              if (v145)
              {
                id v146 = objc_loadWeakRetained((id *)&v431->_delegate);
                objc_msgSend_link_didAddQREvent_(v146, v147, (uint64_t)v431, v148, v143);
              }
            }
          }
          double v422 = objc_msgSend_clientAddress(v429, v149, v150, v151);
          if (objc_msgSend_length(v422, v169, v170, v171))
          {
            uint64_t v175 = objc_msgSend_local(v433, v172, v173, v174);
            objc_msgSend_setExternalAddress_(v175, v176, (uint64_t)v422, v177);

            unsigned int v183 = objc_msgSend_channelId(v429, v178, v179, v180);
            unint64_t v185 = (unsigned __int16)v183;
            if ((_WORD)v183)
            {
              unsigned int v186 = objc_msgSend_channelNumber(v433, v181, v182, v184);
              uint64_t v187 = bswap32(v183) >> 16;
              if (!v186)
              {
                long long v200 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109634;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = (unsigned __int16)v183;
                  *(_WORD *)&buf[14] = 2112;
                  *(void *)&uint8_t buf[16] = key;
                  _os_log_impl(&dword_19D9BE000, v200, OS_LOG_TYPE_DEFAULT, "update channelNumber (%04x->%04x) for %@", buf, 0x18u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    unint64_t v415 = (unsigned __int16)v183;
                    uint64_t v417 = key;
                    v411 = 0;
                    _IDSLogTransport(@"GL", @"IDS", @"update channelNumber (%04x->%04x) for %@");
                    if (_IDSShouldLog())
                    {
                      unint64_t v415 = (unsigned __int16)v183;
                      uint64_t v417 = key;
                      v411 = 0;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"update channelNumber (%04x->%04x) for %@");
                    }
                  }
                }
                objc_msgSend_setChannelNumber_(v433, v201, v187, v202, v411, v415, v417);
LABEL_78:
                IDSSimpleUInt16List_AddItem((uint64_t)&v431->_channelNumberList, v187);
                objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(v431, v203, (uint64_t)v433, v204, a6, a7, v187);
                long long v205 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
                {
                  char v209 = objc_msgSend_participantType(v429, v206, v207, v208);
                  int v210 = @"lightweight";
                  if ((v209 & 1) == 0) {
                    int v210 = @"normal";
                  }
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v210;
                  _os_log_impl(&dword_19D9BE000, v205, OS_LOG_TYPE_DEFAULT, "server reports this client is a %@ participant", buf, 0xCu);
                }

                if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                {
                  id v214 = (objc_msgSend_participantType(v429, v211, v212, v213) & 1) != 0
                       ? @"lightweight"
                       : @"normal";
                  v411 = v214;
                  _IDSLogTransport(@"GL", @"IDS", @"server reports this client is a %@ participant");
                  if (_IDSShouldLog())
                  {
                    if (objc_msgSend_participantType(v429, v215, v216, v217, v411)) {
                      uint64_t v218 = @"lightweight";
                    }
                    else {
                      uint64_t v218 = @"normal";
                    }
                    v411 = v218;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"server reports this client is a %@ participant");
                  }
                }
                double v219 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
                {
                  long long v223 = objc_msgSend_software(v429, v220, v221, v222);
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v223;
                  _os_log_impl(&dword_19D9BE000, v219, OS_LOG_TYPE_DEFAULT, "received QR server build version %@", buf, 0xCu);
                }
                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v411 = objc_msgSend_software(v429, v224, v225, v226);
                    _IDSLogTransport(@"GL", @"IDS", @"received QR server build version %@");

                    if (_IDSShouldLog())
                    {
                      v411 = objc_msgSend_software(v429, v224, v225, v226, v411);
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"received QR server build version %@");
                    }
                  }
                }
                unsigned __int16 v227 = objc_msgSend_linkId(v429, v224, v225, v226, v411);
                objc_msgSend_setRelayLinkID_(v433, v228, v227, v229);
                objc_msgSend_quicConnectionInfos(v429, v230, v231, v232);
                long long v444 = 0u;
                long long v445 = 0u;
                long long v443 = 0u;
                long long v442 = 0u;
                obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v233, (uint64_t)&v442, v234, v468, 16);
                if (v237)
                {
                  uint64_t v238 = *(void *)v443;
                  uint64_t v239 = 67109378;
                  do
                  {
                    for (uint64_t j = 0; j != v237; ++j)
                    {
                      if (*(void *)v443 != v238) {
                        objc_enumerationMutation(obj);
                      }
                      id v241 = *(void **)(*((void *)&v442 + 1) + 8 * j);
                      unsigned int v242 = objc_msgSend_quicConnectionId(v241, v235, v236, *(double *)&v239);
                      int v246 = objc_msgSend_quicConnectionType(v241, v243, v244, v245);
                      long long v250 = objc_msgSend_QUICConnectionIDs(v433, v247, v248, v249);
                      id v254 = v250;
                      if (v246 == 1)
                      {
                        objc_msgSend_setRemoteIDSConnectionIDData_(v250, v251, (uint64_t)v242, v253);
                      }
                      else if (v246)
                      {
                        uint64_t v255 = objc_msgSend_GlobalLink(IDSFoundationLog, v251, v252, v253);
                        if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109378;
                          *(_DWORD *)&uint8_t buf[4] = v246;
                          *(_WORD *)&uint8_t buf[8] = 2112;
                          *(void *)&buf[10] = v241;
                          _os_log_impl(&dword_19D9BE000, v255, OS_LOG_TYPE_DEFAULT, "Received unknown QuicConnectionType: %d in QuicConnectionInfo: %@", buf, 0x12u);
                        }
                      }
                      else
                      {
                        objc_msgSend_setRemoteAVCConnectionIDData_(v250, v251, (uint64_t)v242, v253);
                      }
                    }
                    uint64_t v237 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v235, (uint64_t)&v442, *(double *)&v239, v468, 16);
                  }
                  while (v237);
                }

                if (objc_msgSend__shouldUseQRTLE(v431, v256, v257, v258))
                {
                  double v262 = objc_msgSend_local(v433, v259, v260, v261);
                  if (objc_msgSend_isCellularStunCandidate(v262, v263, v264, v265))
                  {
                    BOOL v266 = !v431->_allowTLEOverCellular;

                    if (v266) {
                      goto LABEL_154;
                    }
                  }
                  else
                  {
                  }
                  uint64_t v268 = objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261);
                  int isComplete = objc_msgSend_isComplete(v268, v269, v270, v271);

                  if (isComplete)
                  {
                    uint64_t v276 = objc_msgSend_sessionID(v433, v273, v274, v275);
                    uint64_t v280 = objc_msgSend_local(v433, v277, v278, v279);
                    uint64_t v284 = objc_msgSend_address(v280, v281, v282, v283);

                    uint64_t v288 = objc_msgSend_remote(v433, v285, v286, v287);
                    uint64_t v292 = objc_msgSend_external(v288, v289, v290, v291);

                    __int16 v296 = objc_msgSend_QUICConnectionIDs(v433, v293, v294, v295);
                    uint64_t v300 = objc_msgSend_channelNumber(v433, v297, v298, v299);
                    if (objc_msgSend_createQUICPodQRConnectionsForSession_localAddress_remoteAddress_quicConnectionIDs_channelNumber_(v431->_nwLink, v301, (uint64_t)v276, v302, v284, v292, v296, v300))
                    {
                      *(void *)&long long v303 = 0xAAAAAAAAAAAAAAAALL;
                      *((void *)&v303 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      long long v466 = v303;
                      long long v467 = v303;
                      *(_OWORD *)&v464[16] = v303;
                      long long v465 = v303;
                      long long v463 = v303;
                      *(_OWORD *)double v464 = v303;
                      *(_OWORD *)buf = v303;
                      *(_OWORD *)&uint8_t buf[16] = v303;
                      __str[6] = v303;
                      __str[7] = v303;
                      __str[4] = v303;
                      __str[5] = v303;
                      __str[2] = v303;
                      __str[3] = v303;
                      __str[0] = v303;
                      __str[1] = v303;
                      SAToIPPortString(buf, 0x80uLL, v284);
                      SAToIPPortString((char *)__str, 0x80uLL, v292);
                      unsigned __int16 v304 = OSLogHandleForTransportCategory();
                      if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)double v451 = 138413314;
                        id v452 = v276;
                        __int16 v453 = 2080;
                        v454 = buf;
                        __int16 v455 = 2080;
                        double v456 = __str;
                        __int16 v457 = 2112;
                        BOOL v458 = v296;
                        __int16 v459 = 1024;
                        unsigned int v460 = __rev16(v300);
                        _os_log_impl(&dword_19D9BE000, v304, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded", v451, 0x30u);
                      }

                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          uint64_t v305 = __rev16(v300);
                          uint64_t v419 = v296;
                          uint64_t v420 = v305;
                          uint64_t v417 = __str;
                          uint64_t v412 = v276;
                          unint64_t v415 = (unint64_t)buf;
                          _IDSLogTransport(@"GL", @"IDS", @"createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded");
                          if (_IDSShouldLog())
                          {
                            uint64_t v419 = v296;
                            uint64_t v420 = v305;
                            uint64_t v417 = __str;
                            uint64_t v412 = v276;
                            unint64_t v415 = (unint64_t)buf;
                            _IDSLogV(0, @"IDSFoundation", @"GL", @"createQUICPodQRConnectionsForSession(%@, %s, %s, %@, 0x%04x) succeeded");
                          }
                        }
                      }
                    }
                    else
                    {
                      double v311 = OSLogHandleForTransportCategory();
                      if (os_log_type_enabled(v311, OS_LOG_TYPE_DEFAULT))
                      {
                        objc_msgSend_sessionID(v433, v312, v313, v314);
                        id v315 = (id)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138412290;
                        *(void *)&uint8_t buf[4] = v315;
                        _os_log_impl(&dword_19D9BE000, v311, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@) failed", buf, 0xCu);
                      }
                      if (os_log_shim_legacy_logging_enabled())
                      {
                        if (_IDSShouldLogTransport())
                        {
                          uint64_t v412 = objc_msgSend_sessionID(v433, v316, v317, v318);
                          _IDSLogTransport(@"GL", @"IDS", @"createQUICPodQRConnectionsForSession(%@) failed");

                          if (_IDSShouldLog())
                          {
                            uint64_t v412 = objc_msgSend_sessionID(v433, v319, v320, v321, v412);
                            _IDSLogV(0, @"IDSFoundation", @"GL", @"createQUICPodQRConnectionsForSession(%@) failed");
                          }
                        }
                      }
                      if (v431->_clientType == 6)
                      {
                        double v322 = OSLogHandleForTransportCategory();
                        if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
                        {
                          objc_msgSend_sessionID(v433, v323, v324, v325);
                          id v326 = (id)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138412290;
                          *(void *)&uint8_t buf[4] = v326;
                          _os_log_impl(&dword_19D9BE000, v322, OS_LOG_TYPE_DEFAULT, "createQUICPodQRConnectionsForSession(%@) failed, triggering ABC", buf, 0xCu);
                        }
                        if (os_log_shim_legacy_logging_enabled())
                        {
                          if (_IDSShouldLogTransport())
                          {
                            uint64_t v412 = objc_msgSend_sessionID(v433, v327, v329, v328);
                            _IDSLogTransport(@"GL", @"IDS", @"createQUICPodQRConnectionsForSession(%@) failed, triggering ABC");

                            if (_IDSShouldLog())
                            {
                              uint64_t v412 = objc_msgSend_sessionID(v433, v327, v330, v328, v412);
                              _IDSLogV(0, @"IDSFoundation", @"GL", @"createQUICPodQRConnectionsForSession(%@) failed, triggering ABC");
                            }
                          }
                        }
                        objc_msgSend__triggerSymptomsWithType_subType_subTypeContext_duration_(v431, v327, @"IDSQuickRelayShared", v328, @"TLE", @"SetupFailed", 0, v412);
                      }
                    }

                    goto LABEL_153;
                  }
                  double v306 = OSLogHandleForTransportCategory();
                  if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
                  {
                    objc_msgSend_QUICConnectionIDs(v433, v307, v308, v309);
                    id v310 = (id)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138412290;
                    *(void *)&uint8_t buf[4] = v310;
                    _os_log_impl(&dword_19D9BE000, v306, OS_LOG_TYPE_DEFAULT, "QUIC connectionIDs not available for TLE (%@)", buf, 0xCu);
                  }
                  if (os_log_shim_legacy_logging_enabled())
                  {
                    if (_IDSShouldLogTransport())
                    {
                      uint64_t v412 = objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261);
                      _IDSLogTransport(@"GL", @"IDS", @"QUIC connectionIDs not available for TLE (%@)");

                      if (_IDSShouldLog())
                      {
                        uint64_t v276 = objc_msgSend_QUICConnectionIDs(v433, v259, v260, v261, v412);
                        uint64_t v412 = v276;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"QUIC connectionIDs not available for TLE (%@)");
LABEL_153:
                      }
                    }
                  }
                }
LABEL_154:
                uint64_t v331 = objc_msgSend_activeExperiments(v429, v259, v260, v261, v412, v415, v417, v419, v420);
                objc_msgSend__parseActiveExperiments_(v431, v332, (uint64_t)v331, v333);

                objc_msgSend__buildQrExperiments(v431, v334, v335, v336);
                uint64_t v340 = objc_msgSend_materials(v429, v337, v338, v339);
                objc_msgSend_receiveKeyMaterials_(v431, v341, (uint64_t)v340, v342);

                double v346 = v431;
                serverMaterialExchangeController = v431->_serverMaterialExchangeController;
                if (serverMaterialExchangeController)
                {
                  objc_msgSend_setNeedsUpdate(serverMaterialExchangeController, v343, v344, v345);
                  double v346 = v431;
                }
                quicMaterialExchangeProvider = v346->_quicMaterialExchangeProvider;
                if (quicMaterialExchangeProvider) {
                  objc_msgSend_sendDesiredMaterialsIfNeeded(quicMaterialExchangeProvider, v343, v344, v345);
                }
                if (v424 > 2) {
                  goto LABEL_205;
                }
                objc_msgSend_setState_(v433, v343, 3, v345);
                double v349 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v349, OS_LOG_TYPE_DEFAULT))
                {
                  double v350 = (&_IDSStunCandidatePairStateStrings)[v424];
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = v350;
                  *(_WORD *)&uint8_t buf[12] = 2080;
                  *(void *)&buf[14] = off_1E944EAA8;
                  *(_WORD *)&unsigned char buf[22] = 2112;
                  *(void *)&unsigned char buf[24] = key;
                  _os_log_impl(&dword_19D9BE000, v349, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v416 = off_1E944EAA8;
                    id v418 = key;
                    double v413 = (&_IDSStunCandidatePairStateStrings)[v424];
                    _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
                    if (_IDSShouldLog())
                    {
                      v416 = off_1E944EAA8;
                      id v418 = key;
                      double v413 = (&_IDSStunCandidatePairStateStrings)[v424];
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
                    }
                  }
                }
                if (objc_msgSend_isRelayStunCandidatePair(v433, v351, v352, v353, v413, v416, v418)
                  && ((objc_msgSend_isSharedQRSession(v433, v354, v355, v356) | isRealloc) & 1) == 0)
                {
                  double v358 = objc_msgSend_sessionID(v433, v354, v357, v356);
                  v361 = objc_msgSend__getCandidatePairsWithSessionID_inState_(v431, v359, (uint64_t)v358, v360, 4);

                  long long v440 = 0u;
                  long long v441 = 0u;
                  long long v438 = 0u;
                  long long v439 = 0u;
                  id v362 = v361;
                  uint64_t v367 = objc_msgSend_countByEnumeratingWithState_objects_count_(v362, v363, (uint64_t)&v438, v364, v450, 16);
                  if (v367)
                  {
                    uint64_t v369 = *(void *)v439;
                    while (2)
                    {
                      uint64_t v370 = 0;
                      double v371 = v433;
                      do
                      {
                        if (*(void *)v439 != v369)
                        {
                          objc_enumerationMutation(v362);
                          double v371 = v433;
                        }
                        uint64_t v372 = *(NSObject **)(*((void *)&v438 + 1) + 8 * v370);
                        if (v372 != v371)
                        {
                          v400 = objc_msgSend_GlobalLink(IDSFoundationLog, v365, v366, v368);
                          if (os_log_type_enabled(v400, OS_LOG_TYPE_DEFAULT))
                          {
                            objc_msgSend_sessionID(v433, v401, v402, v403);
                            id v404 = (id)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138412802;
                            *(void *)&uint8_t buf[4] = v372;
                            *(_WORD *)&uint8_t buf[12] = 2112;
                            *(void *)&buf[14] = v404;
                            *(_WORD *)&unsigned char buf[22] = 2112;
                            *(void *)&unsigned char buf[24] = v433;
                            _os_log_impl(&dword_19D9BE000, v400, OS_LOG_TYPE_DEFAULT, "Found another connected candidate pair %@ with the same QRSessionID %@ disconnecting %@", buf, 0x20u);
                          }
                          objc_msgSend__sendQUICUnallocbindRequest_reason_(v431, v405, (uint64_t)key, v406, 8);

                          goto LABEL_207;
                        }
                        ++v370;
                      }
                      while (v367 != v370);
                      uint64_t v367 = objc_msgSend_countByEnumeratingWithState_objects_count_(v362, v365, (uint64_t)&v438, v368, v450, 16);
                      if (v367) {
                        continue;
                      }
                      break;
                    }
                  }
                }
                objc_msgSend__setFirstDefaultCandidatePair_(v431, v354, (uint64_t)v433, v356);
                if (isRealloc)
                {
                  if ((objc_msgSend_hbStarted(v433, v373, v374, v375) & 1) == 0)
                  {
                    id v379 = OSLogHandleForTransportCategory();
                    if (os_log_type_enabled(v379, OS_LOG_TYPE_DEFAULT))
                    {
                      int v383 = objc_msgSend_pendingRealloc(v433, v380, v381, v382);
                      long long v384 = @"NO";
                      if (v383) {
                        long long v384 = @"YES";
                      }
                      *(_DWORD *)buf = 138412290;
                      *(void *)&uint8_t buf[4] = v384;
                      _os_log_impl(&dword_19D9BE000, v379, OS_LOG_TYPE_DEFAULT, "receive reallocate response, send HBR (%@).", buf, 0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLogTransport())
                    {
                      double v388 = objc_msgSend_pendingRealloc(v433, v385, v387, v386)
                           ? @"YES"
                           : @"NO";
                      int v414 = v388;
                      _IDSLogTransport(@"GL", @"IDS", @"receive reallocate response, send HBR (%@).");
                      if (_IDSShouldLog())
                      {
                        if (objc_msgSend_pendingRealloc(v433, v385, v389, v386, v414)) {
                          double v390 = @"YES";
                        }
                        else {
                          double v390 = @"NO";
                        }
                        int v414 = v390;
                        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive reallocate response, send HBR (%@).");
                      }
                    }
                    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v431, v385, 3, v386, 0, 0, key, v414);
                    objc_msgSend_setHbStarted_(v433, v391, 1, v392);
                  }
                  if ((objc_msgSend_isSharedQRSession(v433, v376, v377, v378) & 1) == 0) {
                    goto LABEL_207;
                  }
                }
                else
                {
                  objc_msgSend__processXORMappedAddress_arrivalTime_(v431, v373, (uint64_t)v433, a9);
                  if (objc_msgSend_allocateType(v433, v395, v396, v397) == 2)
                  {
                    objc_msgSend__sendQUICUnallocbindRequest_reason_(v431, v393, (uint64_t)key, v394, 0);
                    goto LABEL_207;
                  }
                }
                if ((objc_msgSend__postProcessQUICAllocbindResponse_candidatePair_(v431, v393, (uint64_t)v429, v394, v433) & 1) == 0)
                {
                  if (v431->_delaySessionConnected)
                  {
                    if (!v431->_isInitiator)
                    {
                      v434[0] = MEMORY[0x1E4F143A8];
                      v434[1] = 3221225472;
                      v434[2] = sub_19DA7F9A4;
                      v434[3] = &unk_1E5974100;
                      long long v435 = v433;
                      id v436 = v431;
                      id v437 = key;
                      objc_msgSend_startSessionConnectedTimer_block_(v435, v398, 30, v399, v434);
                    }
                  }
                  else
                  {
                    objc_msgSend__sendCommandMessage_stunMessage_options_candidatePairToken_(v431, v343, 1, v345, 0, 0, key);
                  }
LABEL_205:
                  if (objc_msgSend_pendingNoSessionStateAllocbind(v433, v343, v344, v345)) {
                    objc_msgSend_setPendingNoSessionState_(v433, v407, 0, v408);
                  }
                }
LABEL_207:

                BOOL v153 = 1;
                goto LABEL_208;
              }
              unsigned int v188 = __rev16(v186);
              if ((unsigned __int16)v183 == v188)
              {
                double v189 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v185;
                  _os_log_impl(&dword_19D9BE000, v189, OS_LOG_TYPE_DEFAULT, "channelNumber unchanged (%04x)", buf, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    v411 = (void *)v185;
                    _IDSLogTransport(@"GL", @"IDS", @"channelNumber unchanged (%04x)");
                    if (_IDSShouldLog())
                    {
                      v411 = (void *)v185;
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"channelNumber unchanged (%04x)");
                    }
                  }
                }
                goto LABEL_78;
              }
              double v267 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v188;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v185;
                _os_log_impl(&dword_19D9BE000, v267, OS_LOG_TYPE_DEFAULT, "channelNumber mismatch (%04x->%04x)", buf, 0xEu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  _IDSLogTransport(@"GL", @"IDS", @"channelNumber mismatch (%04x->%04x)");
                  if (_IDSShouldLog()) {
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"channelNumber mismatch (%04x->%04x)");
                  }
                }
              }
LABEL_122:
              BOOL v153 = 0;
LABEL_208:
              long long v198 = v422;
LABEL_209:

              uint64_t v155 = (void *)v423;
              goto LABEL_210;
            }
            long long v197 = objc_msgSend_GlobalLink(IDSFoundationLog, v181, v182, v184);
            if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v426;
              _os_log_impl(&dword_19D9BE000, v197, OS_LOG_TYPE_DEFAULT, "receive %@ without channel-number", buf, 0xCu);
            }
          }
          else
          {
            long long v197 = objc_msgSend_GlobalLink(IDSFoundationLog, v172, v173, v174);
            if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v426;
              _os_log_impl(&dword_19D9BE000, v197, OS_LOG_TYPE_DEFAULT, "receive %@ with invalid client address", buf, 0xCu);
            }
          }

          goto LABEL_122;
        }
        __int16 v190 = objc_msgSend_GlobalLink(IDSFoundationLog, v103, v104, v105);
        uint64_t v155 = v190;
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v194 = (&_IDSStunCandidatePairStateStrings)[v424];
          int v195 = objc_msgSend_pendingNoSessionStateAllocbind(v433, v191, v192, v193);
          long long v196 = @"NO";
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v194;
          *(_WORD *)&uint8_t buf[12] = 2112;
          if (v195) {
            long long v196 = @"YES";
          }
          *(void *)&buf[14] = v196;
          *(_WORD *)&unsigned char buf[22] = 2112;
          *(void *)&unsigned char buf[24] = v426;
          int64_t v166 = "_processNWLinkAllocbindResponse: candidate pair state is [%s], pendingNoSessionStateAllocbind: %@, ignore %@";
          uint64_t v155 = v190;
          int v167 = v190;
          uint32_t v168 = 32;
          goto LABEL_45;
        }
      }
      else
      {
        int64_t v161 = objc_msgSend_GlobalLink(IDSFoundationLog, v100, v101, v102);
        uint64_t v155 = v161;
        if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v165 = objc_msgSend_transactionID(v430, v162, v163, v164);
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v165;
          int64_t v166 = "_processNWLinkAllocbindResponse: %llu not pending proto request";
          uint64_t v155 = v161;
          int v167 = v161;
          uint32_t v168 = 12;
LABEL_45:
          _os_log_impl(&dword_19D9BE000, v167, OS_LOG_TYPE_DEFAULT, v166, buf, v168);
        }
      }
      BOOL v153 = 1;
LABEL_210:

      uint64_t v152 = v433;
      goto LABEL_211;
    }
    double v154 = objc_msgSend_GlobalLink(IDSFoundationLog, v93, v94, v95);
    uint64_t v155 = v154;
    if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v92 + 1) == 30) {
        double v159 = "IPv6";
      }
      else {
        double v159 = "IPv4";
      }
      uint64_t v160 = objc_msgSend_transactionID(v430, v156, v157, v158);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v159;
      *(_WORD *)&uint8_t buf[12] = 2048;
      *(void *)&buf[14] = v160;
      uint64_t v155 = v154;
      _os_log_impl(&dword_19D9BE000, v154, OS_LOG_TYPE_DEFAULT, "_processNWLinkAllocbindResponse: force dropping [%s] quic allocbind response %llu.", buf, 0x16u);
    }
    BOOL v153 = 0;
    goto LABEL_210;
  }
  uint64_t v152 = objc_msgSend_GlobalLink(IDSFoundationLog, v41, v42, v43);
  if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v426;
    _os_log_impl(&dword_19D9BE000, v152, OS_LOG_TYPE_DEFAULT, "invalid %@ received", buf, 0xCu);
  }
  BOOL v153 = 0;
LABEL_211:

  return v153;
}

- (BOOL)_processQUICUnallocbindResponse:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remmoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v211 = a4;
  id v14 = a8;
  Value = 0;
  if (v14 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v14);
  }
  uint64_t v212 = v14;
  id v16 = Value;
  uint64_t v20 = objc_msgSend_state(v16, v17, v18, v19);
  uint64_t v24 = objc_msgSend_transactionID(v13, v21, v22, v23);
  if (objc_msgSend_removeProtoRequest_(v16, v25, v24, v26))
  {
    if (v20 == 6)
    {
      uint64_t v30 = objc_msgSend_GlobalLink(IDSFoundationLog, v27, v28, v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t prots = (uint64_t)OBJC_PROTOCOL___IDSServerBagContentProvider.prots;
        double v31 = "receive unallocbind response with state [%s], ignore.";
LABEL_10:
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, v31, buf, 0xCu);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
    uint64_t v209 = v20;
    objc_msgSend_startTime(v13, v27, v28, v29);
    double v36 = v35;
    double v39 = objc_msgSend_GlobalLink(IDSFoundationLog, v37, v38, v35);
    double v40 = (a9 - v36) * 1000.0;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      objc_msgSend_sessionID(v16, v41, v42, v43);
      double v45 = (char *)objc_claimAutoreleasedReturnValue();
      long long v49 = objc_msgSend_local(v16, v46, v47, v48);
      uint64_t v53 = objc_msgSend_transport(v49, v50, v51, v52);
      uint64_t v57 = objc_msgSend_local(v16, v54, v55, v56);
      int v61 = *(unsigned __int8 *)(objc_msgSend_address(v57, v58, v59, v60) + 1);
      *(_DWORD *)buf = 138413570;
      uint64_t prots = (uint64_t)idsSessionID;
      __int16 v218 = 2112;
      double v219 = v45;
      __int16 v220 = 2112;
      uint64_t v221 = v212;
      __int16 v222 = 2048;
      double v223 = v40;
      __int16 v224 = 2048;
      uint64_t v225 = v53;
      __int16 v226 = 1024;
      int v227 = v61;
      _os_log_impl(&dword_19D9BE000, v39, OS_LOG_TYPE_DEFAULT, "Received unallocbind response for IDSSessionID: %@ QRSessionID: %@ on %@ after %0.6lf ms over protocol: %ld family: %d", buf, 0x3Au);
    }
    int v65 = objc_msgSend_messageType(v13, v62, v63, v64);
    unsigned __int16 v66 = stunMessageTypeFromProtoMessageType(v65, 0);
    float v67 = v40;
    GLUtilReportAWDStunMessageEventWithType(v66, 0, v16, v67);
    uint64_t v71 = objc_msgSend_unallocbindResponse(v13, v68, v69, v70);
    uint64_t v30 = objc_msgSend_reportingDataBlob(v71, v72, v73, v74);

    double v78 = objc_msgSend_local(v16, v75, v76, v77);
    uint64_t v81 = objc_msgSend_base64EncodedStringWithOptions_(v30, v79, 0, v80);
    objc_msgSend_setAllocbindDataBlob_(v78, v82, (uint64_t)v81, v83);

    int v210 = GLUCreateQRStunMessageEventWithType(v66, 0, v16, self->_timeBase, v67);
    if (v210)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      char v88 = objc_opt_respondsToSelector();

      if (v88)
      {
        id v89 = objc_loadWeakRetained((id *)&self->_delegate);
        objc_msgSend_link_didAddQREvent_(v89, v90, (uint64_t)self, v91, v210);
      }
    }
    if (self->_state > 3)
    {
      uint64_t v157 = objc_msgSend_transactionID(v13, v84, v85, v86);
      if (self->_unallocbindRequestToReason)
      {
        int64_t v161 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v155, v157, v158);
        if (v161)
        {
          unallocbindRequestToReasouint64_t n = self->_unallocbindRequestToReason;
          double v164 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v159, v157, v162);
          uint64_t v165 = (void *)CFDictionaryGetValue((CFDictionaryRef)unallocbindRequestToReason, v164);
          unsigned __int8 v169 = objc_msgSend_unsignedIntValue(v165, v166, v167, v168);
        }
        else
        {
          unsigned __int8 v169 = objc_msgSend_unsignedIntValue(0, v159, v160, v162);
        }
      }
      else
      {
        unsigned __int8 v169 = objc_msgSend_unsignedIntValue(0, v155, v156, v158);
      }
      uint64_t v179 = self->_unallocbindRequestToReason;
      double v180 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v170, v157, v171);
      objc_msgSend_removeObjectForKey_(v179, v181, (uint64_t)v180, v182);

      objc_msgSend__notifyCandidatePairDisconnected_withReason_(self, v183, (uint64_t)v16, v184, v169);
      if (self->_isUPlusOneSession) {
        objc_msgSend__destroyVirtualRelayLinksForCandidatePair_withReason_(self, v185, (uint64_t)v16, v186, v169);
      }
      char hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v185, 3, v186, 4, 0, 0);
      char v188 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc;
      if (self->_state == 5)
      {
        objc_msgSend__discardCandidatePairsWithOption_isReinitiating_(self, v126, 0, v128, 0);
        if ((v188 & 1) == 0) {
          objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v126, 0, v128, v169);
        }
      }
      else if ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc & 1) == 0 {
             && objc_msgSend_isEqualToString_(self->_cbuuid, v126, @"12345678-7654-DADA-DADA-DADADADADADA", v128))
      }
      {
        double v189 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D9BE000, v189, OS_LOG_TYPE_DEFAULT, "no more underlying link is connected.", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"no more underlying link is connected.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"no more underlying link is connected.");
            }
          }
        }
        objc_msgSend_disconnectWithCompletionHandler_isReinitiating_(self, v190, 0, v191, 0);
      }
      goto LABEL_68;
    }
    objc_msgSend_setState_(v16, v84, 6, v86);
    uint64_t v92 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      CFDictionaryRef v93 = (&_IDSStunCandidatePairStateStrings)[v209];
      *(_DWORD *)buf = 136315650;
      uint64_t prots = (uint64_t)v93;
      __int16 v218 = 2080;
      double v219 = off_1E944EAC0;
      __int16 v220 = 2112;
      uint64_t v221 = v212;
      _os_log_impl(&dword_19D9BE000, v92, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v204 = off_1E944EAC0;
        long long v206 = v212;
        long long v201 = (&_IDSStunCandidatePairStateStrings)[v209];
        _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
        if (_IDSShouldLog())
        {
          double v204 = off_1E944EAC0;
          long long v206 = v212;
          long long v201 = (&_IDSStunCandidatePairStateStrings)[v209];
          _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
        }
      }
    }
    uint64_t v97 = objc_msgSend_GlobalLink(IDSFoundationLog, v94, v95, v96, v201, v204, v206);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v101 = objc_msgSend_candidatePairToken(v16, v98, v99, v100);
      *(_DWORD *)buf = 138412290;
      uint64_t prots = (uint64_t)v101;
      _os_log_impl(&dword_19D9BE000, v97, OS_LOG_TYPE_DEFAULT, "Disconnecting unconnected QUIC connection %@ after successful unallocbind response", buf, 0xCu);
    }
    nwLinuint64_t k = self->_nwLink;
    double v106 = objc_msgSend_sessionID(v16, v103, v104, v105);
    double v110 = objc_msgSend_local(v16, v107, v108, v109);
    uint64_t v114 = objc_msgSend_address(v110, v111, v112, v113);
    char v118 = objc_msgSend_remote(v16, v115, v116, v117);
    uint64_t v122 = objc_msgSend_external(v118, v119, v120, v121);
    objc_msgSend_disconnectWithSessionID_localAddress_remoteAddress_waitTime_final_(nwLink, v123, (uint64_t)v106, 5.0, v114, v122, 1);

    if (objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v124, 3, v125, 4, 0, 0))
    {
LABEL_68:
      if (objc_msgSend_pendingNoSessionStateAllocbind(v16, v126, v127, v128))
      {
        objc_msgSend_setState_(v16, v196, 1, v197);
        long long v198 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
        {
          long long v199 = (&_IDSStunCandidatePairStateStrings)[v209];
          *(_DWORD *)buf = 136315650;
          uint64_t prots = (uint64_t)v199;
          __int16 v218 = 2080;
          double v219 = off_1E944EA98;
          __int16 v220 = 2112;
          uint64_t v221 = v212;
          _os_log_impl(&dword_19D9BE000, v198, OS_LOG_TYPE_DEFAULT, "unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"unallocbind response: pendingNoSessionStateAllocbind: update state (%s->%s) for %@.");
            }
          }
        }
      }
      goto LABEL_75;
    }
    uint64_t v207 = _Block_copy(self->_connectReadyHandler);
    unsigned __int16 v129 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t prots = (uint64_t)self;
      _os_log_impl(&dword_19D9BE000, v129, OS_LOG_TYPE_DEFAULT, "failed to connect GlobalLink %@ due to session connected message timed out.", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        double v202 = self;
        _IDSLogTransport(@"GL", @"IDS", @"failed to connect GlobalLink %@ due to session connected message timed out.");
        if (_IDSShouldLog())
        {
          double v202 = self;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to connect GlobalLink %@ due to session connected message timed out.");
        }
      }
    }
    double v208 = objc_msgSend_local(v16, v130, v131, v132, v202);
    long long v133 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      double v137 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v208, v134, v135, v136)];
      *(_DWORD *)buf = 136315394;
      uint64_t prots = (uint64_t)v137;
      __int16 v218 = 1024;
      LODWORD(v219) = 22;
      _os_log_impl(&dword_19D9BE000, v133, OS_LOG_TYPE_DEFAULT, "report session setup failure (%s, %d).", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        long long v203 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v208, v138, v139, v140)];
        uint64_t v205 = 22;
        _IDSLogTransport(@"GL", @"IDS", @"report session setup failure (%s, %d).");
        if (_IDSShouldLog())
        {
          long long v203 = (&_IDSStunTransportStrings)[objc_msgSend_transport(v208, v141, v142, v143, v203, 22)];
          uint64_t v205 = 22;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"report session setup failure (%s, %d).");
        }
      }
    }
    GLUtilReportAWDClientTimerEvent(305, 22, v16, self->_enableSKE, self->_isInitiator, 0.0);
    double v144 = GLUCreateQRClientTimeEvent(305, 22, v16, self->_timeBase, 0.0);
    id v145 = objc_loadWeakRetained((id *)&self->_delegate);
    char v146 = objc_opt_respondsToSelector();

    if (v146)
    {
      id v150 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v150, v151, (uint64_t)self, v152, v144);
    }
    if (objc_msgSend_isSelfQRSession(v16, v147, v148, v149, v203, v205))
    {

LABEL_75:
      goto LABEL_76;
    }
    if (v207)
    {
      uint64_t v172 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v173 = objc_msgSend_dictionaryWithObject_forKey_(MEMORY[0x1E4F1C9E8], v153, @"SessionConnected message timed out.", v154, *MEMORY[0x1E4F28568]);
      uint64_t v176 = objc_msgSend_errorWithDomain_code_userInfo_(v172, v174, @"GlobalLink", v175, 9, v173);

      double v177 = im_primary_queue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      void block[2] = sub_19DA80844;
      block[3] = &unk_1E5970A78;
      id v214 = v176;
      id v215 = v207;
      id v178 = v176;
      dispatch_async(v177, block);
    }
    else
    {
      id v192 = objc_loadWeakRetained((id *)&self->_delegate);
      char v193 = objc_opt_respondsToSelector();

      if ((v193 & 1) == 0)
      {
LABEL_67:

        goto LABEL_68;
      }
      id v178 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didFailToConnectOverCloud_cbuuid_(v178, v194, (uint64_t)self, v195, 0, self->_cbuuid);
    }

    goto LABEL_67;
  }
  uint64_t v30 = objc_msgSend_GlobalLink(IDSFoundationLog, v27, v28, v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t prots = objc_msgSend_transactionID(v13, v32, v33, v34);
    double v31 = "_processQUICUnallocbindResponse: %llu not pending proto request";
    goto LABEL_10;
  }
LABEL_76:

  return 1;
}

- (BOOL)_processQUICReallocIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v10 = *(void *)&a5;
  uint64_t v264 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v237 = a4;
  id v14 = a8;
  Value = 0;
  if (v14 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v14);
  }
  id v16 = Value;
  uint64_t v20 = objc_msgSend_reallocateIndication(v13, v17, v18, v19);
  double v21 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = objc_msgSend_txnId(v20, v22, v23, v24);
    *(_WORD *)&uint8_t buf[12] = 2112;
    *(void *)&buf[14] = v14;
    _os_log_impl(&dword_19D9BE000, v21, OS_LOG_TYPE_DEFAULT, "receive realloc indication(%llu) on %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      uint64_t v218 = objc_msgSend_txnId(v20, v25, v26, v27);
      id v221 = v14;
      _IDSLogTransport(@"GL", @"IDS", @"receive realloc indication(%llu) on %@");
      if (_IDSShouldLog())
      {
        uint64_t v218 = objc_msgSend_txnId(v20, v25, v26, v27, v218, v14);
        id v221 = v14;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"receive realloc indication(%llu) on %@");
      }
    }
  }
  if (v20)
  {
    int v28 = objc_msgSend_messageType(v13, v25, v26, v27);
    unsigned __int16 v234 = stunMessageTypeFromProtoMessageType(v28, 0);
    uint64_t v238 = objc_msgSend_reallocateToken(v20, v29, v30, v31);
    if (objc_msgSend_length(v238, v32, v33, v34))
    {
      double v35 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v238;
        _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "receive realloc token %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v218 = (uint64_t)v238;
          _IDSLogTransport(@"GL", @"IDS", @"receive realloc token %@");
          if (_IDSShouldLog())
          {
            uint64_t v218 = (uint64_t)v238;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive realloc token %@");
          }
        }
      }
      uint64_t v236 = objc_msgSend_clientAddress(v20, v36, v37, v38, v218, v221);
      double v235 = objc_msgSend_serverAddress(v20, v39, v40, v41);
      *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v262 = v42;
      long long v263 = v42;
      long long v260 = v42;
      long long v261 = v42;
      long long v258 = v42;
      long long v259 = v42;
      *(_OWORD *)buf = v42;
      *(_OWORD *)&uint8_t buf[16] = v42;
      uint64_t v43 = IPPortStringToSA(v235, (uint64_t)buf);
      if (IsValidSA(v43))
      {
        double v44 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)double v249 = 138412290;
          *(void *)&v249[4] = v235;
          _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "receive new relay server address [%@].", v249, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            double v219 = v235;
            _IDSLogTransport(@"GL", @"IDS", @"receive new relay server address [%@].");
            if (_IDSShouldLog())
            {
              double v219 = v235;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"receive new relay server address [%@].");
            }
          }
        }
        *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v255 = v45;
        long long v256 = v45;
        long long v253 = v45;
        long long v254 = v45;
        long long v251 = v45;
        long long v252 = v45;
        *(_OWORD *)double v249 = v45;
        long long v250 = v45;
        uint64_t v46 = IPPortStringToSA(v236, (uint64_t)v249);
        if (IsValidSA(v46))
        {
          uint64_t v47 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v239 = 138412290;
            id v240 = v236;
            _os_log_impl(&dword_19D9BE000, v47, OS_LOG_TYPE_DEFAULT, "receive client address [%@].", v239, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v219 = v236;
              _IDSLogTransport(@"GL", @"IDS", @"receive client address [%@].");
              if (_IDSShouldLog())
              {
                double v219 = v236;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"receive client address [%@].");
              }
            }
          }
          double v232 = objc_msgSend_sessionID(v16, v48, v49, v50, v219);
          if (v232)
          {
            uint64_t v54 = objc_msgSend_local(v16, v51, v52, v53);
            uint64_t v58 = objc_msgSend_radioAccessTechnology(v54, v55, v56, v57);

            long long v62 = objc_msgSend_remote(v16, v59, v60, v61);
            unsigned int keya = objc_msgSend_radioAccessTechnology(v62, v63, v64, v65);

            uint64_t v69 = objc_msgSend_local(v16, v66, v67, v68);
            uint64_t v73 = objc_msgSend_mtu(v69, v70, v71, v72);

            double v77 = objc_msgSend_remote(v16, v74, v75, v76);
            uint64_t v81 = objc_msgSend_mtu(v77, v78, v79, v80);

            uint64_t v231 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v82, 3, v83, 2, v58, v73, v10, a6, 0);
            __int16 v226 = objc_msgSend_candidateWithType_transport_radioAccessTechnology_mtu_index_address_external_(IDSStunCandidate, v84, 3, v85, 2, keya, v81, 0xFFFFFFFFLL, 0, buf);
            uint64_t v228 = objc_msgSend_candidatePairWithLocalCandidate_remoteCandidate_sessionID_delegate_(IDSStunCandidatePair, v86, (uint64_t)v231, v87, v226, v232, self);
            if (a6->sa_family == 30 && buf[1] == 2)
            {
              FirstPrefix = IDSNAT64PrefixCacheGetFirstPrefix((uint64_t *)self->_nat64PrefixCache, v10);
              if (!FirstPrefix)
              {
                double v217 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v239 = 67109120;
                  LODWORD(v240) = v10;
                  _os_log_impl(&dword_19D9BE000, v217, OS_LOG_TYPE_DEFAULT, "failed to get nat64 prefix for realloc (if:%d).", v239, 8u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(@"GL", @"IDS", @"failed to get nat64 prefix for realloc (if:%d).");
                    if (_IDSShouldLog()) {
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get nat64 prefix for realloc (if:%d).");
                    }
                  }
                }
                BOOL v111 = 0;
                goto LABEL_111;
              }
              uint64_t v95 = objc_msgSend_local(v228, v91, v92, v94);
              objc_msgSend_setPrefix_(v95, v96, (uint64_t)FirstPrefix, v97);

              objc_msgSend_synthesizeNat64WithPrefix(v228, v98, v99, v100);
            }
            id key = objc_msgSend_candidatePairToken(v228, v88, v89, v90);
            tokenToCandidatePairs = self->_tokenToCandidatePairs;
            if (tokenToCandidatePairs
              && key
              && (double v105 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, key)) != 0)
            {
              id v106 = v105;
              double v107 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v239 = 138412290;
                id v240 = key;
                _os_log_impl(&dword_19D9BE000, v107, OS_LOG_TYPE_DEFAULT, "found existing candidate pair for %@.", v239, 0xCu);
              }

              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  id v220 = key;
                  _IDSLogTransport(@"GL", @"IDS", @"found existing candidate pair for %@.");
                  if (_IDSShouldLog())
                  {
                    id v220 = key;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"found existing candidate pair for %@.");
                  }
                }
              }
            }
            else
            {
              uint64_t v134 = objc_msgSend_channelNumber(v16, v101, v102, v103);
              IDSSimpleUInt16List_AddItem((uint64_t)&self->_reallocChannelList, v134);
              uint64_t v135 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v139 = objc_msgSend_length(v238, v136, v137, v138);
                double v143 = objc_msgSend_relaySessionKey(v16, v140, v141, v142);
                uint64_t v147 = objc_msgSend_length(v143, v144, v145, v146);
                int v151 = objc_msgSend_channelNumber(v16, v148, v149, v150);
                *(_DWORD *)uint64_t v239 = 138413314;
                id v240 = v16;
                __int16 v241 = 2048;
                uint64_t v242 = v139;
                __int16 v243 = 2048;
                uint64_t v244 = v147;
                __int16 v245 = 1024;
                unsigned int v246 = __rev16(v134);
                __int16 v247 = 1024;
                int v248 = v151;
                _os_log_impl(&dword_19D9BE000, v135, OS_LOG_TYPE_DEFAULT, "start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).", v239, 0x2Cu);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  uint64_t v155 = objc_msgSend_length(v238, v152, v153, v154);
                  double v159 = objc_msgSend_relaySessionKey(v16, v156, v157, v158);
                  uint64_t v163 = objc_msgSend_length(v159, v160, v161, v162);
                  uint64_t v167 = __rev16(v134);
                  uint64_t v224 = v167;
                  uint64_t v225 = objc_msgSend_channelNumber(v16, v164, v165, v166);
                  uint64_t v222 = v155;
                  uint64_t v223 = v163;
                  id v220 = v16;
                  _IDSLogTransport(@"GL", @"IDS", @"start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).");

                  if (_IDSShouldLog())
                  {
                    uint64_t v171 = objc_msgSend_length(v238, v168, v169, v170, v16, v155, v163, v167, v225);
                    double v175 = objc_msgSend_relaySessionKey(v16, v172, v173, v174);
                    uint64_t v179 = objc_msgSend_length(v175, v176, v177, v178);
                    uint64_t v224 = v167;
                    uint64_t v225 = objc_msgSend_channelNumber(v16, v180, v181, v182);
                    uint64_t v222 = v171;
                    uint64_t v223 = v179;
                    id v220 = v16;
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"start QR realloc for %@ (token %lu bytes, key %lu bytes, channelNumber %04x, candidate pair channel number: %d).");
                  }
                }
              }
              id v183 = v228;
              objc_msgSend_setPropertiesWithReallocCandidatePair_reallocToken_(v183, v184, (uint64_t)v16, v185, v238);
              double v189 = objc_msgSend_remote(v183, v186, v187, v188);
              uint64_t v193 = objc_msgSend_external(v189, v190, v191, v192);
              objc_msgSend__setChannelToCandidatePair_localAddress_remoteAddress_channelNumber_(self, v194, (uint64_t)v183, v195, a6, v193, v134);

              if (!self->_tokenToCandidatePairs)
              {
                CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                double v197 = self->_tokenToCandidatePairs;
                self->_tokenToCandidatePairs = Mutable;
              }
              id v106 = v183;
              if (v106)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToCandidatePairs, key, v106);
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                sub_19DB78994();
              }
            }
            objc_msgSend_setIsRealloc_(v106, v108, 1, v109, v220, v222, v223, v224, v225);
            uint64_t v201 = objc_msgSend_pendingNoSessionStateAllocbind(v106, v198, v199, v200);
            objc_msgSend__sendQUICAllocbindRequest_isRealloc_inResponseToNoSessionState_shouldConnectLinkFirst_isPendingInResponseToNoSessionState_(self, v202, (uint64_t)key, v203, 1, 0, 1, v201);
            if (!self->_reallocNewCandidatePairToOldCandidatePair)
            {
              double v204 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              reallocNewCandidatePairToOldCandidatePair = self->_reallocNewCandidatePairToOldCandidatePair;
              self->_reallocNewCandidatePairToOldCandidatePair = v204;
            }
            id v206 = v16;
            if (v206)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)self->_reallocNewCandidatePairToOldCandidatePair, key, v206);
            }
            else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              sub_19DB78C28();
            }

            GLUtilReportAWDStunMessageEventWithType(v234, 0, v206, 0.0);
            uint64_t v209 = GLUCreateQRStunMessageEventWithType(v234, 0, v206, 0, 0.0);
            if (v209)
            {
              id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
              char v212 = objc_opt_respondsToSelector();

              if (v212)
              {
                id v213 = objc_loadWeakRetained((id *)&self->_delegate);
                objc_msgSend_link_didAddQREvent_(v213, v214, (uint64_t)self, v215, v209);
              }
            }
            objc_msgSend_hasRealloc(self->_metricsCollector, v207, v208, v210);

            BOOL v111 = 1;
LABEL_111:

            goto LABEL_113;
          }
          unsigned __int16 v129 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v239 = 138412290;
            id v240 = v14;
            _os_log_impl(&dword_19D9BE000, v129, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@.", v239, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for %@.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for %@.");
              }
            }
          }
          GLUtilReportAWDStunMessageEventWithType(v234, 6, v16, 0.0);
          uint64_t v231 = GLUCreateQRStunMessageEventWithType(v234, 6, v16, 0, 0.0);
          if (v231)
          {
            id v130 = objc_loadWeakRetained((id *)&self->_delegate);
            char v131 = objc_opt_respondsToSelector();

            if (v131)
            {
              id v227 = objc_loadWeakRetained((id *)&self->_delegate);
              objc_msgSend_link_didAddQREvent_(v227, v132, (uint64_t)self, v133, v231);
              BOOL v111 = 0;

LABEL_113:
              goto LABEL_114;
            }
          }
        }
        else
        {
          id v124 = OSLogHandleForIDSCategory();
          if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v239 = 0;
            _os_log_impl(&dword_19D9BE000, v124, OS_LOG_TYPE_ERROR, "invalid client address.", v239, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            _IDSWarnV();
            _IDSLogV(0, @"IDSFoundation", @"Warning", @"invalid client address.");
            _IDSLogTransport(@"Warning", @"IDS", @"invalid client address.");
          }
          GLUtilReportAWDStunMessageEventWithType(v234, 4, v16, 0.0);
          double v232 = GLUCreateQRStunMessageEventWithType(v234, 4, v16, 0, 0.0);
          if (!v232
            || (id v125 = objc_loadWeakRetained((id *)&self->_delegate),
                char v126 = objc_opt_respondsToSelector(),
                v125,
                (v126 & 1) == 0))
          {
            BOOL v111 = 0;
LABEL_114:

            goto LABEL_115;
          }
          uint64_t v231 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v231, v127, (uint64_t)self, v128, v232);
        }
        BOOL v111 = 0;
        goto LABEL_113;
      }
      double v117 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v249 = 0;
        _os_log_impl(&dword_19D9BE000, v117, OS_LOG_TYPE_ERROR, "invalid realloc server address.", v249, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        _IDSWarnV();
        _IDSLogV(0, @"IDSFoundation", @"Warning", @"invalid realloc server address.");
        _IDSLogTransport(@"Warning", @"IDS", @"invalid realloc server address.");
      }
      GLUtilReportAWDStunMessageEventWithType(v234, 3, v16, 0.0);
      char v118 = GLUCreateQRStunMessageEventWithType(v234, 3, v16, 0, 0.0);
      if (v118)
      {
        id v119 = objc_loadWeakRetained((id *)&self->_delegate);
        char v120 = objc_opt_respondsToSelector();

        if (v120)
        {
          id v121 = objc_loadWeakRetained((id *)&self->_delegate);
          objc_msgSend_link_didAddQREvent_(v121, v122, (uint64_t)self, v123, v118);
        }
      }
    }
    else
    {
      uint64_t v112 = OSLogHandleForIDSCategory();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v112, OS_LOG_TYPE_ERROR, "failed to receive realloc token.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        _IDSWarnV();
        _IDSLogV(0, @"IDSFoundation", @"Warning", @"failed to receive realloc token.");
        _IDSLogTransport(@"Warning", @"IDS", @"failed to receive realloc token.");
      }
      GLUtilReportAWDStunMessageEventWithType(v234, 2, v16, 0.0);
      uint64_t v236 = GLUCreateQRStunMessageEventWithType(v234, 2, v16, 0, 0.0);
      if (!v236
        || (id v113 = objc_loadWeakRetained((id *)&self->_delegate),
            char v114 = objc_opt_respondsToSelector(),
            v113,
            (v114 & 1) == 0))
      {
        BOOL v111 = 0;
LABEL_116:

        goto LABEL_117;
      }
      double v235 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend_link_didAddQREvent_(v235, v115, (uint64_t)self, v116, v236);
    }
    BOOL v111 = 0;
LABEL_115:

    goto LABEL_116;
  }
  double v110 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v110, OS_LOG_TYPE_DEFAULT, "_processReallocIndication failed due to invalid reallocateIndication.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"_processReallocIndication failed due to invalid reallocateIndication.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_processReallocIndication failed due to invalid reallocateIndication.");
      }
    }
  }
  BOOL v111 = 0;
LABEL_117:

  return v111;
}

- (BOOL)_processQUICDiagnosticIndication:(id)a3 candidatePairToken:(id)a4 arrivalTime:(double)a5
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  double v12 = objc_msgSend_sharedInstance(MEMORY[0x1E4F6C360], v9, v10, v11);
  int isInternalInstall = objc_msgSend_isInternalInstall(v12, v13, v14, v15);

  if (isInternalInstall)
  {
    uint64_t v20 = objc_msgSend_diagnosticIndication(v7, v17, v18, v19);
    double v24 = v20;
    if (v20)
    {
      double v25 = objc_msgSend_failureSubtype(v20, v21, v22, v23);
      double v29 = objc_msgSend_failureSubtypeContext(v24, v26, v27, v28);
      uint64_t v30 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218498;
        uint64_t v48 = objc_msgSend_txnId(v24, v31, v32, v33);
        __int16 v49 = 2112;
        double v50 = v25;
        __int16 v51 = 2112;
        uint64_t v52 = v29;
        _os_log_impl(&dword_19D9BE000, v30, OS_LOG_TYPE_DEFAULT, "receive diagnostic indication(%llu) subtype [%@] context [%@}", buf, 0x20u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          long long v45 = v25;
          uint64_t v46 = v29;
          uint64_t v44 = objc_msgSend_txnId(v24, v34, v35, v36);
          _IDSLogTransport(@"GL", @"IDS", @"receive diagnostic indication(%llu) subtype [%@] context [%@}");
          if (_IDSShouldLog())
          {
            uint64_t v37 = objc_msgSend_txnId(v24, v34, v35, v36, v44, v25, v29);
            long long v45 = v25;
            uint64_t v46 = v29;
            uint64_t v44 = v37;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"receive diagnostic indication(%llu) subtype [%@] context [%@}");
          }
        }
      }
      unsigned __int16 v38 = objc_msgSend_packetsRecordDuration(v24, v34, v35, v36, v44, v45, v46);
      char v41 = objc_msgSend__triggerSymptomsWithCandidatePairToken_subType_subTypeContext_duration_(self, v39, (uint64_t)v8, v40, v25, v29, v38);
    }
    else
    {
      long long v42 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v42, OS_LOG_TYPE_DEFAULT, "_processDiagnosticIndication failed due to invalid diagnosticIndication.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"_processDiagnosticIndication failed due to invalid diagnosticIndication.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"_processDiagnosticIndication failed due to invalid diagnosticIndication.");
          }
        }
      }
      char v41 = 0;
    }
  }
  else
  {
    char v41 = 1;
  }

  return v41;
}

- (BOOL)_processQUICGoAwayIndication:(id)a3 fromDevice:(id)a4 localIfIndex:(unsigned int)a5 localAddress:(sockaddr *)a6 remoteAddress:(sockaddr *)a7 candidatePairToken:(id)a8 arrivalTime:(double)a9
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  id v88 = a4;
  id v15 = a8;
  Value = 0;
  id key = v15;
  if (v15 && self->_tokenToCandidatePairs) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_tokenToCandidatePairs, v15);
  }
  id v89 = Value;
  double v87 = v14;
  uint64_t v20 = objc_msgSend_goAwayIndication(v14, v17, v18, v19);
  double v24 = v20;
  if (v20)
  {
    unsigned __int16 v25 = objc_msgSend_reasonCode(v20, v21, v22, v23);
    double v86 = objc_msgSend_reasonString(v24, v26, v27, v28);
    double v29 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218754;
      uint64_t v102 = objc_msgSend_txnId(v24, v30, v31, v32);
      __int16 v103 = 2112;
      uint64_t v104 = key;
      __int16 v105 = 1024;
      int v106 = v25;
      __int16 v107 = 2112;
      uint64_t v108 = v86;
      _os_log_impl(&dword_19D9BE000, v29, OS_LOG_TYPE_DEFAULT, "receive goaway indication(%llu) for %@, error_code(%u) reason(%@).", buf, 0x26u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        uint64_t v84 = v25;
        double v85 = v86;
        uint64_t v81 = objc_msgSend_txnId(v24, v33, v34, v35);
        double v83 = key;
        _IDSLogTransport(@"GL", @"IDS", @"receive goaway indication(%llu) for %@, error_code(%u) reason(%@).");
        if (_IDSShouldLog())
        {
          uint64_t v36 = objc_msgSend_txnId(v24, v33, v34, v35, v81, key, v25, v86);
          uint64_t v84 = v25;
          double v85 = v86;
          uint64_t v81 = v36;
          double v83 = key;
          _IDSLogV(0, @"IDSFoundation", @"GL", @"receive goaway indication(%llu) for %@, error_code(%u) reason(%@).");
        }
      }
    }
    uint64_t v37 = objc_msgSend_serverBlob(v24, v33, v34, v35, v81, v83, v84, v85);
    if (objc_msgSend_length(v37, v38, v39, v40))
    {
      uint64_t v44 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = objc_msgSend_length(v37, v45, v46, v47);
        *(_DWORD *)buf = 134217984;
        uint64_t v102 = v48;
        _os_log_impl(&dword_19D9BE000, v44, OS_LOG_TYPE_DEFAULT, "This goaway has QR Server data blob(%luB)", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          uint64_t v82 = objc_msgSend_length(v37, v49, v50, v51);
          _IDSLogTransport(@"GL", @"IDS", @"This goaway has QR Server data blob(%luB)");
          if (_IDSShouldLog())
          {
            uint64_t v82 = objc_msgSend_length(v37, v49, v50, v51, v82);
            _IDSLogV(0, @"IDSFoundation", @"GL", @"This goaway has QR Server data blob(%luB)");
          }
        }
      }
      uint64_t v52 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v53 = objc_msgSend_sessionID(v89, v49, v50, v51, v82);
      objc_msgSend_dictionaryWithObject_forKey_(v52, v54, (uint64_t)v37, v55, v53);
      uint64_t v56 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
      QRServerDataBlob = self->_QRServerDataBlob;
      self->_QRServerDataBlob = v56;
    }
    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    uint64_t v59 = objc_msgSend_currentlySentMaterials(serverMaterialExchangeController, v41, v42, v43);
    objc_msgSend_invalidateMaterialsInSet_(serverMaterialExchangeController, v60, (uint64_t)v59, v61);

    objc_msgSend_invalidate(self->_quicMaterialExchangeProvider, v62, v63, v64);
    objc_msgSend_setIsDisconnecting_(v89, v65, 1, v66);
    v97[0] = MEMORY[0x1E4F143A8];
    v97[1] = 3221225472;
    v97[2] = sub_19DA823C0;
    v97[3] = &unk_1E5974100;
    id v98 = key;
    id v67 = v89;
    id v99 = v67;
    double v100 = self;
    objc_msgSend_startSessionGoAwayTimer_block_(v67, v68, 5, v69, v97);
    QRAllocateuint64_t Type = objc_msgSend__getQRAllocateType(self, v70, v71, v72);
    int v74 = *(_DWORD *)&a7->sa_data[2];
    uint64_t v75 = im_primary_queue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    void block[2] = sub_19DA825BC;
    block[3] = &unk_1E5974170;
    void block[4] = self;
    uint64_t v93 = QRAllocateType;
    id v92 = v67;
    double v94 = a9;
    unsigned __int16 v96 = v25;
    int v95 = v74;
    dispatch_async(v75, block);

    objc_msgSend_hasGoaway(self->_metricsCollector, v76, v77, v78);
  }
  else
  {
    uint64_t v79 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D9BE000, v79, OS_LOG_TYPE_DEFAULT, "_processGoAwayIndication failed due to invalid goAwayIndication.", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"_processGoAwayIndication failed due to invalid goAwayIndication.");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"_processGoAwayIndication failed due to invalid goAwayIndication.");
        }
      }
    }
  }

  return v24 != 0;
}

- (BOOL)_processProtoPacket:(id *)a3 fromDeviceUniqueID:(id)a4 cbuuid:(id)a5 arrivalTime:(double)a6 headerOverhead:(unint64_t)a7
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  id v98 = a4;
  id v97 = a5;
  unint64_t var31 = a3->var31;
  if (a3->var34 && a3->var33 != 7)
  {
    uint64_t v27 = 0;
LABEL_9:
    unsigned int var33 = a3->var33;
    uint64_t v18 = @"error_response";
    goto LABEL_10;
  }
  objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], v12, (uint64_t)a3->var0, v14, a3->var2, 0);
  uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    uint64_t v27 = objc_msgSend_GlobalLink(IDSFoundationLog, v16, v17, v19);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_19DB7B7B0();
    }
    goto LABEL_46;
  }
  uint64_t v20 = [IDSQRProtoMessage alloc];
  uint64_t v23 = objc_msgSend_initWithData_(v20, v21, (uint64_t)v18, v22);
  if (!v23)
  {
    uint64_t v27 = objc_msgSend_GlobalLink(IDSFoundationLog, v24, v25, v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_19DB7B7E4(v18, (char *)v27, v59);
    }
    goto LABEL_46;
  }
  uint64_t v27 = v23;

  if (a3->var34) {
    goto LABEL_9;
  }
  uint64_t v28 = objc_msgSend_messageType(v27, v12, v13, v14);
  unsigned int var33 = v28;
  if (v28 >= 0x25)
  {
    objc_msgSend_stringWithFormat_(NSString, v29, @"(unknown: %i)", v30, v28);
    uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v18 = off_1E5974678[(int)v28];
  }
  objc_msgSend_setTransactionID_(v27, v29, var31, v30);
LABEL_10:
  double v32 = objc_msgSend_GlobalLink(IDSFoundationLog, v12, v13, v14);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int var34 = a3->var34;
    *(_DWORD *)buf = 138413314;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&uint8_t buf[12] = 1024;
    *(_DWORD *)&buf[14] = var33;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = var31;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = var34;
    *(_WORD *)&buf[34] = 2112;
    *(void *)&buf[36] = v27;
    _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "received %@[%d](%llu) error %u proto message %@", buf, 0x2Cu);
  }

  objc_msgSend__startTimeForProtoRequest_(self, v34, var31, v35);
  double v37 = v36;
  objc_msgSend_setStartTime_(v27, v38, v39, v36);
  uint64_t v42 = objc_msgSend__tokenForProtoRequest_(self, v40, var31, v41);
  if (v42) {
    goto LABEL_17;
  }
  if (var33 <= 0x24 && ((1 << var33) & 0x1084027218) != 0)
  {
    id v43 = a3->var32;
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v42 = tokenForStunCandidatePair((uint64_t)&a3->var18, (uint64_t)&a3->var19, v43);

LABEL_17:
      tokenToCandidatePairs = self->_tokenToCandidatePairs;
      if (tokenToCandidatePairs
        && v42
        && (uint64_t v46 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v42)) != 0)
      {
        uint64_t v50 = v46;
        if (objc_msgSend_isActive(v46, v47, v48, v49))
        {
          uint64_t v53 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
          if (v53) {
            v53[36] = a6;
          }
        }
        else
        {
          objc_msgSend_setLastIncomingPacketTime_(v50, v51, v52, a6);
        }
        unsigned __int8 v60 = objc_msgSend_linkID(v50, v54, v55, v56);
        objc_msgSend_didReceiveProtobufPacketForLinkID_(self, v61, v60, v62);
        switch(var33)
        {
          case 1u:
          case 5u:
          case 7u:
          case 0xAu:
          case 0xFu:
          case 0x12u:
          case 0x14u:
          case 0x16u:
            char started = objc_msgSend_processQUICErrorResponse_packetBuffer_startTime_headerOverhead_(v50, v63, (uint64_t)v27, v37, a3, a7);
            goto LABEL_37;
          case 2u:
            char started = objc_msgSend__processNWLinkAllocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var17, &a3->var18, &a3->var19, v42);
            goto LABEL_37;
          case 3u:
            char updated = objc_msgSend__processQUICDiagnosticIndication_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v42);

            goto LABEL_39;
          case 4u:
            char updated = objc_msgSend__processQUICGoAwayIndication_fromDevice_localIfIndex_localAddress_remoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var17, &a3->var18, &a3->var19, v42);

            goto LABEL_39;
          case 6u:
            char started = objc_msgSend_processQUICInfoResponse_receivedBytes_(v50, v63, (uint64_t)v27, v65, a3->var2 + a7);
            goto LABEL_37;
          case 8u:
            char started = objc_msgSend_processQUICParticipantUpdateResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 9u:
            char updated = objc_msgSend_processQUICParticipantUpdateIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xBu:
            char started = objc_msgSend_processQUICPluginRegistrationResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0xCu:
            char updated = objc_msgSend_processQUICPluginControlIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xDu:
            char updated = objc_msgSend_processQUICErrorIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0xEu:
            long long v73 = *(_OWORD *)&a3->var18.__ss_pad2[64];
            long long v137 = *(_OWORD *)&a3->var18.__ss_pad2[48];
            long long v138 = v73;
            long long v74 = *(_OWORD *)&a3->var18.__ss_pad2[96];
            long long v139 = *(_OWORD *)&a3->var18.__ss_pad2[80];
            long long v140 = v74;
            long long v75 = *(_OWORD *)a3->var18.__ss_pad2;
            *(_OWORD *)buf = *(_OWORD *)&a3->var18.ss_len;
            *(_OWORD *)&uint8_t buf[16] = v75;
            long long v76 = *(_OWORD *)&a3->var18.__ss_pad2[32];
            *(_OWORD *)&unsigned char buf[32] = *(_OWORD *)&a3->var18.__ss_pad2[16];
            long long v136 = v76;
            long long v77 = *(_OWORD *)&a3->var19.__ss_pad2[64];
            long long v78 = *(_OWORD *)&a3->var19.__ss_pad2[80];
            long long v131 = *(_OWORD *)&a3->var19.__ss_pad2[48];
            long long v132 = v77;
            long long v79 = *(_OWORD *)&a3->var19.__ss_pad2[96];
            long long v133 = v78;
            long long v134 = v79;
            long long v80 = *(_OWORD *)a3->var19.__ss_pad2;
            long long v127 = *(_OWORD *)&a3->var19.ss_len;
            long long v128 = v80;
            long long v81 = *(_OWORD *)&a3->var19.__ss_pad2[32];
            long long v129 = *(_OWORD *)&a3->var19.__ss_pad2[16];
            long long v130 = v81;
            unsigned int var17 = a3->var17;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 3221225472;
            aBlock[2] = sub_19DA83428;
            aBlock[3] = &unk_1E5974198;
            void aBlock[4] = self;
            int v106 = v27;
            id v107 = v98;
            unsigned int v126 = var17;
            long long v113 = v137;
            long long v114 = v138;
            long long v115 = v139;
            long long v116 = v140;
            long long v109 = *(_OWORD *)buf;
            long long v110 = *(_OWORD *)&buf[16];
            long long v111 = *(_OWORD *)&buf[32];
            long long v112 = v136;
            long long v123 = v133;
            long long v124 = v134;
            long long v121 = v131;
            long long v122 = v132;
            long long v119 = v129;
            long long v120 = v130;
            long long v117 = v127;
            long long v118 = v128;
            id v83 = v42;
            id v108 = v83;
            double v125 = a6;
            uint64_t v84 = (void (**)(void))_Block_copy(aBlock);
            unint64_t v88 = objc_msgSend_state(v50, v85, v86, v87);
            if (v88 > 3)
            {
              v84[2](v84);
            }
            else
            {
              id v89 = OSLogHandleForTransportCategory();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
              {
                double v90 = _Block_copy(v84);
                double v91 = (&_IDSStunCandidatePairStateStrings)[v88];
                *(_DWORD *)id v99 = 134218498;
                double v100 = v90;
                __int16 v101 = 2112;
                id v102 = v83;
                __int16 v103 = 2080;
                uint64_t v104 = v91;
                _os_log_impl(&dword_19D9BE000, v89, OS_LOG_TYPE_DEFAULT, "delay processing realloc block %p for %@, state [%s].", v99, 0x20u);
              }
              if (os_log_shim_legacy_logging_enabled())
              {
                if (_IDSShouldLogTransport())
                {
                  id v92 = _Block_copy(v84);
                  _IDSLogTransport(@"GL", @"IDS", @"delay processing realloc block %p for %@, state [%s].");

                  if (_IDSShouldLog())
                  {
                    uint64_t v93 = _Block_copy(v84);
                    _IDSLogV(0, @"IDSFoundation", @"GL", @"delay processing realloc block %p for %@, state [%s].");
                  }
                }
              }
              if (!self->_tokenToReallocBlocks)
              {
                CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                tokenToReallocBlocks = self->_tokenToReallocBlocks;
                self->_tokenToReallocBlocks = Mutable;
              }
              unsigned __int16 v96 = _Block_copy(v84);
              if (v96)
              {
                CFDictionarySetValue((CFMutableDictionaryRef)self->_tokenToReallocBlocks, v83, v96);
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                sub_19DB78CAC();
              }
            }
            char updated = 1;
            goto LABEL_39;
          case 0x10u:
            char started = objc_msgSend_processQUICSessionInfoResponse_receivedBytes_isLightweightParticipant_(v50, v63, (uint64_t)v27, v65, a3->var2 + a7, self->_isLightweightParticipant);
            goto LABEL_37;
          case 0x11u:
            char updated = objc_msgSend_processQUICSessionInfoIndication_arrivalTime_isLightweightParticipant_(v50, v63, (uint64_t)v27, a6, self->_isLightweightParticipant);

            goto LABEL_39;
          case 0x13u:
            char started = objc_msgSend_processQUICStatsResponse_arrivalTime_(v50, v63, (uint64_t)v27, a6);
            goto LABEL_37;
          case 0x15u:
            char started = objc_msgSend_processQUICTestResponse_arrivalTime_(v50, v63, (uint64_t)v27, a6);
            goto LABEL_37;
          case 0x17u:
            char started = objc_msgSend__processQUICUnallocbindResponse_fromDevice_localIfIndex_localAddress_remmoteAddress_candidatePairToken_arrivalTime_(self, v63, (uint64_t)v27, a6, v98, a3->var17, &a3->var18, &a3->var19, v42);
            goto LABEL_37;
          case 0x19u:
            char started = objc_msgSend_processQUICPutMaterialResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0x1Au:
            char updated = objc_msgSend_processQUICPutMaterialIndication_(v50, v63, (uint64_t)v27, v65);

            goto LABEL_39;
          case 0x1Cu:
            char started = objc_msgSend_processQUICGetMaterialResponse_(v50, v63, (uint64_t)v27, v65);
            goto LABEL_37;
          case 0x1Du:
          case 0x20u:
            char started = objc_msgSend__processReliableUnicastRegistrationErrorResponse_packetBuffer_startTime_candidatePair_(self, v63, (uint64_t)v27, v37, a3, v50);
            goto LABEL_37;
          case 0x1Eu:
            char started = objc_msgSend__processRegisterResponse_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
            goto LABEL_37;
          case 0x1Fu:
            char started = objc_msgSend__processRegisterIndication_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
            goto LABEL_37;
          case 0x21u:
            char started = objc_msgSend__processRegisterAckResponse_candidatePairToken_(self, v63, (uint64_t)v27, v65, v42);
LABEL_37:
            char updated = started;
            break;
          default:
            double v72 = objc_msgSend_GlobalLink(IDSFoundationLog, v63, v64, v65);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
              sub_19DB7B880();
            }

            char updated = 0;
            break;
        }
        objc_msgSend__removeProtoRequest_status_(self, v67, var31, v68, a3->var34);
      }
      else
      {
        double v57 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v42;
          _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "failed to find candidate pair for incoming proto message, candidagePairTokeuint64_t n = %@", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to find candidate pair for incoming proto message, candidagePairTokeuint64_t n = %@");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find candidate pair for incoming proto message, candidagePairTokeuint64_t n = %@");
            }
          }
        }
        char updated = 0;
      }
LABEL_39:

      goto LABEL_47;
    }
    double v69 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_19D9BE000, v69, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for %@");
        }
      }
    }
LABEL_46:
    char updated = 0;
    goto LABEL_47;
  }
  uint64_t v71 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = var31;
    *(_WORD *)&uint8_t buf[12] = 2112;
    *(void *)&buf[14] = v18;
    _os_log_impl(&dword_19D9BE000, v71, OS_LOG_TYPE_DEFAULT, "no matching request with QUIC transactionID %llu for %@ proto message, ignore.", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"no matching request with QUIC transactionID %llu for %@ proto message, ignore.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"no matching request with QUIC transactionID %llu for %@ proto message, ignore.");
      }
    }
  }
  char updated = 1;
LABEL_47:

  return updated;
}

- (BOOL)_processRegisterIndication:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processRegisterAckResponse:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processRegisterResponse:(id)a3 candidatePairToken:(id)a4
{
  return 0;
}

- (BOOL)_processReliableUnicastRegistrationErrorResponse:(id)a3 packetBuffer:(id *)a4 startTime:(double)a5 candidatePair:(id)a6
{
  return 0;
}

- (void)_updateCandidatePair:(id)a3 newLocalPort:(unsigned __int16)a4
{
  uint64_t v4 = a4;
  id v6 = a3;
  tokenToCandidatePairs = self->_tokenToCandidatePairs;
  double v11 = objc_msgSend_candidatePairToken(v6, v8, v9, v10);
  objc_msgSend_removeObjectForKey_(tokenToCandidatePairs, v12, (uint64_t)v11, v13);

  uint64_t v17 = objc_msgSend_local(v6, v14, v15, v16);
  objc_msgSend_setLocalPort_(v17, v18, v4, v19);

  if (!self->_tokenToCandidatePairs)
  {
    CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    double v21 = self->_tokenToCandidatePairs;
    self->_tokenToCandidatePairs = Mutable;
  }
  id v22 = v6;
  double v26 = v22;
  if (v22)
  {
    uint64_t v27 = self->_tokenToCandidatePairs;
    uint64_t v28 = objc_msgSend_candidatePairToken(v22, v23, v24, v25);
    CFDictionarySetValue((CFMutableDictionaryRef)v27, v28, v26);
  }
  else
  {
    BOOL v29 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v29) {
      sub_19DB7B8E8(v32, v29, v30, v31);
    }
  }
}

- (void)_saveProtoRequest:(id)a3 token:(id)a4
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  uint64_t v11 = objc_msgSend_transactionID(v6, v8, v9, v10);
  objc_msgSend_startTime(v6, v12, v13, v14);
  double v16 = v15;
  uint64_t v17 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    uint64_t v49 = v11;
    __int16 v50 = 2048;
    double v51 = v16;
    __int16 v52 = 2112;
    id v53 = v7;
    _os_log_impl(&dword_19D9BE000, v17, OS_LOG_TYPE_DEFAULT, "_saveProtoRequest %llu %.3f for %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      id v47 = v7;
      double v46 = v16;
      uint64_t v45 = v11;
      _IDSLogTransport(@"GL", @"IDS", @"_saveProtoRequest %llu %.3f for %@");
      if (_IDSShouldLog())
      {
        id v47 = v7;
        double v46 = v16;
        uint64_t v45 = v11;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_saveProtoRequest %llu %.3f for %@");
      }
    }
  }
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  if (!transactionIDToRequestMetadata)
  {
    CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    id v22 = self->_transactionIDToRequestMetadata;
    self->_transactionIDToRequestMetadata = Mutable;

    transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  }
  uint64_t v23 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v18, v11, v19, v45, *(void *)&v46, v47);
  double v26 = objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v24, (uint64_t)v23, v25);

  if (!v26)
  {
    metricsCollector = self->_metricsCollector;
    uint64_t v31 = objc_msgSend_messageType(v6, v27, v28, v29);
    if (v31 >= 0x25)
    {
      objc_msgSend_stringWithFormat_(NSString, v32, @"(unknown: %i)", v33, v31);
      uint64_t v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v34 = off_1E5974678[(int)v31];
    }
    double v35 = objc_msgSend_request_(metricsCollector, v32, (uint64_t)v34, v33);

    double v36 = [IDSGlobalLinkRequestMetadata alloc];
    char started = objc_msgSend_initWithStartTime_token_metricsRequest_(v36, v37, (uint64_t)v7, v16, v35);
    double v26 = started;
    if (started)
    {
      uint64_t v39 = self->_transactionIDToRequestMetadata;
      double v40 = NSNumber;
      id v41 = started;
      uint64_t v44 = (const void *)objc_msgSend_numberWithUnsignedLongLong_(v40, v42, v11, v43);
      CFDictionarySetValue((CFMutableDictionaryRef)v39, v44, v41);
    }
  }
}

- (void)_removeProtoRequest:(unint64_t)a3 status:(unsigned int)a4
{
  uint64_t v4 = *(void *)&a4;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v7 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    unint64_t v29 = a3;
    _os_log_impl(&dword_19D9BE000, v7, OS_LOG_TYPE_DEFAULT, "_removeProtoRequest %llu", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      unint64_t v27 = a3;
      _IDSLogTransport(@"GL", @"IDS", @"_removeProtoRequest %llu");
      if (_IDSShouldLog())
      {
        unint64_t v27 = a3;
        _IDSLogV(0, @"IDSFoundation", @"GL", @"_removeProtoRequest %llu");
      }
    }
  }
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  uint64_t v11 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v8, a3, v9, v27);
  double v14 = objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v12, (uint64_t)v11, v13);

  uint64_t v18 = objc_msgSend_metricsRequest(v14, v15, v16, v17);
  objc_msgSend_receivedResponse_(v18, v19, v4, v20);

  double v21 = self->_transactionIDToRequestMetadata;
  uint64_t v24 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v22, a3, v23);
  objc_msgSend_removeObjectForKey_(v21, v25, (uint64_t)v24, v26);
}

- (double)_startTimeForProtoRequest:(unint64_t)a3
{
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  uint64_t v5 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, a3, v3);
  id v8 = objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v6, (uint64_t)v5, v7);

  objc_msgSend_startTime(v8, v9, v10, v11);
  double v13 = v12;

  return v13;
}

- (id)_tokenForProtoRequest:(unint64_t)a3
{
  transactionIDToRequestMetadata = self->_transactionIDToRequestMetadata;
  uint64_t v5 = objc_msgSend_numberWithUnsignedLongLong_(NSNumber, a2, a3, v3);
  id v8 = objc_msgSend_objectForKeyedSubscript_(transactionIDToRequestMetadata, v6, (uint64_t)v5, v7);

  double v12 = objc_msgSend_token(v8, v9, v10, v11);

  return v12;
}

- (int64_t)_sendProtoMessage:(id)a3 candidatePair:(id)a4
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  uint64_t v10 = objc_msgSend_local(v6, v7, v8, v9);
  int v92 = objc_msgSend_index(v10, v11, v12, v13);

  double v17 = objc_msgSend_local(v6, v14, v15, v16);
  double v21 = (unsigned __int8 *)objc_msgSend_address(v17, v18, v19, v20);

  double v25 = objc_msgSend_remote(v6, v22, v23, v24);
  unint64_t v29 = (unsigned __int8 *)objc_msgSend_external(v25, v26, v27, v28);

  double v33 = objc_msgSend_local(v6, v30, v31, v32);
  uint64_t v91 = objc_msgSend_transport(v33, v34, v35, v36);

  double v40 = objc_msgSend_candidatePairToken(v6, v37, v38, v39);
  __buf = (void *)0xAAAAAAAAAAAAAAAALL;
  arc4random_buf(&__buf, 8uLL);
  objc_msgSend_setTransactionID_(v5, v41, (uint64_t)__buf, v42);
  int v46 = objc_msgSend_linkID(v6, v43, v44, v45);
  if (v46) {
    char v50 = v46;
  }
  else {
    char v50 = -1;
  }
  if (objc_msgSend_isVirtualRelayStunCandidatePair(v6, v47, v48, v49)) {
    char v54 = objc_msgSend_delegatedLinkID(v6, v51, v52, v53);
  }
  else {
    char v54 = -1;
  }
  *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __str[6] = v55;
  __str[7] = v55;
  __str[4] = v55;
  __str[5] = v55;
  __str[2] = v55;
  __str[3] = v55;
  __str[0] = v55;
  __str[1] = v55;
  long long v111 = v55;
  long long v112 = v55;
  long long v109 = v55;
  long long v110 = v55;
  long long v107 = v55;
  long long v108 = v55;
  *(_OWORD *)__int16 v105 = v55;
  long long v106 = v55;
  SAToIPPortString((char *)__str, 0x80uLL, (uint64_t)v21);
  SAToIPPortString(v105, 0x80uLL, (uint64_t)v29);
  double v59 = objc_msgSend_data(v5, v56, v57, v58);
  uint64_t v63 = objc_msgSend_length(v59, v60, v61, v62);
  unint64_t v67 = objc_msgSend_length(v59, v64, v65, v66);
  double v68 = _IDSLinkPacketBufferCreateWithSize((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 12057, v67);
  objc_msgSend_getBytes_length_(v59, v69, (uint64_t)*v68, v70, v63);
  v68[2] = (id)v63;
  *((unsigned char *)v68 + 44) = 1;
  v68[157] = __buf;
  if (objc_msgSend_messageType(v5, v71, v72, v73) == 1
    && (objc_msgSend_isRealloc(v6, v74, v75, v76) & 1) != 0)
  {
    int v77 = 14;
  }
  else
  {
    int v77 = objc_msgSend_messageType(v5, v74, v75, v76);
  }
  *((_DWORD *)v68 + 318) = v77;
  uint64_t v78 = objc_msgSend_sessionID(v6, v74, v75, v76);
  id v79 = v68[158];
  v68[158] = (id)v78;

  *((_DWORD *)v68 + 12) = v92;
  memcpy(v68 + 7, v21, *v21);
  memcpy(v68 + 23, v29, *v29);
  int64_t v84 = objc_msgSend__sendPacketBuffer_stunTransport_token_linkID_delegatedLinkID_(self, v80, (uint64_t)v68, v81, v91, v40, v50, v54);
  if (v84 < 1)
  {
    unint64_t v88 = objc_msgSend_GlobalLink(IDSFoundationLog, v82, v83, v85);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      *(_DWORD *)buf = 138413058;
      id v96 = v5;
      __int16 v97 = 2112;
      uint64_t v98 = (uint64_t)idsSessionID;
      __int16 v99 = 2080;
      double v100 = (NSString *)__str;
      __int16 v101 = 2080;
      id v102 = v105;
      _os_log_impl(&dword_19D9BE000, v88, OS_LOG_TYPE_DEFAULT, "Failed to send proto message %@ for IDSSessionID: %@ and %s-%s", buf, 0x2Au);
    }
  }
  else
  {
    objc_msgSend__saveProtoRequest_token_(self, v82, (uint64_t)v5, v85, v40);
    uint64_t v86 = OSLogHandleForIDSCategory();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
    {
      double v87 = self->_idsSessionID;
      *(_DWORD *)buf = 138413314;
      id v96 = v5;
      __int16 v97 = 2048;
      uint64_t v98 = (uint64_t)__buf;
      __int16 v99 = 2112;
      double v100 = v87;
      __int16 v101 = 2080;
      id v102 = (char *)__str;
      __int16 v103 = 2080;
      uint64_t v104 = v105;
      _os_log_impl(&dword_19D9BE000, v86, OS_LOG_TYPE_DEFAULT, "send proto message %@ (%llu) for IDSSessionID: %@ and %s-%s.", buf, 0x34u);
    }

    if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog()) {
      _IDSLogV(0, @"IDSFoundation", @"GL", @"send proto message %@ (%llu) for IDSSessionID: %@ and %s-%s.");
    }
  }

  return v84;
}

- (void)_sendQUICAllocbindRequest:(id)a3 isRealloc:(BOOL)a4 inResponseToNoSessionState:(BOOL)a5 shouldConnectLinkFirst:(BOOL)a6 isPendingInResponseToNoSessionState:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v9 = a5;
  int v10 = a4;
  uint64_t v338 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (__CFString *)a3;
  if (v12)
  {
    if (self->_state >= 5 && !v9)
    {
      double v13 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        double v14 = _IDSLinkStateStrings[self->_state];
        *(_DWORD *)buf = 138412546;
        *(void *)uint64_t v329 = v12;
        *(_WORD *)&v329[8] = 2080;
        *(void *)&v329[10] = v14;
        _os_log_impl(&dword_19D9BE000, v13, OS_LOG_TYPE_DEFAULT, "skip allocbind request for %@, GL state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip allocbind request for %@, GL state [%s].");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip allocbind request for %@, GL state [%s].");
          }
        }
      }
      goto LABEL_34;
    }
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (double v17 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v12)) == 0)
    {
      uint64_t v35 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v35, OS_LOG_TYPE_DEFAULT, "send allocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send allocbind request failed due to invalid candidate pair.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send allocbind request failed due to invalid candidate pair.");
          }
        }
      }
      id v21 = 0;
      goto LABEL_33;
    }
    id v21 = v17;
    if (objc_msgSend_isSharedQRSession(v17, v18, v19, v20) && !self->_sharedSessionHasJoined)
    {
      uint64_t v57 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v57, OS_LOG_TYPE_DEFAULT, "skip allocbind request, session is not yet joined!", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip allocbind request, session is not yet joined!");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip allocbind request, session is not yet joined!");
          }
        }
      }
      goto LABEL_33;
    }
    if (v8)
    {
      v323[0] = MEMORY[0x1E4F143A8];
      v323[1] = 3221225472;
      v323[2] = sub_19DA85724;
      v323[3] = &unk_1E59745A8;
      v323[4] = self;
      id v21 = v21;
      id v324 = v21;
      char v325 = v10;
      BOOL v326 = v9;
      BOOL v327 = v7;
      objc_msgSend__connectNWLink_disconnectAfterUse_connectedHandler_(self, v25, (uint64_t)v21, v26, 0, v323);
      if ((objc_msgSend_isSelfQRSession(v21, v27, v28, v29) & 1) == 0)
      {
        if (objc_msgSend_isSharedQRSession(v21, v30, v31, v32)) {
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v33, (uint64_t)v21, v34, 0);
        }
        else {
          objc_msgSend__startAllocbindFailoverTimerOnCandidatePair_delay_(self, v33, (uint64_t)v21, v34, 2);
        }
      }

      goto LABEL_33;
    }
    unint64_t v36 = objc_msgSend_state(v21, v22, v23, v24);
    int v40 = objc_msgSend_pendingRealloc(v21, v37, v38, v39);
    if (v36 == 2)
    {
      id v41 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v41, OS_LOG_TYPE_DEFAULT, "in failed state, send allocbind request ignored", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"in failed state, send allocbind request ignored");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"in failed state, send allocbind request ignored");
          }
        }
      }
      goto LABEL_33;
    }
    int v42 = v40;
    if (v36 < 3) {
      int v43 = 1;
    }
    else {
      int v43 = v10;
    }
    if ((v7 & ~v10 & v9 & 1) != 0 || (v10 & (v40 ^ 1) & 1) != 0 || !v43)
    {
      double v58 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        double v59 = @"allocbind";
        unsigned __int8 v60 = (&_IDSStunCandidatePairStateStrings)[v36];
        if (v10) {
          double v59 = @"realloc";
        }
        *(_DWORD *)buf = 138413826;
        *(void *)uint64_t v329 = v59;
        uint64_t v61 = @"YES";
        *(_WORD *)&v329[8] = 2112;
        *(void *)&v329[10] = v12;
        if (v42) {
          double v62 = @"YES";
        }
        else {
          double v62 = @"NO";
        }
        *(_WORD *)&v329[18] = 2080;
        *(void *)&v329[20] = v60;
        if (v43) {
          uint64_t v63 = @"NO";
        }
        else {
          uint64_t v63 = @"YES";
        }
        __int16 v330 = 2112;
        if (v9) {
          uint64_t v64 = @"YES";
        }
        else {
          uint64_t v64 = @"NO";
        }
        uint64_t v331 = v62;
        if (!v7) {
          uint64_t v61 = @"NO";
        }
        __int16 v332 = 2112;
        double v333 = v63;
        __int16 v334 = 2112;
        uint64_t v335 = v64;
        __int16 v336 = 2112;
        BOOL v337 = v61;
        _os_log_impl(&dword_19D9BE000, v58, OS_LOG_TYPE_DEFAULT, "skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@", buf, 0x48u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip %@ request for %@, state [%s], pendingRealloc %@, isAllocbindInProcess: %@, inResponseToNoSessionState: %@, isPendingInResponseToNoSessionState: %@");
          }
        }
      }
      goto LABEL_33;
    }
    unint64_t v306 = v36;
    uint64_t v304 = stunMessageTypeFromProtoMessageType(1, v10);
    CFDictionaryRef theDict = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v47 = objc_msgSend_sessionID(v21, v44, v45, v46);
    double v51 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v48, v49, v50);
    HasCandidatePairForSameSharedSessiouint64_t n = GLUtilHasCandidatePairForSameSharedSession(v47, v51);

    if (HasCandidatePairForSameSharedSession) {
      unsigned int v55 = 16;
    }
    else {
      unsigned int v55 = 0;
    }
    if (v9) {
      objc_msgSend_numberWithUnsignedInt_(NSNumber, v53, v55 | 0x20, v54);
    }
    else {
    double v56 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v53, v55, v54);
    }
    if (v56)
    {
      CFDictionarySetValue(theDict, @"gl-option-additional-binding", v56);
    }
    else
    {
      uint64_t v65 = MEMORY[0x1E4F14500];
      id v66 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BED8();
      }
    }
    if (objc_msgSend__shouldUseQRTLE(self, v67, v68, v69))
    {
      double v73 = objc_msgSend_local(v21, v70, v71, v72);
      if (objc_msgSend_isCellularStunCandidate(v73, v74, v75, v76))
      {
        BOOL v77 = !self->_allowTLEOverCellular;

        if (v77) {
          goto LABEL_100;
        }
      }
      else
      {
      }
      uint64_t v78 = objc_alloc_init(IDSQUICConnectionIDs);
      uint64_t v82 = objc_msgSend_copy(self->_usedLocalConnectionIDs, v79, v80, v81);
      id v322 = v82;
      double v85 = objc_msgSend_generateLocalIDs_(v78, v83, (uint64_t)&v322, v84);
      id v86 = v322;

      objc_msgSend_addObjectsFromArray_(self->_usedLocalConnectionIDs, v87, (uint64_t)v85, v88);
      objc_msgSend_setQUICConnectionIDs_(v21, v89, (uint64_t)v78, v90);
      double v94 = objc_msgSend_localAVCConnectionIDData(v78, v91, v92, v93);
      if (v94)
      {
        CFDictionarySetValue(theDict, @"gl-option-qr-connection-id-avc-key", v94);
      }
      else
      {
        int v95 = MEMORY[0x1E4F14500];
        id v96 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR)) {
          sub_19DB7BE50();
        }
      }
      double v100 = objc_msgSend_localIDSConnectionIDData(v78, v97, v98, v99);
      if (v100)
      {
        CFDictionarySetValue(theDict, @"gl-option-qr-connection-id-ids-key", v100);
      }
      else
      {
        __int16 v101 = MEMORY[0x1E4F14500];
        id v102 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
          sub_19DB7BDC8();
        }
      }
    }
LABEL_100:
    __int16 v103 = objc_msgSend_numberWithBool_(NSNumber, v70, self->_isShortMKIEnabled, v72);
    if (v103)
    {
      CFDictionarySetValue(theDict, @"gs-shortmki-enabled-key", v103);
    }
    else
    {
      uint64_t v104 = MEMORY[0x1E4F14500];
      id v105 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BD40();
      }
    }
    long long v108 = objc_msgSend_numberWithBool_(NSNumber, v106, self->_isTLEEnabled, v107);
    if (v108)
    {
      CFDictionarySetValue(theDict, @"gs-tle-enabled-key", v108);
    }
    else
    {
      long long v109 = MEMORY[0x1E4F14500];
      id v110 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BCB8();
      }
    }
    long long v113 = objc_msgSend_numberWithBool_(NSNumber, v111, self->_shouldOverrideServerTestOptionTLEDisabled, v112);
    if (v113)
    {
      CFDictionarySetValue(theDict, @"gl-option-should-override-server-test-option-tle-disabled", v113);
    }
    else
    {
      uint64_t v114 = MEMORY[0x1E4F14500];
      id v115 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BC30();
      }
    }
    long long v118 = objc_msgSend_numberWithBool_(NSNumber, v116, self->_serverTestOptionTLEDisabled, v117);
    if (v118)
    {
      CFDictionarySetValue(theDict, @"gl-option-server-test-option-tle-disabled", v118);
    }
    else
    {
      long long v119 = MEMORY[0x1E4F14500];
      id v120 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BBA8();
      }
    }
    objc_msgSend_sessionID(v21, v121, v122, v123);
    long long v124 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(self->_QRServerDataBlob, v125, v126, v127))
    {
      long long v130 = objc_msgSend_objectForKeyedSubscript_(self->_QRServerDataBlob, v128, (uint64_t)v124, v129);
      BOOL v131 = v130 == 0;

      if (v131)
      {
        long long v133 = objc_msgSend_allKeys(self->_QRServerDataBlob, v128, v132, v129);
        objc_msgSend_firstObject(v133, v134, v135, v136);
        long long v137 = (char *)objc_claimAutoreleasedReturnValue();

        uint64_t v141 = objc_msgSend_allValues(self->_QRServerDataBlob, v138, v139, v140);
        uint64_t v145 = objc_msgSend_firstObject(v141, v142, v143, v144);

        QRServerDataBlob = self->_QRServerDataBlob;
        self->_QRServerDataBlob = 0;

        uint64_t v147 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
        {
          int v151 = objc_msgSend_length(v145, v148, v149, v150);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)uint64_t v329 = v151;
          *(_WORD *)&v329[4] = 2112;
          *(void *)&v329[6] = v137;
          *(_WORD *)&v329[14] = 2112;
          *(void *)&v329[16] = v124;
          _os_log_impl(&dword_19D9BE000, v147, OS_LOG_TYPE_DEFAULT, "Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@", buf, 0x1Cu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            double v302 = v137;
            long long v303 = v124;
            uint64_t v300 = objc_msgSend_length(v145, v152, v153, v154);
            _IDSLogTransport(@"GL", @"IDS", @"Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@");
            if (_IDSShouldLog())
            {
              uint64_t v158 = objc_msgSend_length(v145, v155, v156, v157, v300, v137, v124);
              double v302 = v137;
              long long v303 = v124;
              uint64_t v300 = v158;
              _IDSLogV(0, @"IDSFoundation", @"GL", @"Sending QR Server data blob(%dB) from previous goaway for %@ in allocbind for %@");
            }
          }
        }
        id v159 = v145;
        if (v159)
        {
          CFDictionarySetValue(theDict, @"gl-option-qr-server-data-blob", v159);
        }
        else
        {
          uint64_t v160 = MEMORY[0x1E4F14500];
          id v161 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
            sub_19DB7BB20();
          }
        }
      }
    }
    idsContextBlob = self->_idsContextBlob;
    if (idsContextBlob)
    {
      objc_msgSend__createIDSContextBlobMaterialProto_(self, v128, (uint64_t)idsContextBlob, v129);
      id v163 = (id)objc_claimAutoreleasedReturnValue();
      if (v163)
      {
        CFDictionarySetValue(theDict, @"gl-option-ids-context-blob-key", v163);
      }
      else
      {
        double v164 = MEMORY[0x1E4F14500];
        id v165 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
          sub_19DB7BA98();
        }
      }
    }
    if (self->_state != 4) {
      CFDictionarySetValue(theDict, @"gl-option-ids-context-reason-key", &unk_1EF028B40);
    }
    double v166 = self->_qrSessionExperiments;
    if (v166)
    {
      CFDictionarySetValue(theDict, @"gl-option-qr-session-experiments", v166);
    }
    else
    {
      uint64_t v167 = MEMORY[0x1E4F14500];
      id v168 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR)) {
        sub_19DB7BA10();
      }
    }
    serverMaterialExchangeController = self->_serverMaterialExchangeController;
    if (serverMaterialExchangeController)
    {
      uint64_t v173 = objc_msgSend_desiredMaterials(serverMaterialExchangeController, v169, v170, v171);
      uint64_t v177 = objc_msgSend_set(MEMORY[0x1E4F1CA80], v174, v175, v176);
      double v180 = objc_msgSend_materialProtosForDesiredMaterials_failures_(self->_serverMaterialExchangeController, v178, (uint64_t)v173, v179, v177);
      double v184 = objc_msgSend_mutableCopy(v180, v181, v182, v183);

      double v188 = objc_msgSend_copy(v184, v185, v186, v187);
      objc_msgSend_setObject_forKeyedSubscript_(theDict, v189, (uint64_t)v188, v190, @"gl-option-materials-key");

      uint64_t v307 = objc_msgSend_mutableCopy(v173, v191, v192, v193);
      objc_msgSend_minusSet_(v307, v194, (uint64_t)v177, v195);
      objc_msgSend_markMaterialsInSetAsSent_(self->_serverMaterialExchangeController, v196, (uint64_t)v307, v197);
    }
    else
    {
      uint64_t v307 = 0;
    }
    quicMaterialExchangeProvider = self->_quicMaterialExchangeProvider;
    if (quicMaterialExchangeProvider)
    {
      uint64_t v199 = objc_msgSend_takeAllCurrentMaterials(quicMaterialExchangeProvider, v169, v170, v171);
      double v203 = objc_msgSend_GlobalLink(IDSFoundationLog, v200, v201, v202);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v329 = v199;
        _os_log_impl(&dword_19D9BE000, v203, OS_LOG_TYPE_DEFAULT, "IDSGlobalLinkOptionMaterialsKey: %@", buf, 0xCu);
      }

      objc_msgSend_setObject_forKeyedSubscript_(theDict, v204, (uint64_t)v199, v205, @"gl-option-materials-key");
    }
    if ((self->_serverMaterialExchangeController || self->_quicMaterialExchangeProvider)
      && self->_isAutoDisconnectSupportedForGFTService)
    {
      if (self->_isLightweightParticipant) {
        goto LABEL_167;
      }
      id v206 = objc_msgSend_GlobalLink(IDSFoundationLog, v169, v170, v171);
      if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v207 = @"YES";
        if (self->_isAutoDisconnectSupportedForGFTService) {
          uint64_t v208 = @"YES";
        }
        else {
          uint64_t v208 = @"NO";
        }
        if (!self->_isLightweightParticipant) {
          uint64_t v207 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        *(void *)uint64_t v329 = v208;
        *(_WORD *)&v329[8] = 2112;
        *(void *)&v329[10] = v207;
        _os_log_impl(&dword_19D9BE000, v206, OS_LOG_TYPE_DEFAULT, "_isAutoDisconnectSupportedForGFTService: %@, _isLightweightParticipant: %@", buf, 0x16u);
      }

      objc_msgSend_setObject_forKeyedSubscript_(theDict, v209, MEMORY[0x1E4F1CC38], v210, @"gl-option-should-auto-disconnect-for-standard-participant");
      if (self->_isAutoDisconnectSupportedForGFTService) {
LABEL_167:
      }
        objc_msgSend_setObject_forKeyedSubscript_(theDict, v169, MEMORY[0x1E4F1CC38], v171, @"gl-option-is-facetime-session", v300, v302, v303);
    }
    id v211 = objc_msgSend_numberWithBool_(NSNumber, v169, self->_isLightweightParticipant, v171, v300);
    if (v211)
    {
      CFDictionarySetValue(theDict, @"gl-option-is-lightweight-participant-key", v211);
    }
    else
    {
      char v212 = MEMORY[0x1E4F14500];
      id v213 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR)) {
        sub_19DB78D30();
      }
    }
    uint64_t v216 = objc_msgSend_numberWithBool_(NSNumber, v214, self->_uplinkNackDisabled, v215);
    if (v216)
    {
      CFDictionarySetValue(theDict, @"gl-option-uplink-nack-disabled", v216);
    }
    else
    {
      double v217 = MEMORY[0x1E4F14500];
      id v218 = MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR)) {
        sub_19DB7B988();
      }
    }
    double v219 = [IDSQRProtoMessage alloc];
    uint64_t v308 = objc_msgSend_initWithType_candidatePair_options_(v219, v220, 1, v221, v21, theDict);
    if (!v308)
    {
      uint64_t v257 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v329 = @"allocbind_request";
        _os_log_impl(&dword_19D9BE000, v257, OS_LOG_TYPE_DEFAULT, "failed to create proto message (%@).", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to create proto message (%@).");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create proto message (%@).");
          }
        }
      }
      goto LABEL_232;
    }
    uint64_t v225 = objc_msgSend_GlobalLink(IDSFoundationLog, v222, v223, v224);
    if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
    {
      idsSessionID = self->_idsSessionID;
      objc_msgSend_sessionID(v21, v226, v227, v228);
      long long v230 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      *(void *)uint64_t v329 = @"allocbind_request";
      *(_WORD *)&v329[8] = 2112;
      *(void *)&v329[10] = v308;
      *(_WORD *)&v329[18] = 2112;
      *(void *)&v329[20] = idsSessionID;
      __int16 v330 = 2112;
      uint64_t v331 = v230;
      __int16 v332 = 2112;
      double v333 = v12;
      _os_log_impl(&dword_19D9BE000, v225, OS_LOG_TYPE_DEFAULT, "Send %@ %@ for IDSSessionID: %@ QRSessionID: %@ token: %@", buf, 0x34u);
    }
    objc_msgSend_quicAllocbindRequest(self->_metricsCollector, v231, v232, v233);
    id v237 = objc_msgSend_linkMetrics(v21, v234, v235, v236);
    objc_msgSend_sendAllocbindRequest(v237, v238, v239, v240);

    objc_msgSend__setLinkMetricsAttributesForCandidatePair_(self, v241, (uint64_t)v21, v242);
    unsigned int v246 = objc_msgSend_local(v21, v243, v244, v245);
    uint64_t v305 = objc_msgSend_transport(v246, v247, v248, v249);

    int v250 = IMGetDomainBoolForKey();
    int v251 = IMGetDomainBoolForKey();
    int v255 = v251;
    BOOL v256 = (v250 & 1) == 0 && !self->_forceTCPFallbackOnWiFi;
    BOOL v258 = (v251 & 1) == 0 && !self->_forceTCPFallbackOnCell;
    long long v259 = objc_msgSend_GlobalLink(IDSFoundationLog, v252, v253, v254);
    if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
    {
      long long v260 = @"NO";
      if (v250) {
        long long v261 = @"YES";
      }
      else {
        long long v261 = @"NO";
      }
      BOOL forceTCPFallbackOnCell = self->_forceTCPFallbackOnCell;
      if (self->_forceTCPFallbackOnWiFi) {
        long long v263 = @"YES";
      }
      else {
        long long v263 = @"NO";
      }
      *(_DWORD *)buf = 138413058;
      *(void *)uint64_t v329 = v261;
      if (v255) {
        uint64_t v264 = @"YES";
      }
      else {
        uint64_t v264 = @"NO";
      }
      *(_WORD *)&v329[8] = 2112;
      *(void *)&v329[10] = v263;
      if (forceTCPFallbackOnCell) {
        long long v260 = @"YES";
      }
      *(_WORD *)&v329[18] = 2112;
      *(void *)&v329[20] = v264;
      __int16 v330 = 2112;
      uint64_t v331 = v260;
      _os_log_impl(&dword_19D9BE000, v259, OS_LOG_TYPE_DEFAULT, "sendQUICAllocbindRequest forceTCPFallbackOnWiFI default: %@ manual: %@; forceTCPFallbackOnCell default: %@ manual: %@",
        buf,
        0x2Au);
    }

    uint64_t v268 = objc_msgSend_local(v21, v265, v266, v267);
    int isCellularStunCandidate = objc_msgSend_isCellularStunCandidate(v268, v269, v270, v271);

    int v276 = (unint64_t)(v305 - 3) < 0xFFFFFFFFFFFFFFFELL || v256;
    if ((v276 | isCellularStunCandidate))
    {
      char v277 = (unint64_t)(v305 - 3) < 0xFFFFFFFFFFFFFFFELL || v258;
      if (v277 & 1) != 0 || ((isCellularStunCandidate ^ 1))
      {
        objc_msgSend__sendProtoMessage_candidatePair_(self, v273, (uint64_t)v308, v275, v21);
        uint64_t v286 = objc_msgSend_transactionID(v308, v283, v284, v285);
        objc_msgSend_addProtoRequest_(v21, v287, v286, v288);
LABEL_222:
        if (!v306)
        {
          objc_msgSend_setState_(v21, v280, 1, v281);
          double v289 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)uint64_t v329 = _IDSStunCandidatePairStateStrings;
            *(_WORD *)&v329[8] = 2080;
            *(void *)&v329[10] = off_1E944EA98;
            *(_WORD *)&v329[18] = 2112;
            *(void *)&v329[20] = v12;
            _os_log_impl(&dword_19D9BE000, v289, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v302 = off_1E944EA98;
              long long v303 = v12;
              double v301 = _IDSStunCandidatePairStateStrings;
              _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
              if (_IDSShouldLog())
              {
                double v302 = off_1E944EA98;
                long long v303 = v12;
                double v301 = _IDSStunCandidatePairStateStrings;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
              }
            }
          }
          uint64_t Type = objc_msgSend_allocateType(v21, v290, v291, v292, v301, v302, v303);
          double v297 = 10.0;
          BOOL v298 = Type == 2;
          if (Type == 2)
          {
            double v296 = GLUtilNATCheckTimeout(v296, 2, v294, v295);
            double v297 = v296;
          }
          uint64_t v299 = objc_msgSend_transactionID(v308, v294, v295, v296);
          v310[0] = MEMORY[0x1E4F143A8];
          v310[1] = 3221225472;
          v310[2] = sub_19DA8578C;
          v310[3] = &unk_1E59745D0;
          id v311 = v21;
          int v312 = self;
          uint64_t v316 = v299;
          uint64_t v317 = 0;
          uint64_t v313 = v12;
          id v314 = v307;
          char v320 = v10;
          double v318 = v297;
          BOOL v321 = v298;
          id v315 = v308;
          uint64_t v319 = v304;
          IDSTransportThreadAddBlockAfter(v310, v297);
        }
LABEL_232:

LABEL_33:
        goto LABEL_34;
      }
      uint64_t v278 = objc_msgSend_GlobalLink(IDSFoundationLog, v273, v274, v275);
      if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT))
      {
        double v279 = (&_IDSStunTransportStrings)[v305];
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v329 = v279;
        _os_log_impl(&dword_19D9BE000, v278, OS_LOG_TYPE_DEFAULT, "forceTCPFallbackOnCell is set, skip message %s", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v278 = objc_msgSend_GlobalLink(IDSFoundationLog, v273, v274, v275);
      if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v282 = (&_IDSStunTransportStrings)[v305];
        *(_DWORD *)buf = 136315138;
        *(void *)uint64_t v329 = v282;
        _os_log_impl(&dword_19D9BE000, v278, OS_LOG_TYPE_DEFAULT, "forceTCPFallbackOnWiFi is set, skip message %s", buf, 0xCu);
      }
    }

    goto LABEL_222;
  }
  uint64_t v15 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v15, OS_LOG_TYPE_DEFAULT, "failed to send allocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to send allocbind request due to invalid token.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send allocbind request due to invalid token.");
      }
    }
  }
LABEL_34:
}

- (void)_sendQUICUnallocbindRequest:(id)a3 reason:(unsigned __int8)a4
{
  uint64_t v4 = a4;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v6 = (__CFString *)a3;
  BOOL v7 = v6;
  if (self->_state >= 6)
  {
    BOOL v8 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v9 = _IDSLinkStateStrings[self->_state];
      *(_DWORD *)buf = 136315138;
      double v90 = (__CFString *)v9;
      _os_log_impl(&dword_19D9BE000, v8, OS_LOG_TYPE_DEFAULT, "skip unallocbind request, GL state (%s).", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request, GL state (%s).");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request, GL state (%s).");
        }
      }
    }
    goto LABEL_34;
  }
  if (v6)
  {
    tokenToCandidatePairs = self->_tokenToCandidatePairs;
    if (!tokenToCandidatePairs
      || (double v11 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v7)) == 0)
    {
      double v26 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v26, OS_LOG_TYPE_DEFAULT, "send unallocbind request failed due to invalid candidate pair.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"send unallocbind request failed due to invalid candidate pair.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send unallocbind request failed due to invalid candidate pair.");
          }
        }
      }
      uint64_t v15 = 0;
      goto LABEL_27;
    }
    uint64_t v15 = v11;
    if ((objc_msgSend_isRelayStunCandidatePair(v11, v12, v13, v14) & 1) == 0)
    {
      uint64_t v28 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        double v90 = v7;
        _os_log_impl(&dword_19D9BE000, v28, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, not over relay.", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request for %@, not over relay.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request for %@, not over relay.");
          }
        }
      }
      goto LABEL_27;
    }
    unint64_t v19 = objc_msgSend_state(v15, v16, v17, v18);
    unint64_t v23 = v19;
    if (v19 <= 6 && ((1 << v19) & 0x47) != 0)
    {
      double v24 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        double v25 = (&_IDSStunCandidatePairStateStrings)[v23];
        *(_DWORD *)buf = 138412546;
        double v90 = v7;
        __int16 v91 = 2080;
        uint64_t v92 = v25;
        _os_log_impl(&dword_19D9BE000, v24, OS_LOG_TYPE_DEFAULT, "skip unallocbind request for %@, state [%s].", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"skip unallocbind request for %@, state [%s].");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"skip unallocbind request for %@, state [%s].");
          }
        }
      }
      goto LABEL_27;
    }
    uint64_t v82 = objc_msgSend_sessionID(v15, v20, v21, v22);
    if (!v82)
    {
      int v43 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D9BE000, v43, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid relay-session-id.", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to send unallocbind request due to invalid relay-session-id.");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send unallocbind request due to invalid relay-session-id.");
          }
        }
      }
      goto LABEL_94;
    }
    objc_msgSend_stopSessionConnectedTimer(v15, v29, v30, v31);
    objc_msgSend_stopSessionConvergenceTimer(v15, v32, v33, v34);
    objc_msgSend_stopSessionGoAwayTimer(v15, v35, v36, v37);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    idsContextBlob = self->_idsContextBlob;
    if (idsContextBlob)
    {
      objc_msgSend__createIDSContextBlobMaterialProto_(self, v38, (uint64_t)idsContextBlob, v40);
      id v42 = (id)objc_claimAutoreleasedReturnValue();
      if (v42)
      {
        CFDictionarySetValue(Mutable, @"gl-option-ids-context-blob-key", v42);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        sub_19DB7BA98();
      }
    }
    if (v4 == 12)
    {
      uint64_t v44 = &unk_1EF028B58;
    }
    else if (v4 == 4)
    {
      uint64_t v44 = &unk_1EF028B70;
    }
    else
    {
      if (!objc_msgSend_isSharedQRSession(v15, v38, (uint64_t)idsContextBlob, v40)
        || self->_sharedSessionHasJoined)
      {
        goto LABEL_59;
      }
      uint64_t v44 = &unk_1EF028B40;
    }
    CFDictionarySetValue(Mutable, @"gl-option-ids-context-reason-key", v44);
LABEL_59:
    uint64_t v45 = [IDSQRProtoMessage alloc];
    uint64_t v48 = (__CFString *)objc_msgSend_initWithType_candidatePair_options_(v45, v46, 22, v47, v15, Mutable);
    if (v48)
    {
      uint64_t v49 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        double v90 = v48;
        __int16 v91 = 2112;
        uint64_t v92 = (char *)v7;
        _os_log_impl(&dword_19D9BE000, v49, OS_LOG_TYPE_DEFAULT, "send unallocbind request %@ for %@.", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          BOOL v77 = v48;
          id v79 = v7;
          _IDSLogTransport(@"GL", @"IDS", @"send unallocbind request %@ for %@.");
          if (_IDSShouldLog())
          {
            BOOL v77 = v48;
            id v79 = v7;
            _IDSLogV(0, @"IDSFoundation", @"GL", @"send unallocbind request %@ for %@.");
          }
        }
      }
      uint64_t v52 = objc_msgSend__sendProtoMessage_candidatePair_(self, v50, (uint64_t)v48, v51, v15, v77, v79);
      uint64_t v56 = objc_msgSend_transactionID(v48, v53, v54, v55);
      objc_msgSend_addProtoRequest_(v15, v57, v56, v58);
      if (v23 != 5)
      {
        objc_msgSend_setState_(v15, v59, 5, v61);
        double v62 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v63 = (&_IDSStunCandidatePairStateStrings)[v23];
          *(_DWORD *)buf = 136315650;
          double v90 = (__CFString *)v63;
          __int16 v91 = 2080;
          uint64_t v92 = off_1E944EAB8;
          __int16 v93 = 2112;
          double v94 = v7;
          _os_log_impl(&dword_19D9BE000, v62, OS_LOG_TYPE_DEFAULT, "update state (%s->%s) for %@.", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            uint64_t v80 = off_1E944EAB8;
            double v81 = v7;
            uint64_t v78 = (&_IDSStunCandidatePairStateStrings)[v23];
            _IDSLogTransport(@"GL", @"IDS", @"update state (%s->%s) for %@.");
            if (_IDSShouldLog())
            {
              uint64_t v80 = off_1E944EAB8;
              double v81 = v7;
              uint64_t v78 = (&_IDSStunCandidatePairStateStrings)[v23];
              _IDSLogV(0, @"IDSFoundation", @"GL", @"update state (%s->%s) for %@.");
            }
          }
        }
      }
      if (v52 == -1
        && ((hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc = objc_msgSend__hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc_(self, v59, 3, v61, 4, 0, 0), self->_state != 5)? (char v65 = 1): (char v65 = hasCandidatePairInState_anotherState_relayCandidatePairsOnly_excludeSelfAlloc), (v65 & 1) == 0))
      {
        objc_msgSend__notifyLinkDisconnectedWithError_reason_(self, v59, 24, v61, v4);
      }
      else
      {
        uint64_t v67 = objc_msgSend_transactionID(v48, v59, v60, v61, v78, v80, v81, v82);
        if (!self->_unallocbindRequestToReason)
        {
          double v69 = (NSMutableDictionary *)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          unallocbindRequestToReasouint64_t n = self->_unallocbindRequestToReason;
          self->_unallocbindRequestToReasouint64_t n = v69;
        }
        double v72 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v66, v4, v68);
        if (v72)
        {
          long long v74 = self->_unallocbindRequestToReason;
          uint64_t v75 = (const void *)objc_msgSend_numberWithUnsignedLongLong_(NSNumber, v71, v67, v73);
          CFDictionarySetValue((CFMutableDictionaryRef)v74, v75, v72);
        }

        v83[0] = MEMORY[0x1E4F143A8];
        v83[1] = 3221225472;
        v83[2] = sub_19DA86DB0;
        v83[3] = &unk_1E59745F8;
        id v84 = v15;
        double v85 = self;
        uint64_t v86 = v67;
        char v88 = v4;
        int v87 = 22;
        IDSTransportThreadAddBlockAfter(v83, 3.0);
      }
    }
    else
    {
      double v76 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        double v90 = @"unallocbind_request";
        _os_log_impl(&dword_19D9BE000, v76, OS_LOG_TYPE_DEFAULT, "failed to create proto message (%@)", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"failed to create proto message (%@)");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to create proto message (%@)");
          }
        }
      }
    }

LABEL_94:
LABEL_27:

    goto LABEL_34;
  }
  uint64_t v27 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D9BE000, v27, OS_LOG_TYPE_DEFAULT, "failed to send unallocbind request due to invalid token.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"failed to send unallocbind request due to invalid token.");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to send unallocbind request due to invalid token.");
      }
    }
  }
LABEL_34:
}

- (void)_sendChannelDataCommandMessage:(int64_t)a3 packetBuffer:(id *)a4 options:(id)a5 candidatePairToken:(id)a6
{
  uint64_t v217 = *MEMORY[0x1E4F143B8];
  id v202 = a5;
  int v10 = (char *)a6;
  double v203 = self;
  id key = v10;
  int64_t v201 = a3;
  if (self->_state < 6)
  {
    uint64_t v15 = v10;
    double v200 = a4;
    if (!v10
      || (tokenToCandidatePairs = self->_tokenToCandidatePairs) == 0
      || (double v18 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToCandidatePairs, v15),
          uint64_t v15 = key,
          !v18))
    {
      if (!v15
        || (CFDictionaryRef tokenToStunCheckPairs = self->_tokenToStunCheckPairs) == 0
        || (v18 = (id)CFDictionaryGetValue((CFDictionaryRef)tokenToStunCheckPairs, v15), uint64_t v15 = key, !v18))
      {
        double v18 = objc_msgSend__findVirtualCandidatePair_(self, v15, (uint64_t)v15, v11);
        if (!v18)
        {
          double v127 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218242;
            *(void *)double v215 = a3;
            *(_WORD *)&v215[8] = 2112;
            *(void *)&v215[10] = key;
            _os_log_impl(&dword_19D9BE000, v127, OS_LOG_TYPE_DEFAULT, "send command %04lx failed due to invalid candidate pair %@", buf, 0x16u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"send command %04lx failed due to invalid candidate pair %@");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"send command %04lx failed due to invalid candidate pair %@");
              }
            }
          }
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x30D7, (uint64_t)a4, v128);
          double v18 = 0;
          goto LABEL_166;
        }
      }
    }
    uint64_t v199 = objc_msgSend_state(v18, v15, v17, v11);
    unint64_t v23 = objc_msgSend_local(v18, v20, v21, v22);
    uint64_t v27 = objc_msgSend_address(v23, v24, v25, v26);

    if (objc_msgSend_isRelayStunCandidatePair(v18, v28, v29, v30)
      && (unint64_t)(v199 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v212 = 0u;
      long long v213 = 0u;
      long long v210 = 0u;
      long long v211 = 0u;
      uint64_t v33 = objc_msgSend_allValues(self->_tokenToCandidatePairs, v31, v32, 0.0);
      uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v210, v35, v216, 16);
      if (v38)
      {
        uint64_t v40 = *(void *)v211;
        while (2)
        {
          for (uint64_t i = 0; i != v38; ++i)
          {
            if (*(void *)v211 != v40) {
              objc_enumerationMutation(v33);
            }
            id v42 = *(void **)(*((void *)&v210 + 1) + 8 * i);
            int v43 = objc_msgSend_local(v42, v36, v37, v39);
            uint64_t v47 = objc_msgSend_address(v43, v44, v45, v46);

            double v51 = objc_msgSend_sessionID(v42, v48, v49, v50);
            double v55 = objc_msgSend_sessionID(v18, v52, v53, v54);
            if (objc_msgSend_isEqualToString_(v51, v56, (uint64_t)v55, v57)
              && (objc_msgSend_state(v42, v58, v59, v60) == 3 || objc_msgSend_state(v42, v61, v62, v63) == 4))
            {
              BOOL v64 = IsSameSA(v27, v47);

              if (v64)
              {
                double v68 = key;
                double v72 = objc_msgSend_candidatePairToken(v42, v69, v70, v71);
                double v73 = v42;

                long long v74 = v72;
                id key = v74;
                uint64_t v75 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  BOOL v77 = (&_IDSStunCandidatePairStateStrings)[v199];
                  *(_DWORD *)buf = 138413058;
                  *(void *)double v215 = v68;
                  *(_WORD *)&v215[8] = 2080;
                  *(void *)&v215[10] = v77;
                  *(_WORD *)&v215[18] = 1024;
                  *(_DWORD *)&v215[20] = (unsigned __int16)v201;
                  *(_WORD *)&v215[24] = 2112;
                  *(void *)&v215[26] = v74;
                  _os_log_impl(&dword_19D9BE000, v75, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], send command %04x using %@.", buf, 0x26u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    uint64_t v197 = (unsigned __int16)v201;
                    long long v198 = v74;
                    double v195 = v68;
                    long long v196 = (&_IDSStunCandidatePairStateStrings)[v199];
                    _IDSLogTransport(@"GL", @"IDS", @"%@ has state [%s], send command %04x using %@.");
                    if (_IDSShouldLog())
                    {
                      uint64_t v197 = (unsigned __int16)v201;
                      long long v198 = v74;
                      double v195 = v68;
                      long long v196 = (&_IDSStunCandidatePairStateStrings)[v199];
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"%@ has state [%s], send command %04x using %@.");
                    }
                  }
                }

                double v18 = v73;
                goto LABEL_45;
              }
            }
            else
            {
            }
          }
          uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v210, v39, v216, 16);
          if (v38) {
            continue;
          }
          break;
        }
      }

      char v65 = OSLogHandleForTransportCategory();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        id v66 = (&_IDSStunCandidatePairStateStrings)[v199];
        *(_DWORD *)buf = 138412802;
        *(void *)double v215 = key;
        *(_WORD *)&v215[8] = 2080;
        *(void *)&v215[10] = v66;
        *(_WORD *)&v215[18] = 1024;
        *(_DWORD *)&v215[20] = (unsigned __int16)v201;
        _os_log_impl(&dword_19D9BE000, v65, OS_LOG_TYPE_DEFAULT, "%@ has state [%s], Found no other connected candidate pair to send command %04x", buf, 0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled())
      {
        if (_IDSShouldLogTransport())
        {
          _IDSLogTransport(@"GL", @"IDS", @"%@ has state [%s], Found no other connected candidate pair to send command %04x");
          if (_IDSShouldLog()) {
            _IDSLogV(0, @"IDSFoundation", @"GL", @"%@ has state [%s], Found no other connected candidate pair to send command %04x");
          }
        }
      }
      _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x30F4, (uint64_t)v200, v67);
      goto LABEL_166;
    }
LABEL_45:
    double v78 = ids_monotonic_time();
    uint64_t v80 = objc_msgSend_objectForKey_(v202, v79, @"gl-attr-active-probing-link-id", v78);
    uint64_t v84 = objc_msgSend_charValue(v80, v81, v82, v83);

    uint64_t v87 = v201;
    if (!v84)
    {
      if (objc_msgSend__skipCommandMessage_candidatePair_timeNow_(v203, v85, v201, v78, v18))
      {
        __int16 v97 = OSLogHandleForIDSCategory();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          __int16 v101 = (&_IDSStunCandidatePairStateStrings)[objc_msgSend_state(v18, v98, v99, v100)];
          *(_DWORD *)buf = 134218498;
          *(void *)double v215 = v201;
          *(_WORD *)&v215[8] = 2112;
          *(void *)&v215[10] = key;
          *(_WORD *)&v215[18] = 2080;
          *(void *)&v215[20] = v101;
          _os_log_impl(&dword_19D9BE000, v97, OS_LOG_TYPE_DEBUG, "skip session command %04lx for %@, state [%s].", buf, 0x20u);
        }

        if (os_log_shim_legacy_logging_enabled() && _IDSShouldLog())
        {
          objc_msgSend_state(v18, v103, v104, v102);
          _IDSLogV(1, @"IDSFoundation", @"GL", @"skip session command %04lx for %@, state [%s].");
        }
        _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x30FF, (uint64_t)v200, v102);
        goto LABEL_166;
      }
      uint64_t v87 = v201;
      if (v201 == 3)
      {
        objc_msgSend_hbStartTime(v18, v85, v96, v86);
        if (v135 == 0.0)
        {
          double v136 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)double v215 = v18;
            _os_log_impl(&dword_19D9BE000, v136, OS_LOG_TYPE_DEFAULT, "session heartbeat request start now for %@", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v195 = v18;
              _IDSLogTransport(@"GL", @"IDS", @"session heartbeat request start now for %@");
              if (_IDSShouldLog())
              {
                double v195 = v18;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session heartbeat request start now for %@");
              }
            }
          }
          objc_msgSend_setHbStartTime_(v18, v137, v138, v78, v195, v196, v197, v198);
          uint64_t v87 = 3;
        }
        else
        {
          double v86 = v78 - v135;
          uint64_t v87 = 3;
          if (v86 > 60.0)
          {
            double v188 = OSLogHandleForTransportCategory();
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)double v215 = v18;
              _os_log_impl(&dword_19D9BE000, v188, OS_LOG_TYPE_DEFAULT, "session heartbeat request message timed out, disconnect %@", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled())
            {
              if (_IDSShouldLogTransport())
              {
                double v195 = v18;
                _IDSLogTransport(@"GL", @"IDS", @"session heartbeat request message timed out, disconnect %@");
                if (_IDSShouldLog())
                {
                  double v195 = v18;
                  _IDSLogV(0, @"IDSFoundation", @"GL", @"session heartbeat request message timed out, disconnect %@");
                }
              }
            }
            if (objc_msgSend_isQUIC(v18, v189, v190, v191, v195, v196, v197, v198)) {
              objc_msgSend__sendQUICUnallocbindRequest_reason_(v203, v192, (uint64_t)key, v193, 9);
            }
            else {
              objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v203, v192, (uint64_t)key, v193, 0, 9);
            }
            _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x3111, (uint64_t)v200, v194);
            goto LABEL_166;
          }
        }
      }
    }
    uint64_t v88 = (uint64_t)v200;
    if (!v200)
    {
      id v105 = objc_msgSend__createCommandData_options_candidatePair_(v203, v85, v87, v86, v202, v18);
      if (!v105)
      {
        uint64_t v158 = OSLogHandleForTransportCategory();
        if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)double v215 = v201;
          _os_log_impl(&dword_19D9BE000, v158, OS_LOG_TYPE_DEFAULT, "failed to get indication data, skip session command (%04lx) message.", buf, 0xCu);
        }

        if (os_log_shim_legacy_logging_enabled())
        {
          if (_IDSShouldLogTransport())
          {
            _IDSLogTransport(@"GL", @"IDS", @"failed to get indication data, skip session command (%04lx) message.");
            if (_IDSShouldLog()) {
              _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to get indication data, skip session command (%04lx) message.");
            }
          }
        }
        goto LABEL_166;
      }
      double v200 = ($FDA297F0C8635F8E93D832D91DEF451F *)_IDSLinkPacketBufferCreate();
      v200->uint64_t var25 = objc_msgSend_linkID(v18, v106, v107, v108);
      uint64_t v112 = objc_msgSend_length(v105, v109, v110, v111);
      v200->int64_t var2 = v112;
      objc_msgSend_getBytes_length_(v105, v113, (uint64_t)v200->var0, v114, v112);
      v200->int var23 = 1;
      v200->var24[0].var19 = 1;
      double v117 = objc_msgSend_objectForKey_(v202, v115, @"gl-attr-remote-relay-link-id", v116);
      long long v121 = v117;
      uint64_t v122 = v200;
      if (v117)
      {
        v200->var24[0].int var14 = 1;
        unsigned __int16 v123 = objc_msgSend_unsignedShortValue(v117, v118, v119, v120);
        uint64_t v122 = v200;
        v200->var24[0].var15[0] = v123;
      }
      v122->double var28 = v78;

      goto LABEL_95;
    }
    double v89 = v78 - v200->var28;
    if (v89 > 30.0)
    {
      switch(v87)
      {
        case 6:
          id v159 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v159, OS_LOG_TYPE_DEFAULT, "session relay interface information message timed out.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"session relay interface information message timed out.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session relay interface information message timed out.");
              }
            }
          }
          objc_msgSend__discardKeyMaterialMessage_(v203, v160, 12, v161, v195);
          id v165 = objc_msgSend_sharedInstance(IDSStunRelayInterfaceInfoController, v162, v163, v164);
          objc_msgSend_setRelayInterfaceInfoDeliveryStatus_status_(v165, v166, (uint64_t)v203->_cbuuid, v167, 4);

          break;
        case 4:
          id v168 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D9BE000, v168, OS_LOG_TYPE_DEFAULT, "session connection data message timed out.", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              _IDSLogTransport(@"GL", @"IDS", @"session connection data message timed out.");
              if (_IDSShouldLog()) {
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session connection data message timed out.");
              }
            }
          }
          uint64_t v172 = objc_msgSend_sharedInstance(IDSStunConnectionDataController, v169, v170, v171, v195);
          objc_msgSend_setDeliveryStatus_status_(v172, v173, (uint64_t)v203->_cbuuid, v174, 3);

          break;
        case 1:
          double v90 = OSLogHandleForTransportCategory();
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)double v215 = v18;
            _os_log_impl(&dword_19D9BE000, v90, OS_LOG_TYPE_DEFAULT, "session connected message timed out, disconnect %@.", buf, 0xCu);
          }

          if (os_log_shim_legacy_logging_enabled())
          {
            if (_IDSShouldLogTransport())
            {
              double v195 = v18;
              _IDSLogTransport(@"GL", @"IDS", @"session connected message timed out, disconnect %@.");
              if (_IDSShouldLog())
              {
                double v195 = v18;
                _IDSLogV(0, @"IDSFoundation", @"GL", @"session connected message timed out, disconnect %@.");
              }
            }
          }
          if (objc_msgSend_isQUIC(v18, v91, v92, v93, v195)) {
            objc_msgSend__sendQUICUnallocbindRequest_reason_(v203, v94, (uint64_t)key, v95, 9);
          }
          else {
            objc_msgSend__sendUnallocbindRequest_stunMessage_reason_(v203, v94, (uint64_t)key, v95, 0, 9);
          }
          break;
        default:
LABEL_165:
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x3128, v88, v89);
          goto LABEL_166;
      }
      uint64_t v88 = (uint64_t)v200;
      goto LABEL_165;
    }
    if ((v87 & 0xFFFFFFFFFFFF7FFFLL) == 4 && v202)
    {
      double v129 = objc_msgSend_objectForKey_(v202, v85, @"gl-attr-counter", v89);
      uint64_t v133 = objc_msgSend_intValue(v129, v130, v131, v132);
      uint64_t v134 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v133 = 0xFFFFFFFFLL;
      uint64_t v134 = 0xFFFFFFFFLL;
      if ((v87 & 0xFFFFFFFFFFFF7FFFLL) != 6 || !v202)
      {
LABEL_93:
        if (objc_msgSend__shouldSkipCommand_withCandidatePair_connectionDataCounter_relayInterfaceCounter_(v203, v85, v87, v89, v18, v133, v134, v195))
        {
          _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x3135, (uint64_t)v200, v126);
LABEL_166:

          goto LABEL_167;
        }
LABEL_95:
        double v142 = objc_msgSend_GlobalLink(IDSFoundationLog, v124, v125, v126);
        BOOL v143 = os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT);
        if ((int)v84 <= 0)
        {
          if (v143)
          {
            idsSessionID = v203->_idsSessionID;
            double v157 = objc_msgSend_sessionID(v18, v144, v145, v146);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)double v215 = (unsigned __int16)v201;
            *(_WORD *)&v215[4] = 2112;
            *(void *)&v215[6] = key;
            *(_WORD *)&v215[14] = 2112;
            *(void *)&v215[16] = idsSessionID;
            *(_WORD *)&v215[24] = 2112;
            *(void *)&v215[26] = v157;
            _os_log_impl(&dword_19D9BE000, v142, OS_LOG_TYPE_DEFAULT, "Send command %04x (relay) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x26u);
          }
          uint64_t v155 = v18;
        }
        else
        {
          if (v143)
          {
            uint64_t v147 = v203->_idsSessionID;
            uint64_t v148 = objc_msgSend_sessionID(v18, v144, v145, v146);
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)double v215 = (unsigned __int16)v201;
            *(_WORD *)&v215[4] = 1024;
            *(_DWORD *)&v215[6] = v84;
            *(_WORD *)&v215[10] = 2112;
            *(void *)&v215[12] = key;
            *(_WORD *)&v215[20] = 2112;
            *(void *)&v215[22] = v147;
            *(_WORD *)&v215[30] = 2112;
            *(void *)&v215[32] = v148;
            _os_log_impl(&dword_19D9BE000, v142, OS_LOG_TYPE_DEFAULT, "Send command %04x (active probing on link %d) (relay) for %@ IDSSessionID: %@ QRSessionID: %@", buf, 0x2Cu);
          }
          if (v203->_linkIDToCandidatePairs)
          {
            double v142 = objc_msgSend_numberWithChar_(NSNumber, v149, v84, v150);
            if (v142)
            {
              CFDictionaryRef linkIDToCandidatePairs = (const __CFDictionary *)v203->_linkIDToCandidatePairs;
              double v154 = objc_msgSend_numberWithChar_(NSNumber, v151, v84, v152);
              uint64_t v155 = (id)CFDictionaryGetValue(linkIDToCandidatePairs, v154);

              double v18 = v154;
            }
            else
            {
              uint64_t v155 = 0;
            }
          }
          else
          {
            uint64_t v155 = 0;
            double v142 = v18;
          }
        }

        uint64_t v177 = 0;
        __int16 v178 = v201;
        if (v201 != 3 && (v201 & 0x8000) == 0)
        {
          uint64_t v177 = _IDSLinkPacketBufferClone((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", 12633, (uint64_t)v200);
          __int16 v178 = v201;
        }
        BOOL v179 = (v178 & 0x8000) == 0;
        double var28 = v200->var28;
        objc_msgSend__sendChannelDataPacketBuffer_candidatePair_(v203, v175, (uint64_t)v200, v176, v155);
        int64_t v181 = v201;
        BOOL v182 = v201 == 3 && (int)v84 > 0;
        if (!v182 && v179)
        {
          double v183 = 1.0;
          if (v201 == 6 || v201 == 1)
          {
            double v184 = key;
            if (v78 - var28 < 2.0)
            {
              double v185 = v203->_allocbindEndTime - v203->_allocbindStartTime;
              if (v185 > 0.0)
              {
                double v186 = v185 + v185;
                if (v185 + v185 > 0.2) {
                  double v186 = 0.2;
                }
                if (v186 >= 0.05) {
                  double v183 = v186;
                }
                else {
                  double v183 = 0.05;
                }
                double v187 = OSLogHandleForTransportCategory();
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134218240;
                  *(double *)double v215 = v183;
                  *(_WORD *)&v215[8] = 2048;
                  *(double *)&v215[10] = v185;
                  _os_log_impl(&dword_19D9BE000, v187, OS_LOG_TYPE_DEFAULT, "use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.", buf, 0x16u);
                }

                if (os_log_shim_legacy_logging_enabled())
                {
                  if (_IDSShouldLogTransport())
                  {
                    _IDSLogTransport(@"GL", @"IDS", @"use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.");
                    if (_IDSShouldLog()) {
                      _IDSLogV(0, @"IDSFoundation", @"GL", @"use aggressive rexmit interval %.3f sec, allocbind rtt %.3f sec.");
                    }
                  }
                }
                double v184 = key;
                int64_t v181 = v201;
              }
            }
          }
          else
          {
            double v184 = key;
          }
          v205[0] = MEMORY[0x1E4F143A8];
          v205[1] = 3221225472;
          v205[2] = sub_19DA88610;
          v205[3] = &unk_1E5974620;
          v205[4] = v203;
          int64_t v208 = v181;
          uint64_t v209 = v177;
          id v206 = v202;
          id key = v184;
          uint64_t v207 = key;
          IDSTransportThreadAddBlockAfter(v205, v183);
        }
        double v18 = v155;
        goto LABEL_166;
      }
      double v129 = objc_msgSend_objectForKey_(v202, v85, @"gl-attr-counter", v89);
      uint64_t v134 = objc_msgSend_intValue(v129, v139, v140, v141);
    }

    uint64_t v87 = v201;
    goto LABEL_93;
  }
  uint64_t v12 = OSLogHandleForTransportCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = _IDSLinkStateStrings[self->_state];
    *(_DWORD *)buf = 134218242;
    *(void *)double v215 = a3;
    *(_WORD *)&v215[8] = 2080;
    *(void *)&v215[10] = v13;
    _os_log_impl(&dword_19D9BE000, v12, OS_LOG_TYPE_DEFAULT, "skip session command %04lx, GL state (%s).", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled())
  {
    if (_IDSShouldLogTransport())
    {
      _IDSLogTransport(@"GL", @"IDS", @"skip session command %04lx, GL state (%s).");
      if (_IDSShouldLog()) {
        _IDSLogV(0, @"IDSFoundation", @"GL", @"skip session command %04lx, GL state (%s).");
      }
    }
  }
  _IDSLinkPacketBufferRelease((uint64_t)"/Library/Caches/com.apple.xbs/Sources/IdentityServices/IDSFoundation/IDSGlobalLink.m", (const char *)0x30CC, (uint64_t)a4, v14);
LABEL_167:
}

- (BOOL)_processChannelDataCommandMessage:(id *)a3 remoteRelayLinkID:(unsigned __int16)a4 channelNumber:(unsigned __int16)a5 fromDeviceUniqueID:(id)a6 cbuuid:(id)a7 arrivalTime:(double)a8
{
  unsigned int v10 = a5;
  uint64_t v11 = a4;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v14 = a6;
  id v15 = a7;
  double v16 = channelForStunCandidatePair((uint64_t)&a3->var18, (uint64_t)&a3->var19, v10);
  channelToCandidatePairs = self->_channelToCandidatePairs;
  if (channelToCandidatePairs) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18
    || (unint64_t v19 = (id)CFDictionaryGetValue((CFDictionaryRef)channelToCandidatePairs, v16)) == 0)
  {
    uint64_t v32 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = self->_channelToCandidatePairs;
      *(_DWORD *)buf = 138412546;
      uint64_t v37 = v16;
      __int16 v38 = 2112;
      double v39 = v33;
      _os_log_impl(&dword_19D9BE000, v32, OS_LOG_TYPE_DEFAULT, "failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"failed to find relay-session-id for command message, channel %@, _channelToCandidatePairs = %@");
        }
      }
    }
    char v34 = 0;
  }
  else
  {
    unint64_t v23 = v19;
    double v24 = objc_msgSend_candidatePairToken(v19, v20, v21, v22);
    if (objc_msgSend_isActive(v23, v25, v26, v27))
    {
      double v30 = (double *)IDSQRSendInfoList_ItemAtIndex(self->_sendInfoList, 0);
      if (v30) {
        v30[36] = a8;
      }
    }
    else
    {
      objc_msgSend_setLastIncomingPacketTime_(v23, v28, v29, a8);
    }
    char v34 = objc_msgSend__processIncomingIndicationData_length_candidatePairToken_arrivalTime_remoteRelayLinkID_(self, v31, (uint64_t)a3->var0, a8, LODWORD(a3->var2), v24, v11);
  }
  return v34;
}

- (int64_t)getAllocBindErrorCodeForSessionID:(id)a3
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_msgSend_allValues(self->_tokenToCandidatePairs, v5, v6, v7);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v38, v10, v46, 16);
  if (!v13)
  {

LABEL_20:
    uint64_t v36 = OSLogHandleForTransportCategory();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v43 = "-[IDSGlobalLink getAllocBindErrorCodeForSessionID:]";
      __int16 v44 = 2112;
      id v45 = v4;
      _os_log_impl(&dword_19D9BE000, v36, OS_LOG_TYPE_DEFAULT, "%s: did not find candidate pairs for session %@", buf, 0x16u);
    }

    if (os_log_shim_legacy_logging_enabled())
    {
      if (_IDSShouldLogTransport())
      {
        _IDSLogTransport(@"GL", @"IDS", @"%s: did not find candidate pairs for session %@");
        if (_IDSShouldLog()) {
          _IDSLogV(0, @"IDSFoundation", @"GL", @"%s: did not find candidate pairs for session %@");
        }
      }
    }
    int64_t v35 = 7;
    goto LABEL_27;
  }
  char v15 = 0;
  unsigned __int8 v16 = 0;
  uint64_t v17 = *(void *)v39;
  do
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (*(void *)v39 != v17) {
        objc_enumerationMutation(v8);
      }
      unint64_t v19 = *(void **)(*((void *)&v38 + 1) + 8 * i);
      double v20 = objc_msgSend_sessionID(v19, v11, v12, v14);
      int isEqualToString = objc_msgSend_isEqualToString_(v20, v21, (uint64_t)v4, v22);

      if (isEqualToString)
      {
        double v24 = objc_msgSend_local(v19, v11, v12, v14);
        BOOL v28 = *(unsigned char *)(objc_msgSend_address(v24, v25, v26, v27) + 1) == 30;

        if (v28)
        {
          char v15 = 1;
        }
        else
        {
          uint64_t v29 = objc_msgSend_local(v19, v11, v12, v14);
          BOOL v33 = *(unsigned char *)(objc_msgSend_address(v29, v30, v31, v32) + 1) == 2;

          v16 |= v33;
        }
      }
    }
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v38, v14, v46, 16);
  }
  while (v13);

  uint64_t v34 = 37;
  if ((v16 & 1 & v15) != 0) {
    uint64_t v34 = 7;
  }
  if (v16) {
    int64_t v35 = v34;
  }
  else {
    int64_t v35 = 38;
  }
  if (((v16 | v15) & 1) == 0) {
    goto LABEL_20;
  }
LABEL_27:

  return v35;
}

- (NSString)cbuuid
{
  return (NSString *)objc_getProperty(self, a2, 624, 1);
}

- (void)setCbuuid:(id)a3
{
}

- (NSString)deviceUniqueID
{
  return (NSString *)objc_getProperty(self, a2, 632, 1);
}

- (void)setDeviceUniqueID:(id)a3
{
}

- (unint64_t)state
{
  return self->_state;
}

- (IDSLinkDelegate)delegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
  return (IDSLinkDelegate *)WeakRetained;
}

- (void)setDelegate:(id)a3
{
}

- (IDSLinkDelegate)alternateDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_alternateDelegate);
  return (IDSLinkDelegate *)WeakRetained;
}

- (void)setAlternateDelegate:(id)a3
{
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cellInterfaceName, 0);
  objc_storeStrong((id *)&self->_networkAddressChangeTimer, 0);
  objc_storeStrong((id *)&self->_usedLocalConnectionIDs, 0);
  objc_storeStrong((id *)&self->_groupID, 0);
  objc_storeStrong((id *)&self->_p2pNegotiatorProvider, 0);
  objc_storeStrong((id *)&self->_linkIDToStatsData, 0);
  objc_storeStrong((id *)&self->_qrExperiments, 0);
  objc_storeStrong((id *)&self->_qrChannelExperiments, 0);
  objc_storeStrong((id *)&self->_qrSessionExperiments, 0);
  objc_storeStrong((id *)&self->_putMaterialReqTxIdToCompletionBlock, 0);
  objc_storeStrong((id *)&self->_transportScoreCards, 0);
  objc_storeStrong((id *)&self->_allocationsToTransportScoreCards, 0);
  objc_storeStrong((id *)&self->_metricsCollector, 0);
  objc_storeStrong((id *)&self->_quicMaterialExchangeProvider, 0);
  objc_storeStrong((id *)&self->_serverMaterialExchangeController, 0);
  objc_storeStrong((id *)&self->_idsContextBlob, 0);
  objc_storeStrong((id *)&self->_avcDataBlob, 0);
  objc_storeStrong((id *)&self->_pluginControlDisconnectRecentTransactionIDs, 0);
  objc_storeStrong((id *)&self->_pluginNameToPluginOptionsDict, 0);
  objc_storeStrong((id *)&self->_pluginParticipantIDs, 0);
  objc_storeStrong((id *)&self->_QRServerDataBlob, 0);
  objc_storeStrong((id *)&self->_timeBase, 0);
  objc_storeStrong(&self->_pendingCommandRelayInterfaceInfoBlock, 0);
  objc_storeStrong(&self->_pendingCommandConnectionDataBlock, 0);
  objc_storeStrong((id *)&self->_localRemoteRelayLinkIDToVirtualCandidatePairs, 0);
  objc_storeStrong((id *)&self->_retryCountPerLinkType, 0);
  objc_storeStrong((id *)&self->_cellularPathEvaluator, 0);
  objc_storeStrong((id *)&self->_wifiPathEvaluator, 0);
  objc_storeStrong((id *)&self->_idsSessionID, 0);
  objc_storeStrong((id *)&self->_deviceUniqueID, 0);
  objc_storeStrong((id *)&self->_cbuuid, 0);
  objc_storeStrong((id *)&self->_selfAllocateRequestIDs, 0);
  objc_storeStrong((id *)&self->_allocateTimeReportBlocks, 0);
  objc_storeStrong((id *)&self->_qraBlocks, 0);
  objc_storeStrong((id *)&self->_controlMessageKey, 0);
  objc_storeStrong((id *)&self->_targetedAllocations, 0);
  objc_storeStrong((id *)&self->_delayedCellInterfaces, 0);
  objc_storeStrong((id *)&self->_nonAcceptedQRSessions, 0);
  objc_storeStrong((id *)&self->_acceptedRelaySessionID, 0);
  objc_storeStrong((id *)&self->_skeData, 0);
  objc_storeStrong((id *)&self->_tokenToStunCheckPairs, 0);
  objc_storeStrong((id *)&self->_remoteCandidateList, 0);
  objc_storeStrong((id *)&self->_localCandidateList, 0);
  objc_storeStrong((id *)&self->_unusedLinkIDs, 0);
  objc_storeStrong((id *)&self->_interfaceAddressArray, 0);
  objc_storeStrong((id *)&self->_connectingCandidatePairSessionInfo, 0);
  objc_storeStrong((id *)&self->_activeProbingLinkIDs, 0);
  objc_storeStrong((id *)&self->_connectedLinkIDs, 0);
  objc_storeStrong((id *)&self->_linkIDToHBCounter, 0);
  objc_storeStrong((id *)&self->_linkIDToRequestTimeStampAndRTT, 0);
  objc_storeStrong((id *)&self->_linkIDToReorderedPackets, 0);
  objc_storeStrong((id *)&self->_activityTimer, 0);
  objc_storeStrong((id *)&self->_disconnectTimer, 0);
  objc_storeStrong((id *)&self->_unallocbindRequestToReason, 0);
  objc_storeStrong((id *)&self->_reallocNewCandidatePairToOldCandidatePair, 0);
  objc_storeStrong((id *)&self->_tokenToReallocBlocks, 0);
  objc_storeStrong((id *)&self->_tokenToStunReqID, 0);
  objc_storeStrong((id *)&self->_startTimeToStunReqID, 0);
  objc_storeStrong((id *)&self->_transactionIDToRequestMetadata, 0);
  objc_storeStrong((id *)&self->_channelToCandidatePairs, 0);
  objc_storeStrong((id *)&self->_linkIDToCandidatePairs, 0);
  objc_storeStrong((id *)&self->_tokenToCandidatePairs, 0);
  objc_storeStrong(&self->_disconnectCompletionHandler, 0);
  objc_storeStrong(&self->_connectReadyHandler, 0);
  objc_destroyWeak((id *)&self->_alternateDelegate);
  objc_destroyWeak((id *)&self->_delegate);
  objc_storeStrong((id *)&self->_nwLink, 0);
  objc_storeStrong((id *)&self->_tcpSSLLink, 0);
  objc_storeStrong((id *)&self->_tcpLink, 0);
  objc_storeStrong((id *)&self->_udpLinkv6, 0);
  objc_storeStrong((id *)&self->_udpLink, 0);
}

@end