uint64_t ___ZL25_emojiClientDispatchQueuev_block_invoke()
{
  uint64_t vars8;

  _emojiClientDispatchQueue(void)::__xpc_queue = (uint64_t)dispatch_queue_create("com.apple.TextInput.emoji-client", 0);
  return MEMORY[0x1F41817F8]();
}

void sub_1B8C475B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C47798(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1B8C47858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMFEmojiPreferencesClient;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

CEM::AdaptationDatabaseController *std::unique_ptr<CEM::AdaptationDatabaseController>::reset[abi:ne180100](CEM::AdaptationDatabaseController **a1, CEM::AdaptationDatabaseController *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    CEM::AdaptationDatabaseController::~AdaptationDatabaseController(result);
    JUMPOUT(0x1BA9C9720);
  }
  return result;
}

void sub_1B8C47B20(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B8C47BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _compareEmojiGendersUsingSortCollation(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = -1;
  if (a4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = -1;
    uint64_t v7 = -1;
    do
    {
      int v8 = *(_DWORD *)(a3 + 4 * v5);
      if (v8 == a1) {
        uint64_t v7 = v5;
      }
      if (v8 == a2) {
        uint64_t v6 = v5;
      }
      ++v5;
    }
    while (a4 != v5);
  }
  else
  {
    uint64_t v7 = -1;
    uint64_t v6 = -1;
  }
  if (v7 >= v6) {
    uint64_t v4 = 1;
  }
  if (v7 == v6) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t _compareEmojiGendersUsingDefaultSortCollation(int a1, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = -1;
  uint64_t v4 = -1;
  do
  {
    int v5 = kEMFEmojiGenderInclusiveSortCollation[v2];
    if (v5 == a1) {
      uint64_t v4 = v2;
    }
    if (v5 == a2) {
      uint64_t v3 = v2;
    }
    ++v2;
  }
  while (v2 != 4);
  BOOL v6 = v4 == v3;
  BOOL v7 = v4 < v3;
  uint64_t v8 = -1;
  if (!v7) {
    uint64_t v8 = 1;
  }
  if (v6) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t _compareEmojiTokensUsingDefaultSortCollation(uint64_t a1, void *a2)
{
  id v2 = a2;
  int Gender = CEMEmojiTokenGetGender();
  int v4 = CEMEmojiTokenGetGender();
  uint64_t v5 = 0;
  uint64_t v6 = -1;
  uint64_t v7 = -1;
  do
  {
    int v8 = kEMFEmojiGenderInclusiveSortCollation[v5];
    if (v8 == Gender) {
      uint64_t v7 = v5;
    }
    if (v8 == v4) {
      uint64_t v6 = v5;
    }
    ++v5;
  }
  while (v5 != 4);
  BOOL v9 = v7 == v6;
  BOOL v10 = v7 < v6;
  uint64_t v11 = -1;
  if (!v10) {
    uint64_t v11 = 1;
  }
  if (v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }

  return v12;
}

uint64_t _compareEmojiStringsUsingDefaultSortCollation(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    uint64_t v7 = (const void *)CEMEmojiTokenCreateWithString();
    int v8 = (const void *)CEMEmojiTokenCreateWithString();
    int Gender = CEMEmojiTokenGetGender();
    int v10 = CEMEmojiTokenGetGender();
    uint64_t v11 = 0;
    uint64_t v12 = -1;
    uint64_t v13 = -1;
    do
    {
      int v14 = kEMFEmojiGenderInclusiveSortCollation[v11];
      if (v14 == Gender) {
        uint64_t v13 = v11;
      }
      if (v14 == v10) {
        uint64_t v12 = v11;
      }
      ++v11;
    }
    while (v11 != 4);
    BOOL v15 = v13 == v12;
    BOOL v16 = v13 < v12;
    uint64_t v17 = -1;
    if (!v16) {
      uint64_t v17 = 1;
    }
    if (v15) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17;
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

uint64_t _compareEmojiTokensUsingGenderInclusiveSortCollation(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = [a1 gender];
  int v5 = [v3 gender];
  uint64_t v6 = 0;
  uint64_t v7 = -1;
  uint64_t v8 = -1;
  do
  {
    int v9 = kEMFEmojiGenderInclusiveSortCollation[v6];
    if (v9 == v4) {
      uint64_t v8 = v6;
    }
    if (v9 == v5) {
      uint64_t v7 = v6;
    }
    ++v6;
  }
  while (v6 != 4);
  BOOL v10 = v8 == v7;
  BOOL v11 = v8 < v7;
  uint64_t v12 = -1;
  if (!v11) {
    uint64_t v12 = 1;
  }
  if (v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }

  return v13;
}

CEM::AdaptationDatabaseController *CEM::AdaptationDatabaseController::AdaptationDatabaseController(CEM::AdaptationDatabaseController *this, const __CFString *a2)
{
  *(void *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 8) = 850045863;
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase((std::mutex *)this, (void *)this + 16);
  CEM::getUTF8StringFromCFString(a2, (void *)this + 18);
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary(this);
  return this;
}

void sub_1B8C499E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v3);
  }
  int v5 = *(std::__shared_weak_count **)(v1 + 136);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(std::mutex *this@<X0>, void *a2@<X8>)
{
  {
    std::__fs::filesystem::path::path[abi:ne180100]<char [25],void>(&CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(void)::databasePath, "/tmp/emoji_adaptation.db");
  }
  CEM::AdaptationDatabaseController::createAdaptationDatabase(this, (const std::__fs::filesystem::path *)&CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(void)::databasePath, a2);
}

void sub_1B8C49AB8(_Unwind_Exception *a1)
{
}

uint64_t CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary(CEM::AdaptationDatabaseController *this)
{
  if (*((char *)this + 167) < 0)
  {
    id v2 = (char *)*((void *)this + 18);
    uint64_t v3 = *((void *)this + 19);
  }
  else
  {
    id v2 = (char *)this + 144;
    uint64_t v3 = *((unsigned __int8 *)this + 167);
  }
  memset(v6, 0, sizeof(v6));
  CEM::Statement::Statement(v7, v2, v3, "BEGIN TRANSACTION;\n"
    "L, emoji_id INTEGER NOT NULL, timestamp TEXT NOT NULL, FOREIGN KEY(string_id) REFERENCES string(id), FOREIGN KEY(emo"
    "ji_id) REFERENCES emoji(id));\n"
    "END TRANSACTION;",
    528,
    v6);
  uint64_t v8 = v6;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v7, v5);
  v6[0] = (void **)v5;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v6);
  CEM::Statement::~Statement(v7);
  return 1;
}

void sub_1B8C49B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::AdaptationDatabaseController(uint64_t a1, const void *a2, size_t a3)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 64) = 850045863;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase((std::mutex *)a1, (void *)(a1 + 128));
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 0x17)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v7 = a3 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    *(void *)(a1 + 152) = a3;
    *(void *)(a1 + 160) = v8 | 0x8000000000000000;
    *(void *)(a1 + 144) = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 167) = a3;
    uint64_t v6 = (void *)(a1 + 144);
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, a2, a3);
LABEL_9:
  *((unsigned char *)v6 + a3) = 0;
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  return a1;
}

void sub_1B8C49C9C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v3);
  }
  int v5 = *(std::__shared_weak_count **)(v1 + 136);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::AdaptationDatabaseController(uint64_t a1, const void *a2, size_t a3, std::__fs::filesystem::path *a4)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 64) = 850045863;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  CEM::AdaptationDatabaseController::createAdaptationDatabase((std::mutex *)a1, a4, (void *)(a1 + 128));
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 0x17)
  {
    uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v8 = a3 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *(void *)(a1 + 152) = a3;
    *(void *)(a1 + 160) = v9 | 0x8000000000000000;
    *(void *)(a1 + 144) = v7;
  }
  else
  {
    *(unsigned char *)(a1 + 167) = a3;
    uint64_t v7 = (void *)(a1 + 144);
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v7, a2, a3);
LABEL_9:
  *((unsigned char *)v7 + a3) = 0;
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  return a1;
}

void sub_1B8C49DF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v3);
  }
  int v5 = *(std::__shared_weak_count **)(v1 + 136);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::createAdaptationDatabase(std::mutex *this@<X0>, const std::__fs::filesystem::path *a2@<X1>, void *a3@<X8>)
{
  std::mutex::lock(this);
  CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(v6);
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::find<std::string>(&CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache, (unsigned __int8 *)&pn);
  if (v7)
  {
    std::string::size_type v9 = *((void *)v7 + 5);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
    v11.__r_.__value_.__r.__words[0] = v9;
    v11.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (v8->__shared_owners_ != -1)
      {
        std::shared_ptr<CEM::AdaptationDatabase>::shared_ptr[abi:ne180100]<CEM::AdaptationDatabase,void>(a3, &v11);
        if (v11.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11.__r_.__value_.__l.__size_);
        }
        goto LABEL_22;
      }
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::allocate_shared[abi:ne180100]<CEM::AdaptationDatabase,std::allocator<CEM::AdaptationDatabase>,std::__fs::filesystem::path const&,void>(a2, &v14);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = pn;
  }
  uint64_t v12 = v14;
  uint64_t v13 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>((uint64_t)&CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache, (unsigned __int8 *)&v11, (long long *)&v11);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  BOOL v10 = v15;
  *a3 = v14;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
LABEL_22:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(this);
}

void sub_1B8C49FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::getEmojiId(uint64_t a1, void *__src, size_t __len)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v6 = a1 + 144;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEF047 >= 0) {
    uint64_t v8 = byte_1E9EEF047;
  }
  else {
    uint64_t v8 = unk_1E9EEF038;
  }
  if (byte_1E9EEF047 >= 0) {
    std::string::size_type v9 = &CEM::AdaptationDatabaseController::getEmojiId(std::string_view)const::sql;
  }
  else {
    std::string::size_type v9 = (uint64_t *)CEM::AdaptationDatabaseController::getEmojiId(std::string_view)const::sql;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    BOOL v10 = (long long *)operator new(v11 + 1);
    *((void *)&v16 + 1) = __len;
    unint64_t v17 = v12 | 0x8000000000000000;
    *(void *)&long long v16 = v10;
    goto LABEL_18;
  }
  HIBYTE(v17) = __len;
  BOOL v10 = &v16;
  if (__len) {
LABEL_18:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  long long v24 = v16;
  unint64_t v25 = v17;
  int v26 = 3;
  v19 = 0;
  v20 = 0;
  uint64_t v18 = 0;
  v22 = &v18;
  char v23 = 0;
  uint64_t v18 = (void **)operator new(0x20uLL);
  v19 = v18;
  v20 = v18 + 4;
  v19 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v20, (uint64_t)&v24, (uint64_t)v27, (uint64_t)v18);
  CEM::Statement::Statement(v21, v6, v7, v9, v8, &v18);
  v22 = &v18;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v24);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v21, &v24);
  if (*((void *)&v24 + 1) == (void)v24)
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  if (*(_DWORD *)(*(void *)v24 + 80) != 1)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      CEM::AdaptationDatabaseController::getEmojiId();
    }
    goto LABEL_24;
  }
  uint64_t v13 = *(unsigned int *)(*(void *)v24 + 56);
LABEL_25:
  uint64_t v18 = (void **)&v24;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  CEM::Statement::~Statement(v21);
  return v13;
}

void sub_1B8C4A290(_Unwind_Exception *a1)
{
}

uint64_t CEM::AdaptationDatabaseController::createEmojiId(uint64_t a1, void *__src, size_t __len)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v6 = a1 + 144;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEF067 >= 0) {
    uint64_t v8 = byte_1E9EEF067;
  }
  else {
    uint64_t v8 = unk_1E9EEF058;
  }
  if (byte_1E9EEF067 >= 0) {
    std::string::size_type v9 = &CEM::AdaptationDatabaseController::createEmojiId(std::string_view)::sql;
  }
  else {
    std::string::size_type v9 = (uint64_t *)CEM::AdaptationDatabaseController::createEmojiId(std::string_view)::sql;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    BOOL v10 = (long long *)operator new(v11 + 1);
    *((void *)&v19 + 1) = __len;
    unint64_t v20 = v12 | 0x8000000000000000;
    *(void *)&long long v19 = v10;
    goto LABEL_18;
  }
  HIBYTE(v20) = __len;
  BOOL v10 = &v19;
  if (__len) {
LABEL_18:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  long long v27 = v19;
  unint64_t v28 = v20;
  int v29 = 3;
  v22 = 0;
  char v23 = 0;
  v21 = 0;
  unint64_t v25 = &v21;
  char v26 = 0;
  v21 = (void **)operator new(0x20uLL);
  v22 = v21;
  char v23 = v21 + 4;
  v22 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v23, (uint64_t)&v27, (uint64_t)v30, (uint64_t)v21);
  CEM::Statement::Statement(v24, v6, v7, v9, v8, &v21);
  unint64_t v25 = &v21;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v24, &v27);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v27 + 1) - v27) >> 3);
  if (v13 != 1)
  {
    if (v13)
    {
      unint64_t v17 = "(rows.size() == 1) && \"createEmojiId: Database inconsistency: exactly 1 ID has not been assigned to this em"
            "oji; cannot continue.\"";
      int v18 = 70;
    }
    else
    {
      unint64_t v17 = "(rows.size() > 0) && \"createEmojiId: Database inconsistency: ID insertion failed; cannot continue.\"";
      int v18 = 69;
    }
    __assert_rtn("createEmojiId", "AdaptationDatabaseController.cpp", v18, v17);
  }
  if (*(_DWORD *)(*(void *)v27 + 80) == 1)
  {
    uint64_t v14 = *(unsigned int *)(*(void *)v27 + 56);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      CEM::AdaptationDatabaseController::createEmojiId();
    }
    uint64_t v14 = 0;
  }
  v21 = (void **)&v27;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v21);
  CEM::Statement::~Statement(v24);
  return v14;
}

void sub_1B8C4A5C8(_Unwind_Exception *a1)
{
}

uint64_t CEM::AdaptationDatabaseController::getStringId(uint64_t a1, void *__src, size_t __len)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v6 = a1 + 144;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEEF47 >= 0) {
    uint64_t v8 = byte_1E9EEEF47;
  }
  else {
    uint64_t v8 = unk_1E9EEEF38;
  }
  if (byte_1E9EEEF47 >= 0) {
    std::string::size_type v9 = &CEM::AdaptationDatabaseController::getStringId(std::string_view)const::sql;
  }
  else {
    std::string::size_type v9 = (uint64_t *)CEM::AdaptationDatabaseController::getStringId(std::string_view)const::sql;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    BOOL v10 = (long long *)operator new(v11 + 1);
    *((void *)&v16 + 1) = __len;
    unint64_t v17 = v12 | 0x8000000000000000;
    *(void *)&long long v16 = v10;
    goto LABEL_18;
  }
  HIBYTE(v17) = __len;
  BOOL v10 = &v16;
  if (__len) {
LABEL_18:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  long long v24 = v16;
  unint64_t v25 = v17;
  int v26 = 3;
  long long v19 = 0;
  unint64_t v20 = 0;
  int v18 = 0;
  v22 = &v18;
  char v23 = 0;
  int v18 = (void **)operator new(0x20uLL);
  long long v19 = v18;
  unint64_t v20 = v18 + 4;
  long long v19 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v20, (uint64_t)&v24, (uint64_t)v27, (uint64_t)v18);
  CEM::Statement::Statement(v21, v6, v7, v9, v8, &v18);
  v22 = &v18;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v24);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v21, &v24);
  if (*((void *)&v24 + 1) == (void)v24)
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  if (*(_DWORD *)(*(void *)v24 + 80) != 1)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      CEM::AdaptationDatabaseController::getStringId();
    }
    goto LABEL_24;
  }
  uint64_t v13 = *(unsigned int *)(*(void *)v24 + 56);
LABEL_25:
  int v18 = (void **)&v24;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  CEM::Statement::~Statement(v21);
  return v13;
}

void sub_1B8C4A8B8(_Unwind_Exception *a1)
{
}

uint64_t CEM::AdaptationDatabaseController::createStringId(uint64_t a1, void *__src, size_t __len)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v6 = a1 + 144;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEF087 >= 0) {
    uint64_t v8 = byte_1E9EEF087;
  }
  else {
    uint64_t v8 = unk_1E9EEF078;
  }
  if (byte_1E9EEF087 >= 0) {
    std::string::size_type v9 = &CEM::AdaptationDatabaseController::createStringId(std::string_view)::sql;
  }
  else {
    std::string::size_type v9 = (uint64_t *)CEM::AdaptationDatabaseController::createStringId(std::string_view)::sql;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    BOOL v10 = (long long *)operator new(v11 + 1);
    *((void *)&v19 + 1) = __len;
    unint64_t v20 = v12 | 0x8000000000000000;
    *(void *)&long long v19 = v10;
    goto LABEL_18;
  }
  HIBYTE(v20) = __len;
  BOOL v10 = &v19;
  if (__len) {
LABEL_18:
  }
    memmove(v10, __src, __len);
  *((unsigned char *)v10 + __len) = 0;
  long long v27 = v19;
  unint64_t v28 = v20;
  int v29 = 3;
  v22 = 0;
  char v23 = 0;
  v21 = 0;
  unint64_t v25 = &v21;
  char v26 = 0;
  v21 = (void **)operator new(0x20uLL);
  v22 = v21;
  char v23 = v21 + 4;
  v22 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v23, (uint64_t)&v27, (uint64_t)v30, (uint64_t)v21);
  CEM::Statement::Statement(v24, v6, v7, v9, v8, &v21);
  unint64_t v25 = &v21;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v24, &v27);
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v27 + 1) - v27) >> 3);
  if (v13 != 1)
  {
    if (v13)
    {
      unint64_t v17 = "(rows.size() == 1) && \"createStringId: Database inconsistency: exactly 1 ID has been not assigned to this s"
            "tring; cannot continue.\"";
      int v18 = 108;
    }
    else
    {
      unint64_t v17 = "(rows.size() > 0) && \"createStringId: Database inconsistency: ID insertion failed; cannot continue.\"";
      int v18 = 107;
    }
    __assert_rtn("createStringId", "AdaptationDatabaseController.cpp", v18, v17);
  }
  if (*(_DWORD *)(*(void *)v27 + 80) == 1)
  {
    uint64_t v14 = *(unsigned int *)(*(void *)v27 + 56);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      CEM::AdaptationDatabaseController::createStringId();
    }
    uint64_t v14 = 0;
  }
  v21 = (void **)&v27;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v21);
  CEM::Statement::~Statement(v24);
  return v14;
}

void sub_1B8C4ABF0(_Unwind_Exception *a1)
{
}

void CEM::AdaptationDatabaseController::getRecentEmojisForString(CEM::AdaptationDatabaseController *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X8>)
{
  int StringId = CEM::AdaptationDatabaseController::getStringId((uint64_t)a1, a2, a3);
  if (StringId)
  {
    CEM::AdaptationDatabaseController::getRecentEmojisForStringId(a1, StringId, 3, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void CEM::AdaptationDatabaseController::getRecentEmojisForStringId(CEM::AdaptationDatabaseController *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  {
  }
  if (*((char *)this + 167) < 0)
  {
    uint64_t v8 = (char *)*((void *)this + 18);
    uint64_t v9 = *((void *)this + 19);
  }
  else
  {
    uint64_t v8 = (char *)this + 144;
    uint64_t v9 = *((unsigned __int8 *)this + 167);
  }
  if (byte_1E9EEF0A7 >= 0) {
    uint64_t v10 = byte_1E9EEF0A7;
  }
  else {
    uint64_t v10 = unk_1E9EEF098;
  }
  if (byte_1E9EEF0A7 >= 0) {
    size_t v11 = &CEM::AdaptationDatabaseController::getRecentEmojisForStringId(unsigned int,unsigned long)const::sql;
  }
  else {
    size_t v11 = (uint64_t *)CEM::AdaptationDatabaseController::getRecentEmojisForStringId(unsigned int,unsigned long)const::sql;
  }
  LODWORD(v26[0]) = a2;
  int v27 = 1;
  int v28 = a3;
  int v29 = 1;
  uint64_t v21 = 0;
  v22 = 0;
  __p = 0;
  p_p = &__p;
  char v25 = 0;
  __p = operator new(0x40uLL);
  uint64_t v21 = (uint64_t)__p;
  v22 = (char *)__p + 64;
  uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v22, (uint64_t)v26, (uint64_t)&v30, (uint64_t)__p);
  CEM::Statement::Statement(v23, v8, v9, v11, v10, &__p);
  p_p = &__p;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (uint64_t i = 4; i != -4; i -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26[i]);
  CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v23, v26);
  uint64_t v13 = v26[0];
  uint64_t v14 = v26[1];
  a4[1] = 0;
  a4[2] = 0;
  for (*a4 = 0; v13 != v14; uint64_t v13 = (uint64_t)(v16 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "emoji");
    BOOL v15 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(v13, &__p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p);
    }
    long long v16 = (void **)(v13 + 8);
    if (v16 != v15 && *((_DWORD *)v15 + 20) == 3)
    {
      unint64_t v17 = (long long *)(v15 + 7);
      unint64_t v18 = a4[1];
      if (v18 >= a4[2])
      {
        uint64_t v19 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v17);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v17);
        uint64_t v19 = v18 + 24;
      }
      a4[1] = v19;
    }
  }
  __p = v26;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  CEM::Statement::~Statement(v23);
}

void sub_1B8C4AF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(uint64_t a1, std::vector<std::string>::size_type __n, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  {
  }
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::reserve(&v16, __n);
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v6 = a1 + 144;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEF0C7 >= 0) {
    uint64_t v8 = byte_1E9EEF0C7;
  }
  else {
    uint64_t v8 = unk_1E9EEF0B8;
  }
  if (byte_1E9EEF0C7 >= 0) {
    uint64_t v9 = &CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)const::sql;
  }
  else {
    uint64_t v9 = (uint64_t *)CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)const::sql;
  }
  v25[0] = __n;
  v25[6] = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  size_t v12 = 0;
  uint64_t v21 = &v12;
  char v22 = 0;
  size_t v12 = (char *)operator new(0x20uLL);
  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = v12 + 32;
  uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v14, (uint64_t)v25, (uint64_t)&v26, (uint64_t)v12);
  CEM::Statement::Statement(v15, v6, v7, v9, v8, &v12);
  uint64_t v21 = &v12;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v25);
  uint64_t v10 = *(void *)(a1 + 128);
  long long v24 = 0;
  size_t v11 = operator new(0x28uLL);
  *size_t v11 = &unk_1F126CF78;
  v11[1] = __p;
  v11[2] = v19;
  v11[3] = &v16;
  v11[4] = a3;
  long long v24 = v11;
  CEM::AdaptationDatabase::executeStatement(v10, (CEM::Statement *)v15, (uint64_t)v23);
  std::__function::__value_func<void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__value_func[abi:ne180100](v23);
  CEM::Statement::~Statement(v15);
  v15[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
}

void sub_1B8C4B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1B8C4B350(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void CEM::AdaptationDatabaseController::enumerateStringAndStringId(uint64_t a1, uint64_t a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v5 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v4 = a1 + 144;
    uint64_t v5 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1E9EEF0E7 >= 0) {
    uint64_t v6 = byte_1E9EEF0E7;
  }
  else {
    uint64_t v6 = unk_1E9EEF0D8;
  }
  if (byte_1E9EEF0E7 >= 0) {
    uint64_t v7 = &CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)const::sql;
  }
  else {
    uint64_t v7 = (uint64_t *)CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)const::sql;
  }
  memset(v9, 0, sizeof(v9));
  CEM::Statement::Statement(v10, v4, v5, v7, v6, v9);
  size_t v11 = (void **)v9;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v8 = *(void *)(a1 + 128);
  v12[0] = &unk_1F126CF20;
  v12[1] = a2;
  v12[3] = v12;
  CEM::AdaptationDatabase::executeStatement(v8, (CEM::Statement *)v10, (uint64_t)v12);
  std::__function::__value_func<void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__value_func[abi:ne180100](v12);
  CEM::Statement::~Statement(v10);
}

void sub_1B8C4B4A8(_Unwind_Exception *a1)
{
}

uint64_t CEM::AdaptationDatabaseController::recordEmojiEngagement(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (CEM::AdaptationDatabase::isConnected(*(CEM::AdaptationDatabase **)(a1 + 128)))
  {
    {
    }
    uint64_t StringId = CEM::AdaptationDatabaseController::getStringId(a1, a2, a3);
    if (!StringId) {
      uint64_t StringId = CEM::AdaptationDatabaseController::createStringId(a1, a2, a3);
    }
    int EmojiId = CEM::AdaptationDatabaseController::getEmojiId(a1, a4, a5);
    if (!EmojiId) {
      int EmojiId = CEM::AdaptationDatabaseController::createEmojiId(a1, a4, a5);
    }
    if (*(char *)(a1 + 167) < 0)
    {
      uint64_t v13 = *(void *)(a1 + 144);
      uint64_t v14 = *(void *)(a1 + 152);
    }
    else
    {
      uint64_t v13 = a1 + 144;
      uint64_t v14 = *(unsigned __int8 *)(a1 + 167);
    }
    if (byte_1E9EEF107 >= 0) {
      uint64_t v15 = byte_1E9EEF107;
    }
    else {
      uint64_t v15 = unk_1E9EEF0F8;
    }
    if (byte_1E9EEF107 >= 0) {
      std::vector<std::string> v16 = &CEM::AdaptationDatabaseController::recordEmojiEngagement(std::string_view,std::string_view)::sql;
    }
    else {
      std::vector<std::string> v16 = (uint64_t *)CEM::AdaptationDatabaseController::recordEmojiEngagement(std::string_view,std::string_view)::sql;
    }
    LODWORD(v26[0]) = StringId;
    int v27 = 1;
    int v28 = EmojiId;
    int v29 = 1;
    uint64_t v21 = 0;
    char v22 = 0;
    uint64_t v20 = 0;
    long long v24 = &v20;
    char v25 = 0;
    uint64_t v20 = (char *)operator new(0x40uLL);
    uint64_t v21 = (uint64_t)v20;
    char v22 = v20 + 64;
    uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v22, (uint64_t)v26, (uint64_t)&v30, (uint64_t)v20);
    CEM::Statement::Statement(v23, v13, v14, v16, v15, &v20);
    long long v24 = &v20;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    for (uint64_t i = 4; i != -4; i -= 4)
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v26[i]);
    CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v23, v19);
    v26[0] = (void **)v19;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v26);
    CEM::Statement::~Statement(v23);
  }
  else
  {
    uint64_t StringId = 0;
  }
  std::mutex::unlock(v10);
  return StringId;
}

void sub_1B8C4B734(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

long long *CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(CEM::AdaptationDatabaseController *this)
{
  {
    CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache = 0u;
    unk_1E9EEEF18 = 0u;
    dword_1E9EEEF28 = 1065353216;
  }
  return &CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache;
}

uint64_t std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::~pair(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t CEM::AdaptationDatabaseController::setLocale(uint64_t a1, const std::string::value_type *__s1, size_t __n)
{
  uint64_t v6 = (std::string *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
  {
    uint64_t v8 = *(const void **)(a1 + 144);
    uint64_t v7 = *(void *)(a1 + 152);
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 167);
    uint64_t v8 = (const void *)(a1 + 144);
  }
  if (__n != v7 || (uint64_t result = memcmp(__s1, v8, __n), result))
  {
    std::string::__assign_external(v6, __s1, __n);
    return CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  }
  return result;
}

void CEM::AdaptationDatabaseController::reset(CEM::AdaptationDatabaseController *this)
{
  if (CEM::AdaptationDatabase::isConnected(*((CEM::AdaptationDatabase **)this + 16)))
  {
    if (*((char *)this + 167) < 0)
    {
      id v2 = (char *)*((void *)this + 18);
      uint64_t v3 = *((void *)this + 19);
    }
    else
    {
      id v2 = (char *)this + 144;
      uint64_t v3 = *((unsigned __int8 *)this + 167);
    }
    memset(v5, 0, sizeof(v5));
    CEM::Statement::Statement(v6, v2, v3, "BEGIN TRANSACTION;\n"
      "END TRANSACTION;",
      111,
      v5);
    uint64_t v7 = v5;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v6, v4);
    v5[0] = (void **)v4;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v5);
    CEM::Statement::~Statement(v6);
  }
}

void sub_1B8C4B998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6196CC0, MEMORY[0x1E4FBA1C8]);
}

void sub_1B8C4BA34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B8C4BBC4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1B8C4BC1C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F126F740[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F126F768[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_jdSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_jdSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(int a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    std::string::size_type v6 = result;
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B8C4BE54(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F126F740[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::string::size_type v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void CEM::Statement::~Statement(void **this)
{
  uint64_t v2 = this + 7;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B8C4C188(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B8C4C2A0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void **std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      unint64_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
}

__n128 std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x28uLL);
  *(void *)size_t v2 = &unk_1F126CF78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F126CF78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "string");
  int v4 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = (void **)(a2 + 8);
  if ((void **)(a2 + 8) != v4 && *((_DWORD *)v4 + 20) == 3) {
    std::string::operator=(*(std::string **)(a1 + 8), (const std::string *)(v4 + 7));
  }
  size_t v6 = *(unsigned __int8 **)(a1 + 16);
  unsigned int v7 = v6[23];
  if (((char)v6[23] & 0x80000000) == 0)
  {
    if (v6[23]) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (!*((void *)v6 + 1))
  {
LABEL_8:
    std::string::operator=(*(std::string **)(a1 + 16), *(const std::string **)(a1 + 8));
    size_t v6 = *(unsigned __int8 **)(a1 + 16);
    unsigned int v7 = v6[23];
  }
LABEL_9:
  int v8 = *(unsigned __int8 ***)(a1 + 8);
  size_t v9 = *((void *)v6 + 1);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v7;
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  size_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    size_t v11 = v8[1];
  }
  if (v10 != v11)
  {
LABEL_24:
    uint64_t v16 = *(void *)(a1 + 32);
    if ((v7 & 0x80) != 0) {
      size_t v6 = *(unsigned __int8 **)v6;
    }
    else {
      size_t v9 = v7;
    }
    goto LABEL_31;
  }
  if (v12 >= 0) {
    char v13 = *(unsigned __int8 **)(a1 + 8);
  }
  else {
    char v13 = *v8;
  }
  if ((v7 & 0x80) == 0)
  {
    if (!v7) {
      goto LABEL_32;
    }
    long long v14 = v6;
    uint64_t v15 = v7;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v15) {
        goto LABEL_32;
      }
    }
    goto LABEL_24;
  }
  size_t v6 = *(unsigned __int8 **)v6;
  if (!memcmp(v6, v13, v9)) {
    goto LABEL_32;
  }
  uint64_t v16 = *(void *)(a1 + 32);
LABEL_31:
  std::function<void ()(std::string_view,std::vector<std::string> const&)>::operator()(v16, (uint64_t)v6, v9, *(void *)(a1 + 24));
  std::vector<std::string>::__clear[abi:ne180100](*(uint64_t **)(a1 + 24));
  std::string::operator=(*(std::string **)(a1 + 16), *(const std::string **)(a1 + 8));
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(__p, "emoji");
  unint64_t v17 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v5 != v17 && *((_DWORD *)v17 + 20) == 3)
  {
    uint64_t v18 = (long long *)(v17 + 7);
    uint64_t v19 = *(uint64_t **)(a1 + 24);
    unint64_t v20 = v19[1];
    if (v20 >= v19[2])
    {
      uint64_t v21 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(v19, v18);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const>((uint64_t)v19, v18);
      uint64_t v21 = v20 + 24;
    }
    v19[1] = v21;
  }
}

void sub_1B8C4CAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

uint64_t std::function<void ()(std::string_view,std::vector<std::string> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 48))(v4, v6, a4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1BA9C9720);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1B8C4CC58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B8C4CD70(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
}

void *std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F126CF20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F126CF20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  unint64_t v4 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "string");
  unint64_t v5 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)(a2 + 8) == v4)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
    }
  }
  else if ((void **)(a2 + 8) == v5)
  {
    unint64_t v9 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
    }
  }
  else if (*((_DWORD *)v4 + 20) == 1)
  {
    if (*((_DWORD *)v5 + 20) == 3)
    {
      if (*((char *)v5 + 79) < 0)
      {
        uint64_t v6 = (uint64_t)v5[7];
        uint64_t v7 = (uint64_t)v5[8];
      }
      else
      {
        uint64_t v6 = (uint64_t)(v5 + 7);
        uint64_t v7 = *((unsigned __int8 *)v5 + 79);
      }
      std::function<void ()(std::string_view,unsigned int)>::operator()(*(void *)(a1 + 8), v6, v7, *((_DWORD *)v4 + 14));
    }
    else
    {
      size_t v11 = cem_logging_get_adaptation_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
      }
    }
  }
  else
  {
    unint64_t v10 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
    }
  }
}

void sub_1B8C4D048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

uint64_t std::function<void ()(std::string_view,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v7[0] = a2;
  v7[1] = a3;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, int *))(*(void *)v4 + 48))(v4, v7, &v6);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [25],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B8C4D150(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    long long v14 = this;
    if ((v6 & 0x80) != 0) {
      long long v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1B8C4D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      char v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void *std::shared_ptr<CEM::AdaptationDatabase>::shared_ptr[abi:ne180100]<CEM::AdaptationDatabase,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

void *std::allocate_shared[abi:ne180100]<CEM::AdaptationDatabase,std::allocator<CEM::AdaptationDatabase>,std::__fs::filesystem::path const&,void>@<X0>(const std::__fs::filesystem::path *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::allocator<CEM::AdaptationDatabase>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B8C4DABC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::allocator<CEM::AdaptationDatabase>,0>(void *a1, const std::__fs::filesystem::path *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F126CFF8;
  CEM::AdaptationDatabase::AdaptationDatabase((CEM::AdaptationDatabase *)(a1 + 3), a2);
  return a1;
}

void sub_1B8C4DB18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F126CFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F126CFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9C9720);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__on_zero_shared(uint64_t a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__construct_node_hash<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B8C4DE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__construct_node_hash<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B8C4DE90(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  return this;
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint8x8_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint8x8_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint8x8_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint8x8_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id cem_logging_get_default_log()
{
  if (cem_logging_get_default_log_onceToken != -1) {
    dispatch_once(&cem_logging_get_default_log_onceToken, &__block_literal_global);
  }
  v0 = (void *)cem_logging_get_default_log_log;
  return v0;
}

uint64_t __cem_logging_get_default_log_block_invoke()
{
  cem_logging_get_default_log_log = (uint64_t)os_log_create("com.apple.CoreEmoji", "StandardLogger");
  return MEMORY[0x1F41817F8]();
}

id cem_logging_get_adaptation_log()
{
  if (cem_logging_get_adaptation_log_onceToken != -1) {
    dispatch_once(&cem_logging_get_adaptation_log_onceToken, &__block_literal_global_4);
  }
  v0 = (void *)cem_logging_get_adaptation_log_log;
  return v0;
}

uint64_t __cem_logging_get_adaptation_log_block_invoke()
{
  cem_logging_get_adaptation_log_log = (uint64_t)os_log_create("com.apple.CoreEmoji", "AdaptationLogger");
  return MEMORY[0x1F41817F8]();
}

void log_emoji_string_lookup_error()
{
  v0 = emf_logging_get_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    log_emoji_string_lookup_error_cold_1();
  }
}

void log_emoji_token_creation_error()
{
  v0 = emf_logging_get_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    log_emoji_token_creation_error_cold_1();
  }
}

id createEmojiTokenMatchesWithMatchingIDsAndEmojiLocaleData(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v8), "unsignedIntegerValue", (void)v11);
        uint64_t v6 = CEMEmojiTokenCreateWithIndex();

        [v2 addObject:v6];
        ++v8;
        uint64_t v9 = v6;
      }
      while (v5 != v8);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  return v2;
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

BOOL ___sortAnchorCollection_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 length];
  unint64_t v6 = [v4 length];

  return v5 < v6;
}

void sub_1B8C5061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8C53E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C5413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  nlp::CFScopedPtr<void const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__SecTask *>::reset((const void **)(v18 - 88), 0);

  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<void const*>::reset(const void **a1, const void *a2)
{
  id v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__SecTask *>::reset(const void **a1, const void *a2)
{
  id v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

id _createStrippedLocaleIdentifierForLocale(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v3 = [v1 languageCode];
  [v2 setObject:v3 forKey:*MEMORY[0x1E4F1C438]];

  id v4 = [v1 countryCode];

  if (v4)
  {
    unint64_t v5 = [v1 countryCode];
    [v2 setObject:v5 forKey:*MEMORY[0x1E4F1C400]];
  }
  unint64_t v6 = [v1 scriptCode];

  if (v6)
  {
    uint64_t v7 = [v1 scriptCode];
    [v2 setObject:v7 forKey:*MEMORY[0x1E4F1C470]];
  }
  uint64_t v8 = [MEMORY[0x1E4F1CA20] localeIdentifierFromComponents:v2];

  return v8;
}

id _createStrippedFallbackLocaleIdentifierForLocale(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F1CA20];
  id v2 = [a1 localeIdentifier];
  id v3 = [v1 baseLanguageFromLanguage:v2];

  return v3;
}

id _overridePlistForLocaleIdentifier(void *a1, uint64_t a2, int a3)
{
  if (a3) {
    [a1 URLForResource:a2 withExtension:@"plist" subdirectory:@"SearchEngineOverrideLists"];
  }
  else {
  id v3 = [a1 URLForResource:@"SearchEngineOverrideList" withExtension:@"plist" subdirectory:0 localization:a2];
  }
  return v3;
}

id _overridePlistForLocaleIdentifierCheckingBothLocations(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (_os_feature_enabled_impl()) {
    [v4 URLForResource:@"SearchEngineOverrideList" withExtension:@"plist" subdirectory:0 localization:v3];
  }
  else {
  unint64_t v5 = [v4 URLForResource:v3 withExtension:@"plist" subdirectory:@"SearchEngineOverrideLists"];
  }

  return v5;
}

id EMFGetDeviceRegionCode()
{
  if (EMFGetDeviceRegionCode_onceToken != -1) {
    dispatch_once(&EMFGetDeviceRegionCode_onceToken, &__block_literal_global_5);
  }
  v0 = (void *)EMFGetDeviceRegionCode_regionCode;
  return v0;
}

void __EMFGetDeviceRegionCode_block_invoke()
{
  uint64_t v0 = MGCopyAnswer();
  id v1 = (void *)EMFGetDeviceRegionCode_regionCode;
  EMFGetDeviceRegionCode_regionCode = v0;

  if (!EMFGetDeviceRegionCode_regionCode)
  {
    EMFGetDeviceRegionCode_regionCode = (uint64_t)&stru_1F126FA78;
  }
}

uint64_t EMFIsDeviceInGreaterChina()
{
  uint64_t v0 = EMFGetDeviceRegionCode();
  id v1 = [MEMORY[0x1E4F1CA20] currentLocale];
  id v2 = [v1 objectForKey:*MEMORY[0x1E4F1C400]];

  if (([v0 isEqualToString:@"CH"] & 1) != 0
    || ([v2 isEqualToString:@"CN"] & 1) != 0
    || ([v2 isEqualToString:@"MO"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = [v2 isEqualToString:@"HK"];
  }

  return v3;
}

objc_class *_strategyClassForIndex(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [v1 termIndex];
  uint64_t v3 = [v2 allKeys];
  id v4 = [v3 objectAtIndexedSubscript:0];

  unint64_t v5 = [v2 objectForKeyedSubscript:v4];
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass())) {
    unint64_t v6 = (objc_class *)objc_opt_class();
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = emf_logging_get_default_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = NSStringFromClass(v6);
    uint64_t v9 = [v1 termIndexURL];
    uint64_t v10 = [v1 documentIndexURL];
    int v13 = 138412802;
    long long v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl(&dword_1B8C45000, v7, OS_LOG_TYPE_INFO, "Using index strategy class: '%@' for index: ('%@', '%@')", (uint8_t *)&v13, 0x20u);
  }
  long long v11 = v6;

  return v11;
}

void sub_1B8C58718(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1B8C592C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1B8C5A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8C5B6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t CEM::Statement::Statement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  CEM::Statement::makeLocalizedStatementBody((CEM::Statement *)a1, (std::string *)(a1 + 32));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((void *)(a1 + 56), *a6, a6[1], (a6[1] - *a6) >> 5);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 101;
  return a1;
}

void sub_1B8C5C398(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void CEM::Statement::makeLocalizedStatementBody(CEM::Statement *this@<X0>, std::string *a2@<X8>)
{
  memset(&v19, 0, sizeof(v19));
  if (*((void *)this + 1))
  {
    std::string::append(&v19, "-", 1uLL);
    std::string::append(&v19, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  size_t v4 = *((void *)this + 3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = (const void *)*((void *)this + 2);
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a2->__r_.__value_.__l.__size_ = v4;
    a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  }
  else
  {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v4;
    unint64_t v6 = a2;
    if (!v4) {
      goto LABEL_11;
    }
  }
  memmove(v6, v5, v4);
LABEL_11:
  std::string::size_type v9 = 0;
  *((unsigned char *)v6 + v4) = 0;
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v11 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v11 = a2->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
LABEL_16:
  long long v12 = (void *)(v11 + v9);
  int v13 = (char *)(v11 + size);
  while (v13 - (unsigned char *)v12 >= 2)
  {
    long long v14 = (char *)memchr(v12, 123, v13 - (unsigned char *)v12 - 1);
    if (!v14) {
      break;
    }
    if (*(_WORD *)v14 == 32123)
    {
      if (v14 != v13)
      {
        std::string::size_type v15 = (std::string::size_type)&v14[-v11];
        if (v15 != -1)
        {
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v16 = &v19;
          }
          else {
            uint64_t v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
          }
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v17 = v19.__r_.__value_.__l.__size_;
          }
          std::string::replace(a2, v15, 2uLL, (const std::string::value_type *)v16, v17);
          std::string::size_type v18 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v18 = v19.__r_.__value_.__l.__size_;
          }
          std::string::size_type v9 = v18 + v15;
          std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0) {
            std::string::size_type v11 = (std::string::size_type)a2;
          }
          else {
            std::string::size_type v11 = a2->__r_.__value_.__r.__words[0];
          }
          if ((size & 0x80u) != 0) {
            std::string::size_type size = a2->__r_.__value_.__l.__size_;
          }
          if (size >= v9) {
            goto LABEL_16;
          }
        }
      }
      break;
    }
    long long v12 = v14 + 1;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1B8C5C57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CEM::Statement::prepare(CEM::Statement *this)
{
  uint64_t v3 = (sqlite3 **)((char *)this + 96);
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    size_t v4 = (const char *)*((void *)this + 11);
    if (!v4)
    {
      size_t v4 = (char *)this + 32;
      if (*((char *)this + 55) < 0) {
        size_t v4 = *(const char **)v4;
      }
    }
    if (sqlite3_prepare_v2((sqlite3 *)result, v4, -1, (sqlite3_stmt **)this + 10, (const char **)this + 11))
    {
      adaptation_log = cem_logging_get_adaptation_log();
      if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
        CEM::Statement::prepare((uint64_t)this, v3, adaptation_log);
      }
      sqlite3_finalize(*((sqlite3_stmt **)this + 10));
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CEM::Statement::bindParameters(CEM::Statement *this)
{
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = 1;
  if (*((void *)this + 8) != v1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      int v10 = 1;
      v9[0] = this;
      v9[1] = &v10;
      v9[2] = v5;
      uint64_t v6 = *(unsigned int *)(v1 + v4 + 24);
      if (v6 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string::size_type v11 = v9;
      ((void (*)(void **))off_1F126F7E0[v6])(&v11);
      if (v10) {
        break;
      }
      ++v5;
      uint64_t v1 = *((void *)this + 7);
      v4 += 32;
      if (v5 >= (*((void *)this + 8) - v1) >> 5) {
        return 1;
      }
    }
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR)) {
      CEM::Statement::bindParameters(v5, (uint64_t)this, adaptation_log);
    }
    return 0;
  }
  return v2;
}

void CEM::Statement::getValueForColumnAtIndex(sqlite3_stmt **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(sqlite3_column_type(this[10], a2))
  {
    case 1:
      *(_DWORD *)a3 = sqlite3_column_int(this[10], a2);
      int v6 = 1;
      goto LABEL_6;
    case 2:
      *(double *)a3 = sqlite3_column_double(this[10], a2);
      int v6 = 2;
      goto LABEL_6;
    case 3:
      uint64_t v7 = (char *)sqlite3_column_text(this[10], a2);
      std::string::basic_string[abi:ne180100]<0>(&v10, v7);
      *(_OWORD *)a3 = v10;
      *(void *)(a3 + 16) = v11;
      int v6 = 3;
      goto LABEL_6;
    case 4:
      size_t v8 = sqlite3_column_bytes(this[10], a2);
      std::string::size_type v9 = sqlite3_column_blob(this[10], a2);
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v10, v9, (uint64_t)v9 + v8, v8);
      *(_OWORD *)a3 = v10;
      *(void *)(a3 + 16) = v11;
      int v6 = 4;
LABEL_6:
      *(_DWORD *)(a3 + 24) = v6;
      break;
    case 5:
      *(_DWORD *)(a3 + 24) = 0;
      break;
    default:
      CEM::Statement::getValueForColumnAtIndex();
  }
}

BOOL CEM::Statement::step(sqlite3_stmt **this)
{
  int v2 = sqlite3_step(this[10]);
  *((_DWORD *)this + 26) = v2;
  return v2 != 101;
}

BOOL CEM::Statement::isValid(CEM::Statement *this)
{
  return *((void *)this + 10) != 0;
}

BOOL CEM::Statement::hasParameters(CEM::Statement *this)
{
  return *((void *)this + 8) != *((void *)this + 7);
}

BOOL CEM::Statement::hasRows(CEM::Statement *this)
{
  return *((_DWORD *)this + 26) == 100;
}

uint64_t CEM::Statement::columnSize(sqlite3_stmt **this)
{
  return sqlite3_column_count(this[10]);
}

const char *CEM::Statement::getColumnNameAtIndex(sqlite3_stmt **this, int a2)
{
  int v2 = sqlite3_column_name(this[10], a2);
  strlen(v2);
  return v2;
}

BOOL CEM::Statement::finalize(sqlite3_stmt **this)
{
  int v2 = sqlite3_finalize(this[10]);
  *((_DWORD *)this + 26) = v2;
  return v2 == 0;
}

char *CEM::Statement::getExpandedSql(sqlite3_stmt **this)
{
  return sqlite3_expanded_sql(this[10]);
}

void *std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B8C5C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B8C5CAE0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = sqlite3_bind_null(*(sqlite3_stmt **)(*(void *)*a1 + 80), *(_DWORD *)(*a1 + 16));
  **(_DWORD **)(v1 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)*a1 + 80), *(_DWORD *)(*a1 + 16) + 1, *a2);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, double *a2)
{
  uint64_t v2 = *a1;
  uint64_t result = sqlite3_bind_double(*(sqlite3_stmt **)(*(void *)*a1 + 80), *(_DWORD *)(*a1 + 16), *a2);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(sqlite3_stmt **)(*(void *)*a1 + 80);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const char *)a2;
  }
  else {
    unint64_t v5 = *(const char **)a2;
  }
  if (v4 >= 0) {
    int v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v6 = *(_DWORD *)(a2 + 8);
  }
  uint64_t result = sqlite3_bind_text(v3, *(_DWORD *)(v2 + 16) + 1, v5, v6, 0);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a1;
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(*(void *)*a1 + 80), *(_DWORD *)(*a1 + 16), (const void *)**a2, *((_DWORD *)a2 + 2) - *a2, 0);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    int v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B8C5CD20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL CEM::CFStringsAreEqual(const __CFString *this, const __CFString *a2, const __CFString *a3)
{
  return CFStringCompare(this, a2, (CFStringCompareFlags)a3) == kCFCompareEqualTo;
}

void CEM::enumerateSpaceSeparatedTokensWithFullStops(CFStringRef str, CFRange range, uint64_t a3)
{
  if (!str) {
    return;
  }
  CFStringRef v5 = CFStringCreateWithSubstring(0, str, range);
  CFTypeRef cf = v5;
  if (!v5) {
    return;
  }
  CEM::getUTF8StringFromCFString(v5, &v49);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v49;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  CFStringRef v40 = str;
  uint64_t v41 = a3;
  std::string::size_type v6 = 0;
  for (uint64_t i = 0; ; ++i)
  {
    int v8 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      break;
    }
    if (v6 >= HIBYTE(v45.__r_.__value_.__r.__words[2]) || i == -1) {
      goto LABEL_50;
    }
    uint64_t v11 = &v45;
    std::string::size_type v12 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
LABEL_18:
    if ((v44 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v44 & 0x80u) == 0) {
      int64_t v15 = v44;
    }
    else {
      int64_t v15 = v43;
    }
    std::string::size_type v16 = v6;
    if (v15)
    {
      std::string::size_type v17 = (char *)v11 + v6;
      std::string::size_type v18 = (char *)v11 + v12;
      int64_t v19 = v12 - v6;
      if (v19 >= v15)
      {
        int v21 = *p_p;
        do
        {
          int64_t v22 = v19 - v15;
          if (v22 == -1) {
            break;
          }
          unint64_t v23 = (char *)memchr(v17, v21, v22 + 1);
          if (!v23) {
            break;
          }
          unint64_t v24 = v23;
          if (!memcmp(v23, p_p, v15))
          {
            if (v24 == v18) {
              break;
            }
            std::string::size_type v16 = v24 - (char *)v11;
            if (v24 - (char *)v11 == -1) {
              break;
            }
            goto LABEL_42;
          }
          std::string::size_type v17 = v24 + 1;
          int64_t v19 = v18 - (v24 + 1);
        }
        while (v19 >= v15);
      }
      if (v8 < 0)
      {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
        unint64_t v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      else
      {
        unint64_t v20 = &v45;
      }
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v51, (char *)v20 + (int)v6, (char *)v20 + size, size - (int)v6);
      v53[0] = (std::vector<std::string> *)&v46;
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v53, &v51);
      if (v52 < 0) {
        operator delete((void *)v51);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v6 = v45.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v6 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
LABEL_42:
      uint64_t v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (v8 >= 0) {
        uint64_t v25 = &v45;
      }
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v51, (char *)v25 + (int)v6, (char *)v25 + (int)v16, (int)v16 - (uint64_t)(int)v6);
      v53[0] = (std::vector<std::string> *)&v46;
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v53, &v51);
      if (v52 < 0) {
        operator delete((void *)v51);
      }
      int64_t v26 = v44;
      if ((v44 & 0x80u) != 0) {
        int64_t v26 = v43;
      }
      std::string::size_type v6 = v26 + v16;
    }
  }
  std::string::size_type v12 = v45.__r_.__value_.__l.__size_;
  if (v6 < v45.__r_.__value_.__l.__size_ && i != -1)
  {
    uint64_t v11 = (std::string *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_18;
  }
LABEL_50:
  if ((char)v44 < 0)
  {
    operator delete(__p);
    LOBYTE(v8) = *((unsigned char *)&v45.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80) != 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = v46;
  uint64_t v28 = v47;
  if (v46 != v47)
  {
    while (2)
    {
      LOBYTE(v53[0]) = 0;
      uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
      if (*(char *)(v27 + 23) < 0)
      {
        uint64_t v30 = *(const char **)v27;
        uint64_t v31 = *(void *)(v27 + 8);
      }
      else
      {
        uint64_t v30 = (const char *)v27;
        uint64_t v31 = *(unsigned __int8 *)(v27 + 23);
      }
      uint64_t v32 = 0;
      uint64_t v33 = v30 - 1;
      uint64_t v34 = 1;
      while (v31 != v32)
      {
        int v35 = v33[v31];
        --v34;
        --v33;
        ++v32;
        if (v35 == 46)
        {
          if (!(v31 + v34)) {
            break;
          }
          if ((v29 & 0x80) != 0)
          {
            if (!(v31 - *(void *)(v27 + 8) + v34)) {
              break;
            }
            uint64_t v36 = *(const char **)v27;
          }
          else
          {
            if (!(v31 - v29 + v34)) {
              break;
            }
            uint64_t v36 = (const char *)v27;
          }
          CFStringRef v37 = CFStringCreateWithCString(0, v36, 0x8000100u);
          *(void *)&long long v51 = v37;
          if (v37)
          {
            CFRange v38 = CFStringFind(v40, v37, 0);
            if (v38.location != -1 && v38.length) {
              (*(void (**)(uint64_t, CFIndex, CFIndex, std::vector<std::string> **))(v41 + 16))(v41, v38.location, v38.length, v53);
            }
            int v39 = LOBYTE(v53[0]);
            CFRelease(v37);
            if (v39) {
              goto LABEL_73;
            }
          }
          break;
        }
      }
      v27 += 24;
      if (v27 != v28) {
        continue;
      }
      break;
    }
  }
LABEL_73:
  *(void *)&long long v51 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8C5D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34)
{
  *(void *)(v34 - 96) = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  if (a33 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a34, 0);
  _Unwind_Resume(a1);
}

const __CFString *CEM::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    CFStringRef v4 = this;
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
    {
      CFIndex Length = CFStringGetLength(v4);
      CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      operator new[]();
    }
    return (const __CFString *)std::string::basic_string[abi:ne180100]<0>(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_1B8C5D66C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C96F0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL CEM::deviceIsChinese(CEM *this)
{
  if (CEM::getDeviceRegionCode(void)::onceToken != -1) {
    dispatch_once(&CEM::getDeviceRegionCode(void)::onceToken, &__block_literal_global_53);
  }
  return !CEM::getDeviceRegionCode(void)::__regionCode
      || CFEqual((CFStringRef)CEM::getDeviceRegionCode(void)::__regionCode, @"CH");
}

BOOL CEM::shouldShowTaiwanFlagEmoji(CEM *this)
{
  if (CEM::shouldShowTaiwanFlagEmoji(void)::onceToken != -1) {
    dispatch_once(&CEM::shouldShowTaiwanFlagEmoji(void)::onceToken, &__block_literal_global_7);
  }
  if (CEM::shouldShowTaiwanFlagEmoji(void)::_deviceIsChinese) {
    return 0;
  }
  CFLocaleRef v2 = CFLocaleCopyCurrent();
  if (!v2) {
    return 1;
  }
  CFLocaleRef v3 = v2;
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (Value) {
    BOOL v1 = CFStringCompare(Value, @"CN", 0) != kCFCompareEqualTo;
  }
  else {
    BOOL v1 = 1;
  }
  CFRelease(v3);
  return v1;
}

void sub_1B8C5D7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL ___ZN3CEM25shouldShowTaiwanFlagEmojiEv_block_invoke(CEM *a1)
{
  BOOL result = CEM::deviceIsChinese(a1);
  CEM::shouldShowTaiwanFlagEmoji(void)::_deviceIsChinese = result;
  return result;
}

const __CFString *CEM::copyPreferredLocaleIdentifierFromFrameworkBundleWithLocale(CEM *this, __CFBundle *a2, const __CFLocale *a3)
{
  CFStringRef ValueAtIndex = 0;
  if (!this || !a2) {
    return ValueAtIndex;
  }
  CFLocaleRef OverrideLocaleForLocale = CEM::createOverrideLocaleForLocale(a2, a2);
  CFLocaleRef v7 = OverrideLocaleForLocale;
  values[0] = 0;
  values[1] = OverrideLocaleForLocale;
  if (OverrideLocaleForLocale) {
    CFLocaleRef v8 = OverrideLocaleForLocale;
  }
  else {
    CFLocaleRef v8 = a2;
  }
  values[0] = (void *)MEMORY[0x1BA9C9040](v8);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
  CFArrayRef v11 = CFBundleCopyBundleLocalizations(this);
  CFArrayRef v12 = CFBundleCopyLocalizationsForPreferences(v11, v10);
  CFArrayRef v13 = v12;
  if (v12 && !CFArrayGetCount(v12))
  {
    CFStringRef ValueAtIndex = 0;
  }
  else
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, 0);
    CFLocaleRef v14 = CFLocaleCreate(v9, ValueAtIndex);
    CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F1D218];
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(v8, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFStringRef v17 = (const __CFString *)CFLocaleGetValue(v14, v15);
    if (CFStringCompare(Value, v17, 0)) {
      CFStringRef ValueAtIndex = 0;
    }
    else {
      CFRetain(ValueAtIndex);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (!v13) {
      goto LABEL_17;
    }
  }
  CFRelease(v13);
LABEL_17:
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
  return ValueAtIndex;
}

void sub_1B8C5D984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFLocaleRef v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFStringRef v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFLocaleRef v7 = va_arg(va3, const void *);
  uint64_t v9 = va_arg(va3, void);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

CFLocaleRef CEM::createOverrideLocaleForLocale(CEM *this, const __CFLocale *a2)
{
  CFStringRef v2 = (const __CFString *)MEMORY[0x1BA9C9040](this, a2);
  if (CFStringCompare(v2, @"ars", 0))
  {
    if (CFStringCompare(v2, @"nn", 0))
    {
      if (CFStringCompare(v2, @"yue-Hant", 0))
      {
        if (CFStringCompare(v2, @"en_CA", 0) && CFStringCompare(v2, @"en_JP", 0)) {
          return 0;
        }
        CFStringRef v4 = @"en_US";
      }
      else
      {
        CFStringRef v4 = @"zh_HK";
      }
    }
    else
    {
      CFStringRef v4 = @"nb_NO";
    }
  }
  else
  {
    CFStringRef v4 = @"ar";
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  return CFLocaleCreate(v5, v4);
}

CFLocaleRef CEM::createNormalizedLocale(CEM *this, const __CFLocale *a2)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = (const __CFString *)MEMORY[0x1BA9C9040](this, a2);
  CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v2, v3);
  CFStringRef LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(v2, ComponentsFromLocaleIdentifier);
  CFLocaleRef v6 = CFLocaleCreate(v2, LocaleIdentifierFromComponents);
  if (LocaleIdentifierFromComponents) {
    CFRelease(LocaleIdentifierFromComponents);
  }
  if (ComponentsFromLocaleIdentifier) {
    CFRelease(ComponentsFromLocaleIdentifier);
  }
  return v6;
}

void sub_1B8C5DB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t CEM::createFrameworkBundle(CEM *this)
{
  if (CEM::createFrameworkBundle(void)::onceToken != -1) {
    dispatch_once(&CEM::createFrameworkBundle(void)::onceToken, &__block_literal_global_36);
  }
  CFRetain((CFTypeRef)CEM::createFrameworkBundle(void)::frameworkBundle);
  return CEM::createFrameworkBundle(void)::frameworkBundle;
}

void ___ZN3CEM21createFrameworkBundleEv_block_invoke(uint64_t a1, const __CFString *a2)
{
  PathRelativeToPlatformRoot = CEM::createPathRelativeToPlatformRoot(@"/System/Library/PrivateFrameworks/CoreEmoji.framework", a2);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], PathRelativeToPlatformRoot, kCFURLPOSIXPathStyle, 1u);
  CEM::createFrameworkBundle(void)::frameworkBundle = (uint64_t)CFBundleCreate(v3, v4);
  if (!CEM::createFrameworkBundle(void)::frameworkBundle) {
    __assert_rtn("createFrameworkBundle_block_invoke", "CEMUtilityFunctions.cpp", 276, "frameworkBundle && \"CoreEmoji framework bundle could not be found.\"");
  }
  if (v4) {
    CFRelease(v4);
  }
  if (PathRelativeToPlatformRoot) {
    CFRelease(PathRelativeToPlatformRoot);
  }
}

void sub_1B8C5DCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *CEM::createPathRelativeToPlatformRoot(const __CFString *this, const __CFString *a2)
{
  Mutable = CFStringCreateMutable(0, 1024);
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "/", 0x8000100u);
  CFStringAppend(Mutable, v4);
  if (this) {
    CFStringAppend(Mutable, this);
  }
  CFRelease(v4);
  return Mutable;
}

CFURLRef CEM::copyResourceURLFromFrameworkBundle(CEM *this, const __CFString *a2, const __CFString *a3, __CFString *a4, const __CFLocale *a5)
{
  FrameworkBundle = (CEM *)CEM::createFrameworkBundle(this);
  if (!FrameworkBundle) {
    return 0;
  }
  CFArrayRef v11 = FrameworkBundle;
  if (a4)
  {
    CFStringRef v12 = CEM::copyPreferredLocaleIdentifierFromFrameworkBundleWithLocale(FrameworkBundle, (__CFBundle *)a4, v10);
    if (v12)
    {
      CFURLRef v13 = CFBundleCopyResourceURLForLocalization(v11, (CFStringRef)this, a2, a3, v12);
      CFRelease(v12);
    }
    else
    {
      CFURLRef v13 = 0;
    }
  }
  else
  {
    CFURLRef v13 = CFBundleCopyResourceURL(FrameworkBundle, (CFStringRef)this, a2, a3);
  }
  CFRelease(v11);
  return v13;
}

void sub_1B8C5DE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFBundle *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void CEM::getUTF16StringFromCFString(const __CFString *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    CFIndex Length = CFStringGetLength(this);
    std::basic_string<char16_t>::basic_string[abi:ne180100]((void *)a2, Length, 32);
    if (*(char *)(a2 + 23) >= 0) {
      CFLocaleRef v6 = (UniChar *)a2;
    }
    else {
      CFLocaleRef v6 = *(UniChar **)a2;
    }
    v7.location = 0;
    v7.length = Length;
    CFStringGetCharacters(this, v7, v6);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_1B8C5DEF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void CEM::getFileSystemRepresentationFromCFURL(CEM *this, const __CFURL *a2)
{
}

void sub_1B8C5DFA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C96F0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

CFPropertyListRef CEM::createCFTypeWithContentsOfURL(CFURLRef fileURL, const __CFURL *a2)
{
  if (!fileURL) {
    return 0;
  }
  CFAllocatorRef v2 = CFReadStreamCreateWithFile(0, fileURL);
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    CFPropertyListRef v4 = CFPropertyListCreateWithStream(0, v3, 0, 0, 0, 0);
    CFReadStreamClose(v3);
  }
  else
  {
    CFPropertyListRef v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

CFURLRef CEM::copyLibraryKeyboardDirectoryURL(CEM *this)
{
  CFURLRef v1 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, @"/Library/Keyboard", 1u);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_1B8C5E0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef CEM::copyEmojiAdaptationDatabaseURL(CEM *this)
{
  CFURLRef v1 = CEM::copyLibraryKeyboardDirectoryURL(this);
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, @"emoji_adaptation.db", 0);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_1B8C5E134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef CEM::copyResourceURLFromFrameworkBundle(CEM *this, const __CFString *a2, __CFString *a3, const __CFLocale *a4, const __CFLocale *a5)
{
  return CEM::copyResourceURLFromFrameworkBundle(this, a2, 0, a3, a5);
}

void *___ZN3CEML19getDeviceRegionCodeEv_block_invoke()
{
  BOOL result = dlopen("/usr/lib/libMobileGestalt.dylib", 261);
  if (result)
  {
    BOOL result = dlsym(result, "MGCopyAnswer");
    if (result) {
      BOOL result = (void *)((uint64_t (*)(__CFString *, void))result)(@"RegionCode", 0);
    }
  }
  CEM::getDeviceRegionCode(void)::__regionCode = (uint64_t)result;
  return result;
}

void *std::basic_string<char16_t>::basic_string[abi:ne180100](void *a1, unint64_t a2, __int16 a3)
{
  CFAllocatorRef v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 0xB)
  {
    uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB) {
      uint64_t v6 = a2 | 3;
    }
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *CFAllocatorRef v3 = a1;
  }
  else
  {
    *((unsigned char *)a1 + 23) = a2;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = 0;
  do
    *((_WORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  CFPropertyListRef v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  uint64_t v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  uint64_t v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      std::string::size_type v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    }
    else {
      std::string::size_type v16 = 0;
    }
    CFStringRef v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    CFArrayRef v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    CFArrayRef v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1B8C5E3F0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFBundle *>::reset(const void **a1, const void *a2)
{
  CFPropertyListRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

id emf_signpost_get_log()
{
  if (emf_signpost_get_log_onceToken != -1) {
    dispatch_once(&emf_signpost_get_log_onceToken, &__block_literal_global_9);
  }
  uint64_t v0 = (void *)emf_signpost_get_log_log;
  return v0;
}

uint64_t __emf_signpost_get_log_block_invoke()
{
  emf_signpost_get_log_log = (uint64_t)os_log_create("com.apple.EmojiFoundation", "EmojiFoundationSignposts");
  return MEMORY[0x1F41817F8]();
}

id emf_logging_get_default_log()
{
  if (emf_logging_get_default_log_onceToken != -1) {
    dispatch_once(&emf_logging_get_default_log_onceToken, &__block_literal_global_4_0);
  }
  uint64_t v0 = (void *)emf_logging_get_default_log_log;
  return v0;
}

uint64_t __emf_logging_get_default_log_block_invoke()
{
  emf_logging_get_default_log_log = (uint64_t)os_log_create("com.apple.EmojiFoundation", "StandardLogger");
  return MEMORY[0x1F41817F8]();
}

id emf_logging_get_query_log()
{
  if (emf_logging_get_query_log_onceToken[0] != -1) {
    dispatch_once(emf_logging_get_query_log_onceToken, &__block_literal_global_7);
  }
  uint64_t v0 = (void *)emf_logging_get_query_log_log;
  return v0;
}

uint64_t __emf_logging_get_query_log_block_invoke()
{
  emf_logging_get_query_log_log = (uint64_t)os_log_create("com.apple.EmojiFoundation", "QueryLogger");
  return MEMORY[0x1F41817F8]();
}

__CFArray *_createTokensForString(void *a1, void *a2)
{
  CFAllocatorRef v3 = a1;
  CFLocaleRef v4 = a2;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v11.length = CFStringGetLength(v3);
  v11.location = 0;
  uint64_t v6 = CFStringTokenizerCreate(v5, v3, v11, 0, v4);
  Mutable = CFArrayCreateMutable(v5, 3, MEMORY[0x1E4F1D510]);
  while (CFStringTokenizerAdvanceToNextToken(v6))
  {
    CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v6);
    CFStringRef v8 = CFStringCreateWithSubstring(v5, v3, CurrentTokenRange);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  CFRelease(v6);

  return Mutable;
}

CFMutableStringRef _createNormalizedString(void *a1, void *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFLocaleRef v4 = a2;
  CFAllocatorRef v5 = a1;
  CFIndex Length = CFStringGetLength(v5);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v3, Length, v5);

  CFStringNormalize(MutableCopy, kCFStringNormalizationFormD);
  CFStringLowercase(MutableCopy, v4);

  v10.length = CFStringGetLength(MutableCopy);
  v10.location = 0;
  CFStringFindAndReplace(MutableCopy, @"'", @"’", v10, 0);
  return MutableCopy;
}

id _createStemmedTokensForTokenArray(void *a1, void *a2)
{
  id v3 = a1;
  CFLocaleRef v4 = v3;
  if (a2)
  {
    id v5 = [a2 stemTokens:v3];
  }
  else
  {
    id v5 = v3;
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_1B8C612AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void _enumeratePrefixesInStringUsingBlock(void *a1, void *a2)
{
  id v3 = a1;
  CFLocaleRef v4 = a2;
  id v5 = 0;
  unint64_t v6 = 0;
  char v8 = 0;
  while (v6 < [v3 length])
  {
    uint64_t v7 = objc_msgSend(v3, "substringWithRange:", 0, v6 + 1);

    v4[2](v4, v7, v6, &v8);
    id v5 = v7;
    ++v6;
    if (v8) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = v5;
LABEL_6:
}

void sub_1B8C615F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _searchTypeForEntryMetadata(void *a1)
{
  CFURLRef v1 = [a1 objectForKey:@"searchType"];
  CFURLRef v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 unsignedIntegerValue];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_1B8C628A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1B8C62D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

std::string *CEM::AdaptationDatabase::AdaptationDatabase(std::string *this, const std::__fs::filesystem::path *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  this[3].__r_.__value_.__r.__words[2] = 0;
  CFLocaleRef v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    CFLocaleRef v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (sqlite3_open_v2((const char *)v4, (sqlite3 **)&this[1], 65542, 0))
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        unint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      uint64_t v7 = sqlite3_errmsg((sqlite3 *)this[1].__r_.__value_.__l.__data_);
      CEM::AdaptationDatabase::AdaptationDatabase((uint64_t)v6, (uint64_t)v7, v10, adaptation_log);
    }
    this[1].__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    char v8 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      CEM::AdaptationDatabase::AdaptationDatabase((char *)&this->__r_.__value_.__r.__words[2] + 7, this, v8);
    }
  }
  return this;
}

void sub_1B8C63764(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v3);
  if (*v2 < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabase::~AdaptationDatabase(CEM::AdaptationDatabase *this)
{
  CFURLRef v2 = (sqlite3 *)*((void *)this + 3);
  if (v2) {
    sqlite3_close(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

BOOL CEM::AdaptationDatabase::isConnected(CEM::AdaptationDatabase *this)
{
  return *((void *)this + 3) != 0;
}

BOOL CEM::AdaptationDatabase::initializeDatbaseWithSql(CEM::AdaptationDatabase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a1 + 3);
  if (v3)
  {
    memset(v8, 0, sizeof(v8));
    CEM::Statement::Statement(v9, "", 0, a2, a3, v8);
    CFRange v10 = v8;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    CEM::AdaptationDatabase::executeStatement(a1, (CEM::Statement *)v9, v7);
    v8[0] = (void **)v7;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v8);
    CEM::Statement::~Statement(v9);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_DEBUG)) {
      CEM::AdaptationDatabase::initializeDatbaseWithSql(adaptation_log);
    }
  }
  return v3 != 0;
}

void sub_1B8C638C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

void *CEM::AdaptationDatabase::executeStatement@<X0>(CEM::AdaptationDatabase *this@<X0>, CEM::Statement *a2@<X1>, void *a3@<X8>)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4[0] = &unk_1F126CEC8;
  v4[1] = a3;
  void v4[3] = v4;
  CEM::AdaptationDatabase::executeStatement((uint64_t)this, a2, (uint64_t)v4);
  return std::__function::__value_func<void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__value_func[abi:ne180100](v4);
}

void sub_1B8C6397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
}

void CEM::AdaptationDatabase::executeStatement(uint64_t a1, CEM::Statement *a2, uint64_t a3)
{
  unint64_t v6 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    *((void *)a2 + 12) = v7;
    CEM::Statement::prepare(a2);
    while (CEM::Statement::isValid(a2))
    {
      CEM::Statement::bindParameters(a2);
      while (CEM::Statement::step((sqlite3_stmt **)a2) && CEM::Statement::hasRows(a2))
      {
        v16[0] = 0;
        v16[1] = 0;
        unint64_t v15 = (uint64_t *)v16;
        uint64_t v8 = CEM::Statement::columnSize((sqlite3_stmt **)a2);
        if (v8)
        {
          uint64_t v9 = 0;
          do
          {
            v14[0] = CEM::Statement::getColumnNameAtIndex((sqlite3_stmt **)a2, v9);
            v14[1] = v10;
            CEM::Statement::getValueForColumnAtIndex((sqlite3_stmt **)a2, v9, (uint64_t)v13);
            std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_unique_impl<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>(&v15, (uint64_t)v14, (uint64_t)v13);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
            ++v9;
          }
          while (v8 != v9);
        }
        uint64_t v11 = *(void *)(a3 + 24);
        if (!v11) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t **))(*(void *)v11 + 48))(v11, &v15);
        std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy((uint64_t)&v15, v16[0]);
      }
      CEM::Statement::finalize((sqlite3_stmt **)a2);
      CEM::Statement::prepare(a2);
    }
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_DEBUG)) {
      CEM::AdaptationDatabase::executeStatement(adaptation_log);
    }
  }
  std::mutex::unlock(v6);
}

void sub_1B8C63B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
}

void *std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F126CEC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F126CEC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 >= *(void *)(v2 + 16))
  {
    uint64_t result = std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__emplace_back_slow_path<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(*(uint64_t **)(a1 + 8), a2);
  }
  else
  {
    std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](*(uint64_t **)(v2 + 8), a2);
    uint64_t result = v3 + 24;
    *(void *)(v2 + 8) = v3 + 24;
  }
  *(void *)(v2 + 8) = result;
  return result;
}

void sub_1B8C63C3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

uint64_t std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__emplace_back_slow_path<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  CFStringRef v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (uint64_t *)&v10[24 * v4];
  std::string::size_type v16 = &v10[24 * v9];
  std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](v14, a2);
  unint64_t v15 = v14 + 3;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B8C63D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1B8C63DD8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  BOOL v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      unint64_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        std::string::size_type v16 = (void *)a2;
        do
        {
          unint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          std::string::size_type v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    unint64_t v14 = *(void ***)(a2 + 8);
    do
    {
      unint64_t v15 = v14;
      unint64_t v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    int64_t v19 = (void **)a2;
    do
    {
      unint64_t v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      int64_t v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B8C64100(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        unint64_t v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B8C64260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_unique_impl<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  long long v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_1B8C64724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B8C64798(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,0>(void *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    uint64_t v7 = __dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((unsigned char *)v7 + v4) = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(__dst + 3), a3);
  return __dst;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1F126F808[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F126F858[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void sub_1B8C64E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1B8C64F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _getSharedSerialOperationQueue(void)
{
  {
    _getSharedSerialOperationQueue(void)::attributes = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  }
  if (_getSharedSerialOperationQueue(void)::onceToken != -1) {
    dispatch_once(&_getSharedSerialOperationQueue(void)::onceToken, &__block_literal_global_12);
  }
  uint64_t v0 = (void *)_getSharedSerialOperationQueue(void)::__sharedSerialOperationQueue;
  return v0;
}

uint64_t ___Z30_getSharedSerialOperationQueuev_block_invoke()
{
  _getSharedSerialOperationQueue(void)::__sharedSerialOperationQueue = (uint64_t)dispatch_queue_create("com.apple.EmojiFoundation.EMFEmojiPreferences.sharedSerialOperationQueue", (dispatch_queue_attr_t)_getSharedSerialOperationQueue(void)::attributes);
  return MEMORY[0x1F41817F8]();
}

void sub_1B8C6536C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C65544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C65720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C657E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_1B8C65B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C65D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C65DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getEmojiAdaptationDatabasePath(CEM *a1@<X0>, std::string *a2@<X8>)
{
  CFURLRef v3 = CEM::copyEmojiAdaptationDatabaseURL(a1);
  CFURLRef v7 = v3;
  char v6 = (__CFString *)CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  uint64_t v4 = v6;
  uint64_t v5 = (char *)[(__CFString *)v4 UTF8String];
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(a2, &v5);
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8C65E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B8C65F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x1BA9C9720](v21, 0x1032C409B631534);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1B8C66150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1B8C66488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a30 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B8C66600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C667B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C669F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C66BC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B8C66C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C66DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C66EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C66FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C670AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8C67458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C676B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C67A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C67EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C684B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C68678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C687BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C68920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C68A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C68CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C68F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1B8C690F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C69490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6960C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C69C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C69D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1B8C69E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C69F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6A990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id EMFGetDeviceBuildVersion(void)
{
  if (EMFGetDeviceBuildVersion(void)::onceToken != -1) {
    dispatch_once(&EMFGetDeviceBuildVersion(void)::onceToken, &__block_literal_global_72);
  }
  uint64_t v0 = (void *)EMFGetDeviceBuildVersion(void)::__buildVersion;
  return v0;
}

void ___Z24EMFGetDeviceBuildVersionv_block_invoke()
{
  uint64_t v0 = MGCopyAnswer();
  uint64_t v1 = (void *)EMFGetDeviceBuildVersion(void)::__buildVersion;
  EMFGetDeviceBuildVersion(void)::__buildVersion = v0;

  if (!EMFGetDeviceBuildVersion(void)::__buildVersion)
  {
    EMFGetDeviceBuildVersion(void)::__buildVersion = (uint64_t)&stru_1F126FA78;
  }
}

void sub_1B8C6AE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6AF84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6B038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6B138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6B1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6B2D0(_Unwind_Exception *a1)
{
  CFURLRef v7 = v6;

  objc_sync_exit(v5);
  _Unwind_Resume(a1);
}

void sub_1B8C6B3C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1B8C6B474(_Unwind_Exception *a1)
{
  CFURLRef v3 = v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B8C6B5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6BA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  objc_sync_exit(v23);
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1B8C6BBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6BD38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMFEmojiPreferencesService;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B8C6BF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nlp::CFScopedPtr<__SecTask *>::reset((const void **)va, 0);

  _Unwind_Resume(a1);
}

void sub_1B8C6BFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6C11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6C2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::~AdaptationDatabaseController(CEM::AdaptationDatabaseController *this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::mutex::~mutex((std::mutex *)this + 1);
  std::mutex::~mutex((std::mutex *)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      CFURLRef v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string&,long &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::string&,long &>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B8C6C6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::string&,long &>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_1B8C6C764(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    CFURLRef v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *CFURLRef v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  int8x8_t v3 = *a2;
  unint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1B8C6C9A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8C6CA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6CB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6D064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

void sub_1B8C6D270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6D334(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B8C6D480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B8C6D848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_1B8C6DF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char *a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  if (a11)
  {
    a12 = a11;
    operator delete(a11);
  }
  a11 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy((uint64_t)&a29, a30);

  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char16_t>::append(this, __n - size, __c);
    return;
  }
  std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n) {
    goto LABEL_5;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
      unint64_t v9 = this->__r_.__value_.__r.__words[2];
      std::basic_string<char16_t>::size_type v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v9);
    }
    else
    {
      std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      std::basic_string<char16_t>::size_type v8 = 10;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char16_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v10 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v10 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v11 = (std::basic_string<char16_t>::value_type *)((char *)v10 + 2 * size);
    std::basic_string<char16_t>::size_type v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    std::basic_string<char16_t>::size_type v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v13;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    }
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::basic_string<char16_t>::size_type v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::basic_string<char16_t>::size_type v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  }
  std::basic_string<char16_t>::size_type v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap) {
    std::basic_string<char16_t>::size_type v14 = 2 * __old_cap;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB) {
    uint64_t v15 = v14 | 3;
  }
  if (v14 >= 0xB) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 11;
  }
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFF7;
  }
  float v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v17);
  std::basic_string<char16_t>::size_type v19 = (std::basic_string<char16_t>::size_type)v18;
  uint64_t v21 = v20;
  if (__n_copy) {
    memmove(v18, v13, 2 * __n_copy);
  }
  if (__old_sz != __n_del + __n_copy) {
    memmove((void *)(v19 + 2 * __n_copy + 2 * __n_add), (char *)v13 + 2 * __n_copy + 2 * __n_del, 2 * (__old_sz - (__n_del + __n_copy)));
  }
  if (__old_cap != 10) {
    operator delete(v13);
  }
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)end, *(const std::basic_string<char16_t>::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = v15.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  uint64_t v13 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_1B8C6E54C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::basic_string<char16_t>::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB) {
      std::basic_string<char16_t>::size_type v6 = __sz | 3;
    }
    uint64_t v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    unint64_t v5 = v7;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

uint64_t std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(void *a1)
{
  trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(a1);
  JUMPOUT(0x1BA9C9720);
}

uint64_t trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  __p = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      long long v10 = *(void **)(a3 + 8 * i);
      unint64_t v11 = *(void *)(a4 + 8 * i) >> 1;
      unint64_t v30 = v11;
      uint64_t v31 = v10;
      long long v12 = v36;
      if ((unint64_t)v36 >= v37)
      {
        char v13 = (void *)std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<char16_t const*,unsigned long>((uint64_t)&v35, &v31, &v30);
      }
      else
      {
        std::basic_string<char16_t>::basic_string[abi:ne180100](v36, v10, v11);
        char v13 = v12 + 3;
      }
      uint64_t v36 = v13;
      if (a5)
      {
        uint64_t v14 = *(void *)(a5 + 8 * i);
        long long v15 = v33;
        if (v33 >= v34)
        {
          uint64_t v17 = (char *)__p;
          uint64_t v18 = v33 - (unsigned char *)__p;
          if (v33 - (unsigned char *)__p <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v18 >> 1;
          if (v34 - (unsigned char *)__p <= (unint64_t)((v18 >> 1) + 1)) {
            uint64_t v20 = v19 + 1;
          }
          else {
            uint64_t v20 = v34 - (unsigned char *)__p;
          }
          if ((unint64_t)(v34 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v21 = v20;
          }
          if (v21)
          {
            unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)&v34, v21);
            uint64_t v17 = (char *)__p;
            long long v15 = v33;
          }
          else
          {
            unint64_t v22 = 0;
          }
          size_t v23 = &v22[2 * v19];
          *(_WORD *)size_t v23 = v14;
          uint64_t v16 = v23 + 2;
          while (v15 != v17)
          {
            __int16 v24 = *((_WORD *)v15 - 1);
            v15 -= 2;
            *((_WORD *)v23 - 1) = v24;
            v23 -= 2;
          }
          __p = v23;
          uint64_t v33 = v16;
          uint64_t v34 = &v22[2 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_WORD *)uint64_t v33 = v14;
          uint64_t v16 = v15 + 2;
        }
        uint64_t v33 = v16;
      }
    }
  }
  uint64_t v25 = *a1;
  if (a5) {
    uint64_t v26 = (*(uint64_t (**)(void))(v25 + 64))();
  }
  else {
    uint64_t v26 = (*(uint64_t (**)(void))(v25 + 56))();
  }
  uint64_t v27 = v26;
  if (__p)
  {
    uint64_t v33 = (char *)__p;
    operator delete(__p);
  }
  __p = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v27;
}

void sub_1B8C6E990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::lookup(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unsigned __int16 v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *))(*(void *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

void *trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F126CD18;
  v5[1] = a4;
  void v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 88))(a1, a2, a3 >> 1, v5);
  return std::__function::__value_func<void ()(unsigned short,std::u16string_view,BOOL &)>::~__value_func[abi:ne180100](v5);
}

void sub_1B8C6EADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned short,std::u16string_view,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F126CCC0;
  v5[1] = a4;
  void v5[3] = v5;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3 >> 1, v5);
  return std::__function::__value_func<void ()(unsigned short,std::u16string_view,BOOL &)>::~__value_func[abi:ne180100](v5);
}

void sub_1B8C6EB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned short,std::u16string_view,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::serialize@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  internal::marisa::Trie::write((internal::marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (uint64_t)&v15);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, __p);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v5 = HIBYTE(v13);
    if (v13 < 0) {
      int v5 = (int)__p[1];
    }
    *(_DWORD *)__s = v5;
    unsigned __int16 v6 = *(const std::string::value_type **)(a1 + 24);
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 2 * v4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BA9C96C0](&v18);
}

void sub_1B8C6EDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(uint64_t a1, uint64_t **a2)
{
  return trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys(a1, a2, 0);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(void *a1, uint64_t a2, __int16 **a3)
{
  __p = 0;
  unsigned __int16 v6 = 0;
  uint64_t v7 = 0;
  uint64_t v3 = trie::MarisaTrie<unsigned short,char16_t>::build(a1, a2, a3, (uint64_t **)&__p);
  if (__p)
  {
    unsigned __int16 v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1B8C6EE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::load(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(void *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      internal::marisa::Trie::map((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  uint64_t v7 = (char *)a2 + 4;
  uint64_t v8 = *(unsigned int *)a2;
  internal::marisa::Trie::map((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), (char *)a2 + 4, v8);
  *(void *)(a1 + 24) = &v7[v8];
  *(void *)(a1 + 32) = (a3 - v8 - 4) >> 1;
  return 1;
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::lookup(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  unint64_t v8 = 0;
  uint64_t v6 = internal::marisa::Trie::lookup((internal::marisa::grimoire::vector::BitVector **)(a1 + 16), a2, 2 * a3, &v8);
  if (v6) {
    *a4 = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(a1, v8);
  }
  return v6;
}

void *trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F126CC68;
  v5[1] = a1;
  v5[2] = a4;
  void v5[3] = v5;
  internal::marisa::Trie::common_prefix_search((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v5);
  return std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100](v5);
}

void sub_1B8C6F010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1F126CC10;
  v6[1] = a1;
  void v6[2] = a4;
  v6[3] = v6;
  internal::marisa::Trie::predictive_search((internal::marisa::grimoire::vector::BitVector **)(a1 + 16), a2, 2 * a3, (uint64_t)v6, (a5 << (a5 > 0)));
  return std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100](v6);
}

void sub_1B8C6F0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double trie::MarisaTrie<unsigned short,char16_t>::root@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL trie::MarisaTrie<unsigned short,char16_t>::isValid(uint64_t a1, void *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void trie::MarisaTrie<unsigned short,char16_t>::advance(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::getPayload(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1)) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t payload = internal::marisa::Trie::get_payload(a1 + 2, a2, &v8);
  if (payload) {
    *a3 = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload((uint64_t)a1, v8);
  }
  return payload;
}

void *trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  double result = (void *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v9[0] = &unk_1F126CB60;
    v9[1] = a1;
    v9[2] = a3;
    void v9[3] = v9;
    internal::marisa::Trie::enumerate_entries(a1 + 2, a2, (uint64_t)v9, a4);
    return std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1B8C6F278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  double result = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if (result)
  {
    v7[0] = &unk_1F126CBB8;
    v7[1] = a3;
    void v7[3] = v7;
    internal::marisa::Trie::enumerate_children(a1 + 2, a2, (uint64_t)v7);
    return std::__function::__value_func<void ()(char,internal::marisa::Cursor const&,BOOL &)>::~__value_func[abi:ne180100](v7);
  }
  return result;
}

void sub_1B8C6F354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(char,internal::marisa::Cursor const&,BOOL &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(void *a1)
{
  *a1 = &unk_1F126CA90;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  internal::marisa::Trie::~Trie((internal::marisa::Trie *)(a1 + 2));
  return a1;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<char16_t const*,unsigned long>(uint64_t a1, void **a2, unint64_t *a3)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = a1 + 16;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v11) {
    long long v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v11);
  }
  else {
    long long v12 = 0;
  }
  v15.__first_ = v12;
  v15.__begin_ = v12 + v5;
  v15.__end_ = v15.__begin_;
  v15.__end_cap_.__value_ = &v12[v11];
  std::basic_string<char16_t>::basic_string[abi:ne180100](v15.__begin_->__r_.__value_.__r.__words, *a2, *a3);
  v15.__end_ = v15.__begin_ + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  uint64_t v13 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_1B8C6F4BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::basic_string<char16_t>::basic_string[abi:ne180100](void *__dst, void *__src, unint64_t a3)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a3 >= 0xB)
  {
    uint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB) {
      uint64_t v7 = a3 | 3;
    }
    unint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = a3;
    unint64_t v6 = __dst;
    if (!a3) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::~__func()
{
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F126CD18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F126CD18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4)
{
  return std::function<void ()(long long,std::string_view,BOOL &)>::operator()(*(void *)(a1 + 8), *a2, *a3, 2 * a3[1], a4);
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target_type()
{
}

uint64_t std::function<void ()(long long,std::string_view,BOOL &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)v5 + 48))(v5, &v7, v8, a5);
}

void *std::__function::__value_func<void ()(unsigned short,std::u16string_view,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::~__func()
{
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F126CCC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F126CCC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4)
{
  return std::function<void ()(long long,std::string_view,BOOL &)>::operator()(*(void *)(a1 + 8), *a2, *a3, 2 * a3[1], a4);
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target_type()
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 24;
  return a1;
}

void sub_1B8C6FAF0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9C96C0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9C96C0](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys(uint64_t a1, uint64_t **a2, void *a3)
{
  __p = 0;
  unint64_t v22 = 0;
  size_t v23 = 0;
  uint64_t v5 = *a2;
  size_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        uint64_t v9 = (uint64_t *)*v5;
        uint64_t v8 = v5[1];
      }
      else
      {
        uint64_t v8 = *((unsigned __int8 *)v5 + 23);
        uint64_t v9 = v5;
      }
      uint64_t v10 = 2 * v8;
      if (v7 >= v23)
      {
        uint64_t v11 = (v7 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = (v23 - (unsigned char *)__p) >> 3;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v23 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)&v23, v13);
        uint64_t v16 = &v14[16 * v11];
        *(void *)uint64_t v16 = v9;
        *((void *)v16 + 1) = v10;
        uint64_t v18 = (char *)__p;
        char v17 = v22;
        uint64_t v19 = v16;
        if (v22 != __p)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          char v17 = (char *)__p;
        }
        uint64_t v7 = v16 + 16;
        __p = v19;
        unint64_t v22 = v16 + 16;
        size_t v23 = &v14[16 * v15];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v7 = v9;
        *((void *)v7 + 1) = v10;
        v7 += 16;
      }
      unint64_t v22 = v7;
      v5 += 3;
    }
    while (v5 != v6);
  }
  internal::marisa::Trie::build((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), (uint64_t *)&__p, a3, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    unint64_t v22 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(void *a1, uint64_t a2, __int16 **a3, uint64_t **a4)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) != a3[1] - *a3) {
    trie::MarisaTrie<unsigned short,char16_t>::build();
  }
  uint64_t v8 = trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys((uint64_t)a1, (uint64_t **)a2, a4);
  if (v8)
  {
    std::vector<unsigned short>::resize((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    uint64_t v9 = a1[5];
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
    if (v10)
    {
      unint64_t v11 = v10 / 24;
      unint64_t v12 = *a3;
      unint64_t v13 = *a4;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      do
      {
        __int16 v15 = *v12++;
        __int16 v14 = v15;
        uint64_t v16 = *v13++;
        *(_WORD *)(v9 + 2 * v16) = v14;
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = (a1[6] - v9) >> 1;
    a1[3] = v9;
    a1[4] = v17;
  }
  return v8;
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  size_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      __int16 v14 = 0;
    }
    __int16 v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E6196CC8, MEMORY[0x1E4FBA1D0]);
    }
    LOWORD(a2) = *(_WORD *)(*(void *)(a1 + 24) + 2 * a2);
  }
  return (unsigned __int16)a2;
}

void sub_1B8C701DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F126CC68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F126CC68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>(uint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (unint64_t)a3[1] >> 1;
  __int16 CustomPayload = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(*a1, *a2);
  uint64_t v9 = a1[1];
  return std::function<void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(v9, CustomPayload, v6, v7, a4);
}

uint64_t std::function<void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a3;
  v8[1] = a4;
  __int16 v7 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *, void *, uint64_t))(*(void *)v5 + 48))(v5, &v7, v8, a5);
}

void *std::__function::__value_func<void ()(unsigned long,std::string_view,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F126CC10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F126CC10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F126CB60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F126CB60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::~__func()
{
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F126CBB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F126CBB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::operator()(uint64_t a1, char *a2)
{
  return std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)>::operator()(*(void *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::target_type()
{
}

uint64_t std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)>::operator()(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(char,internal::marisa::Cursor const&,BOOL &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&,unsigned short>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  __int16 v7 = (uint64_t **)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__find_equal<std::basic_string<char16_t>>((uint64_t)a1, &v10, a2);
  __n128 result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__construct_node<std::basic_string<char16_t> const&,unsigned short>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__find_equal<std::basic_string<char16_t>>(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        __int16 v7 = (void *)v4;
        uint64_t v8 = (unsigned __int16 *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(a3, (unsigned __int16 *)(v4 + 32)) & 0x80) == 0)break; {
        uint64_t v4 = *v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    __int16 v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__construct_node<std::basic_string<char16_t> const&,unsigned short>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v9 = (std::basic_string<char16_t> *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v9, *(const std::basic_string<char16_t>::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v8 + 28) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B8C709F4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = *((void *)a1 + 1);
  }
  unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *((void *)a2 + 1);
  }
  if (v4 >= v2) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v5 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(unsigned __int16 **)a2;
    }
    if (v3 >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(unsigned __int16 **)a1;
    }
    do
    {
      unsigned int v9 = *v8;
      unsigned int v10 = *v7;
      if (v9 < v10) {
        return 255;
      }
      if (v10 < v9) {
        return 1;
      }
      ++v8;
      ++v7;
    }
    while (--v6);
  }
  if (v2 == v4) {
    return 0;
  }
  if (v2 < v4) {
    return 255;
  }
  return 1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1B8C714B8(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  v13.origin.x = a3;
  v13.origin.y = a4;
  v13.size.width = a5;
  v13.size.height = a6;
  vabdd_f64(CGRectGetWidth(v13), a7);
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  vabdd_f64(CGRectGetHeight(v14), a8);
}

id sub_1B8C715AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedImageProfile();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CachedImageProfile()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for ImageProfile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ImageProfile(id *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for ImageProfile(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  unsigned int v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for ImageProfile(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ImageProfile(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageProfile(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageProfile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageProfile()
{
  return &type metadata for ImageProfile;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1B8C71B2C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B8C71B4C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for EmojiProfile(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EmojiProfile(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

id *sub_1B8C71C1C(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);

  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t sub_1B8C71C54(uint64_t a1, uint64_t a2)
{
  return sub_1B8C71DC0(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1B8C71C6C(uint64_t a1, id *a2)
{
  uint64_t result = sub_1B8CA3760();
  *a2 = 0;
  return result;
}

uint64_t sub_1B8C71CE4(uint64_t a1, id *a2)
{
  char v3 = sub_1B8CA3770();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B8C71D64@<X0>(uint64_t *a1@<X8>)
{
  sub_1B8CA3780();
  uint64_t v2 = sub_1B8CA3750();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B8C71DA8(uint64_t a1, uint64_t a2)
{
  return sub_1B8C71DC0(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1B8C71DC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1B8CA3780();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B8C71E04()
{
  sub_1B8CA3780();
  sub_1B8CA37A0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8C71E58()
{
  sub_1B8CA3780();
  sub_1B8CA39A0();
  sub_1B8CA37A0();
  uint64_t v0 = sub_1B8CA39C0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B8C71ECC()
{
  return sub_1B8CA3710();
}

uint64_t sub_1B8C71F18()
{
  return sub_1B8CA3700();
}

uint64_t sub_1B8C71F70()
{
  return sub_1B8CA39C0();
}

uint64_t sub_1B8C71FD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1B8CA3750();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B8C72020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B8CA3780();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B8C7204C(uint64_t a1)
{
  uint64_t v2 = sub_1B8C724C8((unint64_t *)&qword_1E9EEEC60, type metadata accessor for Key);
  uint64_t v3 = sub_1B8C724C8(&qword_1E9EEEC68, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B8C72108()
{
  uint64_t v0 = sub_1B8CA3780();
  uint64_t v2 = v1;
  if (v0 == sub_1B8CA3780() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1B8CA3960();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B8C72194()
{
  swift_getWitnessTable();
  return sub_1B8CA36F0();
}

BOOL sub_1B8C72200(CGImage *a1, double a2, double a3)
{
  double Width = (double)(uint64_t)CGImageGetWidth(a1);
  int64_t Height = CGImageGetHeight(a1);
  return (*(void *)&Width & 0x7FFFFFFFFFFFFFFFLL) != 0
      && fabs((double)Height)
      && round(a2 * a3 / (Width * (double)Height) * 100.0) >= 95.0;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CTRun(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1B8C722D8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B8C72334(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for vImage_CGImageFormat(uint64_t a1)
{
}

void type metadata accessor for CTFont(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B8C723D8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B8C723F8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_1B8C72438()
{
  return sub_1B8C724C8(&qword_1E9EEEC38, type metadata accessor for Key);
}

uint64_t sub_1B8C72480()
{
  return sub_1B8C724C8(&qword_1E9EEEC40, type metadata accessor for Key);
}

uint64_t sub_1B8C724C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B8C72510()
{
  return sub_1B8C724C8((unint64_t *)&qword_1E9EEEC48, type metadata accessor for CFString);
}

uint64_t sub_1B8C72558()
{
  return sub_1B8C724C8(&qword_1E9EEEC50, type metadata accessor for CFString);
}

uint64_t sub_1B8C725A0()
{
  return sub_1B8C724C8(&qword_1E9EEEC58, type metadata accessor for Key);
}

void type metadata accessor for CGColorRenderingIntent(uint64_t a1)
{
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_1B8C72638(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void sub_1B8C7268C()
{
  qword_1E9EEFC60 = 0x4044000000000000;
}

void sub_1B8C7269C()
{
  qword_1E9EEFC68 = 0x4064000000000000;
}

double sub_1B8C726AC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECB0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B8CA8650;
  if (qword_1E9EEEBB0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = qword_1E9EEFC60;
  *(_OWORD *)(v0 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = xmmword_1B8CA8660;
  if (qword_1E9EEEBB8 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_1E9EEFC68;
  *(void *)(v0 + 56) = qword_1E9EEFC68;
  qword_1E9EEFC70 = v0;
  return result;
}

void sub_1B8C7277C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  uint64_t v9 = v8;
  CTFontRef v18 = *(CTFontRef *)v9;
  double Size = CTFontGetSize(*(CTFontRef *)v9);
  if ((~*(void *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (Size <= -9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (Size >= 9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v20 = *(void **)(v9 + 16);
  uint64_t v21 = *(void **)(v9 + 24);
  sub_1B8C73F9C(a1, a2, 0, 0, 1, v18, v20, v21);
  if (!v22)
  {
    *(_OWORD *)((char *)a5 + 41) = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
    return;
  }
  uint64_t v25 = v24;
  uint64_t v126 = v23;
  v127 = v22;
  v128 = a5;
  uint64_t v125 = (uint64_t)Size;
  if (a4)
  {
    uint64_t v26 = *(void *)(v9 + 8);
    if (*(void *)(v26 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1B8C7A644(v126, v25);
      if (v28)
      {
        unint64_t v29 = *(void *)(v26 + 56) + (v27 << 6);
        double v31 = *(double *)v29;
        double v30 = *(double *)(v29 + 8);
        double v33 = *(double *)(v29 + 16);
        double v32 = *(double *)(v29 + 24);
        double v122 = *(double *)(v29 + 40);
        double v123 = *(double *)(v29 + 32);
        uint64_t v124 = *(void *)(v29 + 48);
        uint64_t v121 = *(void *)(v29 + 56);
        swift_bridgeObjectRelease();
        double v34 = (double)v125;
        if (a3) {
          double v35 = v33;
        }
        else {
          double v35 = (double)v125;
        }
        if (a3) {
          double v34 = v32;
        }
        BOOL v36 = v34 < v35;
        double v37 = a6 / v35;
        double v38 = a7 / v34;
        if (v36) {
          double v38 = v37;
        }
        if (1.0 / a8 < v38) {
          double v38 = 1.0 / a8;
        }
        sub_1B8C743F4(Size * v38, a8);
        uint64_t v40 = v39;
        *(void *)&v136[24] = &type metadata for PrecomputedProfile;
        *(void *)&long long v137 = &off_1F126C388;
        uint64_t v41 = swift_allocObject();
        *(void *)v136 = v41;
        double v42 = v31;
        *(double *)(v41 + 16) = v31;
        *(double *)(v41 + 24) = v30;
        double v43 = v30;
        *(double *)(v41 + 32) = v33;
        *(double *)(v41 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v32;
        *(double *)(v41 + 48) = v123;
        *(double *)(v41 + 56) = v122;
        *(void *)(v41 + 64) = v124;
        *(void *)(v41 + 72) = v121;
        id v149 = v127;
        sub_1B8C74334((uint64_t)v136, (uint64_t)&v150);
        unsigned __int8 v44 = v127;
        BOOL v151 = sub_1B8C72200(v44, v33, v32);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
        sub_1B8C73F9C(a1, a2, 0, v40, 0, v18, v20, v21);
        if (!v45)
        {
          sub_1B8C71C1C(&v149);
          swift_bridgeObjectRelease();

          *(_OWORD *)((char *)v128 + 41) = 0u;
          v128[1] = 0u;
          v128[2] = 0u;
          _OWORD *v128 = 0u;
          return;
        }
        uint64_t v46 = v45;
        double v47 = v32;
        swift_bridgeObjectRelease();
        if ((~v40 & 0x7FF0000000000000) != 0)
        {
          if (*(double *)&v40 > -9.22337204e18)
          {
            if (*(double *)&v40 < 9.22337204e18)
            {
              id v48 = sub_1B8C73B38();
              swift_bridgeObjectRelease();
              std::string v49 = *(void **)(v9 + 32);
              id v50 = objc_msgSend(v49, sel_objectForKey_, v48);
              if (v50)
              {
                long long v51 = v50;
                sub_1B8C71C1C(&v149);

                *(void *)v128 = v46;
                sub_1B8C74398((uint64_t)v51 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)v128 + 8);
              }
              else
              {
                double Width = (double)(uint64_t)CGImageGetWidth(v46);
                double Height = (double)(uint64_t)CGImageGetHeight(v46);
                if (Height / v122 == Width / v123)
                {
                  sub_1B8C7838C(v42, v30, v33, v32, Height / v122);
                  double v42 = v110;
                  double v43 = v111;
                  double v33 = v112;
                  double v47 = v113;
                }
                else
                {
                  double Width = v123;
                  double Height = v122;
                }
                v133 = &type metadata for PrecomputedProfile;
                v134 = &off_1F126C388;
                uint64_t v114 = swift_allocObject();
                uint64_t v131 = v114;
                *(double *)(v114 + 16) = v42;
                *(double *)(v114 + 24) = v43;
                *(double *)(v114 + 32) = v33;
                *(double *)(v114 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v47;
                *(double *)(v114 + 48) = Width;
                *(double *)(v114 + 56) = Height;
                *(void *)(v114 + 64) = v124;
                *(void *)(v114 + 72) = v121;
                BOOL v115 = v151;
                *(void *)v136 = v46;
                sub_1B8C74334((uint64_t)&v131, (uint64_t)&v136[8]);
                BOOL v138 = v115;
                v116 = v46;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
                sub_1B8C74398((uint64_t)v136, (uint64_t)&v131);
                v117 = (objc_class *)type metadata accessor for CachedImageProfile();
                id v118 = objc_allocWithZone(v117);
                sub_1B8C74398((uint64_t)&v131, (uint64_t)v118 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
                v129.receiver = v118;
                v129.super_class = v117;
                id v119 = objc_msgSendSuper2(&v129, sel_init);
                sub_1B8C71C1C((id *)&v131);
                objc_msgSend(v49, sel_setObject_forKey_, v119, v48);

                sub_1B8C71C1C(&v149);
                *(void *)v128 = v116;
                long long v120 = *(_OWORD *)&v136[16];
                *(_OWORD *)((char *)v128 + 8) = *(_OWORD *)v136;
                *(_OWORD *)((char *)v128 + 24) = v120;
                *(_OWORD *)((char *)v128 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v137;
                *((unsigned char *)v128 + 56) = v138;
              }
              return;
            }
LABEL_45:
            __break(1u);
            return;
          }
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      swift_bridgeObjectRelease();
    }
  }
  sub_1B8C73F9C(a1, a2, 0, 0, 1, v18, v20, v21);
  if (v52)
  {
    v53 = v52;
    swift_bridgeObjectRelease();
    v54 = v128;
    if (a4)
    {
      id v55 = sub_1B8C73B38();
      swift_bridgeObjectRelease();
      v56 = *(void **)(v9 + 32);
      id v57 = objc_msgSend(v56, sel_objectForKey_, v55);
      if (v57)
      {
        v58 = v57;

        sub_1B8C74398((uint64_t)v58 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)v136);
      }
      else
      {
        v81 = v53;
        sub_1B8C776F4(v81, (uint64_t)&v149);
        sub_1B8C75D5C();
        CGFloat v83 = v82;
        CGFloat v85 = v84;
        CGFloat v87 = v86;
        CGFloat v89 = v88;
        double v90 = sub_1B8C75F30(v82, v84, v86, v88);
        double v92 = v91;
        sub_1B8C7612C(0xCuLL, (uint64_t)v139, v83, v85, v87, v89, v90);
        char v93 = v139[0];
        uint64_t v94 = v141;
        uint64_t v95 = v142;
        uint64_t v96 = v143;
        sub_1B8C76754(0xCuLL, (uint64_t)&v144, v83, v85, v87, v89, v92);
        char v97 = v144;
        v99 = v146;
        v98 = v147;
        uint64_t v100 = v148;
        sub_1B8C742A0((uint64_t)&v149);
        v133 = &type metadata for ProfileFromCGImage;
        v134 = &off_1F126C458;
        uint64_t v101 = swift_allocObject();
        uint64_t v131 = v101;
        *(void *)(v101 + 16) = v81;
        *(unsigned char *)(v101 + 24) = v93;
        *(_OWORD *)(v101 + 32) = v140;
        *(void *)(v101 + 48) = v94;
        *(void *)(v101 + 56) = v95;
        *(void *)(v101 + 64) = v96;
        *(unsigned char *)(v101 + 72) = v97;
        *(_OWORD *)(v101 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v145;
        *(void *)(v101 + 96) = v99;
        *(void *)(v101 + 104) = v98;
        *(void *)(v101 + 112) = v100;
        *(CGFloat *)(v101 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v83;
        *(CGFloat *)(v101 + 128) = v85;
        *(CGFloat *)(v101 + 136) = v87;
        *(CGFloat *)(v101 + 144) = v89;
        *(void *)v136 = v81;
        sub_1B8C74334((uint64_t)&v131, (uint64_t)&v136[8]);
        v102 = v81;
        BOOL v103 = sub_1B8C72200(v102, v87, v89);

        BOOL v138 = v103;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
        sub_1B8C74398((uint64_t)v136, (uint64_t)&v131);
        v104 = (objc_class *)type metadata accessor for CachedImageProfile();
        id v105 = objc_allocWithZone(v104);
        sub_1B8C74398((uint64_t)&v131, (uint64_t)v105 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
        v130.receiver = v105;
        v130.super_class = v104;
        v54 = v128;
        id v106 = objc_msgSendSuper2(&v130, sel_init);
        sub_1B8C71C1C((id *)&v131);
        objc_msgSend(v56, sel_setObject_forKey_, v106, v55);

        v58 = v127;
      }

      *(void *)v54 = v53;
      long long v107 = *(_OWORD *)&v136[16];
      *(_OWORD *)((char *)v54 + 8) = *(_OWORD *)v136;
      *(_OWORD *)((char *)v54 + 24) = v107;
      *(_OWORD *)((char *)v54 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v137;
      *((unsigned char *)v54 + 56) = v138;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(void *)v128 = v53;
      v59 = v53;
      sub_1B8C776F4(v59, (uint64_t)&v149);
      sub_1B8C75D5C();
      CGFloat v61 = v60;
      CGFloat v63 = v62;
      CGFloat v65 = v64;
      CGFloat v67 = v66;
      double v68 = sub_1B8C75F30(v60, v62, v64, v66);
      double v70 = v69;
      sub_1B8C7612C(0xCuLL, (uint64_t)&v131, v61, v63, v65, v67, v68);
      char v71 = v131;
      v72 = v133;
      v73 = v134;
      uint64_t v74 = v135;
      sub_1B8C76754(0xCuLL, (uint64_t)v136, v61, v63, v65, v67, v70);
      char v75 = v136[0];
      uint64_t v76 = *(void *)&v136[24];
      long long v77 = v137;
      sub_1B8C742A0((uint64_t)&v149);
      v146 = &type metadata for ProfileFromCGImage;
      v147 = &off_1F126C458;
      uint64_t v78 = swift_allocObject();
      uint64_t v144 = v78;
      *(void *)(v78 + 16) = v59;
      *(unsigned char *)(v78 + 24) = v71;
      *(_OWORD *)(v78 + 32) = v132;
      *(void *)(v78 + 48) = v72;
      *(void *)(v78 + 56) = v73;
      *(void *)(v78 + 64) = v74;
      *(unsigned char *)(v78 + 72) = v75;
      *(_OWORD *)(v78 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_OWORD *)&v136[8];
      *(void *)(v78 + 96) = v76;
      *(_OWORD *)(v78 + 104) = v77;
      *(CGFloat *)(v78 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v61;
      *(CGFloat *)(v78 + 128) = v63;
      *(CGFloat *)(v78 + 136) = v65;
      *(CGFloat *)(v78 + 144) = v67;
      *((void *)v128 + 1) = v59;
      sub_1B8C74334((uint64_t)&v144, (uint64_t)(v128 + 1));
      v79 = v59;
      BOOL v80 = sub_1B8C72200(v79, v65, v67);

      *((unsigned char *)v128 + 56) = v80;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v144);
    }
  }
  else
  {
    *(_OWORD *)((char *)v128 + 41) = 0u;
    v128[1] = 0u;
    v128[2] = 0u;
    _OWORD *v128 = 0u;

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B8C730C4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1B8CA37B0();
  if (v4 == 4)
  {
    uint64_t v6 = (a2 & 0x2000000000000000) != 0 ? HIBYTE(a2) & 0xF : a1 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v7 = 0;
        unsigned int v8 = 0;
        goto LABEL_21;
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v7 = 0;
        unsigned int v8 = 0;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v7 = 0;
        unsigned int v8 = 0;
        if ((a1 & 0x1000000000000000) == 0) {
LABEL_10:
        }
          sub_1B8CA3860();
      }
LABEL_13:
      for (unsigned int i = sub_1B8CA3870(); ; unsigned int i = sub_1B8CA3840())
      {
        uint64_t v11 = v10;
        if (i >= 0x10000)
        {
          uint64_t v16 = v4;
          unsigned __int16 v13 = sub_1B8CA3A10();
          uint64_t result = sub_1B8CA3A10();
          if (__CFADD__(v8 << 8, (unsigned __int16)result))
          {
            __break(1u);
            return result;
          }
          int v15 = ((v8 << 8) + (unsigned __int16)result) << 8;
          BOOL v12 = __CFADD__(v15, v13);
          unsigned int v8 = v15 + v13;
          uint64_t v4 = v16;
          if (v12)
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            swift_bridgeObjectRelease_n();
            uint64_t v5 = v8;
            return v5 | ((unint64_t)(v4 != 4) << 32);
          }
        }
        else
        {
          BOOL v12 = __CFADD__(i, v8 << 8);
          unsigned int v8 = i + (v8 << 8);
          if (v12) {
            goto LABEL_27;
          }
        }
        v7 += v11;
        if (v7 >= v6) {
          goto LABEL_28;
        }
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
            goto LABEL_10;
          }
          goto LABEL_13;
        }
LABEL_21:
        ;
      }
    }
  }
  uint64_t v5 = 0;
  return v5 | ((unint64_t)(v4 != 4) << 32);
}

uint64_t sub_1B8C73268()
{
  uint64_t v0 = (void *)sub_1B8C7973C(MEMORY[0x1E4FBC860]);
  sub_1B8CA36D0();
  swift_allocObject();
  sub_1B8CA36C0();
  sub_1B8C73DA4();
  sub_1B8CA36B0();
  swift_release();
  uint64_t v36 = v40 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(v40 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(v40 + 64);
  int64_t v37 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v4 = 0;
  while (1)
  {
    if (v3)
    {
      unint64_t v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v7 = v6 | (v4 << 6);
    }
    else
    {
      int64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_36;
      }
      if (v8 >= v37)
      {
LABEL_33:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v0;
      }
      unint64_t v9 = *(void *)(v36 + 8 * v8);
      ++v4;
      if (!v9)
      {
        int64_t v4 = v8 + 1;
        if (v8 + 1 >= v37) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v36 + 8 * v4);
        if (!v9)
        {
          int64_t v4 = v8 + 2;
          if (v8 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v36 + 8 * v4);
          if (!v9)
          {
            int64_t v10 = v8 + 3;
            if (v10 >= v37) {
              goto LABEL_33;
            }
            unint64_t v9 = *(void *)(v36 + 8 * v10);
            if (!v9)
            {
              while (1)
              {
                int64_t v4 = v10 + 1;
                if (__OFADD__(v10, 1)) {
                  goto LABEL_37;
                }
                if (v4 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v9 = *(void *)(v36 + 8 * v4);
                ++v10;
                if (v9) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v4 = v10;
          }
        }
      }
LABEL_21:
      unint64_t v3 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v4 << 6);
    }
    uint64_t v11 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v7);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    CGRect v14 = (uint64_t *)(*(void *)(v40 + 56) + 48 * v7);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v17 = v14[3];
    uint64_t v20 = v14[4];
    uint64_t v19 = v14[5];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = sub_1B8C7A644(v13, v12);
    uint64_t v24 = v0[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v0[3] >= v26)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v22) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1B8C7B38C();
        if (v27) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1B8C7ABBC(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = sub_1B8C7A644(v13, v12);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_38;
      }
      unint64_t v23 = v28;
      if (v27)
      {
LABEL_4:
        uint64_t v5 = (void *)(v0[7] + (v23 << 6));
        *uint64_t v5 = v16;
        v5[1] = v15;
        v5[2] = v18;
        void v5[3] = v17;
        v5[4] = v38;
        void v5[5] = v39;
        v5[6] = v20;
        v5[7] = v19;
        goto LABEL_5;
      }
    }
    v0[(v23 >> 6) + 8] |= 1 << v23;
    double v30 = (uint64_t *)(v0[6] + 16 * v23);
    *double v30 = v13;
    v30[1] = v12;
    double v31 = (void *)(v0[7] + (v23 << 6));
    *double v31 = v16;
    v31[1] = v15;
    v31[2] = v18;
    v31[3] = v17;
    v31[4] = v38;
    v31[5] = v39;
    v31[6] = v20;
    v31[7] = v19;
    uint64_t v32 = v0[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_35;
    }
    v0[2] = v34;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = sub_1B8CA3980();
  __break(1u);
  return result;
}

void sub_1B8C735F4(void *a1@<X0>, const __CTFont **a2@<X8>)
{
  sub_1B8C7973C(MEMORY[0x1E4FBC860]);
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1C998]);
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_init);
  id v6 = objc_allocWithZone(MEMORY[0x1E4F1C998]);
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel_init);
  id v9 = objc_allocWithZone(MEMORY[0x1E4F1C998]);
  id v10 = v8;
  id v11 = objc_msgSend(v9, sel_init);
  id v12 = a1;
  id v13 = v7;
  id v14 = v10;
  uint64_t v15 = (const __CTFont *)v12;
  id v16 = v11;
  uint64_t v17 = sub_1B8C730C4(1920233059, 0xE400000000000000);
  if ((v17 & 0x100000000) != 0 || (CFDataRef v18 = CTFontCopyTable(v15, v17, 0)) == 0)
  {
    unint64_t v23 = sub_1B8C7973C(MEMORY[0x1E4FBC860]);
  }
  else
  {
    CFDataRef v19 = v18;
    uint64_t v20 = sub_1B8CA36E0();
    unint64_t v22 = v21;

    unint64_t v23 = sub_1B8C73268();
    sub_1B8C73D4C(v20, v22);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  id v24 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, CTFontGetSize(v15));
  objc_msgSend(v13, sel_setObject_forKey_, v15, v24);

  swift_bridgeObjectRelease();
  *a2 = v15;
  a2[1] = (const __CTFont *)v23;
  a2[2] = (const __CTFont *)v13;
  a2[3] = (const __CTFont *)v14;
  a2[4] = (const __CTFont *)v16;
}

uint64_t sub_1B8C737EC(const __CTLine *a1)
{
  CTLineGetGlyphRuns(a1);
  type metadata accessor for CTRun(0);
  uint64_t result = sub_1B8CA37D0();
  __break(1u);
  return result;
}

id sub_1B8C73B38()
{
  swift_bridgeObjectRetain();
  sub_1B8CA37C0();
  sub_1B8C73C10();
  sub_1B8CA3810();
  sub_1B8CA37C0();
  swift_bridgeObjectRelease();
  sub_1B8CA37C0();
  id v0 = objc_allocWithZone(NSString);
  uint64_t v1 = (void *)sub_1B8CA3750();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithString_, v1);

  return v2;
}

unint64_t sub_1B8C73C10()
{
  unint64_t result = qword_1E9EEEC90;
  if (!qword_1E9EEEC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEEC90);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1B8C73CA8()
{
  unint64_t result = qword_1E9EEECA0;
  if (!qword_1E9EEECA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9EEEC98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEECA0);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B8C73D4C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1B8C73DA4()
{
  unint64_t result = qword_1E9EEECA8;
  if (!qword_1E9EEECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEECA8);
  }
  return result;
}

void sub_1B8C73DF8(CTLineRef line, size_t a2, char a3)
{
  size_t v4 = a2;
  double y = 0.0;
  double x = 0.0;
  size_t v8 = a2;
  if (a3)
  {
    CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(line, 1uLL);
    double x = BoundsWithOptions.origin.x;
    double y = BoundsWithOptions.origin.y;
    CGFloat width = BoundsWithOptions.size.width;
    CGFloat height = BoundsWithOptions.size.height;
    double v11 = CGRectGetWidth(BoundsWithOptions);
    if ((~*(void *)&v11 & 0x7FF0000000000000) != 0)
    {
      if (v11 > -9.22337204e18)
      {
        if (v11 < 9.22337204e18)
        {
          v16.origin.double x = x;
          v16.origin.double y = y;
          v16.size.CGFloat width = width;
          v16.size.CGFloat height = height;
          double v12 = CGRectGetHeight(v16);
          if ((~*(void *)&v12 & 0x7FF0000000000000) != 0)
          {
            if (v12 > -9.22337204e18)
            {
              if (v12 < 9.22337204e18)
              {
                size_t v8 = (uint64_t)v11;
                size_t v4 = (uint64_t)v12;
                goto LABEL_9;
              }
LABEL_19:
              __break(1u);
              return;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  id v14 = CGBitmapContextCreate(0, v8, v4, 8uLL, 0, DeviceRGB, 1u);

  if (v14)
  {
    if ((a3 & 1) == 0)
    {
      CGRect ImageBounds = CTLineGetImageBounds(line, v14);
      double x = ImageBounds.origin.x;
      double y = ImageBounds.origin.y;
    }
    CGContextTranslateCTM(v14, -x, -y);
    CTLineDraw(line, v14);
    CGBitmapContextCreateImage(v14);
  }
}

void sub_1B8C73F9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, void *a7, void *a8)
{
  if (a5)
  {
    uint64_t v15 = a6;
  }
  else
  {
    id v13 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *(double *)&a4);
    id v14 = (const __CTFont *)objc_msgSend(a7, sel_objectForKey_, v13);
    if (v14)
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v15 = CTFontCreateCopyWithAttributes((CTFontRef)a6, *(CGFloat *)&a4, 0, 0);
      objc_msgSend(a7, sel_setObject_forKey_, v15, v13);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B8CA8670;
  sub_1B8CA3780();
  uint64_t v17 = sub_1B8CA3750();
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v17;
  type metadata accessor for CTFont(0);
  *(void *)(inited + 64) = v18;
  *(void *)(inited + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v15;
  CFDataRef v19 = v15;
  sub_1B8C79884(inited);
  id v20 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  swift_bridgeObjectRetain();
  unint64_t v21 = (void *)sub_1B8CA3750();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1B8C7452C();
  unint64_t v22 = (void *)sub_1B8CA3720();
  swift_bridgeObjectRelease();
  CFAttributedStringRef v23 = (const __CFAttributedString *)objc_msgSend(v20, sel_initWithString_attributes_, v21, v22);

  id v24 = CTLineCreateWithAttributedString(v23);
  sub_1B8C737EC(v24);
  double Size = CTFontGetSize(v19);
  if ((~*(void *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (Size <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (Size >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return;
  }
  size_t v26 = (uint64_t)Size;
  id v27 = sub_1B8C73B38();
  if (objc_msgSend(a8, sel_objectForKey_, v27))
  {
LABEL_13:

    return;
  }
  sub_1B8C73DF8(v24, v26, a3 & 1);
  if (v28)
  {
    objc_msgSend(a8, sel_setObject_forKey_, v28, v27);
    goto LABEL_13;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_1B8C742A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B8C742CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 152, 7);
}

uint64_t sub_1B8C74334(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B8C74398(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B8C743F4(double a1, double a2)
{
  double v2 = a1 * a2;
  if (qword_1E9EEEBB0 != -1) {
    uint64_t result = swift_once();
  }
  if (v2 > *(double *)&qword_1E9EEFC60)
  {
    if (qword_1E9EEEBB8 != -1) {
      goto LABEL_17;
    }
    while (*(double *)&qword_1E9EEFC68 > v2)
    {
      if (qword_1E9EEEBC0 != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v3 = *(void *)(qword_1E9EEFC70 + 16);
      if (!v3 || v2 <= *(double *)(qword_1E9EEFC70 + 32) || v3 == 1) {
        break;
      }
      uint64_t v4 = 5;
      while (1)
      {
        uint64_t v5 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        if (v2 > *(double *)(qword_1E9EEFC70 + 8 * v4))
        {
          ++v4;
          if (v5 != v3) {
            continue;
          }
        }
        return result;
      }
      __break(1u);
LABEL_17:
      uint64_t result = swift_once();
    }
  }
  return result;
}

uint64_t sub_1B8C7451C()
{
  return MEMORY[0x1F4186498](v0, 80, 7);
}

unint64_t sub_1B8C7452C()
{
  unint64_t result = qword_1E9EEEC60;
  if (!qword_1E9EEEC60)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEEC60);
  }
  return result;
}

BOOL sub_1B8C74584(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1B8C7459C()
{
  return sub_1B8CA39C0();
}

uint64_t sub_1B8C745E4()
{
  return sub_1B8CA39B0();
}

uint64_t sub_1B8C74610()
{
  return sub_1B8CA39C0();
}

double sub_1B8C74654(double a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1B8C74E3C(v3);
  double v4 = 0.0;
  if (v5 <= a1) {
    return v4 + *(double *)(v1 + 40);
  }
  uint64_t v32 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 32);
  sub_1B8C75048((uint64_t)&v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1B8C74D5C(v3, v6);
  sub_1B8C742A0((uint64_t)&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  double v9 = 0.0;
  double v10 = 0.0;
  if (v8)
  {
    if (v8 == 1)
    {
      uint64_t v11 = 0;
LABEL_8:
      uint64_t v14 = v8 - v11;
      uint64_t v15 = (double *)(v7 + 8 * v11 + 32);
      do
      {
        double v16 = *v15++;
        double v10 = v10 + v16;
        --v14;
      }
      while (v14);
      goto LABEL_10;
    }
    uint64_t v11 = v8 & 0x7FFFFFFFFFFFFFFELL;
    double v12 = (double *)(v7 + 40);
    uint64_t v13 = v8 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v10 = v10 + *(v12 - 1) + *v12;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v8 != v11) {
      goto LABEL_8;
    }
  }
LABEL_10:
  swift_bridgeObjectRelease();
  double v17 = v10 / (double)v8;
  sub_1B8C75048((uint64_t)&v32);
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_1B8C74D5C(v18, v6);
  sub_1B8C742A0((uint64_t)&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20) {
    goto LABEL_18;
  }
  if (v20 == 1)
  {
    uint64_t v21 = 0;
    double v9 = 0.0;
LABEL_16:
    uint64_t v24 = v20 - v21;
    BOOL v25 = (double *)(v19 + 8 * v21 + 32);
    do
    {
      double v26 = *v25++;
      double v9 = v9 + v26;
      --v24;
    }
    while (v24);
    goto LABEL_18;
  }
  uint64_t v21 = v20 & 0x7FFFFFFFFFFFFFFELL;
  unint64_t v22 = (double *)(v19 + 40);
  double v9 = 0.0;
  uint64_t v23 = v20 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v9 = v9 + *(v22 - 1) + *v22;
    v22 += 2;
    v23 -= 2;
  }
  while (v23);
  if (v20 != v21) {
    goto LABEL_16;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  double v27 = v9 / (double)v20;
  double v28 = (v17 + v27) * 0.5;
  double v29 = vabdd_f64(v17, v27) / (v17 + v27);
  if (v27 >= v17) {
    double v30 = v27 - v28;
  }
  else {
    double v30 = v28 - v17;
  }
  double v4 = v30 * v29;
  return v4 + *(double *)(v1 + 40);
}

char *sub_1B8C74870(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECC0);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B8C7496C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECC8);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B8C74A68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECE0);
    double v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1B8C74B54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECD0);
    double v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECD8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B8C74C78(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  unint64_t result = (uint64_t)sub_1B8C74870((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B8C74D5C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1B8C7B730(0, v3, 0);
    uint64_t result = v11;
    uint64_t v6 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v7 = v8;
      uint64_t v12 = result;
      unint64_t v10 = *(void *)(result + 16);
      unint64_t v9 = *(void *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        sub_1B8C7B730((char *)(v9 > 1), v10 + 1, 1);
        uint64_t result = v12;
      }
      *(void *)(result + 16) = v10 + 1;
      *(double *)(result + 8 * v10 + 32) = (double)v7 / (double)a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B8C74E3C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1B8C74C78(v1);
  uint64_t v2 = a1;
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1B8C7B730(0, v3, 0);
    uint64_t v4 = 0;
    uint64_t v5 = v26;
    unint64_t v6 = *(void *)(v26 + 16);
    do
    {
      uint64_t v7 = *(void *)(v2 + 8 * v4 + 32);
      unint64_t v8 = *(void *)(v26 + 24);
      if (v6 >= v8 >> 1) {
        sub_1B8C7B730((char *)(v8 > 1), v6 + 1, 1);
      }
      ++v4;
      *(void *)(v26 + 16) = v6 + 1;
      *(double *)(v26 + 8 * v6++ + 32) = (double)v7;
    }
    while (v3 != v4);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  unint64_t v10 = *(void *)(v5 + 16);
  if (v10 >= 2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 + 3;
    double v13 = 0.0;
    do
    {
      if (v12 - 4 >= v10)
      {
        __break(1u);
        return result;
      }
      uint64_t v14 = v5 + 8 * v11++;
      double v13 = v13 + vabdd_f64(*(double *)(v14 + 32), *(double *)(v5 + 8 * v12--));
    }
    while (v10 >> 1 != v11);
    double v15 = *(double *)(v5 + 32);
    unint64_t v16 = v10 - 1;
    double v17 = (double *)(v5 + 40);
    unint64_t v18 = v10 - 1;
    double v19 = v15;
    do
    {
      double v20 = *v17++;
      double v21 = v20;
      if (v19 < v20) {
        double v19 = v21;
      }
      --v18;
    }
    while (v18);
    unint64_t v22 = (double *)(v5 + 40);
    do
    {
      double v23 = *v22++;
      double v24 = v23;
      if (v23 < v15) {
        double v15 = v24;
      }
      --v16;
    }
    while (v16);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8C75048(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SideProfile()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SideProfile(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SideProfile(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SideProfile(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SideProfile(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SideProfile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SideProfile()
{
  return &type metadata for SideProfile;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  uint64_t *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SideProfile.Side(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SideProfile.Side(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    uint64_t *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B8C75420);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1B8C75448(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1B8C75454(unsigned char *result, char a2)
{
  uint64_t *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SideProfile.Side()
{
  return &type metadata for SideProfile.Side;
}

unint64_t sub_1B8C75474()
{
  unint64_t result = qword_1E9EEECE8;
  if (!qword_1E9EEECE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEECE8);
  }
  return result;
}

void sub_1B8C754C8()
{
  qword_1E9EEECF0 = 0x3FF0000000000000;
}

void sub_1B8C754D8()
{
  qword_1E9EEECF8 = 0x3FF0000000000000;
}

uint64_t sub_1B8C754E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  CGFloat v88 = a8;
  uint64_t v96 = a6;
  char v97 = a7;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED08);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v14 = &v86[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  double v17 = &v86[-v16];
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v100 = &v86[-v19];
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v99 = &v86[-v21];
  MEMORY[0x1F4188790](v20);
  v98 = &v86[-v22];
  uint64_t result = sub_1B8CA3640();
  if (result < 0)
  {
LABEL_99:
    __break(1u);
    return result;
  }
  CGFloat v89 = v17;
  double v24 = v100;
  if (result)
  {
    uint64_t v25 = 0;
    BOOL v103 = (void (**)(unsigned char *, uint64_t))(v11 + 8);
    uint64_t v104 = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v92 = a1;
    char v93 = v14;
    uint64_t v108 = a3;
    uint64_t v87 = result;
    long long v107 = (void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v102 = v25;
      if (v25 == result) {
        goto LABEL_97;
      }
      uint64_t result = sub_1B8CA3630();
      if (result < 0) {
        break;
      }
      if (result)
      {
        uint64_t v26 = 0;
        id v105 = *v107;
        uint64_t v90 = v102 - 1;
        id v106 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v101 = result;
        while (1)
        {
          uint64_t v27 = a1;
          double v28 = v24;
          double v29 = v98;
          uint64_t v30 = v108;
          double v31 = v105;
          v105(v98, v108, v10);
          if (v26)
          {
            uint64_t v32 = *v103;
            (*v103)(v29, v10);
            BOOL v33 = v99;
            v31(v99, v30, v10);
            uint64_t v34 = v28;
            uint64_t v35 = v27;
            uint64_t v36 = v102;
          }
          else
          {
            uint64_t v37 = sub_1B8CA3640();
            uint64_t v32 = *v103;
            uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v103)(v29, v10);
            BOOL v38 = __OFSUB__(v37, 1);
            uint64_t v39 = v37 - 1;
            BOOL v33 = v99;
            if (v38) {
              goto LABEL_89;
            }
            uint64_t v34 = v28;
            v105(v99, v108, v10);
            uint64_t v36 = v102;
            if (v102 == v39)
            {
              v32(v33, v10);
              uint64_t v35 = v27;
LABEL_17:
              uint64_t v41 = v35;
              v105(v34, v108, v10);
LABEL_24:
              v32(v34, v10);
              BOOL v46 = 1;
              goto LABEL_25;
            }
            uint64_t v35 = v27;
          }
          uint64_t v40 = sub_1B8CA3630();
          uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v32)(v33, v10);
          if (__OFSUB__(v40, 1)) {
            goto LABEL_83;
          }
          if (!v36 && v26 == v40 - 1) {
            goto LABEL_17;
          }
          double v42 = (void (*)(unsigned char *, unsigned char *, uint64_t))v105;
          v105(v34, v108, v10);
          if (!(v26 | v36))
          {
            uint64_t v41 = v35;
            goto LABEL_24;
          }
          uint64_t result = sub_1B8CA3630();
          uint64_t v43 = result - 1;
          if (__OFSUB__(result, 1)) {
            goto LABEL_90;
          }
          unsigned __int8 v44 = v89;
          v42(v89, v34, v10);
          if (v26 == v43)
          {
            uint64_t v45 = sub_1B8CA3640();
            v32(v44, v10);
            uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v32)(v34, v10);
            if (__OFSUB__(v45, 1)) {
              goto LABEL_96;
            }
            uint64_t v41 = v35;
            BOOL v46 = v36 == v45 - 1;
          }
          else
          {
            uint64_t v41 = v35;
            v32(v44, v10);
            v32(v34, v10);
            BOOL v46 = 0;
          }
LABEL_25:
          uint64_t v47 = sub_1B8CA3680();
          uint64_t result = sub_1B8CA3660();
          uint64_t v48 = v47 * result;
          if ((unsigned __int128)(v47 * (__int128)result) >> 64 != (v47 * result) >> 63)
          {
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          uint64_t v49 = v48 * v36;
          if ((unsigned __int128)(v48 * (__int128)v36) >> 64 != (v48 * v36) >> 63) {
            goto LABEL_79;
          }
          uint64_t result = sub_1B8CA3670();
          uint64_t v50 = result * v26;
          if ((unsigned __int128)(result * (__int128)v26) >> 64 != (result * v26) >> 63) {
            goto LABEL_80;
          }
          BOOL v38 = __OFADD__(v49, v50);
          uint64_t v51 = v49 + v50;
          if (v38) {
            goto LABEL_81;
          }
          BOOL v38 = __OFADD__(v51, 3);
          uint64_t v52 = v51 + 3;
          if (v38) {
            goto LABEL_82;
          }
          unsigned int v53 = *(unsigned __int8 *)(v41 + v52);
          if (v53 <= 0x19 || !v46)
          {
            a1 = v41;
            if (v53 >= 0x1A) {
              goto LABEL_55;
            }
            goto LABEL_54;
          }
          uint64_t v55 = v108;
          if (v26)
          {
            uint64_t v56 = v26 - 1;
            if (v36) {
              goto LABEL_40;
            }
            uint64_t v57 = 1;
          }
          else
          {
            uint64_t v56 = 1;
            uint64_t v57 = 1;
            if (v36) {
LABEL_40:
            }
              uint64_t v57 = v90;
          }
          uint64_t v58 = sub_1B8CA3680();
          uint64_t result = sub_1B8CA3660();
          uint64_t v59 = v58 * result;
          if ((unsigned __int128)(v58 * (__int128)result) >> 64 != (v58 * result) >> 63) {
            goto LABEL_84;
          }
          uint64_t v60 = v59 * v36;
          if ((unsigned __int128)(v59 * (__int128)v36) >> 64 != (v59 * v36) >> 63) {
            goto LABEL_85;
          }
          uint64_t result = sub_1B8CA3670();
          uint64_t v61 = result * v56;
          if ((unsigned __int128)(result * (__int128)v56) >> 64 != (result * v56) >> 63) {
            goto LABEL_86;
          }
          BOOL v38 = __OFADD__(v60, v61);
          uint64_t v62 = v60 + v61;
          if (v38) {
            goto LABEL_87;
          }
          BOOL v38 = __OFADD__(v62, 3);
          uint64_t v63 = v62 + 3;
          if (v38) {
            goto LABEL_88;
          }
          a1 = v92;
          CGFloat v64 = v93;
          unsigned int v65 = *(unsigned __int8 *)(v92 + v63);
          v105(v93, v55, v10);
          if (v65 > 0x19)
          {
            v32(v64, v10);
LABEL_55:
            char v73 = 0;
            uint64_t v74 = *v94;
            if (*v94 >= v26) {
              uint64_t v74 = v26;
            }
            *uint64_t v94 = v74;
            uint64_t v75 = *v95;
            if (*v95 <= v26) {
              uint64_t v75 = v26;
            }
            *uint64_t v95 = v75;
            uint64_t v76 = *v96;
            if (*v96 >= v36) {
              uint64_t v76 = v36;
            }
            *uint64_t v96 = v76;
            uint64_t v77 = *v97;
            if (*v97 <= v36) {
              uint64_t v77 = v36;
            }
            *char v97 = v77;
            goto LABEL_64;
          }
          double v91 = v32;
          uint64_t v66 = sub_1B8CA3680();
          uint64_t result = sub_1B8CA3660();
          uint64_t v67 = v66 * result;
          if ((unsigned __int128)(v66 * (__int128)result) >> 64 != (v66 * result) >> 63) {
            goto LABEL_91;
          }
          uint64_t v68 = v67 * v57;
          if ((unsigned __int128)(v67 * (__int128)v57) >> 64 != (v67 * v57) >> 63) {
            goto LABEL_92;
          }
          uint64_t result = sub_1B8CA3670();
          uint64_t v69 = result * v26;
          if ((unsigned __int128)(result * (__int128)v26) >> 64 != (result * v26) >> 63) {
            goto LABEL_93;
          }
          BOOL v38 = __OFADD__(v68, v69);
          uint64_t v70 = v68 + v69;
          if (v38) {
            goto LABEL_94;
          }
          BOOL v38 = __OFADD__(v70, 3);
          uint64_t v71 = v70 + 3;
          if (v38) {
            goto LABEL_95;
          }
          unsigned int v72 = *(unsigned __int8 *)(a1 + v71);
          v91(v64, v10);
          if (v72 >= 0x1A) {
            goto LABEL_55;
          }
LABEL_54:
          char v73 = 1;
LABEL_64:
          double v24 = v100;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v106 = sub_1B8C74A68(0, *((void *)v106 + 2) + 1, 1, v106);
          }
          unint64_t v79 = *((void *)v106 + 2);
          unint64_t v78 = *((void *)v106 + 3);
          if (v79 >= v78 >> 1) {
            id v106 = sub_1B8C74A68((char *)(v78 > 1), v79 + 1, 1, v106);
          }
          ++v26;
          BOOL v80 = v106;
          *((void *)v106 + 2) = v79 + 1;
          v80[v79 + 32] = v73;
          if (v101 == v26) {
            goto LABEL_72;
          }
        }
      }
      id v106 = (char *)MEMORY[0x1E4FBC860];
LABEL_72:
      v81 = v88;
      CGFloat v82 = *v88;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v81 = v82;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        CGFloat v82 = sub_1B8C74B54(0, v82[2] + 1, 1, v82);
        *CGFloat v88 = v82;
      }
      unint64_t v85 = v82[2];
      unint64_t v84 = v82[3];
      if (v85 >= v84 >> 1)
      {
        CGFloat v82 = sub_1B8C74B54((void *)(v84 > 1), v85 + 1, 1, v82);
        *CGFloat v88 = v82;
      }
      uint64_t v25 = v102 + 1;
      v82[2] = v85 + 1;
      v82[v85 + 4] = v106;
      uint64_t result = v87;
      if (v25 == v87) {
        return result;
      }
    }
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  return result;
}

void sub_1B8C75D5C()
{
  CGFloat v1 = v0[1];
  CGFloat v2 = v0[2];
  CGFloat v3 = v0[3];
  CGFloat v4 = v0[4];
  sub_1B8C76DD8(1, 1, v1, v2, v3, v4);
  uint64_t v6 = v5;
  sub_1B8C76DD8(0, 1, v1, v2, v3, v4);
  uint64_t v8 = v7;
  sub_1B8C76DD8(1, 0, v1, v2, v3, v4);
  uint64_t v10 = v9;
  sub_1B8C76DD8(0, 0, v1, v2, v3, v4);
  uint64_t v12 = v8 - v6;
  if (__OFSUB__(v8, v6))
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = v11 - v10;
  if (__OFSUB__(v11, v10))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  BOOL v13 = __OFADD__(v15, 1);
  uint64_t v16 = v15 + 1;
  if (v13)
  {
LABEL_11:
    __break(1u);
    return;
  }
  CGFloat v20 = v1;
  double v17 = (double)v14;
  double v18 = (double)v16;
  v21.origin.double x = (double)v6;
  v21.origin.double y = (double)v10;
  v21.size.CGFloat width = (double)v14;
  v21.size.CGFloat height = (double)v16;
  double Width = CGRectGetWidth(v21);
  v22.origin.double x = (double)v6;
  v22.origin.double y = (double)v10;
  v22.size.CGFloat width = v17;
  v22.size.CGFloat height = v18;
  if (CGRectGetHeight(v22) >= Width)
  {
    v25.origin.double x = (double)v6;
    v25.origin.double y = (double)v10;
    v25.size.CGFloat width = v17;
    v25.size.CGFloat height = v18;
    CGRectGetHeight(v25);
    v26.origin.double x = v20;
    v26.origin.double y = v2;
    v26.size.CGFloat width = v3;
    v26.size.CGFloat height = v4;
    CGRectGetHeight(v26);
  }
  else
  {
    v23.origin.double x = (double)v6;
    v23.origin.double y = (double)v10;
    v23.size.CGFloat width = v17;
    v23.size.CGFloat height = v18;
    CGRectGetWidth(v23);
    v24.origin.double x = v20;
    v24.origin.double y = v2;
    v24.size.CGFloat width = v3;
    v24.size.CGFloat height = v4;
    CGRectGetWidth(v24);
  }
}

double sub_1B8C75F30(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat v9 = v4[1];
  CGFloat v10 = v4[2];
  CGFloat v11 = v4[3];
  CGFloat v12 = v4[4];
  v20.origin.double x = v9;
  v20.origin.double y = v10;
  v20.size.CGFloat width = v11;
  v20.size.CGFloat height = v12;
  double MinX = CGRectGetMinX(v20);
  v21.origin.double x = v9;
  v21.origin.double y = v10;
  v21.size.CGFloat width = v11;
  v21.size.CGFloat height = v12;
  double MaxX = CGRectGetMaxX(v21);
  v22.origin.double x = v9;
  v22.origin.double y = v10;
  v22.size.CGFloat width = v11;
  v22.size.CGFloat height = v12;
  CGRectGetMinY(v22);
  v23.origin.double x = v9;
  v23.origin.double y = v10;
  v23.size.CGFloat width = v11;
  v23.size.CGFloat height = v12;
  CGRectGetMaxY(v23);
  v24.origin.double x = a1;
  v24.origin.double y = a2;
  v24.size.CGFloat width = a3;
  v24.size.CGFloat height = a4;
  double v17 = CGRectGetMinX(v24);
  v25.origin.double x = a1;
  v25.origin.double y = a2;
  v25.size.CGFloat width = a3;
  v25.size.CGFloat height = a4;
  double v13 = CGRectGetMaxX(v25);
  v26.origin.double x = a1;
  v26.origin.double y = a2;
  v26.size.CGFloat width = a3;
  v26.size.CGFloat height = a4;
  CGRectGetMinY(v26);
  v27.origin.double x = a1;
  v27.origin.double y = a2;
  v27.size.CGFloat width = a3;
  v27.size.CGFloat height = a4;
  CGRectGetMaxY(v27);
  v28.origin.double x = a1;
  v28.origin.double y = a2;
  v28.size.CGFloat width = a3;
  v28.size.CGFloat height = a4;
  double Width = CGRectGetWidth(v28);
  v29.origin.double x = a1;
  v29.origin.double y = a2;
  v29.size.CGFloat width = a3;
  v29.size.CGFloat height = a4;
  CGRectGetHeight(v29);
  if (qword_1E9EEEBC8 != -1) {
    swift_once();
  }
  double v15 = *(double *)&qword_1E9EEECF0;
  if (qword_1E9EEEBD0 != -1) {
    swift_once();
  }
  return (v17 - MinX - (MaxX + -1.0 - (v13 + -1.0))) / Width * v15;
}

void sub_1B8C7612C(unint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>)
{
  double Height = CGRectGetHeight(*(CGRect *)&a3);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0) {
    goto LABEL_106;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  uint64_t v60 = sub_1B8C78FC4(a1, (uint64_t)Height);
  v61.origin.double x = a3;
  v61.origin.double y = a4;
  v61.size.CGFloat width = a5;
  v61.size.CGFloat height = a6;
  double Width = CGRectGetWidth(v61);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!a1)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    goto LABEL_17;
  }
  uint64_t v17 = sub_1B8CA37E0();
  uint64_t v18 = v17;
  *(void *)(v17 + 16) = a1;
  unint64_t v19 = (uint64_t)Width;
  CGRect v20 = (unint64_t *)(v17 + 32);
  if (a1 < 4)
  {
    unint64_t v21 = 0;
LABEL_15:
    unint64_t v25 = a1 - v21;
    do
    {
      *v20++ = v19;
      --v25;
    }
    while (v25);
    goto LABEL_17;
  }
  unint64_t v21 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v20 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v22 = vdupq_n_s64(v19);
  CGRect v23 = (int64x2_t *)(v17 + 48);
  unint64_t v24 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v23[-1] = v22;
    *CGRect v23 = v22;
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v21 != a1) {
    goto LABEL_15;
  }
LABEL_17:
  v62.origin.double x = a3;
  v62.origin.double y = a4;
  v62.size.CGFloat width = a5;
  v62.size.CGFloat height = a6;
  double v26 = CGRectGetWidth(v62);
  if ((~*(void *)&v26 & 0x7FF0000000000000) == 0)
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  uint64_t v56 = a2;
  if (!a1)
  {
    uint64_t v57 = MEMORY[0x1E4FBC860];
    goto LABEL_29;
  }
  uint64_t v27 = sub_1B8CA37E0();
  *(void *)(v27 + 16) = a1;
  unint64_t v28 = (uint64_t)v26;
  CGRect v29 = (unint64_t *)(v27 + 32);
  uint64_t v57 = v27;
  if (a1 < 4)
  {
    unint64_t v30 = 0;
LABEL_27:
    unint64_t v34 = a1 - v30;
    do
    {
      *v29++ = v28;
      --v34;
    }
    while (v34);
    goto LABEL_29;
  }
  unint64_t v30 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v29 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v31 = vdupq_n_s64(v28);
  uint64_t v32 = (int64x2_t *)(v27 + 48);
  unint64_t v33 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v32[-1] = v31;
    *uint64_t v32 = v31;
    v32 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v30 != a1) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v58 = *(void *)(v60 + 16);
  if (v58)
  {
    if (a4 > -9.22337204e18)
    {
      if (a4 < 9.22337204e18)
      {
        if ((~*(void *)&a3 & 0x7FF0000000000000) != 0
          && (*(void *)&a4 & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (a3 > -9.22337204e18)
          {
            if (a3 < 9.22337204e18)
            {
              unint64_t v35 = 0;
              uint64_t v59 = (uint64_t)a4;
              uint64_t v36 = (uint64_t)a3;
              while (v35 < *(void *)(v60 + 16))
              {
                uint64_t v37 = *(void *)(v60 + 32 + 8 * v35);
                unint64_t v38 = v59 + v37;
                if (__OFADD__(v59, v37)) {
                  goto LABEL_89;
                }
                v63.origin.double x = a3;
                v63.origin.double y = a4;
                v63.size.CGFloat width = a5;
                v63.size.CGFloat height = a6;
                double MaxX = CGRectGetMaxX(v63);
                if ((~*(void *)&MaxX & 0x7FF0000000000000) == 0) {
                  goto LABEL_90;
                }
                if (MaxX <= -9.22337204e18) {
                  goto LABEL_91;
                }
                if (MaxX >= 9.22337204e18) {
                  goto LABEL_92;
                }
                if (v36 < (uint64_t)MaxX)
                {
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    if (v38 < *(void *)(*(void *)v7 + 16))
                    {
                      uint64_t v40 = *(void *)(*(void *)v7 + 8 * v38 + 32);
                      uint64_t v41 = v40 + 32;
                      unint64_t v42 = *(void *)(v40 + 16);
                      if (v36 <= v42) {
                        uint64_t v43 = v42;
                      }
                      else {
                        uint64_t v43 = (uint64_t)a3;
                      }
                      uint64_t v44 = (uint64_t)a3;
                      while (1)
                      {
                        if (v43 == v44)
                        {
LABEL_87:
                          __break(1u);
                          goto LABEL_88;
                        }
                        if ((*(unsigned char *)(v41 + v44) & 1) == 0) {
                          break;
                        }
                        if ((uint64_t)MaxX == ++v44) {
                          goto LABEL_58;
                        }
                      }
                      if (__OFSUB__(v44, v36)) {
                        goto LABEL_104;
                      }
                      if (v35 < *(void *)(v18 + 16))
                      {
                        *(void *)(v18 + 32 + 8 * v35) = v44 - v36;
                        goto LABEL_58;
                      }
LABEL_105:
                      __break(1u);
LABEL_106:
                      __break(1u);
                      goto LABEL_107;
                    }
LABEL_103:
                    __break(1u);
LABEL_104:
                    __break(1u);
                    goto LABEL_105;
                  }
LABEL_102:
                  __break(1u);
                  goto LABEL_103;
                }
LABEL_58:
                v64.origin.double x = a3;
                v64.origin.double y = a4;
                v64.size.CGFloat width = a5;
                v64.size.CGFloat height = a6;
                double v45 = CGRectGetMaxX(v64);
                if ((~*(void *)&v45 & 0x7FF0000000000000) == 0) {
                  goto LABEL_93;
                }
                if (v45 <= -9.22337204e18) {
                  goto LABEL_94;
                }
                if (v45 >= 9.22337204e18) {
                  goto LABEL_95;
                }
                uint64_t v46 = (uint64_t)v45 - 1;
                if (__OFSUB__((uint64_t)v45, 1)) {
                  goto LABEL_96;
                }
                char v47 = 0;
                unint64_t v48 = v35 + 1;
                do
                {
                  unint64_t v49 = v46;
                  if (v46 <= v36)
                  {
                    if ((v46 != v36) | v47 & 1) {
                      goto LABEL_38;
                    }
                    char v47 = 1;
                    uint64_t v46 = (uint64_t)a3;
                    if ((v38 & 0x8000000000000000) != 0)
                    {
LABEL_83:
                      __break(1u);
LABEL_84:
                      __break(1u);
LABEL_85:
                      __break(1u);
LABEL_86:
                      __break(1u);
                      goto LABEL_87;
                    }
                  }
                  else
                  {
                    --v46;
                    if ((v38 & 0x8000000000000000) != 0) {
                      goto LABEL_83;
                    }
                  }
                  if (v38 >= *(void *)(*(void *)v7 + 16)) {
                    goto LABEL_84;
                  }
                  if ((v49 & 0x8000000000000000) != 0) {
                    goto LABEL_85;
                  }
                  uint64_t v50 = *(void *)(*(void *)v7 + 8 * v38 + 32);
                  if (v49 >= *(void *)(v50 + 16)) {
                    goto LABEL_86;
                  }
                }
                while ((*(unsigned char *)(v50 + v49 + 32) & 1) != 0);
                v65.origin.double x = a3;
                v65.origin.double y = a4;
                v65.size.CGFloat width = a5;
                v65.size.CGFloat height = a6;
                double v51 = CGRectGetMaxX(v65);
                if ((~*(void *)&v51 & 0x7FF0000000000000) == 0) {
                  goto LABEL_97;
                }
                if (v51 <= -9.22337204e18) {
                  goto LABEL_98;
                }
                if (v51 >= 9.22337204e18) {
                  goto LABEL_99;
                }
                unint64_t v52 = (uint64_t)v51 - v49;
                if (__OFSUB__((uint64_t)v51, v49)) {
                  goto LABEL_100;
                }
                BOOL v53 = __OFSUB__(v52, 1);
                unint64_t v54 = v52 - 1;
                if (v53) {
                  goto LABEL_101;
                }
                if (v35 >= *(void *)(v57 + 16))
                {
                  __break(1u);
                  goto LABEL_79;
                }
                *(void *)(v57 + 32 + 8 * v35) = v54;
LABEL_38:
                ++v35;
                if (v48 == v58) {
                  goto LABEL_79;
                }
              }
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
              goto LABEL_102;
            }
            goto LABEL_120;
          }
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
          goto LABEL_121;
        }
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
LABEL_79:
  v66.origin.double x = a3;
  v66.origin.double y = a4;
  v66.size.CGFloat width = a5;
  v66.size.CGFloat height = a6;
  double v55 = CGRectGetWidth(v66);
  if ((~*(void *)&v55 & 0x7FF0000000000000) == 0)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (v55 <= -9.22337204e18)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (v55 < 9.22337204e18)
  {
    *(unsigned char *)uint64_t v56 = 0;
    *(void *)(v56 + 8) = v60;
    *(void *)(v56 + 16) = v18;
    *(void *)(v56 + 24) = v57;
    *(void *)(v56 + 32) = (uint64_t)v55;
    *(double *)(v56 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = a7;
    return;
  }
LABEL_123:
  __break(1u);
}

void sub_1B8C76754(unint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D5>)
{
  double Width = CGRectGetWidth(*(CGRect *)&a3);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0) {
    goto LABEL_117;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v63 = sub_1B8C78FC4(a1, (uint64_t)Width);
  v64.origin.double x = a3;
  v64.origin.double y = a4;
  v64.size.CGFloat width = a5;
  v64.size.CGFloat height = a6;
  double Height = CGRectGetHeight(v64);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (Height >= 9.22337204e18)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  if (!a1)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    goto LABEL_17;
  }
  uint64_t v17 = sub_1B8CA37E0();
  uint64_t v18 = v17;
  *(void *)(v17 + 16) = a1;
  unint64_t v19 = (uint64_t)Height;
  CGRect v20 = (unint64_t *)(v17 + 32);
  if (a1 < 4)
  {
    unint64_t v21 = 0;
LABEL_15:
    unint64_t v25 = a1 - v21;
    do
    {
      *v20++ = v19;
      --v25;
    }
    while (v25);
    goto LABEL_17;
  }
  unint64_t v21 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v20 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v22 = vdupq_n_s64(v19);
  CGRect v23 = (int64x2_t *)(v17 + 48);
  unint64_t v24 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v23[-1] = v22;
    *CGRect v23 = v22;
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v21 != a1) {
    goto LABEL_15;
  }
LABEL_17:
  v65.origin.double x = a3;
  v65.origin.double y = a4;
  v65.size.CGFloat width = a5;
  v65.size.CGFloat height = a6;
  double v26 = CGRectGetHeight(v65);
  if ((~*(void *)&v26 & 0x7FF0000000000000) == 0)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  uint64_t v59 = a2;
  if (!a1)
  {
    uint64_t v60 = MEMORY[0x1E4FBC860];
    goto LABEL_29;
  }
  uint64_t v27 = sub_1B8CA37E0();
  *(void *)(v27 + 16) = a1;
  unint64_t v28 = (uint64_t)v26;
  CGRect v29 = (unint64_t *)(v27 + 32);
  uint64_t v60 = v27;
  if (a1 < 4)
  {
    unint64_t v30 = 0;
LABEL_27:
    unint64_t v34 = a1 - v30;
    do
    {
      *v29++ = v28;
      --v34;
    }
    while (v34);
    goto LABEL_29;
  }
  unint64_t v30 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v29 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v31 = vdupq_n_s64(v28);
  uint64_t v32 = (int64x2_t *)(v27 + 48);
  unint64_t v33 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v32[-1] = v31;
    *uint64_t v32 = v31;
    v32 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v30 != a1) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v61 = *(void *)(v63 + 16);
  if (v61)
  {
    if (a3 > -9.22337204e18)
    {
      if (a3 < 9.22337204e18)
      {
        if ((*(void *)&a3 & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(void *)&a4 & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (a4 > -9.22337204e18)
          {
            if (a4 < 9.22337204e18)
            {
              unint64_t v35 = 0;
              uint64_t v62 = (uint64_t)a3;
              uint64_t v36 = (uint64_t)a4;
              while (v35 < *(void *)(v63 + 16))
              {
                uint64_t v38 = *(void *)(v63 + 32 + 8 * v35);
                unint64_t v39 = v62 + v38;
                if (__OFADD__(v62, v38)) {
                  goto LABEL_97;
                }
                v66.origin.double x = a3;
                v66.origin.double y = a4;
                v66.size.CGFloat width = a5;
                v66.size.CGFloat height = a6;
                double MaxY = CGRectGetMaxY(v66);
                if ((~*(void *)&MaxY & 0x7FF0000000000000) == 0) {
                  goto LABEL_98;
                }
                if (MaxY <= -9.22337204e18) {
                  goto LABEL_99;
                }
                if (MaxY >= 9.22337204e18) {
                  goto LABEL_100;
                }
                if (v36 < (uint64_t)MaxY)
                {
                  if ((v39 & 0x8000000000000000) == 0)
                  {
                    if ((unint64_t)v36 <= *(void *)(*(void *)v7 + 16)) {
                      uint64_t v41 = *(void *)(*(void *)v7 + 16);
                    }
                    else {
                      uint64_t v41 = (uint64_t)a4;
                    }
                    uint64_t v42 = (uint64_t)a4;
                    while (1)
                    {
                      if (v41 == v42)
                      {
LABEL_94:
                        __break(1u);
LABEL_95:
                        __break(1u);
                        goto LABEL_96;
                      }
                      uint64_t v43 = *(void *)(*(void *)v7 + 32 + 8 * v42);
                      if ((int64_t)v39 >= *(void *)(v43 + 16)) {
                        goto LABEL_95;
                      }
                      if ((*(unsigned char *)(v43 + v39 + 32) & 1) == 0) {
                        break;
                      }
                      if ((uint64_t)MaxY == ++v42) {
                        goto LABEL_59;
                      }
                    }
                    if (__OFSUB__(v42, v36)) {
                      goto LABEL_112;
                    }
                    if (v35 < *(void *)(v18 + 16))
                    {
                      *(void *)(v18 + 32 + 8 * v35) = v42 - v36;
                      goto LABEL_59;
                    }
LABEL_113:
                    __break(1u);
LABEL_114:
                    __break(1u);
LABEL_115:
                    __break(1u);
LABEL_116:
                    __break(1u);
LABEL_117:
                    __break(1u);
                    goto LABEL_118;
                  }
LABEL_105:
                  __break(1u);
LABEL_106:
                  __break(1u);
LABEL_107:
                  __break(1u);
LABEL_108:
                  __break(1u);
LABEL_109:
                  __break(1u);
LABEL_110:
                  __break(1u);
LABEL_111:
                  __break(1u);
LABEL_112:
                  __break(1u);
                  goto LABEL_113;
                }
LABEL_59:
                v67.origin.double x = a3;
                v67.origin.double y = a4;
                v67.size.CGFloat width = a5;
                v67.size.CGFloat height = a6;
                double v44 = CGRectGetMaxY(v67);
                if ((~*(void *)&v44 & 0x7FF0000000000000) == 0) {
                  goto LABEL_101;
                }
                if (v44 <= -9.22337204e18) {
                  goto LABEL_102;
                }
                if (v44 >= 9.22337204e18) {
                  goto LABEL_103;
                }
                uint64_t v45 = (uint64_t)v44 - 1;
                if (__OFSUB__((uint64_t)v44, 1)) {
                  goto LABEL_104;
                }
                char v46 = 0;
                unint64_t v47 = v35 + 1;
                do
                {
                  unint64_t v48 = v45;
                  if (v45 <= v36)
                  {
                    if ((v45 != v36) | v46 & 1) {
                      goto LABEL_39;
                    }
                    char v46 = 1;
                    uint64_t v45 = (uint64_t)a4;
                    if ((v48 & 0x8000000000000000) != 0)
                    {
LABEL_90:
                      __break(1u);
LABEL_91:
                      __break(1u);
LABEL_92:
                      __break(1u);
LABEL_93:
                      __break(1u);
                      goto LABEL_94;
                    }
                  }
                  else
                  {
                    --v45;
                    if ((v48 & 0x8000000000000000) != 0) {
                      goto LABEL_90;
                    }
                  }
                  if (v48 >= *(void *)(*(void *)v7 + 16)) {
                    goto LABEL_91;
                  }
                  if ((v39 & 0x8000000000000000) != 0) {
                    goto LABEL_92;
                  }
                  uint64_t v49 = *(void *)(*(void *)v7 + 8 * v48 + 32);
                  if (v39 >= *(void *)(v49 + 16)) {
                    goto LABEL_93;
                  }
                }
                while ((*(unsigned char *)(v49 + v39 + 32) & 1) != 0);
                CGFloat v50 = a3;
                CGFloat v51 = a4;
                CGFloat v52 = a5;
                CGFloat v53 = a6;
                if (v48)
                {
                  double v54 = CGRectGetMaxY(*(CGRect *)&v50);
                  if ((~*(void *)&v54 & 0x7FF0000000000000) == 0) {
                    goto LABEL_106;
                  }
                  if (v54 <= -9.22337204e18) {
                    goto LABEL_107;
                  }
                  if (v54 >= 9.22337204e18) {
                    goto LABEL_108;
                  }
                  unint64_t v55 = (uint64_t)v54 - v48;
                  if (__OFSUB__((uint64_t)v54, v48)) {
                    goto LABEL_109;
                  }
                  BOOL v56 = __OFSUB__(v55, 1);
                  uint64_t v37 = v55 - 1;
                  if (v56) {
                    goto LABEL_110;
                  }
                  if (v35 >= *(void *)(v60 + 16)) {
                    goto LABEL_111;
                  }
                }
                else
                {
                  double v57 = CGRectGetHeight(*(CGRect *)&v50);
                  if ((~*(void *)&v57 & 0x7FF0000000000000) == 0) {
                    goto LABEL_114;
                  }
                  if (v57 <= -9.22337204e18) {
                    goto LABEL_115;
                  }
                  if (v57 >= 9.22337204e18) {
                    goto LABEL_116;
                  }
                  if (v35 >= *(void *)(v60 + 16))
                  {
                    __break(1u);
                    goto LABEL_86;
                  }
                  uint64_t v37 = (uint64_t)v57;
                }
                *(void *)(v60 + 32 + 8 * v35) = v37;
LABEL_39:
                ++v35;
                if (v47 == v61) {
                  goto LABEL_86;
                }
              }
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
              goto LABEL_105;
            }
            goto LABEL_131;
          }
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
LABEL_86:
  v68.origin.double x = a3;
  v68.origin.double y = a4;
  v68.size.CGFloat width = a5;
  v68.size.CGFloat height = a6;
  double v58 = CGRectGetHeight(v68);
  if ((~*(void *)&v58 & 0x7FF0000000000000) == 0)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (v58 <= -9.22337204e18)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if (v58 < 9.22337204e18)
  {
    *(unsigned char *)uint64_t v59 = 1;
    *(void *)(v59 + 8) = v63;
    *(void *)(v59 + 16) = v18;
    *(void *)(v59 + 24) = v60;
    *(void *)(v59 + 32) = (uint64_t)v58;
    *(double *)(v59 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = a7;
    return;
  }
LABEL_134:
  __break(1u);
}

void sub_1B8C76DD8(char a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a3);
  v46.origin.double x = a3;
  v46.origin.double y = a4;
  v46.size.CGFloat width = a5;
  v46.size.CGFloat height = a6;
  double MaxX = CGRectGetMaxX(v46);
  v47.origin.double x = a3;
  v47.origin.double y = a4;
  v47.size.CGFloat width = a5;
  v47.size.CGFloat height = a6;
  double MinY = CGRectGetMinY(v47);
  v48.origin.double x = a3;
  v48.origin.double y = a4;
  v48.size.CGFloat width = a5;
  v48.size.CGFloat height = a6;
  double MaxY = CGRectGetMaxY(v48);
  CGFloat v15 = a3;
  double v16 = a4;
  CGFloat v17 = a5;
  CGFloat v18 = a6;
  if ((a2 & 1) == 0) {
    goto LABEL_6;
  }
  CGFloat v15 = CGRectGetWidth(*(CGRect *)&v15) * 0.2;
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  double v16 = MinX;
  if (v15 >= 9.22337204e18)
  {
    __break(1u);
LABEL_6:
    CGFloat v15 = CGRectGetHeight(*(CGRect *)&v15) * 0.2;
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (v15 <= -9.22337204e18)
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    double v16 = MinY;
    if (v15 >= 9.22337204e18)
    {
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
  }
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v16 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v16 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  double v19 = MaxX + -1.0;
  double v20 = MaxY + -1.0;
  if (a2) {
    double v21 = v19;
  }
  else {
    double v21 = v20;
  }
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0) {
    goto LABEL_77;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v22 = (uint64_t)v15;
  uint64_t v23 = (uint64_t)v16;
  uint64_t v24 = (uint64_t)v21;
  uint64_t v37 = (uint64_t)v16;
  uint64_t v38 = (uint64_t)v15;
  uint64_t v36 = (uint64_t)v21;
  if (a1)
  {
    uint64_t v25 = v23 + v22;
    if (!__OFADD__(v23, v22))
    {
      unint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v44 = 1;
      uint64_t v24 = (uint64_t)v16;
      goto LABEL_23;
    }
    goto LABEL_85;
  }
  uint64_t v25 = v24 - v22;
  if (!__OFSUB__(v24, v22))
  {
    uint64_t v44 = -1;
    unint64_t v41 = 0x8000000000000000;
LABEL_23:
    uint64_t v26 = 0;
    char v27 = 0;
    unint64_t v28 = 0;
    char v29 = 0;
    BOOL v30 = (~*(void *)&MinX & 0x7FF0000000000000) == 0;
    if ((~*(void *)&v19 & 0x7FF0000000000000) == 0) {
      BOOL v30 = 1;
    }
    BOOL v43 = v30;
    BOOL v31 = (~*(void *)&MinY & 0x7FF0000000000000) == 0;
    if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
      BOOL v31 = 1;
    }
    BOOL v42 = v31;
    char v32 = 1;
LABEL_28:
    char v40 = v32;
    uint64_t v39 = v26;
    int64_t v33 = v24;
    while (1)
    {
      BOOL v34 = v25 >= v33;
      if (a1) {
        BOOL v34 = v33 >= v25;
      }
      if (v34)
      {
        if ((v33 != v25) | v27 & 1 || !(v29 & 1 | (v28 != 0x8000000000000000)))
        {
          if (a1)
          {
            if (!__OFADD__(v37, v38)) {
              return;
            }
            __break(1u);
          }
          if (__OFSUB__(v36, v38)) {
            goto LABEL_88;
          }
          return;
        }
        char v27 = 1;
        uint64_t v24 = v33;
        if (a2)
        {
LABEL_35:
          if (MinY <= -9.22337204e18)
          {
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          if (MinY >= 9.22337204e18) {
            goto LABEL_66;
          }
          if (v42) {
            goto LABEL_67;
          }
          if (v20 <= -9.22337204e18) {
            goto LABEL_68;
          }
          if (v20 >= 9.22337204e18) {
            goto LABEL_72;
          }
          if (sub_1B8C77270(v33, (uint64_t)MinY, (uint64_t)v20)) {
            return;
          }
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v24 = v33 + v44;
        if (__OFADD__(v33, v44))
        {
          char v29 = 0;
          unint64_t v28 = 0x8000000000000000;
          uint64_t v24 = v41;
          if (a2) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v28 = 0;
          char v29 = 1;
          if (a2) {
            goto LABEL_35;
          }
        }
      }
      if (MinX <= -9.22337204e18) {
        goto LABEL_65;
      }
      if (MinX >= 9.22337204e18) {
        goto LABEL_69;
      }
      if (v43) {
        goto LABEL_70;
      }
      if (v19 <= -9.22337204e18) {
        goto LABEL_71;
      }
      if (v19 >= 9.22337204e18) {
        goto LABEL_73;
      }
      if (sub_1B8C774A8(v33, (uint64_t)MinX, (uint64_t)v19)) {
        return;
      }
LABEL_53:
      int64_t v33 = v24;
      if ((v35 & 1) == 0)
      {
        char v32 = 0;
        if (v40) {
          goto LABEL_28;
        }
        if (__OFSUB__(v26, 3)) {
          goto LABEL_87;
        }
        char v32 = 0;
        if (v39 >= v26 - 3) {
          goto LABEL_28;
        }
        return;
      }
    }
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
}

BOOL sub_1B8C77270(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3 - a2;
  if (a3 > (uint64_t)a2)
  {
    if (a1 < 0)
    {
LABEL_34:
      __break(1u);
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v9 = *(void *)(*(void *)v4 + 16);
      BOOL v10 = v9 >= a2;
      unint64_t v11 = v9 - a2;
      if (v10) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)v4 + 8 * a2 + 32;
      CGFloat v3 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        if (!v12)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        if (*(void *)(*(void *)v13 + 16) <= a1) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(*(void *)v13 + a1 + 32) == 1)
        {
          if (v6)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              CGFloat v3 = sub_1B8C74870(0, *((void *)v3 + 2) + 1, 1, v3);
            }
            unint64_t v15 = *((void *)v3 + 2);
            unint64_t v14 = *((void *)v3 + 3);
            if (v15 >= v14 >> 1) {
              CGFloat v3 = sub_1B8C74870((char *)(v14 > 1), v15 + 1, 1, v3);
            }
            *((void *)v3 + 2) = v15 + 1;
            *(void *)&v3[8 * v15 + 32] = v6;
            uint64_t v6 = 0;
          }
        }
        else if (__OFADD__(v6++, 1))
        {
          goto LABEL_33;
        }
        unint64_t v5 = *((void *)v3 + 2);
        if (v5 >= 2) {
          goto LABEL_27;
        }
        --v12;
        v13 += 8;
        --v7;
      }
      while (v7);
      if (!v6) {
        goto LABEL_28;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_24:
        unint64_t v18 = *((void *)v3 + 2);
        unint64_t v17 = *((void *)v3 + 3);
        unint64_t v5 = v18 + 1;
        if (v18 >= v17 >> 1) {
          CGFloat v3 = sub_1B8C74870((char *)(v17 > 1), v18 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v5;
        *(void *)&v3[8 * v18 + 32] = v6;
        if (v5 >= 2) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }
    }
    CGFloat v3 = sub_1B8C74870(0, v5 + 1, 1, v3);
    goto LABEL_24;
  }
  CGFloat v3 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v5 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (v5 >= 2)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_28:
  if (v5)
  {
    uint64_t v20 = *((void *)v3 + 4);
    swift_bridgeObjectRelease();
    return CGRectGetHeight(*(CGRect *)(v4 + 8)) * 0.17 <= (double)v20;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

BOOL sub_1B8C774A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char v7 = 0;
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
LABEL_2:
  uint64_t v9 = 0;
  unint64_t v10 = a2;
  while (1)
  {
    uint64_t v11 = v9;
    if ((uint64_t)v10 < a3)
    {
      a2 = v10 + 1;
      if ((a1 & 0x8000000000000000) != 0) {
        goto LABEL_29;
      }
      goto LABEL_9;
    }
    if ((v10 != a3) | v7 & 1) {
      break;
    }
    char v7 = 1;
    a2 = a3;
    if ((a1 & 0x8000000000000000) != 0)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      uint64_t v8 = sub_1B8C74870(0, *((void *)v8 + 2) + 1, 1, v8);
LABEL_21:
      unint64_t v16 = *((void *)v8 + 2);
      unint64_t v15 = *((void *)v8 + 3);
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1) {
        uint64_t v8 = sub_1B8C74870((char *)(v15 > 1), v16 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v17;
      *(void *)&v8[8 * v16 + 32] = v11;
      if (v17 >= 2) {
        goto LABEL_24;
      }
      goto LABEL_26;
    }
LABEL_9:
    if (*(void *)(*(void *)v3 + 16) <= a1) {
      goto LABEL_30;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_31;
    }
    uint64_t v12 = *(void *)(*(void *)v3 + 8 * a1 + 32);
    if (v10 >= *(void *)(v12 + 16)) {
      goto LABEL_32;
    }
    if (*(unsigned char *)(v12 + v10 + 32) == 1)
    {
      uint64_t v9 = 0;
      unint64_t v10 = a2;
      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_1B8C74870(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v14 = *((void *)v8 + 2);
        unint64_t v13 = *((void *)v8 + 3);
        if (v14 >= v13 >> 1) {
          uint64_t v8 = sub_1B8C74870((char *)(v13 > 1), v14 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v14 + 1;
        *(void *)&v8[8 * v14 + 32] = v11;
        goto LABEL_2;
      }
    }
    else
    {
      unint64_t v10 = a2;
      uint64_t v9 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_33;
      }
    }
  }
  if (v9)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_21;
  }
  unint64_t v17 = *((void *)v8 + 2);
  if (v17 >= 2)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_26:
  if (v17)
  {
    uint64_t v19 = *((void *)v8 + 4);
    swift_bridgeObjectRelease();
    return CGRectGetWidth(*(CGRect *)(v3 + 8)) * 0.17 <= (double)v19;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

void sub_1B8C776F4(CGImage *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED00);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED08);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  uint64_t v30 = MEMORY[0x1E4FBC860];
  unint64_t v13 = a1;
  sub_1B8CA3800();
  sub_1B8C77A78((uint64_t)v31, (uint64_t)v32);
  if (*((void *)&v32[0] + 1) == 1)
  {

    uint64_t v14 = MEMORY[0x1E4FBC860];
    double v16 = 0.0;
    uint64_t v17 = Height;
    uint64_t v18 = Width;
    double v19 = 0.0;
LABEL_4:
    *(void *)a2 = v14;
    *(double *)(a2 + 8) = v19;
    *(double *)(a2 + 16) = v16;
    *(double *)(a2 + 24) = (double)v18;
    *(double *)(a2 + 32) = (double)v17;
    *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = Width;
    *(void *)(a2 + 48) = Height;
    return;
  }
  long long v27 = v32[0];
  long long v28 = v32[1];
  uint64_t v29 = v33;
  sub_1B8CA36A0();
  unint64_t v15 = v13;
  sub_1B8CA3690();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  int64_t v26 = CGImageGetWidth(v15);
  uint64_t v25 = 0;
  int64_t v24 = CGImageGetHeight(v15);
  uint64_t v23 = 0;
  MEMORY[0x1F4188790](v24);
  *(&v22 - 6) = (uint64_t)v10;
  *(&v22 - 5) = (uint64_t)&v26;
  *(&v22 - 4) = (uint64_t)&v25;
  *(&v22 - 3) = (uint64_t)&v24;
  *(&v22 - 2) = (uint64_t)&v23;
  *(&v22 - 1) = (uint64_t)&v30;
  sub_1B8CA3650();

  uint64_t v20 = v25 - v26;
  if (__OFSUB__(v25, v26))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v18 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v21 = v23 - v24;
  if (__OFSUB__(v23, v24))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v17 = v21 + 1;
  if (!__OFADD__(v21, 1))
  {
    double v19 = (double)v26;
    double v16 = (double)v24;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v14 = v30;
    goto LABEL_4;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1B8C77A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8C77AE0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8C77B40(uint64_t a1, uint64_t a2)
{
  return sub_1B8C754E8(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), *(uint64_t **)(v2 + 48), *(void ***)(v2 + 56));
}

void sub_1B8C77B64(double a1, double a2)
{
  uint64_t v3 = v2;
  int64_t Count = CGImageSourceGetCount(v2);
  if (Count < 2) {
    goto LABEL_44;
  }
  int64_t v7 = Count;
  size_t v30 = 0;
  size_t v32 = 0;
  size_t v8 = 0;
  uint64_t v9 = (void *)*MEMORY[0x1E4F2FD00];
  unint64_t v10 = (void *)*MEMORY[0x1E4F2FCE8];
  double v11 = 0.0;
  double v12 = 0.0;
  char v28 = 1;
  uint64_t v29 = 0x100000001;
  char v31 = 1;
  double v13 = 0.0;
  double v14 = 0.0;
  do
  {
    if (v7 == v8)
    {
      __break(1u);
      return;
    }
    CFDictionaryRef v15 = CGImageSourceCopyPropertiesAtIndex(v3, v8, 0);
    if (!v15) {
      goto LABEL_38;
    }
    CFDictionaryRef v16 = v15;
    *(void *)&long long v34 = 0;
    type metadata accessor for CFString(0);
    sub_1B8C77E90();
    sub_1B8CA3730();

    uint64_t v17 = v34;
    if (!(void)v34) {
      goto LABEL_38;
    }
    if (!*(void *)(v34 + 16))
    {
      long long v34 = 0u;
      long long v35 = 0u;
LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      sub_1B8C77EE8((uint64_t)&v34);
      goto LABEL_38;
    }
    id v18 = v9;
    unint64_t v19 = sub_1B8C7A750((uint64_t)v18);
    if (v20)
    {
      sub_1B8C77F48(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v34);
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }

    if (!*((void *)&v35 + 1)) {
      goto LABEL_16;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    double v21 = v33;
    if (*(void *)(v17 + 16))
    {
      id v22 = v10;
      unint64_t v23 = sub_1B8C7A750((uint64_t)v22);
      if (v24)
      {
        sub_1B8C77F48(*(void *)(v17 + 56) + 32 * v23, (uint64_t)&v34);
      }
      else
      {
        long long v34 = 0u;
        long long v35 = 0u;
      }
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v35 + 1)) {
      goto LABEL_17;
    }
    if (swift_dynamicCast())
    {
      double v25 = v33;
      if (v33 == a1 && v33 == a2)
      {
        long long v27 = v3;
        PrimaryImageIndedouble x = v8;
        goto LABEL_46;
      }
      if (v33 <= a1 || v33 <= a2)
      {
        if ((v29 & 1) != 0 || v11 < v33 && v12 < v33)
        {
          uint64_t v29 = 0;
          size_t v30 = v8;
          double v11 = v33;
          double v12 = v33;
        }
        else
        {
          LOBYTE(v29) = 0;
        }
      }
      else
      {
        if ((v28 & 1) != 0 || v33 - a1 < v13 - a1 || v33 - a2 < v14 - a2)
        {
          char v31 = 0;
          char v28 = 0;
          size_t v32 = v8;
          goto LABEL_39;
        }
        char v28 = 0;
      }
    }
LABEL_38:
    double v21 = v13;
    double v25 = v14;
LABEL_39:
    ++v8;
    double v13 = v21;
    double v14 = v25;
  }
  while (v7 != v8);
  if (v31) {
    PrimaryImageIndedouble x = v30;
  }
  else {
    PrimaryImageIndedouble x = v32;
  }
  if ((v31 & 1 & BYTE4(v29)) == 1) {
LABEL_44:
  }
    PrimaryImageIndedouble x = CGImageSourceGetPrimaryImageIndex(v3);
  long long v27 = v3;
LABEL_46:
  CGImageSourceCreateImageAtIndex(v27, PrimaryImageIndex, 0);
}

unint64_t sub_1B8C77E90()
{
  unint64_t result = qword_1E9EEEC48;
  if (!qword_1E9EEEC48)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEEC48);
  }
  return result;
}

uint64_t sub_1B8C77EE8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8C77F48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double centeredImageForEmoji(_:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4, double a5, double a6, double a7)
{
  memset(v15, 0, sizeof(v15));
  char v16 = 1;
  sub_1B8C7D274(a1, a2, (uint64_t)v15, 1, a4, 1, (uint64_t)v10, a5, a6, a7);
  sub_1B8C782BC((uint64_t)v10, (uint64_t)&v11);
  if (v11)
  {
    long long v9 = v13;
    *a3 = v12;
    a3[1] = v9;
    double result = *(double *)&v14;
    a3[2] = v14;
  }
  return result;
}

void *centeredImageForImageSource(_:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(double a1, double a2, double a3, uint64_t a4, _OWORD *a5, char a6)
{
  memset(v16, 0, sizeof(v16));
  char v17 = 1;
  sub_1B8C77B64(a1 * a3, a1 * a3);
  long long v12 = v11;
  if (v11)
  {
    sub_1B8C7D470(v11, (uint64_t)v16, 1, a6 & 1, v15, a1, a2, a3);
    long long v13 = v15[1];
    *a5 = v15[0];
    a5[1] = v13;
    a5[2] = v15[2];
  }
  return v12;
}

double getTransformForCentering(_:frameSize:contentsScale:isLowerLeftOrigin:)@<D0>(void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  memset(v11, 0, sizeof(v11));
  char v12 = 1;
  sub_1B8C7D470(a1, (uint64_t)v11, 1, a2, v9, a4, a5, a6);
  long long v7 = v9[1];
  *a3 = v9[0];
  a3[1] = v7;
  double result = *(double *)&v10;
  a3[2] = v10;
  return result;
}

double centeredImageForEmoji(_:in:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  *(double *)unint64_t v19 = a5;
  *(double *)&v19[1] = a6;
  *(double *)&v19[2] = a7;
  *(double *)&void v19[3] = a8;
  char v20 = 0;
  sub_1B8C7D274(a1, a2, (uint64_t)v19, 1, a4, 1, (uint64_t)v14, a9, a10, a11);
  sub_1B8C782BC((uint64_t)v14, (uint64_t)&v15);
  if (v15)
  {
    long long v13 = v17;
    *a3 = v16;
    a3[1] = v13;
    double result = *(double *)&v18;
    a3[2] = v18;
  }
  return result;
}

void *centeredImageForImageSource(_:in:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, _OWORD *a9, char a10)
{
  *(double *)char v20 = a1;
  *(double *)&v20[1] = a2;
  *(double *)&v20[2] = a3;
  *(double *)&v20[3] = a4;
  char v21 = 0;
  sub_1B8C77B64(a5 * a7, a5 * a7);
  long long v16 = v15;
  if (v15)
  {
    sub_1B8C7D470(v15, (uint64_t)v20, 1, a10 & 1, v19, a5, a6, a7);
    long long v17 = v19[1];
    *a9 = v19[0];
    a9[1] = v17;
    a9[2] = v19[2];
  }
  return v16;
}

double getTransformForCentering(_:in:frameSize:contentsScale:isLowerLeftOrigin:)@<D0>(void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>)
{
  *(double *)uint64_t v15 = a4;
  *(double *)&v15[1] = a5;
  *(double *)&_OWORD v15[2] = a6;
  *(double *)&_OWORD v15[3] = a7;
  char v16 = 0;
  sub_1B8C7D470(a1, (uint64_t)v15, 1, a2, v13, a8, a9, a10);
  long long v11 = v13[1];
  *a3 = v13[0];
  a3[1] = v11;
  double result = *(double *)&v14;
  a3[2] = v14;
  return result;
}

uint64_t sub_1B8C782BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1B8C78324()
{
  return *(double *)(v0 + 48);
}

double sub_1B8C7832C()
{
  return *(double *)v0;
}

double sub_1B8C78338()
{
  double x = v0->origin.x;
  CGRectGetHeight(*v0);
  return x;
}

void sub_1B8C7838C(double a1, double a2, double a3, double a4, double a5)
{
  double v5 = round(a1 * a5);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  double v6 = round(a2 * a5);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  double v7 = round(a3 * a5);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v8 = round(a4 * a5);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8 >= 9.22337204e18) {
LABEL_25:
  }
    __break(1u);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PrecomputedProfile(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PrecomputedProfile(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PrecomputedProfile()
{
  return &type metadata for PrecomputedProfile;
}

double sub_1B8C78544()
{
  double v0 = sub_1B8C74654(0.18);
  sub_1B8C74654(0.18);
  return v0;
}

double sub_1B8C785C4()
{
  return *(double *)(v0 + 104);
}

double sub_1B8C785D0()
{
  double v1 = *(double *)(v0 + 104);
  CGFloat v2 = *(double *)(v0 + 112);
  CGFloat v3 = *(double *)(v0 + 120);
  CGFloat v4 = *(double *)(v0 + 128);
  CGImageGetHeight(*(CGImageRef *)v0);
  v6.origin.double x = v1;
  v6.origin.double y = v2;
  v6.size.CGFloat width = v3;
  v6.size.CGFloat height = v4;
  CGRectGetHeight(v6);
  return v1;
}

uint64_t sub_1B8C78638(uint64_t *a1, uint64_t a2)
{
  CGFloat v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_1B8CA3990();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *CGFloat v3 = 0x8000000000000000;
    sub_1B8C789A4(a2, v9, isUniquelyReferenced_nonNull_native);
    *CGFloat v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B8C78734()
{
  double v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED28);
  uint64_t result = sub_1B8CA3830();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    long long v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_31;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_31;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64) {
                bzero((void *)(v2 + 56), 8 * v10);
              }
              else {
                *uint64_t v6 = v26;
              }
              double v1 = v27;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_37;
                }
                if (v5 >= v10) {
                  goto LABEL_31;
                }
                unint64_t v16 = v6[v5];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
LABEL_21:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = sub_1B8CA3990();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1B8C789A4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1B8C78734();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1B8C78AC8();
      goto LABEL_14;
    }
    sub_1B8C78C4C();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_1B8CA3990();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_1B8CA3970();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1B8C78AC8()
{
  double v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED28);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B8CA3820();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = v19 + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v13) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B8C78C4C()
{
  double v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED28);
  uint64_t result = sub_1B8CA3830();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = sub_1B8CA3990();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    double v1 = v26;
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

char *sub_1B8C78E9C(uint64_t a1)
{
  return sub_1B8C7496C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B8C78EB0(uint64_t result)
{
  uint64_t v2 = v1;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return v6;
    }
    if (v7 == v3) {
      break;
    }
    uint64_t v8 = *(void *)(v5 + 8 * v3++);
    uint64_t result = sub_1B8C78638(&v12, v8);
    if (result)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = v6;
      uint64_t v11 = v2;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1B8C7B710(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v13;
      }
      unint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        uint64_t result = (uint64_t)sub_1B8C7B710((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v6 = v13;
      }
      *(void *)(v6 + 16) = v10 + 1;
      *(void *)(v6 + 8 * v10 + 32) = v8;
      uint64_t v2 = v11;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B8C78FC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = &unk_1F126C430;
  if (a1 < 2) {
    return (uint64_t)v3;
  }
  int64_t v4 = a2;
  if (a2 < 2) {
    return (uint64_t)v3;
  }
  if (a1 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECC0);
    unint64_t v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_1B8CA8760;
    *((void *)v3 + 4) = 0;
    *((void *)v3 + 5) = v4 - 1;
    return (uint64_t)v3;
  }
  double v6 = (double)a2;
  double v7 = (double)a2 / ((double)a1 + -1.0);
  if (v7 == 0.0) {
    goto LABEL_44;
  }
  unint64_t v2 = MEMORY[0x1E4FBC860];
  if (v7 > 0.0)
  {
    uint64_t v10 = 0;
    unint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    double v11 = 0.0;
    while (!__OFADD__(v10, 1))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_1B8C7496C(0, *((void *)v3 + 2) + 1, 1, (char *)v3);
      }
      unint64_t v13 = *((void *)v3 + 2);
      unint64_t v12 = *((void *)v3 + 3);
      int64_t v4 = v13 + 1;
      if (v13 >= v12 >> 1) {
        unint64_t v3 = sub_1B8C7496C((char *)(v12 > 1), v13 + 1, 1, (char *)v3);
      }
      *((double *)v3 + v13 + 4) = v11;
      double v11 = (double)(v10 + 1) * v7 + 0.0;
      *((void *)v3 + 2) = v4;
      BOOL v14 = v11 <= v6;
      if (v7 > 0.0) {
        BOOL v14 = v11 >= v6;
      }
      ++v10;
      if (v14) {
        goto LABEL_9;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  int64_t v4 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  unint64_t v3 = (void *)MEMORY[0x1E4FBC860];
LABEL_9:
  double v6 = v6 + -1.0;
  if (v4 < a1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_11:
      unint64_t v9 = *((void *)v3 + 2);
      unint64_t v8 = *((void *)v3 + 3);
      int64_t v4 = v9 + 1;
      if (v9 >= v8 >> 1) {
        unint64_t v3 = sub_1B8C7496C((char *)(v8 > 1), v9 + 1, 1, (char *)v3);
      }
      *((void *)v3 + 2) = v4;
      *((double *)v3 + v9 + 4) = v6;
      goto LABEL_29;
    }
LABEL_45:
    unint64_t v3 = sub_1B8C7496C(0, v4 + 1, 1, (char *)v3);
    goto LABEL_11;
  }
  if (v4 != a1)
  {
LABEL_28:
    if (!v4)
    {
      swift_bridgeObjectRelease();
LABEL_37:
      uint64_t v20 = swift_bridgeObjectRetain();
      unint64_t v3 = (void *)sub_1B8C78EB0(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
LABEL_29:
    swift_bridgeObjectRetain();
    sub_1B8C7B710(0, v4, 0);
    uint64_t v16 = 0;
    unint64_t v17 = v2;
    do
    {
      double v6 = *((double *)v3 + v16 + 4);
      if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v6 <= -9.22337204e18) {
        goto LABEL_41;
      }
      if (v6 >= 9.22337204e18) {
        goto LABEL_42;
      }
      unint64_t v19 = *(void *)(v17 + 16);
      unint64_t v18 = *(void *)(v17 + 24);
      unint64_t v2 = v19 + 1;
      if (v19 >= v18 >> 1) {
        sub_1B8C7B710((char *)(v18 > 1), v19 + 1, 1);
      }
      ++v16;
      *(void *)(v17 + 16) = v2;
      *(void *)(v17 + 8 * v19 + 32) = (uint64_t)v6;
    }
    while (v4 != v16);
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B8C78E9C((uint64_t)v3);
    unint64_t v3 = (void *)result;
  }
  if (*((void *)v3 + 2) >= (unint64_t)a1)
  {
    *((double *)v3 + a1 + 3) = v6;
    int64_t v4 = *((void *)v3 + 2);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t destroy for ProfileFromCGImage(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_OWORD *)(a2 + 120);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = result;
  return result;
}

uint64_t assignWithTake for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileFromCGImage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileFromCGImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileFromCGImage()
{
  return &type metadata for ProfileFromCGImage;
}

unint64_t sub_1B8C7973C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDD8);
  uint64_t v2 = (void *)sub_1B8CA38B0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    uint64_t v9 = v4[1];
    uint64_t v10 = v4[2];
    uint64_t v11 = v4[3];
    uint64_t v12 = v4[4];
    uint64_t v13 = v4[5];
    uint64_t v14 = v4[6];
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B8C7A644(v5, v6);
    if (v16) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v17 = v5;
    v17[1] = v6;
    unint64_t v18 = (void *)(v2[7] + (result << 6));
    *unint64_t v18 = v7;
    v18[1] = v8;
    v18[2] = v9;
    v18[3] = v10;
    v18[4] = v11;
    v18[5] = v12;
    v18[6] = v13;
    v18[7] = v14;
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v2[2] = v21;
    v4 += 10;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B8C79884(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDC0);
  uint64_t v2 = sub_1B8CA38B0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1B8C7CBF4(v6, (uint64_t)&v13);
    uint64_t v7 = v13;
    unint64_t result = sub_1B8C7A6BC(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1B8C7CC5C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B8C799A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDB8);
  uint64_t v2 = (void *)sub_1B8CA38B0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    uint64_t v8 = v4[1];
    uint64_t v9 = v4[2];
    uint64_t v10 = v4[3];
    uint64_t v11 = v4[4];
    uint64_t v12 = v4[5];
    swift_bridgeObjectRetain();
    unint64_t result = sub_1B8C7A644(v5, v6);
    if (v14) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v15 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v15 = v5;
    v15[1] = v6;
    char v16 = (void *)(v2[7] + 48 * result);
    *char v16 = v7;
    v16[1] = v8;
    _OWORD v16[2] = v9;
    void v16[3] = v10;
    v16[4] = v11;
    v16[5] = v12;
    uint64_t v17 = v2[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v2[2] = v19;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

EmojiFoundation::EmojiCenteringData __swiftcall EmojiCenteringData.init(font:emojis:)(CTFontRef font, Swift::String emojis)
{
  object = emojis._object;
  countAndFlagsBits = (CGImage *)emojis._countAndFlagsBits;
  uint64_t v5 = v2;
  uint64_t v6 = font;
  sub_1B8C735F4(v6, v18);
  double Size = CTFontGetSize(v6);
  double v11 = Size;
  if ((~*(void *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  double Size = -9.22337204e18;
  if (v11 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  double Size = 9.22337204e18;
  if (v11 >= 9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = v19;
  uint64_t v13 = v18[0];
  sub_1B8C7BA6C(v18[0], v19, countAndFlagsBits, (uint64_t)object, (uint64_t)v11);
  uint64_t v15 = v14;

  uint64_t v21 = v18[1];
  sub_1B8C742A0((uint64_t)&v21);
  char v16 = v18[2];

  uint64_t v17 = v20;
  swift_bridgeObjectRelease();

  *(double *)uint64_t v5 = v11;
  *(double *)(v5 + 8) = v11;
  *(void *)(v5 + 16) = v15;
  *(void *)(v5 + 24) = 1;
LABEL_8:
  result.size.CGFloat height = v10;
  result.size.CGFloat width = Size;
  result.version = v8;
  result.profiles._rawCFStringRef Value = v7;
  return result;
}

BOOL sub_1B8C79BEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B8C79C00()
{
  uint64_t v1 = 0x73656C69666F7270;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F6973726576;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1702521203;
  }
}

uint64_t sub_1B8C79C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B8C7C724(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B8C79C7C()
{
  return 0;
}

void sub_1B8C79C88(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B8C79C94(uint64_t a1)
{
  unint64_t v2 = sub_1B8C7C178();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B8C79CD0(uint64_t a1)
{
  unint64_t v2 = sub_1B8C7C178();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t EmojiCenteringData.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED30);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v12 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8C7C178();
  sub_1B8CA3A00();
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  char v15 = 0;
  type metadata accessor for CGSize(0);
  sub_1B8C7CC6C(&qword_1E9EEED40, type metadata accessor for CGSize);
  sub_1B8CA3900();
  if (!v2)
  {
    uint64_t v13 = v12;
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED48);
    sub_1B8C7C220(&qword_1E9EEED50, (void (*)(void))sub_1B8C7C1CC);
    sub_1B8CA3900();
    LOBYTE(v13) = 2;
    sub_1B8CA38F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t EmojiCenteringData.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED60);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8C7C178();
  sub_1B8CA39E0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  type metadata accessor for CGSize(0);
  char v15 = 0;
  sub_1B8C7CC6C(&qword_1E9EEED68, type metadata accessor for CGSize);
  sub_1B8CA38E0();
  uint64_t v9 = v14[0];
  uint64_t v10 = v14[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEED48);
  char v15 = 1;
  sub_1B8C7C220(&qword_1E9EEED70, (void (*)(void))sub_1B8C7C29C);
  sub_1B8CA38E0();
  uint64_t v11 = v14[0];
  LOBYTE(v14[0]) = 2;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1B8CA38D0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B8C7A1F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return EmojiCenteringData.init(from:)(a1, a2);
}

uint64_t sub_1B8C7A210(void *a1)
{
  return EmojiCenteringData.encode(to:)(a1);
}

void sub_1B8C7A228(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8CA39F0();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  sub_1B8CA3930();
  double v3 = *(double *)v1;
  if ((~*(void *)v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  double v4 = *(double *)(v1 + 8);
  CGFloat v5 = *(double *)(v1 + 16);
  CGFloat v6 = *(double *)(v1 + 24);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B8CA3940();
  if (v2)
  {
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return;
  }
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0) {
    goto LABEL_24;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B8CA3940();
  v17.origin.double x = v3;
  v17.origin.double y = v4;
  v17.size.CGFloat width = v5;
  v17.size.CGFloat height = v6;
  double Width = CGRectGetWidth(v17);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0) {
    goto LABEL_27;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B8CA3940();
  v18.origin.double x = v3;
  v18.origin.double y = v4;
  v18.size.CGFloat width = v5;
  v18.size.CGFloat height = v6;
  double Height = CGRectGetHeight(v18);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0) {
    goto LABEL_30;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (Height < 9.22337204e18)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    sub_1B8CA3940();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
    sub_1B8CA3930();
    uint64_t v9 = *(void *)(v1 + 40);
    uint64_t v16 = *(void *)(v1 + 32);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    sub_1B8C7C8BC();
    sub_1B8CA3950();
    uint64_t v16 = v9;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    sub_1B8CA3950();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

double sub_1B8C7A594@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B8C7C910(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

void sub_1B8C7A5D8(void *a1)
{
}

BOOL sub_1B8C7A5F0(CGRect *a1, CGRect *a2)
{
  double x = a1[1].origin.x;
  double y = a1[1].origin.y;
  double v5 = a2[1].origin.x;
  double v4 = a2[1].origin.y;
  BOOL result = CGRectEqualToRect(*a1, *a2);
  if (result) {
    return y == v4 && x == v5;
  }
  return result;
}

unint64_t sub_1B8C7A644(uint64_t a1, uint64_t a2)
{
  sub_1B8CA39A0();
  sub_1B8CA37A0();
  uint64_t v4 = sub_1B8CA39C0();
  return sub_1B8C7A804(a1, a2, v4);
}

unint64_t sub_1B8C7A6BC(uint64_t a1)
{
  sub_1B8CA3780();
  sub_1B8CA39A0();
  sub_1B8CA37A0();
  uint64_t v2 = sub_1B8CA39C0();
  swift_bridgeObjectRelease();
  return sub_1B8C7A8E8(a1, v2);
}

unint64_t sub_1B8C7A750(uint64_t a1)
{
  sub_1B8CA39A0();
  type metadata accessor for CFString(0);
  sub_1B8C7CC6C(&qword_1E9EEEDE0, type metadata accessor for CFString);
  sub_1B8CA3700();
  uint64_t v2 = sub_1B8CA39C0();
  return sub_1B8C7AA60(a1, v2);
}

unint64_t sub_1B8C7A804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B8CA3960() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B8CA3960() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1B8C7A8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1B8CA3780();
    uint64_t v8 = v7;
    if (v6 == sub_1B8CA3780() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1B8CA3960();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1B8CA3780();
          uint64_t v15 = v14;
          if (v13 == sub_1B8CA3780() && v15 == v16) {
            break;
          }
          char v18 = sub_1B8CA3960();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1B8C7AA60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1B8C7CC6C(&qword_1E9EEEDE0, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = sub_1B8CA36F0();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_1B8CA36F0();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1B8C7ABBC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDD8);
  char v6 = a2;
  uint64_t v7 = sub_1B8CA38A0();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      size_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      double v33 = (long long *)(*(void *)(v5 + 56) + (v22 << 6));
      long long v39 = v33[2];
      long long v40 = v33[1];
      long long v37 = *v33;
      long long v38 = v33[3];
      if ((v6 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_1B8CA39A0();
      sub_1B8CA37A0();
      uint64_t result = sub_1B8CA39C0();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
      *uint64_t v19 = v32;
      v19[1] = v31;
      BOOL v20 = (_OWORD *)(*(void *)(v8 + 56) + (v18 << 6));
      *BOOL v20 = v37;
      v20[1] = v40;
      v20[2] = v39;
      v20[3] = v38;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_1B8C7AEDC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDB8);
  char v36 = a2;
  uint64_t v6 = sub_1B8CA38A0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v35[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v36)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v35[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = (long long *)(*(void *)(v5 + 56) + 48 * v21);
      long long v39 = v32[1];
      long long v37 = *v32;
      long long v38 = v32[2];
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_1B8CA39A0();
      sub_1B8CA37A0();
      uint64_t result = sub_1B8CA39C0();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v17);
      *uint64_t v19 = v37;
      v19[1] = v39;
      v19[2] = v38;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1B8C7B200(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1B8C7A644(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B8C7B54C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (_OWORD *)(v18[7] + 48 * v12);
      long long v20 = a1[1];
      *uint64_t v19 = *a1;
      v19[1] = v20;
      v19[2] = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  sub_1B8C7AEDC(result, a4 & 1);
  uint64_t result = sub_1B8C7A644(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    uint64_t result = sub_1B8CA3980();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  int64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  unint64_t v23 = (_OWORD *)(v18[7] + 48 * v12);
  long long v24 = a1[1];
  *unint64_t v23 = *a1;
  v23[1] = v24;
  v23[2] = a1[2];
  uint64_t v25 = v18[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v27;
  return swift_bridgeObjectRetain();
}

void *sub_1B8C7B38C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDD8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B8CA3890();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = v15 << 6;
    char v21 = (long long *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    long long v23 = *v21;
    long long v24 = v21[1];
    long long v25 = v21[2];
    long long v26 = v21[3];
    void *v22 = v19;
    v22[1] = v18;
    uint64_t v27 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *uint64_t v27 = v23;
    v27[1] = v24;
    void v27[2] = v25;
    void v27[3] = v26;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B8C7B54C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1B8CA3890();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    char v21 = (long long *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    long long v23 = *v21;
    long long v24 = v21[1];
    long long v25 = v21[2];
    void *v22 = v19;
    v22[1] = v18;
    long long v26 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *long long v26 = v23;
    v26[1] = v24;
    v26[2] = v25;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1B8C7B710(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B8C7B770(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B8C7B730(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B8C7B86C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B8C7B750(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B8C7B968(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1B8C7B770(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1B8C7B86C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECC8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1B8C7B968(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDD0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_1B8C7BA6C(void *a1, void *a2, CGImage *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (CGImage *)MEMORY[0x1E4FBC860];
  unint64_t v71 = sub_1B8C799A0(MEMORY[0x1E4FBC860]);
  uint64_t v77 = a3;
  uint64_t v78 = a4;
  v93[0] = 0;
  v93[1] = 0xE000000000000000;
  sub_1B8C7CB20();
  uint64_t v9 = sub_1B8CA37F0();
  int64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v77 = v8;
    sub_1B8C7B750(0, v10, 0);
    int64_t v11 = v8;
    uint64_t v12 = (uint64_t *)(v9 + 56);
    do
    {
      uint64_t v13 = *(v12 - 3);
      uint64_t v14 = *(v12 - 2);
      uint64_t v15 = *(v12 - 1);
      uint64_t v16 = *v12;
      swift_bridgeObjectRetain();
      uint64_t v17 = MEMORY[0x1BA9C8AB0](v13, v14, v15, v16);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v77 = v11;
      unint64_t v21 = *((void *)v11 + 2);
      unint64_t v20 = *((void *)v11 + 3);
      if (v21 >= v20 >> 1)
      {
        sub_1B8C7B750((char *)(v20 > 1), v21 + 1, 1);
        int64_t v11 = v77;
      }
      *((void *)v11 + 2) = v21 + 1;
      int64_t v22 = (void *)((char *)v11 + 16 * v21);
      v22[4] = v17;
      v22[5] = v19;
      v12 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v23 = *((void *)v11 + 2);
    if (!v23) {
      goto LABEL_24;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v11 = (CGImage *)MEMORY[0x1E4FBC860];
    uint64_t v23 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v23)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
  }
  long long v24 = (void *)((char *)v11 + 40);
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEECB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B8CA8670;
    sub_1B8CA3780();
    swift_bridgeObjectRetain();
    id v26 = a1;
    uint64_t v27 = sub_1B8CA3750();
    swift_bridgeObjectRelease();
    *(void *)(inited + 32) = v27;
    type metadata accessor for CTFont(0);
    *(void *)(inited + 64) = v28;
    *(void *)(inited + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v26;
    int64_t v29 = (const __CTFont *)v26;
    sub_1B8C79884(inited);
    id v30 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    swift_bridgeObjectRetain();
    uint64_t v31 = (void *)sub_1B8CA3750();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1B8C7CC6C((unint64_t *)&qword_1E9EEEC60, type metadata accessor for Key);
    uint64_t v32 = (void *)sub_1B8CA3720();
    swift_bridgeObjectRelease();
    CFAttributedStringRef v33 = (const __CFAttributedString *)objc_msgSend(v30, sel_initWithString_attributes_, v31, v32);

    int64_t v34 = CTLineCreateWithAttributedString(v33);
    int64_t v35 = (CGImage *)sub_1B8C737EC(v34);
    uint64_t v37 = v36;
    double Size = CTFontGetSize(v29);
    if ((~*(void *)&Size & 0x7FF0000000000000) == 0) {
      break;
    }
    if (Size <= -9.22337204e18) {
      goto LABEL_26;
    }
    if (Size >= 9.22337204e18) {
      goto LABEL_27;
    }
    uint64_t v75 = v24;
    uint64_t v76 = v23;
    size_t v39 = (uint64_t)Size;
    uint64_t v73 = (uint64_t)v35;
    uint64_t v77 = v35;
    uint64_t v78 = v37;
    swift_bridgeObjectRetain();
    sub_1B8CA37C0();
    size_t v92 = v39;
    sub_1B8C73C10();
    sub_1B8CA3810();
    sub_1B8CA37C0();
    swift_bridgeObjectRelease();
    sub_1B8CA37C0();
    uint64_t v40 = a5;
    id v41 = objc_allocWithZone(NSString);
    BOOL v42 = (void *)sub_1B8CA3750();
    swift_bridgeObjectRelease();
    BOOL v43 = v41;
    a5 = v40;
    id v44 = objc_msgSend(v43, sel_initWithString_, v42);

    CGImageRef Image = (CGImageRef)objc_msgSend(a2, sel_objectForKey_, v44);
    if (!Image)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      uint64_t v70 = CGBitmapContextCreate(0, v39, v39, 8uLL, 0, DeviceRGB, 1u);

      if (!v70
        || (CGRect ImageBounds = CTLineGetImageBounds(v34, v70),
            CGContextTranslateCTM(v70, -ImageBounds.origin.x, -ImageBounds.origin.y),
            CTLineDraw(v34, v70),
            CGImageRef Image = CGBitmapContextCreateImage(v70),
            v70,
            !Image))
      {

        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      objc_msgSend(a2, sel_setObject_forKey_, Image, v44);
    }

    swift_bridgeObjectRelease();
    if (CGImageGetWidth(Image) == v40 && CGImageGetHeight(Image) == v40)
    {
      CGRect v46 = Image;
      sub_1B8C776F4(v46, (uint64_t)v93);
      sub_1B8C75D5C();
      CGFloat v48 = v47;
      CGFloat v50 = v49;
      CGFloat v52 = v51;
      CGFloat v54 = v53;
      double v55 = sub_1B8C75F30(v47, v49, v51, v53);
      double v57 = v56;
      sub_1B8C7612C(0xCuLL, (uint64_t)v94, v48, v50, v52, v54, v55);
      char v58 = v94[0];
      uint64_t v59 = v96;
      uint64_t v60 = v97;
      uint64_t v61 = v98;
      sub_1B8C76754(0xCuLL, (uint64_t)v99, v48, v50, v52, v54, v57);
      char v62 = v99[0];
      uint64_t v63 = v101;
      uint64_t v64 = v102;
      uint64_t v65 = v103;
      sub_1B8C742A0((uint64_t)v93);
      uint64_t v77 = v46;
      LOBYTE(v78) = v58;
      long long v79 = v95;
      uint64_t v80 = v59;
      uint64_t v81 = v60;
      uint64_t v82 = v61;
      char v83 = v62;
      long long v84 = v100;
      uint64_t v85 = v63;
      uint64_t v86 = v64;
      uint64_t v87 = v65;
      CGFloat v88 = v48;
      CGFloat v89 = v50;
      CGFloat v90 = v52;
      CGFloat v91 = v54;
      double v66 = sub_1B8C74654(0.18);
      double v67 = sub_1B8C74654(0.18);
      *(CGFloat *)&long long v104 = v48;
      *((CGFloat *)&v104 + 1) = v50;
      CGFloat v105 = v52;
      CGFloat v106 = v54;
      double v107 = v66;
      double v108 = v67;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      size_t v92 = v71;
      sub_1B8C7B200(&v104, v73, v37, isUniquelyReferenced_nonNull_native);
      unint64_t v71 = v92;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B8C7CB74((void **)&v77);
      goto LABEL_12;
    }

LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    long long v24 = v75 + 2;
    uint64_t v23 = v76 - 1;
    if (v76 == 1) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1B8C7C178()
{
  unint64_t result = qword_1E9EEED38;
  if (!qword_1E9EEED38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED38);
  }
  return result;
}

unint64_t sub_1B8C7C1CC()
{
  unint64_t result = qword_1E9EEED58;
  if (!qword_1E9EEED58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED58);
  }
  return result;
}

uint64_t sub_1B8C7C220(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9EEED48);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B8C7C29C()
{
  unint64_t result = qword_1E9EEED78;
  if (!qword_1E9EEED78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED78);
  }
  return result;
}

uint64_t destroy for EmojiCenteringData()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EmojiCenteringData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EmojiCenteringData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for EmojiCenteringData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmojiCenteringData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmojiCenteringData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmojiCenteringData()
{
  return &type metadata for EmojiCenteringData;
}

ValueMetadata *type metadata accessor for EmojiProfile()
{
  return &type metadata for EmojiProfile;
}

uint64_t getEnumTagSinglePayload for EmojiCenteringData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EmojiCenteringData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B8C7C5DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_1B8C7C604(unsigned char *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EmojiCenteringData.CodingKeys()
{
  return &type metadata for EmojiCenteringData.CodingKeys;
}

unint64_t sub_1B8C7C620()
{
  unint64_t result = qword_1E9EEED80;
  if (!qword_1E9EEED80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED80);
  }
  return result;
}

unint64_t sub_1B8C7C678()
{
  unint64_t result = qword_1E9EEED88;
  if (!qword_1E9EEED88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED88);
  }
  return result;
}

unint64_t sub_1B8C7C6D0()
{
  unint64_t result = qword_1E9EEED90;
  if (!qword_1E9EEED90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED90);
  }
  return result;
}

uint64_t sub_1B8C7C724(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702521203 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B8CA3960() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656C69666F7270 && a2 == 0xE800000000000000 || (sub_1B8CA3960() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B8CA3960();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1B8C7C8BC()
{
  unint64_t result = qword_1E9EEED98;
  if (!qword_1E9EEED98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEED98);
  }
  return result;
}

uint64_t sub_1B8C7C910@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B8CA39D0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDA0);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  sub_1B8C7CAB4();
  sub_1B8CA3920();
  uint64_t v5 = v16;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  uint64_t result = sub_1B8CA3920();
  if (v5[2] == 4)
  {
    BOOL v7 = v16;
    uint64_t v8 = v5[4];
    uint64_t v9 = v5[5];
    uint64_t v10 = v5[6];
    uint64_t v11 = v5[7];
    uint64_t result = swift_bridgeObjectRelease();
    if (v7[2] == 2)
    {
      uint64_t v12 = v7[4];
      uint64_t v13 = v7[5];
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      *a2 = v8;
      a2[1] = v9;
      a2[2] = v10;
      a2[3] = v11;
      a2[4] = v12;
      a2[5] = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1B8C7CAB4()
{
  unint64_t result = qword_1E9EEEDA8;
  if (!qword_1E9EEEDA8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1E9EEEDA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEEDA8);
  }
  return result;
}

unint64_t sub_1B8C7CB20()
{
  unint64_t result = qword_1E9EEEDB0;
  if (!qword_1E9EEEDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9EEEDB0);
  }
  return result;
}

void **sub_1B8C7CB74(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1B8C7CBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1B8C7CC5C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1B8C7CC6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B8C7CCB4()
{
  if (qword_1E9EEEBB8 != -1) {
    swift_once();
  }
  CTFontRef UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, *(CGFloat *)&qword_1E9EEFC68, 0);
  if (UIFontForLanguage)
  {
    CTFontRef v1 = UIFontForLanguage;
    EmojiFontForFont = (void *)CTFontCreateEmojiFontForFont();

    sub_1B8C735F4(EmojiFontForFont, (const __CTFont **)v3);
    xmmword_1E9EEFC78 = v3[0];
    unk_1E9EEFC88 = v3[1];
    qword_1E9EEFC98 = v4;
  }
  else
  {
    __break(1u);
  }
}

id sub_1B8C7CD5C()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C998]), sel_init);
  qword_1E9EEEDE8 = (uint64_t)result;
  return result;
}

CGFloat sub_1B8C7CD90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  sub_1B8C7D810(a2, (uint64_t)v89);
  double v16 = *(double *)&v89[2];
  double v67 = *(double *)&v89[1];
  double v70 = *(double *)v89;
  double v17 = *(double *)&v89[3];
  if (*(unsigned char *)(a1 + 48)) {
    double v18 = a7 * 0.85;
  }
  else {
    double v18 = a7;
  }
  if (*(unsigned char *)(a1 + 48)) {
    double v19 = a6 * 0.85;
  }
  else {
    double v19 = a6;
  }
  double v80 = v19;
  double v82 = v18;
  unint64_t v20 = *(CGImage **)a1;
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + 8), v21);
  if (a4) {
    (*(void (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  }
  else {
    double v23 = (*(double (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
  }
  CGFloat v27 = v23;
  CGFloat v28 = v24;
  CGFloat v29 = v25;
  CGFloat v30 = v26;
  double v31 = v25;
  double v32 = v26;
  if ((a3 & 1) == 0)
  {
    int64_t Width = CGImageGetWidth(v20);
    int64_t Height = CGImageGetHeight(v20);
    double v31 = (double)Width;
    double v32 = (double)Height;
  }
  BOOL v35 = v32 < v31;
  double v36 = v82 / v32;
  double v37 = v80 / v31;
  if (!v35) {
    double v37 = v36;
  }
  v88.CGFloat a = 1.0;
  v88.CGFloat b = 0.0;
  v88.CGFloat c = 0.0;
  v88.CGFloat d = 1.0;
  if (1.0 / a8 >= v37) {
    double v38 = v37;
  }
  else {
    double v38 = 1.0 / a8;
  }
  v88.tdouble x = 0.0;
  v88.tdouble y = 0.0;
  CGAffineTransformScale(&v87, &v88, v38, v38);
  CGFloat b = v87.b;
  CGFloat a = v87.a;
  CGFloat d = v87.d;
  CGFloat c = v87.c;
  tdouble y = v87.ty;
  tdouble x = v87.tx;
  v88.CGFloat a = 1.0;
  v88.CGFloat b = 0.0;
  v88.CGFloat c = 0.0;
  v88.CGFloat d = 1.0;
  v88.tdouble x = 0.0;
  v88.tdouble y = 0.0;
  CGAffineTransformScale(&v87, &v88, v38, v38);
  CGAffineTransform v88 = v87;
  v96.origin.double x = v27;
  v96.origin.double y = v28;
  v96.size.CGFloat width = v29;
  v96.size.CGFloat height = v30;
  CGRect v97 = CGRectApplyAffineTransform(v96, &v88);
  double x = v97.origin.x;
  double y = v97.origin.y;
  CGFloat v85 = v97.size.height;
  CGFloat v86 = v97.size.width;
  double v39 = v38 * (double)(uint64_t)CGImageGetWidth(v20);
  double v79 = v38;
  double v40 = v38 * (double)(uint64_t)CGImageGetHeight(v20);
  sub_1B8C7D810(a2, (uint64_t)v94);
  if (v95) {
    CGFloat v41 = v39;
  }
  else {
    CGFloat v41 = v16;
  }
  if (v95) {
    CGFloat v42 = v40;
  }
  else {
    CGFloat v42 = v17;
  }
  if (v95) {
    double v43 = 0.0;
  }
  else {
    double v43 = v67;
  }
  if (v95) {
    double v44 = 0.0;
  }
  else {
    double v44 = v70;
  }
  v98.origin.double x = v44;
  v98.origin.double y = v43;
  v98.size.CGFloat width = v41;
  v98.size.CGFloat height = v42;
  CGFloat v45 = v39;
  double v71 = v40;
  if (CGRectGetWidth(v98) >= v39)
  {
    v99.origin.double x = v44;
    v99.origin.double y = v43;
    v99.size.CGFloat width = v41;
    v99.size.CGFloat height = v42;
    double v46 = CGRectGetHeight(v99);
    CGFloat v45 = v46 >= v40 ? v41 : v39;
    if (v46 >= v40) {
      double v40 = v42;
    }
  }
  double v65 = v39;
  v100.origin.double x = x;
  v100.origin.double y = y;
  v100.size.CGFloat width = v86;
  v100.size.CGFloat height = v85;
  double v68 = CGRectGetWidth(v100);
  v101.origin.double x = x;
  v101.origin.double y = y;
  v101.size.CGFloat width = v86;
  v101.size.CGFloat height = v85;
  double v47 = CGRectGetHeight(v101);
  v102.origin.double x = v44;
  v102.origin.double y = v43;
  v102.size.CGFloat width = v45;
  v102.size.CGFloat height = v40;
  double v48 = CGRectGetWidth(v102);
  v103.origin.double x = v44;
  v103.origin.double y = v43;
  v103.size.CGFloat width = v45;
  v103.size.CGFloat height = v40;
  double v49 = CGRectGetHeight(v103);
  sub_1B8C7D810(a2, (uint64_t)v90);
  if (v93)
  {
    double v50 = v80;
    if (v80 >= v65) {
      double v50 = v65;
    }
    double v81 = v50;
    double v51 = v82;
    if (v82 >= v71) {
      double v51 = v71;
    }
  }
  else
  {
    double v81 = v91;
    double v51 = v92;
  }
  double v83 = v51;
  double v69 = v44 + v48 * 0.5 - (x + v68 * 0.5);
  double v72 = v43 + v49 * 0.5 - (y + v47 * 0.5);
  uint64_t v52 = *(void *)(a1 + 32);
  uint64_t v53 = *(void *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + 8), v52);
  double v54 = (*(double (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
  double v56 = v55;
  v104.origin.double x = x;
  v104.origin.double y = y;
  v104.size.CGFloat width = v86;
  v104.size.CGFloat height = v85;
  double v57 = v54 * CGRectGetWidth(v104) * 0.75;
  v105.origin.double x = x;
  v105.origin.double y = y;
  v105.size.CGFloat width = v86;
  v105.size.CGFloat height = v85;
  CGFloat v58 = CGRectGetHeight(v105);
  sub_1B8C714B8(v57, v58 * v56 * -0.25, x, y, v86, v85, v81, v83);
  double v61 = v69 + v60;
  if ((a4 & 1) == 0) {
    double v59 = -v59;
  }
  v88.CGFloat a = a;
  v88.CGFloat b = b;
  v88.CGFloat c = c;
  v88.CGFloat d = d;
  v88.tdouble x = tx;
  v88.tdouble y = ty;
  CGAffineTransformTranslate(&v87, &v88, v61 / v79 - v44, (v72 + v59) / v79 - v43);
  CGFloat result = v87.a;
  long long v63 = *(_OWORD *)&v87.c;
  long long v64 = *(_OWORD *)&v87.tx;
  *a5 = *(_OWORD *)&v87.a;
  a5[1] = v63;
  a5[2] = v64;
  return result;
}

void sub_1B8C7D274(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  if (qword_1E9EEEBD8 != -1) {
    swift_once();
  }
  long long v37 = xmmword_1E9EEFC78;
  long long v38 = unk_1E9EEFC88;
  double v19 = (void *)qword_1E9EEFC98;
  uint64_t v39 = qword_1E9EEFC98;
  v40[0] = *((void *)&xmmword_1E9EEFC78 + 1);
  long long v20 = unk_1E9EEFC88;
  id v21 = (id)xmmword_1E9EEFC78;
  sub_1B8C75048((uint64_t)v40);
  id v22 = (id)v20;
  id v23 = *((id *)&v20 + 1);
  id v24 = v19;
  sub_1B8C7277C(a1, a2, a4 & 1, a6 & 1, image, a8, a9, a10);

  sub_1B8C742A0((uint64_t)v40);
  double v25 = *(void **)image;
  if (!*(void *)image)
  {
    sub_1B8C7D878((uint64_t)image);
    goto LABEL_9;
  }
  v35[0] = *(_OWORD *)&image[8];
  v35[1] = *(_OWORD *)&image[24];
  v35[2] = *(_OWORD *)&image[40];
  char v36 = v34;
  if (!CGImageGetWidth(*(CGImageRef *)image) || !CGImageGetHeight((CGImageRef)v25))
  {
    sub_1B8C71C1C((id *)v35);

    double v25 = 0;
LABEL_9:
    long long v28 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    goto LABEL_10;
  }
  sub_1B8C7CD90((uint64_t)v35, a3, a4 & 1, a5 & 1, image, a8, a9, a10);
  long long v30 = *(_OWORD *)&image[16];
  long long v32 = *(_OWORD *)image;
  long long v29 = *(_OWORD *)&image[32];
  sub_1B8C71C1C((id *)v35);
  long long v27 = v29;
  long long v26 = v30;
  long long v28 = v32;
LABEL_10:
  *(void *)a7 = v25;
  *(_OWORD *)(a7 + 8) = v28;
  *(_OWORD *)(a7 + 24) = v26;
  *(_OWORD *)(a7 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v27;
}

double sub_1B8C7D470@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  if (qword_1E9EEEBE0 != -1) {
    swift_once();
  }
  id v16 = objc_msgSend((id)qword_1E9EEEDE8, sel_objectForKey_, a1);
  if (v16)
  {
    id v17 = v16;
    sub_1B8C74398((uint64_t)v16 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)&v55);
  }
  else
  {
    double v18 = a1;
    sub_1B8C776F4(v18, (uint64_t)v57);
    sub_1B8C75D5C();
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    double v27 = sub_1B8C75F30(v19, v21, v23, v25);
    double v50 = a8;
    double v29 = v28;
    sub_1B8C7612C(0xCuLL, (uint64_t)v58, v20, v22, v24, v26, v27);
    char v30 = v58[0];
    uint64_t v31 = v60;
    uint64_t v48 = v61;
    double v49 = a6;
    double v32 = a7;
    uint64_t v33 = v62;
    sub_1B8C76754(0xCuLL, (uint64_t)v63, v20, v22, v24, v26, v29);
    char v34 = v63[0];
    char v35 = a3;
    char v36 = a4;
    uint64_t v37 = a2;
    uint64_t v39 = v65;
    uint64_t v38 = v66;
    uint64_t v40 = v67;
    sub_1B8C742A0((uint64_t)v57);
    *((void *)&v53 + 1) = &type metadata for ProfileFromCGImage;
    *(void *)&v54[0] = &off_1F126C458;
    uint64_t v41 = swift_allocObject();
    *(void *)&long long v52 = v41;
    *(void *)(v41 + 16) = v18;
    *(unsigned char *)(v41 + 24) = v30;
    *(_OWORD *)(v41 + 32) = v59;
    *(void *)(v41 + 48) = v31;
    *(void *)(v41 + 56) = v48;
    *(void *)(v41 + 64) = v33;
    a7 = v32;
    *(unsigned char *)(v41 + 72) = v34;
    *(_OWORD *)(v41 + 8nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v64;
    *(void *)(v41 + 96) = v39;
    *(void *)(v41 + 104) = v38;
    a2 = v37;
    a4 = v36;
    a3 = v35;
    *(void *)(v41 + 112) = v40;
    *(CGFloat *)(v41 + 12nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
    a6 = v49;
    a8 = v50;
    *(CGFloat *)(v41 + 128) = v22;
    *(CGFloat *)(v41 + 136) = v24;
    *(CGFloat *)(v41 + 144) = v26;
    id v55 = v18;
    sub_1B8C74334((uint64_t)&v52, (uint64_t)v56);
    CGFloat v42 = v18;
    LOBYTE(v18) = sub_1B8C72200(v42, v24, v26);

    v56[40] = v18 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    double v43 = (void *)qword_1E9EEEDE8;
    sub_1B8C74398((uint64_t)&v55, (uint64_t)&v52);
    double v44 = (objc_class *)type metadata accessor for CachedImageProfile();
    id v45 = objc_allocWithZone(v44);
    sub_1B8C74398((uint64_t)&v52, (uint64_t)v45 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
    v51.receiver = v45;
    v51.super_class = v44;
    id v17 = objc_msgSendSuper2(&v51, sel_init);
    sub_1B8C71C1C((id *)&v52);
    objc_msgSend(v43, sel_setObject_forKey_, v17, v42);
  }

  sub_1B8C7CD90((uint64_t)&v55, a2, a3 & 1, a4 & 1, &v52, a6, a7, a8);
  sub_1B8C71C1C(&v55);
  long long v46 = v53;
  *a5 = v52;
  a5[1] = v46;
  double result = v54[0];
  a5[2] = *(_OWORD *)v54;
  return result;
}

uint64_t sub_1B8C7D7A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 152, 7);
}

uint64_t sub_1B8C7D810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B8C7D878(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9EEEDF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B8C7D8D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1B8C7D8EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B8C7D900(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void *internal::marisa::Trie::Trie(void *this)
{
  *this = 0;
  return this;
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::build(internal::marisa::grimoire::trie::LoudsTrie **a1, uint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v8 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v8)
  {
    uint64_t v13 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x800000014;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:20: MARISA_"
                   "MEMORY_ERROR: temp.get() == NULL";
  }
  uint64_t v9 = v8;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v8);
  uint64_t v13 = v9;
  internal::marisa::grimoire::trie::LoudsTrie::build(v9, a2, a3, a4);
  uint64_t v10 = *a1;
  *a1 = v9;
  uint64_t v13 = v10;
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_1B8C7DA18(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C9710](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::mmap(internal::marisa::grimoire::trie::LoudsTrie **this, const char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000001CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:28: MARISA_"
                   "NULL_ERROR: filename == NULL";
  }
  uint64_t v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_1F126CB38;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    _OWORD v9[2] = 0x80000001FLL;
    void v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:31: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  uint64_t v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  uint64_t v11 = v5;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)v10);
  internal::marisa::grimoire::io::Mapper::open((internal::marisa::grimoire::io::Mapper *)v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::map(v11, (internal::marisa::grimoire::io::Mapper *)v10);
  char v6 = *this;
  *this = v11;
  uint64_t v11 = v6;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B8C7DBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::map(internal::marisa::grimoire::trie::LoudsTrie **this, const void *a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000029;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:41: MARISA_"
                   "NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  char v6 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v6)
  {
    uint64_t v13 = 0;
    uint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v11 = &unk_1F126CB38;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    _OWORD v11[2] = 0x80000002CLL;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:44: MARISA_MEMORY"
             "_ERROR: temp.get() == NULL";
  }
  BOOL v7 = v6;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  uint64_t v13 = v7;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)v12);
  internal::marisa::grimoire::io::Mapper::open((internal::marisa::grimoire::io::Mapper *)v12, a2, a3);
  internal::marisa::grimoire::trie::LoudsTrie::map(v13, (internal::marisa::grimoire::io::Mapper *)v12);
  uint64_t v8 = *this;
  *this = v13;
  uint64_t v13 = v8;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v12);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_1B8C7DD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::load(internal::marisa::grimoire::trie::LoudsTrie **this, const char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000036;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:54: MARISA_"
                   "NULL_ERROR: filename == NULL";
  }
  uint64_t v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_1F126CB38;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    _OWORD v9[2] = 0x800000039;
    void v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:57: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  uint64_t v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  uint64_t v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open(v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  char v6 = *this;
  *this = v11;
  uint64_t v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B8C7DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::read(internal::marisa::grimoire::trie::LoudsTrie **this, int a2)
{
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x500000043;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:67: MARISA_"
                   "CODE_ERROR: fd == -1";
  }
  uint64_t v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_1F126CB38;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    _OWORD v9[2] = 0x800000046;
    void v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:70: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  uint64_t v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  uint64_t v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open(v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  char v6 = *this;
  *this = v11;
  uint64_t v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B8C7E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

void internal::marisa::Trie::save(internal::marisa::grimoire::trie::LoudsTrie ***this, const char *a2)
{
  if (!*this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000050;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:80: MARISA_STATE_ERRO"
         "R: trie_.get() == NULL";
    goto LABEL_6;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000051;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:81: MARISA_NULL_ERROR"
         ": filename == NULL";
LABEL_6:
    exception[3] = v5;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Writer::open(v6, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*this, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
}

void sub_1B8C7E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

void internal::marisa::Trie::write(internal::marisa::grimoire::trie::LoudsTrie ***this, int a2)
{
  if (!*this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000005ALL;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:90: MARISA_STATE_ERRO"
         "R: trie_.get() == NULL";
    goto LABEL_6;
  }
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x50000005BLL;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:91: MARISA_CODE_ERROR: fd == -1";
LABEL_6:
    exception[3] = v5;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Writer::open(v6, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*this, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
}

void sub_1B8C7E2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

void internal::marisa::Trie::write(internal::marisa::grimoire::trie::LoudsTrie ***a1, uint64_t a2)
{
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:100: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v5);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v5, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*a1, (internal::marisa::grimoire::io::Writer *)v5);
  internal::marisa::grimoire::io::Reader::~Reader(v5);
}

void sub_1B8C7E3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

uint64_t internal::marisa::Trie::get_payload(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000006DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:109: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::get_payload(v3, a2, a3);
}

uint64_t internal::marisa::Trie::lookup(internal::marisa::grimoire::vector::BitVector **a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000073;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:115: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::lookup(v4, a2, a3, a4);
}

void internal::marisa::Trie::reverse_lookup(internal::marisa::grimoire::trie::LoudsTrie **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3 = *this;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000079;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:121: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::reverse_lookup(v3, a2, a3);
}

uint64_t internal::marisa::Trie::common_prefix_search(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000007FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:127: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::common_prefix_search(v4, a2, a3, a4);
}

void internal::marisa::Trie::predictive_search(internal::marisa::grimoire::vector::BitVector **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:134: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::predictive_search(v5, a2, a3, a4, a5);
}

void internal::marisa::Trie::advance(internal::marisa::grimoire::vector::BitVector **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000008CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:140: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::advance(v5, a2, a3, a4, a5);
}

void internal::marisa::Trie::enumerate_entries(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000093;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:147: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries(v4, a2, a3, a4);
}

void internal::marisa::Trie::enumerate_children(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:153: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_children(v3, a2, a3);
}

uint64_t internal::marisa::Trie::num_tries(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000009FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:159: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(void *)(*(void *)this + 1072);
}

uint64_t internal::marisa::Trie::num_keys(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000A5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:165: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(void *)(*(void *)this + 264);
}

uint64_t internal::marisa::Trie::num_nodes(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000ABLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:171: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return (*(void *)(*(void *)this + 48) >> 1) - 1;
}

uint64_t internal::marisa::Trie::tail_mode(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000B1;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:177: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(unsigned int *)(*(void *)this + 1084);
}

uint64_t internal::marisa::Trie::node_order(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000B7;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:183: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(unsigned int *)(*(void *)this + 1088);
}

BOOL internal::marisa::Trie::empty(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000BDLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:189: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(void *)(*(void *)this + 264) == 0;
}

uint64_t internal::marisa::Trie::size(internal::marisa::Trie *this)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000C3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:195: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(void *)(*(void *)this + 264);
}

uint64_t internal::marisa::Trie::total_size(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  uint64_t v1 = *this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000C9;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:201: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::total_size(v1);
}

unint64_t internal::marisa::Trie::io_size(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  uint64_t v1 = *this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000CFLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:207: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::io_size(v1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::clear(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  uint64_t v2 = *this;
  *this = 0;
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v2);
}

uint64_t *internal::marisa::Trie::swap(uint64_t *this, internal::marisa::Trie *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  return this;
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::fread(__sFILE *this, __sFILE *a2, internal::marisa::Trie *a3)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000010DLL;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:269: MARISA_NULL_ERROR: file == NULL";
    goto LABEL_8;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000010ELL;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:270: MARISA_NULL_ERROR: trie == NULL";
LABEL_8:
    exception[3] = v5;
  }
  return internal::marisa::TrieIO::fread(this, a2, a3);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::TrieIO::fread(__sFILE *this, __sFILE *a2, internal::marisa::Trie *a3)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000E1;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:225: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  uint64_t v5 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v5)
  {
    uint64_t v12 = 0;
    uint64_t v10 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v10 = &unk_1F126CB38;
    v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v10[2] = 0x8000000E4;
    v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:228: MARISA_MEMOR"
             "Y_ERROR: temp.get() == NULL";
  }
  char v6 = v5;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v5);
  uint64_t v12 = v6;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v11);
  internal::marisa::grimoire::io::Reader::open(v11, this);
  internal::marisa::grimoire::trie::LoudsTrie::read(v12, (internal::marisa::grimoire::io::Reader *)v11);
  p = a2->_p;
  a2->_p = (unsigned __int8 *)v12;
  uint64_t v12 = (internal::marisa::grimoire::trie::LoudsTrie *)p;
  internal::marisa::grimoire::io::Reader::~Reader(v11);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v12);
}

void sub_1B8C7EF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

void internal::marisa::fwrite(__sFILE *this, __sFILE *a2, const internal::marisa::Trie *a3)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000114;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:276: MARISA"
                   "_NULL_ERROR: file == NULL";
  }
  internal::marisa::TrieIO::fwrite(this, a2, a3);
}

void internal::marisa::TrieIO::fwrite(__sFILE *this, __sFILE *a2, const internal::marisa::Trie *a3)
{
  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000EDLL;
    char v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:237: MARISA_NULL_ERROR: file == NULL";
    goto LABEL_6;
  }
  if (!a2->_p)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000EELL;
    char v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:238: MARISA_STATE_ERR"
         "OR: trie.trie_.get() == NULL";
LABEL_6:
    exception[3] = v6;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v7);
  internal::marisa::grimoire::io::Writer::open(v7, this);
  internal::marisa::grimoire::trie::LoudsTrie::write((internal::marisa::grimoire::trie::LoudsTrie **)a2->_p, (internal::marisa::grimoire::io::Writer *)v7);
  internal::marisa::grimoire::io::Reader::~Reader(v7);
}

void sub_1B8C7F11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

uint64_t internal::marisa::read(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie **a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000011ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:282: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  return internal::marisa::TrieIO::read(a1, a2);
}

uint64_t internal::marisa::TrieIO::read(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie **a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000F6;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:246: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  unint64_t v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v9 = &unk_1F126CB38;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    _OWORD v9[2] = 0x8000000F9;
    void v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:249: MARISA_MEMORY"
            "_ERROR: temp.get() == NULL";
  }
  uint64_t v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  uint64_t v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v10, a1);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  char v6 = *a2;
  *a2 = v11;
  uint64_t v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
  return a1;
}

void sub_1B8C7F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::TrieIO::write(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie ***a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000103;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:259: MARISA"
                   "_STATE_ERROR: trie.trie_.get() == NULL";
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v6, a1);
  internal::marisa::grimoire::trie::LoudsTrie::write(*a2, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
  return a1;
}

void sub_1B8C7F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

void internal::marisa::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1BA9C9720);
}

uint64_t internal::marisa::Exception::what(internal::marisa::Exception *this)
{
  return *((void *)this + 3);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(internal::marisa::grimoire::trie::LoudsTrie **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie(v2);
    MEMORY[0x1BA9C9720]();
  }
  return a1;
}

uint64_t internal::marisa::grimoire::io::Reader::Reader(uint64_t this)
{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = -1;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

void internal::marisa::grimoire::io::Reader::~Reader(FILE **this)
{
  if (*((unsigned char *)this + 24)) {
    fclose(*this);
  }
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, const char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x200000023;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:35: MARISA_NULL_ERROR: filename == NULL";
  }
  char v6 = 0;
  int v7 = -1;
  uint64_t v8 = 0;
  char v9 = 0;
  internal::marisa::grimoire::io::Reader::open_((internal::marisa::grimoire::io::Reader *)&v6, a2);
  double result = *this;
  *this = v6;
  *((_DWORD *)this + 2) = v7;
  this[2] = v8;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = v9;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

void sub_1B8C7F5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    fclose(a9);
  }
  _Unwind_Resume(exception_object);
}

FILE *internal::marisa::grimoire::io::Reader::open_(internal::marisa::grimoire::io::Reader *this, const char *__filename)
{
  double result = fopen(__filename, "rb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x900000068;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:104: MARISA_IO_ERROR: file == NULL";
  }
  *(void *)this = result;
  *((unsigned char *)this + 24) = 1;
  return result;
}

uint64_t *internal::marisa::grimoire::io::Reader::swap(uint64_t *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  LODWORD(v2) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, __sFILE *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x20000002CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:44: MARISA_NULL_ERROR: file == NULL";
  }
  double result = *this;
  *this = a2;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = 0;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

void *internal::marisa::grimoire::io::Reader::open_(void *this, __sFILE *a2)
{
  *this = a2;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, int a2)
{
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x500000035;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:53: MARISA_CODE_ERROR: fd == -1";
  }
  double result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = a2;
  this[2] = 0;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = 0;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::open_(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(uint64_t a1, uint64_t a2)
{
  double result = *(FILE **)a1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = a2;
  int v4 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  if (v4) {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::open_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

FILE *internal::marisa::grimoire::io::Reader::clear(FILE **this)
{
  double result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  int v3 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = 0;
  if (v3) {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::seek(uint64_t this, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = this;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        this = internal::marisa::grimoire::io::Reader::read_data(v3, v6, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      return internal::marisa::grimoire::io::Reader::read_data(this, v6, __nitems);
    }
  }
  return this;
}

BOOL internal::marisa::grimoire::io::Reader::is_open(internal::marisa::grimoire::io::Reader *this)
{
  return *(void *)this || *((_DWORD *)this + 2) != -1 || *((void *)this + 2) != 0;
}

uint64_t internal::marisa::grimoire::io::Reader::read_data(uint64_t this, char *a2, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = a2;
  uint64_t v5 = this;
  char v6 = *(FILE **)this;
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000076;
    char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_19;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = read(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0) {
          break;
        }
        v4 += this;
        v3 -= this;
        if (!v3) {
          return this;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
      exception[2] = 0x900000084;
      char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:132: "
           "MARISA_IO_ERROR: size_read <= 0";
LABEL_19:
      exception[3] = v9;
    }
    if (v6)
    {
      this = fread(a2, 1uLL, __nitems, v6);
      if (this != v3)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_1F126CB38;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
        exception[2] = 0x900000089;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:137"
             ": MARISA_IO_ERROR: ::fread(buf, 1, size, file_) != size";
        goto LABEL_19;
      }
    }
    else
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = std::istream::read();
        if ((*(unsigned char *)(this + *(void *)(*(void *)this - 24) + 32) & 5) != 0)
        {
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          *uint64_t v10 = &unk_1F126CB38;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
          v10[2] = 0x90000008ELL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:142: MARISA_IO_ERROR: !stream_->read(static_cast<char*>(buf), static_cast<std::streamsize>(size))";
        }
      }
    }
  }
  return this;
}

void sub_1B8C7FC54()
{
}

void sub_1B8C7FCD0()
{
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, const char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x200000023;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:35: MARISA_NULL_ERROR: filename == NULL";
  }
  char v6 = 0;
  int v7 = -1;
  uint64_t v8 = 0;
  char v9 = 0;
  internal::marisa::grimoire::io::Writer::open_((internal::marisa::grimoire::io::Writer *)&v6, a2);
  double result = *this;
  *this = v6;
  *((_DWORD *)this + 2) = v7;
  this[2] = v8;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = v9;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

void sub_1B8C7FDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    fclose(a9);
  }
  _Unwind_Resume(exception_object);
}

FILE *internal::marisa::grimoire::io::Writer::open_(internal::marisa::grimoire::io::Writer *this, const char *__filename)
{
  double result = fopen(__filename, "wb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x900000068;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:104: MARISA_IO_ERROR: file == NULL";
  }
  *(void *)this = result;
  *((unsigned char *)this + 24) = 1;
  return result;
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, __sFILE *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x20000002CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:44: MARISA_NULL_ERROR: file == NULL";
  }
  double result = *this;
  *this = a2;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = 0;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, int a2)
{
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x500000035;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:53: MARISA_CODE_ERROR: fd == -1";
  }
  double result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = a2;
  this[2] = 0;
  int v4 = *((unsigned __int8 *)this + 24);
  *((unsigned char *)this + 24) = 0;
  if (v4)
  {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t internal::marisa::grimoire::io::Writer::seek(uint64_t this, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = this;
  __buf[128] = *MEMORY[0x1E4F143B8];
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        this = internal::marisa::grimoire::io::Writer::write_data(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return internal::marisa::grimoire::io::Writer::write_data(this, (char *)__buf, __nitems);
    }
  }
  return this;
}

uint64_t internal::marisa::grimoire::io::Writer::write_data(uint64_t this, char *__buf, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = __buf;
  uint64_t v5 = this;
  char v6 = *(FILE **)this;
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000076;
    char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0) {
          break;
        }
        v4 += this;
        v3 -= this;
        if (!v3) {
          return this;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000084;
      char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:132: "
           "MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_1F126CB38;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000089;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:137"
             ": MARISA_IO_ERROR: ::fwrite(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      this = fflush(*(FILE **)v5);
      if (this)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_1F126CB38;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x90000008ALL;
        char v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:138"
             ": MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = std::ostream::write();
        if ((*(unsigned char *)(this + *(void *)(*(void *)this - 24) + 32) & 5) != 0)
        {
          uint64_t v10 = __cxa_allocate_exception(0x20uLL);
          *uint64_t v10 = &unk_1F126CB38;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008FLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:143: MARISA_IO_ERROR: !stream_->write(static_cast<const char*>(data), static_cast<std::streamsize>(size))";
        }
      }
    }
  }
  return this;
}

void sub_1B8C803B8()
{
}

void sub_1B8C80434()
{
}

uint64_t internal::marisa::grimoire::io::Mapper::Mapper(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = -1;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = -1;
  return this;
}

void internal::marisa::grimoire::io::Mapper::~Mapper(internal::marisa::grimoire::io::Mapper *this)
{
  size_t v2 = (void *)*((void *)this + 1);
  if (v2 != (void *)-1) {
    munmap(v2, *((void *)this + 3));
  }
  int v3 = *((_DWORD *)this + 8);
  if (v3 != -1) {
    close(v3);
  }
}

void internal::marisa::grimoire::io::Mapper::open(internal::marisa::grimoire::io::Mapper *this, const char *a2)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000047;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:71: MARISA_NULL_ERROR: filename == NULL";
  }
  *(void *)&long long v8 = 0;
  *((void *)&v8 + 1) = -1;
  long long v9 = 0uLL;
  int v10 = -1;
  internal::marisa::grimoire::io::Mapper::open_((internal::marisa::grimoire::io::Mapper *)&v8, a2);
  long long v3 = v9;
  long long v4 = *(_OWORD *)this;
  long long v5 = *((_OWORD *)this + 1);
  *(_OWORD *)this = v8;
  *((_OWORD *)this + 1) = v3;
  long long v8 = v4;
  long long v9 = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v10;
  int v10 = v6;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)&v8);
}

void sub_1B8C80580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *internal::marisa::grimoire::io::Mapper::open_(internal::marisa::grimoire::io::Mapper *this, const char *a2)
{
  if (stat(a2, &v8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000009FLL;
    size_t v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:159: MA"
         "RISA_IO_ERROR: ::stat(filename, &st) != 0";
    goto LABEL_8;
  }
  *((void *)this + 3) = v8.st_size;
  int v4 = open(a2, 0);
  *((_DWORD *)this + 8) = v4;
  if (v4 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x9000000A4;
    size_t v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:164: MA"
         "RISA_IO_ERROR: fd_ == -1";
    goto LABEL_8;
  }
  double result = mmap(0, *((void *)this + 3), 1, 1, v4, 0);
  *((void *)this + 1) = result;
  if (result == (void *)-1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x9000000A7;
    size_t v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:167: MA"
         "RISA_IO_ERROR: origin_ == MAP_FAILED";
LABEL_8:
    exception[3] = v7;
  }
  *(void *)this = result;
  *((void *)this + 2) = *((void *)this + 3);
  return result;
}

uint64_t *internal::marisa::grimoire::io::Mapper::swap(uint64_t *this, internal::marisa::grimoire::io::Mapper *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v4 = this[1];
  uint64_t v3 = this[2];
  uint64_t v5 = *((void *)a2 + 2);
  this[1] = *((void *)a2 + 1);
  this[2] = v5;
  *((void *)a2 + 1) = v4;
  *((void *)a2 + 2) = v3;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

__n128 internal::marisa::grimoire::io::Mapper::open(internal::marisa::grimoire::io::Mapper *this, const void *a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000050;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:80: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  long long v3 = *(_OWORD *)this;
  long long v4 = *((_OWORD *)this + 1);
  *(void *)this = a2;
  *((void *)this + 1) = -1;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  int v9 = v5;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v8);
  return result;
}

void *internal::marisa::grimoire::io::Mapper::open_(void *this, const void *a2, uint64_t a3)
{
  *this = a2;
  this[2] = a3;
  return this;
}

uint64_t internal::marisa::grimoire::io::Mapper::seek(internal::marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000059;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:89: MAR"
         "ISA_STATE_ERROR: !is_open()";
    goto LABEL_8;
  }
  if (*((void *)this + 2) < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000005ALL;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:90: MAR"
         "ISA_IO_ERROR: size > avail_";
LABEL_8:
    exception[3] = v4;
  }
  return internal::marisa::grimoire::io::Mapper::map_data(this, a2);
}

BOOL internal::marisa::grimoire::io::Mapper::is_open(internal::marisa::grimoire::io::Mapper *this)
{
  return *(void *)this != 0;
}

uint64_t internal::marisa::grimoire::io::Mapper::map_data(internal::marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000073;
    stat v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:115: MA"
         "RISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
  }
  unint64_t v3 = *((void *)this + 2);
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000074;
    stat v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:116: MA"
         "RISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *(void *)this = v2 + a2;
  *((void *)this + 2) = v5;
  return v2;
}

__n128 internal::marisa::grimoire::io::Mapper::clear(internal::marisa::grimoire::io::Mapper *this)
{
  long long v1 = *(_OWORD *)this;
  long long v2 = *((_OWORD *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  v4[0] = v1;
  v4[1] = v2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v4);
  return result;
}

internal::marisa::grimoire::trie::LoudsTrie *internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  *((_OWORD *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 345) = 0u;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 553) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 601) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 505) = 0u;
  *((_OWORD *)this + 3nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 649) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 697) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((void *)this + 9nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  *((_DWORD *)this + 182) = 0;
  *((void *)this + 92) = 0;
  internal::marisa::grimoire::trie::Tail::Tail((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  *((unsigned char *)this + 1048) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 100nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((void *)this + 134) = 3;
  *((void *)this + 135) = 0x100000000200;
  *((_DWORD *)this + 272) = 0x20000;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)this + 1096);
  return this;
}

void sub_1B8C80B40(_Unwind_Exception *a1)
{
  uint64_t v9 = *((void *)v1 + 126);
  if (v9) {
    MEMORY[0x1BA9C96F0](v9, 0x1000C8077774924);
  }
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(v5);
  internal::marisa::grimoire::trie::Tail::~Tail(v4);
  if (*v7) {
    MEMORY[0x1BA9C96F0](*v7, 0x1000C8077774924);
  }
  if (*v6) {
    MEMORY[0x1BA9C96F0](*v6, 0x1000C8077774924);
  }
  internal::marisa::grimoire::vector::BitVector::~BitVector(v3);
  internal::marisa::grimoire::vector::BitVector::~BitVector(v2);
  internal::marisa::grimoire::vector::BitVector::~BitVector(v1);
  _Unwind_Resume(a1);
}

void internal::marisa::grimoire::trie::Tail::~Tail(internal::marisa::grimoire::trie::Tail *this)
{
  uint64_t v2 = *((void *)this + 26);
  if (v2) {
    MEMORY[0x1BA9C96F0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 20);
  if (v3) {
    MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 14);
  if (v4) {
    MEMORY[0x1BA9C96F0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    MEMORY[0x1BA9C96F0](v5, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x1BA9C96F0](*(void *)this, 0x1000C8077774924);
  }
}

void internal::marisa::grimoire::vector::BitVector::~BitVector(internal::marisa::grimoire::vector::BitVector *this)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    MEMORY[0x1BA9C96F0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    MEMORY[0x1BA9C96F0](v4, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x1BA9C96F0](*(void *)this, 0x1000C8077774924);
  }
}

void internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 1096));
  uint64_t v2 = *((void *)this + 126);
  if (v2) {
    MEMORY[0x1BA9C96F0](v2, 0x1000C8077774924);
  }
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)this + 125);
  uint64_t v3 = *((void *)this + 119);
  if (v3) {
    MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 113);
  if (v4) {
    MEMORY[0x1BA9C96F0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = *((void *)this + 107);
  if (v5) {
    MEMORY[0x1BA9C96F0](v5, 0x1000C8077774924);
  }
  uint64_t v6 = *((void *)this + 99);
  if (v6) {
    MEMORY[0x1BA9C96F0](v6, 0x1000C8077774924);
  }
  uint64_t v7 = *((void *)this + 93);
  if (v7) {
    MEMORY[0x1BA9C96F0](v7, 0x1000C8077774924);
  }
  uint64_t v8 = *((void *)this + 84);
  if (v8) {
    MEMORY[0x1BA9C96F0](v8, 0x1000C8077774924);
  }
  uint64_t v9 = *((void *)this + 78);
  if (v9) {
    MEMORY[0x1BA9C96F0](v9, 0x1000C8077774924);
  }
  uint64_t v10 = *((void *)this + 72);
  if (v10) {
    MEMORY[0x1BA9C96F0](v10, 0x1000C8077774924);
  }
  uint64_t v11 = *((void *)this + 66);
  if (v11) {
    MEMORY[0x1BA9C96F0](v11, 0x1000C8077774924);
  }
  uint64_t v12 = *((void *)this + 60);
  if (v12) {
    MEMORY[0x1BA9C96F0](v12, 0x1000C8077774924);
  }
  uint64_t v13 = *((void *)this + 52);
  if (v13) {
    MEMORY[0x1BA9C96F0](v13, 0x1000C8077774924);
  }
  uint64_t v14 = *((void *)this + 46);
  if (v14) {
    MEMORY[0x1BA9C96F0](v14, 0x1000C8077774924);
  }
  uint64_t v15 = *((void *)this + 40);
  if (v15) {
    MEMORY[0x1BA9C96F0](v15, 0x1000C8077774924);
  }
  uint64_t v16 = *((void *)this + 34);
  if (v16) {
    MEMORY[0x1BA9C96F0](v16, 0x1000C8077774924);
  }
  uint64_t v17 = *((void *)this + 26);
  if (v17) {
    MEMORY[0x1BA9C96F0](v17, 0x1000C8077774924);
  }
  uint64_t v18 = *((void *)this + 20);
  if (v18) {
    MEMORY[0x1BA9C96F0](v18, 0x1000C8077774924);
  }
  uint64_t v19 = *((void *)this + 14);
  if (v19) {
    MEMORY[0x1BA9C96F0](v19, 0x1000C8077774924);
  }
  uint64_t v20 = *((void *)this + 8);
  if (v20) {
    MEMORY[0x1BA9C96F0](v20, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x1BA9C96F0](*(void *)this, 0x1000C8077774924);
  }
}

void internal::marisa::grimoire::trie::LoudsTrie::build(internal::marisa::grimoire::trie::LoudsTrie *a1, uint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v7 = 3;
  uint64_t v8 = 0x100000000200;
  int v9 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v7, a4);
  v10[0] = v7;
  v10[1] = v8;
  int v11 = v9;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&v7);
  internal::marisa::grimoire::trie::LoudsTrie::build_((uint64_t)&v7, a2, a3, (uint64_t)v10);
  internal::marisa::grimoire::trie::LoudsTrie::swap(a1, (internal::marisa::grimoire::trie::LoudsTrie *)&v7);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&v7);
}

void sub_1B8C81028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)va);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  memset(v36, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize((uint64_t *)v36, (a2[1] - *a2) >> 4);
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *((void *)&v36[0] + 1) + v10;
      uint64_t v13 = (uint64_t *)(v8 + v9);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      *(void *)uint64_t v12 = v15;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = 1065353216;
      ++v11;
      uint64_t v8 = *a2;
      v10 += 24;
      v9 += 16;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  long long v34 = 0u;
  memset(v35, 0, 25);
  internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::Key>(a1, (uint64_t *)v36, &v34, a4, 1);
  memset(v33, 0, 41);
  internal::marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize((uint64_t *)v33, v35[1]);
  unint64_t v16 = *((void *)&v33[1] + 1);
  if (*((void *)&v33[1] + 1))
  {
    uint64_t v17 = 0;
    uint64_t v18 = *((void *)&v34 + 1);
    uint64_t v19 = (_DWORD *)(*((void *)&v33[0] + 1) + 4);
    do
    {
      *(v19 - 1) = *(_DWORD *)(v18 + 4 * v17);
      *uint64_t v19 = v17++;
      v19 += 2;
    }
    while (v16 != v17);
  }
  uint64_t v20 = v34;
  long long v34 = 0u;
  memset(v35, 0, 25);
  if (v20)
  {
    MEMORY[0x1BA9C96F0](v20, 0x1000C8077774924);
    unint64_t v16 = *((void *)&v33[1] + 1);
  }
  unint64_t v21 = 126 - 2 * __clz(v16);
  if (v16) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(*((uint64_t *)&v33[0] + 1), (unsigned int *)(*((void *)&v33[0] + 1) + 8 * v16), (uint64_t)&v37, v22, 1);
  if (*((void *)&v33[1] + 1))
  {
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      for (uint64_t i = *((void *)&v33[0] + 1); ; uint64_t i = *((void *)&v33[0] + 1))
      {
        unint64_t v26 = *(unsigned int *)(i + 8 * v23);
        if (v24 >= v26) {
          break;
        }
        internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 0);
        ++v24;
      }
      if (v24 == v26)
      {
        internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 1);
        ++v24;
      }
      ++v23;
    }
    while (v23 < *((void *)&v33[1] + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  for (; v24 < *(void *)(a1 + 648); ++v24)
    internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 0);
  double v27 = (uint64_t *)(a1 + 208);
  internal::marisa::grimoire::vector::BitVector::push_back(v27, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)v27, 0, 1);
  if (a3)
  {
    std::vector<unsigned long>::resize((uint64_t)a3, (a2[1] - *a2) >> 4);
    if (a2[1] != *a2)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      uint64_t v30 = *((void *)&v33[0] + 1);
      do
      {
        uint64_t v31 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)v27, *(unsigned int *)(v30 + v28));
        uint64_t v30 = *((void *)&v33[0] + 1);
        *(void *)(*a3 + 8 * *(unsigned int *)(*((void *)&v33[0] + 1) + v28 + 4)) = v31;
        ++v29;
        v28 += 8;
      }
      while (v29 < (a2[1] - *a2) >> 4);
    }
  }
  if (*(void *)&v33[0]) {
    MEMORY[0x1BA9C96F0](*(void *)&v33[0], 0x1000C8077774924);
  }
  if ((void)v34) {
    MEMORY[0x1BA9C96F0](v34, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v36[0];
  if (*(void *)&v36[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v36[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C81330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    MEMORY[0x1BA9C96F0](a15, 0x1000C8077774924);
  }
  if (a21) {
    MEMORY[0x1BA9C96F0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::trie::LoudsTrie::swap(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::trie::LoudsTrie *a2)
{
  internal::marisa::grimoire::vector::BitVector::swap(this, a2);
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 208));
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 416));
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 78, (uint64_t *)a2 + 78);
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 84, (uint64_t *)a2 + 84);
  uint64_t v4 = *((void *)this + 90);
  *((void *)this + 9nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *((void *)a2 + 90);
  *((void *)a2 + 9nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  LODWORD(v4) = *((_DWORD *)this + 182);
  *((_DWORD *)this + 182) = *((_DWORD *)a2 + 182);
  *((_DWORD *)a2 + 182) = v4;
  uint64_t v5 = *((void *)this + 92);
  *((void *)this + 92) = *((void *)a2 + 92);
  *((void *)a2 + 92) = v5;
  internal::marisa::grimoire::trie::Tail::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 744));
  uint64_t v6 = *((void *)this + 125);
  *((void *)this + 125) = *((void *)a2 + 125);
  *((void *)a2 + 125) = v6;
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 126, (uint64_t *)a2 + 126);
  uint64_t v7 = *((void *)this + 132);
  *((void *)this + 132) = *((void *)a2 + 132);
  *((void *)a2 + 132) = v7;
  uint64_t v8 = *((void *)this + 133);
  *((void *)this + 133) = *((void *)a2 + 133);
  *((void *)a2 + 133) = v8;
  uint64_t v9 = *((void *)this + 134);
  *((void *)this + 134) = *((void *)a2 + 134);
  *((void *)a2 + 134) = v9;
  uint64_t v10 = *((void *)this + 135);
  *((void *)this + 135) = *((void *)a2 + 135);
  *((void *)a2 + 135) = v10;
  LODWORD(v9) = *((_DWORD *)this + 272);
  *((_DWORD *)this + 272) = *((_DWORD *)a2 + 272);
  *((_DWORD *)a2 + 272) = v9;
  return internal::marisa::grimoire::io::Mapper::swap((uint64_t *)this + 137, (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 1096));
}

void internal::marisa::grimoire::trie::LoudsTrie::map(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::trie::Header::map((internal::marisa::grimoire::trie::Header *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::map_((internal::marisa::grimoire::trie::LoudsTrie *)v4, a2);
  internal::marisa::grimoire::io::Mapper::swap(v5, a2);
  internal::marisa::grimoire::trie::LoudsTrie::swap(this, (internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_1B8C81540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *internal::marisa::grimoire::trie::Header::map(internal::marisa::grimoire::trie::Header *this, internal::marisa::grimoire::io::Mapper *a2)
{
  uint64_t result = (unsigned char *)internal::marisa::grimoire::io::Mapper::map_data(a2, 0x10uLL);
  if (*result != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = result[v3];
    int v5 = internal::marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:21: MARISA_FORMAT_ERROR: !test_header(ptr)";
  }
  return result;
}

double internal::marisa::grimoire::trie::LoudsTrie::map_(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::vector::BitVector::map(this, a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map((long long *)this + 39, a2);
  internal::marisa::grimoire::vector::FlatVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  internal::marisa::grimoire::trie::Tail::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((void *)this + 59) && !*((void *)this + 96))
  {
    int v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
    int v5 = v4;
    if (v4) {
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    }
    uint64_t v10 = *((void *)this + 125);
    *((void *)this + 125) = v5;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)&v10);
    uint64_t v6 = (internal::marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000249;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:585: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::map_(v6, a2);
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::map((long long *)this + 63, a2);
  *((void *)this + 132) = *((void *)this + 129) - 1;
  *((void *)this + 133) = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  unsigned int v7 = *(_DWORD *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v10, v7);
  *((void *)this + 134) = v10;
  double result = v11;
  *((double *)this + 135) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_1B8C817B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C9710](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

void internal::marisa::grimoire::trie::LoudsTrie::read(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::trie::Header::read((internal::marisa::grimoire::trie::Header *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::read_((internal::marisa::grimoire::trie::LoudsTrie *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::swap(this, (internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_1B8C81834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::trie::Header::read(internal::marisa::grimoire::trie::Header *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, v7, 0x10uLL);
  if (v7[0] != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = v7[v3];
    int v5 = internal::marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA0000001BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:27: MARISA_FORMAT_ERROR: !test_header(buf)";
  }
  return result;
}

double internal::marisa::grimoire::trie::LoudsTrie::read_(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::vector::BitVector::read(this, a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read((long long *)this + 39, a2);
  internal::marisa::grimoire::vector::FlatVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  internal::marisa::grimoire::trie::Tail::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((void *)this + 59) && !*((void *)this + 96))
  {
    int v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
    int v5 = v4;
    if (v4) {
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    }
    uint64_t v10 = *((void *)this + 125);
    *((void *)this + 125) = v5;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)&v10);
    uint64_t v6 = (internal::marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000264;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:612: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::read_(v6, a2);
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read((long long *)this + 63, a2);
  *((void *)this + 132) = *((void *)this + 129) - 1;
  LODWORD(v1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v10, 4uLL);
  *((void *)this + 133) = v10;
  int v9 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v9, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v10, v9);
  *((void *)this + 134) = v10;
  double result = v11;
  *((double *)this + 135) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_1B8C81AFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C9710](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::write(internal::marisa::grimoire::trie::LoudsTrie **this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, "We love Marisa.", 0x10uLL);
  return internal::marisa::grimoire::trie::LoudsTrie::write_(this, a2);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::write_(internal::marisa::grimoire::trie::LoudsTrie **this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)this, a2);
  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)(this + 26), a2);
  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)(this + 52), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)(this + 78), a2);
  internal::marisa::grimoire::vector::FlatVector::write_((internal::marisa::grimoire::vector::FlatVector *)(this + 84), a2);
  internal::marisa::grimoire::trie::Tail::write((internal::marisa::grimoire::trie::Tail *)(this + 93), a2);
  int v4 = this[125];
  if (v4) {
    internal::marisa::grimoire::trie::LoudsTrie::write_(v4, a2);
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_((uint64_t)(this + 126), a2);
  unsigned int __buf = this[133];
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  int v6 = *((_DWORD *)this + 271) | *((_DWORD *)this + 268) | *((_DWORD *)this + 272);
  return internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v6, 4uLL);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::get_payload(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  if (v3) {
    return 0;
  }
  unint64_t v5 = *(void *)a2;
  if (((*(void *)(*(void *)(a1 + 224) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
    return 0;
  }
  *a3 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(a1 + 208), v5);
  return 1;
}

void internal::marisa::grimoire::trie::LoudsTrie::predictive_search(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  char v12 = 0;
  memset(&__p, 0, sizeof(__p));
  while (v13 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(this, a2, a3, &v13, &v14, &__p) & 1) == 0) {
      goto LABEL_8;
    }
  }
  int v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v10 = __p.__r_.__value_.__r.__words[1];
  }
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS((unint64_t)this, v14, (uint64_t)&__p, &v12, a4, (v10 - a3) & ~((v10 - (int)a3) >> 31), a5);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B8C81D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, std::string *a6)
{
  unint64_t v12 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *((void *)this + 132);
  uint64_t v13 = *((void *)this + 128);
  if (*a5 != *(_DWORD *)(v13 + 12 * v12))
  {
    unint64_t v15 = internal::marisa::grimoire::vector::BitVector::select0(this, *a5);
    uint64_t v16 = *((void *)this + 2);
    if ((*(void *)(v16 + (((v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 1)))
    {
      unint64_t v17 = v15 - *a5;
      *a5 = v17;
      unint64_t v18 = v15 + 2;
      uint64_t v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if ((*(void *)(*((void *)this + 54) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17))
        {
          if (v19 == 0xFFFFFFFFLL)
          {
            uint64_t v19 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 416), v17);
            unint64_t v17 = *a5;
          }
          else
          {
            ++v19;
          }
          unint64_t v21 = *a4;
          uint64_t v22 = *((void *)this + 90);
          unint64_t v23 = (unint64_t)(v22 * v19) >> 6;
          uint64_t v24 = (v22 * v19) & 0x3F;
          unint64_t v25 = v24 + v22;
          uint64_t v26 = *((void *)this + 86);
          uint64_t v27 = *(void *)(v26 + 8 * v23) >> v24;
          if (v25 > 0x40) {
            v27 |= (2 * *(void *)(v26 + 8 * v23 + 8)) << (v24 ^ 0x3Fu);
          }
          unint64_t v28 = *(unsigned __int8 *)(*((void *)this + 80) + v17) | ((*((_DWORD *)this + 182) & v27) << 8);
          uint64_t v29 = *((void *)this + 125);
          if (v29)
          {
            if (internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v29, a2, a3, a4, v28, a6)) {
              return 1;
            }
          }
          else if (internal::marisa::grimoire::trie::Tail::prefix_match((void *)this + 93, a2, a3, a4, v28, a6))
          {
            return 1;
          }
          if (*a4 != v21) {
            return 0;
          }
          unint64_t v17 = *a5;
          uint64_t v16 = *((void *)this + 2);
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*((void *)this + 80) + v17);
          if (v20 == *(unsigned __int8 *)(a2 + *a4))
          {
            std::string::push_back(a6, v20);
            ++*a4;
            return 1;
          }
        }
        *a5 = ++v17;
        uint64_t v30 = *(void *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18;
        ++v18;
        if ((v30 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
  if (v14 > 0xFFFFFEFF)
  {
    std::string::push_back(a6, v14);
    ++*a4;
    goto LABEL_24;
  }
  uint64_t v31 = *((void *)this + 125);
  if (v31)
  {
    if (internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v31, a2, a3, a4, v14, a6)) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!internal::marisa::grimoire::trie::Tail::prefix_match((void *)this + 93, a2, a3, a4, v14, a6)) {
    return 0;
  }
LABEL_24:
  *a5 = *(unsigned int *)(*((void *)this + 128) + 12 * v12 + 4);
  return 1;
}

unint64_t internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(unint64_t result, unint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, int a6, uint64_t a7)
{
  if (!*a4)
  {
    unint64_t v11 = result;
    if ((a7 & 0x80000000) != 0 || a6 <= (int)a7)
    {
      if (((*(void *)(*(void *)(result + 224) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
        || ((uint64_t v12 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(result + 208), a2), v13 = *(char *)(a3 + 23), v13 >= 0)? (v14 = a3): (v14 = *(void *)a3), v13 >= 0 ? (v15 = *(unsigned __int8 *)(a3 + 23)) : (v15 = *(void *)(a3 + 8)), result = std::function<void ()(unsigned long,std::string_view,BOOL &)>::operator()(a5, v12, v14, v15, (uint64_t)a4), !*a4))
      {
        std::string::size_type v16 = *(char *)(a3 + 23) >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
        double result = internal::marisa::grimoire::vector::BitVector::select0((internal::marisa::grimoire::vector::BitVector *)v11, a2);
        if (!*a4)
        {
          unint64_t v17 = result;
          uint64_t v18 = 0xFFFFFFFFLL;
          do
          {
            if (((*(void *)(*(void *)(v11 + 16) + (((v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) == 0) {
              break;
            }
            if ((*(void *)(*(void *)(v11 + 432) + (((v17 - a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - a2)))
            {
              if (v18 == 0xFFFFFFFFLL) {
                uint64_t v18 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(v11 + 416), v17 - a2);
              }
              else {
                ++v18;
              }
              uint64_t v19 = *(void *)(v11 + 720);
              unint64_t v20 = (unint64_t)(v19 * v18) >> 6;
              uint64_t v21 = (v19 * v18) & 0x3F;
              unint64_t v22 = v21 + v19;
              uint64_t v23 = *(void *)(v11 + 688);
              uint64_t v24 = *(void *)(v23 + 8 * v20) >> v21;
              if (v22 > 0x40) {
                v24 |= (2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
              }
              unint64_t v25 = *(unsigned __int8 *)(*(void *)(v11 + 640) - a2 + v17) | ((*(_DWORD *)(v11 + 728) & v24) << 8);
              uint64_t v26 = *(void *)(v11 + 1000);
              if (v26) {
                internal::marisa::grimoire::trie::LoudsTrie::restore_(v26, (std::string *)a3, v25);
              }
              else {
                internal::marisa::grimoire::trie::Tail::restore((void *)(v11 + 744), (std::string *)a3, v25);
              }
            }
            else
            {
              std::string::push_back((std::string *)a3, *(unsigned char *)(*(void *)(v11 + 640) - a2 + v17));
            }
            int v27 = *(unsigned __int8 *)(a3 + 23);
            if ((v27 & 0x80u) != 0) {
              int v27 = *(_DWORD *)(a3 + 8);
            }
            internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(v11, v17 - a2, a3, a4, a5, (v27 - v16 + a6), a7);
            uint64_t v28 = *(unsigned __int8 *)(a3 + 23);
            int v29 = (char)v28;
            uint64_t v30 = a3 + v28;
            if (v29 >= 0)
            {
              uint64_t v31 = a3;
            }
            else
            {
              uint64_t v30 = *(void *)a3 + *(void *)(a3 + 8);
              uint64_t v31 = *(void *)a3;
            }
            double result = (unint64_t)std::string::erase((std::string *)a3, v16, v30 - (v31 + v16));
            ++v17;
          }
          while (!*a4);
        }
      }
    }
  }
  return result;
}

void internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 31);
    uint64_t v10 = *(void *)(a2 + 16);
    char v9 = *(unsigned char *)(a2 + 31);
LABEL_8:
    char v20 = 0;
    uint64_t v12 = *(void *)(a2 + 8) + v10;
    uint64_t v13 = a2 + 8 + v8;
    if (v9 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    if (v9 >= 0) {
      uint64_t v15 = a2 + 8;
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char const*>>,std::reverse_iterator<std::__wrap_iter<char const*>>>(&__p, v14, v14, v15, v15, v14 - v15);
    if ((v19 & 0x80u) == 0) {
      int v16 = v19;
    }
    else {
      int v16 = v18;
    }
    internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(a1, *(void *)a2, (uint64_t)&__p, &v20, a3, v16, a4);
    if ((char)v19 < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 31);
  char v9 = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    unint64_t v11 = *(void *)(a2 + 16);
  }
  if (v11 <= a4) {
    goto LABEL_8;
  }
}

void sub_1B8C82388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v7 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)v5 + 48))(v5, &v7, v8, a5);
}

void internal::marisa::grimoire::trie::LoudsTrie::enumerate_children(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v38 = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 31);
  int v6 = (char)v5;
  std::string::size_type v7 = *(void *)(a2 + 16);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  if (v5)
  {
    uint64_t v8 = (const std::string::value_type **)(a2 + 8);
    unint64_t v36 = *(void *)a2;
    p_p = &__p;
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *v8, v7);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      char v32 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
      uint64_t v33 = --__p.__r_.__value_.__l.__size_;
    }
    else
    {
      char v32 = __p.__r_.__value_.__s.__data_[HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1];
      uint64_t v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v33 & 0x7F;
    }
    p_p->__r_.__value_.__s.__data_[v33] = 0;
    std::function<void ()(char,internal::marisa::Cursor const&,BOOL &)>::operator()(a3, v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    unint64_t v11 = internal::marisa::grimoire::vector::BitVector::select0((internal::marisa::grimoire::vector::BitVector *)a1, *(void *)a2);
    unint64_t v12 = v11 - *(void *)a2;
    *(void *)long long v34 = a1 + 744;
    uint64_t v13 = 0xFFFFFFFFLL;
    do
    {
      ++v11;
      if (((*(void *)(*(void *)(a1 + 16) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        break;
      }
      memset(&v35, 0, sizeof(v35));
      if ((*(void *)(*(void *)(a1 + 432) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12))
      {
        if (v13 == 0xFFFFFFFFLL) {
          uint64_t v13 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), v12);
        }
        else {
          ++v13;
        }
        uint64_t v14 = *(void *)(a1 + 720);
        unint64_t v15 = (unint64_t)(v14 * v13) >> 6;
        uint64_t v16 = (v14 * v13) & 0x3F;
        unint64_t v17 = v16 + v14;
        uint64_t v18 = *(void *)(a1 + 688);
        uint64_t v19 = *(void *)(v18 + 8 * v15) >> v16;
        if (v17 > 0x40) {
          v19 |= (2 * *(void *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu);
        }
        unint64_t v20 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v12) | ((*(_DWORD *)(a1 + 728) & v19) << 8);
        uint64_t v21 = *(void *)(a1 + 1000);
        if (v21) {
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v21, &v35, v20);
        }
        else {
          internal::marisa::grimoire::trie::Tail::restore(*(void **)v34, &v35, v20);
        }
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v35;
        }
        else {
          uint64_t v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v35.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v24 = (std::string *)((char *)v23 + size - 1);
          if (v24 > v23)
          {
            unint64_t v25 = &v23->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v26 = *(v25 - 1);
              *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
              v24->__r_.__value_.__s.__data_[0] = v26;
              uint64_t v24 = (std::string *)((char *)v24 - 1);
            }
            while (v25++ < (char *)v24);
          }
        }
      }
      else
      {
        std::string::push_back(&v35, *(unsigned char *)(*(void *)(a1 + 640) + v12));
      }
      std::string __p = v35;
      memset(&v35, 0, sizeof(v35));
      unint64_t v36 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        char v28 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
        uint64_t v29 = --__p.__r_.__value_.__l.__size_;
      }
      else
      {
        char v28 = *((unsigned char *)&v36 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7);
        uint64_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29 & 0x7F;
        uint64_t v30 = &__p;
      }
      v30->__r_.__value_.__s.__data_[v29] = 0;
      std::function<void ()(char,internal::marisa::Cursor const&,BOOL &)>::operator()(a3, v28);
      int v31 = v38;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      ++v12;
    }
    while (!v31);
  }
}

void sub_1B8C8270C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(char,internal::marisa::Cursor const&,BOOL &)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::lookup(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  while (v9 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::find_child(this, a2, a3, &v9, &v10) & 1) == 0) {
      return 0;
    }
  }
  if ((*(void *)(*((void *)this + 28) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
  {
    *a4 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 208), v10);
    return 1;
  }
  return 0;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::find_child(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *((void *)this + 132);
  uint64_t v11 = *((void *)this + 128);
  if (*a5 != *(_DWORD *)(v11 + 12 * v10))
  {
    unint64_t v13 = internal::marisa::grimoire::vector::BitVector::select0(this, *a5);
    uint64_t v14 = *((void *)this + 2);
    if ((*(void *)(v14 + (((v13 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + 1)))
    {
      unint64_t v15 = v13 - *a5;
      *a5 = v15;
      unint64_t v16 = v13 + 2;
      uint64_t v17 = 0xFFFFFFFFLL;
      while (1)
      {
        if ((*(void *)(*((void *)this + 54) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15))
        {
          if (v17 == 0xFFFFFFFFLL)
          {
            uint64_t v17 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 416), v15);
            unint64_t v15 = *a5;
          }
          else
          {
            ++v17;
          }
          unint64_t v18 = *a4;
          uint64_t v19 = *((void *)this + 90);
          unint64_t v20 = (unint64_t)(v19 * v17) >> 6;
          uint64_t v21 = (v19 * v17) & 0x3F;
          unint64_t v22 = v21 + v19;
          uint64_t v23 = *((void *)this + 86);
          uint64_t v24 = *(void *)(v23 + 8 * v20) >> v21;
          if (v22 > 0x40) {
            v24 |= (2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
          }
          unint64_t v25 = *(unsigned __int8 *)(*((void *)this + 80) + v15) | ((*((_DWORD *)this + 182) & v24) << 8);
          uint64_t v26 = *((void *)this + 125);
          if (v26)
          {
            if (internal::marisa::grimoire::trie::LoudsTrie::match_(v26, a2, a3, a4, v25)) {
              return 1;
            }
          }
          else if (internal::marisa::grimoire::trie::Tail::match((void *)this + 93, a2, a3, a4, v25))
          {
            return 1;
          }
          if (*a4 != v18) {
            return 0;
          }
          unint64_t v15 = *a5;
          uint64_t v14 = *((void *)this + 2);
        }
        else if (*(unsigned __int8 *)(*((void *)this + 80) + v15) == *(unsigned __int8 *)(a2 + *a4))
        {
          ++*a4;
          return 1;
        }
        *a5 = ++v15;
        uint64_t v27 = *(void *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16;
        ++v16;
        if ((v27 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v12 = *(unsigned int *)(v11 + 12 * v10 + 8);
  if (v12 > 0xFFFFFEFF)
  {
    ++*a4;
    goto LABEL_24;
  }
  uint64_t v28 = *((void *)this + 125);
  if (v28)
  {
    if (internal::marisa::grimoire::trie::LoudsTrie::match_(v28, a2, a3, a4, v12)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((internal::marisa::grimoire::trie::Tail::match((void *)this + 93, a2, a3, a4, v12) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *a5 = *(unsigned int *)(*((void *)this + 128) + 12 * v10 + 4);
  return 1;
}

void internal::marisa::grimoire::trie::LoudsTrie::reverse_lookup(internal::marisa::grimoire::trie::LoudsTrie *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  if (*((void *)this + 33) <= a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x3000000C6;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:198: MARISA_BOUND_ERROR: payload_id >= size()";
  }
  unint64_t v5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  if (v5)
  {
    unint64_t v6 = v5;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    while (1)
    {
      if ((*(void *)(*((void *)this + 54) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6))
      {
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v7 = *(void *)(a3 + 8);
        }
        int v8 = *(unsigned __int8 *)(*((void *)this + 80) + v6);
        uint64_t v9 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), v6);
        uint64_t v10 = *((void *)this + 90);
        unint64_t v11 = (unint64_t)(v10 * v9) >> 6;
        uint64_t v12 = (v10 * v9) & 0x3F;
        unint64_t v13 = v12 + v10;
        uint64_t v14 = *((void *)this + 86);
        unint64_t v15 = *(void *)(v14 + 8 * v11);
        if (v13 > 0x40) {
          uint64_t v16 = ((2 * *(void *)(v14 + 8 * v11 + 8)) << (v12 ^ 0x3Fu)) | (v15 >> v12);
        }
        else {
          uint64_t v16 = v15 >> v12;
        }
        unint64_t v17 = v8 | ((*((_DWORD *)this + 182) & v16) << 8);
        uint64_t v18 = *((void *)this + 125);
        if (v18) {
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v18, (std::string *)a3, v17);
        }
        else {
          internal::marisa::grimoire::trie::Tail::restore((void *)this + 93, (std::string *)a3, v17);
        }
        uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
        if ((v19 & 0x80u) == 0) {
          unint64_t v20 = a3;
        }
        else {
          unint64_t v20 = *(void *)a3;
        }
        if ((v19 & 0x80u) != 0) {
          uint64_t v19 = *(void *)(a3 + 8);
        }
        if (v7 != v19)
        {
          uint64_t v21 = (unsigned char *)(v20 + v19 - 1);
          if ((unint64_t)v21 > v20 + v7)
          {
            unint64_t v22 = v20 + v7 + 1;
            do
            {
              char v23 = *(unsigned char *)(v22 - 1);
              *(unsigned char *)(v22 - 1) = *v21;
              *v21-- = v23;
              BOOL v24 = v22++ >= (unint64_t)v21;
            }
            while (!v24);
          }
        }
      }
      else
      {
        std::string::push_back((std::string *)a3, *(unsigned char *)(*((void *)this + 80) + v6));
      }
      if (v6 <= *((void *)this + 133)) {
        break;
      }
      unint64_t v6 = internal::marisa::grimoire::vector::BitVector::select1(this, v6) + ~v6;
    }
    int v25 = *(char *)(a3 + 23);
    BOOL v26 = v25 < 0;
    if (v25 >= 0) {
      unint64_t v27 = a3;
    }
    else {
      unint64_t v27 = *(void *)a3;
    }
    if (v26) {
      uint64_t v28 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v28 = *(unsigned __int8 *)(a3 + 23);
    }
    uint64_t v29 = (unsigned char *)(v27 + v28 - 1);
    if (v28) {
      BOOL v30 = (unint64_t)v29 > v27;
    }
    else {
      BOOL v30 = 0;
    }
    if (v30)
    {
      unint64_t v31 = v27 + 1;
      do
      {
        char v32 = *(unsigned char *)(v31 - 1);
        *(unsigned char *)(v31 - 1) = *v29;
        *v29-- = v32;
        BOOL v24 = v31++ >= (unint64_t)v29;
      }
      while (!v24);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  }
}

void sub_1B8C82D4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::common_prefix_search(uint64_t this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = (internal::marisa::grimoire::vector::BitVector *)this;
  char v15 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  int v8 = (internal::marisa::grimoire::vector::BitVector *)(this + 208);
  if (**(unsigned char **)(this + 224))
  {
    uint64_t v9 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(this + 208), 0);
    this = std::function<void ()(unsigned long,std::string_view,BOOL &)>::operator()(a4, v9, a2, 0, (uint64_t)&v15);
    if (v15) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = a3 == 0;
    }
    if (v10) {
      return this;
    }
  }
  else if (!a3)
  {
    return this;
  }
  this = internal::marisa::grimoire::trie::LoudsTrie::find_child(v7, a2, a3, &v13, &v14);
  if (this)
  {
    do
    {
      if ((*(void *)(*((void *)v7 + 28) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14))
      {
        uint64_t v11 = internal::marisa::grimoire::vector::BitVector::rank1(v8, v14);
        this = std::function<void ()(unsigned long,std::string_view,BOOL &)>::operator()(a4, v11, a2, v13, (uint64_t)&v15);
        if (v15) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v13 >= a3;
        }
        if (v12) {
          return this;
        }
      }
      else if (v13 >= a3)
      {
        return this;
      }
      this = internal::marisa::grimoire::trie::LoudsTrie::find_child(v7, a2, a3, &v13, &v14);
    }
    while ((this & 1) != 0);
  }
  return this;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::total_size(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = *((void *)this + 23);
  uint64_t v6 = *((void *)this + 29);
  uint64_t v7 = *((void *)this + 37);
  uint64_t v8 = *((void *)this + 43);
  uint64_t v9 = *((void *)this + 49);
  uint64_t v10 = *((void *)this + 55);
  uint64_t v11 = *((void *)this + 63);
  uint64_t v12 = *((void *)this + 69);
  uint64_t v13 = *((void *)this + 75);
  uint64_t v14 = *((void *)this + 81);
  uint64_t v15 = *((void *)this + 87);
  uint64_t v16 = *((void *)this + 96);
  uint64_t v17 = *((void *)this + 102);
  uint64_t v18 = *((void *)this + 110);
  uint64_t v19 = *((void *)this + 116);
  uint64_t v20 = *((void *)this + 122);
  uint64_t v21 = (internal::marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
  if (v21)
  {
    uint64_t v34 = v3;
    uint64_t v35 = v4;
    uint64_t v26 = v18;
    uint64_t v27 = v11;
    uint64_t v22 = v5;
    uint64_t v32 = v20;
    uint64_t v33 = v2;
    uint64_t v30 = v7;
    uint64_t v31 = v14;
    uint64_t v28 = v17;
    uint64_t v29 = v12;
    uint64_t v23 = v16;
    uint64_t v24 = v13;
    uint64_t v21 = (internal::marisa::grimoire::trie::LoudsTrie *)internal::marisa::grimoire::trie::LoudsTrie::total_size(v21);
    uint64_t v12 = v29;
    uint64_t v7 = v30;
    uint64_t v14 = v31;
    uint64_t v20 = v32;
    uint64_t v2 = v33;
    uint64_t v3 = v34;
    uint64_t v13 = v24;
    uint64_t v16 = v23;
    uint64_t v11 = v27;
    uint64_t v17 = v28;
    uint64_t v5 = v22;
    uint64_t v18 = v26;
    uint64_t v4 = v35;
  }
  return (uint64_t)v21
       + 12 * *((void *)this + 129)
       + 12 * v18
       + 12 * v11
       + 12 * v3
       + 12 * v7
       + 8 * v2
       + 8 * v17
       + 8 * v15
       + 8 * v10
       + 8 * v6
       + 4 * v4
       + 4 * v8
       + 4 * v9
       + 4 * v12
       + 4 * v13
       + 4 * v19
       + 4 * v20
       + 4 * v5
       + v16
       + v14;
}

unint64_t internal::marisa::grimoire::trie::LoudsTrie::io_size(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 17);
  uint64_t v4 = *((void *)this + 23);
  uint64_t v28 = *((void *)this + 29);
  uint64_t v29 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 37);
  uint64_t v6 = *((void *)this + 43);
  uint64_t v7 = *((void *)this + 49);
  uint64_t v25 = *((void *)this + 63);
  uint64_t v26 = *((void *)this + 69);
  uint64_t v27 = *((void *)this + 55);
  uint64_t v8 = *((void *)this + 75);
  uint64_t v9 = *((void *)this + 81);
  uint64_t v10 = *((void *)this + 87);
  unint64_t v11 = internal::marisa::grimoire::trie::Tail::io_size((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  uint64_t v12 = (internal::marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
  if (v12)
  {
    uint64_t v24 = v8;
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    uint64_t v16 = v10;
    uint64_t v17 = v2;
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    unint64_t v20 = v11;
    uint64_t v21 = internal::marisa::grimoire::trie::LoudsTrie::io_size(v12);
    unint64_t v11 = v20;
    uint64_t v4 = v19;
    uint64_t v3 = v18;
    uint64_t v2 = v17;
    uint64_t v10 = v16;
    uint64_t v7 = v15;
    uint64_t v6 = v14;
    uint64_t v5 = v13;
    uint64_t v8 = v24;
    uint64_t v22 = v21 - 16;
  }
  else
  {
    uint64_t v22 = 0;
  }
  return ((12 * v2 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v3 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v4 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * v5 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v6 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v7 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * v25 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v26 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v8 + 7) & 0xFFFFFFFFFFFFFFF8)
       + v11
       + 8 * (v28 + v29 + v27 + v10)
       + v22
       + ((12 * *((void *)this + 129) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 184;
}

unint64_t internal::marisa::grimoire::trie::Tail::io_size(internal::marisa::grimoire::trie::Tail *this)
{
  return ((*((void *)this + 3) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8 * *((void *)this + 9)
       + ((4 * *((void *)this + 23) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * *((void *)this + 29) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * *((void *)this + 17) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 48;
}

void internal::marisa::grimoire::trie::LoudsTrie::clear(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v2);
  internal::marisa::grimoire::trie::LoudsTrie::swap((internal::marisa::grimoire::trie::LoudsTrie *)v2, this);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v2);
}

void sub_1B8C8323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *internal::marisa::grimoire::vector::BitVector::swap(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::vector::BitVector *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 8, (uint64_t *)a2 + 8);
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 14, (uint64_t *)a2 + 14);
  return internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 20, (uint64_t *)a2 + 20);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  unsigned char *result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  uint64_t v5 = result[3];
  uint64_t v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  uint64_t v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((unsigned char *)result + 40);
  *((unsigned char *)result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v7;
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0x555555555555555) {
      uint64_t v5 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    double result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 24 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::Key>((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3]) {
    internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::Key>(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 108nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  internal::marisa::grimoire::vector::FlatVector::build((long long *)(a1 + 672), (uint64_t)v17);
  internal::marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C83564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  }
  a1[3] = v2;
}

uint64_t *internal::marisa::grimoire::vector::BitVector::push_back(uint64_t *this, int a2)
{
  unint64_t v2 = this[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0x70000003ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:58: MARISA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
  }
  unint64_t v4 = this;
  uint64_t v5 = this[3];
  if (v2 == v5 << 6)
  {
    uint64_t v7 = 0;
    this = internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(this, v5 + 1, &v7);
    unint64_t v2 = v4[6];
  }
  if (a2)
  {
    *(void *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return this;
}

uint64_t internal::marisa::grimoire::vector::BitVector::build(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, uint64_t a3)
{
  memset(v8, 0, 41);
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  internal::marisa::grimoire::vector::BitVector::build_index((internal::marisa::grimoire::vector::BitVector *)v8, this, a2, a3);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::shrink(this);
  long long v4 = v8[0];
  v8[0] = *(_OWORD *)this;
  *(_OWORD *)this = v4;
  uint64_t v5 = *(void *)&v8[1];
  *(void *)&v8[1] = *((void *)this + 2);
  *((void *)this + 2) = v5;
  long long v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v8);
  if ((void)v13) {
    MEMORY[0x1BA9C96F0](v13, 0x1000C8077774924);
  }
  if ((void)v11) {
    MEMORY[0x1BA9C96F0](v11, 0x1000C8077774924);
  }
  if ((void)v9) {
    MEMORY[0x1BA9C96F0](v9, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C83828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize((uint64_t *)&v26, a2[3]);
    uint64_t v9 = a2[3];
    if (v9)
    {
      unsigned int v10 = (unsigned int *)(*((void *)&v26 + 1) + 8);
      long long v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        unsigned int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 + v13 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    internal::marisa::grimoire::trie::Tail::build((long long *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *((void *)&v26 + 1) + v15;
        uint64_t v18 = a2[1] + v15;
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        *(void *)uint64_t v17 = *(void *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    uint64_t v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20) {
      MEMORY[0x1BA9C96F0](v20, 0x1000C8077774924);
    }
    uint64_t v21 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
    uint64_t v22 = v21;
    if (v21) {
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v21);
    }
    uint64_t v28 = *(internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    *(void *)(a1 + 100nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v22;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v28);
    uint64_t v23 = *(void *)(a1 + 1000);
    if (!v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001EBLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:491: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  uint64_t result = v26;
  if ((void)v26) {
    return MEMORY[0x1BA9C96F0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C83A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1BA9C9710](v9, MEMORY[0x1E4FBA2D0]);
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 59) {
      uint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 16 * v6;
    do
    {
      uint64_t v9 = (void *)(v3[1] + v8);
      *uint64_t v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::ReverseKey>((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(void *)(a2 + 24)) {
    internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::ReverseKey>(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 108nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  internal::marisa::grimoire::vector::FlatVector::build((long long *)(a1 + 672), (uint64_t)v17);
  internal::marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C83D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    memset(v20, 0, 41);
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize((uint64_t *)v20, *(void *)(a2 + 24));
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
      unsigned int v10 = (_DWORD *)(*((void *)&v20[0] + 1) + 8);
      int v11 = (_DWORD *)(*(void *)(a2 + 8) + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    internal::marisa::grimoire::trie::Tail::build((long long *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    uint64_t result = *(void *)&v20[0];
    if (*(void *)&v20[0]) {
      return MEMORY[0x1BA9C96F0](*(void *)&v20[0], 0x1000C8077774924);
    }
  }
  else
  {
    unint64_t v16 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E4FBA2D0]);
    uint64_t v17 = v16;
    if (v16) {
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v16);
    }
    *(void *)&v20[0] = *(void *)(a1 + 1000);
    *(void *)(a1 + 100nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v17;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)v20);
    uint64_t v18 = *(void *)(a1 + 1000);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001FDLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:509: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    return internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_1B8C83EB4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C9710](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::cache<internal::marisa::grimoire::trie::Key>(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, float a5)
{
  unint64_t v5 = *(void *)(result + 1056) & (a4 ^ (unint64_t)(32 * a2) ^ a2);
  uint64_t v6 = *(void *)(result + 1016);
  uint64_t v7 = v6 + 12 * v5;
  float v9 = *(float *)(v7 + 8);
  uint64_t v8 = (float *)(v7 + 8);
  if (v9 < a5)
  {
    unsigned int v10 = (_DWORD *)(v6 + 12 * v5);
    *unsigned int v10 = a2;
    v10[1] = a3;
    *uint64_t v8 = a5;
  }
  return result;
}

uint64_t *internal::marisa::grimoire::trie::LoudsTrie::reserve_cache(internal::marisa::grimoire::trie::LoudsTrie *this, const internal::marisa::grimoire::trie::Config *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = 256;
  if (a3 != 1) {
    uint64_t v5 = 1;
  }
  do
  {
    unint64_t v6 = v5;
    v5 *= 2;
  }
  while (v6 < a4 / *((unsigned int *)a2 + 2));
  uint64_t result = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize((uint64_t *)this + 126, v6);
  *((void *)this + 132) = v6 - 1;
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 12 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::cache<internal::marisa::grimoire::trie::ReverseKey>(uint64_t result, int a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(result + 1056) & a3;
  uint64_t v5 = *(void *)(result + 1016);
  uint64_t v6 = v5 + 12 * v4;
  float v8 = *(float *)(v6 + 8);
  unint64_t v7 = (float *)(v6 + 8);
  if (v8 < a4)
  {
    uint64_t v9 = (_DWORD *)(v5 + 12 * v4);
    *uint64_t v9 = a2;
    v9[1] = a3;
    *unint64_t v7 = a4;
  }
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::fill_cache(uint64_t this)
{
  unint64_t v1 = *(void *)(this + 1032);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = (internal::marisa::grimoire::vector::BitVector *)(this + 416);
    do
    {
      uint64_t v6 = *(void *)(v2 + 1016);
      unint64_t v7 = *(unsigned int *)(v6 + v3 + 4);
      if (v7)
      {
        *(unsigned char *)(v6 + v3 + 8) = *(unsigned char *)(*(void *)(v2 + 632) + v7);
        uint64_t v8 = *(void *)(v2 + 1016);
        if ((*(void *)(*(void *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7))
        {
          this = internal::marisa::grimoire::vector::BitVector::rank1(v5, v7);
          uint64_t v9 = *(void *)(v2 + 720);
          unint64_t v10 = (unint64_t)(v9 * this) >> 6;
          uint64_t v11 = (v9 * this) & 0x3F;
          unint64_t v12 = v11 + v9;
          uint64_t v13 = *(void *)(v2 + 688);
          unint64_t v14 = *(void *)(v13 + 8 * v10);
          if (v12 > 0x40) {
            uint64_t v15 = ((2 * *(void *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          }
          else {
            uint64_t v15 = v14 >> v11;
          }
          int v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          int v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        unint64_t v1 = *(void *)(v2 + 1032);
      }
      else
      {
        *(void *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return this;
}

uint64_t internal::marisa::grimoire::vector::BitVector::map(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  void v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  internal::marisa::grimoire::vector::BitVector::map_((internal::marisa::grimoire::vector::BitVector *)v4, a2);
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v4);
  if ((void)v9) {
    MEMORY[0x1BA9C96F0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x1BA9C96F0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x1BA9C96F0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C84238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C842E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::map(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::map_((internal::marisa::grimoire::vector::FlatVector *)v9, a2);
  long long v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C843E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C844A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::BitVector::read(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  void v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  internal::marisa::grimoire::vector::BitVector::read_((internal::marisa::grimoire::vector::BitVector *)v4, a2);
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v4);
  if ((void)v9) {
    MEMORY[0x1BA9C96F0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x1BA9C96F0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x1BA9C96F0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C845A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::read(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::read_((internal::marisa::grimoire::vector::FlatVector *)v9, a2);
  long long v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C84748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C84808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::trie::LoudsTrie::advance(internal::marisa::grimoire::vector::BitVector *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (*(void *)a4 == 0xFFFFFFFFLL)
  {
    MEMORY[0xFFFFFFFF] = 0xFFFFFFFFLL;
    if (*(char *)(a4 + 31) < 0)
    {
      long long v9 = *(const std::string::value_type **)(a4 + 8);
      std::string::size_type v10 = *(void *)(a4 + 16);
      std::string::__init_copy_ctor_external((std::string *)0x100000007, v9, v10);
    }
    else
    {
      MEMORY[0x100000007] = *(_OWORD *)(a4 + 8);
      MEMORY[0x100000017] = *(void *)(a4 + 24);
    }
    return;
  }
  unint64_t v27 = *(void *)a4;
  if (*(char *)(a4 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else {
    std::string __p = *(std::string *)(a4 + 8);
  }
  unint64_t v26 = 0;
  if (!a3)
  {
LABEL_20:
    *a5 = v27;
    unint64_t v14 = (std::string *)(a5 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      *unint64_t v14 = __p;
    }
    goto LABEL_46;
  }
  unint64_t v11 = 0;
  while ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_23;
    }
    unint64_t v26 = v11 + 1;
    if (*(unsigned __int8 *)(a2 + v11) != *((unsigned __int8 *)&v27 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7))
    {
LABEL_27:
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_46;
    }
    uint64_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    --*((unsigned char *)&__p.__r_.__value_.__s + 23);
    ++v11;
    p_p = &__p;
LABEL_19:
    p_p->__r_.__value_.__s.__data_[v12] = 0;
    if (v11 >= a3) {
      goto LABEL_20;
    }
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    unint64_t v26 = v11 + 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(a2 + v11) != *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0]
                                                              + __p.__r_.__value_.__l.__size_
                                                              - 1))
      goto LABEL_27;
    uint64_t v12 = --__p.__r_.__value_.__l.__size_;
    ++v11;
    goto LABEL_19;
  }
LABEL_23:
  memset(&__str, 0, sizeof(__str));
  while (v26 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(this, a2, a3, &v26, &v27, &__str) & 1) == 0)
    {
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_44;
    }
  }
  std::string::basic_string(&v24, &__str, v26 - v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v24;
  char v15 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v24.__r_.__value_.__l.__size_;
  int v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    int v16 = &__p;
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  uint64_t v18 = (std::string *)((char *)v16 + size - 1);
  if (size) {
    BOOL v19 = v18 > v16;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19)
  {
    int v20 = &v16->__r_.__value_.__s.__data_[1];
    do
    {
      std::string::value_type v21 = *(v20 - 1);
      *(v20 - 1) = v18->__r_.__value_.__s.__data_[0];
      v18->__r_.__value_.__s.__data_[0] = v21;
      uint64_t v18 = (std::string *)((char *)v18 - 1);
    }
    while (v20++ < (char *)v18);
    char v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *a5 = v27;
  uint64_t v23 = (std::string *)(a5 + 1);
  if (v15 < 0) {
    std::string::__init_copy_ctor_external(v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *uint64_t v23 = __p;
  }
LABEL_44:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B8C84B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::trie::LoudsTrie::restore_(uint64_t a1, std::string *a2, unint64_t a3)
{
  uint64_t v6 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  uint64_t v7 = (void *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v8 = *(void *)(a1 + 1056) & a3;
      uint64_t v9 = *(void *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v9 + 12 * v8 + 4)) {
        break;
      }
      unint64_t v10 = *(unsigned int *)(v9 + 12 * v8 + 8);
      if (v10 <= 0xFFFFFEFF)
      {
        uint64_t v20 = *(void *)(a1 + 1000);
        if (v20) {
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v20, a2, v10);
        }
        else {
          internal::marisa::grimoire::trie::Tail::restore(v7, a2, v10);
        }
      }
      else
      {
        std::string::push_back(a2, v10);
      }
      a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v8);
      if (!a3) {
        return;
      }
    }
    int v11 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
    if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v12 = internal::marisa::grimoire::vector::BitVector::rank1(v6, a3);
      uint64_t v13 = *(void *)(a1 + 720);
      unint64_t v14 = (unint64_t)(v13 * v12) >> 6;
      uint64_t v15 = (v13 * v12) & 0x3F;
      unint64_t v16 = v15 + v13;
      uint64_t v17 = *(void *)(a1 + 688);
      unint64_t v18 = *(void *)(v17 + 8 * v14);
      uint64_t v19 = v16 > 0x40
          ? ((2 * *(void *)(v17 + 8 * v14 + 8)) << (v15 ^ 0x3Fu)) | (v18 >> v15)
          : v18 >> v15;
      unint64_t v21 = v11 | ((*(_DWORD *)(a1 + 728) & v19) << 8);
      uint64_t v22 = *(void *)(a1 + 1000);
      if (v22) {
        internal::marisa::grimoire::trie::LoudsTrie::restore_(v22, a2, v21);
      }
      else {
        internal::marisa::grimoire::trie::Tail::restore(v7, a2, v21);
      }
    }
    else
    {
      std::string::push_back(a2, v11);
    }
    if (a3 <= *(void *)(a1 + 1064)) {
      break;
    }
    a3 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a3)
       + ~a3;
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::match_(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v10 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  int v11 = (void *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(a1 + 1056) & a5;
      uint64_t v13 = *(void *)(a1 + 1024);
      if (a5 == *(_DWORD *)(v13 + 12 * v12 + 4)) {
        break;
      }
      if ((*(void *)(*(void *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5))
      {
        uint64_t v15 = *(void *)(a1 + 1000);
        int v16 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a5);
        uint64_t v17 = internal::marisa::grimoire::vector::BitVector::rank1(v10, a5);
        uint64_t v18 = *(void *)(a1 + 720);
        unint64_t v19 = (unint64_t)(v18 * v17) >> 6;
        uint64_t v20 = (v18 * v17) & 0x3F;
        unint64_t v21 = v20 + v18;
        uint64_t v22 = *(void *)(a1 + 688);
        unint64_t v23 = *(void *)(v22 + 8 * v19);
        if (v15)
        {
          unint64_t v24 = v23 >> v20;
          if (v21 > 0x40) {
            v24 |= (2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          }
          unint64_t v25 = v16 | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          uint64_t v26 = *(void *)(a1 + 1000);
          if (v26)
          {
            if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v26, a2, a3, a4, v25) & 1) == 0) {
              return 0;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v21 > 0x40) {
            uint64_t v28 = ((2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu)) | (v23 >> v20);
          }
          else {
            uint64_t v28 = v23 >> v20;
          }
          unint64_t v25 = v16 | ((*(_DWORD *)(a1 + 728) & v28) << 8);
        }
        if ((internal::marisa::grimoire::trie::Tail::match(v11, a2, a3, a4, v25) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(*(void *)(a1 + 640) + a5) != *(unsigned __int8 *)(a2 + *a4)) {
          return 0;
        }
        ++*a4;
      }
LABEL_27:
      if (a5 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      if (*a4 >= a3) {
        return 0;
      }
      a5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a5)+ ~a5;
    }
    unint64_t v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
    if (v14 <= 0xFFFFFEFF)
    {
      uint64_t v27 = *(void *)(a1 + 1000);
      if (v27)
      {
        if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v27, a2, a3, a4, v14) & 1) == 0) {
          return 0;
        }
      }
      else if ((internal::marisa::grimoire::trie::Tail::match(v11, a2, a3, a4, v14) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v14) {
        return 0;
      }
      ++*a4;
    }
    a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v12);
    if (!a5) {
      return 1;
    }
    if (*a4 >= a3) {
      return 0;
    }
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *a6)
{
  unint64_t v12 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  uint64_t v13 = (void *)(a1 + 744);
  while (1)
  {
    unint64_t v14 = *(void *)(a1 + 1056) & a5;
    uint64_t v15 = *(void *)(a1 + 1024);
    if (a5 != *(_DWORD *)(v15 + 12 * v14 + 4))
    {
      int v17 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a5);
      if ((*(void *)(*(void *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5))
      {
        uint64_t v18 = internal::marisa::grimoire::vector::BitVector::rank1(v12, a5);
        uint64_t v19 = *(void *)(a1 + 720);
        unint64_t v20 = (unint64_t)(v19 * v18) >> 6;
        uint64_t v21 = (v19 * v18) & 0x3F;
        unint64_t v22 = v21 + v19;
        uint64_t v23 = *(void *)(a1 + 688);
        unint64_t v24 = *(void *)(v23 + 8 * v20);
        if (v22 > 0x40) {
          uint64_t v25 = ((2 * *(void *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu)) | (v24 >> v21);
        }
        else {
          uint64_t v25 = v24 >> v21;
        }
        unint64_t v27 = v17 | ((*(_DWORD *)(a1 + 728) & v25) << 8);
        uint64_t v28 = *(void *)(a1 + 1000);
        if (v28)
        {
          if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v28, a2, a3, a4, v27, a6) & 1) == 0) {
            return 0;
          }
        }
        else if (!internal::marisa::grimoire::trie::Tail::prefix_match(v13, a2, a3, a4, v27, a6))
        {
          return 0;
        }
      }
      else
      {
        if (v17 != *(unsigned __int8 *)(a2 + *a4)) {
          return 0;
        }
        std::string::push_back(a6, v17);
        ++*a4;
      }
      if (a5 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      a5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a5)+ ~a5;
      goto LABEL_23;
    }
    unint64_t v16 = *(unsigned int *)(v15 + 12 * v14 + 8);
    if (v16 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v16) {
        return 0;
      }
      std::string::push_back(a6, v16);
      ++*a4;
      goto LABEL_22;
    }
    uint64_t v26 = *(void *)(a1 + 1000);
    if (!v26) {
      break;
    }
    if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v26, a2, a3, a4, v16, a6) & 1) == 0) {
      return 0;
    }
LABEL_22:
    a5 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v14);
    if (!a5) {
      return 1;
    }
LABEL_23:
    if (*a4 >= a3)
    {
      internal::marisa::grimoire::trie::LoudsTrie::restore_(a1, a6, a5);
      return 1;
    }
  }
  if (internal::marisa::grimoire::trie::Tail::prefix_match(v13, a2, a3, a4, v16, a6)) {
    goto LABEL_22;
  }
  return 0;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_(internal::marisa::grimoire::trie::Config *this, unsigned int a2)
{
  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:52: MARISA_CODE_ERROR: (config_flags & ~MARISA_CONFIG_MASK) != 0";
  }
  if ((a2 & 0x7F) != 0) {
    *(void *)this = a2 & 0x7F;
  }
  internal::marisa::grimoire::trie::Config::parse_cache_level((uint64_t)this, a2);
  internal::marisa::grimoire::trie::Config::parse_tail_mode((uint64_t)this, a2);
  return internal::marisa::grimoire::trie::Config::parse_node_order((uint64_t)this, a2);
}

uint64_t internal::marisa::grimoire::trie::Config::parse_cache_level(uint64_t this, __int16 a2)
{
  unsigned int v2 = a2 & 0xF80;
  int v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512) {
      goto LABEL_11;
    }
    if (v2 != 1024)
    {
      int v3 = a2 & 0xF80;
      if (v2 != 2048) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
LABEL_10:
    int v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0) {
    goto LABEL_11;
  }
  if (v2 == 128) {
    goto LABEL_10;
  }
  int v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000060;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:96: MARISA_CODE_ERROR: undefined cache level";
  }
LABEL_11:
  *(_DWORD *)(this + 8) = v3;
  return this;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_tail_mode(uint64_t this, __int16 a2)
{
  int v2 = 4096;
  int v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000075;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:117: MARISA_CODE_ERROR: undefined tail mode";
    }
    int v2 = 0x2000;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_node_order(uint64_t this, int a2)
{
  int v2 = 0x20000;
  int v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_1F126CB38;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008ALL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:138: MARISA_CODE_ERROR: undefined node order";
    }
    int v2 = 0x10000;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  long long v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 60) {
      uint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    unint64_t v10 = (void *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  void v5[3] = v4;
  return result;
}

void *internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](8 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

void *internal::marisa::grimoire::vector::Vector<unsigned long long>::shrink(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  uint64_t v1 = result[3];
  if (v1 != result[4])
  {
    return internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, v1);
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::map_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::map((long long *)this, a2);
  *((void *)this + 6) = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  unint64_t v4 = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (*((void *)this + 6) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:134: MARISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((void *)this + 7) = v4;
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map((long long *)this + 4, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::map((long long *)this + 7, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::map((long long *)this + 10, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C85758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C85818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C858D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<unsigned long long>(this, (uint64_t *)(a1 + 16), v4 >> 3);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 3;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<unsigned long long>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = internal::marisa::grimoire::io::Mapper::map_data(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x10000007ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:122: MARISA_STATE_ERROR: fixed_";
  }
  *(unsigned char *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 1;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  unint64_t v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<internal::marisa::grimoire::vector::RankIndex>(this, (uint64_t *)(a1 + 16), v5);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v5;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<internal::marisa::grimoire::vector::RankIndex>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = internal::marisa::grimoire::io::Mapper::map_data(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<unsigned int>(this, (uint64_t *)(a1 + 16), v4 >> 2);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 2;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<unsigned int>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = internal::marisa::grimoire::io::Mapper::map_data(a1, 4 * a3);
  *a2 = result;
  return result;
}

void *internal::marisa::grimoire::vector::FlatVector::map_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::map((long long *)this, a2);
  uint64_t v4 = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA00000084;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:132: MARISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((void *)this + 6) = v4;
  *((_DWORD *)this + 14) = *(_DWORD *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  uint64_t result = (void *)internal::marisa::grimoire::io::Mapper::map_data(a2, 8uLL);
  *((void *)this + 8) = *result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::read_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::read((long long *)this, a2);
  unsigned int v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v7, 4uLL);
  *((void *)this + 6) = v7;
  unsigned int v6 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  if (*((void *)this + 6) < (unint64_t)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:153: MARISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((void *)this + 7) = v6;
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read((long long *)this + 4, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::read((long long *)this + 7, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::read((long long *)this + 10, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C86140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C86200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C862C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  if ((v7 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  unint64_t v4 = v7 >> 3;
  internal::marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v7 >> 3);
  internal::marisa::grimoire::io::Reader::read<unsigned long long>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    unsigned int v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    unsigned int v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 8 * a3;
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, v3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  unint64_t v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize((uint64_t *)a1, v7 / 0xC);
  internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

void internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::realloc(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  }
  a1[3] = v2;
}

uint64_t internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 12 * a3;
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, v3);
}

_DWORD *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](12 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    unint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6;
      void v7[2] = *((_DWORD *)v6 + 2);
      *(void *)unint64_t v7 = v8;
      v7 += 3;
      unint64_t v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  if ((v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  unint64_t v4 = v7 >> 2;
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)a1, v7 >> 2);
  internal::marisa::grimoire::io::Reader::read<unsigned int>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  size_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 61) {
      uint64_t v5 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 4 * a3;
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, v3);
}

_DWORD *internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](4 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (int *)a1[1];
    unint64_t v7 = result;
    do
    {
      int v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::read_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::read((long long *)this, a2);
  LODWORD(v6) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  if (v6 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA0000009ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:154: MARISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((void *)this + 6) = v6;
  LODWORD(v6) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  *((_DWORD *)this + 14) = v6;
  uint64_t v6 = 0;
  uint64_t result = internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 8uLL);
  *((void *)this + 8) = v6;
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::write_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  int __buf = *((void *)this + 6);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  int v5 = *((void *)this + 7);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v5, 4uLL);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_((uint64_t)this + 64, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 112, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 160, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 8 * *(void *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned long long>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 0);
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 8 * a3;
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 12 * *(void *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t internal::marisa::grimoire::io::Writer::write<internal::marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 12 * a3;
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 4 * *(void *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned int>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 4 * a3;
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::write_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  LODWORD(__buf) = *((void *)this + 6);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *((_DWORD *)this + 14);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  uint64_t __buf = *((void *)this + 8);
  return internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 8uLL);
}

void *std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char const*>>,std::reverse_iterator<std::__wrap_iter<char const*>>>(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a6 > 0x16)
  {
    uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v10 = a6 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t result = operator new(v10 + 1);
    v6[1] = a6;
    _OWORD v6[2] = v11 | 0x8000000000000000;
    *uint64_t v6 = result;
    uint64_t v6 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    char v12 = *(unsigned char *)--a3;
    *(unsigned char *)uint64_t v6 = v12;
    uint64_t v6 = (void *)((char *)v6 + 1);
  }
  *(unsigned char *)uint64_t v6 = 0;
  return result;
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](24 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(a1[1] + 16);
    unint64_t v7 = result + 16;
    do
    {
      *((void *)v7 - 2) = *((void *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      int v8 = *v6;
      v6 += 6;
      *unint64_t v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::Key>(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v11 = 0;
    char v12 = (_DWORD *)(v10 + 16);
    do
    {
      *char v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  unint64_t v13 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v10, v10 + 24 * v9, 0);
  uint64_t v14 = 256;
  if (a5 != 1) {
    uint64_t v14 = 1;
  }
  do
  {
    unint64_t v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(a1 + 126, v15);
  a1[132] = v15 - 1;
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  unint64_t v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(a1 + 78, v84);
  uint64_t v77 = a1 + 52;
  internal::marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  uint64_t v72 = a5;
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  uint64_t v17 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    uint64_t v73 = a1 + 78;
    do
    {
      uint64_t v18 = a1[58];
      uint64_t v19 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v18 = v23;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      uint64_t v76 = v17;
      uint64_t v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != v22) {
            break;
          }
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          uint64_t v20 = (v20 + 1);
          if (v21 == v20) {
            goto LABEL_49;
          }
        }
      }
      if (v20 != v21)
      {
        uint64_t v75 = v18;
        uint64_t v26 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v26) {
          MEMORY[0x1BA9C96F0](v26, 0x1000C8077774924);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        double v28 = *(float *)(v27 + 24 * v20 + 12);
        uint64_t v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          uint64_t v30 = 24 * v20;
          uint64_t v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(void *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&unsigned int v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              uint64_t v27 = *(void *)(a2 + 8);
              double v28 = 0.0;
              LODWORD(v2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v29;
            }
            double v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&unsigned int v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        __n128 v34 = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        unint64_t v16 = a1 + 78;
        uint64_t v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          unint64_t v36 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v37 = v81[1];
          if (v81[1] < 129)
          {
            unsigned __int8 v38 = 0;
            uint64_t v40 = 0;
          }
          else
          {
            unsigned __int8 v38 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(v81[1]);
            uint64_t v40 = v39;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38) {
            operator delete(v38);
          }
          uint64_t v35 = v75;
        }
        uint64_t v41 = v81[1];
        if (v35 == v76) {
          a1[133] = v81[1];
        }
        if (v41)
        {
          unint64_t v42 = 0;
          do
          {
            double v43 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v42);
            double v44 = (uint64_t *)v43;
            uint64_t v45 = v43[2];
            unsigned int v46 = *v43;
            uint64_t v47 = *(void *)(a2 + 8);
            unint64_t v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            unint64_t v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              unint64_t v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              unint64_t v50 = v48 - 1;
              unint64_t v51 = v43[2];
              do
              {
                unint64_t v52 = v51;
                unint64_t v51 = v49;
                long long v53 = (uint64_t *)(v47 + 24 * v46);
                uint64_t v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  uint64_t v55 = *v53;
                  uint64_t v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    unint64_t v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                unint64_t v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            float v58 = *((float *)v43 + 3);
            double v57 = v43 + 3;
            float v59 = v58;
            uint64_t v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(void *)(v47 + 24 * v46) + v45)) & a1[132];
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            long long v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = a1[81];
              uint64_t v66 = (_DWORD *)(v61 + 12 * v60);
              *uint64_t v66 = v24;
              v66[1] = v65;
              *long long v63 = v59;
              uint64_t v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(unsigned char *)(*(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v77, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, v44);
            internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
      uint64_t v17 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)a1, v72 == 1, 1);
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(v16);
  internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::Key>((uint64_t)a1, a2, a3);
  long long v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  uint64_t v69 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v69;
  long long v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((void)v80) {
    MEMORY[0x1BA9C96F0](v80, 0x1000C8077774924);
  }
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C87828(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  if (a13) {
    MEMORY[0x1BA9C96F0](a13, 0x1000C8077774924);
  }
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100]((uint64_t *)va);
  uint64_t v21 = *(void *)(v18 - 144);
  if (v21) {
    MEMORY[0x1BA9C96F0](v21, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::build(long long *a1, uint64_t a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::build_((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C87A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(uint64_t *result, unsigned char *a2)
{
  long long v3 = result;
  uint64_t v4 = result[3];
  uint64_t v5 = result[4];
  size_t v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    uint64_t v7 = 2 * v5;
    if (v5 < 0) {
      uint64_t v7 = -1;
    }
    if (v5 <= v6 >> 1) {
      size_t v8 = v6;
    }
    else {
      size_t v8 = v7;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(result, v8);
    uint64_t v4 = v3[3];
  }
  *(unsigned char *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

__n128 internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back(uint64_t *a1, __n128 *a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 59) {
      uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::realloc(a1, v8);
    uint64_t v4 = a1[3];
  }
  __n128 result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back(uint64_t *result, uint64_t a2)
{
  long long v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 > 0x555555555555555) {
      uint64_t v7 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    __n128 result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(result, v8);
    uint64_t v4 = v3[3];
  }
  uint64_t v9 = v3[1] + 24 * v4;
  *(void *)uint64_t v9 = *(void *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

unsigned char *internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(unsigned char *result)
{
  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  size_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return internal::marisa::grimoire::vector::Vector<unsigned char>::realloc((uint64_t *)result, v1);
  }
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    uint64_t v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x1BA9C96F0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C87D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Key>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 + a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 + a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v5, v10, a3)+ v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v11, v4, a3)+ v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v10, v11, a3 + 1)+ v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Key *>(v5, v4, a3);
  }
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 + a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 + a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 + a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Key>(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a1 + a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a2 + a3);
    while (v6)
    {
      int v9 = *v7;
      int v10 = *v8;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      ++v7;
      ++v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

unsigned char *internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(uint64_t *a1, size_t __sz)
{
  uint64_t result = operator new[](__sz, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = result;
    do
    {
      char v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

void std::deque<internal::marisa::grimoire::trie::Range>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<internal::marisa::grimoire::trie::Range>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void std::deque<internal::marisa::grimoire::trie::Range>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFFCuLL);
  std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B8C887B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(a1[4], v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

_OWORD *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](16 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (long long *)a1[1];
    unint64_t v7 = result;
    do
    {
      long long v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>((long long *)a1, (long long *)&a1[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        float v5 = *(float *)(v4 + 28);
        float v6 = *(float *)(v4 + 12);
        uint64_t v4 = v2;
        if (v5 > v6)
        {
          uint64_t v10 = *(void *)v2;
          int v11 = *(_DWORD *)(v2 + 8);
          uint64_t v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7) {
              break;
            }
            float v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              uint64_t v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        uint64_t v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      __n128 v7 = *a1++;
      uint64_t result = v7;
    }
    else
    {
      __n128 v6 = *a3++;
      uint64_t result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3)) {
          break;
        }
        ++v12;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      uint64_t v39 = a3;
      uint64_t v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          __n128 v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          uint64_t result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        uint64_t v20 = &a1[(v16 >> 1) + v12];
        uint64_t v19 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = a3 - a2;
          uint64_t v19 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v19[v27 >> 1];
            float v30 = *((float *)v29 + 3);
            long long v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3)) {
              uint64_t v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v17 = v10;
        }
        else {
          uint64_t v17 = v10 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = &a2[v17 >> 1];
        uint64_t v20 = a2;
        if (v14 != a2)
        {
          unint64_t v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          uint64_t v20 = &a1[v12];
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = &v20[v21 >> 1];
            float v24 = *((float *)v23 + 3);
            unint64_t v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      uint64_t v32 = v10 - v18;
      uint64_t v33 = v18;
      int v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *,internal::marisa::grimoire::trie::WeightedRange *>((char *)v20, (char *)a2, (char *)v19);
      uint64_t v35 = v33;
      uint64_t v36 = (long long *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        uint64_t v38 = v35;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v34, v19, v39, a4, a5, v32, a7, v40);
        uint64_t v19 = v20;
        uint64_t v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        uint64_t v37 = v26;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v14, v20, v34, a4, v37, v35, a7, v40);
        uint64_t v14 = v36;
        a3 = v39;
      }
      uint64_t v10 = v32;
      a1 = v14;
      a2 = v19;
      if (!v32) {
        return result;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, a2, a3, a4, a5, v10, a7);
  }
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  if (a1 != a2)
  {
    __n128 result = *a1;
    *a3 = *a1;
    uint64_t v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      uint64_t v5 = 0;
      __n128 v6 = a3;
      do
      {
        __n128 v7 = a1;
        __n128 v8 = v6;
        a1 = v4;
        uint64_t v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *__n128 v6 = *v8;
          uint64_t v9 = a3;
          if (v8 != a3)
          {
            uint64_t v10 = v5;
            while (1)
            {
              uint64_t v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10)) {
                break;
              }
              *uint64_t v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                uint64_t v9 = a3;
                break;
              }
            }
          }
        }
        __n128 result = *a1;
        *uint64_t v9 = *a1;
        uint64_t v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

long long *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(long long *result, long long *a2, long long *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      unint64_t v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        uint64_t v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            long long v17 = *(_OWORD *)v14;
            v14 += 4;
            long long v16 = v17;
          }
          else
          {
            long long v15 = *a2++;
            long long v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14) {
            return result;
          }
        }
        return (long long *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      __n128 v8 = (float *)&__src[v7 * 16];
      uint64_t v9 = a3 - 1;
      while (a2 != result)
      {
        float v10 = *(v8 - 1);
        float v11 = *((float *)a2 - 1);
        if (v10 <= v11) {
          uint64_t v12 = (char *)(v8 - 4);
        }
        else {
          uint64_t v12 = (char *)(a2 - 1);
        }
        if (v10 <= v11) {
          v8 -= 4;
        }
        else {
          --a2;
        }
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src) {
          return result;
        }
      }
      unint64_t v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *,internal::marisa::grimoire::trie::WeightedRange *>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      long long v9 = *(_OWORD *)__src;
      int64_t v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v6];
      *(_OWORD *)uint64_t v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      uint64_t v4 = __src + 16;
      long long v10 = *((_OWORD *)a3 - 1);
      size_t v7 = a3 - 16 - __src;
      if (a3 - 16 != __src) {
        memmove(__src + 16, __src, v7);
      }
      *(_OWORD *)__srCGFloat c = v10;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *>(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        long long v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      uint64_t v12 = &a1[v10];
      do
      {
        long long v13 = *--v12;
        uint64_t v14 = &v12[v3];
        long long v15 = v12;
        do
        {
          long long v16 = v15;
          long long v15 = v14;
          *long long v16 = *v14;
          BOOL v17 = __OFSUB__(v3, a3 - v14);
          uint64_t v19 = v3 - (a3 - v14);
          char v18 = (v19 < 0) ^ v17;
          uint64_t v14 = &a1[v19];
          if (v18) {
            uint64_t v14 = &v15[v3];
          }
        }
        while (v14 != v12);
        *long long v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<internal::marisa::grimoire::trie::Range *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<internal::marisa::grimoire::trie::Range *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::build_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  unsigned int v5 = 0;
  uint64_t v6 = *(unsigned int **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  do
  {
    unsigned int v9 = *v6++;
    unsigned int v8 = v9;
    if (v9 > v5) {
      unsigned int v5 = v8;
    }
    --v7;
  }
  while (v7);
  if (v5)
  {
    uint64_t v10 = 0;
    do
    {
      ++v10;
      BOOL v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    uint64_t v10 = 0;
  }
  BOOL v12 = v4 != 0;
  unint64_t v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  uint64_t result = (uint64_t)internal::marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v14);
  if (v14) {
    *(void *)(*(void *)(a1 + 8) + 8 * *(void *)(a1 + 24) - 8) = 0;
  }
  *(void *)(a1 + 48) = v10;
  if (v10) {
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  }
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a1 + 64) = v16;
  if (v16)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t result = internal::marisa::grimoire::vector::FlatVector::set(a1, v17, *(_DWORD *)(*(void *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(void *)(a2 + 24));
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::set(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(this + 48);
  unint64_t v4 = (unint64_t)(v3 * a2) >> 6;
  uint64_t v5 = (v3 * a2) & 0x3F;
  unint64_t v6 = *(unsigned int *)(this + 56);
  uint64_t v7 = *(void *)(this + 8);
  unint64_t v8 = v6 & a3;
  *(void *)(v7 + 8 * v4) = *(void *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41) {
    *(void *)(v7 + 8 * v4 + 8) = *(void *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  }
  return this;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v23 = *(a2 - 2);
          unsigned int v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            *BOOL v11 = v23;
            *(a2 - 2) = v24;
            unsigned int v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v25;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)BOOL v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unsigned int v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v11, a2);
      BOOL v11 = (unsigned int *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v20);
    BOOL v11 = v20 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v10, v20, a3, -v13, a5 & 1);
      BOOL v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, a2);
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v4;
        unint64_t v4 = v2;
        unsigned int v6 = v5[2];
        unsigned int v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          unsigned int v9 = v5[2];
          unsigned int v8 = v5[3];
          unsigned int v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          BOOL v11 = result;
          if (v5 != result)
          {
            uint64_t v12 = v3;
            do
            {
              unsigned int v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  BOOL v11 = v5;
                  goto LABEL_17;
                }
                BOOL v11 = (unsigned int *)((char *)result + v12);
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8) {
                  goto LABEL_17;
                }
              }
              else
              {
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              unint64_t v15 = (unsigned int *)((char *)result + v12);
              *unint64_t v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            BOOL v11 = result;
          }
LABEL_17:
          *BOOL v11 = v9;
          v11[1] = v8;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result + 1;
      do
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        unsigned int v5 = v4[2];
        unsigned int v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          unsigned int v7 = *result;
          unsigned int v8 = result[1];
          for (uint64_t i = v3; ; i -= 2)
          {
            unsigned int v10 = *i;
            i[1] = v6;
            i[2] = v10;
            unsigned int v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8)) {
              break;
            }
          }
          *(i - 1) = v7;
          *uint64_t i = v8;
        }
        uint64_t v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unsigned int v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    BOOL v11 = (int *)(a2 + 1);
    unsigned int v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unsigned int v12 = *a2;
    unsigned int v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unsigned int v6 = (int *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unsigned int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unsigned int v6 = (int *)(a1 + 1);
      *a3 = v4;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unsigned int v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unsigned int v15 = *a3;
      unsigned int v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 2;
      unsigned int v6 = (int *)(a2 + 1);
    }
    BOOL v11 = v7;
  }
  int v17 = *v6;
  *unsigned int v6 = *v11;
  *BOOL v11 = v17;
  return v8;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  unsigned int v2 = a1[1];
  unsigned int v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (uint64_t i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unsigned int v7 = i[2];
      i += 2;
      unsigned int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      unsigned int v8 = *(a2 - 2);
      unsigned int v4 = v8;
    }
  }
  if (i < a2)
  {
    unsigned int v9 = *i;
    unsigned int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unsigned int v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unsigned int v12 = i[2];
        i += 2;
        unsigned int v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          unsigned int v13 = *(a2 - 2);
          a2 -= 2;
          unsigned int v10 = v13;
          BOOL v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  while (1)
  {
    unsigned int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      unsigned int v8 = *(a2 - 2);
      a2 -= 2;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unsigned int v10 = *(a2 - 2);
        a2 -= 2;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unsigned int v13 = (unsigned int *)v6;
  }
  else
  {
    unsigned int v12 = *a2;
    unsigned int v13 = (unsigned int *)v6;
    BOOL v14 = a2;
    do
    {
      *unsigned int v13 = v12;
      *BOOL v14 = v5;
      unsigned int v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unsigned int v16 = v13[2];
          v13 += 2;
          unsigned int v5 = v16;
          BOOL v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        unsigned int v18 = *(v14 - 2);
        v14 -= 2;
        unsigned int v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unsigned int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    unsigned int v14 = *v10;
    unsigned int v15 = v10[1];
    *unsigned int v10 = v13;
    v10[1] = v9[1];
    unsigned int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = (char *)a1 + v17;
      unsigned int v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        unsigned int v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      unsigned int v16 = v9;
      goto LABEL_21;
    }
    unsigned int v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15) {
      goto LABEL_18;
    }
    unsigned int v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *unsigned int v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unsigned int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unsigned int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unsigned int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unsigned int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unsigned int v14 = *a4;
    unsigned int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unsigned int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unsigned int v17 = *a3;
      unsigned int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unsigned int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unsigned int v20 = *a2;
        unsigned int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unsigned int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        unsigned int v15 = *v14;
        unsigned int v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *unsigned int v14 = v16;
          *a1 = v15;
          unsigned int v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      unsigned int v19 = a2 - 2;
      do
      {
        unsigned int v21 = *a1;
        unsigned int v20 = a1[1];
        unsigned int v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          unsigned int *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          unsigned int *v22 = *v19;
          v22[1] = v19[1];
          *unsigned int v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unsigned int v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        unsigned int v12 = *a4;
        unsigned int v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v14 = (unsigned int *)(result + 8 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unsigned int v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_22;
            }
          }
        }
        unsigned int v14 = v8;
LABEL_22:
        *unsigned int v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unsigned int v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    unsigned int v7 = *v6;
    unsigned int v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      unsigned int v9 = *(_DWORD *)(a2 - 8);
      unsigned int v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v12 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          unsigned int v11 = (unsigned int *)(result + 8 * v5);
          unsigned int v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9) {
              break;
            }
            unsigned int v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10) {
              break;
            }
          }
          else
          {
            unsigned int v14 = v11[1];
          }
          *uint64_t v6 = v13;
          v6[1] = v14;
          uint64_t v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1) {
            goto LABEL_12;
          }
        }
      }
      unsigned int v11 = v6;
LABEL_12:
      *unsigned int v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v4, v13);
      unsigned int v8 = *a1;
      unsigned int v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    unsigned int v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](16 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1[1] + 8);
    unsigned int v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      uint64_t v8 = *v6;
      v6 += 2;
      *unsigned int v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (_DWORD *)(v9 + 16);
    do
    {
      *uint64_t v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  unint64_t v12 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v9, v9 + 24 * v8, 0);
  uint64_t v13 = 256;
  if (a5 != 1) {
    uint64_t v13 = 1;
  }
  do
  {
    unint64_t v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(a1 + 126, v14);
  a1[132] = v14 - 1;
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  uint64_t v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(a1 + 78, v84);
  internal::marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  uint64_t v16 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    uint64_t v72 = a1 + 52;
    uint64_t v73 = a1 + 78;
    do
    {
      uint64_t v17 = a1[58];
      uint64_t v18 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v22 = v17;
        uint64_t v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          uint64_t v24 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != v21) {
            break;
          }
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          uint64_t v19 = (v19 + 1);
          if (v20 == v19) {
            goto LABEL_49;
          }
        }
      }
      if (v19 != v20)
      {
        uint64_t v76 = v16;
        int v77 = v17 - v16;
        uint64_t v25 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v25) {
          MEMORY[0x1BA9C96F0](v25, 0x1000C8077774924);
        }
        uint64_t v75 = v17;
        uint64_t v26 = *(void *)(a2 + 8);
        double v27 = *(float *)(v26 + 24 * v19 + 12);
        uint64_t v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          uint64_t v29 = 24 * v19;
          uint64_t v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(void *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&unsigned int v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              uint64_t v26 = *(void *)(a2 + 8);
              double v27 = 0.0;
              LODWORD(v19) = v28;
            }
            double v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&unsigned int v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        __n128 v33 = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        uint64_t v15 = a1 + 78;
        uint64_t v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          uint64_t v35 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v36 = v81[1];
          if (v81[1] < 129)
          {
            uint64_t v37 = 0;
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v37 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(v81[1]);
            uint64_t v39 = v38;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37) {
            operator delete(v37);
          }
          uint64_t v34 = v76;
        }
        uint64_t v40 = v81[1];
        if (v75 == v34) {
          a1[133] = v81[1];
        }
        if (v40)
        {
          unint64_t v41 = 0;
          do
          {
            uint64_t v42 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v41);
            __n128 v43 = (uint64_t *)v42;
            uint64_t v44 = v42[2];
            uint64_t v45 = *(void *)(a2 + 8);
            unint64_t v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            unint64_t v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              unint64_t v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              unint64_t v48 = v46 - 1;
              uint64_t v49 = (uint64_t *)(v45 + 24 * *v42);
              unint64_t v50 = v42[2];
              do
              {
                unint64_t v51 = v50;
                unint64_t v50 = v47;
                uint64_t v52 = v49;
                uint64_t v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  uint64_t v54 = *v52;
                  uint64_t v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    unint64_t v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            uint64_t v56 = a1[81];
            float v58 = *((float *)v42 + 3);
            double v57 = v42 + 3;
            float v59 = v58;
            uint64_t v60 = a1[132] & v56;
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            long long v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = (_DWORD *)(v61 + 12 * v60);
              *uint64_t v65 = v77;
              v65[1] = v56;
              *long long v63 = v59;
              uint64_t v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(unsigned char *)(~v48 + *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43));
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v72, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, v43);
            internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
      uint64_t v16 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)a1, a5 == 1, 1);
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(v15);
  internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::ReverseKey>((uint64_t)a1, a2, a3);
  long long v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  uint64_t v68 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v68;
  long long v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((void)v80) {
    MEMORY[0x1BA9C96F0](v80, 0x1000C8077774924);
  }
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8B3E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a21) {
    MEMORY[0x1BA9C96F0](a21, 0x1000C8077774924);
  }
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](&a27);
  uint64_t v30 = *(void *)(v27 - 144);
  if (v30) {
    MEMORY[0x1BA9C96F0](v30, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    unsigned int v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x1BA9C96F0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8B5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::ReverseKey>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3 - 1);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3 - 1);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v10, a3)+ v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v11, v4, a3)+ v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v10, v11, a3 + 1)+ v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v4, a3);
  }
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(~a4 + *(void *)a1);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(~a4 + *(void *)a2);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(~a4 + *(void *)a3);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::ReverseKey>(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 + ~a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a1 + ~a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](12 * a2, MEMORY[0x1E4FBA2D0]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(a1[1] + 8);
    uint64_t v7 = result + 8;
    do
    {
      *((void *)v7 - 1) = *((void *)v6 - 1);
      int v8 = *v6;
      v6 += 3;
      *uint64_t v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x1BA9C96F0);
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  *(void *)(a1 + 16) = internal::marisa::grimoire::io::Mapper::map_data(this, v4);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  size_t v6 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v6, 8uLL);
  size_t v4 = v6;
  internal::marisa::grimoire::vector::Vector<unsigned char>::resize((uint64_t *)a1, v6);
  internal::marisa::grimoire::io::Reader::read<unsigned char>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v6 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::resize(uint64_t *result, size_t a2)
{
  size_t v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 < 0) {
      uint64_t v5 = -1;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "h:34: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, a3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  unint64_t v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize((uint64_t *)a1, v7 / 0xC);
  internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = *(void *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned char>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "h:33: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

double internal::marisa::grimoire::trie::Tail::Tail(internal::marisa::grimoire::trie::Tail *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *((_OWORD *)this + 1nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  return result;
}

uint64_t internal::marisa::grimoire::trie::Tail::build(long long *a1, uint64_t a2, long long *a3, int a4)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x200000011;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:17: MA"
          "RISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000) {
    goto LABEL_15;
  }
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000028;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:40: MA"
          "RISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = 0;
    a4 = 4096;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8) + 16 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8) {
        break;
      }
LABEL_11:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = -v8;
    uint64_t v10 = *(void *)v7 + 1;
    while (*(unsigned char *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1)) {
        goto LABEL_11;
      }
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  _OWORD v19[3] = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  internal::marisa::grimoire::trie::Tail::build_((uint64_t)v18, a2, a3, a4);
  long long v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v18[1];
  *(void *)&v18[1] = v13;
  long long v14 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::vector::BitVector *)(a1 + 3), (internal::marisa::grimoire::vector::BitVector *)v19);
  if ((void)v24) {
    MEMORY[0x1BA9C96F0](v24, 0x1000C8077774924);
  }
  if ((void)v22) {
    MEMORY[0x1BA9C96F0](v22, 0x1000C8077774924);
  }
  if ((void)v20) {
    MEMORY[0x1BA9C96F0](v20, 0x1000C8077774924);
  }
  if (*(void *)&v19[0]) {
    MEMORY[0x1BA9C96F0](*(void *)&v19[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v18[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::trie::Tail::build_(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (_DWORD *)(v9 + 12);
    do
    {
      *uint64_t v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  unint64_t v12 = *(void *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    long long v14 = v33;
    do
    {
      --v13;
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = v15 + 16 * v13;
      unint64_t v18 = (unsigned int *)(v16 + 8);
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_1F126CB38;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000ACLL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/t"
                       "ail.cc:172: MARISA_RANGE_ERROR: current.length() == 0";
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(void *)v16 + v19)) {
          goto LABEL_13;
        }
        ++v20;
        --v19;
        if (v17 == v20) {
          goto LABEL_14;
        }
      }
      uint64_t v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        uint64_t v22 = *((void *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v22 = *((void *)&v34[0] + 1);
      if (v21)
      {
        *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(void *)(a1 + 24);
      unint64_t v23 = *v18;
      if (v23)
      {
        for (unint64_t i = 0; i < v23; ++i)
        {
          char v32 = *(unsigned char *)(*(void *)v16 - v23 + i + 1);
          internal::marisa::grimoire::vector::Vector<unsigned char>::push_back((uint64_t *)a1, &v32);
          unint64_t v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            unint64_t v25 = 1;
            do
            {
              internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      char v32 = 0;
      internal::marisa::grimoire::vector::Vector<unsigned char>::push_back((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        int v31 = __cxa_allocate_exception(0x20uLL);
        *int v31 = &unk_1F126CB38;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C2;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc"
                 ":194: MARISA_SIZE_ERROR: buf_.size() > MARISA_UINT32_MAX";
      }
LABEL_29:
      long long v14 = (void *)v16;
    }
    while (v13);
  }
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink((unsigned char *)a1);
  long long v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  uint64_t v27 = *((void *)a3 + 2);
  *((void *)a3 + 2) = *(void *)&v34[1];
  *(void *)&v34[1] = v27;
  long long v28 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v34[2]);
  uint64_t result = v26;
  BYTE8(v34[2]) = v27;
  if ((void)v26) {
    return MEMORY[0x1BA9C96F0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8C66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1BA9C96F0](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::trie::Tail::swap(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::trie::Tail *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  return internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::trie::Tail *)((char *)a2 + 48));
}

uint64_t internal::marisa::grimoire::trie::Tail::map(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  internal::marisa::grimoire::vector::Vector<char>::map(v8, a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::vector::BitVector *)v9, a2);
  long long v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::vector::BitVector *)v9);
  if ((void)v14) {
    MEMORY[0x1BA9C96F0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x1BA9C96F0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x1BA9C96F0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x1BA9C96F0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8C848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::trie::Tail::map_(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::vector::Vector<char>::map((long long *)this, a2);
  return internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t internal::marisa::grimoire::trie::Tail::read(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  internal::marisa::grimoire::vector::Vector<char>::read(v8, a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::vector::BitVector *)v9, a2);
  long long v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::vector::BitVector *)v9);
  if ((void)v14) {
    MEMORY[0x1BA9C96F0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x1BA9C96F0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x1BA9C96F0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x1BA9C96F0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x1BA9C96F0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t internal::marisa::grimoire::trie::Tail::read_(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::vector::Vector<char>::read((long long *)this, a2);
  return internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t internal::marisa::grimoire::trie::Tail::write(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)this, a2);
  return internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

void internal::marisa::grimoire::trie::Tail::restore(void *a1, std::string *this, unint64_t a3)
{
  unint64_t v3 = a3;
  if (a1[12])
  {
    do
    {
      std::string::push_back(this, *(unsigned char *)(a1[2] + v3));
      uint64_t v6 = *(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1[2];
    std::string::value_type v8 = *(unsigned char *)(v7 + a3);
    if (v8)
    {
      unint64_t v9 = (unsigned __int8 *)(a3 + v7 + 1);
      do
      {
        std::string::push_back(this, v8);
        int v10 = *v9++;
        std::string::value_type v8 = v10;
      }
      while (v10);
    }
  }
}

uint64_t internal::marisa::grimoire::trie::Tail::match(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5 = a1[2];
  if (a1[12])
  {
    unint64_t v6 = *a4;
    do
    {
      if (*(unsigned __int8 *)(v5 + a5) != *(unsigned __int8 *)(a2 + v6)) {
        break;
      }
      *a4 = ++v6;
      if ((*(void *)(a1[8] + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5)) {
        return 1;
      }
      ++a5;
    }
    while (v6 < a3);
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)(v5 + a5);
    unint64_t v8 = *a4;
    int v11 = *v7;
    unint64_t v9 = v7 + 1;
    int v10 = v11;
    while (v10 == *(unsigned __int8 *)(a2 + v8))
    {
      *a4 = ++v8;
      int v10 = *v9;
      if (!*v9) {
        return 1;
      }
      ++v9;
      if (v8 >= a3) {
        return 0;
      }
    }
  }
  return 0;
}

BOOL internal::marisa::grimoire::trie::Tail::prefix_match(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *this)
{
  unint64_t v7 = a5;
  if (a1[12])
  {
    unint64_t v12 = *a4;
    while (1)
    {
      int v13 = *(unsigned __int8 *)(a1[2] + v7);
      int v14 = *(unsigned __int8 *)(a2 + v12);
      BOOL v15 = v13 == v14;
      if (v13 != v14) {
        break;
      }
      std::string::push_back(this, v13);
      unint64_t v12 = *a4 + 1;
      *a4 = v12;
      if ((*(void *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7)) {
        break;
      }
      ++v7;
      if (v12 >= a3)
      {
        do
        {
          std::string::push_back(this, *(unsigned char *)(a1[2] + v7));
          uint64_t v16 = *(void *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7;
          ++v7;
        }
        while ((v16 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    uint64_t v17 = a1[2];
    unint64_t v18 = *a4;
    unint64_t v19 = v17 + a5 - *a4;
    unsigned __int8 v20 = *(unsigned char *)(v17 + a5);
    unint64_t v21 = *a4;
    while (1)
    {
      int v22 = *(unsigned __int8 *)(a2 + v21);
      BOOL v15 = v20 == v22;
      if (v20 != v22) {
        break;
      }
      std::string::push_back(this, v20);
      unint64_t v23 = *a4;
      unint64_t v21 = *a4 + 1;
      *a4 = v21;
      unsigned __int8 v20 = *(unsigned char *)(v19 + v21);
      if (!v20) {
        break;
      }
      if (v21 >= a3)
      {
        long long v24 = (unsigned __int8 *)(v7 - v18 + v17 + v23 + 2);
        do
        {
          std::string::push_back(this, v20);
          int v25 = *v24++;
          unsigned __int8 v20 = v25;
        }
        while (v25);
        return 1;
      }
    }
  }
  return v15;
}

uint64_t internal::marisa::grimoire::trie::Tail::clear(internal::marisa::grimoire::trie::Tail *this)
{
  memset(v3, 0, 41);
  long long v6 = 0u;
  memset(v7, 0, sizeof(v7));
  long long v8 = 0u;
  memset(v9, 0, sizeof(v9));
  v3[3] = 0u;
  long long v4 = 0u;
  memset(v5, 0, sizeof(v5));
  long long v2 = *(_OWORD *)this;
  *(_OWORD *)this = 0u;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::vector::BitVector *)v3, (internal::marisa::grimoire::trie::Tail *)((char *)this + 48));
  if ((void)v8) {
    MEMORY[0x1BA9C96F0](v8, 0x1000C8077774924);
  }
  if ((void)v6) {
    MEMORY[0x1BA9C96F0](v6, 0x1000C8077774924);
  }
  if ((void)v4) {
    MEMORY[0x1BA9C96F0](v4, 0x1000C8077774924);
  }
  if (*(void *)&v3[0]) {
    MEMORY[0x1BA9C96F0](*(void *)&v3[0], 0x1000C8077774924);
  }
  uint64_t result = v2;
  if ((void)v2) {
    return MEMORY[0x1BA9C96F0](v2, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8CE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    int v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  void v5[3] = v4;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<char>::map(long long *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8CF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<char>::read(long long *a1, internal::marisa::grimoire::io::Reader *a2)
{
  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x1BA9C96F0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_1B8C8D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x1BA9C96F0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    uint64_t v7 = 0;
    goto LABEL_68;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Entry>(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        int v17 = *(_DWORD *)(v10 + 12);
        *(void *)unint64_t v10 = *(void *)v12;
        *(void *)(v10 + 8) = *(void *)(v12 + 8);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 16;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 16);
          v13 -= 16;
          uint64_t v22 = *(void *)v11;
          int v23 = *(_DWORD *)(v11 + 12);
          *(void *)unint64_t v11 = v21;
          *(void *)(v11 + 8) = *(void *)(v13 + 8);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v25 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v24;
      uint64_t v26 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v25;
      *(void *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    uint64_t v42 = v7;
    while (v12 > v5)
    {
      uint64_t v28 = *(void *)(v12 - 16);
      v12 -= 16;
      uint64_t v27 = v28;
      uint64_t v29 = *(void *)(v10 - 16);
      v10 -= 16;
      *(void *)unint64_t v12 = v29;
      uint64_t v30 = *(void *)(v10 + 8);
      *(void *)unint64_t v10 = v27;
      uint64_t v31 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = v30;
      *(void *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      uint64_t v32 = *(void *)v13;
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v33 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v32;
      uint64_t v34 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = v33;
      *(void *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    uint64_t v35 = v10 - v5;
    uint64_t v36 = (uint64_t)(v10 - v5) >> 4;
    uint64_t v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      uint64_t v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          uint64_t v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17) {
            goto LABEL_52;
          }
          uint64_t v39 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v5, v10, a3)+ v42;
        }
        uint64_t v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          uint64_t v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          uint64_t v7 = v42;
        }
        else
        {
          uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v11, v4, a3)+ v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_63:
        unint64_t v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16) {
      goto LABEL_31;
    }
    if (v37 < 17)
    {
      uint64_t v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      uint64_t v7 = v42 + 1;
    }
    else
    {
      uint64_t v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v10, v11, a3 + 1)+ v42;
    }
    uint64_t v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_64:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17) {
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Entry *>(v5, v4, a3);
  }
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 - a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 - a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 - a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  long long v3 = (void *)(a1 + 16);
  if (a1 + 16 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    int v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        int v9 = v8 - 2;
        int v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Entry>((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        uint64_t v12 = v8[1];
        *int v8 = v11;
        uint64_t v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 - a3);
    int v8 = (unsigned __int8 *)(*(void *)a1 - a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

uint64_t internal::marisa::grimoire::vector::BitVector::rank1(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  unint64_t v2 = a2 >> 9;
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(*((void *)this + 2) + 8 * (a2 >> 6)) & ~(-1 << a2);
  unint64_t v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t internal::marisa::grimoire::vector::BitVector::select0(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 16);
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = *((void *)this + 10);
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3;
    unint64_t v8 = v3-- << 9;
    int v9 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  uint64_t v11 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v12 = v11[1];
  uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(a2 - (v3 << 9) + *v11);
  uint64_t v14 = 8 * v3;
  if ((unint64_t)v13 >= 256 - (v12 >> 23))
  {
    unint64_t v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    uint64_t v16 = (v15 >> 9) & 0x1FF;
    if ((unint64_t)v13 >= 384 - v16)
    {
      uint64_t v18 = (v15 >> 18) & 0x1FF;
      if ((unint64_t)v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v18 - 448);
      }
      else
      {
        v14 |= 6uLL;
        uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v16 - 384);
      }
    }
    else if ((unint64_t)v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v15 & 0x1FF) - 320);
    }
    else
    {
      v14 |= 4uLL;
      uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 23) - 256);
    }
  }
  else if ((unint64_t)v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    uint64_t v17 = (v12 >> 15);
    if ((unint64_t)v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v17 - 192);
    }
    else
    {
      v14 |= 2uLL;
      uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 7)
                                                                                      - 128);
    }
  }
  else if ((unint64_t)v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    uint64_t v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 & 0x7F) - 64);
  }
}

unint64_t internal::marisa::grimoire::vector::anonymous namespace'::select_bit(internal::marisa::grimoire::vector::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  uint64_t v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * (void)this
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
                                                                               * ((void)this
                                                                                - ((unint64_t)(0x101010101010100 * v4) >> v5))
                                                                               + (a3 >> v5)];
}

unint64_t internal::marisa::grimoire::vector::BitVector::select1(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 22);
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = *((void *)this + 10);
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3--;
    unint64_t v8 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  unsigned int v10 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v11 = v10[1];
  unint64_t v12 = a2 - *v10;
  uint64_t v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    unint64_t v23 = v11 >> 23;
    unint64_t v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    unint64_t v25 = (v24 >> 9) & 0x1FF;
    unint64_t v26 = (v24 >> 18) & 0x1FF;
    uint64_t v27 = v13 | 7;
    BOOL v28 = v12 >= v26;
    if (v12 < v26) {
      uint64_t v29 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v25);
    }
    else {
      uint64_t v29 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v26);
    }
    if (!v28) {
      uint64_t v27 = v13 | 6;
    }
    unint64_t v30 = v24 & 0x1FF;
    uint64_t v31 = v13 | 5;
    uint64_t v32 = v13 | 4;
    uint64_t v33 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v23);
    BOOL v34 = v12 >= v30;
    if (v12 < v30) {
      uint64_t v21 = v33;
    }
    else {
      uint64_t v21 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v30);
    }
    if (v34) {
      uint64_t v32 = v31;
    }
    if (v12 < v25)
    {
      uint64_t v22 = v32;
    }
    else
    {
      uint64_t v21 = v29;
      uint64_t v22 = v27;
    }
  }
  else
  {
    unint64_t v14 = v11 >> 7;
    unint64_t v15 = (v11 >> 15);
    uint64_t v16 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - (v11 >> 7));
    if (v12 < v15)
    {
      uint64_t v17 = v13 | 2;
    }
    else
    {
      uint64_t v16 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v15);
      uint64_t v17 = v13 | 3;
    }
    unint64_t v18 = v11 & 0x7F;
    BOOL v20 = v12 >= v18;
    unint64_t v19 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v18);
    if (v20) {
      v13 |= 1uLL;
    }
    else {
      unint64_t v19 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)v12;
    }
    BOOL v20 = v12 >= v14;
    if (v12 < v14) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v16;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v13;
    }
  }
}

void internal::marisa::grimoire::vector::BitVector::build_index(internal::marisa::grimoire::vector::BitVector *this, const internal::marisa::grimoire::vector::BitVector *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v7 = this;
  unint64_t v8 = *((void *)a2 + 6);
  unsigned int v9 = (uint64_t *)((char *)this + 64);
  unint64_t v10 = v8 >> 9;
  if ((v8 & 0x1FF) != 0) {
    ++v10;
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize(v9, v10 + 1);
  uint64_t v11 = *((void *)v6 + 3);
  if (!v11)
  {
    LODWORD(v14) = 0;
    if ((v8 & 0x1FF) == 0) {
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  unint64_t v51 = v8 & 0x1FF;
  unint64_t v52 = v8;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v53 = (uint64_t *)((char *)v7 + 160);
  uint64_t v54 = (uint64_t *)((char *)v7 + 112);
  uint64_t v57 = *((void *)v6 + 3);
  do
  {
    unint64_t v16 = v12 >> 9;
    switch(v13 & 7)
    {
      case 1:
        uint64_t v17 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v18 = v17[1] & 0xFFFFFF80 | (v14 - *v17) & 0x7F;
        goto LABEL_11;
      case 2:
        uint64_t v17 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v18 = v17[1] & 0xFFFF807F | ((v14 - *(unsigned char *)v17) << 7);
        goto LABEL_11;
      case 3:
        uint64_t v17 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v18 = v17[1] & 0xFF807FFF | ((v14 - *(unsigned char *)v17) << 15);
        goto LABEL_11;
      case 4:
        uint64_t v17 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v18 = v17[1] & 0x7FFFFF | ((unsigned __int16)(v14 - *(_WORD *)v17) << 23);
LABEL_11:
        v17[1] = v18;
        break;
      case 5:
        unint64_t v19 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v20 = v19[2] & 0xFFFFFE00 | (v14 - *v19) & 0x1FF;
        goto LABEL_15;
      case 6:
        unint64_t v19 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v20 = v19[2] & 0xFFFC01FF | (((v14 - *v19) & 0x1FF) << 9);
        goto LABEL_15;
      case 7:
        unint64_t v19 = (_DWORD *)(*((void *)v7 + 9) + 12 * v16);
        unsigned int v20 = v19[2] & 0xF803FFFF | (((v14 - *v19) & 0x1FF) << 18);
LABEL_15:
        v19[2] = v20;
        break;
      default:
        *(_DWORD *)(*((void *)v7 + 9) + 12 * v16) = v14;
        break;
    }
    unint64_t v21 = *(void *)(*((void *)v6 + 2) + 8 * v13);
    unint64_t v22 = (((((v21 >> 1) & 0x5555555555555555) + (v21 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
        + ((((v21 >> 1) & 0x5555555555555555) + (v21 & 0x5555555555555555)) & 0x3333333333333333);
    unint64_t v23 = (0x101010101010101 * (((v22 >> 4) & 0x707070707070707) + (v22 & 0x707070707070707))) >> 56;
    if (a3)
    {
      unint64_t v24 = v6;
      uint64_t v25 = a3;
      unint64_t v26 = v7;
      uint64_t v27 = a4;
      uint64_t v28 = 64;
      if (v8 < 0x40) {
        uint64_t v28 = v8;
      }
      unint64_t v29 = v28 - v23;
      unint64_t v30 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(-(int)v15 & 0x1FFLL);
      if (v28 - v23 > (unint64_t)v30)
      {
        uint64_t v55 = v15;
        uint64_t v56 = v14;
        internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(v54, &v58);
        uint64_t v15 = v55;
        uint64_t v14 = v56;
        uint64_t v11 = v57;
      }
      v15 += v29;
      a4 = v27;
      uint64_t v7 = v26;
      a3 = v25;
      unint64_t v6 = v24;
    }
    if (a4)
    {
      uint64_t v31 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(-(int)v14 & 0x1FFLL);
      if (v23 > (unint64_t)v31)
      {
        unint64_t v32 = v21;
        uint64_t v33 = v14;
        uint64_t v34 = v15;
        internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(v53, &v58);
        uint64_t v15 = v34;
        uint64_t v11 = v57;
        uint64_t v14 = v33;
      }
    }
    v14 += v23;
    ++v13;
    v12 += 64;
    v8 -= 64;
  }
  while (v11 != v13);
  unint64_t v8 = v52;
  if (v51)
  {
LABEL_29:
    unint64_t v35 = (v8 - 1) >> 9;
    switch(((v8 - 1) >> 6) & 7)
    {
      case 0uLL:
        uint64_t v36 = *((void *)v7 + 9);
        uint64_t v37 = (_DWORD *)(v36 + 12 * v35);
        int v38 = v14 - *v37;
        unsigned int v39 = v37[1] & 0xFFFFFF80 | v38 & 0x7F;
        v37[1] = v39;
        goto LABEL_32;
      case 1uLL:
        uint64_t v36 = *((void *)v7 + 9);
        uint64_t v40 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v39 = v40[1];
        int v38 = v14 - *v40;
LABEL_32:
        unsigned int v41 = v39 & 0xFFFF807F | (v38 << 7);
        *(_DWORD *)(v36 + 12 * v35 + 4) = v41;
        goto LABEL_34;
      case 2uLL:
        uint64_t v36 = *((void *)v7 + 9);
        uint64_t v42 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v41 = v42[1];
        int v38 = v14 - *v42;
LABEL_34:
        unsigned int v43 = v41 & 0xFF807FFF | (v38 << 15);
        *(_DWORD *)(v36 + 12 * v35 + 4) = v43;
        goto LABEL_36;
      case 3uLL:
        uint64_t v36 = *((void *)v7 + 9);
        uint64_t v44 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v43 = v44[1];
        int v38 = v14 - *v44;
LABEL_36:
        *(_DWORD *)(v36 + 12 * v35 + 4) = v43 & 0x7FFFFF | ((unsigned __int16)v38 << 23);
        goto LABEL_38;
      case 4uLL:
        uint64_t v36 = *((void *)v7 + 9);
        int v38 = v14 - *(_DWORD *)(v36 + 12 * v35);
LABEL_38:
        uint64_t v45 = v36 + 12 * v35;
        unsigned int v46 = *(_DWORD *)(v45 + 8) & 0xFFFFFE00 | v38 & 0x1FF;
        *(_DWORD *)(v45 + 8) = v46;
        goto LABEL_39;
      case 5uLL:
        uint64_t v36 = *((void *)v7 + 9);
        uint64_t v49 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v46 = v49[2];
        int v38 = v14 - *v49;
LABEL_39:
        unsigned int v47 = v46 & 0xFFFC01FF | ((v38 & 0x1FF) << 9);
        *(_DWORD *)(v36 + 12 * v35 + 8) = v47;
        goto LABEL_40;
      case 6uLL:
        uint64_t v36 = *((void *)v7 + 9);
        unint64_t v50 = (_DWORD *)(v36 + 12 * v35);
        unsigned int v47 = v50[2];
        int v38 = v14 - *v50;
LABEL_40:
        *(_DWORD *)(v36 + 12 * v35 + 8) = v47 & 0xF803FFFF | ((v38 & 0x1FF) << 18);
        break;
      default:
        break;
    }
  }
LABEL_41:
  *((void *)v7 + 6) = v8;
  *((void *)v7 + 7) = *((void *)v6 + 7);
  *(_DWORD *)(*((void *)v7 + 9) + 12 * *((void *)v7 + 11) - 12) = v14;
  if (a3)
  {
    int v58 = v8;
    internal::marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)v7 + 14, &v58);
    internal::marisa::grimoire::vector::Vector<unsigned int>::shrink((_DWORD *)v7 + 28);
  }
  if (a4)
  {
    unint64_t v48 = (uint64_t *)((char *)v7 + 160);
    int v58 = v8;
    internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(v48, &v58);
    internal::marisa::grimoire::vector::Vector<unsigned int>::shrink(v48);
  }
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(uint64_t *result, _DWORD *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, v8);
    uint64_t v4 = v3[3];
    unint64_t v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *internal::marisa::grimoire::vector::Vector<unsigned int>::shrink(_DWORD *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_1F126CB38;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  uint64_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return internal::marisa::grimoire::vector::Vector<unsigned int>::realloc((uint64_t *)result, v1);
  }
  return result;
}

uint64_t greek_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_0, 46);
  if (among_b)
  {
    while (2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      switch(among_b)
      {
        case 1:
          unint64_t v5 = &s_0;
          goto LABEL_27;
        case 2:
          unint64_t v5 = &s_1;
          goto LABEL_27;
        case 3:
          unint64_t v5 = &s_2;
          goto LABEL_27;
        case 4:
          unint64_t v5 = &s_3;
          goto LABEL_27;
        case 5:
          unint64_t v5 = &s_4;
          goto LABEL_27;
        case 6:
          unint64_t v5 = &s_5;
          goto LABEL_27;
        case 7:
          unint64_t v5 = &s_6;
          goto LABEL_27;
        case 8:
          unint64_t v5 = &s_7;
          goto LABEL_27;
        case 9:
          unint64_t v5 = &s_8;
          goto LABEL_27;
        case 10:
          unint64_t v5 = &s_9;
          goto LABEL_27;
        case 11:
          unint64_t v5 = &s_10;
          goto LABEL_27;
        case 12:
          unint64_t v5 = &s_11;
          goto LABEL_27;
        case 13:
          unint64_t v5 = &s_12;
          goto LABEL_27;
        case 14:
          unint64_t v5 = &s_13;
          goto LABEL_27;
        case 15:
          unint64_t v5 = &s_14;
          goto LABEL_27;
        case 16:
          unint64_t v5 = &s_15;
          goto LABEL_27;
        case 17:
          unint64_t v5 = &s_16;
          goto LABEL_27;
        case 18:
          unint64_t v5 = &s_17;
          goto LABEL_27;
        case 19:
          unint64_t v5 = &s_18;
          goto LABEL_27;
        case 20:
          unint64_t v5 = &s_19;
          goto LABEL_27;
        case 21:
          unint64_t v5 = &s_20;
          goto LABEL_27;
        case 22:
          unint64_t v5 = &s_21;
          goto LABEL_27;
        case 23:
          unint64_t v5 = &s_22;
          goto LABEL_27;
        case 24:
          unint64_t v5 = &s_23;
LABEL_27:
          uint64_t result = slice_from_s(a1, 2, v5);
          if ((result & 0x80000000) == 0) {
            goto LABEL_28;
          }
          return result;
        case 25:
          int v7 = skip_utf8(*(void *)a1, v4, *(unsigned int *)(a1 + 16), 0, -1);
          if (v7 < 0) {
            break;
          }
          *(_DWORD *)(a1 + 8) = v7;
          goto LABEL_28;
        default:
LABEL_28:
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          among_CGFloat b = find_among_b(a1, (uint64_t)&a_0, 46);
          if (!among_b) {
            break;
          }
          continue;
      }
      break;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if ((int)len_utf8(*(char **)a1) < 3) {
    return 0;
  }
  **(unsigned char **)(a1 + 48) = 1;
  int v9 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v9;
  int v10 = find_among_b(a1, (uint64_t)&a_1, 40);
  if (v10)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    switch(v10)
    {
      case 1:
        uint64_t v11 = &s_24;
        goto LABEL_47;
      case 2:
        uint64_t v11 = &s_25;
        goto LABEL_45;
      case 3:
        uint64_t v11 = &s_26;
        goto LABEL_45;
      case 4:
        uint64_t v11 = &s_27;
        goto LABEL_47;
      case 5:
        uint64_t v11 = &s_28;
        uint64_t v12 = a1;
        int v13 = 8;
        goto LABEL_50;
      case 6:
        uint64_t v11 = &s_29;
        goto LABEL_45;
      case 7:
        uint64_t v11 = &s_30;
        goto LABEL_45;
      case 8:
        uint64_t v11 = &s_31;
LABEL_45:
        uint64_t v12 = a1;
        int v13 = 6;
        goto LABEL_50;
      case 9:
        uint64_t v11 = &s_32;
LABEL_47:
        uint64_t v12 = a1;
        int v13 = 4;
        goto LABEL_50;
      case 10:
        uint64_t v11 = &s_33;
        uint64_t v12 = a1;
        int v13 = 12;
        goto LABEL_50;
      case 11:
        uint64_t v11 = &s_34;
        uint64_t v12 = a1;
        int v13 = 10;
LABEL_50:
        uint64_t result = slice_from_s(v12, v13, v11);
        if ((result & 0x80000000) == 0) {
          goto LABEL_51;
        }
        return result;
      default:
LABEL_51:
        **(unsigned char **)(a1 + 48) = 0;
        break;
    }
  }
  int v14 = v9 - v8;
  int v15 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 24) = v15;
  if (find_among_b(a1, (uint64_t)&a_4, 14))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    **(unsigned char **)(a1 + 48) = 0;
    int v16 = *(_DWORD *)(a1 + 12);
    uint64_t v17 = *(int *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v17;
    *(_DWORD *)(a1 + 24) = v17;
    if ((int)v17 - 3 > *(_DWORD *)(a1 + 16)
      && (char v18 = *(unsigned char *)(v17 + *(void *)a1 - 1), (v18 & 0xE0) == 0xA0)
      && ((0x80220000 >> v18) & 1) != 0
      && find_among_b(a1, (uint64_t)&a_2, 9)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      unsigned int v20 = &s_35;
      uint64_t v21 = a1;
      int v22 = 2;
    }
    else
    {
      int v19 = *(_DWORD *)(a1 + 12) + v17 - v16;
      *(_DWORD *)(a1 + 8) = v19;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
      *(_DWORD *)(a1 + 24) = v19;
      if (!find_among_b(a1, (uint64_t)&a_3, 22) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
        goto LABEL_63;
      }
      unsigned int v20 = &s_36;
      uint64_t v21 = a1;
      int v22 = 4;
    }
    uint64_t result = slice_from_s(v21, v22, v20);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
LABEL_63:
  int v23 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if (find_among_b(a1, (uint64_t)&a_6, 7))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    **(unsigned char **)(a1 + 48) = 0;
    int v24 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v24;
    *(_DWORD *)(a1 + 24) = v24;
    if (find_among_b(a1, (uint64_t)&a_5, 8))
    {
      if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
      {
        uint64_t result = slice_from_s(a1, 4, &s_37);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
  }
  int v25 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (find_among_b(a1, (uint64_t)&a_9, 7))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    **(unsigned char **)(a1 + 48) = 0;
    uint64_t v27 = *(int *)(a1 + 8);
    uint64_t v26 = *(int *)(a1 + 12);
    if (eq_s_b(a1, 6, &s_38))
    {
      int v28 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 8) <= v28)
      {
        unint64_t v29 = &s_39;
LABEL_82:
        uint64_t v34 = a1;
        int v35 = 4;
        goto LABEL_83;
      }
    }
    else
    {
      int v28 = *(_DWORD *)(a1 + 16);
    }
    uint64_t v30 = v26 - v27;
    uint64_t v31 = *(int *)(a1 + 12) - v30;
    *(_DWORD *)(a1 + 8) = v31;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v31;
    *(_DWORD *)(a1 + 24) = v31;
    if ((int)v31 - 3 > v28)
    {
      char v32 = *(unsigned char *)(v31 + *(void *)a1 - 1);
      if ((v32 & 0xE0) == 0xA0
        && ((0x80220000 >> v32) & 1) != 0
        && find_among_b(a1, (uint64_t)&a_7, 19)
        && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
      {
        unint64_t v29 = &s_40;
        uint64_t v34 = a1;
        int v35 = 2;
LABEL_83:
        uint64_t result = slice_from_s(v34, v35, v29);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_84;
      }
    }
    int v33 = *(_DWORD *)(a1 + 12) - v30;
    *(_DWORD *)(a1 + 8) = v33;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v33;
    *(_DWORD *)(a1 + 24) = v33;
    if (find_among_b(a1, (uint64_t)&a_8, 13) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      unint64_t v29 = &s_41;
      goto LABEL_82;
    }
  }
LABEL_84:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
  uint64_t result = r_steps4(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
    uint64_t result = r_steps5(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
      uint64_t result = r_steps6(a1);
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
        uint64_t result = r_steps7(a1);
        if ((result & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
          uint64_t result = r_steps8(a1);
          if ((result & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
            uint64_t result = r_steps9(a1);
            if ((result & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
              uint64_t result = r_steps10(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                uint64_t result = r_step2a(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                  uint64_t result = r_step2b(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                    uint64_t result = r_step2c(a1);
                    if ((result & 0x80000000) == 0)
                    {
                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                      uint64_t result = r_step2d(a1);
                      if ((result & 0x80000000) == 0)
                      {
                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                        uint64_t result = r_step3(a1);
                        if ((result & 0x80000000) == 0)
                        {
                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                          uint64_t result = r_step4(a1);
                          if ((result & 0x80000000) == 0)
                          {
                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                            uint64_t result = r_step5a(a1);
                            if ((result & 0x80000000) == 0)
                            {
                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                              uint64_t result = r_step5b(a1);
                              if ((result & 0x80000000) == 0)
                              {
                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                uint64_t result = r_step5c(a1);
                                if ((result & 0x80000000) == 0)
                                {
                                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                  uint64_t result = r_step5d(a1);
                                  if ((result & 0x80000000) == 0)
                                  {
                                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                    uint64_t result = r_step5e(a1);
                                    if ((result & 0x80000000) == 0)
                                    {
                                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                      uint64_t result = r_step5f(a1);
                                      if ((result & 0x80000000) == 0)
                                      {
                                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                        uint64_t result = r_step5g(a1);
                                        if ((result & 0x80000000) == 0)
                                        {
                                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                          uint64_t result = r_step5h(a1);
                                          if ((result & 0x80000000) == 0)
                                          {
                                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                            uint64_t result = r_step5j(a1);
                                            if ((result & 0x80000000) == 0)
                                            {
                                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                              uint64_t result = r_step5i(a1);
                                              if ((result & 0x80000000) == 0)
                                              {
                                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                uint64_t result = r_step5k(a1);
                                                if ((result & 0x80000000) == 0)
                                                {
                                                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                  uint64_t result = r_step5l(a1);
                                                  if ((result & 0x80000000) == 0)
                                                  {
                                                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                    uint64_t result = r_step5m(a1);
                                                    if ((result & 0x80000000) == 0)
                                                    {
                                                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                      uint64_t result = r_step6(a1);
                                                      if ((result & 0x80000000) == 0)
                                                      {
                                                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                        uint64_t result = r_step7(a1);
                                                        if ((result & 0x80000000) == 0)
                                                        {
                                                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
                                                          return 1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_steps4(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_11, 7);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 48) = 0;
      uint64_t v3 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      if ((int)v3 - 3 > *(_DWORD *)(a1 + 16))
      {
        char v4 = *(unsigned char *)(v3 + *(void *)a1 - 1);
        if ((v4 & 0xE0) != 0xA0 || ((0x80220000 >> v4) & 1) == 0) {
          return 0;
        }
        uint64_t result = find_among_b(a1, (uint64_t)&a_10, 19);
        if (!result) {
          return result;
        }
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 2, &s_42);
          if ((int)result >= 0) {
            return 1;
          }
          else {
            return result;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_steps5(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_14, 11)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if ((int)v4 - 3 > *(_DWORD *)(a1 + 16))
  {
    int v5 = *(unsigned __int8 *)(v4 + *(void *)a1 - 1);
    if ((v5 == 191 || v5 == 181)
      && find_among_b(a1, (uint64_t)&a_12, 7)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      uint64_t v9 = slice_from_s(a1, 2, &s_43);
      if ((v9 & 0x80000000) != 0) {
        return v9;
      }
      return 1;
    }
  }
  int v6 = *(_DWORD *)(a1 + 12) + v4 - v3;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (!find_among_b(a1, (uint64_t)&a_13, 33) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v8 = slice_from_s(a1, 6, &s_44);
  if (v8 >= 0) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v8;
  }
  if ((v8 & 0x80000000) == 0) {
    return 1;
  }
  return v2;
}

uint64_t r_steps6(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_18, 6);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      uint64_t v4 = *(int *)(a1 + 8);
      uint64_t v3 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      int v5 = *(_DWORD *)(a1 + 16);
      if ((int)v4 - 3 > v5
        && *(unsigned __int8 *)(v4 + *(void *)a1 - 1) == 181
        && (v6 = find_among_b(a1, (uint64_t)&a_15, 5), int v5 = *(_DWORD *)(a1 + 16), v6)
        && *(_DWORD *)(a1 + 8) <= v5)
      {
        uint64_t v12 = &s_45;
LABEL_19:
        uint64_t v13 = a1;
        int v14 = 6;
      }
      else
      {
        uint64_t v7 = v3 - v4;
        uint64_t v8 = *(int *)(a1 + 12) - v7;
        *(_DWORD *)(a1 + 8) = v8;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
        *(_DWORD *)(a1 + 24) = v8;
        if ((int)v8 - 7 > v5
          && *(unsigned __int8 *)(v8 + *(void *)a1 - 1) == 181
          && (among_b = find_among_b(a1, (uint64_t)&a_16, 2), int v5 = *(_DWORD *)(a1 + 16), among_b)
          && *(_DWORD *)(a1 + 8) <= v5)
        {
          uint64_t v12 = &s_46;
          uint64_t v13 = a1;
          int v14 = 2;
        }
        else
        {
          uint64_t v10 = *(int *)(a1 + 12) - (uint64_t)(int)v7;
          *(_DWORD *)(a1 + 8) = v10;
          *(_DWORD *)(a1 + 24) = v10;
          if ((int)v10 - 9 <= v5) {
            return 0;
          }
          int v11 = *(unsigned __int8 *)(v10 + *(void *)a1 - 1);
          if (v11 != 189 && v11 != 186) {
            return 0;
          }
          uint64_t result = find_among_b(a1, (uint64_t)&a_17, 10);
          if (!result) {
            return result;
          }
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          switch((int)result)
          {
            case 1:
              uint64_t v12 = &s_47;
              goto LABEL_29;
            case 2:
              uint64_t v12 = &s_48;
              uint64_t v13 = a1;
              int v14 = 8;
              break;
            case 3:
              uint64_t v12 = &s_49;
              goto LABEL_31;
            case 4:
              uint64_t v12 = &s_50;
              goto LABEL_19;
            case 5:
              uint64_t v12 = &s_51;
              goto LABEL_29;
            case 6:
              uint64_t v12 = &s_52;
              goto LABEL_31;
            case 7:
              uint64_t v12 = &s_53;
              goto LABEL_19;
            case 8:
              uint64_t v12 = &s_54;
              uint64_t v13 = a1;
              int v14 = 16;
              break;
            case 9:
              uint64_t v12 = &s_55;
LABEL_29:
              uint64_t v13 = a1;
              int v14 = 12;
              break;
            case 10:
              uint64_t v12 = &s_56;
LABEL_31:
              uint64_t v13 = a1;
              int v14 = 10;
              break;
            default:
              return 1;
          }
        }
      }
      uint64_t result = slice_from_s(v13, v14, v12);
      if ((result & 0x80000000) == 0) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_steps7(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16) || (*(unsigned __int8 *)(v1 + *(void *)a1 - 1) | 8) != 0xB9) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_20, 4);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 48) = 0;
      uint64_t v4 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      uint64_t v5 = v4 - 1;
      if ((int)v5 > *(_DWORD *)(a1 + 16))
      {
        if ((*(unsigned __int8 *)(*(void *)a1 + v5) | 4) != 0x87) {
          return 0;
        }
        uint64_t result = find_among_b(a1, (uint64_t)&a_19, 2);
        if (!result) {
          return result;
        }
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 8, &s_57);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_steps8(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_23, 8)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (find_among_b(a1, (uint64_t)&a_21, 33) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    uint64_t v9 = &s_58;
    uint64_t v10 = a1;
    int v11 = 4;
    goto LABEL_16;
  }
  int v5 = v3 - v4;
  int v6 = *(_DWORD *)(a1 + 12) - v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (find_among_b(a1, (uint64_t)&a_22, 15) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    uint64_t v9 = &s_59;
    uint64_t v10 = a1;
    int v11 = 6;
LABEL_16:
    uint64_t v12 = slice_from_s(v10, v11, v9);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    return 1;
  }
  int v7 = *(_DWORD *)(a1 + 12) - v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  if (!eq_s_b(a1, 6, &s_60)) {
    return 0;
  }
  int v8 = slice_from_s(a1, 6, &s_61);
  if (v8 >= 0) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v8;
  }
  if ((v8 & 0x80000000) == 0) {
    return 1;
  }
  return v2;
}

uint64_t r_steps9(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(v1 + *(void *)a1 - 1);
  if ((v3 & 0xE0) != 0xA0 || ((0xA0020000 >> v3) & 1) == 0 || !find_among_b(a1, (uint64_t)&a_26, 3)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v4 = slice_del(a1);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v6 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_24, 4);
  int v8 = *(_DWORD *)(a1 + 16);
  if (among_b && *(_DWORD *)(a1 + 8) <= v8)
  {
    int v11 = &s_62;
    goto LABEL_15;
  }
  int v9 = *(_DWORD *)(a1 + 12) + v6 - v5;
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  uint64_t v10 = v9 - 1;
  if ((int)v10 <= v8
    || (*(unsigned __int8 *)(*(void *)a1 + v10) | 8) != 0xBD
    || !find_among_b(a1, (uint64_t)&a_25, 2))
  {
    return 0;
  }
  int v11 = &s_63;
LABEL_15:
  int v13 = slice_from_s(a1, 4, v11);
  if (v13 >= 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = v13;
  }
  if ((v13 & 0x80000000) == 0) {
    return 1;
  }
  return v4;
}

uint64_t r_steps10(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_28, 4);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      uint64_t result = find_among_b(a1, (uint64_t)&a_27, 7);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 6, &s_64);
          if ((int)result >= 0) {
            return 1;
          }
          else {
            return result;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_step2a(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 189 && v3 != 131) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_29, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      int v6 = *(_DWORD *)(a1 + 8);
      int v5 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v6;
      if (find_among_b(a1, (uint64_t)&a_30, 10))
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        int v7 = v6 - v5;
        int v8 = *(_DWORD *)(a1 + 12);
        int v9 = v8 + v6 - v5;
        *(_DWORD *)(a1 + 8) = v9;
        LODWORD(result) = insert_s(a1, v8 + v7, v8 + v7, 4, &s_65);
        *(_DWORD *)(a1 + 8) = v9;
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step2b(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 189 && v3 != 131) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_31, 2);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if ((int)v5 - 3 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(v5 + *(void *)a1 - 1);
  if (v6 != 187 && v6 != 128) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_32, 8);
  if (result)
  {
    LODWORD(result) = slice_from_s(a1, 4, &s_66);
    if ((int)result >= 0) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t r_step2c(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 189 && v3 != 131) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_33, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      uint64_t result = find_among_b(a1, (uint64_t)&a_34, 15);
      if (result)
      {
        LODWORD(result) = slice_from_s(a1, 6, &s_67);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step2d(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 5 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 189 && v3 != 131) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_35, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      uint64_t result = find_among_b(a1, (uint64_t)&a_36, 8);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 2, &s_68);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step3(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_37, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      int v4 = in_grouping_b_U(a1, (uint64_t)&g_v, 945, 969, 0);
      uint64_t result = 0;
      if (!v4)
      {
        LODWORD(result) = slice_from_s(a1, 2, &s_69);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step4(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_38, 4)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v2 = slice_del(a1);
  if ((v2 & 0x80000000) == 0)
  {
    **(unsigned char **)(a1 + 48) = 0;
    int v4 = *(_DWORD *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
    *(_DWORD *)(a1 + 24) = v4;
    if (in_grouping_b_U(a1, (uint64_t)&g_v, 945, 969, 0))
    {
      int v5 = *(_DWORD *)(a1 + 12) + v4 - v3;
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
    }
    else
    {
      int v6 = slice_from_s(a1, 4, &s_70);
      if (v6 >= 0) {
        uint64_t v2 = v2;
      }
      else {
        uint64_t v2 = v6;
      }
      if (v6 < 0) {
        return v2;
      }
      int v5 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
    if (!find_among_b(a1, (uint64_t)&a_39, 36) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
      return 0;
    }
    int v8 = slice_from_s(a1, 4, &s_71);
    if (v8 >= 0) {
      return 1;
    }
    else {
      return v8;
    }
  }
  return v2;
}

uint64_t r_step5a(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 10, &s_72)
    || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
    || (uint64_t result = slice_from_s(a1, 8, &s_73), (result & 0x80000000) == 0))
  {
    int v5 = v3 - v2;
    int v6 = *(_DWORD *)(a1 + 16);
    int v7 = *(_DWORD *)(a1 + 12) + v5;
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    if (v7 - 9 > v6
      && *(unsigned __int8 *)(*(void *)a1 + v7 - 1) == 181
      && find_among_b(a1, (uint64_t)&a_40, 5))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      **(unsigned char **)(a1 + 48) = 0;
    }
    int v8 = *(_DWORD *)(a1 + 12) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 24) = v8;
    uint64_t result = eq_s_b(a1, 6, &s_74);
    if (result)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0)
      {
        **(unsigned char **)(a1 + 48) = 0;
        int v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
        *(_DWORD *)(a1 + 24) = v9;
        uint64_t result = find_among_b(a1, (uint64_t)&a_41, 12);
        if (result)
        {
          if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
          {
            LODWORD(result) = slice_from_s(a1, 4, &s_75);
            if ((int)result >= 0) {
              return 1;
            }
            else {
              return result;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5b(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 - 9 <= *(_DWORD *)(a1 + 16) {
    || *(unsigned __int8 *)(v3 + *(void *)a1 - 1) != 181
  }
    || !find_among_b(a1, (uint64_t)&a_43, 11)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), uint64_t result = slice_del(a1), (result & 0x80000000) == 0)
    && ((**(unsigned char **)(a1 + 48) = 0,
         uint64_t v5 = *(int *)(a1 + 8),
         *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5,
         *(_DWORD *)(a1 + 24) = v5,
         (int)v5 - 3 <= *(_DWORD *)(a1 + 16))
     || (*(unsigned __int8 *)(v5 + *(void *)a1 - 1) | 2) != 0x83
     || !find_among_b(a1, (uint64_t)&a_42, 2)
     || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
     || (uint64_t result = slice_from_s(a1, 8, &s_76), (result & 0x80000000) == 0)))
  {
    int v6 = *(_DWORD *)(a1 + 12) + v3 - v2;
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 24) = v6;
    uint64_t result = eq_s_b(a1, 6, &s_77);
    if (result)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0)
      {
        **(unsigned char **)(a1 + 48) = 0;
        int v8 = *(_DWORD *)(a1 + 8);
        int v7 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
        *(_DWORD *)(a1 + 24) = v8;
        if (in_grouping_b_U(a1, (uint64_t)&g_v2, 945, 969, 0))
        {
          int v9 = *(_DWORD *)(a1 + 12) + v8 - v7;
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 24) = v9;
        }
        else
        {
          uint64_t result = slice_from_s(a1, 4, &s_78);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v9 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
        uint64_t result = find_among_b(a1, (uint64_t)&a_44, 95);
        if (result)
        {
          if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
          {
            LODWORD(result) = slice_from_s(a1, 4, &s_79);
            if ((int)result >= 0) {
              return 1;
            }
            else {
              return result;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5c(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 - 9 > *(_DWORD *)(a1 + 16)
    && *(unsigned __int8 *)(v3 + *(void *)a1 - 1) == 181
    && find_among_b(a1, (uint64_t)&a_45, 1))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    **(unsigned char **)(a1 + 48) = 0;
  }
  int v5 = *(_DWORD *)(a1 + 12) + v3 - v2;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t result = eq_s_b(a1, 6, &s_80);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v7 = *(_DWORD *)(a1 + 8);
      int v6 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v7;
      *(_DWORD *)(a1 + 24) = v7;
      if (in_grouping_b_U(a1, (uint64_t)&g_v2, 945, 969, 0))
      {
        int v8 = v6 - v7;
        int v9 = *(_DWORD *)(a1 + 12) - v8;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
        *(_DWORD *)(a1 + 24) = v9;
        if (!find_among_b(a1, (uint64_t)&a_46, 31))
        {
          int v11 = *(_DWORD *)(a1 + 12) - v8;
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 24) = v11;
LABEL_15:
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v11;
          uint64_t result = find_among_b(a1, (uint64_t)&a_47, 25);
          if (result)
          {
            if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
            {
              LODWORD(result) = slice_from_s(a1, 4, &s_83);
              if ((int)result >= 0) {
                return 1;
              }
              else {
                return result;
              }
            }
            else
            {
              return 0;
            }
          }
          return result;
        }
        uint64_t v10 = &s_82;
      }
      else
      {
        uint64_t v10 = &s_81;
      }
      uint64_t result = slice_from_s(a1, 4, v10);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t r_step5d(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16)
    || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 131
    || !find_among_b(a1, (uint64_t)&a_48, 2))
  {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v3 = slice_del(a1);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v5 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (eq_s_b(a1, 6, &s_84) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    int v7 = &s_85;
    goto LABEL_12;
  }
  int v6 = *(_DWORD *)(a1 + 12) + v5 - v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (!eq_s_b(a1, 6, &s_86)) {
    return 0;
  }
  int v7 = &s_87;
LABEL_12:
  int v9 = slice_from_s(a1, 6, v7);
  if (v9 >= 0) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v9;
  }
  if ((v9 & 0x80000000) == 0) {
    return 1;
  }
  return v3;
}

uint64_t r_step5e(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 11 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 181) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_49, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      uint64_t result = eq_s_b(a1, 4, &s_88);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 10, &s_89);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5f(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v3;
  if (!eq_s_b(a1, 10, &s_90)) {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    if ((**(unsigned char **)(a1 + 48) = 0, {
          uint64_t v5 = *(int *)(a1 + 8),
    }
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5,
          *(_DWORD *)(a1 + 24) = v5,
          uint64_t v6 = v5 - 1,
          (int)v6 <= *(_DWORD *)(a1 + 16))
      || (int v7 = *(unsigned __int8 *)(*(void *)a1 + v6), v7 != 134) && v7 != 128
      || !find_among_b(a1, (uint64_t)&a_50, 6)
      || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
      || (uint64_t result = slice_from_s(a1, 8, &s_91), (result & 0x80000000) == 0))
    {
LABEL_9:
      int v8 = *(_DWORD *)(a1 + 12) + v3 - v2;
      *(_DWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 24) = v8;
      uint64_t result = eq_s_b(a1, 8, &s_92);
      if (result)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          **(unsigned char **)(a1 + 48) = 0;
          int v9 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          uint64_t result = find_among_b(a1, (uint64_t)&a_51, 9);
          if (result)
          {
            if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
            {
              LODWORD(result) = slice_from_s(a1, 8, &s_93);
              if ((int)result >= 0) {
                return 1;
              }
              else {
                return result;
              }
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5g(uint64_t a1)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v4;
  if (find_among_b(a1, (uint64_t)&a_52, 3))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t v1 = slice_del(a1);
    if ((v1 & 0x80000000) != 0) {
      return v1;
    }
    **(unsigned char **)(a1 + 48) = 0;
  }
  int v5 = *(_DWORD *)(a1 + 12) + v4 - v3;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (!find_among_b(a1, (uint64_t)&a_55, 3)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = slice_del(a1);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v8 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
  *(_DWORD *)(a1 + 24) = v8;
  if (!find_among_b(a1, (uint64_t)&a_53, 6))
  {
    int v11 = *(_DWORD *)(a1 + 16);
    int v12 = *(_DWORD *)(a1 + 12) + v8 - v7;
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
    *(_DWORD *)(a1 + 24) = v12;
    uint64_t v13 = v12 - 1;
    if ((int)v13 > v11
      && *(unsigned __int8 *)(*(void *)a1 + v13) == 184
      && find_among_b(a1, (uint64_t)&a_54, 5)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      int v9 = &s_95;
      goto LABEL_8;
    }
    return 0;
  }
  int v9 = &s_94;
LABEL_8:
  int v10 = slice_from_s(a1, 4, v9);
  if (v10 >= 0) {
    uint64_t v1 = v1;
  }
  else {
    uint64_t v1 = v10;
  }
  if ((v10 & 0x80000000) == 0) {
    return 1;
  }
  return v1;
}

uint64_t r_step5h(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_58, 3)) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  **(unsigned char **)(a1 + 48) = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (!find_among_b(a1, (uint64_t)&a_56, 12))
  {
    int v7 = *(_DWORD *)(a1 + 12) + v4 - v3;
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    if (find_among_b(a1, (uint64_t)&a_57, 25) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      int v5 = &s_97;
      goto LABEL_5;
    }
    return 0;
  }
  int v5 = &s_96;
LABEL_5:
  int v6 = slice_from_s(a1, 6, v5);
  if (v6 >= 0) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v6;
  }
  if ((v6 & 0x80000000) == 0) {
    return 1;
  }
  return v2;
}

uint64_t r_step5j(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_63, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 48) = 0;
      uint64_t v3 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      uint64_t v4 = v3 - 1;
      if ((int)v4 > *(_DWORD *)(a1 + 16))
      {
        if (*(unsigned __int8 *)(*(void *)a1 + v4) != 189) {
          return 0;
        }
        uint64_t result = find_among_b(a1, (uint64_t)&a_64, 6);
        if (!result) {
          return result;
        }
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 4, &s_102);
          if ((int)result >= 0) {
            return 1;
          }
          else {
            return result;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5i(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_62, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v4 = *(_DWORD *)(a1 + 8);
      int v3 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      if (eq_s_b(a1, 8, &s_98))
      {
        LODWORD(result) = slice_from_s(a1, 4, &s_99);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
      else
      {
        int v5 = v4 - v3;
        int v6 = *(_DWORD *)(a1 + 16);
        int v7 = *(_DWORD *)(a1 + 12) + v5;
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 24) = v7;
        if (v7 - 5 > v6 && (*(unsigned char *)(*(void *)a1 + v7 - 1) & 0xFE) == 0x86)
        {
          if (find_among_b(a1, (uint64_t)&a_59, 2))
          {
            uint64_t result = 0;
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            return result;
          }
          int v7 = *(_DWORD *)(a1 + 12) + v5;
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v7;
        *(_DWORD *)(a1 + 24) = v7;
        if (find_among_b(a1, (uint64_t)&a_60, 10))
        {
          int v8 = &s_100;
        }
        else
        {
          int v9 = *(_DWORD *)(a1 + 12) + v5;
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          uint64_t result = find_among_b(a1, (uint64_t)&a_61, 44);
          if (!result) {
            return result;
          }
          if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
            return 0;
          }
          int v8 = &s_101;
        }
        uint64_t result = slice_from_s(a1, 4, v8);
        if ((result & 0x80000000) == 0) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5k(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 181) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_65, 1);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      uint64_t result = find_among_b(a1, (uint64_t)&a_66, 10);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 6, &s_103);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5l(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 181) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_67, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      uint64_t result = find_among_b(a1, (uint64_t)&a_68, 6);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 6, &s_104);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5m(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 181) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_69, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(unsigned char **)(a1 + 48) = 0;
      int v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      uint64_t result = find_among_b(a1, (uint64_t)&a_70, 7);
      if (result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)) {
          return 0;
        }
        LODWORD(result) = slice_from_s(a1, 6, &s_105);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t r_step6(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v3;
  if (!find_among_b(a1, (uint64_t)&a_71, 3)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), uint64_t result = slice_from_s(a1, 4, &s_106), (result & 0x80000000) == 0))
  {
    int v5 = v3 - v2 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    if (**(unsigned char **)(a1 + 48))
    {
      *(_DWORD *)(a1 + 24) = v5;
      uint64_t result = find_among_b(a1, (uint64_t)&a_72, 84);
      if (result)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        LODWORD(result) = slice_del(a1);
        if ((int)result >= 0) {
          return 1;
        }
        else {
          return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t r_step7(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 132 && v3 != 129) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_73, 8);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    LODWORD(result) = slice_del(a1);
    if ((int)result >= 0) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

void *greek_UTF_8_create_env()
{
  return SN_create_env(0, 0, 1);
}

void greek_UTF_8_close_env(uint64_t a1)
{
}

uint64_t spanish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD **)(a1 + 40);
  _DWORD *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  v2[2] = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
    {
      int v7 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
    if (!in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
    {
      int v7 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0)) {
    goto LABEL_16;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0)
    || (int v7 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1), v7 < 0))
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0)) {
      goto LABEL_16;
    }
    int v6 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
    if (v6 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_14:
    int v6 = *(_DWORD *)(a1 + 8) + v7;
  }
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
LABEL_16:
  *(_DWORD *)(a1 + 8) = v3;
  int v8 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v8;
    int v9 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
    if ((v9 & 0x80000000) == 0)
    {
      int v10 = *(_DWORD *)(a1 + 8) + v9;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v10;
      int v11 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        int v12 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
        if ((v12 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v12;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v13 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  uint64_t v14 = v13 - 1;
  if ((int)v14 > v3)
  {
    char v15 = *(unsigned char *)(*(void *)a1 + v14);
    if (v15 & 0xE0) == 0x60 && ((0x88022u >> v15))
    {
      if (find_among_b(a1, (uint64_t)&a_1_0, 13))
      {
        uint64_t v16 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
        uint64_t v17 = v16 - 1;
        if ((int)v17 > *(_DWORD *)(a1 + 16))
        {
          int v18 = *(unsigned __int8 *)(*(void *)a1 + v17);
          if (v18 == 114 || v18 == 111)
          {
            among_CGFloat b = find_among_b(a1, (uint64_t)&a_2_0, 11);
            if (among_b)
            {
              int v20 = *(_DWORD *)(a1 + 8);
              if (**(_DWORD **)(a1 + 40) <= v20)
              {
                switch(among_b)
                {
                  case 1:
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
                    uint64_t v21 = &s_5_8;
                    uint64_t v22 = a1;
                    int v23 = 5;
                    goto LABEL_37;
                  case 2:
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
                    uint64_t v21 = &s_6_7;
                    uint64_t v22 = a1;
                    int v23 = 4;
                    goto LABEL_37;
                  case 3:
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
                    uint64_t v21 = &s_7_19;
                    goto LABEL_36;
                  case 4:
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
                    uint64_t v21 = &s_8_13;
                    goto LABEL_36;
                  case 5:
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
                    uint64_t v21 = &s_9_7;
LABEL_36:
                    uint64_t v22 = a1;
                    int v23 = 2;
LABEL_37:
                    uint64_t result = slice_from_s(v22, v23, v21);
                    if ((result & 0x80000000) == 0) {
                      break;
                    }
                    return result;
                  case 6:
                    goto LABEL_150;
                  case 7:
                    if (v20 <= *(_DWORD *)(a1 + 16)) {
                      break;
                    }
                    uint64_t v77 = v20 - 1;
                    if (*(unsigned char *)(*(void *)a1 + v77) != 117) {
                      break;
                    }
                    *(_DWORD *)(a1 + 8) = v77;
LABEL_150:
                    uint64_t result = slice_del(a1);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    break;
                  default:
                    break;
                }
              }
            }
          }
        }
      }
    }
  }
  int v25 = *(_DWORD *)(a1 + 16);
  uint64_t v26 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 24) = v26;
  if ((int)v26 - 2 > v25)
  {
    char v27 = *(unsigned char *)(v26 + *(void *)a1 - 1);
    if (v27 & 0xE0) == 0x60 && ((0xCC032u >> v27))
    {
      int v28 = find_among_b(a1, (uint64_t)&a_6_0, 46);
      if (v28)
      {
        int v29 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v29;
        switch(v28)
        {
          case 1:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) <= v29) {
              goto LABEL_106;
            }
            break;
          case 2:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            uint64_t v30 = &s_10_19;
            goto LABEL_144;
          case 3:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t v31 = &s_11_7;
            uint64_t v32 = a1;
            int v33 = 3;
            goto LABEL_54;
          case 4:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t v31 = &s_12_7;
            uint64_t v32 = a1;
            int v33 = 1;
            goto LABEL_54;
          case 5:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t v31 = &s_13_33;
            uint64_t v32 = a1;
            int v33 = 4;
LABEL_54:
            uint64_t result = slice_from_s(v32, v33, v31);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_109;
          case 6:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v29) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v34 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v34;
            uint64_t v35 = v34 - 1;
            if ((int)v35 <= *(_DWORD *)(a1 + 16)) {
              goto LABEL_109;
            }
            char v36 = *(unsigned char *)(*(void *)a1 + v35);
            if ((v36 & 0xE0) != 0x60) {
              goto LABEL_109;
            }
            if (((0x480018u >> v36) & 1) == 0) {
              goto LABEL_109;
            }
            int v37 = find_among_b(a1, (uint64_t)&a_3_0, 4);
            if (!v37) {
              goto LABEL_109;
            }
            int v38 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v38;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v38) {
              goto LABEL_109;
            }
            int v39 = v37;
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v39 == 1)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              uint64_t v30 = &s_14_11;
LABEL_144:
              if (eq_s_b(a1, 2, v30)) {
                goto LABEL_145;
              }
            }
            goto LABEL_109;
          case 7:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v40 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            if ((int)v40 - 3 <= *(_DWORD *)(a1 + 16) || *(unsigned char *)(v40 + *(void *)a1 - 1) != 101) {
              goto LABEL_109;
            }
            unsigned int v41 = &a_4_0;
            goto LABEL_77;
          case 8:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v42 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v42;
            uint64_t v43 = v42 - 1;
            if ((int)v43 <= *(_DWORD *)(a1 + 16)) {
              goto LABEL_109;
            }
            char v44 = *(unsigned char *)(*(void *)a1 + v43);
            if ((v44 & 0xE0) != 0x60 || ((0x401008u >> v44) & 1) == 0) {
              goto LABEL_109;
            }
            unsigned int v41 = &a_5_0;
LABEL_77:
            if (!find_among_b(a1, (uint64_t)v41, 3)) {
              goto LABEL_109;
            }
LABEL_145:
            int v76 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v76;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v76) {
              goto LABEL_109;
            }
            goto LABEL_106;
          case 9:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v29) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            uint64_t v30 = &s_15_5;
            goto LABEL_144;
          default:
            goto LABEL_109;
        }
      }
    }
  }
  int v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  int v46 = **(_DWORD **)(a1 + 40);
  if (v45 < v46) {
    goto LABEL_96;
  }
  int v47 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v46;
  *(_DWORD *)(a1 + 24) = v45;
  if (!find_among_b(a1, (uint64_t)&a_7_0, 12))
  {
    *(_DWORD *)(a1 + 16) = v47;
    goto LABEL_96;
  }
  uint64_t v48 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = v47;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v48;
  if ((int)v48 <= v47) {
    goto LABEL_96;
  }
  uint64_t v49 = v48 - 1;
  if (*(unsigned char *)(*(void *)a1 + v49) != 117) {
    goto LABEL_96;
  }
  *(_DWORD *)(a1 + 8) = v49;
  int v50 = slice_del(a1);
  int v51 = v50 & (v50 >> 31);
  if (v50 >= 0) {
    int v51 = 1;
  }
  int v52 = v51 >> 31;
  if (!v51) {
    int v52 = 4;
  }
  if (!v52) {
    goto LABEL_109;
  }
  if (v52 == 4)
  {
LABEL_96:
    int v53 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v53;
    int v54 = **(_DWORD **)(a1 + 40);
    if (v53 < v54) {
      goto LABEL_109;
    }
    int v55 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v54;
    *(_DWORD *)(a1 + 24) = v53;
    int v56 = find_among_b(a1, (uint64_t)&a_8_0, 96);
    if (v56)
    {
      int v57 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v55;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v57;
      if (v56 != 2)
      {
        if (v56 != 1) {
          goto LABEL_109;
        }
        if (v57 > v55)
        {
          uint64_t v58 = *(void *)a1;
          uint64_t v59 = v57 - 1;
          if (*(unsigned char *)(*(void *)a1 + v59) == 117)
          {
            *(_DWORD *)(a1 + 8) = v59;
            if ((int)v59 > v55 && *(unsigned char *)(v57 + v58 - 2) == 103) {
              --v57;
            }
          }
        }
        *(_DWORD *)(a1 + 8) = v57;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v57;
      }
LABEL_106:
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v55;
    }
LABEL_109:
    int v60 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v60;
    *(_DWORD *)(a1 + 24) = v60;
    int v61 = find_among_b(a1, (uint64_t)&a_9_0, 8);
    if (v61)
    {
      int v62 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v62;
      if (v61 == 2)
      {
        if (**(_DWORD **)(a1 + 40) > v62) {
          goto LABEL_122;
        }
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v63 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v63;
        int v64 = *(_DWORD *)(a1 + 16);
        if ((int)v63 <= v64) {
          goto LABEL_122;
        }
        uint64_t v65 = *(void *)a1;
        int v66 = v63 - 1;
        if (*(unsigned char *)(*(void *)a1 + v63 - 1) != 117) {
          goto LABEL_122;
        }
        *(_DWORD *)(a1 + 8) = v66;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v66;
        if (v66 <= v64 || *(unsigned char *)(v63 + v65 - 2) != 103 || **(_DWORD **)(a1 + 40) >= (int)v63) {
          goto LABEL_122;
        }
        goto LABEL_113;
      }
      if (v61 == 1 && **(_DWORD **)(a1 + 40) <= v62)
      {
LABEL_113:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
LABEL_122:
    uint64_t v67 = *(unsigned int *)(a1 + 12);
    uint64_t v68 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v68;
    uint64_t v69 = v68;
    while (1)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v69;
      uint64_t v70 = (int)v69 + 1;
      if ((int)v70 < (int)v67
        && (char v71 = *(unsigned char *)(*(void *)a1 + v70), (v71 & 0xE0) == 0xA0)
        && ((0x4082202u >> v71) & 1) != 0)
      {
        int among = find_among(a1, (uint64_t)&a_0_0, 6);
        if (!among) {
          goto LABEL_140;
        }
        uint64_t v69 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v69;
        switch(among)
        {
          case 1:
            uint64_t v74 = a1;
            uint64_t v75 = &s_0_0;
            break;
          case 2:
            uint64_t v74 = a1;
            uint64_t v75 = &s_1_40;
            break;
          case 3:
            uint64_t v74 = a1;
            uint64_t v75 = &s_2_11;
            break;
          case 4:
            uint64_t v74 = a1;
            uint64_t v75 = &s_3_22;
            break;
          case 5:
            uint64_t v74 = a1;
            uint64_t v75 = &s_4_14;
            break;
          case 6:
            uint64_t v67 = *(unsigned int *)(a1 + 12);
            goto LABEL_127;
          default:
            goto LABEL_129;
        }
        uint64_t result = slice_from_s(v74, 1, v75);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v69;
LABEL_127:
        int v72 = skip_utf8(*(void *)a1, v69, 0, v67, 1);
        if (v72 < 0)
        {
LABEL_140:
          *(_DWORD *)(a1 + 8) = v68;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v72;
      }
LABEL_129:
      uint64_t v69 = *(unsigned int *)(a1 + 8);
      uint64_t v67 = *(unsigned int *)(a1 + 12);
    }
  }
  if (v51 >= 0) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = v51;
  }
  if ((v51 & 0x80000000) == 0) {
    goto LABEL_109;
  }
  return result;
}

void *spanish_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void spanish_UTF_8_close_env(uint64_t a1)
{
}

char **sb_stemmer_list()
{
  return algorithm_names;
}

void *sb_stemmer_new(char *__s2, const char *a2)
{
  if (a2 && strcmp("UTF_8", a2)) {
    return 0;
  }
  int v3 = "ar";
  for (unint64_t i = &off_1F126EA40; strcmp(v3, __s2) || *((_DWORD *)i - 6) != 1; i += 5)
  {
    int v3 = (const char *)i[1];
    if (!v3) {
      return 0;
    }
  }
  int v7 = malloc_type_malloc(0x20uLL, 0xA00400770BE9BuLL);
  int v5 = v7;
  if (v7)
  {
    long long v8 = *((_OWORD *)i - 1);
    *(_OWORD *)int v7 = v8;
    void v7[2] = *i;
    uint64_t v9 = ((uint64_t (*)(void))v8)();
    void v5[3] = v9;
    if (!v9)
    {
      int v10 = (void (*)(void))v5[1];
      if (v10) {
        v10(0);
      }
      free(v5);
      return 0;
    }
  }
  return v5;
}

void sb_stemmer_delete(void *a1)
{
  if (a1)
  {
    int v2 = (void (*)(void))a1[1];
    if (v2) {
      v2(a1[3]);
    }
    free(a1);
  }
}

uint64_t sb_stemmer_stem(uint64_t a1, void *__src, int a3)
{
  if (SN_set_current(*(void *)(a1 + 24), a3, __src))
  {
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 + 24) + 12) = 0;
  }
  else if (((*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 24)) & 0x80000000) != 0)
  {
    return 0;
  }
  else
  {
    *(unsigned char *)(**(void **)(a1 + 24) + *(int *)(*(void *)(a1 + 24) + 12)) = 0;
    return **(void **)(a1 + 24);
  }
  return result;
}

uint64_t sb_stemmer_length(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 24) + 12);
}

uint64_t dutch_UTF_8_stem(uint64_t a1)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  for (uint64_t i = v3; ; uint64_t i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = i;
    uint64_t v5 = (int)i + 1;
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((int)v5 >= (int)v6) {
      break;
    }
    char v7 = *(unsigned char *)(*(void *)a1 + v5);
    if ((v7 & 0xE0) != 0xA0 || ((0x1448AA12u >> v7) & 1) == 0) {
      break;
    }
    int among = find_among(a1, (uint64_t)&a_0_1, 11);
    if (!among) {
      goto LABEL_19;
    }
    uint64_t i = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = i;
    switch(among)
    {
      case 1:
        uint64_t v10 = a1;
        int v11 = &s_0_46;
        break;
      case 2:
        uint64_t v10 = a1;
        int v11 = &s_1_41;
        break;
      case 3:
        uint64_t v10 = a1;
        int v11 = &s_2_12;
        break;
      case 4:
        uint64_t v10 = a1;
        int v11 = &s_3_23;
        break;
      case 5:
        uint64_t v10 = a1;
        int v11 = &s_4_15;
        break;
      case 6:
        uint64_t v6 = *(unsigned int *)(a1 + 12);
        goto LABEL_6;
      default:
        continue;
    }
    uint64_t v12 = slice_from_s(v10, 1, v11);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
LABEL_8:
    ;
  }
  *(_DWORD *)(a1 + 24) = i;
LABEL_6:
  int v8 = skip_utf8(*(void *)a1, i, 0, v6, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v8;
    goto LABEL_8;
  }
LABEL_19:
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  uint64_t v13 = v3;
  if (v3 != *(_DWORD *)(a1 + 12))
  {
    uint64_t v13 = v3;
    if (*(unsigned char *)(*(void *)a1 + (int)v3) == 121)
    {
      *(_DWORD *)(a1 + 8) = v3 + 1;
      *(_DWORD *)(a1 + 24) = v3 + 1;
      uint64_t v12 = slice_from_s(a1, 1, &s_5_9);
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v13 = *(unsigned int *)(a1 + 8);
        goto LABEL_23;
      }
      return v12;
    }
  }
LABEL_23:
  while (2)
  {
    if (in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
    {
      uint64_t v15 = *(void *)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      uint64_t v1 = *(unsigned int *)(a1 + 8);
      uint64_t v14 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v1;
      uint64_t v15 = *(void *)a1;
      if (v1 == v14) {
        goto LABEL_34;
      }
      if (*(unsigned char *)(v15 + (int)v1) != 105) {
        goto LABEL_28;
      }
      *(_DWORD *)(a1 + 8) = v1 + 1;
      *(_DWORD *)(a1 + 24) = v1 + 1;
      if (!in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
      {
        uint64_t v16 = a1;
        uint64_t v17 = &s_6_46;
        goto LABEL_31;
      }
      uint64_t v14 = *(unsigned int *)(a1 + 12);
      uint64_t v15 = *(void *)a1;
LABEL_28:
      *(_DWORD *)(a1 + 8) = v1;
      if (v1 == v14)
      {
LABEL_34:
        uint64_t v14 = v1;
      }
      else if (*(unsigned char *)(v15 + (int)v1) == 121)
      {
        *(_DWORD *)(a1 + 8) = v1 + 1;
        *(_DWORD *)(a1 + 24) = v1 + 1;
        uint64_t v16 = a1;
        uint64_t v17 = &s_7_20;
LABEL_31:
        uint64_t v12 = slice_from_s(v16, 1, v17);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
LABEL_32:
        *(_DWORD *)(a1 + 8) = v13;
        continue;
      }
    }
    break;
  }
  *(_DWORD *)(a1 + 8) = v13;
  uint64_t v18 = skip_utf8(v15, v13, 0, v14, 1);
  if ((v18 & 0x80000000) == 0)
  {
    uint64_t v13 = v18;
    goto LABEL_32;
  }
  *(_DWORD *)(a1 + 8) = v3;
  int v19 = *(_DWORD **)(a1 + 40);
  *int v19 = *(_DWORD *)(a1 + 12);
  v19[1] = *(_DWORD *)(a1 + 12);
  int v20 = out_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v20;
    int v21 = in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
    if ((v21 & 0x80000000) == 0)
    {
      int v22 = *(_DWORD *)(a1 + 8) + v21;
      *(_DWORD *)(a1 + 8) = v22;
      if (v22 <= 3) {
        int v22 = 3;
      }
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v22;
      int v23 = out_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
      if ((v23 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v23;
        int v24 = in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
        if ((v24 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v24;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v25 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if ((int)v25 <= (int)v3) {
    goto LABEL_66;
  }
  char v26 = *(unsigned char *)(v25 + *(void *)a1 - 1);
  if ((v26 & 0xE0) != 0x60) {
    goto LABEL_66;
  }
  if (((0x84020u >> v26) & 1) == 0) {
    goto LABEL_66;
  }
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_3_1, 5);
  if (!among_b) {
    goto LABEL_66;
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v28;
  if (among_b == 3)
  {
    if (**(_DWORD **)(a1 + 40) <= v28)
    {
      if (out_grouping_b_U(a1, (uint64_t)&g_v_j, 97, 232, 0)) {
        goto LABEL_65;
      }
      uint64_t v12 = slice_del(a1);
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_65;
      }
      return v12;
    }
    goto LABEL_57;
  }
  if (among_b != 2)
  {
    if (among_b != 1) {
      goto LABEL_66;
    }
    if (**(_DWORD **)(a1 + 40) <= v28)
    {
      uint64_t v12 = slice_from_s(a1, 4, &s_11_8);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
LABEL_65:
      LODWORD(v1) = 1;
LABEL_66:
      int v31 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v31;
      int v32 = v31;
LABEL_67:
      uint64_t v12 = r_e_ending(a1);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      int v33 = v31 - v32;
      int v34 = *(_DWORD *)(a1 + 12) + v33;
      *(_DWORD *)(a1 + 8) = v34;
      *(_DWORD *)(a1 + 24) = v34;
      if (eq_s_b(a1, 4, &s_12_8))
      {
        uint64_t v35 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v35;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) <= (int)v35
          && ((int)v35 <= *(_DWORD *)(a1 + 16) || *(unsigned char *)(v35 + *(void *)a1 - 1) != 99))
        {
          uint64_t v12 = slice_del(a1);
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          if (eq_s_b(a1, 2, &s_13_34))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            int v48 = r_en_ending(a1);
            unsigned int v49 = v48 >= 0 ? v1 : v48;
            uint64_t v1 = v48 ? v49 : v1;
            unsigned int v50 = v48 ? v48 >> 31 : 4;
            if ((v50 | 4) != 4)
            {
              if ((v48 & 0x80000000) == 0)
              {
                int v37 = *(_DWORD *)(a1 + 8);
                int v36 = *(_DWORD *)(a1 + 12);
                goto LABEL_71;
              }
LABEL_123:
              if ((v1 & 0x80000000) != 0) {
                return v1;
              }
              goto LABEL_137;
            }
          }
        }
      }
      int v36 = *(_DWORD *)(a1 + 12);
      int v37 = v36 + v33;
      *(_DWORD *)(a1 + 8) = v37;
LABEL_71:
      *(_DWORD *)(a1 + 24) = v37;
      uint64_t v38 = v37 - 1;
      if ((int)v38 > *(_DWORD *)(a1 + 16))
      {
        char v39 = *(unsigned char *)(*(void *)a1 + v38);
        if (v39 & 0xE0) == 0x60 && ((0x40890u >> v39))
        {
          int v40 = find_among_b(a1, (uint64_t)&a_4_1, 6);
          if (v40)
          {
            uint64_t v41 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v41;
            switch(v40)
            {
              case 1:
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v41) {
                  goto LABEL_130;
                }
                uint64_t v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0) {
                  return v12;
                }
                int v43 = *(_DWORD *)(a1 + 8);
                int v42 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 24) = v43;
                if (eq_s_b(a1, 2, &s_14_12))
                {
                  uint64_t v44 = *(int *)(a1 + 8);
                  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v44;
                  if (*(_DWORD *)(*(void *)(a1 + 40) + 4) <= (int)v44
                    && ((int)v44 <= *(_DWORD *)(a1 + 16) || *(unsigned char *)(v44 + *(void *)a1 - 1) != 101))
                  {
LABEL_129:
                    uint64_t v12 = slice_del(a1);
                    if ((v12 & 0x80000000) != 0) {
                      return v12;
                    }
                    goto LABEL_130;
                  }
                }
                *(_DWORD *)(a1 + 8) = v43 - v42 + *(_DWORD *)(a1 + 12);
                int v45 = r_undouble(a1);
                if (v45 > 0) {
                  goto LABEL_130;
                }
                BOOL v46 = v45 != 0;
                int v47 = v45 ? 1 : 6;
                uint64_t v1 = v45 ? v45 : v1;
LABEL_121:
                if (v47 == 6) {
                  goto LABEL_130;
                }
                if (!v46) {
                  goto LABEL_131;
                }
                break;
              case 2:
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v41
                  || (int)v41 > *(_DWORD *)(a1 + 16) && *(unsigned char *)(v41 + *(void *)a1 - 1) == 101)
                {
                  goto LABEL_130;
                }
                goto LABEL_129;
              case 3:
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v41) {
                  goto LABEL_130;
                }
                uint64_t v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0) {
                  return v12;
                }
                int v51 = r_e_ending(a1);
                if (v51 >= 0) {
                  unsigned int v52 = v1;
                }
                else {
                  unsigned int v52 = v51;
                }
                BOOL v46 = v51 >> 31;
                if (v51) {
                  uint64_t v1 = v52;
                }
                else {
                  uint64_t v1 = v1;
                }
                if (v51) {
                  int v47 = v51 >> 31;
                }
                else {
                  int v47 = 6;
                }
                if (v47) {
                  goto LABEL_121;
                }
                goto LABEL_130;
              case 4:
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v41) {
                  goto LABEL_130;
                }
                goto LABEL_129;
              case 5:
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v41 || !**(unsigned char **)(a1 + 48)) {
                  goto LABEL_130;
                }
                goto LABEL_129;
              default:
                goto LABEL_130;
            }
            goto LABEL_123;
          }
        }
      }
LABEL_130:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v37 - v36;
LABEL_131:
      if (!out_grouping_b_U(a1, (uint64_t)&g_v_I, 73, 232, 0))
      {
        uint64_t v53 = *(int *)(a1 + 8);
        if ((int)v53 - 1 > *(_DWORD *)(a1 + 16))
        {
          char v54 = *(unsigned char *)(*(void *)a1 + v53 - 1);
          if (v54 & 0xE0) == 0x60 && ((0x208022u >> v54))
          {
            int v55 = *(_DWORD *)(a1 + 12);
            if (find_among_b(a1, (uint64_t)&a_5_1, 4))
            {
              if (!out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
              {
                uint64_t v64 = *(unsigned int *)(a1 + 16);
                uint64_t v65 = (*(_DWORD *)(a1 + 12) + v53 - v55);
                *(_DWORD *)(a1 + 8) = v65;
                *(_DWORD *)(a1 + 24) = v65;
                int v66 = skip_utf8(*(void *)a1, v65, v64, 0, -1);
                if ((v66 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = v66;
                  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v66;
                  uint64_t v12 = slice_del(a1);
                  if ((v12 & 0x80000000) != 0) {
                    return v12;
                  }
                }
              }
            }
          }
        }
      }
LABEL_137:
      uint64_t v56 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v56;
      uint64_t v57 = v56;
      while (2)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v57;
        uint64_t v58 = *(unsigned int *)(a1 + 12);
        if ((int)v57 < (int)v58 && (*(unsigned __int8 *)(*(void *)a1 + (int)v57) | 0x10) == 0x59)
        {
          int v59 = find_among(a1, (uint64_t)&a_1_1, 3);
          if (!v59) {
            goto LABEL_154;
          }
          uint64_t v57 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v57;
          switch(v59)
          {
            case 1:
              uint64_t v61 = a1;
              int v62 = &s_8_96;
              break;
            case 2:
              uint64_t v61 = a1;
              int v62 = &s_9_8;
              break;
            case 3:
              uint64_t v58 = *(unsigned int *)(a1 + 12);
              goto LABEL_146;
            default:
              goto LABEL_148;
          }
          uint64_t v12 = slice_from_s(v61, 1, v62);
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 24) = v57;
LABEL_146:
        int v60 = skip_utf8(*(void *)a1, v57, 0, v58, 1);
        if (v60 < 0)
        {
LABEL_154:
          *(_DWORD *)(a1 + 8) = v56;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v60;
LABEL_148:
        uint64_t v57 = *(unsigned int *)(a1 + 8);
        continue;
      }
    }
LABEL_57:
    LODWORD(v1) = 0;
    goto LABEL_66;
  }
  uint64_t v29 = r_en_ending(a1);
  uint64_t v1 = v29;
  unsigned int v30 = v29 >> 31;
  if (!v29) {
    unsigned int v30 = 2;
  }
  if ((v30 | 2) == 2) {
    goto LABEL_66;
  }
  if ((v29 & 0x80000000) == 0)
  {
    int v31 = *(_DWORD *)(a1 + 8);
    int v32 = *(_DWORD *)(a1 + 12);
    goto LABEL_67;
  }
  return v1;
}

void *dutch_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void dutch_UTF_8_close_env(uint64_t a1)
{
}

uint64_t r_en_ending(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (**(_DWORD **)(a1 + 40) > v1) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 12);
  int v5 = out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0);
  uint64_t result = 0;
  if (!v5)
  {
    int v6 = v1 - v4;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v6;
    if (eq_s_b(a1, 3, &s_10_20)) {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v6;
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      return r_undouble(a1);
    }
  }
  return result;
}

uint64_t r_e_ending(uint64_t a1)
{
  uint64_t result = 0;
  **(unsigned char **)(a1 + 48) = 0;
  uint64_t v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 > *(_DWORD *)(a1 + 16))
  {
    int v4 = v3 - 1;
    if (*(unsigned char *)(*(void *)a1 + v3 - 1) == 101 {
      && (*(_DWORD *)(a1 + 8) = v4, *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4, **(_DWORD **)(a1 + 40) < (int)v3))
    }
    {
      int v5 = *(_DWORD *)(a1 + 12);
      int v6 = out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0);
      uint64_t result = 0;
      if (!v6)
      {
        *(_DWORD *)(a1 + 8) = v4 - v5 + *(_DWORD *)(a1 + 12);
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          **(unsigned char **)(a1 + 48) = 1;
          return r_undouble(a1);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t r_undouble(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 - 1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(*(void *)a1 + v1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x100810u >> v3) & 1) == 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t result = find_among_b(a1, (uint64_t)&a_2_1, 3);
  if (result)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    uint64_t v7 = (*(_DWORD *)(a1 + 12) + v1 - v5);
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    int v8 = skip_utf8(*(void *)a1, v7, v6, 0, -1);
    if (v8 < 0) {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
    int v9 = slice_del(a1);
    if (v9 >= 0) {
      return 1;
    }
    else {
      return v9 & (v9 >> 31);
    }
  }
  return result;
}

uint64_t finnish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  char v3 = *(_DWORD **)(a1 + 40);
  *char v3 = *(_DWORD *)(a1 + 12);
  v3[1] = *(_DWORD *)(a1 + 12);
  if ((out_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) == 0)
  {
    int v4 = in_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1);
    if ((v4 & 0x80000000) == 0)
    {
      int v5 = *(_DWORD *)(a1 + 8) + v4;
      *(_DWORD *)(a1 + 8) = v5;
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
      if ((out_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) == 0)
      {
        int v6 = in_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1);
        if ((v6 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v6;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  **(unsigned char **)(a1 + 48) = 0;
  int v8 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 8) = v7;
  int v9 = **(_DWORD **)(a1 + 40);
  if (v7 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v7;
    among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_2, 10);
    if (!among_b)
    {
      *(_DWORD *)(a1 + 16) = v8;
      goto LABEL_15;
    }
    int v11 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v11;
    if (among_b == 2)
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v11) {
        goto LABEL_15;
      }
    }
    else if (among_b == 1 && in_grouping_b_U(a1, (uint64_t)&g_particle_end, 97, 246, 0))
    {
      goto LABEL_15;
    }
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
LABEL_15:
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  int v14 = **(_DWORD **)(a1 + 40);
  if (v13 >= v14)
  {
    int v15 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v13;
    int v16 = find_among_b(a1, (uint64_t)&a_4_2, 9);
    if (v16)
    {
      uint64_t v17 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v17;
      switch(v16)
      {
        case 1:
          if ((int)v17 > v15 && *(unsigned char *)(v17 + *(void *)a1 - 1) == 107) {
            goto LABEL_38;
          }
          goto LABEL_37;
        case 2:
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (!eq_s_b(a1, 3, &s_0_47)) {
              goto LABEL_38;
            }
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            uint64_t result = slice_from_s(a1, 3, &s_1_42);
            if ((result & 0x80000000) == 0) {
              goto LABEL_38;
            }
          }
          return result;
        case 3:
          goto LABEL_37;
        case 4:
          uint64_t v18 = v17 - 1;
          if ((int)v18 <= v15 || *(unsigned char *)(*(void *)a1 + v18) != 97) {
            goto LABEL_38;
          }
          int v19 = &a_1_2;
          goto LABEL_32;
        case 5:
          if ((int)v17 - 2 <= v15 || *(unsigned __int8 *)(v17 + *(void *)a1 - 1) != 164) {
            goto LABEL_38;
          }
          int v19 = &a_2_2;
LABEL_32:
          uint64_t v20 = a1;
          int v21 = 6;
          break;
        case 6:
          if ((int)v17 - 2 <= v15 || *(unsigned char *)(v17 + *(void *)a1 - 1) != 101) {
            goto LABEL_38;
          }
          int v19 = &a_3_2;
          uint64_t v20 = a1;
          int v21 = 2;
          break;
        default:
          goto LABEL_38;
      }
      if (find_among_b(v20, (uint64_t)v19, v21))
      {
LABEL_37:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v15;
    }
  }
LABEL_38:
  int v22 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  int v23 = **(_DWORD **)(a1 + 40);
  if (v22 >= v23)
  {
    int v24 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v22;
    int v25 = find_among_b(a1, (uint64_t)&a_6_10, 30);
    if (v25)
    {
      uint64_t v26 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v24;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v26;
      switch(v25)
      {
        case 1:
          if ((int)v26 <= v24) {
            break;
          }
          uint64_t v27 = v26 - 1;
          if (*(unsigned char *)(*(void *)a1 + v27) != 97) {
            break;
          }
          goto LABEL_53;
        case 2:
          if ((int)v26 <= v24) {
            break;
          }
          uint64_t v27 = v26 - 1;
          if (*(unsigned char *)(*(void *)a1 + v27) != 101) {
            break;
          }
          goto LABEL_53;
        case 3:
          if ((int)v26 <= v24) {
            break;
          }
          uint64_t v27 = v26 - 1;
          if (*(unsigned char *)(*(void *)a1 + v27) != 105) {
            break;
          }
          goto LABEL_53;
        case 4:
          if ((int)v26 <= v24) {
            break;
          }
          uint64_t v27 = v26 - 1;
          if (*(unsigned char *)(*(void *)a1 + v27) != 111) {
            break;
          }
LABEL_53:
          *(_DWORD *)(a1 + 8) = v27;
          goto LABEL_66;
        case 5:
          int v28 = &s_2_13;
          goto LABEL_56;
        case 6:
          int v28 = &s_3_24;
LABEL_56:
          if (!eq_s_b(a1, 2, v28)) {
            break;
          }
          goto LABEL_66;
        case 7:
          int v29 = *(_DWORD *)(a1 + 12) - v26;
          if ((find_among_b(a1, (uint64_t)&a_5_2, 7)
             || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v29, eq_s_b(a1, 2, &s_4_16)))
            && (uint64_t v30 = *(unsigned int *)(a1 + 16),
                uint64_t v31 = (*(_DWORD *)(a1 + 12) - v29),
                *(_DWORD *)(a1 + 8) = v31,
                int v32 = skip_utf8(*(void *)a1, v31, v30, 0, -1),
                (v32 & 0x80000000) == 0))
          {
            *(_DWORD *)(a1 + 8) = v32;
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v32;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v29;
          }
          goto LABEL_66;
        case 8:
          if (in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 0)
            || in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0))
          {
            break;
          }
          goto LABEL_66;
        default:
LABEL_66:
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          **(unsigned char **)(a1 + 48) = 1;
          break;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v24;
    }
  }
  int v33 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  int v34 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
  if (v33 >= v34)
  {
    int v35 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 24) = v33;
    int v36 = find_among_b(a1, (uint64_t)&a_7_1, 14);
    if (v36)
    {
      int v37 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v35;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v37;
      if (v36 == 1)
      {
        int v38 = *(_DWORD *)(a1 + 12);
        if (eq_s_b(a1, 2, &s_5_10)) {
          goto LABEL_76;
        }
        *(_DWORD *)(a1 + 8) = v37 - v38 + *(_DWORD *)(a1 + 12);
      }
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v35;
    }
  }
LABEL_76:
  int v39 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v39;
  int v40 = **(_DWORD **)(a1 + 40);
  if (**(unsigned char **)(a1 + 48))
  {
    if (v39 >= v40)
    {
      int v41 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v40;
      *(_DWORD *)(a1 + 24) = v39;
      if (v39 > v40
        && *(unsigned __int8 *)(v39 + *(void *)a1 - 1) - 105 <= 1
        && find_among_b(a1, (uint64_t)&a_8_1, 2))
      {
        int v42 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v41;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v42;
        goto LABEL_82;
      }
      goto LABEL_88;
    }
  }
  else if (v39 >= v40)
  {
    int v41 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v40;
    *(_DWORD *)(a1 + 24) = v39;
    if (v39 <= v40 {
      || (uint64_t v43 = v39 - 1, *(unsigned char *)(*(void *)a1 + v43) != 116)
    }
      || (*(_DWORD *)(a1 + 8) = v43,
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v43,
          in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 0)))
    {
LABEL_88:
      *(_DWORD *)(a1 + 16) = v41;
      goto LABEL_89;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1;
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *(_DWORD *)(a1 + 16) = v41;
    int v60 = *(_DWORD *)(a1 + 8);
    int v61 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
    if (v60 >= v61)
    {
      *(_DWORD *)(a1 + 16) = v61;
      *(_DWORD *)(a1 + 24) = v60;
      if (v60 - 2 > v61 && *(unsigned char *)(v60 + *(void *)a1 - 1) == 97)
      {
        int v62 = find_among_b(a1, (uint64_t)&a_9_1, 2);
        if (v62)
        {
          int v63 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v41;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v63;
          if (v62 == 1)
          {
            int v64 = *(_DWORD *)(a1 + 12);
            if (eq_s_b(a1, 2, &s_6_47)) {
              goto LABEL_89;
            }
            *(_DWORD *)(a1 + 8) = v63 - v64 + *(_DWORD *)(a1 + 12);
          }
LABEL_82:
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_89;
        }
      }
      goto LABEL_88;
    }
  }
LABEL_89:
  int v44 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v44;
  int v45 = **(_DWORD **)(a1 + 40);
  if (v44 < v45) {
    goto LABEL_111;
  }
  int v46 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v45;
  if (!find_among_b(a1, (uint64_t)&a_5_2, 7)) {
    goto LABEL_128;
  }
  uint64_t v47 = *(unsigned int *)(a1 + 12);
  uint64_t v48 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v47;
  *(_DWORD *)(a1 + 24) = v47;
  int v49 = skip_utf8(*(void *)a1, v47, v48, 0, -1);
  if (v49 < 0
    || (*(_DWORD *)(a1 + 8) = v49, *(_DWORD *)(a1 + 20) = v49, uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_128:
    int v50 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v50;
    *(_DWORD *)(a1 + 24) = v50;
    if (in_grouping_b_U(a1, (uint64_t)&g_AEI, 97, 228, 0) {
      || (*(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8), in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0))
    }
      || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
    {
      int v51 = *(_DWORD *)(a1 + 12);
      int v52 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 24) = v51;
      if (v51 > v52)
      {
        uint64_t v53 = *(void *)a1;
        uint64_t v54 = v51 - 1;
        if (*(unsigned char *)(*(void *)a1 + v54) == 106)
        {
          *(_DWORD *)(a1 + 8) = v54;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v54;
          if ((int)v54 > v52)
          {
            uint64_t v55 = v51 - 2;
            int v56 = *(unsigned __int8 *)(v53 + v55);
            if (v56 == 117 || v56 == 111)
            {
              *(_DWORD *)(a1 + 8) = v55;
              uint64_t result = slice_del(a1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v51 = *(_DWORD *)(a1 + 12);
              int v52 = *(_DWORD *)(a1 + 16);
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 24) = v51;
      if (v51 > v52)
      {
        uint64_t v57 = *(void *)a1;
        uint64_t v58 = v51 - 1;
        if (*(unsigned char *)(*(void *)a1 + v58) == 111)
        {
          *(_DWORD *)(a1 + 8) = v58;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v58;
          if ((int)v58 > v52 && *(unsigned char *)(v57 + v51 - 2) == 106)
          {
            *(_DWORD *)(a1 + 8) = v51 - 2;
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v51 = *(_DWORD *)(a1 + 12);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 16) = v46;
      if ((in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) != 0) {
        goto LABEL_111;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      if (in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0)) {
        goto LABEL_111;
      }
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      **(void **)(a1 + 32) = slice_to((uint64_t *)a1, **(_DWORD ***)(a1 + 32));
      int v59 = **(_DWORD ***)(a1 + 32);
      if (!v59) {
        return 0xFFFFFFFFLL;
      }
      if (!eq_v_b(a1, v59) || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
      {
LABEL_111:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

void *finnish_UTF_8_create_env()
{
  return SN_create_env(1, 2, 1);
}

void finnish_UTF_8_close_env(uint64_t a1)
{
}

BOOL r_LONG(uint64_t a1)
{
  return find_among_b(a1, (uint64_t)&a_5_2, 7) != 0;
}

BOOL r_VI(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = v1 - 1;
  if (*(unsigned char *)(*(void *)a1 + v2) != 105) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  return in_grouping_b_U(a1, (uint64_t)&g_V2, 97, 246, 0) == 0;
}

uint64_t portuguese_UTF_8_stem(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  for (uint64_t i = v2; ; uint64_t i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = i;
    uint64_t v4 = (int)i + 1;
    uint64_t v5 = *(unsigned int *)(a1 + 12);
    if ((int)v4 >= (int)v5 || (int v6 = *(unsigned __int8 *)(*(void *)a1 + v4), v6 != 163) && v6 != 181)
    {
      *(_DWORD *)(a1 + 24) = i;
      goto LABEL_11;
    }
    int among = find_among(a1, (uint64_t)&a_0_3, 3);
    if (!among) {
      goto LABEL_18;
    }
    uint64_t i = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = i;
    if (among == 1)
    {
      uint64_t v9 = a1;
      uint64_t v10 = &s_0_48;
      goto LABEL_16;
    }
    if (among != 2) {
      break;
    }
    uint64_t v9 = a1;
    uint64_t v10 = &s_1_43;
LABEL_16:
    uint64_t result = slice_from_s(v9, 2, v10);
    if ((result & 0x80000000) != 0) {
      return result;
    }
LABEL_13:
    ;
  }
  if (among != 3) {
    goto LABEL_13;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
LABEL_11:
  int v8 = skip_utf8(*(void *)a1, i, 0, v5, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v8;
    goto LABEL_13;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v12 = *(_DWORD **)(a1 + 40);
  *uint64_t v12 = *(_DWORD *)(a1 + 12);
  v12[1] = *(_DWORD *)(a1 + 12);
  v12[2] = *(_DWORD *)(a1 + 12);
  int v13 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
  {
    if ((int v14 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
      && (int v17 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1), (v17 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v14, !in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
      && (int v17 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1), (v17 & 0x80000000) == 0))
    {
LABEL_31:
      int v16 = *(_DWORD *)(a1 + 8) + v17;
      goto LABEL_32;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  if (!out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
  {
    int v15 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
    {
      int v17 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(a1 + 8) = v15;
    if (!in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
    {
      int v16 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v16 & 0x80000000) == 0) {
LABEL_32:
      }
        **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  int v18 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
  if ((v18 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v18;
    int v19 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
    if ((v19 & 0x80000000) == 0)
    {
      int v20 = *(_DWORD *)(a1 + 8) + v19;
      *(_DWORD *)(a1 + 8) = v20;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v20;
      int v21 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v21;
        int v22 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
        if ((v22 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v22;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v23 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if ((int)v23 - 2 > v13)
  {
    char v24 = *(unsigned char *)(v23 + *(void *)a1 - 1);
    if (v24 & 0xE0) == 0x60 && ((0xC9022u >> v24))
    {
      among_CGFloat b = find_among_b(a1, (uint64_t)&a_5_3, 45);
      if (among_b)
      {
        uint64_t v26 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v26;
        switch(among_b)
        {
          case 1:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            goto LABEL_80;
          case 2:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t v27 = &s_4_17;
            uint64_t v28 = a1;
            int v29 = 3;
            goto LABEL_86;
          case 3:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t v27 = &s_5_11;
            uint64_t v28 = a1;
            int v29 = 1;
            goto LABEL_86;
          case 4:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t v27 = &s_6_48;
            uint64_t v28 = a1;
            int v29 = 4;
            goto LABEL_86;
          case 5:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v26) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v30 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v30;
            uint64_t v31 = v30 - 1;
            if ((int)v31 <= *(_DWORD *)(a1 + 16)) {
              goto LABEL_92;
            }
            char v32 = *(unsigned char *)(*(void *)a1 + v31);
            if ((v32 & 0xE0) != 0x60) {
              goto LABEL_92;
            }
            if (((0x480018u >> v32) & 1) == 0) {
              goto LABEL_92;
            }
            int v33 = find_among_b(a1, (uint64_t)&a_2_3, 4);
            if (!v33) {
              goto LABEL_92;
            }
            int v34 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v34;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v34) {
              goto LABEL_92;
            }
            int v35 = v33;
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v35 == 1)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              int v36 = &s_7_21;
LABEL_78:
              if (eq_s_b(a1, 2, v36)) {
                goto LABEL_79;
              }
            }
            goto LABEL_92;
          case 6:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v37 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v37;
            if ((int)v37 - 3 <= *(_DWORD *)(a1 + 16)) {
              goto LABEL_92;
            }
            int v38 = *(unsigned __int8 *)(v37 + *(void *)a1 - 1);
            if (v38 != 108 && v38 != 101) {
              goto LABEL_92;
            }
            int v39 = &a_3_3;
            goto LABEL_73;
          case 7:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v40 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            uint64_t v41 = v40 - 1;
            if ((int)v41 <= *(_DWORD *)(a1 + 16)) {
              goto LABEL_92;
            }
            char v42 = *(unsigned char *)(*(void *)a1 + v41);
            if ((v42 & 0xE0) != 0x60 || ((0x401008u >> v42) & 1) == 0) {
              goto LABEL_92;
            }
            int v39 = &a_4_3;
LABEL_73:
            if (!find_among_b(a1, (uint64_t)v39, 3)) {
              goto LABEL_92;
            }
LABEL_79:
            int v43 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v43;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v43) {
              goto LABEL_92;
            }
LABEL_80:
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_92;
          case 8:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > (int)v26) {
              break;
            }
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            int v36 = &s_8_97;
            goto LABEL_78;
          case 9:
            if (**(_DWORD **)(a1 + 40) > (int)v26) {
              break;
            }
            if ((int)v26 <= *(_DWORD *)(a1 + 16)) {
              break;
            }
            uint64_t v44 = v26 - 1;
            if (*(unsigned char *)(*(void *)a1 + v44) != 101) {
              break;
            }
            *(_DWORD *)(a1 + 8) = v44;
            uint64_t v27 = &s_9_9;
            uint64_t v28 = a1;
            int v29 = 2;
LABEL_86:
            uint64_t result = slice_from_s(v28, v29, v27);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_92;
          default:
            goto LABEL_92;
        }
      }
    }
  }
  int v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  int v46 = **(_DWORD **)(a1 + 40);
  if (v45 >= v46)
  {
    int v47 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v46;
    *(_DWORD *)(a1 + 24) = v45;
    if (find_among_b(a1, (uint64_t)&a_6_1, 120))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      *(_DWORD *)(a1 + 16) = v47;
LABEL_92:
      int v48 = *(_DWORD *)(a1 + 16);
      uint64_t v49 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v49;
      *(_DWORD *)(a1 + 24) = v49;
      if ((int)v49 <= v48) {
        goto LABEL_102;
      }
      uint64_t v50 = *(void *)a1;
      int v51 = v49 - 1;
      if (*(unsigned char *)(*(void *)a1 + v49 - 1) != 105) {
        goto LABEL_102;
      }
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v51;
      if (v51 <= v48 || *(unsigned char *)(v49 + v50 - 2) != 99 || **(_DWORD **)(a1 + 40) >= (int)v49) {
        goto LABEL_102;
      }
      goto LABEL_101;
    }
    *(_DWORD *)(a1 + 16) = v47;
    int v45 = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 24) = v45;
  if (!find_among_b(a1, (uint64_t)&a_7_2, 7)) {
    goto LABEL_102;
  }
  int v52 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v52;
  if (**(_DWORD **)(a1 + 40) > v52) {
    goto LABEL_102;
  }
LABEL_101:
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
LABEL_102:
  int v53 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v53;
  *(_DWORD *)(a1 + 24) = v53;
  int v54 = find_among_b(a1, (uint64_t)&a_8_2, 4);
  if (!v54) {
    goto LABEL_118;
  }
  int v55 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v55;
  if (v54 == 2)
  {
    uint64_t result = slice_from_s(a1, 1, &s_10_21);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_118;
  }
  if (v54 != 1 || **(_DWORD **)(a1 + 40) > v55) {
    goto LABEL_118;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    int v56 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = v56;
    int v57 = *(_DWORD *)(a1 + 16);
    if (v56 <= v57) {
      goto LABEL_118;
    }
    uint64_t v58 = *(void *)a1;
    uint64_t v59 = v56 - 1;
    if (*(unsigned char *)(*(void *)a1 + v59) != 117 {
      || (*(_DWORD *)(a1 + 8) = v59, *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v59, (int)v59 <= v57)
    }
      || *(unsigned char *)(v56 + v58 - 2) != 103)
    {
      *(_DWORD *)(a1 + 8) = v56;
      if (*(unsigned char *)(v58 + v59) != 105) {
        goto LABEL_118;
      }
      *(_DWORD *)(a1 + 8) = v59;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v59;
      if ((int)v59 <= v57 || *(unsigned char *)(v56 + v58 - 2) != 99) {
        goto LABEL_118;
      }
    }
    *(_DWORD *)(a1 + 8) = v59;
    if (**(_DWORD **)(a1 + 40) >= v56 || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
    {
LABEL_118:
      uint64_t v60 = *(unsigned int *)(a1 + 12);
      uint64_t v61 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v61;
      uint64_t v62 = v61;
      while (1)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v62;
        uint64_t v63 = (int)v62 + 1;
        if ((int)v63 < (int)v60 && *(unsigned char *)(*(void *)a1 + v63) == 126)
        {
          int v64 = find_among(a1, (uint64_t)&a_1_3, 3);
          if (!v64) {
            goto LABEL_134;
          }
          uint64_t v62 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v62;
          if (v64 == 1)
          {
            uint64_t v66 = a1;
            uint64_t v67 = &s_2_14;
            goto LABEL_132;
          }
          if (v64 == 2)
          {
            uint64_t v66 = a1;
            uint64_t v67 = &s_3_25;
LABEL_132:
            uint64_t result = slice_from_s(v66, 2, v67);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_129;
          }
          if (v64 != 3) {
            goto LABEL_129;
          }
          uint64_t v60 = *(unsigned int *)(a1 + 12);
        }
        else
        {
          *(_DWORD *)(a1 + 24) = v62;
        }
        int v65 = skip_utf8(*(void *)a1, v62, 0, v60, 1);
        if (v65 < 0)
        {
LABEL_134:
          *(_DWORD *)(a1 + 8) = v61;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v65;
LABEL_129:
        uint64_t v62 = *(unsigned int *)(a1 + 8);
        uint64_t v60 = *(unsigned int *)(a1 + 12);
      }
    }
  }
  return result;
}

void *portuguese_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void portuguese_UTF_8_close_env(uint64_t a1)
{
}

uint64_t nepali_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_4, 17);
  if (among_b)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
    if (among_b == 2)
    {
      int v7 = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 3, &s_0_49))
      {
        int v8 = v7 - v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v8;
        if (!eq_s_b(a1, 3, &s_1_44))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v8;
LABEL_4:
          uint64_t v5 = slice_del(a1);
          if ((v5 & 0x80000000) != 0) {
            return v5;
          }
        }
      }
    }
    else if (among_b == 1)
    {
      goto LABEL_4;
    }
    LODWORD(v6) = 1;
    goto LABEL_10;
  }
  LODWORD(v6) = 0;
LABEL_10:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  do
  {
    uint64_t v9 = *(int *)(a1 + 8);
    uint64_t v10 = *(int *)(a1 + 12) - v9;
    *(_DWORD *)(a1 + 24) = v9;
    if ((int)v9 - 2 <= *(_DWORD *)(a1 + 16)) {
      goto LABEL_28;
    }
    char v11 = *(unsigned char *)(v9 + *(void *)a1 - 1);
    if ((v11 & 0xE0) != 0x80) {
      goto LABEL_28;
    }
    if (((0x106u >> v11) & 1) == 0) {
      goto LABEL_28;
    }
    if (!find_among_b(a1, (uint64_t)&a_1_4, 3)) {
      goto LABEL_28;
    }
    int v12 = *(_DWORD *)(a1 + 8);
    uint64_t v13 = *(int *)(a1 + 12) - v10;
    *(_DWORD *)(a1 + 8) = v13;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
    *(_DWORD *)(a1 + 24) = v13;
    if ((int)v13 - 2 <= *(_DWORD *)(a1 + 16)) {
      goto LABEL_28;
    }
    char v14 = *(unsigned char *)(v13 + *(void *)a1 - 1);
    if ((v14 & 0xE0) != 0x80) {
      goto LABEL_28;
    }
    if (((0x106u >> v14) & 1) == 0) {
      goto LABEL_28;
    }
    int v15 = find_among_b(a1, (uint64_t)&a_2_4, 3);
    if (!v15) {
      goto LABEL_28;
    }
    int v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
    if (v15 == 2)
    {
      uint64_t v18 = a1;
      int v19 = 9;
      int v20 = &s_6_120;
LABEL_26:
      if (!eq_s_b(v18, v19, v20)) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (v15 != 1) {
      goto LABEL_28;
    }
    int v25 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 6, &s_2_15))
    {
      int v17 = v25 - v16;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
      if (!eq_s_b(a1, 6, &s_3_26))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
        if (!eq_s_b(a1, 6, &s_4_18))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
          uint64_t v18 = a1;
          int v19 = 6;
          int v20 = &s_5_45;
          goto LABEL_26;
        }
      }
    }
LABEL_27:
    uint64_t v5 = slice_del(a1);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
LABEL_28:
    int v21 = *(_DWORD *)(a1 + 12) - v10;
    *(_DWORD *)(a1 + 8) = v21;
    *(_DWORD *)(a1 + 24) = v21;
    if (!find_among_b(a1, (uint64_t)&a_3_4, 91)) {
      goto LABEL_36;
    }
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v22 = slice_del(a1);
    if (v22 >= 0) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = v22;
    }
    int v23 = v22 >> 31;
    if (v22 >= 0) {
      int v23 = 2;
    }
  }
  while (v23 == 2);
  if (v23) {
    return v6;
  }
LABEL_36:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
  return 1;
}

void *nepali_UTF_8_create_env()
{
  return SN_create_env(0, 0, 0);
}

void nepali_UTF_8_close_env(uint64_t a1)
{
}

uint64_t hungarian_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 0)
    && (in_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 1) & 0x80000000) == 0)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    uint64_t v7 = *(int *)(a1 + 8);
    uint64_t v8 = *(void *)a1;
    if ((int)v7 + 1 < (int)v6)
    {
      char v9 = *(unsigned char *)(v8 + v7 + 1);
      if (v9 & 0xE0) == 0x60 && ((0x6080000u >> v9))
      {
        if (find_among(a1, (uint64_t)&a_0_5, 8))
        {
          int v5 = *(_DWORD *)(a1 + 8);
          goto LABEL_13;
        }
        uint64_t v8 = *(void *)a1;
        uint64_t v6 = *(unsigned int *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v7;
    int v5 = skip_utf8(v8, v7, 0, v6, 1);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (!out_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 0))
  {
    int v4 = out_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 1);
    if ((v4 & 0x80000000) == 0)
    {
      int v5 = *(_DWORD *)(a1 + 8) + v4;
LABEL_13:
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  uint64_t v10 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 24) = v10;
  uint64_t v11 = v10 - 1;
  if ((int)v11 > v2 && *(unsigned char *)(*(void *)a1 + v11) == 108)
  {
    if (find_among_b(a1, (uint64_t)&a_3_5, 2))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
      if (**(_DWORD **)(a1 + 40) <= v12)
      {
        if (r_double(a1))
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = r_undouble_0(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
  }
  int v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  if (find_among_b(a1, (uint64_t)&a_4_4, 44))
  {
    int v15 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v15;
    if (**(_DWORD **)(a1 + 40) <= v15)
    {
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v16 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v16;
      uint64_t v17 = v16 - 1;
      if ((int)v17 > *(_DWORD *)(a1 + 16) && (*(unsigned __int8 *)(*(void *)a1 + v17) | 8) == 0xA9)
      {
        among_CGFloat b = find_among_b(a1, (uint64_t)&a_1_5, 2);
        if (among_b)
        {
          int v19 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
          if (**(_DWORD **)(a1 + 40) <= v19)
          {
            if (among_b == 2)
            {
              int v20 = &s_1_45;
            }
            else
            {
              if (among_b != 1) {
                goto LABEL_33;
              }
              int v20 = &s_0_50;
            }
            uint64_t result = slice_from_s(a1, 1, v20);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
      }
    }
  }
LABEL_33:
  int v21 = *(_DWORD *)(a1 + 16);
  uint64_t v22 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if ((int)v22 - 2 > v21)
  {
    int v23 = *(unsigned __int8 *)(v22 + *(void *)a1 - 1);
    if (v23 == 116 || v23 == 110)
    {
      int v24 = find_among_b(a1, (uint64_t)&a_5_4, 3);
      if (v24)
      {
        int v25 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v25;
        if (**(_DWORD **)(a1 + 40) <= v25)
        {
          if (v24 == 2)
          {
            uint64_t v26 = &s_3_91;
          }
          else
          {
            if (v24 != 1) {
              goto LABEL_43;
            }
            uint64_t v26 = &s_2_23;
          }
          uint64_t result = slice_from_s(a1, 1, v26);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
  }
LABEL_43:
  int v27 = *(_DWORD *)(a1 + 16);
  uint64_t v28 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 24) = v28;
  if ((int)v28 - 3 <= v27) {
    goto LABEL_55;
  }
  if (*(unsigned char *)(v28 + *(void *)a1 - 1) != 108) {
    goto LABEL_55;
  }
  int v29 = find_among_b(a1, (uint64_t)&a_6_2, 6);
  if (!v29) {
    goto LABEL_55;
  }
  int v30 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v30;
  if (**(_DWORD **)(a1 + 40) > v30) {
    goto LABEL_55;
  }
  switch(v29)
  {
    case 3:
      uint64_t v31 = &s_5_46;
      goto LABEL_54;
    case 2:
      uint64_t v31 = &s_4_44;
LABEL_54:
      uint64_t result = slice_from_s(a1, 1, v31);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      break;
    case 1:
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      break;
  }
LABEL_55:
  int v32 = *(_DWORD *)(a1 + 16);
  uint64_t v33 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  *(_DWORD *)(a1 + 24) = v33;
  uint64_t v34 = v33 - 1;
  if ((int)v34 > v32 && (*(unsigned __int8 *)(*(void *)a1 + v34) | 8) == 0xA9)
  {
    if (find_among_b(a1, (uint64_t)&a_7_3, 2))
    {
      int v35 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v35;
      if (**(_DWORD **)(a1 + 40) <= v35)
      {
        if (r_double(a1))
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = r_undouble_0(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
  }
  int v36 = *(_DWORD *)(a1 + 16);
  uint64_t v37 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v37;
  *(_DWORD *)(a1 + 24) = v37;
  uint64_t v38 = v37 - 1;
  if ((int)v38 <= v36) {
    goto LABEL_75;
  }
  int v39 = *(unsigned __int8 *)(*(void *)a1 + v38);
  if (v39 != 169 && v39 != 105) {
    goto LABEL_75;
  }
  int v40 = find_among_b(a1, (uint64_t)&a_9_2, 12);
  if (!v40) {
    goto LABEL_75;
  }
  int v41 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v41;
  if (**(_DWORD **)(a1 + 40) > v41) {
    goto LABEL_75;
  }
  if (v40 == 3)
  {
    char v42 = &s_9_10;
  }
  else
  {
    if (v40 != 2)
    {
      if (v40 == 1)
      {
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      goto LABEL_75;
    }
    char v42 = &s_8_98;
  }
  uint64_t result = slice_from_s(a1, 1, v42);
  if ((result & 0x80000000) != 0) {
    return result;
  }
LABEL_75:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  uint64_t result = r_sing_owner(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_plur_owner(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      uint64_t result = r_plural(a1);
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_sing_owner(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_10_0, 31);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
    if (**(_DWORD **)(a1 + 40) > v3) {
      return 0;
    }
    if (result == 3)
    {
      int v4 = &s_11_9;
    }
    else
    {
      if (result != 2)
      {
        if (result == 1)
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        return 1;
      }
      int v4 = &s_10_22;
    }
    uint64_t result = slice_from_s(a1, 1, v4);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t r_plur_owner(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(v1 + *(void *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x2A10u >> v3) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_11_0, 42);
  if (!result) {
    return result;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  if (**(_DWORD **)(a1 + 40) > v5) {
    return 0;
  }
  if (result == 3)
  {
    uint64_t v6 = &s_13_35;
    goto LABEL_15;
  }
  if (result == 2)
  {
    uint64_t v6 = &s_12_9;
LABEL_15:
    uint64_t result = slice_from_s(a1, 1, v6);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  if (result != 1) {
    return 1;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_plural(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16) || *(unsigned char *)(v1 + *(void *)a1 - 1) != 107) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_8_3, 7);
  if (!result) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  if (**(_DWORD **)(a1 + 40) > v4) {
    return 0;
  }
  if (result == 3)
  {
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  if (result != 2)
  {
    if (result == 1)
    {
      int v5 = &s_6_121;
      goto LABEL_14;
    }
    return 1;
  }
  int v5 = &s_7_22;
LABEL_14:
  uint64_t result = slice_from_s(a1, 1, v5);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

void *hungarian_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void hungarian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t r_double(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 - 1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(*(void *)a1 + v1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x65D7CDCu >> v3) & 1) == 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t result = find_among_b(a1, (uint64_t)&a_2_5, 23);
  if (result)
  {
    *(_DWORD *)(a1 + 8) = v1 - v5 + *(_DWORD *)(a1 + 12);
    return 1;
  }
  return result;
}

uint64_t r_undouble_0(uint64_t a1)
{
  uint64_t v2 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, -1);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  int v3 = skip_utf8(*(void *)a1, v2, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 12), -1);
  if (v3 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  int v4 = slice_del(a1);
  if (v4 >= 0) {
    return 1;
  }
  else {
    return v4 & (v4 >> 31);
  }
}

uint64_t romanian_UTF_8_stem(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  for (uint64_t i = v2; ; *(_DWORD *)(a1 + 8) = i)
  {
    int v4 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0);
    uint64_t v5 = *(unsigned int *)(a1 + 12);
    if (v4)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 12);
      goto LABEL_16;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
    if (v6 == v5 || *(unsigned char *)(*(void *)a1 + (int)v6) != 117) {
      break;
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *(_DWORD *)(a1 + 24) = v6 + 1;
    if (in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      break;
    }
    uint64_t v8 = a1;
    char v9 = &s_0_51;
LABEL_11:
    uint64_t result = slice_from_s(v8, 1, v9);
    if ((result & 0x80000000) != 0) {
      return result;
    }
LABEL_12:
    ;
  }
  *(_DWORD *)(a1 + 8) = v6;
  uint64_t v7 = v6;
  if (v6 == v5) {
    goto LABEL_16;
  }
  uint64_t v7 = v5;
  if (*(unsigned char *)(*(void *)a1 + (int)v6) != 105) {
    goto LABEL_16;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 24) = v6 + 1;
  if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    uint64_t v8 = a1;
    char v9 = &s_1_46;
    goto LABEL_11;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 12);
LABEL_16:
  *(_DWORD *)(a1 + 8) = i;
  uint64_t v11 = skip_utf8(*(void *)a1, i, 0, v7, 1);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t i = v11;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 8) = v2;
  int v12 = *(_DWORD **)(a1 + 40);
  *int v12 = *(_DWORD *)(a1 + 12);
  v12[1] = *(_DWORD *)(a1 + 12);
  v12[2] = *(_DWORD *)(a1 + 12);
  int v13 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    if ((int v14 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
      && (int v17 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1), (v17 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v14, !in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
      && (int v17 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1), (v17 & 0x80000000) == 0))
    {
LABEL_31:
      int v16 = *(_DWORD *)(a1 + 8) + v17;
      goto LABEL_32;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  if (!out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    int v15 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      int v17 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(a1 + 8) = v15;
    if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      int v16 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v16 & 0x80000000) == 0) {
LABEL_32:
      }
        **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  int v18 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
  if ((v18 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v18;
    int v19 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
    if ((v19 & 0x80000000) == 0)
    {
      int v20 = *(_DWORD *)(a1 + 8) + v19;
      *(_DWORD *)(a1 + 8) = v20;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v20;
      int v21 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v21;
        int v22 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
        if ((v22 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v22;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v23 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  uint64_t v24 = v23 - 1;
  if ((int)v24 <= v13) {
    goto LABEL_55;
  }
  char v25 = *(unsigned char *)(*(void *)a1 + v24);
  if ((v25 & 0xE0) != 0x60) {
    goto LABEL_55;
  }
  if (((0x41222u >> v25) & 1) == 0) {
    goto LABEL_55;
  }
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_1_6, 16);
  if (!among_b) {
    goto LABEL_55;
  }
  int v27 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v27;
  if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v27) {
    goto LABEL_55;
  }
  switch(among_b)
  {
    case 1:
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0) {
        goto LABEL_55;
      }
      return result;
    case 2:
      uint64_t v28 = &s_4_45;
      goto LABEL_51;
    case 3:
      uint64_t v28 = &s_5_47;
      goto LABEL_51;
    case 4:
      uint64_t v28 = &s_6_122;
      goto LABEL_51;
    case 5:
      int v29 = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 2, &s_7_23)) {
        goto LABEL_55;
      }
      *(_DWORD *)(a1 + 8) = v27 - v29 + *(_DWORD *)(a1 + 12);
      uint64_t v28 = &s_8_99;
LABEL_51:
      uint64_t v30 = a1;
      int v31 = 1;
      break;
    case 6:
      uint64_t v28 = &s_9_12;
      uint64_t v30 = a1;
      int v31 = 2;
      break;
    case 7:
      uint64_t v28 = &s_10_31;
      uint64_t v30 = a1;
      int v31 = 4;
      break;
    default:
      goto LABEL_55;
  }
  uint64_t result = slice_from_s(v30, v31, v28);
  if ((result & 0x80000000) == 0)
  {
LABEL_55:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    **(unsigned char **)(a1 + 48) = 0;
    int v32 = *(_DWORD *)(a1 + 8);
    int v33 = v32 - *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v32;
    int v34 = find_among_b(a1, (uint64_t)&a_2_6, 46);
    if (v34)
    {
      while (2)
      {
        int v35 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v35;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) <= v35)
        {
          switch(v34)
          {
            case 1:
              uint64_t v36 = a1;
              int v37 = 4;
              uint64_t v38 = &s_11_42;
              goto LABEL_64;
            case 2:
              uint64_t v36 = a1;
              int v37 = 4;
              uint64_t v38 = &s_12_10;
              goto LABEL_64;
            case 3:
              uint64_t v36 = a1;
              int v37 = 2;
              uint64_t v38 = &s_13_36;
              goto LABEL_64;
            case 4:
              uint64_t v36 = a1;
              int v37 = 2;
              uint64_t v38 = &s_14_13;
              goto LABEL_64;
            case 5:
              uint64_t v36 = a1;
              int v37 = 2;
              uint64_t v38 = &s_15_6;
              goto LABEL_64;
            case 6:
              uint64_t v36 = a1;
              int v37 = 2;
              uint64_t v38 = &s_16_2;
LABEL_64:
              uint64_t result = slice_from_s(v36, v37, v38);
              if ((result & 0x80000000) == 0) {
                goto LABEL_65;
              }
              return result;
            default:
LABEL_65:
              **(unsigned char **)(a1 + 48) = 1;
              int v39 = *(_DWORD *)(a1 + 12) + v33;
              *(_DWORD *)(a1 + 8) = v39;
              *(_DWORD *)(a1 + 24) = v39;
              int v34 = find_among_b(a1, (uint64_t)&a_2_6, 46);
              if (!v34) {
                break;
              }
              continue;
          }
        }
        break;
      }
    }
    int v40 = *(_DWORD *)(a1 + 12) + v33;
    *(_DWORD *)(a1 + 8) = v40;
    *(_DWORD *)(a1 + 24) = v40;
    int v41 = find_among_b(a1, (uint64_t)&a_3_6, 62);
    if (!v41) {
      goto LABEL_78;
    }
    int v42 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v42;
    if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v42) {
      goto LABEL_78;
    }
    if (v41 == 3)
    {
      int v43 = &s_19_2;
      uint64_t v44 = a1;
      int v45 = 3;
    }
    else
    {
      if (v41 != 2)
      {
        if (v41 == 1)
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
LABEL_77:
        **(unsigned char **)(a1 + 48) = 1;
LABEL_78:
        int v46 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v46;
        if (!**(unsigned char **)(a1 + 48))
        {
          int v47 = **(_DWORD **)(a1 + 40);
          if (v46 >= v47)
          {
            int v48 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v47;
            *(_DWORD *)(a1 + 24) = v46;
            int v49 = find_among_b(a1, (uint64_t)&a_4_5, 94);
            if (!v49) {
              goto LABEL_88;
            }
            int v50 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v50;
            if (v49 == 2) {
              goto LABEL_87;
            }
            if (v49 != 1) {
              goto LABEL_88;
            }
            int v51 = *(_DWORD *)(a1 + 12);
            if (!out_grouping_b_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
            {
LABEL_87:
              uint64_t result = slice_del(a1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            else
            {
              int v52 = *(_DWORD *)(a1 + 16);
              int v53 = *(_DWORD *)(a1 + 12) + v50 - v51;
              *(_DWORD *)(a1 + 8) = v53;
              if (v53 > v52)
              {
                uint64_t v54 = v53 - 1;
                if (*(unsigned char *)(*(void *)a1 + v54) == 117)
                {
                  *(_DWORD *)(a1 + 8) = v54;
                  goto LABEL_87;
                }
              }
            }
LABEL_88:
            *(_DWORD *)(a1 + 16) = v48;
          }
        }
        int v55 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v55;
        *(_DWORD *)(a1 + 24) = v55;
        if (find_among_b(a1, (uint64_t)&a_5_5, 5))
        {
          int v56 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v56;
          if (**(_DWORD **)(a1 + 40) <= v56)
          {
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        uint64_t v57 = *(unsigned int *)(a1 + 12);
        uint64_t v58 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v58;
        uint64_t v59 = v58;
        while (2)
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v59;
          if ((int)v59 < (int)v57)
          {
            int v60 = *(unsigned __int8 *)(*(void *)a1 + (int)v59);
            if (v60 == 73 || v60 == 85)
            {
              int among = find_among(a1, (uint64_t)&a_0_6, 3);
              if (!among) {
                goto LABEL_109;
              }
              uint64_t v59 = *(unsigned int *)(a1 + 8);
              *(_DWORD *)(a1 + 24) = v59;
              switch(among)
              {
                case 1:
                  uint64_t v63 = a1;
                  int v64 = &s_2_46;
                  break;
                case 2:
                  uint64_t v63 = a1;
                  int v64 = &s_3_92;
                  break;
                case 3:
                  uint64_t v57 = *(unsigned int *)(a1 + 12);
                  goto LABEL_102;
                default:
                  goto LABEL_104;
              }
              uint64_t result = slice_from_s(v63, 1, v64);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_104;
            }
          }
          *(_DWORD *)(a1 + 24) = v59;
LABEL_102:
          int v62 = skip_utf8(*(void *)a1, v59, 0, v57, 1);
          if (v62 < 0)
          {
LABEL_109:
            *(_DWORD *)(a1 + 8) = v58;
            return 1;
          }
          *(_DWORD *)(a1 + 8) = v62;
LABEL_104:
          uint64_t v59 = *(unsigned int *)(a1 + 8);
          uint64_t v57 = *(unsigned int *)(a1 + 12);
          continue;
        }
      }
      if (!eq_s_b(a1, 2, &s_17_10)) {
        goto LABEL_78;
      }
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      int v43 = &s_18_6;
      uint64_t v44 = a1;
      int v45 = 1;
    }
    uint64_t result = slice_from_s(v44, v45, v43);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_77;
  }
  return result;
}

void *romanian_UTF_8_create_env()
{
  return SN_create_env(0, 3, 1);
}

void romanian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t tamil_UTF_8_stem(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 48) + 1) = 0;
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t result = r_fix_ending(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v2;
    if ((int)len_utf8(*(char **)a1) < 5)
    {
      return 0;
    }
    else
    {
      int v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
      if (!eq_s(a1, 3, &s_12_11)
        || !find_among(a1, (uint64_t)&a_0_7, 10)
        || !eq_s(a1, 3, &s_13_37)
        || (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), uint64_t result = slice_del(a1), (result & 0x80000000) == 0)
        && (uint64_t result = r_fix_va_start((_DWORD *)a1), (result & 0x80000000) == 0))
      {
        *(_DWORD *)(a1 + 8) = v4;
        **(unsigned char **)(a1 + 48) = 0;
        int v5 = *(_DWORD *)(a1 + 12);
        uint64_t v6 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
        uint64_t v7 = v6 + 2;
        if ((int)v7 >= v5
          || (char v8 = *(unsigned char *)(*(void *)a1 + v7), (v8 & 0xE0) != 0x80)
          || ((0x2A0u >> v8) & 1) == 0
          || !find_among(a1, (uint64_t)&a_11_1, 3)
          || !find_among(a1, (uint64_t)&a_12_0, 10)
          || !eq_s(a1, 3, &s_45_1)
          || (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), uint64_t result = slice_del(a1), (result & 0x80000000) == 0)
          && (**(unsigned char **)(a1 + 48) = 1, uint64_t result = r_fix_va_start((_DWORD *)a1), (result & 0x80000000) == 0))
        {
          *(_DWORD *)(a1 + 8) = v4;
          if ((int)len_utf8(*(char **)a1) < 5) {
            goto LABEL_21;
          }
          **(unsigned char **)(a1 + 48) = 0;
          int v9 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          if (find_among_b(a1, (uint64_t)&a_14_0, 3))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            uint64_t result = slice_from_s(a1, 3, &s_53_6);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            **(unsigned char **)(a1 + 48) = 1;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
          uint64_t result = r_fix_endings(a1);
          if ((result & 0x80000000) == 0)
          {
LABEL_21:
            *(_DWORD *)(a1 + 8) = v4;
            **(unsigned char **)(a1 + 48) = 0;
            if ((int)len_utf8(*(char **)a1) < 5) {
              goto LABEL_25;
            }
            int v10 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = v10;
            *(_DWORD *)(a1 + 24) = v10;
            if (!eq_s_b(a1, 9, &s_54_5) {
              || (*(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8),
            }
                  uint64_t result = slice_from_s(a1, 3, &s_55_3),
                  (result & 0x80000000) == 0)
              && (**(unsigned char **)(a1 + 48) = 1,
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16),
                  uint64_t result = r_fix_ending(a1),
                  (result & 0x80000000) == 0))
            {
LABEL_25:
              *(_DWORD *)(a1 + 8) = v4;
              uint64_t result = r_remove_common_word_endings(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v4;
                uint64_t result = r_remove_vetrumai_urupukal(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = v4;
                  uint64_t result = r_remove_plural_suffix(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = v4;
                    uint64_t result = r_remove_command_suffixes(a1);
                    if ((result & 0x80000000) == 0)
                    {
                      *(_DWORD *)(a1 + 8) = v4;
                      uint64_t result = r_remove_tense_suffixes(a1);
                      if ((result & 0x80000000) == 0)
                      {
                        *(_DWORD *)(a1 + 8) = v4;
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_fix_ending(uint64_t a1)
{
  if ((int)len_utf8(*(char **)a1) < 4) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (v2 - 5 > v3)
  {
    int v4 = *(unsigned __int8 *)(v2 + *(void *)a1 - 1);
    if (v4 == 164 || v4 == 141)
    {
      if (find_among_b(a1, (uint64_t)&a_1_7, 3))
      {
LABEL_6:
        int v5 = *(_DWORD *)(a1 + 8);
        goto LABEL_12;
      }
      int v2 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (eq_s_b(a1, 6, &s_14_14))
  {
    int v8 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    if (find_among_b(a1, (uint64_t)&a_2_7, 3))
    {
LABEL_11:
      int v5 = *(_DWORD *)(a1 + 12) + v8 - v7;
      *(_DWORD *)(a1 + 8) = v5;
LABEL_12:
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_19;
    }
  }
  int v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  if (eq_s_b(a1, 12, &s_15_7)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 12, &s_16_3)))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_17_11;
LABEL_17:
    uint64_t v11 = a1;
    int v12 = 6;
    goto LABEL_18;
  }
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  if (eq_s_b(a1, 12, &s_18_7))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_19_3;
    goto LABEL_17;
  }
  int v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  if (eq_s_b(a1, 12, &s_20_4))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_21_33;
    goto LABEL_17;
  }
  int v15 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 24) = v15;
  if (eq_s_b(a1, 12, &s_22_15))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_23_8;
    goto LABEL_17;
  }
  int v16 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v16;
  if (*(unsigned char *)(*(void *)(a1 + 48) + 1))
  {
    *(_DWORD *)(a1 + 24) = v16;
    int v17 = eq_s_b(a1, 12, &s_24_4);
    int v18 = *(_DWORD *)(a1 + 12);
    if (v17)
    {
      int v19 = *(_DWORD *)(a1 + 8);
      int v20 = eq_s_b(a1, 3, &s_25_2);
      int v16 = *(_DWORD *)(a1 + 12);
      if (!v20)
      {
        int v21 = v16 + v19 - v18;
        *(_DWORD *)(a1 + 8) = v21;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v21;
        uint64_t result = slice_from_s(a1, 6, &s_26_3);
        if ((result & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
LABEL_19:
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
          return 1;
        }
        return result;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 24) = v16;
  if (eq_s_b(a1, 9, &s_27_7)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 15, &s_28_4)))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_29_2;
LABEL_36:
    uint64_t v11 = a1;
    int v12 = 3;
LABEL_18:
    uint64_t result = slice_from_s(v11, v12, v10);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_19;
  }
  int v22 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if (eq_s_b(a1, 3, &s_30_10)
    && find_among_b(a1, (uint64_t)&a_3_7, 6)
    && eq_s_b(a1, 3, &s_31_2)
    && find_among_b(a1, (uint64_t)&a_4_6, 6))
  {
    goto LABEL_6;
  }
  int v23 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if (eq_s_b(a1, 9, &s_32_8))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v10 = &s_33_2;
    goto LABEL_36;
  }
  int v24 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v24;
  *(_DWORD *)(a1 + 24) = v24;
  if (eq_s_b(a1, 3, &s_34_15) && find_among_b(a1, (uint64_t)&a_5_6, 6)) {
    goto LABEL_6;
  }
  int v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (eq_s_b(a1, 3, &s_35_2))
  {
    int v26 = *(_DWORD *)(a1 + 12);
    uint64_t v27 = *(int *)(a1 + 8);
    if ((int)v27 - 2 > *(_DWORD *)(a1 + 16) && (char v28 = *(unsigned char *)(v27 + *(void *)a1 - 1), (v28 & 0xE0) == 0xA0))
    {
      unsigned int v29 = 0x3D8000u >> v28;
      int v30 = *(_DWORD *)(a1 + 12);
      if (v29)
      {
        if (find_among_b(a1, (uint64_t)&a_6_3, 6))
        {
LABEL_53:
          if (eq_s_b(a1, 3, &s_36_8))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            int v10 = &s_37_3;
            goto LABEL_36;
          }
          goto LABEL_55;
        }
        int v30 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      int v30 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v27 - v26 + v30;
    if (!find_among_b(a1, (uint64_t)&a_7_4, 6)) {
      goto LABEL_55;
    }
    goto LABEL_53;
  }
LABEL_55:
  int v31 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v31;
  *(_DWORD *)(a1 + 24) = v31;
  if (find_among_b(a1, (uint64_t)&a_8_4, 3)) {
    goto LABEL_6;
  }
  int v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v32;
  *(_DWORD *)(a1 + 24) = v32;
  if (eq_s_b(a1, 6, &s_38_4))
  {
    int v8 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_9_3, 8)) {
      goto LABEL_11;
    }
  }
  int v33 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  *(_DWORD *)(a1 + 24) = v33;
  if (eq_s_b(a1, 6, &s_39_36))
  {
    int v35 = *(_DWORD *)(a1 + 8);
    int v34 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 3, &s_40_5))
    {
      int v41 = *(_DWORD *)(a1 + 12) + v35 - v34;
      *(_DWORD *)(a1 + 8) = v41;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v41;
      int v10 = &s_41_12;
      goto LABEL_17;
    }
  }
  int v36 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v36;
  *(_DWORD *)(a1 + 24) = v36;
  if (eq_s_b(a1, 6, &s_42_2)) {
    goto LABEL_6;
  }
  int v37 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v37;
  *(_DWORD *)(a1 + 24) = v37;
  uint64_t result = eq_s_b(a1, 3, &s_43_11);
  if (result)
  {
    int v38 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8);
    if (find_among_b(a1, (uint64_t)&a_10_1, 8)
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v38, uint64_t result = eq_s_b(a1, 3, &s_44_95), result))
    {
      int v39 = *(_DWORD *)(a1 + 12) - v38;
      *(_DWORD *)(a1 + 8) = v39;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v39;
      int v40 = slice_del(a1);
      if (v40 < 0) {
        return v40 & (v40 >> 31);
      }
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t r_remove_common_word_endings(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 0;
  int v2 = len_utf8(*(char **)a1);
  uint64_t result = 0;
  if (v2 >= 5)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 24) = v4;
    if (!eq_s_b(a1, 12, &s_56_12))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 15, &s_57_25))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 12, &s_58_3))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          if (!eq_s_b(a1, 15, &s_59_2))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            if (!eq_s_b(a1, 9, &s_60_10))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              if (!eq_s_b(a1, 12, &s_61_44))
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                if (!eq_s_b(a1, 15, &s_62_3))
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                  if (!eq_s_b(a1, 12, &s_63_3))
                  {
                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                    if (!eq_s_b(a1, 12, &s_64_6))
                    {
                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                      if (!eq_s_b(a1, 9, &s_65_1))
                      {
                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                        if (!eq_s_b(a1, 15, &s_66_10))
                        {
                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                          if (eq_s_b(a1, 9, &s_67_3)
                            && (int v6 = *(_DWORD *)(a1 + 8),
                                int v5 = *(_DWORD *)(a1 + 12),
                                !find_among_b(a1, (uint64_t)&a_16_0, 8)))
                          {
                            *(_DWORD *)(a1 + 8) = v6 - v5 + *(_DWORD *)(a1 + 12);
                          }
                          else
                          {
                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                            if (!eq_s_b(a1, 6, &s_68_6))
                            {
                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                              if (!eq_s_b(a1, 9, &s_69_3))
                              {
                                int v7 = *(_DWORD *)(a1 + 12);
                                *(_DWORD *)(a1 + 8) = v7;
                                *(_DWORD *)(a1 + 24) = v7;
                                uint64_t result = find_among_b(a1, (uint64_t)&a_17_0, 13);
                                if (!result) {
                                  return result;
                                }
                                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
                                uint64_t result = slice_del(a1);
                                if ((result & 0x80000000) != 0) {
                                  return result;
                                }
LABEL_22:
                                **(unsigned char **)(a1 + 48) = 1;
                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
                                LODWORD(result) = r_fix_endings(a1);
                                if ((int)result >= 0) {
                                  return 1;
                                }
                                else {
                                  return result;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_from_s(a1, 3, &s_70_7);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t r_remove_vetrumai_urupukal(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 0;
  *(unsigned char *)(*(void *)(a1 + 48) + 1) = 0;
  int v2 = len_utf8(*(char **)a1);
  uint64_t result = 0;
  if (v2 < 5) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (eq_s_b(a1, 6, &s_71_3)) {
    goto LABEL_3;
  }
  int v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if ((eq_s_b(a1, 9, &s_72_84)
     || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 3, &s_73_8)))
    && (v7 = *(_DWORD *)(a1 + 8), int v6 = *(_DWORD *)(a1 + 12), !find_among_b(a1, (uint64_t)&a_18_0, 6))
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 3, &s_74_0))
    && (v7 = *(_DWORD *)(a1 + 8), int v6 = *(_DWORD *)(a1 + 12), find_among_b(a1, (uint64_t)&a_19_0, 6))
    && eq_s_b(a1, 3, &s_75_0))
  {
    int v8 = v7 - v6 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
    int v9 = &s_76_0;
    goto LABEL_41;
  }
  int v10 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 24) = v10;
  if (eq_s_b(a1, 9, &s_77_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_78_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_79_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_80_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_81_0))
  {
    int v12 = *(_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 3, &s_82_0)) {
      goto LABEL_39;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 15, &s_83_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 21, &s_84_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_85_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if ((int)len_utf8(*(char **)a1) >= 7)
  {
    if (eq_s_b(a1, 12, &s_86_0)) {
      goto LABEL_40;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_87_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_88_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 12, &s_89_0)) {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 6, &s_90_0))
  {
    int v12 = *(_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_20_0, 8))
    {
LABEL_39:
      *(_DWORD *)(a1 + 8) = v12 - v11 + *(_DWORD *)(a1 + 12);
      goto LABEL_40;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_91_0))
  {
LABEL_40:
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v9 = &s_92_0;
    goto LABEL_41;
  }
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  if (!eq_s_b(a1, 9, &s_93_0))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 12, &s_94_0))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 12, &s_95_0))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 12, &s_96_0))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          if (!eq_s_b(a1, 12, &s_97_0))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            if (!eq_s_b(a1, 12, &s_98_0))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              if (!eq_s_b(a1, 6, &s_99_0)
                || (int v15 = *(_DWORD *)(a1 + 8),
                    int v14 = *(_DWORD *)(a1 + 12),
                    find_among_b(a1, (uint64_t)&a_21_0, 8)))
              {
                int v16 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 8) = v16;
                *(_DWORD *)(a1 + 24) = v16;
                uint64_t result = eq_s_b(a1, 3, &s_100_0);
                if (!result) {
                  return result;
                }
                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
                int v9 = &s_101_0;
LABEL_41:
                uint64_t result = slice_from_s(a1, 3, v9);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 8) = v15 - v14 + *(_DWORD *)(a1 + 12);
            }
          }
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
LABEL_42:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  **(unsigned char **)(a1 + 48) = 1;
  *(unsigned char *)(*(void *)(a1 + 48) + 1) = 1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!eq_s_b(a1, 9, &s_102_0)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), uint64_t result = slice_from_s(a1, 3, &s_103_0), (result & 0x80000000) == 0))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    LODWORD(result) = r_fix_endings(a1);
    if ((int)result >= 0) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t r_remove_plural_suffix(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 0;
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (eq_s_b(a1, 18, &s_46_31))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_13_0, 6))
    {
      int v10 = *(_DWORD *)(a1 + 12) + v4 - v3;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v10;
      int v6 = &s_47_25;
      uint64_t v8 = a1;
      int v9 = 3;
LABEL_9:
      uint64_t result = slice_from_s(v8, v9, v6);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_10;
    }
  }
  int v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (eq_s_b(a1, 15, &s_48_2))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v6 = &s_49_2;
LABEL_7:
    uint64_t v8 = a1;
    int v9 = 6;
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  if (eq_s_b(a1, 15, &s_50_6))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    int v6 = &s_51_9;
    goto LABEL_7;
  }
  int v12 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 24) = v12;
  uint64_t result = eq_s_b(a1, 9, &s_52_3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
LABEL_10:
      uint64_t result = 1;
      **(unsigned char **)(a1 + 48) = 1;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t r_remove_command_suffixes(uint64_t a1)
{
  if ((int)len_utf8(*(char **)a1) < 5) {
    return 0;
  }
  uint64_t result = 0;
  **(unsigned char **)(a1 + 48) = 0;
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if ((int)v4 - 5 <= v3) {
    return result;
  }
  if (*(unsigned __int8 *)(v4 + *(void *)a1 - 1) != 191) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_15_0, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 1;
      **(unsigned char **)(a1 + 48) = 1;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t r_remove_tense_suffixes(uint64_t a1)
{
  uint64_t v1 = 1;
  **(unsigned char **)(a1 + 48) = 1;
  int v2 = *(unsigned char **)(a1 + 48);
  if (*v2)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      unsigned char *v2 = 0;
      if ((int)len_utf8(*(char **)a1) < 5) {
        goto LABEL_80;
      }
      int v6 = *(_DWORD *)(a1 + 8);
      int v5 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      if (v5 - 8 > v6)
      {
        int v7 = *(unsigned __int8 *)(v5 + *(void *)a1 - 1);
        if (v7 == 141 || v7 == 129)
        {
          if (find_among_b(a1, (uint64_t)&a_22_0, 2)) {
            goto LABEL_69;
          }
          int v5 = *(_DWORD *)(a1 + 12);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      if (eq_s_b(a1, 12, &s_104_0)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_105_0)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_106_0)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_107)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_108)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_109)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_110))
      {
        int v8 = *(_DWORD *)(a1 + 12);
        uint64_t v9 = *(int *)(a1 + 8);
        if ((int)v9 - 2 <= *(_DWORD *)(a1 + 16) || (char v10 = *(unsigned char *)(v9 + *(void *)a1 - 1), (v10 & 0xE0) != 0x80))
        {
          int v12 = *(_DWORD *)(a1 + 12);
LABEL_67:
          int v18 = v9 - v8 + v12;
LABEL_68:
          *(_DWORD *)(a1 + 8) = v18;
LABEL_69:
          int v17 = *(_DWORD *)(a1 + 8);
          goto LABEL_70;
        }
        unsigned int v11 = 0x1DC7E0u >> v10;
        int v12 = *(_DWORD *)(a1 + 12);
        if ((v11 & 1) == 0) {
          goto LABEL_67;
        }
        int v22 = *(_DWORD *)(a1 + 8);
        int v26 = *(_DWORD *)(a1 + 12);
        if (!find_among_b(a1, (uint64_t)&a_23_0, 12))
        {
          int v12 = *(_DWORD *)(a1 + 12);
          int v8 = v26;
          LODWORD(v9) = v22;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_111)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_112)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_113)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_114)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_115)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_116)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_117)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_118)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_119)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_120)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_121)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_122)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_123))
      {
        int v27 = *(_DWORD *)(a1 + 12);
        int v23 = *(_DWORD *)(a1 + 8);
        if (!find_among_b(a1, (uint64_t)&a_24_0, 8))
        {
          int v18 = v23 - v27 + *(_DWORD *)(a1 + 12);
          goto LABEL_68;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 15, &s_124)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_125)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_126)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_127)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_128)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_129)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_130)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_131)) {
        goto LABEL_69;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_132)) {
        goto LABEL_69;
      }
      int v13 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v13;
      *(_DWORD *)(a1 + 24) = v13;
      if (eq_s_b(a1, 9, &s_133))
      {
        int v28 = *(_DWORD *)(a1 + 12);
        int v24 = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 3, &s_134))
        {
          *(_DWORD *)(a1 + 8) = v24 - v28 + *(_DWORD *)(a1 + 12);
LABEL_85:
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          fixeCGFloat d = slice_from_s(a1, 3, &s_152);
          if ((fixed & 0x80000000) != 0) {
            return fixed;
          }
          goto LABEL_71;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_135)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_136)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_137)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_138)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_139)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_140)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_141)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_142)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_143)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_144)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_145)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_146)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_147)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_148)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_149)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_150)) {
        goto LABEL_85;
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_151)) {
        goto LABEL_85;
      }
      int v14 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v14;
      *(_DWORD *)(a1 + 24) = v14;
      if (!eq_s_b(a1, 6, &s_153))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 6, &s_154)) {
          goto LABEL_72;
        }
      }
      int v29 = *(_DWORD *)(a1 + 12);
      int v25 = *(_DWORD *)(a1 + 8);
      int v15 = eq_s_b(a1, 3, &s_155);
      int v16 = *(_DWORD *)(a1 + 12);
      if (!v15) {
        goto LABEL_73;
      }
      int v17 = v16 + v25 - v29;
      *(_DWORD *)(a1 + 8) = v17;
LABEL_70:
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v17;
      fixeCGFloat d = slice_del(a1);
      if ((fixed & 0x80000000) != 0) {
        return fixed;
      }
LABEL_71:
      **(unsigned char **)(a1 + 48) = 1;
LABEL_72:
      int v16 = *(_DWORD *)(a1 + 12);
LABEL_73:
      *(_DWORD *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + 24) = v16;
      if (v16 - 8 > *(_DWORD *)(a1 + 16))
      {
        int v20 = *(unsigned __int8 *)(*(void *)a1 + v16 - 1);
        if (v20 == 177 || v20 == 141)
        {
          if (find_among_b(a1, (uint64_t)&a_25_0, 6))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            fixeCGFloat d = slice_del(a1);
            if ((fixed & 0x80000000) != 0) {
              return fixed;
            }
            **(unsigned char **)(a1 + 48) = 1;
          }
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      fixeCGFloat d = r_fix_endings(a1);
      if ((fixed & 0x80000000) != 0) {
        return fixed;
      }
LABEL_80:
      *(_DWORD *)(a1 + 8) = v4;
      int v2 = *(unsigned char **)(a1 + 48);
      if (!*v2) {
        return 1;
      }
    }
  }
  return v1;
}

void *tamil_UTF_8_create_env()
{
  return SN_create_env(0, 0, 2);
}

void tamil_UTF_8_close_env(uint64_t a1)
{
}

uint64_t r_fix_va_start(_DWORD *a1)
{
  int v2 = a1[2];
  eq_s((uint64_t)a1, 6, &s_0_52);
  a1[2] = v2;
  a1[5] = v2;
  if (eq_s((uint64_t)a1, 6, &s_1_47))
  {
    a1[6] = a1[2];
    int v3 = &s_2_47;
  }
  else
  {
    a1[2] = v2;
    eq_s((uint64_t)a1, 6, &s_3_93);
    a1[2] = v2;
    a1[5] = v2;
    if (eq_s((uint64_t)a1, 6, &s_4_94))
    {
      a1[6] = a1[2];
      int v3 = &s_5_48;
    }
    else
    {
      a1[2] = v2;
      eq_s((uint64_t)a1, 6, &s_6_123);
      a1[2] = v2;
      a1[5] = v2;
      if (eq_s((uint64_t)a1, 6, &s_7_24))
      {
        a1[6] = a1[2];
        int v3 = &s_8_100;
      }
      else
      {
        a1[2] = v2;
        eq_s((uint64_t)a1, 6, &s_9_13);
        a1[2] = v2;
        a1[5] = v2;
        uint64_t result = eq_s((uint64_t)a1, 6, &s_10_32);
        if (!result) {
          return result;
        }
        a1[6] = a1[2];
        int v3 = &s_11_43;
      }
    }
  }
  uint64_t result = slice_from_s((uint64_t)a1, 3, v3);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_fix_endings(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  do
  {
    fixeCGFloat d = r_fix_ending(a1);
    if (fixed >= 0) {
      int v5 = v1;
    }
    else {
      int v5 = fixed;
    }
    int v6 = fixed >> 31;
    if (fixed)
    {
      unsigned int v1 = v5;
      int v7 = fixed >> 31;
    }
    else
    {
      int v7 = 4;
    }
    if (v7)
    {
      if (v7 == 4)
      {
        *(_DWORD *)(a1 + 8) = v3;
        return 1;
      }
    }
    else
    {
      int v6 = 2;
    }
  }
  while (v6 == 2);
  if (v6) {
    return v1;
  }
  else {
    return 1;
  }
}

uint64_t indonesian_UTF_8_stem(uint64_t a1)
{
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 0;
  int v2 = *(_DWORD *)(a1 + 8);
  for (int i = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 1);
        (i & 0x80000000) == 0;
        int i = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 1))
  {
    *(_DWORD *)(a1 + 8) += i;
    ++**(_DWORD **)(a1 + 40);
  }
  *(_DWORD *)(a1 + 8) = v2;
  int v4 = *(int **)(a1 + 40);
  if (*v4 < 3) {
    return 0;
  }
  v4[1] = 0;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if ((int)v6 - 2 > v5 && ((int v7 = *(unsigned __int8 *)(v6 + *(void *)a1 - 1), v7 == 110) || v7 == 104))
  {
    if (find_among_b(a1, (uint64_t)&a_0_8, 3))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      uint64_t v8 = slice_del(a1);
      if ((v8 & 0x80000000) != 0) {
        return v8;
      }
      int v4 = *(int **)(a1 + 40);
      --*v4;
      unsigned int v9 = 1;
    }
    else
    {
      unsigned int v9 = 0;
      int v4 = *(int **)(a1 + 40);
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  if (*v4 < 3) {
    return 0;
  }
  *(_DWORD *)(a1 + 24) = v10;
  uint64_t v11 = v10 - 1;
  if ((int)v11 > *(_DWORD *)(a1 + 16))
  {
    int v12 = *(unsigned __int8 *)(*(void *)a1 + v11);
    if (v12 == 117 || v12 == 97)
    {
      if (find_among_b(a1, (uint64_t)&a_1_8, 3))
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        uint64_t v8 = slice_del(a1);
        if ((v8 & 0x80000000) != 0) {
          return v8;
        }
        int v4 = *(int **)(a1 + 40);
        --*v4;
      }
      else
      {
        int v4 = *(int **)(a1 + 40);
      }
    }
  }
  int v13 = *(_DWORD *)(a1 + 12);
  int v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v14;
  if (*v4 < 3) {
    return 0;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v14;
  uint64_t v15 = v14 + 1;
  if ((int)v15 < v13)
  {
    int v16 = *(unsigned __int8 *)(*(void *)a1 + v15);
    if (v16 == 105 || v16 == 101)
    {
      int among = find_among(a1, (uint64_t)&a_3_19, 12);
      if (among)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(among)
        {
          case 1:
            uint64_t v8 = slice_del(a1);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
            int v18 = *(_DWORD **)(a1 + 40);
            int v19 = 1;
            goto LABEL_46;
          case 2:
            uint64_t v8 = slice_del(a1);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
            int v18 = *(_DWORD **)(a1 + 40);
            int v19 = 3;
LABEL_46:
            v18[1] = v19;
            goto LABEL_51;
          case 3:
            *(_DWORD *)(*(void *)(a1 + 40) + 4) = 1;
            int v26 = &s_1_48;
            goto LABEL_49;
          case 4:
            *(_DWORD *)(*(void *)(a1 + 40) + 4) = 3;
            int v26 = &s_2_48;
LABEL_49:
            uint64_t v8 = slice_from_s(a1, 1, v26);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
            int v18 = *(_DWORD **)(a1 + 40);
LABEL_51:
            --*v18;
            goto LABEL_56;
          case 5:
            int v27 = *(_DWORD **)(a1 + 40);
            --*v27;
            v27[1] = 1;
            int v28 = *(_DWORD *)(a1 + 8);
            int v29 = in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
            *(_DWORD *)(a1 + 8) = v28;
            if (v29) {
              goto LABEL_55;
            }
            int v30 = &s_3_94;
            goto LABEL_84;
          case 6:
            int v31 = *(_DWORD **)(a1 + 40);
            --*v31;
            v31[1] = 3;
            int v32 = *(_DWORD *)(a1 + 8);
            int v33 = in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
            *(_DWORD *)(a1 + 8) = v32;
            if (v33)
            {
LABEL_55:
              uint64_t v8 = slice_del(a1);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
            }
            else
            {
              int v30 = &s_4_95;
LABEL_84:
              uint64_t v8 = slice_from_s(a1, 1, v30);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
            }
LABEL_56:
            if (**(int **)(a1 + 40) < 3) {
              goto LABEL_81;
            }
            int v35 = *(_DWORD *)(a1 + 8);
            int v34 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 16) = v35;
            *(_DWORD *)(a1 + 8) = v34;
            int v36 = r_remove_suffix(a1);
            if (v36 >= 0) {
              uint64_t v20 = v9;
            }
            else {
              uint64_t v20 = v36;
            }
            if (v36 >= 1)
            {
              *(_DWORD *)(a1 + 8) = v35;
LABEL_62:
              if (**(int **)(a1 + 40) < 3) {
                goto LABEL_81;
              }
              int v37 = r_remove_second_order_prefix(a1);
              unsigned int v38 = v37 >= 0 ? v20 : v37;
              unsigned int v24 = v37 >> 31;
              uint64_t v20 = v37 ? v38 : v20;
              unsigned int v39 = v37 ? v37 >> 31 : 6;
              if (!v39 || v39 == 6) {
                goto LABEL_81;
              }
              goto LABEL_80;
            }
            unsigned int v24 = v36 >> 31;
            if (v36) {
              int v40 = v36 >> 31;
            }
            else {
              int v40 = 6;
            }
            if (v40 == 6) {
              goto LABEL_81;
            }
            if (!v40) {
              goto LABEL_62;
            }
LABEL_80:
            if (v24) {
              goto LABEL_42;
            }
            break;
          default:
            goto LABEL_56;
        }
        goto LABEL_81;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v14;
  uint64_t v8 = r_remove_second_order_prefix(a1);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  *(_DWORD *)(a1 + 8) = v14;
  if (**(int **)(a1 + 40) < 3
    || ((*(_DWORD *)(a1 + 16) = v14, *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), int v22 = r_remove_suffix(a1), v22 >= 0)
      ? (unsigned int v23 = v9)
      : (unsigned int v23 = v22),
        (unsigned int v24 = v22 >> 31, v22) ? (v20 = v23) : (v20 = v9),
        v22 ? (int v25 = v22 >> 31) : (int v25 = 8),
        (v25 | 8) == 8))
  {
LABEL_81:
    *(_DWORD *)(a1 + 8) = v14;
    return 1;
  }
LABEL_42:
  if (!v24) {
    return 1;
  }
  return v20;
}

uint64_t r_remove_suffix(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 110 && v3 != 105) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_2_23, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      --**(_DWORD **)(a1 + 40);
      return 1;
    }
  }
  return result;
}

uint64_t r_remove_second_order_prefix(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  uint64_t v2 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
  uint64_t v3 = v2 + 1;
  if ((int)v3 >= v1 || *(unsigned char *)(*(void *)a1 + v3) != 101) {
    return 0;
  }
  uint64_t result = find_among(a1, (uint64_t)&a_4_17, 6);
  if (result)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v6 = *(_DWORD **)(a1 + 40);
          int v7 = 2;
          goto LABEL_13;
        }
        break;
      case 2:
        uint64_t result = slice_from_s(a1, 4, &s_5_49);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v6 = *(_DWORD **)(a1 + 40);
          goto LABEL_16;
        }
        break;
      case 3:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v6 = *(_DWORD **)(a1 + 40);
          int v7 = 4;
LABEL_13:
          v6[1] = v7;
          goto LABEL_16;
        }
        break;
      case 4:
        uint64_t result = slice_from_s(a1, 4, &s_6_124);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v6 = *(_DWORD **)(a1 + 40);
          v6[1] = 4;
LABEL_16:
          --*v6;
          goto LABEL_17;
        }
        break;
      default:
LABEL_17:
        uint64_t result = 1;
        break;
    }
  }
  return result;
}

void *indonesian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void indonesian_UTF_8_close_env(uint64_t a1)
{
}

BOOL r_VOWEL(uint64_t a1)
{
  return in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0) == 0;
}

uint64_t r_SUFFIX_I_OK(uint64_t a1)
{
  if (*(int *)(*(void *)(a1 + 40) + 4) > 2) {
    return 0;
  }
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 1;
  }
  int v2 = v1 - 1;
  if (*(unsigned char *)(*(void *)a1 + v1 - 1) != 115) {
    return 1;
  }
  uint64_t v3 = 0;
  *(_DWORD *)(a1 + 8) = v2;
  return v3;
}

BOOL r_SUFFIX_AN_OK(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 40) + 4) != 1;
}

BOOL r_SUFFIX_KAN_OK(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 + 40) + 4) & 0xFFFFFFFE) != 2;
}

BOOL r_KER(uint64_t a1)
{
  int v2 = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
  BOOL result = 0;
  if (!v2) {
    return eq_s(a1, 2, &s_0_53) != 0;
  }
  return result;
}

uint64_t italian_UTF_8_stem(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
  int among = find_among(a1, (uint64_t)&a_0_9, 7);
  if (among)
  {
    while (2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v4;
      switch(among)
      {
        case 1:
          uint64_t v5 = a1;
          uint64_t v6 = &s_0_54;
          goto LABEL_9;
        case 2:
          uint64_t v5 = a1;
          uint64_t v6 = &s_1_49;
          goto LABEL_9;
        case 3:
          uint64_t v5 = a1;
          uint64_t v6 = &s_2_49;
          goto LABEL_9;
        case 4:
          uint64_t v5 = a1;
          uint64_t v6 = &s_3_95;
          goto LABEL_9;
        case 5:
          uint64_t v5 = a1;
          uint64_t v6 = &s_4_96;
          goto LABEL_9;
        case 6:
          uint64_t v5 = a1;
          uint64_t v6 = &s_5_50;
LABEL_9:
          uint64_t result = slice_from_s(v5, 2, v6);
          if ((result & 0x80000000) == 0) {
            goto LABEL_10;
          }
          return result;
        case 7:
          int v8 = skip_utf8(*(void *)a1, v4, 0, *(unsigned int *)(a1 + 12), 1);
          if (v8 < 0) {
            break;
          }
          *(_DWORD *)(a1 + 8) = v8;
          goto LABEL_10;
        default:
LABEL_10:
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          int among = find_among(a1, (uint64_t)&a_0_9, 7);
          if (!among) {
            break;
          }
          continue;
      }
      break;
    }
  }
  uint64_t v9 = v2;
  do
  {
    while (1)
    {
      *(_DWORD *)(a1 + 8) = v9;
      int v10 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0);
      uint64_t v11 = *(unsigned int *)(a1 + 12);
      if (v10)
      {
        uint64_t v13 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v12 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
      if (v12 != v11 && *(unsigned char *)(*(void *)a1 + (int)v12) == 117)
      {
        *(_DWORD *)(a1 + 8) = v12 + 1;
        *(_DWORD *)(a1 + 24) = v12 + 1;
        if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
        {
          uint64_t v14 = a1;
          uint64_t v15 = &s_6_125;
          goto LABEL_24;
        }
        uint64_t v11 = *(unsigned int *)(a1 + 12);
      }
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t v13 = v12;
      if (v12 == v11) {
        break;
      }
      uint64_t v13 = v11;
      if (*(unsigned char *)(*(void *)a1 + (int)v12) != 105) {
        break;
      }
      *(_DWORD *)(a1 + 8) = v12 + 1;
      *(_DWORD *)(a1 + 24) = v12 + 1;
      if (in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      {
        uint64_t v13 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v14 = a1;
      uint64_t v15 = &s_7_25;
LABEL_24:
      uint64_t result = slice_from_s(v14, 1, v15);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    *(_DWORD *)(a1 + 8) = v9;
    uint64_t v9 = skip_utf8(*(void *)a1, v9, 0, v13, 1);
  }
  while ((v9 & 0x80000000) == 0);
  *(_DWORD *)(a1 + 8) = v2;
  int v16 = *(_DWORD **)(a1 + 40);
  *int v16 = *(_DWORD *)(a1 + 12);
  v16[1] = *(_DWORD *)(a1 + 12);
  _OWORD v16[2] = *(_DWORD *)(a1 + 12);
  int v17 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
  {
    if ((int v18 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      && (int v21 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1), (v21 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v18, !in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      && (int v21 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1), (v21 & 0x80000000) == 0))
    {
LABEL_43:
      int v20 = *(_DWORD *)(a1 + 8) + v21;
      goto LABEL_44;
    }
  }
  *(_DWORD *)(a1 + 8) = v17;
  if (!out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
  {
    int v19 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
    {
      int v21 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_43;
      }
    }
    *(_DWORD *)(a1 + 8) = v19;
    if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
    {
      int v20 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v20 & 0x80000000) == 0) {
LABEL_44:
      }
        **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
    }
  }
  *(_DWORD *)(a1 + 8) = v17;
  int v22 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
  if ((v22 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v22;
    int v23 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
    if ((v23 & 0x80000000) == 0)
    {
      int v24 = *(_DWORD *)(a1 + 8) + v23;
      *(_DWORD *)(a1 + 8) = v24;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v24;
      int v25 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
      if ((v25 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v25;
        int v26 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
        if ((v26 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v26;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v17;
  uint64_t v27 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 24) = v27;
  uint64_t v28 = v27 - 1;
  if ((int)v28 <= v17) {
    goto LABEL_64;
  }
  char v29 = *(unsigned char *)(*(void *)a1 + v28);
  if ((v29 & 0xE0) != 0x60) {
    goto LABEL_64;
  }
  if (((0x8222u >> v29) & 1) == 0) {
    goto LABEL_64;
  }
  if (!find_among_b(a1, (uint64_t)&a_2_8, 37)) {
    goto LABEL_64;
  }
  uint64_t v30 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v30;
  uint64_t v31 = v30 - 1;
  if ((int)v31 <= *(_DWORD *)(a1 + 16)) {
    goto LABEL_64;
  }
  int v32 = *(unsigned __int8 *)(*(void *)a1 + v31);
  if (v32 != 114 && v32 != 111) {
    goto LABEL_64;
  }
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_3_8, 5);
  if (!among_b || **(_DWORD **)(a1 + 40) > *(_DWORD *)(a1 + 8)) {
    goto LABEL_64;
  }
  if (among_b == 2)
  {
    uint64_t result = slice_from_s(a1, 1, &s_10_33);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_64;
  }
  if (among_b != 1 || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_64:
    int v34 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v34;
    *(_DWORD *)(a1 + 24) = v34;
    int v35 = find_among_b(a1, (uint64_t)&a_6_4, 51);
    if (v35)
    {
      int v36 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v36;
      switch(v35)
      {
        case 1:
          int v37 = *(int **)(a1 + 40);
          int v38 = v37[2];
          goto LABEL_121;
        case 2:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          int v56 = &s_11_44;
          goto LABEL_109;
        case 3:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t v58 = &s_12_12;
          uint64_t v59 = a1;
          int v60 = 3;
          goto LABEL_118;
        case 4:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t v58 = &s_13_38;
          uint64_t v59 = a1;
          int v60 = 1;
          goto LABEL_118;
        case 5:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t v58 = &s_14_15;
          uint64_t v59 = a1;
          int v60 = 4;
LABEL_118:
          uint64_t result = slice_from_s(v59, v60, v58);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_72;
        case 6:
          int v37 = *(int **)(a1 + 40);
          int v38 = *v37;
LABEL_121:
          if (v38 <= v36) {
            goto LABEL_122;
          }
          goto LABEL_68;
        case 7:
          int v37 = *(int **)(a1 + 40);
          if (v37[1] > v36) {
            goto LABEL_68;
          }
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v61 = *(int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v61;
          uint64_t v62 = v61 - 1;
          if ((int)v62 <= *(_DWORD *)(a1 + 16)) {
            goto LABEL_72;
          }
          char v63 = *(unsigned char *)(*(void *)a1 + v62);
          if ((v63 & 0xE0) != 0x60) {
            goto LABEL_72;
          }
          if (((0x481008u >> v63) & 1) == 0) {
            goto LABEL_72;
          }
          int v64 = find_among_b(a1, (uint64_t)&a_4_7, 4);
          if (!v64) {
            goto LABEL_72;
          }
          int v65 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v65;
          if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v65) {
            goto LABEL_72;
          }
          int v66 = v64;
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (v66 != 1) {
            goto LABEL_72;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          int v56 = &s_15_8;
LABEL_109:
          if (!eq_s_b(a1, 2, v56)) {
            goto LABEL_72;
          }
LABEL_110:
          int v57 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v57;
          if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v57) {
            goto LABEL_72;
          }
LABEL_122:
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_72;
        case 8:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v67 = *(int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v67;
          uint64_t v68 = v67 - 1;
          if ((int)v68 <= *(_DWORD *)(a1 + 16)) {
            goto LABEL_72;
          }
          char v69 = *(unsigned char *)(*(void *)a1 + v68);
          if ((v69 & 0xE0) != 0x60
            || ((0x401008u >> v69) & 1) == 0
            || !find_among_b(a1, (uint64_t)&a_5_7, 3))
          {
            goto LABEL_72;
          }
          goto LABEL_110;
        case 9:
          int v37 = *(int **)(a1 + 40);
          if (v37[2] > v36) {
            goto LABEL_68;
          }
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          if (!eq_s_b(a1, 2, &s_16_8)) {
            goto LABEL_72;
          }
          int v70 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v70;
          if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v70) {
            goto LABEL_72;
          }
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          int v56 = &s_17_13;
          goto LABEL_109;
        default:
          goto LABEL_72;
      }
    }
    int v37 = *(int **)(a1 + 40);
LABEL_68:
    int v39 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    int v40 = *v37;
    if (v39 >= v40)
    {
      int v41 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v40;
      *(_DWORD *)(a1 + 24) = v39;
      if (find_among_b(a1, (uint64_t)&a_7_5, 87))
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      *(_DWORD *)(a1 + 16) = v41;
    }
LABEL_72:
    int v42 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v42;
    *(_DWORD *)(a1 + 24) = v42;
    if (in_grouping_b_U(a1, (uint64_t)&g_AEIO, 97, 242, 0)) {
      goto LABEL_80;
    }
    int v43 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v43;
    if (**(_DWORD **)(a1 + 40) > v43) {
      goto LABEL_80;
    }
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v44 = *(int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = v44;
    if ((int)v44 <= *(_DWORD *)(a1 + 16) {
      || (int v45 = v44 - 1, *(unsigned char *)(*(void *)a1 + v44 - 1) != 105)
    }
      || (*(_DWORD *)(a1 + 8) = v45, *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v45, **(_DWORD **)(a1 + 40) >= (int)v44))
    {
LABEL_80:
      uint64_t v47 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v47;
      uint64_t v46 = v47;
    }
    else
    {
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      LODWORD(v47) = *(_DWORD *)(a1 + 8);
      uint64_t v46 = *(unsigned int *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 24) = v47;
    if ((int)v47 > *(_DWORD *)(a1 + 16))
    {
      uint64_t v48 = (int)v47 - 1;
      if (*(unsigned char *)(*(void *)a1 + v48) == 104)
      {
        *(_DWORD *)(a1 + 8) = v48;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v48;
        if (!in_grouping_b_U(a1, (uint64_t)&g_CG, 99, 103, 0)
          && **(_DWORD **)(a1 + 40) <= *(_DWORD *)(a1 + 8))
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        uint64_t v46 = *(unsigned int *)(a1 + 12);
      }
    }
    uint64_t v49 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v49;
    uint64_t v50 = v49;
    while (1)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v50;
      if ((int)v50 < (int)v46 && ((int v51 = *(unsigned __int8 *)(*(void *)a1 + (int)v50), v51 == 73) || v51 == 85))
      {
        int v52 = find_among(a1, (uint64_t)&a_1_9, 3);
        if (!v52) {
          goto LABEL_104;
        }
        uint64_t v50 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v50;
        if (v52 == 1)
        {
          uint64_t v54 = a1;
          int v55 = &s_8_101;
          goto LABEL_102;
        }
        if (v52 == 2)
        {
          uint64_t v54 = a1;
          int v55 = &s_9_14;
LABEL_102:
          uint64_t result = slice_from_s(v54, 1, v55);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_99;
        }
        if (v52 != 3) {
          goto LABEL_99;
        }
        uint64_t v46 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v50;
      }
      int v53 = skip_utf8(*(void *)a1, v50, 0, v46, 1);
      if (v53 < 0)
      {
LABEL_104:
        *(_DWORD *)(a1 + 8) = v49;
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v53;
LABEL_99:
      uint64_t v50 = *(unsigned int *)(a1 + 8);
      uint64_t v46 = *(unsigned int *)(a1 + 12);
    }
  }
  return result;
}

void *italian_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void italian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t porter_UTF_8_stem(uint64_t a1)
{
  **(unsigned char **)(a1 + 48) = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  if (v3 != v2 && *(unsigned char *)(*(void *)a1 + (int)v3) == 121)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    *(_DWORD *)(a1 + 24) = v3 + 1;
    uint64_t result = slice_from_s(a1, 1, &s_21_34);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    **(unsigned char **)(a1 + 48) = 1;
  }
  *(_DWORD *)(a1 + 8) = v3;
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      if (in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 0))
      {
        uint64_t v6 = *(void *)a1;
        uint64_t v7 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
      uint64_t v6 = *(void *)a1;
      if (v8 == v7)
      {
        uint64_t v7 = v8;
        break;
      }
      if (*(unsigned char *)(v6 + (int)v8) != 121) {
        break;
      }
      *(_DWORD *)(a1 + 24) = v8 + 1;
      *(_DWORD *)(a1 + 8) = v5;
      uint64_t result = slice_from_s(a1, 1, &s_22_16);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      **(unsigned char **)(a1 + 48) = 1;
      uint64_t v5 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v5;
    uint64_t v9 = skip_utf8(v6, v5, 0, v7, 1);
    if ((v9 & 0x80000000) != 0) {
      break;
    }
    uint64_t v5 = v9;
    *(_DWORD *)(a1 + 8) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  int v10 = *(_DWORD **)(a1 + 40);
  *int v10 = *(_DWORD *)(a1 + 12);
  v10[1] = *(_DWORD *)(a1 + 12);
  int v11 = *(_DWORD *)(a1 + 8);
  int v12 = out_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
  if ((v12 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v12;
    int v13 = in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
    if ((v13 & 0x80000000) == 0)
    {
      int v14 = *(_DWORD *)(a1 + 8) + v13;
      *(_DWORD *)(a1 + 8) = v14;
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v14;
      int v15 = out_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
      if ((v15 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v15;
        int v16 = in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
        if ((v16 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v16;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v11;
  uint64_t v17 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 24) = v17;
  if ((int)v17 <= v11) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(v17 + *(void *)a1 - 1) != 115) {
    goto LABEL_31;
  }
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_10, 4);
  if (!among_b) {
    goto LABEL_31;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  switch(among_b)
  {
    case 3:
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0) {
        goto LABEL_31;
      }
      break;
    case 2:
      int v19 = &s_1_50;
      uint64_t v20 = a1;
      int v21 = 1;
LABEL_30:
      uint64_t result = slice_from_s(v20, v21, v19);
      if ((result & 0x80000000) == 0)
      {
LABEL_31:
        int v22 = *(_DWORD *)(a1 + 16);
        uint64_t v23 = *(int *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v23;
        *(_DWORD *)(a1 + 24) = v23;
        uint64_t v24 = v23 - 1;
        if ((int)v24 <= v22) {
          goto LABEL_57;
        }
        int v25 = *(unsigned __int8 *)(*(void *)a1 + v24);
        if (v25 != 103 && v25 != 100) {
          goto LABEL_57;
        }
        int v26 = find_among_b(a1, (uint64_t)&a_2_9, 3);
        if (!v26) {
          goto LABEL_57;
        }
        int v27 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v27;
        if (v26 == 2)
        {
          int v28 = *(_DWORD *)(a1 + 12);
          if ((out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 1) & 0x80000000) != 0) {
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 8) = v27 - v28 + *(_DWORD *)(a1 + 12);
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v29 = *(_DWORD *)(a1 + 12);
          uint64_t v30 = *(int *)(a1 + 8);
          if ((int)v30 - 1 <= *(_DWORD *)(a1 + 16)) {
            goto LABEL_98;
          }
          char v31 = *(unsigned char *)(*(void *)a1 + v30 - 1);
          if ((v31 & 0xE0) != 0x60 || ((0x41570D4u >> v31) & 1) == 0) {
            goto LABEL_98;
          }
          int v35 = find_among_b(a1, (uint64_t)&a_1_10, 13);
          if (!v35) {
            goto LABEL_57;
          }
          int v36 = v30 - v29;
          int v29 = *(_DWORD *)(a1 + 12);
          LODWORD(v3nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v29 + v36;
          *(_DWORD *)(a1 + 8) = v29 + v36;
          if (v35 != 3)
          {
            if (v35 == 2)
            {
              *(_DWORD *)(a1 + 24) = v30;
              int v37 = skip_utf8(*(void *)a1, (v29 + v36), *(unsigned int *)(a1 + 16), 0, -1);
              if (v37 < 0) {
                goto LABEL_57;
              }
              *(_DWORD *)(a1 + 8) = v37;
              *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v37;
              uint64_t result = slice_del(a1);
              if ((result & 0x80000000) == 0) {
                goto LABEL_57;
              }
            }
            else
            {
              if (v35 != 1) {
                goto LABEL_57;
              }
              uint64_t result = insert_s(a1, v29 + v36, v29 + v36, 1, &s_3_96);
              *(_DWORD *)(a1 + 8) = v30;
              if ((result & 0x80000000) == 0) {
                goto LABEL_57;
              }
            }
          }
          else
          {
LABEL_98:
            if (v30 != **(_DWORD **)(a1 + 40)) {
              goto LABEL_57;
            }
            if (!r_shortv(a1)) {
              goto LABEL_57;
            }
            int v32 = v30 - v29;
            int v33 = *(_DWORD *)(a1 + 12);
            int v34 = v33 + v30 - v29;
            *(_DWORD *)(a1 + 8) = v34;
            uint64_t result = insert_s(a1, v33 + v32, v33 + v32, 1, &s_4_97);
            *(_DWORD *)(a1 + 8) = v34;
            if ((result & 0x80000000) == 0) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          if (v26 == 1 && **(_DWORD **)(a1 + 40) <= v27)
          {
            uint64_t result = slice_from_s(a1, 2, &s_2_50);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
LABEL_57:
          int v38 = *(_DWORD *)(a1 + 16);
          uint64_t v39 = *(int *)(a1 + 12);
          *(_DWORD *)(a1 + 8) = v39;
          *(_DWORD *)(a1 + 24) = v39;
          if ((int)v39 <= v38 {
            || (uint64_t v40 = v39 - 1, (*(unsigned __int8 *)(*(void *)a1 + v40) | 0x20) != 0x79)
          }
            || (*(_DWORD *)(a1 + 8) = v40,
                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v40,
                int v41 = out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 1),
                v41 < 0)
            || (*(_DWORD *)(a1 + 8) -= v41, uint64_t result = slice_from_s(a1, 1, &s_5_51), (result & 0x80000000) == 0))
          {
            int v42 = *(_DWORD *)(a1 + 16);
            uint64_t v43 = *(int *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v43;
            *(_DWORD *)(a1 + 24) = v43;
            if ((int)v43 - 2 > v42)
            {
              char v44 = *(unsigned char *)(v43 + *(void *)a1 - 1);
              if (v44 & 0xE0) == 0x60 && ((0xC7200u >> v44))
              {
                int v45 = find_among_b(a1, (uint64_t)&a_3_9, 20);
                if (v45)
                {
                  int v46 = *(_DWORD *)(a1 + 8);
                  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v46;
                  if (**(_DWORD **)(a1 + 40) <= v46)
                  {
                    switch(v45)
                    {
                      case 1:
                        uint64_t v47 = &s_6_126;
                        goto LABEL_71;
                      case 2:
                        uint64_t v47 = &s_7_87;
                        goto LABEL_71;
                      case 3:
                        uint64_t v47 = &s_8_102;
                        goto LABEL_71;
                      case 4:
                        uint64_t v47 = &s_9_15;
LABEL_71:
                        uint64_t v48 = a1;
                        int v49 = 4;
                        goto LABEL_82;
                      case 5:
                        uint64_t v47 = &s_10_34;
                        goto LABEL_81;
                      case 6:
                        uint64_t v47 = &s_11_45;
                        uint64_t v48 = a1;
                        int v49 = 1;
                        goto LABEL_82;
                      case 7:
                        uint64_t v47 = &s_12_13;
                        goto LABEL_81;
                      case 8:
                        uint64_t v47 = &s_13_39;
                        goto LABEL_81;
                      case 9:
                        uint64_t v47 = &s_14_16;
                        uint64_t v48 = a1;
                        int v49 = 2;
                        goto LABEL_82;
                      case 10:
                        uint64_t v47 = &s_15_9;
                        goto LABEL_81;
                      case 11:
                        uint64_t v47 = &s_16_9;
                        goto LABEL_81;
                      case 12:
                        uint64_t v47 = &s_17_14;
                        goto LABEL_81;
                      case 13:
                        uint64_t v47 = &s_18_8;
LABEL_81:
                        uint64_t v48 = a1;
                        int v49 = 3;
LABEL_82:
                        uint64_t result = slice_from_s(v48, v49, v47);
                        if ((result & 0x80000000) == 0) {
                          break;
                        }
                        return result;
                      default:
                        break;
                    }
                  }
                }
              }
            }
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            uint64_t result = r_Step_3(a1);
            if ((result & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              uint64_t result = r_Step_4(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                uint64_t result = r_Step_5a(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                  uint64_t result = r_Step_5b(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    int v50 = *(_DWORD *)(a1 + 16);
                    *(_DWORD *)(a1 + 8) = v50;
                    if (**(unsigned char **)(a1 + 48))
                    {
                      do
                      {
                        uint64_t v51 = *(unsigned int *)(a1 + 8);
                        while (1)
                        {
                          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v51;
                          uint64_t v52 = *(unsigned int *)(a1 + 12);
                          uint64_t v53 = *(void *)a1;
                          if (v51 != v52 && *(unsigned char *)(v53 + (int)v51) == 89) {
                            break;
                          }
                          uint64_t v54 = skip_utf8(v53, v51, 0, v52, 1);
                          if ((v54 & 0x80000000) != 0) {
                            goto LABEL_95;
                          }
                          uint64_t v51 = v54;
                          *(_DWORD *)(a1 + 8) = v54;
                        }
                        *(_DWORD *)(a1 + 24) = v51 + 1;
                        *(_DWORD *)(a1 + 8) = v51;
                        uint64_t result = slice_from_s(a1, 1, &s_23_12);
                      }
                      while ((result & 0x80000000) == 0);
                    }
                    else
                    {
LABEL_95:
                      *(_DWORD *)(a1 + 8) = v50;
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    case 1:
      int v19 = &s_0_55;
      uint64_t v20 = a1;
      int v21 = 2;
      goto LABEL_30;
    default:
      goto LABEL_31;
  }
  return result;
}

uint64_t r_Step_3(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(v1 + *(void *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x81220u >> v3) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_4_8, 7);
  if (!result) {
    return result;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  if (**(_DWORD **)(a1 + 40) > v5) {
    return 0;
  }
  if (result == 3)
  {
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  if (result != 2)
  {
    if (result == 1)
    {
      uint64_t v6 = &s_19_6;
      goto LABEL_15;
    }
    return 1;
  }
  uint64_t v6 = &s_20_8;
LABEL_15:
  uint64_t result = slice_from_s(a1, 2, v6);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_Step_4(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v4 = *(unsigned char *)(*(void *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0x3C7228u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_5_8, 19);
  if (!result) {
    return result;
  }
  uint64_t v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v6) {
    return 0;
  }
  if (result == 2)
  {
    if ((int)v6 <= *(_DWORD *)(a1 + 16)) {
      return 0;
    }
    uint64_t v7 = v6 - 1;
    if (*(unsigned __int8 *)(*(void *)a1 + v7) - 115 > 1) {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = v7;
  }
  else if (result != 1)
  {
    return 1;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_Step_5a(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = v1 - 1;
  if (*(unsigned char *)(*(void *)a1 + v1 - 1) != 101) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  char v4 = *(_DWORD **)(a1 + 40);
  if (v4[1] < (int)v1) {
    goto LABEL_4;
  }
  if (*v4 >= (int)v1) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 12);
  if (r_shortv(a1)) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3 - v6 + *(_DWORD *)(a1 + 12);
LABEL_4:
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t r_Step_5b(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  int v2 = *(_DWORD *)(a1 + 16);
  if ((int)v1 <= v2) {
    return 0;
  }
  uint64_t v3 = *(void *)a1;
  int v4 = v1 - 1;
  if (*(unsigned char *)(*(void *)a1 + v1 - 1) != 108) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  if (*(_DWORD *)(*(void *)(a1 + 40) + 4) >= (int)v1 || v4 <= v2) {
    return 0;
  }
  uint64_t v6 = v1 - 2;
  if (*(unsigned char *)(v3 + v6) != 108) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0) {
    return 1;
  }
  else {
    return result;
  }
}

void *porter_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void porter_UTF_8_close_env(uint64_t a1)
{
}

BOOL r_shortv(uint64_t a1)
{
  int v2 = out_grouping_b_U(a1, (uint64_t)&g_v_WXY, 89, 121, 0);
  BOOL result = 0;
  if (!v2)
  {
    int v4 = in_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 0);
    BOOL result = 0;
    if (!v4) {
      return out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 0) == 0;
    }
  }
  return result;
}

uint64_t danish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_7, 97, 248, 1) & 0x80000000) == 0)
    {
      int v5 = in_grouping_U(a1, (uint64_t)&g_v_7, 97, 248, 1);
      if ((v5 & 0x80000000) == 0)
      {
        int v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        uint64_t v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1]) {
          int v6 = v7[1];
        }
        *uint64_t v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  int v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 > v9
      && (char v10 = *(unsigned char *)(v8 + *(void *)a1 - 1), (v10 & 0xE0) == 0x60)
      && ((0x1C4030u >> v10) & 1) != 0
      && (among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_11, 32)) != 0)
    {
      int v12 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v2;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
      if (among_b == 2)
      {
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending, 97, 229, 0)) {
          goto LABEL_16;
        }
      }
      else if (among_b != 1)
      {
        goto LABEL_16;
      }
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v2;
    }
  }
LABEL_16:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  uint64_t result = r_consonant_pair(a1);
  if ((result & 0x80000000) == 0)
  {
    int v14 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 24) = v14;
    if (!eq_s_b(a1, 2, &s_0_56) {
      || (*(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8), !eq_s_b(a1, 2, &s_1_51))
    }
      || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
    {
      int v15 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v15;
      int v16 = **(_DWORD **)(a1 + 40);
      if (v15 >= v16)
      {
        int v17 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 24) = v15;
        uint64_t v18 = v15 - 1;
        if ((int)v18 > v16
          && (char v19 = *(unsigned char *)(*(void *)a1 + v18), (v19 & 0xE0) == 0x60)
          && ((0x180080u >> v19) & 1) != 0
          && (int v20 = find_among_b(a1, (uint64_t)&a_2_10, 5)) != 0)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v21;
          if (v20 == 2)
          {
            uint64_t result = slice_from_s(a1, 4, &s_2_51);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          else if (v20 == 1)
          {
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = r_consonant_pair(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) = v17;
        }
      }
      int v22 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v22;
      int v23 = **(_DWORD **)(a1 + 40);
      if (v22 < v23)
      {
LABEL_34:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
      int v24 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v23;
      *(_DWORD *)(a1 + 24) = v22;
      if (in_grouping_b_U(a1, (uint64_t)&g_c, 98, 122, 0))
      {
        *(_DWORD *)(a1 + 16) = v24;
        goto LABEL_34;
      }
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      **(void **)(a1 + 32) = slice_to((uint64_t *)a1, **(_DWORD ***)(a1 + 32));
      int v25 = **(_DWORD ***)(a1 + 32);
      if (!v25) {
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)(a1 + 16) = v24;
      if (!eq_v_b(a1, v25)) {
        goto LABEL_34;
      }
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
  }
  return result;
}

uint64_t r_consonant_pair(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  int v2 = **(_DWORD **)(a1 + 40);
  if (v1 < v2) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v7 = v1 - 1;
  if ((int)v7 <= v2 || (*(unsigned __int8 *)(*(void *)a1 + v7) | 0x10) != 0x74)
  {
    uint64_t result = 0;
    goto LABEL_11;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_1_11, 4);
  if (!result)
  {
LABEL_11:
    *(_DWORD *)(a1 + 16) = v5;
    return result;
  }
  int v8 = *(_DWORD *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
  uint64_t v10 = (v9 + v1 - v6);
  *(_DWORD *)(a1 + 8) = v10;
  int v11 = skip_utf8(*(void *)a1, v10, v5, 0, -1);
  if (v11 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v11;
  int v12 = slice_del(a1);
  if (v12 >= 0) {
    return 1;
  }
  else {
    return v12 & (v12 >> 31);
  }
}

void *danish_UTF_8_create_env()
{
  return SN_create_env(1, 2, 0);
}

void danish_UTF_8_close_env(uint64_t a1)
{
}

uint64_t hindi_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
  if (v3 < 0) {
    return 0;
  }
  int v4 = *(int **)(a1 + 40);
  *int v4 = v3;
  *(_DWORD *)(a1 + 16) = v2;
  int v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  int v6 = *v4;
  if (v5 < v6) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t result = find_among_b(a1, (uint64_t)&a_0_24, 132);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v8;
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      return 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v2;
  }
  return result;
}

void *hindi_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void hindi_UTF_8_close_env(uint64_t a1)
{
}

BOOL r_CONSONANT(uint64_t a1)
{
  return in_grouping_b_U(a1, (uint64_t)&g_consonant, 2325, 2399, 0) == 0;
}

uint64_t french_UTF_8_stem(uint64_t a1)
{
  unsigned int v97 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = v97;
  while (2)
  {
    int v98 = v2 + 1;
    uint64_t v3 = (int)v2 + 1;
    int v4 = v2 + 2;
    while (1)
    {
      if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        int v5 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
        if (v6 != v5)
        {
          if (*(unsigned char *)(*(void *)a1 + v6) == 117)
          {
            *(_DWORD *)(a1 + 8) = v6 + 1;
            *(_DWORD *)(a1 + 24) = v6 + 1;
            if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
            {
              uint64_t v7 = a1;
              int v8 = 1;
              int v9 = &s_0_132;
              goto LABEL_32;
            }
            int v5 = *(_DWORD *)(a1 + 12);
          }
          *(_DWORD *)(a1 + 8) = v6;
          if (v6 != v5)
          {
            if (*(unsigned char *)(*(void *)a1 + v6) == 105)
            {
              *(_DWORD *)(a1 + 8) = v6 + 1;
              *(_DWORD *)(a1 + 24) = v6 + 1;
              if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
              {
                uint64_t v7 = a1;
                int v8 = 1;
                int v9 = &s_1_52;
                goto LABEL_32;
              }
              int v5 = *(_DWORD *)(a1 + 12);
            }
            *(_DWORD *)(a1 + 8) = v6;
            if (v6 != v5 && *(unsigned char *)(*(void *)a1 + v6) == 121)
            {
              *(_DWORD *)(a1 + 8) = v6 + 1;
              *(_DWORD *)(a1 + 24) = v6 + 1;
              uint64_t v7 = a1;
              int v8 = 1;
              int v9 = &s_2_52;
              goto LABEL_32;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
      if (eq_s(a1, 2, &s_3_97))
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        uint64_t v7 = a1;
        int v8 = 2;
        int v9 = &s_4_98;
        goto LABEL_32;
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
      if (eq_s(a1, 2, &s_5_52))
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        uint64_t v7 = a1;
        int v8 = 2;
        int v9 = &s_6_127;
        goto LABEL_32;
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
      uint64_t v10 = *(unsigned int *)(a1 + 12);
      uint64_t v11 = *(void *)a1;
      if (v2 == v10)
      {
        uint64_t v10 = v2;
        goto LABEL_24;
      }
      if (*(unsigned char *)(v11 + (int)v2) != 121) {
        goto LABEL_24;
      }
      *(_DWORD *)(a1 + 8) = v98;
      *(_DWORD *)(a1 + 24) = v98;
      if (in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0)) {
        break;
      }
      uint64_t v7 = a1;
      int v8 = 1;
      int v9 = &s_7_88;
LABEL_32:
      uint64_t v12 = slice_from_s(v7, v8, v9);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      *(_DWORD *)(a1 + 8) = v2;
    }
    uint64_t v10 = *(unsigned int *)(a1 + 12);
    uint64_t v11 = *(void *)a1;
LABEL_24:
    *(_DWORD *)(a1 + 8) = v2;
    if (v2 != v10 && *(unsigned char *)(v11 + (int)v2) == 113)
    {
      *(_DWORD *)(a1 + 8) = v3;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      if (v3 != v10 && *(unsigned char *)(v11 + v3) == 117)
      {
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 24) = v4;
        uint64_t v7 = a1;
        int v8 = 1;
        int v9 = &s_8_103;
        goto LABEL_32;
      }
    }
    *(_DWORD *)(a1 + 8) = v2;
    uint64_t v13 = skip_utf8(v11, v2, 0, v10, 1);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v2 = v13;
      *(_DWORD *)(a1 + 8) = v13;
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 8) = v97;
  int v14 = *(_DWORD **)(a1 + 40);
  *int v14 = *(_DWORD *)(a1 + 12);
  v14[1] = *(_DWORD *)(a1 + 12);
  void v14[2] = *(_DWORD *)(a1 + 12);
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  if (in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
    || in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
    || (int v20 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1), v20 < 0))
  {
    *(_DWORD *)(a1 + 8) = v15;
    uint64_t v16 = (int)v15 + 2;
    uint64_t v17 = *(unsigned int *)(a1 + 12);
    uint64_t v18 = *(void *)a1;
    if ((int)v16 < (int)v17)
    {
      char v19 = *(unsigned char *)(v18 + v16);
      if (v19 & 0xE0) == 0x60 && ((0x51000u >> v19))
      {
        if (find_among(a1, (uint64_t)&a_0_12, 3))
        {
          int v20 = *(_DWORD *)(a1 + 8);
          goto LABEL_49;
        }
        uint64_t v18 = *(void *)a1;
        uint64_t v17 = *(unsigned int *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v15;
    int v21 = skip_utf8(v18, v15, 0, v17, 1);
    if ((v21 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = v21;
      int v22 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
      if ((v22 & 0x80000000) == 0)
      {
        int v20 = *(_DWORD *)(a1 + 8) + v22;
        goto LABEL_49;
      }
    }
  }
  else
  {
LABEL_49:
    **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
  }
  *(_DWORD *)(a1 + 8) = v15;
  int v23 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
  if ((v23 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v23;
    int v24 = in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
    if ((v24 & 0x80000000) == 0)
    {
      int v25 = *(_DWORD *)(a1 + 8) + v24;
      *(_DWORD *)(a1 + 8) = v25;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v25;
      int v26 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
      if ((v26 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v26;
        int v27 = in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
        if ((v27 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v27;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v15;
  int v28 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 24) = v28;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_4_9, 43);
  if (among_b)
  {
    int v30 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v30;
    switch(among_b)
    {
      case 1:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        goto LABEL_109;
      case 2:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_14_17)) {
          goto LABEL_167;
        }
        int v31 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v31;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) <= v31) {
          goto LABEL_109;
        }
        int v32 = &s_15_10;
        goto LABEL_99;
      case 3:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        int v32 = &s_16_10;
        goto LABEL_99;
      case 4:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        int v32 = &s_17_15;
LABEL_68:
        uint64_t v33 = a1;
        int v34 = 1;
        goto LABEL_100;
      case 5:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        int v32 = &s_18_9;
        goto LABEL_99;
      case 6:
        if (**(_DWORD **)(a1 + 40) > v30) {
          break;
        }
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        int v35 = find_among_b(a1, (uint64_t)&a_2_11, 6);
        if (!v35) {
          goto LABEL_167;
        }
        int v36 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v36;
        switch(v35)
        {
          case 1:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v36) {
              goto LABEL_167;
            }
            uint64_t v12 = slice_del(a1);
            if ((v12 & 0x80000000) != 0) {
              return v12;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (!eq_s_b(a1, 2, &s_19_7)) {
              goto LABEL_167;
            }
            int v36 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v36;
            break;
          case 2:
            uint64_t v96 = *(void *)(a1 + 40);
            if (*(_DWORD *)(v96 + 8) <= v36) {
              goto LABEL_109;
            }
            if (*(_DWORD *)(v96 + 4) > v36) {
              goto LABEL_167;
            }
            int v32 = &s_20_9;
            goto LABEL_99;
          case 3:
            goto LABEL_231;
          case 4:
            if (**(_DWORD **)(a1 + 40) > v36) {
              goto LABEL_167;
            }
            int v32 = &s_21_35;
            goto LABEL_68;
          default:
            goto LABEL_167;
        }
        goto LABEL_231;
      case 7:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        uint64_t v37 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v37;
        uint64_t v38 = v37 - 1;
        if ((int)v38 <= *(_DWORD *)(a1 + 16)) {
          goto LABEL_167;
        }
        char v39 = *(unsigned char *)(*(void *)a1 + v38);
        if ((v39 & 0xE0) != 0x60) {
          goto LABEL_167;
        }
        if (((0x401008u >> v39) & 1) == 0) {
          goto LABEL_167;
        }
        int v40 = find_among_b(a1, (uint64_t)&a_3_10, 3);
        if (!v40) {
          goto LABEL_167;
        }
        int v36 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v36;
        switch(v40)
        {
          case 3:
LABEL_231:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v36) {
              goto LABEL_167;
            }
            break;
          case 2:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v36)
            {
              int v32 = &s_23_13;
              goto LABEL_99;
            }
            break;
          case 1:
            if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v36)
            {
              int v32 = &s_22_17;
LABEL_99:
              uint64_t v33 = a1;
              int v34 = 3;
LABEL_100:
              uint64_t v12 = slice_from_s(v33, v34, v32);
              if ((v12 & 0x80000000) == 0) {
                goto LABEL_167;
              }
              return v12;
            }
            break;
          default:
            goto LABEL_167;
        }
LABEL_109:
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_167;
        }
        return v12;
      case 8:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v30) {
          break;
        }
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_24_8)) {
          goto LABEL_167;
        }
        int v41 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v41;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v41) {
          goto LABEL_167;
        }
        uint64_t v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_25_6)) {
          goto LABEL_167;
        }
        int v42 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v42;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) <= v42) {
          goto LABEL_109;
        }
        int v32 = &s_26_4;
        goto LABEL_99;
      case 9:
        int v32 = &s_27_8;
        goto LABEL_99;
      case 10:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v30) {
          break;
        }
        int v32 = &s_28_5;
        uint64_t v33 = a1;
        int v34 = 2;
        goto LABEL_100;
      case 11:
        uint64_t v43 = *(void *)(a1 + 40);
        if (*(_DWORD *)(v43 + 8) <= v30) {
          goto LABEL_109;
        }
        if (*(_DWORD *)(v43 + 4) > v30) {
          break;
        }
        int v32 = &s_29_3;
        goto LABEL_99;
      case 12:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v30
          || out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
        {
          break;
        }
        goto LABEL_109;
      case 13:
        if (**(_DWORD **)(a1 + 40) > v30) {
          break;
        }
        char v44 = &s_30_11;
        goto LABEL_115;
      case 14:
        if (**(_DWORD **)(a1 + 40) > v30) {
          break;
        }
        char v44 = &s_31_3;
LABEL_115:
        int v45 = slice_from_s(a1, 3, v44);
        goto LABEL_116;
      case 15:
        int v49 = *(_DWORD *)(a1 + 12);
        if (in_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
          || **(_DWORD **)(a1 + 40) > *(_DWORD *)(a1 + 8))
        {
          break;
        }
        *(_DWORD *)(a1 + 8) = v30 - v49 + *(_DWORD *)(a1 + 12);
        int v45 = slice_del(a1);
LABEL_116:
        unsigned int v46 = v45 & (v45 >> 31);
        if (v45 >= 0) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = v46;
        }
        if ((v45 & 0x80000000) == 0) {
          goto LABEL_125;
        }
        if ((v46 & 0x80000000) == 0) {
          goto LABEL_167;
        }
        unsigned int v48 = v46 >> 31;
        goto LABEL_155;
      default:
        goto LABEL_167;
    }
  }
  LODWORD(v47) = 1;
LABEL_125:
  int v50 = *(_DWORD *)(a1 + 12);
  int v51 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v50;
  uint64_t v52 = *(int **)(a1 + 40);
  int v53 = *v52;
  if (v50 < *v52)
  {
LABEL_143:
    *(_DWORD *)(a1 + 8) = v50;
    int v58 = *v52;
    if (v50 < v58)
    {
LABEL_150:
      *(_DWORD *)(a1 + 8) = v50;
      *(_DWORD *)(a1 + 24) = v50;
      if (v50 > v51)
      {
        uint64_t v61 = v50 - 1;
        if (*(unsigned char *)(*(void *)a1 + v61) == 115)
        {
          *(_DWORD *)(a1 + 8) = v61;
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v61;
          if (eq_s_b(a1, 2, &s_32_9)
            || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1,
                !out_grouping_b_U(a1, (uint64_t)&g_keep_with_s, 97, 232, 0)))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1;
            uint64_t v12 = slice_del(a1);
            if ((v12 & 0x80000000) != 0) {
              return v12;
            }
            int v50 = *(_DWORD *)(a1 + 8);
          }
          else
          {
            int v50 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v50;
          }
        }
      }
      int v70 = **(_DWORD **)(a1 + 40);
      if (v50 < v70)
      {
LABEL_196:
        int v77 = *(_DWORD *)(a1 + 16);
        uint64_t v78 = *(int *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v78;
        if ((int)v78 - 2 <= v77) {
          goto LABEL_242;
        }
        char v79 = *(unsigned char *)(v78 + *(void *)a1 - 1);
        if ((v79 & 0xE0) != 0x60) {
          goto LABEL_242;
        }
        if (((0x105000u >> v79) & 1) == 0) {
          goto LABEL_242;
        }
        if (!find_among_b(a1, (uint64_t)&a_8_5, 5)) {
          goto LABEL_242;
        }
        uint64_t v80 = *(unsigned int *)(a1 + 12);
        uint64_t v81 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v80;
        *(_DWORD *)(a1 + 24) = v80;
        int v82 = skip_utf8(*(void *)a1, v80, v81, 0, -1);
        if (v82 < 0
          || (*(_DWORD *)(a1 + 8) = v82, *(_DWORD *)(a1 + 20) = v82, uint64_t v12 = slice_del(a1), (v12 & 0x80000000) == 0))
        {
LABEL_242:
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          int v83 = 2;
          do
            --v83;
          while (!out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0));
          if (v83 > 0
            || (int v84 = *(_DWORD *)(a1 + 8),
                int v85 = *(_DWORD *)(a1 + 12),
                *(_DWORD *)(a1 + 24) = v84,
                !eq_s_b(a1, 2, &s_34_16))
            && (*(_DWORD *)(a1 + 8) = v84 - v85 + *(_DWORD *)(a1 + 12), !eq_s_b(a1, 2, &s_35_3))
            || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), uint64_t v12 = slice_from_s(a1, 1, &s_36_9), (v12 & 0x80000000) == 0))
          {
            uint64_t v86 = *(unsigned int *)(a1 + 12);
            uint64_t v87 = *(unsigned int *)(a1 + 16);
            *(_DWORD *)(a1 + 8) = v87;
            uint64_t v88 = v87;
            while (1)
            {
              *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v88;
              if ((int)v88 < (int)v86
                && (char v89 = *(unsigned char *)(*(void *)a1 + (int)v88), (v89 & 0xE0) == 0x40)
                && ((0x2200300u >> v89) & 1) != 0)
              {
                int among = find_among(a1, (uint64_t)&a_1_12, 7);
                if (!among) {
                  goto LABEL_230;
                }
                uint64_t v88 = *(unsigned int *)(a1 + 8);
                *(_DWORD *)(a1 + 24) = v88;
                switch(among)
                {
                  case 1:
                    uint64_t v92 = a1;
                    int v93 = 1;
                    uint64_t v94 = &s_9_16;
                    break;
                  case 2:
                    uint64_t v92 = a1;
                    int v93 = 1;
                    uint64_t v94 = &s_10_35;
                    break;
                  case 3:
                    uint64_t v92 = a1;
                    int v93 = 1;
                    uint64_t v94 = &s_11_46;
                    break;
                  case 4:
                    uint64_t v92 = a1;
                    int v93 = 2;
                    uint64_t v94 = &s_12_14;
                    break;
                  case 5:
                    uint64_t v92 = a1;
                    int v93 = 2;
                    uint64_t v94 = &s_13_40;
                    break;
                  case 6:
                    uint64_t v12 = slice_del(a1);
                    if ((v12 & 0x80000000) != 0) {
                      return v12;
                    }
                    goto LABEL_215;
                  case 7:
                    uint64_t v86 = *(unsigned int *)(a1 + 12);
                    goto LABEL_213;
                  default:
                    goto LABEL_215;
                }
                uint64_t v12 = slice_from_s(v92, v93, v94);
                if ((v12 & 0x80000000) != 0) {
                  return v12;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 24) = v88;
LABEL_213:
                int v90 = skip_utf8(*(void *)a1, v88, 0, v86, 1);
                if (v90 < 0)
                {
LABEL_230:
                  *(_DWORD *)(a1 + 8) = v87;
                  return 1;
                }
                *(_DWORD *)(a1 + 8) = v90;
              }
LABEL_215:
              uint64_t v88 = *(unsigned int *)(a1 + 8);
              uint64_t v86 = *(unsigned int *)(a1 + 12);
            }
          }
        }
        return v12;
      }
      int v71 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v70;
      *(_DWORD *)(a1 + 24) = v50;
      if (v50 > v70)
      {
        char v72 = *(unsigned char *)(*(void *)a1 + v50 - 1);
        if (v72 & 0xE0) == 0x60 && ((0x44020u >> v72))
        {
          int v73 = find_among_b(a1, (uint64_t)&a_7_6, 6);
          if (v73)
          {
            uint64_t v74 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v74;
            if (v73 == 3) {
              goto LABEL_188;
            }
            if (v73 == 2)
            {
              uint64_t v12 = slice_from_s(a1, 1, &s_33_3);
              if ((v12 & 0x80000000) != 0) {
                return v12;
              }
              goto LABEL_195;
            }
            if (v73 == 1 && *(_DWORD *)(*(void *)(a1 + 40) + 8) <= (int)v74 && (int)v74 > *(_DWORD *)(a1 + 16))
            {
              uint64_t v75 = v74 - 1;
              if (*(unsigned __int8 *)(*(void *)a1 + v75) - 115 <= 1)
              {
                *(_DWORD *)(a1 + 8) = v75;
LABEL_188:
                uint64_t v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0) {
                  return v12;
                }
              }
            }
          }
        }
      }
LABEL_195:
      *(_DWORD *)(a1 + 16) = v71;
      goto LABEL_196;
    }
    *(_DWORD *)(a1 + 16) = v58;
    *(_DWORD *)(a1 + 24) = v50;
    int v59 = find_among_b(a1, (uint64_t)&a_6_5, 38);
    if (!v59)
    {
LABEL_149:
      *(_DWORD *)(a1 + 16) = v51;
      int v50 = *(_DWORD *)(a1 + 12);
      goto LABEL_150;
    }
    int v60 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v60;
    if (v59 == 3)
    {
      uint64_t v12 = slice_del(a1);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      uint64_t v64 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v64;
      if ((int)v64 <= *(_DWORD *)(a1 + 16) || (uint64_t v65 = v64 - 1, *(unsigned char *)(*(void *)a1 + v65) != 101))
      {
LABEL_166:
        *(_DWORD *)(a1 + 16) = v51;
        goto LABEL_167;
      }
      *(_DWORD *)(a1 + 8) = v65;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v65;
    }
    else if (v59 != 2)
    {
      if (v59 != 1) {
        goto LABEL_166;
      }
      if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v60) {
        goto LABEL_149;
      }
    }
    uint64_t v12 = slice_del(a1);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    goto LABEL_166;
  }
  *(_DWORD *)(a1 + 16) = v53;
  *(_DWORD *)(a1 + 24) = v50;
  if (v50 <= v53
    || (char v54 = *(unsigned char *)(v50 + *(void *)a1 - 1), (v54 & 0xE0) != 0x60)
    || ((0x41C0222u >> v54) & 1) == 0)
  {
    int v55 = 0;
    goto LABEL_130;
  }
  int v55 = find_among_b(a1, (uint64_t)&a_5_9, 35);
  if (!v55) {
    goto LABEL_130;
  }
  uint64_t v62 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v62;
  if ((int)v62 > *(_DWORD *)(a1 + 16))
  {
    uint64_t v63 = v62 - 1;
    if (*(unsigned char *)(*(void *)a1 + v63) == 72)
    {
      int v55 = 0;
      *(_DWORD *)(a1 + 8) = v63;
      goto LABEL_130;
    }
  }
  int v76 = out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0);
  int v55 = 0;
  if (v76)
  {
LABEL_130:
    *(_DWORD *)(a1 + 16) = v51;
  }
  else
  {
    int v55 = slice_del(a1);
    if ((v55 & 0x80000000) == 0)
    {
      int v55 = 1;
      goto LABEL_130;
    }
  }
  if (v55 >= 0) {
    unsigned int v56 = v47;
  }
  else {
    unsigned int v56 = v55;
  }
  unsigned int v48 = v55 >> 31;
  if (v55) {
    uint64_t v47 = v56;
  }
  else {
    uint64_t v47 = v47;
  }
  if (v55) {
    int v57 = v55 >> 31;
  }
  else {
    int v57 = 4;
  }
  if (!v57) {
    goto LABEL_167;
  }
  if (v57 == 4)
  {
    uint64_t v52 = *(int **)(a1 + 40);
    int v50 = *(_DWORD *)(a1 + 12);
    int v51 = *(_DWORD *)(a1 + 16);
    goto LABEL_143;
  }
LABEL_155:
  if (!v48)
  {
LABEL_167:
    int v66 = *(_DWORD *)(a1 + 16);
    uint64_t v67 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v67;
    *(_DWORD *)(a1 + 24) = v67;
    if ((int)v67 > v66)
    {
      uint64_t v68 = v67 - 1;
      if (*(unsigned char *)(*(void *)a1 + v68) == 89)
      {
        *(_DWORD *)(a1 + 8) = v68;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v68;
        char v69 = &s_37_4;
        goto LABEL_172;
      }
    }
    if (eq_s_b(a1, 2, &s_38_5))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      char v69 = &s_39_37;
LABEL_172:
      uint64_t v12 = slice_from_s(a1, 1, v69);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
    }
    goto LABEL_196;
  }
  return v47;
}

void *french_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void french_UTF_8_close_env(uint64_t a1)
{
}

uint64_t arabic_UTF_8_stem(uint64_t a1)
{
  uint64_t v2 = 0;
  **(unsigned char **)(a1 + 48) = 1;
  *(unsigned char *)(*(void *)(a1 + 48) + 1) = 1;
  *(unsigned char *)(*(void *)(a1 + 48) + 2) = 0;
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v4;
  if ((int)v4 + 3 >= v3) {
    goto LABEL_9;
  }
  int v5 = *(unsigned __int8 *)(*(void *)a1 + v4 + 3);
  if (v5 == 167 || v5 == 132)
  {
    int among = find_among(a1, (uint64_t)&a_3_11, 4);
    if (among)
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      if (among != 2)
      {
        if (among != 1)
        {
          uint64_t v2 = 1;
          goto LABEL_9;
        }
        if ((int)len_utf8(*(char **)a1) <= 4) {
          goto LABEL_8;
        }
LABEL_184:
        uint64_t v2 = 1;
        **(unsigned char **)(a1 + 48) = 1;
        *(unsigned char *)(*(void *)(a1 + 48) + 1) = 0;
        *(unsigned char *)(*(void *)(a1 + 48) + 2) = 1;
        goto LABEL_9;
      }
      if ((int)len_utf8(*(char **)a1) >= 4) {
        goto LABEL_184;
      }
    }
  }
LABEL_8:
  uint64_t v2 = 0;
LABEL_9:
  *(_DWORD *)(a1 + 8) = v4;
  for (uint64_t i = v4; ; uint64_t i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = i;
    int v8 = find_among(a1, (uint64_t)&a_0_13, 144);
    if (v8)
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      switch(v8)
      {
        case 1:
          uint64_t v9 = slice_del(a1);
          if ((v9 & 0x80000000) != 0) {
            return v9;
          }
          continue;
        case 2:
          uint64_t v11 = &s_0_133;
          goto LABEL_26;
        case 3:
          uint64_t v11 = &s_1_53;
          goto LABEL_26;
        case 4:
          uint64_t v11 = &s_2_53;
          goto LABEL_26;
        case 5:
          uint64_t v11 = &s_3_98;
          goto LABEL_26;
        case 6:
          uint64_t v11 = &s_4_99;
          goto LABEL_26;
        case 7:
          uint64_t v11 = &s_5_53;
          goto LABEL_26;
        case 8:
          uint64_t v11 = &s_6_128;
          goto LABEL_26;
        case 9:
          uint64_t v11 = &s_7_89;
          goto LABEL_26;
        case 10:
          uint64_t v11 = &s_8_104;
          goto LABEL_26;
        case 11:
          uint64_t v11 = &s_9_17;
LABEL_26:
          uint64_t v12 = a1;
          int v13 = 1;
          goto LABEL_64;
        case 12:
          uint64_t v11 = &s_10_36;
          goto LABEL_63;
        case 13:
          uint64_t v11 = &s_11_47;
          goto LABEL_63;
        case 14:
          uint64_t v11 = &s_12_15;
          goto LABEL_63;
        case 15:
          uint64_t v11 = &s_13_41;
          goto LABEL_63;
        case 16:
          uint64_t v11 = &s_14_18;
          goto LABEL_63;
        case 17:
          uint64_t v11 = &s_15_11;
          goto LABEL_63;
        case 18:
          uint64_t v11 = &s_16_11;
          goto LABEL_63;
        case 19:
          uint64_t v11 = &s_17_16;
          goto LABEL_63;
        case 20:
          uint64_t v11 = &s_18_10;
          goto LABEL_63;
        case 21:
          uint64_t v11 = &s_19_8;
          goto LABEL_63;
        case 22:
          uint64_t v11 = &s_20_10;
          goto LABEL_63;
        case 23:
          uint64_t v11 = &s_21_36;
          goto LABEL_63;
        case 24:
          uint64_t v11 = &s_22_18;
          goto LABEL_63;
        case 25:
          uint64_t v11 = &s_23_14;
          goto LABEL_63;
        case 26:
          uint64_t v11 = &s_24_9;
          goto LABEL_63;
        case 27:
          uint64_t v11 = &s_25_7;
          goto LABEL_63;
        case 28:
          uint64_t v11 = &s_26_5;
          goto LABEL_63;
        case 29:
          uint64_t v11 = &s_27_9;
          goto LABEL_63;
        case 30:
          uint64_t v11 = &s_28_6;
          goto LABEL_63;
        case 31:
          uint64_t v11 = &s_29_4;
          goto LABEL_63;
        case 32:
          uint64_t v11 = &s_30_12;
          goto LABEL_63;
        case 33:
          uint64_t v11 = &s_31_4;
          goto LABEL_63;
        case 34:
          uint64_t v11 = &s_32_10;
          goto LABEL_63;
        case 35:
          uint64_t v11 = &s_33_4;
          goto LABEL_63;
        case 36:
          uint64_t v11 = &s_34_17;
          goto LABEL_63;
        case 37:
          uint64_t v11 = &s_35_4;
          goto LABEL_63;
        case 38:
          uint64_t v11 = &s_36_10;
          goto LABEL_63;
        case 39:
          uint64_t v11 = &s_37_5;
          goto LABEL_63;
        case 40:
          uint64_t v11 = &s_38_6;
          goto LABEL_63;
        case 41:
          uint64_t v11 = &s_39_38;
          goto LABEL_63;
        case 42:
          uint64_t v11 = &s_40_6;
          goto LABEL_63;
        case 43:
          uint64_t v11 = &s_41_13;
          goto LABEL_63;
        case 44:
          uint64_t v11 = &s_42_3;
          goto LABEL_63;
        case 45:
          uint64_t v11 = &s_43_12;
          goto LABEL_63;
        case 46:
          uint64_t v11 = &s_44_96;
          goto LABEL_63;
        case 47:
          uint64_t v11 = &s_45_2;
LABEL_63:
          uint64_t v12 = a1;
          int v13 = 2;
          goto LABEL_64;
        case 48:
          uint64_t v11 = &s_46_32;
          goto LABEL_70;
        case 49:
          uint64_t v11 = &s_47_26;
          goto LABEL_70;
        case 50:
          uint64_t v11 = &s_48_3;
          goto LABEL_70;
        case 51:
          uint64_t v11 = &s_49_3;
LABEL_70:
          uint64_t v12 = a1;
          int v13 = 4;
LABEL_64:
          uint64_t v9 = slice_from_s(v12, v13, v11);
          if ((v9 & 0x80000000) == 0) {
            continue;
          }
          return v9;
        default:
          continue;
      }
    }
    *(_DWORD *)(a1 + 8) = i;
    int v10 = skip_utf8(*(void *)a1, i, 0, *(unsigned int *)(a1 + 12), 1);
    if (v10 < 0) {
      break;
    }
    *(_DWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 16) = v4;
  int v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  uint64_t v15 = *(unsigned char **)(a1 + 48);
  if (!v15[1])
  {
LABEL_130:
    *(_DWORD *)(a1 + 8) = v14;
    if (!*v15)
    {
LABEL_262:
      int v76 = *(_DWORD *)(a1 + 16);
      uint64_t v77 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v77;
      *(_DWORD *)(a1 + 24) = v77;
      uint64_t v78 = v77 - 1;
      if ((int)v78 > v76 && *(unsigned __int8 *)(*(void *)a1 + v78) == 137)
      {
        if (find_among_b(a1, (uint64_t)&a_21_1, 1))
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          uint64_t v9 = slice_from_s(a1, 2, &s_68_7);
          if ((v9 & 0x80000000) != 0) {
            return v9;
          }
        }
      }
LABEL_271:
      int v81 = *(_DWORD *)(a1 + 12);
      uint64_t v82 = *(int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v82;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v82;
      if ((int)v82 + 3 < v81
        && (char v83 = *(unsigned char *)(*(void *)a1 + v82 + 3), (v83 & 0xE0) == 0xA0)
        && ((0xBCu >> v83) & 1) != 0
        && (int v84 = find_among(a1, (uint64_t)&a_4_10, 5)) != 0)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(v84)
        {
          case 1:
            if ((int)len_utf8(*(char **)a1) < 4) {
              goto LABEL_287;
            }
            int v85 = &s_54_6;
            break;
          case 2:
            if ((int)len_utf8(*(char **)a1) < 4) {
              goto LABEL_287;
            }
            int v85 = &s_55_4;
            break;
          case 3:
            if ((int)len_utf8(*(char **)a1) < 4) {
              goto LABEL_287;
            }
            int v85 = &s_56_13;
            break;
          case 4:
            if ((int)len_utf8(*(char **)a1) < 4) {
              goto LABEL_287;
            }
            int v85 = &s_57_26;
            break;
          default:
            goto LABEL_288;
        }
        uint64_t v9 = slice_from_s(a1, 2, v85);
        if ((v9 & 0x80000000) != 0) {
          return v9;
        }
      }
      else
      {
LABEL_287:
        *(_DWORD *)(a1 + 8) = v82;
      }
LABEL_288:
      int v86 = *(_DWORD *)(a1 + 8);
      if (!eq_s(a1, 4, &s_58_4) {
        && (*(_DWORD *)(a1 + 8) = v86, !eq_s(a1, 4, &s_59_3))
      }
        && (*(_DWORD *)(a1 + 8) = v86, *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v86, v87 = v86 + 1, (int)v87 < *(_DWORD *)(a1 + 12))
        && ((int v88 = *(unsigned __int8 *)(*(void *)a1 + v87), v88 == 136) || v88 == 129)
        && find_among(a1, (uint64_t)&a_5_10, 2)
        && (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), (int)len_utf8(*(char **)a1) >= 4))
      {
        int v89 = slice_del(a1);
        if (v89 < 0) {
          return v89 & (v89 >> 31);
        }
        int v86 = *(_DWORD *)(a1 + 8);
      }
      else
      {
        *(_DWORD *)(a1 + 8) = v86;
      }
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v86;
      uint64_t v90 = v86 + 3;
      if ((int)v90 < *(_DWORD *)(a1 + 12))
      {
        int v91 = *(unsigned __int8 *)(*(void *)a1 + v90);
        if (v91 == 167 || v91 == 132)
        {
          int v92 = find_among(a1, (uint64_t)&a_6_6, 4);
          if (v92)
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (v92 == 2)
            {
              if ((int)len_utf8(*(char **)a1) >= 5)
              {
LABEL_305:
                uint64_t v9 = slice_del(a1);
                if ((v9 & 0x80000000) != 0) {
                  return v9;
                }
                goto LABEL_336;
              }
            }
            else
            {
              if (v92 != 1) {
                goto LABEL_336;
              }
              if ((int)len_utf8(*(char **)a1) >= 6) {
                goto LABEL_305;
              }
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v86;
      int v93 = *(unsigned char **)(a1 + 48);
      if (*v93)
      {
        int v94 = r_Prefix_Step3b_Noun(a1);
        if (v94 >= 0) {
          unsigned int v95 = v2;
        }
        else {
          unsigned int v95 = v94;
        }
        unsigned int v96 = v94 >> 31;
        if (v94) {
          uint64_t v97 = v95;
        }
        else {
          uint64_t v97 = v2;
        }
        if (v94) {
          int v98 = v94 >> 31;
        }
        else {
          int v98 = 34;
        }
        if (!v98) {
          goto LABEL_336;
        }
        if (v98 != 34)
        {
          uint64_t v2 = v97;
          goto LABEL_334;
        }
        int v93 = *(unsigned char **)(a1 + 48);
      }
      else
      {
        LODWORD(v97) = v2;
      }
      *(_DWORD *)(a1 + 8) = v86;
      if (v93[1])
      {
        uint64_t v99 = r_Prefix_Step3_Verb(a1);
        if (v99)
        {
          uint64_t v2 = v99;
          if ((v99 & 0x80000000) != 0) {
            return v2;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 8) = v86;
        }
        int v100 = r_Prefix_Step4_Verb(a1);
        unsigned int v96 = v100 >> 31;
        if (v100 >= 0) {
          uint64_t v2 = v97;
        }
        else {
          uint64_t v2 = v100;
        }
        if (!v100) {
          unsigned int v96 = 35;
        }
        if (v100 <= 0)
        {
LABEL_334:
          if (v96 > 0x23 || ((1 << v96) & 0xA00000001) == 0) {
            return v2;
          }
        }
      }
LABEL_336:
      *(_DWORD *)(a1 + 16) = v82;
      uint64_t v101 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v101;
      *(_DWORD *)(a1 + 24) = v101;
      uint64_t v102 = v101 - 1;
      if ((int)v102 > (int)v82)
      {
        char v103 = *(unsigned char *)(*(void *)a1 + v102);
        if (v103 & 0xE0) == 0xA0 && ((0x7Cu >> v103))
        {
          if (find_among_b(a1, (uint64_t)&a_1_13, 5))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            uint64_t v9 = slice_from_s(a1, 2, &s_50_7);
            if ((v9 & 0x80000000) != 0) {
              return v9;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v82;
      for (uint64_t j = v82; ; uint64_t j = *(unsigned int *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = j;
        uint64_t v105 = (int)j + 1;
        uint64_t v106 = *(unsigned int *)(a1 + 12);
        double v107 = *(char **)a1;
        if ((int)v105 >= (int)v106) {
          goto LABEL_351;
        }
        char v108 = v107[v105];
        if ((v108 & 0xE0) != 0xA0 || ((0x7Cu >> v108) & 1) == 0) {
          goto LABEL_351;
        }
        int v109 = find_among(a1, (uint64_t)&a_2_12, 5);
        if (!v109) {
          break;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(v109)
        {
          case 3:
            uint64_t v110 = a1;
            double v111 = &s_53_7;
            break;
          case 2:
            uint64_t v110 = a1;
            double v111 = &s_52_4;
            break;
          case 1:
            uint64_t v110 = a1;
            double v111 = &s_51_10;
            break;
          default:
            continue;
        }
        uint64_t v9 = slice_from_s(v110, 2, v111);
        if ((v9 & 0x80000000) != 0) {
          return v9;
        }
LABEL_353:
        ;
      }
      double v107 = *(char **)a1;
      uint64_t v106 = *(unsigned int *)(a1 + 12);
LABEL_351:
      *(_DWORD *)(a1 + 8) = j;
      int v112 = skip_utf8((uint64_t)v107, j, 0, v106, 1);
      if (v112 < 0)
      {
        *(_DWORD *)(a1 + 8) = v82;
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v112;
      goto LABEL_353;
    }
    *(_DWORD *)(a1 + 24) = v14;
    uint64_t v35 = v14 - 1;
    if ((int)v35 > *(_DWORD *)(a1 + 16) && *(unsigned __int8 *)(*(void *)a1 + v35) == 169)
    {
      if (find_among_b(a1, (uint64_t)&a_15_1, 1))
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        if ((int)len_utf8(*(char **)a1) >= 4)
        {
          int v36 = slice_del(a1);
          if (v36 >= 0) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v36;
          }
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_250;
          }
          goto LABEL_247;
        }
      }
    }
    int v37 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v37;
    if (!*(unsigned char *)(*(void *)(a1 + 48) + 2))
    {
      *(_DWORD *)(a1 + 24) = v37;
      among_CGFloat b = find_among_b(a1, (uint64_t)&a_10_2, 10);
      if (among_b)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        switch(among_b)
        {
          case 3:
            if ((int)len_utf8(*(char **)a1) >= 6) {
              goto LABEL_211;
            }
            break;
          case 2:
            if ((int)len_utf8(*(char **)a1) >= 5) {
              goto LABEL_211;
            }
            break;
          case 1:
            if ((int)len_utf8(*(char **)a1) >= 4)
            {
LABEL_211:
              uint64_t v9 = slice_del(a1);
              if ((v9 & 0x80000000) != 0) {
                return v9;
              }
LABEL_212:
              int v59 = *(_DWORD *)(a1 + 8);
              int v58 = *(_DWORD *)(a1 + 12);
              int v60 = r_Suffix_Noun_Step2a(a1);
              if (v60 >= 0) {
                unsigned int v61 = v2;
              }
              else {
                unsigned int v61 = v60;
              }
              unsigned int v62 = v60 >> 31;
              if (v60) {
                uint64_t v2 = v61;
              }
              else {
                uint64_t v2 = v2;
              }
              if (v60) {
                int v63 = v60 >> 31;
              }
              else {
                int v63 = 18;
              }
              if (!v63) {
                goto LABEL_250;
              }
              if (v63 != 18) {
                goto LABEL_267;
              }
              int v64 = v58 - v59;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v64;
              int v65 = r_Suffix_Noun_Step2b(a1);
              if (v65 >= 0) {
                unsigned int v66 = v2;
              }
              else {
                unsigned int v66 = v65;
              }
              unsigned int v62 = v65 >> 31;
              if (v65) {
                uint64_t v2 = v66;
              }
              else {
                uint64_t v2 = v2;
              }
              if (v65) {
                int v67 = v65 >> 31;
              }
              else {
                int v67 = 20;
              }
              if (!v67) {
                goto LABEL_250;
              }
              if (v67 != 20) {
                goto LABEL_267;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v64;
              int v68 = r_Suffix_Noun_Step2c1(a1);
              if (v68 >= 0) {
                unsigned int v69 = v2;
              }
              else {
                unsigned int v69 = v68;
              }
              unsigned int v62 = v68 >> 31;
              if (v68) {
                uint64_t v2 = v69;
              }
              else {
                uint64_t v2 = v2;
              }
              if (v68) {
                int v70 = v68 >> 31;
              }
              else {
                int v70 = 21;
              }
              if (!v70) {
                goto LABEL_250;
              }
              if (v70 != 21)
              {
LABEL_267:
                if (v62) {
                  return v2;
                }
LABEL_250:
                uint64_t v73 = *(int *)(a1 + 8);
                *(_DWORD *)(a1 + 24) = v73;
                uint64_t v74 = v73 - 1;
                if ((int)v74 > *(_DWORD *)(a1 + 16) && *(unsigned __int8 *)(*(void *)a1 + v74) == 138)
                {
                  if (find_among_b(a1, (uint64_t)&a_16_1, 1))
                  {
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
                    if ((int)len_utf8(*(char **)a1) >= 3)
                    {
                      int v75 = slice_del(a1);
                      if (v75 >= 0) {
                        uint64_t v2 = v2;
                      }
                      else {
                        uint64_t v2 = v75;
                      }
                      if (v75 < 0)
                      {
                        int v21 = v75 >> 31;
                        goto LABEL_259;
                      }
                      goto LABEL_271;
                    }
                  }
                }
                goto LABEL_262;
              }
              uint64_t v71 = *(unsigned int *)(a1 + 16);
              uint64_t v72 = (*(_DWORD *)(a1 + 12) - v64);
              *(_DWORD *)(a1 + 8) = v72;
              int v57 = skip_utf8(*(void *)a1, v72, v71, 0, -1);
              if ((v57 & 0x80000000) == 0) {
                goto LABEL_207;
              }
            }
            break;
          default:
            goto LABEL_212;
        }
      }
    }
    int v38 = *(_DWORD *)(a1 + 16);
    uint64_t v39 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    *(_DWORD *)(a1 + 24) = v39;
    uint64_t v40 = v39 - 1;
    if ((int)v40 > v38 && *(unsigned __int8 *)(*(void *)a1 + v40) == 134)
    {
      if (find_among_b(a1, (uint64_t)&a_11_2, 1))
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        if ((int)len_utf8(*(char **)a1) >= 6)
        {
          int v36 = slice_del(a1);
          if (v36 >= 0) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v36;
          }
          if (v36 < 0)
          {
LABEL_247:
            int v21 = v36 >> 31;
LABEL_248:
            if (v21 && v21 != 15) {
              goto LABEL_259;
            }
            goto LABEL_250;
          }
          int v42 = *(_DWORD *)(a1 + 8);
          int v41 = *(_DWORD *)(a1 + 12);
          int v43 = r_Suffix_Noun_Step2a(a1);
          if (v43 >= 0) {
            unsigned int v44 = v2;
          }
          else {
            unsigned int v44 = v43;
          }
          int v21 = v43 >> 31;
          if (v43) {
            uint64_t v2 = v44;
          }
          else {
            uint64_t v2 = v2;
          }
          if (v43) {
            int v45 = v43 >> 31;
          }
          else {
            int v45 = 23;
          }
          if (!v45) {
            goto LABEL_250;
          }
          if (v45 == 23)
          {
            int v46 = v41 - v42;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v46;
            int v47 = r_Suffix_Noun_Step2b(a1);
            unsigned int v48 = v47 >= 0 ? v2 : v47;
            int v21 = v47 >> 31;
            uint64_t v2 = v47 ? v48 : v2;
            unsigned int v49 = v47 ? v47 >> 31 : 25;
            if (!v49) {
              goto LABEL_250;
            }
            if (v49 == 25)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v46;
              int v50 = r_Suffix_Noun_Step2c1(a1);
              int v21 = v50 >> 31;
              if (v50 >= 0) {
                uint64_t v2 = v2;
              }
              else {
                uint64_t v2 = v50;
              }
              if (!v50) {
                int v21 = 22;
              }
              if (v50 > 0) {
                goto LABEL_250;
              }
            }
          }
          if (!v21) {
            goto LABEL_250;
          }
          if (v21 != 22) {
            goto LABEL_248;
          }
        }
      }
    }
    int v51 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v51;
    if (!*(unsigned char *)(*(void *)(a1 + 48) + 2))
    {
      int v54 = r_Suffix_Noun_Step2a(a1);
      if (v54 >= 0) {
        unsigned int v55 = v2;
      }
      else {
        unsigned int v55 = v54;
      }
      int v21 = v54 >> 31;
      if (v54) {
        uint64_t v2 = v55;
      }
      else {
        uint64_t v2 = v2;
      }
      if (v54) {
        int v56 = v54 >> 31;
      }
      else {
        int v56 = 27;
      }
      if (!v56) {
        goto LABEL_250;
      }
      if (v56 != 27) {
        goto LABEL_248;
      }
      int v51 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v51;
    uint64_t v52 = r_Suffix_Noun_Step2b(a1);
    if (v52)
    {
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_250;
      }
      int v21 = v52 >> 31;
      uint64_t v2 = v52;
      goto LABEL_248;
    }
    int v57 = *(_DWORD *)(a1 + 12);
LABEL_207:
    *(_DWORD *)(a1 + 8) = v57;
    goto LABEL_250;
  }
  int v16 = 1;
  do
  {
    int v18 = *(_DWORD *)(a1 + 8);
    int v17 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v18;
    int v19 = find_among_b(a1, (uint64_t)&a_17_1, 12);
    if (!v19)
    {
LABEL_91:
      int v22 = *(_DWORD *)(a1 + 12);
      int v23 = v18 - v17 + v22;
      *(_DWORD *)(a1 + 8) = v23;
      if (v16 > 0)
      {
LABEL_92:
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a1 + 24) = v22;
        if (v22 - 3 > *(_DWORD *)(a1 + 16) {
          && ((int v24 = *(unsigned __int8 *)(*(void *)a1 + v22 - 1), v24 == 167) || v24 == 133)
        }
          && find_among_b(a1, (uint64_t)&a_19_1, 2)
          && (*(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8), (int)len_utf8(*(char **)a1) >= 5))
        {
          int v25 = slice_del(a1);
          if (v25 >= 0) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v25;
          }
          if (v25 < 0)
          {
            int v21 = v25 >> 31;
            goto LABEL_127;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          int v34 = r_Suffix_Verb_Step2a(a1);
          int v21 = v34 >> 31;
          if (v34 >= 0) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v34;
          }
          if (!v34) {
            int v21 = 2;
          }
          if (v34 <= 0) {
            goto LABEL_127;
          }
        }
        goto LABEL_271;
      }
LABEL_102:
      int v26 = r_Suffix_Verb_Step2a(a1);
      if (v26 >= 0) {
        unsigned int v27 = v2;
      }
      else {
        unsigned int v27 = v26;
      }
      if (v26) {
        uint64_t v2 = v27;
      }
      else {
        uint64_t v2 = v2;
      }
      if (v26) {
        int v28 = v26 >> 31;
      }
      else {
        int v28 = 7;
      }
      if (!v28) {
        goto LABEL_271;
      }
      if (v28 != 7)
      {
        if (v26 < 0) {
          return v2;
        }
        goto LABEL_271;
      }
      int v29 = v22 - v23;
      int v30 = *(_DWORD *)(a1 + 16);
      uint64_t v31 = *(int *)(a1 + 12) - (uint64_t)v29;
      *(_DWORD *)(a1 + 8) = v31;
      *(_DWORD *)(a1 + 24) = v31;
      uint64_t v32 = v31 - 1;
      if ((int)v32 > v30 && *(unsigned __int8 *)(*(void *)a1 + v32) == 136)
      {
        int v33 = find_among_b(a1, (uint64_t)&a_20_1, 2);
        if (v33)
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          if (v33 == 2)
          {
            if ((int)len_utf8(*(char **)a1) >= 6)
            {
LABEL_119:
              uint64_t v9 = slice_del(a1);
              if ((v9 & 0x80000000) == 0) {
                goto LABEL_271;
              }
              return v9;
            }
          }
          else
          {
            if (v33 != 1) {
              goto LABEL_271;
            }
            if ((int)len_utf8(*(char **)a1) >= 4) {
              goto LABEL_119;
            }
          }
        }
      }
      uint64_t v79 = *(unsigned int *)(a1 + 16);
      uint64_t v80 = (*(_DWORD *)(a1 + 12) - v29);
      *(_DWORD *)(a1 + 8) = v80;
      if ((skip_utf8(*(void *)a1, v80, v79, 0, -1) & 0x80000000) == 0) {
        goto LABEL_271;
      }
      int v22 = *(_DWORD *)(a1 + 12);
      goto LABEL_92;
    }
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    switch(v19)
    {
      case 3:
        if ((int)len_utf8(*(char **)a1) < 6) {
          goto LABEL_91;
        }
        break;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5) {
          goto LABEL_91;
        }
        break;
      case 1:
        if ((int)len_utf8(*(char **)a1) < 4) {
          goto LABEL_91;
        }
        break;
      default:
        goto LABEL_83;
    }
    uint64_t v20 = slice_del(a1);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_83:
      LODWORD(v2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = 1;
      goto LABEL_85;
    }
    uint64_t v2 = v20;
LABEL_85:
    if ((int)v20 < 0) {
      int v21 = v20 >> 31;
    }
    else {
      int v21 = 3;
    }
    v16 -= (int)v20 >= 0;
  }
  while (v21 == 3);
  if (!v21)
  {
    int v23 = *(_DWORD *)(a1 + 8);
    int v22 = *(_DWORD *)(a1 + 12);
    goto LABEL_102;
  }
LABEL_127:
  if (!v21) {
    goto LABEL_271;
  }
  if (v21 == 2)
  {
    int v14 = *(_DWORD *)(a1 + 12);
    uint64_t v15 = *(unsigned char **)(a1 + 48);
    goto LABEL_130;
  }
LABEL_259:
  if (v21 == 12 || !v21) {
    goto LABEL_271;
  }
  return v2;
}

uint64_t r_Suffix_Verb_Step2a(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_18_1, 11);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        if ((int)len_utf8(*(char **)a1) >= 4) {
          goto LABEL_4;
        }
        goto LABEL_7;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5) {
          goto LABEL_7;
        }
        goto LABEL_4;
      case 3:
      case 4:
        if ((int)len_utf8(*(char **)a1) < 6)
        {
LABEL_7:
          uint64_t result = 0;
        }
        else
        {
LABEL_4:
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) == 0) {
LABEL_5:
          }
            uint64_t result = 1;
        }
        break;
      default:
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t r_Suffix_Noun_Step2a(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among_b(a1, (uint64_t)&a_12_1, 3);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    if ((int)len_utf8(*(char **)a1) < 5)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = slice_del(a1);
      if ((int)result >= 0) {
        return 1;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t r_Suffix_Noun_Step2b(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 3 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(void *)a1 - 1) != 170) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_13_1, 1);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 5) {
    return 0;
  }
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t r_Suffix_Noun_Step2c1(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(*(void *)a1 + v2) != 170) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_14_1, 1);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 4) {
    return 0;
  }
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t r_Prefix_Step3b_Noun(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (eq_s(a1, 4, &s_60_11)) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
  uint64_t v3 = v2 + 1;
  if ((int)v3 >= *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(*(void *)a1 + v3);
  if (v4 != 168 && v4 != 131) {
    return 0;
  }
  uint64_t result = find_among(a1, (uint64_t)&a_7_7, 3);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (result == 3)
  {
    if ((int)len_utf8(*(char **)a1) < 4) {
      return 0;
    }
    int v6 = &s_62_4;
LABEL_16:
    uint64_t result = slice_from_s(a1, 2, v6);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  if (result == 2)
  {
    if ((int)len_utf8(*(char **)a1) < 4) {
      return 0;
    }
    int v6 = &s_61_45;
    goto LABEL_16;
  }
  if (result != 1) {
    return 1;
  }
  if ((int)len_utf8(*(char **)a1) < 4) {
    return 0;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_Prefix_Step3_Verb(uint64_t a1)
{
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t result = find_among(a1, (uint64_t)&a_8_6, 4);
  if (result)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        if ((int)len_utf8(*(char **)a1) < 5) {
          goto LABEL_13;
        }
        uint64_t v3 = &s_63_4;
        goto LABEL_11;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5) {
          goto LABEL_13;
        }
        uint64_t v3 = &s_64_7;
        goto LABEL_11;
      case 3:
        if ((int)len_utf8(*(char **)a1) < 5) {
          goto LABEL_13;
        }
        uint64_t v3 = &s_65_2;
        goto LABEL_11;
      case 4:
        if ((int)len_utf8(*(char **)a1) < 5)
        {
LABEL_13:
          uint64_t result = 0;
        }
        else
        {
          uint64_t v3 = &s_66_11;
LABEL_11:
          uint64_t result = slice_from_s(a1, 2, v3);
          if ((result & 0x80000000) == 0) {
LABEL_12:
          }
            uint64_t result = 1;
        }
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t r_Prefix_Step4_Verb(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  uint64_t v2 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
  uint64_t v3 = v2 + 5;
  if ((int)v3 >= v1 || *(unsigned __int8 *)(*(void *)a1 + v3) != 170) {
    return 0;
  }
  uint64_t result = find_among(a1, (uint64_t)&a_9_4, 3);
  if (!result) {
    return result;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 5) {
    return 0;
  }
  *(unsigned char *)(*(void *)(a1 + 48) + 1) = 1;
  **(unsigned char **)(a1 + 48) = 0;
  LODWORD(result) = slice_from_s(a1, 6, &s_67_4);
  if ((int)result >= 0) {
    return 1;
  }
  else {
    return result;
  }
}

void *arabic_UTF_8_create_env()
{
  return SN_create_env(0, 0, 3);
}

void arabic_UTF_8_close_env(uint64_t a1)
{
}

uint64_t irish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v2;
  int among = find_among(a1, (uint64_t)&a_0_14, 24);
  if (among)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch(among)
    {
      case 1:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0) {
          break;
        }
        return result;
      case 2:
        int v5 = &s_0_144;
        goto LABEL_14;
      case 3:
        int v5 = &s_1_54;
        goto LABEL_14;
      case 4:
        int v5 = &s_2_54;
        goto LABEL_14;
      case 5:
        int v5 = &s_3_99;
        goto LABEL_14;
      case 6:
        int v5 = &s_4_100;
        goto LABEL_14;
      case 7:
        int v5 = &s_5_54;
        goto LABEL_14;
      case 8:
        int v5 = &s_6_129;
        goto LABEL_14;
      case 9:
        int v5 = &s_7_90;
        goto LABEL_14;
      case 10:
        int v5 = &s_8_105;
LABEL_14:
        uint64_t result = slice_from_s(a1, 1, v5);
        if ((result & 0x80000000) == 0) {
          break;
        }
        return result;
      default:
        break;
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  int v6 = *(_DWORD **)(a1 + 40);
  *int v6 = *(_DWORD *)(a1 + 12);
  v6[1] = *(_DWORD *)(a1 + 12);
  _OWORD v6[2] = *(_DWORD *)(a1 + 12);
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
  if ((v8 & 0x80000000) == 0) {
    **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8) + v8;
  }
  *(_DWORD *)(a1 + 8) = v7;
  int v9 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
  if ((v9 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v9;
    int v10 = in_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
    if ((v10 & 0x80000000) == 0)
    {
      int v11 = *(_DWORD *)(a1 + 8) + v10;
      *(_DWORD *)(a1 + 8) = v11;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v11;
      int v12 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
      if ((v12 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v12;
        int v13 = in_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
        if ((v13 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v13;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  int v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_1_14, 16);
  if (among_b)
  {
    int v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
    if (among_b == 2)
    {
      int v17 = *(_DWORD *)(*(void *)(a1 + 40) + 8);
      goto LABEL_27;
    }
    if (among_b == 1)
    {
      int v17 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
LABEL_27:
      if (v17 <= v16)
      {
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
  }
  int v18 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 24) = v18;
  int v19 = find_among_b(a1, (uint64_t)&a_2_13, 25);
  if (v19)
  {
    int v20 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
    switch(v19)
    {
      case 1:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 8) > v20) {
          break;
        }
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) == 0) {
          break;
        }
        return result;
      case 2:
        int v21 = &s_9_18;
        goto LABEL_36;
      case 3:
        int v21 = &s_10_37;
LABEL_36:
        uint64_t v22 = a1;
        int v23 = 3;
        goto LABEL_41;
      case 4:
        int v21 = &s_11_48;
        goto LABEL_40;
      case 5:
        int v21 = &s_12_16;
        uint64_t v22 = a1;
        int v23 = 5;
        goto LABEL_41;
      case 6:
        int v21 = &s_13_42;
LABEL_40:
        uint64_t v22 = a1;
        int v23 = 4;
LABEL_41:
        uint64_t result = slice_from_s(v22, v23, v21);
        if ((result & 0x80000000) == 0) {
          break;
        }
        return result;
      default:
        break;
    }
  }
  int v24 = *(_DWORD *)(a1 + 16);
  uint64_t v25 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if ((int)v25 - 2 <= v24) {
    goto LABEL_52;
  }
  char v26 = *(unsigned char *)(v25 + *(void *)a1 - 1);
  if ((v26 & 0xE0) != 0x60) {
    goto LABEL_52;
  }
  if (((0x45110u >> v26) & 1) == 0) {
    goto LABEL_52;
  }
  int v27 = find_among_b(a1, (uint64_t)&a_3_12, 12);
  if (!v27) {
    goto LABEL_52;
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v28;
  if (v27 == 2)
  {
    int v29 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
  }
  else
  {
    if (v27 != 1)
    {
LABEL_52:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      return 1;
    }
    int v29 = **(_DWORD **)(a1 + 40);
  }
  if (v29 > v28) {
    goto LABEL_52;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0) {
    goto LABEL_52;
  }
  return result;
}

void *irish_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void irish_UTF_8_close_env(uint64_t a1)
{
}

void *create_s()
{
  uint64_t result = malloc_type_malloc(0xAuLL, 0x86595534uLL);
  if (result) {
    *result++ = 1;
  }
  return result;
}

void lose_s(uint64_t a1)
{
  if (a1) {
    free((void *)(a1 - 8));
  }
}

uint64_t skip_utf8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 < 0)
  {
    while ((int)a2 > (int)a3)
    {
      uint64_t v5 = (int)a2 - 1;
      if (*(char *)(a1 + v5) < 0 && (int)v5 > (int)a3)
      {
        uint64_t v5 = (int)a2 - 1;
        while (*(unsigned __int8 *)(a1 + v5) <= 0xBFu)
        {
          if (--v5 <= (int)a3)
          {
            uint64_t v5 = a3;
            break;
          }
        }
      }
      LODWORD(a2) = v5;
      if (__CFADD__(a5++, 1)) {
        return v5;
      }
    }
  }
  else
  {
    if (!a5) {
      return a2;
    }
    while ((int)a2 < (int)a4)
    {
      uint64_t v5 = (a2 + 1);
      if (*(unsigned __int8 *)(a1 + (int)a2) >= 0xC0u && (int)v5 < (int)a4)
      {
        uint64_t v5 = (int)a2 + 1;
        while (*(char *)(a1 + v5) <= -65)
        {
          if (++v5 >= (int)a4)
          {
            uint64_t v5 = a4;
            break;
          }
        }
      }
      LODWORD(a2) = v5;
      BOOL v7 = __OFSUB__(a5--, 1);
      if ((a5 < 0) ^ v7 | (a5 == 0)) {
        return v5;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10 = *(void *)a1;
  int v12 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    signed int v14 = 0;
    uint64_t result = get_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!result) {
      break;
    }
    if (v14 > a4
      || v14 - a3 < 0
      || ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) == 0)
    {
      return result;
    }
    v12 += result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t get_utf8(uint64_t a1, int a2, int a3, unsigned int *a4)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t v4 = a2 + 1;
  unsigned int v5 = *(unsigned __int8 *)(a1 + a2);
  if (v5 < 0xC0 || v4 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v8 = a2 + 2;
    int v9 = *(unsigned char *)(a1 + v4) & 0x3F;
    if (v5 < 0xE0 || v8 == a3)
    {
      uint64_t result = 2;
      unsigned int v5 = v9 & 0xFFFFF83F | ((v5 & 0x1F) << 6);
    }
    else
    {
      int v11 = *(unsigned char *)(a1 + v8) & 0x3F;
      if (v5 < 0xF0 || (uint64_t v12 = a2 + 3, v12 == a3))
      {
        unsigned int v5 = ((v5 & 0xF) << 12) | (v9 << 6) | v11;
        uint64_t result = 3;
      }
      else
      {
        unsigned int v5 = (v5 << 18) & 0x380000 | (v9 << 12) | (v11 << 6) | *(unsigned char *)(a1 + v12) & 0x3F;
        uint64_t result = 4;
      }
    }
  }
  *a4 = v5;
  return result;
}

uint64_t in_grouping_b_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10 = *(void *)a1;
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    signed int v14 = 0;
    uint64_t result = get_b_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!result) {
      break;
    }
    if (v14 > a4
      || v14 - a3 < 0
      || ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) == 0)
    {
      return result;
    }
    v12 -= result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t get_b_utf8(uint64_t a1, int a2, int a3, unsigned int *a4)
{
  if (a2 <= a3) {
    return 0;
  }
  uint64_t v4 = a2 - 1;
  unsigned int v5 = *(unsigned __int8 *)(a1 + v4);
  uint64_t v6 = 1;
  if (v4 != a3 && *(char *)(a1 + v4) < 0)
  {
    int v7 = v5 & 0x3F;
    unsigned int v8 = *(unsigned __int8 *)(a1 + a2 - 2);
    __int16 v9 = (_WORD)v8 << 6;
    if (a2 - 2 == a3 || v8 >= 0xC0)
    {
      unsigned int v5 = v9 & 0x7C0 | v7;
      uint64_t v6 = 2;
    }
    else
    {
      int v10 = v9 & 0xFC0 | v7;
      unsigned int v11 = *(unsigned __int8 *)(a1 + a2 - 3);
      if (a2 - 3 == a3 || v11 >= 0xE0)
      {
        unsigned int v5 = v10 & 0xFFFF0FFF | ((v11 & 0xF) << 12);
        uint64_t v6 = 3;
      }
      else
      {
        unsigned int v5 = ((*(unsigned char *)(a2 + a1 - 4) & 0xE) << 18) | ((v11 & 0x3F) << 12) | v10;
        uint64_t v6 = 4;
      }
    }
  }
  *a4 = v5;
  return v6;
}

uint64_t out_grouping_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10 = *(void *)a1;
  int v12 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    signed int v14 = 0;
    uint64_t result = get_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!result) {
      break;
    }
    if (v14 <= a4
      && v14 - a3 >= 0
      && ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) != 0)
    {
      return result;
    }
    v12 += result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t out_grouping_b_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10 = *(void *)a1;
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    signed int v14 = 0;
    uint64_t result = get_b_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!result) {
      break;
    }
    if (v14 <= a4
      && v14 - a3 >= 0
      && ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) != 0)
    {
      return result;
    }
    v12 -= result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(int *)(a1 + 8);
  if ((int)v6 > v5) {
    int v5 = *(_DWORD *)(a1 + 8);
  }
  int v7 = v6 + 1;
  while (v5 != v6)
  {
    int v8 = *(unsigned __int8 *)(*(void *)a1 + v6);
    if (v8 > a4) {
      return 1;
    }
    unint64_t v9 = (v8 - a3);
    if ((v9 & 0x80000000) != 0 || ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) == 0) {
      return 1;
    }
    ++v6;
    *(_DWORD *)(a1 + 8) = v7++;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping_b(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(int *)(a1 + 16);
  uint64_t v6 = *(int *)(a1 + 8);
  int v7 = v6 - 1;
  while (v6 > v5)
  {
    int v8 = *(unsigned __int8 *)(*(void *)a1 + v6 - 1);
    if (v8 > a4) {
      return 1;
    }
    unint64_t v9 = (v8 - a3);
    if ((v9 & 0x80000000) != 0 || ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) == 0) {
      return 1;
    }
    *(_DWORD *)(a1 + 8) = v7--;
    --v6;
    if (!a5) {
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t out_grouping(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(int *)(a1 + 8);
  if ((int)v6 > v5) {
    int v5 = *(_DWORD *)(a1 + 8);
  }
  int v7 = v6 + 1;
  while (1)
  {
    if (v5 == v6) {
      return 0xFFFFFFFFLL;
    }
    int v8 = *(unsigned __int8 *)(*(void *)a1 + v6);
    if (v8 <= a4)
    {
      unint64_t v9 = (v8 - a3);
      if (v9 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7))) {
        break;
      }
    }
    ++v6;
    *(_DWORD *)(a1 + 8) = v7++;
    if (!a5) {
      return 0;
    }
  }
  return 1;
}

uint64_t out_grouping_b(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(int *)(a1 + 16);
  uint64_t v6 = *(int *)(a1 + 8);
  int v7 = v6 - 1;
  while (1)
  {
    if (v6 <= v5) {
      return 0xFFFFFFFFLL;
    }
    int v8 = *(unsigned __int8 *)(*(void *)a1 + v6 - 1);
    if (v8 <= a4)
    {
      unint64_t v9 = (v8 - a3);
      if (v9 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7))) {
        break;
      }
    }
    *(_DWORD *)(a1 + 8) = v7--;
    --v6;
    if (!a5) {
      return 0;
    }
  }
  return 1;
}

uint64_t eq_s(uint64_t a1, int a2, void *__s2)
{
  uint64_t v3 = *(int *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) - (int)v3 < a2 || memcmp((const void *)(*(void *)a1 + v3), __s2, a2)) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3 + a2;
  return 1;
}

uint64_t eq_s_b(uint64_t a1, int a2, void *__s2)
{
  uint64_t v3 = *(int *)(a1 + 8);
  if ((int)v3 - *(_DWORD *)(a1 + 16) < a2 || memcmp((const void *)(*(void *)a1 + v3 - a2), __s2, a2)) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3 - a2;
  return 1;
}

uint64_t eq_v(uint64_t a1, _DWORD *__s2)
{
  return eq_s(a1, *(__s2 - 1), __s2);
}

uint64_t eq_v_b(uint64_t a1, _DWORD *__s2)
{
  return eq_s_b(a1, *(__s2 - 1), __s2);
}

uint64_t find_among(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = *(int *)(a1 + 8);
  char v9 = 1;
  while (1)
  {
    int v10 = v5 + ((a3 - v5) >> 1);
    if (v6 >= v7) {
      LODWORD(v11) = v7;
    }
    else {
      LODWORD(v11) = v6;
    }
    uint64_t v12 = v10;
    int v13 = *(_DWORD *)(a2 + 32 * v10);
    if ((int)v11 >= v13)
    {
      int v14 = 0;
    }
    else
    {
      uint64_t v11 = (int)v11;
      while (*(_DWORD *)(a1 + 12) - v8 != v11)
      {
        int v14 = *(unsigned __int8 *)(*(void *)a1 + v8 + v11)
            - *(unsigned __int8 *)(*(void *)(a2 + 32 * v12 + 8) + v11);
        if (v14) {
          goto LABEL_13;
        }
        if (++v11 >= v13)
        {
          int v14 = 0;
          LODWORD(v11) = v13;
          goto LABEL_13;
        }
      }
      int v14 = -1;
    }
LABEL_13:
    if (v14 < 0) {
      a3 = v12;
    }
    else {
      int v5 = v12;
    }
    if (v14 < 0) {
      int v7 = v11;
    }
    else {
      int v6 = v11;
    }
    if (a3 - v5 <= 1)
    {
      BOOL v15 = v5 >= 1 || a3 == v5;
      BOOL v16 = !v15;
      char v17 = v16 & v9;
      char v9 = 0;
      if ((v17 & 1) == 0) {
        break;
      }
    }
  }
  while (1)
  {
    uint64_t v18 = v5;
    uint64_t v19 = a2 + 32 * v5;
    if (v6 >= *(_DWORD *)v19)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v19 + v8;
      int v20 = *(uint64_t (**)(uint64_t))(v19 + 24);
      if (!v20) {
        break;
      }
      int v21 = v20(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v19 + v8;
      if (v21) {
        break;
      }
    }
    int v5 = *(_DWORD *)(v19 + 16);
    if (v5 < 0) {
      return 0;
    }
  }
  return *(unsigned int *)(a2 + 32 * v18 + 20);
}

uint64_t find_among_b(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = *(int *)(a1 + 8);
  int v9 = v8 - *(_DWORD *)(a1 + 16);
  uint64_t v10 = v8 + *(void *)a1 - 1;
  char v11 = 1;
  while (1)
  {
    int v12 = v5 + ((a3 - v5) >> 1);
    if (v6 >= v7) {
      int v13 = v7;
    }
    else {
      int v13 = v6;
    }
    uint64_t v14 = v12;
    int v15 = *(_DWORD *)(a2 + 32 * v12);
    if (v15 + ~v13 < 0)
    {
      int v19 = 0;
      int v16 = v13;
    }
    else
    {
      int v16 = v13;
      char v17 = (unsigned __int8 *)(v10 - v13);
      int v18 = v15 - v13;
      while (v9 != v16)
      {
        int v19 = *v17 - *(unsigned __int8 *)(*(void *)(a2 + 32 * v14 + 8) + --v18);
        if (v19) {
          goto LABEL_13;
        }
        ++v16;
        --v17;
        if (v18 <= 0)
        {
          int v19 = 0;
          int v16 = v15;
          goto LABEL_13;
        }
      }
      int v19 = -1;
    }
LABEL_13:
    if (v19 < 0) {
      a3 = v14;
    }
    else {
      int v5 = v14;
    }
    if (v19 < 0) {
      int v7 = v16;
    }
    else {
      int v6 = v16;
    }
    if (a3 - v5 <= 1)
    {
      BOOL v20 = v5 >= 1 || a3 == v5;
      BOOL v21 = !v20;
      char v22 = v21 & v11;
      char v11 = 0;
      if ((v22 & 1) == 0) {
        break;
      }
    }
  }
  while (1)
  {
    uint64_t v23 = v5;
    uint64_t v24 = a2 + 32 * v5;
    if (v6 >= *(_DWORD *)v24)
    {
      *(_DWORD *)(a1 + 8) = v8 - *(_DWORD *)v24;
      uint64_t v25 = *(uint64_t (**)(uint64_t))(v24 + 24);
      if (!v25) {
        break;
      }
      int v26 = v25(a1);
      *(_DWORD *)(a1 + 8) = v8 - *(_DWORD *)v24;
      if (v26) {
        break;
      }
    }
    int v5 = *(_DWORD *)(v24 + 16);
    if (v5 < 0) {
      return 0;
    }
  }
  return *(unsigned int *)(a2 + 32 * v23 + 20);
}

uint64_t replace_s(uint64_t a1, int a2, int a3, int a4, void *__src, _DWORD *a6)
{
  int v12 = *(_DWORD **)a1;
  if (!v12)
  {
    int v13 = malloc_type_malloc(0xAuLL, 0x86595534uLL);
    if (!v13)
    {
      *(void *)a1 = 0;
      return 0xFFFFFFFFLL;
    }
    *int v13 = 1;
    int v12 = v13 + 1;
    *(void *)a1 = v12;
  }
  int v14 = a2 - a3 + a4;
  if (!v14) {
    goto LABEL_12;
  }
  int v15 = *(v12 - 1);
  if (v15 + v14 > *(v12 - 2))
  {
    int v12 = increase_size((uint64_t)v12, v15 + v14);
    *(void *)a1 = v12;
    if (!v12) {
      return 0xFFFFFFFFLL;
    }
  }
  memmove((char *)v12 + a3 + v14, (char *)v12 + a3, v15 - a3);
  int v12 = *(_DWORD **)a1;
  *(_DWORD *)(*(void *)a1 - 4) = v15 + v14;
  int v16 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) += v14;
  if (v16 >= a3)
  {
    int v17 = v16 + v14;
  }
  else
  {
    int v17 = a2;
    if (v16 <= a2) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)(a1 + 8) = v17;
LABEL_12:
  if (a4) {
    memmove((char *)v12 + a2, __src, a4);
  }
  uint64_t result = 0;
  if (a6) {
    *a6 = v14;
  }
  return result;
}

_DWORD *increase_size(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)(a1 - 8);
  int v5 = malloc_type_realloc((void *)(a1 - 8), a2 + 29, 0x36394E3EuLL);
  if (v5)
  {
    *int v5 = a2 + 20;
    return v5 + 2;
  }
  else
  {
    if (a1) {
      free(v4);
    }
    return 0;
  }
}

uint64_t slice_from_s(uint64_t a1, int a2, void *__src)
{
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x80000000) == 0
    && (int v6 = *(_DWORD *)(a1 + 24), v4 <= v6)
    && (int v7 = *(_DWORD *)(a1 + 12), v6 <= v7)
    && *(void *)a1
    && v7 <= *(_DWORD *)(*(void *)a1 - 4))
  {
    return replace_s(a1, v4, v6, a2, __src, 0);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t slice_from_v(uint64_t a1, _DWORD *__src)
{
  return slice_from_s(a1, *(__src - 1), __src);
}

uint64_t slice_del(uint64_t a1)
{
  return slice_from_s(a1, 0, 0);
}

uint64_t insert_s(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  int v10 = 0;
  if (replace_s(a1, a2, a3, a4, a5, &v10)) {
    return 0xFFFFFFFFLL;
  }
  int v8 = *(_DWORD *)(a1 + 20);
  if (v8 >= a2) {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v10 + v8;
  }
  int v9 = *(_DWORD *)(a1 + 24);
  uint64_t result = 0;
  if (v9 >= a2) {
    *(_DWORD *)(a1 + 24) = v10 + v9;
  }
  return result;
}

uint64_t insert_v(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return insert_s(a1, a2, a3, *(a4 - 1), a4);
}

_DWORD *slice_to(uint64_t *a1, _DWORD *__dst)
{
  int v2 = __dst;
  int v3 = *((_DWORD *)a1 + 5);
  if ((v3 & 0x80000000) == 0)
  {
    int v5 = *((_DWORD *)a1 + 6);
    int v6 = v5 - v3;
    if (v5 >= v3)
    {
      int v7 = *((_DWORD *)a1 + 3);
      if (v5 <= v7)
      {
        uint64_t v8 = *a1;
        if (*a1)
        {
          if (v7 <= *(_DWORD *)(v8 - 4))
          {
            if (*(__dst - 2) < v6)
            {
              int v2 = increase_size((uint64_t)__dst, v6);
              if (!v2) {
                return v2;
              }
              uint64_t v8 = *a1;
              int v3 = *((_DWORD *)a1 + 5);
            }
            memmove(v2, (const void *)(v8 + v3), v6);
            *(v2 - 1) = v6;
            return v2;
          }
        }
      }
    }
  }
  if (__dst)
  {
    free(__dst - 2);
    return 0;
  }
  return v2;
}

_DWORD *assign_to(uint64_t a1, _DWORD *__dst)
{
  int v2 = __dst;
  int v4 = *(_DWORD *)(a1 + 12);
  if (*(__dst - 2) >= v4 || (int v2 = increase_size((uint64_t)__dst, v4)) != 0)
  {
    memmove(v2, *(const void **)a1, v4);
    *(v2 - 1) = v4;
  }
  return v2;
}

uint64_t len_utf8(char *a1)
{
  int v1 = *((_DWORD *)a1 - 1);
  if (!v1) {
    return 0;
  }
  LODWORD(v2) = 0;
  do
  {
    int v3 = *a1++;
    if (v3 <= -65) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = (v2 + 1);
    }
    --v1;
  }
  while (v1);
  return v2;
}

uint64_t german_UTF_8_stem(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = v2;
  while (1)
  {
    while (1)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
      if (!eq_s(a1, 2, &s_0_145)) {
        break;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      uint64_t result = slice_from_s(a1, 2, &s_1_55);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v3 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v3;
    uint64_t v5 = skip_utf8(*(void *)a1, v3, 0, *(unsigned int *)(a1 + 12), 1);
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    uint64_t v3 = v5;
    *(_DWORD *)(a1 + 8) = v5;
  }
  uint64_t v6 = v2;
  do
  {
    while (1)
    {
      *(_DWORD *)(a1 + 8) = v6;
      int v7 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0);
      uint64_t v8 = *(unsigned int *)(a1 + 12);
      if (v7)
      {
        uint64_t v10 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
      if (v9 != v8 && *(unsigned char *)(*(void *)a1 + (int)v9) == 117)
      {
        *(_DWORD *)(a1 + 8) = v9 + 1;
        *(_DWORD *)(a1 + 24) = v9 + 1;
        if (!in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0))
        {
          uint64_t v11 = a1;
          int v12 = &s_2_55;
          goto LABEL_17;
        }
        uint64_t v8 = *(unsigned int *)(a1 + 12);
      }
      *(_DWORD *)(a1 + 8) = v9;
      uint64_t v10 = v9;
      if (v9 == v8) {
        break;
      }
      uint64_t v10 = v8;
      if (*(unsigned char *)(*(void *)a1 + (int)v9) != 121) {
        break;
      }
      *(_DWORD *)(a1 + 8) = v9 + 1;
      *(_DWORD *)(a1 + 24) = v9 + 1;
      if (in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0))
      {
        uint64_t v10 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v11 = a1;
      int v12 = &s_3_100;
LABEL_17:
      uint64_t result = slice_from_s(v11, 1, v12);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    *(_DWORD *)(a1 + 8) = v6;
    uint64_t v6 = skip_utf8(*(void *)a1, v6, 0, v10, 1);
  }
  while ((v6 & 0x80000000) == 0);
  *(_DWORD *)(a1 + 8) = v2;
  int v13 = *(_DWORD **)(a1 + 40);
  *int v13 = *(_DWORD *)(a1 + 12);
  v13[1] = *(_DWORD *)(a1 + 12);
  unsigned int v14 = *(_DWORD *)(a1 + 8);
  int v15 = skip_utf8(*(void *)a1, v14, 0, *(unsigned int *)(a1 + 12), 3);
  if ((v15 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 8) = v15;
    *(_DWORD *)(a1 + 8) = v14;
    int v16 = out_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
    if ((v16 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) += v16;
      int v17 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
      if ((v17 & 0x80000000) == 0)
      {
        int v18 = *(_DWORD *)(a1 + 8) + v17;
        *(_DWORD *)(a1 + 8) = v18;
        int v19 = *(_DWORD **)(a1 + 40);
        if (v18 <= v19[2]) {
          int v18 = v19[2];
        }
        *int v19 = v18;
        int v20 = out_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
        if ((v20 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 8) += v20;
          int v21 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
          if ((v21 & 0x80000000) == 0) {
            *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v21;
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  uint64_t v22 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if ((int)v22 > (int)v2
    && (char v23 = *(unsigned char *)(v22 + *(void *)a1 - 1), (v23 & 0xE0) == 0x60)
    && ((0xC6020u >> v23) & 1) != 0
    && (int v24 = find_among_b(a1, (uint64_t)&a_1_15, 7)) != 0
    && (int v25 = *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20) = v25, **(_DWORD **)(a1 + 40) <= v25))
  {
    switch(v24)
    {
      case 3:
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_0, 98, 116, 0)) {
          goto LABEL_36;
        }
        break;
      case 2:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v45 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v45;
        if ((int)v45 <= *(_DWORD *)(a1 + 16)) {
          goto LABEL_36;
        }
        uint64_t v46 = v45 - 1;
        if (*(unsigned char *)(*(void *)a1 + v46) != 115) {
          goto LABEL_36;
        }
        *(_DWORD *)(a1 + 8) = v46;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v46;
        if (!eq_s_b(a1, 3, &s_8_106)) {
          goto LABEL_36;
        }
        break;
      case 1:
        break;
      default:
        goto LABEL_36;
    }
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    int v26 = *(_DWORD *)(a1 + 16);
    uint64_t v27 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 24) = v27;
    uint64_t v28 = v27 - 1;
    if ((int)v28 <= v26) {
      goto LABEL_50;
    }
    char v29 = *(unsigned char *)(*(void *)a1 + v28);
    if ((v29 & 0xE0) != 0x60) {
      goto LABEL_50;
    }
    if (((0x144000u >> v29) & 1) == 0) {
      goto LABEL_50;
    }
    among_CGFloat b = find_among_b(a1, (uint64_t)&a_2_14, 4);
    if (!among_b) {
      goto LABEL_50;
    }
    int v31 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v31;
    if (**(_DWORD **)(a1 + 40) > v31) {
      goto LABEL_50;
    }
    if (among_b != 2)
    {
      if (among_b == 1) {
        goto LABEL_43;
      }
      goto LABEL_50;
    }
    if (in_grouping_b_U(a1, (uint64_t)&g_st_ending, 98, 116, 0)) {
      goto LABEL_50;
    }
    int v53 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 12), -3);
    if (v53 < 0) {
      goto LABEL_50;
    }
    *(_DWORD *)(a1 + 8) = v53;
LABEL_43:
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
LABEL_50:
      int v32 = *(_DWORD *)(a1 + 16);
      uint64_t v33 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v33;
      *(_DWORD *)(a1 + 24) = v33;
      uint64_t v34 = v33 - 1;
      if ((int)v34 > v32
        && (char v35 = *(unsigned char *)(*(void *)a1 + v34), (v35 & 0xE0) == 0x60)
        && ((0x100990u >> v35) & 1) != 0
        && (int v36 = find_among_b(a1, (uint64_t)&a_4_11, 8)) != 0
        && (uint64_t v37 = *(int *)(a1 + 8), *(_DWORD *)(a1 + 20) = v37, *(_DWORD *)(*(void *)(a1 + 40) + 4) <= (int)v37))
      {
        switch(v36)
        {
          case 1:
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (eq_s_b(a1, 2, &s_9_19))
            {
              uint64_t v44 = *(int *)(a1 + 8);
              *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v44;
              if (((int)v44 <= *(_DWORD *)(a1 + 16) || *(unsigned char *)(v44 + *(void *)a1 - 1) != 101)
                && *(_DWORD *)(*(void *)(a1 + 40) + 4) <= (int)v44)
              {
                goto LABEL_90;
              }
            }
            goto LABEL_55;
          case 2:
            if ((int)v37 > *(_DWORD *)(a1 + 16) && *(unsigned char *)(v37 + *(void *)a1 - 1) == 101) {
              goto LABEL_55;
            }
            goto LABEL_90;
          case 3:
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v48 = *(_DWORD *)(a1 + 8);
            int v47 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 24) = v48;
            if (eq_s_b(a1, 2, &s_10_38)
              || (*(_DWORD *)(a1 + 8) = v48 - v47 + *(_DWORD *)(a1 + 12), eq_s_b(a1, 2, &s_11_49)))
            {
              int v49 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v49;
              if (**(_DWORD **)(a1 + 40) <= v49) {
                goto LABEL_90;
              }
            }
            goto LABEL_55;
          case 4:
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v50 = *(_DWORD *)(a1 + 12);
            uint64_t v51 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v51;
            if ((int)v51 - 1 <= *(_DWORD *)(a1 + 16)
              || *(unsigned __int8 *)(*(void *)a1 + v51 - 1) - 103 > 1
              || !find_among_b(a1, (uint64_t)&a_3_13, 2))
            {
              goto LABEL_55;
            }
            int v52 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v52;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v52)
            {
              *(_DWORD *)(a1 + 8) = v51 - v50 + *(_DWORD *)(a1 + 12);
              goto LABEL_55;
            }
LABEL_90:
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) == 0) {
              goto LABEL_55;
            }
            break;
          default:
            goto LABEL_55;
        }
      }
      else
      {
LABEL_55:
        int v38 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v38;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v38;
        int among = find_among(a1, (uint64_t)&a_0_15, 6);
        if (among)
        {
          while (2)
          {
            uint64_t v40 = *(unsigned int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            switch(among)
            {
              case 1:
                uint64_t v41 = a1;
                int v42 = &s_4_101;
                goto LABEL_61;
              case 2:
                uint64_t v41 = a1;
                int v42 = &s_5_55;
                goto LABEL_61;
              case 3:
                uint64_t v41 = a1;
                int v42 = &s_6_130;
                goto LABEL_61;
              case 4:
                uint64_t v41 = a1;
                int v42 = &s_7_91;
LABEL_61:
                uint64_t result = slice_from_s(v41, 1, v42);
                if ((result & 0x80000000) == 0) {
                  goto LABEL_62;
                }
                return result;
              case 5:
                int v43 = skip_utf8(*(void *)a1, v40, 0, *(unsigned int *)(a1 + 12), 1);
                if (v43 < 0) {
                  break;
                }
                *(_DWORD *)(a1 + 8) = v43;
                goto LABEL_62;
              default:
LABEL_62:
                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
                int among = find_among(a1, (uint64_t)&a_0_15, 6);
                if (!among) {
                  break;
                }
                continue;
            }
            break;
          }
        }
        *(_DWORD *)(a1 + 8) = v38;
        return 1;
      }
    }
  }
  return result;
}

void *german_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void german_UTF_8_close_env(uint64_t a1)
{
}

uint64_t basque_UTF_8_stem(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 40);
  _DWORD *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  v2[2] = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
    {
      int v7 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
    if (!in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
    {
      int v7 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0)) {
    goto LABEL_16;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0)
    || (int v7 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1), v7 < 0))
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0)) {
      goto LABEL_16;
    }
    int v6 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
    if (v6 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_14:
    int v6 = *(_DWORD *)(a1 + 8) + v7;
  }
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
LABEL_16:
  *(_DWORD *)(a1 + 8) = v3;
  int v8 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v8;
    int v9 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
    if ((v9 & 0x80000000) == 0)
    {
      int v10 = *(_DWORD *)(a1 + 8) + v9;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(*(void *)(a1 + 40) + 4) = v10;
      int v11 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        int v12 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
        if ((v12 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v12;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  int v14 = v13 - 1;
  if (v13 - 1 <= v3)
  {
    int v15 = v13;
  }
  else
  {
    int v15 = v13;
    while (2)
    {
      char v16 = *(unsigned char *)(*(void *)a1 + v14);
      if (v16 & 0xE0) == 0x60 && ((0x434C222u >> v16))
      {
        among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_16, 109);
        if (among_b)
        {
          int v18 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v18;
          switch(among_b)
          {
            case 1:
              int v19 = **(_DWORD **)(a1 + 40);
              goto LABEL_29;
            case 2:
              int v19 = *(_DWORD *)(*(void *)(a1 + 40) + 8);
LABEL_29:
              if (v19 > v18) {
                break;
              }
              uint64_t result = slice_del(a1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_36;
            case 3:
              uint64_t v21 = a1;
              int v22 = 7;
              char v23 = &s_0_146;
              goto LABEL_35;
            case 4:
              uint64_t v21 = a1;
              int v22 = 7;
              char v23 = &s_1_56;
              goto LABEL_35;
            case 5:
              uint64_t v21 = a1;
              int v22 = 6;
              char v23 = &s_2_56;
LABEL_35:
              uint64_t result = slice_from_s(v21, v22, v23);
              if ((result & 0x80000000) == 0) {
                goto LABEL_36;
              }
              return result;
            default:
LABEL_36:
              int v13 = *(_DWORD *)(a1 + 8);
              int v15 = *(_DWORD *)(a1 + 12);
              *(_DWORD *)(a1 + 24) = v13;
              int v14 = v13 - 1;
              if (v13 - 1 <= *(_DWORD *)(a1 + 16)) {
                break;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  int v25 = *(_DWORD *)(a1 + 12);
  int v24 = *(_DWORD *)(a1 + 16);
  int v26 = v13 - v15 + v25;
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 24) = v26;
  if (v26 > v24)
  {
    while (2)
    {
      char v27 = *(unsigned char *)(*(void *)a1 + v26 - 1);
      if (v27 & 0xE0) == 0x60 && ((0x43DDA22u >> v27))
      {
        int v28 = find_among_b(a1, (uint64_t)&a_1_16, 295);
        if (v28)
        {
          int v29 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v29;
          switch(v28)
          {
            case 1:
              int v30 = **(_DWORD **)(a1 + 40);
              goto LABEL_48;
            case 2:
              int v30 = *(_DWORD *)(*(void *)(a1 + 40) + 8);
              goto LABEL_48;
            case 3:
              uint64_t v31 = a1;
              int v32 = 3;
              uint64_t v33 = &s_3_101;
              goto LABEL_57;
            case 4:
              int v30 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
LABEL_48:
              if (v30 > v29) {
                break;
              }
              uint64_t result = slice_del(a1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_58;
            case 5:
              uint64_t v31 = a1;
              int v32 = 3;
              uint64_t v33 = &s_4_102;
              goto LABEL_57;
            case 6:
              uint64_t v31 = a1;
              int v32 = 6;
              uint64_t v33 = &s_5_56;
              goto LABEL_57;
            case 7:
              uint64_t v31 = a1;
              int v32 = 5;
              uint64_t v33 = &s_6_131;
              goto LABEL_57;
            case 8:
              uint64_t v31 = a1;
              int v32 = 5;
              uint64_t v33 = &s_7_92;
              goto LABEL_57;
            case 9:
              uint64_t v31 = a1;
              int v32 = 5;
              uint64_t v33 = &s_8_107;
              goto LABEL_57;
            case 10:
              uint64_t v31 = a1;
              int v32 = 5;
              uint64_t v33 = &s_9_20;
LABEL_57:
              uint64_t result = slice_from_s(v31, v32, v33);
              if ((result & 0x80000000) == 0) {
                goto LABEL_58;
              }
              return result;
            default:
LABEL_58:
              int v26 = *(_DWORD *)(a1 + 8);
              int v25 = *(_DWORD *)(a1 + 12);
              *(_DWORD *)(a1 + 24) = v26;
              if (v26 <= *(_DWORD *)(a1 + 16)) {
                break;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  int v34 = *(_DWORD *)(a1 + 16);
  int v35 = *(_DWORD *)(a1 + 12) + v26 - v25;
  *(_DWORD *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 24) = v35;
  uint64_t v36 = v35 - 1;
  if ((int)v36 <= v34) {
    goto LABEL_69;
  }
  char v37 = *(unsigned char *)(*(void *)a1 + v36);
  if ((v37 & 0xE0) != 0x60) {
    goto LABEL_69;
  }
  if (((0x8A22u >> v37) & 1) == 0) {
    goto LABEL_69;
  }
  int v38 = find_among_b(a1, (uint64_t)&a_2_15, 19);
  if (!v38) {
    goto LABEL_69;
  }
  int v39 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v39;
  if (v38 == 2)
  {
    uint64_t result = slice_from_s(a1, 1, &s_10_39);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    goto LABEL_69;
  }
  if (v38 != 1 || **(_DWORD **)(a1 + 40) > v39 || (uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_69:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    return 1;
  }
  return result;
}

void *basque_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void basque_UTF_8_close_env(uint64_t a1)
{
}

void *SN_create_env(int a1, int a2, int a3)
{
  int v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x1090040893BA05AuLL);
  if (!v6) {
    return v6;
  }
  s = create_s();
  *int v6 = s;
  if (!s) {
    goto LABEL_13;
  }
  if (!a1) {
    goto LABEL_9;
  }
  int v8 = malloc_type_calloc(a1, 8uLL, 0x10040436913F5uLL);
  v6[4] = v8;
  if (!v8)
  {
LABEL_13:
    SN_close_env((uint64_t)v6, a1);
    return 0;
  }
  if (a1 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      *(void *)(v6[4] + v9) = create_s();
      if (!*(void *)(v6[4] + v9)) {
        goto LABEL_13;
      }
      v9 += 8;
    }
    while (8 * a1 != v9);
  }
LABEL_9:
  if (a2)
  {
    int v10 = malloc_type_calloc(a2, 4uLL, 0x100004052888210uLL);
    void v6[5] = v10;
    if (!v10) {
      goto LABEL_13;
    }
  }
  if (a3)
  {
    int v11 = malloc_type_calloc(a3, 1uLL, 0x100004077774924uLL);
    v6[6] = v11;
    if (!v11) {
      goto LABEL_13;
    }
  }
  return v6;
}

void SN_close_env(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      if (a2 >= 1)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 8 * a2;
        do
        {
          lose_s(*(void *)(*(void *)(a1 + 32) + v3));
          v3 += 8;
        }
        while (v4 != v3);
      }
      free(*(void **)(a1 + 32));
    }
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    if (*(void *)a1) {
      lose_s(*(void *)a1);
    }
    free((void *)a1);
  }
}

uint64_t SN_set_current(uint64_t a1, int a2, void *__src)
{
  uint64_t result = replace_s(a1, 0, *(_DWORD *)(a1 + 12), a2, __src, 0);
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t norwegian_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_12, 97, 248, 1) & 0x80000000) == 0)
    {
      int v5 = in_grouping_U(a1, (uint64_t)&g_v_12, 97, 248, 1);
      if ((v5 & 0x80000000) == 0)
      {
        int v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        int v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1]) {
          int v6 = v7[1];
        }
        *int v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  int v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 <= v9
      || (char v10 = *(unsigned char *)(v8 + *(void *)a1 - 1), (v10 & 0xE0) != 0x60)
      || ((0x1C4022u >> v10) & 1) == 0
      || (among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_17, 29)) == 0)
    {
      *(_DWORD *)(a1 + 16) = v2;
      goto LABEL_17;
    }
    int v12 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
    if (among_b == 3)
    {
      uint64_t result = slice_from_s(a1, 2, &s_0_147);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      if (among_b == 2)
      {
        int v27 = *(_DWORD *)(a1 + 12);
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_1, 98, 122, 0))
        {
          int v28 = *(_DWORD *)(a1 + 16);
          int v29 = *(_DWORD *)(a1 + 12) + v12 - v27;
          *(_DWORD *)(a1 + 8) = v29;
          if (v29 <= v28) {
            goto LABEL_17;
          }
          uint64_t v30 = v29 - 1;
          if (*(unsigned char *)(*(void *)a1 + v30) != 107) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 8) = v30;
          if (out_grouping_b_U(a1, (uint64_t)&g_v_12, 97, 248, 0)) {
            goto LABEL_17;
          }
        }
      }
      else if (among_b != 1)
      {
        goto LABEL_17;
      }
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
  }
LABEL_17:
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  int v14 = **(_DWORD **)(a1 + 40);
  if (v13 >= v14)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v13;
    uint64_t v16 = v13 - 1;
    if ((int)v16 > v14 && *(unsigned char *)(*(void *)a1 + v16) == 116 && find_among_b(a1, (uint64_t)&a_1_17, 2))
    {
      int v18 = *(_DWORD *)(a1 + 8);
      uint64_t v17 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v18;
      *(_DWORD *)(a1 + 8) = v17;
      int v19 = skip_utf8(*(void *)a1, v17, v15, 0, -1);
      if ((v19 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = v19;
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v15;
    }
  }
  int v21 = *(_DWORD *)(a1 + 12);
  int v22 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v21;
  int v23 = **(_DWORD **)(a1 + 40);
  if (v21 >= v23)
  {
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v21;
    uint64_t v24 = v21 - 1;
    if ((int)v24 > v23
      && (char v25 = *(unsigned char *)(*(void *)a1 + v24), (v25 & 0xE0) == 0x60)
      && ((0x480080u >> v25) & 1) != 0
      && find_among_b(a1, (uint64_t)&a_2_16, 11))
    {
      int v26 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v26;
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v22;
    }
  }
  *(_DWORD *)(a1 + 8) = v22;
  return 1;
}

void *norwegian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void norwegian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t russian_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
LABEL_2:
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  while (1)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
    if (eq_s(a1, 2, &s_9_21))
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3;
      uint64_t v5 = slice_from_s(a1, 2, &s_10_40);
      if ((v5 & 0x80000000) == 0) {
        goto LABEL_2;
      }
      return v5;
    }
    *(_DWORD *)(a1 + 8) = v3;
    uint64_t v4 = skip_utf8(*(void *)a1, v3, 0, *(unsigned int *)(a1 + 12), 1);
    if ((v4 & 0x80000000) != 0) {
      break;
    }
    uint64_t v3 = v4;
    *(_DWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 8) = v2;
  int v6 = *(_DWORD **)(a1 + 40);
  *int v6 = *(_DWORD *)(a1 + 12);
  v6[1] = *(_DWORD *)(a1 + 12);
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = out_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
  if ((v8 & 0x80000000) == 0)
  {
    int v9 = *(_DWORD *)(a1 + 8) + v8;
    *(_DWORD *)(a1 + 8) = v9;
    **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v9;
    int v10 = in_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
    if ((v10 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) += v10;
      int v11 = out_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        int v12 = in_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
        if ((v12 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v12;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  int v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  int v14 = **(_DWORD **)(a1 + 40);
  if (v13 < v14) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 24) = v13;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_18, 9);
  if (!among_b)
  {
LABEL_20:
    int v20 = *(_DWORD *)(a1 + 12);
    int v19 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a1 + 24) = v20;
    if (v20 - 3 > v19)
    {
      int v21 = *(unsigned __int8 *)(v20 + *(void *)a1 - 1);
      if (v21 == 143 || v21 == 140)
      {
        if (find_among_b(a1, (uint64_t)&a_3_14, 2))
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          uint64_t v5 = slice_del(a1);
          if ((v5 & 0x80000000) != 0) {
            return v5;
          }
          int v20 = *(_DWORD *)(a1 + 8);
          int v22 = *(_DWORD *)(a1 + 12);
LABEL_28:
          *(_DWORD *)(a1 + 24) = v20;
          if (find_among_b(a1, (uint64_t)&a_1_18, 26))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            uint64_t v5 = slice_del(a1);
            if ((v5 & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              int v23 = find_among_b(a1, (uint64_t)&a_2_17, 8);
              if (v23)
              {
                int v24 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v24;
                if (v23 == 2) {
                  goto LABEL_35;
                }
                if (v23 == 1)
                {
                  int v25 = *(_DWORD *)(a1 + 12);
                  if (eq_s_b(a1, 2, &s_2_57)) {
                    goto LABEL_35;
                  }
                  *(_DWORD *)(a1 + 8) = v24 - v25 + *(_DWORD *)(a1 + 12);
                  if (eq_s_b(a1, 2, &s_3_102)) {
                    goto LABEL_35;
                  }
                }
              }
              goto LABEL_36;
            }
            return v5;
          }
          int v34 = v22 - v20;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v34;
          uint64_t v35 = r_verb((_DWORD *)a1);
          unsigned int v36 = v35 >> 31;
          if (v35) {
            unsigned int v37 = v35 >> 31;
          }
          else {
            unsigned int v37 = 13;
          }
          if (v37)
          {
            uint64_t v15 = v35;
            if (v37 == 13)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v34;
              int v38 = r_noun((_DWORD *)a1);
              if (v38 >= 0) {
                uint64_t v15 = v15;
              }
              else {
                uint64_t v15 = v38;
              }
              if (!v38) {
                goto LABEL_36;
              }
              unsigned int v36 = v38 >> 31;
            }
            if (v36) {
              return v15;
            }
          }
LABEL_36:
          int v26 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 8) = v26;
          *(_DWORD *)(a1 + 24) = v26;
          if (eq_s_b(a1, 2, &s_11_50))
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            uint64_t v5 = slice_del(a1);
            if ((v5 & 0x80000000) != 0) {
              return v5;
            }
            int v27 = *(_DWORD *)(a1 + 8);
            int v28 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            int v27 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v27;
            int v28 = v27;
          }
          *(_DWORD *)(a1 + 24) = v27;
          if (v27 - 5 > *(_DWORD *)(a1 + 16))
          {
            int v29 = *(unsigned __int8 *)(*(void *)a1 + v27 - 1);
            if (v29 == 140 || v29 == 130)
            {
              if (find_among_b(a1, (uint64_t)&a_6_7, 2))
              {
                int v30 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v30;
                if (*(_DWORD *)(*(void *)(a1 + 40) + 4) <= v30)
                {
                  uint64_t v5 = slice_del(a1);
                  if ((v5 & 0x80000000) != 0) {
                    return v5;
                  }
                }
              }
            }
          }
          int v31 = *(_DWORD *)(a1 + 12) + v27 - v28;
          *(_DWORD *)(a1 + 8) = v31;
          *(_DWORD *)(a1 + 24) = v31;
          int v32 = find_among_b(a1, (uint64_t)&a_7_8, 4);
          if (v32)
          {
            *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
            switch(v32)
            {
              case 3:
LABEL_67:
                uint64_t v5 = slice_del(a1);
                if ((v5 & 0x80000000) != 0) {
                  return v5;
                }
                break;
              case 2:
                uint64_t v33 = &s_8_108;
LABEL_66:
                if (!eq_s_b(a1, 2, v33)) {
                  break;
                }
                goto LABEL_67;
              case 1:
                uint64_t v5 = slice_del(a1);
                if ((v5 & 0x80000000) != 0) {
                  return v5;
                }
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
                if (eq_s_b(a1, 2, &s_6_132))
                {
                  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
                  uint64_t v33 = &s_7_93;
                  goto LABEL_66;
                }
                break;
            }
          }
          *(_DWORD *)(a1 + 16) = v7;
          *(_DWORD *)(a1 + 8) = v7;
          return 1;
        }
        int v20 = *(_DWORD *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v20;
    int v22 = v20;
    goto LABEL_28;
  }
  int v17 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v17;
  if (among_b == 2) {
    goto LABEL_35;
  }
  if (among_b != 1) {
    goto LABEL_36;
  }
  int v18 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 2, &s_0_148))
  {
    *(_DWORD *)(a1 + 8) = v17 - v18 + *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 2, &s_1_295)) {
      goto LABEL_20;
    }
  }
LABEL_35:
  uint64_t v5 = slice_del(a1);
  if ((v5 & 0x80000000) == 0) {
    goto LABEL_36;
  }
  return v5;
}

uint64_t r_verb(_DWORD *a1)
{
  a1[6] = a1[2];
  uint64_t result = find_among_b((uint64_t)a1, (uint64_t)&a_4_12, 46);
  if (result)
  {
    int v3 = a1[2];
    a1[5] = v3;
    if (result == 2) {
      goto LABEL_6;
    }
    if (result != 1) {
      return 1;
    }
    int v4 = a1[3];
    if (eq_s_b((uint64_t)a1, 2, &s_4_103)
      || (a1[2] = v3 - v4 + a1[3], uint64_t result = eq_s_b((uint64_t)a1, 2, &s_5_57), result))
    {
LABEL_6:
      uint64_t result = slice_del((uint64_t)a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t r_noun(_DWORD *a1)
{
  a1[6] = a1[2];
  uint64_t result = find_among_b((uint64_t)a1, (uint64_t)&a_5_11, 36);
  if (result)
  {
    a1[5] = a1[2];
    LODWORD(result) = slice_del((uint64_t)a1);
    if ((int)result >= 0) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

void *russian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void russian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t turkish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = out_grouping_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  if (v3 < 0)
  {
    uint64_t v12 = 0;
LABEL_44:
    *(_DWORD *)(a1 + 8) = v2;
    return v12;
  }
  int v4 = 3;
  do
  {
    int v5 = *(_DWORD *)(a1 + 8) + v3;
    *(_DWORD *)(a1 + 8) = v5;
    int v3 = out_grouping_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
    --v4;
  }
  while ((v3 & 0x80000000) == 0);
  if (v4 >= 2) {
    int v6 = v5;
  }
  else {
    int v6 = v2;
  }
  *(_DWORD *)(a1 + 8) = v6;
  if (v4 > 1) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = v2;
  int v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  **(unsigned char **)(a1 + 48) = 1;
  int v9 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  uint64_t v10 = r_mark_ymUs_(a1);
  unsigned int v11 = v10 >> 31;
  if (!v10) {
    unsigned int v11 = 2;
  }
  if (!v11) {
    goto LABEL_60;
  }
  uint64_t v12 = v10;
  if (v11 != 2)
  {
LABEL_59:
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    goto LABEL_60;
  }
  int v13 = v8 - v9;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (r_mark_yDU(a1)) {
    goto LABEL_60;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (r_mark_ysA(a1)) {
    goto LABEL_60;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (eq_s_b(a1, 3, &s_4_104))
  {
    if (r_mark_suffix_with_optional_y_consonant(a1)) {
      goto LABEL_60;
    }
  }
  int v15 = *(_DWORD *)(a1 + 12);
  int v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v15 - v13;
  if (v15 - v13 - 5 > v14 && (*(unsigned __int8 *)(*(void *)a1 + v15 - v13 - 1) | 4) == 0x65)
  {
    among_CGFloat b = find_among_b(a1, (uint64_t)&a_19_2, 2);
    int v15 = *(_DWORD *)(a1 + 12);
    if (among_b)
    {
      int v17 = *(_DWORD *)(a1 + 8);
      if (!r_mark_sUnUz(a1))
      {
        int v18 = v15 - v17;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
        if (!r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
          if (!r_mark_yUm(a1))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
            if (!r_mark_sUn(a1))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
              if (!r_mark_yUz(a1)) {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
              }
            }
          }
        }
      }
      int v19 = r_mark_ymUs_(a1);
      if (v19 >= 0) {
        unsigned int v20 = v12;
      }
      else {
        unsigned int v20 = v19;
      }
      if (v19) {
        uint64_t v12 = v20;
      }
      else {
        uint64_t v12 = v12;
      }
      if (v19) {
        int v21 = v19 >> 31;
      }
      else {
        int v21 = 8;
      }
      if (!v21) {
        goto LABEL_60;
      }
      if (v21 != 8)
      {
        if (v19 < 0)
        {
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      int v15 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v15 - v13;
  if (r_mark_lAr(a1))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    inserteCGFloat d = slice_del(a1);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    int v24 = *(_DWORD *)(a1 + 8);
    int v23 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v24;
    if (!r_mark_DUr(a1))
    {
      int v25 = v23 - v24;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - (v23 - v24);
      if (!r_mark_yDU(a1))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v25;
        if (!r_mark_ysA(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v25;
          uint64_t v112 = r_mark_ymUs_(a1);
          if (v112)
          {
            uint64_t v12 = v112;
            if ((v112 & 0x80000000) != 0) {
              return v12;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 8) = v24 - v23 + *(_DWORD *)(a1 + 12);
          }
        }
      }
    }
    **(unsigned char **)(a1 + 48) = 0;
    goto LABEL_60;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (!r_check_vowel_harmony(a1)
    || (uint64_t v26 = *(int *)(a1 + 8), (int)v26 - 2 <= *(_DWORD *)(a1 + 16))
    || *(unsigned char *)(v26 + *(void *)a1 - 1) != 122
    || !find_among_b(a1, (uint64_t)&a_17_2, 4)
    || (v28 = *(_DWORD *)(a1 + 8), int v27 = *(_DWORD *)(a1 + 12), !r_mark_yDU(a1))
    && (*(_DWORD *)(a1 + 8) = v28 - v27 + *(_DWORD *)(a1 + 12), !r_mark_ysA(a1)))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
    if (r_mark_sUnUz(a1)
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_yUz(a1))
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_sUn(a1))
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_yUm(a1)))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      int v30 = *(_DWORD *)(a1 + 8);
      int v29 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v30;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
      if (!r_mark_DUr(a1)) {
        goto LABEL_61;
      }
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      int v30 = *(_DWORD *)(a1 + 8);
      int v29 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v30;
      if (!r_mark_sUnUz(a1))
      {
        int v114 = v29 - v30;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - (v29 - v30);
        if (!r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
          if (!r_mark_yUm(a1))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
            if (!r_mark_sUn(a1))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
              if (!r_mark_yUz(a1)) {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
              }
            }
          }
        }
      }
    }
    uint64_t v31 = r_mark_ymUs_(a1);
    if (!v31)
    {
      *(_DWORD *)(a1 + 8) = v30 - v29 + *(_DWORD *)(a1 + 12);
      goto LABEL_60;
    }
    uint64_t v12 = v31;
    goto LABEL_59;
  }
LABEL_60:
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  inserteCGFloat d = slice_del(a1);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
LABEL_61:
  int v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v32;
  if (!**(unsigned char **)(a1 + 48)) {
    return 0;
  }
  *(_DWORD *)(a1 + 24) = v32;
  if (r_mark_lAr(a1)) {
    goto LABEL_63;
  }
  int v36 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v36;
  *(_DWORD *)(a1 + 24) = v36;
  if (r_check_vowel_harmony(a1))
  {
    uint64_t v37 = *(int *)(a1 + 8) - 1;
    if ((int)v37 > *(_DWORD *)(a1 + 16)
      && (*(unsigned __int8 *)(*(void *)a1 + v37) | 4) == 0x65
      && find_among_b(a1, (uint64_t)&a_11_3, 2)
      && r_mark_suffix_with_optional_n_consonant(a1))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      int v39 = *(_DWORD *)(a1 + 8);
      int v38 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v39;
      if (!r_mark_lArI(a1))
      {
        int v40 = v38 - v39;
        int v41 = *(_DWORD *)(a1 + 12) - v40;
        *(_DWORD *)(a1 + 8) = v41;
        *(_DWORD *)(a1 + 24) = v41;
        if (!r_mark_possessives(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v40;
          uint64_t v42 = r_mark_sU(a1);
          if ((int)v42 <= 0)
          {
            uint64_t v12 = v42;
            unsigned int v43 = v42 >> 31;
            unsigned int v44 = v42 ? v42 >> 31 : 10;
            if (v44)
            {
              if (v44 != 10)
              {
                if (v44 != 9) {
                  goto LABEL_254;
                }
                goto LABEL_175;
              }
              int v116 = *(_DWORD *)(a1 + 12) - v40;
              *(_DWORD *)(a1 + 8) = v116;
              *(_DWORD *)(a1 + 24) = v116;
              if (!r_mark_lAr(a1)) {
                goto LABEL_179;
              }
              *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
              inserteCGFloat d = slice_del(a1);
              if ((inserted & 0x80000000) != 0) {
                return inserted;
              }
              uint64_t v117 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
              if (!v117) {
                goto LABEL_179;
              }
              uint64_t v12 = v117;
              if ((v117 & 0x80000000) == 0) {
                goto LABEL_90;
              }
LABEL_253:
              unsigned int v43 = v12 >> 31;
              goto LABEL_254;
            }
          }
        }
LABEL_175:
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        inserteCGFloat d = slice_del(a1);
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        int v92 = *(_DWORD *)(a1 + 8);
        int v40 = *(_DWORD *)(a1 + 12) - v92;
        *(_DWORD *)(a1 + 24) = v92;
        if (r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          inserteCGFloat d = slice_del(a1);
          if ((inserted & 0x80000000) != 0) {
            return inserted;
          }
          uint64_t v35 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
          if (v35) {
            goto LABEL_65;
          }
        }
LABEL_179:
        int v48 = *(_DWORD *)(a1 + 12) - v40;
        goto LABEL_89;
      }
LABEL_86:
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) == 0) {
        goto LABEL_90;
      }
      return inserted;
    }
  }
  int v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 24) = v45;
  if (r_mark_ndA(a1)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_check_vowel_harmony(a1))
    && (uint64_t v54 = *(int *)(a1 + 8) - 1, (int)v54 > *(_DWORD *)(a1 + 16))
    && (*(unsigned __int8 *)(*(void *)a1 + v54) | 4) == 0x65
    && find_among_b(a1, (uint64_t)&a_5_12, 2))
  {
    int v47 = *(_DWORD *)(a1 + 8);
    int v46 = *(_DWORD *)(a1 + 12);
    if (r_mark_lArI(a1)) {
      goto LABEL_86;
    }
    int v71 = v46 - v47;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v71;
    int v72 = r_mark_sU(a1);
    uint64_t v12 = v72 & (v72 >> 31);
    int v61 = v72 >> 31;
    if (v72) {
      int v73 = v72 >> 31;
    }
    else {
      int v73 = 18;
    }
    if (v73 == 18)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v71;
      int v88 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
      int v61 = v88 >> 31;
      if (v88 >= 0) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v88;
      }
      if (!v88) {
        int v61 = 15;
      }
      if (v88 > 0) {
        goto LABEL_90;
      }
    }
    else if (!v73)
    {
      goto LABEL_175;
    }
    if (!v61) {
      goto LABEL_90;
    }
    if (v61 != 15) {
      goto LABEL_169;
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  int v55 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v55;
  *(_DWORD *)(a1 + 24) = v55;
  if (r_check_vowel_harmony(a1)
    && (uint64_t v56 = *(int *)(a1 + 8), (int)v56 - 3 > *(_DWORD *)(a1 + 16))
    && *(unsigned char *)(v56 + *(void *)a1 - 1) == 110
    && find_among_b(a1, (uint64_t)&a_9_5, 2)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_nU(a1)))
  {
    int v58 = *(_DWORD *)(a1 + 8);
    int v57 = *(_DWORD *)(a1 + 12);
    int v59 = r_mark_sU(a1);
    if (v59 >= 0) {
      unsigned int v60 = v12;
    }
    else {
      unsigned int v60 = v59;
    }
    int v61 = v59 >> 31;
    if (v59) {
      uint64_t v12 = v60;
    }
    else {
      uint64_t v12 = v12;
    }
    if (v59) {
      int v62 = v59 >> 31;
    }
    else {
      int v62 = 23;
    }
    if (v62 != 23)
    {
      if (!v62) {
        goto LABEL_175;
      }
      if ((v59 & 0x80000000) == 0) {
        goto LABEL_90;
      }
      goto LABEL_169;
    }
    *(_DWORD *)(a1 + 8) = v58 - v57 + *(_DWORD *)(a1 + 12);
    if (r_mark_lArI(a1)) {
      goto LABEL_90;
    }
  }
  int v89 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v89;
  *(_DWORD *)(a1 + 24) = v89;
  if (r_mark_DAn(a1))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    inserteCGFloat d = slice_del(a1);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    int v91 = *(_DWORD *)(a1 + 8);
    int v90 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v91;
    if (!r_mark_possessives(a1))
    {
      int v102 = v90 - v91;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v102;
      if (!r_mark_lAr(a1))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v102;
        uint64_t v12 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        goto LABEL_90;
      }
LABEL_63:
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) == 0)
      {
        int v34 = *(_DWORD *)(a1 + 8);
        int v33 = *(_DWORD *)(a1 + 12);
        uint64_t v35 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
        if (v35)
        {
LABEL_65:
          uint64_t v12 = v35;
LABEL_66:
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          goto LABEL_90;
        }
        int v48 = v34 - v33 + *(_DWORD *)(a1 + 12);
LABEL_89:
        *(_DWORD *)(a1 + 8) = v48;
        goto LABEL_90;
      }
      return inserted;
    }
    goto LABEL_175;
  }
  int v93 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v93;
  *(_DWORD *)(a1 + 24) = v93;
  if (r_mark_nUn(a1) || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_ylA(a1)))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    inserteCGFloat d = slice_del(a1);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    int v95 = *(_DWORD *)(a1 + 8);
    int v94 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v95;
    if (r_mark_lAr(a1))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      int v96 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
      if (v96 >= 0) {
        unsigned int v97 = v12;
      }
      else {
        unsigned int v97 = v96;
      }
      unsigned int v43 = v96 >> 31;
      if (v96) {
        uint64_t v12 = v97;
      }
      else {
        uint64_t v12 = v12;
      }
      if (v96) {
        int v98 = v96 >> 31;
      }
      else {
        int v98 = 36;
      }
      if (!v98) {
        goto LABEL_90;
      }
      if (v98 != 36) {
        goto LABEL_254;
      }
    }
    int v99 = v94 - v95;
    int v100 = *(_DWORD *)(a1 + 12) - v99;
    *(_DWORD *)(a1 + 8) = v100;
    *(_DWORD *)(a1 + 24) = v100;
    if (!r_mark_possessives(a1))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v99;
      unsigned int v101 = r_mark_sU(a1);
      if ((int)v101 <= 0)
      {
        if (v101) {
          uint64_t v12 = v101;
        }
        else {
          uint64_t v12 = v12;
        }
        unsigned int v43 = v101 >> 31;
        if (v101) {
          int v113 = v101 >> 31;
        }
        else {
          int v113 = 40;
        }
        if (v113 == 40)
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v99;
          uint64_t v115 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
          if ((v115 & 0x80000000) == 0) {
            goto LABEL_90;
          }
          uint64_t v12 = v115;
          goto LABEL_253;
        }
        if (v113)
        {
LABEL_254:
          if (!v43) {
            goto LABEL_90;
          }
          goto LABEL_66;
        }
      }
    }
    goto LABEL_198;
  }
  int v103 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v103;
  *(_DWORD *)(a1 + 24) = v103;
  if (r_mark_lArI(a1)) {
    goto LABEL_86;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  int v104 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
  if (v104 >= 0) {
    unsigned int v105 = v12;
  }
  else {
    unsigned int v105 = v104;
  }
  int v61 = v104 >> 31;
  if (v104) {
    uint64_t v12 = v105;
  }
  else {
    uint64_t v12 = v12;
  }
  if (v104) {
    int v106 = v104 >> 31;
  }
  else {
    int v106 = 44;
  }
  if (!v106) {
    goto LABEL_90;
  }
  if (v106 != 44)
  {
LABEL_169:
    if (v61 != 1) {
      goto LABEL_90;
    }
    goto LABEL_66;
  }
  int v107 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v107;
  *(_DWORD *)(a1 + 24) = v107;
  if (r_mark_DA(a1)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_yU(a1))
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_yA(a1)))
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    inserteCGFloat d = slice_del(a1);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    int v109 = *(_DWORD *)(a1 + 8);
    int v108 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v109;
    if (r_mark_possessives(a1))
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      inserteCGFloat d = slice_del(a1);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      int v111 = *(_DWORD *)(a1 + 8);
      int v110 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v111;
      if (!r_mark_lAr(a1)) {
        *(_DWORD *)(a1 + 8) = v111 - v110 + *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v109 - v108 + *(_DWORD *)(a1 + 12);
      if (!r_mark_lAr(a1)) {
        goto LABEL_90;
      }
    }
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    inserteCGFloat d = slice_del(a1);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    goto LABEL_201;
  }
  int v119 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v119;
  *(_DWORD *)(a1 + 24) = v119;
  if (!r_mark_possessives(a1))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t v35 = r_mark_sU(a1);
    if ((int)v35 < 1) {
      goto LABEL_65;
    }
  }
LABEL_198:
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  inserteCGFloat d = slice_del(a1);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!r_mark_lAr(a1)) {
    goto LABEL_90;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  inserteCGFloat d = slice_del(a1);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
LABEL_201:
  inserteCGFloat d = r_stem_suffix_chain_before_ki((_DWORD *)a1);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
LABEL_90:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  int v49 = eq_s_b(a1, 2, &s_16_12);
  int v50 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    int v53 = *(_DWORD *)(a1 + 16);
    goto LABEL_120;
  }
  int v51 = *(_DWORD *)(a1 + 8);
  if (eq_s_b(a1, 3, &s_17_17))
  {
    int v52 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    int v52 = *(_DWORD *)(a1 + 12) + v51 - v50;
    *(_DWORD *)(a1 + 8) = v52;
  }
  int v53 = *(_DWORD *)(a1 + 16);
  if (v52 <= v53) {
    return 0;
  }
  int v50 = *(_DWORD *)(a1 + 12);
LABEL_120:
  *(_DWORD *)(a1 + 8) = v50;
  if (v50 <= v53) {
    goto LABEL_152;
  }
  int v63 = *(unsigned __int8 *)(*(void *)a1 + v50 - 1);
  if (v63 != 103 && v63 != 100) {
    goto LABEL_152;
  }
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) == 0)
  {
    if ((uint64_t v64 = *(int *)(a1 + 8), (int)v64 > *(_DWORD *)(a1 + 16)) && *(unsigned char *)(v64 + *(void *)a1 - 1) == 97
      || eq_s_b(a1, 2, &s_9_22))
    {
      int v65 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v65;
      unsigned int v66 = &s_10_41;
      uint64_t v67 = a1;
      int v68 = v65;
      int v69 = v65;
      int v70 = 2;
      goto LABEL_146;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  int v74 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  int v65 = *(_DWORD *)(a1 + 12);
  if ((v74 & 0x80000000) == 0)
  {
    uint64_t v75 = *(int *)(a1 + 8);
    if ((int)v75 > *(_DWORD *)(a1 + 16))
    {
      int v76 = *(unsigned __int8 *)(v75 + *(void *)a1 - 1);
      if (v76 == 105 || v76 == 101)
      {
        *(_DWORD *)(a1 + 8) = v65;
        unsigned int v66 = &s_11_51;
LABEL_145:
        uint64_t v67 = a1;
        int v68 = v65;
        int v69 = v65;
        int v70 = 1;
LABEL_146:
        inserteCGFloat d = insert_s(v67, v68, v69, v70, v66);
        *(_DWORD *)(a1 + 8) = v65;
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        goto LABEL_152;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v65;
  int v77 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  int v65 = *(_DWORD *)(a1 + 12);
  if ((v77 & 0x80000000) == 0)
  {
    uint64_t v78 = *(int *)(a1 + 8);
    if ((int)v78 > *(_DWORD *)(a1 + 16))
    {
      int v79 = *(unsigned __int8 *)(v78 + *(void *)a1 - 1);
      if (v79 == 117 || v79 == 111)
      {
        *(_DWORD *)(a1 + 8) = v65;
        unsigned int v66 = &s_12_17;
        goto LABEL_145;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v65;
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) != 0) {
    goto LABEL_152;
  }
  int v81 = *(_DWORD *)(a1 + 8);
  int v80 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 2, &s_13_43))
  {
    *(_DWORD *)(a1 + 8) = v81 - v80 + *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 2, &s_14_19)) {
      goto LABEL_152;
    }
  }
  int v82 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v82;
  uint64_t v12 = insert_s(a1, v82, v82, 2, &s_15_12);
  *(_DWORD *)(a1 + 8) = v82;
  if ((v12 & 0x80000000) == 0)
  {
LABEL_152:
    int v83 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v83;
    *(_DWORD *)(a1 + 24) = v83;
    int v84 = find_among_b(a1, (uint64_t)&a_23_1, 4);
    if (v84)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
      switch(v84)
      {
        case 1:
          int v85 = &s_5_58;
          goto LABEL_158;
        case 2:
          int v85 = &s_6_133;
          uint64_t v86 = a1;
          int v87 = 2;
          goto LABEL_159;
        case 3:
          int v85 = &s_7_94;
          goto LABEL_158;
        case 4:
          int v85 = &s_8_109;
LABEL_158:
          uint64_t v86 = a1;
          int v87 = 1;
LABEL_159:
          inserteCGFloat d = slice_from_s(v86, v87, v85);
          if ((inserted & 0x80000000) == 0) {
            break;
          }
          return inserted;
        default:
          break;
      }
    }
    int v2 = *(_DWORD *)(a1 + 16);
    uint64_t v12 = 1;
    goto LABEL_44;
  }
  return v12;
}

void *turkish_UTF_8_create_env()
{
  return SN_create_env(0, 0, 1);
}

void turkish_UTF_8_close_env(uint64_t a1)
{
}

uint64_t r_mark_ymUs_(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8);
  if ((int)v2 - 3 <= *(_DWORD *)(a1 + 16)
    || *(unsigned __int8 *)(v2 + *(void *)a1 - 1) != 159
    || !find_among_b(a1, (uint64_t)&a_22_1, 4))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_yDU(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1) || !find_among_b(a1, (uint64_t)&a_20_2, 32)) {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_ysA(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8) - 1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(*(void *)a1 + v1);
  if ((v3 & 0xE0) != 0x60 || ((0x6822u >> v3) & 1) == 0 || !find_among_b(a1, (uint64_t)&a_21_2, 8)) {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

BOOL r_mark_sUnUz(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  return (int)v1 - 4 > *(_DWORD *)(a1 + 16)
      && *(unsigned char *)(v1 + *(void *)a1 - 1) == 122
      && find_among_b(a1, (uint64_t)&a_15_2, 4) != 0;
}

uint64_t r_mark_lAr(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(unsigned char *)(v3 + *(void *)a1 - 1) == 114
        && find_among_b(a1, (uint64_t)&a_16_2, 2) != 0;
  }
  return result;
}

uint64_t r_mark_yUm(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8) - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)
    || *(unsigned char *)(*(void *)a1 + v2) != 109
    || !find_among_b(a1, (uint64_t)&a_12_2, 4))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_sUn(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(unsigned char *)(v3 + *(void *)a1 - 1) == 110
        && find_among_b(a1, (uint64_t)&a_13_2, 4) != 0;
  }
  return result;
}

uint64_t r_mark_yUz(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8) - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)
    || *(unsigned char *)(*(void *)a1 + v2) != 122
    || !find_among_b(a1, (uint64_t)&a_14_2, 4))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_DUr(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(unsigned char *)(v3 + *(void *)a1 - 1) == 114
        && find_among_b(a1, (uint64_t)&a_18_2, 8) != 0;
  }
  return result;
}

uint64_t r_check_vowel_harmony(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) != 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(int *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  if ((int)v5 <= v6)
  {
    int v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 12);
    if (*(unsigned char *)(*(void *)a1 + v5 - 1) == 97)
    {
      *(_DWORD *)(a1 + 8) = v5 - 1;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel1, 97, 305, 1) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      int v7 = *(_DWORD *)(a1 + 12);
      int v6 = *(_DWORD *)(a1 + 16);
    }
  }
  int v8 = v4 - v5;
  int v9 = v7 - v8;
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 > v6)
  {
    uint64_t v10 = v9 - 1;
    if (*(unsigned char *)(*(void *)a1 + v10) == 101)
    {
      *(_DWORD *)(a1 + 8) = v10;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel2, 101, 252, 1) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      int v9 = *(_DWORD *)(a1 + 12) - v8;
    }
  }
  *(_DWORD *)(a1 + 8) = v9;
  if (eq_s_b(a1, 2, &s_0_149) && (out_grouping_b_U(a1, (uint64_t)&g_vowel3, 97, 305, 1) & 0x80000000) == 0) {
    goto LABEL_29;
  }
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = *(int *)(a1 + 12) - (uint64_t)v8;
  *(_DWORD *)(a1 + 8) = v12;
  if ((int)v12 > v11 && *(unsigned char *)(*(void *)a1 + v12 - 1) == 105)
  {
    *(_DWORD *)(a1 + 8) = v12 - 1;
    if ((out_grouping_b_U(a1, (uint64_t)&g_vowel4, 101, 105, 1) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v11 = *(_DWORD *)(a1 + 16);
    LODWORD(v12) = *(_DWORD *)(a1 + 12) - v8;
  }
  *(_DWORD *)(a1 + 8) = v12;
  if ((int)v12 > v11)
  {
    uint64_t v13 = (int)v12 - 1;
    if (*(unsigned char *)(*(void *)a1 + v13) == 111)
    {
      *(_DWORD *)(a1 + 8) = v13;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel5, 111, 117, 1) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      LODWORD(v12) = *(_DWORD *)(a1 + 12) - v8;
    }
  }
  *(_DWORD *)(a1 + 8) = v12;
  if (eq_s_b(a1, 2, &s_1_296)
    && (out_grouping_b_U(a1, (uint64_t)&g_vowel6, 246, 252, 1) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  int v14 = *(_DWORD *)(a1 + 16);
  uint64_t v15 = *(int *)(a1 + 12) - (uint64_t)v8;
  *(_DWORD *)(a1 + 8) = v15;
  if ((int)v15 > v14 && *(unsigned char *)(*(void *)a1 + v15 - 1) == 117)
  {
    *(_DWORD *)(a1 + 8) = v15 - 1;
    if ((out_grouping_b_U(a1, (uint64_t)&g_vowel5, 111, 117, 1) & 0x80000000) != 0)
    {
      LODWORD(v15) = *(_DWORD *)(a1 + 12) - v8;
      goto LABEL_27;
    }
LABEL_29:
    *(_DWORD *)(a1 + 8) = v3 - v2 + *(_DWORD *)(a1 + 12);
    return 1;
  }
LABEL_27:
  *(_DWORD *)(a1 + 8) = v15;
  uint64_t result = eq_s_b(a1, 2, &s_2_58);
  if (!result) {
    return result;
  }
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel6, 246, 252, 1) & 0x80000000) == 0) {
    goto LABEL_29;
  }
  return 0;
}

uint64_t r_mark_suffix_with_optional_y_consonant(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = v2;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)a1;
  if ((int)v3 > (int)v5)
  {
    int v7 = v3 - 1;
    if (*(unsigned char *)(v6 + v3 - 1) == 121)
    {
      *(_DWORD *)(a1 + 8) = v7;
      int v8 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      int v4 = *(_DWORD *)(a1 + 12);
      if (!v8)
      {
        int v14 = v7 - v2 + v4;
        goto LABEL_12;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 16);
      uint64_t v6 = *(void *)a1;
    }
  }
  int v9 = v3 - v2;
  uint64_t v10 = (v4 + v9);
  *(_DWORD *)(a1 + 8) = v10;
  if ((int)v10 > (int)v5 && *(unsigned char *)(v6 + (int)v10 - 1) == 121) {
    return 0;
  }
  int v11 = skip_utf8(v6, v10, v5, 0, -1);
  if (v11 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v11;
  int v12 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
  uint64_t result = 0;
  if (v12) {
    return result;
  }
  int v14 = *(_DWORD *)(a1 + 12) + v9;
LABEL_12:
  *(_DWORD *)(a1 + 8) = v14;
  return 1;
}

uint64_t r_stem_suffix_chain_before_ki(_DWORD *a1)
{
  a1[6] = a1[2];
  uint64_t result = eq_s_b((uint64_t)a1, 2, &s_3_103);
  BOOL v3 = result != 0;
  if (!result) {
    return result;
  }
  int v5 = a1[2];
  int v4 = a1[3];
  if (r_mark_DA((uint64_t)a1))
  {
    a1[5] = a1[2];
    uint64_t result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v7 = a1[2];
    int v6 = a1[3];
    a1[6] = v7;
    if (r_mark_lAr((uint64_t)a1))
    {
      a1[5] = a1[2];
      uint64_t result = slice_del((uint64_t)a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v9 = a1[2];
      int v8 = a1[3];
      uint64_t result = r_stem_suffix_chain_before_ki(a1);
      if (!result)
      {
        int v10 = v9 - v8 + a1[3];
LABEL_35:
        a1[2] = v10;
        return 1;
      }
      goto LABEL_32;
    }
    int v21 = v7 - v6;
    a1[2] = a1[3] + v21;
    if (!r_mark_possessives((uint64_t)a1))
    {
      int v10 = a1[3] + v21;
      goto LABEL_35;
    }
LABEL_24:
    a1[5] = a1[2];
    uint64_t result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v22 = a1[2];
    int v23 = a1[3] - v22;
    a1[6] = v22;
    if (!r_mark_lAr((uint64_t)a1)) {
      goto LABEL_28;
    }
    a1[5] = a1[2];
    uint64_t result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = r_stem_suffix_chain_before_ki(a1);
    if (!result)
    {
LABEL_28:
      int v10 = a1[3] - v23;
      goto LABEL_35;
    }
LABEL_32:
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  int v11 = v4 - v5;
  a1[2] = a1[3] - v11;
  if (!r_mark_nUn((uint64_t)a1))
  {
    a1[2] = a1[3] - v11;
    uint64_t result = r_mark_ndA((uint64_t)a1);
    if (!result) {
      return result;
    }
    int v25 = a1[2];
    int v24 = a1[3];
    if (!r_mark_lArI((uint64_t)a1))
    {
      int v26 = v24 - v25;
      a1[2] = a1[3] - v26;
      int v27 = r_mark_sU((uint64_t)a1);
      int v28 = v27 >> 31;
      if (!v27) {
        int v28 = 19;
      }
      if (v28 == 19)
      {
        a1[2] = a1[3] - v26;
        uint64_t result = r_stem_suffix_chain_before_ki(a1);
        if ((int)result > 0) {
          return 1;
        }
      }
      else
      {
        if (!v28) {
          goto LABEL_24;
        }
        int v29 = v27;
        if (v27 >= 0) {
          unsigned int v30 = v3;
        }
        else {
          unsigned int v30 = v27;
        }
        if (v27) {
          uint64_t result = v30;
        }
        else {
          uint64_t result = v3;
        }
        if ((v29 & 0x80000000) == 0) {
          return 1;
        }
      }
      return result;
    }
LABEL_31:
    a1[5] = a1[2];
    uint64_t result = slice_del((uint64_t)a1);
    goto LABEL_32;
  }
  a1[5] = a1[2];
  uint64_t result = slice_del((uint64_t)a1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v13 = a1[2];
  int v12 = a1[3];
  a1[6] = v13;
  if (r_mark_lArI((uint64_t)a1)) {
    goto LABEL_31;
  }
  int v14 = v12 - v13;
  int v15 = a1[3] - (v12 - v13);
  a1[2] = v15;
  a1[6] = v15;
  if (r_mark_possessives((uint64_t)a1)) {
    goto LABEL_24;
  }
  int v16 = v13 - v12;
  a1[2] = a1[3] - v14;
  LODWORD(result) = r_mark_sU((uint64_t)a1);
  BOOL v17 = result == 0;
  if ((int)result > 0) {
    goto LABEL_24;
  }
  unsigned int v18 = result;
  uint64_t result = result ? result : v3;
  int v19 = v18 >> 31;
  int v20 = v17 ? 14 : v19;
  switch(v20)
  {
    case 0:
      goto LABEL_24;
    case 14:
      a1[2] = a1[3] - v14;
      uint64_t result = r_stem_suffix_chain_before_ki(a1);
      if (!result)
      {
        int v10 = v16 + a1[3];
        goto LABEL_35;
      }
      if ((result & 0x80000000) == 0) {
        return 1;
      }
      int v19 = result >> 31;
      break;
    case 13:
      goto LABEL_24;
  }
  if (!v19) {
    return 1;
  }
  return result;
}

BOOL r_mark_lArI(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 - 3 > *(_DWORD *)(a1 + 16)
    && ((int v2 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1), v2 == 177) || v2 == 105))
  {
    return find_among_b(a1, (uint64_t)&a_1_19, 2) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_possessives(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(v1 + *(void *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x4006000u >> v3) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_0_19, 10);
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    if (!in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0))
    {
      int v8 = *(_DWORD *)(a1 + 8);
      int v7 = *(_DWORD *)(a1 + 12);
      if (!out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0))
      {
        int v13 = v8 - v7;
        int v9 = *(_DWORD *)(a1 + 12);
        goto LABEL_14;
      }
    }
    int v9 = v6 - v5;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v9;
    uint64_t result = in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0);
    uint64_t v10 = (*(_DWORD *)(a1 + 12) + v9);
    *(_DWORD *)(a1 + 8) = v10;
    if (result)
    {
      int v11 = skip_utf8(*(void *)a1, v10, *(unsigned int *)(a1 + 16), 0, -1);
      if (v11 < 0) {
        return 0;
      }
      *(_DWORD *)(a1 + 8) = v11;
      int v12 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      uint64_t result = 0;
      if (!v12)
      {
        int v13 = *(_DWORD *)(a1 + 12);
LABEL_14:
        *(_DWORD *)(a1 + 8) = v13 + v9;
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_mark_sU(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    int v3 = in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0);
    uint64_t result = 0;
    if (!v3)
    {
      int v4 = *(_DWORD *)(a1 + 12);
      uint64_t v5 = *(int *)(a1 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 16);
      uint64_t v7 = *(void *)a1;
      if ((int)v5 <= (int)v6)
      {
        int v9 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        int v8 = v5 - 1;
        int v9 = *(_DWORD *)(a1 + 12);
        if (*(unsigned char *)(v7 + v5 - 1) == 115)
        {
          *(_DWORD *)(a1 + 8) = v8;
          int v10 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
          int v9 = *(_DWORD *)(a1 + 12);
          if (!v10)
          {
            int v15 = v8 - v4 + v9;
LABEL_15:
            *(_DWORD *)(a1 + 8) = v15;
            return 1;
          }
          uint64_t v6 = *(unsigned int *)(a1 + 16);
          uint64_t v7 = *(void *)a1;
        }
      }
      int v11 = v5 - v4;
      uint64_t v12 = (v9 + v11);
      *(_DWORD *)(a1 + 8) = v12;
      if ((int)v12 > (int)v6 && *(unsigned char *)(v7 + (int)v12 - 1) == 115) {
        return 0;
      }
      int v13 = skip_utf8(v7, v12, v6, 0, -1);
      if (v13 < 0) {
        return 0;
      }
      *(_DWORD *)(a1 + 8) = v13;
      int v14 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      uint64_t result = 0;
      if (v14) {
        return result;
      }
      int v15 = *(_DWORD *)(a1 + 12) + v11;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t r_mark_ndA(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && (*(unsigned __int8 *)(v3 + *(void *)a1 - 1) | 4) == 0x65
        && find_among_b(a1, (uint64_t)&a_7_9, 2) != 0;
  }
  return result;
}

uint64_t r_mark_nU(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result) {
    return find_among_b(a1, (uint64_t)&a_2_18, 4) != 0;
  }
  return result;
}

uint64_t r_mark_DAn(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(unsigned char *)(v3 + *(void *)a1 - 1) == 110
        && find_among_b(a1, (uint64_t)&a_8_7, 4) != 0;
  }
  return result;
}

uint64_t r_mark_nUn(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8) - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)
    || *(unsigned char *)(*(void *)a1 + v2) != 110
    || !find_among_b(a1, (uint64_t)&a_3_15, 4))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_n_consonant(a1);
}

uint64_t r_mark_ylA(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8) - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)
    || (*(unsigned __int8 *)(*(void *)a1 + v2) | 4) != 0x65
    || !find_among_b(a1, (uint64_t)&a_10_3, 2))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_DA(uint64_t a1)
{
  uint64_t result = r_check_vowel_harmony(a1);
  if (result)
  {
    uint64_t v3 = *(int *)(a1 + 8) - 1;
    return (int)v3 > *(_DWORD *)(a1 + 16)
        && (*(unsigned __int8 *)(*(void *)a1 + v3) | 4) == 0x65
        && find_among_b(a1, (uint64_t)&a_6_8, 4) != 0;
  }
  return result;
}

uint64_t r_mark_yU(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1) || in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0)) {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_yA(uint64_t a1)
{
  if (!r_check_vowel_harmony(a1)) {
    return 0;
  }
  uint64_t v2 = *(int *)(a1 + 8);
  if ((int)v2 <= *(_DWORD *)(a1 + 16)
    || (*(unsigned __int8 *)(v2 + *(void *)a1 - 1) | 4) != 0x65
    || !find_among_b(a1, (uint64_t)&a_4_13, 2))
  {
    return 0;
  }
  return r_mark_suffix_with_optional_y_consonant(a1);
}

uint64_t r_mark_suffix_with_optional_n_consonant(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = v2;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = *(void *)a1;
  if ((int)v3 > (int)v5)
  {
    int v7 = v3 - 1;
    if (*(unsigned char *)(v6 + v3 - 1) == 110)
    {
      *(_DWORD *)(a1 + 8) = v7;
      int v8 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      int v4 = *(_DWORD *)(a1 + 12);
      if (!v8)
      {
        int v14 = v7 - v2 + v4;
        goto LABEL_12;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 16);
      uint64_t v6 = *(void *)a1;
    }
  }
  int v9 = v3 - v2;
  uint64_t v10 = (v4 + v9);
  *(_DWORD *)(a1 + 8) = v10;
  if ((int)v10 > (int)v5 && *(unsigned char *)(v6 + (int)v10 - 1) == 110) {
    return 0;
  }
  int v11 = skip_utf8(v6, v10, v5, 0, -1);
  if (v11 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v11;
  int v12 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
  uint64_t result = 0;
  if (v12) {
    return result;
  }
  int v14 = *(_DWORD *)(a1 + 12) + v9;
LABEL_12:
  *(_DWORD *)(a1 + 8) = v14;
  return 1;
}

uint64_t english_UTF_8_stem(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  uint64_t v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  if ((int)v3 + 2 < (int)v2)
  {
    char v4 = *(unsigned char *)(*(void *)a1 + v3 + 2);
    if (v4 & 0xE0) == 0x60 && ((0x28C5212u >> v4))
    {
      int among = find_among(a1, (uint64_t)&a_10_4, 18);
      uint64_t v2 = *(unsigned int *)(a1 + 12);
      if (among)
      {
        int v6 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v6;
        if (v6 >= (int)v2)
        {
          switch(among)
          {
            case 1:
              uint64_t v31 = &s_27_10;
              goto LABEL_93;
            case 2:
              uint64_t v31 = &s_28_7;
              goto LABEL_93;
            case 3:
              uint64_t v31 = &s_29_5;
              goto LABEL_93;
            case 4:
              uint64_t v31 = &s_30_13;
              goto LABEL_93;
            case 5:
              uint64_t v31 = &s_31_5;
              goto LABEL_93;
            case 6:
              uint64_t v31 = &s_32_11;
LABEL_93:
              uint64_t v55 = a1;
              int v56 = 3;
              break;
            case 7:
              uint64_t v31 = &s_33_5;
              goto LABEL_100;
            case 8:
              uint64_t v31 = &s_34_18;
              goto LABEL_98;
            case 9:
              uint64_t v31 = &s_35_5;
              goto LABEL_100;
            case 10:
              uint64_t v31 = &s_36_11;
LABEL_98:
              uint64_t v55 = a1;
              int v56 = 4;
              break;
            case 11:
              uint64_t v31 = &s_37_6;
LABEL_100:
              uint64_t v55 = a1;
              int v56 = 5;
              break;
            default:
              return 1;
          }
          uint64_t result = slice_from_s(v55, v56, v31);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          return 1;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  int v7 = skip_utf8(*(void *)a1, v3, 0, v2, 3);
  if (v7 >= 0) {
    int v8 = v7;
  }
  else {
    int v8 = v3;
  }
  *(_DWORD *)(a1 + 8) = v8;
  if (v7 < 0) {
    return 1;
  }
  *(_DWORD *)(a1 + 8) = v3;
  **(unsigned char **)(a1 + 48) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v10;
  if (v10 != v9)
  {
    if (*(unsigned char *)(*(void *)a1 + (int)v10) == 39)
    {
      *(_DWORD *)(a1 + 8) = v10 + 1;
      *(_DWORD *)(a1 + 24) = v10 + 1;
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v9 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v10;
    if (v10 != v9 && *(unsigned char *)(*(void *)a1 + (int)v10) == 121)
    {
      *(_DWORD *)(a1 + 8) = v10 + 1;
      *(_DWORD *)(a1 + 24) = v10 + 1;
      uint64_t result = slice_from_s(a1, 1, &s_0_150);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      **(unsigned char **)(a1 + 48) = 1;
    }
  }
  *(_DWORD *)(a1 + 8) = v10;
  uint64_t v12 = v10;
  while (1)
  {
    while (1)
    {
      if (in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 0))
      {
        uint64_t v13 = *(void *)a1;
        uint64_t v14 = *(unsigned int *)(a1 + 12);
        break;
      }
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      uint64_t v14 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v15;
      uint64_t v13 = *(void *)a1;
      if (v15 == v14)
      {
        uint64_t v14 = v15;
        break;
      }
      if (*(unsigned char *)(v13 + (int)v15) != 121) {
        break;
      }
      *(_DWORD *)(a1 + 24) = v15 + 1;
      *(_DWORD *)(a1 + 8) = v12;
      uint64_t result = slice_from_s(a1, 1, &s_1_297);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      **(unsigned char **)(a1 + 48) = 1;
      uint64_t v12 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v12;
    uint64_t v16 = skip_utf8(v13, v12, 0, v14, 1);
    if ((v16 & 0x80000000) != 0) {
      break;
    }
    uint64_t v12 = v16;
    *(_DWORD *)(a1 + 8) = v16;
  }
  *(_DWORD *)(a1 + 8) = v10;
  BOOL v17 = *(_DWORD **)(a1 + 40);
  *BOOL v17 = *(_DWORD *)(a1 + 12);
  v17[1] = *(_DWORD *)(a1 + 12);
  uint64_t v18 = *(int *)(a1 + 8);
  if ((int)v18 + 4 < *(_DWORD *)(a1 + 12))
  {
    char v19 = *(unsigned char *)(*(void *)a1 + v18 + 4);
    if ((v19 & 0xE0) == 0x60 && ((0x244000u >> v19) & 1) != 0 && find_among(a1, (uint64_t)&a_0_20, 3))
    {
      int v20 = *(_DWORD *)(a1 + 8);
      goto LABEL_36;
    }
  }
  *(_DWORD *)(a1 + 8) = v18;
  int v21 = out_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
  if ((v21 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v21;
    int v22 = in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
    if ((v22 & 0x80000000) == 0)
    {
      int v20 = *(_DWORD *)(a1 + 8) + v22;
      *(_DWORD *)(a1 + 8) = v20;
LABEL_36:
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v20;
      int v23 = out_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
      if ((v23 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v23;
        int v24 = in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
        if ((v24 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v24;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v18;
  int v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (v25 <= (int)v18 || (int v26 = *(unsigned __int8 *)(v25 + *(void *)a1 - 1), v26 != 115) && v26 != 39)
  {
LABEL_46:
    *(_DWORD *)(a1 + 24) = v25;
    if (v25 > *(_DWORD *)(a1 + 16))
    {
      int v27 = *(unsigned __int8 *)(*(void *)a1 + v25 - 1);
      if (v27 == 115 || v27 == 100)
      {
        among_CGFloat b = find_among_b(a1, (uint64_t)&a_2_19, 6);
        if (among_b)
        {
          uint64_t v29 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v29;
          switch(among_b)
          {
            case 3:
              int v32 = skip_utf8(*(void *)a1, v29, *(unsigned int *)(a1 + 16), 0, -1);
              if ((v32 & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v32;
                int v33 = out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
                if ((v33 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) -= v33;
                  uint64_t result = slice_del(a1);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
              break;
            case 2:
              unsigned int v34 = *(_DWORD *)(a1 + 12);
              int v35 = skip_utf8(*(void *)a1, v29, *(unsigned int *)(a1 + 16), v34, -2);
              if ((v35 & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v35;
                unsigned int v30 = &s_3_104;
                uint64_t v36 = a1;
                int v37 = 1;
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 8) = v29 - v34 + *(_DWORD *)(a1 + 12);
              unsigned int v30 = &s_4_105;
LABEL_63:
              uint64_t v36 = a1;
              int v37 = 2;
LABEL_64:
              uint64_t result = slice_from_s(v36, v37, v30);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              break;
            case 1:
              unsigned int v30 = &s_2_59;
              goto LABEL_63;
          }
        }
      }
    }
    int v38 = *(_DWORD *)(a1 + 16);
    uint64_t v39 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    *(_DWORD *)(a1 + 24) = v39;
    if ((int)v39 - 5 > v38)
    {
      int v40 = *(unsigned __int8 *)(v39 + *(void *)a1 - 1);
      if (v40 == 103 || v40 == 100)
      {
        int v41 = find_among_b(a1, (uint64_t)&a_9_6, 8);
        int v38 = *(_DWORD *)(a1 + 16);
        if (v41)
        {
          int v42 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v42;
          if (v42 <= v38)
          {
LABEL_117:
            *(_DWORD *)(a1 + 8) = v38;
            if (**(unsigned char **)(a1 + 48))
            {
              do
              {
                uint64_t v60 = *(unsigned int *)(a1 + 8);
                while (1)
                {
                  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v60;
                  uint64_t v61 = *(unsigned int *)(a1 + 12);
                  uint64_t v62 = *(void *)a1;
                  if (v60 != v61 && *(unsigned char *)(v62 + (int)v60) == 89) {
                    break;
                  }
                  uint64_t v63 = skip_utf8(v62, v60, 0, v61, 1);
                  if ((v63 & 0x80000000) != 0) {
                    goto LABEL_125;
                  }
                  uint64_t v60 = v63;
                  *(_DWORD *)(a1 + 8) = v63;
                }
                *(_DWORD *)(a1 + 24) = v60 + 1;
                *(_DWORD *)(a1 + 8) = v60;
                uint64_t result = slice_from_s(a1, 1, &s_38_7);
              }
              while ((result & 0x80000000) == 0);
              return result;
            }
LABEL_125:
            *(_DWORD *)(a1 + 8) = v38;
            return 1;
          }
        }
      }
    }
    uint64_t v43 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v43;
    *(_DWORD *)(a1 + 24) = v43;
    uint64_t v44 = v43 - 1;
    if ((int)v44 > v38)
    {
      char v45 = *(unsigned char *)(*(void *)a1 + v44);
      if (v45 & 0xE0) == 0x60 && ((0x2000090u >> v45))
      {
        int v46 = find_among_b(a1, (uint64_t)&a_4_14, 6);
        if (v46)
        {
          int v47 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v47;
          if (v46 != 2)
          {
            if (v46 == 1 && **(_DWORD **)(a1 + 40) <= v47)
            {
              uint64_t result = slice_from_s(a1, 2, &s_5_59);
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            goto LABEL_111;
          }
          int v48 = *(_DWORD *)(a1 + 12);
          if ((out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 1) & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 8) = v47 - v48 + *(_DWORD *)(a1 + 12);
            uint64_t result = slice_del(a1);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v49 = *(_DWORD *)(a1 + 12);
            uint64_t v50 = *(int *)(a1 + 8);
            if ((int)v50 - 1 <= *(_DWORD *)(a1 + 16)
              || (char v51 = *(unsigned char *)(*(void *)a1 + v50 - 1), (v51 & 0xE0) != 0x60)
              || ((0x41570D4u >> v51) & 1) == 0)
            {
LABEL_84:
              if (v50 == **(_DWORD **)(a1 + 40) && r_shortv_0((_DWORD *)a1))
              {
                int v52 = v50 - v49;
                int v53 = *(_DWORD *)(a1 + 12);
                int v54 = v53 + v50 - v49;
                *(_DWORD *)(a1 + 8) = v54;
                uint64_t result = insert_s(a1, v53 + v52, v53 + v52, 1, &s_7_95);
                *(_DWORD *)(a1 + 8) = v54;
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              goto LABEL_111;
            }
            int v57 = find_among_b(a1, (uint64_t)&a_3_16, 13);
            if (v57)
            {
              int v58 = v50 - v49;
              int v49 = *(_DWORD *)(a1 + 12);
              LODWORD(v5nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v49 + v58;
              *(_DWORD *)(a1 + 8) = v49 + v58;
              if (v57 != 3)
              {
                if (v57 == 2)
                {
                  *(_DWORD *)(a1 + 24) = v50;
                  int v59 = skip_utf8(*(void *)a1, (v49 + v58), *(unsigned int *)(a1 + 16), 0, -1);
                  if ((v59 & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = v59;
                    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v59;
                    uint64_t result = slice_del(a1);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                  }
                }
                else if (v57 == 1)
                {
                  uint64_t result = insert_s(a1, v49 + v58, v49 + v58, 1, &s_6_134);
                  *(_DWORD *)(a1 + 8) = v50;
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
                goto LABEL_111;
              }
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_111:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_Step_1c(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_Step_2(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_Step_3_0(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_Step_4_0(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_Step_5(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v38 = *(_DWORD *)(a1 + 16);
    goto LABEL_117;
  }
  if (!find_among_b(a1, (uint64_t)&a_1_20, 3))
  {
    int v25 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v25;
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    int v25 = *(_DWORD *)(a1 + 8);
    goto LABEL_46;
  }
  return result;
}

uint64_t r_Step_1c(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t v3 = v1 - 1;
  if ((*(unsigned __int8 *)(*(void *)a1 + v3) | 0x20) != 0x79) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v3;
  int v4 = out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 0);
  uint64_t result = 0;
  if (v4) {
    return result;
  }
  if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v6 = slice_from_s(a1, 1, &s_8_110);
  if (v6 >= 0) {
    return 1;
  }
  else {
    return v6 & (v6 >> 31);
  }
}

uint64_t r_Step_2(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v4 = *(unsigned char *)(*(void *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0xC7200u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_5_13, 24);
  if (!result) {
    return result;
  }
  uint64_t v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  if (**(_DWORD **)(a1 + 40) > (int)v6) {
    return 0;
  }
  switch((int)result)
  {
    case 1:
      int v7 = &s_9_23;
      goto LABEL_30;
    case 2:
      int v7 = &s_10_42;
      goto LABEL_30;
    case 3:
      int v7 = &s_11_52;
      goto LABEL_30;
    case 4:
      int v7 = &s_12_18;
      goto LABEL_30;
    case 5:
      int v7 = &s_13_44;
      goto LABEL_28;
    case 6:
      int v7 = &s_14_20;
      goto LABEL_28;
    case 7:
      int v7 = &s_15_13;
      goto LABEL_28;
    case 8:
      int v7 = &s_16_13;
      goto LABEL_24;
    case 9:
      int v7 = &s_17_18;
      goto LABEL_28;
    case 10:
      int v7 = &s_18_11;
      goto LABEL_28;
    case 11:
      int v7 = &s_19_9;
      goto LABEL_28;
    case 12:
      int v7 = &s_20_32;
LABEL_28:
      uint64_t v10 = a1;
      int v11 = 3;
      goto LABEL_31;
    case 13:
      if ((int)v6 <= *(_DWORD *)(a1 + 16)) {
        return 0;
      }
      uint64_t v8 = v6 - 1;
      if (*(unsigned char *)(*(void *)a1 + v8) != 108) {
        return 0;
      }
      *(_DWORD *)(a1 + 8) = v8;
      int v7 = &s_21_37;
LABEL_24:
      uint64_t v10 = a1;
      int v11 = 2;
      goto LABEL_31;
    case 14:
      int v7 = &s_22_19;
LABEL_30:
      uint64_t v10 = a1;
      int v11 = 4;
LABEL_31:
      uint64_t result = slice_from_s(v10, v11, v7);
      if ((result & 0x80000000) == 0) {
        goto LABEL_32;
      }
      return result;
    case 15:
      int v9 = in_grouping_b_U(a1, (uint64_t)&g_valid_LI, 99, 116, 0);
      uint64_t result = 0;
      if (v9) {
        return result;
      }
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_32;
    default:
LABEL_32:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t r_Step_3_0(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v3 = *(unsigned char *)(v1 + *(void *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x81220u >> v3) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_6_9, 9);
  if (!result) {
    return result;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  uint64_t v6 = *(_DWORD **)(a1 + 40);
  if (*v6 > v5) {
    return 0;
  }
  switch((int)result)
  {
    case 1:
      int v7 = &s_23_15;
      uint64_t v8 = a1;
      int v9 = 4;
      goto LABEL_14;
    case 2:
      int v7 = &s_24_10;
      uint64_t v8 = a1;
      int v9 = 3;
      goto LABEL_14;
    case 3:
      int v7 = &s_25_8;
      goto LABEL_13;
    case 4:
      int v7 = &s_26_6;
LABEL_13:
      uint64_t v8 = a1;
      int v9 = 2;
LABEL_14:
      uint64_t result = slice_from_s(v8, v9, v7);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      goto LABEL_18;
    case 5:
      goto LABEL_17;
    case 6:
      if (v6[1] > v5) {
        return 0;
      }
LABEL_17:
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) == 0) {
        goto LABEL_18;
      }
      return result;
    default:
LABEL_18:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t r_Step_4_0(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  char v4 = *(unsigned char *)(*(void *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0x1C7228u >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_7_10, 18);
  if (!result) {
    return result;
  }
  uint64_t v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
  if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v6) {
    return 0;
  }
  if (result == 2)
  {
    if ((int)v6 <= *(_DWORD *)(a1 + 16)) {
      return 0;
    }
    uint64_t v7 = v6 - 1;
    if (*(unsigned __int8 *)(*(void *)a1 + v7) - 115 > 1) {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = v7;
  }
  else if (result != 1)
  {
    return 1;
  }
  uint64_t result = slice_del(a1);
  if ((result & 0x80000000) == 0) {
    return 1;
  }
  return result;
}

uint64_t r_Step_5(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 + *(void *)a1 - 1);
  if (v3 != 108 && v3 != 101) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_8_8, 2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v5;
  if (result == 2)
  {
    if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > (int)v5
      || (int)v5 <= *(_DWORD *)(a1 + 16)
      || *(unsigned char *)(*(void *)a1 + v5 - 1) != 108)
    {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = v5 - 1;
LABEL_15:
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    return 1;
  }
  if (result != 1) {
    return 1;
  }
  uint64_t v6 = *(_DWORD **)(a1 + 40);
  if (v6[1] <= (int)v5) {
    goto LABEL_15;
  }
  if (*v6 <= (int)v5)
  {
    int v7 = *(_DWORD *)(a1 + 12);
    if (!r_shortv_0((_DWORD *)a1))
    {
      *(_DWORD *)(a1 + 8) = v5 - v7 + *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  return 0;
}

void *english_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void english_UTF_8_close_env(uint64_t a1)
{
}

BOOL r_shortv_0(_DWORD *a1)
{
  int v3 = a1[2];
  int v2 = a1[3];
  if (!out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_WXY_0, 89, 121, 0)
    && !in_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0)
    && !out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0))
  {
    return 1;
  }
  a1[2] = v3 - v2 + a1[3];
  int v4 = out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0);
  BOOL result = 0;
  if (!v4)
  {
    int v6 = in_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0);
    BOOL result = 0;
    if (!v6) {
      return a1[2] <= a1[4];
    }
  }
  return result;
}

uint64_t catalan_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD **)(a1 + 40);
  _DWORD *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = out_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v4;
    int v5 = in_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
    if ((v5 & 0x80000000) == 0)
    {
      int v6 = *(_DWORD *)(a1 + 8) + v5;
      *(_DWORD *)(a1 + 8) = v6;
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v6;
      int v7 = out_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
      if ((v7 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v7;
        int v8 = in_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
        if ((v8 & 0x80000000) == 0) {
          *(_DWORD *)(*(void *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v8;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v9 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  uint64_t v10 = v9 - 1;
  if ((int)v10 > v3)
  {
    char v11 = *(unsigned char *)(*(void *)a1 + v10);
    if (v11 & 0xE0) == 0x60 && ((0x18F222u >> v11))
    {
      if (find_among_b(a1, (uint64_t)&a_1_21, 39))
      {
        int v12 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
        if (**(_DWORD **)(a1 + 40) <= v12)
        {
          uint64_t result = slice_del(a1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
  }
  int v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  among_CGFloat b = find_among_b(a1, (uint64_t)&a_2_20, 200);
  if (among_b)
  {
    int v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v16;
    switch(among_b)
    {
      case 1:
        int v17 = **(_DWORD **)(a1 + 40);
        goto LABEL_16;
      case 2:
        int v17 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
LABEL_16:
        if (v17 <= v16) {
          goto LABEL_29;
        }
        break;
      case 3:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v16) {
          break;
        }
        uint64_t v18 = &s_6_135;
        uint64_t v19 = a1;
        int v20 = 3;
        goto LABEL_32;
      case 4:
        if (*(_DWORD *)(*(void *)(a1 + 40) + 4) > v16) {
          break;
        }
        uint64_t v18 = &s_7_96;
        uint64_t v19 = a1;
        int v20 = 2;
        goto LABEL_32;
      case 5:
        if (**(_DWORD **)(a1 + 40) > v16) {
          break;
        }
        uint64_t v18 = &s_8_111;
        uint64_t v19 = a1;
        int v20 = 1;
LABEL_32:
        uint64_t result = slice_from_s(v19, v20, v18);
        if ((result & 0x80000000) == 0) {
          goto LABEL_33;
        }
        return result;
      default:
        goto LABEL_33;
    }
  }
  int v21 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v21;
  *(_DWORD *)(a1 + 24) = v21;
  int v22 = find_among_b(a1, (uint64_t)&a_3_17, 283);
  if (v22)
  {
    int v23 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v23;
    if (v22 == 2)
    {
      int v24 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
LABEL_28:
      if (v24 <= v23)
      {
LABEL_29:
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      goto LABEL_33;
    }
    if (v22 == 1)
    {
      int v24 = **(_DWORD **)(a1 + 40);
      goto LABEL_28;
    }
  }
LABEL_33:
  int v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  int v26 = find_among_b(a1, (uint64_t)&a_4_15, 22);
  if (!v26) {
    goto LABEL_41;
  }
  int v27 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v27;
  if (v26 != 2)
  {
    if (v26 == 1 && **(_DWORD **)(a1 + 40) <= v27)
    {
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
LABEL_41:
    uint64_t v28 = *(unsigned int *)(a1 + 12);
    uint64_t v29 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v29;
    uint64_t v30 = v29;
    while (1)
    {
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v30;
      uint64_t v31 = (int)v30 + 1;
      if ((int)v31 < (int)v28
        && (char v32 = *(unsigned char *)(*(void *)a1 + v31), (v32 & 0xE0) == 0xA0)
        && ((0x148CB303u >> v32) & 1) != 0)
      {
        int among = find_among(a1, (uint64_t)&a_0_21, 13);
        if (!among) {
          goto LABEL_60;
        }
        uint64_t v30 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v30;
        switch(among)
        {
          case 1:
            uint64_t v35 = a1;
            uint64_t v36 = &s_0_151;
            break;
          case 2:
            uint64_t v35 = a1;
            uint64_t v36 = &s_1_298;
            break;
          case 3:
            uint64_t v35 = a1;
            uint64_t v36 = &s_2_200;
            break;
          case 4:
            uint64_t v35 = a1;
            uint64_t v36 = &s_3_283;
            break;
          case 5:
            uint64_t v35 = a1;
            uint64_t v36 = &s_4_106;
            break;
          case 6:
            uint64_t v35 = a1;
            uint64_t v36 = &s_5_60;
            break;
          case 7:
            uint64_t v28 = *(unsigned int *)(a1 + 12);
            goto LABEL_46;
          default:
            goto LABEL_48;
        }
        uint64_t result = slice_from_s(v35, 1, v36);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v30;
LABEL_46:
        int v33 = skip_utf8(*(void *)a1, v30, 0, v28, 1);
        if (v33 < 0)
        {
LABEL_60:
          *(_DWORD *)(a1 + 8) = v29;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v33;
      }
LABEL_48:
      uint64_t v30 = *(unsigned int *)(a1 + 8);
      uint64_t v28 = *(unsigned int *)(a1 + 12);
    }
  }
  if (**(_DWORD **)(a1 + 40) > v27) {
    goto LABEL_41;
  }
  uint64_t result = slice_from_s(a1, 2, &s_9_24);
  if ((result & 0x80000000) == 0) {
    goto LABEL_41;
  }
  return result;
}

void *catalan_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void catalan_UTF_8_close_env(uint64_t a1)
{
}

uint64_t lithuanian_UTF_8_stem(uint64_t a1)
{
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 12);
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a1 + 12))
  {
    int v3 = *(char **)a1;
    if (*(unsigned char *)(*(void *)a1 + v2) == 97)
    {
      int v4 = len_utf8(v3);
      int v5 = v2;
      if (v4 >= 7)
      {
        int v6 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
        if (v6 >= 0) {
          int v5 = v6;
        }
        else {
          int v5 = v2;
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
  }
  int v7 = out_grouping_U(a1, (uint64_t)&g_v_16, 97, 371, 1);
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v7;
    int v8 = in_grouping_U(a1, (uint64_t)&g_v_16, 97, 371, 1);
    if ((v8 & 0x80000000) == 0) {
      **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8) + v8;
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  uint64_t v9 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  if ((int)v9 - 3 > v2)
  {
    char v10 = *(unsigned char *)(v9 + *(void *)a1 - 1);
    if (v10 & 0xE0) == 0x60 && ((0x280020u >> v10))
    {
      among_CGFloat b = find_among_b(a1, (uint64_t)&a_2_21, 11);
      if (among_b)
      {
        *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
        switch(among_b)
        {
          case 1:
            int v12 = &s_0_152;
            goto LABEL_18;
          case 2:
            int v12 = &s_1_299;
LABEL_18:
            uint64_t v13 = a1;
            int v14 = 5;
            goto LABEL_27;
          case 3:
            int v12 = &s_2_201;
            uint64_t v13 = a1;
            int v14 = 7;
            goto LABEL_27;
          case 4:
            int v12 = &s_3_284;
            goto LABEL_22;
          case 5:
            int v12 = &s_4_107;
LABEL_22:
            uint64_t v13 = a1;
            int v14 = 4;
            goto LABEL_27;
          case 6:
            int v12 = &s_5_61;
            goto LABEL_26;
          case 7:
            int v12 = &s_6_136;
            goto LABEL_26;
          case 8:
            int v12 = &s_7_97;
LABEL_26:
            uint64_t v13 = a1;
            int v14 = 6;
LABEL_27:
            uint64_t result = slice_from_s(v13, v14, v12);
            if ((result & 0x80000000) == 0) {
              break;
            }
            return result;
          default:
            break;
        }
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v16;
  int v17 = **(_DWORD **)(a1 + 40);
  if (v16 >= v17)
  {
    int v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v17;
    *(_DWORD *)(a1 + 24) = v16;
    if (find_among_b(a1, (uint64_t)&a_0_22, 204))
    {
      int v19 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v19;
      if (**(_DWORD **)(a1 + 40) <= v19)
      {
        uint64_t result = slice_del(a1);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v18;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  uint64_t result = r_fix_chdz(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    while (1)
    {
      int v20 = *(_DWORD *)(a1 + 8);
      int v21 = **(_DWORD **)(a1 + 40);
      if (v20 < v21) {
        break;
      }
      int v22 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v21;
      *(_DWORD *)(a1 + 24) = v20;
      if (!find_among_b(a1, (uint64_t)&a_1_22, 62))
      {
        *(_DWORD *)(a1 + 16) = v22;
        break;
      }
      int v23 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v23;
      uint64_t result = slice_del(a1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    uint64_t result = r_fix_chdz(a1);
    if ((result & 0x80000000) == 0)
    {
      int v24 = *(_DWORD *)(a1 + 16);
      uint64_t v25 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v25;
      *(_DWORD *)(a1 + 24) = v25;
      uint64_t v26 = v25 - 1;
      if ((int)v26 <= v24 {
        || *(unsigned char *)(*(void *)a1 + v26) != 100
      }
        || !find_among_b(a1, (uint64_t)&a_4_16, 1)
        || (*(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8),
            uint64_t result = slice_from_s(a1, 1, &s_10_43),
            (result & 0x80000000) == 0))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_fix_chdz(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  uint64_t v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(*(void *)a1 + v2);
  if (v4 != 190 && v4 != 141) {
    return 0;
  }
  uint64_t result = find_among_b(a1, (uint64_t)&a_3_18, 2);
  if (result)
  {
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
    if (result == 2)
    {
      int v6 = &s_9_25;
    }
    else
    {
      if (result != 1) {
        return 1;
      }
      int v6 = &s_8_112;
    }
    uint64_t result = slice_from_s(a1, 1, v6);
    if ((result & 0x80000000) == 0) {
      return 1;
    }
  }
  return result;
}

void *lithuanian_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void lithuanian_UTF_8_close_env(uint64_t a1)
{
}

uint64_t swedish_UTF_8_stem(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = skip_utf8(*(void *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_17, 97, 246, 1) & 0x80000000) == 0)
    {
      int v5 = in_grouping_U(a1, (uint64_t)&g_v_17, 97, 246, 1);
      if ((v5 & 0x80000000) == 0)
      {
        int v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        int v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1]) {
          int v6 = v7[1];
        }
        *int v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  int v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 <= v9
      || (char v10 = *(unsigned char *)(v8 + *(void *)a1 - 1), (v10 & 0xE0) != 0x60)
      || ((0x1C4032u >> v10) & 1) == 0
      || (among_CGFloat b = find_among_b(a1, (uint64_t)&a_0_23, 37)) == 0)
    {
      *(_DWORD *)(a1 + 16) = v2;
      goto LABEL_16;
    }
    int v12 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = v12;
    if (among_b == 2)
    {
      if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_2, 98, 121, 0)) {
        goto LABEL_16;
      }
    }
    else if (among_b != 1)
    {
      goto LABEL_16;
    }
    uint64_t result = slice_del(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
LABEL_16:
  int v13 = *(_DWORD *)(a1 + 12);
  int v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v13;
  uint64_t v15 = *(int **)(a1 + 40);
  int v16 = *v15;
  if (v13 < *v15) {
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 16) = v16;
  uint64_t v17 = v13 - 1;
  if ((int)v17 <= v16) {
    goto LABEL_23;
  }
  char v18 = *(unsigned char *)(*(void *)a1 + v17);
  if ((v18 & 0xE0) != 0x60) {
    goto LABEL_23;
  }
  if (((0x104010u >> v18) & 1) == 0) {
    goto LABEL_23;
  }
  if (!find_among_b(a1, (uint64_t)&a_1_23, 7)) {
    goto LABEL_23;
  }
  uint64_t v19 = *(unsigned int *)(a1 + 12);
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 24) = v19;
  int v21 = skip_utf8(*(void *)a1, v19, v20, 0, -1);
  if (v21 < 0
    || (*(_DWORD *)(a1 + 8) = v21, *(_DWORD *)(a1 + 20) = v21, uint64_t result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_23:
    *(_DWORD *)(a1 + 16) = v14;
    int v13 = *(_DWORD *)(a1 + 12);
    uint64_t v15 = *(int **)(a1 + 40);
LABEL_24:
    *(_DWORD *)(a1 + 8) = v13;
    int v23 = *v15;
    if (v13 < v23)
    {
LABEL_41:
      *(_DWORD *)(a1 + 8) = v14;
      return 1;
    }
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v13;
    uint64_t v24 = v13 - 1;
    if ((int)v24 > v23)
    {
      char v25 = *(unsigned char *)(*(void *)a1 + v24);
      if (v25 & 0xE0) == 0x60 && ((0x180080u >> v25))
      {
        int v26 = find_among_b(a1, (uint64_t)&a_2_22, 5);
        if (v26)
        {
          *(_DWORD *)(a1 + 2nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0) = *(_DWORD *)(a1 + 8);
          if (v26 == 3)
          {
            int v27 = &s_1_300;
          }
          else
          {
            if (v26 != 2)
            {
              if (v26 == 1)
              {
                uint64_t result = slice_del(a1);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              goto LABEL_40;
            }
            int v27 = &s_0_204;
          }
          uint64_t result = slice_from_s(a1, 4, v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
    }
LABEL_40:
    *(_DWORD *)(a1 + 16) = v14;
    goto LABEL_41;
  }
  return result;
}

void *swedish_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void swedish_UTF_8_close_env(uint64_t a1)
{
}

void CEM::AdaptationDatabaseController::getEmojiId()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. getEmojiId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void CEM::AdaptationDatabaseController::createEmojiId()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. createEmojiId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void CEM::AdaptationDatabaseController::getStringId()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. getStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void CEM::AdaptationDatabaseController::createStringId()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. createStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()()
{
  OUTLINED_FUNCTION_1();
    v2,
    v3,
    v4,
    v5,
    v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
    v2,
    v3,
    v4,
    v5,
    v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract std::string from std::variant<T> column value map. enumerateStringAndStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1B8C45000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. enumerateStringAndStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void log_emoji_string_lookup_error_cold_1()
{
  CEMEmojiLocaleDataGetLocaleIdentifier();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B8C45000, v0, v1, "Could not get an emoji string for document ID '%{public}d' and for locale: '%{public}@'", v2, v3, v4, v5, v6);
}

void log_emoji_token_creation_error_cold_1()
{
  CEMEmojiLocaleDataGetLocaleIdentifier();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0(&dword_1B8C45000, v0, v1, "Could not create an emoji using document ID '%{public}d' and for locale: '%{public}@'", v2, v3, v4, v5, v6);
}

void CEM::Statement::prepare(uint64_t a1, sqlite3 **a2, NSObject *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  uint64_t v5 = sqlite3_errmsg(*a2);
  int v6 = 136315394;
  int v7 = v4;
  __int16 v8 = 2082;
  int v9 = v5;
  _os_log_error_impl(&dword_1B8C45000, a3, OS_LOG_TYPE_ERROR, "Could not prepare SQL statement: '%s'. Error: '%{public}s'", (uint8_t *)&v6, 0x16u);
}

void CEM::Statement::bindParameters(int a1, uint64_t a2, NSObject *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)(a2 + 32);
  if (*(char *)(a2 + 55) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  int v6 = sqlite3_errmsg(*(sqlite3 **)(a2 + 96));
  v7[0] = 67109634;
  v7[1] = a1;
  __int16 v8 = 2082;
  int v9 = v5;
  __int16 v10 = 2082;
  char v11 = v6;
  _os_log_error_impl(&dword_1B8C45000, a3, OS_LOG_TYPE_ERROR, "Could not bind argument (%d) for query '%{public}s'. Error: '%{public}s'", (uint8_t *)v7, 0x1Cu);
}

void CEM::Statement::getValueForColumnAtIndex()
{
}

void CEM::AdaptationDatabase::AdaptationDatabase(char *a1, void *a2, os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136315138;
  uint64_t v4 = a2;
  _os_log_debug_impl(&dword_1B8C45000, log, OS_LOG_TYPE_DEBUG, "Opened database connection successfully: '%s'", (uint8_t *)&v3, 0xCu);
}

void CEM::AdaptationDatabase::AdaptationDatabase(uint64_t a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136446466;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2082;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl(&dword_1B8C45000, log, OS_LOG_TYPE_ERROR, "Could not open database: '%{public}s'; Error: '%{public}s'",
    buf,
    0x16u);
}

void CEM::AdaptationDatabase::initializeDatbaseWithSql(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B8C45000, log, OS_LOG_TYPE_DEBUG, "Database connection uninitialized; not executing raw SQL statement.",
    v1,
    2u);
}

void CEM::AdaptationDatabase::executeStatement(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1B8C45000, log, OS_LOG_TYPE_DEBUG, "Database connection uninitialized; not executing SQL statement.",
    v1,
    2u);
}

void trie::MarisaTrie<unsigned short,char16_t>::build()
{
  __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
}

uint64_t sub_1B8CA3630()
{
  return MEMORY[0x1F4183098]();
}

uint64_t sub_1B8CA3640()
{
  return MEMORY[0x1F41830A0]();
}

uint64_t sub_1B8CA3650()
{
  return MEMORY[0x1F41830A8]();
}

uint64_t sub_1B8CA3660()
{
  return MEMORY[0x1F41830B0]();
}

uint64_t sub_1B8CA3670()
{
  return MEMORY[0x1F41830C0]();
}

uint64_t sub_1B8CA3680()
{
  return MEMORY[0x1F41830D0]();
}

uint64_t sub_1B8CA3690()
{
  return MEMORY[0x1F41830D8]();
}

uint64_t sub_1B8CA36A0()
{
  return MEMORY[0x1F41830E8]();
}

uint64_t sub_1B8CA36B0()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_1B8CA36C0()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_1B8CA36D0()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_1B8CA36E0()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1B8CA36F0()
{
  return MEMORY[0x1F4186958]();
}

uint64_t sub_1B8CA3700()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_1B8CA3710()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_1B8CA3720()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1B8CA3730()
{
  return MEMORY[0x1F40E6018]();
}

uint64_t sub_1B8CA3740()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1B8CA3750()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1B8CA3760()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_1B8CA3770()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1B8CA3780()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1B8CA3790()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1B8CA37A0()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1B8CA37B0()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1B8CA37C0()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1B8CA37D0()
{
  return MEMORY[0x1F40E6348]();
}

uint64_t sub_1B8CA37E0()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1B8CA37F0()
{
  return MEMORY[0x1F4188440]();
}

uint64_t sub_1B8CA3800()
{
  return MEMORY[0x1F4183150]();
}

uint64_t sub_1B8CA3810()
{
  return MEMORY[0x1F40E6D90]();
}

uint64_t sub_1B8CA3820()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1B8CA3830()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1B8CA3840()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1B8CA3850()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1B8CA3860()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1B8CA3870()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1B8CA3880()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1B8CA3890()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1B8CA38A0()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1B8CA38B0()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1B8CA38D0()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1B8CA38E0()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1B8CA38F0()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1B8CA3900()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1B8CA3910()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1B8CA3920()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t sub_1B8CA3930()
{
  return MEMORY[0x1F4185880]();
}

uint64_t sub_1B8CA3940()
{
  return MEMORY[0x1F41858D0]();
}

uint64_t sub_1B8CA3950()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t sub_1B8CA3960()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1B8CA3970()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1B8CA3980()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1B8CA3990()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_1B8CA39A0()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1B8CA39B0()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1B8CA39C0()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1B8CA39D0()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t sub_1B8CA39E0()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1B8CA39F0()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t sub_1B8CA3A00()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1B8CA3A10()
{
  return MEMORY[0x1F4186110]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1F410C8D0]();
}

unsigned __int8 *__cdecl CC_SHA224(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9750](data, *(void *)&len, md);
}

uint64_t CEMCopyEmojiTokens()
{
  return MEMORY[0x1F4113B98]();
}

uint64_t CEMCreateEmojiCharacterSet()
{
  return MEMORY[0x1F4113BA0]();
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1F4113BB0]();
}

uint64_t CEMEMFSearchEngineCreateBundleForLocaleIdentifier()
{
  return MEMORY[0x1F4113BC0]();
}

uint64_t CEMEmojiLocaleDataCopyCommonEmojiTokens()
{
  return MEMORY[0x1F4113BD0]();
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x1F4113BD8]();
}

uint64_t CEMEmojiLocaleDataEnumerateSearchResultsInStringWithBlock()
{
  return MEMORY[0x1F4113BE0]();
}

uint64_t CEMEmojiLocaleDataGetLocaleIdentifier()
{
  return MEMORY[0x1F4113BE8]();
}

uint64_t CEMEmojiTokenCopyName()
{
  return MEMORY[0x1F4113BF0]();
}

uint64_t CEMEmojiTokenCopyRelatedEmoji()
{
  return MEMORY[0x1F4113BF8]();
}

uint64_t CEMEmojiTokenCreateCopyRemovingModifiers()
{
  return MEMORY[0x1F4113C00]();
}

uint64_t CEMEmojiTokenCreatePresentationVariant()
{
  return MEMORY[0x1F4113C08]();
}

uint64_t CEMEmojiTokenCreateWithIndex()
{
  return MEMORY[0x1F4113C10]();
}

uint64_t CEMEmojiTokenCreateWithLongCharacter()
{
  return MEMORY[0x1F4113C18]();
}

uint64_t CEMEmojiTokenCreateWithString()
{
  return MEMORY[0x1F4113C20]();
}

uint64_t CEMEmojiTokenGetGender()
{
  return MEMORY[0x1F4113C30]();
}

uint64_t CEMEmojiTokenGetLocaleData()
{
  return MEMORY[0x1F4113C40]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1F4113C58]();
}

uint64_t CEMEmojiTokenIsCommon()
{
  return MEMORY[0x1F4113C60]();
}

uint64_t CEMEmojiTokenSupportsPresentationStyle()
{
  return MEMORY[0x1F4113C68]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1F4113C70]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x1F4113C98]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1F40D7448](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7450](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1F40D74D8](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1F40D77B8]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7C00](allocator, localeID);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C10](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E9A00](isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CFDataRef CTFontCopyTable(CTFontRef font, CTFontTableTag table, CTFontTableOptions options)
{
  return (CFDataRef)MEMORY[0x1F40DF308](font, *(void *)&table, *(void *)&options);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1F40DF338](font, matrix, attributes, size);
}

uint64_t CTFontCreateEmojiFontForFont()
{
  return MEMORY[0x1F40DF348]();
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1F40DF370](*(void *)&uiType, language, size);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x1F40DF558](font);
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x1F40DF7C8](line, options);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1F40DF7E0](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1F40DF7E8](line, context);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1F40DF8D8](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1F412F980]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return (char *)MEMORY[0x1F41821B8](pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

uint64_t xpc_connection_copy_bundle_id()
{
  return MEMORY[0x1F40CEB88]();
}