uint64_t _GLOBAL__sub_I_MRMatchingResult_cpp()
{
  void (*v0)(void *);
  uint64_t vars8;

  std::string::basic_string[abi:ne180100]<0>(marrs::mrr::mr::MRMatchingResult::entityDataSourceKey, "dataSource");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, marrs::mrr::mr::MRMatchingResult::entityDataSourceKey, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_MentionDetectorOverrides_cpp()
{
  marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME = 0;
  *(void *)algn_1EBC84378 = 0;
  qword_1EBC84380 = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME, "overrides.json", "");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME, &dword_1C9555000);
}

void sub_1C95572C8(_Unwind_Exception *exception_object)
{
  if (SHIBYTE(qword_1EBC84380) < 0) {
    operator delete((void *)marrs::mrr::md::MentionDetectorOverrides::OVERRIDES_FILE_NAME);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ProtocolFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_SpanTypeFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_GazeBasedFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_MentionKeywordFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_UtteranceKeywordFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
  qword_1EBC844F8 = 0;
  unk_1EBC84500 = 0;
  marrs::mrr::mr::keywordFilename = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::keywordFilename, "keywords.json", "");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::keywordFilename, &dword_1C9555000);
}

void sub_1C9557510(_Unwind_Exception *exception_object)
{
  if (byte_1EBC84507 < 0) {
    operator delete((void *)marrs::mrr::mr::keywordFilename);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_OrdinalFilter_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(&marrs::mrr::mr::assetSubDirectoryPath, "ruleBased");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::assetSubDirectoryPath, &dword_1C9555000);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C955760C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_MRRVisualAndScreenMentionDetector_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::md::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::configFileName, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(&marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL, "##");
  __cxa_atexit(MEMORY[0x1E4FBA210], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::WORD_PIECE_SUFFIX_SYMBOL, &dword_1C9555000);
  qword_1EBC843A8 = 0;
  unk_1EBC843B0 = 0;
  marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME, "classifier_model.mlmodelc", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FILE_NAME, "model.espresso.net");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FILE_NAME, &dword_1C9555000);
}

void sub_1C955773C(_Unwind_Exception *exception_object)
{
  if (byte_1EBC843B7 < 0) {
    operator delete((void *)marrs::mrr::md::MRRVisualAndScreenMentionDetector::MODEL_FOLDER_NAME);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_CbRPredictorPlugin_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(LOGISTIC_PARAMS, "sys_comb_logistic_regression_params");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], LOGISTIC_PARAMS, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_1, "sys_comb_weight_1");
  __cxa_atexit(v0, SYS_COMB_WEIGHT_1, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_2, "sys_comb_weight_2");
  return __cxa_atexit(v0, SYS_COMB_WEIGHT_2, &dword_1C9555000);
}

void _GLOBAL__sub_I_QueryRewrite_mm()
{
  v0 = (void *)MEMORY[0x1CB787220]();
  std::string::basic_string[abi:ne180100]<0>(LOGISTIC_PARAMS, "sys_comb_logistic_regression_params");
  uint64_t v1 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], LOGISTIC_PARAMS, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_1, "sys_comb_weight_1");
  __cxa_atexit(v1, SYS_COMB_WEIGHT_1, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(SYS_COMB_WEIGHT_2, "sys_comb_weight_2");
  __cxa_atexit(v1, SYS_COMB_WEIGHT_2, &dword_1C9555000);
}

uint64_t _GLOBAL__sub_I_RuleBasedMR_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(&marrs::mrr::mr::RuleBasedMR::ordinalFilterAssetPath, "verbal");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::RuleBasedMR::ordinalFilterAssetPath, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&marrs::mrr::mr::RuleBasedMR::verbKeywordsAssetPath, "verbKeywords");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::RuleBasedMR::verbKeywordsAssetPath, &dword_1C9555000);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C9557A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_MROrchestrator_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(&marrs::mrr::mr::MROrchestrator::modelMRAssetPath, "visual");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::MROrchestrator::modelMRAssetPath, &dword_1C9555000);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [7],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C9557B34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ModelBasedMR_cpp()
{
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C9555000);
  qword_1EBC84438 = 0;
  unk_1EBC84440 = 0;
  marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath, "modelBased", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath, &dword_1C9555000);
  qword_1EBC84420 = 0;
  unk_1EBC84428 = 0;
  marrs::mrr::mr::ModelBasedMR::modelFolderName = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)&marrs::mrr::mr::ModelBasedMR::modelFolderName, "converted_model.mlmodelc", "");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::modelFolderName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&marrs::mrr::mr::ModelBasedMR::modelName, "model.espresso.net");
  return __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::ModelBasedMR::modelName, &dword_1C9555000);
}

void sub_1C9557C78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C9557CD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_MultimodalReferenceResolution_mm()
{
  v0 = (void *)MEMORY[0x1CB787220]();
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::md::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::md::configFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::configFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::configFileName, &dword_1C9555000);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&marrs::mrr::mr::filterConfigFileName, "config.json");
  __cxa_atexit((void (*)(void *))std::__fs::filesystem::path::~path[abi:ne180100], &marrs::mrr::mr::filterConfigFileName, &dword_1C9555000);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C9557E08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0) {
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    v15 = (char *)v14 + size;
    do
    {
      char v16 = *v4++;
      *v15++ = v16;
    }
    while (v4 != a3);
    unsigned char *v15 = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      v12 = __p;
    }
    else {
      v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_1C9557F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_MRREntityNLUGraphParsingUtil_mm()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v0 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1CB787220]();
  uint64_t v1 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_EmailAddress(v0);
  v26[0] = *((_DWORD *)v1 + 9);
  v2 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PhoneNumber(v1);
  v26[1] = *((_DWORD *)v2 + 9);
  v3 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Uri(v2);
  v26[2] = *((_DWORD *)v3 + 9);
  v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_LocalisedString(v3);
  v26[3] = *((_DWORD *)v4 + 9);
  v5 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Group(v4);
  v26[4] = *((_DWORD *)v5 + 9);
  unint64_t v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Person(v5);
  v26[5] = *((_DWORD *)v6 + 9);
  unint64_t v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItem(v6);
  v26[6] = *((_DWORD *)v7 + 9);
  v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_SearchObject(v7);
  v26[7] = *((_DWORD *)v8 + 9);
  std::string::size_type v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_UserEntity(v8);
  v26[8] = *((_DWORD *)v9 + 9);
  v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_App(v9);
  v26[9] = *((_DWORD *)v10 + 9);
  unint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Window(v10);
  v26[10] = *((_DWORD *)v11 + 9);
  uint64_t v12 = siri::ontology::oname::graph::ontology_init::common_Setting(v11);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v26[11] = *(_DWORD *)(v12 + 36);
  qword_1EBC84360 = 0;
  v15 = &qword_1EBC84360;
  qword_1EBC84368 = 0;
  marrs::mrr::mr::directValueEntityTypes = (uint64_t)&qword_1EBC84360;
  while (1)
  {
    if (v15 == &qword_1EBC84360)
    {
      std::string::size_type v17 = &qword_1EBC84360;
    }
    else
    {
      char v16 = (uint64_t *)v13;
      if (v13)
      {
        do
        {
          std::string::size_type v17 = v16;
          char v16 = (uint64_t *)v16[1];
        }
        while (v16);
      }
      else
      {
        v18 = &qword_1EBC84360;
        do
        {
          std::string::size_type v17 = (uint64_t *)v18[2];
          BOOL v19 = *v17 == (void)v18;
          v18 = v17;
        }
        while (v19);
      }
      int v20 = v26[v14];
      if (*((_DWORD *)v17 + 7) >= v20)
      {
        if (v13)
        {
          v22 = &qword_1EBC84360;
          while (1)
          {
            while (1)
            {
              v21 = (uint64_t *)v13;
              int v24 = *(_DWORD *)(v13 + 28);
              if (v20 >= v24) {
                break;
              }
              uint64_t v13 = *v21;
              v22 = v21;
              if (!*v21) {
                goto LABEL_17;
              }
            }
            if (v24 >= v20) {
              break;
            }
            v22 = v21 + 1;
            uint64_t v13 = v21[1];
            if (!v13) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          v21 = &qword_1EBC84360;
          v22 = &qword_1EBC84360;
        }
        goto LABEL_16;
      }
    }
    v21 = v13 ? v17 : &qword_1EBC84360;
    v22 = v13 ? v17 + 1 : &qword_1EBC84360;
LABEL_16:
    if (!*v22)
    {
LABEL_17:
      v23 = operator new(0x20uLL);
      v23[7] = v26[v14];
      *(void *)v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = v21;
      uint64_t *v22 = (uint64_t)v23;
      if (*(void *)marrs::mrr::mr::directValueEntityTypes)
      {
        marrs::mrr::mr::directValueEntityTypes = *(void *)marrs::mrr::mr::directValueEntityTypes;
        v23 = (_DWORD *)*v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBC84360, (uint64_t *)v23);
      ++qword_1EBC84368;
    }
    if (++v14 == 12) {
      break;
    }
    v15 = (uint64_t *)marrs::mrr::mr::directValueEntityTypes;
    uint64_t v13 = qword_1EBC84360;
  }
  __cxa_atexit((void (*)(void *))std::set<int>::~set[abi:ne180100], &marrs::mrr::mr::directValueEntityTypes, &dword_1C9555000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeKitEntityTypeString, (void *)[(id)*MEMORY[0x1E4FA3920] UTF8String], objc_msgSend((id)*MEMORY[0x1E4FA3920], "lengthOfBytesUsingEncoding:", 4));
  v25 = (void (*)(void *))MEMORY[0x1E4FBA210];
  __cxa_atexit(MEMORY[0x1E4FBA210], &marrs::mrr::mr::homeKitEntityTypeString, &dword_1C9555000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationRoomString, (void *)[(id)*MEMORY[0x1E4FA3948] UTF8String], objc_msgSend((id)*MEMORY[0x1E4FA3948], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationRoomString, &dword_1C9555000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationAccessoryNameString, (void *)[(id)*MEMORY[0x1E4FA3940] UTF8String], objc_msgSend((id)*MEMORY[0x1E4FA3940], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationAccessoryNameString, &dword_1C9555000);
  std::string::basic_string[abi:ne180100](&marrs::mrr::mr::homeAutomationServiceNameString, (void *)[(id)*MEMORY[0x1E4FA3950] UTF8String], objc_msgSend((id)*MEMORY[0x1E4FA3950], "lengthOfBytesUsingEncoding:", 4));
  __cxa_atexit(v25, &marrs::mrr::mr::homeAutomationServiceNameString, &dword_1C9555000);
}

void sub_1C9558350(_Unwind_Exception *a1)
{
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t _GLOBAL__sub_I_MRREntity_cpp()
{
  __dst[62] = *MEMORY[0x1E4F143B8];
  memcpy(__dst, &unk_1E6599D40, 0x1E0uLL);
  std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100]((uint64_t **)&marrs::mrr::mr::MRREntity::EntityTypeStr, (int *)__dst, 30);
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::EntityTypeStr, &dword_1C9555000);
  memcpy(__dst, &unk_1E6599F20, 0x1F0uLL);
  std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100]((uint64_t **)&marrs::mrr::mr::MRREntity::MatchingSpanLabelStr, (int *)__dst, 31);
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::MatchingSpanLabelStr, &dword_1C9555000);
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_1EBC844A0 = 0;
  qword_1EBC84498 = 0;
  v2 = &qword_1EBC84498;
  marrs::mrr::mr::MRREntity::EntitySourceToStrMap = (uint64_t)&qword_1EBC84498;
  while (1)
  {
    v3 = (int *)((char *)&unk_1E659A110 + 16 * v1);
    if (v2 == &qword_1EBC84498)
    {
      v5 = &qword_1EBC84498;
    }
    else
    {
      v4 = (uint64_t *)v0;
      if (v0)
      {
        do
        {
          v5 = v4;
          v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        unint64_t v6 = &qword_1EBC84498;
        do
        {
          v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          unint64_t v6 = v5;
        }
        while (v7);
      }
      int v8 = *v3;
      if (*((_DWORD *)v5 + 8) >= *v3)
      {
        if (v0)
        {
          v10 = &qword_1EBC84498;
          while (1)
          {
            while (1)
            {
              std::string::size_type v9 = (uint64_t *)v0;
              int v12 = *(_DWORD *)(v0 + 32);
              if (v8 >= v12) {
                break;
              }
              uint64_t v0 = *v9;
              v10 = v9;
              if (!*v9) {
                goto LABEL_17;
              }
            }
            if (v12 >= v8) {
              break;
            }
            v10 = v9 + 1;
            uint64_t v0 = v9[1];
            if (!v0) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          std::string::size_type v9 = &qword_1EBC84498;
          v10 = &qword_1EBC84498;
        }
        goto LABEL_16;
      }
    }
    std::string::size_type v9 = v0 ? v5 : &qword_1EBC84498;
    v10 = v0 ? v5 + 1 : &qword_1EBC84498;
LABEL_16:
    if (!*v10)
    {
LABEL_17:
      unint64_t v11 = operator new(0x30uLL);
      v11[2] = *(_OWORD *)v3;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v9;
      uint64_t *v10 = (uint64_t)v11;
      if (*(void *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap)
      {
        marrs::mrr::mr::MRREntity::EntitySourceToStrMap = *(void *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap;
        unint64_t v11 = (_OWORD *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBC84498, (uint64_t *)v11);
      ++qword_1EBC844A0;
    }
    if (++v1 == 6) {
      break;
    }
    v2 = (uint64_t *)marrs::mrr::mr::MRREntity::EntitySourceToStrMap;
    uint64_t v0 = qword_1EBC84498;
  }
  __cxa_atexit((void (*)(void *))std::map<marrs::mrr::mr::EntitySource,char const*>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::EntitySourceToStrMap, &dword_1C9555000);
  std::string::basic_string[abi:ne180100]<0>(__dst, "book");
  LODWORD(__dst[3]) = 26;
  std::string::basic_string[abi:ne180100]<0>(&__dst[4], "album");
  LODWORD(__dst[7]) = 9;
  std::string::basic_string[abi:ne180100]<0>(&__dst[8], "landmark");
  LODWORD(__dst[11]) = 2;
  std::string::basic_string[abi:ne180100]<0>(&__dst[12], "dogs");
  LODWORD(__dst[15]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[16], "cats");
  LODWORD(__dst[19]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[20], "nature");
  LODWORD(__dst[23]) = 27;
  std::string::basic_string[abi:ne180100]<0>(&__dst[24], "packagedProducts");
  LODWORD(__dst[27]) = 28;
  std::string::basic_string[abi:ne180100]<0>(&__dst[28], "art");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  LODWORD(__dst[31]) = 29;
  qword_1EBC844C8 = 0;
  v15 = &qword_1EBC844C8;
  qword_1EBC844D0 = 0;
  for (marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap = (uint64_t)&qword_1EBC844C8;
        ;
        v15 = (uint64_t *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap)
  {
    char v16 = (const std::string::value_type **)&__dst[4 * v14];
    if (v15 == &qword_1EBC844C8)
    {
      v18 = &qword_1EBC844C8;
LABEL_40:
      if (v13)
      {
        int v20 = v18 + 1;
        if (v18[1]) {
          goto LABEL_58;
        }
      }
      else
      {
LABEL_51:
        v18 = &qword_1EBC844C8;
        int v20 = &qword_1EBC844C8;
      }
LABEL_52:
      v23 = (char *)operator new(0x40uLL);
      int v24 = (std::string *)(v23 + 32);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v24, *v16, (std::string::size_type)v16[1]);
      }
      else
      {
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
        *((void *)v23 + 6) = v16[2];
      }
      *((_DWORD *)v23 + 14) = __dst[4 * v14 + 3];
      *(void *)v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = v18;
      *int v20 = (uint64_t)v23;
      if (*(void *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap)
      {
        marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap = *(void *)marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap;
        v23 = (char *)*v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBC844C8, (uint64_t *)v23);
      uint64_t v13 = qword_1EBC844C8;
      ++qword_1EBC844D0;
      goto LABEL_58;
    }
    std::string::size_type v17 = (uint64_t *)v13;
    if (v13)
    {
      do
      {
        v18 = v17;
        std::string::size_type v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      BOOL v19 = &qword_1EBC844C8;
      do
      {
        v18 = (uint64_t *)v19[2];
        BOOL v7 = *v18 == (void)v19;
        BOOL v19 = v18;
      }
      while (v7);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v18 + 4, &__dst[4 * v14])) {
      goto LABEL_40;
    }
    if (!v13) {
      goto LABEL_51;
    }
    v21 = (uint64_t *)v13;
    while (1)
    {
      while (1)
      {
        v18 = v21;
        v22 = v21 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&__dst[4 * v14], v21 + 4)) {
          break;
        }
        v21 = (uint64_t *)*v18;
        int v20 = v18;
        if (!*v18) {
          goto LABEL_52;
        }
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &__dst[4 * v14])) {
        break;
      }
      int v20 = v18 + 1;
      v21 = (uint64_t *)v18[1];
      if (!v21) {
        goto LABEL_52;
      }
    }
LABEL_58:
    if (++v14 == 8) {
      break;
    }
  }
  for (uint64_t i = 0; i != -32; i -= 4)
  {
    if (SHIBYTE(__dst[i + 30]) < 0) {
      operator delete((void *)__dst[i + 28]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,marrs::mrr::mr::EntityType>::~map[abi:ne180100], &marrs::mrr::mr::MRREntity::SearchObjectTypeToEntityTypeMap, &dword_1C9555000);
}

void sub_1C9558934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  while (1)
  {
    if (*(v10 - 9) < 0) {
      operator delete(*((void **)v10 - 4));
    }
    v10 -= 32;
    if (v10 == &a10) {
      _Unwind_Resume(exception_object);
    }
  }
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t **std::map<marrs::mrr::mr::EntityType,char const*>::map[abi:ne180100](uint64_t **a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  size_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    size_t v5 = a2;
    size_t v6 = 0;
    uint64_t v7 = &a2[4 * a3];
    uint64_t v8 = a1 + 1;
    while (1)
    {
      std::string::size_type v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      v10 = v6;
      unint64_t v11 = v4;
      if (v6)
      {
        do
        {
          std::string::size_type v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          std::string::size_type v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unint64_t v11 = v9;
        }
        while (v12);
      }
      int v13 = *v5;
      if (*((_DWORD *)v9 + 8) < *v5)
      {
LABEL_9:
        uint64_t v14 = v6 ? v9 : v4;
        v15 = v6 ? v9 + 1 : v4;
      }
      else
      {
        uint64_t v14 = v4;
        v15 = v4;
        if (v6)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = v6;
              int v18 = *((_DWORD *)v6 + 8);
              if (v13 >= v18) {
                break;
              }
              size_t v6 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            v15 = v14 + 1;
            size_t v6 = (uint64_t *)v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        char v16 = operator new(0x30uLL);
        v16[2] = *(_OWORD *)v5;
        *(void *)char v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        uint64_t *v15 = (uint64_t)v16;
        std::string::size_type v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          char v16 = (_OWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 4;
      if (v5 == v7) {
        break;
      }
      uint64_t v8 = (uint64_t **)*a1;
      size_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_1C9558C60(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            std::string::size_type v9 = (uint64_t **)a2[2];
          }
          else
          {
            std::string::size_type v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *std::string::size_type v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t sub_1C9558EA8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v21 = a1;
  uint64_t v22 = a2;
  uint64_t v20 = sub_1C95DE96C();
  uint64_t v6 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    sub_1C956280C(0, v9, 0);
    uint64_t v10 = v23;
    unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = a3 + v19;
    uint64_t v18 = *(void *)(v6 + 72);
    uint64_t v12 = (void (**)(unint64_t, char *, uint64_t))(v6 + 32);
    while (1)
    {
      v21(v11);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v23 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1C956280C(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v14 + 1;
      uint64_t v15 = v18;
      (*v12)(v10 + v19 + v14 * v18, v8, v20);
      v11 += v15;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_1C955905C()
{
  uint64_t v1 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  sub_1C95DEBEC();
  sub_1C9559110(v0, v5, &v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v7;
}

void sub_1C9559110(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v76 = a3;
  uint64_t v80 = a2;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1C95DEAAC();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  int v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v65 = (char *)&v57 - v9;
  uint64_t v64 = sub_1C95DEADC();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  v62 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1C95DEA8C();
  *(void *)&long long v71 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  v78 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  uint64_t v12 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  unint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA8);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v57 - v19;
  __swift_storeEnumTagSinglePayload((uint64_t)&v57 - v19, 1, 1, v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 1, 1, v4);
  uint64_t v21 = sub_1C95DEB2C();
  sub_1C955AC10((uint64_t)v18);
  sub_1C955AC10((uint64_t)v20);
  uint64_t v22 = sub_1C955EDDC(v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    v58 = v8;
    uint64_t v59 = v5;
    uint64_t v60 = v4;
    uint64_t v61 = a1;
    uint64_t v24 = v77;
    uint64_t v25 = (uint64_t)v14;
    v26 = &v14[*(int *)(v77 + 48)];
    uint64_t v27 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v28 = (v27 + 32) & ~v27;
    uint64_t v57 = v22;
    uint64_t v29 = v22 + v28;
    unint64_t v66 = *(void *)(v80 + 16);
    uint64_t v30 = *(void *)(v12 + 72);
    uint64_t v81 = v28;
    uint64_t v74 = v30 + v28;
    v75 = (void (**)(char *, uint64_t, uint64_t))(v71 + 32);
    v72 = (void (**)(uint64_t, char *, uint64_t))(v71 + 16);
    uint64_t v73 = v27 | 7;
    unint64_t v67 = v66 + 1;
    v68 = (void (**)(char *, uint64_t))(v71 + 8);
    long long v71 = xmmword_1C95E0BD0;
    v32 = v78;
    uint64_t v31 = v79;
    v69 = v26;
    uint64_t v70 = v25;
    do
    {
      sub_1C955AC70(v29, v25);
      (*v75)(v32, v25, v31);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AB0);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v71;
      unint64_t v34 = v33 + v81;
      uint64_t v35 = v33 + v81 + *(int *)(v24 + 48);
      (*v72)(v33 + v81, v32, v31);
      uint64_t v36 = sub_1C95DEB5C();
      uint64_t v37 = *(void *)(v36 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v35, v26, v36);
      uint64_t v38 = v80;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native()
        || (unint64_t v39 = *(void *)(v38 + 24) >> 1, v40 = v38, v39 <= v66))
      {
        uint64_t v40 = sub_1C9560E8C();
        unint64_t v39 = *(void *)(v40 + 24) >> 1;
      }
      unint64_t v41 = *(void *)(v40 + 16);
      if (v39 <= v41) {
        __break(1u);
      }
      unint64_t v42 = v40 + v81 + v41 * v30;
      if (v34 < v42 + v30 && v42 < v34 + v30)
      {
        sub_1C95DEFAC();
        __break(1u);
        return;
      }
      uint64_t v24 = v77;
      swift_arrayInitWithCopy();
      ++*(void *)(v40 + 16);
      swift_bridgeObjectRelease();
      v26 = v69;
      sub_1C9559110(v69, v40, v76);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v36);
      v32 = v78;
      uint64_t v31 = v79;
      (*v68)(v78, v79);
      v29 += v30;
      --v23;
      uint64_t v25 = v70;
    }
    while (v23);
    swift_bridgeObjectRelease();
    uint64_t v44 = v80;
    uint64_t v4 = v60;
    uint64_t v5 = v59;
    int v8 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = v80;
  }
  v45 = v62;
  sub_1C95DEB4C();
  v46 = v65;
  sub_1C95DEABC();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
  sub_1C95DEA9C();
  sub_1C955ACD8();
  LOBYTE(v45) = sub_1C95DECFC();
  v47 = *(void (**)(char *, uint64_t))(v5 + 8);
  v47(v8, v4);
  v47(v46, v4);
  if ((v45 & 1) == 0)
  {
    uint64_t v48 = sub_1C95DEB1C();
    if (v49)
    {
      uint64_t v50 = v48;
      unint64_t v51 = v49;
      uint64_t v52 = HIBYTE(v49) & 0xF;
      if ((v49 & 0x2000000000000000) == 0) {
        uint64_t v52 = v48 & 0xFFFFFFFFFFFFLL;
      }
      if (v52)
      {
        swift_bridgeObjectRetain();
        v53 = v76;
        sub_1C955A7A4();
        uint64_t v54 = *(void *)(*v53 + 16);
        sub_1C955A7F0(v54);
        uint64_t v55 = *v53;
        *(void *)(v55 + 16) = v54 + 1;
        v56 = (void *)(v55 + 24 * v54);
        v56[4] = v50;
        v56[5] = v51;
        v56[6] = v44;
        uint64_t *v53 = v55;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

void sub_1C9559890()
{
  OUTLINED_FUNCTION_3();
  uint64_t v2 = v1;
  uint64_t v38 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_8();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    v34[5] = v6;
    uint64_t v35 = v2;
    uint64_t v8 = v4 + 16;
    OUTLINED_FUNCTION_10();
    uint64_t v11 = v9 + v10;
    uint64_t v36 = *(void *)(v8 + 56);
    uint64_t v37 = v12;
    uint64_t v13 = (void (**)(uint64_t, uint64_t))(v8 - 8);
    uint64_t v14 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v15 = v8;
      v37(v0, v11, v38);
      uint64_t v16 = sub_1C95DEAFC();
      (*v13)(v0, v38);
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v18 = *(void *)(v14 + 16);
      if (__OFADD__(v18, v17)) {
        break;
      }
      if (!swift_isUniquelyReferenced_nonNull_native() || v18 + v17 > *(void *)(v14 + 24) >> 1) {
        uint64_t v14 = sub_1C956101C();
      }
      if (*(void *)(v16 + 16))
      {
        uint64_t v19 = *(void *)(v14 + 16);
        uint64_t v20 = (*(void *)(v14 + 24) >> 1) - v19;
        uint64_t v21 = *(void *)(sub_1C95DE96C() - 8);
        uint64_t v22 = *(void *)(v21 + 72);
        if (v20 < v17) {
          goto LABEL_24;
        }
        unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        unint64_t v24 = v14 + v23 + v22 * v19;
        unint64_t v25 = v16 + v23;
        uint64_t v26 = v22 * v17;
        unint64_t v27 = v24 + v26;
        unint64_t v28 = v25 + v26;
        if (v25 < v27 && v24 < v28) {
          goto LABEL_26;
        }
        swift_arrayInitWithCopy();
        if (v17)
        {
          uint64_t v30 = *(void *)(v14 + 16);
          BOOL v31 = __OFADD__(v30, v17);
          uint64_t v32 = v30 + v17;
          if (v31) {
            goto LABEL_25;
          }
          *(void *)(v14 + 16) = v32;
        }
      }
      else if (v17)
      {
        goto LABEL_23;
      }
      swift_bridgeObjectRelease();
      v11 += v36;
      --v7;
      uint64_t v8 = v15;
      if (!v7)
      {
        uint64_t v33 = swift_bridgeObjectRelease();
        uint64_t v2 = v35;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_7();
    __break(1u);
  }
  else
  {
    uint64_t v33 = swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_21:
    MEMORY[0x1F4188790](v33);
    v34[2] = v2;
    sub_1C9558EA8((void (*)(uint64_t))sub_1C955AB38, (uint64_t)v34, v14);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2();
  }
}

uint64_t sub_1C9559B5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v10[4] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587A98);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1C95DE94C();
  v10[2] = v7;
  v10[3] = v6;
  v10[1] = sub_1C95DE8EC();
  sub_1C95DE95C();
  sub_1C95DE8FC();
  uint64_t v8 = sub_1C95DE90C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v5, a1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v8);
  sub_1C95DE8DC();
  sub_1C95DE91C();
  return sub_1C95DE92C();
}

void sub_1C9559CCC()
{
  OUTLINED_FUNCTION_3();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1C95DE96C();
  OUTLINED_FUNCTION_0();
  uint64_t v61 = v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1C95DEBCC();
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v55 = v4;
  uint64_t v56 = v2;
  uint64_t v60 = v5;
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x1E4FBC860];
LABEL_21:
    uint64_t v34 = *(void *)(v22 + 16);
    if (!v34)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2();
      return;
    }
    OUTLINED_FUNCTION_10();
    uint64_t v36 = v22 + v35;
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 56);
    uint64_t v59 = v38;
    uint64_t v61 = v37;
    uint64_t v57 = v37 - 8;
    uint64_t v39 = MEMORY[0x1E4FBC860];
    while (1)
    {
      v59(v0, v36, v5);
      uint64_t v40 = v0;
      if (sub_1C95DE8EC() == v4 && v41 == v2) {
        break;
      }
      char v43 = sub_1C95DEFDC();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_30;
      }
LABEL_35:
      uint64_t v0 = v40;
      uint64_t v49 = OUTLINED_FUNCTION_14();
      v50(v49);
      v36 += (uint64_t)v58;
      if (!--v34) {
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v44 = sub_1C95DE94C();
    uint64_t v46 = v45;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1C95611A4();
      uint64_t v39 = v51;
    }
    unint64_t v47 = *(void *)(v39 + 16);
    if (v47 >= *(void *)(v39 + 24) >> 1)
    {
      sub_1C95611A4();
      uint64_t v39 = v52;
    }
    *(void *)(v39 + 16) = v47 + 1;
    uint64_t v48 = v39 + 16 * v47;
    *(void *)(v48 + 32) = v44;
    *(void *)(v48 + 40) = v46;
    uint64_t v4 = v55;
    uint64_t v2 = v56;
    uint64_t v5 = v60;
    goto LABEL_35;
  }
  v53[1] = v14;
  uint64_t v54 = v0;
  uint64_t v16 = v10 + 16;
  OUTLINED_FUNCTION_10();
  uint64_t v19 = v17 + v18;
  uint64_t v57 = *(void *)(v16 + 56);
  v58 = v20;
  uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t))v16;
  uint64_t v21 = (void (**)(char *, uint64_t))(v16 - 8);
  uint64_t v22 = MEMORY[0x1E4FBC860];
  while (1)
  {
    v58(v13, v19, v8);
    uint64_t v23 = sub_1C95DEAFC();
    (*v21)(v13, v8);
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = *(void *)(v22 + 16);
    if (__OFADD__(v25, v24)) {
      break;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v25 + v24 > *(void *)(v22 + 24) >> 1) {
      uint64_t v22 = sub_1C956101C();
    }
    if (*(void *)(v23 + 16))
    {
      uint64_t v26 = *(void *)(v22 + 16);
      if ((*(void *)(v22 + 24) >> 1) - v26 < v24) {
        goto LABEL_39;
      }
      unint64_t v27 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      uint64_t v28 = *(void *)(v61 + 72);
      unint64_t v29 = v22 + v27 + v28 * v26;
      if (v23 + v27 < v29 + v28 * v24 && v29 < v23 + v27 + v28 * v24) {
        goto LABEL_41;
      }
      swift_arrayInitWithCopy();
      if (v24)
      {
        uint64_t v31 = *(void *)(v22 + 16);
        BOOL v32 = __OFADD__(v31, v24);
        uint64_t v33 = v31 + v24;
        if (v32) {
          goto LABEL_40;
        }
        *(void *)(v22 + 16) = v33;
      }
    }
    else if (v24)
    {
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    v19 += v57;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v55;
      uint64_t v2 = v56;
      uint64_t v5 = v60;
      uint64_t v0 = v54;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_7();
  __break(1u);
}

uint64_t sub_1C955A0BC()
{
  return sub_1C95DE8BC();
}

void sub_1C955A100()
{
  OUTLINED_FUNCTION_3();
  uint64_t v1 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = *(void *)(OUTLINED_FUNCTION_8() + 16);
  if (v5)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    OUTLINED_FUNCTION_10();
    uint64_t v9 = v7 + v8;
    uint64_t v10 = *(void *)(v3 + 72);
    do
    {
      v6(v0, v9, v1);
      sub_1C95DEB0C();
      sub_1C95DEB1C();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRetain();
        sub_1C95DEB0C();
        swift_bridgeObjectRetain();
        sub_1C95DEB3C();
      }
      OUTLINED_FUNCTION_11();
      v13();
      v9 += v10;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    OUTLINED_FUNCTION_2();
    swift_bridgeObjectRelease();
  }
}

void sub_1C955A248()
{
  OUTLINED_FUNCTION_3();
  uint64_t v40 = v1;
  uint64_t v45 = v2;
  uint64_t v3 = sub_1C95DEADC();
  OUTLINED_FUNCTION_0();
  uint64_t v41 = v4;
  ((void (*)(void))MEMORY[0x1F4188790])();
  OUTLINED_FUNCTION_9();
  uint64_t v5 = sub_1C95DEA8C();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v38 - v11;
  uint64_t v39 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C95DEC0C();
  swift_allocObject();
  uint64_t v48 = sub_1C95DEBFC();
  unint64_t v42 = v0;
  uint64_t v18 = sub_1C95DEBCC();
  uint64_t v19 = sub_1C955A574(1, v18);
  unint64_t v23 = (v22 >> 1) - v21;
  uint64_t v46 = v10;
  if (v22 >> 1 == v21)
  {
    swift_unknownObjectRelease();
  }
  else
  {
    if ((uint64_t)(v22 >> 1) <= v21)
    {
      __break(1u);
      return;
    }
    v38[0] = v19;
    v38[1] = v3;
    uint64_t v47 = v7;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v43 = *(void *)(v14 + 72);
    uint64_t v44 = v24;
    uint64_t v25 = v20 + v21 * v43;
    uint64_t v26 = v39;
    do
    {
      v44(v17, v25, v26);
      sub_1C955A624();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v26);
      v25 += v43;
      --v23;
    }
    while (v23);
    swift_unknownObjectRelease();
    uint64_t v7 = v47;
  }
  uint64_t v27 = *(void *)(sub_1C95DEBBC() + 16);
  if (v27)
  {
    uint64_t v28 = v7 + 16;
    OUTLINED_FUNCTION_10();
    uint64_t v40 = v29;
    uint64_t v31 = v29 + v30;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 56);
    uint64_t v45 = v32;
    uint64_t v47 = v28;
    unint64_t v42 = (void (**)(uint64_t))(v28 - 8);
    uint64_t v43 = v41 + 8;
    do
    {
      v45(v12, v31, v5);
      sub_1C95DEA5C();
      sub_1C95DEA7C();
      sub_1C95DEA6C();
      sub_1C95DEA4C();
      sub_1C95DEB7C();
      uint64_t v33 = OUTLINED_FUNCTION_14();
      v34(v33);
      uint64_t v35 = *v42;
      OUTLINED_FUNCTION_11();
      v35(v36);
      OUTLINED_FUNCTION_11();
      v35(v37);
      v31 += (uint64_t)v44;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2();
}

uint64_t sub_1C955A574(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  result = sub_1C955ABC4(0, result, v3);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    sub_1C95DEB5C();
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_1C955A624()
{
  OUTLINED_FUNCTION_3();
  v13[1] = v1;
  uint64_t v2 = sub_1C95DEADC();
  OUTLINED_FUNCTION_0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790]();
  uint64_t v5 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C95DEAEC();
  if (v10)
  {
    sub_1C95DEB1C();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      sub_1C95DEBAC();
    }
    else
    {
      sub_1C95DEB4C();
      sub_1C95DEB8C();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
    }
  }
  else
  {
    sub_1C95DEB9C();
  }
  sub_1C95DEAFC();
  sub_1C95DEB0C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  OUTLINED_FUNCTION_2();
}

void sub_1C955A7A4()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1C9560DCC();
    uint64_t *v0 = v3;
  }
}

void sub_1C955A7F0(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1)
  {
    sub_1C9560DCC();
    *(void *)uint64_t v1 = v2;
  }
}

uint64_t sub_1C955A830(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_4();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_7();
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  OUTLINED_FUNCTION_13();
  if (!v6 & v5) {
    BOOL v7 = v4 > a3;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_5();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_12();
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C955A904(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_4();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_7();
    __break(1u);
    return result;
  }
  sub_1C95DE96C();
  OUTLINED_FUNCTION_13();
  if (!v6 & v5) {
    BOOL v7 = v4 > a3;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_5();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_12();
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C955A9D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_4();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_7();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_5();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C955AA84(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_4();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_7();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_5();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_1C955AB38@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9559B5C(*(void *)(v1 + 16), a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1C955ABC4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1C955AC10(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C955AC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C955ACD8()
{
  unint64_t result = qword_1EA587AB8;
  if (!qword_1EA587AB8)
  {
    sub_1C95DEAAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA587AB8);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6()
{
  return sub_1C95DEB5C();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return sub_1C95DEFAC();
}

uint64_t OUTLINED_FUNCTION_8()
{
  return sub_1C95DEBCC();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14()
{
  return v0;
}

uint64_t sub_1C955AE7C(long long *a1, void *a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AC0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C955B6F4((uint64_t)a1 + 8, (uint64_t)v104, &qword_1EA587AC8);
  uint64_t v103 = *((void *)a1 + 2);
  sub_1C955B6F4((uint64_t)a1 + 24, (uint64_t)v102, &qword_1EA587AD0);
  uint64_t v101 = *((void *)a1 + 4);
  long long v9 = a1[1];
  long long v99 = *a1;
  *(_OWORD *)v100 = v9;
  *(_OWORD *)&v100[9] = *(long long *)((char *)a1 + 25);
  swift_retain();
  sub_1C955B758((uint64_t)&v103);
  sub_1C955B758((uint64_t)&v101);
  sub_1C955B758((uint64_t)v104);
  sub_1C955B758((uint64_t)v102);
  id v95 = a2;
  *(void *)&long long v96 = sub_1C9562D74(a2);
  *((void *)&v96 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (uint64_t)&v99;
    uint64_t v12 = (unsigned char *)sub_1C9563F74();
    uint64_t v13 = *((void *)v12 + 2);
    v92 = v12;
    if (v13)
    {
      uint64_t v14 = v12;
      uint64_t v93 = sub_1C95DE89C();
      uint64_t v15 = (uint64_t *)(v14 + 48);
      uint64_t v94 = MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v3 = *(v15 - 2);
        uint64_t v16 = *(v15 - 1);
        uint64_t v17 = *v15;
        long long v105 = v96;
        *(void *)&long long v98 = v3;
        uint64_t v18 = OUTLINED_FUNCTION_10_0((uint64_t)&v112);
        __swift_storeEnumTagSinglePayload(v18, v19, v20, v93);
        sub_1C955B7BC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_0();
        uint64_t v11 = sub_1C95DEEDC();
        unint64_t v22 = v21;
        char v2 = v23;
        sub_1C955B808((uint64_t)v8);
        if ((v2 & 1) == 0 && (v11 ^ v22) >> 14)
        {
          uint64_t v24 = sub_1C9563230(v3, v16, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v25 = OUTLINED_FUNCTION_8_0();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_4_0();
            OUTLINED_FUNCTION_6_0(v29);
          }
          unint64_t v3 = *(void *)(v94 + 16);
          if (v3 >= *(void *)(v94 + 24) >> 1)
          {
            OUTLINED_FUNCTION_2_0();
            OUTLINED_FUNCTION_6_0(v30);
          }
          OUTLINED_FUNCTION_12_0();
          uint64_t v28 = v26 + v3 * v27;
          *(void *)(v28 + 32) = v24;
          *(void *)(v28 + 40) = v25;
          *(void *)(v28 + 48) = v11;
          *(void *)(v28 + 56) = v22;
          *(unsigned char *)(v28 + 64) = 1;
          *(unsigned char *)(v28 + 65) = v2;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v15 += 3;
        --v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v94 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = *(unsigned char **)v100;
    uint64_t v37 = *(void *)(*(void *)v100 + 16);
    if (v37)
    {
      uint64_t v38 = sub_1C95DE89C();
      swift_bridgeObjectRetain();
      v92 = v36;
      uint64_t v39 = v36 + 40;
      uint64_t v35 = v94;
      uint64_t v93 = v38;
      do
      {
        uint64_t v40 = OUTLINED_FUNCTION_1_0();
        __swift_storeEnumTagSinglePayload(v40, v41, v42, v38);
        unint64_t v43 = sub_1C955B7BC();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_0();
        sub_1C95DEEDC();
        OUTLINED_FUNCTION_5_0();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0 && (v11 ^ v43) >> 14)
        {
          LOBYTE(v3) = v99;
          OUTLINED_FUNCTION_8_0();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_7_0();
            uint64_t v35 = v50;
          }
          OUTLINED_FUNCTION_11_0();
          if (v48)
          {
            OUTLINED_FUNCTION_9_0();
            uint64_t v47 = v44;
          }
          OUTLINED_FUNCTION_3_0(v44, v45, v46, v47);
          *(unsigned char *)(v49 + 64) = 2;
          *(unsigned char *)(v49 + 65) = v2;
          uint64_t v38 = v93;
        }
        v39 += 16;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = v94;
    }
    uint64_t v51 = sub_1C9563FE0();
    uint64_t v52 = *(void *)(v51 + 16);
    uint64_t v93 = v51;
    if (v52)
    {
      uint64_t v53 = v51;
      uint64_t v54 = sub_1C95DE89C();
      uint64_t v55 = v53 + 40;
      OUTLINED_FUNCTION_6_0(v54);
      do
      {
        uint64_t v56 = OUTLINED_FUNCTION_1_0();
        __swift_storeEnumTagSinglePayload(v56, v57, v58, v54);
        unint64_t v59 = sub_1C955B7BC();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_0_0();
        sub_1C95DEEDC();
        OUTLINED_FUNCTION_5_0();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0 && ((unint64_t)&v99 ^ v59) >> 14)
        {
          LOBYTE(v3) = v99;
          OUTLINED_FUNCTION_8_0();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_7_0();
            uint64_t v35 = v65;
          }
          OUTLINED_FUNCTION_11_0();
          if (v48)
          {
            OUTLINED_FUNCTION_9_0();
            uint64_t v63 = v60;
          }
          OUTLINED_FUNCTION_3_0(v60, v61, v62, v63);
          *(unsigned char *)(v64 + 64) = 3;
          *(unsigned char *)(v64 + 65) = v2;
          uint64_t v54 = v94;
        }
        v55 += 16;
        --v52;
      }
      while (v52);
    }
    swift_bridgeObjectRelease();
    uint64_t v66 = *(void *)&v100[16];
    uint64_t v67 = *(void *)(*(void *)&v100[16] + 16);
    if (v67)
    {
      uint64_t v94 = v35;
      uint64_t v68 = sub_1C95DE89C();
      uint64_t v93 = (uint64_t)&v105 + 8;
      v92 = &v106[8];
      swift_bridgeObjectRetain();
      uint64_t v90 = v66;
      v69 = (uint64_t *)(v66 + 40);
      uint64_t v91 = v68;
      do
      {
        uint64_t v70 = *(v69 - 1);
        uint64_t v71 = *v69;
        long long v98 = v96;
        uint64_t v97 = v70;
        uint64_t v72 = OUTLINED_FUNCTION_10_0((uint64_t)&v111);
        __swift_storeEnumTagSinglePayload(v72, v73, v74, v68);
        sub_1C955B7BC();
        swift_bridgeObjectRetain();
        uint64_t v75 = sub_1C95DEEDC();
        unint64_t v77 = v76;
        char v79 = v78;
        sub_1C955B808((uint64_t)v8);
        if ((v79 & 1) == 0 && (v75 ^ v77) >> 14)
        {
          long long v105 = v99;
          *(_OWORD *)v106 = *(_OWORD *)v100;
          *(_OWORD *)&v106[9] = *(_OWORD *)&v100[9];
          sub_1C955B6F4(v93, (uint64_t)v107, &qword_1EA587AC8);
          uint64_t v108 = *(void *)v106;
          sub_1C955B6F4((uint64_t)v92, (uint64_t)v109, &qword_1EA587AD0);
          uint64_t v110 = *(void *)&v106[16];
          swift_retain();
          sub_1C955B758((uint64_t)&v108);
          sub_1C955B758((uint64_t)&v110);
          sub_1C955B758((uint64_t)v107);
          sub_1C955B758((uint64_t)v109);
          uint64_t v80 = sub_1C9563848(v70, v71, (uint64_t)&v105);
          swift_release();
          swift_bridgeObjectRelease();
          sub_1C955B868((uint64_t)v107);
          sub_1C955B868((uint64_t)&v108);
          sub_1C955B868((uint64_t)v109);
          sub_1C955B868((uint64_t)&v110);
          if (v80)
          {
            char v81 = v106[24];
            id v82 = v95;
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_4_0();
              OUTLINED_FUNCTION_6_0(v87);
            }
            unint64_t v83 = *(void *)(v94 + 16);
            if (v83 >= *(void *)(v94 + 24) >> 1)
            {
              OUTLINED_FUNCTION_2_0();
              OUTLINED_FUNCTION_6_0(v88);
            }
            OUTLINED_FUNCTION_12_0();
            uint64_t v86 = v84 + v83 * v85;
            *(void *)(v86 + 32) = v80;
            *(void *)(v86 + 40) = v82;
            *(void *)(v86 + 48) = v75;
            *(void *)(v86 + 56) = v77;
            *(unsigned char *)(v86 + 64) = 0;
            *(unsigned char *)(v86 + 65) = v81;
            swift_release();
            uint64_t v68 = v91;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v69 += 2;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v94;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_1C95DECEC();
    __swift_project_value_buffer(v31, (uint64_t)qword_1EA587F60);
    BOOL v32 = sub_1C95DECCC();
    os_log_type_t v33 = sub_1C95DEE2C();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1C9555000, v32, v33, "Could not extract utterance from tokenChain, unable to generate matches", v34, 2u);
      MEMORY[0x1CB7876A0](v34, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_1C955B6F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C955B758(uint64_t a1)
{
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_1C955B7BC()
{
  unint64_t result = qword_1EA587A90;
  if (!qword_1EA587A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA587A90);
  }
  return result;
}

uint64_t sub_1C955B808(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C955B868(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return v0 - 272;
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  uint64_t v3 = *(v1 - 1);
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v2 - 296);
  *(void *)(v2 - 176) = *(void *)(v2 - 304);
  *(void *)(v2 - 168) = v5;
  *(void *)(v2 - 272) = v3;
  *(void *)(v2 - 264) = v4;
  return v0;
}

void OUTLINED_FUNCTION_2_0()
{
  sub_1C9561264();
}

void OUTLINED_FUNCTION_3_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = v8;
  uint64_t v10 = (void *)(a4 + 40 * v6);
  v10[4] = v7;
  void v10[5] = v9;
  v10[6] = v5;
  v10[7] = v4;
}

void OUTLINED_FUNCTION_4_0()
{
  sub_1C9561264();
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return sub_1C955B808(v0);
}

uint64_t OUTLINED_FUNCTION_6_0(uint64_t result)
{
  *(void *)(v1 - 320) = result;
  return result;
}

void OUTLINED_FUNCTION_7_0()
{
  sub_1C9561264();
}

id OUTLINED_FUNCTION_8_0()
{
  uint64_t v2 = *(void **)(v0 - 312);
  return v2;
}

void OUTLINED_FUNCTION_9_0()
{
  sub_1C9561264();
}

uint64_t OUTLINED_FUNCTION_10_0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v2;
  return v1;
}

void OUTLINED_FUNCTION_12_0()
{
  *(void *)(*(void *)(v1 - 320) + 16) = v0;
}

uint64_t sub_1C955BA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1C95DEFFC();
    sub_1C95DED3C();
    uint64_t v6 = sub_1C95DF00C();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1C95DEFDC() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1C95DEFDC() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1C955BB60(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = result + 40;
    uint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v16 = result + 40;
    do
    {
      unint64_t v8 = (uint64_t *)(v6 + 16 * v5);
      unint64_t v9 = v5;
      while (1)
      {
        if (v9 >= *(void *)(v3 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v11 = *(v8 - 1);
        uint64_t v10 = *v8;
        unint64_t v5 = v9 + 1;
        swift_bridgeObjectRetain();
        if (sub_1C955BA28(v11, v10, a2)) {
          break;
        }
        uint64_t result = swift_bridgeObjectRelease();
        v8 += 2;
        ++v9;
        if (v4 == v5) {
          goto LABEL_15;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = (uint64_t)sub_1C956282C(0, *(void *)(v7 + 16) + 1, 1);
      }
      unint64_t v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      unint64_t v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_1C956282C((char *)(v12 > 1), v13 + 1, 1);
        unint64_t v14 = v13 + 1;
      }
      *(void *)(v7 + 16) = v14;
      uint64_t v15 = v7 + 16 * v13;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v10;
      uint64_t v6 = v16;
    }
    while (v4 - 1 != v9);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1C955BCC8()
{
  uint64_t v1 = (uint64_t *)v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AF0);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_1_1();
  uint64_t v5 = v4 - v3;
  uint64_t v57 = sub_1C95DEADC();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_1_1();
  uint64_t v11 = v10 - v9;
  uint64_t v56 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_1_1();
  uint64_t v17 = v16 - v15;
  char v18 = *(unsigned char *)(v0 + 32);
  if (sub_1C955E21C(v18) == 0x6156797469746E65 && v19 == 0xEB0000000065756CLL) {
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_4_1();
  char v21 = sub_1C95DEFDC();
  swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_9:
    uint64_t v23 = *v1;
    swift_retain();
    goto LABEL_10;
  }
  if (sub_1C955E21C(v18) == 0xD00000000000001ALL && v22 == 0x80000001C95E1970)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v32 = sub_1C95DEFDC();
  swift_bridgeObjectRelease();
  if (v32) {
    goto LABEL_9;
  }
  uint64_t v33 = v7;
  uint64_t v34 = sub_1C955C538((uint64_t)&unk_1F23C6870);
  uint64_t v35 = sub_1C95DEBCC();
  uint64_t v36 = *(void *)(v35 + 16);
  if (v36)
  {
    uint64_t v38 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    uint64_t v37 = v13 + 16;
    unint64_t v39 = v35 + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
    uint64_t v54 = *(void *)(v37 + 56);
    uint64_t v55 = v38;
    uint64_t v52 = v5;
    uint64_t v53 = (void (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v40 = (void (**)(uint64_t, uint64_t))(v37 - 8);
    uint64_t v41 = MEMORY[0x1E4FBC860];
    do
    {
      v55(v17, v39, v56);
      sub_1C95DEB4C();
      uint64_t v42 = sub_1C95DEACC();
      uint64_t v44 = v43;
      (*v53)(v11, v57);
      (*v40)(v17, v56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C95611A4();
        uint64_t v41 = v47;
      }
      unint64_t v45 = *(void *)(v41 + 16);
      if (v45 >= *(void *)(v41 + 24) >> 1)
      {
        sub_1C95611A4();
        uint64_t v41 = v48;
      }
      *(void *)(v41 + 16) = v45 + 1;
      uint64_t v46 = v41 + 16 * v45;
      *(void *)(v46 + 32) = v42;
      *(void *)(v46 + 40) = v44;
      v39 += v54;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    uint64_t v5 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = MEMORY[0x1E4FBC860];
  }
  uint64_t v49 = *(void *)(sub_1C955BB60(v41, v34) + 16);
  swift_bridgeObjectRelease();
  if (!v49) {
    return 0;
  }
  sub_1C955DBBC();
  sub_1C95DEA3C();
  swift_allocObject();
  uint64_t v50 = sub_1C95DEA2C();
  sub_1C95DEA1C();
  uint64_t v51 = sub_1C95DE9BC();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v51);
  uint64_t v23 = MEMORY[0x1CB785B80](v50, v5);
  swift_release();
  sub_1C955D944(v5, &qword_1EA587AF0);
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v24 = qword_1EA587A78;
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_1C95DECEC();
  __swift_project_value_buffer(v25, (uint64_t)qword_1EA587F60);
  swift_retain_n();
  uint64_t v26 = sub_1C95DECCC();
  os_log_type_t v27 = sub_1C95DEE1C();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v29 = sub_1C95DE97C();
    sub_1C9562034(v29, v30, &v58);
    sub_1C95DEE8C();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9555000, v26, v27, "Generating span for graph: %s", v28, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_5_1();
    swift_release();
  }
  else
  {

    swift_release_n();
  }
  return v23;
}

uint64_t sub_1C955C23C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000001ALL;
  unint64_t v3 = 0x80000001C95E1970;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000001ALL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6156797469746E65;
      unint64_t v3 = 0xEB0000000065756CLL;
      break;
    case 2:
      unint64_t v5 = 0x646E756F72727573;
      unint64_t v3 = 0xEF74786554676E69;
      break;
    case 3:
      unint64_t v5 = 0xD00000000000001CLL;
      unint64_t v3 = 0x80000001C95E19B0;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001C95E1970;
  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_4_1();
      unint64_t v6 = 0xEB0000000065756CLL;
      break;
    case 2:
      unint64_t v2 = 0x646E756F72727573;
      unint64_t v6 = 0xEF74786554676E69;
      break;
    case 3:
      unint64_t v2 = 0xD00000000000001CLL;
      unint64_t v6 = 0x80000001C95E19B0;
      break;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v2 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C95DEFDC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C955C400(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED0000797469746ELL;
  uint64_t v3 = 0x45746E65696C6173;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x69446D6574737973;
    }
    else {
      uint64_t v5 = 0x6E776F6E6B6E75;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEF746341676F6C61;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x45746E65696C6173;
    unint64_t v6 = 0xED0000797469746ELL;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x69446D6574737973;
    }
    else {
      uint64_t v3 = 0x6E776F6E6B6E75;
    }
    if (a2 == 1) {
      unint64_t v2 = 0xEF746341676F6C61;
    }
    else {
      unint64_t v2 = 0xE700000000000000;
    }
  }
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C95DEFDC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C955C538(uint64_t a1)
{
  uint64_t v2 = sub_1C95DEDFC();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1C955CE0C(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1C955C5EC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587A98);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_1_1();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_1C95DE96C();
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_1_1();
  uint64_t v44 = v10 - v9;
  uint64_t v11 = sub_1C95DE90C();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_2_1();
  if (!sub_1C955BCC8()) {
    return 0;
  }
  uint64_t v43 = v7;
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA2A28]), sel_init);
  uint64_t v16 = v15;
  if (!v15)
  {
    swift_release();
    return (uint64_t)v16;
  }
  objc_msgSend(v15, sel_setInternalSpanData_, 0);
  unint64_t v17 = sub_1C955DCD8();
  if ((v17 & 0x8000000000000000) == 0 && !HIDWORD(v17))
  {
    unint64_t v19 = v18;
    objc_msgSend(v16, sel_setStartTokenIndex_, v17);
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v41 = v5;
      if (!HIDWORD(v19))
      {
        objc_msgSend(v16, sel_setEndTokenIndex_, v19);
        uint64_t v20 = sub_1C955DBBC();
        sub_1C955D8B0(v20, v21, v16, (SEL *)&selRef_setInput_);
        uint64_t v22 = sub_1C955DBBC();
        sub_1C955D8B0(v22, v23, v16, (SEL *)&selRef_setSemanticValue_);
        objc_msgSend(v16, sel_addMatcherNames_, 4);
        uint64_t v24 = sub_1C955CCB0();
        uint64_t v42 = v16;
        sub_1C955D8B0(v24, v25, v16, (SEL *)&selRef_setLabel_);
        uint64_t v26 = *(void (**)(void))(v13 + 104);
        OUTLINED_FUNCTION_3_1();
        v26();
        sub_1C9559890();
        uint64_t v28 = v27;
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
        OUTLINED_FUNCTION_3_1();
        v26();
        __swift_storeEnumTagSinglePayload(v4, 0, 1, v11);
        sub_1C95DE93C();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = sub_1C956101C();
        }
        unint64_t v29 = *(void *)(v28 + 16);
        if (v29 >= *(void *)(v28 + 24) >> 1) {
          uint64_t v28 = sub_1C956101C();
        }
        *(void *)(v28 + 16) = v29 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v43 + 32))(v28+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v29, v44, v41);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AD8);
        sub_1C95DE9EC();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C95E0BD0;
        unint64_t v30 = sub_1C955DA08();
        sub_1C955EBF8(v30, v31);
        sub_1C955A100();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = sub_1C955A0BC();
        if (v32)
        {
          uint64_t v33 = (void *)v32;
          uint64_t v16 = v42;
          objc_msgSend(v42, sel_setUsoGraph_, v32);
          if (qword_1EA587A78 != -1) {
            swift_once();
          }
          uint64_t v34 = sub_1C95DECEC();
          __swift_project_value_buffer(v34, (uint64_t)qword_1EA587F60);
          swift_retain_n();
          uint64_t v35 = sub_1C95DECCC();
          os_log_type_t v36 = sub_1C95DEE1C();
          if (os_log_type_enabled(v35, v36))
          {
            uint64_t v37 = (uint8_t *)swift_slowAlloc();
            uint64_t v45 = swift_slowAlloc();
            *(_DWORD *)uint64_t v37 = 136315138;
            uint64_t v16 = v42;
            uint64_t v38 = sub_1C95DE97C();
            sub_1C9562034(v38, v39, &v45);
            sub_1C95DEE8C();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C9555000, v35, v36, "Returning span with identifiers: %s", v37, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_5_1();
            OUTLINED_FUNCTION_5_1();

            swift_release();
          }
          else
          {

            swift_release_n();
          }
          return (uint64_t)v16;
        }

        swift_release();
        return 0;
      }
    }
  }
  OUTLINED_FUNCTION_1();
  uint64_t result = sub_1C95DEF8C();
  __break(1u);
  return result;
}

uint64_t sub_1C955CCB0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AE0);
  MEMORY[0x1F4188790](v1 - 8);
  OUTLINED_FUNCTION_1_1();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AE8);
  OUTLINED_FUNCTION_0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = sub_1C95DEBDC();
  sub_1C956409C(v9, v4);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) == 1)
  {
    sub_1C955D944(v4, &qword_1EA587AE0);
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v4, v5);
  uint64_t v10 = sub_1C95DE8CC();
  uint64_t v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  if (!v12) {
    return 0;
  }
  return v10;
}

uint64_t sub_1C955CE0C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1C95DEFFC();
  swift_bridgeObjectRetain();
  sub_1C95DED3C();
  uint64_t v8 = sub_1C95DF00C();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1C95DEFDC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1C95DEFDC() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1C955D298(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1C955CFBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AF8);
  uint64_t v3 = sub_1C95DEF0C();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      sub_1C95DEFFC();
      sub_1C95DED3C();
      uint64_t result = sub_1C95DF00C();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_1C955D434(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *unint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1C955D298(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1C955CFBC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1C955D450();
      goto LABEL_22;
    }
    sub_1C955D604();
  }
  uint64_t v11 = *v4;
  sub_1C95DEFFC();
  sub_1C95DED3C();
  uint64_t result = sub_1C95DF00C();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1C95DEFDC(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1C95DEFEC();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1C95DEFDC();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  uint64_t *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1C955D434(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *sub_1C955D450()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C95DEEFC();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C955D604()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AF8);
  uint64_t v3 = sub_1C95DEF0C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1C95DEFFC();
    swift_bridgeObjectRetain();
    sub_1C95DED3C();
    uint64_t result = sub_1C95DF00C();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1C955D8B0(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = (id)sub_1C95DED0C();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1C955D944(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void OUTLINED_FUNCTION_5_1()
{
  JUMPOUT(0x1CB7876A0);
}

uint64_t sub_1C955DA08()
{
  sub_1C9562D74(*(void **)(v0 + 8));
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1C95DED4C();
    uint64_t v8 = sub_1C95DED6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1C95DED4C();
    swift_bridgeObjectRelease();
    sub_1C95DED6C();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1C95DECEC();
    __swift_project_value_buffer(v2, (uint64_t)qword_1EA587F60);
    uint64_t v3 = (void *)sub_1C95DECCC();
    os_log_type_t v4 = sub_1C95DEE2C();
    if (OUTLINED_FUNCTION_2_2(v4))
    {
      uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_3_2(v5);
      OUTLINED_FUNCTION_0_1(&dword_1C9555000, v6, v7, "Could not extract utterance from tokenChain, unable to generate UTF16 indices");
      OUTLINED_FUNCTION_1_2();
    }

    return 0;
  }
  return v8;
}

uint64_t sub_1C955DBBC()
{
  sub_1C9562D74(*(void **)(v0 + 8));
  if (v1)
  {
    uint64_t v2 = sub_1C95DED7C();
    uint64_t v4 = v3;
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x1CB785F00](v2, v4, v6, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1C95DECEC();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EA587F60);
    int64_t v11 = (void *)sub_1C95DECCC();
    os_log_type_t v12 = sub_1C95DEE2C();
    if (OUTLINED_FUNCTION_2_2(v12))
    {
      unint64_t v13 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_3_2(v13);
      OUTLINED_FUNCTION_0_1(&dword_1C9555000, v14, v15, "Could not extract utterance from tokenChain, unable to generate matches");
      OUTLINED_FUNCTION_1_2();
    }

    return 0;
  }
  return v9;
}

uint64_t sub_1C955DCD8()
{
  sub_1C955DA08();
  id v1 = objc_msgSend(*(id *)(v0 + 8), sel_tokens);
  if (v1)
  {
    uint64_t v2 = v1;
    sub_1C955E388();
    sub_1C95DEDAC();
  }
  if (qword_1EA587A78 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1C95DECEC();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EA587F60);
  uint64_t v4 = (void *)sub_1C95DECCC();
  os_log_type_t v5 = sub_1C95DEE2C();
  if (OUTLINED_FUNCTION_2_2(v5))
  {
    uint64_t v6 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_3_2(v6);
    OUTLINED_FUNCTION_0_1(&dword_1C9555000, v7, v8, "Could not extract tokens from tokenChain, unable to generate token indices");
    OUTLINED_FUNCTION_1_2();
  }

  return 0;
}

uint64_t sub_1C955E1D0()
{
  unint64_t v0 = sub_1C95DEFBC();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

unint64_t sub_1C955E21C(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6156797469746E65;
      break;
    case 2:
      unint64_t result = 0x646E756F72727573;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C955E2E4(unsigned __int8 *a1, char *a2)
{
  return sub_1C955C23C(*a1, *a2);
}

uint64_t sub_1C955E2F0()
{
  return sub_1C95641F4(*v0);
}

uint64_t sub_1C955E2F8()
{
  return sub_1C9564250();
}

uint64_t sub_1C955E300(uint64_t a1)
{
  return sub_1C95644A8(a1, *v1);
}

uint64_t sub_1C955E308@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C955E1D0();
  *a1 = result;
  return result;
}

unint64_t sub_1C955E338@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1C955E21C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1C955E364(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1C955E388()
{
  unint64_t result = qword_1EA587B00;
  if (!qword_1EA587B00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA587B00);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MatchedEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for MatchedEntity(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t initializeWithCopy for MatchedEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_retain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for MatchedEntity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  id v4 = *(void **)(a2 + 8);
  os_log_type_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MatchedEntity(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedEntity(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 34))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchedEntity()
{
  return &type metadata for MatchedEntity;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MatchSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MatchSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C955E754);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1C955E77C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1C955E788(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MatchSource()
{
  return &type metadata for MatchSource;
}

unint64_t sub_1C955E7A4()
{
  unint64_t result = qword_1EA587B08;
  if (!qword_1EA587B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA587B08);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_1_2()
{
  JUMPOUT(0x1CB7876A0);
}

BOOL OUTLINED_FUNCTION_2_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *OUTLINED_FUNCTION_3_2(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return swift_slowAlloc();
}

uint64_t sub_1C955E86C()
{
  uint64_t v0 = sub_1C95DECEC();
  __swift_allocate_value_buffer(v0, qword_1EA587F60);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA587F60);
  return sub_1C95DECDC();
}

uint64_t sub_1C955E8F0()
{
  uint64_t v0 = sub_1C95DECEC();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1C95DEC6C();
  __swift_allocate_value_buffer(v4, qword_1EA587F48);
  __swift_project_value_buffer(v4, (uint64_t)qword_1EA587F48);
  if (qword_1EA587A78 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)qword_1EA587F60);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_1C95DEC4C();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

Swift::String __swiftcall SampleClass.getHelloWorld()()
{
  uint64_t v0 = 0x6F57206F6C6C6548;
  uint64_t v1 = (void *)0xEC00000021646C72;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

id SampleClass.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SampleClass.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SampleClass();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SampleClass()
{
  return self;
}

id SampleClass.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SampleClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C955EBF8(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1C95DE99C();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1) || (a2 & 0x8000000000000000) != 0 || HIDWORD(a2))
  {
    OUTLINED_FUNCTION_1();
    uint64_t result = sub_1C95DEF8C();
    __break(1u);
  }
  else
  {
    sub_1C95DE98C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B10);
    unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C95E0BD0;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v9 + v8, v7, v4);
    sub_1C95DE9DC();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_1C955EDDC(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B60);
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_1_1();
  uint64_t v7 = v6 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  OUTLINED_FUNCTION_0();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_1_1();
  uint64_t v13 = v12 - v11;
  int64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (v14)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    sub_1C95627EC(0, v14, 0);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = *(void *)(v3 + 72);
    uint64_t v15 = v21;
    do
    {
      sub_1C9562F68(v16, v7);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C95627EC(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v21;
      }
      unint64_t v19 = *(void *)(v15 + 16);
      unint64_t v18 = *(void *)(v15 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_1C95627EC(v18 > 1, v19 + 1, 1);
        uint64_t v15 = v21;
      }
      *(void *)(v15 + 16) = v19 + 1;
      sub_1C955B6F4(v13, v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v19, &qword_1EA587AA0);
      v16 += v17;
      --v14;
    }
    while (v14);
  }
  return v15;
}

char *sub_1C955EFB8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1C95DEF9C();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return (char *)v3;
  }
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1C956284C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB786100](i, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * i + 32);
      }
      sub_1C9563020(0, &qword_1EA587B40);
      swift_dynamicCast();
      uint64_t v3 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C956284C(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v8 = *(void *)(v3 + 16);
      unint64_t v7 = *(void *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1C956284C((char *)(v7 > 1), v8 + 1, 1);
        uint64_t v3 = v10;
      }
      *(void *)(v3 + 16) = v8 + 1;
      sub_1C9562F58(&v9, (_OWORD *)(v3 + 32 * v8 + 32));
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C955F15C(void *a1, unint64_t *a2)
{
  uint64_t v4 = sub_1C95DE86C();
  OUTLINED_FUNCTION_0();
  uint64_t v13 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_1_1();
  uint64_t v9 = v8 - v7;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  id v10 = a1;
  sub_1C95DEE5C();

  sub_1C9562FD0();
  OUTLINED_FUNCTION_21();
  while (v18)
  {
    sub_1C9562F58(&v17, v16);
    sub_1C9562EFC((uint64_t)v16, (uint64_t)v14);
    sub_1C9563020(0, a2);
    if ((swift_dynamicCast() & 1) == 0) {
      uint64_t v15 = 0;
    }
    uint64_t v11 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    if (v15)
    {
      MEMORY[0x1CB785F60](v11);
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1C95DEDDC();
      }
      sub_1C95DEDEC();
      sub_1C95DEDCC();
    }
    OUTLINED_FUNCTION_21();
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v9, v4);
  return v19;
}

void ContextualSpanMatcher.getSpans(request:)(char *a1)
{
  uint64_t v201 = sub_1C95DEC7C();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_26();
  uint64_t v193 = v5;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_25();
  uint64_t v203 = v7;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v193 - v9;
  uint64_t v11 = sub_1C95DEC3C();
  OUTLINED_FUNCTION_0();
  uint64_t v216 = v12;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_26();
  uint64_t v196 = v14;
  OUTLINED_FUNCTION_13_0();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (SEL *)((char *)&v193 - v17);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v193 - v20;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_25();
  uint64_t v209 = v22;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_25();
  uint64_t v195 = v24;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_25();
  v215 = v26;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v27);
  v204 = (char *)&v193 - v28;
  unint64_t v29 = sub_1C95DECEC();
  OUTLINED_FUNCTION_0();
  uint64_t v227 = v30;
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_1_1();
  unint64_t v230 = v33 - v32;
  v228 = a1;
  uint64_t v34 = sub_1C9562DD8(a1);
  if (v35 >> 60 == 15)
  {
LABEL_122:
    __break(1u);
LABEL_123:

    __break(1u);
  }
  else
  {
    uint64_t v36 = v34;
    unint64_t v37 = v35;
    v207 = v18;
    v208 = v21;
    v198 = v3;
    uint64_t v38 = sub_1C95DE87C();
    uint64_t v40 = v39;
    sub_1C9562E3C(v36, v37);
    if (qword_1EA587A78 != -1) {
      goto LABEL_118;
    }
    while (1)
    {
      unint64_t v229 = v29;
      uint64_t v41 = __swift_project_value_buffer(v29, (uint64_t)qword_1EA587F60);
      swift_bridgeObjectRetain_n();
      uint64_t v202 = v41;
      uint64_t v42 = sub_1C95DECCC();
      os_log_type_t v43 = sub_1C95DEE0C();
      BOOL v44 = os_log_type_enabled(v42, v43);
      v219 = v11;
      v223 = v10;
      if (v44)
      {
        uint64_t v45 = (uint8_t *)OUTLINED_FUNCTION_22();
        *(void *)&long long v247 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_1C9562034(v38, (unint64_t)v40, (uint64_t *)&v247);
        OUTLINED_FUNCTION_19(v46);
        sub_1C95DEE8C();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9555000, v42, v43, "Base64 request: \n %s", v45, 0xCu);
        swift_arrayDestroy();
        id v10 = v223;
        OUTLINED_FUNCTION_5_1();
        uint64_t v11 = v219;
        OUTLINED_FUNCTION_5_1();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v47 = v230;
      uint64_t v48 = sub_1C95DECCC();
      os_log_type_t v49 = sub_1C95DEE1C();
      BOOL v50 = os_log_type_enabled(v48, v49);
      unint64_t v29 = v229;
      if (v50)
      {
        uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_4_2();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl(&dword_1C9555000, v48, v49, "Base64 request by line", v51, 2u);
        uint64_t v11 = v219;
        OUTLINED_FUNCTION_5_1();
      }

      *(void *)&long long v247 = v38;
      *((void *)&v247 + 1) = v40;
      sub_1C955B7BC();
      sub_1C95DEEAC();
      swift_bridgeObjectRelease();
      id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA29E0]), sel_init);
      if (!v52)
      {
        uint64_t v64 = (void *)sub_1C95DECCC();
        os_log_type_t v65 = sub_1C95DEE0C();
        if (OUTLINED_FUNCTION_12_1(v65))
        {
          uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_24(v66);
          OUTLINED_FUNCTION_4_3(&dword_1C9555000, v67, v68, "Unable to initialize response, returning nil");
          OUTLINED_FUNCTION_5_1();
        }

        return;
      }
      id v197 = v52;
      id v53 = objc_msgSend(v228, sel_tokenChain);
      if (!v53)
      {
        v69 = (void *)sub_1C95DECCC();
        os_log_type_t v70 = sub_1C95DEE0C();
        if (OUTLINED_FUNCTION_12_1(v70))
        {
          uint64_t v71 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_24(v71);
          OUTLINED_FUNCTION_4_3(&dword_1C9555000, v72, v73, "Could not extract tokenChain from request, returning nil");
          OUTLINED_FUNCTION_5_1();
        }

        return;
      }
      uint64_t v54 = v53;
      uint64_t v55 = v227;
      (*(void (**)(unint64_t, uint64_t, unint64_t))(v227 + 16))(v47, v202, v29);
      uint64_t v56 = v54;
      unint64_t v57 = v47;
      uint64_t v3 = v56;
      uint64_t v58 = sub_1C95DECCC();
      os_log_type_t v59 = sub_1C95DEE1C();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)OUTLINED_FUNCTION_22();
        *(void *)&long long v247 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        uint64_t v61 = sub_1C9562D74(v3);
        if (!v62) {
          goto LABEL_123;
        }
        unint64_t v29 = v62;
        uint64_t v63 = sub_1C9562034(v61, v62, (uint64_t *)&v247);
        OUTLINED_FUNCTION_19(v63);
        sub_1C95DEE8C();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C9555000, v58, v59, "Utterance: %s", v60, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_5_1();
        OUTLINED_FUNCTION_5_1();

        (*(void (**)(unint64_t, unint64_t))(v227 + 8))(v230, v229);
        uint64_t v11 = v219;
      }
      else
      {

        (*(void (**)(unint64_t, unint64_t))(v55 + 8))(v57, v29);
      }
      uint64_t v74 = v228;
      v206 = v3;
      sub_1C95DE9CC();
      sub_1C95DEA0C();
      swift_allocObject();
      uint64_t v38 = sub_1C95DE9FC();
      uint64_t v75 = v204;
      if (qword_1EA587A80 != -1) {
        swift_once();
      }
      uint64_t v76 = sub_1C95DEC6C();
      uint64_t v77 = __swift_project_value_buffer(v76, (uint64_t)qword_1EA587F48);
      sub_1C95DEC5C();
      sub_1C95DEC1C();
      uint64_t v218 = v77;
      char v78 = sub_1C95DEC5C();
      os_signpost_type_t v79 = sub_1C95DEE4C();
      if (sub_1C95DEE6C())
      {
        uint64_t v80 = (uint8_t *)OUTLINED_FUNCTION_4_2();
        *(_WORD *)uint64_t v80 = 0;
        os_signpost_id_t v81 = sub_1C95DEC2C();
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v78, v79, v81, "CSMParseE2E", "", v80, 2u);
        uint64_t v11 = v219;
        OUTLINED_FUNCTION_5_1();
      }

      id v82 = *(void (**)(char *, uint64_t, uint64_t))(v216 + 16);
      uint64_t v210 = v216 + 16;
      v211 = v82;
      v82(v215, (uint64_t)v75, (uint64_t)v11);
      uint64_t v205 = sub_1C95DECAC();
      swift_allocObject();
      uint64_t v194 = sub_1C95DEC9C();
      unint64_t v83 = MEMORY[0x1E4FBC860];
      uint64_t v234 = MEMORY[0x1E4FBC860];
      uint64_t v84 = objc_msgSend(v74, sel_nlContext);
      uint64_t v3 = v75;
      if (v84)
      {
        uint64_t v11 = v84;
        id v85 = [v84 systemDialogActs];

        if (v85)
        {
          uint64_t v11 = 0;
          uint64_t v86 = sub_1C955F15C(v85, &qword_1EA587B78);
          v217 = 0;

          unint64_t v87 = v86;
        }
        else
        {
          v217 = 0;
          unint64_t v87 = MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        v217 = 0;
        unint64_t v87 = v83;
      }
      v214 = (uint64_t (**)(uint64_t, uint64_t))v87;
      if (v87 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1C95DEF9C();
        swift_bridgeObjectRelease();
        unint64_t v87 = (unint64_t)v214;
      }
      else
      {
        uint64_t v88 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v229 = v38;
      if (v88)
      {
        unint64_t v89 = 0;
        unint64_t v213 = v87 & 0xC000000000000001;
        unint64_t v199 = v87 + 32;
        uint64_t v200 = v87 & 0xFFFFFFFFFFFFFF8;
        uint64_t v221 = (uint64_t)v240 + 8;
        uint64_t v222 = (uint64_t)&v239 + 8;
        uint64_t v40 = (SEL *)&unk_1E659A000;
        v228 = (char *)MEMORY[0x1E4FBC860];
        v212 = (void (**)(uint64_t, uint64_t))v88;
        while (1)
        {
          if (v213)
          {
            uint64_t v90 = (char *)v89;
            id v91 = (id)MEMORY[0x1CB786100](v89, v87);
          }
          else
          {
            if (v89 >= *(void *)(v200 + 16)) {
              goto LABEL_117;
            }
            uint64_t v90 = (char *)v89;
            id v91 = *(id *)(v199 + 8 * v89);
          }
          v92 = v91;
          BOOL v93 = __OFADD__(v90, 1);
          uint64_t v94 = (void (**)(void, void))(v90 + 1);
          if (v93)
          {
            __break(1u);
            goto LABEL_115;
          }
          v220 = v94;
          id v95 = objc_msgSend(v91, sel_gaveOptions);
          if (v95)
          {
            long long v96 = v95;
            id v97 = objc_msgSend(v95, sel_choices);

            if (!v97)
            {
              __break(1u);
              goto LABEL_122;
            }
            uint64_t v11 = v217;
            unint64_t v29 = sub_1C955F15C(v97, &qword_1EA587B70);
            v217 = v11;

            if (v29 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v98 = sub_1C95DEF9C();
              swift_bridgeObjectRelease();
              if (v98)
              {
LABEL_42:
                if (v98 < 1) {
                  goto LABEL_116;
                }
                uint64_t v99 = 0;
                unint64_t v230 = v29 & 0xC000000000000001;
                unint64_t v224 = v29;
                v225 = v92;
                uint64_t v227 = v98;
                do
                {
                  if (v230) {
                    id v100 = (id)MEMORY[0x1CB786100](v99, v29);
                  }
                  else {
                    id v100 = *(id *)(v29 + 8 * v99 + 32);
                  }
                  uint64_t v11 = v100;
                  swift_retain();
                  id v101 = [v11 v40[360]];
                  if (v101)
                  {
                    v102 = v101;
                    id v103 = objc_msgSend(v101, sel_task);

                    if (v103)
                    {
                      sub_1C9564990(v103, v38, MEMORY[0x1E4FBC860], 1, 0, 1, (uint64_t)&unk_1F23C6938, v235);
                      uint64_t v104 = v235[0];
                      uint64_t v105 = v235[1];
                      uint64_t v107 = v235[2];
                      uint64_t v106 = v235[3];
                      uint64_t v108 = v235[4];
                      int v109 = v236;

                      sub_1C955B6F4((uint64_t)v235, (uint64_t)&v237, &qword_1EA587B20);
                      if ((void)v237)
                      {
                        LODWORD(v226) = v109;
                        long long v239 = v237;
                        v240[0] = v238[0];
                        *(_OWORD *)((char *)v240 + 9) = *(_OWORD *)((char *)v238 + 9);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_release();
                        sub_1C955B6F4(v222, (uint64_t)v241, &qword_1EA587AC8);
                        sub_1C955B868((uint64_t)v241);
                        uint64_t v242 = *(void *)&v240[0];
                        sub_1C955B868((uint64_t)&v242);
                        sub_1C955B6F4(v221, (uint64_t)v243, &qword_1EA587AD0);
                        sub_1C955B868((uint64_t)v243);
                        v244[0] = *(void *)&v240[1];
                        sub_1C955B868((uint64_t)v244);
                        swift_retain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if (swift_isUniquelyReferenced_nonNull_native()) {
                          uint64_t v110 = v228;
                        }
                        else {
                          uint64_t v110 = sub_1C9561324(0, *((void *)v228 + 2) + 1, 1, (uint64_t)v228);
                        }
                        unint64_t v112 = *((void *)v110 + 2);
                        unint64_t v111 = *((void *)v110 + 3);
                        if (v112 >= v111 >> 1) {
                          uint64_t v110 = sub_1C9561324((char *)(v111 > 1), v112 + 1, 1, (uint64_t)v110);
                        }
                        *((void *)v110 + 2) = v112 + 1;
                        v113 = &v110[48 * v112];
                        *((void *)v113 + 4) = v104;
                        *((void *)v113 + 5) = v105;
                        *((void *)v113 + 6) = v107;
                        *((void *)v113 + 7) = v106;
                        *((void *)v113 + 8) = v108;
                        v113[72] = (char)v226;
                        v114 = v110;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_release();

                        v228 = v114;
                        uint64_t v234 = (uint64_t)v114;
                        swift_bridgeObjectRelease();
                        uint64_t v38 = v229;
                      }
                      else
                      {
                      }
                      id v10 = v223;
                      unint64_t v29 = v224;
                      uint64_t v40 = (SEL *)&unk_1E659A000;
                      v92 = v225;
                    }
                    else
                    {

                      swift_release();
                    }
                    uint64_t v98 = v227;
                  }
                  else
                  {

                    swift_release();
                  }
                  ++v99;
                }
                while (v98 != v99);

                swift_bridgeObjectRelease();
                uint64_t v3 = v204;
                goto LABEL_66;
              }
            }
            else
            {
              uint64_t v98 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v98) {
                goto LABEL_42;
              }
            }

            swift_bridgeObjectRelease();
          }
          else
          {
          }
LABEL_66:
          unint64_t v89 = (unint64_t)v220;
          unint64_t v87 = (unint64_t)v214;
          if (v220 == v212) {
            goto LABEL_69;
          }
        }
      }
      v228 = (char *)MEMORY[0x1E4FBC860];
LABEL_69:
      swift_bridgeObjectRelease();
      if (!*((void *)v228 + 2))
      {
        swift_bridgeObjectRelease();
        v121 = (void *)sub_1C95DECCC();
        os_log_type_t v122 = sub_1C95DEE0C();
        if (OUTLINED_FUNCTION_12_1(v122))
        {
          v123 = (_WORD *)OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_24(v123);
          OUTLINED_FUNCTION_4_3(&dword_1C9555000, v124, v125, "Could not obtain Entities from request, returning nil");
          uint64_t v3 = v204;
          OUTLINED_FUNCTION_5_1();
        }
        swift_release();

        swift_release();
        (*(void (**)(char *, NSObject *))(v216 + 8))(v3, v219);
        return;
      }
      v115 = (void *)sub_1C95DEC5C();
      uint64_t v116 = v195;
      sub_1C95DEC8C();
      os_signpost_type_t v117 = sub_1C95DEE3C();
      if (sub_1C95DEE6C())
      {
        uint64_t v118 = v194;
        swift_retain();
        sub_1C95DECBC();
        swift_release();
        v119 = (void (**)(char *, uint64_t))v198;
        OUTLINED_FUNCTION_27();
        if (v120() != *MEMORY[0x1E4FBD340]) {
          v119[1](v10, v118);
        }
        *(_WORD *)OUTLINED_FUNCTION_4_2() = 0;
        os_signpost_id_t v126 = sub_1C95DEC2C();
        OUTLINED_FUNCTION_20(&dword_1C9555000, v127, v117, v126, "CSMParseE2E");
        OUTLINED_FUNCTION_5_1();
      }

      uint64_t v129 = v216 + 8;
      v128 = *(void (**)(uint64_t, NSObject *))(v216 + 8);
      uint64_t v130 = v116;
      uint64_t v38 = (uint64_t)v219;
      v128(v130, v219);
      sub_1C95DEC5C();
      uint64_t v131 = v209;
      sub_1C95DEC1C();
      uint64_t v132 = v234;
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_1C95DEC5C();
      uint64_t v40 = (SEL *)sub_1C95DEE4C();
      char v133 = sub_1C95DEE6C();
      uint64_t v216 = v129;
      v223 = (char *)v128;
      if (v133)
      {
        v134 = v215;
        v211(v215, v131, v38);
        v135 = (_DWORD *)OUTLINED_FUNCTION_22();
        LODWORD(v230) = v40;
        uint64_t v40 = (SEL *)v135;
        _DWORD *v135 = 134217984;
        *(void *)&long long v247 = *(void *)(v132 + 16);
        sub_1C95DEE8C();
        swift_bridgeObjectRelease();
        os_signpost_id_t v136 = sub_1C95DEC2C();
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v11, (os_signpost_type_t)v230, v136, "CSMMatchE2E", "Entity count: %ld", (uint8_t *)v40, 0xCu);
        OUTLINED_FUNCTION_5_1();

        id v10 = v134;
        v128((uint64_t)v134, v38);
      }
      else
      {
        swift_bridgeObjectRelease();

        id v10 = v215;
      }
      v211(v10, v131, v38);
      swift_allocObject();
      uint64_t v200 = sub_1C95DEC9C();
      unint64_t v233 = MEMORY[0x1E4FBC860];
      swift_beginAccess();
      uint64_t v137 = v234;
      uint64_t v222 = *(void *)(v234 + 16);
      if (!v222) {
        break;
      }
      unint64_t v138 = 0;
      v220 = (void (**)(uint64_t, uint64_t))(v234 + 32);
      v214 = (uint64_t (**)(uint64_t, uint64_t))(v198 + 88);
      LODWORD(v213) = *MEMORY[0x1E4FBD340];
      v212 = (void (**)(uint64_t, uint64_t))(v198 + 8);
      unint64_t v29 = (unint64_t)v208;
      uint64_t v221 = v234;
      while (v138 < *(void *)(v137 + 16))
      {
        v139 = &v220[6 * v138];
        v140 = *(char **)v139;
        uint64_t v141 = *((void *)v139 + 1);
        v143 = (void (*)(void, void))*((void *)v139 + 2);
        v142 = (void *)*((void *)v139 + 3);
        unint64_t v144 = *((void *)v139 + 4);
        LOBYTE(v139) = v139[40];
        *(void *)&long long v247 = v140;
        *((void *)&v247 + 1) = v141;
        v248 = v143;
        v249 = v142;
        unint64_t v250 = v144;
        char v251 = (char)v139;
        v225 = v142;
        swift_bridgeObjectRetain();
        unint64_t v224 = v144;
        swift_bridgeObjectRetain();
        v228 = v140;
        swift_retain();
        uint64_t v227 = v141;
        swift_bridgeObjectRetain();
        v226 = v143;
        swift_bridgeObjectRetain();
        sub_1C95DEC5C();
        sub_1C95DEC1C();
        v145 = sub_1C95DEC5C();
        os_signpost_type_t v146 = sub_1C95DEE4C();
        if (sub_1C95DEE6C())
        {
          v147 = v215;
          v148 = v219;
          v149 = (void (*)(char *, unint64_t, NSObject *))v211;
          v211(v215, v29, (uint64_t)v219);
          v150 = (uint8_t *)OUTLINED_FUNCTION_4_2();
          *(_WORD *)v150 = 0;
          os_signpost_id_t v151 = sub_1C95DEC2C();
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v145, v146, v151, "CSMMatchEntityCandidate", "", v150, 2u);
          OUTLINED_FUNCTION_5_1();

          v152 = v147;
          ((void (*)(char *, NSObject *))v223)(v147, v148);
        }
        else
        {

          v148 = v219;
          v152 = v215;
          v149 = (void (*)(char *, unint64_t, NSObject *))v211;
        }
        v149(v152, v29, v148);
        swift_allocObject();
        unint64_t v230 = sub_1C95DEC9C();
        uint64_t v153 = sub_1C955AE7C(&v247, v206);
        uint64_t v154 = *(void *)(v153 + 16);
        if (v154)
        {
          uint64_t v155 = v153 + 65;
          do
          {
            v156 = *(void **)(v155 - 25);
            __int16 v157 = *(_WORD *)(v155 - 1);
            v244[1] = *(void *)(v155 - 33);
            v244[2] = v156;
            long long v245 = *(_OWORD *)(v155 - 17);
            __int16 v246 = v157;
            swift_retain();
            id v158 = v156;
            if (sub_1C955C5EC())
            {
              MEMORY[0x1CB785F60]();
              if (*(void *)((v233 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v233 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                sub_1C95DEDDC();
              }
              sub_1C95DEDEC();
              sub_1C95DEDCC();
            }

            swift_release();
            v155 += 40;
            --v154;
          }
          while (v154);
        }
        swift_bridgeObjectRelease();
        v159 = sub_1C95DEC5C();
        uint64_t v40 = v207;
        sub_1C95DEC8C();
        os_signpost_type_t v160 = sub_1C95DEE3C();
        if (sub_1C95DEE6C())
        {
          swift_retain();
          uint64_t v161 = v203;
          sub_1C95DECBC();
          swift_release();
          uint64_t v162 = v161;
          uint64_t v163 = v201;
          int v164 = (*v214)(v162, v201);
          v165 = "[Error] Interval already ended";
          unint64_t v29 = (unint64_t)v208;
          if (v164 != v213)
          {
            (*v212)(v203, v163);
            v165 = "";
          }
          v166 = v215;
          v167 = v219;
          v211(v215, (uint64_t)v40, (uint64_t)v219);
          v168 = (uint8_t *)OUTLINED_FUNCTION_4_2();
          *(_WORD *)v168 = 0;
          os_signpost_id_t v169 = sub_1C95DEC2C();
          os_signpost_type_t v170 = v160;
          uint64_t v11 = v166;
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v159, v170, v169, "CSMMatchEntityCandidate", v165, v168, 2u);
          OUTLINED_FUNCTION_5_1();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          id v10 = v223;
          ((void (*)(SEL *, NSObject *))v223)(v40, v167);
          ((void (*)(unint64_t, NSObject *))v10)(v29, v167);
          swift_release();
          ((void (*)(NSObject *, NSObject *))v10)(v166, v167);
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v11 = v216;
          id v10 = v223;
          OUTLINED_FUNCTION_23();
          ((void (*)(void))v10)();
          unint64_t v29 = (unint64_t)v208;
          OUTLINED_FUNCTION_23();
          ((void (*)(void))v10)();
          swift_release();
        }
        ++v138;
        uint64_t v137 = v221;
        uint64_t v38 = v209;
        if (v138 == v222)
        {
          swift_bridgeObjectRelease();
          goto LABEL_102;
        }
      }
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      swift_once();
    }
    swift_bridgeObjectRelease();
    id v10 = v223;
LABEL_102:
    v171 = (void *)sub_1C95DEC5C();
    uint64_t v172 = v196;
    sub_1C95DEC8C();
    os_signpost_type_t v173 = sub_1C95DEE3C();
    char v174 = sub_1C95DEE6C();
    v175 = (void (**)(uint64_t, void *))v198;
    if (v174)
    {
      swift_retain();
      uint64_t v176 = v193;
      sub_1C95DECBC();
      swift_release();
      OUTLINED_FUNCTION_27();
      if (v177() != *MEMORY[0x1E4FBD340]) {
        v175[1](v176, v171);
      }
      uint64_t v172 = v196;
      *(_WORD *)OUTLINED_FUNCTION_4_2() = 0;
      os_signpost_id_t v178 = sub_1C95DEC2C();
      OUTLINED_FUNCTION_20(&dword_1C9555000, v179, v173, v178, "CSMMatchE2E");
      OUTLINED_FUNCTION_5_1();
    }

    ((void (*)(uint64_t, NSObject *))v10)(v172, v219);
    unint64_t v180 = v233;
    swift_bridgeObjectRetain_n();
    v181 = sub_1C95DECCC();
    os_log_type_t v182 = sub_1C95DEE0C();
    if (os_log_type_enabled(v181, v182))
    {
      v183 = (uint8_t *)OUTLINED_FUNCTION_22();
      v232[0] = swift_slowAlloc();
      *(_DWORD *)v183 = 136315138;
      if (v180 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v184 = sub_1C95DEF9C();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v184 = *(void *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v231 = v184;
      uint64_t v185 = sub_1C95DEFCC();
      uint64_t v231 = sub_1C9562034(v185, v186, v232);
      sub_1C95DEE8C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9555000, v181, v182, "ContextualSpanMatcher: returning %s spans", v183, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_5_1();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1C9563020(0, &qword_1EA587B18);
    swift_beginAccess();
    sub_1C955EFB8(v233);
    swift_bridgeObjectRelease();
    id v187 = sub_1C9560CF4();
    objc_msgSend(v197, sel_setContextualSpans_, v187);

    v188 = (void *)sub_1C95DECCC();
    os_log_type_t v189 = sub_1C95DEE0C();
    if (OUTLINED_FUNCTION_12_1(v189))
    {
      v190 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_24(v190);
      OUTLINED_FUNCTION_4_3(&dword_1C9555000, v191, v192, "Returning ContextualSpanMatcher response from Swift");
      OUTLINED_FUNCTION_5_1();
    }
    swift_release();

    swift_release();
    swift_release();
    OUTLINED_FUNCTION_23();
    ((void (*)(void))v10)();
    OUTLINED_FUNCTION_23();
    ((void (*)(void))v10)();
  }
}

void sub_1C9560B4C(uint64_t a1, unint64_t a2)
{
  if (qword_1EA587A78 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1C95DECEC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EA587F60);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_1C95DECCC();
  os_log_type_t v6 = sub_1C95DEE1C();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_1C9562034(a1, a2, &v9);
    sub_1C95DEE8C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9555000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB7876A0](v8, -1, -1);
    MEMORY[0x1CB7876A0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

id sub_1C9560CF4()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v1 = (void *)sub_1C95DED9C();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithArray_, v1);

  return v2;
}

void sub_1C9560DCC()
{
  OUTLINED_FUNCTION_18();
  if (v4)
  {
    OUTLINED_FUNCTION_8_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_17();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B58);
    uint64_t v7 = (char *)swift_allocObject();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_10_1(v8 - 32);
  }
  else
  {
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  }
  if (v1)
  {
    sub_1C9561AD8((char *)(v0 + 32), v2, v7 + 32);
    OUTLINED_FUNCTION_15();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_6_1();
    sub_1C956141C(v9, v10, v11, v12);
  }
}

uint64_t sub_1C9560E8C()
{
  OUTLINED_FUNCTION_18();
  if (v4)
  {
    OUTLINED_FUNCTION_8_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_17();
      if (v6)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  else
  {
    uint64_t v5 = v3;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (!v9)
  {
    uint64_t v13 = (const void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AB0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  OUTLINED_FUNCTION_2_3(v10);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = (const void *)OUTLINED_FUNCTION_14_0();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v12 || (v14 - v2 == 0x8000000000000000 ? (BOOL v15 = v12 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_23:
    OUTLINED_FUNCTION_1();
    uint64_t result = sub_1C95DEF8C();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_10_1(v14 - v2);
LABEL_18:
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  OUTLINED_FUNCTION_9_1(v16);
  if (v1)
  {
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    sub_1C9561B74(v0 + v18, v8, (unint64_t)v13 + v18);
    OUTLINED_FUNCTION_15();
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_6_1();
    sub_1C956151C(v19, v20, v21, v22);
  }
  return (uint64_t)v13;
}

uint64_t sub_1C956101C()
{
  OUTLINED_FUNCTION_18();
  if (v4)
  {
    OUTLINED_FUNCTION_8_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_17();
      if (v6)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  else
  {
    uint64_t v5 = v3;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v5 <= v8) {
    uint64_t v9 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v9 = v5;
  }
  if (!v9)
  {
    uint64_t v13 = (const void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B38);
  uint64_t v10 = sub_1C95DE96C();
  OUTLINED_FUNCTION_2_3(v10);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = (const void *)OUTLINED_FUNCTION_14_0();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v12 || (v14 - v2 == 0x8000000000000000 ? (BOOL v15 = v12 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_23:
    OUTLINED_FUNCTION_1();
    uint64_t result = sub_1C95DEF8C();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_10_1(v14 - v2);
LABEL_18:
  uint64_t v16 = sub_1C95DE96C();
  OUTLINED_FUNCTION_9_1(v16);
  if (v1)
  {
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    sub_1C9561CAC(v0 + v18, v8, (unint64_t)v13 + v18);
    OUTLINED_FUNCTION_15();
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_6_1();
    sub_1C9561680(v19, v20, v21, v22);
  }
  return (uint64_t)v13;
}

void sub_1C95611A4()
{
  OUTLINED_FUNCTION_18();
  if (v4)
  {
    OUTLINED_FUNCTION_8_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_17();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B30);
    uint64_t v7 = swift_allocObject();
    size_t v8 = _swift_stdlib_malloc_size((const void *)v7);
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = 2 * ((uint64_t)(v8 - 32) / 16);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  if (v1)
  {
    sub_1C9561DDC((char *)(v0 + 32), v2, (char *)(v7 + 32));
    OUTLINED_FUNCTION_15();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_6_1();
    sub_1C95617E0(v9, v10, v11, v12);
  }
}

void sub_1C9561264()
{
  OUTLINED_FUNCTION_18();
  if (v4)
  {
    OUTLINED_FUNCTION_8_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_17();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_1();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B50);
    uint64_t v7 = (char *)swift_allocObject();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_10_1(v8 - 32);
  }
  else
  {
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  }
  if (v1)
  {
    sub_1C9561E70((char *)(v0 + 32), v2, v7 + 32);
    OUTLINED_FUNCTION_15();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_6_1();
    sub_1C95618D8(v9, v10, v11, v12);
  }
}

char *sub_1C9561324(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B28);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    sub_1C9561F9C((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C95619D8(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

uint64_t sub_1C956141C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

uint64_t sub_1C956151C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

uint64_t sub_1C9561680(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_1C95DE96C() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

uint64_t sub_1C95617E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

uint64_t sub_1C95618D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

uint64_t sub_1C95619D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_1C95DEFAC();
  __break(1u);
  return result;
}

char *sub_1C9561AD8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

uint64_t sub_1C9561B74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = sub_1C95DEFAC();
    __break(1u);
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
    return MEMORY[0x1F4186428](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  return result;
}

uint64_t sub_1C9561CAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = sub_1C95DEFAC();
    __break(1u);
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  if (a3 < a1 || (uint64_t result = sub_1C95DE96C(), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = sub_1C95DE96C();
    return MEMORY[0x1F4186428](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x1F4186420](v8, v9, v10, v7);
  }
  return result;
}

char *sub_1C9561DDC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_1C9561E70(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_1C9561F08(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_1C9561F9C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

uint64_t sub_1C9562034(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1C9562108(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1C9562EFC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1C9562EFC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1C9562108(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1C9562260((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_1C95DEE9C();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_1C9562338(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = sub_1C95DEF3C();
    if (!v8)
    {
      uint64_t result = sub_1C95DEF8C();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_1C9562260(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_1C95DEFAC();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_1C9562338(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1C95623D0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_1C95625AC(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_1C95625AC((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C95623D0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v2 = sub_1C95DED5C();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = sub_1C9562544(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_1C95DEF1C();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  sub_1C95DEFAC();
  __break(1u);
LABEL_14:
  uint64_t result = sub_1C95DEF8C();
  __break(1u);
  return result;
}

void *sub_1C9562544(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587A88);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1C95625AC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587A88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1C956275C(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C9562684(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1C9562684(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_1C95DEFAC();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1C956275C(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_1C95DEFAC();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

size_t sub_1C95627EC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1C956286C(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

size_t sub_1C956280C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1C9562A10(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_1C956282C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1C9562BAC(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_1C956284C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1C9562C90(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

size_t sub_1C956286C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AB0);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_1C9561B74(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C955A830(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_1C9562A10(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B38);
  uint64_t v10 = *(void *)(sub_1C95DE96C() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_1C95DE96C() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_1C9561CAC(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C955A904(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1C9562BAC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B30);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1C9561DDC(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C955A9D4((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_1C9562C90(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B48);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1C9561F08(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C955AA84((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_1C9562D74(void *a1)
{
  id v1 = objc_msgSend(a1, sel_stringValue);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1C95DED1C();

  return v3;
}

uint64_t sub_1C9562DD8(void *a1)
{
  id v1 = objc_msgSend(a1, sel_data);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1C95DE88C();

  return v3;
}

uint64_t sub_1C9562E3C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1C9562E50(a1, a2);
  }
  return a1;
}

uint64_t sub_1C9562E50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1C9562EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1C9562F58(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1C9562F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C9562FD0()
{
  unint64_t result = qword_1EA587B68;
  if (!qword_1EA587B68)
  {
    sub_1C95DE86C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA587B68);
  }
  return result;
}

uint64_t sub_1C9563020(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1)
{
  return a1 - 8;
}

void OUTLINED_FUNCTION_4_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_1(uint64_t a1)
{
  return a1 - 8;
}

void OUTLINED_FUNCTION_10_1(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (a1 / v3);
}

BOOL OUTLINED_FUNCTION_12_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_15()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19(uint64_t a1)
{
  *(void *)(v1 + 480) = a1;
  return v1 + 480;
}

void OUTLINED_FUNCTION_20(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return MEMORY[0x1F41847A0](v0, v1);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return swift_slowAlloc();
}

_WORD *OUTLINED_FUNCTION_24(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1C9563230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = sub_1C95DEADC();
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_2_4();
  uint64_t v65 = v6;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA0);
  OUTLINED_FUNCTION_0();
  uint64_t v61 = v7;
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_2_4();
  uint64_t v73 = v8;
  uint64_t v84 = sub_1C95DEA8C();
  OUTLINED_FUNCTION_0();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_26();
  uint64_t v72 = v11;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790]();
  unint64_t v83 = (char *)&v60 - v12;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B80);
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_2_4();
  uint64_t v60 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B88);
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_26();
  char v78 = v14;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790]();
  unint64_t v16 = (uint64_t *)((char *)&v60 - v15);
  uint64_t v85 = sub_1C95DEB5C();
  OUTLINED_FUNCTION_0();
  uint64_t v18 = v17;
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_26();
  uint64_t v81 = v19;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790]();
  os_log_type_t v70 = (char *)&v60 - v20;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790]();
  uint64_t v22 = (char *)&v60 - v21;
  sub_1C95DEC0C();
  swift_allocObject();
  uint64_t v23 = sub_1C95DEBFC();
  uint64_t v76 = v22;
  sub_1C95DEBEC();
  v69 = (void (**)(uint64_t))(v10 + 32);
  id v82 = (void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  unint64_t v24 = *(void *)(a3 + 16);
  unint64_t v67 = v24 - 1;
  uint64_t v63 = v5 + 8;
  uint64_t v66 = (void (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v75 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v62 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  uint64_t v71 = v16;
  uint64_t v64 = v23;
  unint64_t v68 = v24;
  while (1)
  {
    if (v26 == v24)
    {
      uint64_t v27 = 1;
      unint64_t v28 = v24;
      goto LABEL_6;
    }
    if (v26 >= v24) {
      break;
    }
    unint64_t v28 = v26 + 1;
    uint64_t v29 = v86;
    uint64_t v30 = v60 + *(int *)(v86 + 48);
    sub_1C955AC70(v62+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v26, v30);
    uint64_t v31 = (uint64_t)v78 + *(int *)(v29 + 48);
    unint64_t *v78 = v26;
    sub_1C955B6F4(v30, v31, &qword_1EA587AA0);
    uint64_t v27 = 0;
LABEL_6:
    uint64_t v32 = v78;
    uint64_t v33 = v86;
    __swift_storeEnumTagSinglePayload((uint64_t)v78, v27, 1, v86);
    sub_1C955B6F4((uint64_t)v32, (uint64_t)v16, &qword_1EA587B88);
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v33) == 1)
    {
      swift_bridgeObjectRelease();
      (*v75)(v76, v85);
      return v23;
    }
    uint64_t v34 = *v16;
    uint64_t v35 = v73;
    uint64_t v36 = *(int *)(v74 + 48);
    unint64_t v37 = (char *)v16 + *(int *)(v86 + 48) + v36;
    uint64_t v38 = (char *)(v73 + v36);
    unint64_t v39 = *v69;
    uint64_t v40 = v84;
    (*v69)(v73);
    uint64_t v41 = *v82;
    uint64_t v42 = v37;
    uint64_t v43 = v85;
    (*v82)((uint64_t)v38, v42, v85);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v83, v35, v40);
    BOOL v44 = v70;
    os_signpost_type_t v79 = v41;
    v41((uint64_t)v70, v38, v43);
    unint64_t v80 = v28;
    if (v34 == v67)
    {
      sub_1C95DEB1C();
      uint64_t v45 = v64;
      sub_1C95DEBAC();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1C95DEB4C();
      uint64_t v45 = v64;
      sub_1C95DEB8C();
      uint64_t v46 = OUTLINED_FUNCTION_4_4();
      v47(v46);
    }
    sub_1C95DEAFC();
    uint64_t v48 = v81;
    sub_1C95DEB0C();
    os_log_type_t v49 = v83;
    sub_1C95DEA5C();
    uint64_t v50 = v72;
    uint64_t v51 = v76;
    sub_1C95DEB6C();
    uint64_t v52 = OUTLINED_FUNCTION_4_4();
    v53(v52);
    uint64_t v54 = *v66;
    uint64_t v55 = v50;
    uint64_t v56 = v84;
    (*v66)(v55, v84);
    unint64_t v57 = *v75;
    uint64_t v58 = v44;
    uint64_t v59 = v85;
    (*v75)(v58, v85);
    v54((uint64_t)v49, v56);
    v57(v51, v59);
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v79)(v51, v48, v59);
    unint64_t v16 = v71;
    uint64_t v23 = v45;
    unint64_t v24 = v68;
    unint64_t v26 = v80;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9563848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C955B6F4(a3 + 8, (uint64_t)v15, &qword_1EA587AC8);
  uint64_t v14 = *(void *)(a3 + 16);
  sub_1C955B6F4(a3 + 24, (uint64_t)v13, &qword_1EA587AD0);
  uint64_t v12 = *(void *)(a3 + 32);
  swift_retain();
  sub_1C955B758((uint64_t)v15);
  sub_1C955B758((uint64_t)&v14);
  sub_1C955B758((uint64_t)v13);
  sub_1C955B758((uint64_t)&v12);
  uint64_t v4 = *(void *)(sub_1C9563F74() + 16);
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    swift_retain();
    sub_1C955A248();
    uint64_t v6 = v5;
    swift_release_n();
    swift_bridgeObjectRelease();
    sub_1C955B868((uint64_t)&v14);
    sub_1C955B868((uint64_t)v13);
    sub_1C955B868((uint64_t)&v12);
  }
  else
  {
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_1C95DECEC();
    __swift_project_value_buffer(v7, (uint64_t)qword_1EA587F60);
    uint64_t v8 = sub_1C95DECCC();
    os_log_type_t v9 = sub_1C95DEE0C();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C9555000, v8, v9, "Cannot generate UsoGraph for alternativeMatchableString due to original UsoGraph having more than one string values. Returning nil", v10, 2u);
      MEMORY[0x1CB7876A0](v10, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return v0;
}

NSString __swiftcall SampleClassObjC.getHelloWorld()()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SampleClass()), sel_init);
  uint64_t v1 = (void *)sub_1C95DED0C();

  return v1;
}

uint64_t sub_1C9563B10()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1C9563B4C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1C9563B8C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1C9563C08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C9563C50(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C9563C90(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for GraphString()
{
}

uint64_t sub_1C9563CDC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9563D30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C9563DA8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1C9563E6C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_1C9563EDC(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C9563F1C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for Entity()
{
}

uint64_t sub_1C9563F74()
{
  if (*(void *)(v0 + 8))
  {
    uint64_t v1 = *(void *)(v0 + 8);
  }
  else
  {
    swift_retain();
    uint64_t v1 = sub_1C955905C();
    swift_release();
    *(void *)(v0 + 8) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C9563FE0()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v1 = sub_1C95645C0(v0);
    *(void *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C956402C(char a1)
{
  if (!a1) {
    return 0x45746E65696C6173;
  }
  if (a1 == 1) {
    return 0x69446D6574737973;
  }
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1C956409C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AE8);
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), v5);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v6);
}

uint64_t sub_1C9564148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B60);
  uint64_t v6 = v5;
  if (v4)
  {
    sub_1C9562F68(a1+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), a2);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a2, v7, 1, v6);
}

uint64_t sub_1C95641F4(char a1)
{
  return sub_1C95DF00C();
}

uint64_t sub_1C9564244()
{
  return sub_1C95643F0();
}

uint64_t sub_1C9564250()
{
  sub_1C95DED3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C956434C()
{
  sub_1C95DED3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C95643F0()
{
  return sub_1C95DF00C();
}

uint64_t sub_1C95644A8(uint64_t a1, char a2)
{
  return sub_1C95DF00C();
}

uint64_t sub_1C95644F4()
{
  unint64_t v0 = sub_1C95DEFBC();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1C9564540(unsigned __int8 *a1, char *a2)
{
  return sub_1C955C400(*a1, *a2);
}

uint64_t sub_1C956454C()
{
  return sub_1C9564244();
}

uint64_t sub_1C9564554()
{
  return sub_1C956434C();
}

uint64_t sub_1C956455C()
{
  return sub_1C95643F0();
}

uint64_t sub_1C9564564@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1C95644F4();
  *a1 = result;
  return result;
}

uint64_t sub_1C9564594@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C956402C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C95645C0(uint64_t a1)
{
  uint64_t v2 = sub_1C95DE85C();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  BOOL v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v43 = (char *)&v37 - v6;
  MEMORY[0x1F4188790](v5);
  os_log_type_t v9 = (char *)&v37 - v8;
  uint64_t v45 = a1;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v42 = *(void *)(v10 + 16);
  if (!v42) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v39 = v10 + 32;
  unint64_t v47 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v12 = 0;
  uint64_t v37 = MEMORY[0x1E4FBC860];
  uint64_t v40 = v9;
  uint64_t v41 = v2;
  uint64_t v38 = v10;
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v46 = v12;
    uint64_t v13 = (uint64_t *)(v39 + 16 * v12);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain_n();
    uint64_t v16 = sub_1C9563F74();
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v48 = v15;
    uint64_t v49 = v14;
    if (v17)
    {
      sub_1C955B7BC();
      uint64_t v18 = (uint64_t *)(v16 + 40);
      uint64_t v15 = v48;
      uint64_t v19 = v49;
      do
      {
        uint64_t v20 = *(v18 - 1);
        uint64_t v21 = *v18;
        uint64_t v54 = v15;
        uint64_t v55 = v19;
        uint64_t v52 = v20;
        uint64_t v53 = v21;
        uint64_t v50 = 0;
        unint64_t v51 = 0xE000000000000000;
        uint64_t v15 = sub_1C95DEECC();
        uint64_t v14 = v22;
        swift_bridgeObjectRelease();
        v18 += 3;
        uint64_t v19 = v14;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = v43;
    sub_1C95DE83C();
    unint64_t v24 = v44;
    sub_1C95DE82C();
    uint64_t v25 = v40;
    sub_1C95DE84C();
    unint64_t v26 = *v47;
    uint64_t v27 = v41;
    (*v47)(v24, v41);
    v26(v23, v27);
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    sub_1C955B7BC();
    uint64_t v28 = sub_1C95DEEBC();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    if (v28 == v48 && v30 == v49) {
      goto LABEL_20;
    }
    char v32 = sub_1C95DEFDC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_20;
    }
    uint64_t v33 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (!v33)
    {
LABEL_20:
      swift_bridgeObjectRelease();
    }
    else
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v34 = v37;
      }
      else {
        sub_1C95611A4();
      }
      unint64_t v35 = *(void *)(v34 + 16);
      if (v35 >= *(void *)(v34 + 24) >> 1) {
        sub_1C95611A4();
      }
      *(void *)(v34 + 16) = v35 + 1;
      uint64_t v37 = v34;
      uint64_t v36 = v34 + 16 * v35;
      *(void *)(v36 + 32) = v28;
      *(void *)(v36 + 40) = v30;
    }
    uint64_t v10 = v38;
    unint64_t v12 = v46 + 1;
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v25, v27);
    if (v12 == v42)
    {
      swift_bridgeObjectRelease();
      return v37;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9564990@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint8_t *a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v117 = a7;
  int v110 = a4;
  int v111 = a6;
  v120 = a3;
  id v121 = a1;
  v119 = a8;
  sub_1C95DEC7C();
  OUTLINED_FUNCTION_0();
  uint64_t v113 = v11;
  uint64_t v114 = v10;
  MEMORY[0x1F4188790](v10);
  v115 = (uint8_t *)v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_25();
  uint64_t v108 = v14;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_25();
  v107[0] = v16;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v17);
  int v109 = (char *)v107 - v18;
  uint64_t v19 = (uint8_t *)sub_1C95DEC3C();
  OUTLINED_FUNCTION_0();
  uint64_t v21 = v20;
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_25();
  unint64_t v112 = v24;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_25();
  v107[1] = v26;
  OUTLINED_FUNCTION_13_0();
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_25();
  uint64_t v116 = v28;
  OUTLINED_FUNCTION_13_0();
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  char v32 = (char *)v107 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)v107 - v33;
  if (qword_1EA587A80 != -1) {
    swift_once();
  }
  uint64_t v35 = sub_1C95DEC6C();
  uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)qword_1EA587F48);
  sub_1C95DEC5C();
  sub_1C95DEC1C();
  uint64_t v118 = v36;
  uint64_t v37 = sub_1C95DEC5C();
  os_signpost_type_t v38 = sub_1C95DEE4C();
  if (sub_1C95DEE6C())
  {
    uint64_t v39 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_8_2(v39);
    os_signpost_id_t v40 = sub_1C95DEC2C();
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v37, v38, v40, "CSMParseUSOGraph", "", v19, 2u);
    OUTLINED_FUNCTION_5_1();
  }

  (*(void (**)(char *, char *, uint8_t *))(v21 + 16))(v32, v34, v19);
  sub_1C95DECAC();
  swift_allocObject();
  uint64_t v122 = sub_1C95DEC9C();
  id v41 = v121;
  if ((a5 & 1) != 0 && !objc_msgSend(v121, sel_identifiersCount))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v58 = v19;
    uint64_t v59 = sub_1C95DECEC();
    __swift_project_value_buffer(v59, (uint64_t)qword_1EA587F60);
    uint64_t v60 = sub_1C95DECCC();
    os_log_type_t v61 = sub_1C95DEE0C();
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v63 = v122;
    uint64_t v64 = v109;
    if (v62)
    {
      uint64_t v65 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_8_2(v65);
      _os_log_impl(&dword_1C9555000, v60, v61, "[CSMEntityInit] require USOGraph to have identifiers, but identifiers count is zero. Skipping initialization", v19, 2u);
      OUTLINED_FUNCTION_5_1();
    }

    uint64_t v66 = sub_1C95DEC5C();
    sub_1C95DEC8C();
    os_signpost_type_t v67 = sub_1C95DEE3C();
    if (sub_1C95DEE6C())
    {
      swift_retain();
      sub_1C95DECBC();
      swift_release();
      uint64_t v68 = OUTLINED_FUNCTION_2_5();
      if (v69(v68) == *MEMORY[0x1E4FBD340])
      {
        os_log_type_t v70 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, NSObject *))(v63 + 8))(v64, v66);
        os_log_type_t v70 = "";
      }
      id v101 = (uint8_t *)OUTLINED_FUNCTION_4_2();
      *(_WORD *)id v101 = 0;
      os_signpost_id_t v102 = sub_1C95DEC2C();
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v66, v67, v102, "CSMParseUSOGraph", v70, v101, 2u);
      OUTLINED_FUNCTION_5_1();
    }

    uint64_t v74 = *(void (**)(void))(v21 + 8);
    uint64_t v19 = v58;
    ((void (*)(char *, uint8_t *))v74)(v116, v58);
    goto LABEL_41;
  }
  uint64_t v116 = v34;
  uint64_t v42 = a2;
  swift_retain();
  uint64_t v48 = sub_1C95DE8AC();
  swift_release();
  if ((v111 & 1) != 0 && (sub_1C95655A0(v48, v117) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1EA587A78 != -1) {
      swift_once();
    }
    uint64_t v83 = sub_1C95DECEC();
    __swift_project_value_buffer(v83, (uint64_t)qword_1EA587F60);
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_1C95DECCC();
    os_log_type_t v85 = sub_1C95DEE0C();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      v115 = v19;
      v123[0] = v87;
      v120 = v86;
      *(_DWORD *)uint64_t v86 = 136315138;
      unint64_t v112 = v86 + 4;
      uint64_t v88 = swift_bridgeObjectRetain();
      uint64_t v89 = v21;
      uint64_t v90 = MEMORY[0x1CB785F90](v88, MEMORY[0x1E4FBB1A0]);
      unint64_t v92 = v91;
      swift_bridgeObjectRelease();
      uint64_t v93 = v90;
      uint64_t v21 = v89;
      uint64_t v94 = sub_1C9562034(v93, v92, v123);
      OUTLINED_FUNCTION_10_2(v94);
      sub_1C95DEE8C();
      swift_bridgeObjectRelease_n();
      id v41 = v121;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9555000, v84, v85, "[CSMEntityInit] parsing restrict graph types to be %s, but the graph type did not meet this criteria. Skipping initialization", v120, 0xCu);
      swift_arrayDestroy();
      uint64_t v19 = v115;
      OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_5_1();
      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v104 = v107[0];
    uint64_t v105 = sub_1C95DEC5C();
    uint64_t v106 = v122;
    sub_1C95DEC8C();
    os_signpost_type_t v43 = sub_1C95DEE3C();
    if (sub_1C95DEE6C())
    {
      swift_retain();
      sub_1C95DECBC();
      swift_release();
      uint64_t v44 = OUTLINED_FUNCTION_2_5();
      if (v45(v44) == *MEMORY[0x1E4FBD340])
      {
        unint64_t v46 = v19;
        unint64_t v47 = "[Error] Interval already ended";
      }
      else
      {
        uint64_t v71 = v104;
        unint64_t v46 = v19;
        (*(void (**)(uint64_t, NSObject *))(v106 + 8))(v71, v105);
        unint64_t v47 = "";
      }
      uint64_t v72 = (_WORD *)OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_8_2(v72);
      os_signpost_id_t v73 = sub_1C95DEC2C();
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v105, v43, v73, "CSMParseUSOGraph", v47, v19, 2u);
      OUTLINED_FUNCTION_5_1();
      uint64_t v19 = v46;
    }

    uint64_t v74 = *(void (**)(void))(v21 + 8);
    OUTLINED_FUNCTION_6_2();
    v74();
    uint64_t v34 = v116;
LABEL_41:

    swift_release();
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint8_t *))v74)(v34, v19);
    uint64_t v48 = 0;
    uint64_t v98 = 0;
    uint64_t v76 = 0;
    char v100 = 0;
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v49 = sub_1C95DE97C();
  unint64_t v51 = v50;
  if (qword_1EA587A78 != -1) {
    swift_once();
  }
  uint64_t v52 = sub_1C95DECEC();
  __swift_project_value_buffer(v52, (uint64_t)qword_1EA587F60);
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_1C95DECCC();
  os_log_type_t v54 = sub_1C95DEE1C();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v115 = v19;
    v123[0] = v56;
    uint64_t v117 = v42;
    *(_DWORD *)uint64_t v55 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_1C9562034(v49, v51, v123);
    OUTLINED_FUNCTION_10_2(v57);
    sub_1C95DEE8C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9555000, v53, v54, "[CSMEntityInit] parsing graph: %s", v55, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v115;
    OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_5_1();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  sub_1C9559CCC();
  uint64_t v76 = v75;
  swift_bridgeObjectRetain();
  uint64_t v77 = sub_1C95DEC5C();
  sub_1C95DEC8C();
  os_signpost_type_t v78 = sub_1C95DEE3C();
  if (sub_1C95DEE6C())
  {
    uint64_t v118 = v21;
    swift_retain();
    uint64_t v79 = v108;
    sub_1C95DECBC();
    swift_release();
    uint64_t v81 = v113;
    uint64_t v80 = v114;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v113 + 88))(v79, v114) == *MEMORY[0x1E4FBD340])
    {
      id v82 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v80);
      id v82 = "";
    }
    id v95 = (_WORD *)OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_8_2(v95);
    os_signpost_id_t v96 = sub_1C95DEC2C();
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v77, v78, v96, "CSMParseUSOGraph", v82, v19, 2u);
    OUTLINED_FUNCTION_5_1();
    uint64_t v21 = v118;
  }

  id v97 = *(void (**)(void))(v21 + 8);
  OUTLINED_FUNCTION_6_2();
  v97();

  swift_release();
  swift_release();
  OUTLINED_FUNCTION_6_2();
  v97();
  swift_bridgeObjectRelease();
  uint64_t v98 = v120;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  char v100 = v110;
LABEL_42:
  id v103 = v119;
  uint64_t *v119 = v48;
  v103[1] = 0;
  v103[2] = (uint64_t)v98;
  v103[3] = 0;
  v103[4] = v76;
  *((unsigned char *)v103 + 40) = v100;
  return result;
}

uint64_t sub_1C95655A0(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v33 = sub_1C95DEADC();
  uint64_t v2 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587AA8);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = sub_1C95DEB5C();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B90);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C95DEBEC();
  uint64_t v18 = sub_1C95DEAAC();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v18);
  uint64_t v19 = sub_1C95DEB2C();
  sub_1C955D944((uint64_t)v8, &qword_1EA587AA8);
  sub_1C955D944((uint64_t)v10, &qword_1EA587AA8);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  sub_1C9564148(v19, (uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA587B60);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v21) == 1)
  {
    sub_1C955D944((uint64_t)v17, &qword_1EA587B90);
    return 0;
  }
  uint64_t v22 = &v17[*(int *)(v21 + 48)];
  sub_1C95DEB4C();
  v20(v22, v11);
  uint64_t v23 = sub_1C95DEACC();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v33);
  uint64_t v26 = sub_1C95DEA8C();
  (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v17, v26);
  uint64_t v27 = v34;
  uint64_t v28 = *(void *)(v34 + 16);
  if (!v28)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_1C955B7BC();
  swift_bridgeObjectRetain();
  uint64_t v29 = (uint64_t *)(v27 + 40);
  while (1)
  {
    uint64_t v31 = *(v29 - 1);
    uint64_t v30 = *v29;
    uint64_t v37 = v23;
    uint64_t v38 = v25;
    uint64_t v35 = v31;
    uint64_t v36 = v30;
    if (sub_1C95DEEEC()) {
      break;
    }
    v29 += 2;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1C9565978(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1C9565A00(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9565ACCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for EntityType()
{
}

unint64_t sub_1C9565B04()
{
  unint64_t result = qword_1EA587B98;
  if (!qword_1EA587B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA587B98);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return sub_1C95DED3C();
}

_WORD *OUTLINED_FUNCTION_8_2(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_2(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::validate(marrs::qr::orchestration::AerOrchestrator *this, const QRRequest *a2)
{
  return 1;
}

uint64_t marrs::qr::orchestration::AerOrchestrator::validate(marrs::qr::orchestration::AerOrchestrator *this, const QRRequest *a2)
{
  uint64_t v10 = &unk_1F23C7B40;
  uint64_t v11 = 0;
  if (!marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 0))
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Received empty ASR utterance / tokens in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v8, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)v9, (uint64_t)v8, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 322);
  }
  uint64_t v10 = &unk_1F23C7BA0;
  uint64_t v11 = 0;
  if ((marrs::qr::orchestration::PreviousNLUtteranceChecker::verify((marrs::qr::orchestration::PreviousNLUtteranceChecker *)&v10, a2) & 1) == 0)
  {
    unsigned int v6 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Received empty inputs in QRRequest.prevQRUtterances");
    std::string::basic_string[abi:ne180100]<0>(v8, "QueryRewrite");
    IOContentError::IOContentError(v6, (uint64_t)v9, (uint64_t)v8, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 326);
  }
  uint64_t v10 = &unk_1F23C7BD0;
  uint64_t v11 = 0;
  var1 = a2->var1.var1;
  if (a2->var1.var0 != var1 && var1[-1].var2.var1 != var1[-1].var2.var2.var0)
  {
    BOOL v7 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Received non-empty SiriResponse for current turn in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v8, "QueryRewrite");
    IOContentError::IOContentError(v7, (uint64_t)v9, (uint64_t)v8, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 331);
  }
  return 1;
}

void sub_1C9565E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void *IOContentError::IOContentError(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::operator+<char>();
  uint64_t v10 = std::string::append(&v18, " for IO field missing/null: ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v13 = *(const std::string::value_type **)a2;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a2 + 8);
  }
  uint64_t v15 = std::string::append(&v19, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (long long *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F23C7D68;
  return a1;
}

void sub_1C9565FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void BaseException::~BaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F23C7EE0;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  BaseException::~BaseException(this);
  JUMPOUT(0x1CB786E50);
}

uint64_t BaseException::what(BaseException *this)
{
  uint64_t result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

void IOContentError::~IOContentError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1CB786E50);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6599830, MEMORY[0x1E4FBA1C8]);
}

void sub_1C9566148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::~AerOrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
  JUMPOUT(0x1CB786E50);
}

{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(void **this)
{
  *this = &unk_1F23C6CA0;
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  int v3 = this + 22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  int v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(this + 2));
  int v2 = (marrs::inference_engine::EspressoModule **)this[1];
  this[1] = 0;
  if (v2) {
    std::default_delete<marrs::qr::inference_engine::EspressoQueryRewriteModel>::operator()[abi:ne180100](v2);
  }
}

{
  uint64_t vars8;

  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1CB786E50);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::default_delete<marrs::qr::inference_engine::EspressoQueryRewriteModel>::operator()[abi:ne180100](marrs::inference_engine::EspressoModule **a1)
{
  marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType((marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *)(a1 + 4));
  std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](a1 + 3, 0);
  std::unique_ptr<marrs::qr::inference_engine::LSTMDecoderwithAttentionModule>::reset[abi:ne180100](a1 + 2, 0);
  std::unique_ptr<marrs::qr::inference_engine::LSTMEncoderModule>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](a1, 0);
  JUMPOUT(0x1CB786E50);
}

void marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType(marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *this)
{
  int v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::ANEEmbeddingModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::LSTMDecoderwithAttentionModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::qr::inference_engine::LSTMEncoderModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      int v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void non-virtual thunk to'marrs::qr::orchestration::AerOrchestrator::predict(marrs::qr::orchestration::AerOrchestrator *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  uint64_t v5 = (const QRRequest *)((char *)this - 328);
  (*(void (**)(char *))(*((void *)this - 41) + 24))((char *)this - 328);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, v5, (uint64_t)a2, 1, 0);
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(marrs::qr::orchestration::QueryRewriteOrchestrator *this, const QRRequest *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 14) = 4;
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1) {
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_5);
  }
  uint64_t v8 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  os_signpost_id_t v9 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4)) > 1)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
    unint64_t v245 = v9 - 1;
    if (v9 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v236.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    }
    else
    {
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "Total", "CCQRAer total duration", (uint8_t *)&buf, 2u);
      }
      v236.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (os_signpost_enabled(v8))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "PreProcessDuration", "CCQRAer PreProcessing duration", (uint8_t *)&buf, 2u);
      }
    }
    int v238 = a4;
    int v239 = a5;
    os_signpost_id_t spid = v9;
    v242.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    memset(v288, 0, sizeof(v288));
    v286 = 0;
    v285 = 0;
    uint64_t v287 = 0;
    uint64_t v283 = 0;
    uint64_t v282 = 0;
    uint64_t v284 = 0;
    memset(v281, 0, sizeof(v281));
    v279 = 0;
    v278 = 0;
    uint64_t v280 = 0;
    int var0_low = LOBYTE(a2[7].var1.var0);
    int v12 = BYTE1(a2[7].var1.var0);
    int v13 = BYTE2(a2[7].var1.var0);
    unint64_t var0_high = SHIDWORD(a2[7].var1.var0);
    unint64_t var1_low = SLODWORD(a2[7].var1.var1);
    std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>((uint64_t)&v298, (uint64_t)&a2[4].var1);
    memset(&v303, 0, sizeof(v303));
    v296 = 0;
    v295 = 0;
    uint64_t v297 = 0;
    v293 = 0;
    v292 = 0;
    unint64_t v294 = 0;
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v16 = *(void *)(a3 + 16) - v15;
    v241 = a2;
    log = v8;
    int v253 = v13;
    int v254 = v12;
    if (v16)
    {
      uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
      marrs::qr::processing::filterTokensForAER((uint64_t *)&v291, *(marrs::qr::orchestration::QRToken **)(*(void *)(v15 + 112 * (v17 - 1)) + 40), *(marrs::qr::orchestration::QRToken **)(*(void *)(v15 + 112 * (v17 - 1)) + 48), v12 != 0, v13 != 0);
      std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
      std::string::basic_string[abi:ne180100]<0>(&v273, "[EOS]");
      std::string::basic_string[abi:ne180100]<0>(&v290, "[EOS]");
      std::string::basic_string[abi:ne180100]<0>(&v306, "[EOS]");
      memset(&v289, 0, sizeof(v289));
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      v272.__r_.__value_.__s.__data_[8] = 0;
      v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
      v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
      v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (long long *)&v306, (long long *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
      marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (long long *)&v290, (long long **)&v289, 0, 0);
      std::string::size_type size = v303.__r_.__value_.__l.__size_;
      if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
      {
        v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (long long *)&buf);
        if (SHIBYTE(v319) < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v303.__r_.__value_.__l.__size_ + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type size = v19;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v20 = v310;
        *(_OWORD *)(size + 24) = v309;
        *(void *)(size + 40) = v20;
        *(void *)(size + 48) = 0;
        buf.__r_.__value_.__r.__words[2] = 0;
        long long v309 = 0uLL;
        uint64_t v310 = 0;
        *(void *)(size + 56) = 0;
        *(void *)(size + 64) = 0;
        *(_OWORD *)(size + 48) = v311;
        *(void *)(size + 64) = v312;
        long long v311 = 0uLL;
        long long v21 = v313;
        *(_OWORD *)(size + 88) = v314;
        *(_OWORD *)(size + 72) = v21;
        long long v22 = v315;
        *(void *)(size + 120) = v316;
        *(_OWORD *)(size + 104) = v22;
        uint64_t v316 = 0;
        uint64_t v312 = 0;
        long long v315 = 0uLL;
        *(unsigned char *)(size + 128) = v317;
        long long v23 = __p;
        *(void *)(size + 152) = v319;
        *(_OWORD *)(size + 136) = v23;
        uint64_t v319 = 0;
        long long __p = 0uLL;
        v303.__r_.__value_.__l.__size_ = size + 160;
      }
      if (SHIBYTE(v316) < 0) {
        operator delete((void *)v315);
      }
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
      if (SHIBYTE(v310) < 0) {
        operator delete((void *)v309);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
      if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v306.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v290.__r_.__value_.__l.__data_);
      }
      p_var1 = &a2->var1.var1;
      if (SHIBYTE(v274) < 0) {
        operator delete((void *)v273);
      }
      if (v17 - 1 <= var0_high) {
        unint64_t v24 = var0_high;
      }
      else {
        unint64_t v24 = v17 - 1;
      }
      uint64_t v25 = 112 * v17;
      unint64_t v26 = v17 + var0_high - v24;
      while (--v26)
      {
        std::string::basic_string[abi:ne180100]<0>(&v273, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v290, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v306, "[SOQ]");
        memset(&v289, 0, sizeof(v289));
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v272.__r_.__value_.__s.__data_[8] = 0;
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
        v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (long long *)&v306, (long long *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
        marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (long long *)&v290, (long long **)&v289, 0, 0);
        std::string::size_type v27 = v303.__r_.__value_.__l.__size_;
        if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
        {
          v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (long long *)&buf);
          if (SHIBYTE(v319) < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v28 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v303.__r_.__value_.__l.__size_ + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v27 = v28;
          memset(&buf, 0, sizeof(buf));
          uint64_t v29 = v310;
          *(_OWORD *)(v27 + 24) = v309;
          *(void *)(v27 + 40) = v29;
          *(void *)(v27 + 48) = 0;
          uint64_t v310 = 0;
          long long v309 = 0uLL;
          *(void *)(v27 + 56) = 0;
          *(void *)(v27 + 64) = 0;
          *(_OWORD *)(v27 + 48) = v311;
          *(void *)(v27 + 64) = v312;
          long long v311 = 0uLL;
          uint64_t v312 = 0;
          long long v30 = v313;
          *(_OWORD *)(v27 + 88) = v314;
          *(_OWORD *)(v27 + 72) = v30;
          long long v31 = v315;
          *(void *)(v27 + 120) = v316;
          *(_OWORD *)(v27 + 104) = v31;
          uint64_t v316 = 0;
          long long v315 = 0uLL;
          *(unsigned char *)(v27 + 128) = v317;
          long long v32 = __p;
          *(void *)(v27 + 152) = v319;
          *(_OWORD *)(v27 + 136) = v32;
          uint64_t v319 = 0;
          long long __p = 0uLL;
          v303.__r_.__value_.__l.__size_ = v27 + 160;
        }
        if (SHIBYTE(v316) < 0) {
          operator delete((void *)v315);
        }
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v310) < 0) {
          operator delete((void *)v309);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v290.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v274) < 0) {
          operator delete((void *)v273);
        }
        uint64_t v33 = *(void *)(a3 + 8) + v25;
        uint64_t v34 = v33 - 200;
        uint64_t v35 = v33 - 224;
        if (var0_low) {
          uint64_t v35 = v34;
        }
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *(marrs::qr::orchestration::QRToken **)(*(void *)v35 + 40), *(marrs::qr::orchestration::QRToken **)(*(void *)v35 + 48), v12 != 0, v13 != 0);
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)&v291.__r_.__value_.__l.__data_);
        std::string v291 = buf;
        memset(&buf, 0, sizeof(buf));
        *(void *)&long long v273 = &buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
        std::string::basic_string[abi:ne180100]<0>(&v273, "[SOR]");
        std::string::basic_string[abi:ne180100]<0>(&v290, "[SOR]");
        std::string::basic_string[abi:ne180100]<0>(&v306, "[SOR]");
        memset(&v289, 0, sizeof(v289));
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v272.__r_.__value_.__s.__data_[8] = 0;
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
        v289.__r_.__value_.__r.__words[2] = v289.__r_.__value_.__r.__words[0] + 24;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289.__r_.__value_.__r.__words[2], (long long *)&v306, (long long *)&v307, (std::string *)v289.__r_.__value_.__l.__data_);
        marrs::qr::orchestration::QRToken::QRToken(&buf, &v273, (long long *)&v290, (long long **)&v289, 0, 0);
        std::string::size_type v36 = v303.__r_.__value_.__l.__size_;
        if (v303.__r_.__value_.__l.__size_ >= v303.__r_.__value_.__r.__words[2])
        {
          v303.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v303, (long long *)&buf);
          if (SHIBYTE(v319) < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v37 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v303.__r_.__value_.__l.__size_ + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v36 = v37;
          memset(&buf, 0, sizeof(buf));
          uint64_t v38 = v310;
          *(_OWORD *)(v36 + 24) = v309;
          *(void *)(v36 + 40) = v38;
          *(void *)(v36 + 48) = 0;
          uint64_t v310 = 0;
          long long v309 = 0uLL;
          *(void *)(v36 + 56) = 0;
          *(void *)(v36 + 64) = 0;
          *(_OWORD *)(v36 + 48) = v311;
          *(void *)(v36 + 64) = v312;
          long long v311 = 0uLL;
          uint64_t v312 = 0;
          long long v39 = v313;
          *(_OWORD *)(v36 + 88) = v314;
          *(_OWORD *)(v36 + 72) = v39;
          long long v40 = v315;
          *(void *)(v36 + 120) = v316;
          *(_OWORD *)(v36 + 104) = v40;
          uint64_t v316 = 0;
          long long v315 = 0uLL;
          *(unsigned char *)(v36 + 128) = v317;
          long long v41 = __p;
          *(void *)(v36 + 152) = v319;
          *(_OWORD *)(v36 + 136) = v41;
          uint64_t v319 = 0;
          long long __p = 0uLL;
          v303.__r_.__value_.__l.__size_ = v36 + 160;
        }
        if (SHIBYTE(v316) < 0) {
          operator delete((void *)v315);
        }
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v310) < 0) {
          operator delete((void *)v309);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v272);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v290.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v274) < 0) {
          operator delete((void *)v273);
        }
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *(marrs::qr::orchestration::QRToken **)(*(void *)(a3 + 8) + v25 - 176), *(marrs::qr::orchestration::QRToken **)(*(void *)(a3 + 8) + v25 - 168), v12 != 0, v13 != 0);
        v25 -= 112;
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)&v291.__r_.__value_.__l.__data_);
        std::string v291 = buf;
        memset(&buf, 0, sizeof(buf));
        *(void *)&long long v273 = &buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v303, v303.__r_.__value_.__l.__size_, (std::string *)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
      }
      marrs::qr::processing::getFlattenedNormalizedValuesIndices(&buf, (uint64_t *)&v303, p_var1);
      *(void *)&long long v273 = &v295;
      *((void *)&v273 + 1) = &v292;
      std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>((uint64_t)&v273, (uint64_t)&buf);
      *(void *)&long long v273 = &v309;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      memset(&v290, 0, sizeof(v290));
      std::string::size_type v247 = v303.__r_.__value_.__l.__size_;
      if (v303.__r_.__value_.__r.__words[0] == v303.__r_.__value_.__l.__size_)
      {
        std::string::size_type v72 = 0;
        std::string::size_type v42 = 0;
      }
      else
      {
        std::string::size_type v42 = 0;
        std::string::size_type v43 = v303.__r_.__value_.__r.__words[0];
        do
        {
          std::string::size_type v251 = v43;
          uint64_t v45 = *(void *)(v43 + 48);
          uint64_t v44 = *(void *)(v43 + 56);
          uint64_t v259 = v44;
          while (v45 != v44)
          {
            uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
            if ((v46 & 0x80u) == 0) {
              unint64_t v47 = (unsigned __int8 *)v45;
            }
            else {
              unint64_t v47 = *(unsigned __int8 **)v45;
            }
            unint64_t v48 = 0;
            if ((v46 & 0x80u) != 0) {
              uint64_t v46 = *(void *)(v45 + 8);
            }
            if (v46)
            {
              uint64_t v49 = &v47[v46];
              *(_OWORD *)v260 = 0u;
              while (1)
              {
                unsigned __int8 v50 = *v47;
                HIBYTE(v274) = 1;
                LOWORD(v273) = v50;
                unint64_t v51 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&v273);
                if (!v51) {
                  break;
                }
                uint64_t v52 = *((void *)v51 + 5);
LABEL_94:
                uint64_t v56 = *(void *)&v260[2];
                if (*(void *)&v260[2] >= v48)
                {
                  uint64_t v58 = *(void **)v260;
                  uint64_t v59 = (uint64_t)(*(void *)&v260[2] - *(void *)v260) >> 3;
                  unint64_t v60 = v59 + 1;
                  if ((unint64_t)(v59 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v48 - *(void *)v260) >> 2 > v60) {
                    unint64_t v60 = (uint64_t)(v48 - *(void *)v260) >> 2;
                  }
                  if (v48 - *(void *)v260 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v61 = v60;
                  }
                  if (v61) {
                    unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v61);
                  }
                  else {
                    uint64_t v62 = 0;
                  }
                  uint64_t v63 = (void *)(v61 + 8 * v59);
                  *uint64_t v63 = v52;
                  uint64_t v57 = (uint64_t)(v63 + 1);
                  while (v56 != *(void *)v260)
                  {
                    uint64_t v64 = *(void *)(v56 - 8);
                    v56 -= 8;
                    *--uint64_t v63 = v64;
                  }
                  unint64_t v48 = v61 + 8 * v62;
                  *(void *)v260 = v63;
                  if (v58) {
                    operator delete(v58);
                  }
                }
                else
                {
                  **(void **)&v260[2] = v52;
                  uint64_t v57 = *(void *)&v260[2] + 8;
                }
                if (SHIBYTE(v274) < 0) {
                  operator delete((void *)v273);
                }
                *(void *)&long long v65 = *(void *)v260;
                *((void *)&v65 + 1) = v57;
                *(_OWORD *)v260 = v65;
                if (++v47 == v49)
                {
                  std::string::size_type v42 = v290.__r_.__value_.__l.__size_;
                  goto LABEL_115;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&buf, "[OOV]");
              uint64_t v53 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
              os_log_type_t v54 = v53;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(buf.__r_.__value_.__l.__data_);
                if (v54) {
                  goto LABEL_88;
                }
              }
              else if (v53)
              {
LABEL_88:
                std::string::basic_string[abi:ne180100]<0>(&buf, "[OOV]");
                uint64_t v55 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
                if (!v55) {
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                }
LABEL_92:
                uint64_t v52 = *((void *)v55 + 5);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                goto LABEL_94;
              }
              std::string::basic_string[abi:ne180100]<0>(&buf, "*");
              uint64_t v55 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v298, (unsigned __int8 *)&buf);
              if (!v55) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              goto LABEL_92;
            }
            *(_OWORD *)v260 = 0u;
LABEL_115:
            if (v42 >= v290.__r_.__value_.__r.__words[2])
            {
              unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v290.__r_.__value_.__r.__words[0]) >> 3);
              unint64_t v67 = v66 + 1;
              if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556
                 * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3) > v67)
                unint64_t v67 = 0x5555555555555556
                    * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
              else {
                unint64_t v68 = v67;
              }
              *((void *)&v309 + 1) = (char *)&v290.__r_.__value_.__l + 16;
              v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v68);
              std::string::size_type v70 = (std::string::size_type)&v69[24 * v66];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
              buf.__r_.__value_.__l.__size_ = v70;
              *(void *)&long long v309 = &v69[24 * v71];
              *(_OWORD *)std::string::size_type v70 = *(_OWORD *)v260;
              *(void *)(v70 + 16) = v48;
              buf.__r_.__value_.__r.__words[2] = v70 + 24;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v290, &buf);
              std::string::size_type v42 = v290.__r_.__value_.__l.__size_;
              std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)std::string::size_type v42 = *(_OWORD *)v260;
              *(void *)(v42 + 16) = v48;
              v42 += 24;
            }
            v290.__r_.__value_.__l.__size_ = v42;
            v45 += 24;
            uint64_t v44 = v259;
          }
          std::string::size_type v43 = v251 + 160;
        }
        while (v251 + 160 != v247);
        std::string::size_type v72 = v290.__r_.__value_.__r.__words[0];
      }
      unint64_t v73 = *((void *)&v299 + 1);
      memset(&v289, 0, sizeof(v289));
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      buf.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v74 = v42 - v72;
      a2 = v241;
      if (v42 != v72)
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (v74 >> 3);
        if (v75 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v76 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(0xAAAAAAAAAAAAAAABLL * (v74 >> 3));
        v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
        v289.__r_.__value_.__r.__words[2] = (std::string::size_type)v76 + 24 * v77;
        size_t v78 = 24 * ((v74 - 24) / 0x18uLL) + 24;
        bzero(v76, v78);
        uint64_t v79 = 0;
        v289.__r_.__value_.__l.__size_ = (std::string::size_type)v76 + v78;
        if (v75 <= 1) {
          uint64_t v80 = 1;
        }
        else {
          uint64_t v80 = v75;
        }
        do
        {
          if ((uint64_t)(*(void *)(v290.__r_.__value_.__r.__words[0] + 24 * v79 + 8)
                       - *(void *)(v290.__r_.__value_.__r.__words[0] + 24 * v79)) >> 3 >= var1_low)
            unint64_t v81 = var1_low;
          else {
            unint64_t v81 = (uint64_t)(*(void *)(v290.__r_.__value_.__r.__words[0] + 24 * v79 + 8)
          }
                          - *(void *)(v290.__r_.__value_.__r.__words[0] + 24 * v79)) >> 3;
          LODWORD(v272.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::vector(&v273, v73, &v272);
          std::vector<std::vector<float>>::vector(&buf, v81, (uint64_t)&v273);
          id v82 = (uint64_t *)(v289.__r_.__value_.__r.__words[0] + 24 * v79);
          std::vector<std::vector<float>>::__vdeallocate(v82);
          *(std::string *)id v82 = buf;
          memset(&buf, 0, sizeof(buf));
          v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
          if ((void)v273)
          {
            *((void *)&v273 + 1) = v273;
            operator delete((void *)v273);
          }
          if (v81)
          {
            uint64_t v83 = *(uint64_t **)(v289.__r_.__value_.__r.__words[0] + 24 * v79);
            uint64_t v84 = *(uint64_t **)(v290.__r_.__value_.__r.__words[0] + 24 * v79);
            do
            {
              uint64_t v86 = *v84++;
              uint64_t v85 = v86;
              uint64_t v87 = *v83;
              v83 += 3;
              *(_DWORD *)(v87 + 4 * v85) = 1065353216;
              --v81;
            }
            while (v81);
          }
          ++v79;
        }
        while (v79 != v80);
      }
      memset(v320, 0, 24);
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v320, (uint64_t)v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]) >> 5));
      *(void *)&v320[24] = 0;
      long long v321 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v320[24], v295, (uint64_t)v296, ((char *)v296 - (unsigned char *)v295) >> 3);
      long long v322 = 0uLL;
      *(void *)&long long v323 = 0;
      std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v322, (uint64_t)v292, (uint64_t)v293, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v293 - (unsigned char *)v292) >> 3));
      *((void *)&v323 + 1) = 0;
      long long v324 = 0uLL;
      long long v88 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323 + 8;
      buf.__r_.__value_.__s.__data_[8] = 0;
      if (v289.__r_.__value_.__l.__size_ != v289.__r_.__value_.__r.__words[0])
      {
        unint64_t v89 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v289.__r_.__value_.__l.__size_ - v289.__r_.__value_.__r.__words[0]) >> 3);
        if (v89 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        *((void *)&v323 + 1) = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v89);
        *(void *)&long long v324 = *((void *)&v323 + 1);
        *((void *)&v324 + 1) = *((void *)&v323 + 1) + 24 * v90;
        *(void *)&long long v324 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v324 + 8, (uint64_t *)v88, *((uint64_t **)&v88 + 1), *((void **)&v323 + 1));
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
      std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    else
    {
      long long v323 = 0u;
      long long v324 = 0u;
      long long v321 = 0u;
      long long v322 = 0u;
      memset(v320, 0, sizeof(v320));
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (v295)
    {
      v296 = (uint64_t *)v295;
      operator delete(v295);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
    std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)v288, *(std::string **)v320, *(std::string **)&v320[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v320[8] - *(void *)v320) >> 5));
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v285, *(char **)&v320[24], v321, (uint64_t)(v321 - *(void *)&v320[24]) >> 3);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v282, v322, *((uint64_t *)&v322 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v322 + 1) - v322) >> 3));
    unint64_t v92 = (uint64_t *)*((void *)&v323 + 1);
    unint64_t v91 = (uint64_t *)v324;
    unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v324 - *((void *)&v323 + 1)) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v278) >> 3) >= v93)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v279 - (char *)v278) >> 3) >= v93)
      {
        uint64_t v98 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(*((uint64_t **)&v323 + 1), (uint64_t *)v324, (uint64_t *)v278);
        uint64_t v99 = v279;
        while (v99 != v98)
        {
          v99 -= 3;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        }
        v279 = v98;
LABEL_163:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323 + 8;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (*(void *)&v320[24])
        {
          *(void *)&long long v321 = *(void *)&v320[24];
          operator delete(*(void **)&v320[24]);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v320;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v298);
        uint64_t v274 = 0;
        long long v273 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((char *)&v273, (unint64_t *)v285, v286, ((char *)v286 - (unsigned char *)v285) >> 3);
        char v100 = (uint64_t *)v278;
        id v101 = v279;
        v276 = 0;
        v277 = 0;
        v275 = 0;
        *(void *)v320 = &v275;
        v320[8] = 0;
        if (v279 != (uint64_t *)v278)
        {
          unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v279 - (char *)v278) >> 3);
          if (v102 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          v275 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v102);
          v276 = v275;
          v277 = (char *)&v275[3 * v103];
          *(void *)&long long v298 = v275;
          v303.__r_.__value_.__r.__words[0] = (std::string::size_type)v275;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v303;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v298;
          LOBYTE(v309) = 0;
          uint64_t v104 = v275;
          do
          {
            *uint64_t v104 = 0;
            v104[1] = 0;
            v104[2] = 0;
            std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v104, *v100, v100[1], 0xAAAAAAAAAAAAAAABLL * ((v100[1] - *v100) >> 3));
            uint64_t v104 = (void *)(v298 + 24);
            *(void *)&long long v298 = v298 + 24;
            v100 += 3;
          }
          while (v100 != v101);
          LOBYTE(v309) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
          v276 = v104;
        }
        if (v245 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v252.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          uint64_t v105 = log;
        }
        else
        {
          uint64_t v105 = log;
          if (os_signpost_enabled(log))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, spid, "PreProcessDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
          }
          v252.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (os_signpost_enabled(log))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_BEGIN, spid, "ForwardDuration", "CCQRAer Inference duration", (uint8_t *)&buf, 2u);
          }
        }
        v250.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        uint64_t v106 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
          _os_log_debug_impl(&dword_1C9555000, v106, OS_LOG_TYPE_DEBUG, "%s #CCQRAer inference started.", (uint8_t *)&buf, 0xCu);
        }
        marrs::qr::inference_engine::EspressoQueryRewriteModel::forward((marrs::qr::inference_engine::EspressoQueryRewriteModel *)&v295, (std::chrono::steady_clock::time_point *)a2->var1.var0, (uint64_t)&v273, v238, v239);
        uint64_t v107 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
          _os_log_debug_impl(&dword_1C9555000, v107, OS_LOG_TYPE_DEBUG, "%s #CCQRAer inference ended.", (uint8_t *)&buf, 0xCu);
        }
        if (v245 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v248.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        }
        else
        {
          if (os_signpost_enabled(v105))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, v105, OS_SIGNPOST_INTERVAL_END, spid, "ForwardDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
          }
          v248.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (os_signpost_enabled(v105))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, v105, OS_SIGNPOST_INTERVAL_BEGIN, spid, "PostProcessDuration", "CCQRAer PostProcessing duration", (uint8_t *)&buf, 2u);
          }
        }
        v240.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v293 = 0;
        v292 = 0;
        unint64_t v294 = 0;
        memset(&v291, 0, sizeof(v291));
        uint64_t v108 = (uint64_t *)v295;
        v261 = v296;
        if (v295 != v296)
        {
          while (1)
          {
            memset(&buf, 0, sizeof(buf));
            uint64_t v109 = *v108;
            uint64_t v110 = v108[1] - *v108;
            if (v110)
            {
              std::vector<std::string>::pointer v111 = 0;
              unint64_t v112 = 0;
              unint64_t v113 = v110 >> 3;
              do
              {
                unint64_t v114 = v112 + 1;
                unint64_t v115 = *(void *)(v109 + 8 * v112);
                unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v283 - v282) >> 3);
                if (v115 < v116)
                {
                  if (v114 < v113)
                  {
                    unint64_t v117 = v112;
                    while (1)
                    {
                      unint64_t v118 = *(void *)(v109 + 8 * v117 + 8);
                      if (v118 >= v116 || *(void *)(v109 + 8 * v117) != v118 - 1) {
                        break;
                      }
                      if (**(void **)(v282 + 24 * v118) != **(void **)(v282 + 24 * v115))
                      {
                        unint64_t v114 = v117 + 1;
                        break;
                      }
                      ++v114;
                      if (v113 - 1 == ++v117)
                      {
                        unint64_t v114 = v113;
                        break;
                      }
                    }
                  }
                  uint64_t v119 = v288[0] + 160 * **(void **)(v282 + 24 * v115);
                  if (v114 - v112 == 0xAAAAAAAAAAAAAAABLL
                                    * ((uint64_t)(*(void *)(v119 + 56) - *(void *)(v119 + 48)) >> 3))
                  {
                    if ((char *)std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((const void **)(v288[0] + 160 * **(void **)(v282 + 24 * v115)))
                       - (char *)&marrs::qr::processing::Vocab::reservedTokens == 112)
                    {
                      if ((unint64_t)v111 >= buf.__r_.__value_.__r.__words[2])
                      {
                        std::vector<std::string>::pointer v111 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)&buf, (long long *)v119);
                      }
                      else
                      {
                        if (*(char *)(v119 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v111, *(const std::string::value_type **)v119, *(void *)(v119 + 8));
                        }
                        else
                        {
                          long long v120 = *(_OWORD *)v119;
                          v111->__r_.__value_.__r.__words[2] = *(void *)(v119 + 16);
                          *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v120;
                        }
                        ++v111;
                      }
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                    }
                  }
                  else if (v114 > v112)
                  {
                    do
                    {
                      uint64_t v121 = *(void *)(v119 + 48)
                           + 24 * *(void *)(*(void *)(v282 + 24 * *(void *)(*v108 + 8 * v112)) + 8);
                      if ((unint64_t)v111 >= buf.__r_.__value_.__r.__words[2])
                      {
                        std::vector<std::string>::pointer v111 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)&buf, (long long *)v121);
                      }
                      else
                      {
                        if (*(char *)(v121 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v111, *(const std::string::value_type **)v121, *(void *)(v121 + 8));
                        }
                        else
                        {
                          long long v122 = *(_OWORD *)v121;
                          v111->__r_.__value_.__r.__words[2] = *(void *)(v121 + 16);
                          *(_OWORD *)&v111->__r_.__value_.__l.__data_ = v122;
                        }
                        ++v111;
                      }
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                      ++v112;
                    }
                    while (v114 != v112);
                  }
                }
                uint64_t v109 = *v108;
                unint64_t v113 = (v108[1] - *v108) >> 3;
                unint64_t v112 = v114;
              }
              while (v114 < v113);
            }
            v123 = (std::string *)v293;
            if ((unint64_t)v293 >= v294)
            {
              uint64_t v125 = (uint64_t)v292;
              unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v293 - (unsigned char *)v292) >> 3);
              unint64_t v127 = v126 + 1;
              if (v126 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v294 - (void)v292) >> 3) > v127) {
                unint64_t v127 = 0x5555555555555556 * ((uint64_t)(v294 - (void)v292) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v294 - (void)v292) >> 3) >= 0x555555555555555) {
                unint64_t v128 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v128 = v127;
              }
              if (v128 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v129 = (char *)operator new(24 * v128);
              uint64_t v130 = (std::string *)&v129[24 * v126];
              *uint64_t v130 = buf;
              memset(&buf, 0, sizeof(buf));
              uint64_t v124 = v130 + 1;
              if (v123 == (std::string *)v125)
              {
                v292 = v130;
                v293 = &v130[1];
                unint64_t v294 = (unint64_t)&v129[24 * v128];
                if (!v123) {
                  goto LABEL_233;
                }
              }
              else
              {
                do
                {
                  v130[-1].__r_.__value_.__r.__words[0] = 0;
                  v130[-1].__r_.__value_.__l.__size_ = 0;
                  --v130;
                  v130->__r_.__value_.__r.__words[2] = 0;
                  long long v131 = *(_OWORD *)&v123[-1].__r_.__value_.__l.__data_;
                  --v123;
                  *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v131;
                  v130->__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
                  v123->__r_.__value_.__r.__words[0] = 0;
                  v123->__r_.__value_.__l.__size_ = 0;
                  v123->__r_.__value_.__r.__words[2] = 0;
                }
                while (v123 != (std::string *)v125);
                uint64_t v132 = (uint64_t)v292;
                v123 = (std::string *)v293;
                v292 = v130;
                v293 = v124;
                unint64_t v294 = (unint64_t)&v129[24 * v128];
                if (v123 != (std::string *)v132)
                {
                  do
                  {
                    *(void *)v320 = --v123;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v320);
                  }
                  while (v123 != (std::string *)v132);
                  v123 = (std::string *)v132;
                }
                if (!v123) {
                  goto LABEL_233;
                }
              }
              operator delete(v123);
            }
            else
            {
              *(void *)v293 = 0;
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              std::string *v123 = buf;
              memset(&buf, 0, sizeof(buf));
              uint64_t v124 = v123 + 1;
            }
LABEL_233:
            v293 = v124;
            *(void *)v320 = &buf;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v320);
            v108 += 4;
            if (v108 == v261)
            {
              char v133 = (uint64_t *)v295;
              v134 = v296;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
              if (v295 != v296)
              {
                do
                {
                  *(_DWORD *)v320 = *((_DWORD *)v133 + 6);
                  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&buf, v320);
                  v133 += 4;
                }
                while (v133 != v134);
              }
              break;
            }
          }
        }
        uint64_t v135 = *(void *)(a3 + 16);
        os_signpost_id_t v136 = (std::string::__raw *)v292;
        uint64_t v137 = *(void *)(v135 - 112);
        *(_OWORD *)v320 = *(_OWORD *)v137;
        if (*(char *)(v137 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v320[16], *(const std::string::value_type **)(v137 + 16), *(void *)(v137 + 24));
        }
        else
        {
          long long v138 = *(_OWORD *)(v137 + 16);
          *(void *)&long long v321 = *(void *)(v137 + 32);
          *(_OWORD *)&v320[16] = v138;
        }
        *((void *)&v321 + 1) = 0;
        long long v322 = 0uLL;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((void *)&v321 + 1, *(void *)(v137 + 40), *(void *)(v137 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v137 + 48) - *(void *)(v137 + 40)) >> 5));
        uint64_t v256 = v135;
        long long v323 = 0uLL;
        *(void *)&long long v324 = 0;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v323, *(void *)(v137 + 64), *(void *)(v137 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v137 + 72) - *(void *)(v137 + 64)) >> 5));
        *((void *)&v324 + 1) = *(void *)(v137 + 88);
        float v139 = *(float *)v291.__r_.__value_.__l.__data_;
        memset(v302, 0, sizeof(v302));
        long long v300 = 0u;
        long long v301 = 0u;
        long long v299 = 0u;
        std::string::size_type v140 = v136->__words[0];
        std::string::size_type v141 = v136->__words[1];
        if (v136->__words[0] != v141)
        {
          char v142 = 0;
          do
          {
            if (v142) {
              std::string::append((std::string *)&v299, " ");
            }
            int v143 = *(char *)(v140 + 23);
            if (v143 >= 0) {
              unint64_t v144 = (const std::string::value_type *)v140;
            }
            else {
              unint64_t v144 = *(const std::string::value_type **)v140;
            }
            if (v143 >= 0) {
              std::string::size_type v145 = *(unsigned __int8 *)(v140 + 23);
            }
            else {
              std::string::size_type v145 = *(void *)(v140 + 8);
            }
            std::string::append((std::string *)&v299, v144, v145);
            marrs::qr::orchestration::QRToken::QRToken(&buf, (long long *)v140);
            uint64_t v146 = v301;
            if ((unint64_t)v301 >= *((void *)&v301 + 1))
            {
              unint64_t v152 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v301 - *((void *)&v300 + 1)) >> 5);
              unint64_t v153 = v152 + 1;
              if (v152 + 1 > 0x199999999999999) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(*((void *)&v301 + 1) - *((void *)&v300 + 1)) >> 5) > v153) {
                unint64_t v153 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v301 + 1) - *((void *)&v300 + 1)) >> 5);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v301 + 1) - *((void *)&v300 + 1)) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
                unint64_t v154 = 0x199999999999999;
              }
              else {
                unint64_t v154 = v153;
              }
              v305 = (char *)&v301 + 8;
              if (v154) {
                unint64_t v154 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v154);
              }
              else {
                uint64_t v155 = 0;
              }
              std::string::size_type v156 = v154 + 160 * v152;
              v303.__r_.__value_.__r.__words[0] = v154;
              v303.__r_.__value_.__l.__size_ = v156;
              unint64_t v304 = v154 + 160 * v155;
              long long v157 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(void *)(v156 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v156 = v157;
              memset(&buf, 0, sizeof(buf));
              long long v158 = v309;
              *(void *)(v156 + 40) = v310;
              *(_OWORD *)(v156 + 24) = v158;
              uint64_t v310 = 0;
              long long v309 = 0uLL;
              *(void *)(v156 + 48) = 0;
              *(void *)(v156 + 56) = 0;
              *(void *)(v156 + 64) = 0;
              *(_OWORD *)(v156 + 48) = v311;
              *(void *)(v156 + 64) = v312;
              long long v311 = 0uLL;
              uint64_t v312 = 0;
              long long v159 = v313;
              *(_OWORD *)(v156 + 88) = v314;
              *(_OWORD *)(v156 + 72) = v159;
              long long v160 = v315;
              *(void *)(v156 + 120) = v316;
              *(_OWORD *)(v156 + 104) = v160;
              uint64_t v316 = 0;
              long long v315 = 0uLL;
              *(unsigned char *)(v156 + 128) = v317;
              long long v161 = __p;
              *(void *)(v156 + 152) = v319;
              *(_OWORD *)(v156 + 136) = v161;
              uint64_t v319 = 0;
              long long __p = 0uLL;
              v303.__r_.__value_.__r.__words[2] = v156 + 160;
              std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer((uint64_t *)&v300 + 1, &v303);
              uint64_t v162 = v301;
              std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v303);
              *(void *)&long long v301 = v162;
              if (SHIBYTE(v319) < 0) {
                operator delete((void *)__p);
              }
            }
            else
            {
              long long v147 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(void *)(v301 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v146 = v147;
              memset(&buf, 0, sizeof(buf));
              uint64_t v148 = v310;
              *(_OWORD *)(v146 + 24) = v309;
              *(void *)(v146 + 40) = v148;
              *(void *)(v146 + 48) = 0;
              uint64_t v310 = 0;
              long long v309 = 0uLL;
              *(void *)(v146 + 56) = 0;
              *(void *)(v146 + 64) = 0;
              *(_OWORD *)(v146 + 48) = v311;
              *(void *)(v146 + 64) = v312;
              long long v311 = 0uLL;
              uint64_t v312 = 0;
              long long v149 = v313;
              *(_OWORD *)(v146 + 88) = v314;
              *(_OWORD *)(v146 + 72) = v149;
              long long v150 = v315;
              *(void *)(v146 + 120) = v316;
              *(_OWORD *)(v146 + 104) = v150;
              uint64_t v316 = 0;
              long long v315 = 0uLL;
              *(unsigned char *)(v146 + 128) = v317;
              long long v151 = __p;
              *(void *)(v146 + 152) = v319;
              *(_OWORD *)(v146 + 136) = v151;
              uint64_t v319 = 0;
              long long __p = 0uLL;
              *(void *)&long long v301 = v146 + 160;
            }
            if (SHIBYTE(v316) < 0) {
              operator delete((void *)v315);
            }
            v303.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
            if (SHIBYTE(v310) < 0) {
              operator delete((void *)v309);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            v140 += 24;
            char v142 = 1;
          }
          while (v140 != v141);
        }
        if (*(void *)(v256 - 104) == *(void *)(v256 - 112))
        {
          os_signpost_id_t v164 = spid;
          os_signpost_id_t v178 = QRLoggerForCategory(0);
          if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AppendOutput";
            _os_log_debug_impl(&dword_1C9555000, v178, OS_LOG_TYPE_DEBUG, "%s #CCQRAer No original utterance passed in.", (uint8_t *)&buf, 0xCu);
          }
          int v177 = 1;
          uint64_t v179 = this;
          goto LABEL_328;
        }
        uint64_t v163 = BYTE7(v300);
        if (SBYTE7(v300) < 0) {
          uint64_t v163 = *((void *)&v299 + 1);
        }
        os_signpost_id_t v164 = spid;
        if (!v163)
        {
          int v177 = 2;
          goto LABEL_304;
        }
        marrs::qr::processing::filterTokensForAER((uint64_t *)&buf, *((marrs::qr::orchestration::QRToken **)&v321 + 1), (marrs::qr::orchestration::QRToken *)v322, v254 != 0, v253 != 0);
        marrs::qr::processing::filterTokensForAER((uint64_t *)&v303, *((marrs::qr::orchestration::QRToken **)&v300 + 1), (marrs::qr::orchestration::QRToken *)v301, v254 != 0, v253 != 0);
        std::string::size_type v165 = buf.__r_.__value_.__r.__words[0];
        unint64_t v166 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5);
        std::string::size_type v167 = v303.__r_.__value_.__r.__words[0];
        if (v166 == 0xCCCCCCCCCCCCCCCDLL
                   * ((uint64_t)(v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]) >> 5))
        {
          if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
          {
LABEL_297:
            int v177 = 2;
LABEL_302:
            v290.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v290);
            v303.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v303);
LABEL_304:
            unint64_t v180 = *((void *)this + 2);
            unint64_t v181 = *((void *)this + 1);
            if (v181 >= v180)
            {
              uint64_t v184 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v181 - *(void *)this) >> 3);
              if ((unint64_t)(v184 + 1) > 0x492492492492492) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v185 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v180 - *(void *)this) >> 3);
              uint64_t v186 = 2 * v185;
              if (2 * v185 <= v184 + 1) {
                uint64_t v186 = v184 + 1;
              }
              if (v185 >= 0x249249249249249) {
                unint64_t v187 = 0x492492492492492;
              }
              else {
                unint64_t v187 = v186;
              }
              *((void *)&v309 + 1) = (char *)this + 16;
              if (v187)
              {
                os_log_type_t v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v187);
              }
              else
              {
                os_log_type_t v189 = 0;
                uint64_t v188 = 0;
              }
              std::string::size_type v192 = (std::string::size_type)&v189[56 * v184];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
              buf.__r_.__value_.__l.__size_ = v192;
              buf.__r_.__value_.__r.__words[2] = v192;
              *(void *)&long long v309 = &v189[56 * v188];
              *(_OWORD *)std::string::size_type v192 = *(_OWORD *)v320;
              uint64_t v193 = (std::string *)(v192 + 16);
              if (SBYTE7(v300) < 0)
              {
                std::string::__init_copy_ctor_external(v193, (const std::string::value_type *)v299, *((std::string::size_type *)&v299 + 1));
                std::string::size_type v192 = buf.__r_.__value_.__r.__words[2];
              }
              else
              {
                long long v194 = v299;
                *(void *)(v192 + 32) = v300;
                *(_OWORD *)&v193->__r_.__value_.__l.__data_ = v194;
              }
              uint64_t v195 = (double *)&v189[56 * v184];
              v195[5] = v139;
              *((_DWORD *)v195 + 12) = 1;
              buf.__r_.__value_.__r.__words[2] = v192 + 56;
              uint64_t v191 = this;
              std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer((uint64_t *)this, &buf);
              unint64_t v190 = *((void *)this + 1);
              std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *(_OWORD *)unint64_t v181 = *(_OWORD *)v320;
              os_log_type_t v182 = (std::string *)(v181 + 16);
              if (SBYTE7(v300) < 0)
              {
                std::string::__init_copy_ctor_external(v182, (const std::string::value_type *)v299, *((std::string::size_type *)&v299 + 1));
              }
              else
              {
                long long v183 = v299;
                *(void *)(v181 + 32) = v300;
                *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
              }
              *(double *)(v181 + 40) = v139;
              *(_DWORD *)(v181 + 48) = 1;
              unint64_t v190 = v181 + 56;
              uint64_t v191 = this;
              *((void *)this + 1) = v190;
            }
            *((void *)v191 + 1) = v190;
            uint64_t v196 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v196, OS_LOG_TYPE_INFO))
            {
              if ((SBYTE7(v300) & 0x80u) == 0) {
                id v197 = &v299;
              }
              else {
                id v197 = (long long *)v299;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AppendOutput";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v139;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              *(void *)&long long v309 = v197;
              _os_log_impl(&dword_1C9555000, v196, OS_LOG_TYPE_INFO, "%s #CCQRAer Prob: %f Rewritten Utterance: %s", (uint8_t *)&buf, 0x20u);
            }
            uint64_t v179 = this;
LABEL_328:
            *((_DWORD *)v179 + 14) = v177;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300 + 8;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SBYTE7(v300) < 0) {
              operator delete((void *)v299);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v323;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321 + 8;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SBYTE7(v321) < 0) {
              operator delete(*(void **)&v320[16]);
            }
            if (v245 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              if (os_signpost_enabled(log))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, v164, "PostProcessDuration", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
              }
              if (os_signpost_enabled(log))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, v164, "Total", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
              }
            }
            marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics();
            v198.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v199.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            std::to_string(&v266, (double)((v236.__d_.__rep_ - rep) / 1000) / 1000.0);
            uint64_t v200 = std::string::insert(&v266, 0, "[MARRS] Query Rewrite:\n      Binary Classifier ");
            long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
            v267.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v201;
            v200->__r_.__value_.__l.__size_ = 0;
            v200->__r_.__value_.__r.__words[2] = 0;
            v200->__r_.__value_.__r.__words[0] = 0;
            uint64_t v202 = std::string::append(&v267, " ms\n");
            long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
            v268.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v203;
            v202->__r_.__value_.__l.__size_ = 0;
            v202->__r_.__value_.__r.__words[2] = 0;
            v202->__r_.__value_.__r.__words[0] = 0;
            v204 = std::string::append(&v268, "      Pre-processing: ");
            long long v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
            v269.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v205;
            v204->__r_.__value_.__l.__size_ = 0;
            v204->__r_.__value_.__r.__words[2] = 0;
            v204->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v265, (double)((v252.__d_.__rep_ - v242.__d_.__rep_) / 1000) / 1000.0);
            if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v206 = &v265;
            }
            else {
              v206 = (std::string *)v265.__r_.__value_.__r.__words[0];
            }
            if ((v265.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v207 = HIBYTE(v265.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v207 = v265.__r_.__value_.__l.__size_;
            }
            v208 = std::string::append(&v269, (const std::string::value_type *)v206, v207);
            long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
            v270.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v209;
            v208->__r_.__value_.__l.__size_ = 0;
            v208->__r_.__value_.__r.__words[2] = 0;
            v208->__r_.__value_.__r.__words[0] = 0;
            uint64_t v210 = std::string::append(&v270, " ms\n");
            long long v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
            v271.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v211;
            v210->__r_.__value_.__l.__size_ = 0;
            v210->__r_.__value_.__r.__words[2] = 0;
            v210->__r_.__value_.__r.__words[0] = 0;
            v212 = std::string::append(&v271, "      Inference: ");
            long long v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            v272.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v264, (double)((v248.__d_.__rep_ - v250.__d_.__rep_) / 1000) / 1000.0);
            if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v214 = &v264;
            }
            else {
              v214 = (std::string *)v264.__r_.__value_.__r.__words[0];
            }
            if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v215 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v215 = v264.__r_.__value_.__l.__size_;
            }
            uint64_t v216 = std::string::append(&v272, (const std::string::value_type *)v214, v215);
            long long v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
            v306.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v217;
            v216->__r_.__value_.__l.__size_ = 0;
            v216->__r_.__value_.__r.__words[2] = 0;
            v216->__r_.__value_.__r.__words[0] = 0;
            uint64_t v218 = std::string::append(&v306, " ms\n");
            long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
            v289.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v219;
            v218->__r_.__value_.__l.__size_ = 0;
            v218->__r_.__value_.__r.__words[2] = 0;
            v218->__r_.__value_.__r.__words[0] = 0;
            v220 = std::string::append(&v289, "      Post-processing: ");
            long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
            v290.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v221;
            v220->__r_.__value_.__l.__size_ = 0;
            v220->__r_.__value_.__r.__words[2] = 0;
            v220->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v263, (double)((v198.__d_.__rep_ - v240.__d_.__rep_) / 1000) / 1000.0);
            if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v222 = &v263;
            }
            else {
              uint64_t v222 = (std::string *)v263.__r_.__value_.__r.__words[0];
            }
            if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v223 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v223 = v263.__r_.__value_.__l.__size_;
            }
            unint64_t v224 = std::string::append(&v290, (const std::string::value_type *)v222, v223);
            long long v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
            v303.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v225;
            v224->__r_.__value_.__l.__size_ = 0;
            v224->__r_.__value_.__r.__words[2] = 0;
            v224->__r_.__value_.__r.__words[0] = 0;
            v226 = std::string::append(&v303, " ms\n");
            long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
            *(void *)&long long v299 = *((void *)&v226->__r_.__value_.__l + 2);
            long long v298 = v227;
            v226->__r_.__value_.__l.__size_ = 0;
            v226->__r_.__value_.__r.__words[2] = 0;
            v226->__r_.__value_.__r.__words[0] = 0;
            v228 = std::string::append((std::string *)&v298, "      Total Duration: ");
            long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
            *(void *)&v320[16] = *((void *)&v228->__r_.__value_.__l + 2);
            *(_OWORD *)v320 = v229;
            v228->__r_.__value_.__l.__size_ = 0;
            v228->__r_.__value_.__r.__words[2] = 0;
            v228->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v262, (double)((v199.__d_.__rep_ - v242.__d_.__rep_) / 1000) / 1000.0);
            if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v230 = &v262;
            }
            else {
              unint64_t v230 = (std::string *)v262.__r_.__value_.__r.__words[0];
            }
            if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v231 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v231 = v262.__r_.__value_.__l.__size_;
            }
            v232 = std::string::append((std::string *)v320, (const std::string::value_type *)v230, v231);
            long long v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v233;
            v232->__r_.__value_.__l.__size_ = 0;
            v232->__r_.__value_.__r.__words[2] = 0;
            v232->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v262.__r_.__value_.__l.__data_);
            }
            if ((v320[23] & 0x80000000) != 0) {
              operator delete(*(void **)v320);
            }
            if (SBYTE7(v299) < 0) {
              operator delete((void *)v298);
            }
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v303.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v263.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v290.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v289.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v306.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v264.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v272.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v271.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v270.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v265.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v269.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v268.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v267.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v266.__r_.__value_.__l.__data_);
            }
            uint64_t v234 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
            {
              p_std::string buf = &buf;
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v320 = 136315394;
              *(void *)&v320[4] = "Handle";
              *(_WORD *)&v320[12] = 2080;
              *(void *)&v320[14] = p_buf;
              _os_log_debug_impl(&dword_1C9555000, v234, OS_LOG_TYPE_DEBUG, "%s #CCQRAer Perf Metrics %s", v320, 0x16u);
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            if (v291.__r_.__value_.__r.__words[0])
            {
              v291.__r_.__value_.__l.__size_ = v291.__r_.__value_.__r.__words[0];
              operator delete(v291.__r_.__value_.__l.__data_);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
            std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
            std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
            std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if ((void)v273)
            {
              *((void *)&v273 + 1) = v273;
              operator delete((void *)v273);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
            std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
            std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
            std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (v285) {
              operator delete(v285);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v288;
            std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            return;
          }
          uint64_t v168 = 0;
          if (v166 <= 1) {
            unint64_t v169 = 1;
          }
          else {
            unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL
          }
                 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5);
          while (1)
          {
            os_signpost_type_t v170 = (unsigned __int8 *)(v165 + 160 * v168);
            v171 = (unsigned __int8 **)(v167 + 160 * v168);
            uint64_t v172 = v170[23];
            if ((v172 & 0x80u) == 0) {
              os_signpost_type_t v173 = (unsigned __int8 *)v170[23];
            }
            else {
              os_signpost_type_t v173 = (unsigned __int8 *)*((void *)v170 + 1);
            }
            char v174 = (unsigned __int8 *)*((unsigned __int8 *)v171 + 23);
            int v175 = (char)v174;
            if ((char)v174 < 0) {
              char v174 = v171[1];
            }
            if (v173 != v174) {
              break;
            }
            if (v175 >= 0) {
              uint64_t v176 = (unsigned __int8 *)(v167 + 160 * v168);
            }
            else {
              uint64_t v176 = *v171;
            }
            if ((v172 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v170, v176, *((void *)v170 + 1))) {
                break;
              }
            }
            else if (v170[23])
            {
              while (*v170 == *v176)
              {
                ++v170;
                ++v176;
                if (!--v172) {
                  goto LABEL_296;
                }
              }
              break;
            }
LABEL_296:
            if (++v168 == v169) {
              goto LABEL_297;
            }
          }
        }
        int v177 = 0;
        goto LABEL_302;
      }
      id v97 = (uint64_t *)(*((void *)&v323 + 1) + 8 * (((char *)v279 - (char *)v278) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(*((uint64_t **)&v323 + 1), v97, (uint64_t *)v278);
      os_signpost_id_t v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v280, v97, v91, v279);
    }
    else
    {
      std::vector<std::vector<std::vector<float>>>::__vdeallocate(&v278);
      if (v93 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v94 = 0x5555555555555556 * ((v280 - (uint64_t)v278) >> 3);
      if (v94 <= v93) {
        unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * (v91 - v92);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v278) >> 3) >= 0x555555555555555) {
        unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v95 = v94;
      }
      std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](&v278, v95);
      os_signpost_id_t v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>((uint64_t)&v280, v92, v91, v279);
    }
    v279 = v96;
    goto LABEL_163;
  }
  long long v11 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Handle";
    _os_log_debug_impl(&dword_1C9555000, v11, OS_LOG_TYPE_DEBUG, "%s Rule based binary classifier returned", (uint8_t *)&buf, 0xCu);
  }
  *((_DWORD *)this + 14) = 3;
  marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics();
}

void sub_1C9568F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&STACK[0x3C0]);
  marrs::qr::orchestration::QRUtterance::~QRUtterance((void **)&STACK[0x310]);
  marrs::qr::orchestration::QRUtterance::~QRUtterance((void **)(v68 - 224));
  std::string::size_type v70 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v70;
    operator delete(v70);
  }
  STACK[0x310] = (unint64_t)&STACK[0x2E0];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  STACK[0x310] = (unint64_t)&STACK[0x2F8];
  std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  marrs::qr::inference_engine::EspressoQueryRewriteModelInputType::~EspressoQueryRewriteModelInputType((marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *)&a68);
  a68 = &STACK[0x208];
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = &STACK[0x220];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = &STACK[0x238];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  if (STACK[0x250]) {
    operator delete((void *)STACK[0x250]);
  }
  a68 = &STACK[0x268];
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  a68 = a19;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a68);
  _Unwind_Resume(a1);
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::doCoreAnalytics()
{
  std::string::basic_string[abi:ne180100]<0>(&v2, "com.apple.siri.marrs");
  uint64_t v0 = std::string::append(&v2, ".QueryRewrite.CCQRAer.Predict");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  std::string::size_type v4 = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__r_.__value_.__l.__data_);
  }
}

void sub_1C9569604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    unsigned int v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        int v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v15 = operator new(0x30uLL);
      void *v15 = 0;
      v15[1] = v8;
      uint64_t v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((void *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((void *)v5 + 5);
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        void *v15 = *v25;
      }
      else
      {
        void *v15 = *v6;
        *unsigned int v6 = v15;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      *uint64_t v25 = v15;
LABEL_43:
      ++*(void *)(a1 + 24);
LABEL_44:
      uint64_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = 1;
  return a1;
}

void sub_1C95698E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    std::string::size_type v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unsigned int v6 = v4;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    int v3 = (void **)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(a1);
  }
  return a1;
}

uint64_t std::tuple<std::vector<marrs::qr::orchestration::QRToken>,std::vector<unsigned long>,std::vector<std::vector<unsigned long>>,std::vector<std::vector<std::vector<float>>>>::~tuple(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 72);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 48);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unsigned int v6 = *(_DWORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
      unint64_t v8 = *(_DWORD **)v4;
      unsigned int v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    _DWORD *v15 = *a2;
    unint64_t v7 = v15 + 1;
    while (v6 != v8)
    {
      int v17 = *--v6;
      *--uint64_t v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unsigned int v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unsigned int v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unsigned int v6 = (char *)v1[1];
      do
      {
        unint64_t v8 = (void *)*((void *)v6 - 4);
        v6 -= 32;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 3) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::inference_engine::EspressoQueryRewriteModelInputType::~EspressoQueryRewriteModelInputType(marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *this)
{
  int v3 = (void **)((char *)this + 24);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void __clang_call_terminate(void *a1)
{
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unint64_t v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C9569F2C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C956A000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    int v3 = **(void ****)(a1 + 16);
    uint64_t v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      unint64_t v5 = v3;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unsigned int v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C956A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C956A1F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        unint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate((void **)a1);
    if (a4 > 0x199999999999999) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v11 = 0x199999999999999;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(__str, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(__str, a3, v9);
  for (uint64_t i = *(void *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](i))
  {
    i -= 160;
  }
  *(void *)(a1 + 8) = v14;
}

void sub_1C956A4EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C956A4F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(v9, a2, a3, (void *)a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((a1[1] - (uint64_t)v10) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(a2, v15, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(v9, v15, a3, (void *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v14;
    return;
  }
  unint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(a2, a3, v10);
  size_t v17 = (char *)a1[1];
  if (v17 != v16)
  {
    float v18 = (char *)a1[1];
    do
    {
      BOOL v20 = (void *)*((void *)v18 - 3);
      v18 -= 24;
      float v19 = v20;
      if (v20)
      {
        *((void *)v17 - 2) = v19;
        operator delete(v19);
      }
      size_t v17 = v18;
    }
    while (v18 != v16);
  }
  a1[1] = (uint64_t)v16;
}

void sub_1C956A778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C956A780(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<float>> *,std::vector<std::vector<float>> *,std::vector<std::vector<float>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      if (a3 != i)
      {
        uint64_t v7 = *i;
        uint64_t v6 = i[1];
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *i) >> 3);
        uint64_t v9 = (char *)*a3;
        if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 3) >= v8)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - (uint64_t)v9) >> 3) >= v8)
          {
            uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*i, i[1], v9);
            uint64_t v15 = (char *)a3[1];
            if (v15 != v14)
            {
              unint64_t v16 = (char *)a3[1];
              do
              {
                float v18 = (void *)*((void *)v16 - 3);
                v16 -= 24;
                size_t v17 = v18;
                if (v18)
                {
                  *((void *)v15 - 2) = v17;
                  operator delete(v17);
                }
                uint64_t v15 = v16;
              }
              while (v16 != v14);
            }
            a3[1] = (uint64_t)v14;
            goto LABEL_21;
          }
          uint64_t v13 = v7 + 8 * ((a3[1] - (uint64_t)v9) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*i, v13, v9);
          uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(a3 + 2), v13, v6, (void *)a3[1]);
        }
        else
        {
          std::vector<std::vector<float>>::__vdeallocate(a3);
          if (v8 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v10 = 0x5555555555555556 * ((a3[2] - *a3) >> 3);
          if (v10 <= v8) {
            unint64_t v10 = v8;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 3) >= 0x555555555555555) {
            unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v11 = v10;
          }
          std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a3, v11);
          uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(a3 + 2), v7, v6, (void *)a3[1]);
        }
        a3[1] = (uint64_t)v12;
      }
LABEL_21:
      a3 += 3;
    }
  }
  return a3;
}

void sub_1C956A928(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C956A930(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::vector<std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C956A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<std::vector<std::vector<float>>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        unint64_t v5 = v3;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C956AD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C956AD94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      if (this != v5) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[2], (std::string *)v5[2].__r_.__value_.__l.__data_, (long long *)v5[2].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 3));
      }
      long long v6 = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
      std::string::operator=((std::string *)((char *)this + 104), (std::string *)((char *)v5 + 104));
      this[5].__r_.__value_.__s.__data_[8] = v5[5].__r_.__value_.__s.__data_[8];
      std::string::operator=((std::string *)((char *)this + 136), (std::string *)((char *)v5 + 136));
      this = (std::string *)((char *)this + 160);
      uint64_t v5 = (std::string *)((char *)v5 + 160);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      marrs::qr::orchestration::QRToken::QRToken((std::string *)(a4 + v7), (const marrs::qr::orchestration::QRToken *)(a2 + v7));
      v7 += 160;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 160;
        std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(160 * a1);
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, const marrs::qr::orchestration::QRToken *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  long long v6 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v7;
  }
  this[5].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 128);
  size_t v8 = (std::string *)((char *)this + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((void *)a2 + 19);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1C956B1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*v4);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C956B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C956B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  long long v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    uint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        long long v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      long long v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1C956B554(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v5 = operator new(8 * prime);
  long long v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  size_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        size_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    int8x8_t v4 = (uint64_t *)a1;
  }
  else {
    int8x8_t v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      unint64_t v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      size_t v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      unint64_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

xpc_object_t ___ZN5marrs2qr13orchestration24QueryRewriteOrchestrator15doCoreAnalyticsENS1_15InferenceStatusElRKNSt3__16vectorIfNS4_9allocatorIfEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 >= 4) {
    int v5 = "UNKNOWN";
  }
  else {
    int v5 = (&off_1E6599A00)[v4];
  }
  MEMORY[0x1CB786A80](__p, v5);
  if (v3)
  {
    if (v11 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v3, "rewriteStatus", (const char *)v6);
    xpc_dictionary_set_uint64(v3, "numberOfRewrites", *(void *)(a1 + 40));
    xpc_dictionary_set_double(v3, "topPredictionProbability", *(float *)(a1 + 52));
    int v7 = (const char *)(v2 + 88);
    if (*(char *)(v2 + 111) < 0) {
      int v7 = *(const char **)v7;
    }
    xpc_dictionary_set_string(v3, "locale", v7);
    int v8 = (const char *)(v2 + 112);
    if (*(char *)(v2 + 135) < 0) {
      int v8 = *(const char **)v8;
    }
    xpc_dictionary_set_string(v3, "assetVersion", v8);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1C956BE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void marrs::qr::orchestration::AerOrchestrator::predict(const QRRequest *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  (*(void (**)(const QRRequest *))(*(void *)&this->var0 + 24))(this);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, this, (uint64_t)a2, 1, 0);
}

void marrs::qr::orchestration::AerOrchestrator::~AerOrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1CB786E50);
}

uint64_t non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::validate(marrs::qr::orchestration::CbROrchestrator *this, const QRRequest *a2)
{
  return 1;
}

void non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::~CbROrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
  JUMPOUT(0x1CB786E50);
}

{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this - 41);
}

void non-virtual thunk to'marrs::qr::orchestration::CbROrchestrator::predict(marrs::qr::orchestration::CbROrchestrator *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  int v5 = (const QRRequest *)((char *)this - 328);
  (*(void (**)(char *))(*((void *)this - 41) + 24))((char *)this - 328);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, v5, (uint64_t)a2, 0, 1);
}

uint64_t marrs::qr::orchestration::CbROrchestrator::validate(marrs::qr::orchestration::CbROrchestrator *this, const QRRequest *a2)
{
  return 1;
}

void marrs::qr::orchestration::CbROrchestrator::predict(const QRRequest *this@<X0>, const QRRequest *a2@<X1>, marrs::qr::orchestration::QueryRewriteOrchestrator *a3@<X8>)
{
  (*(void (**)(const QRRequest *))(*(void *)&this->var0 + 24))(this);
  marrs::qr::orchestration::QueryRewriteOrchestrator::Handle(a3, this, (uint64_t)a2, 0, 1);
}

void marrs::qr::orchestration::CbROrchestrator::~CbROrchestrator(void **this)
{
  marrs::qr::orchestration::QueryRewriteOrchestrator::~QueryRewriteOrchestrator(this);
  JUMPOUT(0x1CB786E50);
}

void std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<marrs::qr::orchestration::QRHypothesis>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::orchestration::QRHypothesis>,marrs::qr::orchestration::QRHypothesis*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 17) < 0) {
        operator delete(*(void **)(v3 - 40));
      }
      v3 -= 56;
    }
  }
  return a1;
}

void marrs::qr::orchestration::QueryRewriteOrchestrator::QueryRewriteOrchestrator(uint64_t a1, char *a2, const std::string *a3)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F23C6CA0;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)(a1 + 16), 0, 0);
  *(_OWORD *)(a1 + 88) = 0u;
  int v7 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v60 = (std::string *)(a1 + 88);
  uint64_t v59 = a1 + 136;
  uint64_t v57 = (void **)(a1 + 112);
  uint64_t v58 = v6;
  marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)(a1 + 136), 0, 0);
  *(void *)(a1 + 208) = 0;
  int v8 = (_OWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 231) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 235) = 1;
  *(void *)(a1 + 236) = 0x2200000002;
  *(_OWORD *)(a1 + 248) = xmmword_1C95E0E60;
  *(_OWORD *)(a1 + 264) = xmmword_1C95E0E70;
  *(_DWORD *)(a1 + 280) = 32;
  *(_DWORD *)(a1 + 288) = 32;
  *(void *)(a1 + 296) = 26;
  *(void *)(a1 + 304) = 0;
  int v9 = (void *)(a1 + 304);
  uint64_t v55 = a1 + 208;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0x447A000000000000;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v76, a2);
  std::__fs::filesystem::path::path[abi:ne180100]<char [10],void>((std::string *)&__p, "vocab.txt");
  std::__fs::filesystem::operator/[abi:ne180100](&v75, (uint64_t)&v76, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  memset(&v80, 0, sizeof(v80));
  std::string::append[abi:ne180100]<char const*,0>(&v80, "embedder.mlmodelc", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__p, (uint64_t)&v76, (std::__fs::filesystem::path *)&v80);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v74, (uint64_t)&__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v80, "encoder.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__p, (uint64_t)&v76, (std::__fs::filesystem::path *)&v80);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v73, (uint64_t)&__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v80, "decoder.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__p, (uint64_t)&v76, (std::__fs::filesystem::path *)&v80);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v72, (uint64_t)&__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)&__p, "char_voc.txt");
  std::__fs::filesystem::operator/[abi:ne180100](&v71, (uint64_t)&v76, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v80, "ane.mlmodelc");
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__p, (uint64_t)&v76, (std::__fs::filesystem::path *)&v80);
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&__str, "model.espresso.net");
  std::__fs::filesystem::operator/[abi:ne180100](&v70, (uint64_t)&__p, (std::__fs::filesystem::path *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)&__p, "version.yaml");
  std::__fs::filesystem::operator/[abi:ne180100](&v69, (uint64_t)&v76, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)&__p, "config.json");
  std::__fs::filesystem::operator/[abi:ne180100](&v68, (uint64_t)&v76, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1) {
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_5);
  }
  int v10 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  os_signpost_id_t spid = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    LOWORD(__p.__sb_.__extbuf_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v10, OS_SIGNPOST_INTERVAL_BEGIN, spid, "AssetLoad", "CCQRAer Asset loading", (uint8_t *)&__p, 2u);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v69;
  }
  __p.__sb_.__extbuf_ = (char *)&unk_1F23C78F8;
  v83.__vftable = (std::ios_base_vtbl *)&unk_1F23C7920;
  __p.__sb_.__extbufnext_ = 0;
  std::ios_base::init(&v83, __p.__sb_.__extbuf_min_);
  int v85 = -1;
  uint64_t v84 = 0;
  MEMORY[0x1CB786B40](__p.__sb_.__extbuf_min_);
  std::fstream::open(&__p, &__s, v11);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = &v66;
  if (*(&__p.__sb_.__st_._mbstateL + 9))
  {
    uint64_t v54 = a3;
    memset(&__str, 0, sizeof(__str));
    memset(&v78, 0, sizeof(v78));
    memset(&v77, 0, sizeof(v77));
    BOOL v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
LABEL_43:
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)));
      BOOL v13 = std::locale::use_facet((const std::locale *)&v80, v12);
      unsigned __int8 v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale((std::locale *)&v80);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)&__str, v14);
      if ((__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] & 5) != 0) {
        break;
      }
      MEMORY[0x1CB786D10](&v81);
      LODWORD(v80.__r_.__value_.__l.__data_) = 0x4000;
      std::locale::locale((std::locale *)&v80.__r_.__value_.__r.__words[1], &v81);
      boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&__str, (std::locale *)&v80);
      std::locale::~locale((std::locale *)&v80.__r_.__value_.__r.__words[1]);
      std::locale::~locale(&v81);
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v17 = (std::string *)((char *)p_str + size);
        uint64_t v18 = p_str;
        while (v18->__r_.__value_.__s.__data_[0] != 58)
        {
          uint64_t v18 = (std::string *)((char *)v18 + 1);
          if (!--size) {
            goto LABEL_43;
          }
        }
        if (v18 != v17)
        {
          int64_t v19 = (char *)v18 - (char *)p_str;
          if ((char *)v18 - (char *)p_str != -1)
          {
            std::string::basic_string(&v80, &__str, 0, (char *)v18 - (char *)p_str, (std::allocator<char> *)&v81);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            std::string v78 = v80;
            MEMORY[0x1CB786D10](&v81);
            LODWORD(v80.__r_.__value_.__l.__data_) = 0x4000;
            std::locale::locale((std::locale *)&v80.__r_.__value_.__r.__words[1], &v81);
            boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v78, (std::locale *)&v80);
            std::locale::~locale((std::locale *)&v80.__r_.__value_.__r.__words[1]);
            std::locale::~locale(&v81);
            std::string::basic_string(&v80, &__str, v19 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v81);
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v77.__r_.__value_.__l.__data_);
            }
            std::string v77 = v80;
            MEMORY[0x1CB786D10](&v81);
            LODWORD(v80.__r_.__value_.__l.__data_) = 0x4000;
            std::locale::locale((std::locale *)&v80.__r_.__value_.__r.__words[1], &v81);
            boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v77, (std::locale *)&v80);
            std::locale::~locale((std::locale *)&v80.__r_.__value_.__r.__words[1]);
            std::locale::~locale(&v81);
            uint64_t v20 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v65, &v81, &v78);
            uint64_t v21 = (char *)*v20;
            if (!*v20)
            {
              uint64_t v22 = v20;
              uint64_t v21 = (char *)operator new(0x50uLL);
              v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              v80.__r_.__value_.__l.__size_ = (std::string::size_type)&v66;
              v80.__r_.__value_.__s.__data_[16] = 0;
              uint64_t v23 = (std::string *)(v21 + 32);
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v23, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
                *((void *)v21 + 6) = *((void *)&v78.__r_.__value_.__l + 2);
              }
              *((void *)v21 + 8) = 0;
              *((void *)v21 + 9) = 0;
              *((void *)v21 + 7) = 0;
              v80.__r_.__value_.__s.__data_[16] = 1;
              locale = v81.__locale_;
              *(void *)uint64_t v21 = 0;
              *((void *)v21 + 1) = 0;
              *((void *)v21 + 2) = locale;
              char *v22 = v21;
              uint64_t v25 = (uint64_t *)v21;
              if (*v65)
              {
                uint64_t v65 = (uint64_t **)*v65;
                uint64_t v25 = (uint64_t *)*v22;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v66, v25);
              ++v67;
              v80.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v80);
            }
            std::string::operator=((std::string *)(v21 + 56), &v77);
          }
        }
      }
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
    }
    uint64_t v26 = a1;
    int v7 = v57;
    uint64_t v6 = v58;
    a3 = v54;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v26 = a1;
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
    }
  }
  MEMORY[0x1CB786B50](__p.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](&v83);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::string::operator=(v60, a3);
  uint64_t v27 = v66;
  if (!v66) {
    goto LABEL_94;
  }
  uint64_t v28 = &v66;
  do
  {
    uint64_t v29 = v28;
    uint64_t v30 = (const std::string *)(v27 + 4);
    int v31 = std::string::compare((const std::string *)(v27 + 4), "version");
    if (v31 >= 0) {
      uint64_t v32 = v27;
    }
    else {
      uint64_t v32 = v27 + 1;
    }
    if (v31 >= 0) {
      uint64_t v28 = (uint64_t **)v27;
    }
    else {
      uint64_t v28 = v29;
    }
    uint64_t v27 = (uint64_t *)*v32;
  }
  while (*v32);
  if (v28 != &v66
    && (v31 >= 0 ? (uint64_t v33 = v30) : (uint64_t v33 = (const std::string *)(v29 + 4)), std::string::compare(v33, "version") < 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, "version");
    uint64_t v39 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v65, &__str, &__s);
    unint64_t v40 = (char *)*v39;
    if (!*v39)
    {
      unint64_t v41 = v39;
      unint64_t v40 = (char *)operator new(0x50uLL);
      __p.__sb_.__extbufnext_ = (const char *)&v66;
      *((_OWORD *)v40 + 2) = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      std::string::size_type v42 = __s.__r_.__value_.__r.__words[2];
      memset(&__s, 0, sizeof(__s));
      *((void *)v40 + 6) = v42;
      *((void *)v40 + 7) = 0;
      *((void *)v40 + 8) = 0;
      *((void *)v40 + 9) = 0;
      LOBYTE(__p.__sb_.__extbufend_) = 1;
      std::string::size_type v43 = __str.__r_.__value_.__r.__words[0];
      *(void *)unint64_t v40 = 0;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 2) = v43;
      *unint64_t v41 = v40;
      uint64_t v44 = (uint64_t *)v40;
      if (*v65)
      {
        uint64_t v65 = (uint64_t **)*v65;
        uint64_t v44 = (uint64_t *)*v41;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v66, v44);
      ++v67;
      __p.__sb_.__extbuf_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
    }
    if (v40[79] < 0)
    {
      std::string::__init_copy_ctor_external(&v80, *((const std::string::value_type **)v40 + 7), *((void *)v40 + 8));
      char v34 = 0;
    }
    else
    {
      char v34 = 0;
      std::string v80 = *(std::string *)(v40 + 56);
    }
  }
  else
  {
LABEL_94:
    std::string::basic_string[abi:ne180100]<0>(&v80, "Undefined");
    char v34 = 1;
  }
  if (*(char *)(v26 + 135) < 0) {
    operator delete(*v7);
  }
  *(std::string *)int v7 = v80;
  *((unsigned char *)&v80.__r_.__value_.__s + 23) = 0;
  v80.__r_.__value_.__s.__data_[0] = 0;
  if ((v34 & 1) == 0 && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v75;
  }
  *(_OWORD *)&__p.__sb_.__extbuf_ = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
  __p.__sb_.__extbufend_ = (const char *)v80.__r_.__value_.__r.__words[2];
  memset(&v80, 0, sizeof(v80));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  unsigned __int8 v35 = __str.__r_.__value_.__s.__data_[0];
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if (v35 != 255 && v35)
  {
    marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)&__p, 0, 1u);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(v6, (uint64_t *)&__p);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v26 + 56));
    *(_OWORD *)(v26 + 56) = *(_OWORD *)&__p.__sb_.__intbuf_;
    *(void *)(v26 + 72) = __p.__sb_.__file_;
    memset(&__p.__sb_.__intbuf_, 0, 24);
    *(unsigned char *)(v26 + 80) = __p.__sb_.__cv_;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__sb_.__intbuf_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p.__sb_.__extbufend_);
    extstd::string buf = __p.__sb_.__extbuf_;
    __p.__sb_.__extbuf_ = 0;
    if (extbuf) {
      operator delete(extbuf);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v63, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    }
    else {
      std::string v63 = v75;
    }
    marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(v6);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v80, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    }
    else {
      std::string v80 = v71;
    }
    *(_OWORD *)&__p.__sb_.__extbuf_ = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
    __p.__sb_.__extbufend_ = (const char *)v80.__r_.__value_.__r.__words[2];
    memset(&v80, 0, sizeof(v80));
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
    unsigned __int8 v37 = __str.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
      operator delete(__p.__sb_.__extbuf_);
    }
    if (v37 && v37 != 255)
    {
      marrs::qr::processing::Vocab::Vocab((marrs::qr::processing::Vocab *)&__p, 1, 1u);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(v59, (uint64_t *)&__p);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v26 + 176));
      *(_OWORD *)(v26 + 176) = *(_OWORD *)&__p.__sb_.__intbuf_;
      *(void *)(v26 + 192) = __p.__sb_.__file_;
      memset(&__p.__sb_.__intbuf_, 0, 24);
      *(unsigned char *)(v26 + 200) = __p.__sb_.__cv_;
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__sb_.__intbuf_;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p.__sb_.__extbufend_);
      unint64_t v38 = __p.__sb_.__extbuf_;
      __p.__sb_.__extbuf_ = 0;
      if (v38) {
        operator delete(v38);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v62, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
      }
      else {
        std::string v62 = v71;
      }
      marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(v59);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v80, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    }
    else {
      std::string v80 = v68;
    }
    *(_OWORD *)&__p.__sb_.__extbuf_ = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
    __p.__sb_.__extbufend_ = (const char *)v80.__r_.__value_.__r.__words[2];
    memset(&v80, 0, sizeof(v80));
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
    unsigned __int8 v45 = __str.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
      operator delete(__p.__sb_.__extbuf_);
    }
    if (v45 != 255 && v45)
    {
      uint64_t v48 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p.__sb_.__extbuf_) = 136315138;
        *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "QueryRewriteOrchestrator";
        _os_log_debug_impl(&dword_1C9555000, v48, OS_LOG_TYPE_DEBUG, "%s Using default config for CCQR initialization", (uint8_t *)&__p, 0xCu);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v80, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      }
      else {
        std::string v80 = v68;
      }
      TypedJson<CcqrConfig>::fromJson((uint64_t)&__p, (uint64_t *)&v80);
      long long v49 = *(_OWORD *)&__p.__sb_.__ibs_;
      *(_OWORD *)(v55 + 56) = *(_OWORD *)&__p.__sb_.__ebs_;
      *(_OWORD *)(v55 + 72) = v49;
      *(_OWORD *)(v55 + 88) = *(_OWORD *)&__p.__sb_.__cv_;
      *(_OWORD *)(v55 + 100) = *(_OWORD *)((char *)&__p.__sb_.__st_._mbstateL + 4);
      long long v50 = *(_OWORD *)&__p.__sb_.__extbufend_;
      *(_OWORD *)(v55 + 24) = *(_OWORD *)&__p.__sb_.__extbuf_;
      *(_OWORD *)(v55 + 40) = v50;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(_DWORD *)(v26 + 232) = 0x1000000;
      *(void *)(v26 + 236) = 0x2200000002;
      *(_DWORD *)(v26 + 244) = 0;
      *(_OWORD *)(v26 + 248) = xmmword_1C95E0E60;
      _OWORD *v8 = xmmword_1C95E0E70;
      v8[1] = xmmword_1C95E0E80;
      *(void *)(v26 + 296) = 26;
      *int v9 = 0;
      v9[1] = 0;
      *(_DWORD *)(v26 + 320) = 1148846080;
      uint64_t v46 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v47 = &v68;
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v47 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__sb_.__extbuf_) = 136315394;
        *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "QueryRewriteOrchestrator";
        WORD2(__p.__sb_.__extbufnext_) = 2080;
        *(const char **)((char *)&__p.__sb_.__extbufnext_ + 6) = (const char *)v47;
        _os_log_debug_impl(&dword_1C9555000, v46, OS_LOG_TYPE_DEBUG, "%s Unable to load json config file from %s", (uint8_t *)&__p, 0x16u);
      }
    }
    operator new();
  }
  exception = __cxa_allocate_exception(0x30uLL);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v75;
  }
  unint64_t v52 = std::string::insert(&v80, 0, "Token-level vocabulary does not exist: ");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  __p.__sb_.__extbufend_ = (const char *)v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__sb_.__extbuf_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "QueryRewrite");
  ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&__p, (uint64_t)&__str, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 49);
}

void sub_1C956D680(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_signpost_id_t spid, uint64_t a17, marrs::qr::processing::Vocab *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,marrs::qr::processing::Vocab *a23,NSObject *log,uint64_t a25,uint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a2)
  {
    if (a46 < 0) {
      operator delete(__p);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((void *)a49);
    __cxa_begin_catch(a1);
    if (a27 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
    {
      LOWORD(STACK[0x230]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, spid, "AssetLoad", " enableTelemetry=YES ", (uint8_t *)&STACK[0x230], 2u);
    }
    std::current_exception();
    v50.__ptr_ = &a32;
    std::rethrow_exception(v50);
    JUMPOUT(0x1C956DC4CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C956DC50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    JUMPOUT(0x1C956DC6CLL);
  }
  JUMPOUT(0x1C956DC70);
}

void sub_1C956DD60(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C956DD68);
  }
  __clang_call_terminate(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1C956DDC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::operator/[abi:ne180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  if (std::__fs::filesystem::path::__root_directory(a3).__size_) {
    return std::string::operator=(this, &a3->__pn_);
  }
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_) {
    std::string::push_back(this, 47);
  }
  int v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    int v7 = a3;
  }
  else {
    int v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(this, (const std::string::value_type *)v7, size);
}

void sub_1C956DE84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C956DEE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *ConfigLoadingError::ConfigLoadingError(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::operator+<char>();
  int v10 = std::string::append(&v18, " to load model bundle: ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    BOOL v13 = (const std::string::value_type *)a2;
  }
  else {
    BOOL v13 = *(const std::string::value_type **)a2;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a2 + 8);
  }
  uint64_t v15 = std::string::append(&v19, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::fstream __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (long long *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F23C76C8;
  return a1;
}

void sub_1C956E020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  int v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  int v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *int v9 = 0;
    v9[1] = 0;
  }
}

uint64_t marrs::qr::orchestration::QueryRewriteOrchestrator::InitializeVocabFromPath(uint64_t a1)
{
  v17[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  v17[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v15[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = v4;
  v15[1] = 0;
  uint64_t v5 = (std::ios_base *)((char *)v15 + *(void *)(v15[0] - 24));
  std::ios_base::init(v5, v16);
  uint64_t v6 = MEMORY[0x1E4FBA460] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v15[0] = v6;
  v17[0] = v2;
  MEMORY[0x1CB786B40](v16);
  std::ifstream::open();
  if (!v16[15])
  {
    exception = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(&v12, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)__p, (uint64_t)&v12, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/QROrchestrator.cpp", 79);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  int v7 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[0] - 24)));
    uint64_t v8 = std::locale::use_facet(&v12, v7);
    unsigned __int8 v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v12);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, (uint64_t)__p, v9);
    if ((*((unsigned char *)&v16[2] + *(void *)(v15[0] - 24)) & 5) != 0) {
      break;
    }
    marrs::qr::processing::Vocab::addWord(a1, (uint64_t)__p);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v15 + *(void *)(v15[0] - 24)), *(_DWORD *)((char *)&v16[2] + *(void *)(v15[0] - 24)) | 4);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  v15[0] = *v3;
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = v3[3];
  MEMORY[0x1CB786B50](v16);
  std::istream::~istream();
  return MEMORY[0x1CB786D60](v17);
}

void sub_1C956E504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void marrs::qr::processing::Vocab::~Vocab(marrs::qr::processing::Vocab *this)
{
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1CB786B60](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C956E81C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C956E7DCLL);
  }
  __cxa_rethrow();
}

void sub_1C956E898(_Unwind_Exception *a1)
{
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1CB786B50](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1CB786D60](a1 + 53);
  return a1;
}

void ConfigLoadingError::~ConfigLoadingError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1CB786E50);
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *int v7 = result;
    int v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v7 = v10;
    int v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)int v7 = 0;
  return result;
}

void *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *unint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *InferenceError::InferenceError(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  std::operator+<char>();
  char v10 = std::string::append(&v18, " occurred during inference: ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    unint64_t v13 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v13 = *(const std::string::value_type **)a2;
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v14 = *(void *)(a2 + 8);
  }
  uint64_t v15 = std::string::append(&v19, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::fstream __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BaseException::BaseException((uint64_t)a1, (long long *)__p, a3, a4, a5);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F23C7EB8;
  return a1;
}

void sub_1C956ED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::orchestration::QRToken::~QRToken(void **this)
{
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void InferenceError::~InferenceError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1CB786E50);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<std::string&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    uint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C956F02C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

marrs::mrr::mr::MRREntity *marrs::mrr::mr::MRREntity::MRREntity(marrs::mrr::mr::MRREntity *this, const marrs::mrr::mr::MRREntity *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  long long v7 = *((_OWORD *)a2 + 5);
  long long v8 = *(_OWORD *)((char *)a2 + 92);
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 92) = v8;
  *((_OWORD *)this + 5) = v7;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((std::string *)((char *)this + 112), *((long long **)a2 + 14), *((long long **)a2 + 15), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 168);
    *((void *)this + 23) = *((void *)a2 + 23);
    *(_OWORD *)((char *)this + 168) = v10;
  }
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 8, *((long long **)a2 + 24), *((long long **)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 3));
  return this;
}

void sub_1C956F1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3[159] < 0) {
    operator delete(*v6);
  }
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v3[79] < 0) {
    operator delete(*v5);
  }
  if (v3[55] < 0) {
    operator delete(*v4);
  }
  if (v3[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::MRREntity::~MRREntity(void **this)
{
  unint64_t v2 = this + 24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  unint64_t v2 = this + 14;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

std::string *std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C956F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  std::vector<std::string>::pointer v12 = this;
  unint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        long long v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(long long *)((char *)v6 + 24);
      long long v6 = (long long *)((char *)v6 + 40);
      uint64_t v4 = (std::string *)((char *)v8 + 40);
      unint64_t v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1C956F54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 17) < 0) {
        operator delete(*(void **)(v3 - 40));
      }
      v3 -= 40;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  std::__split_buffer<std::string>::pointer v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    long long v5 = __v->__begin_;
  }
  else
  {
    do
    {
      long long v5 = v4 - 1;
      long long v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  long long v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  long long v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6599838, MEMORY[0x1E4FBA1D0]);
}

void sub_1C956F750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void marrs::mrr::mr::pickTopSalientEntity(char **a1, uint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5 && a3 != a4)
  {
    long long v8 = a3;
    unint64_t v11 = 0x84BDA12F684BDA13 * ((v5 - v4) >> 3);
    double v12 = -1.0;
    unint64_t v13 = a3;
    do
    {
      if (v11 <= *v13) {
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v14 = v4 + 216 * *v13;
      if (*(double *)(v14 + 96) > v12) {
        double v12 = *(double *)(v14 + 96);
      }
      ++v13;
    }
    while (v13 != a4);
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      unint64_t v18 = *v8;
      if (0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) <= *v8) {
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      }
      if (vabdd_f64(*(double *)(*a2 + 216 * v18 + 96), v12) < 0.0001)
      {
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v20 = (v17 - v15) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v16 - (void)v15) >> 2 > v21) {
            unint64_t v21 = (uint64_t)(v16 - (void)v15) >> 2;
          }
          if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = (char *)(v22 + 8 * v20);
          *(void *)uint64_t v24 = v18;
          std::string v19 = v24 + 8;
          while (v17 != v15)
          {
            uint64_t v25 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v24 - 1) = v25;
            v24 -= 8;
          }
          unint64_t v16 = v22 + 8 * v23;
          *a1 = v24;
          a1[1] = v19;
          a1[2] = (char *)v16;
          if (v15) {
            operator delete(v15);
          }
          uint64_t v15 = v24;
        }
        else
        {
          *(void *)uint64_t v17 = v18;
          std::string v19 = v17 + 8;
        }
        a1[1] = v19;
        uint64_t v17 = v19;
      }
      ++v8;
    }
    while (v8 != a4);
  }
}

void sub_1C956F980(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]()
{
}

void *marrs::mrr::mr::enumerateAllIndices(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = std::vector<unsigned long>::vector(a1, 0x84BDA12F684BDA13 * ((a3 - a2) >> 3));
  uint64_t v4 = (void *)*result;
  uint64_t v5 = (void *)result[1];
  if ((void *)*result != v5)
  {
    uint64_t v6 = 0;
    do
      *v4++ = v6++;
    while (v4 != v5);
  }
  return result;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1C956FA6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> **std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>(std::vector<std::string> **result, void *a2, void *a3, void *a4, void *a5, std::vector<std::string> *a6)
{
  long long v8 = result;
  unint64_t v18 = a6;
  if (a2 != a3)
  {
    uint64_t v9 = a4;
    if (a4 != a5)
    {
      uint64_t v10 = a2;
      do
      {
        unint64_t result = (std::vector<std::string> **)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10 + 4, v9 + 4);
        if (result)
        {
          unint64_t v11 = (void *)v10[1];
          if (v11)
          {
            do
            {
              uint64_t v10 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              double v12 = v10;
              uint64_t v10 = (void *)v10[2];
            }
            while ((void *)*v10 != v12);
          }
        }
        else
        {
          unint64_t result = (std::vector<std::string> **)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v9 + 4, v10 + 4);
          if (result)
          {
            unint64_t v13 = v10;
          }
          else
          {
            unint64_t result = std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v18, (long long *)v10 + 2);
            uint64_t v14 = (void *)v10[1];
            if (v14)
            {
              do
              {
                unint64_t v13 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                unint64_t v13 = (void *)v10[2];
                BOOL v15 = *v13 == (void)v10;
                uint64_t v10 = v13;
              }
              while (!v15);
            }
          }
          unint64_t v16 = (void *)v9[1];
          if (v16)
          {
            do
            {
              uint64_t v9 = v16;
              unint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = v9;
              uint64_t v9 = (void *)v9[2];
            }
            while ((void *)*v9 != v17);
          }
          uint64_t v10 = v13;
        }
      }
      while (v10 != a3 && v9 != a5);
      a6 = v18;
    }
  }
  void *v8 = a3;
  v8[1] = a5;
  v8[2] = a6;
  return result;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  uint64_t v3 = *a1;
  std::__split_buffer<std::string>::pointer end = (*a1)->__end_;
  value = (*a1)->__end_cap_.__value_;
  uint64_t v6 = *a1;
  if (end >= value)
  {
    std::vector<std::string>::pointer v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    std::vector<std::string>::pointer v7 = end + 1;
  }
  v3->__end_ = v7;
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1C956FC7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    uint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C956FD94(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void marrs::inference_engine::InferenceTensor::~InferenceTensor(marrs::inference_engine::InferenceTensor *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void marrs::mrr::md::inference_engine::MentionDetectorModuleInputType::~MentionDetectorModuleInputType(marrs::mrr::md::inference_engine::MentionDetectorModuleInputType *this)
{
  unint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void sub_1C957003C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C95702A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C95703DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957049C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95708BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1C9570A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C9570B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C9570C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C9570D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C9570E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C9570E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4 = std::filebuf::open();
  uint64_t v5 = (std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3));
  if (v4) {
    std::ios_base::iostate v6 = 0;
  }
  else {
    std::ios_base::iostate v6 = v5->__rdstate_ | 4;
  }
  std::ios_base::clear(v5, v6);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  unint64_t v3 = a2 + 1;
  int locale = (int)a2->__locale_;
  std::locale::locale(&v28, a2 + 1);
  int v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v4 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  unint64_t v7 = (std::string *)((char *)v5 + size);
  int v29 = locale;
  std::locale::locale(&v30, &v28);
  int v31 = v29;
  std::locale::locale(&v32, &v30);
  uint64_t v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (size)
  {
    std::string::size_type v9 = size;
    uint64_t v10 = v5->__r_.__value_.__s.__data_[size - 1];
    long long v11 = std::locale::use_facet(&v32, v8);
    if ((v10 & 0x80) != 0)
    {
      uint64_t v5 = v7;
      break;
    }
    unint64_t v7 = (std::string *)((char *)v7 - 1);
    int v12 = *((_DWORD *)&v11[1].~facet + v10);
    std::string::size_type size = v9 - 1;
    if ((v12 & v31) == 0)
    {
      uint64_t v5 = (std::string *)((char *)v5 + v9);
      break;
    }
  }
  std::locale::~locale(&v32);
  std::string::size_type v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80u) != 0) {
    std::string::size_type v13 = a1->__r_.__value_.__l.__size_;
  }
  std::string::erase(a1, (char *)v5 - (char *)v14, (char *)v14 + v13 - (char *)v5);
  std::locale::~locale(&v30);
  std::locale::~locale(&v28);
  int v25 = (int)a2->__locale_;
  std::locale::locale(&v26, v3);
  int v15 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v15 >= 0) {
    unint64_t v16 = a1;
  }
  else {
    unint64_t v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v15 >= 0) {
    std::string::size_type v17 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = a1->__r_.__value_.__l.__size_;
  }
  int v31 = v25;
  std::locale::locale(&v32, &v26);
  if (v17)
  {
    unint64_t v18 = (unsigned __int8 *)v16 + v17;
    std::string v19 = (std::locale::id *)MEMORY[0x1E4FBA258];
    uint64_t v20 = v16;
    while (1)
    {
      uint64_t v21 = v20->__r_.__value_.__s.__data_[0];
      unint64_t v22 = std::locale::use_facet(&v32, v19);
      if ((v21 & 0x80) != 0 || (*((_DWORD *)&v22[1].~facet + v21) & v31) == 0) {
        break;
      }
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      if (!--v17)
      {
        uint64_t v20 = (std::string *)v18;
        break;
      }
    }
  }
  else
  {
    uint64_t v20 = v16;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v23 = a1->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a1, (std::string::size_type)v16 - v23, (char *)v20 - (char *)v16);
  std::locale::~locale(&v32);
  std::locale::~locale(&v26);
}

void sub_1C9571148(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  unint64_t v2 = a1 + 54;
  MEMORY[0x1CB786B50](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](v2);
  return a1;
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x1CB786B50](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](v1 + 54);
  JUMPOUT(0x1CB786E50);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x1CB786B50](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1CB786D60);
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  uint64_t v1 = a1 + 52;
  MEMORY[0x1CB786B50](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](v1);
  JUMPOUT(0x1CB786E50);
}

{
  uint64_t vars8;

  MEMORY[0x1CB786B50](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1CB786D60);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  uint64_t v1 = a1 + 54;
  MEMORY[0x1CB786B50](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](v1);
  JUMPOUT(0x1CB786E50);
}

void sub_1C957192C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1C9571B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RepetitionPredictorBase::readConfig(uint64_t a1, const void **a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  v43.__vftable = (std::ios_base_vtbl *)&unk_1F23C7920;
  v42.__sb_.__extbufnext_ = 0;
  std::ios_base::init(&v43, v42.__sb_.__extbuf_min_);
  int v45 = -1;
  uint64_t v44 = 0;
  MEMORY[0x1CB786B40](v42.__sb_.__extbuf_min_);
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  int v4 = &v28;
  std::string::basic_string[abi:ne180100]((uint64_t)&v28, v3 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v4 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *a2;
    }
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 47;
  std::ios_base::iostate v6 = std::string::append(&v28, "uic.config");
  long long v8 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v8;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::fstream::open(&v42, &__s, v7);
  if (!*(&v42.__sb_.__st_._mbstateL + 9))
  {
    std::fstream::close(&v42);
    exception = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v28, "#Model failed to load config");
    std::string::basic_string[abi:ne180100]<0>(v39, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&v28, (uint64_t)v39, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 20);
  }
  memset(&v36, 0, sizeof(v36));
  int v26 = (void **)(a1 + 160);
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  memset(&__str, 0, sizeof(__str));
  std::string::size_type v27 = *MEMORY[0x1E4FBA410];
  std::string::size_type v9 = *(void *)(MEMORY[0x1E4FBA410] + 24);
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v42 + *((void *)v42.__sb_.__extbuf_ - 3)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x1E4FBA258]);
    unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v28);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v42, (uint64_t)&v36, v11);
    if ((v42.__sb_.__extbuf_min_[*((void *)v42.__sb_.__extbuf_ - 3) + 8] & 5) != 0) {
      break;
    }
    MEMORY[0x1CB786D10](v39);
    LODWORD(v28.__r_.__value_.__l.__data_) = 0x4000;
    std::locale::locale((std::locale *)&v28.__r_.__value_.__r.__words[1], (const std::locale *)v39);
    boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v36, (std::locale *)&v28);
    std::locale::~locale((std::locale *)&v28.__r_.__value_.__r.__words[1]);
    std::locale::~locale((std::locale *)v39);
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v28, &v36);
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v28, (uint64_t)&v34);
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v28, (uint64_t)&__str);
      if ((v29[*(void *)(v28.__r_.__value_.__r.__words[0] - 24)] & 5) == 0)
      {
        std::string::size_type v13 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v26, &v38, &v34);
        uint64_t v14 = (char *)*v13;
        if (!*v13)
        {
          int v15 = v13;
          uint64_t v14 = (char *)operator new(0x50uLL);
          *(void *)uint64_t v39 = v14;
          *(void *)&v39[8] = a1 + 168;
          v39[16] = 0;
          unint64_t v16 = (std::string *)(v14 + 32);
          if (SHIBYTE(v35) < 0)
          {
            std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v34, *((std::string::size_type *)&v34 + 1));
          }
          else
          {
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v34;
            *((void *)v14 + 6) = v35;
          }
          *((void *)v14 + 8) = 0;
          *((void *)v14 + 9) = 0;
          *((void *)v14 + 7) = 0;
          v39[16] = 1;
          uint64_t v17 = v38;
          *(void *)uint64_t v14 = 0;
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = v17;
          void *v15 = v14;
          unint64_t v18 = (void *)**v26;
          std::string v19 = (uint64_t *)v14;
          if (v18)
          {
            char *v26 = v18;
            std::string v19 = (uint64_t *)*v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v19);
          ++*(void *)(a1 + 176);
          *(void *)uint64_t v39 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
        }
        std::string::operator=((std::string *)(v14 + 56), &__str);
        uint64_t v20 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64_t v21 = &v34;
          if (v35 < 0) {
            uint64_t v21 = (long long *)v34;
          }
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v39 = 136315650;
          *(void *)&v39[4] = "readConfig";
          *(_WORD *)&v39[12] = 2080;
          *(void *)&v39[14] = v21;
          __int16 v40 = 2080;
          unint64_t v41 = p_str;
          _os_log_impl(&dword_1C9555000, v20, OS_LOG_TYPE_INFO, "%s #Model config: %s : %s", v39, 0x20u);
        }
      }
      v28.__r_.__value_.__r.__words[0] = v27;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + *(void *)(v27 - 24)) = v9;
      v28.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1CB786D60](&v32);
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v42 + *((void *)v42.__sb_.__extbuf_ - 3)), *(_DWORD *)&v42.__sb_.__extbuf_min_[*((void *)v42.__sb_.__extbuf_ - 3) + 8] | 4);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1CB786B50](v42.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB786D60](&v43);
}

void sub_1C9572260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v75 & 1) == 0)
    {
LABEL_8:
      if (a72 < 0) {
        operator delete(a68);
      }
      std::fstream::~fstream((void (__cdecl ***)(std::fstream *__hidden))&STACK[0x200]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v75)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v74);
  goto LABEL_8;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    std::ios_base::iostate v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::fstream::close(std::fstream *this)
{
  if (!std::filebuf::close())
  {
    unint64_t v2 = (std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v7;
  *(uint64_t *)((char *)a1 + *(void *)(v7 - 24)) = v6;
  a1[1] = 0;
  long long v8 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v8, a1 + 2);
  uint64_t v9 = MEMORY[0x1E4FBA490] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *a1 = v9;
  a1[15] = v4;
  std::stringbuf::basic_stringbuf[abi:ne180100](v5, a2, 8);
  return a1;
}

void sub_1C95725F0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1CB786D60](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x1CB786B60](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    unsigned __int8 v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    int v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1C9572838(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C95727F4);
  }
  __cxa_rethrow();
}

void sub_1C95728D4(_Unwind_Exception *a1)
{
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1CB786D60](a1 + 120);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  uint64_t v7 = (std::string *)(v6 + 64);
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  *(void *)(a1 + 88) = 0;
  char v8 = *(unsigned char *)(a1 + 87);
  if (v8 < 0)
  {
    uint64_t v9 = *(std::string **)(a1 + 64);
    unint64_t v10 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v9 = v7;
    unint64_t v10 = *(unsigned __int8 *)(a1 + 87);
  }
  int v11 = *(_DWORD *)(a1 + 96);
  if ((v11 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v9 + v10;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = (char *)v9 + v10;
  }
  if ((v11 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v9 + v10;
    std::string::size_type v12 = v8 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v7, v12, 0);
    uint64_t v13 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = (char *)v9 + v13;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v10 >> 31)
      {
        uint64_t v14 = ((v10 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v15 = 0x7FFFFFFF * ((v14 + ((v10 - 0x80000000 - v14) >> 1)) >> 30);
        uint64_t v9 = (std::string *)((char *)v9 + v15 + 0x7FFFFFFF);
        unint64_t v10 = v10 - v15 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v9;
      }
      if (v10) {
        *(void *)(a1 + 48) = (char *)v9 + v10;
      }
    }
  }
  return a1;
}

void sub_1C9572B4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, void *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void RepetitionPredictorBase::loadCostMatrix(unint64_t a1, const void **a2)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "cost_matrix_file");
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 160, &__p);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  if ((void *)(a1 + 168) == v4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "#Model No cost matrix file specified");
    std::string::basic_string[abi:ne180100]<0>(v143, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&__p, (uint64_t)v143, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 62);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  p_p = (char *)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    p_p = __p.__sb_.__extbuf_;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    memmove(p_p, v7, v5);
  }
  *(_WORD *)&p_p[v5] = 47;
  std::string::basic_string[abi:ne180100]<0>(v143, "cost_matrix_file");
  uint64_t v8 = std::map<std::string,std::string>::at(a1 + 160, v143);
  int v9 = *(char *)(v8 + 23);
  if (v9 >= 0) {
    unint64_t v10 = (const std::string::value_type *)v8;
  }
  else {
    unint64_t v10 = *(const std::string::value_type **)v8;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v8 + 8);
  }
  std::string::size_type v12 = std::string::append((std::string *)&__p, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v144) < 0) {
    operator delete(v143[0].__locale_);
  }
  if (SHIBYTE(__p.__sb_.__extbufend_) < 0) {
    operator delete(__p.__sb_.__extbuf_);
  }
  *(_OWORD *)long long v159 = 0u;
  *(_OWORD *)long long v160 = 0u;
  float v161 = 1.0;
  std::string::basic_string[abi:ne180100]<0>(&v157, "");
  __p.__sb_.__extbuf_ = (char *)&unk_1F23C78F8;
  v163.__vftable = (std::ios_base_vtbl *)&unk_1F23C7920;
  __p.__sb_.__extbufnext_ = 0;
  std::ios_base::init(&v163, __p.__sb_.__extbuf_min_);
  int v165 = -1;
  uint64_t v164 = 0;
  MEMORY[0x1CB786B40](__p.__sb_.__extbuf_min_);
  if (*(void *)(a1 + 32))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15)
    {
      for (uint64_t i = 0; i != v15; ++i)
        *(void *)(*(void *)(a1 + 8) + 8 * i) = 0;
    }
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v17 = (void *)(a1 + 120);
  if (*(void *)(a1 + 144))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 136));
    *(void *)(a1 + 136) = 0;
    uint64_t v18 = *(void *)(a1 + 128);
    if (v18)
    {
      for (uint64_t j = 0; j != v18; ++j)
        *(void *)(*v17 + 8 * j) = 0;
    }
    *(void *)(a1 + 144) = 0;
  }
  std::fstream::open(&__p, &__s, v14);
  if (!*(&__p.__sb_.__st_._mbstateL + 9))
  {
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
    }
    goto LABEL_246;
  }
  int v130 = 0;
  char v20 = (std::string *)(a1 + 88);
  long long v131 = (void *)(a1 + 48);
  memset(&v156, 0, sizeof(v156));
  v154[1] = 0;
  v154[0] = 0;
  uint64_t v155 = 0;
  v152[1] = 0;
  v152[0] = 0;
  uint64_t v153 = 0;
  v150[1] = 0;
  v150[0] = 0;
  uint64_t v151 = 0;
  int v149 = 0;
  uint64_t v132 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 24);
  char v133 = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
  uint64_t v135 = (int8x8_t *)a1;
  uint64_t v136 = a1 + 8;
  uint64_t v129 = (std::string *)(a1 + 88);
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)));
    uint64_t v21 = std::locale::use_facet(v143, MEMORY[0x1E4FBA258]);
    unsigned __int8 v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(v143);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)&v156, v22);
    if ((__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] & 5) != 0) {
      break;
    }
    std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)v143, &v156);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v143, (uint64_t)v154);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v143, (uint64_t)v154);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v143, (uint64_t)v152);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v143, (uint64_t)v150);
    std::string::size_type v23 = (void *)MEMORY[0x1CB786B80](v143, &v149);
    if ((*((unsigned char *)v23 + *(void *)(*v23 - 24) + 32) & 5) != 0) {
      goto LABEL_117;
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v17, (unsigned __int8 *)v152))SymbolMapper::set((uint64_t)v20, (uint64_t)v152, v130++); {
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v17, (unsigned __int8 *)v150))SymbolMapper::set((uint64_t)v20, (uint64_t)v150, v130++);
    }
    int v24 = v149;
    unsigned int v25 = SymbolMapper::mapPhone((uint64_t)v20, (unsigned __int8 *)v152);
    std::to_string(&v141, v25);
    int v26 = std::string::append(&v141, ",");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    unsigned int v28 = SymbolMapper::mapPhone((uint64_t)v20, (unsigned __int8 *)v150);
    std::to_string(&v140, v28);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v29 = &v140;
    }
    else {
      int v29 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v140.__r_.__value_.__l.__size_;
    }
    char v31 = std::string::append(&v142, (const std::string::value_type *)v29, size);
    *(std::string *)long long v138 = *v31;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v32 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v138);
    unint64_t v33 = v32;
    unint64_t v34 = (unint64_t)v159[1];
    if (!v159[1]) {
      goto LABEL_64;
    }
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v159[1]);
    v35.i16[0] = vaddlv_u8(v35);
    unint64_t v36 = v35.u32[0];
    if (v35.u32[0] > 1uLL)
    {
      a1 = v32;
      if ((void *)v32 >= v159[1]) {
        a1 = v32 % (unint64_t)v159[1];
      }
    }
    else
    {
      a1 = ((unint64_t)v159[1] - 1) & v32;
    }
    unsigned __int8 v37 = (unsigned __int8 **)*((void *)v159[0] + a1);
    if (!v37 || (uint64_t v38 = *v37) == 0)
    {
LABEL_64:
      __int16 v40 = operator new(0x30uLL);
      *(void *)__int16 v40 = 0;
      *((void *)v40 + 1) = v33;
      *((_OWORD *)v40 + 1) = *(_OWORD *)v138;
      *((void *)v40 + 4) = *(void *)&v138[16];
      memset(v138, 0, 24);
      v40[10] = 0;
      float v41 = (float)((unint64_t)v160[1] + 1);
      if (!v34 || (float)(v161 * (float)v34) < v41)
      {
        BOOL v42 = (v34 & (v34 - 1)) != 0;
        if (v34 < 3) {
          BOOL v42 = 1;
        }
        unint64_t v43 = v42 | (2 * v34);
        unint64_t v44 = vcvtps_u32_f32(v41 / v161);
        if (v43 <= v44) {
          size_t v45 = v44;
        }
        else {
          size_t v45 = v43;
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v159, v45);
        unint64_t v34 = (unint64_t)v159[1];
        if (((unint64_t)v159[1] & ((unint64_t)v159[1] - 1)) != 0)
        {
          if ((void *)v33 >= v159[1]) {
            a1 = v33 % (unint64_t)v159[1];
          }
          else {
            a1 = v33;
          }
        }
        else
        {
          a1 = ((unint64_t)v159[1] - 1) & v33;
        }
      }
      uint64_t v46 = v159[0];
      uint64_t v47 = (void *)*((void *)v159[0] + a1);
      if (v47)
      {
        *(void *)__int16 v40 = *v47;
        goto LABEL_84;
      }
      *(void **)__int16 v40 = v160[0];
      v160[0] = v40;
      v46[a1] = v160;
      if (*(void *)v40)
      {
        unint64_t v48 = *(void *)(*(void *)v40 + 8);
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v48 >= v34) {
            v48 %= v34;
          }
        }
        else
        {
          v48 &= v34 - 1;
        }
        uint64_t v47 = (char *)v159[0] + 8 * v48;
LABEL_84:
        *uint64_t v47 = v40;
      }
      ++v160[1];
      v40[10] = v24;
      goto LABEL_86;
    }
    while (1)
    {
      unint64_t v39 = *((void *)v38 + 1);
      if (v39 == v33) {
        break;
      }
      if (v36 > 1)
      {
        if (v39 >= v34) {
          v39 %= v34;
        }
      }
      else
      {
        v39 &= v34 - 1;
      }
      if (v39 != a1) {
        goto LABEL_64;
      }
LABEL_63:
      uint64_t v38 = *(unsigned __int8 **)v38;
      if (!v38) {
        goto LABEL_64;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v38 + 16, v138)) {
      goto LABEL_63;
    }
    int v65 = v138[23];
    *((_DWORD *)v38 + 10) = v24;
    if (v65 < 0) {
      operator delete(*(void **)v138);
    }
LABEL_86:
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    unint64_t v49 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v152);
    int8x8_t v50 = v135[7];
    if (v50)
    {
      unint64_t v51 = v49;
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
      v52.i16[0] = vaddlv_u8(v52);
      unint64_t v53 = v52.u32[0];
      if (v52.u32[0] > 1uLL)
      {
        unint64_t v54 = v49;
        if (v49 >= *(void *)&v50) {
          unint64_t v54 = v49 % *(void *)&v50;
        }
      }
      else
      {
        unint64_t v54 = (*(void *)&v50 - 1) & v49;
      }
      uint64_t v55 = *(unsigned __int8 ***)(*v131 + 8 * v54);
      if (v55)
      {
        for (k = *v55; k; k = *(unsigned __int8 **)k)
        {
          unint64_t v57 = *((void *)k + 1);
          if (v57 == v51)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, (unsigned __int8 *)v152)) {
              goto LABEL_116;
            }
          }
          else
          {
            if (v53 > 1)
            {
              if (v57 >= *(void *)&v50) {
                v57 %= *(void *)&v50;
              }
            }
            else
            {
              v57 &= *(void *)&v50 - 1;
            }
            if (v57 != v54) {
              break;
            }
          }
        }
      }
    }
    memset(v138, 0, sizeof(v138));
    int v139 = 1065353216;
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
    uint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v131, (unsigned __int8 *)v152, (long long **)&v142);
    uint64_t v59 = v58;
    if (*((void *)v58 + 8))
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*((void ***)v58 + 7));
      *((void *)v59 + 7) = 0;
      uint64_t v60 = *((void *)v59 + 6);
      if (v60)
      {
        for (uint64_t m = 0; m != v60; ++m)
          *(void *)(*((void *)v59 + 5) + 8 * m) = 0;
      }
      *((void *)v59 + 8) = 0;
    }
    *(void *)long long v138 = 0;
    std::string v62 = (void *)*((void *)v59 + 5);
    *((void *)v59 + 5) = 0;
    if (v62) {
      operator delete(v62);
    }
    *((void *)v59 + 6) = 0;
    *((void *)v59 + 7) = 0;
    *((void *)v59 + 8) = 0;
    *((_DWORD *)v59 + 18) = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(0);
LABEL_116:
    int v63 = v149;
    *(void *)long long v138 = v152;
    uint64_t v64 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v131, (unsigned __int8 *)v152, (long long **)v138);
    char v20 = v129;
    *(void *)long long v138 = v150;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v64 + 40), (unsigned __int8 *)v150, (long long **)v138)+ 10) = v63;
LABEL_117:
    v143[0].__locale_ = v133;
    *(std::locale::__imp **)((char *)&v143[0].__locale_ + *((void *)v133 - 3)) = v132;
    *(void *)&long long v144 = MEMORY[0x1E4FBA470] + 16;
    a1 = (unint64_t)v135;
    if (v147 < 0) {
      operator delete(v146);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1CB786D60](&v148);
  }
  std::string::basic_string[abi:ne180100]<0>(v143, "<eps>");
  std::string::operator=(v20, (const std::string *)v143);
  unint64_t v66 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v143);
  int8x8_t v67 = *(int8x8_t *)(a1 + 128);
  if (!*(void *)&v67) {
    goto LABEL_140;
  }
  unint64_t v68 = v66;
  uint8x8_t v69 = (uint8x8_t)vcnt_s8(v67);
  v69.i16[0] = vaddlv_u8(v69);
  unint64_t v70 = v69.u32[0];
  if (v69.u32[0] > 1uLL)
  {
    unint64_t v71 = v66;
    if (v66 >= *(void *)&v67) {
      unint64_t v71 = v66 % *(void *)&v67;
    }
  }
  else
  {
    unint64_t v71 = (*(void *)&v67 - 1) & v66;
  }
  std::string v72 = *(unsigned __int8 ***)(*v17 + 8 * v71);
  if (!v72 || (std::string v73 = *v72) == 0) {
LABEL_140:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (2)
  {
    unint64_t v74 = *((void *)v73 + 1);
    if (v74 != v68)
    {
      if (v70 > 1)
      {
        if (v74 >= *(void *)&v67) {
          v74 %= *(void *)&v67;
        }
      }
      else
      {
        v74 &= *(void *)&v67 - 1;
      }
      if (v74 != v71) {
        goto LABEL_140;
      }
      goto LABEL_139;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v73 + 16, (unsigned __int8 *)v143))
    {
LABEL_139:
      std::string v73 = *(unsigned __int8 **)v73;
      if (!v73) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 112) = *((_DWORD *)v73 + 10);
  if (SBYTE7(v144) < 0) {
    operator delete(v143[0].__locale_);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p.__sb_.__extbuf_ - 3)), *(_DWORD *)&__p.__sb_.__extbuf_min_[*((void *)__p.__sb_.__extbuf_ - 3) + 8] | 4);
  }
  uint64_t v134 = *(void *)(a1 + 144);
  if ((int)v134 >= 1)
  {
    unsigned int v75 = 0;
    do
    {
      *(_OWORD *)&v143[0].__locale_ = 0u;
      long long v144 = 0u;
      int v145 = 1065353216;
      *(_DWORD *)long long v138 = v75;
      std::string v76 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v136, v75, v138);
      std::string v77 = v76;
      if (v76[6])
      {
        std::string v78 = (void *)v76[5];
        if (v78)
        {
          do
          {
            unint64_t v79 = (void *)*v78;
            operator delete(v78);
            std::string v78 = v79;
          }
          while (v79);
        }
        v77[5] = 0;
        uint64_t v80 = v77[4];
        if (v80)
        {
          for (uint64_t n = 0; n != v80; ++n)
            *(void *)(v77[3] + 8 * n) = 0;
        }
        v77[6] = 0;
      }
      int locale = v143[0].__locale_;
      v143[0].__locale_ = 0;
      std::ios_base v83 = (void *)v77[3];
      v77[3] = (uint64_t)locale;
      if (v83) {
        operator delete(v83);
      }
      unint64_t v84 = (unint64_t)v143[1].__locale_;
      uint64_t v85 = v144;
      v77[5] = v144;
      v77[4] = v84;
      v143[1].__locale_ = 0;
      uint64_t v86 = *((void *)&v144 + 1);
      v77[6] = *((void *)&v144 + 1);
      *((_DWORD *)v77 + 14) = v145;
      if (v86)
      {
        unint64_t v87 = *(void *)(v85 + 8);
        if ((v84 & (v84 - 1)) != 0)
        {
          if (v87 >= v84) {
            v87 %= v84;
          }
        }
        else
        {
          v87 &= v84 - 1;
        }
        *(void *)(v77[3] + 8 * v87) = v77 + 5;
        long long v144 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)v143);
      ++v75;
    }
    while (v75 != v134);
    for (iuint64_t i = 0; ii != v134; ++ii)
    {
      unint64_t v89 = 0;
      do
      {
        std::to_string(&v142, ii);
        uint64_t v90 = std::string::append(&v142, ",");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        *(void *)&v138[16] = *((void *)&v90->__r_.__value_.__l + 2);
        *(_OWORD *)long long v138 = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v141, v89);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v92 = &v141;
        }
        else {
          unint64_t v92 = (std::string *)v141.__r_.__value_.__r.__words[0];
        }
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v93 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v93 = v141.__r_.__value_.__l.__size_;
        }
        unint64_t v94 = std::string::append((std::string *)v138, (const std::string::value_type *)v92, v93);
        *(_OWORD *)&v143[0].__locale_ = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        *(void *)&long long v144 = *((void *)&v94->__r_.__value_.__l + 2);
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if ((v138[23] & 0x80000000) != 0) {
          operator delete(*(void **)v138);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        unint64_t v95 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v143);
        unint64_t v96 = (unint64_t)v159[1];
        if (!v159[1]) {
          goto LABEL_234;
        }
        unint64_t v97 = v95;
        uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v159[1]);
        v98.i16[0] = vaddlv_u8(v98);
        unint64_t v99 = v98.u32[0];
        if (v98.u32[0] > 1uLL)
        {
          unint64_t v100 = v95;
          if ((void *)v95 >= v159[1]) {
            unint64_t v100 = v95 % (unint64_t)v159[1];
          }
        }
        else
        {
          unint64_t v100 = ((unint64_t)v159[1] - 1) & v95;
        }
        id v101 = (unint64_t *)*((void *)v159[0] + v100);
        if (!v101) {
          goto LABEL_234;
        }
        unint64_t v102 = *v101;
        if (!*v101) {
          goto LABEL_234;
        }
        while (1)
        {
          unint64_t v103 = *(void *)(v102 + 8);
          if (v97 == v103) {
            break;
          }
          if (v99 > 1)
          {
            if (v103 >= v96) {
              v103 %= v96;
            }
          }
          else
          {
            v103 &= v96 - 1;
          }
          if (v103 != v100) {
            goto LABEL_234;
          }
LABEL_192:
          unint64_t v102 = *(void *)v102;
          if (!v102) {
            goto LABEL_234;
          }
        }
        if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v102 + 16), (unsigned __int8 *)v143))goto LABEL_192; {
        uint64_t v104 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v159, (unsigned __int8 *)v143);
        }
        if (!v104) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        int v105 = *((_DWORD *)v104 + 10);
        *(_DWORD *)long long v138 = ii;
        uint64_t v106 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v136, ii, v138);
        uint64_t v107 = v106 + 3;
        unint64_t v108 = v106[4];
        if (v108)
        {
          uint8x8_t v109 = (uint8x8_t)vcnt_s8((int8x8_t)v108);
          v109.i16[0] = vaddlv_u8(v109);
          if (v109.u32[0] > 1uLL)
          {
            unint64_t v102 = v89;
            if (v108 <= v89) {
              unint64_t v102 = v89 % v108;
            }
          }
          else
          {
            unint64_t v102 = (v108 + 0x7FFFFFFF) & v89;
          }
          uint64_t v110 = *(void ***)(*v107 + 8 * v102);
          if (v110)
          {
            std::vector<std::string>::pointer v111 = *v110;
            if (*v110)
            {
              do
              {
                unint64_t v112 = v111[1];
                if (v112 == v89)
                {
                  if (v89 == *((_DWORD *)v111 + 4)) {
                    goto LABEL_233;
                  }
                }
                else
                {
                  if (v109.u32[0] > 1uLL)
                  {
                    if (v112 >= v108) {
                      v112 %= v108;
                    }
                  }
                  else
                  {
                    v112 &= v108 - 1;
                  }
                  if (v112 != v102) {
                    break;
                  }
                }
                std::vector<std::string>::pointer v111 = (void *)*v111;
              }
              while (v111);
            }
          }
        }
        std::vector<std::string>::pointer v111 = operator new(0x18uLL);
        *std::vector<std::string>::pointer v111 = 0;
        v111[1] = v89;
        *((_DWORD *)v111 + 4) = v89;
        *((_DWORD *)v111 + 5) = 0;
        float v113 = (float)(unint64_t)(v106[6] + 1);
        float v114 = *((float *)v106 + 14);
        if (!v108 || (float)(v114 * (float)v108) < v113)
        {
          BOOL v115 = (v108 & (v108 - 1)) != 0;
          if (v108 < 3) {
            BOOL v115 = 1;
          }
          unint64_t v116 = v115 | (2 * v108);
          unint64_t v117 = vcvtps_u32_f32(v113 / v114);
          if (v116 <= v117) {
            size_t v118 = v117;
          }
          else {
            size_t v118 = v116;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v107, v118);
          unint64_t v108 = v106[4];
          if ((v108 & (v108 - 1)) != 0)
          {
            if (v108 <= v89) {
              unint64_t v102 = v89 % v108;
            }
            else {
              unint64_t v102 = v89;
            }
          }
          else
          {
            unint64_t v102 = (v108 + 0x7FFFFFFF) & v89;
          }
        }
        uint64_t v119 = *v107;
        long long v120 = *(void **)(*v107 + 8 * v102);
        if (v120)
        {
          *std::vector<std::string>::pointer v111 = *v120;
          goto LABEL_231;
        }
        *std::vector<std::string>::pointer v111 = v106[5];
        v106[5] = (uint64_t)v111;
        *(void *)(v119 + 8 * v102) = v106 + 5;
        if (*v111)
        {
          unint64_t v121 = *(void *)(*v111 + 8);
          if ((v108 & (v108 - 1)) != 0)
          {
            if (v121 >= v108) {
              v121 %= v108;
            }
          }
          else
          {
            v121 &= v108 - 1;
          }
          long long v120 = (void *)(*v107 + 8 * v121);
LABEL_231:
          void *v120 = v111;
        }
        ++v106[6];
LABEL_233:
        *((_DWORD *)v111 + 5) = v105;
LABEL_234:
        if (SBYTE7(v144) < 0) {
          operator delete(v143[0].__locale_);
        }
        ++v89;
      }
      while (v89 != v134);
    }
  }
  if (SHIBYTE(v151) < 0) {
    operator delete(v150[0]);
  }
  if (SHIBYTE(v153) < 0) {
    operator delete(v152[0]);
  }
  if (SHIBYTE(v155) < 0) {
    operator delete(v154[0]);
  }
  a1 = (unint64_t)v135;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
LABEL_246:
  MEMORY[0x1CB786B50](__p.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](&v163);
  if (v158 < 0) {
    operator delete(v157);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v160[0]);
  long long v122 = v159[0];
  v159[0] = 0;
  if (v122) {
    operator delete(v122);
  }
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 144))
  {
    unint64_t v127 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "#Model Failed to load confMatrix file");
    std::string::basic_string[abi:ne180100]<0>(v143, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(v127, (uint64_t)&__p, (uint64_t)v143, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RepetitionPredictorBase.cpp", 68);
  }
  v123 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
  {
    uint64_t v124 = *(const char **)(a1 + 144);
    LODWORD(__p.__sb_.__extbuf_) = 136315394;
    *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "loadCostMatrix";
    WORD2(__p.__sb_.__extbufnext_) = 2048;
    *(const char **)((char *)&__p.__sb_.__extbufnext_ + 6) = v124;
    _os_log_impl(&dword_1C9555000, v123, OS_LOG_TYPE_INFO, "%s #Model symbol map size: %zu", (uint8_t *)&__p, 0x16u);
  }
  uint64_t v125 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
  {
    unint64_t v126 = *(const char **)(a1 + 32);
    LODWORD(__p.__sb_.__extbuf_) = 136315394;
    *(char **)((char *)&__p.__sb_.__extbuf_ + 4) = "loadCostMatrix";
    WORD2(__p.__sb_.__extbufnext_) = 2048;
    *(const char **)((char *)&__p.__sb_.__extbufnext_ + 6) = v126;
    _os_log_impl(&dword_1C9555000, v125, OS_LOG_TYPE_INFO, "%s #Model cost_matrix size: %lu", (uint8_t *)&__p, 0x16u);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C9573EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0)
  {
    operator delete((void *)STACK[0x2D0]);
    if ((v49 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v49)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v48);
  goto LABEL_8;
}

void createPronunciationsVector(uint64_t a1, long long **a2, uint64_t *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  std::vector<std::vector<float>>::__clear[abi:ne180100](a3);
  BOOL v6 = *a2;
  float v41 = a2[1];
  if (*a2 == v41) {
    return;
  }
  uint64_t v7 = 0;
  unint64_t v43 = (void *)(a1 + 32);
  unint64_t v44 = 0;
  uint64_t v39 = *(void *)(MEMORY[0x1E4FBA410] + 24);
  uint64_t v40 = *MEMORY[0x1E4FBA410];
  do
  {
    BOOL v42 = v6;
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v8 = *v6;
      v45.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v8;
    }
    std::istringstream::basic_istringstream[abi:ne180100](v50, &v45);
    std::fstream __p = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v9 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&buf[4] = "mapPhoneString";
      _os_log_debug_impl(&dword_1C9555000, v9, OS_LOG_TYPE_DEBUG, "%s Mapping phone string:", buf, 0xCu);
    }
    unint64_t v10 = v7;
    while (1)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v50, (uint64_t)&__p);
      if ((*((unsigned char *)v53 + *(void *)(v50[0] - 24)) & 5) != 0) {
        break;
      }
      if (SHIBYTE(v49) < 0)
      {
        if (v48 != 3) {
          goto LABEL_19;
        }
        p_p = (unsigned __int16 *)__p;
      }
      else
      {
        if (SHIBYTE(v49) != 3) {
          goto LABEL_19;
        }
        p_p = (unsigned __int16 *)&__p;
      }
      int v12 = *p_p;
      int v13 = *((unsigned __int8 *)p_p + 2);
      if (v12 != 26995 || v13 != 108)
      {
LABEL_19:
        uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v43, (unsigned __int8 *)&__p);
        if (!v15)
        {
          std::operator+<char>();
          unint64_t v36 = std::string::append(&v46, " not found");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          *(void *)&buf[16] = *((void *)&v36->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(&v46, "QueryRewrite");
          InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)&v46, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/src/SymbolMapper.cpp", 74);
          void *exception = &unk_1F23C7E90;
        }
        int v16 = v15;
        if ((unint64_t)v10 >= v44)
        {
          uint64_t v17 = (v10 - v7) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v44 - (void)v7) >> 1 > v18) {
            unint64_t v18 = (uint64_t)(v44 - (void)v7) >> 1;
          }
          if (v44 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = (char *)(v19 + 4 * v17);
          *(_DWORD *)uint64_t v21 = *((_DWORD *)v16 + 10);
          unsigned __int8 v22 = v21 + 4;
          while (v10 != v7)
          {
            int v23 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v21 - 1) = v23;
            v21 -= 4;
          }
          unint64_t v44 = v19 + 4 * v20;
          if (v7) {
            operator delete(v7);
          }
          uint64_t v7 = v21;
          unint64_t v10 = v22;
        }
        else
        {
          *(_DWORD *)unint64_t v10 = *((_DWORD *)v15 + 10);
          v10 += 4;
        }
        int v24 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v43, (unsigned __int8 *)&__p);
          if (!v25) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          int v26 = *((_DWORD *)v25 + 10);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&buf[4] = "mapPhoneString";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v26;
          _os_log_debug_impl(&dword_1C9555000, v24, OS_LOG_TYPE_DEBUG, "%s %d", buf, 0x12u);
        }
      }
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(__p);
    }
    v50[0] = v40;
    *(uint64_t *)((char *)v50 + *(void *)(v40 - 24)) = v39;
    uint64_t v51 = MEMORY[0x1E4FBA470] + 16;
    if (v54 < 0) {
      operator delete((void *)v53[6]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1CB786D60](&v55);
    unsigned int v28 = (void *)a3[1];
    unint64_t v27 = a3[2];
    if ((unint64_t)v28 >= v27)
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - *a3) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a3) >> 3);
      if (2 * v32 > v31) {
        unint64_t v31 = 2 * v32;
      }
      if (v32 >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v31;
      }
      v53[0] = a3 + 2;
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      uint8x8_t v35 = (void *)(v33 + 24 * v30);
      v50[0] = v33;
      v50[1] = (uint64_t)v35;
      uint64_t v51 = (uint64_t)v35;
      unint64_t v52 = v33 + 24 * v34;
      *uint8x8_t v35 = 0;
      v35[1] = 0;
      v35[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35, v7, (uint64_t)v10, (v10 - v7) >> 2);
      v51 += 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a3, v50);
      int v29 = (void *)a3[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v50);
    }
    else
    {
      *unsigned int v28 = 0;
      v28[1] = 0;
      v28[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28, v7, (uint64_t)v10, (v10 - v7) >> 2);
      int v29 = v28 + 3;
      a3[1] = (uint64_t)(v28 + 3);
    }
    a3[1] = (uint64_t)v29;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    BOOL v6 = (long long *)((char *)v42 + 24);
  }
  while ((long long *)((char *)v42 + 24) != v41);
  if (v7) {
    operator delete(v7);
  }
}

void sub_1C9574810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v45 - 105) < 0) {
        operator delete(*(void **)(v45 - 128));
      }
      if (a41 < 0) {
        operator delete(a36);
      }
      std::istringstream::~istringstream((uint64_t)&a42);
      if (a28 < 0) {
        operator delete(a23);
      }
      if (v44) {
        operator delete(v44);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    unint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C9574950(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

uint64_t get_correction_type(float *a1, const std::string *a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v6, a2);
  float v5 = 0.0;
  MEMORY[0x1CB786B80](v6, &v5);
  if (1.0 - *a1 <= v5)
  {
    uint64_t v3 = 0;
  }
  else if (a1[2] <= a1[1])
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 2;
  }
  v6[0] = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v6[2] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1CB786D60](&v8);
  return v3;
}

void sub_1C9574B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void toQRResponse(int8x16_t *a1, uint64_t a2)
{
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  a1[3].i32[2] = 4;
  memset(&__p, 0, sizeof(__p));
  a1[1].i32[2] = 0;
  int8x16_t v3 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 4));
  a1[2] = vextq_s8(v3, v3, 8uLL);
  *(double *)a1[3].i64 = *(float *)a2;
  int v4 = *(_DWORD *)(a2 + 40);
  switch(v4)
  {
    case 0:
      int v5 = 1;
      goto LABEL_9;
    case 1:
      a1[1].i32[2] = 2;
      uint64_t v25 = v3.i64[0];
      int v26 = 2;
      std::string::operator=(&__p, (const std::string *)(a2 + 48));
      unint64_t v6 = a1[1].u64[0];
      unint64_t v7 = a1->u64[1];
      if (v7 >= v6)
      {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - a1->i64[0]) >> 3);
        if ((unint64_t)(v10 + 1) > 0x492492492492492) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - a1->i64[0]) >> 3);
        uint64_t v12 = 2 * v11;
        if (2 * v11 <= v10 + 1) {
          uint64_t v12 = v10 + 1;
        }
        if (v11 >= 0x249249249249249) {
          unint64_t v13 = 0x492492492492492;
        }
        else {
          unint64_t v13 = v12;
        }
        unint64_t v30 = a1 + 1;
        if (v13)
        {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v13);
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v14 = 0;
        }
        unint64_t v18 = &v15[56 * v10];
        v27[0] = v15;
        v27[1] = v18;
        unsigned int v28 = v18;
        int v29 = &v15[56 * v14];
        *(_OWORD *)unint64_t v18 = v23;
        unint64_t v19 = (std::string *)(v18 + 16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          unint64_t v18 = v28;
        }
        else
        {
          long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((void *)v18 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        uint64_t v21 = &v15[56 * v10];
        uint64_t v22 = v25;
        *((_DWORD *)v21 + 12) = v26;
        *((void *)v21 + 5) = v22;
        unsigned int v28 = v18 + 56;
        std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer(a1->i64, v27);
        uint64_t v17 = a1->i64[1];
        std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)v27);
      }
      else
      {
        *(_OWORD *)unint64_t v7 = v23;
        uint64_t v8 = (std::string *)(v7 + 16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v7 + 32) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        uint64_t v16 = v25;
        *(_DWORD *)(v7 + 48) = v26;
        *(void *)(v7 + 40) = v16;
        uint64_t v17 = v7 + 56;
        a1->i64[1] = v7 + 56;
      }
      a1->i64[1] = v17;
      a1[3].i32[2] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 2:
      int v5 = 3;
LABEL_9:
      a1[1].i32[2] = v5;
      break;
  }
}

void sub_1C9574D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      long long v6 = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 40) = 0;
      uint64_t v7 = *(void *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(void *)(v4 - 16) = v7;
      v4 -= 56;
      v3 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *unint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 56;
      *(void *)(a1 + 16) = v2 - 56;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void removeTriggerTokens(void *a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  if (a3 != a4)
  {
    uint64_t v5 = a4;
    long long v6 = a3;
    do
    {
      memset(&v43, 0, sizeof(v43));
      uint64_t v7 = *a2;
      if (a2[1] != *a2)
      {
        uint64_t v8 = 0;
        while (1)
        {
          uint64_t v9 = v7 + 160 * v8;
          int v10 = *(char *)(v9 + 23);
          if (v10 >= 0) {
            unint64_t v11 = (const std::string::value_type *)v9;
          }
          else {
            unint64_t v11 = *(const std::string::value_type **)v9;
          }
          if (v10 >= 0) {
            std::string::size_type v12 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            std::string::size_type v12 = *(void *)(v9 + 8);
          }
          std::string::append(&v43, v11, v12);
          std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          char v14 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v43.__r_.__value_.__l.__size_;
          }
          std::string::size_type v15 = *((char *)v6 + 23) < 0 ? (std::string::size_type)v6[1] : *((unsigned __int8 *)v6 + 23);
          if (size > v15) {
            break;
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v42, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          }
          else {
            std::string v42 = v43;
          }
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v16 = (std::string *)((char *)&v42 + HIBYTE(v42.__r_.__value_.__r.__words[2]));
          }
          else {
            uint64_t v16 = (std::string *)(v42.__r_.__value_.__r.__words[0] + v42.__r_.__value_.__l.__size_);
          }
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v42;
          }
          else {
            uint64_t v17 = (std::string *)v42.__r_.__value_.__r.__words[0];
          }
          while (v17 != v16)
          {
            v17->__r_.__value_.__s.__data_[0] = __tolower(v17->__r_.__value_.__s.__data_[0]);
            uint64_t v17 = (std::string *)((char *)v17 + 1);
          }
          std::string __p = v42;
          memset(&v42, 0, sizeof(v42));
          std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          }
          long long v20 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
          int v21 = (char)v20;
          if ((char)v20 < 0) {
            long long v20 = v6[1];
          }
          if ((unsigned __int8 *)v19 == v20)
          {
            if (v21 >= 0) {
              uint64_t v22 = (unsigned __int8 *)v6;
            }
            else {
              uint64_t v22 = *v6;
            }
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              unsigned int v28 = (void *)__p.__r_.__value_.__r.__words[0];
              int v29 = memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_);
              operator delete(v28);
              if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v42.__r_.__value_.__l.__data_);
              }
              if (!v29)
              {
LABEL_61:
                unint64_t v30 = v8 + 1;
                uint64_t v31 = *a2;
                if (v8 + 1 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5))
                {
                  unint64_t v32 = v45;
                }
                else
                {
                  unint64_t v32 = v45;
                  uint64_t v33 = 160 * v8 + 160;
                  do
                  {
                    uint64_t v34 = (const marrs::qr::orchestration::QRToken *)(v31 + v33);
                    if ((unint64_t)v32 >= v46)
                    {
                      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v32 - v44) >> 5);
                      unint64_t v36 = v35 + 1;
                      if (v35 + 1 > 0x199999999999999) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x999999999999999ALL * ((uint64_t)(v46 - v44) >> 5) > v36) {
                        unint64_t v36 = 0x999999999999999ALL * ((uint64_t)(v46 - v44) >> 5);
                      }
                      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - v44) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
                        unint64_t v37 = 0x199999999999999;
                      }
                      else {
                        unint64_t v37 = v36;
                      }
                      uint64_t v49 = &v46;
                      if (v37) {
                        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v37);
                      }
                      else {
                        uint64_t v38 = 0;
                      }
                      __p.__r_.__value_.__r.__words[0] = v37;
                      __p.__r_.__value_.__l.__size_ = v37 + 160 * v35;
                      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
                      unint64_t v48 = v37 + 160 * v38;
                      marrs::qr::orchestration::QRToken::QRToken((std::string *)__p.__r_.__value_.__l.__size_, v34);
                      __p.__r_.__value_.__r.__words[2] += 160;
                      std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(&v44, &__p);
                      unint64_t v32 = v45;
                      std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&__p);
                    }
                    else
                    {
                      marrs::qr::orchestration::QRToken::QRToken(v32, v34);
                      unint64_t v32 = (std::string *)((char *)v32 + 160);
                    }
                    uint64_t v45 = v32;
                    ++v30;
                    uint64_t v31 = *a2;
                    v33 += 160;
                  }
                  while (v30 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
                }
                unint64_t v39 = v46;
                *a1 = v44;
                a1[1] = v32;
                a1[2] = v39;
                uint64_t v45 = 0;
                unint64_t v46 = 0;
                uint64_t v44 = 0;
                if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v43.__r_.__value_.__l.__data_);
                }
                goto LABEL_80;
              }
            }
            else
            {
              if (!v18) {
                goto LABEL_61;
              }
              uint64_t v23 = 0;
              std::string::size_type v24 = v18 - 1;
              do
              {
                int v25 = __p.__r_.__value_.__s.__data_[v23];
                int v26 = v22[v23];
              }
              while (v25 == v26 && v24 != v23++);
              if (v25 == v26) {
                goto LABEL_61;
              }
            }
          }
          else if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v42.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v7 = *a2;
          if (!*(unsigned char *)(*a2 + 160 * v8 + 128))
          {
            std::string::append(&v43, " ");
            uint64_t v7 = *a2;
          }
          if (++v8 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v7) >> 5))
          {
            char v14 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
            break;
          }
        }
        uint64_t v5 = a4;
        if (v14 < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
      }
      v6 += 3;
    }
    while (v6 != v5);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
LABEL_80:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C95752D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  std::string __p = &a24;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<marrs::qr::orchestration::QRToken>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C95753B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    std::allocator<marrs::qr::orchestration::QRToken>::destroy[abi:ne180100](i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      long long v11 = *(_OWORD *)(a3 + v8 - 160);
      *(void *)(v9 - 144) = *(void *)(a3 + v8 - 144);
      *(_OWORD *)(v9 - 160) = v11;
      *(void *)(v10 - 152) = 0;
      *(void *)(v10 - 144) = 0;
      *(void *)(v10 - 160) = 0;
      long long v12 = *(_OWORD *)(a3 + v8 - 136);
      *(void *)(v9 - 120) = *(void *)(a3 + v8 - 120);
      *(_OWORD *)(v9 - 136) = v12;
      *(void *)(v10 - 128) = 0;
      *(void *)(v10 - 120) = 0;
      *(void *)(v10 - 136) = 0;
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(_OWORD *)(v9 - 112) = *(_OWORD *)(a3 + v8 - 112);
      *(void *)(v9 - 96) = *(void *)(a3 + v8 - 96);
      *(void *)(v10 - 112) = 0;
      *(void *)(v10 - 104) = 0;
      *(void *)(v10 - 96) = 0;
      long long v13 = *(_OWORD *)(a3 + v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 + v8 - 72);
      *(_OWORD *)(v9 - 88) = v13;
      long long v14 = *(_OWORD *)(a3 + v8 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v8 - 40);
      *(_OWORD *)(v9 - 56) = v14;
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 56) = 0;
      *(unsigned char *)(v9 - 32) = *(unsigned char *)(a3 + v8 - 32);
      long long v15 = *(_OWORD *)(a3 + v8 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v8 - 8);
      *(_OWORD *)(v9 - 24) = v15;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      *(void *)(v10 - 24) = 0;
      v8 -= 160;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

void toRepetitionPredictorInput(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(*(void *)(a2 + 8) + 72));
  uint64_t v6 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&buf[4] = "toRepetitionPredictorInput";
    _os_log_debug_impl(&dword_1C9555000, v6, OS_LOG_TYPE_DEBUG, "%s Converting Turn1 Input", buf, 0xCu);
  }
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(**(void **)(a2 + 8) + 16));
  uint64_t v7 = *(void **)(a2 + 8);
  *(void *)(a1 + 240) = v7[13];
  removeTriggerTokens(buf, (uint64_t *)(*v7 + 64), *a3, a3[1]);
  mergeTokens(&v56, (uint64_t *)buf);
  char v54 = (void **)buf;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v54);
  uint64_t v8 = v56;
  for (uint64_t i = v57; v8 != i; v8 += 160)
  {
    long long v11 = *(char **)(a1 + 104);
    unint64_t v10 = *(void *)(a1 + 112);
    if ((unint64_t)v11 >= v10)
    {
      long long v13 = *(char **)(a1 + 96);
      uint64_t v14 = (v11 - v13) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17);
        long long v13 = *(char **)(a1 + 96);
        long long v11 = *(char **)(a1 + 104);
      }
      else
      {
        uint64_t v18 = 0;
      }
      std::string::size_type v19 = (void *)(v17 + 8 * v14);
      *std::string::size_type v19 = *(void *)(v8 + 96);
      long long v12 = v19 + 1;
      while (v11 != v13)
      {
        uint64_t v20 = *((void *)v11 - 1);
        v11 -= 8;
        *--std::string::size_type v19 = v20;
      }
      *(void *)(a1 + 96) = v19;
      *(void *)(a1 + 104) = v12;
      *(void *)(a1 + 112) = v17 + 8 * v18;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(void *)long long v11 = *(void *)(v8 + 96);
      long long v12 = v11 + 8;
    }
    *(void *)(a1 + 104) = v12;
    int v21 = (void *)(v8 + 104);
    uint64_t v22 = *(std::string **)(a1 + 56);
    if ((unint64_t)v22 >= *(void *)(a1 + 64))
    {
      std::vector<std::string>::pointer v23 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)(a1 + 48), (long long *)(v8 + 104));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 48, (long long *)(v8 + 104));
      std::vector<std::string>::pointer v23 = v22 + 1;
    }
    *(void *)(a1 + 56) = v23;
    std::string::size_type v24 = *(std::string **)(a1 + 8);
    if ((unint64_t)v24 >= *(void *)(a1 + 16))
    {
      std::vector<std::string>::pointer v25 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)a1, (long long *)v8);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, (long long *)v8);
      std::vector<std::string>::pointer v25 = v24 + 1;
    }
    *(void *)(a1 + 8) = v25;
    LOBYTE(v54) = *(unsigned char *)(v8 + 128);
    std::vector<BOOL>::push_back(a1 + 144, &v54);
    int v26 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v8 + 127) < 0) {
        int v21 = (void *)*v21;
      }
      uint64_t v27 = v8;
      if (*(char *)(v8 + 23) < 0) {
        uint64_t v27 = *(void *)v8;
      }
      unsigned int v28 = *(void **)(v8 + 96);
      int v29 = *(unsigned __int8 *)(v8 + 128);
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&buf[4] = "toRepetitionPredictorInput";
      __int16 v60 = 2048;
      unint64_t v61 = v28;
      __int16 v62 = 2080;
      int v63 = v21;
      __int16 v64 = 2080;
      uint64_t v65 = v27;
      __int16 v66 = 1024;
      int v67 = v29;
      _os_log_debug_impl(&dword_1C9555000, v26, OS_LOG_TYPE_DEBUG, "%s conf:%.1f phone:%s value:%s removeSpace:%d", buf, 0x30u);
    }
  }
  unint64_t v30 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&buf[4] = "toRepetitionPredictorInput";
    _os_log_debug_impl(&dword_1C9555000, v30, OS_LOG_TYPE_DEBUG, "%s Converting Turn2 Input", buf, 0xCu);
  }
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(*(void *)(*(void *)(a2 + 8) + 112) + 16));
  uint64_t v31 = *(void *)(a2 + 8);
  *(void *)(a1 + 248) = *(void *)(v31 + 216);
  removeTriggerTokens(buf, (uint64_t *)(*(void *)(v31 + 112) + 64), *a3, a3[1]);
  mergeTokens((uint64_t *)&v54, (uint64_t *)buf);
  uint64_t v58 = (void **)buf;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v58);
  unint64_t v32 = v54;
  for (uint64_t j = v55; v32 != j; v32 += 20)
  {
    unint64_t v35 = *(char **)(a1 + 128);
    unint64_t v34 = *(void *)(a1 + 136);
    if ((unint64_t)v35 >= v34)
    {
      unint64_t v37 = *(char **)(a1 + 120);
      uint64_t v38 = (v35 - v37) >> 3;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v34 - (void)v37;
      if (v40 >> 2 > v39) {
        unint64_t v39 = v40 >> 2;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
        unint64_t v37 = *(char **)(a1 + 120);
        unint64_t v35 = *(char **)(a1 + 128);
      }
      else
      {
        uint64_t v42 = 0;
      }
      std::string v43 = (void *)(v41 + 8 * v38);
      *std::string v43 = v32[12];
      unint64_t v36 = v43 + 1;
      while (v35 != v37)
      {
        uint64_t v44 = *((void *)v35 - 1);
        v35 -= 8;
        *--std::string v43 = v44;
      }
      *(void *)(a1 + 120) = v43;
      *(void *)(a1 + 128) = v36;
      *(void *)(a1 + 136) = v41 + 8 * v42;
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(void *)unint64_t v35 = v32[12];
      unint64_t v36 = v35 + 8;
    }
    *(void *)(a1 + 128) = v36;
    uint64_t v45 = v32 + 13;
    unint64_t v46 = *(std::string **)(a1 + 80);
    if ((unint64_t)v46 >= *(void *)(a1 + 88))
    {
      std::vector<std::string>::pointer v47 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((std::vector<std::string> *)(a1 + 72), (long long *)(v32 + 13));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(a1 + 72, (long long *)(v32 + 13));
      std::vector<std::string>::pointer v47 = v46 + 1;
    }
    *(void *)(a1 + 80) = v47;
    unint64_t v48 = *(std::string **)(a1 + 32);
    if ((unint64_t)v48 >= *(void *)(a1 + 40))
    {
      std::vector<std::string>::pointer v49 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((std::vector<std::string> *)(a1 + 24), (long long *)v32);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(a1 + 24, (long long *)v32);
      std::vector<std::string>::pointer v49 = v48 + 1;
    }
    *(void *)(a1 + 32) = v49;
    LOBYTE(v58) = *((unsigned char *)v32 + 128);
    std::vector<BOOL>::push_back(a1 + 168, &v58);
    int8x8_t v50 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v32 + 127) < 0) {
        uint64_t v45 = (void *)*v45;
      }
      uint64_t v51 = v32;
      if (*((char *)v32 + 23) < 0) {
        uint64_t v51 = *v32;
      }
      unint64_t v52 = v32[12];
      int v53 = *((unsigned __int8 *)v32 + 128);
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&buf[4] = "toRepetitionPredictorInput";
      __int16 v60 = 2048;
      unint64_t v61 = v52;
      __int16 v62 = 2080;
      int v63 = v45;
      __int16 v64 = 2080;
      uint64_t v65 = (uint64_t)v51;
      __int16 v66 = 1024;
      int v67 = v53;
      _os_log_debug_impl(&dword_1C9555000, v50, OS_LOG_TYPE_DEBUG, "%s conf:%.1f phone:%s value:%s removeSpace:%d", buf, 0x30u);
    }
  }
  *(void *)std::string buf = &v54;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v56;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C9575B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20,void **a21)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  a21 = (void **)&a17;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a21);
  RepetitionPredictorInput::~RepetitionPredictorInput(v21);
  _Unwind_Resume(a1);
}

void mergeTokens(uint64_t *a1, uint64_t *a2)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v31, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5));
  if (v32 == v31)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_62;
  }
  unint64_t v30 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    uint64_t v6 = v31;
    uint64_t v7 = v31 + 160 * v5;
    char v8 = *(unsigned char *)(v7 + 23);
    if (v8 < 0)
    {
      if (!*(void *)(v7 + 8)) {
        goto LABEL_14;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_14;
    }
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)(v31 + 160 * v5);
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)v7;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(v7 + 8);
    }
    std::string::append(&__str, v9, v10);
    uint64_t v6 = v31;
LABEL_14:
    unint64_t v11 = v5 + 1;
    if (v5 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v6) >> 5))
    {
      uint64_t v12 = v4;
      unint64_t v13 = v5 + 1;
      do
      {
        if (*(char *)(v6 + v12 + 183) < 0)
        {
          if (!*(void *)(v6 + v12 + 168)) {
            break;
          }
        }
        else if (!*(unsigned char *)(v6 + v12 + 183))
        {
          break;
        }
        if (*(char *)(v6 + v12 + 287) < 0)
        {
          if (*(void *)(v6 + v12 + 272)) {
            break;
          }
        }
        else if (*(unsigned char *)(v6 + v12 + 287))
        {
          break;
        }
        if (!*(unsigned char *)(v6 + 160 * v5 + 128)) {
          std::string::append(&__str, " ");
        }
        uint64_t v14 = *a2 + v12;
        unint64_t v17 = *(const std::string::value_type **)(v14 + 160);
        uint64_t v15 = v14 + 160;
        uint64_t v16 = v17;
        int v18 = *(char *)(v15 + 23);
        if (v18 >= 0) {
          std::string::size_type v19 = (const std::string::value_type *)v15;
        }
        else {
          std::string::size_type v19 = v16;
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *(unsigned __int8 *)(v15 + 23);
        }
        else {
          std::string::size_type v20 = *(void *)(v15 + 8);
        }
        std::string::append(&__str, v19, v20);
        uint64_t v6 = v31;
        *(unsigned char *)(v31 + 160 * v5 + 128) = *(unsigned char *)(v31 + v12 + 288);
        ++v13;
        v12 += 160;
      }
      while (v13 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v6) >> 5));
    }
    std::string::operator=((std::string *)(v6 + 160 * v5), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    v4 += 160;
    ++v5;
  }
  while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((v32 - v31) >> 5));
  *unint64_t v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  if (v21 != v22)
  {
    std::vector<std::string>::pointer v23 = 0;
    std::string::size_type v24 = v30 + 2;
    do
    {
      if (*(char *)(v21 + 127) < 0)
      {
        if (!*(void *)(v21 + 112)) {
          goto LABEL_59;
        }
      }
      else if (!*(unsigned char *)(v21 + 127))
      {
        goto LABEL_59;
      }
      if (*(char *)(v21 + 23) < 0)
      {
        if (*(void *)(v21 + 8))
        {
LABEL_46:
          if ((unint64_t)v23 >= *v24)
          {
            unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v23 - *v30) >> 5);
            unint64_t v27 = v26 + 1;
            if (v26 + 1 > 0x199999999999999) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((*v24 - *v30) >> 5) > v27) {
              unint64_t v27 = 0x999999999999999ALL * ((*v24 - *v30) >> 5);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((*v24 - *v30) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
              unint64_t v28 = 0x199999999999999;
            }
            else {
              unint64_t v28 = v27;
            }
            unint64_t v36 = v30 + 2;
            if (v28) {
              unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v28);
            }
            else {
              uint64_t v29 = 0;
            }
            __str.__r_.__value_.__r.__words[0] = v28;
            __str.__r_.__value_.__l.__size_ = v28 + 160 * v26;
            __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
            unint64_t v35 = v28 + 160 * v29;
            marrs::qr::orchestration::QRToken::QRToken((std::string *)__str.__r_.__value_.__l.__size_, (const marrs::qr::orchestration::QRToken *)v21);
            __str.__r_.__value_.__r.__words[2] += 160;
            std::vector<std::string>::pointer v25 = v30;
            std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v30, &__str);
            std::vector<std::string>::pointer v23 = (std::string *)v30[1];
            std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&__str);
          }
          else
          {
            marrs::qr::orchestration::QRToken::QRToken(v23, (const marrs::qr::orchestration::QRToken *)v21);
            std::vector<std::string>::pointer v23 = (std::string *)((char *)v23 + 160);
            std::vector<std::string>::pointer v25 = v30;
            v30[1] = (uint64_t)v23;
          }
          v25[1] = (uint64_t)v23;
        }
      }
      else if (*(unsigned char *)(v21 + 23))
      {
        goto LABEL_46;
      }
LABEL_59:
      v21 += 160;
    }
    while (v21 != v22);
  }
LABEL_62:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1C9575F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, char a10, uint64_t a11, uint64_t a12, char *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  a13 = a9;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a10;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<std::string const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    uint64_t v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1C9576118(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 != v5 << 6) {
    goto LABEL_36;
  }
  if ((uint64_t)(v4 + 1) < 0) {
    goto LABEL_9;
  }
  if (v4 > 0x3FFFFFFFFFFFFFFELL)
  {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v4 < 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v4 < v7)
    {
      if ((v7 & 0x8000000000000000) != 0) {
LABEL_9:
      }
        std::vector<float>::__throw_length_error[abi:ne180100]();
LABEL_11:
      uint64_t v28 = 0;
      long long v29 = 0uLL;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v28, v7);
      uint64_t v8 = *(void **)a1;
      unint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = v29;
      unint64_t v11 = v29 + v9;
      *(void *)&long long v29 = v29 + v9;
      if (v10)
      {
        unint64_t v12 = v11 - 1;
        if (((v11 - 1) ^ (v10 - 1)) <= 0x3F)
        {
          uint64_t v13 = v28;
LABEL_19:
          int v16 = v9 & 0x3F;
          if (v9 > 0x3F || (v9 & 0x3F) != 0)
          {
            int v17 = 0;
            int v18 = &v8[v9 >> 6];
            int v19 = v10 & 0x3F;
            std::string::size_type v20 = (uint64_t *)(v13 + 8 * (v10 >> 6));
            do
            {
              uint64_t v21 = 1 << v19;
              if ((*v8 >> v17)) {
                uint64_t v22 = *v20 | v21;
              }
              else {
                uint64_t v22 = *v20 & ~v21;
              }
              *std::string::size_type v20 = v22;
              v8 += v17 == 63;
              if (v17 == 63) {
                int v17 = 0;
              }
              else {
                ++v17;
              }
              v20 += v19 == 63;
              if (v19 == 63) {
                int v19 = 0;
              }
              else {
                ++v19;
              }
            }
            while (v8 != v18 || v17 != v16);
          }
          std::vector<std::string>::pointer v23 = *(void **)a1;
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v29;
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v12 = v11 - 1;
      }
      uint64_t v13 = v28;
      unint64_t v14 = v12 >> 6;
      if (v11 >= 0x41) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = 0;
      }
      *(void *)(v28 + 8 * v15) = 0;
      goto LABEL_19;
    }
  }
LABEL_35:
  unint64_t v4 = *(void *)(a1 + 8);
LABEL_36:
  *(void *)(a1 + 8) = v4 + 1;
  std::string::size_type v24 = *(void **)a1;
  unint64_t v25 = v4 >> 6;
  uint64_t v26 = 1 << v4;
  if (*a2) {
    uint64_t v27 = v24[v25] | v26;
  }
  else {
    uint64_t v27 = v24[v25] & ~v26;
  }
  v24[v25] = v27;
}

void sub_1C95762D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1C9576348(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void RepetitionPredictorInput::~RepetitionPredictorInput(void **this)
{
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  uint64_t v2 = this[21];
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = this[18];
  if (v3) {
    operator delete(v3);
  }
  long long v4 = this[15];
  if (v4)
  {
    this[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[12];
  if (v5)
  {
    this[13] = v5;
    operator delete(v5);
  }
  unint64_t v6 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor(JointCCQRModuleInputTensor *this)
{
  uint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 6);
  if (v9)
  {
    *((void *)this + 7) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 3);
  if (v10)
  {
    *((void *)this + 4) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v11;
    operator delete(v11);
  }
}

void JointCCQRModuleOutputTensor::~JointCCQRModuleOutputTensor(JointCCQRModuleOutputTensor *this)
{
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void InferencePlanError::~InferencePlanError(std::exception *this)
{
  BaseException::~BaseException(this);
  JUMPOUT(0x1CB786E50);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t SymbolMapper::mapPhone(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 32), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((unsigned int *)v2 + 10);
}

void SymbolMapper::set(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(unsigned __int8 ***)(*(void *)(a1 + 32) + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v15 = 0;
  *((void *)v15 + 1) = v8;
  int v16 = (std::string *)(v15 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v15 + 4) = *(void *)(a2 + 16);
  }
  int v17 = (void *)(a1 + 48);
  *((_DWORD *)v15 + 10) = a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 56) + 1);
  float v19 = *(float *)(a1 + 64);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 40);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string::size_type v24 = operator new(8 * *(void *)&prime);
          unint64_t v25 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + 40) = prime;
          do
            *(void *)(*(void *)(a1 + 32) + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void *)*v17;
          if (*v17)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 32) + 8 * v28) = v17;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  uint64_t v35 = *(void *)(a1 + 32);
                  if (!*(void *)(v35 + 8 * v34))
                  {
                    *(void *)(v35 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *uint64_t v27 = *v33;
                  *uint64_t v33 = **(void **)(*(void *)(a1 + 32) + 8 * v34);
                  **(void **)(*(void *)(a1 + 32) + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_58:
                uint64_t v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v39 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 40) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v36 = *(void *)(a1 + 32);
  unint64_t v37 = *(void **)(v36 + 8 * v3);
  if (v37)
  {
    *(void *)unint64_t v15 = *v37;
LABEL_75:
    *unint64_t v37 = v15;
    goto LABEL_76;
  }
  *(void *)unint64_t v15 = *v17;
  *int v17 = v15;
  *(void *)(v36 + 8 * v3) = v17;
  if (*(void *)v15)
  {
    unint64_t v38 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v37 = (void *)(*(void *)(a1 + 32) + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*(void *)(a1 + 56);
}

void sub_1C9576AE0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void sub_1C9576CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  _Unwind_Resume(a1);
}

void sub_1C9576EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  _Unwind_Resume(a1);
}

void sub_1C9577350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  *(void *)(v35 + 16) = v37;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a13);

  a13 = (void **)&a35;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRInteraction>::reserve(uint64_t *result, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 112 * v4;
    std::vector<marrs::qr::orchestration::QRInteraction>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRInteraction>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int8x8_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int8x8_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::qr::orchestration::QRInteraction::~QRInteraction(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this + 6;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = (void **)(a1 + 48);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&v2);
}

char *std::vector<marrs::qr::orchestration::QRInteraction>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>,marrs::qr::orchestration::QRInteraction*,marrs::qr::orchestration::QRInteraction*,marrs::qr::orchestration::QRInteraction*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = (void *)(a4 + v7);
      uint64_t v9 = a2 + v7;
      void *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((void *)(a4 + v7), *(void **)(a2 + v7), *(void **)(a2 + v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 5));
      void v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((void *)(a4 + v7 + 24), *(void **)(v9 + 24), *(void **)(v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 5));
      uint64_t v10 = a4 + v7;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(void *)(a4 + v7 + 64) = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((void *)(a4 + v7 + 48), *(void *)(v9 + 48), *(void *)(v9 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 56) - *(void *)(v9 + 48)) >> 5));
      unint64_t v11 = (std::string *)(a4 + v7 + 72);
      unint64_t v12 = (const std::string::value_type **)(a2 + v7 + 72);
      if (*(char *)(a2 + v7 + 95) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(a2 + v7 + 80));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(a4 + v7 + 88) = *(void *)(a2 + v7 + 88);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      *(_OWORD *)(a4 + v7 + 96) = *(_OWORD *)(v9 + 96);
      v7 += 112;
    }
    while (v9 + 112 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C95777F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v11;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a10);
  while (v11 != v10)
  {
    v11 -= 14;
    std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100]((uint64_t)v11);
  }
  _Unwind_Resume(a1);
}

void *std::vector<marrs::qr::orchestration::QRUtterance>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C95778BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = &a2[v7 / 8];
      *(_OWORD *)(a4 + v7) = *(_OWORD *)&a2[v7 / 8];
      uint64_t v9 = (const std::string::value_type **)&a2[v7 / 8 + 2];
      if (SHIBYTE(a2[v7 / 8 + 4]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7 + 16), *v9, v8[3]);
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        *(void *)(a4 + v7 + 32) = a2[v7 / 8 + 4];
        *(_OWORD *)(a4 + v7 + 16) = v10;
      }
      uint64_t v11 = a4 + v7;
      uint64_t v12 = a4 + v7;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(a4 + v7 + 56) = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((void *)(a4 + v7 + 40), v8[5], v8[6], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[6] - v8[5]) >> 5));
      *(void *)(v11 + 64) = 0;
      *(void *)(v11 + 72) = 0;
      long long v13 = (void *)(a4 + v7 + 64);
      void v13[2] = 0;
      std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v13, v8[8], v8[9], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[9] - v8[8]) >> 5));
      *(void *)(a4 + v7 + 88) = v8[11];
      v7 += 96;
    }
    while (v8 + 12 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C9577A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  while (v11 != v10)
  {
    v11 -= 96;
    std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRInteraction>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRInteraction>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 112) = 0;
    *(void *)(v4 - 104) = 0;
    v4 -= 112;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 112);
    v2 -= 112;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(void *)(v4 + 40) = *(void *)(v2 + 40);
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(v2 + 48);
    *(void *)(v4 + 64) = *(void *)(v2 + 64);
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
    long long v6 = *(_OWORD *)(v2 + 72);
    *(void *)(v4 + 88) = *(void *)(v2 + 88);
    *(_OWORD *)(v4 + 72) = v6;
    *(void *)(v2 + 80) = 0;
    *(void *)(v2 + 88) = 0;
    *(void *)(v2 + 72) = 0;
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v2 + 96);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRInteraction>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    std::allocator<marrs::qr::orchestration::QRInteraction>::destroy[abi:ne180100](i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C9578234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  *(void *)(v37 + 16) = v38;
  a15 = (void **)&a37;
  std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::unique_ptr<marrs::qr::orchestration::QRRequest>::reset[abi:ne180100](a10);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<marrs::qr::orchestration::QRRequest>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    std::vector<marrs::qr::orchestration::QRInteraction>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRInteraction *,marrs::qr::orchestration::QRInteraction *,marrs::qr::orchestration::QRInteraction *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      if (a1 != a3)
      {
        uint64_t v8 = a1 + v6;
        std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t *)(a3 + v6), *(void **)(a1 + v6), *(void **)(a1 + v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + v6 + 8) - *(void *)(a1 + v6)) >> 5));
        std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>((uint64_t *)(v7 + 24), *(void **)(v8 + 24), *(void **)(v8 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 32) - *(void *)(v8 + 24)) >> 5));
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v7 + 48, *(std::string **)(v8 + 48), *(std::string **)(v8 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 5));
      }
      std::string::operator=((std::string *)(v7 + 72), (const std::string *)(a1 + v6 + 72));
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + v6 + 96);
      v6 += 112;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<marrs::qr::orchestration::QRUtterance>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(uint64_t *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 5) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v11 -= 96;
          std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](v11);
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    if (v13 >= 0x155555555555555) {
      unint64_t v15 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    std::vector<marrs::qr::orchestration::QRUtterance>::__vallocate[abi:ne180100](a1, v15);
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(v9, a2, a3, a1[1]);
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 5) < a4)
  {
    int v17 = &a2[4 * ((a1[1] - v10) >> 5)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>((uint64_t)a2, (uint64_t)v17, v10);
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRUtterance>,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*,marrs::qr::orchestration::QRUtterance*>(v9, v17, a3, a1[1]);
LABEL_16:
    a1[1] = v16;
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>((uint64_t)a2, (uint64_t)a3, v10);
  for (uint64_t i = a1[1]; i != v18; std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](i))
    i -= 96;
  a1[1] = v18;
}

void sub_1C95785C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C95785CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *,marrs::qr::orchestration::QRUtterance *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 72;
    do
    {
      uint64_t v6 = v5 - 72;
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 72);
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 - 56));
      if (a3 != v5 - 72)
      {
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a3 + 40, *(std::string **)(v5 - 32), *(std::string **)(v5 - 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v5 - 24) - *(void *)(v5 - 32)) >> 5));
        std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(a3 + 64, *(std::string **)(v5 - 8), *(std::string **)v5, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)v5 - *(void *)(v5 - 8)) >> 5));
      }
      *(void *)(a3 + 88) = *(void *)(v5 + 16);
      a3 += 96;
      v5 += 96;
    }
    while (v6 + 96 != a2);
  }
  return a3;
}

void sub_1C95787A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C9578BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C9578CB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  *(void *)(v45 - 96) = v44;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 96));
  if (a44 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C9578CA8);
}

void marrs::qr::orchestration::QRUtterance::~QRUtterance(void **this)
{
  uint64_t v2 = this + 8;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 5;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void sub_1C9579368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void *a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void **a53,char a54)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = a10;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a54;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  a53 = (void **)&a50;
  std::vector<marrs::qr::orchestration::QRUtterance>::__destroy_vector::operator()[abi:ne180100](&a53);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<marrs::qr::orchestration::QRToken>::reserve(uint64_t *result, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((result[2] - *result) >> 5) < a2)
  {
    if (a2 >= 0x19999999999999ALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 160 * v4;
    std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v7 = 0x199999999999999;
  }
  else {
    unint64_t v7 = v3;
  }
  v17[4] = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 + 160 * v2;
  v17[0] = v7;
  v17[1] = v9;
  v17[3] = v7 + 160 * v8;
  long long v10 = *a2;
  *(void *)(v9 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v9 = v10;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v11 = *(long long *)((char *)a2 + 24);
  *(void *)(v9 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(v9 + 24) = v11;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 56) = 0;
  *(void *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 48) = a2[3];
  *(void *)(v9 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  long long v12 = *(long long *)((char *)a2 + 72);
  *(_OWORD *)(v9 + 88) = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(v9 + 72) = v12;
  long long v13 = *(long long *)((char *)a2 + 104);
  *(void *)(v9 + 120) = *((void *)a2 + 15);
  *(_OWORD *)(v9 + 104) = v13;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 13) = 0;
  *(unsigned char *)(v9 + 128) = *((unsigned char *)a2 + 128);
  long long v14 = *(long long *)((char *)a2 + 136);
  *(void *)(v9 + 152) = *((void *)a2 + 19);
  *(_OWORD *)(v9 + 136) = v14;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 17) = 0;
  v17[2] = v9 + 160;
  std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)v17);
  return v15;
}

uint64_t *std::vector<marrs::qr::orchestration::QRUtterance>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      long long v8 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 96;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::qr::orchestration::QRUtterance>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::allocator<marrs::qr::orchestration::QRUtterance>::destroy[abi:ne180100](i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C9579AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C957A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (*(char *)(a11 + 39) < 0) {
    operator delete(*v55);
  }

  a25 = (void **)&a22;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);
  a25 = (void **)&a53;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&a25);

  _Unwind_Resume(a1);
}

void sub_1C957A378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  *(void *)(v27 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));

  _Unwind_Resume(a1);
}

void sub_1C957A53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1C957A6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  if (a23 < 0) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, long long *a2, long long *a3, long long **a4, std::string::value_type a5, std::string::value_type a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  this[3].__r_.__value_.__s.__data_[0] = a5;
  this[3].__r_.__value_.__s.__data_[1] = a6;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  this[5].__r_.__value_.__s.__data_[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&this[5].__r_.__value_.__r.__words[2], "");
  return this;
}

void sub_1C957A874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C957A9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  marrs::qr::orchestration::QRToken::~QRToken(v16);
  _Unwind_Resume(a1);
}

std::string *marrs::qr::orchestration::QRToken::QRToken(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  LOWORD(this[3].__r_.__value_.__l.__data_) = 1;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  this[5].__r_.__value_.__s.__data_[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&this[5].__r_.__value_.__r.__words[2], "");
  return this;
}

void sub_1C957AAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*(void **)(v2 + 104));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_1C957AB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957ABD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957AD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p)
{
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C957AFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(__n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v3);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v3);
    __v.__end_cap_.__value_ = &__v.__first_[v4];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1C957B120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C957B24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957B398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C957B5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1C957B7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C957B878(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, long long buf, int a12, __int16 a13, __int16 a14, long long a15)
{
  std::exception_ptr::~exception_ptr(&a10);
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = v17[4];
      uint64_t v22 = *((void *)v17 + 1);
      uint64_t v23 = (*(uint64_t (**)(_DWORD *))(*(void *)v17 + 16))(v17);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v22;
      a14 = 1024;
      LODWORD(a15) = v21;
      WORD2(a15) = 2080;
      *(void *)((char *)&a15 + 6) = v23;
      _os_log_error_impl(&dword_1C9555000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else if (a2 == 2)
  {
    float v19 = __cxa_begin_catch(a1);
    uint64_t v18 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v24 = v19[4];
      uint64_t v25 = *((void *)v19 + 1);
      uint64_t v26 = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 16))(v19);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v25;
      a14 = 1024;
      LODWORD(a15) = v24;
      WORD2(a15) = 2080;
      *(void *)((char *)&a15 + 6) = v26;
      _os_log_error_impl(&dword_1C9555000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    BOOL v20 = __cxa_begin_catch(a1);
    uint64_t v18 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "+[PredictorUtils handlePredictException:]";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v27;
      _os_log_error_impl(&dword_1C9555000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: Unknown error making prediction: %s", (uint8_t *)&buf, 0x16u);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C957B830);
}

void sub_1C957BB84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, long long buf, int a12, __int16 a13, __int16 a14, long long a15)
{
  std::exception_ptr::~exception_ptr(&a10);
  if (a2 == 2)
  {
    int v17 = __cxa_begin_catch(a1);
    uint64_t v18 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[4];
      uint64_t v21 = *((void *)v17 + 1);
      uint64_t v22 = (*(uint64_t (**)(_DWORD *))(*(void *)v17 + 16))(v17);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "+[PredictorUtils handleInitException:]";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v21;
      a14 = 1024;
      LODWORD(a15) = v20;
      WORD2(a15) = 2080;
      *(void *)((char *)&a15 + 6) = v22;
      _os_log_error_impl(&dword_1C9555000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: %s %d: %s", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    float v19 = __cxa_begin_catch(a1);
    uint64_t v18 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "+[PredictorUtils handleInitException:]";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v23;
      _os_log_error_impl(&dword_1C9555000, v18, OS_LOG_TYPE_ERROR, "%s [ERR]: Unknown error loading model bundle: %s", (uint8_t *)&buf, 0x16u);
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C957BB3CLL);
}

unint64_t tokenIntersection(void *a1, void *a2)
{
  unint64_t v2 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v3 = a1 + 1;
  uint64_t v4 = (void *)*a1;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = (void *)*a2;
  int v20 = (void **)&v17;
  BOOL v7 = v4 == a1 + 1 || v6 == v5;
  if (!v7)
  {
    do
    {
      if (*((char *)v4 + 55) >= 0) {
        long long v8 = (const char *)(v4 + 4);
      }
      else {
        long long v8 = (const char *)v4[4];
      }
      if (*((char *)v6 + 55) >= 0) {
        uint64_t v9 = (const char *)(v6 + 4);
      }
      else {
        uint64_t v9 = (const char *)v6[4];
      }
      if (strcasecmp(v8, v9) < 0)
      {
        uint64_t v10 = (void *)v4[1];
        if (v10)
        {
          do
          {
            uint64_t v4 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            long long v11 = v4;
            uint64_t v4 = (void *)v4[2];
          }
          while ((void *)*v4 != v11);
        }
      }
      else
      {
        if (strcasecmp(v9, v8) < 0)
        {
          long long v12 = v4;
        }
        else
        {
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v20, (long long *)v4 + 2);
          long long v13 = (void *)v4[1];
          if (v13)
          {
            do
            {
              long long v12 = v13;
              long long v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              long long v12 = (void *)v4[2];
              BOOL v7 = *v12 == (void)v4;
              uint64_t v4 = v12;
            }
            while (!v7);
          }
        }
        long long v14 = (void *)v6[1];
        if (v14)
        {
          do
          {
            uint64_t v6 = v14;
            long long v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = v6;
            uint64_t v6 = (void *)v6[2];
          }
          while ((void *)*v6 != v15);
        }
        uint64_t v4 = v12;
      }
    }
    while (v4 != v3 && v6 != v5);
    unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
  }
  int v20 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v2;
}

void sub_1C957BED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void getDigitsInString(void *a1, unsigned __int8 *a2)
{
  unint64_t v2 = a2;
  if ((char)a2[23] < 0)
  {
    unint64_t v2 = *(unsigned __int8 **)a2;
    uint64_t v3 = *((void *)a2 + 1);
  }
  else
  {
    uint64_t v3 = a2[23];
  }
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    BOOL v7 = (char *)&v2[v3];
    uint64_t v8 = MEMORY[0x1E4F14390];
    while (1)
    {
      int v9 = (char)*v2;
      if ((v9 & 0x80000000) == 0 && (*(_DWORD *)(v8 + 4 * *v2 + 60) & 0x400) != 0)
      {
        if (v6 >= v5)
        {
          long long v11 = &v6[-v4];
          uint64_t v12 = (uint64_t)&v6[-v4 + 1];
          if (v12 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (2 * (uint64_t)&v5[-v4] > (unint64_t)v12) {
            uint64_t v12 = 2 * (void)&v5[-v4];
          }
          if ((unint64_t)&v5[-v4] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v13 = v12;
          }
          if (v13) {
            long long v14 = (char *)operator new(v13);
          }
          else {
            long long v14 = 0;
          }
          uint64_t v15 = &v11[(void)v14];
          uint64_t v16 = &v11[(void)v14];
          *uint64_t v16 = v9;
          uint64_t v10 = v16 + 1;
          if (v6 != (char *)v4)
          {
            uint64_t v17 = &v6[~v4];
            do
            {
              char v18 = *--v6;
              (v17--)[(void)v14] = v18;
            }
            while (v6 != (char *)v4);
            uint64_t v15 = v14;
          }
          uint64_t v5 = &v14[v13];
          if (v4) {
            operator delete((void *)v4);
          }
          unint64_t v4 = (unint64_t)v15;
          goto LABEL_11;
        }
        *v6++ = v9;
      }
      uint64_t v10 = v6;
LABEL_11:
      ++v2;
      uint64_t v6 = v10;
      if (v2 == (unsigned __int8 *)v7) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v10 = 0;
  unint64_t v4 = 0;
LABEL_30:
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a1, (char *)v4, v10, (unint64_t)&v10[-v4]);
  if (v4)
  {
    operator delete((void *)v4);
  }
}

void sub_1C957C08C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char a2, char *a3)
{
  uint64_t v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
  BOOL v7 = std::locale::use_facet(a1, MEMORY[0x1E4FBA258]);
  int v8 = ((uint64_t (*)(const std::locale::facet *, void))v7->__vftable[1].~facet)(v7, a2);
  uint64_t v9 = *a3;
  uint64_t v10 = std::locale::use_facet(a1, v6);
  return v8 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v10->__vftable[1].~facet)(v10, v9);
}

void marrs::mrr::mr::OrdinalFilter::filterEntities(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  memset(v28, 0, sizeof(v28));
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (!v5) {
    goto LABEL_33;
  }
  if (!a1[25] || !a1[22])
  {
    uint64_t v22 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
LABEL_33:
      *a4 = 0;
      a4[24] = 0;
      goto LABEL_34;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v23 = "[Verbal MR] Failed to load Verbal MR asset. The verbalMap is empty, skipping verbal MR";
LABEL_32:
    _os_log_impl(&dword_1C9555000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 2u);
    goto LABEL_33;
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    uint64_t v22 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_33;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v23 = "[Verbal MR] Empty MRR Entities in the input, return empty";
    goto LABEL_32;
  }
  int v24 = a4;
  *(void *)std::string buf = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  long long v14 = 0;
  unint64_t v15 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  do
  {
    if (*(_DWORD *)(v9 + 216 * v15 + 4) == 1)
    {
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = v14 - v12;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v13 - (void)v12) >> 2 > v17) {
          unint64_t v17 = (uint64_t)(v13 - (void)v12) >> 2;
        }
        if (v13 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18)
        {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
          long long v14 = v11;
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v20 = (unint64_t *)(v18 + 8 * v16);
        *int v20 = v15;
        long long v11 = v20 + 1;
        while (v14 != v12)
        {
          unint64_t v21 = *--v14;
          *--int v20 = v21;
        }
        unint64_t v13 = v18 + 8 * v19;
        if (v12) {
          operator delete(v12);
        }
        uint64_t v12 = v20;
      }
      else
      {
        unint64_t *v14 = v15;
        long long v11 = v14 + 1;
      }
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      long long v14 = v11;
    }
    ++v15;
  }
  while (v15 < 0x84BDA12F684BDA13 * ((v8 - v9) >> 3));
  uint64_t v26 = v11;
  unint64_t v27 = v13;
  *(void *)std::string buf = v12;
  marrs::mrr::mr::OrdinalFilter::ordinalReferenceResolution(v24, a1, a3);
  if (v12) {
    operator delete(v12);
  }
LABEL_34:
  *(void *)std::string buf = v28;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C957C398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  a11 = (void **)&a14;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::OrdinalFilter::ordinalReferenceResolution(unsigned char *a1, void *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)a2[23];
  unint64_t v18 = a2 + 24;
  if (v4 != a2 + 24)
  {
    uint64_t v23 = a2 + 21;
    do
    {
      uint64_t v22 = v4[7];
      uint64_t v21 = v4[8];
      if (v22 != v21)
      {
        uint64_t v19 = v4;
        int v20 = v4 + 4;
        do
        {
          uint64_t v5 = (void *)*v23;
          if (*v23)
          {
            uint64_t v6 = v23;
            do
            {
              BOOL v7 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v5 + 4, v20);
              uint64_t v8 = v5 + 1;
              if (!v7)
              {
                uint64_t v8 = v5;
                uint64_t v6 = v5;
              }
              uint64_t v5 = (void *)*v8;
            }
            while (*v8);
            if (v6 != v23
              && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v20, v6 + 4))
            {
              memset(v29, 0, sizeof(v29));
              std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v29, v6[7], v6[8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[8] - v6[7]) >> 3));
              if (*(void *)(v22 + 24) != v22 + 32)
              {
                std::regex_traits<char>::regex_traits(&v25);
                uint64_t v28 = 0;
                long long v26 = 0u;
                long long v27 = 0u;
                std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
              }
              v30.__begin_ = (std::vector<std::csub_match>::pointer)v29;
              std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
            }
          }
          uint64_t v9 = MRRLoggerForCategory(2);
          unint64_t v4 = v19;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(a3 + 23) >= 0) {
              uint64_t v10 = (std::sub_match<const char *> *)a3;
            }
            else {
              uint64_t v10 = *(std::sub_match<const char *> **)a3;
            }
            LODWORD(v30.__begin_) = 136315138;
            *(std::vector<std::csub_match>::pointer *)((char *)&v30.__begin_ + 4) = v10;
            _os_log_impl(&dword_1C9555000, v9, OS_LOG_TYPE_DEBUG, "[Verbal MR] - No ordinal index found for mention '%s'", (uint8_t *)&v30, 0xCu);
          }
          v22 += 48;
        }
        while (v22 != v21);
      }
      long long v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v4[2];
          BOOL v13 = *v12 == (void)v4;
          unint64_t v4 = v12;
        }
        while (!v13);
      }
      unint64_t v4 = v12;
    }
    while (v12 != v18);
  }
  long long v14 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v15 = (std::sub_match<const char *> *)a3;
    }
    else {
      unint64_t v15 = *(std::sub_match<const char *> **)a3;
    }
    LODWORD(v30.__begin_) = 136315138;
    *(std::vector<std::csub_match>::pointer *)((char *)&v30.__begin_ + 4) = v15;
    _os_log_impl(&dword_1C9555000, v14, OS_LOG_TYPE_DEBUG, "[Verbal MR] - No ordinal index found for mention '%s'", (uint8_t *)&v30, 0xCu);
  }
  uint64_t v16 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v17 = (std::sub_match<const char *> *)a3;
    }
    else {
      unint64_t v17 = *(std::sub_match<const char *> **)a3;
    }
    LODWORD(v30.__begin_) = 136315138;
    *(std::vector<std::csub_match>::pointer *)((char *)&v30.__begin_ + 4) = v17;
    _os_log_impl(&dword_1C9555000, v16, OS_LOG_TYPE_ERROR, "[Verbal MR] mention '%s' not matches with the ordinal keywords map", (uint8_t *)&v30, 0xCu);
  }
  *a1 = 0;
  a1[24] = 0;
}

void sub_1C957E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  operator delete(v53);
  if (a53 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        marrs::mrr::mr::MRREntity::~MRREntity(v4 - 27);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C957E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  int locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(this);
}

void std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      unint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)uint64_t v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v42, 0, 21);
    uint64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    std::vector<std::csub_match>::size_type v13 = v45;
    *((_DWORD *)v45 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v45 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v45;
    *((void *)v45 - 2) = v6;
    unint64_t v39 = a3;
    signed int v15 = a3 - a2;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        unint64_t v18 = v14 - 16;
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v19 = v14 - 96;
        if (v17) {
          (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              uint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            std::pair<const char *, const char *> v21 = v45 - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)v45 - 12);
            uint64_t v45 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *((_OWORD *)v14 - 5);
            *(_OWORD *)uint64_t v40 = *(_OWORD *)v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *(void *)v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, char *))(**(void **)v18 + 24))(*(void *)v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            int v24 = v45;
            if ((unint64_t)v45 >= v46)
            {
              uint64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)uint64_t v45 = *(_OWORD *)v40;
              *((_OWORD *)v24 + 1) = v25;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((_OWORD *)v24 + 2) = *(_OWORD *)&v40[32];
              *((void *)v24 + 6) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *((void *)v24 + 9) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *((void *)v24 + 10) = v26;
              uint64_t v45 = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            std::pair<const char *, const char *> v14 = v45;
            ++v16;
            if (v44 == v45) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)uint64_t v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_1C957F068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v7 = (char *)operator new(96 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  signed int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      unint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    signed int v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      uint64_t v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      unint64_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        std::pair<const char *, const char *> *v18 = v20;
        unint64_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    unint64_t v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    unint64_t v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C957F584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C957F698(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C957F70C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C957F76C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        unint64_t v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        uint64_t v29 = (char *)*((void *)&v85 + 1);
        uint64_t v28 = (char *)v85;
        uint64_t v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v37);
              uint64_t v40 = v38;
              uint64_t v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                std::string v43 = v29;
                uint64_t v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)std::string v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              uint64_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              uint64_t v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unsigned int v34 = &v30[8 * (v33 >> 1)];
              uint64_t v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        std::vector<std::string>::pointer v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      unint64_t v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      __int16 v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          unint64_t v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            __int16 v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          std::string v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v77);
        unint64_t v52 = &v51[8 * (v77 >> 2)];
        char v54 = &v51[8 * v78];
        unint64_t v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          int v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)int v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        __int16 v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            std::pair<const char *, const char *> v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            std::pair<const char *, const char *> v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          std::string v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
        unint64_t v52 = &v51[8 * (v50 >> 2)];
        char v54 = &v51[8 * v53];
        uint64_t v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          uint64_t v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)uint64_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 48) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1C957FCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          unint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *(void *)(a1 + 40) = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    uint64_t v11 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v14) {
      *(void *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        std::vector<std::csub_match>::size_type v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)std::vector<std::csub_match>::size_type v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      std::pair<const char *, const char *> v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
      std::vector<std::csub_match>::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x1CB786D10]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1C95801B4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_1C9580600(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C95806A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    BOOL v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != a3)
  {
    if (*v8 != 124) {
      return v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      BOOL v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v10 == v8) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == (char *)a3) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  BOOL v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    BOOL v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C95809B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F23C73B8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1CB786E50);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1CB786E50);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9580DF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    int64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!*(_DWORD *)(a1 + 36)) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_32:
      int64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
    {
      int64_t v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      int64_t v14 = (unsigned __int8 *)&a2[v16];
    }
    if (v14 != (unsigned __int8 *)a2)
    {
LABEL_25:
      if (v14 == (unsigned __int8 *)a2 && v14 != (unsigned __int8 *)a3)
      {
        int v17 = *a2;
        if (v17 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor((std::basic_regex<char> *)a1);
          goto LABEL_32;
        }
        if (v17 != 40)
        {
          if (v17 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor((std::basic_regex<char> *)a1);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
        unsigned int v18 = *(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 36);
        std::vector<std::csub_match>::size_type v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v19 == a3 || (uint64_t v20 = v19, *v19 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v18);
        --*(_DWORD *)(a1 + 36);
        int64_t v14 = (unsigned __int8 *)(v20 + 1);
      }
      if (v14 != (unsigned __int8 *)a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
  int64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v21 = (*(_DWORD *)(a1 + 28) + 1);
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), v21);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C95812A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              size_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            size_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1C9581790(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C95818A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9581900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unsigned int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unsigned int v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);
  JUMPOUT(0x1CB786E50);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_229;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_229;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_229;
    }
    uint64_t v64 = (void **)(v7 + 88);
    uint64_t v65 = v7 + 16;
    uint64_t v66 = a3 - 4;
    while (1)
    {
      BOOL v8 = (char *)v5;
      if ((char *)v5 == a3)
      {
        uint64_t v10 = a3;
        goto LABEL_132;
      }
      int v9 = *(unsigned __int8 *)v5;
      uint64_t v10 = (char *)v5;
      if (v9 != 93) {
        break;
      }
LABEL_132:
      uint64_t v5 = (uint64_t)v10;
LABEL_133:
      if (v8 == (char *)v5)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_229:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v70, 0, sizeof(v70));
    if ((char *)(v5 + 1) != a3 && v9 == 91)
    {
      int v11 = *(unsigned __int8 *)(v5 + 1);
      switch(v11)
      {
        case '.':
          uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v70);
          uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v70.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_34:
            if (v10 != a3)
            {
              int v16 = *v10;
              if (v16 != 93)
              {
                size_t v18 = v10 + 1;
                if (v10 + 1 != a3 && v16 == 45 && *v18 != 93)
                {
                  memset(&v69, 0, sizeof(v69));
                  BOOL v19 = v10 + 2;
                  if (v10 + 2 != a3 && *v18 == 91 && *v19 == 46)
                  {
                    BOOL v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)&v69);
                    goto LABEL_136;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v18) = *v18;
                    if (v18 == 92)
                    {
                      if (v5) {
                        BOOL v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, &v69);
                      }
                      else {
                        BOOL v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &v69, v7);
                      }
LABEL_136:
                      BOOL v19 = v20;
LABEL_137:
                      std::string v68 = v70;
                      std::string __p = v69;
                      memset(&v69, 0, sizeof(v69));
                      memset(&v70, 0, sizeof(v70));
                      if (*(unsigned char *)(v7 + 170))
                      {
                        if (*(unsigned char *)(v7 + 169))
                        {
                          for (std::string::size_type i = 0; ; ++i)
                          {
                            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
                            {
                              if (i >= v68.__r_.__value_.__l.__size_)
                              {
LABEL_149:
                                for (std::string::size_type j = 0; ; ++j)
                                {
                                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    if (j >= __p.__r_.__value_.__l.__size_) {
                                      goto LABEL_195;
                                    }
                                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  }
                                  else
                                  {
                                    if (j >= HIBYTE(__p.__r_.__value_.__r.__words[2])) {
                                      goto LABEL_195;
                                    }
                                    p_p = &__p;
                                  }
                                  std::string::value_type v46 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), p_p->__r_.__value_.__s.__data_[j]);
                                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::vector<std::string>::pointer v47 = &__p;
                                  }
                                  else {
                                    std::vector<std::string>::pointer v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                  }
                                  v47->__r_.__value_.__s.__data_[j] = v46;
                                }
                              }
                              uint64_t v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
                            }
                            else
                            {
                              if (i >= HIBYTE(v68.__r_.__value_.__r.__words[2])) {
                                goto LABEL_149;
                              }
                              uint64_t v41 = &v68;
                            }
                            std::string::value_type v42 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v41->__r_.__value_.__s.__data_[i]);
                            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              std::string v43 = &v68;
                            }
                            else {
                              std::string v43 = (std::string *)v68.__r_.__value_.__r.__words[0];
                            }
                            v43->__r_.__value_.__s.__data_[i] = v42;
                          }
                        }
                        std::string::size_type v57 = 0;
                        if ((*((unsigned char *)&v68.__r_.__value_.__s + 23) & 0x80) != 0) {
                          goto LABEL_186;
                        }
                        while (v57 < HIBYTE(v68.__r_.__value_.__r.__words[2]))
                        {
                          while (1)
                          {
                            ++v57;
                            if ((*((unsigned char *)&v68.__r_.__value_.__s + 23) & 0x80) == 0) {
                              break;
                            }
LABEL_186:
                            if (v57 >= v68.__r_.__value_.__l.__size_) {
                              goto LABEL_189;
                            }
                          }
                        }
LABEL_189:
                        std::string::size_type v58 = 0;
                        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
                          goto LABEL_192;
                        }
                        while (v58 < HIBYTE(__p.__r_.__value_.__r.__words[2]))
                        {
                          while (1)
                          {
                            ++v58;
                            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
                              break;
                            }
LABEL_192:
                            if (v58 >= __p.__r_.__value_.__l.__size_) {
                              goto LABEL_195;
                            }
                          }
                        }
LABEL_195:
                        std::string::size_type v59 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
                        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          __int16 v60 = &v68;
                        }
                        else {
                          __int16 v60 = (std::string *)v68.__r_.__value_.__r.__words[0];
                        }
                        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v59 = v68.__r_.__value_.__l.__size_;
                        }
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v72, v65, (char *)v60, (char *)v60 + v59);
                        std::string::size_type v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          __int16 v62 = &__p;
                        }
                        else {
                          __int16 v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        }
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v61 = __p.__r_.__value_.__l.__size_;
                        }
                        std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&__s, v65, (char *)v62, (char *)v62 + v61);
                        std::string v73 = v72;
                        memset(&v72, 0, sizeof(v72));
                        std::string v74 = __s;
                        memset(&__s, 0, sizeof(__s));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v64, (long long *)&v73);
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v74.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v73.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__s.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                        {
                          uint64_t v56 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_213:
                          operator delete(v56);
                        }
                      }
                      else
                      {
                        std::string::size_type v48 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
                        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v48 = v68.__r_.__value_.__l.__size_;
                        }
                        if (v48 != 1) {
                          goto LABEL_232;
                        }
                        std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
                        }
                        if (v49 != 1) {
LABEL_232:
                        }
                          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                        if (*(unsigned char *)(v7 + 169))
                        {
                          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            unint64_t v50 = &v68;
                          }
                          else {
                            unint64_t v50 = (std::string *)v68.__r_.__value_.__r.__words[0];
                          }
                          std::string::value_type v51 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v50->__r_.__value_.__s.__data_[0]);
                          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            unint64_t v52 = &v68;
                          }
                          else {
                            unint64_t v52 = (std::string *)v68.__r_.__value_.__r.__words[0];
                          }
                          v52->__r_.__value_.__s.__data_[0] = v51;
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v53 = &__p;
                          }
                          else {
                            uint64_t v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          std::string::value_type v54 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), v53->__r_.__value_.__s.__data_[0]);
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v55 = &__p;
                          }
                          else {
                            uint64_t v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          v55->__r_.__value_.__s.__data_[0] = v54;
                        }
                        std::string v73 = v68;
                        memset(&v68, 0, sizeof(v68));
                        std::string v74 = __p;
                        memset(&__p, 0, sizeof(__p));
                        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v64, (long long *)&v73);
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v74.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                        {
                          uint64_t v56 = (void *)v73.__r_.__value_.__r.__words[0];
                          goto LABEL_213;
                        }
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v68.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v69.__r_.__value_.__l.__data_);
                      }
                      char v28 = 1;
LABEL_129:
                      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v70.__r_.__value_.__l.__data_);
                      }
                      uint64_t v10 = v19;
                      if ((v28 & 1) == 0) {
                        goto LABEL_133;
                      }
                      goto LABEL_132;
                    }
                  }
                  else
                  {
                    LOBYTE(v18) = *v18;
                  }
                  std::string::operator=(&v69, (std::string::value_type)v18);
                  goto LABEL_137;
                }
              }
            }
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v70.__r_.__value_.__l.__size_)
              {
                if (v70.__r_.__value_.__l.__size_ == 1)
                {
                  int v17 = (std::string *)v70.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v17->__r_.__value_.__s.__data_[0]);
LABEL_81:
                  char v28 = 1;
                  BOOL v19 = v10;
                  goto LABEL_129;
                }
                int v17 = (std::string *)v70.__r_.__value_.__r.__words[0];
LABEL_80:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
                goto LABEL_81;
              }
              operator delete(v70.__r_.__value_.__l.__data_);
            }
            else if (*((unsigned char *)&v70.__r_.__value_.__s + 23))
            {
              int v17 = &v70;
              if (HIBYTE(v70.__r_.__value_.__r.__words[2]) == 1) {
                goto LABEL_43;
              }
              goto LABEL_80;
            }
            goto LABEL_132;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            int v14 = *v10;
            if (v14 == 92)
            {
              BOOL v15 = v10 + 1;
              if (v5)
              {
                uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v15, a3, &v70);
              }
              else
              {
                uint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v15, (std::basic_regex<char> *)a3, &v70, v7);
                uint64_t v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v14) = *v10;
          }
          std::string::operator=(&v70, v14);
          ++v10;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_228;
          }
          for (unint64_t k = 0; ; ++k)
          {
            char v13 = (char *)(v5 + k + 2);
            if (*v13 == 58 && *(unsigned char *)(v5 + k + 3) == 93) {
              break;
            }
            if (&v66[-v5] == (char *)k) {
              goto LABEL_228;
            }
          }
          if (v13 == a3) {
LABEL_228:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v23 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v73, (char *)(v5 + 2), (char *)(v5 + k + 2), k);
          std::string::size_type v24 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v25 = &v73;
          }
          else {
            unint64_t v25 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v24 = v73.__r_.__value_.__l.__size_;
          }
          (*(void (**)(void, std::string *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v25, (char *)v25 + v24);
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v26 = &v73;
          }
          else {
            int v26 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v26, v23 & 1);
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v73.__r_.__value_.__l.__data_);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v28 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_128;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_228;
          }
          for (uint64_t m = 0; ; ++m)
          {
            char v13 = &m[v5 + 2];
            if (*v13 == 61 && m[v5 + 3] == 93) {
              break;
            }
            if (&v66[-v5] == m) {
              goto LABEL_228;
            }
          }
          if (v13 == a3) {
            goto LABEL_228;
          }
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v72, a1, (char *)(v5 + 2), &m[v5 + 2]);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v29 = v72.__r_.__value_.__l.__size_;
            if (!v72.__r_.__value_.__l.__size_) {
LABEL_230:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            uint64_t v30 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v29 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
            if (!*((unsigned char *)&v72.__r_.__value_.__s + 23)) {
              goto LABEL_230;
            }
            uint64_t v30 = &v72;
          }
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v73, (char *)v30, (char *)v30 + v29, v29);
          (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&__s);
          std::string::size_type v31 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = __s.__r_.__value_.__l.__size_;
          }
          if (v31 != 1)
          {
            if (v31 == 12)
            {
              p_s = &__s;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              }
              p_s->__r_.__value_.__s.__data_[11] = p_s->__r_.__value_.__s.__data_[3];
            }
            else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              *__s.__r_.__value_.__l.__data_ = 0;
              __s.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              __s.__r_.__value_.__s.__data_[0] = 0;
              *((unsigned char *)&__s.__r_.__value_.__s + 23) = 0;
            }
          }
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v73.__r_.__value_.__l.__data_);
          }
          std::string::size_type v33 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v33 = __s.__r_.__value_.__l.__size_;
          }
          if (v33)
          {
            unint64_t v34 = *(void *)(v7 + 144);
            if (v34 >= *(void *)(v7 + 152))
            {
              std::vector<std::string>::pointer v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(v7 + 136), (long long *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v35 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                *(void *)(v34 + 16) = *((void *)&__s.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v34 = v35;
              }
              std::vector<std::string>::pointer v38 = (std::vector<std::string>::pointer)(v34 + 24);
              *(void *)(v7 + 144) = v34 + 24;
            }
            *(void *)(v7 + 144) = v38;
          }
          else
          {
            std::string::size_type v36 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
            if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v36 = v72.__r_.__value_.__l.__size_;
            }
            if (v36 == 2)
            {
              uint64_t v39 = &v72;
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v39 = (std::string *)v72.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v39->__r_.__value_.__s.__data_[0], v39->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v36 != 1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              unint64_t v37 = &v72;
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v37 = (std::string *)v72.__r_.__value_.__r.__words[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v37->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          char v28 = 0;
LABEL_128:
          uint64_t v5 = (uint64_t)(v13 + 2);
          BOOL v19 = v8;
          goto LABEL_129;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    uint64_t v10 = v8;
    goto LABEL_28;
  }
  return a2;
}

void sub_1C9582A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9582C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1C9582DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  int v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x1CB786E50](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v7[(void)v11];
        BOOL v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          size_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          uint64_t v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      std::string::size_type v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v24[(void)v11];
        BOOL v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          uint64_t v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  int v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v19 = &v14[(void)v11];
  BOOL v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    char v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  unint64_t v6 = a2;
  for (i = a2; ; unint64_t v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 97)
  {
    if (locale_low <= 82)
    {
      if (LOBYTE(this->__traits_.__loc_.__locale_))
      {
        if (locale_low == 68)
        {
          int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_23:
          *(_DWORD *)(a5 + 164) = v8;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      std::string::value_type v15 = 0;
      unint64_t v16 = a4;
      goto LABEL_21;
    }
    if (locale_low == 83)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_23;
    }
    if (locale_low != 87) {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      unint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *unint64_t v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_55:
        *(void *)(a5 + 72) = v14;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      unint64_t v26 = *(void *)(a5 + 64);
      size_t v27 = &v13[-v26];
      uint64_t v28 = (uint64_t)&v13[-v26 + 1];
      if (v28 >= 0)
      {
        unint64_t v29 = v12 - v26;
        if (2 * v29 > v28) {
          uint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v30 = v28;
        }
        if (v30) {
          char v31 = operator new(v30);
        }
        else {
          char v31 = 0;
        }
        std::string::size_type v33 = &v31[v30];
        v27[(void)v31] = v11;
        uint64_t v14 = (uint64_t)&v27[(void)v31 + 1];
        if (v13 == (unsigned char *)v26)
        {
          char v31 = &v27[(void)v31];
        }
        else
        {
          unint64_t v34 = &v13[~v26];
          do
          {
            char v35 = *--v13;
            (v34--)[(void)v31] = v35;
          }
          while (v13 != (unsigned char *)v26);
          unint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v31;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v33;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_55;
      }
LABEL_80:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    BOOL v19 = *(unsigned char **)(a5 + 72);
    unint64_t v18 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v19 >= v18)
      {
        unint64_t v20 = *(void *)(a5 + 64);
        size_t v21 = &v19[-v20];
        uint64_t v22 = (uint64_t)&v19[-v20 + 1];
        if (v22 < 0) {
          goto LABEL_80;
        }
        unint64_t v23 = v18 - v20;
        if (2 * v23 > v22) {
          uint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v22;
        }
        if (v24) {
          uint64_t v25 = operator new(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v41 = &v21[(void)v25];
        std::string::value_type v42 = (char *)v25 + v24;
        v21[(void)v25] = 95;
        uint64_t v32 = (uint64_t)&v21[(void)v25 + 1];
        if (v19 != (unsigned char *)v20)
        {
          std::string v43 = &v19[~v20];
          do
          {
            char v44 = *--v19;
            (v43--)[(void)v25] = v44;
          }
          while (v19 != (unsigned char *)v20);
LABEL_73:
          BOOL v19 = *(unsigned char **)(a5 + 64);
          goto LABEL_75;
        }
        goto LABEL_74;
      }
    }
    else if ((unint64_t)v19 >= v18)
    {
      unint64_t v36 = *(void *)(a5 + 64);
      unint64_t v37 = &v19[-v36];
      uint64_t v38 = (uint64_t)&v19[-v36 + 1];
      if (v38 < 0) {
        goto LABEL_80;
      }
      unint64_t v39 = v18 - v36;
      if (2 * v39 > v38) {
        uint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v40 = v38;
      }
      if (v40) {
        uint64_t v25 = operator new(v40);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v41 = &v37[(void)v25];
      std::string::value_type v42 = (char *)v25 + v40;
      v37[(void)v25] = 95;
      uint64_t v32 = (uint64_t)&v37[(void)v25 + 1];
      if (v19 != (unsigned char *)v36)
      {
        uint64_t v45 = &v19[~v36];
        do
        {
          char v46 = *--v19;
          (v45--)[(void)v25] = v46;
        }
        while (v19 != (unsigned char *)v36);
        goto LABEL_73;
      }
LABEL_74:
      uint64_t v25 = v41;
LABEL_75:
      *(void *)(a5 + 64) = v25;
      *(void *)(a5 + 72) = v32;
      *(void *)(a5 + 80) = v42;
      if (v19) {
        operator delete(v19);
      }
      goto LABEL_77;
    }
    *BOOL v19 = 95;
    uint64_t v32 = (uint64_t)(v19 + 1);
LABEL_77:
    *(void *)(a5 + 72) = v32;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 114)
  {
    if (locale_low == 98)
    {
      unint64_t v16 = a4;
      std::string::value_type v15 = 8;
LABEL_21:
      std::string::operator=(v16, v15);
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    }
    if (locale_low != 100) {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    int v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_25:
    *(_DWORD *)(a5 + 160) = v9;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low == 115)
  {
    int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_25;
  }
  if (locale_low != 119) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
  }
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          unint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            unint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        unint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      unint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    int v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        size_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        size_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        size_t v24 = v25 + 1;
        unint64_t v39 = *(char **)(a1 + 112);
        size_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  int v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    _WORD *v8 = v6;
    size_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  size_t v24 = v25 + 1;
  uint64_t v28 = *(char **)(a1 + 112);
  size_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  size_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C9583A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, long long *a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *((void *)v14 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v14 = *a2;
    uint64_t v15 = &v13[48 * v12];
    long long v16 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v16;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    unsigned __int8 v8 = v14 + 48;
    uint64_t v17 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v18 - 3);
        *((void *)v14 - 4) = *((void *)v18 - 4);
        *((_OWORD *)v14 - 3) = v19;
        *((void *)v18 - 5) = 0;
        *((void *)v18 - 4) = 0;
        *((void *)v18 - 6) = 0;
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 48;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 1) = 0;
        *((void *)v18 - 3) = 0;
        v18 -= 48;
      }
      while (v18 != v17);
      uint64_t v18 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      while ((char *)v21 != v18)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unsigned __int8 v8 = v4 + 48;
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9583C58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9583CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1C9583E38(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  unint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x1CB786E50](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C7118;
  std::locale::~locale(a1 + 2);
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C7118;
  std::locale::~locale(a1 + 2);
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C70D0;
  std::locale::~locale(a1 + 2);
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C70D0;
  std::locale::~locale(a1 + 2);
  int locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  uint64_t v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            long long v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            long long v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            long long v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              uint64_t v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            long long v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        long long v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          long long v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          long long v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_64;
    }
    unsigned int v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1C95847B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9584830(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9584888(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_236;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_66;
  }
  char v6 = *current;
  LOBYTE(v126) = *current;
  char v7 = current[1];
  HIBYTE(v126) = v7;
  if (this->__icase_)
  {
    LOBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v126) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v126;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v127, (const char *)&__s);
  std::string __p = v127;
  std::string::size_type size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v127.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v127);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v127;
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v127.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v127.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_178;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_178:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v41) {
      goto LABEL_17;
    }
LABEL_66:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_67;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_66;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v126 != *(p_second - 1) || HIBYTE(v126) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_233;
  }
LABEL_26:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v126, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v18 = this->__ranges_.__begin_;
    char v19 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v20 = (char *)this->__ranges_.__end_ - (char *)v18;
    if (v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = v20 / 48;
      char v116 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = __s.__r_.__value_.__l.__size_;
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s = &__s;
      }
      else {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v22 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v20 / 48;
      }
      uint64_t v26 = (unsigned __int8 *)&v18->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v27 = 1;
      while (1)
      {
        int v28 = (char)*(v26 - 24);
        if (v28 >= 0) {
          size_t v29 = *(v26 - 24);
        }
        else {
          size_t v29 = *(void *)(v26 - 39);
        }
        if (v28 >= 0) {
          uint64_t v30 = (char *)(v26 - 47);
        }
        else {
          uint64_t v30 = *(char **)(v26 - 47);
        }
        if (v29 >= v23) {
          size_t v31 = v23;
        }
        else {
          size_t v31 = v29;
        }
        int v32 = memcmp(p_s, v30, v31);
        BOOL v33 = v23 >= v29;
        if (v32) {
          BOOL v33 = v32 >= 0;
        }
        if (v33)
        {
          int v34 = (char)*v26;
          if (v34 >= 0) {
            size_t v35 = *v26;
          }
          else {
            size_t v35 = *(void *)(v26 - 15);
          }
          if (v34 >= 0) {
            uint64_t v36 = (char *)(v26 - 23);
          }
          else {
            uint64_t v36 = *(char **)(v26 - 23);
          }
          if (v23 >= v35) {
            size_t v37 = v35;
          }
          else {
            size_t v37 = v23;
          }
          int v38 = memcmp(v36, p_s, v37);
          BOOL v39 = v35 >= v23;
          if (v38) {
            BOOL v39 = v38 >= 0;
          }
          if (v39) {
            break;
          }
        }
        BOOL v27 = ++v21 < v22;
        v26 += 48;
        if (v25 == v21)
        {
          int v40 = 0;
          BOOL negate = 0;
          goto LABEL_180;
        }
      }
      BOOL negate = 1;
      int v40 = 5;
LABEL_180:
      p_traits = &this->__traits_;
      char v19 = v116;
    }
    else
    {
      BOOL v27 = 0;
      int v40 = 0;
      BOOL negate = 0;
    }
    if (v19 < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v27) {
      goto LABEL_211;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_215:
    if ((char)v126 < 0)
    {
      neg_masunint64_t k = this->__neg_mask_;
    }
    else
    {
      masunint64_t k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[v126];
      if (((v111 & mask) != 0 || v126 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v126) & 0x80000000) == 0
        && ((tab[HIBYTE(v126)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v126) == 95))
      {
        goto LABEL_233;
      }
      neg_masunint64_t k = this->__neg_mask_;
      if ((v111 & neg_mask) != 0 || v126 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_232:
        int v113 = negate;
LABEL_234:
        BOOL negate = v113;
        goto LABEL_235;
      }
    }
    if ((SHIBYTE(v126) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v126)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(v126) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_234;
        }
      }
      goto LABEL_232;
    }
LABEL_233:
    int v113 = 1;
    goto LABEL_234;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v126, (char *)&v127);
  std::vector<std::string>::pointer v93 = this->__equivalences_.__begin_;
  uint64_t v94 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v95 = (char *)this->__equivalences_.__end_ - (char *)v93;
  if (!v95)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_215;
  }
  uint64_t v96 = 0;
  unint64_t v97 = v95 / 24;
  long long v98 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v99 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v99 = __s.__r_.__value_.__l.__size_;
  }
  if (v97 <= 1) {
    uint64_t v100 = 1;
  }
  else {
    uint64_t v100 = v95 / 24;
  }
  BOOL v101 = 1;
  while (1)
  {
    unint64_t v102 = &v93[v96];
    std::string::size_type v103 = HIBYTE(v102->__r_.__value_.__r.__words[2]);
    int v104 = (char)v103;
    if ((v103 & 0x80u) != 0) {
      std::string::size_type v103 = v102->__r_.__value_.__l.__size_;
    }
    if (v99 != v103) {
      goto LABEL_206;
    }
    int v105 = v104 >= 0 ? &v93[v96] : (std::string *)v102->__r_.__value_.__r.__words[0];
    if ((v94 & 0x80) == 0) {
      break;
    }
    unint64_t v121 = v97;
    uint64_t v124 = v94;
    int v108 = memcmp((const void *)v98, v105, *((size_t *)&v98 + 1));
    unint64_t v97 = v121;
    uint64_t v94 = v124;
    if (!v108)
    {
      int v40 = 5;
      BOOL negate = 1;
      goto LABEL_209;
    }
LABEL_206:
    BOOL v101 = ++v96 < v97;
    if (v96 == v100)
    {
      int v40 = 0;
      goto LABEL_208;
    }
  }
  if (!v94)
  {
    BOOL negate = 1;
    if (v101) {
      goto LABEL_235;
    }
    goto LABEL_215;
  }
  uint64_t v106 = &__s;
  uint64_t v107 = v94;
  do
  {
    if (v106->__r_.__value_.__s.__data_[0] != v105->__r_.__value_.__s.__data_[0]) {
      goto LABEL_206;
    }
    uint64_t v106 = (std::string *)((char *)v106 + 1);
    int v105 = (std::string *)((char *)v105 + 1);
    --v107;
  }
  while (v107);
  BOOL negate = 1;
  int v40 = 5;
LABEL_208:
  if ((v94 & 0x80) != 0) {
LABEL_209:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v101) {
    goto LABEL_215;
  }
LABEL_211:
  if (v40)
  {
LABEL_235:
    uint64_t v8 = 2;
    goto LABEL_236;
  }
  uint64_t v8 = 2;
LABEL_67:
  unsigned __int8 v42 = *a2->__current_;
  v127.__r_.__value_.__s.__data_[0] = v42;
  if (this->__icase_)
  {
    unsigned __int8 v42 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v42);
    v127.__r_.__value_.__s.__data_[0] = v42;
  }
  std::vector<char>::pointer v43 = this->__chars_.__begin_;
  unint64_t v44 = this->__chars_.__end_ - v43;
  if (v44)
  {
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    while (1)
    {
      int v45 = *v43++;
      if (v45 == v42) {
        break;
      }
      if (!--v44) {
        goto LABEL_74;
      }
    }
LABEL_167:
    BOOL negate = 1;
    goto LABEL_236;
  }
LABEL_74:
  std::regex_traits<char>::char_class_type v46 = this->__neg_mask_;
  if (v46 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v42 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v42] & v46) == 0) {
      int v47 = (v42 == 95) & (v46 >> 7);
    }
    else {
      LOBYTE(v47) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v49 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v42, end - this->__neg_chars_.__begin_);
    unint64_t v50 = v49 ? v49 : end;
    if ((v47 & 1) == 0 && v50 == end) {
      goto LABEL_167;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
  if (v51 != v52)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v52 = this->__ranges_.__end_;
      unsigned int v53 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      unsigned int v53 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v42;
    }
    int64_t v54 = (char *)v52 - (char *)v51;
    if (v54)
    {
      uint64_t v122 = v8;
      BOOL v119 = negate;
      uint64_t v55 = 0;
      unint64_t v56 = v54 / 48;
      char v117 = v53;
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v57 = v53;
      }
      else {
        std::string::size_type v57 = __s.__r_.__value_.__l.__size_;
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v58 = &__s;
      }
      else {
        std::string::size_type v58 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if (v56 <= 1) {
        uint64_t v59 = 1;
      }
      else {
        uint64_t v59 = v54 / 48;
      }
      __int16 v60 = (unsigned __int8 *)&v51->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v61 = 1;
      while (1)
      {
        int v62 = (char)*(v60 - 24);
        if (v62 >= 0) {
          size_t v63 = *(v60 - 24);
        }
        else {
          size_t v63 = *(void *)(v60 - 39);
        }
        if (v62 >= 0) {
          uint64_t v64 = (char *)(v60 - 47);
        }
        else {
          uint64_t v64 = *(char **)(v60 - 47);
        }
        if (v63 >= v57) {
          size_t v65 = v57;
        }
        else {
          size_t v65 = v63;
        }
        int v66 = memcmp(v58, v64, v65);
        BOOL v67 = v57 >= v63;
        if (v66) {
          BOOL v67 = v66 >= 0;
        }
        if (v67)
        {
          int v68 = (char)*v60;
          if (v68 >= 0) {
            size_t v69 = *v60;
          }
          else {
            size_t v69 = *(void *)(v60 - 15);
          }
          if (v68 >= 0) {
            std::string v70 = (char *)(v60 - 23);
          }
          else {
            std::string v70 = *(char **)(v60 - 23);
          }
          if (v57 >= v69) {
            size_t v71 = v69;
          }
          else {
            size_t v71 = v57;
          }
          int v72 = memcmp(v70, v58, v71);
          BOOL v73 = v69 >= v57;
          if (v72) {
            BOOL v73 = v72 >= 0;
          }
          if (v73) {
            break;
          }
        }
        BOOL v61 = ++v55 < v56;
        v60 += 48;
        if (v59 == v55)
        {
          BOOL negate = v119;
          goto LABEL_130;
        }
      }
      BOOL negate = 1;
LABEL_130:
      uint64_t v8 = v122;
      if (v117 < 0) {
LABEL_131:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v61 = 0;
      if ((v53 & 0x80) != 0) {
        goto LABEL_131;
      }
    }
    if (v61) {
      goto LABEL_236;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_162;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v127, &v127.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v74 = this->__equivalences_.__begin_;
  uint64_t v75 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v76 = (char *)this->__equivalences_.__end_ - (char *)v74;
  if (!v76)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_162;
  }
  uint64_t v123 = v8;
  uint64_t v77 = 0;
  unint64_t v78 = v76 / 24;
  long long v79 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = __s.__r_.__value_.__l.__size_;
  }
  if (v78 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v76 / 24;
  }
  BOOL v82 = 1;
  while (2)
  {
    uint64_t v83 = &v74[v77];
    std::string::size_type v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((v84 & 0x80u) != 0) {
      std::string::size_type v84 = v83->__r_.__value_.__l.__size_;
    }
    if (v80 != v84)
    {
LABEL_155:
      BOOL v82 = ++v77 < v78;
      if (v77 == v81)
      {
LABEL_156:
        uint64_t v8 = v123;
        if ((v75 & 0x80) == 0) {
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      continue;
    }
    break;
  }
  if (v85 >= 0) {
    long long v86 = &v74[v77];
  }
  else {
    long long v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v75 & 0x80) != 0)
  {
    BOOL v120 = negate;
    unint64_t v89 = v78;
    uint64_t v118 = v81;
    int v90 = memcmp((const void *)v79, v86, *((size_t *)&v79 + 1));
    uint64_t v81 = v118;
    unint64_t v78 = v89;
    BOOL negate = v120;
    if (!v90)
    {
      BOOL negate = 1;
      uint64_t v8 = v123;
LABEL_157:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_158;
    }
    goto LABEL_155;
  }
  if (v75)
  {
    unint64_t v87 = &__s;
    uint64_t v88 = v75;
    while (v87->__r_.__value_.__s.__data_[0] == v86->__r_.__value_.__s.__data_[0])
    {
      unint64_t v87 = (std::string *)((char *)v87 + 1);
      long long v86 = (std::string *)((char *)v86 + 1);
      if (!--v88)
      {
        BOOL negate = 1;
        goto LABEL_156;
      }
    }
    goto LABEL_155;
  }
  BOOL negate = 1;
  uint64_t v8 = v123;
LABEL_158:
  if (!v82)
  {
LABEL_162:
    if (v127.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_236;
    }
    std::regex_traits<char>::char_class_type v91 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v127.__r_.__value_.__s.__data_[0]] & v91) == 0)
    {
      int v92 = (v91 >> 7) & 1;
      if (v127.__r_.__value_.__s.__data_[0] != 95) {
        int v92 = 0;
      }
      if (v92 != 1) {
        goto LABEL_236;
      }
    }
    goto LABEL_167;
  }
LABEL_236:
  if (negate == this->__negate_)
  {
    first = 0;
    int v115 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v115 = -995;
  }
  a2->__do_ = v115;
  a2->__node_ = first;
}

void sub_1C9585378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C958545C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C9585578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unint64_t v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C9585894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        __n128 result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (__n128 result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C71F0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C71F0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C71A8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C71A8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != (char *)a3)
  {
    if ((std::vector<char>::pointer end = a1->__end_,
          unsigned int marked_count = a1->__marked_count_,
          int v9 = (unsigned __int8 *)(a2 + 1),
          int v8 = *a2,
          a2 + 1 == (char *)a3)
      && v8 == 36
      || ((v8 - 46) <= 0x2E
        ? (BOOL v10 = ((1 << (v8 - 46)) & 0x600000000001) == 0)
        : (BOOL v10 = 1),
          !v10))
    {
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(a1, a2, a3);
      if (v11 == v3)
      {
        if (*v3 == 46) {
          operator new();
        }
        int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      int v11 = v3 + 1;
    }
    if (v3 == v11 && v9 != a3 && *v3 == 92)
    {
      if (2 * (v3[1] == 40))
      {
        uint64_t v12 = (uint64_t)&v3[2 * (v3[1] == 40)];
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v13 = a1->__marked_count_;
        do
        {
          uint64_t v14 = (unsigned __int8 *)v12;
          uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v12, a3);
        }
        while (v14 != (unsigned __int8 *)v12);
        if (v14 == a3 || v14 + 1 == a3 || *v14 != 92 || v14[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v14 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v13);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        int v11 = &v3[v16];
      }
    }
    if (v11 != v3)
    {
      if (v11 == (char *)a3) {
        return (char *)a3;
      }
      size_t v17 = a1->__marked_count_ + 1;
      int v18 = *v11;
      if (v18 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return ++v11;
      }
      if (v11 + 1 == (char *)a3 || v18 != 92 || v11[1] != 123) {
        return v11;
      }
      int64_t v20 = (unsigned __int8 *)(v11 + 2);
      int v29 = 0;
      uint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v20, a3, &v29);
      if (v20 == v21) {
LABEL_46:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v21 != a3)
      {
        unint64_t v22 = v21 + 1;
        int v23 = *v21;
        if (v23 == 44)
        {
          int v28 = -1;
          size_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v21 + 1, a3, &v28);
          if (v24 != a3 && v24 + 1 != a3 && *v24 == 92 && v24[1] == 125)
          {
            size_t v26 = v28;
            size_t v25 = v29;
            if (v28 == -1)
            {
              size_t v26 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_46;
            }
            int v11 = (char *)&v24[2 * (v24[1] == 125)];
            BOOL v27 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v27, v25, v26, end, marked_count + 1, v17, 1);
            return v11;
          }
        }
        else if (v22 != a3 && v23 == 92 && *v22 == 125)
        {
          int v11 = (char *)(v21 + 2);
          size_t v25 = v29;
          BOOL v27 = a1;
          size_t v26 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_33;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v17);
      uint64_t v15 = 2;
      return &a2[v15];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_22:
    uint64_t v15 = 1;
    return &a2[v15];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_22;
  }
  BOOL v8 = v6 == 40;
  uint64_t v7 = (char *)(a2 + 1);
  BOOL v8 = !v8 || v7 == a3;
  if (!v8)
  {
    BOOL v8 = *v7 == 63;
    int v9 = (char *)(a2 + 2);
    if (v8 && v9 != a3)
    {
      int v11 = *v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int marked_count = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v11 != 61) {
          goto LABEL_33;
        }
        std::regex_traits<char>::regex_traits(&v46.__traits_);
        memset(&v46.__flags_, 0, 40);
        v46.__flags_ = a1->__flags_;
        uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v46, a2 + 3, a3);
        unsigned int v13 = v46.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v46, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      uint64_t v14 = (unsigned __int8 *)(v12 + 1);
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v46.__traits_.__loc_);
      if (v12 + 1 != (char *)a2) {
        return v14;
      }
    }
  }
LABEL_33:
  std::vector<char>::pointer end = a1->__end_;
  unsigned int v20 = a1->__marked_count_;
  int v21 = (char)*a2;
  int v22 = *a2;
  if (v21 <= 91)
  {
    int v23 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_96;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          size_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --a1->__open_count_;
            int v23 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_91;
          }
LABEL_96:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v29 = a1->__marked_count_;
        ++a1->__open_count_;
        uint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v30 == a3) {
          goto LABEL_96;
        }
        size_t v31 = v30;
        if (*v30 != 41) {
          goto LABEL_96;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v29);
        --a1->__open_count_;
        int v23 = (unsigned __int8 *)(v31 + 1);
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        operator new();
      default:
        if (v21 == 91)
        {
          int v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_91;
        }
        if (v21 != 63) {
          goto LABEL_56;
        }
        goto LABEL_58;
    }
  }
  uint64_t v25 = (v21 - 92);
  if (v25 > 0x21) {
    goto LABEL_56;
  }
  int v23 = a2;
  if (((1 << v25) & 0x300000006) != 0) {
    goto LABEL_91;
  }
  if (v25)
  {
    if (v25 == 31) {
LABEL_58:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v22);
    int v23 = a2 + 1;
    goto LABEL_91;
  }
  int v23 = a2;
  if (v22 != 92) {
    goto LABEL_91;
  }
  size_t v26 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v27 = *v26;
  unsigned int v28 = v27 - 48;
  if (v27 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
LABEL_90:
    int v23 = a2 + 2;
    goto LABEL_91;
  }
  if ((v27 - 49) <= 8)
  {
    int v23 = a2 + 2;
    if (a2 + 2 == (unsigned __int8 *)a3)
    {
      int v23 = (unsigned __int8 *)a3;
    }
    else
    {
      while (1)
      {
        int v32 = *v23;
        if ((v32 - 48) > 9) {
          break;
        }
        if (v28 >= 0x19999999) {
          goto LABEL_97;
        }
        ++v23;
        unsigned int v28 = v32 + 10 * v28 - 48;
        if (v23 == (unsigned __int8 *)a3)
        {
          int v23 = (unsigned __int8 *)a3;
          break;
        }
      }
      if (!v28) {
LABEL_97:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v28 > v20) {
      goto LABEL_97;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v28);
    if (v26 != (char *)v23) {
      goto LABEL_91;
    }
  }
  int v33 = *v26;
  if (v33 > 99)
  {
    if (v33 == 119)
    {
      int v34 = a1;
      BOOL v35 = 0;
      goto LABEL_82;
    }
    if (v33 == 115)
    {
      unsigned __int8 v42 = a1;
      BOOL v43 = 0;
      goto LABEL_88;
    }
    if (v33 != 100) {
      goto LABEL_83;
    }
    uint64_t v36 = a1;
    BOOL v37 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
    int v39 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v39;
    goto LABEL_90;
  }
  switch(v33)
  {
    case 'D':
      uint64_t v36 = a1;
      BOOL v37 = 1;
      goto LABEL_80;
    case 'S':
      unsigned __int8 v42 = a1;
      BOOL v43 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
      int v39 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      int v34 = a1;
      BOOL v35 = 1;
LABEL_82:
      int v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
      v40->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
      goto LABEL_90;
  }
LABEL_83:
  std::string::size_type v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v26 == (char *)v41) {
    int v23 = a2;
  }
  else {
    int v23 = (unsigned __int8 *)v41;
  }
LABEL_91:
  uint64_t v14 = a2;
  if (v23 == a2) {
    return v14;
  }
  size_t v44 = a1->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v23, (unsigned __int8 *)a3, end, v20 + 1, v44);
}

void sub_1C9586960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1CB786A30](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1C95869F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  int v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    uint64_t v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1C9586DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F23C7040;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F23C7040;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C6FF8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1CB786E50);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F23C6FF8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001C95E1098
    || ((v3 & 0x80000001C95E1098 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x80000001C95E1098)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001C95E1098 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB786E50);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1CB786E50);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__end_state<char>::~__end_state()
{
}

char *std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      int v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      std::set<std::string>::set[abi:ne180100](a4 + v7 + 24, (void *)(a2 + v7 + 24));
      *(_DWORD *)(a4 + v7 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C95874C0(_Unwind_Exception *exception_object)
{
  while (v2 != v1)
  {
    v2 -= 56;
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      int v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          int v9 = v7;
        }
        while (v10);
      }
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          uint64_t v16 = (void *)v3;
          int v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        uint64_t v16 = v7;
        int v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        int v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          int v5 = v13;
        }
        while (!v10);
      }
      int v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1C9587648(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1C95876D0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void marrs::mrr::mr::OrdinalFilter::~OrdinalFilter(marrs::mrr::mr::OrdinalFilter *this)
{
  marrs::mrr::mr::OrdinalFilter::~OrdinalFilter(this);
  JUMPOUT(0x1CB786E50);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F23C7E18;
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 24));
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*((void **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
}

void std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(void **this)
{
  *this = &unk_1F23C7DB8;
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 48)
  {
    std::__tree<std::string>::destroy(*(char **)(i - 16));
    std::__tree<std::string>::destroy(*(char **)(i - 40));
  }
  *(void *)(a1 + 8) = a2;
}

void marrs::mrr::mr::OrdinalFilter::filterEntities(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 32))
  {
    morphun::util::ULocale::ULocale();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    morphun::util::StringUtils::convert();
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    morphun::util::StringUtils::lowercase();
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v8 = 0;
    morphun::util::StringUtils::convert();
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v6);
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 24))(a1, a2, v7);
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C9587BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 97) < 0) {
    operator delete(*(void **)(v10 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__fs::filesystem::path::~path[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *marrs::mrr::mr::OrdinalFilter::OrdinalFilter(uint64_t a1, uint64_t a2, long long *a3)
{
  std::string::size_type v3 = (std::string::size_type)a3;
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)marrs::mrr::mr::MRFilterInterface::MRFilterInterface(a1, a3);
  void *v5 = &unk_1F23C7E18;
  v5[21] = 0;
  std::string v156 = v5 + 21;
  v5[20] = v5 + 21;
  v5[24] = 0;
  v5[25] = 0;
  v5[22] = 0;
  v5[23] = v5 + 24;
  uint64_t v162 = v5;
  long long v157 = v5 + 24;
  uint64_t v155 = v5 + 20;
  std::__fs::filesystem::operator/[abi:ne180100](__sz, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::filterConfigFileName);
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v227, __sz[0].__r_.__value_.__l.__data_, __sz[0].__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)long long v227 = __sz[0];
  }
  uint64_t v6 = NSString;
  int v7 = v227[23];
  uint64_t v8 = *(unsigned char **)v227;
  uint64_t v9 = [NSString defaultCStringEncoding];
  if (v7 >= 0) {
    uint64_t v10 = v227;
  }
  else {
    uint64_t v10 = v8;
  }
  uint64_t v11 = [v6 stringWithCString:v10 encoding:v9];
  uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v11];
  memset(&v186, 0, sizeof(v186));
  id v13 = [v12 objectForKey:@"version"];
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v13 UTF8String]);
  std::string v184 = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;

  uint64_t v14 = [v12 objectForKey:@"mrType"];
  int v185 = [v14 isEqual:@"rule"] ^ 1;
  if ((v185 & 1) == 0)
  {
    uint64_t v15 = [v12 objectForKeyedSubscript:@"ruleConfig"];
    BOOL v16 = v15 == 0;

    if (!v16)
    {
      BOOL v17 = [v12 objectForKeyedSubscript:@"ruleConfig"];
      id v18 = [v17 objectForKey:@"ordinalAssetPath"];
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v18 UTF8String]);

      std::string::operator=(&v186, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }

  if ((v227[23] & 0x80000000) != 0) {
    operator delete(*(void **)v227);
  }
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz[0].__r_.__value_.__l.__data_);
  }
  std::vector<std::csub_match>::value_type v19 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v3 + 23) < 0) {
      std::string::size_type v3 = *(void *)v3;
    }
    std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::assetSubDirectoryPath);
    if ((v227[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v227, *(std::string::size_type *)&v227[8]);
    }
    else {
      std::string __str = *(std::string *)v227;
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    LODWORD(__sz[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__sz[0].__r_.__value_.__r.__words + 4) = v3;
    WORD2(__sz[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__sz[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
    _os_log_impl(&dword_1C9555000, v19, OS_LOG_TYPE_DEBUG, "[Verbal MR] Initializing Verbal rule based mention resolver for locale - %s, from path - %s", (uint8_t *)__sz, 0x16u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((v227[23] & 0x80000000) != 0) {
      operator delete(*(void **)v227);
    }
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::filterConfigFileName);
  std::ifstream::basic_ifstream((uint64_t *)&__str);
  if ((v227[23] & 0x80000000) != 0) {
    operator delete(*(void **)v227);
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v183, *(void **)((char *)&__str + *(void *)(__str.__r_.__value_.__r.__words[0] - 24) + 40));
  uint64_t v21 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    char v22 = &v183;
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v22 = (std::string *)v183.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long v227 = 136315138;
    *(void *)&v227[4] = v22;
    _os_log_impl(&dword_1C9555000, v21, OS_LOG_TYPE_DEBUG, "[Verbal MR] Loaded MR Config - %s", v227, 0xCu);
  }
  std::vector<std::csub_match>::value_type v23 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    char v24 = &v184;
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v24 = (std::string *)v184.__r_.__value_.__r.__words[0];
    }
    if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v25 = &v186;
    }
    else {
      uint64_t v25 = (std::string *)v186.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long v227 = 67109634;
    *(_DWORD *)&v227[4] = v185;
    *(_WORD *)&v227[8] = 2080;
    *(void *)&v227[10] = v24;
    *(_WORD *)&v227[18] = 2080;
    *(void *)&v227[20] = v25;
    _os_log_impl(&dword_1C9555000, v23, OS_LOG_TYPE_DEBUG, "[Verbal MR] Verbal MR Config Parameters - mrType: %u,version: %s, ordinalAssetPath: %s", v227, 0x1Cu);
  }
  std::__fs::filesystem::operator/[abi:ne180100](__sz, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)&v186);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v227, (uint64_t)__sz, (std::__fs::filesystem::path *)&__p);
  if ((v227[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)v227, *(std::string::size_type *)&v227[8]);
    if ((v227[23] & 0x80000000) != 0) {
      operator delete(*(void **)v227);
    }
  }
  else
  {
    std::string v182 = *(std::string *)v227;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__sz[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz[0].__r_.__value_.__l.__data_);
  }
  size_t v26 = NSString;
  int v27 = SHIBYTE(v182.__r_.__value_.__r.__words[2]);
  std::string::size_type v28 = v182.__r_.__value_.__r.__words[0];
  uint64_t v29 = [NSString defaultCStringEncoding];
  if (v27 >= 0) {
    uint64_t v30 = &v182;
  }
  else {
    uint64_t v30 = (std::string *)v28;
  }
  uint64_t v164 = [v26 stringWithCString:v30 encoding:v29];
  long long v160 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (([v160 fileExistsAtPath:v164] & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1CB7869F0](exception, v227);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  size_t v31 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v164];
  uint64_t v176 = &v177;
  int v177 = 0;
  unint64_t v180 = 0;
  uint64_t v181 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = &v180;
  uint64_t v214 = 0;
  long long v213 = 0;
  v212 = &v213;
  uint64_t v211 = 0;
  uint64_t v210 = 0;
  long long v209 = &v210;
  int v32 = v31;
  long long v159 = v31;
  std::ios_base v163 = [v31 objectForKey:@"ordinalKeywords"];
  float v161 = [v32 objectForKey:@"ordinalPatternTemplateMap"];
  long long v207 = 0u;
  long long v208 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  obuint64_t j = v163;
  uint64_t v165 = [obj countByEnumeratingWithState:&v205 objects:v227 count:16];
  if (v165)
  {
    id v167 = *(id *)v206;
    do
    {
      for (uint64_t i = 0; i != v165; ++i)
      {
        if (*(id *)v206 != v167) {
          objc_enumerationMutation(obj);
        }
        id v169 = *(id *)(*((void *)&v205 + 1) + 8 * i);
        int v33 = objc_msgSend(obj, "objectForKey:");
        v199[1] = 0;
        v199[0] = 0;
        *(void *)&v200[0] = 0;
        long long v201 = 0u;
        long long v202 = 0u;
        long long v203 = 0u;
        long long v204 = 0u;
        id v174 = v33;
        uint64_t v34 = [v174 countByEnumeratingWithState:&v201 objects:__sz count:16];
        if (v34)
        {
          uint64_t v35 = *(void *)v202;
          do
          {
            for (uint64_t j = 0; j != v34; ++j)
            {
              if (*(void *)v202 != v35) {
                objc_enumerationMutation(v174);
              }
              BOOL v37 = *(void **)(*((void *)&v201 + 1) + 8 * j);
              int v38 = [v37 objectForKey:@"synonyms"];
              unint64_t v39 = 0;
              *((void *)&v193 + 1) = 0;
              *(void *)&long long v194 = 0;
              *(void *)&long long v193 = (char *)&v193 + 8;
              while ([v38 count] > v39)
              {
                id v40 = [v38 objectAtIndexedSubscript:v39];
                std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v40 UTF8String]);

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v193, &__p, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                ++v39;
              }
              id v41 = [v37 objectForKey:@"semantic"];
              std::string::basic_string[abi:ne180100]<0>(&v187, (char *)[v41 UTF8String]);

              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__p, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
              }
              else {
                std::string __p = v187;
              }
              std::set<std::string>::set[abi:ne180100]((uint64_t)v224, &v193);
              unsigned __int8 v42 = [v37 objectForKey:@"index"];
              [v42 floatValue];
              int v225 = v43;

              size_t v44 = v199[1];
              if (v199[1] >= (std::string *)*(void *)&v200[0])
              {
                uint64_t v46 = 0x6DB6DB6DB6DB6DB7 * (((char *)v199[1] - (char *)v199[0]) >> 3);
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) > 0x492492492492492) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)&v200[0] - (unint64_t)v199[0]) >> 3) > v47) {
                  unint64_t v47 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)&v200[0] - (unint64_t)v199[0]) >> 3);
                }
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(*(void *)&v200[0] - (unint64_t)v199[0]) >> 3)) >= 0x249249249249249)
                  unint64_t v48 = 0x492492492492492;
                else {
                  unint64_t v48 = v47;
                }
                uint64_t v222 = v200;
                if (v48) {
                  unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v48);
                }
                else {
                  uint64_t v49 = 0;
                }
                *(void *)v220 = v48;
                *(void *)&v220[8] = v48 + 56 * v46;
                *(void *)&v220[16] = *(void *)&v220[8];
                unint64_t v221 = v48 + 56 * v49;
                std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(*(std::string **)&v220[8], (long long *)&__p);
                unint64_t v50 = *(std::string **)&v220[8];
                int v45 = (std::string *)(*(void *)&v220[16] + 56);
                *(void *)&v220[16] += 56;
                std::vector<std::pair<std::string, std::string>>::pointer v51 = v199[1];
                std::vector<std::pair<std::string, std::string>>::pointer v52 = v199[0];
                if (v199[1] == v199[0])
                {
                  int64x2_t v61 = vdupq_n_s64((unint64_t)v199[1]);
                }
                else
                {
                  unint64_t v53 = 0;
                  do
                  {
                    int64_t v54 = (char *)v50 + v53;
                    uint64_t v55 = (char *)v51 + v53;
                    long long v56 = *(_OWORD *)((char *)&v51[-2] + v53 - 8);
                    *((void *)v54 - 5) = *(void *)((char *)&v51[-1] + v53 - 16);
                    *(_OWORD *)(v54 - 56) = v56;
                    *((void *)v55 - 6) = 0;
                    *((void *)v55 - 5) = 0;
                    *((void *)v55 - 7) = 0;
                    *((void *)v54 - 4) = *(void *)((char *)&v51[-1] + v53 - 8);
                    std::string::size_type v57 = (std::string::size_type *)((char *)&v51[-1] + v53);
                    std::string::size_type v58 = *v57;
                    v50[-1].__r_.__value_.__r.__words[v53 / 8] = *v57;
                    uint64_t v59 = (uint64_t)&v50[-1] + v53;
                    uint64_t v60 = *(void *)((char *)&v51->__r_.__value_.__l + v53 - 16);
                    *((void *)v54 - 2) = v60;
                    if (v60)
                    {
                      *(void *)(v58 + 16) = v59;
                      *((void *)v55 - 4) = v57;
                      *std::string::size_type v57 = 0;
                      v51->__r_.__value_.__r.__words[v53 / 8 - 2] = 0;
                    }
                    else
                    {
                      *((void *)v54 - 4) = v59;
                    }
                    *(_DWORD *)((char *)&v50->__r_.__value_.__l + v53 - 8) = *(_DWORD *)((char *)&v51->__r_.__value_.__l
                                                                                       + v53
                                                                                       - 8);
                    v53 -= 56;
                  }
                  while ((std::string *)((char *)v51 + v53) != v52);
                  unint64_t v50 = (std::string *)((char *)v50 + v53);
                  int64x2_t v61 = *(int64x2_t *)v199;
                  int v45 = *(std::string **)&v220[16];
                }
                v199[0] = v50;
                v199[1] = v45;
                *(int64x2_t *)&v220[8] = v61;
                unint64_t v62 = *(void *)&v200[0];
                *(void *)&v200[0] = v221;
                unint64_t v221 = v62;
                *(void *)v220 = v61.i64[0];
                std::__split_buffer<marrs::mrr::mr::VerbalKeywordEntry>::~__split_buffer((uint64_t)v220);
              }
              else
              {
                std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(v199[1], (long long *)&__p);
                int v45 = (std::string *)((char *)v44 + 56);
              }
              v199[1] = v45;
              std::__tree<std::string>::destroy(v224[1]);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
              std::__tree<std::string>::destroy(*((char **)&v193 + 1));
            }
            uint64_t v34 = [v174 countByEnumeratingWithState:&v201 objects:__sz count:16];
          }
          while (v34);
        }

        std::string::basic_string[abi:ne180100]<0>(v220, (char *)[v169 UTF8String]);
        size_t v63 = v213;
        uint64_t v64 = &v213;
        size_t v65 = &v213;
        if (v213)
        {
          while (1)
          {
            while (1)
            {
              size_t v65 = (uint64_t **)v63;
              int v66 = v63 + 4;
              if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v220, v63 + 4)) {
                break;
              }
              size_t v63 = *v65;
              uint64_t v64 = v65;
              if (!*v65) {
                goto LABEL_103;
              }
            }
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v66, v220)) {
              break;
            }
            uint64_t v64 = v65 + 1;
            size_t v63 = v65[1];
            if (!v63) {
              goto LABEL_103;
            }
          }
          BOOL v67 = (char *)v65;
        }
        else
        {
LABEL_103:
          BOOL v67 = (char *)operator new(0x50uLL);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v213;
          __p.__r_.__value_.__s.__data_[16] = 0;
          int v68 = (std::string *)(v67 + 32);
          if ((v220[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)v220, *(std::string::size_type *)&v220[8]);
          }
          else
          {
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)v220;
            *((void *)v67 + 6) = *(void *)&v220[16];
          }
          *((void *)v67 + 8) = 0;
          *((void *)v67 + 9) = 0;
          *((void *)v67 + 7) = 0;
          __p.__r_.__value_.__s.__data_[16] = 1;
          *(void *)BOOL v67 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = v65;
          *uint64_t v64 = (uint64_t *)v67;
          size_t v69 = (uint64_t *)v67;
          if (*v212)
          {
            v212 = (uint64_t **)*v212;
            size_t v69 = *v64;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v213, v69);
          ++v214;
          __p.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
        }
        if (v67 + 56 != (char *)v199) {
          std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((std::string **)v67 + 7, v199[0], v199[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v199[1] - (char *)v199[0]) >> 3));
        }
        if ((v220[23] & 0x80000000) != 0) {
          operator delete(*(void **)v220);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
        std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
      uint64_t v165 = [obj countByEnumeratingWithState:&v205 objects:v227 count:16];
    }
    while (v165);
  }

  *(_OWORD *)std::chrono::steady_clock::time_point v199 = 0u;
  memset(v200, 0, sizeof(v200));
  id v170 = v161;
  uint64_t v158 = [v170 countByEnumeratingWithState:v199 objects:&__p count:16];
  if (v158)
  {
    uint64_t v166 = **(void **)&v200[0];
    do
    {
      for (uint64_t k = 0; k != v158; ++k)
      {
        if (**(void **)&v200[0] != v166) {
          objc_enumerationMutation(v170);
        }
        id v168 = (id)*((void *)&v199[1]->__r_.__value_.__l.__data_ + k);
        std::string v70 = objc_msgSend(v170, "objectForKey:");
        int64x2_t v197 = 0uLL;
        unint64_t v198 = 0;
        long long v193 = 0u;
        long long v194 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        id v175 = v70;
        uint64_t v71 = [v175 countByEnumeratingWithState:&v193 objects:v220 count:16];
        if (v71)
        {
          uint64_t v72 = *(void *)v194;
          do
          {
            for (uint64_t m = 0; m != v71; ++m)
            {
              if (*(void *)v194 != v72) {
                objc_enumerationMutation(v175);
              }
              std::vector<std::string>::pointer v74 = *(void **)(*((void *)&v193 + 1) + 8 * m);
              uint64_t v75 = [v74 objectForKey:@"patterns"];
              unint64_t v76 = 0;
              v192[0] = 0;
              v192[1] = 0;
              uint64_t v191 = v192;
              while ([v75 count] > v76)
              {
                id v77 = [v75 objectAtIndexedSubscript:v76];
                std::string::basic_string[abi:ne180100]<0>(&v187, (char *)[v77 UTF8String]);

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v191, &v187, (uint64_t)&v187);
                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v187.__r_.__value_.__l.__data_);
                }
                ++v76;
              }
              unint64_t v78 = [v74 objectForKey:@"entity_types"];
              unint64_t v79 = 0;
              v190[0] = 0;
              v190[1] = 0;
              os_log_type_t v189 = v190;
              while ([v78 count] > v79)
              {
                id v80 = [v78 objectAtIndexedSubscript:v79];
                std::string::basic_string[abi:ne180100]<0>(&v187, (char *)[v80 UTF8String]);

                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v189, &v187, (uint64_t)&v187);
                if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v187.__r_.__value_.__l.__data_);
                }
                ++v79;
              }
              std::set<std::string>::set[abi:ne180100]((uint64_t)&v187, &v189);
              std::set<std::string>::set[abi:ne180100]((uint64_t)v188, &v191);
              uint64_t v81 = v197.i64[1];
              if (v197.i64[1] >= v198)
              {
                unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v197.i64[1] - v197.i64[0]) >> 4);
                unint64_t v84 = v83 + 1;
                if (v83 + 1 > 0x555555555555555) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((uint64_t)(v198 - v197.i64[0]) >> 4) > v84) {
                  unint64_t v84 = 0x5555555555555556 * ((uint64_t)(v198 - v197.i64[0]) >> 4);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - v197.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v85 = 0x555555555555555;
                }
                else {
                  unint64_t v85 = v84;
                }
                long long v217 = &v198;
                if (v85) {
                  unint64_t v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v85);
                }
                else {
                  uint64_t v86 = 0;
                }
                *(void *)std::string __s = v85;
                *(void *)&__s[8] = v85 + 48 * v83;
                *(void *)&__s[16] = *(void *)&__s[8];
                unint64_t v216 = v85 + 48 * v86;
                std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(*(uint64_t *)&__s[8], &v187);
                uint64_t v87 = *(void *)&__s[8];
                uint64_t v82 = *(void *)&__s[16] + 48;
                *(void *)&__s[16] += 48;
                int64x2_t v88 = v197;
                if (v197.i64[1] == v197.i64[0])
                {
                  int64x2_t v100 = vdupq_n_s64(v197.u64[1]);
                }
                else
                {
                  uint64_t v89 = 0;
                  do
                  {
                    uint64_t v90 = v87 + v89;
                    *(void *)(v90 - 48) = *(void *)(v88.i64[1] + v89 - 48);
                    std::regex_traits<char>::char_class_type v91 = (uint64_t *)(v88.i64[1] + v89 - 40);
                    uint64_t v92 = *v91;
                    *(void *)(v87 + v89 - 40) = *v91;
                    uint64_t v93 = v87 + v89 - 40;
                    uint64_t v94 = *(void *)(v88.i64[1] + v89 - 32);
                    *(void *)(v90 - 32) = v94;
                    if (v94)
                    {
                      *(void *)(v92 + 16) = v93;
                      *(void *)(v88.i64[1] + v89 - 48) = v91;
                      *std::regex_traits<char>::char_class_type v91 = 0;
                      *(void *)(v88.i64[1] + v89 - 32) = 0;
                    }
                    else
                    {
                      *(void *)(v90 - 48) = v93;
                    }
                    uint64_t v95 = v87 + v89;
                    *(void *)(v95 - 24) = *(void *)(v88.i64[1] + v89 - 24);
                    uint64_t v96 = (uint64_t *)(v88.i64[1] + v89 - 16);
                    uint64_t v97 = *v96;
                    *(void *)(v87 + v89 - 16) = *v96;
                    uint64_t v98 = v87 + v89 - 16;
                    uint64_t v99 = *(void *)(v88.i64[1] + v89 - 8);
                    *(void *)(v95 - 8) = v99;
                    if (v99)
                    {
                      *(void *)(v97 + 16) = v98;
                      *(void *)(v88.i64[1] + v89 - 24) = v96;
                      *uint64_t v96 = 0;
                      *(void *)(v88.i64[1] + v89 - 8) = 0;
                    }
                    else
                    {
                      *(void *)(v95 - 24) = v98;
                    }
                    v89 -= 48;
                  }
                  while (v88.i64[1] + v89 != v88.i64[0]);
                  v87 += v89;
                  int64x2_t v100 = v197;
                  uint64_t v82 = *(void *)&__s[16];
                }
                v197.i64[0] = v87;
                v197.i64[1] = v82;
                *(int64x2_t *)&__s[8] = v100;
                unint64_t v101 = v198;
                unint64_t v198 = v216;
                unint64_t v216 = v101;
                *(void *)std::string __s = v100.i64[0];
                std::__split_buffer<marrs::mrr::mr::VerbalPatternEntry>::~__split_buffer((uint64_t)__s);
              }
              else
              {
                std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(v197.i64[1], &v187);
                uint64_t v82 = v81 + 48;
              }
              v197.i64[1] = v82;
              std::__tree<std::string>::destroy(v188[1]);
              std::__tree<std::string>::destroy((char *)v187.__r_.__value_.__l.__size_);
              std::__tree<std::string>::destroy(v190[0]);

              std::__tree<std::string>::destroy(v192[0]);
            }
            uint64_t v71 = [v175 countByEnumeratingWithState:&v193 objects:v220 count:16];
          }
          while (v71);
        }

        std::string::basic_string[abi:ne180100]<0>(__s, (char *)[v168 UTF8String]);
        unint64_t v102 = v210;
        std::string::size_type v103 = &v210;
        int v104 = &v210;
        if (v210)
        {
          while (1)
          {
            while (1)
            {
              int v104 = (uint64_t **)v102;
              int v105 = v102 + 4;
              if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(__s, v102 + 4)) {
                break;
              }
              unint64_t v102 = *v104;
              std::string::size_type v103 = v104;
              if (!*v104) {
                goto LABEL_167;
              }
            }
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v105, __s)) {
              break;
            }
            std::string::size_type v103 = v104 + 1;
            unint64_t v102 = v104[1];
            if (!v102) {
              goto LABEL_167;
            }
          }
          uint64_t v106 = v104;
        }
        else
        {
LABEL_167:
          uint64_t v106 = operator new(0x50uLL);
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
          v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v210;
          v187.__r_.__value_.__s.__data_[16] = 0;
          uint64_t v107 = (std::string *)(v106 + 4);
          if ((__s[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v107, *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
          }
          else
          {
            *(_OWORD *)&v107->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
            v106[6] = *(void *)&__s[16];
          }
          v106[8] = 0;
          v106[9] = 0;
          v106[7] = 0;
          v187.__r_.__value_.__s.__data_[16] = 1;
          *uint64_t v106 = 0;
          v106[1] = 0;
          v106[2] = v104;
          *std::string::size_type v103 = v106;
          int v108 = v106;
          if (*v209)
          {
            long long v209 = (uint64_t **)*v209;
            int v108 = *v103;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v210, v108);
          ++v211;
          v187.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
        }
        if (v106 + 7 != (void *)&v197) {
          std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v106 + 7, v197.i64[0], (void *)v197.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v197.i64[1] - v197.i64[0]) >> 4));
        }
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(*(void **)__s);
        }
        v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
        std::vector<marrs::mrr::mr::VerbalPatternEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
      }
      uint64_t v158 = [v170 countByEnumeratingWithState:v199 objects:&__p count:16];
    }
    while (v158);
  }

  uint8x8_t v109 = v212;
  if (v178)
  {
    uint64_t v110 = v176;
    uint64_t v176 = &v177;
    v177[2] = 0;
    int v177 = 0;
    uint64_t v178 = 0;
    if (v110[1]) {
      std::string::size_type v111 = (std::string::size_type)v110[1];
    }
    else {
      std::string::size_type v111 = (std::string::size_type)v110;
    }
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    v187.__r_.__value_.__l.__size_ = v111;
    v187.__r_.__value_.__r.__words[2] = v111;
    if (v111)
    {
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v111);
      unint64_t v112 = &v213;
      if (v109 != &v213)
      {
        do
        {
          std::string::operator=((std::string *)(v111 + 32), (const std::string *)(v109 + 4));
          if ((uint64_t **)v111 != v109) {
            std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>((std::string **)(v111 + 56), (std::string *)v109[7], (std::string *)v109[8], 0x6DB6DB6DB6DB6DB7 * (v109[8] - v109[7]));
          }
          int v113 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
          float v114 = v177;
          int v115 = &v177;
          char v116 = &v177;
          if (v177)
          {
            do
            {
              while (1)
              {
                char v116 = (uint64_t **)v114;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v113 + 4, v114 + 4))break; {
                float v114 = *v116;
                }
                int v115 = v116;
                if (!*v116) {
                  goto LABEL_194;
                }
              }
              float v114 = v116[1];
            }
            while (v114);
            int v115 = v116 + 1;
          }
LABEL_194:
          uint64_t *v113 = 0;
          v113[1] = 0;
          v113[2] = (uint64_t)v116;
          uint8_t *v115 = v113;
          if (*v176)
          {
            uint64_t v176 = (uint64_t **)*v176;
            int v113 = *v115;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v177, v113);
          ++v178;
          v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__l.__size_;
          if (v187.__r_.__value_.__l.__size_) {
            v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v187.__r_.__value_.__l.__size_);
          }
          char v117 = v109[1];
          if (v117)
          {
            do
            {
              unint64_t v112 = (uint64_t **)v117;
              char v117 = (uint64_t *)*v117;
            }
            while (v117);
          }
          else
          {
            do
            {
              unint64_t v112 = (uint64_t **)v109[2];
              BOOL v118 = *v112 == (uint64_t *)v109;
              uint8x8_t v109 = v112;
            }
            while (!v118);
          }
          std::string::size_type v111 = v187.__r_.__value_.__r.__words[2];
          if (v187.__r_.__value_.__r.__words[2]) {
            BOOL v118 = v112 == &v213;
          }
          else {
            BOOL v118 = 1;
          }
          uint8x8_t v109 = v112;
        }
        while (!v118);
      }
    }
    else
    {
      unint64_t v112 = v109;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v187);
    uint8x8_t v109 = v112;
  }
  if (v109 != &v213)
  {
    do
    {
      BOOL v119 = (char *)operator new(0x50uLL);
      BOOL v120 = (uint64_t *)v119;
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v177;
      v187.__r_.__value_.__s.__data_[16] = 0;
      unint64_t v121 = v119 + 32;
      if (*((char *)v109 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v119 + 32), (const std::string::value_type *)v109[4], (std::string::size_type)v109[5]);
      }
      else
      {
        long long v122 = *((_OWORD *)v109 + 2);
        *((void *)v119 + 6) = v109[6];
        *(_OWORD *)unint64_t v121 = v122;
      }
      v120[7] = 0;
      v120[8] = 0;
      v120[9] = 0;
      std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__init_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v120 + 7, (uint64_t)v109[7], (uint64_t)v109[8], 0x6DB6DB6DB6DB6DB7 * (v109[8] - v109[7]));
      v187.__r_.__value_.__s.__data_[16] = 1;
      uint64_t v123 = v177;
      uint64_t v124 = &v177;
      uint64_t v125 = &v177;
      if (v177)
      {
        do
        {
          while (1)
          {
            uint64_t v125 = (uint64_t **)v123;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v121, v123 + 4)) {
              break;
            }
            uint64_t v123 = *v125;
            uint64_t v124 = v125;
            if (!*v125) {
              goto LABEL_221;
            }
          }
          uint64_t v123 = v125[1];
        }
        while (v123);
        uint64_t v124 = v125 + 1;
      }
LABEL_221:
      uint64_t *v120 = 0;
      v120[1] = 0;
      v120[2] = (uint64_t)v125;
      *uint64_t v124 = v120;
      if (*v176)
      {
        uint64_t v176 = (uint64_t **)*v176;
        BOOL v120 = *v124;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v177, v120);
      ++v178;
      v187.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
      __int16 v126 = v109[1];
      if (v126)
      {
        do
        {
          std::string v127 = (uint64_t **)v126;
          __int16 v126 = (uint64_t *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          std::string v127 = (uint64_t **)v109[2];
          BOOL v118 = *v127 == (uint64_t *)v109;
          uint8x8_t v109 = v127;
        }
        while (!v118);
      }
      uint8x8_t v109 = v127;
    }
    while (v127 != &v213);
  }
  unint64_t v128 = v209;
  if (v181)
  {
    uint64_t v129 = v179;
    uint64_t v179 = &v180;
    v180[2] = 0;
    unint64_t v180 = 0;
    uint64_t v181 = 0;
    if (v129[1]) {
      std::string::size_type v130 = (std::string::size_type)v129[1];
    }
    else {
      std::string::size_type v130 = (std::string::size_type)v129;
    }
    v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
    v187.__r_.__value_.__l.__size_ = v130;
    v187.__r_.__value_.__r.__words[2] = v130;
    if (v130)
    {
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v130);
      long long v131 = &v210;
      if (v128 != &v210)
      {
        do
        {
          std::string::operator=((std::string *)(v130 + 32), (const std::string *)(v128 + 4));
          if ((uint64_t **)v130 != v128) {
            std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>((uint64_t *)(v130 + 56), v128[7], v128[8], 0xAAAAAAAAAAAAAAABLL * (((char *)v128[8] - (char *)v128[7]) >> 4));
          }
          uint64_t v132 = (uint64_t *)v187.__r_.__value_.__r.__words[2];
          char v133 = v180;
          uint64_t v134 = &v180;
          uint64_t v135 = &v180;
          if (v180)
          {
            do
            {
              while (1)
              {
                uint64_t v135 = (uint64_t **)v133;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v132 + 4, v133 + 4))break; {
                char v133 = *v135;
                }
                uint64_t v134 = v135;
                if (!*v135) {
                  goto LABEL_243;
                }
              }
              char v133 = v135[1];
            }
            while (v133);
            uint64_t v134 = v135 + 1;
          }
LABEL_243:
          *uint64_t v132 = 0;
          v132[1] = 0;
          v132[2] = (uint64_t)v135;
          uint64_t *v134 = v132;
          if (*v179)
          {
            uint64_t v179 = (uint64_t **)*v179;
            uint64_t v132 = *v134;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v180, v132);
          ++v181;
          v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__l.__size_;
          if (v187.__r_.__value_.__l.__size_) {
            v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(v187.__r_.__value_.__l.__size_);
          }
          uint64_t v136 = v128[1];
          if (v136)
          {
            do
            {
              long long v131 = (uint64_t **)v136;
              uint64_t v136 = (uint64_t *)*v136;
            }
            while (v136);
          }
          else
          {
            do
            {
              long long v131 = (uint64_t **)v128[2];
              BOOL v118 = *v131 == (uint64_t *)v128;
              unint64_t v128 = v131;
            }
            while (!v118);
          }
          std::string::size_type v130 = v187.__r_.__value_.__r.__words[2];
          if (v187.__r_.__value_.__r.__words[2]) {
            BOOL v137 = v131 == &v210;
          }
          else {
            BOOL v137 = 1;
          }
          unint64_t v128 = v131;
        }
        while (!v137);
      }
    }
    else
    {
      long long v131 = v128;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v187);
    unint64_t v128 = v131;
  }
  if (v128 != &v210)
  {
    do
    {
      long long v138 = (char *)operator new(0x50uLL);
      int v139 = (uint64_t *)v138;
      v187.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
      v187.__r_.__value_.__l.__size_ = (std::string::size_type)&v180;
      v187.__r_.__value_.__s.__data_[16] = 0;
      std::string v140 = v138 + 32;
      if (*((char *)v128 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v138 + 32), (const std::string::value_type *)v128[4], (std::string::size_type)v128[5]);
      }
      else
      {
        long long v141 = *((_OWORD *)v128 + 2);
        *((void *)v138 + 6) = v128[6];
        *(_OWORD *)std::string v140 = v141;
      }
      v139[7] = 0;
      v139[8] = 0;
      v139[9] = 0;
      std::string v142 = (char *)v128[7];
      int v143 = (char *)v128[8];
      *(void *)std::string __s = v139 + 7;
      __s[8] = 0;
      if (v143 != v142)
      {
        std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](v139 + 7, 0xAAAAAAAAAAAAAAABLL * ((v143 - v142) >> 4));
        v139[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>((uint64_t)(v139 + 9), v142, v143, v139[8]);
      }
      v187.__r_.__value_.__s.__data_[16] = 1;
      long long v144 = v180;
      int v145 = &v180;
      uint64_t v146 = &v180;
      if (v180)
      {
        do
        {
          while (1)
          {
            uint64_t v146 = (uint64_t **)v144;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v140, v144 + 4)) {
              break;
            }
            long long v144 = *v146;
            int v145 = v146;
            if (!*v146) {
              goto LABEL_272;
            }
          }
          long long v144 = v146[1];
        }
        while (v144);
        int v145 = v146 + 1;
      }
LABEL_272:
      *int v139 = 0;
      v139[1] = 0;
      v139[2] = (uint64_t)v146;
      NSObject *v145 = v139;
      if (*v179)
      {
        uint64_t v179 = (uint64_t **)*v179;
        int v139 = *v145;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v180, v139);
      ++v181;
      v187.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v187);
      char v147 = v128[1];
      if (v147)
      {
        do
        {
          uint64_t v148 = (uint64_t **)v147;
          char v147 = (uint64_t *)*v147;
        }
        while (v147);
      }
      else
      {
        do
        {
          uint64_t v148 = (uint64_t **)v128[2];
          BOOL v118 = *v148 == (uint64_t *)v128;
          unint64_t v128 = v148;
        }
        while (!v118);
      }
      unint64_t v128 = v148;
    }
    while (v148 != &v210);
  }

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v210);
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v213);

  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy((void *)v162[21]);
  int v149 = v177;
  v162[20] = v176;
  v162[21] = v149;
  uint64_t v150 = v178;
  v162[22] = v178;
  if (v150)
  {
    v149[2] = (uint64_t)v156;
    uint64_t v176 = &v177;
    int v177 = 0;
    uint64_t v178 = 0;
  }
  else
  {
    *uint64_t v155 = v156;
  }
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy((void *)v162[24]);
  uint64_t v151 = v180;
  v162[23] = v179;
  v162[24] = v151;
  uint64_t v152 = v181;
  v162[25] = v181;
  if (v152)
  {
    v151[2] = (uint64_t)v157;
    uint64_t v151 = 0;
    uint64_t v179 = &v180;
    unint64_t v180 = 0;
    uint64_t v181 = 0;
  }
  else
  {
    v162[23] = v157;
  }
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v151);
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v177);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(void *)(__str.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8]
                                                                                                + 24);
  MEMORY[0x1CB786B50](&__str.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1CB786D60](&v219);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__r_.__value_.__l.__data_);
  }
  return v162;
}

void sub_1C9589C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, VerbalMaps *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
}

void sub_1C9589C94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t marrs::mrr::mr::MRFilterInterface::MRFilterInterface(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F23C7DB8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  morphun::util::ULocale::ULocale();
  return a1;
}

void sub_1C9589D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 + 31) < 0) {
    operator delete(*v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1CB786B40](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1C9589F64(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1CB786D60](v1);
  _Unwind_Resume(a1);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, void *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2 && (a2[3] != a2[4] || (*(unsigned int (**)(void *))(*a2 + 72))(a2) != -1))
  {
    uint64_t v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4]) {
      std::string::value_type v5 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v5 = *v4;
    }
    std::string::push_back(this, v5);
    uint64_t v6 = a2[3];
    if (v6 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v6 + 1;
    }
  }
}

void sub_1C958A098(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1C958A0B4(_Unwind_Exception *a1)
{
}

void VerbalMRConfig::~VerbalMRConfig(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void VerbalMaps::~VerbalMaps(VerbalMaps *this)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a1);
}

void std::vector<marrs::mrr::mr::MRREntity>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 216;
    v4 -= 216;
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(i - 216));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  long long v6 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  long long v7 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v7;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  __n128 result = *(__n128 *)(a2 + 192);
  *(__n128 *)(a1 + 192) = result;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return result;
}

void VocabLoader::handle_error(VocabLoader *this, const char *a2)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
  std::string::basic_string[abi:ne180100]<0>(&v7, (char *)this);
  long long v4 = std::string::insert(&v7, 0, "Unable to load vocab during ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
  long long v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v6, "QueryRewrite");
  ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&v8, (uint64_t)v6, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/preprocessing/VocabLoader.cpp", 18);
}

void sub_1C958A404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

uint64_t VocabLoader::loadFrom(marrs::qr::processing::Vocab *a1, uint64_t a2, unsigned int a3)
{
  marrs::qr::processing::Vocab::Vocab(a1, 1, a3);
  if (*(char *)(a2 + 23) >= 0) {
    long long v5 = (const char *)a2;
  }
  else {
    long long v5 = *(const char **)a2;
  }
  int v6 = open(v5, 0);
  int v8 = v6;
  if (v6 == -1)
  {
    id v18 = "open";
    goto LABEL_21;
  }
  if (fstat(v6, &__p) == -1)
  {
    id v18 = "fstat";
    goto LABEL_21;
  }
  st_std::string::size_type size = __p.st_size;
  uint64_t v10 = (char *)mmap(0, __p.st_size, 1, 2, v8, 0);
  uint64_t v11 = v10;
  if (v10 == (char *)-1)
  {
    id v18 = "mmap";
LABEL_21:
    VocabLoader::handle_error((VocabLoader *)v18, v7);
  }
  if (v10 && st_size)
  {
    uint64_t v12 = &v10[st_size];
    id v13 = v10;
    do
    {
      uint64_t v14 = (char *)memchr(v13, 10, v12 - v13);
      if (v14)
      {
        uint64_t v15 = v14;
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v13, v14, v14 - v13);
        marrs::qr::processing::Vocab::addWord((uint64_t)a1, (uint64_t)&__p);
        if (SHIBYTE(__p.st_gid) < 0) {
          operator delete(*(void **)&__p.st_dev);
        }
        id v13 = v15 + 1;
      }
    }
    while (v13 != v12);
  }
  if (munmap(v11, st_size) == -1)
  {
    std::vector<std::csub_match>::value_type v19 = "munmap";
    goto LABEL_24;
  }
  uint64_t result = close(v8);
  if (result == -1)
  {
    std::vector<std::csub_match>::value_type v19 = "close";
LABEL_24:
    VocabLoader::handle_error((VocabLoader *)v19, v16);
  }
  return result;
}

void sub_1C958A5FC(_Unwind_Exception *a1)
{
  marrs::qr::processing::Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

void sub_1C958A618(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C958A608);
}

uint64_t non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::validate(marrs::qr::orchestration::CbRPredictorPlugin *this, const QRRequest *a2)
{
  return 1;
}

void non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(marrs::qr::orchestration::CbRPredictorPlugin *this)
{
  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin((marrs::qr::orchestration::CbRPredictorPlugin *)((char *)this - 208));
  JUMPOUT(0x1CB786E50);
}

{
  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin((marrs::qr::orchestration::CbRPredictorPlugin *)((char *)this - 208));
}

void marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(marrs::qr::orchestration::CbRPredictorPlugin *this)
{
  *(void *)this = &unk_1F23C7508;
  *((void *)this + 26) = &unk_1F23C7538;
  long long v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  RepetitionPredictorBase::~RepetitionPredictorBase(this);
}

{
  uint64_t vars8;

  marrs::qr::orchestration::CbRPredictorPlugin::~CbRPredictorPlugin(this);
  JUMPOUT(0x1CB786E50);
}

void RepetitionPredictorBase::~RepetitionPredictorBase(RepetitionPredictorBase *this)
{
  *(void *)this = &unk_1F23C7678;
  std::string v7 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 21));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*((void ***)this + 17));
  long long v2 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    operator delete(v2);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  long long v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    do
    {
      long long v4 = (void *)*v3;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>((uint64_t)(v3 + 2));
      operator delete(v3);
      long long v3 = v4;
    }
    while (v4);
  }
  long long v5 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    operator delete(v5);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(*((void **)this + 3));
  int v6 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    operator delete(v6);
  }
}

{
  uint64_t vars8;

  RepetitionPredictorBase::~RepetitionPredictorBase(this);
  JUMPOUT(0x1CB786E50);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      long long v2 = (void *)*v1;
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)(v1 + 3));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    long long v2 = *(void **)a1;
    operator delete(v2);
  }
}

void non-virtual thunk to'marrs::qr::orchestration::CbRPredictorPlugin::predict(marrs::qr::orchestration::CbRPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, int8x16_t *a3@<X8>)
{
}

void marrs::qr::orchestration::CbRPredictorPlugin::predict(marrs::qr::orchestration::CbRPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, int8x16_t *a3@<X8>)
{
  long long v4 = this;
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  int v6 = (unsigned __int8 ***)((char *)this + 184);
  (*(void (**)(marrs::qr::orchestration::CbRPredictorPlugin *))(*(void *)this + 24))(this);
  toRepetitionPredictorInput((uint64_t)&v207, (uint64_t)a2, v6);
  uint64_t v225 = 0;
  unint64_t v224 = 0;
  uint64_t v226 = 0;
  uint64_t v222 = 0;
  uint64_t v221 = 0;
  uint64_t v223 = 0;
  createPronunciationsVector((uint64_t)v4 + 88, &v211, (uint64_t *)&v224);
  createPronunciationsVector((uint64_t)v4 + 88, &v212, &v221);
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v215);
  std::string v7 = (_DWORD *)*((void *)v4 + 34);
  int v8 = (_DWORD *)*((void *)v4 + 35);
  long long v202 = v4;
  if (v7 == v8)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    std::string::size_type v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v13 = (v9 - v11) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v10 - (void)v11) >> 1 > v14) {
          unint64_t v14 = (uint64_t)(v10 - (void)v11) >> 1;
        }
        if (v10 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        BOOL v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)BOOL v17 = *v7;
        uint64_t v12 = v17 + 4;
        while (v9 != v11)
        {
          int v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        unint64_t v10 = v15 + 4 * v16;
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v17;
      }
      else
      {
        *(_DWORD *)std::string::size_type v9 = *v7;
        uint64_t v12 = v9 + 4;
      }
      ++v7;
      std::string::size_type v9 = v12;
    }
    while (v7 != v8);
  }
  if (v225 - (void)v224 != (char *)v208 - (char *)v207 || v222 - v221 != v210 - v209)
  {
    uint64_t v215 = 1065353216;
    float v216 = 0.0;
    goto LABEL_50;
  }
  unsigned int v19 = *((_DWORD *)v4 + 28);
  unint64_t v249 = 0;
  unint64_t v250 = 0;
  unint64_t v247 = 0;
  unint64_t v248 = 0;
  uint64_t v215 = 1065353216;
  float v216 = 0.0;
  uint64_t v218 = (int *)v217;
  if (v208 == v207 || v210 == v209) {
    goto LABEL_50;
  }
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v242);
  uint64_t v181 = (uint64_t *)((char *)v4 + 8);
  RuleBasedRepetitionPredictor::Predict((uint64_t *)&v207, (uint64_t *)&v209, &v224, &v221, v19, (uint64_t *)v4 + 1, (uint64_t)v242);
  uint64_t v240 = 0;
  uint64_t v239 = 0;
  uint64_t v241 = 0;
  RepetitionPredictorResult::AugmentationToWords((uint64_t)v242, &v207, &v209, &v239);
  uint64_t v21 = v207;
  uint64_t v20 = v208;
  unint64_t v22 = ((char *)v208 - (char *)v207) / 24;
  std::string v186 = a3;
  unsigned int v180 = v19;
  if (v208 == v207)
  {
    unint64_t v23 = ((char *)v208 - (char *)v207) / 24;
    unint64_t v25 = v23;
    goto LABEL_134;
  }
  long long v203 = v208;
  unint64_t v23 = 0;
  uint64_t v24 = v239;
  unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v240 - v239) >> 3);
  if (v22 <= 1) {
    int64_t v26 = 1;
  }
  else {
    int64_t v26 = ((char *)v208 - (char *)v207) / 24;
  }
  while (1)
  {
    if (v23 == v25)
    {
      unint64_t v23 = v25;
      goto LABEL_113;
    }
    int v27 = &v21[3 * v23];
    std::string::size_type v28 = (unsigned __int8 **)(v24 + 24 * v23);
    uint64_t v29 = *((unsigned __int8 *)v27 + 23);
    if ((v29 & 0x80u) == 0) {
      uint64_t v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
    }
    else {
      uint64_t v30 = v27[1];
    }
    size_t v31 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
    int v32 = (char)v31;
    if ((char)v31 < 0) {
      size_t v31 = v28[1];
    }
    if (v30 != v31) {
      goto LABEL_113;
    }
    if (v32 >= 0) {
      int v33 = (unsigned __int8 *)(v24 + 24 * v23);
    }
    else {
      int v33 = *v28;
    }
    if ((v29 & 0x80) != 0)
    {
      if (memcmp(*v27, v33, (size_t)v27[1])) {
        goto LABEL_113;
      }
      goto LABEL_47;
    }
    if (*((unsigned char *)v27 + 23)) {
      break;
    }
LABEL_47:
    if (++v23 == v26)
    {
      unint64_t v23 = v22;
      goto LABEL_113;
    }
  }
  while (*(unsigned __int8 *)v27 == *v33)
  {
    int v27 = (unsigned __int8 **)((char *)v27 + 1);
    ++v33;
    if (!--v29) {
      goto LABEL_47;
    }
  }
LABEL_113:
  unint64_t v53 = 0;
  while (v53 != v25)
  {
    int64_t v54 = &(&v21[3 * v22])[3 * ~v53];
    uint64_t v55 = (unsigned __int8 **)(v24 + 24 * (v25 + ~v53));
    uint64_t v56 = *((unsigned __int8 *)v54 + 23);
    if ((v56 & 0x80u) == 0) {
      std::string::size_type v57 = (unsigned __int8 *)*((unsigned __int8 *)v54 + 23);
    }
    else {
      std::string::size_type v57 = v54[1];
    }
    std::string::size_type v58 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
    int v59 = (char)v58;
    if ((char)v58 < 0) {
      std::string::size_type v58 = v55[1];
    }
    if (v57 != v58) {
      goto LABEL_132;
    }
    if (v59 >= 0) {
      uint64_t v60 = (unsigned __int8 *)(v24 + 24 * (v25 + ~v53));
    }
    else {
      uint64_t v60 = *v55;
    }
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v54, v60, (size_t)v54[1])) {
        goto LABEL_132;
      }
    }
    else if (*((unsigned char *)v54 + 23))
    {
      while (*(unsigned __int8 *)v54 == *v60)
      {
        int64_t v54 = (unsigned __int8 **)((char *)v54 + 1);
        ++v60;
        if (!--v56) {
          goto LABEL_130;
        }
      }
LABEL_132:
      unint64_t v25 = v53;
      break;
    }
LABEL_130:
    if (++v53 == v26)
    {
      unint64_t v25 = v22;
      break;
    }
  }
  a3 = v186;
  uint64_t v20 = v203;
LABEL_134:
  memset(&v254, 0, sizeof(v254));
  memset(&v253, 0, sizeof(v253));
  if (v23 < v22 && v23 < v22 - v25)
  {
    int64x2_t v61 = (long long *)&v21[3 * v23];
    unint64_t v62 = (long long *)&v20[-3 * v25];
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
    while (v61 != v62)
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v252, v61);
      int64x2_t v61 = (long long *)((char *)v61 + 24);
    }
  }
  unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v240 - v239) >> 3);
  if (v23 < v63 && v23 < v63 - v25)
  {
    unint64_t v76 = (long long *)(v239 + 24 * v23);
    id v77 = (long long *)(v240 - 24 * v25);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
    while (v76 != v77)
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v252, v76);
      unint64_t v76 = (long long *)((char *)v76 + 24);
    }
  }
  memset(&v252, 0, sizeof(v252));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v252, (long long *)v253.__r_.__value_.__l.__data_, (long long *)v253.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253.__r_.__value_.__l.__size_ - v253.__r_.__value_.__r.__words[0]) >> 3));
  memset(&v251, 0, sizeof(v251));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v251, (long long *)v209, (long long *)v210, 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3));
  std::string::size_type size = v251.__r_.__value_.__l.__size_;
  std::string::size_type v65 = v251.__r_.__value_.__r.__words[0];
  if (v251.__r_.__value_.__r.__words[0] == v251.__r_.__value_.__l.__size_)
  {
    std::chrono::steady_clock::time_point v236 = &v251;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    std::chrono::steady_clock::time_point v236 = &v252;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    goto LABEL_197;
  }
  long long v67 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
  while ((void)v67 != *((void *)&v67 + 1))
  {
    int v68 = (unsigned __int8 **)v67;
    std::string::size_type v69 = v65;
    while (v69 != size)
    {
      uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
      if ((v70 & 0x80u) == 0) {
        uint64_t v71 = (unsigned __int8 *)*(unsigned __int8 *)(v69 + 23);
      }
      else {
        uint64_t v71 = *(unsigned __int8 **)(v69 + 8);
      }
      uint64_t v72 = (unsigned __int8 *)*((unsigned __int8 *)v68 + 23);
      int v73 = (char)v72;
      if ((char)v72 < 0) {
        uint64_t v72 = v68[1];
      }
      if (v71 != v72) {
        break;
      }
      if (v73 >= 0) {
        std::vector<std::string>::pointer v74 = (unsigned __int8 *)v68;
      }
      else {
        std::vector<std::string>::pointer v74 = *v68;
      }
      if ((v70 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v69, v74, *(void *)(v69 + 8))) {
          break;
        }
      }
      else if (*(unsigned char *)(v69 + 23))
      {
        uint64_t v75 = 0;
        while (*(unsigned __int8 *)(v69 + v75) == v74[v75])
        {
          if (v70 == ++v75) {
            goto LABEL_165;
          }
        }
        break;
      }
LABEL_165:
      v69 += 24;
      v68 += 3;
      if (v68 == *((unsigned __int8 ***)&v67 + 1)) {
        goto LABEL_172;
      }
    }
    v65 += 24;
    if (v65 == size)
    {
      std::chrono::steady_clock::time_point v236 = &v251;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      std::chrono::steady_clock::time_point v236 = &v252;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      if ((void)v67 == *((void *)&v67 + 1)) {
        goto LABEL_173;
      }
LABEL_197:
      char v80 = 0;
      goto LABEL_226;
    }
  }
LABEL_172:
  std::chrono::steady_clock::time_point v236 = &v251;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  std::chrono::steady_clock::time_point v236 = &v252;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
LABEL_173:
  int FirstAndLastIndices = getFirstAndLastIndices(v207, v208, (uint64_t)v254.__r_.__value_.__l.__data_, v254.__r_.__value_.__l.__size_, &v250, &v249);
  int v79 = getFirstAndLastIndices((unsigned __int8 **)v209, (unsigned __int8 **)v210, (uint64_t)v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_, &v248, &v247);
  char v80 = 0;
  long long v4 = v202;
  if (!FirstAndLastIndices || !v79) {
    goto LABEL_227;
  }
  unint64_t v81 = v250;
  uint64_t v82 = v207;
  if (v250)
  {
    unint64_t v83 = v248;
    if (v248)
    {
      unint64_t v84 = v209;
      do
      {
        unint64_t v85 = &v82[3 * v81 - 3];
        unint64_t v86 = v83 - 1;
        uint64_t v87 = &v84[24 * v83 - 24];
        uint64_t v88 = *((unsigned __int8 *)v85 + 23);
        if ((v88 & 0x80u) == 0) {
          uint64_t v89 = (unsigned __int8 *)*((unsigned __int8 *)v85 + 23);
        }
        else {
          uint64_t v89 = v85[1];
        }
        uint64_t v90 = (unsigned __int8 *)v87[23];
        int v91 = (char)v90;
        if ((char)v90 < 0) {
          uint64_t v90 = (unsigned __int8 *)*((void *)v87 + 1);
        }
        if (v89 != v90) {
          break;
        }
        if (v91 >= 0) {
          uint64_t v92 = &v84[24 * v83 - 24];
        }
        else {
          uint64_t v92 = *(char **)v87;
        }
        if ((v88 & 0x80) != 0)
        {
          if (memcmp(*v85, v92, (size_t)v85[1])) {
            break;
          }
        }
        else if (*((unsigned char *)v85 + 23))
        {
          while (*(unsigned __int8 *)v85 == *v92)
          {
            unint64_t v85 = (unsigned __int8 **)((char *)v85 + 1);
            ++v92;
            if (!--v88) {
              goto LABEL_193;
            }
          }
          break;
        }
LABEL_193:
        if (v81 == 1)
        {
          --v83;
          unint64_t v81 = 0;
          break;
        }
        --v83;
        --v81;
      }
      while (v86);
      unint64_t v250 = v81;
      unint64_t v248 = v83;
    }
  }
  unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (v208 - v82) - 1;
  unint64_t v94 = v249;
  if (v249 >= v93) {
    goto LABEL_225;
  }
  uint64_t v95 = v209;
  unint64_t v96 = v247;
  if (v247 <= 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3) - 1) {
    unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3) - 1;
  }
  else {
    unint64_t v97 = v247;
  }
  uint64_t v200 = (void *)(v247 + ~v249 - 0x5555555555555555 * (v208 - v82));
  long long v204 = (void *)(v249 + v97 - v247);
  while (2)
  {
    if (v96 == v97)
    {
      unint64_t v96 = v97;
      unint64_t v94 = (unint64_t)v204;
      goto LABEL_224;
    }
    unint64_t v98 = v94 + 1;
    uint64_t v99 = &v82[3 * v94 + 3];
    int64x2_t v100 = &v95[24 * v96 + 24];
    uint64_t v101 = *((unsigned __int8 *)v99 + 23);
    if ((v101 & 0x80u) == 0) {
      unint64_t v102 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
    }
    else {
      unint64_t v102 = v99[1];
    }
    std::string::size_type v103 = (unsigned __int8 *)v100[23];
    int v104 = (char)v103;
    if ((char)v103 < 0) {
      std::string::size_type v103 = (unsigned __int8 *)*((void *)v100 + 1);
    }
    if (v102 != v103) {
      goto LABEL_224;
    }
    if (v104 >= 0) {
      int v105 = &v95[24 * v96 + 24];
    }
    else {
      int v105 = *(char **)v100;
    }
    if ((v101 & 0x80) != 0)
    {
      if (memcmp(*v99, v105, (size_t)v99[1])) {
        goto LABEL_224;
      }
LABEL_221:
      ++v94;
      ++v96;
      if (v98 == v93)
      {
        unint64_t v96 = (unint64_t)v200;
        unint64_t v94 = v93;
        goto LABEL_224;
      }
      continue;
    }
    break;
  }
  if (!*((unsigned char *)v99 + 23)) {
    goto LABEL_221;
  }
  while (*(unsigned __int8 *)v99 == *v105)
  {
    uint64_t v99 = (unsigned __int8 **)((char *)v99 + 1);
    ++v105;
    if (!--v101) {
      goto LABEL_221;
    }
  }
LABEL_224:
  unint64_t v249 = v94;
  unint64_t v247 = v96;
LABEL_225:
  char v80 = 1;
  a3 = v186;
LABEL_226:
  long long v4 = v202;
LABEL_227:
  std::chrono::steady_clock::time_point v236 = &v253;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
  if (v80)
  {
    unint64_t v179 = v250;
    uint64_t v106 = &v207[3 * v250];
    unint64_t v178 = v249;
    std::string v187 = &v207[3 * v249];
    unint64_t v177 = v248;
    uint64_t v107 = (unsigned __int8 **)&v209[24 * v248];
    unint64_t v176 = v247;
    os_log_type_t v189 = (unsigned __int8 **)&v209[24 * v247];
    uint64_t v192 = (uint64_t)v106;
    uint64_t v194 = (uint64_t)(v189 + 3);
    if (v187 + 3 != v106)
    {
      int v108 = 0;
      unint64_t v182 = 0;
      unint64_t v198 = 0;
      long long v201 = 0;
      uint8x8_t v109 = 0;
      unint64_t v196 = 0;
      uint64_t v110 = 0;
      std::string::size_type v111 = 0;
      unint64_t v112 = 0;
      while (1)
      {
        long long v205 = v110;
        uint64_t v113 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v107, v194, v106);
        if (v113 == v194)
        {
          if ((unint64_t)v108 >= v182)
          {
            uint64_t v121 = v108 - v110;
            unint64_t v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61) {
              goto LABEL_358;
            }
            if ((uint64_t)(v182 - (void)v205) >> 2 > v122) {
              unint64_t v122 = (uint64_t)(v182 - (void)v205) >> 2;
            }
            if (v182 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v122;
            }
            if (v123) {
              unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v123);
            }
            else {
              uint64_t v124 = 0;
            }
            uint64_t v135 = (unsigned __int8 ***)(v123 + 8 * v121);
            int8x8_t *v135 = v106;
            uint64_t v136 = v135 + 1;
            if (v108 != v205)
            {
              do
              {
                BOOL v137 = *--v108;
                *--uint64_t v135 = v137;
              }
              while (v108 != v205);
              int v108 = v205;
            }
            uint64_t v110 = v135;
            unint64_t v182 = v123 + 8 * v124;
            if (v108) {
              operator delete(v108);
            }
            char v116 = v136;
            goto LABEL_284;
          }
          *int v108 = v106;
          char v116 = v108 + 1;
        }
        else
        {
          uint64_t v114 = v113;
          if ((unint64_t)v111 >= v198)
          {
            uint64_t v117 = ((char *)v111 - (char *)v112) >> 3;
            unint64_t v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61) {
              goto LABEL_358;
            }
            if ((uint64_t)(v198 - (void)v112) >> 2 > v118) {
              unint64_t v118 = (uint64_t)(v198 - (void)v112) >> 2;
            }
            if (v198 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v119 = v118;
            }
            if (v119) {
              unint64_t v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v119);
            }
            else {
              uint64_t v120 = 0;
            }
            uint64_t v125 = (uint64_t *)(v119 + 8 * v117);
            *uint64_t v125 = (uint64_t)v106;
            int v115 = (unsigned __int8 ***)(v125 + 1);
            if (v111 != (unsigned __int8 ***)v112)
            {
              do
              {
                uint64_t v126 = (uint64_t)*--v111;
                *--uint64_t v125 = v126;
              }
              while (v111 != (unsigned __int8 ***)v112);
              std::string::size_type v111 = (unsigned __int8 ***)v112;
            }
            unint64_t v112 = v125;
            unint64_t v198 = v119 + 8 * v120;
            if (v111) {
              operator delete(v111);
            }
          }
          else
          {
            *std::string::size_type v111 = v106;
            int v115 = v111 + 1;
          }
          if ((unint64_t)v109 >= v196)
          {
            uint64_t v127 = v109 - v201;
            unint64_t v128 = v127 + 1;
            std::string v184 = v112;
            if ((unint64_t)(v127 + 1) >> 61) {
LABEL_358:
            }
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v196 - (void)v201) >> 2 > v128) {
              unint64_t v128 = (uint64_t)(v196 - (void)v201) >> 2;
            }
            if (v196 - (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v129 = v128;
            }
            if (v129) {
              unint64_t v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v129);
            }
            else {
              uint64_t v130 = 0;
            }
            long long v131 = (uint64_t *)(v129 + 8 * v127);
            *long long v131 = v114;
            uint64_t v132 = v131 + 1;
            if (v109 == v201)
            {
              uint64_t v110 = v205;
              char v133 = v201;
            }
            else
            {
              uint64_t v110 = v205;
              char v133 = v201;
              do
              {
                uint64_t v134 = *--v109;
                *--long long v131 = v134;
              }
              while (v109 != v201);
            }
            unint64_t v196 = v129 + 8 * v130;
            if (v133) {
              operator delete(v133);
            }
            char v116 = v108;
            long long v201 = v131;
            uint8x8_t v109 = v132;
            std::string::size_type v111 = v115;
            unint64_t v112 = v184;
            goto LABEL_284;
          }
          *v109++ = v114;
          char v116 = v108;
          std::string::size_type v111 = v115;
        }
        uint64_t v110 = v205;
LABEL_284:
        int v108 = v116;
        BOOL v138 = v106 == v187;
        v106 += 3;
        if (v138) {
          goto LABEL_288;
        }
      }
    }
    char v116 = 0;
    long long v201 = 0;
    uint8x8_t v109 = 0;
    uint64_t v110 = 0;
    std::string::size_type v111 = 0;
    unint64_t v112 = 0;
LABEL_288:
    long long v206 = (uint64_t *)v110;
    int v185 = v112;
    std::chrono::steady_clock::time_point v199 = (uint64_t *)v116;
    int v139 = 0;
    if ((unsigned __int8 **)v194 != v107)
    {
      std::string v140 = 0;
      unint64_t v141 = 0;
      while (1)
      {
        if ((unsigned __int8 **)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v192, (uint64_t)(v187 + 3), v107) != v187 + 3)goto LABEL_293; {
        if ((unint64_t)v140 < v141)
        }
          break;
        uint64_t v143 = v140 - v139;
        unint64_t v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 61) {
          goto LABEL_358;
        }
        if ((uint64_t)(v141 - (void)v139) >> 2 > v144) {
          unint64_t v144 = (uint64_t)(v141 - (void)v139) >> 2;
        }
        if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v145 = v144;
        }
        if (v145) {
          unint64_t v145 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v145);
        }
        else {
          uint64_t v146 = 0;
        }
        char v147 = (uint64_t *)(v145 + 8 * v143);
        uint64_t *v147 = (uint64_t)v107;
        std::string v142 = v147 + 1;
        while (v140 != v139)
        {
          uint64_t v148 = (uint64_t)*--v140;
          *--char v147 = v148;
        }
        unint64_t v141 = v145 + 8 * v146;
        if (v139) {
          operator delete(v139);
        }
        int v139 = (unsigned __int8 ***)v147;
        unint64_t v112 = v185;
LABEL_294:
        std::string v140 = (unsigned __int8 ***)v142;
        BOOL v138 = v107 == v189;
        v107 += 3;
        if (v138) {
          goto LABEL_313;
        }
      }
      *v140++ = v107;
LABEL_293:
      std::string v142 = (uint64_t *)v140;
      goto LABEL_294;
    }
    std::string v142 = 0;
LABEL_313:
    memset(&v252, 0, sizeof(v252));
    memset(&v251, 0, sizeof(v251));
    int v149 = &v224[24 * v179];
    uint64_t v150 = &v224[24 * v178];
    if (v150 + 24 == v149)
    {
      std::string::size_type v151 = 0;
    }
    else
    {
      do
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)v149, *((_DWORD **)v149 + 1), (uint64_t)&v252);
        BOOL v138 = v149 == v150;
        v149 += 24;
      }
      while (!v138);
      std::string::size_type v151 = v251.__r_.__value_.__r.__words[0];
    }
    uint64_t v152 = (_DWORD **)(v221 + 24 * v177);
    uint64_t v153 = (_DWORD **)(v221 + 24 * v176);
    v251.__r_.__value_.__l.__size_ = v151;
    if (v153 + 3 != v152)
    {
      do
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*v152, v152[1], (uint64_t)&v251);
        BOOL v138 = v152 == v153;
        v152 += 3;
      }
      while (!v138);
    }
    long long v154 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
    float v155 = rawEditDistance<unsigned int>(&v252, (uint64_t)&v251, v181, v180);
    if ((unint64_t)((uint64_t)(*((void *)&v154 + 1) - v154) >> 2) <= 1) {
      uint64_t v156 = 1;
    }
    else {
      uint64_t v156 = (uint64_t)(*((void *)&v154 + 1) - v154) >> 2;
    }
    long long v237 = 0;
    std::chrono::steady_clock::time_point v236 = 0;
    uint64_t v238 = 0;
    uint64_t v234 = 0;
    long long v233 = 0;
    uint64_t v235 = 0;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v224, &v254, v206, v199, &v236);
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v221, &v254, (uint64_t *)v139, v142, &v233);
    long long v157 = v237;
    uint64_t v158 = v236;
    float v159 = rawEditDistance<unsigned int>(&v236, (uint64_t)&v233, v181, v180);
    if ((unint64_t)((v157 - v158) >> 2) <= 1) {
      uint64_t v160 = 1;
    }
    else {
      uint64_t v160 = (v157 - v158) >> 2;
    }
    std::string::size_type v231 = 0;
    unint64_t v230 = 0;
    uint64_t v232 = 0;
    uint64_t v228 = 0;
    long long v227 = 0;
    uint64_t v229 = 0;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v224, &v254, v112, (uint64_t *)v111, &v230);
    unint64_t v195 = v160;
    unint64_t v197 = v156;
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(&v221, &v254, v201, v109, &v227);
    uint64_t v191 = v230;
    long long v193 = v231;
    uint64_t v188 = v227;
    unint64_t v190 = v228;
    std::string v183 = v237;
    float v161 = v236;
    uint64_t v162 = v234;
    std::ios_base v163 = v233;
    uint64_t v164 = (float *)operator new(0x18uLL);
    uint64_t v165 = v164;
    float v166 = (double)(unint64_t)(v109 - v201 + (((char *)v111 - (char *)v185) >> 3)) * 0.5;
    float v167 = (double)(unint64_t)(((v162 - v163) >> 2) + ((v183 - v161) >> 2)) * 0.5;
    float v168 = (double)(unint64_t)((((char *)v142 - (char *)v139) >> 3) + v199 - v206) * 0.5;
    *uint64_t v164 = v155 / (float)v197;
    v164[1] = v159 / (float)v195;
    float v169 = (double)(unint64_t)(((v190 - v188) >> 2) + ((v193 - v191) >> 2)) * 0.5;
    v164[2] = v166;
    v164[3] = v168;
    v164[4] = v169;
    v164[5] = v167;
    if (v12 - v11 != 28)
    {
      id v174 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v254.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v254.__r_.__value_.__r.__words + 4) = (std::string::size_type)"calculateProability";
        _os_log_error_impl(&dword_1C9555000, v174, OS_LOG_TYPE_ERROR, "%s [ERR]: Feature vector size should match size of model", (uint8_t *)&v254, 0xCu);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(&v254, "Feature vector size should match size of model");
      std::string::basic_string[abi:ne180100]<0>(&v253, "QueryRewrite");
      InferenceError::InferenceError(exception, (uint64_t)&v254, (uint64_t)&v253, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/LogisticRegressionPredictor.cpp", 181);
    }
    uint64_t v170 = 0;
    float v171 = 0.0;
    a3 = v186;
    do
    {
      float v171 = v171 + (float)(v164[v170] * *(float *)&v11[v170 * 4]);
      ++v170;
    }
    while (v170 != 6);
    float v172 = 1.0 / (expf(-(float)(v171 + *((float *)v12 - 1))) + 1.0);
    *(float *)&uint64_t v215 = 1.0 - v172;
    if (v179 || (float v173 = 0.0, v178 != 0xAAAAAAAAAAAAAAABLL * (v208 - v207) - 1))
    {
      float v173 = v172;
      float v172 = 0.0;
    }
    *((float *)&v215 + 1) = v173;
    float v216 = v172;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v217, (char *)__src, (uint64_t)v244, (v244 - (unsigned char *)__src) >> 2);
    operator delete(v165);
    long long v4 = v202;
    if (v227)
    {
      uint64_t v228 = v227;
      operator delete(v227);
    }
    if (v230)
    {
      std::string::size_type v231 = v230;
      operator delete(v230);
    }
    if (v233)
    {
      uint64_t v234 = v233;
      operator delete(v233);
    }
    if (v236)
    {
      long long v237 = v236;
      operator delete(v236);
    }
    if (v251.__r_.__value_.__r.__words[0])
    {
      v251.__r_.__value_.__l.__size_ = v251.__r_.__value_.__r.__words[0];
      operator delete(v251.__r_.__value_.__l.__data_);
    }
    if (v252.__r_.__value_.__r.__words[0])
    {
      v252.__r_.__value_.__l.__size_ = v252.__r_.__value_.__r.__words[0];
      operator delete(v252.__r_.__value_.__l.__data_);
    }
    if (v139) {
      operator delete(v139);
    }
    if (v201) {
      operator delete(v201);
    }
    if (v206) {
      operator delete(v206);
    }
    if (v185) {
      operator delete(v185);
    }
  }
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v239;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  if (v246 < 0) {
    operator delete(__p);
  }
  if (__src)
  {
    v244 = __src;
    operator delete(__src);
  }
LABEL_50:
  RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v242, (const RepetitionPredictorResult *)&v215);
  if (*((char *)v4 + 271) < 0) {
    std::string::__init_copy_ctor_external(&v253, *((const std::string::value_type **)v4 + 31), *((void *)v4 + 32));
  }
  else {
    std::string v253 = *(std::string *)((char *)v4 + 248);
  }
  int correction_type = get_correction_type(v242, &v253);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (v246 < 0) {
    operator delete(__p);
  }
  if (__src)
  {
    v244 = __src;
    operator delete(__src);
  }
  if (correction_type == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v252, "");
    uint64_t v34 = (int *)v217;
    uint64_t v35 = v218;
    if (v217 != v218)
    {
      int v36 = -1431655765 * ((unint64_t)((char *)v208 - (char *)v207) >> 3);
      int v37 = ~v36;
      do
      {
        uint64_t v38 = *v34;
        if (!v38) {
          break;
        }
        unint64_t v39 = &v209[24 * (int)v38 + 24 * v37];
        if ((int)v38 <= v36) {
          unint64_t v39 = (char *)&v207[3 * v38 - 3];
        }
        if (v39[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)v39, *((void *)v39 + 1));
        }
        else
        {
          long long v40 = *(_OWORD *)v39;
          v254.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
          *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v40;
        }
        unint64_t v41 = (int)v38 + v37;
        if ((int)v38 <= v36) {
          unint64_t v41 = v38 - 1;
        }
        unsigned __int8 v42 = &v214;
        if ((int)v38 <= v36) {
          unsigned __int8 v42 = &v213;
        }
        if (((*(void *)(*v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
          std::string::push_back(&v254, 32);
        }
        if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v43 = &v254;
        }
        else {
          int v43 = (std::string *)v254.__r_.__value_.__r.__words[0];
        }
        if ((v254.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v254.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v254.__r_.__value_.__l.__size_;
        }
        std::string::append(&v252, (const std::string::value_type *)v43, v44);
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v254.__r_.__value_.__l.__data_);
        }
        ++v34;
      }
      while (v34 != v35);
    }
    std::string::size_type v45 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    uint64_t v46 = &v252;
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v45 = v252.__r_.__value_.__l.__size_;
      uint64_t v46 = (std::string *)v252.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      unint64_t v47 = v46;
      while (v47->__r_.__value_.__s.__data_[0] == 32)
      {
        unint64_t v47 = (std::string *)((char *)v47 + 1);
        if (!--v45)
        {
          std::string::size_type v48 = -1;
          goto LABEL_92;
        }
      }
      std::string::size_type v48 = (char *)v47 - (char *)v46;
    }
    else
    {
      std::string::size_type v48 = -1;
    }
LABEL_92:
    std::string::erase(&v252, 0, v48);
    std::string::size_type v49 = HIBYTE(v252.__r_.__value_.__r.__words[2]);
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v50 = &v252;
    }
    else {
      unint64_t v50 = (std::string *)v252.__r_.__value_.__r.__words[0];
    }
    if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = v252.__r_.__value_.__l.__size_;
    }
    while (v49)
    {
      int v51 = v50->__r_.__value_.__s.__data_[--v49];
      if (v51 != 32)
      {
        std::string::size_type v52 = v49 + 1;
        goto LABEL_101;
      }
    }
    std::string::size_type v52 = 0;
LABEL_101:
    std::string::erase(&v252, v52, 0xFFFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v220.__r_.__value_.__l.__data_);
    }
    std::string v220 = v252;
  }
  if (v11) {
    operator delete(v11);
  }
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  toQRResponse(a3, (uint64_t)&v215);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (v217)
  {
    uint64_t v218 = (int *)v217;
    operator delete(v217);
  }
  RepetitionPredictorInput::~RepetitionPredictorInput((void **)&v207);
}

void sub_1C958BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v69 - 153) < 0) {
    operator delete(*(void **)(v69 - 176));
  }
  if (*(char *)(v69 - 121) < 0)
  {
    operator delete(*(void **)(v69 - 144));
    if ((v68 & 1) == 0)
    {
LABEL_8:
      operator delete(v66);
      uint64_t v71 = (void *)STACK[0x238];
      if (STACK[0x238])
      {
        STACK[0x240] = (unint64_t)v71;
        operator delete(v71);
      }
      uint64_t v72 = (void *)STACK[0x250];
      if (STACK[0x250])
      {
        STACK[0x258] = (unint64_t)v72;
        operator delete(v72);
      }
      int v73 = (void *)STACK[0x268];
      if (STACK[0x268])
      {
        STACK[0x270] = (unint64_t)v73;
        operator delete(v73);
      }
      std::vector<std::string>::pointer v74 = (void *)STACK[0x280];
      if (STACK[0x280])
      {
        STACK[0x288] = (unint64_t)v74;
        operator delete(v74);
      }
      uint64_t v75 = *(void **)(v69 - 224);
      if (v75)
      {
        *(void *)(v69 - 216) = v75;
        operator delete(v75);
      }
      unint64_t v76 = *(void **)(v69 - 200);
      if (v76)
      {
        *(void *)(v69 - 192) = v76;
        operator delete(v76);
      }
      if (v65) {
        operator delete(v65);
      }
      if (a26) {
        operator delete(a26);
      }
      if (a28) {
        operator delete(a28);
      }
      if (a17) {
        operator delete(a17);
      }
      *(void *)(v69 - 144) = &STACK[0x298];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)&STACK[0x2B0]);
      if (v64) {
        operator delete(v64);
      }
      RepetitionPredictorResult::~RepetitionPredictorResult(&a64);
      *(void *)(v69 - 144) = &STACK[0x208];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      *(void *)(v69 - 144) = &STACK[0x220];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 144));
      RepetitionPredictorInput::~RepetitionPredictorInput(&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v68)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

void RepetitionPredictorResult::~RepetitionPredictorResult(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  long long v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

void RepetitionPredictorResult::RepetitionPredictorResult(RepetitionPredictorResult *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = 1065353216;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  MEMORY[0x1CB786A80]((char *)this + 48, "");
  *((unsigned char *)this + 72) = 0;
}

void sub_1C958C110(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marrs::qr::orchestration::CbRPredictorPlugin::validate(marrs::qr::orchestration::CbRPredictorPlugin *this, const QRRequest *a2)
{
  return 1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](a1 + 128);
  return a1;
}

void std::vector<MDMentionOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<MDMentionOverride>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<MDMentionOverride>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<MDMentionOverride>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<MDMentionOverride>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MDMentionOverride>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

char *std::vector<MDMentionOverride>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MDMentionOverride>,MDMentionOverride*,MDMentionOverride*,MDMentionOverride*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  unint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    int v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      void *v4 = *((void *)v6 - 1);
      int v8 = (std::string *)(v4 + 1);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        v4[3] = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 4;
      unint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MDMentionOverride>,MDMentionOverride*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1C958C6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MDMentionOverride>,MDMentionOverride*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void std::vector<MDMentionOverride>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<MDMentionOverride>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MRRuleConfig::~MRRuleConfig(void **this)
{
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void MRModelConfig::~MRModelConfig(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void MRConfig::~MRConfig(void **this)
{
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>(char *a1, uint64_t *a2, uint64_t *a3)
{
  if (*((void *)a1 + 2))
  {
    int v6 = *(uint64_t **)a1;
    int v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    if (v6[1]) {
      long long v9 = (uint64_t *)v6[1];
    }
    else {
      long long v9 = v6;
    }
    int64_t v26 = a1;
    int v27 = v9;
    std::string::size_type v28 = v9;
    if (v9)
    {
      int v27 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        unint64_t v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          if (v9 != v10) {
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v9 + 56, (char *)v10[7], v10[8], (v10[8] - v10[7]) >> 2);
          }
          uint64_t v11 = *v8;
          char v12 = (uint64_t **)(a1 + 8);
          uint64_t v13 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                char v12 = (uint64_t **)v11;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v28 + 4, v11 + 4)) {
                  break;
                }
                uint64_t v11 = *v12;
                uint64_t v13 = v12;
                if (!*v12) {
                  goto LABEL_16;
                }
              }
              uint64_t v11 = v12[1];
            }
            while (v11);
            uint64_t v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v28);
          long long v9 = v27;
          std::string::size_type v28 = v27;
          if (v27) {
            int v27 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          }
          unint64_t v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              unint64_t v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              unint64_t v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          unint64_t v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    uint64_t v16 = (uint64_t **)(a1 + 8);
    do
    {
      BOOL v17 = (char *)operator new(0x50uLL);
      int v18 = (uint64_t *)v17;
      int64_t v26 = v17;
      int v27 = (uint64_t *)(a1 + 8);
      LOBYTE(v28) = 0;
      unsigned int v19 = v17 + 32;
      if (*((char *)a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 32), (const std::string::value_type *)a2[4], a2[5]);
      }
      else
      {
        long long v20 = *((_OWORD *)a2 + 2);
        *((void *)v17 + 6) = a2[6];
        *(_OWORD *)unsigned int v19 = v20;
      }
      v18[7] = 0;
      v18[8] = 0;
      v18[9] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v18 + 7, (const void *)a2[7], a2[8], (a2[8] - a2[7]) >> 2);
      LOBYTE(v28) = 1;
      uint64_t v21 = *v16;
      unint64_t v22 = (uint64_t **)(a1 + 8);
      unint64_t v23 = (uint64_t **)(a1 + 8);
      if (*v16)
      {
        do
        {
          while (1)
          {
            unint64_t v22 = (uint64_t **)v21;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v19, v21 + 4)) {
              break;
            }
            uint64_t v21 = *v22;
            unint64_t v23 = v22;
            if (!*v22) {
              goto LABEL_37;
            }
          }
          uint64_t v21 = v22[1];
        }
        while (v21);
        unint64_t v23 = v22 + 1;
      }
LABEL_37:
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v23, v18);
      int64_t v26 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v26);
      uint64_t v24 = (uint64_t *)a2[1];
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          uint64_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unint64_t v25 = (uint64_t *)a2[2];
          BOOL v15 = *v25 == (void)a2;
          a2 = v25;
        }
        while (!v15);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
}

void sub_1C958CBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (uint64_t **)(a1 + 8);
  long long v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const char *)a2;
    }
    else {
      uint64_t v7 = *(const char **)a2;
    }
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t **)v5;
        uint64_t v10 = v5[4];
        int v8 = v5 + 4;
        long long v9 = (uint64_t *)v10;
        uint64_t v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v7, v11) & 0x80000000) == 0) {
          break;
        }
        long long v5 = *v6;
        char v12 = v6;
        if (!*v6) {
          goto LABEL_15;
        }
      }
      uint64_t result = (uint64_t *)strcasecmp(v11, v7);
      if ((result & 0x80000000) == 0) {
        break;
      }
      char v12 = v6 + 1;
      long long v5 = v6[1];
      if (!v5) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    char v12 = (uint64_t **)(a1 + 8);
LABEL_15:
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)&v14, a1, a3);
    return std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v6, v12, v14);
  }
  return result;
}

uint64_t **std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    unsigned int v19 = (uint64_t *)result;
    long long v20 = v8;
    uint64_t v21 = v8;
    if (v8)
    {
      long long v20 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v21 + 4));
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, v10);
          int v8 = v20;
          uint64_t v21 = v20;
          if (v20) {
            long long v20 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          }
          char v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              char v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v13);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      unint64_t v14 = v19;
      BOOL v15 = (uint64_t **)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v19 + 4));
      uint64_t result = (uint64_t **)std::__tree<std::string>::__insert_node_at(v5, v18, v15, v14);
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_1C958D034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void VisTextMatchKeywords::~VisTextMatchKeywords(char **this)
{
}

void *std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      int v6 = (const char *)a3;
    }
    else {
      int v6 = *(const char **)a3;
    }
    do
    {
      while (1)
      {
        long long v5 = v4;
        long long v9 = (void *)v4[4];
        uint64_t v7 = v4 + 4;
        int v8 = v9;
        uint64_t v10 = (const char *)(*((char *)v7 + 23) >= 0 ? v7 : v8);
        if ((strcasecmp(v6, v10) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_14;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_14:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy((char *)v2);
  }
  return a1;
}

void std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__construct_node<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  int v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1C958D1D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(void *result, void *a2, void *a3)
{
  uint64_t v5 = (uint64_t)result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v8 = (uint64_t **)(result + 1);
    uint64_t v7 = result[1];
    *uint64_t result = result + 1;
    *(void *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(void *)(v6 + 8)) {
      long long v9 = *(uint64_t **)(v6 + 8);
    }
    else {
      long long v9 = (uint64_t *)v6;
    }
    unint64_t v22 = result;
    unint64_t v23 = v9;
    uint64_t v24 = v9;
    if (v9)
    {
      unint64_t v23 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        uint64_t v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          uint64_t v11 = *v8;
          char v12 = (uint64_t **)(v5 + 8);
          BOOL v13 = (uint64_t **)(v5 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                char v12 = (uint64_t **)v11;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v24 + 4, v11 + 4)) {
                  break;
                }
                uint64_t v11 = *v12;
                BOOL v13 = v12;
                if (!*v12) {
                  goto LABEL_14;
                }
              }
              uint64_t v11 = v12[1];
            }
            while (v11);
            BOOL v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::string>::__insert_node_at((uint64_t **)v5, (uint64_t)v12, v13, v24);
          long long v9 = v23;
          uint64_t v24 = v23;
          if (v23) {
            unint64_t v23 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          unint64_t v14 = (void *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              unint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (void *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              uint64_t v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          uint64_t v10 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (void *)std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v22, v5, (uint64_t)(a2 + 4));
      uint64_t v16 = v22;
      BOOL v17 = *(uint64_t **)(v5 + 8);
      uint64_t v18 = (uint64_t **)(v5 + 8);
      unsigned int v19 = (uint64_t **)(v5 + 8);
      if (v17)
      {
        do
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v17;
            if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v16 + 4, v17 + 4)) {
              break;
            }
            BOOL v17 = *v18;
            unsigned int v19 = v18;
            if (!*v18) {
              goto LABEL_31;
            }
          }
          BOOL v17 = v18[1];
        }
        while (v17);
        unsigned int v19 = v18 + 1;
      }
LABEL_31:
      uint64_t result = std::__tree<std::string>::__insert_node_at((uint64_t **)v5, (uint64_t)v18, v19, v16);
      long long v20 = (void *)a2[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          long long v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)a2[2];
          BOOL v15 = *v21 == (void)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void sub_1C958D3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)&v7, (uint64_t)a1, a3);
    return std::__tree<std::string>::__insert_node_at(a1, v8, v6, v7);
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C958D528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

float std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry,marrs::mrr::mr::VerbalKeywordEntry const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t)&this[1], (void *)a2 + 3);
  float result = *((float *)a2 + 12);
  *(float *)&this[2].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1C958D648(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(std::string **a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  char v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)a1[1];
      char v12 = *a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 56;
          std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](v11);
        }
        while ((std::string *)v11 != v10);
        char v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v15 = 0x492492492492492;
    }
    else {
      unint64_t v15 = v14;
    }
    std::vector<marrs::mrr::mr::VerbalKeywordEntry>::__vallocate[abi:ne180100](a1, v15);
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v9, (uint64_t)__str, (uint64_t)a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  if (0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)v10) >> 3) < a4)
  {
    BOOL v17 = (std::string *)((char *)__str + 8 * (((char *)a1[1] - (char *)v10) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(__str, v17, v10);
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalKeywordEntry>,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*,marrs::mrr::mr::VerbalKeywordEntry*>(v9, (uint64_t)v17, (uint64_t)a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::string *)v16;
    return;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(__str, a3, v10);
  for (uint64_t i = (uint64_t)a1[1];
        (std::string *)i != v18;
        std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](i))
  {
    i -= 56;
  }
  a1[1] = v18;
}

void sub_1C958D81C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C958D824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::VerbalKeywordEntry::~VerbalKeywordEntry(char **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::allocator<marrs::mrr::mr::VerbalPatternEntry>::construct[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry,marrs::mrr::mr::VerbalPatternEntry const&>(uint64_t a1, void *a2)
{
  uint64_t v3 = std::set<std::string>::set[abi:ne180100](a1, a2);
  return std::set<std::string>::set[abi:ne180100](v3 + 24, a2 + 3);
}

void sub_1C958D89C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(*(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::vector<marrs::mrr::mr::VerbalPatternEntry>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(uint64_t *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  char v10 = (void *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v10) >> 4) < a4)
  {
    unint64_t v15 = (void **)&a2[2 * ((a1[1] - (uint64_t)v10) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>((uint64_t)a2, v15, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>((uint64_t)a2, (void **)a3, v10);
  std::vector<marrs::mrr::mr::VerbalPatternEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t)v16);
}

void sub_1C958DA1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C958DA24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

char *std::vector<marrs::mrr::mr::VerbalPatternEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*,marrs::mrr::mr::VerbalPatternEntry*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      std::set<std::string>::set[abi:ne180100](v4 + 24, v6 + 3);
      v6 += 6;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C958DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::destroy(*(char **)(v9 + 8));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::mrr::mr::VerbalPatternEntry>,marrs::mrr::mr::VerbalPatternEntry*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; v4 != i; v4 -= 48)
    {
      std::__tree<std::string>::destroy(*(char **)(v4 - 16));
      std::__tree<std::string>::destroy(*(char **)(v4 - 40));
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<marrs::mrr::mr::VerbalKeywordEntry>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *,marrs::mrr::mr::VerbalPatternEntry *>(uint64_t a1, void **a2, void *a3)
{
  if ((void **)a1 != a2)
  {
    uint64_t v5 = (void **)a1;
    uint64_t v6 = (void *)(a1 + 32);
    do
    {
      if (v5 != a3)
      {
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3, *v5, v6 - 3);
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3 + 3, v5[3], v6);
      }
      v5 += 6;
      a3 += 6;
      v6 += 6;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<marrs::mrr::mr::VerbalPatternEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__tree<std::string>::destroy(*(char **)(i - 16));
    std::__tree<std::string>::destroy(*(char **)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *,marrs::mrr::mr::VerbalKeywordEntry *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    p_std::string::size_type size = &__str[1].__r_.__value_.__l.__size_;
    do
    {
      std::string::operator=(this, v5);
      if (this != v5) {
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(this[1].__r_.__value_.__r.__words, (void *)v5[1].__r_.__value_.__l.__data_, p_size);
      }
      LODWORD(this[2].__r_.__value_.__l.__data_) = v5[2].__r_.__value_.__l.__data_;
      this = (std::string *)((char *)this + 56);
      p_size += 7;
      uint64_t v5 = (std::string *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__split_buffer<marrs::mrr::mr::VerbalKeywordEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<marrs::mrr::mr::VerbalKeywordEntry>::destroy[abi:ne180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void TypedJson<CcqrConfig>::fromJson(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  objc_msgSend(NSString, "stringWithCString:encoding:", v3, objc_msgSend(NSString, "defaultCStringEncoding"));
  id v71 = (id)objc_claimAutoreleasedReturnValue();
  int v68 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (([v68 fileExistsAtPath:v71] & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v72, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)v73, (uint64_t)v72, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/TypedJson.mm", 618);
  }
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v71];
  long long v67 = v4;
  uint64_t v5 = [v4 objectForKeyedSubscript:@"preprocessing"];
  uint64_t v6 = [v5 objectForKeyedSubscript:@"useRewritten"];

  if (v6)
  {
    long long v7 = [v5 objectForKeyedSubscript:@"useRewritten"];
    char v8 = [v7 BOOLValue];
  }
  else
  {
    char v8 = 0;
  }
  uint64_t v9 = [v5 objectForKeyedSubscript:@"useNonSignificantNonWhitespace"];

  if (v9)
  {
    uint64_t v10 = [v5 objectForKeyedSubscript:@"useNonSignificantNonWhitespace"];
    char v65 = [v10 BOOLValue];
  }
  else
  {
    char v65 = 0;
  }
  uint64_t v11 = [v5 objectForKeyedSubscript:@"useWhitespace"];

  if (v11)
  {
    uint64_t v12 = [v5 objectForKeyedSubscript:@"useWhitespace"];
    char v64 = [v12 BOOLValue];
  }
  else
  {
    char v64 = 0;
  }
  unint64_t v13 = [v5 objectForKeyedSubscript:@"useSiriResponse"];

  if (v13)
  {
    uint64_t v14 = [v5 objectForKeyedSubscript:@"useSiriResponse"];
    char v62 = [v14 BOOLValue];
  }
  else
  {
    char v62 = 1;
  }
  unint64_t v15 = [v5 objectForKeyedSubscript:@"contextSize"];

  if (v15)
  {
    uint64_t v16 = [v5 objectForKeyedSubscript:@"contextSize"];
    int v61 = [v16 intValue];
  }
  else
  {
    int v61 = 2;
  }
  BOOL v17 = [v5 objectForKeyedSubscript:@"maxCharNum"];

  if (v17)
  {
    uint64_t v18 = [v5 objectForKeyedSubscript:@"maxCharNum"];
    int v60 = [v18 intValue];
  }
  else
  {
    int v60 = 34;
  }
  unsigned int v19 = [v5 objectForKeyedSubscript:@"charPaddingIndex"];

  if (v19)
  {
    long long v20 = [v5 objectForKeyedSubscript:@"charPaddingIndex"];
    uint64_t v59 = [v20 unsignedIntValue];
  }
  else
  {
    uint64_t v59 = 56;
  }
  uint64_t v21 = [v5 objectForKeyedSubscript:@"maxTokenNum"];

  if (v21)
  {
    unint64_t v22 = [v5 objectForKeyedSubscript:@"maxTokenNum"];
    uint64_t v58 = [v22 unsignedIntValue];
  }
  else
  {
    uint64_t v58 = 200;
  }
  int v66 = [v4 objectForKeyedSubscript:@"embeddingModule"];
  unint64_t v23 = [v66 objectForKeyedSubscript:@"modelPrecision"];
  int v57 = [v23 intValue];
  uint64_t v24 = [v66 objectForKeyedSubscript:@"tokenEmbeddingDimension"];
  int v56 = [v24 intValue];

  uint64_t v70 = [v4 objectForKeyedSubscript:@"aneEmbeddingModule"];
  unint64_t v25 = [v70 objectForKeyedSubscript:@"modelPrecision"];
  int v55 = [v25 intValue];
  int64_t v26 = [v70 objectForKeyedSubscript:@"aneEmbeddingDimension"];
  int v54 = [v26 intValue];

  unint64_t v63 = [v4 objectForKeyedSubscript:@"encoderModule"];
  int v27 = [v63 objectForKeyedSubscript:@"modelPrecision"];
  int v53 = [v27 intValue];

  uint64_t v69 = [v4 objectForKeyedSubscript:@"decoderModule"];
  std::string::size_type v28 = [v69 objectForKeyedSubscript:@"modelPrecision"];
  int v52 = [v28 intValue];
  uint64_t v29 = [v69 objectForKeyedSubscript:@"numDecoderSteps"];
  unsigned int v30 = [v29 unsignedIntValue];

  size_t v31 = [v4 objectForKeyedSubscript:@"scoringModule"];
  int v32 = [v31 objectForKeyedSubscript:@"cbrDecisionThreshold"];
  [v32 floatValue];
  int v34 = v33;
  uint64_t v35 = [v31 objectForKeyedSubscript:@"aerDecisionThreshold"];
  [v35 floatValue];
  int v37 = v36;

  int v51 = [v4 objectForKeyedSubscript:@"parityTest"];
  uint64_t v38 = [v51 objectForKeyedSubscript:@"ignoreClassifier"];
  char v39 = [v38 BOOLValue];

  long long v40 = [v4 objectForKeyedSubscript:@"asrConfig"];
  unint64_t v41 = [v40 objectForKeyedSubscript:@"curConfMin"];
  [v41 floatValue];
  float v43 = v42;
  std::string::size_type v44 = [v40 objectForKeyedSubscript:@"prevConfMax"];
  [v44 floatValue];
  float v46 = v45;

  if (!v5 || !v31 || !v69)
  {
    unint64_t v50 = __cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v72, "QueryRewrite");
    ConfigLoadingError::ConfigLoadingError(v50, (uint64_t)v73, (uint64_t)v72, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/TypedJson.mm", 679);
  }
  *(unsigned char *)a1 = v8;
  float v47 = 0.0;
  if (v40) {
    float v47 = v43;
  }
  *(unsigned char *)(a1 + 1) = v65;
  float v48 = 1000.0;
  *(unsigned char *)(a1 + 2) = v64;
  if (v40) {
    float v48 = v46;
  }
  *(unsigned char *)(a1 + 3) = v62;
  *(_DWORD *)(a1 + 4) = v61;
  *(_DWORD *)(a1 + 8) = v60;
  *(_DWORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = v59;
  *(void *)(a1 + 24) = v58;
  *(_DWORD *)(a1 + 32) = v57;
  *(_DWORD *)(a1 + 36) = v56;
  *(_DWORD *)(a1 + 40) = v55;
  *(_DWORD *)(a1 + 44) = v54;
  *(_DWORD *)(a1 + 48) = v53;
  *(_DWORD *)(a1 + 56) = v52;
  *(void *)(a1 + 64) = v30;
  *(_DWORD *)(a1 + 72) = v34;
  *(_DWORD *)(a1 + 76) = v37;
  *(unsigned char *)(a1 + 80) = v39;
  *(float *)(a1 + 84) = v47;
  *(float *)(a1 + 88) = v48;
}

void sub_1C958E670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,id a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 121) < 0)
  {
    operator delete(*(void **)(v36 - 144));
    if ((v31 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings(marrs::qr::inference_engine::LSTMEncoderModule *this, marrs::inference_engine::InferenceTensor *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "embedded_seq");
  marrs::inference_engine::EspressoModule::setInput((uint64_t)this, (uint64_t)__p, (uint64_t)a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C958E904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BaseException::BaseException(uint64_t a1, long long *a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F23C7EE0;
  *(void *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v10;
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v11 = (const char *)a3;
  }
  else {
    uint64_t v11 = *(const char **)a3;
  }
  uint64_t v12 = os_log_create("com.apple.siri", v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v28 = (const std::string::value_type *)a2;
    }
    else {
      std::string::size_type v28 = *(const std::string::value_type **)a2;
    }
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
    _os_log_error_impl(&dword_1C9555000, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__str, 0xCu);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, a4);
  unsigned __int8 v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v38 = __str;
LABEL_11:
    std::string::size_type size = v13;
    p_str = &__str;
    goto LABEL_12;
  }
  std::string::__init_copy_ctor_external(&v38, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  unsigned __int8 v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_11;
  }
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_12:
  while (size)
  {
    int v16 = p_str->__r_.__value_.__s.__data_[--size];
    if (v16 == 92 || v16 == 47)
    {
      if (size != -1)
      {
        std::string::basic_string(&v39, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        std::string v38 = v39;
        unsigned __int8 v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      break;
    }
  }
  if ((v13 & 0x80) != 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  int v33 = ___ZN13BaseExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_PKci_block_invoke;
  int v34 = &__block_descriptor_tmp_261;
  uint64_t v35 = a2;
  int v17 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v38;
  }
  int v37 = a5;
  std::string::basic_string[abi:ne180100]<0>(&v29, "com.apple.siri.marrs");
  uint64_t v18 = std::string::append(&v29, ".");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = *(char *)(a3 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a3;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a3 + 8);
  }
  unint64_t v23 = std::string::append(&v30, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  unint64_t v25 = std::string::append(&v39, ".exception");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v17 & 0x80000000) == 0) {
      return a1;
    }
LABEL_42:
    operator delete(v38.__r_.__value_.__l.__data_);
    return a1;
  }
  if (v17 < 0) {
    goto LABEL_42;
  }
  return a1;
}

void sub_1C958ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  operator delete(__p);
  if (*(char *)(v39 + 47) < 0) {
    operator delete(*v40);
  }
  std::exception::~exception((std::exception *)v39);
  _Unwind_Resume(a1);
}

void *___ZN13BaseExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_PKci_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(const char **)(a1 + 32);
    if (v4[23] < 0) {
      uint64_t v4 = *(const char **)v4;
    }
    xpc_dictionary_set_string(v2, "errorMessage", v4);
    char v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      char v5 = *(const char **)v5;
    }
    xpc_dictionary_set_string(v3, "fileName", v5);
    std::to_string(&v8, *(_DWORD *)(a1 + 64));
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v8;
    }
    else {
      uint64_t v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_string(v3, "line", (const char *)v6);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_1C958EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::validate(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this, const QRRequest *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  void v11[3] = &unk_1F23C7AD0;
  v11[4] = 0;
  var1 = (uint64_t *)a2->var1.var1;
  var0 = (uint64_t *)a2->var1.var0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)var1 - (char *)var0) >> 4)) <= 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Number of TurnInputs less than two");
    std::string::basic_string[abi:ne180100]<0>(v11, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)buf, (uint64_t)v11, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/RepetitionDetection/src/CorrectionsRepetitionPredictorPlugin.cpp", 162);
  }
  BOOL v5 = marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper(var0, var1, 1);
  BOOL v6 = v5;
  if (v5)
  {
    if ((marrs::qr::orchestration::AsrConfidenceChecker::verify((marrs::qr::orchestration::AsrConfidenceChecker *)v5, a2) & 1) == 0)
    {
      long long v7 = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "Invalid ASR confidence score in turn inputs");
      std::string::basic_string[abi:ne180100]<0>(v11, "QueryRewrite");
      IOContentError::IOContentError(v7, (uint64_t)buf, (uint64_t)v11, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/RepetitionDetection/src/CorrectionsRepetitionPredictorPlugin.cpp", 173);
    }
  }
  else
  {
    std::string v8 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      unsigned __int8 v13 = "validate";
      _os_log_debug_impl(&dword_1C9555000, v8, OS_LOG_TYPE_DEBUG, "%s Received empty ASR utterance in TurnInputs, skipping RD.", buf, 0xCu);
    }
  }
  return v6;
}

void sub_1C958F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 41) < 0)
  {
    operator delete(*(void **)(v21 - 64));
    if ((v20 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v19);
  goto LABEL_8;
}

void non-virtual thunk to'marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this)
{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin((marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *)((char *)this - 208));
  JUMPOUT(0x1CB786E50);
}

{
  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin((marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *)((char *)this - 208));
}

void marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this)
{
  *(void *)this = &unk_1F23C75D0;
  *((void *)this + 26) = &unk_1F23C7600;
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 240);
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  RepetitionPredictorBase::~RepetitionPredictorBase(this);
}

{
  uint64_t vars8;

  marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::~CorrectionsRepetitionPredictorPlugin(this);
  JUMPOUT(0x1CB786E50);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  xpc_object_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      xpc_object_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void non-virtual thunk to'marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::predict(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
}

void marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin::predict(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if (marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::once[0] != -1) {
    dispatch_once(marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::once, &__block_literal_global);
  }
  BOOL v6 = marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext;
  os_signpost_id_t v7 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext);
  unint64_t v8 = v7 - 1;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Predict", "", buf, 2u);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 4;
  uint64_t v9 = (void *)&loc_1C95E0000;
  if ((*(uint64_t (**)(marrs::qr::orchestration::CorrectionsRepetitionPredictorPlugin *, const QRRequest *))(*(void *)this + 24))(this, a2))
  {
    unint64_t v85 = v7 - 1;
    unint64_t v86 = this;
    os_signpost_id_t v82 = v7;
    uint64_t v83 = a3;
    unint64_t v84 = v6;
    long long v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    var0 = a2->var1.var0->var0.var0;
    unint64_t v14 = var0[1].var0.var0;
    unint64_t var1 = var0[1].var0.var1;
    do
    {
      uint64_t v16 = *(void *)(v14 + 96);
      if ((unint64_t)v10 >= v12)
      {
        uint64_t v17 = v10 - v11;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v12 - (void)v11) >> 2 > v18) {
          unint64_t v18 = (uint64_t)(v12 - (void)v11) >> 2;
        }
        if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (double *)(v19 + 8 * v17);
        *(void *)uint64_t v21 = v16;
        std::string::size_type v22 = v21 + 1;
        while (v10 != v11)
        {
          uint64_t v23 = *((void *)v10-- - 1);
          *((void *)v21-- - 1) = v23;
        }
        unint64_t v12 = v19 + 8 * v20;
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v21;
        long long v10 = v22;
      }
      else
      {
        *(void *)v10++ = v16;
      }
      v14 += 160;
    }
    while (v14 != var1);
    long long v24 = v11 + 1;
    double v25 = *v11;
    if (v11 == v10 || v24 == v10)
    {
      double v27 = *v11;
      uint64_t v32 = v86;
      int v33 = (void *)&loc_1C95E0000;
    }
    else
    {
      double v28 = *v11;
      std::string v29 = v11 + 1;
      std::string v30 = v11;
      uint64_t v31 = v11 + 1;
      uint64_t v32 = v86;
      int v33 = &loc_1C95E0000;
      do
      {
        double v34 = *v31++;
        double v35 = v34;
        if (v34 < v28)
        {
          double v28 = v35;
          std::string v30 = v29;
        }
        std::string v29 = v31;
      }
      while (v31 != v10);
      double v27 = *v30;
      uint64_t v36 = v11;
      int v37 = v11 + 1;
      do
      {
        double v38 = *v37++;
        double v39 = v38;
        if (v25 < v38)
        {
          double v25 = v39;
          uint64_t v36 = v24;
        }
        long long v24 = v37;
      }
      while (v37 != v10);
      double v25 = *v36;
    }
    std::string::basic_string[abi:ne180100]<0>(&v133, "com.apple.siri.marrs");
    long long v40 = std::string::append(&v133, ".QueryRewrite.RepetitionDetector.Input");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    uint64_t v114 = (long long *)v33[435];
    int v115 = ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin23doCoreAnalyticsForInputERKNS1_9QRRequestE_block_invoke;
    *(void *)&long long v116 = &__block_descriptor_tmp_299;
    *((void *)&v116 + 1) = v32;
    *(double *)&long long v117 = v27;
    *((double *)&v117 + 1) = v25;
    analytics_send_event_lazy();
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v133.__r_.__value_.__l.__data_);
    }
    operator delete(v11);
    toRepetitionPredictorInput((uint64_t)buf, (uint64_t)a2, (unsigned __int8 ***)v32 + 23);
    memset(&v87, 0, sizeof(v87));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v87, *(long long **)buf, v114, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v114 - *(void *)buf) >> 3));
    memset(&v88, 0, sizeof(v88));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, (long long *)v116, *((long long **)&v116 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v116 + 1) - v116) >> 3));
    memset(&v89, 0, sizeof(v89));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, *((long long **)&v117 + 1), (long long *)v118, 0xAAAAAAAAAAAAAAABLL * ((v118 - *((void *)&v117 + 1)) >> 3));
    memset(&v90, 0, sizeof(v90));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, v119, v120, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
    int v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v91, v121, v122, (v122 - (uint64_t)v121) >> 3);
    memset(v94, 0, sizeof(v94));
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v94, v123, v124, (v124 - (uint64_t)v123) >> 3);
    std::vector<BOOL>::vector(v95, (uint64_t)&v125);
    std::vector<BOOL>::vector(v96, (uint64_t)&v126);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v97, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v97 = __s;
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v98, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
    }
    else {
      std::string v98 = v128;
    }
    long long v99 = v129;
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v100, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
    }
    else {
      std::string v100 = v130;
    }
    float v42 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v152.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 4) = (std::string::size_type)"predict";
      _os_log_debug_impl(&dword_1C9555000, v42, OS_LOG_TYPE_DEBUG, "%s Start Repetition Detection Prediction", (uint8_t *)&v152, 0xCu);
    }
    if (*((void *)&v99 + 1) - (void)v99 <= 0x7530uLL)
    {
      unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v98);
      int8x8_t v44 = *(int8x8_t *)((char *)v86 + 248);
      if (v44)
      {
        unint64_t v45 = v43;
        uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44);
        v46.i16[0] = vaddlv_u8(v46);
        unint64_t v47 = v46.u32[0];
        if (v46.u32[0] > 1uLL)
        {
          unint64_t v48 = v43;
          if (v43 >= *(void *)&v44) {
            unint64_t v48 = v43 % *(void *)&v44;
          }
        }
        else
        {
          unint64_t v48 = (*(void *)&v44 - 1) & v43;
        }
        std::string::size_type v49 = *(unsigned __int8 ***)(*((void *)v86 + 30) + 8 * v48);
        if (v49)
        {
          for (uint64_t i = *v49; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v51 = *((void *)i + 1);
            if (v45 == v51)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v98)) {
                goto LABEL_57;
              }
            }
            else
            {
              if (v47 > 1)
              {
                if (v51 >= *(void *)&v44) {
                  v51 %= *(void *)&v44;
                }
              }
              else
              {
                v51 &= *(void *)&v44 - 1;
              }
              if (v51 != v48) {
                break;
              }
            }
          }
        }
      }
      this = v86;
      int v52 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LODWORD(v152.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 4) = (std::string::size_type)"predict";
        _os_log_impl(&dword_1C9555000, v52, OS_LOG_TYPE_INFO, "%s #RD invoking rule-based predictor", (uint8_t *)&v152, 0xCu);
      }
      __asm { FMOV            V0.2S, #1.0 }
      _D0.i32[1] = *((_DWORD *)v86 + 70);
      float32x2_t v81 = _D0;
      uint64_t v141 = 0;
      std::string v140 = 0;
      uint64_t v142 = 0;
      uint64_t v138 = 0;
      uint64_t v137 = 0;
      uint64_t v139 = 0;
      createPronunciationsVector((uint64_t)v86 + 88, (long long **)&v89, (uint64_t *)&v140);
      createPronunciationsVector((uint64_t)v86 + 88, (long long **)&v90, &v137);
      os_signpost_id_t v7 = v82;
      a3 = v83;
      unint64_t v8 = v85;
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v152);
      uint64_t v9 = &loc_1C95E0000;
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)&v133);
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v101);
      if (v141 - (void)v140 == v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]
        && v138 - v137 == v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0])
      {
        RuleBasedRepetitionPredictor::Predict((uint64_t *)&v87, (uint64_t *)&v88, &v140, &v137, *((_DWORD *)v86 + 28), (uint64_t *)v86 + 1, (uint64_t)&v152);
        int v57 = v91;
        if (v91 != v92)
        {
          uint64_t v58 = v91 + 1;
          if (v91 + 1 != v92)
          {
            double v59 = *v91;
            int v60 = v91 + 1;
            do
            {
              double v61 = *v60++;
              double v62 = v61;
              if (v61 < v59)
              {
                double v59 = v62;
                int v57 = v58;
              }
              uint64_t v58 = v60;
            }
            while (v60 != v92);
          }
        }
        LODWORD(v133.__r_.__value_.__l.__data_) = 1065353216;
        double v63 = 1.0;
        if (v57 != v92)
        {
          float v64 = *v57;
          if (v64 > 1000.0 || v64 < 0.0)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(v147, "Received an ASR confidence larger than 1000.");
            std::string::basic_string[abi:ne180100]<0>(&v156, "QueryRewrite");
            InferenceError::InferenceError(exception, (uint64_t)v147, (uint64_t)&v156, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/AsrConfidenceThresholdPredictor.cpp", 21);
          }
          *(float *)&v133.__r_.__value_.__l.__data_ = v64 / 1000.0;
          double v63 = (float)(v64 / 1000.0);
        }
        float v65 = (1.0 - v63) * 0.5;
        *((float *)v133.__r_.__value_.__r.__words + 1) = v65;
        *(float *)&v133.__r_.__value_.__r.__words[1] = v65;
        std::string::size_type v134 = v133.__r_.__value_.__r.__words[2];
        int v66 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
        {
          RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)v147, (uint64_t)&v133);
          int v79 = SHIBYTE(v148) >= 0 ? v147 : *(unsigned char **)v147;
          LODWORD(v156.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Predict";
          WORD2(v156.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v79;
          _os_log_debug_impl(&dword_1C9555000, v66, OS_LOG_TYPE_DEBUG, "%s AsrConfidenceThresholdPredictor Result: %s", (uint8_t *)&v156, 0x16u);
          if (SHIBYTE(v148) < 0) {
            operator delete(*(void **)v147);
          }
        }
        __asm { FMOV            V1.2D, #1.0 }
        float32x2_t v68 = vcvt_f32_f64(vdivq_f64(vsubq_f64(_Q1, vcvtq_f64_f32((float32x2_t)__PAIR64__(v133.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__data_))), vcvtq_f64_f32(v81)));
        if (v68.f32[1] < v68.f32[0]) {
          v68.f32[0] = v68.f32[1];
        }
        *(float *)uint64_t v101 = 1.0 - v68.f32[0];
        *(void *)&v101[4] = *(std::string::size_type *)((char *)v152.__r_.__value_.__r.__words + 4);
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v102, (char *)v152.__r_.__value_.__r.__words[2], v153, (int64_t)(v153 - v152.__r_.__value_.__r.__words[2]) >> 2);
        float v69 = *(float *)v101;
        if (*(float *)v101 > 0.99)
        {
          *(_DWORD *)uint64_t v101 = 1065185444;
          float v69 = 0.99;
        }
        double v70 = 1.0 - v69;
        if ((float)(*(float *)&v101[4] + *(float *)&v101[8]) <= 0.0001)
        {
          float v72 = v70 * 0.5;
          float v73 = v72;
        }
        else
        {
          float v71 = v70 / (float)(*(float *)&v101[4] + *(float *)&v101[8]);
          float v72 = *(float *)&v101[4] * v71;
          float v73 = *(float *)&v101[8] * v71;
        }
        *(float *)&v101[4] = v72;
        *(float *)&v101[8] = v73;
      }
      else
      {
        *(void *)uint64_t v101 = 1065353216;
        *(_DWORD *)&v101[8] = 0;
        std::vector<std::string>::pointer v74 = QRLoggerForCategory(0);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)char v147 = 136315138;
          *(void *)&v147[4] = "predict";
          _os_log_debug_impl(&dword_1C9555000, v74, OS_LOG_TYPE_DEBUG, "%s #RD token count mismatch", v147, 0xCu);
        }
      }
      RepetitionPredictorResult::RepetitionPredictorResult((RepetitionPredictorResult *)v147, (const RepetitionPredictorResult *)v101);
      if (*((char *)v86 + 311) < 0) {
        std::string::__init_copy_ctor_external(&v156, *((const std::string::value_type **)v86 + 36), *((void *)v86 + 37));
      }
      else {
        std::string v156 = *(std::string *)((unsigned char *)v86 + 12);
      }
      int correction_type = get_correction_type((float *)v147, &v156);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (v151 < 0) {
        operator delete(__p);
      }
      if (v148)
      {
        int v149 = v148;
        operator delete(v148);
      }
      uint64_t v75 = QRLoggerForCategory(0);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
      {
        RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)v131, (uint64_t)v101);
        unint64_t v76 = v132 >= 0 ? v131 : (void **)v131[0];
        *(_DWORD *)uint64_t v143 = 136315394;
        unint64_t v144 = "predict";
        __int16 v145 = 2080;
        uint64_t v146 = v76;
        _os_log_impl(&dword_1C9555000, v75, OS_LOG_TYPE_INFO, "%s #RD final result %s", v143, 0x16u);
        if (v132 < 0) {
          operator delete(v131[0]);
        }
      }
      if (v136 < 0) {
        operator delete(v135);
      }
      if (v133.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v134 = v133.__r_.__value_.__r.__words[2];
        operator delete((void *)v133.__r_.__value_.__r.__words[2]);
      }
      if (v155 < 0) {
        operator delete(v154);
      }
      if (v152.__r_.__value_.__r.__words[2])
      {
        uint64_t v153 = v152.__r_.__value_.__r.__words[2];
        operator delete((void *)v152.__r_.__value_.__r.__words[2]);
      }
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    }
    else
    {
LABEL_57:
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      *(void *)uint64_t v101 = 1065353216;
      *(_DWORD *)&v101[8] = 0;
      std::string::size_type v103 = 0;
      uint64_t v104 = 0;
      unint64_t v102 = 0;
      int correction_type = 0;
      os_signpost_id_t v7 = v82;
      a3 = v83;
      unint64_t v8 = v85;
      this = v86;
      uint64_t v9 = (void *)&loc_1C95E0000;
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v106, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
      }
      else {
        std::string v106 = v152;
      }
      char v107 = 1;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(0, 0, (uint64_t)&v102);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
    }
    toQRResponse(&v108, (uint64_t)v101);
    std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate((uint64_t *)a3);
    *(int8x16_t *)a3 = v108;
    *(void *)(a3 + 16) = v109;
    uint64_t v109 = 0;
    int8x16_t v108 = 0uLL;
    *(_OWORD *)(a3 + 24) = v110;
    *(_OWORD *)(a3 + 40) = v111;
    *(_DWORD *)(a3 + 56) = v112;
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    BOOL v6 = v84;
    if (v102)
    {
      std::string::size_type v103 = v102;
      operator delete(v102);
    }
    RepetitionPredictorInput::~RepetitionPredictorInput((void **)&v87.__r_.__value_.__l.__data_);
    RepetitionPredictorInput::~RepetitionPredictorInput((void **)buf);
  }
  else
  {
    long long v117 = 0u;
    long long v116 = 0u;
    uint64_t v118 = 4;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__vdeallocate((uint64_t *)a3);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v114 = 0;
    int v115 = 0;
    *(void *)std::string buf = 0;
    *(_OWORD *)(a3 + 24) = v116;
    *(_OWORD *)(a3 + 40) = v117;
    *(_DWORD *)(a3 + 56) = v118;
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  }
  std::string::basic_string[abi:ne180100]<0>(&v133, "com.apple.siri.marrs");
  id v77 = std::string::append(&v133, ".QueryRewrite.RepetitionDetector.Outcome");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  *(void *)std::string buf = MEMORY[0x1E4F143A8];
  uint64_t v114 = (long long *)v9[435];
  int v115 = ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin24doCoreAnalyticsForOutputERKNS1_10QRResponseE_block_invoke;
  *(void *)&long long v116 = &__block_descriptor_tmp_28;
  *((void *)&v116 + 1) = this;
  *(void *)&long long v117 = a3;
  analytics_send_event_lazy();
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v6, OS_SIGNPOST_INTERVAL_END, v7, "Predict", " enableTelemetry=YES ", buf, 2u);
  }
}

void sub_1C9590170(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_signpost_id_t spid, uint64_t a13, NSObject *log, unint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *buf,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (SLOBYTE(STACK[0x3D7]) < 0)
  {
    operator delete((void *)STACK[0x3C0]);
    if ((v71 & 1) == 0)
    {
LABEL_9:
      RepetitionPredictorResult::~RepetitionPredictorResult(&buf);
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)&STACK[0x320]);
      RepetitionPredictorResult::~RepetitionPredictorResult((void **)(v73 - 224));
      *(void *)(v73 - 224) = &STACK[0x370];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 224));
      *(void *)(v73 - 224) = &STACK[0x388];
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 224));
      RepetitionPredictorInput::~RepetitionPredictorInput(&a18);
      RepetitionPredictorInput::~RepetitionPredictorInput(&a71);
      __cxa_begin_catch(a1);
      if (a15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, spid, "Predict", " enableTelemetry=YES ", (uint8_t *)&buf, 2u);
      }
      std::current_exception();
      v75.__ptr_ = &a17;
      std::rethrow_exception(v75);
      sub_1C9590524(v76, v77, v78, v79, v80, v81, v82, v83, a9, a10, a11, spid, a13, log, a15, a16, a17, a18, a19,
        a20,
        a21,
        a22,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44);
    }
  }
  else if (!v71)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v72);
  goto LABEL_9;
}

void sub_1C9590528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  a53 = a13;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

void sub_1C959054C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C9590554);
  }
  __clang_call_terminate(a1);
}

xpc_object_t ___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin24doCoreAnalyticsForOutputERKNS1_10QRResponseE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 40) + 24);
  if (v4 >= 4) {
    BOOL v5 = "NOT_AVAILABLE";
  }
  else {
    BOOL v5 = (&off_1E6599AD0)[v4];
  }
  MEMORY[0x1CB786A80](__p, v5);
  if (v3)
  {
    if (v11 >= 0) {
      BOOL v6 = __p;
    }
    else {
      BOOL v6 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v3, "repetitionType", (const char *)v6);
    os_signpost_id_t v7 = (const char *)(v2 + 216);
    if (*(char *)(v2 + 239) < 0) {
      os_signpost_id_t v7 = *(const char **)v7;
    }
    xpc_dictionary_set_string(v3, "locale", v7);
    unint64_t v8 = (const char *)(v2 + 312);
    if (*(char *)(v2 + 335) < 0) {
      unint64_t v8 = *(const char **)v8;
    }
    xpc_dictionary_set_string(v3, "assetVersion", v8);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1C9590660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    BOOL v6 = *(_DWORD **)(a3 + 8);
    do
    {
      unint64_t v7 = *(void *)(a3 + 16);
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v9 = *(_DWORD **)a3;
        uint64_t v10 = ((uint64_t)v6 - *(void *)a3) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
          uint64_t v9 = *(_DWORD **)a3;
          BOOL v6 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (_DWORD *)(v13 + 4 * v10);
        _DWORD *v15 = *v5;
        unint64_t v8 = v15 + 1;
        while (v6 != v9)
        {
          int v16 = *--v6;
          *--unint64_t v15 = v16;
        }
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *BOOL v6 = *v5;
        unint64_t v8 = v6 + 1;
      }
      *(void *)(a3 + 8) = v8;
      ++v5;
      BOOL v6 = v8;
    }
    while (v5 != a2);
  }
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    float result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4);
    unint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      float result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C95907FC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return a1;
  }
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  BOOL v5 = *(void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    unint64_t v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v9 = v8 - 1;
  }
  unint64_t v10 = v9 >> 6;
  if (v8 >= 0x41) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  *(void *)(*a1 + 8 * v11) = 0;
LABEL_10:
  int v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v13 = 0;
    int v14 = 0;
    unint64_t v15 = &v5[v6 >> 6];
    int v16 = v7 & 0x3F;
    uint64_t v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      uint64_t v18 = 1 << v16;
      if ((*v5 >> v14)) {
        uint64_t v19 = *v17 | v18;
      }
      else {
        uint64_t v19 = *v17 & ~v18;
      }
      *uint64_t v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63) {
        int v14 = 0;
      }
      v17 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        ++v16;
      }
      int v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void *___ZNK5marrs2qr13orchestration36CorrectionsRepetitionPredictorPlugin23doCoreAnalyticsForInputERKNS1_9QRRequestE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    xpc_dictionary_set_double(v3, "turn1MinConfidence", *(double *)(a1 + 40));
    xpc_dictionary_set_double(v4, "turn1MaxConfidence", *(double *)(a1 + 48));
    BOOL v5 = (const char *)(v2 + 216);
    if (*(char *)(v2 + 239) < 0) {
      BOOL v5 = *(const char **)v5;
    }
    xpc_dictionary_set_string(v4, "locale", v5);
    unint64_t v6 = (const char *)(v2 + 312);
    if (*(char *)(v2 + 335) < 0) {
      unint64_t v6 = *(const char **)v6;
    }
    xpc_dictionary_set_string(v4, "assetVersion", v6);
  }
  return v4;
}

void marrs::mrr::mr::ModelBasedMR::~ModelBasedMR(marrs::mrr::mr::ModelBasedMR *this)
{
  marrs::mrr::mr::ModelBasedMR::~ModelBasedMR(this);
  JUMPOUT(0x1CB786E50);
}

{
  *(void *)this = &unk_1F23C7D08;
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 35));
  marrs::inference_engine::EspressoModule::~EspressoModule((marrs::mrr::mr::ModelBasedMR *)((char *)this + 232));
  std::__tree<std::string>::destroy(*((char **)this + 27));
  std::__tree<std::string>::destroy(*((char **)this + 24));
  std::__tree<std::string>::destroy(*((char **)this + 21));
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  *(void *)this = &unk_1F23C7D30;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1C9555000, v9, OS_LOG_TYPE_INFO, "executing model based MR request", buf, 2u);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  if (*a2 == a2[1])
  {
    int v33 = MRRLoggerForCategory(2);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    double v34 = "No of MRREntities is zero, not running visual MR";
    double v35 = v33;
    uint32_t v36 = 2;
    goto LABEL_124;
  }
  uint64_t v10 = *(void *)(a3 + 40);
  uint64_t v11 = *(void *)(a3 + 48);
  if (v10 == v11)
  {
LABEL_8:
    unint64_t v84 = 0;
    unint64_t v85 = 0;
    uint64_t v86 = 0;
    int v13 = *a4;
    int v14 = a4[1];
    if (*a4 != v14)
    {
      do
      {
        uint64_t v15 = *v13;
        if ((*(_DWORD *)(*v13 + 72) - *(_DWORD *)(*v13 + 76)) < 0xB) {
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
        }
        int v16 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *(uint64_t ***)(v15 + 32);
          if (*((char *)v17 + 23) < 0) {
            uint64_t v17 = (uint64_t **)*v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v17;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 10;
          _os_log_impl(&dword_1C9555000, v16, OS_LOG_TYPE_DEBUG, "contextualSpans span - (%s) was discarded since it's longer than supported length of %d", buf, 0x12u);
        }
        ++v13;
      }
      while (v13 != v14);
      uint64_t v10 = *(void *)(a3 + 40);
      uint64_t v11 = *(void *)(a3 + 48);
    }
    if (v10 != v11)
    {
      uint64_t v18 = *(void **)(a3 + 64);
      uint64_t v19 = *(void *)(a3 + 152);
      long long v87 = 0uLL;
      uint64_t v88 = 0;
      marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance((uint64_t *)buf, a1, v18, (uint64_t **)(a3 + 40), a2, v19, (uint64_t *)&v87);
      std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)a5);
      *(_OWORD *)a5 = *(_OWORD *)buf;
      *(void *)(a5 + 16) = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v82.i64[0] = (uint64_t)buf;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
      v82.i64[0] = (uint64_t)&v87;
      std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
      uint64_t v20 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        unint64_t v21 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v21;
        _os_log_impl(&dword_1C9555000, v20, OS_LOG_TYPE_INFO, "MR-MD visual model based - num matching results - %lu", buf, 0xCu);
      }
    }
    std::string::size_type v22 = v84;
    uint64_t v23 = v85;
    if (v84 != v85)
    {
      int64x2_t v82 = 0uLL;
      unint64_t v83 = 0;
      *((void *)&v87 + 1) = 0;
      uint64_t v88 = 0;
      *(void *)&long long v87 = (char *)&v87 + 8;
      do
      {
        uint64_t v24 = *v22;
        if ((~*(unsigned __int8 *)(*v22 + 80) & 3) == 0)
        {
          int32x2_t v25 = *(int32x2_t *)(v24 + 72);
          int32x2_t v80 = v25;
          long long v26 = (char *)*((void *)&v87 + 1);
          double v27 = (char *)&v87 + 8;
          double v28 = (uint64_t **)&v87 + 1;
          if (*((void *)&v87 + 1))
          {
            do
            {
              while (1)
              {
                double v27 = v26;
                unsigned __int32 v29 = *((_DWORD *)v26 + 8);
                if (v25.i32[1] >= v29) {
                  break;
                }
LABEL_25:
                long long v26 = *(char **)v27;
                double v28 = (uint64_t **)v27;
                if (!*(void *)v27) {
                  goto LABEL_31;
                }
              }
              if (v29 >= v25.i32[1])
              {
                unsigned int v30 = *((_DWORD *)v27 + 9);
                if (v25.i32[0] < v30) {
                  goto LABEL_25;
                }
                if (v30 >= v25.i32[0])
                {
                  uint64_t v31 = v27;
                  goto LABEL_34;
                }
              }
              double v28 = (uint64_t **)(v27 + 8);
              long long v26 = (char *)*((void *)v27 + 1);
            }
            while (v26);
          }
LABEL_31:
          uint64_t v31 = operator new(0x40uLL);
          *((int32x2_t *)v31 + 4) = vrev64_s32(v80);
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((void *)v31 + 5) = 0;
          *(void *)uint64_t v31 = 0;
          *((void *)v31 + 1) = 0;
          *((void *)v31 + 2) = v27;
          *double v28 = (uint64_t *)v31;
          uint64_t v32 = (uint64_t *)v31;
          if (*(void *)v87)
          {
            *(void *)&long long v87 = *(void *)v87;
            uint64_t v32 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v87 + 1), v32);
          ++v88;
LABEL_34:
          std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((uint64_t *)v31 + 5, v24);
        }
        ++v22;
      }
      while (v22 != v23);
      int v37 = (void *)v87;
      if ((long long *)v87 != (long long *)((char *)&v87 + 8))
      {
        double v38 = (void *)v82.i64[1];
        do
        {
          if ((unint64_t)v38 >= v83)
          {
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - v82.i64[0]) >> 3);
            unint64_t v40 = v39 + 1;
            if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v83 - v82.i64[0]) >> 3) > v40) {
              unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v83 - v82.i64[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v82.i64[0]) >> 3) >= 0x555555555555555) {
              unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v41 = v40;
            }
            int v91 = &v83;
            if (v41)
            {
              if (v41 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              float v42 = (char *)operator new(24 * v41);
            }
            else
            {
              float v42 = 0;
            }
            unint64_t v43 = &v42[24 * v39];
            *(void *)std::string buf = v42;
            *(void *)&uint8_t buf[8] = v43;
            *(void *)&buf[16] = v43;
            std::string v90 = &v42[24 * v41];
            *((void *)v43 + 1) = 0;
            *((void *)v43 + 2) = 0;
            *(void *)unint64_t v43 = 0;
            std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v43, v37[5], v37[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v37[6] - v37[5]) >> 3));
            uint64_t v44 = *(void *)&buf[8];
            double v38 = (void *)(*(void *)&buf[16] + 24);
            *(void *)&buf[16] += 24;
            unint64_t v45 = (void *)v82.i64[1];
            uint8x8_t v46 = (void *)v82.i64[0];
            if (v82.i64[1] == v82.i64[0])
            {
              int64x2_t v48 = vdupq_n_s64(v82.u64[1]);
            }
            else
            {
              do
              {
                *(void *)(v44 - 24) = 0;
                *(void *)(v44 - 16) = 0;
                v44 -= 24;
                *(void *)(v44 + 16) = 0;
                long long v47 = *(_OWORD *)(v45 - 3);
                v45 -= 3;
                *(_OWORD *)uint64_t v44 = v47;
                *(void *)(v44 + 16) = v45[2];
                void *v45 = 0;
                v45[1] = 0;
                v45[2] = 0;
              }
              while (v45 != v46);
              int64x2_t v48 = v82;
              double v38 = *(void **)&buf[16];
            }
            v82.i64[0] = v44;
            v82.i64[1] = (uint64_t)v38;
            *(int64x2_t *)&uint8_t buf[8] = v48;
            std::string::size_type v49 = (char *)v83;
            unint64_t v83 = (unint64_t)v90;
            std::string v90 = v49;
            *(void *)std::string buf = v48.i64[0];
            std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *double v38 = 0;
            v38[1] = 0;
            void v38[2] = 0;
            std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v38, v37[5], v37[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v37[6] - v37[5]) >> 3));
            v38 += 3;
          }
          v82.i64[1] = (uint64_t)v38;
          unint64_t v50 = (void *)v37[1];
          if (v50)
          {
            do
            {
              unint64_t v51 = v50;
              unint64_t v50 = (void *)*v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              unint64_t v51 = (_OWORD *)v37[2];
              BOOL v64 = *(void *)v51 == (void)v37;
              int v37 = v51;
            }
            while (!v64);
          }
          int v37 = v51;
        }
        while (v51 != (long long *)((char *)&v87 + 8));
      }
      std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*((char **)&v87 + 1));
      int v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v82.i64[1] - v82.i64[0]) >> 3);
        _os_log_impl(&dword_1C9555000, v52, OS_LOG_TYPE_INFO, "CSM Span Group size: %lu", buf, 0xCu);
      }
      uint64_t v81 = (uint64_t *)v82.i64[1];
      int v53 = (uint64_t *)v82.i64[0];
      if (v82.i64[0] != v82.i64[1])
      {
        int v54 = (void *)(a5 + 16);
        while (1)
        {
          if (v53[1] == *v53) {
            goto LABEL_119;
          }
          long long v87 = 0uLL;
          uint64_t v88 = 0;
          uint64_t v55 = *v53;
LABEL_71:
          if (v55 != v53[1]) {
            break;
          }
          double v70 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_1C9555000, v70, OS_LOG_TYPE_INFO, "CSM span resolved to SDA. Skipping model run", buf, 2u);
          }
          uint64_t v71 = *((void *)&v87 + 1);
          uint64_t v72 = v87;
          if ((void)v87 == *((void *)&v87 + 1))
          {
            marrs::mrr::mr::addCSMSpansToMatchingResult(*v53, v53[1], (uint64_t *)a5, 1.0);
          }
          else
          {
            uint64_t v73 = *(void **)(a5 + 8);
            do
            {
              if ((unint64_t)v73 >= *v54)
              {
                unint64_t v74 = 0x82FA0BE82FA0BE83 * (((uint64_t)v73 - *(void *)a5) >> 3);
                unint64_t v75 = v74 + 1;
                if (v74 + 1 > 0xBE82FA0BE82FA0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5F417D05F417D06 * ((uint64_t)(*v54 - *(void *)a5) >> 3) > v75) {
                  unint64_t v75 = 0x5F417D05F417D06 * ((uint64_t)(*v54 - *(void *)a5) >> 3);
                }
                if (0x82FA0BE82FA0BE83 * ((uint64_t)(*v54 - *(void *)a5) >> 3) >= 0x5F417D05F417D0) {
                  unint64_t v76 = 0xBE82FA0BE82FA0;
                }
                else {
                  unint64_t v76 = v75;
                }
                int v91 = (unint64_t *)(a5 + 16);
                if (v76) {
                  unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v76);
                }
                else {
                  uint64_t v77 = 0;
                }
                *(void *)std::string buf = v76;
                *(void *)&uint8_t buf[8] = v76 + 344 * v74;
                *(void *)&buf[16] = *(void *)&buf[8];
                std::string v90 = (char *)(v76 + 344 * v77);
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(*(void **)&buf[8], v72);
                *(void *)&buf[16] += 344;
                std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)a5, buf);
                uint64_t v73 = *(void **)(a5 + 8);
                std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v73, v72);
                v73 += 43;
                *(void *)(a5 + 8) = v73;
              }
              *(void *)(a5 + 8) = v73;
              v72 += 344;
            }
            while (v72 != v71);
          }
          *(void *)std::string buf = &v87;
          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_119:
          v53 += 3;
          if (v53 == v81) {
            goto LABEL_120;
          }
        }
        uint64_t v56 = *(void *)(v55 + 64);
        uint64_t v57 = *(void *)(v56 + 56);
        uint64_t v58 = *(void *)(v56 + 64);
        while (1)
        {
          if (v57 == v58)
          {
            v55 += 88;
            goto LABEL_71;
          }
          uint64_t v59 = *(void *)(*(void *)v57 + 16);
          if (v59)
          {
            int v60 = *(uint64_t **)(v59 + 8);
            if (v60)
            {
              int v61 = *((char *)v60 + 23);
              if (v61 < 0)
              {
                if (v60[1] != 14) {
                  goto LABEL_85;
                }
                int v60 = (uint64_t *)*v60;
              }
              else if (v61 != 14)
              {
                goto LABEL_85;
              }
              double v62 = (uint64_t *)*v60;
              uint64_t v63 = *(uint64_t *)((char *)v60 + 6);
              BOOL v64 = v62 == (uint64_t *)0x686374614D6D7363 && v63 == 0x656372756F536863;
              if (v64)
              {
                float v65 = *(uint64_t **)(*(void *)v57 + 32);
                if (v65)
                {
                  int v66 = *((char *)v65 + 23);
                  if (v66 < 0)
                  {
                    if (v65[1] != 13) {
                      goto LABEL_85;
                    }
                    float v65 = (uint64_t *)*v65;
                  }
                  else if (v66 != 13)
                  {
                    goto LABEL_85;
                  }
                  long long v67 = (uint64_t *)*v65;
                  uint64_t v68 = *(uint64_t *)((char *)v65 + 5);
                  if (v67 == (uint64_t *)0x45746E65696C6173 && v68 == 0x797469746E45746ELL)
                  {
                    memset(buf, 0, sizeof(buf));
                    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
                  }
                }
              }
            }
          }
LABEL_85:
          v57 += 8;
        }
      }
LABEL_120:
      *(void *)std::string buf = &v82;
      std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    *(void *)std::string buf = &v84;
    std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return;
  }
  uint64_t v12 = *(void *)(a3 + 40);
  while ((*(_DWORD *)(*(void *)v12 + 72) - *(_DWORD *)(*(void *)v12 + 76)) < 0xB)
  {
    v12 += 8;
    if (v12 == v11) {
      goto LABEL_8;
    }
  }
  uint64_t v78 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 10;
    double v34 = "Model based mention resolver does not support mentions with more than %d tokens";
    double v35 = v78;
    uint32_t v36 = 8;
LABEL_124:
    _os_log_impl(&dword_1C9555000, v35, OS_LOG_TYPE_INFO, v34, buf, v36);
  }
}

void sub_1C95915A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>()
{
}

void sub_1C95917A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::ModelBasedMR::resolveMentionsInUtterance(uint64_t *a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v929 = *MEMORY[0x1E4F143B8];
  memset(&v860, 0, sizeof(v860));
  uint64_t v10 = MRRLoggerForCategory(3);
  os_signpost_id_t v11 = os_signpost_id_generate(v10);
  uint64_t v12 = MRRLoggerForCategory(3);
  unint64_t v13 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v14 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v11, "MRModelPreprocessing", "", (uint8_t *)buf, 2u);
    }
  }
  uint64_t v15 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C9555000, v15, OS_LOG_TYPE_INFO, "BEGIN \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
  }
  int v16 = operator new(4uLL);
  *int v16 = 0;
  v859 = v16 + 1;
  v857 = v16;
  v858 = v16 + 1;
  uint64_t v17 = **a4;
  uint64_t v19 = *(_DWORD **)(v17 + 8);
  uint64_t v18 = *(_DWORD **)(v17 + 16);
  if (v19 != v18)
  {
    while (*v19 != 4)
    {
      if (++v19 == v18)
      {
        uint64_t v19 = v18;
        break;
      }
    }
  }
  if (v19 != v18)
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 3;
    std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(&v857, buf, &buf[0].__r_.__value_.__s.__data_[4]);
    int v16 = v857;
    if (*(_DWORD *)v857 == 3 && ((char *)a4[1] - (char *)*a4 != 8 || *a7 == a7[1]))
    {
      uint8x8_t v46 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v46, OS_LOG_TYPE_DEBUG, "Mention source is CSM but mention to resolve list size is not 1 or mentionGroup is empty. This is an error so returning empty result", (uint8_t *)buf, 2u);
      }
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_78;
    }
  }
  if (a3[5] == *(void *)(a2 + 112))
  {
    if (a3[2] != a3[1])
    {
      unint64_t v796 = v11 - 1;
      v797 = a7;
      os_signpost_id_t v793 = v11;
      v792.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      int64x2_t v855 = 0uLL;
      std::string::pointer data = 0;
      uint64_t v20 = *a5;
      uint64_t v21 = a5[1];
      v811 = a3;
      if (*a5 != v21)
      {
        int v22 = 0;
        while (1)
        {
          memset(__p, 0, 24);
          uint64_t v23 = (void *)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)v20);
          MEMORY[0x1CB786A80](__p, *v23);
          uint64_t v24 = *(void **)(a2 + 280);
          if (!v24)
          {
LABEL_23:
            std::operator+<char>();
            int32x2_t v25 = std::string::append((std::string *)v927, " not supported by model, skipping this entity.");
            long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            buf[0].__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if ((v927[23] & 0x80000000) != 0) {
              operator delete(*(void **)v927);
            }
            double v27 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                double v28 = buf;
              }
              else {
                double v28 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v927 = 136315138;
              *(void *)&v927[4] = v28;
              _os_log_impl(&dword_1C9555000, v27, OS_LOG_TYPE_DEBUG, "%s", v927, 0xCu);
            }
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            goto LABEL_55;
          }
          while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(__p, v24 + 4))
          {
LABEL_22:
            uint64_t v24 = (void *)*v24;
            if (!v24) {
              goto LABEL_23;
            }
          }
          if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v24 + 4, __p)) {
            break;
          }
          unsigned __int32 v29 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v30 = *(unsigned char **)__p;
            if (__p[23] >= 0) {
              unsigned int v30 = __p;
            }
            uint64_t v31 = (void *)(v20 + 8);
            if (*(char *)(v20 + 31) < 0) {
              uint64_t v31 = (void *)*v31;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109634;
            HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v22;
            LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v30;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v31;
            _os_log_impl(&dword_1C9555000, v29, OS_LOG_TYPE_DEBUG, "(%d) - Model input - EntityType - %s & value - %s", (uint8_t *)buf, 0x1Cu);
          }
          if (v855.i64[1] >= (unint64_t)data)
          {
            unint64_t v33 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) + 1;
            if (v33 > 0x12F684BDA12F684) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x97B425ED097B426 * ((uint64_t)&data[-v855.i64[0]] >> 3) > v33) {
              unint64_t v33 = 0x97B425ED097B426 * ((uint64_t)&data[-v855.i64[0]] >> 3);
            }
            if (0x84BDA12F684BDA13 * ((uint64_t)&data[-v855.i64[0]] >> 3) >= 0x97B425ED097B42) {
              unint64_t v34 = 0x12F684BDA12F684;
            }
            else {
              unint64_t v34 = v33;
            }
            buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            buf[0].__r_.__value_.__r.__words[0] = v34;
            buf[0].__r_.__value_.__l.__size_ = v34 + 8 * ((v855.i64[1] - v855.i64[0]) >> 3);
            buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
            buf[1].__r_.__value_.__r.__words[0] = v34 + 216 * v35;
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)buf[0].__r_.__value_.__l.__size_, (const marrs::mrr::mr::MRREntity *)v20);
            std::string::size_type size = buf[0].__r_.__value_.__l.__size_;
            uint64_t v32 = buf[0].__r_.__value_.__r.__words[2] + 216;
            buf[0].__r_.__value_.__r.__words[2] += 216;
            uint64_t v37 = v855.i64[1];
            if (v855.i64[1] == v855.i64[0])
            {
              int64x2_t v38 = vdupq_n_s64(v855.u64[1]);
            }
            else
            {
              do
              {
                size -= 216;
                v37 -= 216;
                std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(size, v37);
              }
              while (v37 != v855.i64[0]);
              int64x2_t v38 = v855;
              uint64_t v32 = buf[0].__r_.__value_.__r.__words[2];
            }
            v855.i64[0] = size;
            v855.i64[1] = v32;
            *(int64x2_t *)&buf[0].__r_.__value_.__r.__words[1] = v38;
            std::string::size_type v39 = (std::string::size_type)data;
            std::string::pointer data = buf[1].__r_.__value_.__l.__data_;
            buf[1].__r_.__value_.__r.__words[0] = v39;
            buf[0].__r_.__value_.__r.__words[0] = v38.i64[0];
            std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v855.i64[1], (const marrs::mrr::mr::MRREntity *)v20);
            uint64_t v32 = v855.i64[1] + 216;
          }
          v855.i64[1] = v32;
          ++v22;
LABEL_55:
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v20 += 216;
          if (v20 == v21)
          {
            uint64_t v47 = v855.i64[1];
            uint64_t v48 = v855.i64[0];
            goto LABEL_81;
          }
        }
        ++v24;
        goto LABEL_22;
      }
      uint64_t v48 = 0;
      uint64_t v47 = 0;
LABEL_81:
      if (0x84BDA12F684BDA13 * ((v47 - v48) >> 3) > 0x27)
      {
        int v52 = MRRLoggerForCategory(2);
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
LABEL_129:
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          goto LABEL_1186;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0x84BDA12F684BDA13
                                                                                  * ((v855.i64[1] - v855.i64[0]) >> 3);
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 40;
        int v53 = "skipping model run since there are %ld which is more than the allowed limit of %ld";
        int v54 = v52;
        os_log_type_t v55 = OS_LOG_TYPE_DEBUG;
        uint32_t v56 = 22;
LABEL_128:
        _os_log_impl(&dword_1C9555000, v54, v55, v53, (uint8_t *)buf, v56);
        goto LABEL_129;
      }
      uint64_t v57 = *a4;
      uint64_t v58 = a4[1];
      if (*a4 != v58)
      {
        do
        {
          uint64_t v59 = *v57;
          int v60 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            int v61 = *(const char **)(v59 + 32);
            if (v61)
            {
              if (v61[23] < 0) {
                int v61 = *(const char **)v61;
              }
            }
            else
            {
              int v61 = "NULL";
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
            _os_log_impl(&dword_1C9555000, v60, OS_LOG_TYPE_DEBUG, "Model Input - Mention - %s", (uint8_t *)buf, 0xCu);
          }
          ++v57;
        }
        while (v57 != v58);
        uint64_t v47 = v855.i64[1];
        uint64_t v48 = v855.i64[0];
      }
      if (v48 == v47)
      {
        std::string v89 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C9555000, v89, OS_LOG_TYPE_DEBUG, "No entity exists after embeddings filtering, skipping visual MR.", (uint8_t *)buf, 2u);
        }
        std::string v90 = MRRLoggerForCategory(3);
        if (v796 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v91 = v90;
          if (os_signpost_enabled(v90))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, v91, OS_SIGNPOST_INTERVAL_END, v793, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
          }
        }
        uint64_t v92 = MRRLoggerForCategory(0);
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_INFO)) {
          goto LABEL_129;
        }
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        int v53 = "END \"MRModelPreprocessing\"";
        int v54 = v92;
        os_log_type_t v55 = OS_LOG_TYPE_INFO;
        uint32_t v56 = 2;
        goto LABEL_128;
      }
      unint64_t v798 = a3[5];
      memset(&v854, 0, sizeof(v854));
      memset(&v853, 0, sizeof(v853));
      memset(&v852, 0, sizeof(v852));
      uint64_t v63 = *a4;
      double v62 = a4[1];
      memset(__p, 0, 24);
      uint64_t v64 = (char *)v62 - (char *)v63;
      if (v64)
      {
        float v65 = 0;
        int v66 = 0;
        unint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v831 = v64 >> 3;
        do
        {
          uint64_t v71 = (float *)v855.i64[1];
          double v70 = (float *)v855.i64[0];
          if (v855.i64[0] == v855.i64[1])
          {
            uint64_t v72 = v66;
            unint64_t v74 = v67;
          }
          else
          {
            uint64_t v72 = v66;
            uint64_t v73 = v65;
            v829 = v66;
            unint64_t v74 = v67;
            float v65 = v68;
            do
            {
              float v76 = v70[20];
              float v75 = v70[21];
              float v77 = v70[22];
              float v78 = v70[23];
              float v79 = v76 + v77;
              float v80 = v75 + v78;
              float v81 = v77 * v78;
              if ((unint64_t)v65 >= v74)
              {
                unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * (v65 - v72);
                unint64_t v83 = v82 + 1;
                if (v82 + 1 > 0xCCCCCCCCCCCCCCCLL)
                {
                  *(void *)&__p[16] = v67;
                  *(void *)std::string __p = v829;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(v74 - (void)v72) >> 2) > v83) {
                  unint64_t v83 = 0x999999999999999ALL * ((uint64_t)(v74 - (void)v72) >> 2);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v74 - (void)v72) >> 2) >= 0x666666666666666) {
                  unint64_t v84 = 0xCCCCCCCCCCCCCCCLL;
                }
                else {
                  unint64_t v84 = v83;
                }
                if (v84) {
                  unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(v84);
                }
                else {
                  uint64_t v85 = 0;
                }
                uint64_t v86 = (float *)(v84 + 20 * v82);
                *uint64_t v86 = v76;
                v86[1] = v75;
                v86[2] = v79;
                v86[3] = v80;
                v86[4] = v81;
                if (v73 == v72)
                {
                  uint64_t v72 = (float *)(v84 + 20 * v82);
                }
                else
                {
                  unint64_t v87 = v84 + 20 * v82;
                  do
                  {
                    long long v88 = *(_OWORD *)(v73 - 5);
                    *(float *)(v87 - 4) = *(v73 - 1);
                    *(_OWORD *)(v87 - 20) = v88;
                    v87 -= 20;
                    v73 -= 5;
                  }
                  while (v73 != v72);
                  uint64_t v73 = v72;
                  uint64_t v72 = (float *)v87;
                }
                unint64_t v74 = v84 + 20 * v85;
                float v65 = v86 + 5;
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                float *v65 = v76;
                v65[1] = v75;
                v65[2] = v79;
                v65[3] = v80;
                v65[4] = v81;
                v65 += 5;
              }
              v70 += 54;
              uint64_t v68 = v65;
              uint64_t v73 = v65;
            }
            while (v70 != v71);
          }
          ++v69;
          int v66 = v72;
          unint64_t v67 = v74;
        }
        while (v69 != v831);
        *(void *)&__p[16] = v74;
        *(void *)std::string __p = v72;
        *(void *)&__p[8] = v65;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "lfeats");
      marrs::mrr::mr::logFeatureVectorArray<5ul>((uint64_t *)__p, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      long long v791 = *(_OWORD *)__p;
      uint64_t v93 = (char *)a4[1] - (char *)*a4;
      int v901 = 0;
      long long v899 = 0u;
      long long v900 = 0u;
      long long v898 = 0u;
      memset(buf, 0, sizeof(buf));
      std::vector<std::array<float,25ul>>::vector(__p, 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * (v93 >> 3), (long long *)buf);
      uint64_t v94 = v855.i64[1];
      if (v855.i64[1] == v855.i64[0])
      {
        uint64_t v108 = v855.i64[1];
      }
      else
      {
        unint64_t v95 = 0;
        uint64_t v96 = 16;
        uint64_t v94 = v855.i64[0];
        do
        {
          uint64_t v97 = v94 + 216 * v95;
          float32x2_t v98 = *(float32x2_t *)(v97 + 80);
          float32x2_t v832 = *(float32x2_t *)(v97 + 88);
          marrs::mrr::mr::fetchNeighboringEntities(buf, v97, v95, v855.i64);
          uint64_t v99 = 0;
          *(float32x2_t *)v103.f32 = v832;
          *(float32x2_t *)v100.f32 = vadd_f32(v98, vmul_f32(v832, (float32x2_t)0x3F0000003F000000));
          v100.i64[1] = v100.i64[0];
          unint64_t v101 = 0x84BDA12F684BDA13
               * ((uint64_t)(buf[1].__r_.__value_.__l.__size_ - buf[1].__r_.__value_.__r.__words[0]) >> 3);
          float32x2_t v102 = vmul_lane_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32, 1);
          *(float32x2_t *)&v103.u32[2] = v832;
          uint64_t v104 = (float32x4_t *)(*(void *)__p + v96);
          int v105 = (float32x2_t *)(buf[1].__r_.__value_.__r.__words[0] + 88);
          do
          {
            if (v101 == v99) {
              break;
            }
            *(float32x2_t *)v106.f32 = v105[-1];
            float32x2_t v107 = *v105;
            *(float32x2_t *)&v106.u32[2] = vadd_f32(*(float32x2_t *)v106.f32, *v105);
            v104[-1] = vdivq_f32(vsubq_f32(v106, v100), v103);
            v104->i32[0] = vdiv_f32(vmul_lane_f32(v107, v107, 1), v102).u32[0];
            uint64_t v104 = (float32x4_t *)((char *)v104 + 20);
            ++v99;
            v105 += 27;
          }
          while (v99 != 5);
          *(void *)v927 = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(void *)v927 = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          ++v95;
          uint64_t v108 = v855.i64[1];
          uint64_t v94 = v855.i64[0];
          v96 += 100;
        }
        while (v95 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v93 >= 9)
      {
        uint64_t v109 = *(long long **)__p;
        if ((unint64_t)((v108 - v94) / 216) <= 1) {
          uint64_t v110 = 1;
        }
        else {
          uint64_t v110 = (v108 - v94) / 216;
        }
        uint64_t v111 = 1;
        uint64_t v112 = v108;
        do
        {
          uint64_t v113 = v112 - v94;
          BOOL v658 = v112 == v94;
          uint64_t v112 = v94;
          if (!v658)
          {
            uint64_t v114 = 0;
            uint64_t v115 = 0x84BDA12F684BDA13 * (v113 >> 3);
            long long v116 = v109;
            do
            {
              uint64_t v117 = (uint64_t)v109 + 100 * v114 + 100 * v111 * v115;
              long long v118 = *v116;
              long long v119 = v116[2];
              *(_OWORD *)(v117 + 16) = v116[1];
              *(_OWORD *)(v117 + 32) = v119;
              *(_OWORD *)uint64_t v117 = v118;
              long long v120 = v116[3];
              long long v121 = v116[4];
              long long v122 = v116[5];
              *(_DWORD *)(v117 + 96) = *((_DWORD *)v116 + 24);
              *(_OWORD *)(v117 + 64) = v121;
              *(_OWORD *)(v117 + 80) = v122;
              *(_OWORD *)(v117 + 48) = v120;
              ++v114;
              long long v116 = (long long *)((char *)v116 + 100);
              uint64_t v115 = (v108 - v94) / 216;
            }
            while (v110 != v114);
            uint64_t v112 = v108;
          }
          ++v111;
        }
        while (v111 != v93 >> 3);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "dif_lfeats");
      marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)__p, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      long long v790 = *(_OWORD *)__p;
      uint64_t v123 = v855.i64[1];
      uint64_t v124 = v855.i64[0];
      uint64_t v125 = (char *)a4[1] - (char *)*a4;
      uint64_t v126 = v125 >> 3;
      unint64_t v127 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      unint64_t v128 = v127 * (v125 >> 3);
      if (v128)
      {
        if (v128 > 0x28F5C28F5C28F5CLL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        long long v129 = operator new(100 * v128);
        v794 = v129;
        std::string v130 = (char *)&v129[25 * v128];
        uint64_t v131 = 100 * v126 * v127;
        do
        {
          v129[24] = 0;
          *((_OWORD *)v129 + 4) = 0uLL;
          *((_OWORD *)v129 + 5) = 0uLL;
          *((_OWORD *)v129 + 2) = 0uLL;
          *((_OWORD *)v129 + 3) = 0uLL;
          *(_OWORD *)long long v129 = 0uLL;
          *((_OWORD *)v129 + 1) = 0uLL;
          v129 += 25;
          v131 -= 100;
        }
        while (v131);
        *(void *)&long long v132 = v794;
        *((void *)&v132 + 1) = v130;
      }
      else
      {
        long long v132 = 0uLL;
      }
      long long v795 = v132;
      if (v123 == v124)
      {
        uint64_t v145 = v124;
      }
      else
      {
        unint64_t v133 = 0;
        std::string::size_type v134 = (float32x4_t *)(v132 + 16);
        do
        {
          uint64_t v135 = v124 + 216 * v133;
          float32x2_t v136 = *(float32x2_t *)(v135 + 80);
          float32x2_t v833 = *(float32x2_t *)(v135 + 88);
          marrs::mrr::mr::fetchNeighboringEntities(buf, v135, v133, v855.i64);
          memset(__p, 0, 24);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, (uint64_t *)__p);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t *)__p);
          uint64_t v137 = 0;
          unint64_t v138 = 0;
          *(float32x2_t *)v141.f32 = v833;
          *(float32x2_t *)v139.f32 = vadd_f32(v136, vmul_f32(v833, (float32x2_t)0x3F0000003F000000));
          v139.i64[1] = v139.i64[0];
          float32x2_t v140 = vmul_lane_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32, 1);
          *(float32x2_t *)&v141.u32[2] = v833;
          uint64_t v142 = v134;
          do
          {
            if (v138 >= 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3)) {
              break;
            }
            v143.i64[0] = *(void *)(*(void *)__p + v137 + 80);
            float32x2_t v144 = *(float32x2_t *)(*(void *)__p + v137 + 88);
            *(float32x2_t *)&v143.u32[2] = vadd_f32(*(float32x2_t *)v143.f32, v144);
            v142[-1] = vdivq_f32(vsubq_f32(v143, v139), v141);
            v142->i32[0] = vdiv_f32(vmul_lane_f32(v144, v144, 1), v140).u32[0];
            uint64_t v142 = (float32x4_t *)((char *)v142 + 20);
            ++v138;
            v137 += 216;
          }
          while (v138 != 5);
          *(void *)v927 = __p;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(void *)std::string __p = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          *(void *)std::string __p = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          ++v133;
          uint64_t v145 = v855.i64[1];
          uint64_t v124 = v855.i64[0];
          std::string::size_type v134 = (float32x4_t *)((char *)v134 + 100);
        }
        while (v133 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v125 >= 9)
      {
        uint64_t v146 = 1;
        uint64_t v147 = 100;
        uint64_t v148 = v145;
        do
        {
          uint64_t v149 = v148 - v124;
          BOOL v658 = v148 == v124;
          uint64_t v148 = v124;
          if (!v658)
          {
            unint64_t v150 = 0;
            unint64_t v151 = 0x84BDA12F684BDA13 * (v149 >> 3);
            uint64_t v152 = v795;
            do
            {
              uint64_t v153 = 0;
              uint64_t v154 = v152 + v147 * v151;
              do
              {
                uint64_t v155 = v154 + v153;
                long long v156 = *(_OWORD *)(v152 + v153);
                *(_DWORD *)(v155 + 16) = *(_DWORD *)(v152 + v153 + 16);
                *(_OWORD *)uint64_t v155 = v156;
                v153 += 20;
              }
              while (v153 != 100);
              ++v150;
              uint64_t v145 = v855.i64[1];
              uint64_t v124 = v855.i64[0];
              unint64_t v151 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
              v152 += 100;
            }
            while (v150 < v151);
            uint64_t v148 = v855.i64[1];
          }
          ++v146;
          v147 += 100;
        }
        while (v146 != v126);
      }
      uint64_t v157 = (char *)a4[1] - (char *)*a4;
      uint64_t v158 = v157 >> 3;
      unint64_t v159 = 0x84BDA12F684BDA13 * ((v145 - v124) >> 3);
      memset(buf, 0, 24);
      unint64_t v160 = v159 * (v157 >> 3);
      memset(&v891, 0, sizeof(v891));
      *(void *)std::string __p = &v891;
      __p[8] = 0;
      if (v160)
      {
        if (v160 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        float v161 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v159 * (v157 >> 3));
        v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
        v891.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
        v891.__r_.__value_.__r.__words[2] = (std::string::size_type)&v161[3 * v162];
        std::string::size_type v163 = (std::string::size_type)&v161[3 * v160];
        uint64_t v164 = 24 * v158 * v159;
        do
        {
          *float v161 = 0;
          v161[1] = 0;
          v161[2] = 0;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v161, (uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
          v161 += 3;
          v164 -= 24;
        }
        while (v164);
        v891.__r_.__value_.__l.__size_ = v163;
      }
      *(void *)std::string __p = buf;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(__p, v798, buf);
      uint64_t v165 = v855.i64[1];
      uint64_t v166 = v855.i64[0];
      uint64_t v167 = v855.i64[1] - v855.i64[0];
      if (v855.i64[1] - v855.i64[0] == 216)
      {
        uint64_t v168 = 5;
        do
        {
          std::string::size_type v169 = v891.__r_.__value_.__r.__words[0];
          unint64_t v170 = *(void *)(v891.__r_.__value_.__r.__words[0] + 8);
          if (v170 >= *(void *)(v891.__r_.__value_.__r.__words[0] + 16))
          {
            uint64_t v171 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v891.__r_.__value_.__l.__data_, (uint64_t)__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v891.__r_.__value_.__l.__data_, (uint64_t)__p);
            uint64_t v171 = v170 + 24;
          }
          *(void *)(v169 + 8) = v171;
          --v168;
        }
        while (v168);
        uint64_t v165 = v855.i64[1];
        uint64_t v166 = v855.i64[0];
        uint64_t v167 = v855.i64[1] - v855.i64[0];
      }
      uint64_t v172 = a2 + 272;
      if (v165 == v166)
      {
        unint64_t v190 = 0;
        unint64_t v191 = 0x84BDA12F684BDA13 * (v167 >> 3);
        uint64_t v189 = v166;
      }
      else
      {
        unint64_t v173 = 0;
        do
        {
          marrs::mrr::mr::fetchNeighboringEntities(buf, v166 + 216 * v173, v173, v855.i64);
          memset(v927, 0, 24);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_, (uint64_t *)v927);
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>((uint64_t)buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t *)v927);
          uint64_t v174 = 0;
          unint64_t v175 = 0;
          while (1)
          {
            unint64_t v176 = 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&v927[8] - *(void *)v927) >> 3);
            if (v175 >= v176) {
              break;
            }
            unint64_t v177 = (char **)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)(*(void *)v927 + v174));
            std::string::basic_string[abi:ne180100]<0>(&v893, *v177);
            uint64_t v178 = std::map<std::string,std::string>::at(v172, &v893);
            memset(&v895, 0, sizeof(v895));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v895, *(const void **)v178, *(void *)(v178 + 8), (uint64_t)(*(void *)(v178 + 8) - *(void *)v178) >> 2);
            unint64_t v179 = (void *)(v891.__r_.__value_.__r.__words[0] + 24 * v173);
            uint64_t v181 = v179 + 1;
            unint64_t v180 = v179[1];
            if (v180 >= v179[2])
            {
              uint64_t v182 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v179, (uint64_t)&v895);
            }
            else
            {
              std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v179, (uint64_t)&v895);
              uint64_t v182 = v180 + 24;
            }
            uint64_t *v181 = v182;
            if (v895.__r_.__value_.__r.__words[0]) {
              operator delete(v895.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v893.__r_.__value_.__l.__data_);
            }
            ++v175;
            v174 += 216;
            if (v175 == 5)
            {
              unint64_t v176 = 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)&v927[8] - *(void *)v927) >> 3);
              break;
            }
          }
          if (v176 <= 4)
          {
            unint64_t v183 = v176 - 5;
            do
            {
              std::string v184 = (void *)(v891.__r_.__value_.__r.__words[0] + 24 * v173);
              std::string v186 = v184 + 1;
              unint64_t v185 = v184[1];
              if (v185 >= v184[2])
              {
                uint64_t v187 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v184, (uint64_t)__p);
              }
              else
              {
                std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v184, (uint64_t)__p);
                uint64_t v187 = v185 + 24;
              }
              *std::string v186 = v187;
              BOOL v188 = __CFADD__(v183++, 1);
            }
            while (!v188);
          }
          v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&v893);
          *(void *)v927 = &buf[1];
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          *(void *)v927 = buf;
          std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
          ++v173;
          uint64_t v189 = v855.i64[1];
          uint64_t v166 = v855.i64[0];
          unint64_t v190 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
        }
        while (v173 < v190);
        unint64_t v191 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      }
      if (v191 < v190 * v158)
      {
        do
        {
          uint64_t v192 = 5;
          do
          {
            long long v193 = (void *)(v891.__r_.__value_.__r.__words[0] + 24 * v191);
            uint64_t v194 = v193 + 1;
            unint64_t v195 = v193[1];
            if (v195 >= v193[2])
            {
              uint64_t v196 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v193, (uint64_t)__p);
            }
            else
            {
              std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v193, (uint64_t)__p);
              uint64_t v196 = v195 + 24;
            }
            *uint64_t v194 = v196;
            --v192;
          }
          while (v192);
          ++v191;
          uint64_t v189 = v855.i64[1];
          uint64_t v166 = v855.i64[0];
        }
        while (v191 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * v158);
      }
      if ((unint64_t)v157 >= 9)
      {
        uint64_t v197 = 1;
        do
        {
          uint64_t v198 = v189 - v166;
          BOOL v658 = v189 == v166;
          uint64_t v189 = v166;
          if (!v658)
          {
            unint64_t v199 = 0;
            unint64_t v200 = 0x84BDA12F684BDA13 * (v198 >> 3);
            do
            {
              uint64_t v201 = 0;
              unint64_t v202 = v199 + v200 * v197;
              do
              {
                uint64_t v203 = *(void *)(v891.__r_.__value_.__r.__words[0] + 24 * v199);
                uint64_t v204 = *(void *)(v891.__r_.__value_.__r.__words[0] + 24 * v202);
                if (v204 != v203) {
                  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v204 + v201), *(char **)(v203 + v201), *(void *)(v203 + v201 + 8), (uint64_t)(*(void *)(v203 + v201 + 8) - *(void *)(v203 + v201)) >> 2);
                }
                v201 += 24;
              }
              while (v201 != 120);
              ++v199;
              uint64_t v189 = v855.i64[1];
              uint64_t v166 = v855.i64[0];
              unint64_t v200 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
            }
            while (v199 < v200);
          }
          ++v197;
        }
        while (v197 != v158);
      }
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)&v854);
      std::string v854 = v891;
      memset(&v891, 0, sizeof(v891));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v891;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      uint64_t v205 = (char *)a4[1] - (char *)*a4;
      memset(buf, 0, 24);
      std::vector<std::vector<float>>::vector(&v893, 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) * (v205 >> 3), (uint64_t)buf);
      *(_DWORD *)std::string __p = 0;
      std::vector<float>::vector(buf, v798, __p);
      uint64_t v206 = v855.i64[1];
      if (v855.i64[1] == v855.i64[0])
      {
        uint64_t v213 = v855.i64[1];
      }
      else
      {
        uint64_t v207 = 0;
        uint64_t v208 = 0;
        unint64_t v209 = 0;
        uint64_t v206 = v855.i64[0];
        do
        {
          uint64_t v210 = (char **)std::map<marrs::mrr::mr::EntityType,char const*>::at(*(_DWORD *)(v206 + v207));
          std::string::basic_string[abi:ne180100]<0>(__p, *v210);
          uint64_t v211 = std::map<std::string,std::string>::at(v172, __p);
          memset(v927, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v927, *(const void **)v211, *(void *)(v211 + 8), (uint64_t)(*(void *)(v211 + 8) - *(void *)v211) >> 2);
          v212 = *(void **)v927;
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v893.__r_.__value_.__r.__words[0] + v208), *(char **)v927, *(uint64_t *)&v927[8], (uint64_t)(*(void *)&v927[8] - *(void *)v927) >> 2);
          if (v212) {
            operator delete(v212);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          ++v209;
          uint64_t v213 = v855.i64[1];
          uint64_t v206 = v855.i64[0];
          v208 += 24;
          v207 += 216;
        }
        while (v209 < 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3));
      }
      if ((unint64_t)v205 >= 9)
      {
        uint64_t v214 = 1;
        uint64_t v215 = v213;
        do
        {
          if (v215 == v206)
          {
            uint64_t v215 = v206;
          }
          else
          {
            uint64_t v216 = 0;
            unint64_t v217 = 0;
            unint64_t v218 = 0x84BDA12F684BDA13 * ((v215 - v206) >> 3);
            do
            {
              if (v218 * v214)
              {
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v893.__r_.__value_.__r.__words[0] + 24 * (v217 + v214 * v218)), *(char **)(v893.__r_.__value_.__r.__words[0] + v216), *(void *)(v893.__r_.__value_.__r.__words[0] + v216 + 8), (uint64_t)(*(void *)(v893.__r_.__value_.__r.__words[0] + v216 + 8)- *(void *)(v893.__r_.__value_.__r.__words[0] + v216)) >> 2);
                uint64_t v213 = v855.i64[1];
                uint64_t v206 = v855.i64[0];
              }
              ++v217;
              unint64_t v218 = 0x84BDA12F684BDA13 * ((v213 - v206) >> 3);
              v216 += 24;
              uint64_t v215 = v213;
            }
            while (v217 < v218);
          }
          ++v214;
        }
        while (v214 != v205 >> 3);
      }
      if (buf[0].__r_.__value_.__r.__words[0])
      {
        buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v853);
      std::string v853 = v893;
      long long v830 = 0u;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::string v220 = *a4;
      uint64_t v219 = a4[1];
      if (v219 != *a4)
      {
        uint64_t v221 = 0;
        uint64_t v222 = 0;
        unint64_t v223 = 0;
        uint64_t v834 = v855.i64[1];
        uint64_t v820 = v855.i64[0];
        unint64_t v224 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
        long long v830 = 0u;
        do
        {
          uint64_t v225 = v220[v223];
          int v226 = *(_DWORD *)(v225 + 72);
          LODWORD(v225) = *(_DWORD *)(v225 + 76);
          uint64_t v227 = (v226 - v225);
          if (v226 != v225) {
            memset_pattern16(buf, &unk_1C95E0EC0, 4 * v227);
          }
          if (v227 != 10) {
            bzero((char *)buf + 4 * v227, 40 - 4 * v227);
          }
          if (v834 != v820)
          {
            uint64_t v228 = 0;
            do
            {
              if (v222 >= v221)
              {
                std::string::size_type v231 = (void *)v830;
                unint64_t v232 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v222[-v830] >> 3);
                unint64_t v233 = v232 + 1;
                if (v232 + 1 > 0x666666666666666) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)&v221[-v830] >> 3) > v233) {
                  unint64_t v233 = 0x999999999999999ALL * ((uint64_t)&v221[-v830] >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v221[-v830] >> 3) >= 0x333333333333333) {
                  unint64_t v234 = 0x666666666666666;
                }
                else {
                  unint64_t v234 = v233;
                }
                if (v234)
                {
                  if (v234 > 0x666666666666666) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v235 = (char *)operator new(40 * v234);
                  uint64_t v222 = (char *)*((void *)&v830 + 1);
                }
                else
                {
                  uint64_t v235 = 0;
                }
                std::chrono::steady_clock::time_point v236 = &v235[40 * v232];
                long long v237 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                *(_OWORD *)std::chrono::steady_clock::time_point v236 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *((_OWORD *)v236 + 1) = v237;
                *((void *)v236 + 4) = buf[1].__r_.__value_.__l.__size_;
                if (v222 == (char *)v830)
                {
                  uint64_t v241 = &v235[40 * v232];
                }
                else
                {
                  uint64_t v238 = &v235[40 * v232];
                  do
                  {
                    long long v239 = *(_OWORD *)(v222 - 40);
                    long long v240 = *(_OWORD *)(v222 - 24);
                    uint64_t v241 = v238 - 40;
                    *((void *)v238 - 1) = *((void *)v222 - 1);
                    *(_OWORD *)(v238 - 24) = v240;
                    *(_OWORD *)(v238 - 40) = v239;
                    v222 -= 40;
                    v238 -= 40;
                  }
                  while (v222 != (char *)v830);
                }
                uint64_t v221 = &v235[40 * v234];
                uint64_t v222 = v236 + 40;
                *(void *)&long long v830 = v241;
                if (v231) {
                  operator delete(v231);
                }
              }
              else
              {
                long long v229 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                long long v230 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                *((void *)v222 + 4) = buf[1].__r_.__value_.__l.__size_;
                *(_OWORD *)uint64_t v222 = v229;
                *((_OWORD *)v222 + 1) = v230;
                v222 += 40;
              }
              *(void *)&long long v242 = v830;
              *((void *)&v242 + 1) = v222;
              long long v830 = v242;
              ++v228;
            }
            while (v228 != v224);
            std::string v220 = *a4;
            uint64_t v219 = a4[1];
          }
          ++v223;
        }
        while (v223 < v219 - v220);
      }
      int64x2_t v816 = v855;
      v243 = v811;
      unint64_t v244 = v811[5];
      memset(&v893, 0, sizeof(v893));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      std::vector<float>::vector(__p, v244, buf);
      unint64_t v245 = *a4;
      if (a4[1] != *a4)
      {
        uint64_t v246 = 0;
        uint64_t v247 = 4 * v244;
        do
        {
          uint64_t v248 = v245[v246];
          unint64_t v249 = *(unsigned int *)(v248 + 72);
          if (v243[7] < v249)
          {
            v773 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v773, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention token indices out of bounds in token chain";
              _os_log_impl(&dword_1C9555000, v773, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(buf, "Mention token indices out of bounds in token chain");
            std::string::basic_string[abi:ne180100]<0>(v927, "MultimodalReferenceResolution");
            IOContentError::IOContentError(exception, (uint64_t)buf, (uint64_t)v927, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 362);
          }
          uint64_t v250 = *(unsigned int *)(v248 + 76);
          memset(v927, 0, 24);
          uint64_t v835 = v246;
          if (v250 >= v249)
          {
            uint64_t v259 = 0;
            unsigned int v258 = 0;
          }
          else
          {
            unsigned int v802 = v249 - v250;
            uint64_t v251 = v249 - v250;
            uint64_t v252 = v247 * v250;
            do
            {
              memset(buf, 0, 24);
              if (v244)
              {
                if (v244 >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                std::string v253 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v244);
                buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
                buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v253 + 4 * v254;
                bzero(v253, 4 * v244);
                uint64_t v255 = (uint64_t)v253 + v247;
                buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v253 + v247;
                memmove(v253, (const void *)(v811[1] + v252), 4 * v244);
              }
              else
              {
                uint64_t v255 = 0;
                std::string v253 = 0;
              }
              uint64_t v256 = *(void **)&v927[8];
              if (*(void *)&v927[8] >= *(void *)&v927[16])
              {
                uint64_t v257 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v927, (uint64_t)buf);
              }
              else
              {
                **(_OWORD **)&v927[8] = 0uLL;
                v256[2] = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v256, v253, v255, (v255 - (uint64_t)v253) >> 2);
                uint64_t v257 = (uint64_t)(v256 + 3);
              }
              *(void *)&v927[8] = v257;
              if (v253) {
                operator delete(v253);
              }
              v252 += v247;
              --v251;
            }
            while (v251);
            unsigned int v258 = v802;
            v243 = v811;
            if (v802 > 9) {
              goto LABEL_304;
            }
            uint64_t v259 = *(void **)&v927[8];
          }
          uint64_t v260 = v258 - 10;
          do
          {
            if ((unint64_t)v259 >= *(void *)&v927[16])
            {
              uint64_t v259 = (void *)std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v927, (uint64_t)__p);
            }
            else
            {
              *uint64_t v259 = 0;
              v259[1] = 0;
              v259[2] = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v259, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2);
              v259 += 3;
            }
            *(void *)&v927[8] = v259;
            BOOL v188 = __CFADD__(v260++, 1);
          }
          while (!v188);
LABEL_304:
          if (v816.i64[1] != v816.i64[0])
          {
            v261 = (void *)v893.__r_.__value_.__l.__size_;
            uint64_t v262 = (v816.i64[1] - v816.i64[0]) / 216;
            do
            {
              if ((unint64_t)v261 >= v893.__r_.__value_.__r.__words[2])
              {
                unint64_t v263 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v261 - v893.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v264 = v263 + 1;
                if (v263 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556
                   * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v264)
                  unint64_t v264 = 0x5555555555555556
                       * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  unint64_t v265 = 0xAAAAAAAAAAAAAAALL;
                else {
                  unint64_t v265 = v264;
                }
                buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
                if (v265) {
                  unint64_t v265 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v265);
                }
                else {
                  uint64_t v266 = 0;
                }
                std::string v267 = (void *)(v265 + 24 * v263);
                buf[0].__r_.__value_.__r.__words[0] = v265;
                buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v267;
                buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v267;
                buf[1].__r_.__value_.__r.__words[0] = v265 + 24 * v266;
                *std::string v267 = 0;
                v267[1] = 0;
                v267[2] = 0;
                std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v267, *(uint64_t *)v927, *(uint64_t *)&v927[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v927[8] - *(void *)v927) >> 3));
                buf[0].__r_.__value_.__r.__words[2] += 24;
                std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v893, buf);
                v261 = (void *)v893.__r_.__value_.__l.__size_;
                std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                void *v261 = 0;
                v261[1] = 0;
                v261[2] = 0;
                std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v261, *(uint64_t *)v927, *(uint64_t *)&v927[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v927[8] - *(void *)v927) >> 3));
                v261 += 3;
              }
              v893.__r_.__value_.__l.__size_ = (std::string::size_type)v261;
              --v262;
            }
            while (v262);
          }
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          uint64_t v246 = v835 + 1;
          unint64_t v245 = *a4;
        }
        while (v835 + 1 < (unint64_t)(a4[1] - *a4));
      }
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)&v852);
      std::string v852 = v893;
      long long v789 = 0u;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      unint64_t v268 = v796;
      if (*(unsigned char *)(a2 + 120))
      {
        std::string v269 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v269, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C9555000, v269, OS_LOG_TYPE_DEBUG, "useTextFeatures is enabled in model", (uint8_t *)buf, 2u);
        }
        v836 = (void *)(a2 + 160);
        std::string v270 = (void *)(a2 + 184);
        uint64_t v271 = a2 + 208;
        memset(&v893, 0, sizeof(v893));
        std::string v272 = *a4;
        v817 = a4[1];
        if (*a4 != v817)
        {
          long long v273 = 0;
          std::string::size_type v274 = 0;
          std::string::size_type v275 = 0;
          do
          {
            uint64_t v276 = *v272;
            if (!*(void *)(*v272 + 32))
            {
              v893.__r_.__value_.__r.__words[2] = v274;
              v893.__r_.__value_.__l.__size_ = v275;
              v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
              v775 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v775, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention input is null";
                _os_log_impl(&dword_1C9555000, v775, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
              }
              v776 = __cxa_allocate_exception(0x30uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Mention input is null");
              std::string::basic_string[abi:ne180100]<0>(__p, "MultimodalReferenceResolution");
              IOContentError::IOContentError(v776, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 482);
            }
            marrs::mrr::mr::getMentionStringSet(buf, *v272, a6);
            v277 = *(long long **)(v276 + 32);
            v821 = v272;
            if (*((char *)v277 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v277, *((void *)v277 + 1));
            }
            else
            {
              long long v278 = *v277;
              *(void *)&__p[16] = *((void *)v277 + 2);
              *(_OWORD *)std::string __p = v278;
            }
            uint64_t v280 = v855.i64[1];
            for (uint64_t i = v855.i64[0]; i != v280; i += 216)
            {
              if (*(char *)(i + 31) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v927, *(const std::string::value_type **)(i + 8), *(void *)(i + 16));
              }
              else
              {
                long long v281 = *(_OWORD *)(i + 8);
                *(void *)&v927[16] = *(void *)(i + 24);
                *(_OWORD *)v927 = v281;
              }
              memset(&v895, 0, 20);
              marrs::mrr::mr::computeStringMatchFeatures((uint64_t)&v895, (uint64_t)v927, (uint64_t)__p, buf, v836, v270, v271);
              if (v275 >= v274)
              {
                unint64_t v283 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v275 - (void)v273) >> 2) + 1;
                if (v283 > 0xCCCCCCCCCCCCCCCLL)
                {
                  v893.__r_.__value_.__r.__words[2] = v274;
                  v893.__r_.__value_.__l.__size_ = v275;
                  v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(v274 - (void)v273) >> 2) > v283) {
                  unint64_t v283 = 0x999999999999999ALL * ((uint64_t)(v274 - (void)v273) >> 2);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v274 - (void)v273) >> 2) >= 0x666666666666666) {
                  unint64_t v284 = 0xCCCCCCCCCCCCCCCLL;
                }
                else {
                  unint64_t v284 = v283;
                }
                if (v284) {
                  unint64_t v284 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(v284);
                }
                else {
                  uint64_t v285 = 0;
                }
                unint64_t v286 = v284 + 4 * ((uint64_t)(v275 - (void)v273) >> 2);
                *(_OWORD *)unint64_t v286 = *(_OWORD *)&v895.__r_.__value_.__l.__data_;
                *(_DWORD *)(v286 + 16) = v895.__r_.__value_.__r.__words[2];
                if ((void *)v275 == v273)
                {
                  std::string v289 = (void *)(v284 + 4 * ((uint64_t)(v275 - (void)v273) >> 2));
                }
                else
                {
                  unint64_t v287 = v284 + 4 * ((uint64_t)(v275 - (void)v273) >> 2);
                  do
                  {
                    long long v288 = *(_OWORD *)(v275 - 20);
                    std::string v289 = (void *)(v287 - 20);
                    *(_DWORD *)(v287 - 4) = *(_DWORD *)(v275 - 4);
                    *(_OWORD *)(v287 - 20) = v288;
                    v275 -= 20;
                    v287 -= 20;
                  }
                  while ((void *)v275 != v273);
                }
                std::string::size_type v274 = v284 + 20 * v285;
                std::string::size_type v275 = v286 + 20;
                if (v273) {
                  operator delete(v273);
                }
                long long v273 = v289;
              }
              else
              {
                long long v282 = *(_OWORD *)&v895.__r_.__value_.__l.__data_;
                *(_DWORD *)(v275 + 16) = v895.__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string::size_type v275 = v282;
                v275 += 20;
              }
              if ((v927[23] & 0x80000000) != 0) {
                operator delete(*(void **)v927);
              }
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::__tree<std::string>::destroy((char *)buf[0].__r_.__value_.__l.__size_);
            std::string v272 = v821 + 1;
          }
          while (v821 + 1 != v817);
          v893.__r_.__value_.__r.__words[2] = v274;
          v893.__r_.__value_.__l.__size_ = v275;
          v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "TextFeats");
        marrs::mrr::mr::logFeatureVectorArray<5ul>((uint64_t *)&v893, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v292 = v855.i64[1];
        uint64_t v291 = v855.i64[0];
        long long v788 = *(_OWORD *)&v893.__r_.__value_.__l.__data_;
        memset(&v895, 0, sizeof(v895));
        if (v855.i64[0] != v855.i64[1])
        {
          do
          {
            memset(buf, 0, 24);
            std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(buf, *(long long **)(v291 + 112), *(long long **)(v291 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v291 + 120) - *(void *)(v291 + 112)) >> 3));
            unint64_t v293 = 126
                 - 2
                 * __clz(0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
            *(void *)std::string __p = v291 + 80;
            if (buf[0].__r_.__value_.__l.__size_ == buf[0].__r_.__value_.__r.__words[0]) {
              uint64_t v294 = 0;
            }
            else {
              uint64_t v294 = v293;
            }
            std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>(buf[0].__r_.__value_.__r.__words[0], (uint64_t *)buf[0].__r_.__value_.__l.__size_, (float32x2_t **)__p, v294, 1);
            v295 = (std::string *)v895.__r_.__value_.__l.__size_;
            if (v895.__r_.__value_.__l.__size_ >= v895.__r_.__value_.__r.__words[2])
            {
              unint64_t v297 = 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3);
              unint64_t v298 = v297 + 1;
              if (v297 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556
                 * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) > v298)
                unint64_t v298 = 0x5555555555555556
                     * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                unint64_t v299 = 0xAAAAAAAAAAAAAAALL;
              else {
                unint64_t v299 = v298;
              }
              *(void *)&long long v862 = (char *)&v895.__r_.__value_.__l + 16;
              if (v299)
              {
                if (v299 > 0xAAAAAAAAAAAAAAALL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                long long v300 = (char *)operator new(24 * v299);
              }
              else
              {
                long long v300 = 0;
              }
              long long v301 = (std::string *)&v300[24 * v297];
              *(void *)std::string __p = v300;
              *(void *)&__p[8] = v301;
              *(void *)&__p[16] = v301;
              *(void *)&__p[24] = &v300[24 * v299];
              v301->__r_.__value_.__l.__size_ = 0;
              v301->__r_.__value_.__r.__words[2] = 0;
              v301->__r_.__value_.__r.__words[0] = 0;
              std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(v301, (long long *)buf[0].__r_.__value_.__l.__data_, (long long *)buf[0].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
              std::string::size_type v302 = *(void *)&__p[8];
              std::string::size_type v296 = *(void *)&__p[16] + 24;
              *(void *)&__p[16] += 24;
              std::string v303 = (void *)v895.__r_.__value_.__l.__size_;
              std::string::size_type v304 = v895.__r_.__value_.__r.__words[0];
              if (v895.__r_.__value_.__l.__size_ == v895.__r_.__value_.__r.__words[0])
              {
                int64x2_t v306 = vdupq_n_s64(v895.__r_.__value_.__l.__size_);
              }
              else
              {
                do
                {
                  *(void *)(v302 - 24) = 0;
                  *(void *)(v302 - 16) = 0;
                  v302 -= 24;
                  *(void *)(v302 + 16) = 0;
                  long long v305 = *(_OWORD *)(v303 - 3);
                  v303 -= 3;
                  *(_OWORD *)std::string::size_type v302 = v305;
                  *(void *)(v302 + 16) = v303[2];
                  *std::string v303 = 0;
                  v303[1] = 0;
                  v303[2] = 0;
                }
                while (v303 != (void *)v304);
                int64x2_t v306 = *(int64x2_t *)&v895.__r_.__value_.__l.__data_;
                std::string::size_type v296 = *(void *)&__p[16];
              }
              v895.__r_.__value_.__r.__words[0] = v302;
              v895.__r_.__value_.__l.__size_ = v296;
              *(int64x2_t *)&__p[8] = v306;
              std::string::size_type v307 = v895.__r_.__value_.__r.__words[2];
              v895.__r_.__value_.__r.__words[2] = *(void *)&__p[24];
              *(void *)&__p[24] = v307;
              *(void *)std::string __p = v306.i64[0];
              std::__split_buffer<std::vector<marrs::mrr::mr::SurroundingText>>::~__split_buffer((uint64_t)__p);
            }
            else
            {
              *(void *)v895.__r_.__value_.__l.__size_ = 0;
              v295->__r_.__value_.__l.__size_ = 0;
              v295->__r_.__value_.__r.__words[2] = 0;
              std::vector<marrs::mrr::mr::SurroundingText>::__init_with_size[abi:ne180100]<marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>(v295, (long long *)buf[0].__r_.__value_.__l.__data_, (long long *)buf[0].__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3));
              std::string::size_type v296 = (std::string::size_type)&v295[1];
            }
            v895.__r_.__value_.__l.__size_ = v296;
            *(void *)std::string __p = buf;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v291 += 216;
          }
          while (v291 != v292);
        }
        memset(&v891, 0, sizeof(v891));
        v308 = *a4;
        v800 = a4[1];
        if (*a4 != v800)
        {
          std::string::size_type v309 = 0;
          std::string::size_type v822 = 0;
          std::string::size_type v310 = 0;
          do
          {
            uint64_t v311 = *v308;
            if (!*(void *)(*v308 + 32))
            {
              v891.__r_.__value_.__r.__words[2] = v822;
              v891.__r_.__value_.__l.__size_ = v310;
              v891.__r_.__value_.__r.__words[0] = v309;
              v777 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v777, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"Mention input is null";
                _os_log_impl(&dword_1C9555000, v777, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)buf, 0xCu);
              }
              v778 = __cxa_allocate_exception(0x30uLL);
              std::string::basic_string[abi:ne180100]<0>(buf, "Mention input is null");
              std::string::basic_string[abi:ne180100]<0>(__p, "MultimodalReferenceResolution");
              IOContentError::IOContentError(v778, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 507);
            }
            marrs::mrr::mr::getMentionStringSet(__p, *v308, a6);
            uint64_t v312 = *(long long **)(v311 + 32);
            if (*((char *)v312 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v927, *(const std::string::value_type **)v312, *((void *)v312 + 1));
            }
            else
            {
              long long v313 = *v312;
              *(void *)&v927[16] = *((void *)v312 + 2);
              *(_OWORD *)v927 = v313;
            }
            v803 = v308;
            if (v895.__r_.__value_.__l.__size_ != v895.__r_.__value_.__r.__words[0])
            {
              unint64_t v314 = 0;
              do
              {
                v818 = (void *)v309;
                uint64_t v315 = 0;
                unint64_t v316 = 0;
                int v901 = 0;
                long long v899 = 0u;
                long long v900 = 0u;
                long long v898 = 0u;
                char v317 = buf;
                memset(buf, 0, sizeof(buf));
                do
                {
                  uint64_t v318 = *(void *)(v895.__r_.__value_.__r.__words[0] + 24 * v314);
                  if (v316 >= 0xCCCCCCCCCCCCCCCDLL
                             * ((*(void *)(v895.__r_.__value_.__r.__words[0] + 24 * v314 + 8) - v318) >> 3))
                    break;
                  uint64_t v319 = (long long *)(v318 + v315);
                  if (*((char *)v319 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v893, *(const std::string::value_type **)v319, *((void *)v319 + 1));
                  }
                  else
                  {
                    long long v320 = *v319;
                    v893.__r_.__value_.__r.__words[2] = *((void *)v319 + 2);
                    *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v320;
                  }
                  memset(&v889, 0, 20);
                  marrs::mrr::mr::computeStringMatchFeatures((uint64_t)&v889, (uint64_t)&v893, (uint64_t)v927, __p, v836, v270, v271);
                  *(_OWORD *)&v317->__r_.__value_.__l.__data_ = *(_OWORD *)&v889.__r_.__value_.__l.__data_;
                  LODWORD(v317->__r_.__value_.__r.__words[2]) = v889.__r_.__value_.__r.__words[2];
                  if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v893.__r_.__value_.__l.__data_);
                  }
                  ++v316;
                  v315 += 40;
                  char v317 = (std::string *)((char *)v317 + 20);
                }
                while (v316 != 5);
                if (v310 >= v822)
                {
                  unint64_t v326 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v310 - (void)v818) >> 2) + 1;
                  if (v326 > 0x28F5C28F5C28F5CLL)
                  {
                    v891.__r_.__value_.__r.__words[2] = v822;
                    v891.__r_.__value_.__l.__size_ = v310;
                    v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v818;
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x1EB851EB851EB852 * ((uint64_t)(v822 - (void)v818) >> 2) > v326) {
                    unint64_t v326 = 0x1EB851EB851EB852 * ((uint64_t)(v822 - (void)v818) >> 2);
                  }
                  if (0x8F5C28F5C28F5C29 * ((uint64_t)(v822 - (void)v818) >> 2) >= 0x147AE147AE147AELL) {
                    unint64_t v327 = 0x28F5C28F5C28F5CLL;
                  }
                  else {
                    unint64_t v327 = v326;
                  }
                  if (v327) {
                    unint64_t v327 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(v327);
                  }
                  else {
                    uint64_t v328 = 0;
                  }
                  unint64_t v329 = v327 + 4 * ((uint64_t)(v310 - (void)v818) >> 2);
                  *(_OWORD *)(v329 + 48) = v898;
                  *(_OWORD *)(v329 + 64) = v899;
                  *(_OWORD *)(v329 + 80) = v900;
                  *(_DWORD *)(v329 + 96) = v901;
                  *(_OWORD *)unint64_t v329 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v329 + 16) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v329 + 32) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  if ((void *)v310 == v818)
                  {
                    std::string::size_type v309 = v327 + 4 * ((uint64_t)(v310 - (void)v818) >> 2);
                  }
                  else
                  {
                    unint64_t v330 = v327 + 4 * ((uint64_t)(v310 - (void)v818) >> 2);
                    do
                    {
                      long long v331 = *(_OWORD *)(v310 - 100);
                      long long v332 = *(_OWORD *)(v310 - 84);
                      *(_OWORD *)(v330 - 68) = *(_OWORD *)(v310 - 68);
                      *(_OWORD *)(v330 - 84) = v332;
                      *(_OWORD *)(v330 - 100) = v331;
                      long long v333 = *(_OWORD *)(v310 - 52);
                      long long v334 = *(_OWORD *)(v310 - 36);
                      long long v335 = *(_OWORD *)(v310 - 20);
                      std::string::size_type v309 = v330 - 100;
                      *(_DWORD *)(v330 - 4) = *(_DWORD *)(v310 - 4);
                      *(_OWORD *)(v330 - 20) = v335;
                      *(_OWORD *)(v330 - 36) = v334;
                      *(_OWORD *)(v330 - 52) = v333;
                      v310 -= 100;
                      v330 -= 100;
                    }
                    while ((void *)v310 != v818);
                  }
                  std::string::size_type v822 = v327 + 100 * v328;
                  std::string::size_type v310 = v329 + 100;
                  if (v818) {
                    operator delete(v818);
                  }
                }
                else
                {
                  long long v321 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  long long v322 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(v310 + 16) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v310 + 32) = v322;
                  *(_OWORD *)std::string::size_type v310 = v321;
                  long long v323 = v898;
                  long long v324 = v899;
                  long long v325 = v900;
                  *(_DWORD *)(v310 + 96) = v901;
                  *(_OWORD *)(v310 + 64) = v324;
                  *(_OWORD *)(v310 + 80) = v325;
                  *(_OWORD *)(v310 + 48) = v323;
                  v310 += 100;
                  std::string::size_type v309 = (std::string::size_type)v818;
                }
                ++v314;
              }
              while (v314 < 0xAAAAAAAAAAAAAAABLL
                           * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3));
            }
            if ((v927[23] & 0x80000000) != 0) {
              operator delete(*(void **)v927);
            }
            std::__tree<std::string>::destroy(*(char **)&__p[8]);
            v308 = v803 + 1;
          }
          while (v803 + 1 != v800);
          v891.__r_.__value_.__r.__words[2] = v822;
          v891.__r_.__value_.__l.__size_ = v310;
          v891.__r_.__value_.__r.__words[0] = v309;
        }
        unint64_t v268 = v796;
        v243 = v811;
        std::string::basic_string[abi:ne180100]<0>(__p, "ContextualTextFeats");
        marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)&v891, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        long long v787 = *(_OWORD *)&v891.__r_.__value_.__l.__data_;
        uint64_t v336 = (char *)a4[1] - (char *)*a4;
        int v866 = 0;
        long long v864 = 0u;
        long long v865 = 0u;
        long long v862 = 0u;
        long long v863 = 0u;
        memset(__p, 0, sizeof(__p));
        std::vector<std::array<float,25ul>>::vector(buf, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3)* (v336 >> 3), (long long *)__p);
        uint64_t v337 = v855.i64[1];
        uint64_t v338 = v855.i64[0];
        if (v855.i64[1] != v855.i64[0])
        {
          uint64_t v339 = 0;
          unint64_t v340 = (v855.i64[1] - v855.i64[0]) / 216;
          std::string::size_type v341 = v895.__r_.__value_.__r.__words[0];
          if (v340 <= 1) {
            unint64_t v340 = 1;
          }
          uint64_t v342 = 16;
          do
          {
            uint64_t v343 = 0;
            v344 = (float32x2_t *)(v338 + 216 * v339);
            *(float32x2_t *)v350.f32 = v344[11];
            *(float32x2_t *)v345.f32 = vadd_f32(v344[10], vmul_f32(*(float32x2_t *)v350.f32, (float32x2_t)0x3F0000003F000000));
            v345.i64[1] = v345.i64[0];
            v346 = (float32x2_t **)(v341 + 24 * v339);
            v347 = *v346;
            unint64_t v348 = 0xCCCCCCCCCCCCCCCDLL * (v346[1] - *v346);
            float32x2_t v349 = vmul_lane_f32(*(float32x2_t *)v350.f32, *(float32x2_t *)v350.f32, 1);
            v350.i64[1] = v350.i64[0];
            v351 = (float32x4_t *)(buf[0].__r_.__value_.__r.__words[0] + v342);
            v352 = v347 + 4;
            do
            {
              if (v348 == v343) {
                break;
              }
              *(float32x2_t *)v353.f32 = v352[-1];
              float32x2_t v354 = *v352;
              *(float32x2_t *)&v353.u32[2] = vadd_f32(*(float32x2_t *)v353.f32, *v352);
              v351[-1] = vdivq_f32(vsubq_f32(v353, v345), v350);
              v351->i32[0] = vdiv_f32(vmul_lane_f32(v354, v354, 1), v349).u32[0];
              v351 = (float32x4_t *)((char *)v351 + 20);
              ++v343;
              v352 += 5;
            }
            while (v343 != 5);
            ++v339;
            v342 += 100;
          }
          while (v339 != v340);
        }
        if ((unint64_t)v336 >= 9)
        {
          std::string::size_type v355 = buf[0].__r_.__value_.__r.__words[0];
          uint64_t v356 = v855.i64[1];
          uint64_t v357 = v855.i64[0];
          unint64_t v358 = (v855.i64[1] - v855.i64[0]) / 216;
          if (v358 <= 1) {
            uint64_t v359 = 1;
          }
          else {
            uint64_t v359 = (v855.i64[1] - v855.i64[0]) / 216;
          }
          uint64_t v360 = 1;
          do
          {
            uint64_t v361 = v337 - v338;
            BOOL v658 = v337 == v338;
            uint64_t v337 = v338;
            if (!v658)
            {
              uint64_t v362 = 0;
              unint64_t v363 = 0x84BDA12F684BDA13 * (v361 >> 3);
              std::string::size_type v364 = v355;
              do
              {
                std::string::size_type v365 = v355 + 100 * (v362 + v360 * v363);
                long long v366 = *(_OWORD *)v364;
                long long v367 = *(_OWORD *)(v364 + 32);
                *(_OWORD *)(v365 + 16) = *(_OWORD *)(v364 + 16);
                *(_OWORD *)(v365 + 32) = v367;
                *(_OWORD *)std::string::size_type v365 = v366;
                long long v368 = *(_OWORD *)(v364 + 48);
                long long v369 = *(_OWORD *)(v364 + 64);
                long long v370 = *(_OWORD *)(v364 + 80);
                *(_DWORD *)(v365 + 96) = *(_DWORD *)(v364 + 96);
                *(_OWORD *)(v365 + 64) = v369;
                *(_OWORD *)(v365 + 80) = v370;
                *(_OWORD *)(v365 + 48) = v368;
                ++v362;
                v364 += 100;
                unint64_t v363 = v358;
              }
              while (v359 != v362);
              uint64_t v338 = v357;
              uint64_t v337 = v356;
            }
            ++v360;
          }
          while (v360 != v336 >> 3);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ContextualTextLocFeats");
        marrs::mrr::mr::logFeatureVectorArray<25ul>((uint64_t *)buf, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        long long v789 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v895;
        std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        int v290 = 0;
      }
      else
      {
        int v290 = 1;
        long long v787 = 0u;
        long long v788 = 0u;
      }
      int v785 = v290;
      uint64_t v371 = v855.i64[1];
      uint64_t v372 = v855.i64[0];
      v374 = *a4;
      v373 = a4[1];
      uint64_t v851 = 0;
      long long v850 = 0uLL;
      memset(buf, 0, 24);
      uint64_t v375 = v243[5];
      if (v375)
      {
        int64x2_t v376 = v855;
        v823 = v374;
        v837 = v373;
        uint64_t v377 = 0;
        v378 = 0;
        std::string::size_type v379 = 0;
        v380 = 0;
        uint64_t v381 = 0;
        unint64_t v382 = v243[7];
        float v383 = (float)v382;
        do
        {
          if (v382)
          {
            v384 = (float *)(v811[1] + v377);
            float v385 = 0.0;
            unint64_t v386 = 1;
            do
            {
              float v385 = v385 + *v384;
              float v387 = (float)v386++;
              v384 += v375;
            }
            while (v387 < v383);
          }
          else
          {
            float v385 = 0.0;
          }
          float v388 = v385 / v383;
          if ((unint64_t)v380 >= v379)
          {
            uint64_t v390 = v380 - v378;
            unint64_t v391 = v390 + 1;
            if ((unint64_t)(v390 + 1) >> 62)
            {
              buf[0].__r_.__value_.__r.__words[2] = v379;
              buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v379 - (void)v378) >> 1 > v391) {
              unint64_t v391 = (uint64_t)(v379 - (void)v378) >> 1;
            }
            if (v379 - (unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v392 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v392 = v391;
            }
            if (v392) {
              unint64_t v392 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v392);
            }
            else {
              uint64_t v393 = 0;
            }
            v394 = (float *)(v392 + 4 * v390);
            float *v394 = v388;
            std::string::size_type v389 = (std::string::size_type)(v394 + 1);
            while (v380 != v378)
            {
              int v395 = *((_DWORD *)v380-- - 1);
              *((_DWORD *)v394-- - 1) = v395;
            }
            std::string::size_type v379 = v392 + 4 * v393;
            buf[0].__r_.__value_.__l.__size_ = v389;
            if (v378) {
              operator delete(v378);
            }
            v378 = v394;
          }
          else
          {
            float *v380 = v388;
            std::string::size_type v389 = (std::string::size_type)(v380 + 1);
          }
          buf[0].__r_.__value_.__l.__size_ = v389;
          ++v381;
          v377 += 4;
          v380 = (float *)v389;
        }
        while (v381 != v375);
        buf[0].__r_.__value_.__r.__words[2] = v379;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
        unint64_t v268 = v796;
        v373 = v837;
        uint64_t v371 = v376.i64[1];
        v374 = v823;
        uint64_t v372 = v376.i64[0];
      }
      else
      {
        v378 = 0;
      }
      std::vector<std::vector<float>>::vector(v927, (v373 - v374) * 0x84BDA12F684BDA13 * ((v371 - v372) >> 3), (uint64_t)buf);
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v850);
      long long v850 = *(_OWORD *)v927;
      uint64_t v851 = *(void *)&v927[16];
      memset(v927, 0, 24);
      v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v927;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v893);
      if (v378)
      {
        buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v378;
        operator delete(v378);
      }
      v781.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v396 = MRRLoggerForCategory(3);
      if (v268 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v397 = v396;
        if (os_signpost_enabled(v396))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v397, OS_SIGNPOST_INTERVAL_END, v793, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
        }
      }
      v398 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v398, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v398, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
      }
      v399 = MRRLoggerForCategory(3);
      os_signpost_id_t v400 = os_signpost_id_generate(v399);
      v401 = MRRLoggerForCategory(3);
      unint64_t v782 = v400 - 1;
      if (v400 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v402 = v401;
        if (os_signpost_enabled(v401))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v402, OS_SIGNPOST_INTERVAL_BEGIN, v400, "MRModelInference", "", (uint8_t *)buf, 2u);
        }
      }
      v403 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v403, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v403, OS_LOG_TYPE_INFO, "BEGIN \"MRModelInference\"", (uint8_t *)buf, 2u);
      }
      os_signpost_id_t spid = v400;
      v780.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v404 = (long long *)v791;
      v405 = 0;
      v406 = 0;
      if ((void)v791 == *((void *)&v791 + 1))
      {
        uint64_t v418 = v791;
      }
      else
      {
        unint64_t v407 = 0;
        do
        {
          uint64_t v408 = 0;
          long long v409 = *v404;
          LODWORD(buf[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)v404 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v409;
          do
          {
            int v410 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v408);
            if ((unint64_t)v406 >= v407)
            {
              uint64_t v411 = (v406 - v405) >> 2;
              unint64_t v412 = v411 + 1;
              if ((unint64_t)(v411 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v407 - (void)v405) >> 1 > v412) {
                unint64_t v412 = (uint64_t)(v407 - (void)v405) >> 1;
              }
              if (v407 - (unint64_t)v405 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v413 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v413 = v412;
              }
              if (v413) {
                unint64_t v413 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v413);
              }
              else {
                uint64_t v414 = 0;
              }
              v415 = (char *)(v413 + 4 * v411);
              *(_DWORD *)v415 = v410;
              v416 = v415 + 4;
              while (v406 != v405)
              {
                int v417 = *((_DWORD *)v406 - 1);
                v406 -= 4;
                *((_DWORD *)v415 - 1) = v417;
                v415 -= 4;
              }
              unint64_t v407 = v413 + 4 * v414;
              if (v405) {
                operator delete(v405);
              }
              v405 = v415;
              v406 = v416;
            }
            else
            {
              *(_DWORD *)v406 = v410;
              v406 += 4;
            }
            ++v408;
          }
          while (v408 != 5);
          v404 = (long long *)((char *)v404 + 20);
        }
        while (v404 != *((long long **)&v791 + 1));
        uint64_t v418 = *((void *)&v791 + 1);
      }
      memset(v927, 0, 24);
      v419 = operator new(0x10uLL);
      void *v419 = 0xCCCCCCCCCCCCCCCDLL * ((v418 - (uint64_t)v791) >> 2);
      v419[1] = 5;
      *(void *)v927 = v419;
      *(void *)&v927[8] = v419 + 2;
      *(void *)&v927[16] = v419 + 2;
      *(void *)&v927[24] = 0;
      long long v928 = 0uLL;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v927[24], v405, (uint64_t)v406, (v406 - v405) >> 2);
      if (v405) {
        operator delete(v405);
      }
      uint64_t v838 = *((void *)&v790 + 1);
      v420 = (long long *)v790;
      if ((void)v790 == *((void *)&v790 + 1))
      {
        v421 = 0;
        v422 = 0;
        uint64_t v838 = v790;
      }
      else
      {
        v421 = 0;
        v422 = 0;
        unint64_t v423 = 0;
        do
        {
          uint64_t v424 = 0;
          long long v425 = *v420;
          long long v426 = v420[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v420[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v426;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v425;
          long long v427 = v420[3];
          long long v428 = v420[4];
          long long v429 = v420[5];
          int v901 = *((_DWORD *)v420 + 24);
          long long v899 = v428;
          long long v900 = v429;
          long long v898 = v427;
          do
          {
            int v430 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v424);
            if ((unint64_t)v422 >= v423)
            {
              uint64_t v431 = (v422 - v421) >> 2;
              unint64_t v432 = v431 + 1;
              if ((unint64_t)(v431 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v423 - (void)v421) >> 1 > v432) {
                unint64_t v432 = (uint64_t)(v423 - (void)v421) >> 1;
              }
              if (v423 - (unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v433 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v433 = v432;
              }
              if (v433) {
                unint64_t v433 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v433);
              }
              else {
                uint64_t v434 = 0;
              }
              v435 = (char *)(v433 + 4 * v431);
              *(_DWORD *)v435 = v430;
              v436 = v435 + 4;
              while (v422 != v421)
              {
                int v437 = *((_DWORD *)v422 - 1);
                v422 -= 4;
                *((_DWORD *)v435 - 1) = v437;
                v435 -= 4;
              }
              unint64_t v423 = v433 + 4 * v434;
              if (v421) {
                operator delete(v421);
              }
              v421 = v435;
              v422 = v436;
            }
            else
            {
              *(_DWORD *)v422 = v430;
              v422 += 4;
            }
            ++v424;
          }
          while (v424 != 25);
          v420 = (long long *)((char *)v420 + 100);
        }
        while (v420 != *((long long **)&v790 + 1));
        v420 = (long long *)v790;
      }
      v438 = operator new(0x10uLL);
      void *v438 = 0x8F5C28F5C28F5C29 * ((v838 - (uint64_t)v420) >> 2);
      v438[1] = 25;
      v893.__r_.__value_.__r.__words[0] = (std::string::size_type)v438;
      v893.__r_.__value_.__l.__size_ = (std::string::size_type)(v438 + 2);
      v893.__r_.__value_.__r.__words[2] = (std::string::size_type)(v438 + 2);
      memset(&v894, 0, sizeof(v894));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v894, v421, (uint64_t)v422, (v422 - v421) >> 2);
      if (v421) {
        operator delete(v421);
      }
      uint64_t v824 = *((void *)&v795 + 1);
      uint64_t v439 = v795;
      if ((void)v795 == *((void *)&v795 + 1))
      {
        v440 = 0;
        v441 = 0;
        uint64_t v824 = v795;
      }
      else
      {
        v440 = 0;
        v441 = 0;
        unint64_t v442 = 0;
        v443 = (long long *)v795;
        do
        {
          uint64_t v444 = 0;
          long long v445 = *v443;
          long long v446 = v443[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v443[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v446;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v445;
          long long v447 = v443[3];
          long long v448 = v443[4];
          long long v449 = v443[5];
          v839 = v443;
          int v901 = *((_DWORD *)v443 + 24);
          long long v899 = v448;
          long long v900 = v449;
          long long v898 = v447;
          do
          {
            uint64_t v450 = 0;
            v451 = (char *)buf + 20 * v444;
            *(_OWORD *)&v891.__r_.__value_.__l.__data_ = *(_OWORD *)v451;
            LODWORD(v891.__r_.__value_.__r.__words[2]) = *((_DWORD *)v451 + 4);
            do
            {
              int v452 = *((_DWORD *)&v891.__r_.__value_.__l.__data_ + v450);
              if ((unint64_t)v441 >= v442)
              {
                uint64_t v453 = (v441 - v440) >> 2;
                unint64_t v454 = v453 + 1;
                if ((unint64_t)(v453 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v442 - (void)v440) >> 1 > v454) {
                  unint64_t v454 = (uint64_t)(v442 - (void)v440) >> 1;
                }
                if (v442 - (unint64_t)v440 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v455 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v455 = v454;
                }
                if (v455) {
                  unint64_t v455 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v455);
                }
                else {
                  uint64_t v456 = 0;
                }
                v457 = (char *)(v455 + 4 * v453);
                *(_DWORD *)v457 = v452;
                v458 = v457 + 4;
                while (v441 != v440)
                {
                  int v459 = *((_DWORD *)v441 - 1);
                  v441 -= 4;
                  *((_DWORD *)v457 - 1) = v459;
                  v457 -= 4;
                }
                unint64_t v442 = v455 + 4 * v456;
                if (v440) {
                  operator delete(v440);
                }
                v440 = v457;
                v441 = v458;
              }
              else
              {
                *(_DWORD *)v441 = v452;
                v441 += 4;
              }
              ++v450;
            }
            while (v450 != 5);
            ++v444;
          }
          while (v444 != 5);
          v443 = (long long *)((char *)v839 + 100);
        }
        while ((long long *)((char *)v839 + 100) != *((long long **)&v795 + 1));
        uint64_t v439 = v795;
      }
      v460 = (char *)operator new(0x18uLL);
      *(void *)v460 = 0x8F5C28F5C28F5C29 * ((v824 - v439) >> 2);
      *(int64x2_t *)(v460 + 8) = vdupq_n_s64(5uLL);
      v895.__r_.__value_.__r.__words[0] = (std::string::size_type)v460;
      v895.__r_.__value_.__l.__size_ = (std::string::size_type)(v460 + 24);
      v895.__r_.__value_.__r.__words[2] = (std::string::size_type)(v460 + 24);
      memset(v896, 0, sizeof(v896));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v896, v440, (uint64_t)v441, (v441 - v440) >> 2);
      if (v440) {
        operator delete(v440);
      }
      std::string::size_type v819 = v854.__r_.__value_.__l.__size_;
      v461 = (uint64_t *)v854.__r_.__value_.__r.__words[0];
      if (v854.__r_.__value_.__r.__words[0] == v854.__r_.__value_.__l.__size_)
      {
        v462 = 0;
        v463 = 0;
        std::string::size_type v477 = v854.__r_.__value_.__r.__words[0];
      }
      else
      {
        v462 = 0;
        v463 = 0;
        unint64_t v464 = 0;
        do
        {
          memset(buf, 0, 24);
          v825 = v461;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(buf, *v461, v461[1], 0xAAAAAAAAAAAAAAABLL * ((v461[1] - *v461) >> 3));
          std::string::size_type v465 = buf[0].__r_.__value_.__l.__size_;
          std::string::size_type v840 = buf[0].__r_.__value_.__l.__size_;
          for (std::string::size_type j = buf[0].__r_.__value_.__r.__words[0]; j != v465; j += 24)
          {
            memset(&v889, 0, sizeof(v889));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v889, *(const void **)j, *(void *)(j + 8), (uint64_t)(*(void *)(j + 8) - *(void *)j) >> 2);
            std::string::size_type v467 = v889.__r_.__value_.__l.__size_;
            v468 = (int *)v889.__r_.__value_.__r.__words[0];
            if (v889.__r_.__value_.__r.__words[0] != v889.__r_.__value_.__l.__size_)
            {
              do
              {
                int v469 = *v468;
                if ((unint64_t)v463 >= v464)
                {
                  uint64_t v470 = (v463 - v462) >> 2;
                  unint64_t v471 = v470 + 1;
                  if ((unint64_t)(v470 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v464 - (void)v462) >> 1 > v471) {
                    unint64_t v471 = (uint64_t)(v464 - (void)v462) >> 1;
                  }
                  if (v464 - (unint64_t)v462 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v472 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v472 = v471;
                  }
                  if (v472) {
                    unint64_t v472 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v472);
                  }
                  else {
                    uint64_t v473 = 0;
                  }
                  v474 = (char *)(v472 + 4 * v470);
                  *(_DWORD *)v474 = v469;
                  v475 = v474 + 4;
                  while (v463 != v462)
                  {
                    int v476 = *((_DWORD *)v463 - 1);
                    v463 -= 4;
                    *((_DWORD *)v474 - 1) = v476;
                    v474 -= 4;
                  }
                  unint64_t v464 = v472 + 4 * v473;
                  if (v462) {
                    operator delete(v462);
                  }
                  v462 = v474;
                  v463 = v475;
                }
                else
                {
                  *(_DWORD *)v463 = v469;
                  v463 += 4;
                }
                ++v468;
              }
              while (v468 != (int *)v467);
              v468 = (int *)v889.__r_.__value_.__r.__words[0];
            }
            if (v468) {
              operator delete(v468);
            }
            std::string::size_type v465 = v840;
          }
          v889.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v889);
          v461 = v825 + 3;
        }
        while (v825 + 3 != (uint64_t *)v819);
        std::string::size_type v477 = v854.__r_.__value_.__l.__size_;
        v461 = (uint64_t *)v854.__r_.__value_.__r.__words[0];
      }
      v478 = operator new(0x18uLL);
      void *v478 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - (void)v461) >> 3);
      v478[1] = 5;
      v478[2] = v798;
      v891.__r_.__value_.__r.__words[0] = (std::string::size_type)v478;
      v891.__r_.__value_.__l.__size_ = (std::string::size_type)(v478 + 3);
      v891.__r_.__value_.__r.__words[2] = (std::string::size_type)(v478 + 3);
      memset(v892, 0, sizeof(v892));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v892, v462, (uint64_t)v463, (v463 - v462) >> 2);
      if (v462) {
        operator delete(v462);
      }
      std::string::size_type v841 = v853.__r_.__value_.__l.__size_;
      std::string::size_type v479 = v853.__r_.__value_.__r.__words[0];
      if (v853.__r_.__value_.__r.__words[0] == v853.__r_.__value_.__l.__size_)
      {
        v480 = 0;
        v481 = 0;
        std::string::size_type v493 = v853.__r_.__value_.__r.__words[0];
      }
      else
      {
        v480 = 0;
        v481 = 0;
        unint64_t v482 = 0;
        do
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, *(const void **)v479, *(void *)(v479 + 8), (uint64_t)(*(void *)(v479 + 8) - *(void *)v479) >> 2);
          std::string::size_type v484 = buf[0].__r_.__value_.__l.__size_;
          v483 = (int *)buf[0].__r_.__value_.__r.__words[0];
          if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
          {
            do
            {
              int v485 = *v483;
              if ((unint64_t)v481 >= v482)
              {
                uint64_t v486 = (v481 - v480) >> 2;
                unint64_t v487 = v486 + 1;
                if ((unint64_t)(v486 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v482 - (void)v480) >> 1 > v487) {
                  unint64_t v487 = (uint64_t)(v482 - (void)v480) >> 1;
                }
                if (v482 - (unint64_t)v480 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v488 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v488 = v487;
                }
                if (v488) {
                  unint64_t v488 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v488);
                }
                else {
                  uint64_t v489 = 0;
                }
                v490 = (char *)(v488 + 4 * v486);
                *(_DWORD *)v490 = v485;
                v491 = v490 + 4;
                while (v481 != v480)
                {
                  int v492 = *((_DWORD *)v481 - 1);
                  v481 -= 4;
                  *((_DWORD *)v490 - 1) = v492;
                  v490 -= 4;
                }
                unint64_t v482 = v488 + 4 * v489;
                if (v480) {
                  operator delete(v480);
                }
                v480 = v490;
                v481 = v491;
              }
              else
              {
                *(_DWORD *)v481 = v485;
                v481 += 4;
              }
              ++v483;
            }
            while (v483 != (int *)v484);
            v483 = (int *)buf[0].__r_.__value_.__r.__words[0];
          }
          if (v483) {
            operator delete(v483);
          }
          v479 += 24;
        }
        while (v479 != v841);
        std::string::size_type v493 = v853.__r_.__value_.__l.__size_;
        std::string::size_type v479 = v853.__r_.__value_.__r.__words[0];
      }
      v494 = operator new(0x10uLL);
      void *v494 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v493 - v479) >> 3);
      v494[1] = v798;
      v889.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
      v889.__r_.__value_.__l.__size_ = (std::string::size_type)(v494 + 2);
      v889.__r_.__value_.__r.__words[2] = (std::string::size_type)(v494 + 2);
      memset(v890, 0, sizeof(v890));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v890, v480, (uint64_t)v481, (v481 - v480) >> 2);
      if (v480) {
        operator delete(v480);
      }
      v495 = (char *)v830;
      v496 = 0;
      v497 = 0;
      if ((void)v830 == *((void *)&v830 + 1))
      {
        uint64_t v510 = v830;
      }
      else
      {
        unint64_t v498 = 0;
        do
        {
          uint64_t v499 = 0;
          long long v500 = *(_OWORD *)v495;
          long long v501 = *((_OWORD *)v495 + 1);
          buf[1].__r_.__value_.__l.__size_ = *((void *)v495 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v500;
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v501;
          do
          {
            int v502 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v499);
            if ((unint64_t)v497 >= v498)
            {
              uint64_t v503 = (v497 - v496) >> 2;
              unint64_t v504 = v503 + 1;
              if ((unint64_t)(v503 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v498 - (void)v496) >> 1 > v504) {
                unint64_t v504 = (uint64_t)(v498 - (void)v496) >> 1;
              }
              if (v498 - (unint64_t)v496 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v505 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v505 = v504;
              }
              if (v505) {
                unint64_t v505 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v505);
              }
              else {
                uint64_t v506 = 0;
              }
              v507 = (char *)(v505 + 4 * v503);
              *(_DWORD *)v507 = v502;
              v508 = v507 + 4;
              while (v497 != v496)
              {
                int v509 = *((_DWORD *)v497 - 1);
                v497 -= 4;
                *((_DWORD *)v507 - 1) = v509;
                v507 -= 4;
              }
              unint64_t v498 = v505 + 4 * v506;
              if (v496) {
                operator delete(v496);
              }
              v496 = v507;
              v497 = v508;
            }
            else
            {
              *(_DWORD *)v497 = v502;
              v497 += 4;
            }
            ++v499;
          }
          while (v499 != 10);
          v495 += 40;
        }
        while (v495 != *((char **)&v830 + 1));
        uint64_t v510 = *((void *)&v830 + 1);
        v495 = (char *)v830;
      }
      v511 = (char *)operator new(0x10uLL);
      *(void *)v511 = 0xCCCCCCCCCCCCCCCDLL * ((v510 - (uint64_t)v495) >> 3);
      *((void *)v511 + 1) = 10;
      v885 = v511;
      v886 = v511 + 16;
      v887 = v511 + 16;
      memset(v888, 0, sizeof(v888));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v888, v496, (uint64_t)v497, (v497 - v496) >> 2);
      if (v496) {
        operator delete(v496);
      }
      std::string::size_type v804 = v852.__r_.__value_.__l.__size_;
      v512 = (uint64_t *)v852.__r_.__value_.__r.__words[0];
      if (v852.__r_.__value_.__r.__words[0] == v852.__r_.__value_.__l.__size_)
      {
        v513 = 0;
        v514 = 0;
        std::string::size_type v528 = v852.__r_.__value_.__r.__words[0];
      }
      else
      {
        v513 = 0;
        v514 = 0;
        unint64_t v515 = 0;
        do
        {
          memset(buf, 0, 24);
          v826 = v512;
          std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(buf, *v512, v512[1], 0xAAAAAAAAAAAAAAABLL * ((v512[1] - *v512) >> 3));
          std::string::size_type v516 = buf[0].__r_.__value_.__l.__size_;
          std::string::size_type v842 = buf[0].__r_.__value_.__l.__size_;
          for (std::string::size_type k = buf[0].__r_.__value_.__r.__words[0]; k != v516; k += 24)
          {
            memset(&v879, 0, sizeof(v879));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v879, *(const void **)k, *(void *)(k + 8), (uint64_t)(*(void *)(k + 8) - *(void *)k) >> 2);
            std::string::size_type v518 = v879.__r_.__value_.__l.__size_;
            v519 = (int *)v879.__r_.__value_.__r.__words[0];
            if (v879.__r_.__value_.__r.__words[0] != v879.__r_.__value_.__l.__size_)
            {
              do
              {
                int v520 = *v519;
                if ((unint64_t)v514 >= v515)
                {
                  uint64_t v521 = (v514 - v513) >> 2;
                  unint64_t v522 = v521 + 1;
                  if ((unint64_t)(v521 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v515 - (void)v513) >> 1 > v522) {
                    unint64_t v522 = (uint64_t)(v515 - (void)v513) >> 1;
                  }
                  if (v515 - (unint64_t)v513 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v523 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v523 = v522;
                  }
                  if (v523) {
                    unint64_t v523 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v523);
                  }
                  else {
                    uint64_t v524 = 0;
                  }
                  v525 = (char *)(v523 + 4 * v521);
                  *(_DWORD *)v525 = v520;
                  v526 = v525 + 4;
                  while (v514 != v513)
                  {
                    int v527 = *((_DWORD *)v514 - 1);
                    v514 -= 4;
                    *((_DWORD *)v525 - 1) = v527;
                    v525 -= 4;
                  }
                  unint64_t v515 = v523 + 4 * v524;
                  if (v513) {
                    operator delete(v513);
                  }
                  v513 = v525;
                  v514 = v526;
                }
                else
                {
                  *(_DWORD *)v514 = v520;
                  v514 += 4;
                }
                ++v519;
              }
              while (v519 != (int *)v518);
              v519 = (int *)v879.__r_.__value_.__r.__words[0];
            }
            if (v519) {
              operator delete(v519);
            }
            std::string::size_type v516 = v842;
          }
          v879.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v879);
          v512 = v826 + 3;
        }
        while (v826 + 3 != (uint64_t *)v804);
        std::string::size_type v528 = v852.__r_.__value_.__l.__size_;
        v512 = (uint64_t *)v852.__r_.__value_.__r.__words[0];
        v495 = (char *)v830;
      }
      v529 = operator new(0x18uLL);
      void *v529 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v528 - (void)v512) >> 3);
      v529[1] = 10;
      v529[2] = v798;
      v883.__r_.__value_.__r.__words[0] = (std::string::size_type)v529;
      v883.__r_.__value_.__l.__size_ = (std::string::size_type)(v529 + 3);
      v883.__r_.__value_.__r.__words[2] = (std::string::size_type)(v529 + 3);
      memset(v884, 0, sizeof(v884));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v884, v513, (uint64_t)v514, (v514 - v513) >> 2);
      if (v513) {
        operator delete(v513);
      }
      uint64_t v843 = *((void *)&v788 + 1);
      v530 = (long long *)v788;
      if ((void)v788 == *((void *)&v788 + 1))
      {
        v533 = 0;
        v532 = 0;
        uint64_t v843 = v788;
      }
      else
      {
        unint64_t v531 = 0;
        v532 = 0;
        v533 = 0;
        do
        {
          uint64_t v534 = 0;
          long long v535 = *v530;
          LODWORD(buf[0].__r_.__value_.__r.__words[2]) = *((_DWORD *)v530 + 4);
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v535;
          do
          {
            int v536 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v534);
            if ((unint64_t)v532 >= v531)
            {
              uint64_t v537 = (v532 - v533) >> 2;
              unint64_t v538 = v537 + 1;
              if ((unint64_t)(v537 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v531 - (void)v533) >> 1 > v538) {
                unint64_t v538 = (uint64_t)(v531 - (void)v533) >> 1;
              }
              if (v531 - (unint64_t)v533 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v539 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v539 = v538;
              }
              if (v539) {
                unint64_t v539 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v539);
              }
              else {
                uint64_t v540 = 0;
              }
              v541 = (char *)(v539 + 4 * v537);
              *(_DWORD *)v541 = v536;
              v542 = v541 + 4;
              while (v532 != v533)
              {
                int v543 = *((_DWORD *)v532 - 1);
                v532 -= 4;
                *((_DWORD *)v541 - 1) = v543;
                v541 -= 4;
              }
              unint64_t v531 = v539 + 4 * v540;
              if (v533) {
                operator delete(v533);
              }
              v533 = v541;
              v532 = v542;
            }
            else
            {
              *(_DWORD *)v532 = v536;
              v532 += 4;
            }
            ++v534;
          }
          while (v534 != 5);
          v530 = (long long *)((char *)v530 + 20);
        }
        while (v530 != *((long long **)&v788 + 1));
        v495 = (char *)v830;
      }
      v544 = operator new(0x10uLL);
      void *v544 = 0xCCCCCCCCCCCCCCCDLL * ((v843 - (uint64_t)v788) >> 2);
      v544[1] = 5;
      v879.__r_.__value_.__r.__words[0] = (std::string::size_type)v544;
      v879.__r_.__value_.__l.__size_ = (std::string::size_type)(v544 + 2);
      v879.__r_.__value_.__r.__words[2] = (std::string::size_type)(v544 + 2);
      v880 = 0;
      uint64_t v882 = 0;
      v881 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v880, v533, (uint64_t)v532, (v532 - v533) >> 2);
      if (v533) {
        operator delete(v533);
      }
      uint64_t v844 = *((void *)&v787 + 1);
      v545 = (long long *)v787;
      if ((void)v787 == *((void *)&v787 + 1))
      {
        v548 = 0;
        v547 = 0;
        uint64_t v844 = v787;
      }
      else
      {
        unint64_t v546 = 0;
        v547 = 0;
        v548 = 0;
        do
        {
          uint64_t v549 = 0;
          long long v550 = *v545;
          long long v551 = v545[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v545[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v551;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v550;
          long long v552 = v545[3];
          long long v553 = v545[4];
          long long v554 = v545[5];
          int v901 = *((_DWORD *)v545 + 24);
          long long v899 = v553;
          long long v900 = v554;
          long long v898 = v552;
          do
          {
            int v555 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v549);
            if ((unint64_t)v547 >= v546)
            {
              uint64_t v556 = (v547 - v548) >> 2;
              unint64_t v557 = v556 + 1;
              if ((unint64_t)(v556 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v546 - (void)v548) >> 1 > v557) {
                unint64_t v557 = (uint64_t)(v546 - (void)v548) >> 1;
              }
              if (v546 - (unint64_t)v548 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v558 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v558 = v557;
              }
              if (v558) {
                unint64_t v558 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v558);
              }
              else {
                uint64_t v559 = 0;
              }
              v560 = (char *)(v558 + 4 * v556);
              *(_DWORD *)v560 = v555;
              v561 = v560 + 4;
              while (v547 != v548)
              {
                int v562 = *((_DWORD *)v547 - 1);
                v547 -= 4;
                *((_DWORD *)v560 - 1) = v562;
                v560 -= 4;
              }
              unint64_t v546 = v558 + 4 * v559;
              if (v548) {
                operator delete(v548);
              }
              v548 = v560;
              v547 = v561;
            }
            else
            {
              *(_DWORD *)v547 = v555;
              v547 += 4;
            }
            ++v549;
          }
          while (v549 != 25);
          v545 = (long long *)((char *)v545 + 100);
        }
        while (v545 != *((long long **)&v787 + 1));
        v495 = (char *)v830;
      }
      v563 = operator new(0x10uLL);
      void *v563 = 0x8F5C28F5C28F5C29 * ((v844 - (uint64_t)v787) >> 2);
      v563[1] = 25;
      v875.__r_.__value_.__r.__words[0] = (std::string::size_type)v563;
      v875.__r_.__value_.__l.__size_ = (std::string::size_type)(v563 + 2);
      v875.__r_.__value_.__r.__words[2] = (std::string::size_type)(v563 + 2);
      v876 = 0;
      uint64_t v878 = 0;
      v877 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v876, v548, (uint64_t)v547, (v547 - v548) >> 2);
      if (v548) {
        operator delete(v548);
      }
      uint64_t v845 = *((void *)&v789 + 1);
      v564 = (long long *)v789;
      if ((void)v789 == *((void *)&v789 + 1))
      {
        v567 = 0;
        v566 = 0;
        uint64_t v845 = v789;
      }
      else
      {
        unint64_t v565 = 0;
        v566 = 0;
        v567 = 0;
        do
        {
          uint64_t v568 = 0;
          long long v569 = *v564;
          long long v570 = v564[2];
          *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = v564[1];
          *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = v570;
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v569;
          long long v571 = v564[3];
          long long v572 = v564[4];
          long long v573 = v564[5];
          int v901 = *((_DWORD *)v564 + 24);
          long long v899 = v572;
          long long v900 = v573;
          long long v898 = v571;
          do
          {
            int v574 = *((_DWORD *)&buf[0].__r_.__value_.__l.__data_ + v568);
            if ((unint64_t)v566 >= v565)
            {
              uint64_t v575 = (v566 - v567) >> 2;
              unint64_t v576 = v575 + 1;
              if ((unint64_t)(v575 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v565 - (void)v567) >> 1 > v576) {
                unint64_t v576 = (uint64_t)(v565 - (void)v567) >> 1;
              }
              if (v565 - (unint64_t)v567 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v577 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v577 = v576;
              }
              if (v577) {
                unint64_t v577 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v577);
              }
              else {
                uint64_t v578 = 0;
              }
              v579 = (char *)(v577 + 4 * v575);
              *(_DWORD *)v579 = v574;
              v580 = v579 + 4;
              while (v566 != v567)
              {
                int v581 = *((_DWORD *)v566 - 1);
                v566 -= 4;
                *((_DWORD *)v579 - 1) = v581;
                v579 -= 4;
              }
              unint64_t v565 = v577 + 4 * v578;
              if (v567) {
                operator delete(v567);
              }
              v567 = v579;
              v566 = v580;
            }
            else
            {
              *(_DWORD *)v566 = v574;
              v566 += 4;
            }
            ++v568;
          }
          while (v568 != 25);
          v564 = (long long *)((char *)v564 + 100);
        }
        while (v564 != *((long long **)&v789 + 1));
        v495 = (char *)v830;
        v564 = (long long *)v789;
      }
      v582 = operator new(0x10uLL);
      void *v582 = 0x8F5C28F5C28F5C29 * ((v845 - (uint64_t)v564) >> 2);
      v582[1] = 25;
      v871.__r_.__value_.__r.__words[0] = (std::string::size_type)v582;
      v871.__r_.__value_.__l.__size_ = (std::string::size_type)(v582 + 2);
      v871.__r_.__value_.__r.__words[2] = (std::string::size_type)(v582 + 2);
      v872 = 0;
      uint64_t v874 = 0;
      v873 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v872, v567, (uint64_t)v566, (v566 - v567) >> 2);
      if (v567) {
        operator delete(v567);
      }
      uint64_t v846 = *((void *)&v850 + 1);
      uint64_t v583 = v850;
      if ((void)v850 == *((void *)&v850 + 1))
      {
        v585 = 0;
        v586 = 0;
        uint64_t v597 = v850;
      }
      else
      {
        unint64_t v584 = 0;
        v585 = 0;
        v586 = 0;
        do
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, *(const void **)v583, *(void *)(v583 + 8), (uint64_t)(*(void *)(v583 + 8) - *(void *)v583) >> 2);
          std::string::size_type v588 = buf[0].__r_.__value_.__l.__size_;
          v587 = (int *)buf[0].__r_.__value_.__r.__words[0];
          if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
          {
            do
            {
              int v589 = *v587;
              if ((unint64_t)v585 >= v584)
              {
                uint64_t v590 = (v585 - v586) >> 2;
                unint64_t v591 = v590 + 1;
                if ((unint64_t)(v590 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v584 - (void)v586) >> 1 > v591) {
                  unint64_t v591 = (uint64_t)(v584 - (void)v586) >> 1;
                }
                if (v584 - (unint64_t)v586 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v592 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v592 = v591;
                }
                if (v592) {
                  unint64_t v592 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v592);
                }
                else {
                  uint64_t v593 = 0;
                }
                v594 = (char *)(v592 + 4 * v590);
                *(_DWORD *)v594 = v589;
                v595 = v594 + 4;
                while (v585 != v586)
                {
                  int v596 = *((_DWORD *)v585 - 1);
                  v585 -= 4;
                  *((_DWORD *)v594 - 1) = v596;
                  v594 -= 4;
                }
                unint64_t v584 = v592 + 4 * v593;
                if (v586) {
                  operator delete(v586);
                }
                v586 = v594;
                v585 = v595;
              }
              else
              {
                *(_DWORD *)v585 = v589;
                v585 += 4;
              }
              ++v587;
            }
            while (v587 != (int *)v588);
            v587 = (int *)buf[0].__r_.__value_.__r.__words[0];
          }
          if (v587) {
            operator delete(v587);
          }
          v583 += 24;
        }
        while (v583 != v846);
        uint64_t v597 = *((void *)&v850 + 1);
        uint64_t v583 = v850;
        v495 = (char *)v830;
      }
      v598 = operator new(0x10uLL);
      void *v598 = 0xAAAAAAAAAAAAAAABLL * ((v597 - v583) >> 3);
      v598[1] = v798;
      v867.__r_.__value_.__r.__words[0] = (std::string::size_type)v598;
      v867.__r_.__value_.__l.__size_ = (std::string::size_type)(v598 + 2);
      v867.__r_.__value_.__r.__words[2] = (std::string::size_type)(v598 + 2);
      v868 = 0;
      uint64_t v870 = 0;
      v869 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v868, v586, (uint64_t)v585, (v585 - v586) >> 2);
      if (v586) {
        operator delete(v586);
      }
      int32x4_t v599 = vdupq_n_s32(v798);
      if (v785)
      {
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1E6599AF0;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&off_1E6599B00;
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = xmmword_1E6599B10;
        long long v898 = *(_OWORD *)&off_1E6599B20;
        long long v923 = xmmword_1C95E0EA0;
        int32x4_t v924 = v599;
        unsigned int v915 = (*((void *)&v830 + 1) - (void)v495)
             / 40
             / (0xCCCCCCCCCCCCCCCDLL
              * ((uint64_t)(*((void *)&v791 + 1) - v791) >> 2))
             * -858993459
             * ((uint64_t)(*((void *)&v791 + 1) - v791) >> 2);
        unsigned int v916 = v915;
        int v917 = 5;
        unsigned int v918 = v915;
        int v919 = 10;
        unsigned int v920 = v915;
        int v921 = 5;
        v922.i32[0] = v915;
        uint64_t v908 = 0x100000001;
        unsigned int v909 = v915;
        int v910 = 1;
        unsigned int v911 = v915;
        int v912 = 1;
        unsigned int v913 = v915;
        LODWORD(v914) = 1;
        long long v906 = xmmword_1C95E1524;
        v907[0] = unk_1C95E1534;
        *(void *)&long long v600 = -1;
        *((void *)&v600 + 1) = -1;
        long long v904 = v600;
        v905[0] = v600;
        long long v902 = xmmword_1C95E1544;
        v903[0] = unk_1C95E1554;
      }
      else
      {
        *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = xmmword_1E6599B50;
        long long v898 = *(_OWORD *)&off_1E6599B60;
        long long v899 = xmmword_1E6599B70;
        *(void *)&long long v900 = "cxt_text_lfeats";
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1E6599B30;
        *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&off_1E6599B40;
        long long v923 = xmmword_1C95E0EA0;
        int32x4_t v924 = v599;
        uint64_t v925 = 0x1900000005;
        int v926 = 25;
        unsigned int v915 = (*((void *)&v830 + 1) - (void)v495)
             / 40
             / (0xCCCCCCCCCCCCCCCDLL
              * ((uint64_t)(*((void *)&v791 + 1) - v791) >> 2))
             * -858993459
             * ((uint64_t)(*((void *)&v791 + 1) - v791) >> 2);
        unsigned int v916 = v915;
        int v917 = 5;
        unsigned int v918 = v915;
        int v919 = 10;
        unsigned int v920 = v915;
        int v921 = 5;
        int32x4_t v922 = vdupq_n_s32(v915);
        uint64_t v908 = 0x100000001;
        unsigned int v909 = v915;
        int v910 = 1;
        unsigned int v911 = v915;
        int v912 = 1;
        unsigned int v913 = v915;
        *(void *)&long long v601 = 0x100000001;
        *((void *)&v601 + 1) = 0x100000001;
        long long v914 = v601;
        long long v906 = xmmword_1C95E1564;
        v907[0] = unk_1C95E1574;
        *(_OWORD *)((char *)v907 + 12) = unk_1C95E1580;
        *(void *)&long long v601 = -1;
        *((void *)&v601 + 1) = -1;
        *(_OWORD *)((char *)v905 + 12) = v601;
        long long v904 = v601;
        v905[0] = v601;
        long long v902 = xmmword_1C95E1590;
        v903[0] = unk_1C95E15A0;
        *(_OWORD *)((char *)v903 + 12) = unk_1C95E15AC;
      }
      if (espresso_network_change_input_blob_shapes_seq_rank())
      {
        v779 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1CB7869E0](v779, "Failed to reshape input blobs");
        __cxa_throw(v779, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      std::string::basic_string[abi:ne180100]<0>(buf, "lfeats");
      uint64_t v602 = a2 + 232;
      marrs::inference_engine::EspressoModule::setInput(a2 + 232, (uint64_t)buf, (uint64_t)v927);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "dif_lfeats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v893);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "cxt_lfeats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v895);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "cxt_cats");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v891);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "obj_cat_emb");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v889);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "input_labels");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v885);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "embedded_labels");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v883);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "pooled_output");
      marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v867);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if ((v785 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "tfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v879);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "cxt_tfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v875);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "cxt_text_lfeats");
        marrs::inference_engine::EspressoModule::setInput(v602, (uint64_t)buf, (uint64_t)&v871);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      std::string::basic_string[abi:ne180100]<0>(&v923, "scores");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)buf, v602);
      if (v924.i8[7] < 0) {
        operator delete((void *)v923);
      }
      marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2 + 240));
      v847 = 0;
      uint64_t v848 = 0;
      uint64_t v849 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v847, buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_, (uint64_t)(buf[1].__r_.__value_.__l.__size_ - buf[1].__r_.__value_.__r.__words[0]) >> 2);
      if (buf[1].__r_.__value_.__r.__words[0])
      {
        buf[1].__r_.__value_.__l.__size_ = buf[1].__r_.__value_.__r.__words[0];
        operator delete(buf[1].__r_.__value_.__l.__data_);
      }
      if (buf[0].__r_.__value_.__r.__words[0])
      {
        buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (v868)
      {
        v869 = v868;
        operator delete(v868);
      }
      if (v867.__r_.__value_.__r.__words[0])
      {
        v867.__r_.__value_.__l.__size_ = v867.__r_.__value_.__r.__words[0];
        operator delete(v867.__r_.__value_.__l.__data_);
      }
      if (v872)
      {
        v873 = v872;
        operator delete(v872);
      }
      if (v871.__r_.__value_.__r.__words[0])
      {
        v871.__r_.__value_.__l.__size_ = v871.__r_.__value_.__r.__words[0];
        operator delete(v871.__r_.__value_.__l.__data_);
      }
      if (v876)
      {
        v877 = v876;
        operator delete(v876);
      }
      if (v875.__r_.__value_.__r.__words[0])
      {
        v875.__r_.__value_.__l.__size_ = v875.__r_.__value_.__r.__words[0];
        operator delete(v875.__r_.__value_.__l.__data_);
      }
      if (v880)
      {
        v881 = v880;
        operator delete(v880);
      }
      if (v879.__r_.__value_.__r.__words[0])
      {
        v879.__r_.__value_.__l.__size_ = v879.__r_.__value_.__r.__words[0];
        operator delete(v879.__r_.__value_.__l.__data_);
      }
      if (v884[0]) {
        operator delete(v884[0]);
      }
      if (v883.__r_.__value_.__r.__words[0]) {
        operator delete(v883.__r_.__value_.__l.__data_);
      }
      if (v888[0]) {
        operator delete(v888[0]);
      }
      if (v885) {
        operator delete(v885);
      }
      if (v890[0]) {
        operator delete(v890[0]);
      }
      if (v889.__r_.__value_.__r.__words[0]) {
        operator delete(v889.__r_.__value_.__l.__data_);
      }
      if (v892[0]) {
        operator delete(v892[0]);
      }
      if (v891.__r_.__value_.__r.__words[0]) {
        operator delete(v891.__r_.__value_.__l.__data_);
      }
      if (v896[0]) {
        operator delete(v896[0]);
      }
      if (v895.__r_.__value_.__r.__words[0]) {
        operator delete(v895.__r_.__value_.__l.__data_);
      }
      if (v894.__r_.__value_.__r.__words[0]) {
        operator delete(v894.__r_.__value_.__l.__data_);
      }
      if (v893.__r_.__value_.__r.__words[0]) {
        operator delete(v893.__r_.__value_.__l.__data_);
      }
      if (*(void *)&v927[24]) {
        operator delete(*(void **)&v927[24]);
      }
      if (*(void *)v927) {
        operator delete(*(void **)v927);
      }
      v603.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v604 = MRRLoggerForCategory(3);
      if (v782 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v605 = v604;
        if (os_signpost_enabled(v604))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v605, OS_SIGNPOST_INTERVAL_END, spid, "MRModelInference", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
        }
      }
      v606 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v606, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v606, OS_LOG_TYPE_INFO, "END \"MRModelInference\"", (uint8_t *)buf, 2u);
      }
      v607 = MRRLoggerForCategory(3);
      os_signpost_id_t v608 = os_signpost_id_generate(v607);
      v609 = MRRLoggerForCategory(3);
      if (v608 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v610 = v609;
        if (os_signpost_enabled(v609))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9555000, v610, OS_SIGNPOST_INTERVAL_BEGIN, v608, "MRModelPostProcessing", "", (uint8_t *)buf, 2u);
        }
      }
      v611 = MRRLoggerForCategory(0);
      if (os_log_type_enabled(v611, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v611, OS_LOG_TYPE_INFO, "BEGIN \"MRModelPostProcessing\"", (uint8_t *)buf, 2u);
      }
      v612.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v613 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v613, OS_LOG_TYPE_DEBUG))
      {
        double v614 = *(float *)(a2 + 56);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v614;
        _os_log_impl(&dword_1C9555000, v613, OS_LOG_TYPE_DEBUG, "absolute threshold - %f", (uint8_t *)buf, 0xCu);
      }
      v615 = MRRLoggerForCategory(2);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v603.__d_.__rep_;
      unint64_t v801 = v608 - 1;
      os_signpost_id_t spida = v608;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v786 = v612.__d_.__rep_;
      if (os_log_type_enabled(v615, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v616 = a4[1] - *a4;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v616;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x84BDA12F684BDA13
                                                                                      * ((v855.i64[1] - v855.i64[0]) >> 3);
        _os_log_impl(&dword_1C9555000, v615, OS_LOG_TYPE_DEBUG, "number of mentions - %zu, number of entities - %lu", (uint8_t *)buf, 0x16u);
      }
      v618 = *a4;
      v617 = a4[1];
      uint64_t v619 = v617 - *a4;
      uint64_t v827 = v855.i64[1];
      uint64_t v812 = v855.i64[0];
      unint64_t v620 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
      float v621 = *(float *)(a2 + 56);
      v887 = 0;
      v885 = 0;
      v886 = 0;
      uint64_t v807 = v619;
      if (v620 * v619 <= (v848 - (uint64_t)v847) >> 2 && v617 != v618)
      {
        std::string::size_type v622 = 0;
        while (v827 == v812)
        {
          uint64_t v630 = 0;
          v625 = 0;
LABEL_915:
          v637 = v886;
          if (v886 >= v887)
          {
            unint64_t v639 = 0xAAAAAAAAAAAAAAABLL * ((v886 - (unsigned char *)v885) >> 3);
            unint64_t v640 = v639 + 1;
            if (v639 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v887 - (unsigned char *)v885) >> 3) > v640) {
              unint64_t v640 = 0x5555555555555556 * ((v887 - (unsigned char *)v885) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v887 - (unsigned char *)v885) >> 3) >= 0x555555555555555) {
              unint64_t v641 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v641 = v640;
            }
            buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v887;
            v495 = (char *)v830;
            if (v641) {
              unint64_t v641 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v641);
            }
            else {
              uint64_t v642 = 0;
            }
            v643 = (void *)(v641 + 24 * v639);
            buf[0].__r_.__value_.__r.__words[0] = v641;
            buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v643;
            buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v643;
            buf[1].__r_.__value_.__r.__words[0] = v641 + 24 * v642;
            void *v643 = 0;
            v643[1] = 0;
            v643[2] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v643, v625, v630, (v630 - (uint64_t)v625) >> 3);
            buf[0].__r_.__value_.__r.__words[2] += 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v885, buf);
            v638 = v886;
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(void *)v886 = 0;
            *((void *)v637 + 1) = 0;
            *((void *)v637 + 2) = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v637, v625, v630, (v630 - (uint64_t)v625) >> 3);
            v638 = v637 + 24;
            v495 = (char *)v830;
          }
          v886 = v638;
          if (v625) {
            operator delete(v625);
          }
          if (++v622 == v807) {
            goto LABEL_930;
          }
        }
        unint64_t v623 = 0;
        v624 = 0;
        v625 = 0;
        std::string::size_type v626 = 0;
        unint64_t v627 = v620 * v622;
        while (1)
        {
          if (v626 + v627 >= (v848 - (uint64_t)v847) >> 2) {
            std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
          }
          float v628 = *((float *)v847 + v626 + v627);
          v629 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v629, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218496;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v622;
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v626;
            HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
            *(double *)&buf[1].__r_.__value_.__l.__data_ = v628;
            _os_log_impl(&dword_1C9555000, v629, OS_LOG_TYPE_DEBUG, "Develop: mention index - %lu, entity index - %lu, score - %f", (uint8_t *)buf, 0x20u);
          }
          if (v628 >= v621)
          {
            if ((unint64_t)v624 >= v623)
            {
              uint64_t v631 = v624 - v625;
              unint64_t v632 = v631 + 1;
              if ((unint64_t)(v631 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v623 - (void)v625) >> 2 > v632) {
                unint64_t v632 = (uint64_t)(v623 - (void)v625) >> 2;
              }
              if (v623 - (unint64_t)v625 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v633 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v633 = v632;
              }
              if (v633) {
                unint64_t v633 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v633);
              }
              else {
                uint64_t v634 = 0;
              }
              v635 = (std::string::size_type *)(v633 + 8 * v631);
              std::string::size_type *v635 = v626;
              uint64_t v630 = (uint64_t)(v635 + 1);
              while (v624 != v625)
              {
                std::string::size_type v636 = *--v624;
                *--v635 = v636;
              }
              unint64_t v623 = v633 + 8 * v634;
              if (v625) {
                operator delete(v625);
              }
              v625 = v635;
              goto LABEL_912;
            }
            *v624++ = v626;
          }
          uint64_t v630 = (uint64_t)v624;
LABEL_912:
          ++v626;
          v624 = (std::string::size_type *)v630;
          if (v626 == v620) {
            goto LABEL_915;
          }
        }
      }
LABEL_930:
      if (*(_DWORD *)v857 == 3)
      {
        memset(&v883, 0, sizeof(v883));
        v644 = MRRLoggerForCategory(2);
        v645 = v797;
        if (os_log_type_enabled(v644, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C9555000, v644, OS_LOG_TYPE_INFO, "Orchestrating between CSM and CSM+MR results", (uint8_t *)buf, 2u);
        }
        if ((char *)a4[1] - (char *)*a4 != 8 || *v797 == v797[1])
        {
          v707 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v707, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            v708 = "Resolved CSM span list size is not one or CSMSpan group is empty. Skipping orchestration and return o"
                   "riginal CSM results";
LABEL_1052:
            _os_log_impl(&dword_1C9555000, v707, OS_LOG_TYPE_DEBUG, v708, (uint8_t *)buf, 2u);
          }
        }
        else
        {
          if (sirinluinternal::MatchingSpan::operator==())
          {
            if (a4[1] == *a4) {
              goto LABEL_1054;
            }
            unint64_t v646 = 0;
            while (1)
            {
              v808 = (char *)v885;
              unint64_t v828 = v646;
              if (0xAAAAAAAAAAAAAAABLL * ((v886 - (unsigned char *)v885) >> 3) <= v646) {
                std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
              }
              *(_OWORD *)&v889.__r_.__value_.__r.__words[1] = 0uLL;
              v889.__r_.__value_.__r.__words[0] = (std::string::size_type)&v889.__r_.__value_.__l.__size_;
              uint64_t v647 = *v797;
              uint64_t v648 = v797[1];
              if (*v797 == v648) {
                goto LABEL_995;
              }
              do
              {
                long long v928 = 0u;
                memset(v927, 0, sizeof(v927));
                uint64_t v649 = *(void *)(v647 + 64);
                if (!v649)
                {
LABEL_961:
                  buf[0].__r_.__value_.__s.__data_[0] = 0;
                  LOBYTE(v898) = 0;
                  goto LABEL_962;
                }
                v650 = *(uint64_t **)(v649 + 56);
                v651 = *(uint64_t **)(v649 + 64);
                while (1)
                {
                  if (v650 == v651)
                  {
                    v659 = MRRLoggerForCategory(2);
                    if (os_log_type_enabled(v659, OS_LOG_TYPE_ERROR))
                    {
                      marrs::mrr::MRRCPPPrintUtils::getUsoGraphDotString((marrs::mrr::MRRCPPPrintUtils *)&v893, *(const sirinluexternal::UsoGraph **)(v647 + 64));
                      v660 = (v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &v893
                           : (std::string *)v893.__r_.__value_.__r.__words[0];
                      LODWORD(v895.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v895.__r_.__value_.__r.__words + 4) = (std::string::size_type)v660;
                      _os_log_impl(&dword_1C9555000, v659, OS_LOG_TYPE_ERROR, "CSM USOIdentifier does not contain item_id. CSM Span USO is %s", (uint8_t *)&v895, 0xCu);
                      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v893.__r_.__value_.__l.__data_);
                      }
                    }
                    goto LABEL_961;
                  }
                  uint64_t v652 = *v650;
                  uint64_t v653 = *(void *)(*v650 + 16);
                  if (v653)
                  {
                    v654 = *(uint64_t **)(v653 + 8);
                    if (v654)
                    {
                      int v655 = *((char *)v654 + 23);
                      if (v655 < 0)
                      {
                        if (v654[1] != 7) {
                          goto LABEL_954;
                        }
                        v654 = (uint64_t *)*v654;
                      }
                      else if (v655 != 7)
                      {
                        goto LABEL_954;
                      }
                      int v656 = *(_DWORD *)v654;
                      int v657 = *(_DWORD *)((char *)v654 + 3);
                      BOOL v658 = v656 == 1835365481 && v657 == 1684627309;
                      if (v658) {
                        break;
                      }
                    }
                  }
LABEL_954:
                  ++v650;
                }
                memset(&v895, 0, sizeof(v895));
                memset(&v891, 0, sizeof(v891));
                v661 = *(const std::string **)(v652 + 32);
                if (v661) {
                  std::string::operator=(&v895, v661);
                }
                v662 = *(const std::string **)(v652 + 8);
                if (v662) {
                  std::string::operator=(&v891, v662);
                }
                if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v893, v895.__r_.__value_.__l.__data_, v895.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v893 = v895;
                }
                if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v894, v891.__r_.__value_.__l.__data_, v891.__r_.__value_.__l.__size_);
                  buf[0] = v893;
                  buf[1] = v894;
                  LOBYTE(v898) = 1;
                  if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v891.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  std::string v894 = v891;
                  buf[0] = v893;
                  buf[1] = v891;
                  LOBYTE(v898) = 1;
                }
                if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v895.__r_.__value_.__l.__data_);
                }
                if ((_BYTE)v898)
                {
                  std::string::size_type v663 = v889.__r_.__value_.__l.__size_;
                  p_std::string::size_type size = &v889.__r_.__value_.__l.__size_;
                  v665 = &v889.__r_.__value_.__l.__size_;
                  if (v889.__r_.__value_.__l.__size_)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        p_std::string::size_type size = (std::string::size_type *)v663;
                        v666 = (const void **)(v663 + 32);
                        if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)&buf[0].__r_.__value_.__l.__data_, (const void **)(v663 + 32)))break; {
                        std::string::size_type v663 = *p_size;
                        }
                        v665 = p_size;
                        if (!*p_size) {
                          goto LABEL_984;
                        }
                      }
                      if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v666, (const void **)&buf[0].__r_.__value_.__l.__data_))break; {
                      v665 = p_size + 1;
                      }
                      std::string::size_type v663 = p_size[1];
                      if (!v663) {
                        goto LABEL_984;
                      }
                    }
                    v668 = p_size;
                  }
                  else
                  {
LABEL_984:
                    v667 = (char *)operator new(0x68uLL);
                    v668 = (std::string::size_type *)v667;
                    *(void *)v927 = v667;
                    *(void *)&v927[8] = &v889.__r_.__value_.__l.__size_;
                    v927[16] = 0;
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external((std::string *)(v667 + 32), buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
                    }
                    else {
                      *(std::string *)(v667 + 32) = buf[0];
                    }
                    v669 = (std::string *)(v668 + 7);
                    if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external(v669, buf[1].__r_.__value_.__l.__data_, buf[1].__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      *(_OWORD *)&v669->__r_.__value_.__l.__data_ = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
                      v668[9] = buf[1].__r_.__value_.__r.__words[2];
                    }
                    v668[11] = 0;
                    v668[12] = 0;
                    v668[10] = 0;
                    v927[16] = 1;
                    std::string::size_type *v668 = 0;
                    v668[1] = 0;
                    v668[2] = (std::string::size_type)p_size;
                    std::string::size_type *v665 = (std::string::size_type)v668;
                    v670 = (uint64_t *)v668;
                    if (*(void *)v889.__r_.__value_.__l.__data_)
                    {
                      v889.__r_.__value_.__r.__words[0] = *(void *)v889.__r_.__value_.__l.__data_;
                      v670 = (uint64_t *)*v665;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v889.__r_.__value_.__l.__size_, v670);
                    ++v889.__r_.__value_.__r.__words[2];
                    *(void *)v927 = 0;
                    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>>>>::reset[abi:ne180100]((uint64_t)v927);
                  }
                  std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((uint64_t *)v668 + 10, v647);
                }
LABEL_962:
                std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
                v647 += 88;
              }
              while (v647 != v648);
LABEL_995:
              v671 = &v808[24 * v828];
              v672 = *(void **)v671;
              v673 = (void *)*((void *)v671 + 1);
              if (*(void **)v671 == v673) {
                goto LABEL_1022;
              }
              char v674 = 0;
              v805 = (float *)v847;
              unint64_t v809 = (v848 - (uint64_t)v847) >> 2;
              do
              {
                if (0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3) <= *v672) {
                  std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v675 = v855.i64[0] + 216 * *v672;
                v676 = (const std::string::value_type **)(v675 + 56);
                if (*(char *)(v675 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(buf, *v676, *(void *)(v675 + 64));
                }
                else
                {
                  long long v677 = *(_OWORD *)v676;
                  buf[0].__r_.__value_.__r.__words[2] = *(void *)(v675 + 72);
                  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v677;
                }
                v678 = (const std::string::value_type **)(v675 + 32);
                if (*(char *)(v675 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(&buf[1], *v678, *(void *)(v675 + 40));
                }
                else
                {
                  long long v679 = *(_OWORD *)v678;
                  buf[1].__r_.__value_.__r.__words[2] = *(void *)(v675 + 48);
                  *(_OWORD *)&buf[1].__r_.__value_.__l.__data_ = v679;
                }
                std::string::size_type v680 = v889.__r_.__value_.__l.__size_;
                if (v889.__r_.__value_.__l.__size_)
                {
                  v681 = (std::string *)&v889.__r_.__value_.__r.__words[1];
                  do
                  {
                    v682 = v681;
                    std::string::size_type v683 = v680 + 32;
                    int v684 = std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)(v680 + 32), (const void **)&buf[0].__r_.__value_.__l.__data_);
                    v685 = (std::string::size_type *)(v680 + 8);
                    if (!v684)
                    {
                      v685 = (std::string::size_type *)v680;
                      v681 = (std::string *)v680;
                    }
                    std::string::size_type v680 = *v685;
                  }
                  while (*v685);
                  if (v681 != (std::string *)&v889.__r_.__value_.__r.__words[1])
                  {
                    v686 = v684 ? (const void **)&v682[1].__r_.__value_.__r.__words[1] : (const void **)v683;
                    if ((std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100]((const void **)&buf[0].__r_.__value_.__l.__data_, v686) & 1) == 0)
                    {
                      unint64_t v687 = *v672 - 0x7B425ED097B425EDLL * ((v855.i64[1] - v855.i64[0]) >> 3) * v828;
                      if (v809 <= v687) {
                        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
                      }
                      marrs::mrr::mr::addCSMSpansToMatchingResult(v681[3].__r_.__value_.__l.__size_, v681[3].__r_.__value_.__r.__words[2], (uint64_t *)&v883, v805[v687]);
                      char v674 = 1;
                    }
                  }
                }
                if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[1].__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                ++v672;
              }
              while (v672 != v673);
              if ((v674 & 1) == 0) {
LABEL_1022:
              }
                marrs::mrr::mr::addCSMSpansToMatchingResult(*v797, v797[1], (uint64_t *)&v883, 1.0);
              std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy((void *)v889.__r_.__value_.__l.__size_);
              v495 = (char *)v830;
              unint64_t v646 = v828 + 1;
              if (v828 + 1 >= a4[1] - *a4)
              {
LABEL_1054:
                std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)&v860.__r_.__value_.__l.__data_);
                std::string v860 = v883;
                memset(&v883, 0, sizeof(v883));
                buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v883;
                std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                goto LABEL_1055;
              }
            }
          }
          v645 = v797;
          v707 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v707, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            v708 = "Resolved CSM span and span group does not match. Skipping orchestration and return original CSM results";
            goto LABEL_1052;
          }
        }
        marrs::mrr::mr::addCSMSpansToMatchingResult(*v645, v645[1], (uint64_t *)&v883, 1.0);
        goto LABEL_1054;
      }
      memset(&v893, 0, sizeof(v893));
      v688 = operator new(4uLL);
      _DWORD *v688 = 0;
      *(void *)&v927[8] = v688 + 1;
      *(void *)&v927[16] = v688 + 1;
      *(void *)v927 = v688;
      v690 = *a4;
      v689 = a4[1];
      if (v689 == *a4) {
        goto LABEL_1048;
      }
      std::string::size_type v691 = 0;
      unint64_t v692 = 0;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v886 - (unsigned char *)v885) >> 3) <= v692) {
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        }
        v693 = (char *)v885 + 24 * v692;
        v694 = *(unint64_t **)v693;
        v695 = (unint64_t *)*((void *)v693 + 1);
        if (*(unint64_t **)v693 != v695)
        {
          do
          {
            unint64_t v696 = *v694;
            unint64_t v697 = 0x84BDA12F684BDA13 * ((v855.i64[1] - v855.i64[0]) >> 3);
            if (v697 <= *v694) {
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v698 = v696 + v697 * v692;
            if (v698 >= (v848 - (uint64_t)v847) >> 2) {
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            }
            v699 = *a4;
            if (v692 >= a4[1] - *a4) {
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            }
            v700 = (marrs::mrr::mr::MRREntity *)(v855.i64[0] + 216 * v696);
            float v701 = *((float *)v847 + v698);
            uint64_t v702 = v699[v692];
            if (v691 >= v893.__r_.__value_.__r.__words[2])
            {
              unint64_t v703 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v691 - v893.__r_.__value_.__r.__words[0]) >> 3);
              unint64_t v704 = v703 + 1;
              if (v703 + 1 > 0xBE82FA0BE82FA0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5F417D05F417D06
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v704)
                unint64_t v704 = 0x5F417D05F417D06
                     * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
              if (0x82FA0BE82FA0BE83
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                unint64_t v705 = 0xBE82FA0BE82FA0;
              else {
                unint64_t v705 = v704;
              }
              buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
              if (v705) {
                unint64_t v705 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v705);
              }
              else {
                uint64_t v706 = 0;
              }
              buf[0].__r_.__value_.__r.__words[0] = v705;
              buf[0].__r_.__value_.__l.__size_ = v705 + 344 * v703;
              buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
              buf[1].__r_.__value_.__r.__words[0] = v705 + 344 * v706;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(buf[0].__r_.__value_.__l.__size_, v702, v700, (uint64_t)v927, v701);
              buf[0].__r_.__value_.__r.__words[2] += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v893, buf);
              std::string::size_type v691 = v893.__r_.__value_.__l.__size_;
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(v691, v699[v692], v700, (uint64_t)v927, *((float *)v847 + v698));
              v691 += 344;
            }
            v893.__r_.__value_.__l.__size_ = v691;
            ++v694;
          }
          while (v694 != v695);
          v690 = *a4;
          v689 = a4[1];
        }
        ++v692;
      }
      while (v692 < v689 - v690);
      v688 = *(_DWORD **)v927;
      if (*(void *)v927) {
LABEL_1048:
      }
        operator delete(v688);
      std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate((void **)&v860.__r_.__value_.__l.__data_);
      std::string v860 = v893;
      memset(&v893, 0, sizeof(v893));
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v495 = (char *)v830;
LABEL_1055:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v709 = *a4;
      v815 = a4[1];
      if (v709 == v815)
      {
        unint64_t v744 = 0;
        uint64_t v743 = 0;
LABEL_1124:
        unint64_t v745 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * ((uint64_t)(v744 - v743) >> 3));
        if (v744 == v743) {
          uint64_t v746 = 0;
        }
        else {
          uint64_t v746 = v745;
        }
        std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v743, v744, v746, 1);
        v747.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v748 = MRRLoggerForCategory(3);
        if (v801 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v749 = v748;
          if (os_signpost_enabled(v748))
          {
            LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1C9555000, v749, OS_SIGNPOST_INTERVAL_END, spida, "MRModelPostProcessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
          }
        }
        v750 = MRRLoggerForCategory(0);
        if (os_log_type_enabled(v750, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C9555000, v750, OS_LOG_TYPE_INFO, "END \"MRModelPostProcessing\"", (uint8_t *)buf, 2u);
        }
        std::to_string(&v875, (v781.__d_.__rep_ - v792.__d_.__rep_) / 1000000);
        v751 = std::string::insert(&v875, 0, "[MARRS] Visual Mention Resolver Measurements:\n      Pre-processing ");
        long long v752 = *(_OWORD *)&v751->__r_.__value_.__l.__data_;
        v879.__r_.__value_.__r.__words[2] = v751->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v879.__r_.__value_.__l.__data_ = v752;
        v751->__r_.__value_.__l.__size_ = 0;
        v751->__r_.__value_.__r.__words[2] = 0;
        v751->__r_.__value_.__r.__words[0] = 0;
        v753 = std::string::append(&v879, " ms\n");
        long long v754 = *(_OWORD *)&v753->__r_.__value_.__l.__data_;
        v883.__r_.__value_.__r.__words[2] = v753->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v883.__r_.__value_.__l.__data_ = v754;
        v753->__r_.__value_.__l.__size_ = 0;
        v753->__r_.__value_.__r.__words[2] = 0;
        v753->__r_.__value_.__r.__words[0] = 0;
        v755 = std::string::append(&v883, "      Inference: ");
        long long v756 = *(_OWORD *)&v755->__r_.__value_.__l.__data_;
        v889.__r_.__value_.__r.__words[2] = v755->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v889.__r_.__value_.__l.__data_ = v756;
        v755->__r_.__value_.__l.__size_ = 0;
        v755->__r_.__value_.__r.__words[2] = 0;
        v755->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v871, (rep - v780.__d_.__rep_) / 1000000);
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v757 = &v871;
        }
        else {
          v757 = (std::string *)v871.__r_.__value_.__r.__words[0];
        }
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v758 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v758 = v871.__r_.__value_.__l.__size_;
        }
        v759 = std::string::append(&v889, (const std::string::value_type *)v757, v758);
        long long v760 = *(_OWORD *)&v759->__r_.__value_.__l.__data_;
        v891.__r_.__value_.__r.__words[2] = v759->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v891.__r_.__value_.__l.__data_ = v760;
        v759->__r_.__value_.__l.__size_ = 0;
        v759->__r_.__value_.__r.__words[2] = 0;
        v759->__r_.__value_.__r.__words[0] = 0;
        v761 = std::string::append(&v891, " ms\n");
        long long v762 = *(_OWORD *)&v761->__r_.__value_.__l.__data_;
        v895.__r_.__value_.__r.__words[2] = v761->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v895.__r_.__value_.__l.__data_ = v762;
        v761->__r_.__value_.__l.__size_ = 0;
        v761->__r_.__value_.__r.__words[2] = 0;
        v761->__r_.__value_.__r.__words[0] = 0;
        v763 = std::string::append(&v895, "      Post-processing: ");
        long long v764 = *(_OWORD *)&v763->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v763->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v764;
        v763->__r_.__value_.__l.__size_ = 0;
        v763->__r_.__value_.__r.__words[2] = 0;
        v763->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v867, (v747.__d_.__rep_ - v786) / 1000000);
        if ((v867.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v765 = &v867;
        }
        else {
          v765 = (std::string *)v867.__r_.__value_.__r.__words[0];
        }
        if ((v867.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v766 = HIBYTE(v867.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v766 = v867.__r_.__value_.__l.__size_;
        }
        v767 = std::string::append(&v893, (const std::string::value_type *)v765, v766);
        long long v768 = *(_OWORD *)&v767->__r_.__value_.__l.__data_;
        *(void *)&v927[16] = *((void *)&v767->__r_.__value_.__l + 2);
        *(_OWORD *)v927 = v768;
        v767->__r_.__value_.__l.__size_ = 0;
        v767->__r_.__value_.__r.__words[2] = 0;
        v767->__r_.__value_.__r.__words[0] = 0;
        v769 = std::string::append((std::string *)v927, " ms\n");
        long long v770 = *(_OWORD *)&v769->__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[2] = v769->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v770;
        v769->__r_.__value_.__l.__size_ = 0;
        v769->__r_.__value_.__r.__words[2] = 0;
        v769->__r_.__value_.__r.__words[0] = 0;
        if ((v927[23] & 0x80000000) != 0) {
          operator delete(*(void **)v927);
        }
        if (SHIBYTE(v867.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v867.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v893.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v895.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v895.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v891.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v891.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v871.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v889.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v883.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v883.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v879.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v879.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        v771 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v771, OS_LOG_TYPE_DEBUG))
        {
          v772 = buf;
          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v772 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v927 = 136315138;
          *(void *)&v927[4] = v772;
          _os_log_impl(&dword_1C9555000, v771, OS_LOG_TYPE_DEBUG, "%s", v927, 0xCu);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v885;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (v847) {
          operator delete(v847);
        }
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v850;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if ((void)v789) {
          operator delete((void *)v789);
        }
        if ((void)v787) {
          operator delete((void *)v787);
        }
        if ((void)v788) {
          operator delete((void *)v788);
        }
        *(void *)v927 = &v852;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        if (v495) {
          operator delete(v495);
        }
        *(void *)v927 = &v853;
        std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        *(void *)v927 = &v854;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        if ((void)v795) {
          operator delete((void *)v795);
        }
        if ((void)v790) {
          operator delete((void *)v790);
        }
        if ((void)v791) {
          operator delete((void *)v791);
        }
LABEL_1186:
        *(void *)v927 = &v855;
        std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
        int v16 = v857;
        if (!v857) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
LABEL_1056:
      uint64_t v710 = *v709;
      memset(&v893, 0, sizeof(v893));
      std::string::size_type v711 = v860.__r_.__value_.__l.__size_;
      uint64_t v712 = v860.__r_.__value_.__r.__words[0];
      if (v860.__r_.__value_.__r.__words[0] == v860.__r_.__value_.__l.__size_)
      {
        v713 = 0;
      }
      else
      {
        v713 = 0;
        do
        {
          if (*(_DWORD *)(v712 + 76) == *(_DWORD *)(v710 + 76) && *(_DWORD *)(v712 + 72) == *(_DWORD *)(v710 + 72))
          {
            if ((unint64_t)v713 >= v893.__r_.__value_.__r.__words[2])
            {
              unint64_t v714 = 0x82FA0BE82FA0BE83 * ((uint64_t)((uint64_t)v713 - v893.__r_.__value_.__r.__words[0]) >> 3);
              unint64_t v715 = v714 + 1;
              if (v714 + 1 > 0xBE82FA0BE82FA0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5F417D05F417D06
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) > v715)
                unint64_t v715 = 0x5F417D05F417D06
                     * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3);
              if (0x82FA0BE82FA0BE83
                 * ((uint64_t)(v893.__r_.__value_.__r.__words[2] - v893.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                unint64_t v716 = 0xBE82FA0BE82FA0;
              else {
                unint64_t v716 = v715;
              }
              buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v893.__r_.__value_.__r.__words[2];
              if (v716) {
                unint64_t v716 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v716);
              }
              else {
                uint64_t v717 = 0;
              }
              buf[0].__r_.__value_.__r.__words[0] = v716;
              buf[0].__r_.__value_.__l.__size_ = v716 + 344 * v714;
              buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
              buf[1].__r_.__value_.__r.__words[0] = v716 + 344 * v717;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((void *)buf[0].__r_.__value_.__l.__size_, v712);
              buf[0].__r_.__value_.__r.__words[2] += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v893, buf);
              v713 = (void *)v893.__r_.__value_.__l.__size_;
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v713, v712);
              v713 += 43;
            }
            v893.__r_.__value_.__l.__size_ = (std::string::size_type)v713;
          }
          v712 += 344;
        }
        while (v712 != v711);
      }
      if (fabsf(*(float *)(a2 + 152)) < 0.0001)
      {
        memset(&v895, 0, sizeof(v895));
        std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)&v895, (uint64_t)v893.__r_.__value_.__l.__data_, (uint64_t)v713, 0x82FA0BE82FA0BE83 * ((uint64_t)((uint64_t)v713 - v893.__r_.__value_.__r.__words[0]) >> 3));
        goto LABEL_1121;
      }
      *(_OWORD *)&v927[8] = 0uLL;
      *(void *)v927 = &v927[8];
      std::string::size_type v718 = v893.__r_.__value_.__r.__words[0];
      if (v893.__r_.__value_.__l.__data_ == (std::string::pointer)v713)
      {
        memset(&v895, 0, sizeof(v895));
        goto LABEL_1120;
      }
      for (uint64_t m = 0; ; uint64_t m = *(void *)&v927[8])
      {
        int v720 = *(_DWORD *)(v718 + 96);
        if (!m) {
          break;
        }
        v721 = (uint64_t *)&v927[8];
        do
        {
          v722 = (uint64_t *)m;
          v723 = v721;
          int v724 = *(_DWORD *)(m + 28);
          v725 = (uint64_t *)(m + 8);
          if (v724 >= v720)
          {
            v725 = v722;
            v721 = v722;
          }
          uint64_t m = *v725;
        }
        while (m);
        if (v721 == (uint64_t *)&v927[8]) {
          break;
        }
        v726 = v724 >= v720 ? v722 : v723;
        if (v720 < *((_DWORD *)v726 + 7)) {
          break;
        }
        v729 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, v720, (_DWORD *)(v718 + 96));
        float v727 = *(float *)(v718 + 88);
        if (*((float *)v729 + 8) < v727)
        {
          v728 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, *(_DWORD *)(v718 + 96), (_DWORD *)(v718 + 96));
          goto LABEL_1091;
        }
LABEL_1092:
        v718 += 344;
        if ((void *)v718 == v713)
        {
          std::string::size_type v731 = v893.__r_.__value_.__l.__size_;
          uint64_t v730 = v893.__r_.__value_.__r.__words[0];
          memset(&v895, 0, sizeof(v895));
          while (v730 != v731)
          {
            float v732 = *((float *)std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, *(_DWORD *)(v730 + 96), (_DWORD *)(v730 + 96))+ 8);
            if (vabds_f32(v732, *(float *)(v730 + 88)) <= *(float *)(a2 + 152))
            {
              std::string::size_type v737 = v895.__r_.__value_.__l.__size_;
              if (v895.__r_.__value_.__l.__size_ >= v895.__r_.__value_.__r.__words[2])
              {
                unint64_t v739 = 0x82FA0BE82FA0BE83
                     * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v740 = v739 + 1;
                if (v739 + 1 > 0xBE82FA0BE82FA0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5F417D05F417D06
                   * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) > v740)
                  unint64_t v740 = 0x5F417D05F417D06
                       * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3);
                if (0x82FA0BE82FA0BE83
                   * ((uint64_t)(v895.__r_.__value_.__r.__words[2] - v895.__r_.__value_.__r.__words[0]) >> 3) >= 0x5F417D05F417D0)
                  unint64_t v741 = 0xBE82FA0BE82FA0;
                else {
                  unint64_t v741 = v740;
                }
                buf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v895.__r_.__value_.__r.__words[2];
                if (v741) {
                  unint64_t v741 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v741);
                }
                else {
                  uint64_t v742 = 0;
                }
                buf[0].__r_.__value_.__r.__words[0] = v741;
                buf[0].__r_.__value_.__l.__size_ = v741 + 344 * v739;
                buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
                buf[1].__r_.__value_.__r.__words[0] = v741 + 344 * v742;
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((void *)buf[0].__r_.__value_.__l.__size_, v730);
                buf[0].__r_.__value_.__r.__words[2] += 344;
                std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer((uint64_t *)&v895, buf);
                std::string::size_type v738 = v895.__r_.__value_.__l.__size_;
                std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((void *)v895.__r_.__value_.__l.__size_, v730);
                std::string::size_type v738 = v737 + 344;
              }
              v895.__r_.__value_.__l.__size_ = v738;
            }
            else
            {
              v733 = MRRLoggerForCategory(2);
              if (os_log_type_enabled(v733, OS_LOG_TYPE_INFO))
              {
                std::string::size_type v734 = *(void *)(v730 + 32);
                if (*(char *)(v734 + 23) < 0) {
                  std::string::size_type v734 = *(void *)v734;
                }
                v735 = (void *)(v730 + 104);
                if (*(char *)(v730 + 127) < 0) {
                  v735 = (void *)*v735;
                }
                double v736 = *(float *)(v730 + 88);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v734;
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v735;
                HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                *(double *)&buf[1].__r_.__value_.__l.__data_ = v736;
                LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 2048;
                *(double *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = v732;
                _os_log_impl(&dword_1C9555000, v733, OS_LOG_TYPE_INFO, "skipping matching result with mention - %s, entity - %s with model score - %f, since it has less than that of max score of %f for this entity type", (uint8_t *)buf, 0x2Au);
              }
            }
            v730 += 344;
          }
LABEL_1120:
          std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(void **)&v927[8]);
LABEL_1121:
          std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>>(a1, (__n128 *)*a1, (uint64_t)v895.__r_.__value_.__l.__data_, v895.__r_.__value_.__l.__size_, 0x82FA0BE82FA0BE83 * ((uint64_t)(v895.__r_.__value_.__l.__size_ - v895.__r_.__value_.__r.__words[0]) >> 3));
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v895;
          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
          std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (++v709 == v815)
          {
            uint64_t v743 = *a1;
            unint64_t v744 = a1[1];
            v495 = (char *)v830;
            goto LABEL_1124;
          }
          goto LABEL_1056;
        }
      }
      float v727 = *(float *)(v718 + 88);
      v728 = std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>((uint64_t **)v927, v720, (_DWORD *)(v718 + 96));
LABEL_1091:
      *((float *)v728 + 8) = v727;
      goto LABEL_1092;
    }
    std::string::size_type v49 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C9555000, v49, OS_LOG_TYPE_DEBUG, "[MR]Empty utterance embedding, returning empty. This is likely due to missing embedding in MarrsTests/test_artifacts/testEmbeddings.json", (uint8_t *)buf, 2u);
    }
    unint64_t v50 = MRRLoggerForCategory(3);
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v51 = v50;
      if (os_signpost_enabled(v50))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v51, OS_SIGNPOST_INTERVAL_END, v11, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
      }
    }
    unint64_t v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      goto LABEL_76;
    }
  }
  else
  {
    unint64_t v40 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v41 = *(void *)(a2 + 112);
      std::string::size_type v42 = a3[5];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v41;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v42;
      _os_log_impl(&dword_1C9555000, v40, OS_LOG_TYPE_DEBUG, "Embedding dim mismatch, returning empty, asset expected %zu, got %llu", (uint8_t *)buf, 0x16u);
    }
    unint64_t v43 = MRRLoggerForCategory(3);
    if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v44 = v43;
      if (os_signpost_enabled(v43))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v44, OS_SIGNPOST_INTERVAL_END, v11, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)buf, 2u);
      }
    }
    unint64_t v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
LABEL_76:
      _os_log_impl(&dword_1C9555000, v45, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)buf, 2u);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v16)
  {
LABEL_78:
    v858 = v16;
    operator delete(v16);
  }
LABEL_79:
  *(void *)v927 = &v860;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v927);
}

void sub_1C95978B4(_Unwind_Exception *a1)
{
  if (v5 < 0) {
    operator delete(v4[4]);
  }
  v6[0] = (void **)&v2;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](v6);
  if (v3) {
    operator delete(v3);
  }
  v6[0] = v4;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void sub_1C95981C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  STACK[0x4A0] = (unint64_t)&STACK[0x470];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
  *(void *)(v69 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  *(void *)(v69 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 208));
  STACK[0x440] = (unint64_t)&STACK[0x3B0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (__p) {
    operator delete(__p);
  }
  STACK[0x440] = (unint64_t)&a57;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a23) {
    operator delete(a23);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a19) {
    operator delete(a19);
  }
  STACK[0x440] = (unint64_t)&a61;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a49) {
    operator delete(a49);
  }
  STACK[0x440] = (unint64_t)&a65;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a69;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  if (a31) {
    operator delete(a31);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a27) {
    operator delete(a27);
  }
  v74[0] = (void **)&v71;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](v74);
  if (v72) {
    operator delete(v72);
  }
  v74[0] = (void **)&v73;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v74);
  _Unwind_Resume(a1);
}

void sub_1C95981F8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (v2) {
      operator delete(v2);
    }
    if (SLOBYTE(STACK[0x267]) < 0) {
      operator delete((void *)STACK[0x250]);
    }
    xpc_object_t v3 = (void *)STACK[0x4A0];
    if (STACK[0x4A0])
    {
      STACK[0x4A8] = (unint64_t)v3;
      operator delete(v3);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x440];
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    JUMPOUT(0x1C9598A0CLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p)
{
  if (a2)
  {
    if (__p)
    {
      operator delete(__p);
      JUMPOUT(0x1C959851CLL);
    }
    JUMPOUT(0x1C959854CLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598220(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x418] = v2;
    JUMPOUT(0x1C959822CLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598274()
{
  STACK[0x478] = v0;
  JUMPOUT(0x1C95983D8);
}

void sub_1C9598280()
{
}

void sub_1C95982B8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95982C0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95982D8(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x440] = v2 - 208;
    std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
    std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair((void **)&STACK[0x4A0]);
    JUMPOUT(0x1C95989E4);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95982E0(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v2 - 208) = &STACK[0x250];
    std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 208));
    std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair((void **)&STACK[0x4A0]);
    JUMPOUT(0x1C9598300);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C959831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  *(void *)(v40 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v40 - 208);
  *(void *)(v40 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v40 - 208);
  JUMPOUT(0x1C9598600);
}

void sub_1C9598324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  STACK[0x448] = v40;
  *(void *)(v41 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v41 - 208);
  *(void *)(v41 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](v41 - 208);
  JUMPOUT(0x1C9598600);
}

void sub_1C9598330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&STACK[0x4A0]);
  *(void *)(v40 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 208));
  *(void *)(v40 - 208) = a40;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 208));
  JUMPOUT(0x1C9598600);
}

void sub_1C9598350(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x450] = v4;
    STACK[0x448] = v2;
    STACK[0x440] = (unint64_t)v3;
    if (SLOBYTE(STACK[0x267]) < 0) {
      operator delete((void *)STACK[0x250]);
    }
    std::__tree<std::string>::destroy((char *)STACK[0x4A8]);
    if (v3)
    {
      STACK[0x448] = (unint64_t)v3;
      operator delete(v3);
    }
    JUMPOUT(0x1C95988D0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C959836C()
{
}

void sub_1C959837C()
{
  STACK[0x448] = v0;
  JUMPOUT(0x1C95985E4);
}

void sub_1C9598390(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95987FCLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95983A0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 185) < 0) {
      operator delete(*(void **)(v2 - 208));
    }
    if (SLOBYTE(STACK[0x267]) < 0) {
      operator delete((void *)STACK[0x250]);
    }
    JUMPOUT(0x1C9598708);
  }
  JUMPOUT(0x1C9598738);
}

void sub_1C95983BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49)
{
  if (a2)
  {
    STACK[0x260] = v49;
    STACK[0x250] = a49;
    JUMPOUT(0x1C959852CLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95983D4()
{
  STACK[0x410] = (unint64_t)&STACK[0x470];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x410]);
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*(void **)(v0 - 200));
  JUMPOUT(0x1C9598568);
}

void sub_1C95983EC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (v2) {
      operator delete(v2);
    }
    STACK[0x470] = v3 - 208;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
    JUMPOUT(0x1C95985BCLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C959841C()
{
  if (STACK[0x4A0]) {
    JUMPOUT(0x1C9598428);
  }
  JUMPOUT(0x1C959842CLL);
}

void sub_1C9598454()
{
  if (STACK[0x4A0]) {
    JUMPOUT(0x1C9598460);
  }
  JUMPOUT(0x1C9598464);
}

void sub_1C9598478(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x470] = v2 - 208;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
    JUMPOUT(0x1C95985BCLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95984A0(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x448] = v2;
    JUMPOUT(0x1C95985ACLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95984AC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95984B8);
  }
  JUMPOUT(0x1C95984C8);
}

void sub_1C95984D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,long long a49)
{
  if (a2)
  {
    if (v49) {
      operator delete(v49);
    }
    JUMPOUT(0x1C9598550);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95984F4(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95984FCLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598590(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95985ACLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598598(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v3 - 200) = v2;
    JUMPOUT(0x1C95985A0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95985E0()
{
  uint64_t v1 = *(void **)(v0 - 208);
  if (v1) {
    operator delete(v1);
  }
  *(void *)(v0 - 208) = &STACK[0x440];
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  JUMPOUT(0x1C9598600);
}

void sub_1C9598618()
{
  if (v0) {
    operator delete(v0);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x320]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x350]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x380]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x3B0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x3E0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x410]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x470]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x440]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)(v1 - 208));
  JUMPOUT(0x1C9598B60);
}

void sub_1C9598658()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x1C959864CLL);
}

void sub_1C959866C()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x1C9598844);
}

void sub_1C9598680(uint64_t a1, int a2)
{
  if (a2)
  {
    if (STACK[0x470]) {
      operator delete((void *)STACK[0x470]);
    }
    if (SLOBYTE(STACK[0x457]) < 0) {
      operator delete((void *)STACK[0x440]);
    }
    JUMPOUT(0x1C95987C0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598698()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x1C9598B58);
}

void sub_1C95986AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!v69)
  {
    STACK[0x440] = (unint64_t)&a57;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a23) {
      operator delete(a23);
    }
    if (a17) {
      operator delete(a17);
    }
    if (a19) {
      operator delete(a19);
    }
    STACK[0x440] = (unint64_t)&a61;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a49) {
      operator delete(a49);
    }
    STACK[0x440] = (unint64_t)&a65;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    STACK[0x440] = (unint64_t)&a69;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x440]);
    if (a31) {
      operator delete(a31);
    }
    if (a25) {
      operator delete(a25);
    }
    if (a27) {
      operator delete(a27);
    }
    JUMPOUT(0x1C9598C10);
  }
  JUMPOUT(0x1C9598774);
}

void sub_1C95986BC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95986C0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95986D0(uint64_t a1, int a2)
{
  if (a2)
  {
    STACK[0x450] = v4;
    STACK[0x448] = v2;
    STACK[0x440] = v3;
    JUMPOUT(0x1C95986E8);
  }
  JUMPOUT(0x1C9598738);
}

void sub_1C9598740()
{
  STACK[0x350] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  JUMPOUT(0x1C9598830);
}

void sub_1C9598748()
{
  if (v0) {
    operator delete(v0);
  }
  *(void *)(v1 - 208) = &STACK[0x3B0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  JUMPOUT(0x1C959876CLL);
}

void sub_1C959877C()
{
  STACK[0x3E0] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  JUMPOUT(0x1C95989BCLL);
}

void sub_1C9598784(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_signpost_id_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2)
  {
    uint64_t v41 = (void *)STACK[0x250];
    if (STACK[0x250])
    {
      STACK[0x258] = (unint64_t)v41;
      operator delete(v41);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x410];
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    std::string::size_type v42 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      LOWORD(STACK[0x250]) = 0;
      _os_log_impl(&dword_1C9555000, v42, OS_LOG_TYPE_INFO, "[VisualMR] Error computing features, returning empty", (uint8_t *)&STACK[0x250], 2u);
    }
    unint64_t v43 = MRRLoggerForCategory(3);
    if (a34 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v44 = v43;
      if (os_signpost_enabled(v43))
      {
        LOWORD(STACK[0x250]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9555000, v44, OS_SIGNPOST_INTERVAL_END, a30, "MRModelPreprocessing", " enableTelemetry=YES ", (uint8_t *)&STACK[0x250], 2u);
      }
    }
    unint64_t v45 = MRRLoggerForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      LOWORD(STACK[0x250]) = 0;
      _os_log_impl(&dword_1C9555000, v45, OS_LOG_TYPE_INFO, "END \"MRModelPreprocessing\"", (uint8_t *)&STACK[0x250], 2u);
    }
    *(_OWORD *)a40 = *(_OWORD *)&STACK[0x230];
    *(void *)(a40 + 16) = STACK[0x240];
    STACK[0x240] = 0;
    STACK[0x238] = 0;
    STACK[0x230] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C95973DCLL);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598794(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C9598C3CLL);
  }
  JUMPOUT(0x1C95987B8);
}

void sub_1C95987A0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95987A8);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C95987DC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (a2)
  {
    STACK[0x420] = a47;
    STACK[0x418] = v47;
    STACK[0x410] = (unint64_t)__p;
    if (*(char *)(v48 - 185) < 0) {
      operator delete(*(void **)(v48 - 208));
    }
    std::__tree<std::string>::destroy((char *)STACK[0x258]);
    if (__p)
    {
      STACK[0x418] = (unint64_t)__p;
      operator delete(__p);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x470];
    std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    if (a2 == 3)
    {
      unint64_t v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C9555000, v51, OS_LOG_TYPE_INFO, "IO Error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    else
    {
      int v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C9555000, v52, OS_LOG_TYPE_INFO, "Unknown error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1C9594140);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598808()
{
  if (STACK[0x350]) {
    operator delete((void *)STACK[0x350]);
  }
  STACK[0x350] = (unint64_t)&STACK[0x4A0];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  JUMPOUT(0x1C9598830);
}

void sub_1C9598858(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (a2)
  {
    STACK[0x420] = a47;
    STACK[0x418] = v47;
    STACK[0x410] = (unint64_t)a46;
    if (SLOBYTE(STACK[0x457]) < 0) {
      operator delete((void *)STACK[0x440]);
    }
    if (*(char *)(v48 - 185) < 0) {
      operator delete(*(void **)(v48 - 208));
    }
    std::__tree<std::string>::destroy((char *)STACK[0x258]);
    if (a46)
    {
      STACK[0x418] = (unint64_t)a46;
      operator delete(a46);
    }
    STACK[0x4A0] = (unint64_t)&STACK[0x470];
    std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4A0]);
    __cxa_begin_catch(a1);
    if (a2 == 3)
    {
      unint64_t v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C9555000, v51, OS_LOG_TYPE_INFO, "IO Error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    else
    {
      int v52 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(STACK[0x4A0]) = 0;
        _os_log_impl(&dword_1C9555000, v52, OS_LOG_TYPE_INFO, "Unknown error in computing surrounding text features, disabling for this request", (uint8_t *)&STACK[0x4A0], 2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1C9594140);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598974()
{
}

void sub_1C9598990()
{
}

void sub_1C95989D8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1C95989E0);
  }
  JUMPOUT(0x1C9598C3CLL);
}

void sub_1C9598B14()
{
}

void sub_1C9598B1C()
{
}

void sub_1C9598B30(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C9598B34);
  }
  __clang_call_terminate(a1);
}

void sub_1C9598B40()
{
  if (v0) {
    operator delete(v0);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x440]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)(v1 - 208));
  JUMPOUT(0x1C9598B60);
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 344;
        std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 344;
        std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 88;
      unint64_t v7 = v4 - 88;
      unint64_t v8 = v4 - 88;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 88;
        (*v9)(v7);
        v6 -= 88;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::mrr::mr::addCSMSpansToMatchingResult(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  unint64_t v8 = operator new(4uLL);
  _DWORD *v8 = 3;
  __p[1] = v8 + 1;
  __p[2] = v8 + 1;
  __p[0] = v8;
  if (a1 == a2) {
    goto LABEL_17;
  }
  unint64_t v9 = (unint64_t *)(a3 + 2);
  unint64_t v10 = a3[1];
  do
  {
    if (v10 >= *v9)
    {
      unint64_t v11 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v10 - *a3) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xBE82FA0BE82FA0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5F417D05F417D06 * ((uint64_t)(*v9 - *a3) >> 3) > v12) {
        unint64_t v12 = 0x5F417D05F417D06 * ((uint64_t)(*v9 - *a3) >> 3);
      }
      if (0x82FA0BE82FA0BE83 * ((uint64_t)(*v9 - *a3) >> 3) >= 0x5F417D05F417D0) {
        unint64_t v13 = 0xBE82FA0BE82FA0;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v20 = a3 + 2;
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v16 = v13;
      uint64_t v17 = v13 + 344 * v11;
      uint64_t v18 = v17;
      unint64_t v19 = v13 + 344 * v14;
      marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v17, a4, a1, (uint64_t)__p);
      v18 += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a3, &v16);
      unint64_t v10 = a3[1];
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v16);
    }
    else
    {
      marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v10, a4, a1, (uint64_t)__p);
      v10 += 344;
      a3[1] = v10;
    }
    a3[1] = v10;
    a1 += 88;
  }
  while (a1 != a2);
  unint64_t v8 = __p[0];
  if (__p[0]) {
LABEL_17:
  }
    operator delete(v8);
}

void sub_1C95990D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(void *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x1CB786400]();
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100]((marrs::mrr::mr::MRREntity *)(v4 + 96), (const marrs::mrr::mr::MRREntity *)(a2 + 96));
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  return std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(a1 + 40, *(const void **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
}

void sub_1C959916C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 312)) {
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  }
  MEMORY[0x1CB786420](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(unint64_t a1)
{
  if (a1 >= 0xBE82FA0BE82FA1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(344 * a1);
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>((uint64_t)(a1 + 2), a1[1], (__n128 *)a1[1], *a1, (__n128 *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](i - 344);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 312)) {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(a1 + 96));
  }
  JUMPOUT(0x1CB786420);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    unint64_t v9 = a3;
    do
    {
      a7 -= 344;
      unint64_t v9 = (__n128 *)((char *)v9 - 344);
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(a7, v9);
    }
    while (v9 != a5);
  }
  return a7;
}

__n128 std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = MEMORY[0x1CB7863F0]();
  unsigned __int32 v5 = a2[5].n128_u32[2];
  *(unsigned char *)(v4 + 96) = 0;
  uint64_t v6 = v4 + 96;
  *(_DWORD *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 216) = 0;
  if (a2[19].n128_u8[8])
  {
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v6, (uint64_t)&a2[6]);
    *(unsigned char *)(a1 + 312) = 1;
  }
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  __n128 result = a2[20];
  *(__n128 *)(a1 + 320) = result;
  *(void *)(a1 + 336) = a2[21].n128_u64[0];
  a2[20].n128_u64[0] = 0;
  a2[20].n128_u64[1] = 0;
  a2[21].n128_u64[0] = 0;
  return result;
}

marrs::mrr::mr::MRREntity *std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100](marrs::mrr::mr::MRREntity *this, const marrs::mrr::mr::MRREntity *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 216) = 0;
  if (*((unsigned char *)a2 + 216))
  {
    marrs::mrr::mr::MRREntity::MRREntity(this, a2);
    *((unsigned char *)this + 216) = 1;
  }
  return this;
}

void sub_1C959940C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 216)) {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C9599488(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t marrs::mrr::mr::MRMatchingResult::MRMatchingResult(uint64_t a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = MEMORY[0x1CB786400]();
  *(unsigned char *)(v7 + 96) = 0;
  *(float *)(v7 + 88) = a2;
  *(unsigned char *)(v7 + 312) = 0;
  *(void *)(v7 + 328) = 0;
  *(void *)(v7 + 336) = 0;
  *(void *)(v7 + 320) = 0;
  std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((void *)(v7 + 320), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_1C9599554(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 312)) {
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  }
  MEMORY[0x1CB786420](v1);
  _Unwind_Resume(a1);
}

void std::vector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 < v5)
  {
    uint64_t v6 = MEMORY[0x1CB786400]() + 88;
    goto LABEL_20;
  }
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - *a1) >> 3);
  if ((unint64_t)(v7 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= v7 + 1) {
    uint64_t v9 = v7 + 1;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v10 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v10);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  unint64_t v13 = &v12[88 * v7];
  uint64_t v14 = &v12[88 * v11];
  uint64_t v15 = MEMORY[0x1CB786400](v13, a2);
  uint64_t v6 = v15 + 88;
  uint64_t v17 = (char *)*a1;
  unint64_t v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v15;
    a1[1] = v6;
    a1[2] = (uint64_t)v14;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    v16 -= 88;
    uint64_t v15 = MEMORY[0x1CB7863F0](v15 - 88, v16);
  }
  while (v16 != v17);
  unint64_t v16 = (char *)*a1;
  uint64_t v18 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v6;
  a1[2] = (uint64_t)v14;
  if (v18 != v16)
  {
    unint64_t v19 = v18 - 88;
    uint64_t v20 = v18 - 88;
    uint64_t v21 = (void (***)(char *))(v18 - 88);
    do
    {
      int v22 = *v21;
      v21 -= 11;
      (*v22)(v20);
      v19 -= 88;
      BOOL v23 = v20 == v16;
      uint64_t v20 = (char *)v21;
    }
    while (!v23);
  }
  if (v16) {
LABEL_19:
  }
    operator delete(v16);
LABEL_20:
  a1[1] = v6;
}

void std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*((void *)a1 + 1));
    unint64_t v2 = (void **)(a1 + 40);
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void *std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x2E8BA2E8BA2E8BBLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(a4);
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[11 * v7];
    while (a2 != a3)
    {
      uint64_t v8 = MEMORY[0x1CB786400](result, a2);
      a2 += 88;
      __n128 result = (void *)(v8 + 88);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C9599808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

void *std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(void *a1, unsigned char *__src, unsigned char *a3)
{
  __n128 result = (void *)a1[2];
  uint64_t v7 = (char *)*a1;
  if (result == (void *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    __n128 result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](a1, 1uLL);
    uint64_t v11 = (char *)a1[1];
    uint64_t v8 = a1 + 1;
    uint64_t v7 = v11;
    size_t v10 = a3 - __src;
    if (a3 != __src) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = (char *)a1[1];
    uint64_t v8 = a1 + 1;
    size_t v10 = a3 - __src;
    if (v9 == v7)
    {
      if (__src == a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if (a3 != __src) {
LABEL_4:
    }
      __n128 result = memmove(v7, __src, v10);
  }
LABEL_5:
  void *v8 = &v7[v10];
  return result;
}

uint64_t std::map<marrs::mrr::mr::EntityType,char const*>::at(int a1)
{
  uint64_t v1 = qword_1EBC84480;
  if (!qword_1EBC84480) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1) {
        break;
      }
      uint64_t v1 = *(void *)v1;
      if (!v1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a1) {
      return v1 + 40;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      goto LABEL_8;
    }
  }
}

void std::vector<std::vector<marrs::mrr::mr::SurroundingText>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v21 = v12 - (void)a2;
      if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v22 = a3 + 344 * a5;
      }
      else
      {
        uint64_t v22 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(v9, v22, a4, *(void *)(v9 - 8));
        if (v21 < 1) {
          return;
        }
      }
      std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range((uint64_t)a1, (uint64_t)v7, v12, (uint64_t)v7 + 344 * a5);
      for (; v6 != v22; uint64_t v7 = (__n128 *)((char *)v7 + 344))
      {
        sirinluinternal::MatchingSpan::operator=();
        v7[5].n128_u32[2] = *(_DWORD *)(v6 + 88);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>((marrs::mrr::mr::MRREntity *)&v7[6], (marrs::mrr::mr::MRREntity *)(v6 + 96));
        if (v7 != (__n128 *)v6) {
          std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((char *)&v7[20], *(char **)(v6 + 320), *(void *)(v6 + 328), (uint64_t)(*(void *)(v6 + 328) - *(void *)(v6 + 320)) >> 2);
        }
        v6 += 344;
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xBE82FA0BE82FA0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x82FA0BE82FA0BE83 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x82FA0BE82FA0BE83 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v12 - *a1) >> 3);
      }
      if (v16 >= 0x5F417D05F417D0) {
        unint64_t v18 = 0xBE82FA0BE82FA0;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18)
      {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v18);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      BOOL v23 = &v19[344 * v15];
      v26[0] = v19;
      v26[1] = v23;
      double v27 = v23;
      double v28 = &v19[344 * v20];
      uint64_t v24 = 344 * a5;
      int32x2_t v25 = &v23[344 * a5];
      do
      {
        std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>(v23, v6);
        v23 += 344;
        v6 += 344;
        v24 -= 344;
      }
      while (v24);
      double v27 = v25;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, v26, v7);
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)v26);
    }
  }
}

void sub_1C9599C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>((void *)(a4 + v7), a2 + v7);
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v10 = (__n128 *)(a2 + v6 - a4);
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      result.n128_u64[0] = std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(v11, v10).n128_u64[0];
      uint64_t v10 = (__n128 *)((char *)v10 + 344);
      v11 += 344;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v11;
  if (v6 != a4)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v8 + v13;
      uint64_t v15 = v6 + v13;
      sirinluinternal::MatchingSpan::operator=();
      *(_DWORD *)(v6 + v13 - 256) = *(_DWORD *)(v8 + v13 - 256);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v6 + v13 - 248, v8 + v13 - 248);
      uint64_t v17 = (void **)(v6 + v13 - 24);
      unint64_t v16 = *v17;
      if (*v17)
      {
        *(void *)(v15 - 16) = v16;
        operator delete(v16);
        *uint64_t v17 = 0;
        *(void *)(v15 - 16) = 0;
        *(void *)(v15 - 8) = 0;
      }
      unint64_t v18 = (void *)(v14 - 24);
      __n128 result = *(__n128 *)(v14 - 24);
      *(__n128 *)uint64_t v17 = result;
      *(void *)(v15 - 8) = *(void *)(v14 - 8);
      void *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v13 -= 344;
    }
    while (-8 * (v7 >> 3) != v13);
  }
  return result;
}

void *std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult&>(void *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x1CB786400]();
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_copy_base<marrs::mrr::mr::MRREntity,false>::__optional_copy_base[abi:ne180100]((marrs::mrr::mr::MRREntity *)(v4 + 96), (const marrs::mrr::mr::MRREntity *)(a2 + 96));
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  return std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(a1 + 40, *(const void **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
}

void sub_1C9599EB8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 312)) {
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  }
  MEMORY[0x1CB786420](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(uint64_t *a1, void *a2, __n128 *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>,std::reverse_iterator<marrs::mrr::mr::MRMatchingResult*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (__n128 *)*a1, v6, v6);
  a2[1] = v7;
  unint64_t v8 = (__n128 *)a1[1];
  uint64_t v9 = a2[2];
  if (v8 != v3)
  {
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult>(v9, v3);
      uint64_t v3 = (__n128 *)((char *)v3 + 344);
      v9 += 344;
    }
    while (v3 != v8);
    uint64_t v7 = a2[1];
  }
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = v7;
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

void std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>(marrs::mrr::mr::MRREntity *this, marrs::mrr::mr::MRREntity *a2)
{
  if (*((unsigned __int8 *)this + 216) != *((unsigned __int8 *)a2 + 216))
  {
    if (*((unsigned char *)this + 216))
    {
      marrs::mrr::mr::MRREntity::~MRREntity((void **)this);
      *((unsigned char *)this + 216) = 0;
    }
    else
    {
      marrs::mrr::mr::MRREntity::MRREntity(this, a2);
      *((unsigned char *)this + 216) = 1;
    }
    return;
  }
  if (!*((unsigned char *)this + 216)) {
    return;
  }
  *(void *)this = *(void *)a2;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
  std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
  long long v4 = *(_OWORD *)((char *)a2 + 92);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 92) = v4;
  if (this != a2)
  {
    uint64_t v5 = *((void *)this + 14);
    uint64_t v7 = *((void *)a2 + 14);
    uint64_t v6 = (long long *)*((void *)a2 + 15);
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 16) - v5) >> 3) >= v8)
    {
      uint64_t v12 = *((void *)this + 15);
      if (0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 3) >= v8)
      {
        if ((long long *)v7 != v6)
        {
          do
          {
            std::string::operator=((std::string *)v5, (const std::string *)v7);
            *(_OWORD *)(v5 + 24) = *(_OWORD *)(v7 + 24);
            v5 += 40;
            v7 += 40;
          }
          while ((long long *)v7 != v6);
          uint64_t v12 = *((void *)this + 15);
        }
        while (v12 != v5)
        {
          if (*(char *)(v12 - 17) < 0) {
            operator delete(*(void **)(v12 - 40));
          }
          v12 -= 40;
        }
        *((void *)this + 15) = v5;
        goto LABEL_33;
      }
      uint64_t v13 = (long long *)(v7 + 8 * ((v12 - v5) >> 3));
      if (v12 != v5)
      {
        do
        {
          std::string::operator=((std::string *)v5, (const std::string *)v7);
          *(_OWORD *)(v5 + 24) = *(_OWORD *)(v7 + 24);
          v7 += 40;
          v5 += 40;
        }
        while ((long long *)v7 != v13);
        uint64_t v5 = *((void *)this + 15);
      }
      uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)this + 128, v13, v6, (std::string *)v5);
    }
    else
    {
      std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate((uint64_t *)this + 14);
      if (v8 > 0x666666666666666) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0x999999999999999ALL * ((uint64_t)(*((void *)this + 16) - *((void *)this + 14)) >> 3);
      if (v9 <= v8) {
        unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - v7) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 16) - *((void *)this + 14)) >> 3) >= 0x333333333333333) {
        unint64_t v10 = 0x666666666666666;
      }
      else {
        unint64_t v10 = v9;
      }
      std::vector<marrs::mrr::mr::SurroundingText>::__vallocate[abi:ne180100]((void *)this + 14, v10);
      uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::SurroundingText>,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*,marrs::mrr::mr::SurroundingText*>((uint64_t)this + 128, (long long *)v7, v6, *((std::string **)this + 15));
    }
    *((void *)this + 15) = v11;
LABEL_33:
    std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 136));
    *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
    std::string::operator=((std::string *)this + 7, (const std::string *)a2 + 7);
    uint64_t v14 = (std::string *)*((void *)a2 + 24);
    uint64_t v15 = (long long *)*((void *)a2 + 25);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 8, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
    return;
  }
  std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)this + 136));
  std::string::operator=((std::string *)this + 7, (const std::string *)this + 7);
}

void sub_1C959A288(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<marrs::mrr::mr::MRResultType>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<marrs::mrr::mr::SurroundingText>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(unsigned char *)(a1 + 216))
    {
      marrs::mrr::mr::MRREntity::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 216))
  {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)a1);
    *(unsigned char *)(v2 + 216) = 0;
  }
  else
  {
    std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(a1, a2);
    *(unsigned char *)(v3 + 216) = 1;
  }
}

uint64_t marrs::mrr::mr::MRREntity::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  unint64_t v9 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)unint64_t v9 = v10;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 80) = v11;
  std::vector<marrs::mrr::mr::SurroundingText>::__vdeallocate((uint64_t *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v14 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)uint64_t v14 = v15;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 192));
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return a1;
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xBE82FA0BE82FA1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    long long v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(a4);
    *long long v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[344 * v8];
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)(v6 + 2), a2, a3, (uint64_t)v7);
    v6[1] = result;
  }
  return result;
}

void sub_1C959A648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(*a1);
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,float &,marrs::mrr::mr::MRREntity const&,std::vector<marrs::mrr::mr::MRResultType> &>(uint64_t a1, uint64_t a2, marrs::mrr::mr::MRREntity *a3, uint64_t a4, float a5)
{
  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v9, a3);
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(a1, a5, a2, (const marrs::mrr::mr::MRREntity *)&v9, a4);
  uint64_t v22 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  uint64_t v22 = (void **)&v16;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
}

void sub_1C959A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t marrs::mrr::mr::MRMatchingResult::MRMatchingResult(uint64_t a1, float a2, uint64_t a3, const marrs::mrr::mr::MRREntity *a4, uint64_t a5)
{
  uint64_t v9 = MEMORY[0x1CB786400]();
  *(float *)(v9 + 88) = a2;
  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)(v9 + 96), a4);
  *(unsigned char *)(a1 + 312) = 1;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  std::vector<marrs::mrr::mr::MRResultType>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((void *)(a1 + 320), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  return a1;
}

void sub_1C959A8F8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 312)) {
    marrs::mrr::mr::MRREntity::~MRREntity(v2);
  }
  MEMORY[0x1CB786420](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::__map_value_compare<std::pair<std::string,std::string>,std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,std::less<std::pair<std::string,std::string>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v5 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *a1;
  }
  if (v4 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v8 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = memcmp(v7, v9, v10);
  BOOL v12 = v6 < v8;
  if (v11) {
    BOOL v12 = v11 < 0;
  }
  if (v12) {
    return 1;
  }
  int v14 = memcmp(v9, v7, v10);
  BOOL v15 = v8 < v6;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 0;
  }
  char v18 = (const void **)a2[3];
  size_t v17 = a2 + 3;
  uint64_t v16 = v18;
  int v19 = *((char *)v17 + 23);
  uint64_t v22 = (const void **)a1[3];
  uint64_t v21 = a1 + 3;
  char v20 = v22;
  int v23 = *((char *)v21 + 23);
  if (v23 >= 0) {
    size_t v24 = *((unsigned __int8 *)v21 + 23);
  }
  else {
    size_t v24 = (size_t)v21[1];
  }
  if (v23 >= 0) {
    int32x2_t v25 = v21;
  }
  else {
    int32x2_t v25 = v20;
  }
  if (v19 >= 0) {
    size_t v26 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    size_t v26 = (size_t)v17[1];
  }
  if (v19 >= 0) {
    double v27 = v17;
  }
  else {
    double v27 = v16;
  }
  if (v26 >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v25, v27, v28);
  if (v29) {
    return v29 < 0;
  }
  else {
    return v24 < v26;
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::string>,std::vector<sirinluinternal::MatchingSpan>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,std::vector<sirinluinternal::MatchingSpan>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  size_t v6 = (void *)*result;
  *__n128 result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t marrs::mrr::mr::ModelBasedMR::ModelBasedMR(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F23C7D30;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    _OWORD *v5 = v6;
  }
  *(void *)a1 = &unk_1F23C7D08;
  uint64_t v115 = (std::string *)(a1 + 32);
  uint64_t v117 = a1;
  uint64_t v111 = v5;
  std::__fs::filesystem::operator/[abi:ne180100](&v141, a2, (std::__fs::filesystem::path *)&marrs::mrr::mr::configFileName);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v163, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  }
  else {
    std::string v163 = v141;
  }
  uint64_t v7 = NSString;
  int v8 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
  std::string::size_type v9 = v163.__r_.__value_.__r.__words[0];
  uint64_t v10 = objc_msgSend(NSString, "defaultCStringEncoding", v111);
  if (v8 >= 0) {
    int v11 = &v163;
  }
  else {
    int v11 = (std::string *)v9;
  }
  long long v121 = [v7 stringWithCString:v11 encoding:v10];
  BOOL v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v121];
  obstd::string::size_type j = (std::string *)a2;
  memset(&__p, 0, sizeof(__p));
  memset(v145, 0, sizeof(v145));
  memset(&v152, 0, sizeof(v152));
  memset(v149, 0, sizeof(v149));
  memset(v147, 0, sizeof(v147));
  uint64_t v126 = v12;
  id v13 = [v12 objectForKey:@"version"];
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v13 UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = __str;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;

  uint64_t v123 = [v126 objectForKey:@"mrType"];
  int v144 = [v123 isEqual:@"rule"] ^ 1;
  int v14 = [v126 objectForKeyedSubscript:@"ruleConfig"];
  BOOL v15 = v14 == 0;

  if (!v15)
  {
    uint64_t v16 = [v126 objectForKeyedSubscript:@"ruleConfig"];
    id v17 = [v16 objectForKey:@"entityKeyWordPath"];
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v17 UTF8String]);
    id v18 = [v16 objectForKey:@"labelEmbeddingPath"];
    std::string::basic_string[abi:ne180100]<0>(&v156, (char *)[v18 UTF8String]);
    int v19 = [v16 objectForKeyedSubscript:@"cosineSimilarityThreshold"];
    [v19 floatValue];
    LODWORD(v157) = v20;
    uint64_t v21 = [v16 objectForKeyedSubscript:@"scoreRelativeThreshold"];
    [v21 floatValue];
    HIDWORD(v157) = v22;
    id v23 = [v16 objectForKey:@"owlEmbeddingsTaskId"];
    std::string::basic_string[abi:ne180100]<0>(&v158, (char *)[v23 UTF8String]);

    std::string::operator=(v145, &__str);
    std::string::operator=(&v145[1], &v156);
    uint64_t v146 = (uint64_t *)v157;
    std::string::operator=(v147, &v158);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v158.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v156.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  size_t v24 = [v126 objectForKeyedSubscript:@"modelConfig"];
  BOOL v25 = v24 == 0;

  if (!v25)
  {
    size_t v26 = [v126 objectForKeyedSubscript:@"modelConfig"];
    memset(v137, 0, 24);
    double v27 = [v26 objectForKey:@"categoryEmbeddingFileName"];
    BOOL v28 = v27 == 0;

    if (v28)
    {
      MEMORY[0x1CB786A80](v137, "embedded_cats_192.json");
    }
    else
    {
      id v29 = [v26 objectForKey:@"categoryEmbeddingFileName"];
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v29 UTF8String]);
      if ((v137[23] & 0x80000000) != 0) {
        operator delete(*(void **)v137);
      }
      *(std::string *)uint64_t v137 = __str;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;
    }
    unsigned int v30 = [v26 objectForKey:@"owlEmbeddingDim"];
    BOOL v31 = v30 == 0;

    if (v31)
    {
      uint64_t v33 = 192;
    }
    else
    {
      uint64_t v32 = [v26 objectForKeyedSubscript:@"owlEmbeddingDim"];
      uint64_t v33 = [v32 longValue];
    }
    unint64_t v34 = [v26 objectForKey:@"scoreAbsoluteThreshold"];
    BOOL v35 = v34 == 0;

    if (v35) {
      [v26 objectForKeyedSubscript:@"scoreRelativeThreshold"];
    }
    else {
    uint64_t v36 = [v26 objectForKeyedSubscript:@"scoreAbsoluteThreshold"];
    }
    [(id)v36 floatValue];
    int v38 = v37;

    std::string::size_type v39 = [v26 objectForKey:@"useVisibleText"];
    LOBYTE(v36) = v39 == 0;

    if (v36) {
      goto LABEL_36;
    }
    id v40 = [v26 objectForKey:@"useVisibleText"];
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v40 UTF8String]);

    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v41 = __str.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__str.__r_.__value_.__l.__data_ == 1702195796;
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_41;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 4) {
LABEL_36:
    }
      BOOL v41 = 0;
    else {
      BOOL v41 = LODWORD(__str.__r_.__value_.__l.__data_) == 1702195796;
    }
LABEL_41:
    memset(&v142, 0, sizeof(v142));
    std::string::size_type v42 = [v26 objectForKey:@"visTextMatchFileName"];
    BOOL v43 = v42 == 0;

    if (v43)
    {
      MEMORY[0x1CB786A80](&v142, "");
    }
    else
    {
      id v44 = [v26 objectForKey:@"visTextMatchFileName"];
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v44 UTF8String]);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      std::string v142 = __str;
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
      __str.__r_.__value_.__s.__data_[0] = 0;
    }
    unint64_t v45 = [v26 objectForKey:@"withinEntityScoreMargin"];
    BOOL v46 = v45 == 0;

    if (v46)
    {
      int v49 = 0;
    }
    else
    {
      unint64_t v47 = [v26 objectForKeyedSubscript:@"withinEntityScoreMargin"];
      [v47 floatValue];
      int v49 = v48;
    }
    id v50 = [v26 objectForKey:@"boltTaskId"];
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v50 UTF8String]);
    LODWORD(v156.__r_.__value_.__l.__data_) = v38;
    id v51 = [v26 objectForKey:@"owlEmbeddingsTaskId"];
    std::string::basic_string[abi:ne180100]<0>(&v156.__r_.__value_.__l.__size_, (char *)[v51 UTF8String]);
    if ((v137[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
    }
    else {
      std::string v158 = *(std::string *)v137;
    }
    uint64_t v159 = v33;
    BOOL v160 = v41;
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v161, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
    }
    else {
      std::string v161 = v142;
    }
    int v162 = v49;

    std::string::operator=(&v147[1], &__str);
    int data = (int)v156.__r_.__value_.__l.__data_;
    std::string::operator=(v149, (const std::string *)&v156.__r_.__value_.__r.__words[1]);
    std::string::operator=(&v149[1], &v158);
    uint64_t v150 = v159;
    BOOL v151 = v160;
    std::string::operator=(&v152, &v161);
    int v153 = v162;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v161.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v158.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v157) < 0) {
      operator delete((void *)v156.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
    if ((v137[23] & 0x80000000) != 0) {
      operator delete(*(void **)v137);
    }
  }
  std::string *v115 = v147[1];
  *(_OWORD *)&v147[1].__r_.__value_.__l.__data_ = 0uLL;
  *(_DWORD *)(v117 + 56) = data;
  *(std::string *)(v117 + 64) = v149[0];
  memset(v149, 0, 24);
  *(_OWORD *)(v117 + 88) = *(_OWORD *)&v149[1].__r_.__value_.__l.__data_;
  v147[1].__r_.__value_.__r.__words[2] = 0;
  v149[1].__r_.__value_.__r.__words[0] = 0;
  *(unsigned char *)(v117 + 120) = v151;
  std::string::size_type v52 = v149[1].__r_.__value_.__r.__words[2];
  uint64_t v53 = v150;
  *(_OWORD *)&v149[1].__r_.__value_.__r.__words[1] = 0uLL;
  *(void *)(v117 + 104) = v52;
  *(void *)(v117 + 112) = v53;
  long long v54 = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
  *(void *)(v117 + 144) = *((void *)&v152.__r_.__value_.__l + 2);
  *(_OWORD *)(v117 + 128) = v54;
  memset(&v152, 0, sizeof(v152));
  *(_DWORD *)(v117 + 152) = v153;
  MRConfig::~MRConfig((void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  *(void *)(v117 + 216) = 0;
  *(void *)(v117 + 208) = v117 + 216;
  *(void *)(v117 + 168) = 0;
  *(void *)(v117 + 160) = v117 + 168;
  uint64_t v112 = (uint64_t **)(v117 + 160);
  *(void *)(v117 + 192) = 0;
  *(void *)(v117 + 176) = 0;
  *(void *)(v117 + 184) = v117 + 192;
  uint64_t v114 = (uint64_t **)(v117 + 184);
  *(void *)(v117 + 200) = 0;
  long long v116 = (uint64_t **)(v117 + 208);
  *(void *)(v117 + 224) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&__str, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelFolderName);
  std::__fs::filesystem::operator/[abi:ne180100](&v142, (uint64_t)&__p, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelName);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v137, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v137 = v142;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::operator/[abi:ne180100](&v163, (uint64_t)&__p, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::modelFolderName);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v163;
  }
  marrs::inference_engine::EspressoModule::EspressoModule(v117 + 232, (uint64_t)v137, 32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if ((v137[23] & 0x80000000) != 0) {
    operator delete(*(void **)v137);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  *(void *)(v117 + 280) = 0;
  *(void *)(v117 + 288) = 0;
  *(void *)(v117 + 272) = v117 + 280;
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)obj, (std::__fs::filesystem::path *)&marrs::mrr::mr::configFileName);
  std::ifstream::basic_ifstream((uint64_t *)&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v136, *(void **)((char *)&v145[0].__r_.__value_.__r.__words[1] + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)));
  os_log_type_t v55 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    uint32_t v56 = &v136;
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint32_t v56 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
    _os_log_impl(&dword_1C9555000, v55, OS_LOG_TYPE_INFO, "Loaded MR Config - %s", (uint8_t *)&__str, 0xCu);
  }
  if (*(char *)(v117 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)(v117 + 88), *(void *)(v117 + 96));
  }
  else {
    std::string v135 = *(std::string *)(v117 + 88);
  }
  if (SHIBYTE(obj->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v134, obj->__r_.__value_.__l.__data_, obj->__r_.__value_.__l.__size_);
  }
  else {
    std::string v134 = *obj;
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v137, (uint64_t)&v134, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v142, (char *)&v135);
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)v137, (std::__fs::filesystem::path *)&v142);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v133 = __str;
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if ((v137[23] & 0x80000000) != 0) {
    operator delete(*(void **)v137);
  }
  if (*(char *)(v117 + 151) < 0) {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v117 + 128), *(void *)(v117 + 136));
  }
  else {
    std::string v132 = *(std::string *)(v117 + 128);
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)v137, (uint64_t)&v134, (std::__fs::filesystem::path *)&marrs::mrr::mr::ModelBasedMR::assetSubDirectoryPath);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v142, (char *)&v132);
  std::__fs::filesystem::operator/[abi:ne180100](&__str, (uint64_t)v137, (std::__fs::filesystem::path *)&v142);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v131, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v131 = __str;
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if ((v137[23] & 0x80000000) != 0) {
    operator delete(*(void **)v137);
  }
  uint64_t v57 = NSString;
  int v58 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
  std::string::size_type v59 = v133.__r_.__value_.__r.__words[0];
  uint64_t v60 = [NSString defaultCStringEncoding];
  if (v58 >= 0) {
    int v61 = &v133;
  }
  else {
    int v61 = (std::string *)v59;
  }
  long long v118 = [v57 stringWithCString:v61 encoding:v60];
  uint64_t v113 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (([v113 fileExistsAtPath:v118] & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1CB7869F0](exception, &__str);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v62 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v118];
  uint64_t v124 = v62;
  uint64_t v63 = [v62 allKeys];
  *(_OWORD *)&v163.__r_.__value_.__r.__words[1] = 0uLL;
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163.__r_.__value_.__l.__size_;
  memset(v137, 0, sizeof(v137));
  long long v138 = 0u;
  long long v139 = 0u;
  id obja = v63;
  uint64_t v64 = [obja countByEnumeratingWithState:v137 objects:&__str count:16];
  if (v64)
  {
    uint64_t v122 = **(void **)&v137[16];
    do
    {
      uint64_t v65 = 0;
      uint64_t v127 = v64;
      do
      {
        if (**(void **)&v137[16] != v122) {
          objc_enumerationMutation(obja);
        }
        int v66 = *(void **)(*(void *)&v137[8] + 8 * v65);
        unint64_t v67 = [v62 objectForKey:v66];
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        for (unint64_t i = 0; [v67 count] > i; ++i)
        {
          uint64_t v72 = [v67 objectAtIndex:i];
          [v72 floatValue];
          int v74 = v73;
          if ((unint64_t)v69 >= v70)
          {
            uint64_t v76 = (v69 - v68) >> 2;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v70 - (void)v68) >> 1 > v77) {
              unint64_t v77 = (uint64_t)(v70 - (void)v68) >> 1;
            }
            if (v70 - (unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v78 = v77;
            }
            if (v78) {
              unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v78);
            }
            else {
              uint64_t v79 = 0;
            }
            float v80 = (char *)(v78 + 4 * v76);
            *(_DWORD *)float v80 = v74;
            float v75 = v80 + 4;
            while (v69 != v68)
            {
              int v81 = *((_DWORD *)v69 - 1);
              v69 -= 4;
              *((_DWORD *)v80 - 1) = v81;
              v80 -= 4;
            }
            unint64_t v70 = v78 + 4 * v79;
            if (v68) {
              operator delete(v68);
            }
            uint64_t v68 = v80;
          }
          else
          {
            *(_DWORD *)uint64_t v69 = v73;
            float v75 = v69 + 4;
          }

          uint64_t v69 = v75;
        }
        std::string::basic_string[abi:ne180100]<0>(&v141, (char *)[v66 UTF8String]);
        unint64_t v82 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v163, &v140, &v141);
        unint64_t v83 = (char *)*v82;
        if (!*v82)
        {
          unint64_t v84 = v82;
          unint64_t v83 = (char *)operator new(0x50uLL);
          v142.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
          v142.__r_.__value_.__l.__size_ = (std::string::size_type)&v163.__r_.__value_.__l.__size_;
          v142.__r_.__value_.__s.__data_[16] = 0;
          uint64_t v85 = (std::string *)(v83 + 32);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v85, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v85->__r_.__value_.__l.__data_ = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            *((void *)v83 + 6) = *((void *)&v141.__r_.__value_.__l + 2);
          }
          *((void *)v83 + 8) = 0;
          *((void *)v83 + 9) = 0;
          *((void *)v83 + 7) = 0;
          v142.__r_.__value_.__s.__data_[16] = 1;
          uint64_t v86 = v140;
          *(void *)unint64_t v83 = 0;
          *((void *)v83 + 1) = 0;
          *((void *)v83 + 2) = v86;
          *unint64_t v84 = v83;
          unint64_t v87 = (uint64_t *)v83;
          if (*(void *)v163.__r_.__value_.__l.__data_)
          {
            v163.__r_.__value_.__r.__words[0] = *(void *)v163.__r_.__value_.__l.__data_;
            unint64_t v87 = (uint64_t *)*v84;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v163.__r_.__value_.__l.__size_, v87);
          ++v163.__r_.__value_.__r.__words[2];
          v142.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v142);
        }
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v83 + 56, v68, (uint64_t)v69, (v69 - v68) >> 2);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }

        if (v68) {
          operator delete(v68);
        }
        ++v65;
        double v62 = v124;
      }
      while (v65 != v127);
      uint64_t v64 = [obja countByEnumeratingWithState:v137 objects:&__str count:16];
    }
    while (v64);
  }

  v130[0] = 0;
  v130[1] = 0;
  long long v129 = (uint64_t *)v130;
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>((char *)&v129, (uint64_t *)v163.__r_.__value_.__l.__data_, (uint64_t *)&v163.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((void *)v163.__r_.__value_.__l.__size_);

  uint64_t v88 = v117;
  if ((uint64_t **)(v117 + 272) != &v129) {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>((char *)(v117 + 272), v129, (uint64_t *)v130);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v130[0]);
  if (*(unsigned char *)(v117 + 120))
  {
    std::string v89 = NSString;
    int v90 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
    std::string::size_type v91 = v131.__r_.__value_.__r.__words[0];
    uint64_t v92 = [NSString defaultCStringEncoding];
    if (v90 >= 0) {
      uint64_t v93 = &v131;
    }
    else {
      uint64_t v93 = (std::string *)v91;
    }
    uint64_t v94 = [v89 stringWithCString:v93 encoding:v92];
    uint64_t v125 = (void *)v94;
    unint64_t v128 = [MEMORY[0x1E4F28CB8] defaultManager];
    if (([v128 fileExistsAtPath:v94] & 1) == 0)
    {
      uint64_t v110 = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      MEMORY[0x1CB7869F0](v110, v137);
      __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v95 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithJSON:v94];
    uint64_t v96 = v95;
    uint64_t v97 = [v95 objectForKey:@"start"];
    unint64_t v98 = 0;
    *(_OWORD *)&v137[8] = 0uLL;
    *(void *)uint64_t v137 = &v137[8];
    while (v98 < [v97 count])
    {
      id v99 = [v97 objectAtIndexedSubscript:v98];
      std::string::basic_string[abi:ne180100]<0>(&v142, (char *)[v99 UTF8String]);

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v137, (uint64_t)&v142, (uint64_t)&v142);
      unint64_t v95 = v96;
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      ++v98;
    }
    float32x4_t v100 = [v95 objectForKey:@"end"];
    unint64_t v101 = 0;
    *(_OWORD *)&v142.__r_.__value_.__r.__words[1] = 0uLL;
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v142.__r_.__value_.__l.__size_;
    while (v101 < [v100 count])
    {
      id v102 = [v100 objectAtIndexedSubscript:v101];
      std::string::basic_string[abi:ne180100]<0>(&v163, (char *)[v102 UTF8String]);

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v142, (uint64_t)&v163, (uint64_t)&v163);
      unint64_t v95 = v96;
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      ++v101;
    }
    float32x4_t v103 = [v95 objectForKey:@"stopwords"];
    unint64_t v104 = 0;
    *(_OWORD *)&v163.__r_.__value_.__r.__words[1] = 0uLL;
    v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163.__r_.__value_.__l.__size_;
    while (v104 < [v103 count])
    {
      id v105 = [v103 objectAtIndexedSubscript:v104];
      std::string::basic_string[abi:ne180100]<0>(&v141, (char *)[v105 UTF8String]);

      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v163, (uint64_t)&v141, (uint64_t)&v141);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      ++v104;
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&v156.__r_.__value_.__r.__words[1] = 0uLL;
    v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156.__r_.__value_.__l.__size_;
    *(_OWORD *)&v158.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v157 = &v158;
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&__str, *(void **)v137, &v137[8]);
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v156, v142.__r_.__value_.__l.__data_, &v142.__r_.__value_.__l.__size_);
    std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v157, v163.__r_.__value_.__l.__data_, &v163.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((char *)v163.__r_.__value_.__l.__size_);

    std::__tree<std::string>::destroy((char *)v142.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy(*(char **)&v137[8]);

    if (v112 != (uint64_t **)&__str) {
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v112, __str.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__size_);
    }
    if (v114 != (uint64_t **)&v156) {
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v114, v156.__r_.__value_.__l.__data_, &v156.__r_.__value_.__l.__size_);
    }
    if (v116 != (uint64_t **)&v157) {
      std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v116, v157, &v158);
    }
    std::__tree<std::string>::destroy(v158.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((char *)v156.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((char *)__str.__r_.__value_.__l.__size_);
    float32x4_t v106 = MRRLoggerForCategory(2);
    uint64_t v88 = v117;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v107 = *(void *)(v117 + 176);
      LODWORD(__str.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v107;
      _os_log_impl(&dword_1C9555000, v106, OS_LOG_TYPE_INFO, "start words used std::string::size_type size = %lu", (uint8_t *)&__str, 0xCu);
    }
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(__p.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1CB786B50](&__p.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1CB786D60](&v154);
  return v88;
}

void sub_1C959C33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }

  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }

  if (a73 < 0) {
    operator delete(a71);
  }
  if (a58 < 0) {
    operator delete(a53);
  }

  MRConfig::~MRConfig(&a74);
  if (*(char *)(v77 - 121) < 0) {
    operator delete(*(void **)(v77 - 144));
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  *(void *)a21 = a15;
  if (*(char *)(a21 + 31) < 0) {
    operator delete(*a9);
  }
  JUMPOUT(0x1C959D0A8);
}

void sub_1C959C870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a67 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy(*(char **)(v68 - 136));

  JUMPOUT(0x1C959C91CLL);
}

void sub_1C959C88C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::string>::destroy(*(char **)(v70 - 136));

  std::__tree<std::string>::destroy(a66);
  std::__tree<std::string>::destroy(a54);

  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1CB786A00](&__p, exception_ptr);
    __cxa_begin_catch(a1);
    int v74 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      LODWORD(STACK[0x420]) = 136315138;
      STACK[0x424] = (unint64_t)"Error parsing visible text matching keywrods json";
      _os_log_impl(&dword_1C9555000, v74, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)&STACK[0x420], 0xCu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&STACK[0x420], "Error parsing visible text matching keywrods json");
    std::string::basic_string[abi:ne180100]<0>(&a53, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, (uint64_t)&STACK[0x420], (uint64_t)&a53, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 64);
  }
  JUMPOUT(0x1C959CA48);
}

void sub_1C959C8F4()
{
  JUMPOUT(0x1C959C900);
}

void sub_1C959C910()
{
  JUMPOUT(0x1C959C91CLL);
}

void sub_1C959C92C()
{
  JUMPOUT(0x1C959C938);
}

void sub_1C959CB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char **a10, void **a11, marrs::inference_engine::EspressoModule *a12, char **a13, char **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x437]) < 0)
  {
    operator delete((void *)STACK[0x420]);
    if ((v76 & 1) == 0)
    {
LABEL_8:
      std::exception::~exception(&a74);
      __cxa_end_catch();
      if (a36 < 0) {
        operator delete(a31);
      }
      if (a43 < 0) {
        operator delete(a38);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (a57 < 0) {
        operator delete(a52);
      }
      if (a64 < 0) {
        operator delete(a59);
      }
      if (a70 < 0) {
        operator delete(a65);
      }
      std::ifstream::~ifstream(&a75);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a11);
      marrs::inference_engine::EspressoModule::~EspressoModule(a12);
      std::__tree<std::string>::destroy(*a14);
      std::__tree<std::string>::destroy(*a13);
      std::__tree<std::string>::destroy(*a10);
      MRModelConfig::~MRModelConfig(a19);
      *(void *)a21 = a15;
      if (*(char *)(a21 + 31) < 0) {
        operator delete(*a9);
      }
      JUMPOUT(0x1C959D0A8);
    }
  }
  else if (!v76)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v75);
  goto LABEL_8;
}

void sub_1C959CC3C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a68);
  if (a67 < 0) {
    operator delete(__p);
  }

  if (v68) {
    operator delete(v68);
  }

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v70 - 136));
  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1CB786A00](&a28, exception_ptr);
    __cxa_begin_catch(a1);
    int v74 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v70 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Error parsing category embeddings json";
      _os_log_impl(&dword_1C9555000, v74, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v70 - 144), 0xCu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((void *)(v70 - 144), "Error parsing category embeddings json");
    std::string::basic_string[abi:ne180100]<0>(&__p, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, v70 - 144, (uint64_t)&__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 50);
  }
  JUMPOUT(0x1C959CDD4);
}

void sub_1C959CC54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char **a10, void **a11, marrs::inference_engine::EspressoModule *a12, char **a13, char **a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)(v72 - 136));
  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x1CB786A00](&a28, exception_ptr);
    __cxa_begin_catch(a1);
    int v76 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v72 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Error parsing category embeddings json";
      _os_log_impl(&dword_1C9555000, v76, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v72 - 144), 0xCu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((void *)(v72 - 144), "Error parsing category embeddings json");
    std::string::basic_string[abi:ne180100]<0>(&a71, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(exception, v72 - 144, (uint64_t)&a71, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 50);
  }
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    a28 = MEMORY[0x1E4FBA510] + 16;
    __cxa_begin_catch(a1);
    unint64_t v78 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v72 - 144) = 136315138;
      STACK[0x4A4] = (unint64_t)"Unknown exception thrown during loading of category embeddings";
      _os_log_impl(&dword_1C9555000, v78, OS_LOG_TYPE_ERROR, "ConfigLoadingError - %s", (uint8_t *)(v72 - 144), 0xCu);
    }
    uint64_t v79 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>((void *)(v72 - 144), "Unknown exception thrown during loading of category embeddings");
    std::string::basic_string[abi:ne180100]<0>(&a71, "MultimodalReferenceResolution");
    ConfigLoadingError::ConfigLoadingError(v79, v72 - 144, (uint64_t)&a71, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/ModelBasedMR.cpp", 53);
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  std::ifstream::~ifstream(&a72);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a11);
  marrs::inference_engine::EspressoModule::~EspressoModule(a12);
  std::__tree<std::string>::destroy(*a14);
  std::__tree<std::string>::destroy(*a13);
  std::__tree<std::string>::destroy(*a10);
  MRModelConfig::~MRModelConfig(a19);
  *(void *)a21 = a15;
  if (*(char *)(a21 + 31) < 0) {
    operator delete(*a9);
  }
  _Unwind_Resume(a1);
}

void sub_1C959CC60()
{
}

void sub_1C959CC7C()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x1C959CCB0);
}

void sub_1C959CED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char **a10, void **a11, marrs::inference_engine::EspressoModule *a12, char **a13, char **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a74 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v77 - 121) < 0)
  {
    operator delete(*(void **)(v77 - 144));
    uint64_t v78 = a21;
    if ((v76 & 1) == 0)
    {
LABEL_8:
      std::exception::~exception(&a28);
      __cxa_end_catch();
      if (a36 < 0) {
        operator delete(a31);
      }
      if (a43 < 0) {
        operator delete(a38);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (a57 < 0) {
        operator delete(a52);
      }
      if (a64 < 0) {
        operator delete(a59);
      }
      if (a70 < 0) {
        operator delete(a65);
      }
      std::ifstream::~ifstream(&a75);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a11);
      marrs::inference_engine::EspressoModule::~EspressoModule(a12);
      std::__tree<std::string>::destroy(*a14);
      std::__tree<std::string>::destroy(*a13);
      std::__tree<std::string>::destroy(*a10);
      MRModelConfig::~MRModelConfig(a19);
      *(void *)uint64_t v78 = a15;
      if (*(char *)(v78 + 31) < 0) {
        operator delete(*a9);
      }
      JUMPOUT(0x1C959D0A8);
    }
  }
  else
  {
    uint64_t v78 = a21;
    if (!v76) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v75);
  goto LABEL_8;
}

void sub_1C959D094(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void marrs::mrr::md::preprocessing::getIndexesOfTopMentions(char **a1, uint64_t *a2, int a3, float a4)
{
  int v8 = (uint64_t **)std::vector<unsigned long>::vector(a1, (a2[1] - *a2) >> 2);
  std::string::size_type v9 = *v8;
  uint64_t v10 = v8[1];
  int v11 = *v8;
  if (*v8 != v10)
  {
    uint64_t v12 = 0;
    id v13 = *v8;
    do
      *v13++ = v12++;
    while (v13 != v10);
    int v11 = v9;
    while (*(float *)(*a2 + (*v11 << 32 >> 30)) > a4)
    {
      if (++v11 == v10) {
        goto LABEL_16;
      }
    }
  }
  if (v11 != v10)
  {
    int v14 = v11 + 1;
    if (v11 + 1 != v10)
    {
      uint64_t v15 = *a2;
      do
      {
        if (*(float *)(v15 + (*v14 << 32 >> 30)) > a4) {
          *v11++ = *v14;
        }
        ++v14;
      }
      while (v14 != v10);
    }
    if (v11 != v10)
    {
      uint64_t v10 = v11;
      a1[1] = (char *)v11;
    }
  }
LABEL_16:
  std::string::size_type v39 = a2;
  if ((char *)v10 - (char *)v9 < 1025)
  {
LABEL_20:
    std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v9, v10, &v39, v10 - v9, 0, 0);
  }
  else
  {
    uint64_t v16 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v17 = v10 - v9;
    while (1)
    {
      id v18 = (uint64_t *)operator new(8 * v17, v16);
      if (v18) {
        break;
      }
      BOOL v19 = v17 > 1;
      v17 >>= 1;
      if (!v19) {
        goto LABEL_20;
      }
    }
    int v20 = v18;
    std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v9, v10, &v39, v10 - v9, v18, v17);
    operator delete(v20);
  }
  uint64_t v21 = *a1;
  int v22 = a1[1];
  uint64_t v23 = v22 - *a1;
  if ((int)((unint64_t)v23 >> 3) > a3)
  {
    uint64_t v24 = a3;
    unint64_t v25 = v23 >> 3;
    if (a3 <= (unint64_t)(v23 >> 3))
    {
      if (a3 >= v25) {
        return;
      }
      int v38 = &v21[8 * a3];
    }
    else
    {
      unint64_t v26 = a3 - v25;
      double v27 = a1[2];
      if (v26 > (v27 - v22) >> 3)
      {
        if (a3 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v27 - v21;
        if (v28 >> 2 > (unint64_t)a3) {
          uint64_t v24 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v24;
        }
        unsigned int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
        BOOL v31 = *a1;
        uint64_t v32 = a1[1];
        uint64_t v33 = &v30[8 * v25];
        BOOL v35 = &v30[8 * v34];
        bzero(v33, 8 * v26);
        uint64_t v36 = &v33[8 * v26];
        while (v32 != v31)
        {
          uint64_t v37 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }
        *a1 = v33;
        a1[1] = v36;
        a1[2] = v35;
        if (v31) {
          operator delete(v31);
        }
        return;
      }
      bzero(a1[1], 8 * v26);
      int v38 = &v22[8 * v26];
    }
    a1[1] = v38;
  }
}

void sub_1C959D334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * *result))
      {
        *__n128 result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      int v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &result[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, v25, a5);
        unint64_t v26 = (uint64_t *)&v22[8 * v23];
        __n128 result = std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v26);
        double v27 = &v22[8 * a4];
        uint64_t v28 = *a3;
        unint64_t v29 = v26;
        while (v29 != (uint64_t *)v27)
        {
          uint64_t v30 = *v29;
          float v31 = *(float *)(*v28 + 4 * *v29);
          float v32 = *(float *)(*v28 + 4 * *(void *)v22);
          if (v31 <= v32) {
            uint64_t v30 = *(void *)v22;
          }
          v22 += 8 * (v31 <= v32);
          v29 += v31 > v32;
          *v8++ = v30;
          if (v22 == (char *)v26)
          {
            if (v29 != (uint64_t *)v27)
            {
              uint64_t v33 = 0;
              do
              {
                v8[v33] = v29[v33];
                ++v33;
              }
              while (&v29[v33] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          uint64_t v34 = 0;
          do
          {
            v8[v34] = *(void *)&v22[v34 * 8];
            ++v34;
          }
          while (&v22[v34 * 8] != (char *)v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        uint64_t v15 = result;
        do
        {
          uint64_t v16 = *v15;
          uint64_t v15 = v12;
          uint64_t v17 = *v12;
          float v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            uint64_t v19 = v13;
            while (1)
            {
              *(uint64_t *)((char *)result + v19 + 8) = v16;
              if (!v19) {
                break;
              }
              uint64_t v16 = *(uint64_t *)((char *)result + v19 - 8);
              v19 -= 8;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                int v20 = (uint64_t *)((char *)result + v19 + 8);
                goto LABEL_15;
              }
            }
            int v20 = result;
LABEL_15:
            *int v20 = v17;
          }
          uint64_t v12 = v15 + 1;
          v13 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      uint64_t *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13) {
        uint64_t v10 = *result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v24 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(result, v24, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v25 = *a3;
      unint64_t v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        uint64_t v27 = *v26;
        float v28 = *(float *)(*v25 + 4 * *v26);
        float v29 = *(float *)(*v25 + 4 * *v7);
        if (v28 <= v29) {
          uint64_t v27 = *v7;
        }
        v26 += v28 > v29;
        v7 += v28 <= v29;
        *v5++ = v27;
        if (v7 == v24)
        {
          if (v26 != a2)
          {
            uint64_t v30 = 0;
            do
            {
              v5[v30] = v26[v30];
              ++v30;
            }
            while (&v26[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        uint64_t v31 = 0;
        do
        {
          v5[v31] = v7[v31];
          ++v31;
        }
        while (&v7[v31] != v24);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **a3;
        uint64_t v17 = a5;
        float v18 = a5;
        do
        {
          uint64_t v20 = *v18++;
          uint64_t v19 = v20;
          if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v20))
          {
            uint64_t *v18 = *v14;
          }
          else
          {
            v17[1] = v19;
            uint64_t v21 = a5;
            if (v17 != a5)
            {
              uint64_t v22 = v15;
              while (1)
              {
                uint64_t v21 = (uint64_t *)((char *)a5 + v22);
                uint64_t v23 = *(uint64_t *)((char *)a5 + v22 - 8);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v23)) {
                  break;
                }
                uint64_t *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  uint64_t v21 = a5;
                  break;
                }
              }
            }
            uint64_t *v21 = *v14;
          }
          ++v14;
          v15 += 8;
          uint64_t v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

void *std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(void *result, void *a2, void *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    float v12 = result;
    while (v8 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v13 = **a4;
      while (1)
      {
        uint64_t v14 = *v12;
        if (*(float *)(v13 + 4 * *a2) > *(float *)(v13 + 4 * *v12)) {
          break;
        }
        ++v12;
        if (!--a5) {
          return result;
        }
      }
      if (a5 >= v8)
      {
        if (a5 == 1)
        {
          *float v12 = *a2;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v25 = a5;
        }
        else {
          uint64_t v25 = a5 + 1;
        }
        uint64_t v24 = v25 >> 1;
        float v18 = &v12[v25 >> 1];
        uint64_t v17 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = a3 - a2;
          uint64_t v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            float v28 = &v17[v26 >> 1];
            uint64_t v30 = *v28;
            float v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (*(float *)(v13 + 4 * v30) > *(float *)(v13 + 4 * *v18)) {
              uint64_t v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[v15 >> 1];
        float v18 = a2;
        if (a2 != v12)
        {
          unint64_t v19 = a2 - v12;
          float v18 = v12;
          do
          {
            unint64_t v20 = v19 >> 1;
            uint64_t v21 = &v18[v19 >> 1];
            uint64_t v23 = *v21;
            uint64_t v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (*(float *)(v13 + 4 * *v17) > *(float *)(v13 + 4 * v23)) {
              unint64_t v19 = v20;
            }
            else {
              float v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = v18 - v12;
      }
      if (v18 == a2)
      {
        a2 = v17;
      }
      else
      {
        uint64_t v31 = (char *)v17 - (char *)a2;
        if (v17 == a2)
        {
          a2 = v18;
        }
        else
        {
          float v32 = v18 + 1;
          if (v18 + 1 == a2)
          {
            uint64_t v80 = *v18;
            uint64_t v82 = v16;
            uint64_t v37 = a2;
            size_t v38 = (char *)v17 - (char *)a2;
            std::string::size_type v39 = a7;
            id v40 = a4;
            BOOL v41 = a3;
            uint64_t v42 = a8;
            uint64_t v84 = v24;
            memmove(v18, v37, v38);
            uint64_t v16 = v82;
            uint64_t v24 = v84;
            a8 = v42;
            a3 = v41;
            a4 = v40;
            a7 = v39;
            a2 = (void *)((char *)v18 + v31);
            *(void *)((char *)v18 + v31) = v80;
          }
          else
          {
            uint64_t v33 = a2 + 1;
            if (a2 + 1 == v17)
            {
              uint64_t v43 = *(v17 - 1);
              a2 = v18 + 1;
              if (v17 - 1 != v18)
              {
                id v44 = a7;
                unint64_t v45 = a4;
                BOOL v46 = a3;
                uint64_t v47 = a8;
                uint64_t v83 = v16;
                uint64_t v85 = v24;
                uint64_t v81 = *(v17 - 1);
                memmove(v18 + 1, v18, (char *)(v17 - 1) - (char *)v18);
                uint64_t v43 = v81;
                uint64_t v16 = v83;
                uint64_t v24 = v85;
                a8 = v47;
                a3 = v46;
                a4 = v45;
                a7 = v44;
              }
              void *v18 = v43;
            }
            else
            {
              uint64_t v34 = a2 - v18;
              if (v34 == v31 >> 3)
              {
                do
                {
                  uint64_t v35 = *(v32 - 1);
                  *(v32 - 1) = *(v33 - 1);
                  *(v33 - 1) = v35;
                  if (v32 == a2) {
                    break;
                  }
                  ++v32;
                }
                while (v33++ != v17);
              }
              else
              {
                uint64_t v48 = v31 >> 3;
                uint64_t v49 = a2 - v18;
                do
                {
                  uint64_t v50 = v49;
                  uint64_t v49 = v48;
                  uint64_t v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  id v51 = &v18[v49];
                  do
                  {
                    uint64_t v53 = *--v51;
                    uint64_t v52 = v53;
                    long long v54 = &v51[v34];
                    os_log_type_t v55 = v51;
                    do
                    {
                      uint32_t v56 = v54;
                      *os_log_type_t v55 = *v54;
                      uint64_t v57 = &v54[v34];
                      BOOL v58 = __OFSUB__(v34, v17 - v54);
                      uint64_t v60 = v34 - (v17 - v54);
                      char v59 = (v60 < 0) ^ v58;
                      long long v54 = &v18[v60];
                      if (v59) {
                        long long v54 = v57;
                      }
                      os_log_type_t v55 = v56;
                    }
                    while (v54 != v51);
                    void *v56 = v52;
                  }
                  while (v51 != v18);
                }
                a2 = &v18[v31 >> 3];
              }
            }
          }
        }
      }
      a5 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a5 + v8)
      {
        uint64_t v65 = a2;
        int v66 = v17;
        int v61 = a4;
        uint64_t v67 = v24;
        uint64_t v68 = v16;
        double v62 = a7;
        uint64_t v63 = a8;
        __n128 result = (void *)std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(a2, v66, a3);
        a2 = v18;
        uint64_t v8 = v68;
        a5 = v67;
        a3 = v65;
      }
      else
      {
        int v61 = a4;
        double v62 = a7;
        uint64_t v63 = a8;
        uint64_t v64 = a3;
        __n128 result = (void *)std::__inplace_merge<std::_ClassicAlgPolicy,marrs::mrr::md::preprocessing::getIndexesOfTopMentions(std::vector<float> const&,int,float)::$_1 &,std::__wrap_iter<unsigned long *>>(v12, v18, a2);
        a3 = v64;
        float v12 = a2;
        a2 = v17;
      }
      a7 = v62;
      a4 = v61;
      a8 = v63;
      if (!v8) {
        return result;
      }
    }
    if (a5 <= v8)
    {
      if (v12 != a2)
      {
        uint64_t v73 = 0;
        do
        {
          *(void *)&a7[v73 * 8] = v12[v73];
          ++v73;
        }
        while (&v12[v73] != a2);
        int v74 = &a7[v73 * 8];
        if (v74 != a7)
        {
          float v75 = *a4;
          while (a2 != a3)
          {
            uint64_t v76 = *a2;
            float v77 = *(float *)(*v75 + 4 * *a2);
            float v78 = *(float *)(*v75 + 4 * *(void *)a7);
            if (v77 <= v78) {
              uint64_t v76 = *(void *)a7;
            }
            a2 += v77 > v78;
            a7 += 8 * (v77 <= v78);
            *v12++ = v76;
            if (a7 == v74) {
              return result;
            }
          }
          return memmove(v12, a7, v74 - a7);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v69 = 0;
      do
      {
        *(void *)&a7[v69 * 8] = a2[v69];
        ++v69;
      }
      while (&a2[v69] != a3);
      uint64_t v70 = &a7[v69 * 8];
      if (v70 != a7)
      {
        uint64_t v71 = a3 - 1;
        while (a2 != v12)
        {
          uint64_t v72 = *((void *)v70 - 1);
          if (*(float *)(**a4 + 4 * v72) <= *(float *)(**a4 + 4 * *(a2 - 1))) {
            v70 -= 8;
          }
          else {
            uint64_t v72 = *--a2;
          }
          *v71-- = v72;
          if (v70 == a7) {
            return result;
          }
        }
        uint64_t v79 = 0;
        do
        {
          v71[v79] = *(void *)&v70[v79 * 8 - 8];
          --v79;
        }
        while (&v70[v79 * 8] != a7);
      }
    }
  }
  return result;
}

void marrs::mrr::mr::MentionKeywordFilter::~MentionKeywordFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1CB786E50);
}

void marrs::mrr::mr::MentionKeywordFilter::filterEntities(unsigned char *a1@<X8>)
{
  uint64_t v2 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C9555000, v2, OS_LOG_TYPE_INFO, "[MentionKeywordFilter] Not implemented yet, returning input list", v3, 2u);
  }
  *a1 = 0;
  a1[24] = 0;
}

uint64_t getFirstAndLastIndices(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  *a5 = 0;
  if (a4 == a3)
  {
    *a6 = 0;
  }
  else
  {
    if (a2 == a1) {
      return 0;
    }
    uint64_t v11 = 0;
    unint64_t v12 = ((char *)a2 - (char *)a1) / 24;
    uint64_t v13 = v12 <= 1 ? 1 : ((char *)a2 - (char *)a1) / 24;
    uint64_t v14 = a1;
    do
    {
      if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a3, a4, v14) != a4)break; {
      *a5 = ++v11;
      }
      v14 += 3;
    }
    while (v13 != v11);
    if (v11 == v12) {
      return 0;
    }
    unint64_t v16 = (int)v12 - 1;
    *a6 = v16;
    if (v16 > *a5)
    {
      uint64_t v17 = &a1[3 * (int)v16];
      do
      {
        if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a3, a4, v17) != a4)break; {
        *a6 = --v16;
        }
        v17 -= 3;
      }
      while (v16 > *a5);
    }
  }
  return 1;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      long long v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      long long v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

float rawEditDistance<unsigned int>(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  memset(v7, 0, sizeof(v7));
  memset(v6, 0, sizeof(v6));
  computeAlignmentMatrix<unsigned int>(a1, a2, a3, a4, v14, v13, (uint64_t)v12, (uint64_t)v11, 0.0, 0.0, 0, 0, (uint64_t *)&v8, (uint64_t *)v7, (uint64_t *)v6);
  float v4 = *(float *)(v8[1] - *v8 + *(void *)(v9 - 24) - 4);
  uint64_t v15 = v6;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v6[0] = (void **)v7;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v6);
  v7[0] = (void **)&v8;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v7);
  return v4;
}

void sub_1C959E058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ***a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 72) = v21;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 72));
  a15 = &a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = (void **)&a21;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void flattenSubset<std::__wrap_iter<std::string const*>,unsigned int>(void *a1, void *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  a5[1] = *a5;
  if (a3 != a4)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v10 = *v7++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(*a1 + v10 - *a2), *(_DWORD **)(*a1 + v10 - *a2 + 8), (uint64_t)a5);
    }
    while (v7 != a4);
  }
}

void computeAlignmentMatrix<unsigned int>(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t *a5, int **a6, uint64_t a7, uint64_t a8, float a9, float a10, unint64_t a11, char a12, uint64_t *a13, uint64_t *a14, uint64_t *a15)
{
  unint64_t v178 = *(void *)(a2 + 8) - *(void *)a2;
  unint64_t v20 = (v178 >> 2) + 1;
  unint64_t v176 = a1[1] - *a1;
  unint64_t v21 = (v176 >> 2) + 1;
  std::vector<std::vector<float>>::__clear[abi:ne180100](a13);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a14);
  std::vector<std::vector<float>>::__clear[abi:ne180100](a15);
  std::vector<std::vector<float>>::resize(a13, v20);
  std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize((uint64_t)a14, v20);
  uint64_t v22 = a15;
  uint64_t v23 = *a15;
  uint64_t v24 = (char *)a15[1];
  unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v24[-*a15] >> 3);
  unint64_t v26 = v20 - v25;
  unsigned int v188 = a4;
  if (v20 <= v25)
  {
    if (v20 < v25)
    {
      float v32 = (char *)(v23 + 24 * v20);
      if (v24 != v32)
      {
        uint64_t v33 = (char *)a15[1];
        do
        {
          uint64_t v35 = (void *)*((void *)v33 - 3);
          v33 -= 24;
          uint64_t v34 = v35;
          if (v35)
          {
            *((void *)v24 - 2) = v34;
            operator delete(v34);
            uint64_t v22 = a15;
          }
          uint64_t v24 = v33;
        }
        while (v33 != v32);
      }
      v22[1] = (uint64_t)v32;
    }
    uint64_t v36 = a1;
    if ((v178 >> 2) == -1)
    {
      char v37 = 1;
      size_t v38 = a15;
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v27 = a15[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v27 - (uint64_t)v24) >> 3) >= v26)
    {
      size_t v39 = 24 * ((24 * v26 - 24) / 0x18) + 24;
      bzero(v24, v39);
      a15[1] = (uint64_t)&v24[v39];
    }
    else
    {
      uint64_t v194 = a15 + 2;
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v23) >> 3);
      uint64_t v29 = 2 * v28;
      if (2 * v28 <= v20) {
        uint64_t v29 = (v178 >> 2) + 1;
      }
      if (v28 >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v29;
      }
      unint64_t v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v30);
      unint64_t v191 = &v190[24 * v25];
      long long v193 = &v190[24 * v31];
      bzero(v191, 24 * ((24 * v26 - 24) / 0x18) + 24);
      uint64_t v192 = &v191[24 * ((24 * v26 - 24) / 0x18) + 24];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a15, &v190);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v190);
    }
  }
  uint64_t v40 = 0;
  uint64_t v185 = 4 * ((v176 >> 2) + 1);
  uint64_t v183 = 8 * ((v176 >> 2) + 1);
  do
  {
    BOOL v41 = (char **)(*a13 + 24 * v40);
    uint64_t v43 = (void **)(v41 + 1);
    uint64_t v42 = v41[1];
    id v44 = *v41;
    unint64_t v45 = (v42 - *v41) >> 2;
    if (v21 <= v45)
    {
      if (v21 < v45) {
        *uint64_t v43 = &v44[4 * v21];
      }
    }
    else
    {
      uint64_t v46 = *a13 + 24 * v40;
      uint64_t v49 = *(void *)(v46 + 16);
      uint64_t v48 = (void *)(v46 + 16);
      uint64_t v47 = v49;
      if (v21 - v45 <= (v49 - (uint64_t)v42) >> 2)
      {
        int v61 = &v42[4 * (v21 - v45)];
        unint64_t v62 = v185 - 4 * v45;
        do
        {
          *(_DWORD *)uint64_t v42 = 0;
          v42 += 4;
          v62 -= 4;
        }
        while (v62);
        *uint64_t v43 = v61;
      }
      else
      {
        unint64_t v50 = v47 - (void)v44;
        unint64_t v51 = (v47 - (uint64_t)v44) >> 1;
        if (v51 <= v21) {
          unint64_t v51 = (v176 >> 2) + 1;
        }
        if (v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v52);
        os_log_type_t v55 = &v53[4 * v45];
        unint64_t v56 = v185 - 4 * v45;
        uint64_t v57 = v55;
        do
        {
          *(_DWORD *)uint64_t v57 = 0;
          v57 += 4;
          v56 -= 4;
        }
        while (v56);
        BOOL v58 = (char *)*v43;
        char v59 = *v41;
        while (v58 != v59)
        {
          int v60 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v55 - 1) = v60;
          v55 -= 4;
        }
        *BOOL v41 = v55;
        *uint64_t v43 = &v53[4 * v21];
        *uint64_t v48 = &v53[4 * v54];
        if (v59) {
          operator delete(v59);
        }
      }
    }
    uint64_t v63 = (char **)(*a14 + 24 * v40);
    uint64_t v65 = v63 + 1;
    uint64_t v64 = v63[1];
    int v66 = *v63;
    unint64_t v67 = (v64 - *v63) >> 3;
    if (v21 <= v67)
    {
      uint64_t v83 = a15;
      if (v21 < v67) {
        void *v65 = &v66[8 * v21];
      }
    }
    else
    {
      uint64_t v68 = *a14 + 24 * v40;
      uint64_t v71 = *(void *)(v68 + 16);
      uint64_t v70 = (void *)(v68 + 16);
      uint64_t v69 = v71;
      if (v21 - v67 <= (v71 - (uint64_t)v64) >> 3)
      {
        uint64_t v84 = &v64[8 * (v21 - v67)];
        unint64_t v85 = v183 - 8 * v67;
        do
        {
          *(void *)uint64_t v64 = 0;
          v64 += 8;
          v85 -= 8;
        }
        while (v85);
        void *v65 = v84;
        goto LABEL_58;
      }
      unint64_t v72 = v69 - (void)v66;
      unint64_t v73 = (v69 - (uint64_t)v66) >> 2;
      if (v73 <= v21) {
        unint64_t v73 = (v176 >> 2) + 1;
      }
      if (v72 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v73;
      }
      float v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
      float v77 = &v75[8 * v67];
      unint64_t v78 = v183 - 8 * v67;
      uint64_t v79 = v77;
      do
      {
        *(void *)uint64_t v79 = 0;
        v79 += 8;
        v78 -= 8;
      }
      while (v78);
      uint64_t v80 = *v65;
      uint64_t v81 = *v63;
      if (*v65 != *v63)
      {
        do
        {
          uint64_t v82 = *((void *)v80 - 1);
          v80 -= 8;
          *((void *)v77 - 1) = v82;
          v77 -= 8;
        }
        while (v80 != v81);
        uint64_t v80 = *v63;
      }
      uint64_t v83 = a15;
      *uint64_t v63 = v77;
      void *v65 = &v75[8 * v21];
      *uint64_t v70 = &v75[8 * v76];
      if (v80)
      {
        operator delete(v80);
LABEL_58:
        uint64_t v83 = a15;
      }
    }
    uint64_t v86 = (char **)(*v83 + 24 * v40);
    uint64_t v88 = (void **)(v86 + 1);
    unint64_t v87 = v86[1];
    std::string v89 = *v86;
    unint64_t v90 = (v87 - *v86) >> 2;
    if (v21 <= v90)
    {
      uint64_t v36 = a1;
      if (v21 < v90) {
        *uint64_t v88 = &v89[4 * v21];
      }
    }
    else
    {
      uint64_t v91 = *v83 + 24 * v40;
      uint64_t v94 = *(void *)(v91 + 16);
      uint64_t v93 = (void *)(v91 + 16);
      uint64_t v92 = v94;
      if (v21 - v90 <= (v94 - (uint64_t)v87) >> 2)
      {
        float32x4_t v106 = &v87[4 * (v21 - v90)];
        unint64_t v107 = v185 - 4 * v90;
        uint64_t v36 = a1;
        do
        {
          *(_DWORD *)unint64_t v87 = 0;
          v87 += 4;
          v107 -= 4;
        }
        while (v107);
        *uint64_t v88 = v106;
      }
      else
      {
        unint64_t v95 = v92 - (void)v89;
        unint64_t v96 = (v92 - (uint64_t)v89) >> 1;
        if (v96 <= v21) {
          unint64_t v96 = (v176 >> 2) + 1;
        }
        if (v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v97);
        float32x4_t v100 = &v98[4 * v90];
        unint64_t v101 = v185 - 4 * v90;
        id v102 = v100;
        do
        {
          *(_DWORD *)id v102 = 0;
          v102 += 4;
          v101 -= 4;
        }
        while (v101);
        float32x4_t v103 = (char *)*v88;
        unint64_t v104 = *v86;
        while (v103 != v104)
        {
          int v105 = *((_DWORD *)v103 - 1);
          v103 -= 4;
          *((_DWORD *)v100 - 1) = v105;
          v100 -= 4;
        }
        *uint64_t v86 = v100;
        *uint64_t v88 = &v98[4 * v21];
        *uint64_t v93 = &v98[4 * v99];
        uint64_t v36 = a1;
        if (v104) {
          operator delete(v104);
        }
      }
    }
    ++v40;
  }
  while (v40 != v20);
  char v37 = 0;
  a4 = v188;
  size_t v38 = a15;
LABEL_80:
  uint64_t v108 = *a13;
  uint64_t v109 = *(float **)*a13;
  *uint64_t v109 = a9;
  **(_DWORD **)*size_t v38 = a10;
  uint64_t v110 = *a5;
  uint64_t v111 = (v176 >> 2);
  if (a5[1] == *a5)
  {
    if ((v176 >> 2))
    {
      char v186 = v37;
      unint64_t v113 = 0;
      uint64_t v114 = v36;
      uint64_t v115 = 4 * v111;
      do
      {
        a9 = a9 + cost<unsigned int>(a3, *(_DWORD *)(*v114 + v113), a4);
        uint64_t v108 = *a13;
        uint64_t v109 = *(float **)*a13;
        v109[v113 / 4 + 1] = a9;
        v113 += 4;
      }
      while (v115 != v113);
      uint64_t v36 = v114;
      uint64_t v111 = (v176 >> 2);
      char v37 = v186;
    }
  }
  else if ((v176 >> 2))
  {
    uint64_t v112 = 0;
    do
    {
      v109[v112 + 1] = *(float *)(v110 + v112 * 4);
      ++v112;
    }
    while (v111 != v112);
  }
  long long v116 = *a6;
  uint64_t v117 = (v178 >> 2);
  BOOL v131 = a6[1] == *a6;
  uint64_t v180 = v117;
  if (v131)
  {
    if ((v178 >> 2))
    {
      char v187 = v37;
      uint64_t v120 = 0;
      float v121 = *v109;
      uint64_t v122 = 4 * v117;
      uint64_t v123 = 24;
      do
      {
        float v121 = v121 + cost<unsigned int>(a3, a4, *(_DWORD *)(*(void *)a2 + v120));
        uint64_t v108 = *a13;
        **(float **)(*a13 + v123) = v121;
        v120 += 4;
        v123 += 24;
      }
      while (v122 != v120);
      uint64_t v36 = a1;
      uint64_t v117 = (v178 >> 2);
      uint64_t v111 = (v176 >> 2);
      char v37 = v187;
    }
  }
  else if ((v178 >> 2))
  {
    uint64_t v118 = 0;
    do
    {
      int v119 = *v116++;
      **(_DWORD **)(v108 + v118 + 24) = v119;
      v118 += 24;
    }
    while (24 * v117 != v118);
  }
  uint64_t v124 = *(float **)a7;
  if (*(void *)(a7 + 8) == *(void *)a7)
  {
    if ((v176 >> 2) != -1)
    {
      uint64_t v128 = 0;
      uint64_t v129 = *(void *)*a15;
      do
      {
        *(_DWORD *)(v129 + 4 * v128) = v128;
        ++v128;
      }
      while (v21 != v128);
    }
  }
  else if (v111)
  {
    uint64_t v125 = (_DWORD *)(*(void *)*a15 + 4);
    uint64_t v126 = v111;
    do
    {
      float v127 = *v124++;
      *v125++ = v127;
      --v126;
    }
    while (v126);
  }
  std::string v130 = *(float **)a8;
  BOOL v131 = *(void *)(a8 + 8) == *(void *)a8 || v117 == 0;
  if (!v131)
  {
    std::string v132 = (unsigned int **)(*a15 + 24);
    uint64_t v133 = v117;
    do
    {
      float v134 = *v130++;
      unsigned int v135 = v134;
      std::string v136 = *v132;
      v132 += 3;
      *std::string v136 = v135;
      --v133;
    }
    while (v133);
  }
  if (v111)
  {
    uint64_t v137 = (_DWORD *)(*(void *)*a14 + 12);
    unint64_t v138 = HIDWORD(a11);
    uint64_t v139 = v111;
    do
    {
      *uint64_t v137 = v138;
      v137 += 2;
      LODWORD(v138) = v138 + 1;
      --v139;
    }
    while (v139);
  }
  if ((v176 >> 2) != -1)
  {
    uint64_t v140 = *(_DWORD **)*a14;
    do
    {
      _DWORD *v140 = a11;
      v140 += 2;
      --v21;
    }
    while (v21);
  }
  if ((v37 & 1) == 0)
  {
    std::string v141 = (uint64_t *)*a14;
    do
    {
      uint64_t v142 = *v141;
      v141 += 3;
      *(_DWORD *)(v142 + 4) = HIDWORD(a11);
      --v20;
    }
    while (v20);
  }
  if (v117)
  {
    float32x4_t v143 = (_DWORD **)(*a14 + 24);
    int v144 = a11;
    uint64_t v145 = v117;
    do
    {
      uint64_t v146 = *v143;
      v143 += 3;
      *uint64_t v146 = v144++;
      --v145;
    }
    while (v145);
  }
  if (v111)
  {
    uint64_t v147 = 0;
    uint64_t v148 = 24 * v117;
    do
    {
      uint64_t v149 = v147 + 1;
      if (v117)
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        int v184 = v147 + HIDWORD(a11);
        do
        {
          float v152 = *(float *)(*(void *)(v108 + v150 + 24) + 4 * v147);
          float v153 = v152 + cost<unsigned int>(a3, *(_DWORD *)(*v36 + 4 * v147), v188);
          float v154 = *(float *)(*(void *)(*a13 + v150) + 4 * v149);
          uint64_t v36 = a1;
          float v155 = v154 + cost<unsigned int>(a3, v188, *(_DWORD *)(*(void *)a2 + 4 * v151));
          float v156 = *(float *)(*(void *)(*a13 + v150) + 4 * v147);
          float v157 = v156 + cost<unsigned int>(a3, *(_DWORD *)(*a1 + 4 * v147), *(_DWORD *)(*(void *)a2 + 4 * v151));
          std::string v158 = a15;
          uint64_t v159 = (uint64_t *)(*a15 + v150);
          float v160 = v153 / (float)(*(_DWORD *)(v159[3] + 4 * v147) + 1);
          uint64_t v161 = *v159;
          float v162 = v155 / (float)*(unsigned int *)(v161 + 4 * v149);
          float v163 = v157 / (float)(*(_DWORD *)(v161 + 4 * v147) + 1);
          if (!(v151 | v147)
            && a12
            && ((v164 = cost<unsigned int>(a3, *(_DWORD *)*a1, **(_DWORD **)a2), std::string v158 = a15, v164 < v160)
              ? (BOOL v165 = v164 < v162)
              : (BOOL v165 = 0),
                v165 ? (BOOL v166 = v164 < v163) : (BOOL v166 = 0),
                v166))
          {
            uint64_t v108 = *a13;
            *(float *)(*(void *)(*a13 + v150 + 24) + 4 * v149) = v164;
            *(void *)(*(void *)(*a14 + v150 + 24) + 8 * v149) = 0;
            uint64_t v173 = *(void *)(*a15 + v150 + 24);
            int v174 = 1;
          }
          else if (v160 > v162 || v160 > v163)
          {
            uint64_t v108 = *a13;
            uint64_t v168 = *(void *)(*a13 + v150 + 24);
            int v169 = a11 + v151;
            if (v162 <= v163)
            {
              *(float *)(v168 + 4 * v149) = v155;
              unint64_t v175 = (_DWORD *)(*(void *)(*a14 + v150 + 24) + 8 * v149);
              *unint64_t v175 = v169;
              v175[1] = v149 + HIDWORD(a11);
              uint64_t v171 = (void *)(*v158 + v150);
              int v174 = *(_DWORD *)(*v171 + 4 * v149);
            }
            else
            {
              *(float *)(v168 + 4 * v149) = v157;
              unint64_t v170 = (_DWORD *)(*(void *)(*a14 + v150 + 24) + 8 * v149);
              *unint64_t v170 = v169;
              v170[1] = v184;
              uint64_t v171 = (void *)(*v158 + v150);
              int v174 = *(_DWORD *)(*v171 + 4 * v147) + 1;
            }
            uint64_t v173 = v171[3];
          }
          else
          {
            uint64_t v108 = *a13;
            *(float *)(*(void *)(*a13 + v150 + 24) + 4 * v149) = v153;
            uint64_t v172 = (_DWORD *)(*(void *)(*a14 + v150 + 24) + 8 * v149);
            *uint64_t v172 = a11 + v151 + 1;
            v172[1] = v184;
            uint64_t v173 = *(void *)(*v158 + v150 + 24);
            int v174 = *(_DWORD *)(v173 + 4 * v147) + 1;
          }
          *(_DWORD *)(v173 + 4 * v149) = v174;
          v150 += 24;
          ++v151;
        }
        while (v148 != v150);
      }
      ++v147;
      uint64_t v117 = v180;
    }
    while (v149 != (v176 >> 2));
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        uint64_t v16 = a1[1];
        do
        {
          float v18 = *(void **)(v16 - 24);
          v16 -= 24;
          uint64_t v17 = v18;
          if (v18)
          {
            *(void *)(v4 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      v20[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v10);
      unint64_t v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 3 * v10;
    unint64_t v12 = (char *)operator new(24 * v10);
    uint64_t v13 = &v12[24 * v5];
    size_t v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v3[2];
        void *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      size_t v19 = *(void **)a1;
      uint64_t v3 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        unint64_t v20 = v3;
        do
        {
          uint64_t v22 = (void *)*(v20 - 3);
          v20 -= 3;
          unint64_t v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          uint64_t v3 = v20;
        }
        while (v20 != v19);
        uint64_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      uint64_t v24 = *(void **)(a1 + 8);
      do
      {
        unint64_t v26 = (void *)*(v24 - 3);
        v24 -= 3;
        unint64_t v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        uint64_t v3 = v24;
      }
      while (v24 != v23);
    }
    *(void *)(a1 + 8) = v23;
  }
}

float cost<unsigned int>(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  if (a1[3])
  {
    unint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(*a1, a1[1], a2);
    if (v5)
    {
      unint64_t v6 = v5;
      long long v26 = 0u;
      long long v27 = 0u;
      float v28 = *((float *)v5 + 14);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&v26, v5[4]);
      uint64_t v7 = v6[5];
      if (v7)
      {
        unint64_t v8 = *((void *)&v26 + 1);
        while (1)
        {
          unint64_t v9 = *(unsigned int *)(v7 + 16);
          if (v8)
          {
            uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
            v10.i16[0] = vaddlv_u8(v10);
            if (v10.u32[0] > 1uLL)
            {
              unint64_t v3 = *(unsigned int *)(v7 + 16);
              if (v8 <= v9) {
                unint64_t v3 = v9 % v8;
              }
            }
            else
            {
              unint64_t v3 = (v8 - 1) & v9;
            }
            uint64_t v11 = *(uint64_t ***)(v26 + 8 * v3);
            if (v11)
            {
              for (unint64_t i = *v11; i; unint64_t i = (uint64_t *)*i)
              {
                unint64_t v13 = i[1];
                if (v13 == v9)
                {
                  if (*((_DWORD *)i + 4) == v9) {
                    goto LABEL_43;
                  }
                }
                else
                {
                  if (v10.u32[0] > 1uLL)
                  {
                    if (v13 >= v8) {
                      v13 %= v8;
                    }
                  }
                  else
                  {
                    v13 &= v8 - 1;
                  }
                  if (v13 != v3) {
                    break;
                  }
                }
              }
            }
          }
          size_t v14 = operator new(0x18uLL);
          void *v14 = 0;
          v14[1] = v9;
          v14[2] = *(void *)(v7 + 16);
          float v15 = (float)(unint64_t)(*((void *)&v27 + 1) + 1);
          if (!v8 || (float)(v28 * (float)v8) < v15)
          {
            BOOL v16 = (v8 & (v8 - 1)) != 0;
            if (v8 < 3) {
              BOOL v16 = 1;
            }
            unint64_t v17 = v16 | (2 * v8);
            unint64_t v18 = vcvtps_u32_f32(v15 / v28);
            if (v17 <= v18) {
              size_t v19 = v18;
            }
            else {
              size_t v19 = v17;
            }
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&v26, v19);
            unint64_t v8 = *((void *)&v26 + 1);
            if ((*((void *)&v26 + 1) & (*((void *)&v26 + 1) - 1)) != 0)
            {
              if (*((void *)&v26 + 1) <= v9) {
                unint64_t v3 = v9 % *((void *)&v26 + 1);
              }
              else {
                unint64_t v3 = v9;
              }
            }
            else
            {
              unint64_t v3 = (DWORD2(v26) - 1) & v9;
            }
          }
          uint64_t v20 = v26;
          unint64_t v21 = *(void **)(v26 + 8 * v3);
          if (v21)
          {
            void *v14 = *v21;
          }
          else
          {
            void *v14 = v27;
            *(void *)&long long v27 = v14;
            *(void *)(v20 + 8 * v3) = &v27;
            if (!*v14) {
              goto LABEL_42;
            }
            unint64_t v22 = *(void *)(*v14 + 8);
            if ((v8 & (v8 - 1)) != 0)
            {
              if (v22 >= v8) {
                v22 %= v8;
              }
            }
            else
            {
              v22 &= v8 - 1;
            }
            unint64_t v21 = (void *)(v26 + 8 * v22);
          }
          void *v21 = v14;
LABEL_42:
          ++*((void *)&v27 + 1);
LABEL_43:
          uint64_t v7 = *(void *)v7;
          if (!v7) {
            goto LABEL_50;
          }
        }
      }
      unint64_t v8 = *((void *)&v26 + 1);
LABEL_50:
      uint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(v26, v8, a3);
      if (v24) {
        float v23 = *((float *)v24 + 5);
      }
      else {
        float v23 = 1.0;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)&v26);
    }
    else
    {
      return 1.0;
    }
  }
  else if (a2 == a3)
  {
    return 0.0;
  }
  else
  {
    return 1.0;
  }
  return v23;
}

void sub_1C959F1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void marrs::mrr::mr::ProtocolFilter::~ProtocolFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1CB786E50);
}

void marrs::mrr::mr::ProtocolFilter::filterEntities(unsigned char *a1@<X8>)
{
  uint64_t v2 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint8x8_t v3 = 0;
    _os_log_impl(&dword_1C9555000, v2, OS_LOG_TYPE_INFO, "[ProtocolFilter] Not implemented yet, returning input list", v3, 2u);
  }
  *a1 = 0;
  a1[24] = 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
LABEL_2:
  uint64_t v219 = a2 - 344;
  unint64_t v221 = a2;
  uint64_t v215 = a2 - 1032;
  uint64_t v217 = a2 - 688;
  uint64_t v211 = (unsigned int *)(a2 - 272);
  uint64_t v213 = (unsigned int *)(a2 - 268);
  unint64_t v210 = a2 - 612;
  unint64_t i = v8;
  while (1)
  {
    uint64_t v8 = i;
    uint64_t v10 = a2 - i;
    uint64_t v11 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - i) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v79 = *(_DWORD *)(v8 + 76);
          BOOL v80 = *v213 >= v79;
          if (*v213 == v79 && (v81 = *(_DWORD *)(v8 + 72), BOOL v80 = *v211 >= v81, *v211 == v81))
          {
            if (*(float *)(a2 - 256) <= *(float *)(v8 + 88)) {
              return result;
            }
          }
          else if (v80)
          {
            return result;
          }
          __n128 result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v8, v219);
          break;
        case 3:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v8 + 344, v219);
        case 4:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v8 + 344, v8 + 688, v219);
        case 5:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(v8, v8 + 344, v8 + 688, v8 + 1032, v219);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 8255) {
      break;
    }
    if (!a3)
    {
      if (v8 == a2) {
        return result;
      }
      int64_t v220 = (unint64_t)(v11 - 2) >> 1;
      int64_t v104 = v220;
      while (1)
      {
        int64_t v105 = v104;
        if (v220 < v104) {
          goto LABEL_246;
        }
        uint64_t v106 = (2 * v104) | 1;
        uint64_t v107 = v8 + 344 * v106;
        if (2 * v104 + 2 < v11)
        {
          unsigned int v108 = *(_DWORD *)(v107 + 76);
          unsigned int v109 = *(_DWORD *)(v107 + 420);
          BOOL v110 = v108 >= v109;
          if (v108 == v109)
          {
            unsigned int v111 = *(_DWORD *)(v107 + 72);
            unsigned int v112 = *(_DWORD *)(v107 + 416);
            BOOL v110 = v111 >= v112;
            if (v111 == v112)
            {
              if (*(float *)(v8 + 344 * v106 + 88) <= *(float *)(v107 + 432)) {
                goto LABEL_208;
              }
LABEL_207:
              v107 += 344;
              uint64_t v106 = 2 * v104 + 2;
              goto LABEL_208;
            }
          }
          if (!v110) {
            goto LABEL_207;
          }
        }
LABEL_208:
        uint64_t v113 = v8 + 344 * v104;
        unsigned int v114 = *(_DWORD *)(v107 + 76);
        unsigned int v115 = *(_DWORD *)(v113 + 76);
        BOOL v116 = v114 >= v115;
        if (v114 == v115
          && (v117 = *(_DWORD *)(v107 + 72), v118 = *(_DWORD *)(v113 + 72), BOOL v116 = v117 >= v118, v117 == v118))
        {
          if (*(float *)(v107 + 88) > *(float *)(v8 + 344 * v105 + 88)) {
            goto LABEL_246;
          }
        }
        else if (!v116)
        {
          goto LABEL_246;
        }
        MEMORY[0x1CB7863F0](v246, v8 + 344 * v105);
        uint64_t v119 = v8 + 344 * v105;
        float v249 = *(float *)(v119 + 88);
        LOBYTE(v250) = 0;
        char v267 = 0;
        if (*(unsigned char *)(v119 + 312))
        {
          uint64_t v120 = v8 + 344 * v105;
          uint64_t v121 = *(void *)(v120 + 96);
          v120 += 96;
          uint64_t v250 = v121;
          long long v122 = *(_OWORD *)(v120 + 8);
          uint64_t v252 = *(void *)(v120 + 24);
          long long v251 = v122;
          *(void *)(v120 + 16) = 0;
          *(void *)(v120 + 24) = 0;
          *(void *)(v120 + 8) = 0;
          long long v123 = *(_OWORD *)(v120 + 32);
          uint64_t v254 = *(void *)(v120 + 48);
          long long v253 = v123;
          *(void *)(v120 + 40) = 0;
          *(void *)(v120 + 48) = 0;
          *(void *)(v120 + 32) = 0;
          long long v124 = *(_OWORD *)(v120 + 56);
          uint64_t v256 = *(void *)(v120 + 72);
          long long v255 = v124;
          *(void *)(v120 + 64) = 0;
          *(void *)(v120 + 72) = 0;
          *(void *)(v120 + 56) = 0;
          long long v125 = *(_OWORD *)(v120 + 80);
          *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v120 + 92);
          v257[0] = v125;
          uint64_t v259 = 0;
          long long v258 = 0uLL;
          long long v258 = *(_OWORD *)(v120 + 112);
          uint64_t v259 = *(void *)(v120 + 128);
          *(void *)(v120 + 112) = 0;
          *(void *)(v120 + 120) = 0;
          *(void *)(v120 + 128) = 0;
          long long v126 = *(_OWORD *)(v120 + 136);
          uint64_t v261 = *(void *)(v120 + 152);
          long long v260 = v126;
          *(void *)(v120 + 144) = 0;
          *(void *)(v120 + 152) = 0;
          *(void *)(v120 + 136) = 0;
          int v262 = *(_DWORD *)(v120 + 160);
          long long v127 = *(_OWORD *)(v120 + 168);
          uint64_t v264 = *(void *)(v120 + 184);
          long long __p = v127;
          *(void *)(v120 + 176) = 0;
          *(void *)(v120 + 184) = 0;
          *(void *)(v120 + 168) = 0;
          long long v265 = 0uLL;
          uint64_t v266 = 0;
          long long v265 = *(_OWORD *)(v120 + 192);
          uint64_t v266 = *(void *)(v120 + 208);
          *(void *)(v120 + 192) = 0;
          *(void *)(v120 + 200) = 0;
          *(void *)(v120 + 208) = 0;
          char v267 = 1;
        }
        uint64_t v128 = v8 + 344 * v105;
        long long v268 = *(_OWORD *)(v128 + 320);
        uint64_t v269 = *(void *)(v128 + 336);
        *(void *)(v128 + 320) = 0;
        *(void *)(v128 + 328) = 0;
        *(void *)(v128 + 336) = 0;
        while (1)
        {
          uint64_t v129 = v107;
          sirinluinternal::MatchingSpan::operator=();
          *(_DWORD *)(v113 + 88) = *(_DWORD *)(v107 + 88);
          uint64_t v130 = v107 + 96;
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v113 + 96, v107 + 96);
          BOOL v131 = *(void **)(v113 + 320);
          if (v131)
          {
            *(void *)(v113 + 328) = v131;
            operator delete(v131);
            *(void *)(v113 + 320) = 0;
            *(void *)(v113 + 328) = 0;
            *(void *)(v113 + 336) = 0;
          }
          std::string v132 = (void *)(v107 + 320);
          *(_OWORD *)(v113 + 320) = *(_OWORD *)(v107 + 320);
          *(void *)(v113 + 336) = *(void *)(v107 + 336);
          *(void *)(v107 + 320) = 0;
          *(void *)(v107 + 328) = 0;
          *(void *)(v107 + 336) = 0;
          if (v220 < v106) {
            break;
          }
          uint64_t v133 = (2 * v106) | 1;
          uint64_t v107 = v8 + 344 * v133;
          if (2 * v106 + 2 >= v11) {
            goto LABEL_227;
          }
          unsigned int v134 = *(_DWORD *)(v107 + 76);
          unsigned int v135 = *(_DWORD *)(v107 + 420);
          BOOL v136 = v134 >= v135;
          if (v134 != v135
            || (v137 = *(_DWORD *)(v107 + 72), v138 = *(_DWORD *)(v107 + 416), BOOL v136 = v137 >= v138, v137 != v138))
          {
            if (v136) {
              goto LABEL_227;
            }
LABEL_226:
            v107 += 344;
            uint64_t v133 = 2 * v106 + 2;
            goto LABEL_227;
          }
          if (*(float *)(v8 + 344 * v133 + 88) > *(float *)(v107 + 432)) {
            goto LABEL_226;
          }
LABEL_227:
          unsigned int v139 = *(_DWORD *)(v107 + 76);
          BOOL v140 = v139 >= v248;
          if (v139 == v248 && (unsigned int v141 = *(_DWORD *)(v107 + 72), v140 = v141 >= v247, v141 == v247))
          {
            uint64_t v113 = v129;
            uint64_t v106 = v133;
            if (*(float *)(v107 + 88) > v249) {
              break;
            }
          }
          else
          {
            uint64_t v113 = v129;
            uint64_t v106 = v133;
            if (!v140) {
              break;
            }
          }
        }
        sirinluinternal::MatchingSpan::operator=();
        *(float *)(v129 + 88) = v249;
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v130, (uint64_t)&v250);
        uint64_t v142 = *(void **)(v129 + 320);
        if (v142)
        {
          *(void *)(v129 + 328) = v142;
          operator delete(v142);
          *std::string v132 = 0;
          *(void *)(v129 + 328) = 0;
          *(void *)(v129 + 336) = 0;
        }
        *(_OWORD *)(v129 + 320) = v268;
        *(void *)(v129 + 336) = v269;
        long long v268 = 0uLL;
        uint64_t v269 = 0;
        if (v267)
        {
          v223[0] = (void **)&v265;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v223);
          if (SHIBYTE(v264) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v261) < 0) {
            operator delete((void *)v260);
          }
          v223[0] = (void **)&v258;
          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v223);
          if (SHIBYTE(v256) < 0) {
            operator delete((void *)v255);
          }
          if (SHIBYTE(v254) < 0) {
            operator delete((void *)v253);
          }
          if (SHIBYTE(v252) < 0) {
            operator delete((void *)v251);
          }
        }
        MEMORY[0x1CB786420](v246);
LABEL_246:
        int64_t v104 = v105 - 1;
        if (!v105)
        {
          int64_t v143 = v10 / 0x158uLL;
          uint64_t v216 = (long long *)(v8 + 104);
          v212 = (long long *)(v8 + 152);
          uint64_t v214 = (long long *)(v8 + 128);
          unint64_t v209 = (long long *)(v8 + 232);
          uint64_t v208 = (long long *)(v8 + 264);
          unint64_t v144 = v221;
          while (1)
          {
            MEMORY[0x1CB7863F0](v223, v8);
            int v224 = *(_DWORD *)(v8 + 88);
            LOBYTE(v225) = 0;
            char v242 = 0;
            if (*(unsigned char *)(v8 + 312))
            {
              uint64_t v225 = *(void *)(v8 + 96);
              uint64_t v145 = *(void *)(v8 + 120);
              long long v226 = *v216;
              uint64_t v227 = v145;
              *(void *)(v8 + 112) = 0;
              *(void *)(v8 + 120) = 0;
              *(void *)uint64_t v216 = 0;
              uint64_t v146 = *(void *)(v8 + 144);
              long long v228 = *v214;
              uint64_t v229 = v146;
              *(void *)(v8 + 136) = 0;
              *(void *)(v8 + 144) = 0;
              *(void *)uint64_t v214 = 0;
              long long v147 = *v212;
              uint64_t v231 = *(void *)(v8 + 168);
              long long v230 = v147;
              *(void *)v212 = 0;
              *(void *)(v8 + 160) = 0;
              *(void *)(v8 + 168) = 0;
              long long v148 = *(_OWORD *)(v8 + 176);
              *(_OWORD *)((char *)v232 + 12) = *(_OWORD *)(v8 + 188);
              v232[0] = v148;
              uint64_t v234 = 0;
              long long v233 = 0uLL;
              long long v233 = *(_OWORD *)(v8 + 208);
              uint64_t v234 = *(void *)(v8 + 224);
              *(void *)(v8 + 208) = 0;
              *(void *)(v8 + 216) = 0;
              *(void *)(v8 + 224) = 0;
              long long v149 = *v209;
              uint64_t v236 = *(void *)(v8 + 248);
              long long v235 = v149;
              *(void *)unint64_t v209 = 0;
              *(void *)(v8 + 240) = 0;
              *(void *)(v8 + 248) = 0;
              int v237 = *(_DWORD *)(v8 + 256);
              long long v150 = *v208;
              uint64_t v239 = *(void *)(v8 + 280);
              long long v238 = v150;
              *(void *)uint64_t v208 = 0;
              *(void *)(v8 + 272) = 0;
              *(void *)(v8 + 280) = 0;
              long long v240 = 0uLL;
              uint64_t v241 = 0;
              long long v240 = *(_OWORD *)(v8 + 288);
              uint64_t v241 = *(void *)(v8 + 304);
              *(void *)(v8 + 288) = 0;
              *(void *)(v8 + 296) = 0;
              *(void *)(v8 + 304) = 0;
              char v242 = 1;
            }
            uint64_t v151 = 0;
            *(_OWORD *)v243 = *(_OWORD *)(v8 + 320);
            uint64_t v244 = *(void *)(v8 + 336);
            *(void *)(v8 + 320) = 0;
            *(void *)(v8 + 328) = 0;
            *(void *)(v8 + 336) = 0;
            uint64_t v152 = v8;
            do
            {
              uint64_t v153 = v151 + 1;
              uint64_t v154 = v152 + 344 * (v151 + 1);
              uint64_t v155 = 2 * v151;
              uint64_t v151 = (2 * v151) | 1;
              int64_t v156 = v155 + 2;
              if (v156 >= v143) {
                goto LABEL_258;
              }
              unsigned int v157 = *(_DWORD *)(v154 + 76);
              unsigned int v158 = *(_DWORD *)(v154 + 420);
              BOOL v159 = v157 >= v158;
              if (v157 != v158
                || (unsigned int v160 = *(_DWORD *)(v154 + 72), v161 = *(_DWORD *)(v154 + 416), v159 = v160 >= v161, v160 != v161))
              {
                if (v159) {
                  goto LABEL_258;
                }
LABEL_257:
                v154 += 344;
                uint64_t v151 = v156;
                goto LABEL_258;
              }
              if (*(float *)(v152 + 344 * v153 + 88) > *(float *)(v154 + 432)) {
                goto LABEL_257;
              }
LABEL_258:
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v152 + 88) = *(_DWORD *)(v154 + 88);
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v152 + 96, v154 + 96);
              float v162 = *(void **)(v152 + 320);
              if (v162)
              {
                *(void *)(v152 + 328) = v162;
                operator delete(v162);
                *(void *)(v152 + 320) = 0;
                *(void *)(v152 + 328) = 0;
                *(void *)(v152 + 336) = 0;
              }
              float v163 = (void *)(v154 + 320);
              *(_OWORD *)(v152 + 320) = *(_OWORD *)(v154 + 320);
              *(void *)(v152 + 336) = *(void *)(v154 + 336);
              *(void *)(v154 + 320) = 0;
              *(void *)(v154 + 328) = 0;
              *(void *)(v154 + 336) = 0;
              uint64_t v152 = v154;
            }
            while (v151 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
            unint64_t v222 = v144 - 344;
            if (v154 == v144 - 344)
            {
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v154 + 88) = v224;
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v154 + 96, (uint64_t)&v225);
              unint64_t v175 = *(void **)(v154 + 320);
              if (v175)
              {
                *(void *)(v154 + 328) = v175;
                operator delete(v175);
                *float v163 = 0;
                *(void *)(v154 + 328) = 0;
                *(void *)(v154 + 336) = 0;
              }
              *(_OWORD *)(v154 + 320) = *(_OWORD *)v243;
              *(void *)(v154 + 336) = v244;
              v243[0] = 0;
              v243[1] = 0;
              uint64_t v244 = 0;
            }
            else
            {
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v154 + 88) = *(_DWORD *)(v144 - 256);
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v154 + 96, v144 - 248);
              float v164 = *(void **)(v154 + 320);
              if (v164)
              {
                *(void *)(v154 + 328) = v164;
                operator delete(v164);
                *float v163 = 0;
                *(void *)(v154 + 328) = 0;
                *(void *)(v154 + 336) = 0;
              }
              BOOL v165 = (void *)(v144 - 24);
              *(_OWORD *)(v154 + 320) = *(_OWORD *)(v144 - 24);
              *(void *)(v154 + 336) = *(void *)(v144 - 8);
              void *v165 = 0;
              v165[1] = 0;
              v165[2] = 0;
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v144 - 256) = v224;
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v144 - 248, (uint64_t)&v225);
              BOOL v166 = *(void **)(v144 - 24);
              if (v166)
              {
                *(void *)(v144 - 16) = v166;
                operator delete(v166);
              }
              *(_OWORD *)(v144 - 24) = *(_OWORD *)v243;
              *(void *)(v144 - 8) = v244;
              v243[0] = 0;
              v243[1] = 0;
              uint64_t v244 = 0;
              uint64_t v167 = v154 + 344 - v8;
              if (v167 >= 345)
              {
                unint64_t v168 = (v167 / 0x158uLL - 2) >> 1;
                unint64_t v169 = v8 + 344 * v168;
                unsigned int v170 = *(_DWORD *)(v169 + 76);
                unsigned int v171 = *(_DWORD *)(v154 + 76);
                BOOL v172 = v170 >= v171;
                if (v170 == v171
                  && (v173 = *(_DWORD *)(v169 + 72), v174 = *(_DWORD *)(v154 + 72), BOOL v172 = v173 >= v174, v173 == v174))
                {
                  if (*(float *)(v8 + 344 * v168 + 88) <= *(float *)(v154 + 88)) {
                    goto LABEL_302;
                  }
                }
                else if (v172)
                {
                  goto LABEL_302;
                }
                MEMORY[0x1CB7863F0](v246, v154);
                float v249 = *(float *)(v154 + 88);
                LOBYTE(v250) = 0;
                char v267 = 0;
                if (*(unsigned char *)(v154 + 312))
                {
                  uint64_t v250 = *(void *)(v154 + 96);
                  long long v176 = *(_OWORD *)(v154 + 104);
                  uint64_t v252 = *(void *)(v154 + 120);
                  long long v251 = v176;
                  *(void *)(v154 + 112) = 0;
                  *(void *)(v154 + 120) = 0;
                  *(void *)(v154 + 104) = 0;
                  long long v177 = *(_OWORD *)(v154 + 128);
                  uint64_t v254 = *(void *)(v154 + 144);
                  long long v253 = v177;
                  *(void *)(v154 + 136) = 0;
                  *(void *)(v154 + 144) = 0;
                  *(void *)(v154 + 128) = 0;
                  long long v178 = *(_OWORD *)(v154 + 152);
                  uint64_t v256 = *(void *)(v154 + 168);
                  long long v255 = v178;
                  *(void *)(v154 + 160) = 0;
                  *(void *)(v154 + 168) = 0;
                  *(void *)(v154 + 152) = 0;
                  long long v179 = *(_OWORD *)(v154 + 176);
                  *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v154 + 188);
                  v257[0] = v179;
                  uint64_t v259 = 0;
                  long long v258 = 0uLL;
                  long long v258 = *(_OWORD *)(v154 + 208);
                  uint64_t v259 = *(void *)(v154 + 224);
                  *(void *)(v154 + 208) = 0;
                  *(void *)(v154 + 216) = 0;
                  *(void *)(v154 + 224) = 0;
                  long long v180 = *(_OWORD *)(v154 + 232);
                  uint64_t v261 = *(void *)(v154 + 248);
                  long long v260 = v180;
                  *(void *)(v154 + 240) = 0;
                  *(void *)(v154 + 248) = 0;
                  *(void *)(v154 + 232) = 0;
                  int v262 = *(_DWORD *)(v154 + 256);
                  long long v181 = *(_OWORD *)(v154 + 264);
                  uint64_t v264 = *(void *)(v154 + 280);
                  long long __p = v181;
                  *(void *)(v154 + 272) = 0;
                  *(void *)(v154 + 280) = 0;
                  *(void *)(v154 + 264) = 0;
                  long long v265 = 0uLL;
                  uint64_t v266 = 0;
                  long long v265 = *(_OWORD *)(v154 + 288);
                  uint64_t v266 = *(void *)(v154 + 304);
                  *(void *)(v154 + 288) = 0;
                  *(void *)(v154 + 296) = 0;
                  *(void *)(v154 + 304) = 0;
                  char v267 = 1;
                }
                long long v268 = *(_OWORD *)(v154 + 320);
                uint64_t v269 = *(void *)(v154 + 336);
                *float v163 = 0;
                *(void *)(v154 + 328) = 0;
                *(void *)(v154 + 336) = 0;
                while (1)
                {
                  unint64_t v182 = v169;
                  sirinluinternal::MatchingSpan::operator=();
                  *(_DWORD *)(v154 + 88) = *(_DWORD *)(v169 + 88);
                  uint64_t v183 = v169 + 96;
                  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v154 + 96, v169 + 96);
                  int v184 = *(void **)(v154 + 320);
                  if (v184)
                  {
                    *(void *)(v154 + 328) = v184;
                    operator delete(v184);
                    *(void *)(v154 + 320) = 0;
                    *(void *)(v154 + 328) = 0;
                    *(void *)(v154 + 336) = 0;
                  }
                  *(_OWORD *)(v154 + 320) = *(_OWORD *)(v169 + 320);
                  *(void *)(v154 + 336) = *(void *)(v169 + 336);
                  *(void *)(v169 + 320) = 0;
                  *(void *)(v169 + 328) = 0;
                  *(void *)(v169 + 336) = 0;
                  if (!v168) {
                    break;
                  }
                  unint64_t v168 = (v168 - 1) >> 1;
                  unint64_t v169 = v8 + 344 * v168;
                  unsigned int v185 = *(_DWORD *)(v169 + 76);
                  BOOL v186 = v185 >= v248;
                  if (v185 == v248 && (v187 = *(_DWORD *)(v169 + 72), BOOL v186 = v187 >= v247, v187 == v247))
                  {
                    uint64_t v154 = v182;
                    if (*(float *)(v8 + 344 * v168 + 88) <= v249) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t v154 = v182;
                    if (v186) {
                      break;
                    }
                  }
                }
                sirinluinternal::MatchingSpan::operator=();
                *(float *)(v182 + 88) = v249;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v183, (uint64_t)&v250);
                unsigned int v188 = *(void **)(v182 + 320);
                if (v188)
                {
                  *(void *)(v182 + 328) = v188;
                  operator delete(v188);
                }
                *(_OWORD *)(v182 + 320) = v268;
                *(void *)(v182 + 336) = v269;
                long long v268 = 0uLL;
                uint64_t v269 = 0;
                if (v267)
                {
                  unint64_t v245 = (void **)&v265;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v245);
                  if (SHIBYTE(v264) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v261) < 0) {
                    operator delete((void *)v260);
                  }
                  unint64_t v245 = (void **)&v258;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v245);
                  if (SHIBYTE(v256) < 0) {
                    operator delete((void *)v255);
                  }
                  if (SHIBYTE(v254) < 0) {
                    operator delete((void *)v253);
                  }
                  if (SHIBYTE(v252) < 0) {
                    operator delete((void *)v251);
                  }
                }
                MEMORY[0x1CB786420](v246);
                if (v243[0])
                {
                  v243[1] = v243[0];
                  operator delete(v243[0]);
                }
              }
            }
LABEL_302:
            unint64_t v144 = v222;
            if (v242)
            {
              v246[0] = (void **)&v240;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v246);
              if (SHIBYTE(v239) < 0) {
                operator delete((void *)v238);
              }
              if (SHIBYTE(v236) < 0) {
                operator delete((void *)v235);
              }
              v246[0] = (void **)&v233;
              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v246);
              if (SHIBYTE(v231) < 0) {
                operator delete((void *)v230);
              }
              if (SHIBYTE(v229) < 0) {
                operator delete((void *)v228);
              }
              if (SHIBYTE(v227) < 0) {
                operator delete((void *)v226);
              }
            }
            __n128 result = MEMORY[0x1CB786420](v223);
            if (v143-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = v8 + 344 * ((unint64_t)v11 >> 1);
    if ((unint64_t)v10 < 0xAC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v13, v8, v219);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v13, v219);
      uint64_t v14 = 344 * v12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8 + 344, v14 + v8 - 344, v217);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8 + 688, v8 + 344 + v14, v215);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v14 + v8 - 344, v13, v8 + 344 + v14);
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v8, v13);
    }
    --a3;
    a2 = v221;
    if (a4) {
      goto LABEL_21;
    }
    unsigned int v15 = *(_DWORD *)(v8 - 268);
    unsigned int v16 = *(_DWORD *)(v8 + 76);
    BOOL v17 = v15 >= v16;
    if (v15 == v16)
    {
      unsigned int v18 = *(_DWORD *)(v8 - 272);
      unsigned int v19 = *(_DWORD *)(v8 + 72);
      BOOL v17 = v18 >= v19;
      if (v18 == v19)
      {
        if (*(float *)(v8 - 256) <= *(float *)(v8 + 88)) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
    }
    if (v17)
    {
LABEL_14:
      MEMORY[0x1CB7863F0](v246, v8);
      float v20 = *(float *)(v8 + 88);
      float v249 = v20;
      LOBYTE(v250) = 0;
      char v267 = 0;
      if (*(unsigned char *)(v8 + 312))
      {
        uint64_t v250 = *(void *)(v8 + 96);
        uint64_t v21 = *(void *)(v8 + 120);
        long long v251 = *(_OWORD *)(v8 + 104);
        uint64_t v252 = v21;
        *(void *)(v8 + 112) = 0;
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 104) = 0;
        uint64_t v22 = *(void *)(v8 + 144);
        long long v253 = *(_OWORD *)(v8 + 128);
        uint64_t v254 = v22;
        *(void *)(v8 + 136) = 0;
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 128) = 0;
        long long v23 = *(_OWORD *)(v8 + 152);
        uint64_t v256 = *(void *)(v8 + 168);
        long long v255 = v23;
        *(void *)(v8 + 152) = 0;
        *(void *)(v8 + 160) = 0;
        *(void *)(v8 + 168) = 0;
        long long v24 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v8 + 188);
        v257[0] = v24;
        uint64_t v259 = 0;
        long long v258 = 0uLL;
        long long v258 = *(_OWORD *)(v8 + 208);
        uint64_t v259 = *(void *)(v8 + 224);
        *(void *)(v8 + 208) = 0;
        *(void *)(v8 + 216) = 0;
        *(void *)(v8 + 224) = 0;
        long long v25 = *(_OWORD *)(v8 + 232);
        uint64_t v261 = *(void *)(v8 + 248);
        long long v260 = v25;
        *(void *)(v8 + 232) = 0;
        *(void *)(v8 + 240) = 0;
        *(void *)(v8 + 248) = 0;
        int v262 = *(_DWORD *)(v8 + 256);
        long long v26 = *(_OWORD *)(v8 + 264);
        uint64_t v264 = *(void *)(v8 + 280);
        long long __p = v26;
        *(void *)(v8 + 264) = 0;
        *(void *)(v8 + 272) = 0;
        *(void *)(v8 + 280) = 0;
        long long v265 = 0uLL;
        uint64_t v266 = 0;
        long long v265 = *(_OWORD *)(v8 + 288);
        uint64_t v266 = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        char v267 = 1;
      }
      long long v268 = *(_OWORD *)(v8 + 320);
      uint64_t v269 = *(void *)(v8 + 336);
      *(void *)(v8 + 320) = 0;
      *(void *)(v8 + 328) = 0;
      *(void *)(v8 + 336) = 0;
      unsigned int v27 = *v213;
      if (v248 == *v213)
      {
        unsigned int v28 = v247;
        if (v247 == *v211)
        {
          if (v20 > *(float *)(v221 - 256)) {
            goto LABEL_93;
          }
        }
        else if (v247 < *v211)
        {
          goto LABEL_93;
        }
      }
      else if (v248 < v27)
      {
        unsigned int v28 = v247;
LABEL_93:
        for (unint64_t i = v8 + 344; ; i += 344)
        {
          unsigned int v60 = *(_DWORD *)(i + 76);
          BOOL v61 = v248 >= v60;
          if (v248 == v60 && (v62 = *(_DWORD *)(i + 72), BOOL v61 = v28 >= v62, v28 == v62))
          {
            if (v20 > *(float *)(i + 88)) {
              goto LABEL_109;
            }
          }
          else if (!v61)
          {
            goto LABEL_109;
          }
        }
      }
      for (unint64_t i = v8 + 344; i < v221; i += 344)
      {
        unsigned int v63 = *(_DWORD *)(i + 76);
        BOOL v64 = v248 >= v63;
        if (v248 == v63 && (v65 = *(_DWORD *)(i + 72), BOOL v64 = v247 >= v65, v247 == v65))
        {
          if (v20 > *(float *)(i + 88)) {
            break;
          }
        }
        else if (!v64)
        {
          break;
        }
      }
LABEL_109:
      unint64_t v66 = v221;
      if (i >= v221) {
        goto LABEL_130;
      }
      for (std::string::size_type j = (float *)v210; ; j -= 86)
      {
        BOOL v68 = v248 >= v27;
        if (v248 != v27) {
          break;
        }
        unsigned int v69 = *((_DWORD *)j + 85);
        BOOL v68 = v247 >= v69;
        if (v247 != v69) {
          break;
        }
        if (v20 <= j[89]) {
          goto LABEL_117;
        }
LABEL_116:
        unsigned int v27 = *(_DWORD *)j;
      }
      if (!v68) {
        goto LABEL_116;
      }
LABEL_117:
      unint64_t v66 = (unint64_t)(j + 67);
LABEL_130:
      if (i < v66)
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(i, v66);
        for (i += 344; ; i += 344)
        {
          unsigned int v70 = *(_DWORD *)(i + 76);
          BOOL v71 = v248 >= v70;
          if (v248 == v70 && (v72 = *(_DWORD *)(i + 72), BOOL v71 = v247 >= v72, v247 == v72))
          {
            if (v249 > *(float *)(i + 88))
            {
              do
              {
LABEL_127:
                while (1)
                {
                  v66 -= 344;
                  unsigned int v73 = *(_DWORD *)(v66 + 76);
                  BOOL v74 = v248 >= v73;
                  if (v248 == v73)
                  {
                    unsigned int v75 = *(_DWORD *)(v66 + 72);
                    BOOL v74 = v247 >= v75;
                    if (v247 == v75) {
                      break;
                    }
                  }
                  if (v74) {
                    goto LABEL_130;
                  }
                }
              }
              while (v249 > *(float *)(v66 + 88));
              goto LABEL_130;
            }
          }
          else if (!v71)
          {
            goto LABEL_127;
          }
        }
      }
      if (i - 344 != v8)
      {
        sirinluinternal::MatchingSpan::operator=();
        *(_DWORD *)(v8 + 88) = *(_DWORD *)(i - 256);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v8 + 96, i - 248);
        uint64_t v76 = *(void **)(v8 + 320);
        if (v76)
        {
          *(void *)(v8 + 328) = v76;
          operator delete(v76);
          *(void *)(v8 + 320) = 0;
          *(void *)(v8 + 328) = 0;
          *(void *)(v8 + 336) = 0;
          a2 = v221;
        }
        float v77 = (void *)(i - 24);
        *(_OWORD *)(v8 + 320) = *(_OWORD *)(i - 24);
        *(void *)(v8 + 336) = *(void *)(i - 8);
        *float v77 = 0;
        v77[1] = 0;
        v77[2] = 0;
      }
      sirinluinternal::MatchingSpan::operator=();
      *(float *)(i - 256) = v249;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(i - 248, (uint64_t)&v250);
      unint64_t v78 = *(void **)(i - 24);
      if (v78)
      {
        *(void *)(i - 16) = v78;
        operator delete(v78);
        *(void *)(i - 24) = 0;
        *(void *)(i - 16) = 0;
        *(void *)(i - 8) = 0;
      }
      *(_OWORD *)(i - 24) = v268;
      *(void *)(i - 8) = v269;
      long long v268 = 0uLL;
      uint64_t v269 = 0;
      if (v267)
      {
        v223[0] = (void **)&v265;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v223);
        if (SHIBYTE(v264) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v261) < 0) {
          operator delete((void *)v260);
        }
        v223[0] = (void **)&v258;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v223);
        if (SHIBYTE(v256) < 0) {
          operator delete((void *)v255);
        }
        if (SHIBYTE(v254) < 0) {
          operator delete((void *)v253);
        }
        if (SHIBYTE(v252) < 0) {
          operator delete((void *)v251);
        }
      }
      __n128 result = MEMORY[0x1CB786420](v246);
      a4 = 0;
    }
    else
    {
LABEL_21:
      MEMORY[0x1CB7863F0](v246, v8);
      float v29 = *(float *)(v8 + 88);
      float v249 = v29;
      LOBYTE(v250) = 0;
      char v267 = 0;
      if (*(unsigned char *)(v8 + 312))
      {
        uint64_t v250 = *(void *)(v8 + 96);
        uint64_t v30 = *(void *)(v8 + 120);
        long long v251 = *(_OWORD *)(v8 + 104);
        uint64_t v252 = v30;
        *(void *)(v8 + 112) = 0;
        *(void *)(v8 + 120) = 0;
        *(void *)(v8 + 104) = 0;
        uint64_t v31 = *(void *)(v8 + 144);
        long long v253 = *(_OWORD *)(v8 + 128);
        uint64_t v254 = v31;
        *(void *)(v8 + 136) = 0;
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 128) = 0;
        long long v32 = *(_OWORD *)(v8 + 152);
        uint64_t v256 = *(void *)(v8 + 168);
        long long v255 = v32;
        *(void *)(v8 + 152) = 0;
        *(void *)(v8 + 160) = 0;
        *(void *)(v8 + 168) = 0;
        long long v33 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v8 + 188);
        v257[0] = v33;
        uint64_t v259 = 0;
        long long v258 = 0uLL;
        long long v258 = *(_OWORD *)(v8 + 208);
        uint64_t v259 = *(void *)(v8 + 224);
        *(void *)(v8 + 208) = 0;
        *(void *)(v8 + 216) = 0;
        *(void *)(v8 + 224) = 0;
        long long v34 = *(_OWORD *)(v8 + 232);
        uint64_t v261 = *(void *)(v8 + 248);
        long long v260 = v34;
        *(void *)(v8 + 232) = 0;
        *(void *)(v8 + 240) = 0;
        *(void *)(v8 + 248) = 0;
        int v262 = *(_DWORD *)(v8 + 256);
        long long v35 = *(_OWORD *)(v8 + 264);
        uint64_t v264 = *(void *)(v8 + 280);
        long long __p = v35;
        *(void *)(v8 + 264) = 0;
        *(void *)(v8 + 272) = 0;
        *(void *)(v8 + 280) = 0;
        long long v265 = 0uLL;
        uint64_t v266 = 0;
        long long v265 = *(_OWORD *)(v8 + 288);
        uint64_t v266 = *(void *)(v8 + 304);
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(void *)(v8 + 304) = 0;
        char v267 = 1;
      }
      long long v268 = *(_OWORD *)(v8 + 320);
      uint64_t v269 = *(void *)(v8 + 336);
      *(void *)(v8 + 320) = 0;
      *(void *)(v8 + 328) = 0;
      *(void *)(v8 + 336) = 0;
      for (unint64_t k = v8 + 344; ; k += 344)
      {
        unsigned int v37 = *(_DWORD *)(k + 76);
        BOOL v38 = v37 >= v248;
        if (v37 != v248) {
          break;
        }
        unsigned int v39 = *(_DWORD *)(k + 72);
        BOOL v38 = v39 >= v247;
        if (v39 != v247) {
          break;
        }
        if (*(float *)(k + 88) <= v29) {
          goto LABEL_30;
        }
LABEL_29:
        ;
      }
      if (!v38) {
        goto LABEL_29;
      }
LABEL_30:
      unint64_t m = v219;
      if (k - 344 != v8)
      {
        while (1)
        {
          unsigned int v41 = *(_DWORD *)(m + 76);
          BOOL v42 = v41 >= v248;
          if (v41 == v248 && (v43 = *(_DWORD *)(m + 72), BOOL v42 = v43 >= v247, v43 == v247))
          {
            if (*(float *)(m + 88) > v29) {
              goto LABEL_53;
            }
          }
          else if (!v42)
          {
            goto LABEL_53;
          }
          m -= 344;
        }
      }
      unint64_t m = v221;
      if (k < v221)
      {
        for (unint64_t m = v219; ; m -= 344)
        {
          unsigned int v44 = *(_DWORD *)(m + 76);
          BOOL v45 = v44 >= v248;
          if (v44 == v248 && (v46 = *(_DWORD *)(m + 72), BOOL v45 = v46 >= v247, v46 == v247))
          {
            if (*(float *)(m + 88) > v29 || k >= m) {
              break;
            }
          }
          else if (!v45 || k >= m)
          {
            break;
          }
        }
      }
LABEL_53:
      unint64_t i = k;
      if (k >= m) {
        goto LABEL_68;
      }
      unint64_t i = k;
      unint64_t v49 = m;
      while (2)
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(i, v49);
        i += 344;
        while (2)
        {
          unsigned int v50 = *(_DWORD *)(i + 76);
          BOOL v51 = v50 >= v248;
          if (v50 == v248)
          {
            unsigned int v52 = *(_DWORD *)(i + 72);
            BOOL v51 = v52 >= v247;
            if (v52 == v247)
            {
              if (*(float *)(i + 88) <= v249) {
                goto LABEL_64;
              }
              goto LABEL_61;
            }
          }
          if (!v51)
          {
LABEL_61:
            i += 344;
            continue;
          }
          break;
        }
        do
        {
LABEL_64:
          while (1)
          {
            v49 -= 344;
            unsigned int v53 = *(_DWORD *)(v49 + 76);
            BOOL v54 = v53 >= v248;
            if (v53 == v248)
            {
              unsigned int v55 = *(_DWORD *)(v49 + 72);
              BOOL v54 = v55 >= v247;
              if (v55 == v247) {
                break;
              }
            }
            if (!v54) {
              goto LABEL_67;
            }
          }
        }
        while (*(float *)(v49 + 88) <= v249);
LABEL_67:
        if (i < v49) {
          continue;
        }
        break;
      }
LABEL_68:
      if (i - 344 != v8)
      {
        sirinluinternal::MatchingSpan::operator=();
        *(_DWORD *)(v8 + 88) = *(_DWORD *)(i - 256);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v8 + 96, i - 248);
        unint64_t v56 = *(void **)(v8 + 320);
        if (v56)
        {
          *(void *)(v8 + 328) = v56;
          operator delete(v56);
          *(void *)(v8 + 320) = 0;
          *(void *)(v8 + 328) = 0;
          *(void *)(v8 + 336) = 0;
        }
        uint64_t v57 = (void *)(i - 24);
        *(_OWORD *)(v8 + 320) = *(_OWORD *)(i - 24);
        *(void *)(v8 + 336) = *(void *)(i - 8);
        *uint64_t v57 = 0;
        v57[1] = 0;
        v57[2] = 0;
      }
      sirinluinternal::MatchingSpan::operator=();
      *(float *)(i - 256) = v249;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(i - 248, (uint64_t)&v250);
      BOOL v58 = *(void **)(i - 24);
      if (v58)
      {
        *(void *)(i - 16) = v58;
        operator delete(v58);
        *(void *)(i - 24) = 0;
        *(void *)(i - 16) = 0;
        *(void *)(i - 8) = 0;
      }
      *(_OWORD *)(i - 24) = v268;
      *(void *)(i - 8) = v269;
      long long v268 = 0uLL;
      uint64_t v269 = 0;
      if (v267)
      {
        v223[0] = (void **)&v265;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v223);
        if (SHIBYTE(v264) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v261) < 0) {
          operator delete((void *)v260);
        }
        v223[0] = (void **)&v258;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v223);
        if (SHIBYTE(v256) < 0) {
          operator delete((void *)v255);
        }
        if (SHIBYTE(v254) < 0) {
          operator delete((void *)v253);
        }
        if (SHIBYTE(v252) < 0) {
          operator delete((void *)v251);
        }
      }
      MEMORY[0x1CB786420](v246);
      BOOL v4 = k >= m;
      a2 = v221;
      if (v4)
      {
        BOOL v59 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, i - 344);
        __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(i, v221);
        if (result)
        {
          a2 = i - 344;
          if (v59) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v59) {
          goto LABEL_89;
        }
      }
      else
      {
LABEL_89:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v8, i - 344, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  if ((a4 & 1) == 0)
  {
    if (v8 == a2) {
      return result;
    }
    uint64_t v190 = v8 + 344;
    if (v8 + 344 == a2) {
      return result;
    }
    for (uint64_t n = (void *)(v8 + 680); ; n += 43)
    {
      uint64_t v192 = v8;
      uint64_t v8 = v190;
      unsigned int v193 = *(_DWORD *)(v192 + 420);
      unsigned int v194 = *(_DWORD *)(v192 + 76);
      BOOL v195 = v193 >= v194;
      if (v193 == v194
        && (v196 = *(_DWORD *)(v192 + 416), v197 = *(_DWORD *)(v192 + 72), BOOL v195 = v196 >= v197, v196 == v197))
      {
        if (*(float *)(v192 + 432) > *(float *)(v192 + 88)) {
          goto LABEL_326;
        }
      }
      else if (!v195)
      {
LABEL_326:
        uint64_t v198 = (long long *)(v192 + 552);
        MEMORY[0x1CB7863F0](v246, v8);
        float v249 = *(float *)(v192 + 432);
        LOBYTE(v250) = 0;
        char v267 = 0;
        if (*(unsigned char *)(v192 + 656))
        {
          uint64_t v250 = *(void *)(v192 + 440);
          long long v251 = *(_OWORD *)(v192 + 448);
          uint64_t v252 = *(void *)(v192 + 464);
          *(void *)(v192 + 448) = 0;
          *(void *)(v192 + 456) = 0;
          *(void *)(v192 + 464) = 0;
          uint64_t v254 = *(void *)(v192 + 488);
          long long v253 = *(_OWORD *)(v192 + 472);
          *(void *)(v192 + 480) = 0;
          *(void *)(v192 + 488) = 0;
          *(void *)(v192 + 472) = 0;
          long long v199 = *(_OWORD *)(v192 + 496);
          uint64_t v256 = *(void *)(v192 + 512);
          long long v255 = v199;
          *(void *)(v192 + 496) = 0;
          *(void *)(v192 + 504) = 0;
          *(void *)(v192 + 512) = 0;
          long long v200 = *(_OWORD *)(v192 + 520);
          *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v192 + 532);
          v257[0] = v200;
          long long v258 = *v198;
          uint64_t v259 = *(void *)(v192 + 568);
          *(void *)uint64_t v198 = 0;
          *(void *)(v192 + 560) = 0;
          *(void *)(v192 + 568) = 0;
          long long v260 = *(_OWORD *)(v192 + 576);
          uint64_t v261 = *(void *)(v192 + 592);
          *(void *)(v192 + 584) = 0;
          *(void *)(v192 + 576) = 0;
          *(void *)(v192 + 592) = 0;
          int v262 = *(_DWORD *)(v192 + 600);
          long long __p = *(_OWORD *)(v192 + 608);
          uint64_t v264 = *(void *)(v192 + 624);
          *(void *)(v192 + 616) = 0;
          *(void *)(v192 + 608) = 0;
          *(void *)(v192 + 624) = 0;
          long long v265 = *(_OWORD *)(v192 + 632);
          uint64_t v266 = *(void *)(v192 + 648);
          *(void *)(v192 + 632) = 0;
          *(void *)(v192 + 640) = 0;
          *(void *)(v192 + 648) = 0;
          char v267 = 1;
        }
        long long v268 = *(_OWORD *)(v192 + 664);
        uint64_t v269 = *(void *)(v192 + 680);
        *(void *)(v192 + 664) = 0;
        *(void *)(v192 + 672) = 0;
        *(void *)(v192 + 680) = 0;
        for (iunint64_t i = n; ; ii -= 43)
        {
          sirinluinternal::MatchingSpan::operator=();
          *((_DWORD *)ii - 62) = *((_DWORD *)ii - 148);
          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(ii - 30), (uint64_t)(ii - 73));
          unint64_t v202 = (void *)*(ii - 2);
          if (v202)
          {
            *(ii - 1) = v202;
            operator delete(v202);
            *iunint64_t i = 0;
          }
          uint64_t v203 = (void **)(ii - 45);
          *((_OWORD *)ii - 1) = *(_OWORD *)(ii - 45);
          *iunint64_t i = *(ii - 43);
          *uint64_t v203 = 0;
          v203[1] = 0;
          v203[2] = 0;
          unsigned int v204 = *((_DWORD *)ii - 237);
          BOOL v205 = v248 >= v204;
          if (v248 == v204 && (v206 = *((_DWORD *)ii - 238), BOOL v205 = v247 >= v206, v247 == v206))
          {
            if (v249 <= *((float *)ii - 234)) {
              goto LABEL_337;
            }
          }
          else if (v205)
          {
LABEL_337:
            sirinluinternal::MatchingSpan::operator=();
            *((float *)ii - 148) = v249;
            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(ii - 73), (uint64_t)&v250);
            uint64_t v207 = *v203;
            if (*v203)
            {
              *(ii - 44) = v207;
              operator delete(v207);
              *uint64_t v203 = 0;
              *(ii - 44) = 0;
              *(ii - 43) = 0;
            }
            *(_OWORD *)uint64_t v203 = v268;
            *(ii - 43) = v269;
            long long v268 = 0uLL;
            uint64_t v269 = 0;
            if (v267)
            {
              v223[0] = (void **)&v265;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v223);
              if (SHIBYTE(v264) < 0) {
                operator delete((void *)__p);
              }
              if (SHIBYTE(v261) < 0) {
                operator delete((void *)v260);
              }
              v223[0] = (void **)&v258;
              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v223);
              if (SHIBYTE(v256) < 0) {
                operator delete((void *)v255);
              }
              if (SHIBYTE(v254) < 0) {
                operator delete((void *)v253);
              }
              if (SHIBYTE(v252) < 0) {
                operator delete((void *)v251);
              }
            }
            __n128 result = MEMORY[0x1CB786420](v246);
            break;
          }
        }
      }
      uint64_t v190 = v8 + 344;
      if (v8 + 344 == v221) {
        return result;
      }
    }
  }
  if (v8 == a2) {
    return result;
  }
  uint64_t v82 = v8 + 344;
  if (v8 + 344 == a2) {
    return result;
  }
  uint64_t v83 = 0;
  uint64_t v84 = v8;
  while (2)
  {
    uint64_t v85 = v84;
    uint64_t v84 = v82;
    unsigned int v86 = *(_DWORD *)(v85 + 420);
    unsigned int v87 = *(_DWORD *)(v85 + 76);
    BOOL v88 = v86 >= v87;
    if (v86 == v87 && (v89 = *(_DWORD *)(v85 + 416), v90 = *(_DWORD *)(v85 + 72), BOOL v88 = v89 >= v90, v89 == v90))
    {
      if (*(float *)(v85 + 432) <= *(float *)(v85 + 88)) {
        goto LABEL_196;
      }
    }
    else if (v88)
    {
      goto LABEL_196;
    }
    uint64_t v91 = (long long *)(v85 + 552);
    MEMORY[0x1CB7863F0](v246, v84);
    float v249 = *(float *)(v85 + 432);
    LOBYTE(v250) = 0;
    char v267 = 0;
    if (*(unsigned char *)(v85 + 656))
    {
      uint64_t v250 = *(void *)(v85 + 440);
      long long v251 = *(_OWORD *)(v85 + 448);
      uint64_t v252 = *(void *)(v85 + 464);
      *(void *)(v85 + 448) = 0;
      *(void *)(v85 + 456) = 0;
      *(void *)(v85 + 464) = 0;
      uint64_t v254 = *(void *)(v85 + 488);
      long long v253 = *(_OWORD *)(v85 + 472);
      *(void *)(v85 + 480) = 0;
      *(void *)(v85 + 488) = 0;
      *(void *)(v85 + 472) = 0;
      long long v92 = *(_OWORD *)(v85 + 496);
      uint64_t v256 = *(void *)(v85 + 512);
      long long v255 = v92;
      *(void *)(v85 + 496) = 0;
      *(void *)(v85 + 504) = 0;
      *(void *)(v85 + 512) = 0;
      long long v93 = *(_OWORD *)(v85 + 520);
      *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)(v85 + 532);
      v257[0] = v93;
      long long v258 = *v91;
      uint64_t v259 = *(void *)(v85 + 568);
      *(void *)uint64_t v91 = 0;
      *(void *)(v85 + 560) = 0;
      *(void *)(v85 + 568) = 0;
      long long v260 = *(_OWORD *)(v85 + 576);
      uint64_t v261 = *(void *)(v85 + 592);
      *(void *)(v85 + 584) = 0;
      *(void *)(v85 + 576) = 0;
      *(void *)(v85 + 592) = 0;
      int v262 = *(_DWORD *)(v85 + 600);
      long long __p = *(_OWORD *)(v85 + 608);
      uint64_t v264 = *(void *)(v85 + 624);
      *(void *)(v85 + 616) = 0;
      *(void *)(v85 + 608) = 0;
      *(void *)(v85 + 624) = 0;
      long long v265 = *(_OWORD *)(v85 + 632);
      uint64_t v266 = *(void *)(v85 + 648);
      *(void *)(v85 + 632) = 0;
      *(void *)(v85 + 640) = 0;
      *(void *)(v85 + 648) = 0;
      char v267 = 1;
    }
    long long v268 = *(_OWORD *)(v85 + 664);
    uint64_t v269 = *(void *)(v85 + 680);
    *(void *)(v85 + 664) = 0;
    *(void *)(v85 + 672) = 0;
    *(void *)(v85 + 680) = 0;
    uint64_t v94 = v83;
    while (2)
    {
      uint64_t v95 = v8 + v94;
      sirinluinternal::MatchingSpan::operator=();
      *(_DWORD *)(v95 + 432) = *(_DWORD *)(v95 + 88);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v95 + 440, v95 + 96);
      unint64_t v96 = *(void **)(v8 + v94 + 664);
      if (v96)
      {
        *(void *)(v95 + 672) = v96;
        operator delete(v96);
        *(void *)(v95 + 680) = 0;
      }
      *(_OWORD *)(v95 + 664) = *(_OWORD *)(v95 + 320);
      *(void *)(v95 + 680) = *(void *)(v95 + 336);
      *(void *)(v95 + 320) = 0;
      *(void *)(v95 + 328) = 0;
      *(void *)(v95 + 336) = 0;
      if (!v94)
      {
        uint64_t v100 = v8 + 320;
        uint64_t v101 = v8 + 96;
        uint64_t v102 = v8;
        goto LABEL_182;
      }
      unsigned int v97 = *(_DWORD *)(v8 + v94 - 268);
      BOOL v98 = v248 >= v97;
      if (v248 == v97)
      {
        unsigned int v99 = *(_DWORD *)(v8 + v94 - 272);
        BOOL v98 = v247 >= v99;
        if (v247 == v99)
        {
          if (v249 <= *(float *)(v8 + v94 - 256)) {
            break;
          }
          goto LABEL_179;
        }
      }
      if (!v98)
      {
LABEL_179:
        v94 -= 344;
        continue;
      }
      break;
    }
    uint64_t v102 = v8 + v94;
    uint64_t v100 = v8 + v94 + 320;
    uint64_t v101 = v102 + 96;
LABEL_182:
    sirinluinternal::MatchingSpan::operator=();
    *(float *)(v102 + 88) = v249;
    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v101, (uint64_t)&v250);
    float32x4_t v103 = *(void **)v100;
    if (*(void *)v100)
    {
      *(void *)(v102 + 328) = v103;
      operator delete(v103);
      *(void *)uint64_t v100 = 0;
      *(void *)(v100 + 8) = 0;
      *(void *)(v100 + 16) = 0;
    }
    *(void *)uint64_t v100 = v268;
    *(void *)(v102 + 328) = *((void *)&v268 + 1);
    *(void *)(v102 + 336) = v269;
    long long v268 = 0uLL;
    uint64_t v269 = 0;
    if (v267)
    {
      v223[0] = (void **)&v265;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v223);
      if (SHIBYTE(v264) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v261) < 0) {
        operator delete((void *)v260);
      }
      v223[0] = (void **)&v258;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v223);
      if (SHIBYTE(v256) < 0) {
        operator delete((void *)v255);
      }
      if (SHIBYTE(v254) < 0) {
        operator delete((void *)v253);
      }
      if (SHIBYTE(v252) < 0) {
        operator delete((void *)v251);
      }
    }
    __n128 result = MEMORY[0x1CB786420](v246);
LABEL_196:
    uint64_t v82 = v84 + 344;
    v83 += 344;
    if (v84 + 344 != v221) {
      continue;
    }
    return result;
  }
}

uint64_t std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1CB7863F0](v16, a1);
  int v17 = *(_DWORD *)(a1 + 88);
  LOBYTE(v18) = 0;
  char v35 = 0;
  if (*(unsigned char *)(a1 + 312))
  {
    uint64_t v18 = *(void *)(a1 + 96);
    *(_OWORD *)unsigned int v19 = *(_OWORD *)(a1 + 104);
    uint64_t v20 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 144);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    long long v5 = *(_OWORD *)(a1 + 152);
    uint64_t v6 = *(void *)(a1 + 168);
    uint64_t v22 = v4;
    uint64_t v24 = v6;
    *(_OWORD *)long long v23 = v5;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    long long v7 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)&v25[12] = *(_OWORD *)(a1 + 188);
    long long v8 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)long long v25 = v7;
    long long v26 = v8;
    uint64_t v9 = *(void *)(a1 + 224);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    long long v10 = *(_OWORD *)(a1 + 232);
    uint64_t v11 = *(void *)(a1 + 248);
    uint64_t v27 = v9;
    uint64_t v29 = v11;
    *(_OWORD *)unsigned int v28 = v10;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    int v30 = *(_DWORD *)(a1 + 256);
    uint64_t v12 = *(void *)(a1 + 280);
    long long __p = *(_OWORD *)(a1 + 264);
    uint64_t v32 = v12;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    long long v33 = *(_OWORD *)(a1 + 288);
    uint64_t v34 = *(void *)(a1 + 304);
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    char v35 = 1;
  }
  long long v36 = *(_OWORD *)(a1 + 320);
  uint64_t v37 = *(void *)(a1 + 336);
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  sirinluinternal::MatchingSpan::operator=();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(a1 + 96, a2 + 96);
  uint64_t v13 = *(void **)(a1 + 320);
  if (v13)
  {
    *(void *)(a1 + 328) = v13;
    operator delete(v13);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  sirinluinternal::MatchingSpan::operator=();
  *(_DWORD *)(a2 + 88) = v17;
  std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(a2 + 96, (uint64_t)&v18);
  uint64_t v14 = *(void **)(a2 + 320);
  if (v14)
  {
    *(void *)(a2 + 328) = v14;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 320) = v36;
  *(void *)(a2 + 336) = v37;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  if (v35)
  {
    BOOL v38 = (void **)&v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    BOOL v38 = (void **)&v26;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v38);
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
  }
  return MEMORY[0x1CB786420](v16);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(a2 + 76);
  unsigned int v7 = *(_DWORD *)(result + 76);
  BOOL v8 = v6 >= v7;
  if (v6 == v7)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 72);
    unsigned int v10 = *(_DWORD *)(result + 72);
    BOOL v8 = v9 >= v10;
    if (v9 == v10)
    {
      if (*(float *)(a2 + 88) <= *(float *)(result + 88)) {
        goto LABEL_4;
      }
LABEL_9:
      unsigned int v15 = *(_DWORD *)(a3 + 76);
      BOOL v16 = v15 >= v6;
      if (v15 == v6 && (v17 = *(_DWORD *)(a3 + 72), v18 = *(_DWORD *)(a2 + 72), BOOL v16 = v17 >= v18, v17 == v18))
      {
        if (*(float *)(a3 + 88) <= *(float *)(a2 + 88)) {
          goto LABEL_12;
        }
      }
      else if (v16)
      {
LABEL_12:
        __n128 result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(result, a2);
        unsigned int v19 = *(_DWORD *)(a3 + 76);
        unsigned int v20 = *(_DWORD *)(a2 + 76);
        BOOL v21 = v19 >= v20;
        if (v19 == v20 && (unsigned int v22 = *(_DWORD *)(a3 + 72), v23 = *(_DWORD *)(a2 + 72), v21 = v22 >= v23, v22 == v23))
        {
          if (*(float *)(a3 + 88) <= *(float *)(a2 + 88)) {
            return result;
          }
        }
        else if (v21)
        {
          return result;
        }
        __n128 result = a2;
      }
      uint64_t v29 = a3;
      goto LABEL_28;
    }
  }
  if (!v8) {
    goto LABEL_9;
  }
LABEL_4:
  unsigned int v11 = *(_DWORD *)(a3 + 76);
  BOOL v12 = v11 >= v6;
  if (v11 == v6 && (unsigned int v13 = *(_DWORD *)(a3 + 72), v14 = *(_DWORD *)(a2 + 72), v12 = v13 >= v14, v13 == v14))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88)) {
      return result;
    }
  }
  else if (v12)
  {
    return result;
  }
  __n128 result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  unsigned int v24 = *(_DWORD *)(a2 + 76);
  unsigned int v25 = *(_DWORD *)(v5 + 76);
  BOOL v26 = v24 >= v25;
  if (v24 == v25 && (unsigned int v27 = *(_DWORD *)(a2 + 72), v28 = *(_DWORD *)(v5 + 72), v26 = v27 >= v28, v27 == v28))
  {
    if (*(float *)(a2 + 88) <= *(float *)(v5 + 88)) {
      return result;
    }
  }
  else if (v26)
  {
    return result;
  }
  __n128 result = v5;
  uint64_t v29 = a2;
LABEL_28:
  return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(result, v29);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)(a4 + 76);
  unsigned int v10 = *(_DWORD *)(a3 + 76);
  BOOL v11 = v9 >= v10;
  if (v9 == v10 && (v12 = *(_DWORD *)(a4 + 72), v13 = *(_DWORD *)(a3 + 72), BOOL v11 = v12 >= v13, v12 == v13))
  {
    if (*(float *)(a4 + 88) <= *(float *)(a3 + 88)) {
      return result;
    }
  }
  else if (v11)
  {
    return result;
  }
  uint64_t result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
  unsigned int v14 = *(_DWORD *)(a3 + 76);
  unsigned int v15 = *(_DWORD *)(a2 + 76);
  BOOL v16 = v14 >= v15;
  if (v14 == v15 && (v17 = *(_DWORD *)(a3 + 72), v18 = *(_DWORD *)(a2 + 72), BOOL v16 = v17 >= v18, v17 == v18))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88)) {
      return result;
    }
  }
  else if (v16)
  {
    return result;
  }
  uint64_t result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  unsigned int v19 = *(_DWORD *)(a2 + 76);
  unsigned int v20 = *(_DWORD *)(a1 + 76);
  BOOL v21 = v19 >= v20;
  if (v19 == v20 && (unsigned int v22 = *(_DWORD *)(a2 + 72), v23 = *(_DWORD *)(a1 + 72), v21 = v22 >= v23, v22 == v23))
  {
    if (*(float *)(a2 + 88) <= *(float *)(a1 + 88)) {
      return result;
    }
  }
  else if (v21)
  {
    return result;
  }
  return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3, a4);
  unsigned int v11 = *(_DWORD *)(a5 + 76);
  unsigned int v12 = *(_DWORD *)(a4 + 76);
  BOOL v13 = v11 >= v12;
  if (v11 == v12 && (v14 = *(_DWORD *)(a5 + 72), v15 = *(_DWORD *)(a4 + 72), BOOL v13 = v14 >= v15, v14 == v15))
  {
    if (*(float *)(a5 + 88) <= *(float *)(a4 + 88)) {
      return result;
    }
  }
  else if (v13)
  {
    return result;
  }
  uint64_t result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a4, a5);
  unsigned int v16 = *(_DWORD *)(a4 + 76);
  unsigned int v17 = *(_DWORD *)(a3 + 76);
  BOOL v18 = v16 >= v17;
  if (v16 == v17 && (v19 = *(_DWORD *)(a4 + 72), unsigned int v20 = *(_DWORD *)(a3 + 72), v18 = v19 >= v20, v19 == v20))
  {
    if (*(float *)(a4 + 88) <= *(float *)(a3 + 88)) {
      return result;
    }
  }
  else if (v18)
  {
    return result;
  }
  uint64_t result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
  unsigned int v21 = *(_DWORD *)(a3 + 76);
  unsigned int v22 = *(_DWORD *)(a2 + 76);
  BOOL v23 = v21 >= v22;
  if (v21 == v22 && (unsigned int v24 = *(_DWORD *)(a3 + 72), v25 = *(_DWORD *)(a2 + 72), v23 = v24 >= v25, v24 == v25))
  {
    if (*(float *)(a3 + 88) <= *(float *)(a2 + 88)) {
      return result;
    }
  }
  else if (v23)
  {
    return result;
  }
  uint64_t result = std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
  unsigned int v26 = *(_DWORD *)(a2 + 76);
  unsigned int v27 = *(_DWORD *)(a1 + 76);
  BOOL v28 = v26 >= v27;
  if (v26 == v27 && (v29 = *(_DWORD *)(a2 + 72), v30 = *(_DWORD *)(a1 + 72), BOOL v28 = v29 >= v30, v29 == v30))
  {
    if (*(float *)(a2 + 88) <= *(float *)(a1 + 88)) {
      return result;
    }
  }
  else if (v28)
  {
    return result;
  }
  return std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1;
  switch(0x82FA0BE82FA0BE83 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = a2 - 344;
      unsigned int v6 = *(_DWORD *)(a2 - 268);
      unsigned int v7 = *(_DWORD *)(a1 + 76);
      BOOL v8 = v6 >= v7;
      if (v6 == v7 && (unsigned int v9 = *(_DWORD *)(a2 - 272), v10 = *(_DWORD *)(a1 + 72), v8 = v9 >= v10, v9 == v10))
      {
        if (*(float *)(a2 - 256) <= *(float *)(a1 + 88)) {
          return v4;
        }
      }
      else if (v8)
      {
        return v4;
      }
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, v5);
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a2 - 344);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688, a2 - 344);
      return v4;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(a1, a1 + 344, a1 + 688, a1 + 1032, a2 - 344);
      return v4;
    default:
      uint64_t v11 = a1 + 688;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688);
      uint64_t v12 = a1 + 1032;
      uint64_t v4 = 1;
      if (a1 + 1032 == a2) {
        return v4;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    unsigned int v15 = *(_DWORD *)(v12 + 76);
    unsigned int v16 = *(_DWORD *)(v11 + 76);
    BOOL v17 = v15 >= v16;
    if (v15 == v16 && (v18 = *(_DWORD *)(v12 + 72), v19 = *(_DWORD *)(v11 + 72), BOOL v17 = v18 >= v19, v18 == v19))
    {
      if (*(float *)(v12 + 88) <= *(float *)(v11 + 88)) {
        goto LABEL_43;
      }
    }
    else if (v17)
    {
      goto LABEL_43;
    }
    MEMORY[0x1CB7863F0](v35, v12);
    float v38 = *(float *)(v12 + 88);
    LOBYTE(v39) = 0;
    char v56 = 0;
    if (*(unsigned char *)(v12 + 312))
    {
      uint64_t v39 = *(void *)(v12 + 96);
      long long v40 = *(_OWORD *)(v12 + 104);
      uint64_t v41 = *(void *)(v12 + 120);
      *(void *)(v12 + 104) = 0;
      *(void *)(v12 + 112) = 0;
      long long v42 = *(_OWORD *)(v12 + 128);
      uint64_t v43 = *(void *)(v12 + 144);
      *(void *)(v12 + 120) = 0;
      *(void *)(v12 + 128) = 0;
      *(void *)(v12 + 136) = 0;
      *(void *)(v12 + 144) = 0;
      long long v20 = *(_OWORD *)(v12 + 152);
      uint64_t v45 = *(void *)(v12 + 168);
      long long v44 = v20;
      *(void *)(v12 + 152) = 0;
      *(void *)(v12 + 160) = 0;
      *(void *)(v12 + 168) = 0;
      long long v21 = *(_OWORD *)(v12 + 176);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(v12 + 188);
      v46[0] = v21;
      long long v47 = *(_OWORD *)(v12 + 208);
      uint64_t v48 = *(void *)(v12 + 224);
      *(void *)(v12 + 208) = 0;
      *(void *)(v12 + 216) = 0;
      long long v22 = *(_OWORD *)(v12 + 232);
      uint64_t v50 = *(void *)(v12 + 248);
      long long v49 = v22;
      *(void *)(v12 + 224) = 0;
      *(void *)(v12 + 232) = 0;
      *(void *)(v12 + 240) = 0;
      *(void *)(v12 + 248) = 0;
      int v51 = *(_DWORD *)(v12 + 256);
      long long v23 = *(_OWORD *)(v12 + 264);
      uint64_t v53 = *(void *)(v12 + 280);
      long long __p = v23;
      *(void *)(v12 + 264) = 0;
      *(void *)(v12 + 272) = 0;
      long long v54 = *(_OWORD *)(v12 + 288);
      uint64_t v55 = *(void *)(v12 + 304);
      *(void *)(v12 + 280) = 0;
      *(void *)(v12 + 288) = 0;
      *(void *)(v12 + 296) = 0;
      *(void *)(v12 + 304) = 0;
      char v56 = 1;
    }
    long long v57 = *(_OWORD *)(v12 + 320);
    uint64_t v58 = *(void *)(v12 + 336);
    *(void *)(v12 + 328) = 0;
    *(void *)(v12 + 336) = 0;
    *(void *)(v12 + 320) = 0;
    for (uint64_t i = v13; ; i -= 344)
    {
      uint64_t v25 = a1 + i;
      sirinluinternal::MatchingSpan::operator=();
      *(_DWORD *)(v25 + 1120) = *(_DWORD *)(v25 + 776);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v25 + 1128, v25 + 784);
      unsigned int v26 = *(void **)(a1 + i + 1352);
      if (v26)
      {
        *(void *)(v25 + 1360) = v26;
        operator delete(v26);
        *(void *)(v25 + 1368) = 0;
      }
      *(_OWORD *)(v25 + 1352) = *(_OWORD *)(v25 + 1008);
      *(void *)(v25 + 1368) = *(void *)(v25 + 1024);
      *(void *)(v25 + 1008) = 0;
      *(void *)(v25 + 1016) = 0;
      *(void *)(v25 + 1024) = 0;
      if (i == -688)
      {
        uint64_t v11 = a1;
LABEL_28:
        uint64_t v29 = a1 + i;
        goto LABEL_29;
      }
      unsigned int v27 = *(_DWORD *)(a1 + i + 420);
      if (v37 == v27) {
        break;
      }
      if (v37 >= v27) {
        goto LABEL_28;
      }
LABEL_26:
      v11 -= 344;
    }
    unsigned int v28 = *(_DWORD *)(a1 + i + 416);
    if (v36 == v28)
    {
      if (v38 <= *(float *)(a1 + i + 432)) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
    if (v36 < v28) {
      goto LABEL_26;
    }
    uint64_t v29 = a1 + i;
    uint64_t v11 = a1 + i + 688;
LABEL_29:
    uint64_t v30 = v29 + 1008;
    uint64_t v31 = v29 + 784;
    sirinluinternal::MatchingSpan::operator=();
    *(float *)(v11 + 88) = v38;
    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v31, (uint64_t)&v39);
    uint64_t v32 = *(void **)v30;
    if (*(void *)v30)
    {
      *(void *)(v11 + 328) = v32;
      operator delete(v32);
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
    }
    uint64_t v33 = *((void *)&v57 + 1);
    *(void *)uint64_t v30 = v57;
    *(void *)(v11 + 328) = v33;
    *(void *)(v11 + 336) = v58;
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    if (v56)
    {
      v59[0] = (void **)&v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v59);
      if (SHIBYTE(v53) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete((void *)v49);
      }
      v59[0] = (void **)&v47;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v59);
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)v44);
      }
      if (SHIBYTE(v43) < 0) {
        operator delete((void *)v42);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
    }
    ++v14;
    MEMORY[0x1CB786420](v35);
    if (v14 == 8) {
      return v12 + 344 == a2;
    }
LABEL_43:
    uint64_t v11 = v12;
    v13 += 344;
    v12 += 344;
  }
  while (v12 != a2);
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v454 = a2 - 344;
  uint64_t v445 = a2 - 1032;
  uint64_t v447 = a2 - 688;
  v443 = (const void **)(a2 - 192);
  unint64_t v8 = a1;
  unint64_t v459 = a2;
  while (1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a2 - v8;
    unint64_t v11 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - v8) >> 3);
    if (!(!v5 & v4)) {
      break;
    }
    uint64_t v461 = v8;
    if (v10 <= 8255)
    {
      if (a4)
      {
        if (v8 != a2)
        {
          unint64_t v209 = v8 + 344;
          if (v9 + 344 != a2)
          {
            for (uint64_t i = v9; ; i += 344)
            {
              if (!*(unsigned char *)(i + 656)) {
                goto LABEL_547;
              }
              if (!*(unsigned char *)(i + 312)) {
                goto LABEL_496;
              }
              uint64_t v211 = (const void **)(i + 496);
              uint64_t v212 = *(unsigned __int8 *)(i + 519);
              if ((v212 & 0x80u) == 0) {
                size_t v213 = *(unsigned __int8 *)(i + 519);
              }
              else {
                size_t v213 = *(void *)(i + 504);
              }
              int v214 = *(char *)(i + 175);
              if (v214 >= 0) {
                size_t v215 = *(unsigned __int8 *)(i + 175);
              }
              else {
                size_t v215 = *(void *)(i + 160);
              }
              if (v214 >= 0) {
                uint64_t v216 = (unsigned __int8 *)(i + 152);
              }
              else {
                uint64_t v216 = *(unsigned __int8 **)(i + 152);
              }
              if (v213 == v215)
              {
                if ((v212 & 0x80) != 0)
                {
                  if (!memcmp(*v211, v216, *(void *)(i + 504)))
                  {
LABEL_495:
                    if (*(float *)(i + 432) <= *(float *)(i + 88)) {
                      goto LABEL_547;
                    }
LABEL_496:
                    unint64_t v222 = (long long *)(i + 552);
                    MEMORY[0x1CB7863F0](v492, v209);
                    float v493 = *(float *)(i + 432);
                    LOBYTE(v494) = 0;
                    unsigned __int8 v511 = 0;
                    if (*(unsigned char *)(i + 656))
                    {
                      uint64_t v494 = *(void *)(i + 440);
                      long long v495 = *(_OWORD *)(i + 448);
                      uint64_t v496 = *(void *)(i + 464);
                      *(void *)(i + 448) = 0;
                      *(void *)(i + 456) = 0;
                      *(void *)(i + 464) = 0;
                      uint64_t v498 = *(void *)(i + 488);
                      long long v497 = *(_OWORD *)(i + 472);
                      *(void *)(i + 480) = 0;
                      *(void *)(i + 488) = 0;
                      *(void *)(i + 472) = 0;
                      long long v223 = *(_OWORD *)(i + 496);
                      uint64_t v500 = *(void *)(i + 512);
                      long long __s1 = v223;
                      *(void *)(i + 496) = 0;
                      *(void *)(i + 504) = 0;
                      *(void *)(i + 512) = 0;
                      long long v224 = *(_OWORD *)(i + 520);
                      *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(i + 532);
                      v501[0] = v224;
                      long long v502 = *v222;
                      uint64_t v503 = *(void *)(i + 568);
                      *(void *)unint64_t v222 = 0;
                      *(void *)(i + 560) = 0;
                      *(void *)(i + 568) = 0;
                      long long v504 = *(_OWORD *)(i + 576);
                      uint64_t v505 = *(void *)(i + 592);
                      *(void *)(i + 584) = 0;
                      *(void *)(i + 576) = 0;
                      *(void *)(i + 592) = 0;
                      int v506 = *(_DWORD *)(i + 600);
                      long long __p = *(_OWORD *)(i + 608);
                      uint64_t v508 = *(void *)(i + 624);
                      *(void *)(i + 616) = 0;
                      *(void *)(i + 608) = 0;
                      *(void *)(i + 624) = 0;
                      long long v509 = *(_OWORD *)(i + 632);
                      uint64_t v510 = *(void *)(i + 648);
                      *(void *)(i + 632) = 0;
                      *(void *)(i + 640) = 0;
                      *(void *)(i + 648) = 0;
                      unsigned __int8 v511 = 1;
                    }
                    long long v512 = *(_OWORD *)(i + 664);
                    uint64_t v513 = *(void *)(i + 680);
                    *(void *)(i + 664) = 0;
                    *(void *)(i + 672) = 0;
                    *(void *)(i + 680) = 0;
                    uint64_t v225 = i;
                    long long v226 = (void *)v209;
                    while (1)
                    {
                      do
                      {
LABEL_499:
                        uint64_t v227 = (void *)v225;
                        sirinluinternal::MatchingSpan::operator=();
                        *((_DWORD *)v226 + 22) = *(_DWORD *)(v225 + 88);
                        uint64_t v228 = v225 + 96;
                        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(v226 + 12), v225 + 96);
                        uint64_t v229 = (void *)v226[40];
                        if (v229)
                        {
                          v226[41] = v229;
                          operator delete(v229);
                          v226[42] = 0;
                        }
                        long long v230 = (void *)(v225 + 320);
                        *((_OWORD *)v226 + 20) = *(_OWORD *)(v225 + 320);
                        v226[42] = *(void *)(v225 + 336);
                        *(void *)(v225 + 320) = 0;
                        *(void *)(v225 + 328) = 0;
                        *(void *)(v225 + 336) = 0;
                        uint64_t v231 = (float *)v461;
                        if (v225 == v461)
                        {
LABEL_533:
                          sirinluinternal::MatchingSpan::operator=();
                          v231[22] = v493;
                          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v228, (uint64_t)&v494);
                          uint64_t v244 = (void *)v227[40];
                          if (v244)
                          {
                            *((void *)v231 + 41) = v244;
                            operator delete(v244);
                            *long long v230 = 0;
                            v227[41] = 0;
                            v227[42] = 0;
                          }
                          *long long v230 = v512;
                          *((void *)v231 + 41) = *((void *)&v512 + 1);
                          *((void *)v231 + 42) = v513;
                          long long v512 = 0uLL;
                          uint64_t v513 = 0;
                          a2 = v459;
                          if (v511)
                          {
                            v469[0] = (void **)&v509;
                            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v469);
                            if (SHIBYTE(v508) < 0) {
                              operator delete((void *)__p);
                            }
                            if (SHIBYTE(v505) < 0) {
                              operator delete((void *)v504);
                            }
                            v469[0] = (void **)&v502;
                            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v469);
                            if (SHIBYTE(v500) < 0) {
                              operator delete((void *)__s1);
                            }
                            if (SHIBYTE(v498) < 0) {
                              operator delete((void *)v497);
                            }
                            if (SHIBYTE(v496) < 0) {
                              operator delete((void *)v495);
                            }
                          }
                          MEMORY[0x1CB786420](v492);
                          goto LABEL_547;
                        }
                        if (!v511) {
                          goto LABEL_532;
                        }
                        v225 -= 344;
                        long long v226 = v227;
                      }
                      while (!*((unsigned char *)v227 - 32));
                      char v232 = HIBYTE(v500);
                      if (v500 >= 0) {
                        size_t v233 = HIBYTE(v500);
                      }
                      else {
                        size_t v233 = *((void *)&__s1 + 1);
                      }
                      int v234 = *((char *)v227 - 169);
                      if (v234 >= 0) {
                        size_t v235 = *((unsigned __int8 *)v227 - 169);
                      }
                      else {
                        size_t v235 = *(v227 - 23);
                      }
                      if (v234 >= 0) {
                        uint64_t v236 = (unsigned __int8 *)(v227 - 24);
                      }
                      else {
                        uint64_t v236 = (unsigned __int8 *)*(v227 - 24);
                      }
                      if (v233 == v235)
                      {
                        if (v500 < 0)
                        {
                          if (!memcmp((const void *)__s1, v236, *((size_t *)&__s1 + 1)))
                          {
LABEL_531:
                            long long v226 = v227;
                            if (v493 <= *((float *)v227 - 64)) {
                              goto LABEL_532;
                            }
                            goto LABEL_499;
                          }
                        }
                        else
                        {
                          if (!HIBYTE(v500)) {
                            goto LABEL_531;
                          }
                          int v237 = v236;
                          p_s1 = &__s1;
                          uint64_t v239 = HIBYTE(v500);
                          while (*(unsigned __int8 *)p_s1 == *v237)
                          {
                            p_s1 = (long long *)((char *)p_s1 + 1);
                            ++v237;
                            if (!--v239) {
                              goto LABEL_531;
                            }
                          }
                        }
                      }
                      if (v232 >= 0) {
                        long long v240 = &__s1;
                      }
                      else {
                        long long v240 = (long long *)__s1;
                      }
                      if (v233 >= v235) {
                        size_t v241 = v235;
                      }
                      else {
                        size_t v241 = v233;
                      }
                      int v242 = memcmp(v236, v240, v241);
                      BOOL v243 = v235 < v233;
                      if (v242) {
                        BOOL v243 = v242 < 0;
                      }
                      long long v226 = v227;
                      if (!v243)
                      {
LABEL_532:
                        uint64_t v231 = (float *)v227;
                        goto LABEL_533;
                      }
                    }
                  }
                }
                else
                {
                  if (!*(unsigned char *)(i + 519)) {
                    goto LABEL_495;
                  }
                  uint64_t v217 = 0;
                  while (*(unsigned __int8 *)(i + v217 + 496) == v216[v217])
                  {
                    if (v212 == ++v217) {
                      goto LABEL_495;
                    }
                  }
                }
              }
              if ((v212 & 0x80u) == 0) {
                unint64_t v218 = (const void *)(i + 496);
              }
              else {
                unint64_t v218 = *v211;
              }
              if (v213 >= v215) {
                size_t v219 = v215;
              }
              else {
                size_t v219 = v213;
              }
              int v220 = memcmp(v216, v218, v219);
              BOOL v221 = v215 < v213;
              if (v220) {
                BOOL v221 = v220 < 0;
              }
              if (v221) {
                goto LABEL_496;
              }
LABEL_547:
              v209 += 344;
              if (v209 == a2) {
                return;
              }
            }
          }
        }
      }
      else if (v8 != a2)
      {
        unint64_t v403 = v8 + 344;
        if (v9 + 344 != a2)
        {
          while (1)
          {
            if (!*(unsigned char *)(v9 + 656)) {
              goto LABEL_922;
            }
            if (!*(unsigned char *)(v9 + 312)) {
              goto LABEL_873;
            }
            v404 = (const void **)(v9 + 496);
            uint64_t v405 = *(unsigned __int8 *)(v9 + 519);
            if ((v405 & 0x80u) == 0) {
              size_t v406 = *(unsigned __int8 *)(v9 + 519);
            }
            else {
              size_t v406 = *(void *)(v9 + 504);
            }
            int v407 = *(char *)(v9 + 175);
            if (v407 >= 0) {
              size_t v408 = *(unsigned __int8 *)(v9 + 175);
            }
            else {
              size_t v408 = *(void *)(v9 + 160);
            }
            if (v407 >= 0) {
              long long v409 = (unsigned __int8 *)(v9 + 152);
            }
            else {
              long long v409 = *(unsigned __int8 **)(v9 + 152);
            }
            if (v406 == v408)
            {
              if ((v405 & 0x80) != 0)
              {
                if (!memcmp(*v404, v409, *(void *)(v9 + 504)))
                {
LABEL_872:
                  if (*(float *)(v9 + 432) <= *(float *)(v9 + 88)) {
                    goto LABEL_922;
                  }
LABEL_873:
                  v415 = (long long *)(v9 + 552);
                  MEMORY[0x1CB7863F0](v492, v403);
                  float v493 = *(float *)(v9 + 432);
                  LOBYTE(v494) = 0;
                  unsigned __int8 v511 = 0;
                  if (*(unsigned char *)(v9 + 656))
                  {
                    uint64_t v494 = *(void *)(v9 + 440);
                    long long v495 = *(_OWORD *)(v9 + 448);
                    uint64_t v496 = *(void *)(v9 + 464);
                    *(void *)(v9 + 448) = 0;
                    *(void *)(v9 + 456) = 0;
                    *(void *)(v9 + 464) = 0;
                    uint64_t v498 = *(void *)(v9 + 488);
                    long long v497 = *(_OWORD *)(v9 + 472);
                    *(void *)(v9 + 480) = 0;
                    *(void *)(v9 + 488) = 0;
                    *(void *)(v9 + 472) = 0;
                    long long v416 = *(_OWORD *)(v9 + 496);
                    uint64_t v500 = *(void *)(v9 + 512);
                    long long __s1 = v416;
                    *(void *)(v9 + 496) = 0;
                    *(void *)(v9 + 504) = 0;
                    *(void *)(v9 + 512) = 0;
                    long long v417 = *(_OWORD *)(v9 + 520);
                    *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(v9 + 532);
                    v501[0] = v417;
                    long long v502 = *v415;
                    uint64_t v503 = *(void *)(v9 + 568);
                    *(void *)v415 = 0;
                    *(void *)(v9 + 560) = 0;
                    *(void *)(v9 + 568) = 0;
                    long long v504 = *(_OWORD *)(v9 + 576);
                    uint64_t v505 = *(void *)(v9 + 592);
                    *(void *)(v9 + 584) = 0;
                    *(void *)(v9 + 576) = 0;
                    *(void *)(v9 + 592) = 0;
                    int v506 = *(_DWORD *)(v9 + 600);
                    long long __p = *(_OWORD *)(v9 + 608);
                    uint64_t v508 = *(void *)(v9 + 624);
                    *(void *)(v9 + 616) = 0;
                    *(void *)(v9 + 608) = 0;
                    *(void *)(v9 + 624) = 0;
                    long long v509 = *(_OWORD *)(v9 + 632);
                    uint64_t v510 = *(void *)(v9 + 648);
                    *(void *)(v9 + 632) = 0;
                    *(void *)(v9 + 640) = 0;
                    *(void *)(v9 + 648) = 0;
                    unsigned __int8 v511 = 1;
                  }
                  long long v512 = *(_OWORD *)(v9 + 664);
                  uint64_t v513 = *(void *)(v9 + 680);
                  *(void *)(v9 + 664) = 0;
                  *(void *)(v9 + 672) = 0;
                  *(void *)(v9 + 680) = 0;
                  uint64_t v462 = v9;
                  uint64_t v418 = v9;
                  unint64_t v419 = v403;
                  while (1)
                  {
                    do
                    {
LABEL_876:
                      uint64_t v420 = v418;
                      sirinluinternal::MatchingSpan::operator=();
                      *(_DWORD *)(v419 + 88) = *(_DWORD *)(v418 + 88);
                      uint64_t v421 = v418 + 96;
                      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v419 + 96, v418 + 96);
                      v422 = *(void **)(v419 + 320);
                      if (v422)
                      {
                        *(void *)(v419 + 328) = v422;
                        operator delete(v422);
                        *(void *)(v419 + 336) = 0;
                      }
                      *(_OWORD *)(v419 + 320) = *(_OWORD *)(v418 + 320);
                      *(void *)(v419 + 336) = *(void *)(v418 + 336);
                      *(void *)(v418 + 320) = 0;
                      *(void *)(v418 + 328) = 0;
                      *(void *)(v418 + 336) = 0;
                      if (!v511)
                      {
LABEL_908:
                        sirinluinternal::MatchingSpan::operator=();
                        *(float *)(v420 + 88) = v493;
                        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v421, (uint64_t)&v494);
                        v435 = *(void **)(v420 + 320);
                        if (v435)
                        {
                          *(void *)(v420 + 328) = v435;
                          operator delete(v435);
                          *(void *)(v420 + 320) = 0;
                          *(void *)(v420 + 328) = 0;
                          *(void *)(v420 + 336) = 0;
                        }
                        *(_OWORD *)(v420 + 320) = v512;
                        *(void *)(v420 + 336) = v513;
                        long long v512 = 0uLL;
                        uint64_t v513 = 0;
                        uint64_t v9 = v462;
                        if (v511)
                        {
                          v469[0] = (void **)&v509;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v469);
                          if (SHIBYTE(v508) < 0) {
                            operator delete((void *)__p);
                          }
                          if (SHIBYTE(v505) < 0) {
                            operator delete((void *)v504);
                          }
                          v469[0] = (void **)&v502;
                          std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v469);
                          if (SHIBYTE(v500) < 0) {
                            operator delete((void *)__s1);
                          }
                          if (SHIBYTE(v498) < 0) {
                            operator delete((void *)v497);
                          }
                          if (SHIBYTE(v496) < 0) {
                            operator delete((void *)v495);
                          }
                        }
                        MEMORY[0x1CB786420](v492);
                        goto LABEL_922;
                      }
                      v418 -= 344;
                      unint64_t v419 = v420;
                    }
                    while (!*(unsigned char *)(v420 - 32));
                    char v423 = HIBYTE(v500);
                    if (v500 >= 0) {
                      size_t v424 = HIBYTE(v500);
                    }
                    else {
                      size_t v424 = *((void *)&__s1 + 1);
                    }
                    int v425 = *(char *)(v420 - 169);
                    if (v425 >= 0) {
                      size_t v426 = *(unsigned __int8 *)(v420 - 169);
                    }
                    else {
                      size_t v426 = *(void *)(v420 - 184);
                    }
                    if (v425 >= 0) {
                      long long v427 = (unsigned __int8 *)(v420 - 192);
                    }
                    else {
                      long long v427 = *(unsigned __int8 **)(v420 - 192);
                    }
                    if (v424 == v426)
                    {
                      if (v500 < 0)
                      {
                        if (!memcmp((const void *)__s1, v427, *((size_t *)&__s1 + 1)))
                        {
LABEL_907:
                          unint64_t v419 = v420;
                          a2 = v459;
                          if (v493 <= *(float *)(v420 - 256)) {
                            goto LABEL_908;
                          }
                          goto LABEL_876;
                        }
                      }
                      else
                      {
                        if (!HIBYTE(v500)) {
                          goto LABEL_907;
                        }
                        long long v428 = v427;
                        long long v429 = &__s1;
                        uint64_t v430 = HIBYTE(v500);
                        while (*(unsigned __int8 *)v429 == *v428)
                        {
                          long long v429 = (long long *)((char *)v429 + 1);
                          ++v428;
                          if (!--v430) {
                            goto LABEL_907;
                          }
                        }
                      }
                    }
                    if (v423 >= 0) {
                      uint64_t v431 = &__s1;
                    }
                    else {
                      uint64_t v431 = (long long *)__s1;
                    }
                    if (v424 >= v426) {
                      size_t v432 = v426;
                    }
                    else {
                      size_t v432 = v424;
                    }
                    int v433 = memcmp(v427, v431, v432);
                    BOOL v434 = v426 < v424;
                    if (v433) {
                      BOOL v434 = v433 < 0;
                    }
                    unint64_t v419 = v420;
                    a2 = v459;
                    if (!v434) {
                      goto LABEL_908;
                    }
                  }
                }
              }
              else
              {
                if (!*(unsigned char *)(v9 + 519)) {
                  goto LABEL_872;
                }
                uint64_t v410 = 0;
                while (*(unsigned __int8 *)(v9 + v410 + 496) == v409[v410])
                {
                  if (v405 == ++v410) {
                    goto LABEL_872;
                  }
                }
              }
            }
            if ((v405 & 0x80u) == 0) {
              uint64_t v411 = (const void *)(v9 + 496);
            }
            else {
              uint64_t v411 = *v404;
            }
            if (v406 >= v408) {
              size_t v412 = v408;
            }
            else {
              size_t v412 = v406;
            }
            int v413 = memcmp(v409, v411, v412);
            BOOL v414 = v408 < v406;
            if (v413) {
              BOOL v414 = v413 < 0;
            }
            if (v414) {
              goto LABEL_873;
            }
LABEL_922:
            v403 += 344;
            v9 += 344;
            if (v403 == a2) {
              return;
            }
          }
        }
      }
      return;
    }
    if (!a3)
    {
      if (v8 == a2) {
        return;
      }
      unint64_t v449 = a2 - v8;
      size_t v465 = 0x82FA0BE82FA0BE83 * ((uint64_t)(a2 - v8) >> 3);
      int64_t v467 = (v11 - 2) >> 1;
      int64_t v245 = v467;
      while (2)
      {
        int64_t v246 = v245;
        if (v467 < v245) {
          goto LABEL_695;
        }
        uint64_t v247 = (2 * v245) | 1;
        uint64_t v248 = v9 + 344 * v247;
        if (2 * v245 + 2 >= (uint64_t)v11 || !*(unsigned char *)(v9 + 344 * v247 + 312)) {
          goto LABEL_582;
        }
        if (!*(unsigned char *)(v248 + 656)) {
          goto LABEL_581;
        }
        uint64_t v249 = v9 + 344 * v247;
        uint64_t v250 = (const void **)(v249 + 152);
        char v251 = *(unsigned char *)(v248 + 175);
        size_t v252 = *(void *)(v249 + 160);
        if (v251 >= 0) {
          size_t v253 = *(unsigned __int8 *)(v248 + 175);
        }
        else {
          size_t v253 = *(void *)(v249 + 160);
        }
        char v254 = *(unsigned char *)(v248 + 519);
        if (v254 >= 0) {
          size_t v255 = *(unsigned __int8 *)(v248 + 519);
        }
        else {
          size_t v255 = *(void *)(v248 + 504);
        }
        if (v254 >= 0) {
          uint64_t v256 = (unsigned __int8 *)(v248 + 496);
        }
        else {
          uint64_t v256 = *(unsigned __int8 **)(v248 + 496);
        }
        if (v253 != v255) {
          goto LABEL_572;
        }
        if ((*(unsigned char *)(v248 + 175) & 0x80) != 0)
        {
          if (memcmp(*v250, v256, v252)) {
            goto LABEL_572;
          }
        }
        else if (*(unsigned char *)(v248 + 175))
        {
          uint64_t v257 = v256;
          long long v258 = v250;
          uint64_t v259 = *(unsigned __int8 *)(v248 + 175);
          while (*(unsigned __int8 *)v258 == *v257)
          {
            long long v258 = (const void **)((char *)v258 + 1);
            ++v257;
            if (!--v259) {
              goto LABEL_697;
            }
          }
LABEL_572:
          if (v251 >= 0) {
            long long v260 = v250;
          }
          else {
            long long v260 = *v250;
          }
          if (v253 >= v255) {
            size_t v261 = v255;
          }
          else {
            size_t v261 = v253;
          }
          int v262 = memcmp(v256, v260, v261);
          BOOL v263 = v255 < v253;
          if (v262) {
            BOOL v263 = v262 < 0;
          }
          uint64_t v9 = v461;
          if (v263)
          {
LABEL_581:
            v248 += 344;
            uint64_t v247 = 2 * v246 + 2;
          }
LABEL_582:
          uint64_t v264 = v9 + 344 * v246;
          if (!*(unsigned char *)(v248 + 312)) {
            goto LABEL_612;
          }
          if (!*(unsigned char *)(v9 + 344 * v246 + 312)) {
            goto LABEL_695;
          }
          long long v265 = (const void **)(v248 + 152);
          uint64_t v266 = v9 + 344 * v246;
          char v267 = *(unsigned char *)(v248 + 175);
          if (v267 >= 0) {
            size_t v268 = *(unsigned __int8 *)(v248 + 175);
          }
          else {
            size_t v268 = *(void *)(v248 + 160);
          }
          std::string v270 = *(unsigned __int8 **)(v266 + 152);
          size_t v271 = *(void *)(v266 + 160);
          uint64_t v269 = (unsigned __int8 *)(v266 + 152);
          int v272 = *(char *)(v264 + 175);
          if (v272 >= 0) {
            size_t v273 = *(unsigned __int8 *)(v264 + 175);
          }
          else {
            size_t v273 = v271;
          }
          if (v272 >= 0) {
            std::string::size_type v274 = v269;
          }
          else {
            std::string::size_type v274 = v270;
          }
          if (v268 == v273)
          {
            if ((*(unsigned char *)(v248 + 175) & 0x80) == 0)
            {
              if (!*(unsigned char *)(v248 + 175)) {
                goto LABEL_611;
              }
              std::string::size_type v275 = v274;
              uint64_t v276 = (unsigned __int8 *)(v248 + 152);
              uint64_t v277 = *(unsigned __int8 *)(v248 + 175);
              while (*v276 == *v275)
              {
                ++v276;
                ++v275;
                if (!--v277) {
                  goto LABEL_611;
                }
              }
              goto LABEL_601;
            }
            if (memcmp(*v265, v274, *(void *)(v248 + 160))) {
              goto LABEL_601;
            }
LABEL_611:
            uint64_t v9 = v461;
            if (*(float *)(v248 + 88) > *(float *)(v461 + 344 * v246 + 88)) {
              goto LABEL_695;
            }
LABEL_612:
            MEMORY[0x1CB7863F0](v492, v264);
            uint64_t v282 = v9 + 344 * v246;
            float v493 = *(float *)(v282 + 88);
            LOBYTE(v494) = 0;
            unsigned __int8 v511 = 0;
            if (*(unsigned char *)(v282 + 312))
            {
              uint64_t v283 = v9 + 344 * v246;
              uint64_t v284 = *(void *)(v283 + 96);
              v283 += 96;
              uint64_t v494 = v284;
              long long v285 = *(_OWORD *)(v283 + 8);
              uint64_t v496 = *(void *)(v283 + 24);
              long long v495 = v285;
              *(void *)(v283 + 16) = 0;
              *(void *)(v283 + 24) = 0;
              *(void *)(v283 + 8) = 0;
              long long v286 = *(_OWORD *)(v283 + 32);
              uint64_t v498 = *(void *)(v283 + 48);
              long long v497 = v286;
              *(void *)(v283 + 40) = 0;
              *(void *)(v283 + 48) = 0;
              *(void *)(v283 + 32) = 0;
              long long v287 = *(_OWORD *)(v283 + 56);
              uint64_t v500 = *(void *)(v283 + 72);
              long long __s1 = v287;
              *(void *)(v283 + 64) = 0;
              *(void *)(v283 + 72) = 0;
              *(void *)(v283 + 56) = 0;
              long long v288 = *(_OWORD *)(v283 + 80);
              *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(v283 + 92);
              v501[0] = v288;
              uint64_t v503 = 0;
              long long v502 = 0uLL;
              long long v502 = *(_OWORD *)(v283 + 112);
              uint64_t v503 = *(void *)(v283 + 128);
              *(void *)(v283 + 112) = 0;
              *(void *)(v283 + 120) = 0;
              *(void *)(v283 + 128) = 0;
              long long v289 = *(_OWORD *)(v283 + 136);
              uint64_t v505 = *(void *)(v283 + 152);
              long long v504 = v289;
              *(void *)(v283 + 144) = 0;
              *(void *)(v283 + 152) = 0;
              *(void *)(v283 + 136) = 0;
              int v506 = *(_DWORD *)(v283 + 160);
              long long v290 = *(_OWORD *)(v283 + 168);
              uint64_t v508 = *(void *)(v283 + 184);
              long long __p = v290;
              *(void *)(v283 + 176) = 0;
              *(void *)(v283 + 184) = 0;
              *(void *)(v283 + 168) = 0;
              long long v509 = 0uLL;
              uint64_t v510 = 0;
              long long v509 = *(_OWORD *)(v283 + 192);
              uint64_t v510 = *(void *)(v283 + 208);
              *(void *)(v283 + 192) = 0;
              *(void *)(v283 + 200) = 0;
              *(void *)(v283 + 208) = 0;
              unsigned __int8 v511 = 1;
            }
            uint64_t v291 = v9 + 344 * v246;
            long long v512 = *(_OWORD *)(v291 + 320);
            uint64_t v513 = *(void *)(v291 + 336);
            *(void *)(v291 + 320) = 0;
            *(void *)(v291 + 328) = 0;
            *(void *)(v291 + 336) = 0;
            while (1)
            {
              uint64_t v292 = v248;
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v264 + 88) = *(_DWORD *)(v248 + 88);
              uint64_t v293 = v248 + 96;
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v264 + 96, v248 + 96);
              uint64_t v294 = *(void **)(v264 + 320);
              if (v294)
              {
                *(void *)(v264 + 328) = v294;
                operator delete(v294);
                *(void *)(v264 + 320) = 0;
                *(void *)(v264 + 328) = 0;
                *(void *)(v264 + 336) = 0;
              }
              *(_OWORD *)(v264 + 320) = *(_OWORD *)(v248 + 320);
              *(void *)(v264 + 336) = *(void *)(v248 + 336);
              *(void *)(v248 + 320) = 0;
              *(void *)(v248 + 328) = 0;
              *(void *)(v248 + 336) = 0;
              if (v467 < v247)
              {
LABEL_681:
                sirinluinternal::MatchingSpan::operator=();
                *(float *)(v292 + 88) = v493;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v293, (uint64_t)&v494);
                unint64_t v326 = *(void **)(v292 + 320);
                if (v326)
                {
                  *(void *)(v292 + 328) = v326;
                  operator delete(v326);
                  *(void *)(v292 + 320) = 0;
                  *(void *)(v292 + 328) = 0;
                  *(void *)(v292 + 336) = 0;
                }
                *(_OWORD *)(v292 + 320) = v512;
                *(void *)(v292 + 336) = v513;
                long long v512 = 0uLL;
                uint64_t v513 = 0;
                if (v511)
                {
                  v469[0] = (void **)&v509;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v469);
                  if (SHIBYTE(v508) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v505) < 0) {
                    operator delete((void *)v504);
                  }
                  v469[0] = (void **)&v502;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v469);
                  if (SHIBYTE(v500) < 0) {
                    operator delete((void *)__s1);
                  }
                  if (SHIBYTE(v498) < 0) {
                    operator delete((void *)v497);
                  }
                  if (SHIBYTE(v496) < 0) {
                    operator delete((void *)v495);
                  }
                }
                MEMORY[0x1CB786420](v492);
                goto LABEL_695;
              }
              uint64_t v295 = 2 * v247;
              uint64_t v296 = (2 * v247) | 1;
              uint64_t v247 = v296;
              uint64_t v248 = v9 + 344 * v296;
              uint64_t v297 = v295 + 2;
              if (v295 + 2 >= (uint64_t)v11 || !*(unsigned char *)(v9 + 344 * v296 + 312)) {
                goto LABEL_648;
              }
              if (!*(unsigned char *)(v248 + 656)) {
                goto LABEL_647;
              }
              uint64_t v298 = v9 + 344 * v296;
              unint64_t v299 = (const void **)(v298 + 152);
              char v300 = *(unsigned char *)(v248 + 175);
              size_t v301 = *(void *)(v298 + 160);
              if (v300 >= 0) {
                size_t v302 = *(unsigned __int8 *)(v248 + 175);
              }
              else {
                size_t v302 = *(void *)(v298 + 160);
              }
              char v303 = *(unsigned char *)(v248 + 519);
              if (v303 >= 0) {
                size_t v304 = *(unsigned __int8 *)(v248 + 519);
              }
              else {
                size_t v304 = *(void *)(v248 + 504);
              }
              if (v303 >= 0) {
                long long v305 = (unsigned __int8 *)(v248 + 496);
              }
              else {
                long long v305 = *(unsigned __int8 **)(v248 + 496);
              }
              if (v302 == v304)
              {
                if ((*(unsigned char *)(v248 + 175) & 0x80) != 0)
                {
                  uint64_t v453 = v305;
                  unint64_t v455 = v299;
                  int v309 = memcmp(*v299, v305, v301);
                  long long v305 = v453;
                  unint64_t v299 = v455;
                  if (!v309)
                  {
LABEL_679:
                    uint64_t v9 = v461;
                    unint64_t v11 = v465;
                    if (*(float *)(v461 + 344 * v296 + 88) > *(float *)(v248 + 432)) {
                      goto LABEL_647;
                    }
                    goto LABEL_648;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v248 + 175)) {
                    goto LABEL_679;
                  }
                  int64x2_t v306 = v305;
                  std::string::size_type v307 = v299;
                  uint64_t v308 = *(unsigned __int8 *)(v248 + 175);
                  while (*(unsigned __int8 *)v307 == *v306)
                  {
                    std::string::size_type v307 = (const void **)((char *)v307 + 1);
                    ++v306;
                    if (!--v308) {
                      goto LABEL_679;
                    }
                  }
                }
              }
              if (v300 >= 0) {
                std::string::size_type v310 = v299;
              }
              else {
                std::string::size_type v310 = *v299;
              }
              if (v302 >= v304) {
                size_t v311 = v304;
              }
              else {
                size_t v311 = v302;
              }
              int v312 = memcmp(v305, v310, v311);
              BOOL v313 = v304 < v302;
              if (v312) {
                BOOL v313 = v312 < 0;
              }
              uint64_t v9 = v461;
              unint64_t v11 = v465;
              if (v313)
              {
LABEL_647:
                v248 += 344;
                uint64_t v247 = v297;
              }
LABEL_648:
              uint64_t v264 = v292;
              if (!*(unsigned char *)(v248 + 312)) {
                continue;
              }
              if (!v511) {
                goto LABEL_681;
              }
              unint64_t v314 = (const void **)(v248 + 152);
              char v315 = *(unsigned char *)(v248 + 175);
              if (v315 >= 0) {
                size_t v316 = *(unsigned __int8 *)(v248 + 175);
              }
              else {
                size_t v316 = *(void *)(v248 + 160);
              }
              if (v500 >= 0) {
                size_t v317 = HIBYTE(v500);
              }
              else {
                size_t v317 = *((void *)&__s1 + 1);
              }
              if (v500 >= 0) {
                uint64_t v318 = &__s1;
              }
              else {
                uint64_t v318 = (long long *)__s1;
              }
              if (v316 == v317)
              {
                if ((*(unsigned char *)(v248 + 175) & 0x80) != 0)
                {
                  if (!memcmp(*v314, v318, *(void *)(v248 + 160)))
                  {
LABEL_677:
                    uint64_t v264 = v292;
                    uint64_t v9 = v461;
                    unint64_t v11 = v465;
                    if (*(float *)(v248 + 88) > v493) {
                      goto LABEL_681;
                    }
                    continue;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v248 + 175)) {
                    goto LABEL_677;
                  }
                  uint64_t v319 = (unsigned __int8 *)v318;
                  long long v320 = (unsigned __int8 *)(v248 + 152);
                  uint64_t v321 = *(unsigned __int8 *)(v248 + 175);
                  while (*v320 == *v319)
                  {
                    ++v320;
                    ++v319;
                    if (!--v321) {
                      goto LABEL_677;
                    }
                  }
                }
              }
              if (v315 >= 0) {
                long long v322 = (const void *)(v248 + 152);
              }
              else {
                long long v322 = *v314;
              }
              if (v316 >= v317) {
                size_t v323 = v317;
              }
              else {
                size_t v323 = v316;
              }
              int v324 = memcmp(v318, v322, v323);
              BOOL v325 = v317 < v316;
              if (v324) {
                BOOL v325 = v324 < 0;
              }
              uint64_t v264 = v292;
              uint64_t v9 = v461;
              unint64_t v11 = v465;
              if (v325) {
                goto LABEL_681;
              }
            }
          }
LABEL_601:
          if (v267 >= 0) {
            long long v278 = (const void *)(v248 + 152);
          }
          else {
            long long v278 = *v265;
          }
          if (v268 >= v273) {
            size_t v279 = v273;
          }
          else {
            size_t v279 = v268;
          }
          int v280 = memcmp(v274, v278, v279);
          BOOL v281 = v273 < v268;
          if (v280) {
            BOOL v281 = v280 < 0;
          }
          uint64_t v9 = v461;
          if (!v281) {
            goto LABEL_612;
          }
LABEL_695:
          int64_t v245 = v246 - 1;
          if (v246) {
            continue;
          }
          int64_t v327 = v449 / 0x158;
          uint64_t v456 = (void *)(v9 + 320);
          uint64_t v451 = v9 + 104;
          uint64_t v448 = v9 + 152;
          uint64_t v450 = v9 + 128;
          long long v446 = (long long *)(v9 + 176);
          uint64_t v442 = v9 + 232;
          uint64_t v444 = (void *)(v9 + 208);
          v440 = (void *)(v9 + 288);
          uint64_t v441 = v9 + 264;
          unint64_t v328 = v459;
LABEL_699:
          unint64_t v464 = v328;
          MEMORY[0x1CB7863F0](v469, v9);
          int v470 = *(_DWORD *)(v9 + 88);
          LOBYTE(v471) = 0;
          char v488 = 0;
          if (*(unsigned char *)(v9 + 312))
          {
            uint64_t v471 = *(void *)(v9 + 96);
            uint64_t v329 = *(void *)(v451 + 16);
            long long v472 = *(_OWORD *)v451;
            uint64_t v473 = v329;
            *(void *)(v451 + 8) = 0;
            *(void *)(v451 + 16) = 0;
            *(void *)uint64_t v451 = 0;
            uint64_t v330 = *(void *)(v450 + 16);
            long long v474 = *(_OWORD *)v450;
            uint64_t v475 = v330;
            *(void *)(v450 + 8) = 0;
            *(void *)(v450 + 16) = 0;
            *(void *)uint64_t v450 = 0;
            long long v331 = *(_OWORD *)v448;
            uint64_t v477 = *(void *)(v448 + 16);
            long long v476 = v331;
            *(void *)uint64_t v448 = 0;
            *(void *)(v448 + 8) = 0;
            *(void *)(v448 + 16) = 0;
            long long v332 = *v446;
            *(_OWORD *)((char *)v478 + 12) = *(long long *)((char *)v446 + 12);
            v478[0] = v332;
            uint64_t v480 = 0;
            long long v479 = 0uLL;
            long long v479 = *(_OWORD *)(v9 + 208);
            uint64_t v480 = *(void *)(v9 + 224);
            *uint64_t v444 = 0;
            v444[1] = 0;
            v444[2] = 0;
            long long v333 = *(_OWORD *)v442;
            uint64_t v482 = *(void *)(v442 + 16);
            long long v481 = v333;
            *(void *)uint64_t v442 = 0;
            *(void *)(v442 + 8) = 0;
            *(void *)(v442 + 16) = 0;
            int v483 = *(_DWORD *)(v9 + 256);
            long long v334 = *(_OWORD *)v441;
            uint64_t v485 = *(void *)(v441 + 16);
            long long v484 = v334;
            *(void *)uint64_t v441 = 0;
            *(void *)(v441 + 8) = 0;
            *(void *)(v441 + 16) = 0;
            long long v486 = 0uLL;
            uint64_t v487 = 0;
            long long v486 = *(_OWORD *)(v9 + 288);
            uint64_t v487 = *(void *)(v9 + 304);
            void *v440 = 0;
            v440[1] = 0;
            v440[2] = 0;
            char v488 = 1;
          }
          uint64_t v335 = v9;
          uint64_t v336 = 0;
          *(_OWORD *)uint64_t v489 = *(_OWORD *)(v335 + 320);
          uint64_t v490 = *(void *)(v335 + 336);
          *uint64_t v456 = 0;
          v456[1] = 0;
          v456[2] = 0;
          int64_t v337 = (unint64_t)(v327 - 2) >> 1;
          size_t v466 = v337;
          uint64_t v468 = v327;
          while (2)
          {
            uint64_t v338 = v336 + 1;
            uint64_t v339 = v335 + 344 * (v336 + 1);
            uint64_t v340 = 2 * v336;
            uint64_t v336 = (2 * v336) | 1;
            uint64_t v341 = v340 + 2;
            if (v340 + 2 >= v327 || !*(unsigned char *)(v335 + 344 * v338 + 312)) {
              goto LABEL_732;
            }
            if (!*(unsigned char *)(v339 + 656)) {
              goto LABEL_731;
            }
            uint64_t v342 = v335 + 344 * v338;
            uint64_t v343 = (const void **)(v342 + 152);
            char v344 = *(unsigned char *)(v339 + 175);
            size_t v345 = *(void *)(v342 + 160);
            if (v344 >= 0) {
              size_t v346 = *(unsigned __int8 *)(v339 + 175);
            }
            else {
              size_t v346 = *(void *)(v342 + 160);
            }
            char v347 = *(unsigned char *)(v339 + 519);
            if (v347 >= 0) {
              size_t v348 = *(unsigned __int8 *)(v339 + 519);
            }
            else {
              size_t v348 = *(void *)(v339 + 504);
            }
            if (v347 >= 0) {
              float32x2_t v349 = (unsigned __int8 *)(v339 + 496);
            }
            else {
              float32x2_t v349 = *(unsigned __int8 **)(v339 + 496);
            }
            if (v346 != v348) {
              goto LABEL_722;
            }
            if ((*(unsigned char *)(v339 + 175) & 0x80) != 0)
            {
              if (memcmp(*v343, v349, v345)) {
                goto LABEL_722;
              }
            }
            else if (*(unsigned char *)(v339 + 175))
            {
              float32x4_t v350 = v349;
              v351 = v343;
              uint64_t v352 = *(unsigned __int8 *)(v339 + 175);
              while (*(unsigned __int8 *)v351 == *v350)
              {
                v351 = (const void **)((char *)v351 + 1);
                ++v350;
                if (!--v352) {
                  goto LABEL_736;
                }
              }
LABEL_722:
              if (v344 >= 0) {
                float32x4_t v353 = v343;
              }
              else {
                float32x4_t v353 = *v343;
              }
              if (v346 >= v348) {
                size_t v354 = v348;
              }
              else {
                size_t v354 = v346;
              }
              int v355 = memcmp(v349, v353, v354);
              BOOL v356 = v348 < v346;
              if (v355) {
                BOOL v356 = v355 < 0;
              }
              int64_t v337 = v466;
              int64_t v327 = v468;
              if (v356)
              {
LABEL_731:
                v339 += 344;
                uint64_t v336 = v341;
              }
LABEL_732:
              sirinluinternal::MatchingSpan::operator=();
              *(_DWORD *)(v335 + 88) = *(_DWORD *)(v339 + 88);
              std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v335 + 96, v339 + 96);
              uint64_t v357 = *(void **)(v335 + 320);
              if (v357)
              {
                *(void *)(v335 + 328) = v357;
                operator delete(v357);
                *(void *)(v335 + 320) = 0;
                *(void *)(v335 + 328) = 0;
                *(void *)(v335 + 336) = 0;
              }
              unint64_t v358 = (void *)(v339 + 320);
              *(_OWORD *)(v335 + 320) = *(_OWORD *)(v339 + 320);
              *(void *)(v335 + 336) = *(void *)(v339 + 336);
              *(void *)(v339 + 320) = 0;
              *(void *)(v339 + 328) = 0;
              *(void *)(v339 + 336) = 0;
              uint64_t v335 = v339;
              if (v336 <= v337) {
                continue;
              }
              if (v339 == v464 - 344)
              {
                unint64_t v328 = v464 - 344;
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v339 + 88) = v470;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v339 + 96, (uint64_t)&v471);
                uint64_t v375 = *(void **)(v339 + 320);
                if (v375)
                {
                  *(void *)(v339 + 328) = v375;
                  operator delete(v375);
                  *unint64_t v358 = 0;
                  *(void *)(v339 + 328) = 0;
                  *(void *)(v339 + 336) = 0;
                }
                *(_OWORD *)(v339 + 320) = *(_OWORD *)v489;
                *(void *)(v339 + 336) = v490;
                v489[0] = 0;
                v489[1] = 0;
                uint64_t v490 = 0;
                uint64_t v9 = v461;
              }
              else
              {
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v339 + 88) = *(_DWORD *)(v464 - 256);
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v339 + 96, v464 - 248);
                uint64_t v359 = *(void **)(v339 + 320);
                if (v359)
                {
                  *(void *)(v339 + 328) = v359;
                  operator delete(v359);
                  *unint64_t v358 = 0;
                  *(void *)(v339 + 328) = 0;
                  *(void *)(v339 + 336) = 0;
                }
                uint64_t v360 = (void *)(v464 - 24);
                *(_OWORD *)(v339 + 320) = *(_OWORD *)(v464 - 24);
                *(void *)(v339 + 336) = *(void *)(v464 - 8);
                *uint64_t v360 = 0;
                v360[1] = 0;
                v360[2] = 0;
                unint64_t v328 = v464 - 344;
                sirinluinternal::MatchingSpan::operator=();
                *(_DWORD *)(v464 - 256) = v470;
                std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v464 - 248, (uint64_t)&v471);
                uint64_t v361 = *(void **)(v464 - 24);
                if (v361)
                {
                  *(void *)(v464 - 16) = v361;
                  operator delete(v361);
                }
                *(_OWORD *)(v464 - 24) = *(_OWORD *)v489;
                *(void *)(v464 - 8) = v490;
                v489[0] = 0;
                v489[1] = 0;
                uint64_t v490 = 0;
                uint64_t v9 = v461;
                uint64_t v362 = v339 + 344 - v461;
                if (v362 >= 345)
                {
                  unint64_t v363 = (v362 / 0x158uLL - 2) >> 1;
                  unint64_t v364 = v461 + 344 * v363;
                  if (*(unsigned char *)(v364 + 312))
                  {
                    if (!*(unsigned char *)(v339 + 312)) {
                      goto LABEL_790;
                    }
                    unint64_t v365 = v461 + 344 * v363;
                    long long v366 = (const void **)(v365 + 152);
                    char v367 = *(unsigned char *)(v364 + 175);
                    if (v367 >= 0) {
                      size_t v368 = *(unsigned __int8 *)(v364 + 175);
                    }
                    else {
                      size_t v368 = *(void *)(v365 + 160);
                    }
                    int v369 = *(char *)(v339 + 175);
                    if (v369 >= 0) {
                      size_t v370 = *(unsigned __int8 *)(v339 + 175);
                    }
                    else {
                      size_t v370 = *(void *)(v339 + 160);
                    }
                    if (v369 >= 0) {
                      uint64_t v371 = (unsigned __int8 *)(v339 + 152);
                    }
                    else {
                      uint64_t v371 = *(unsigned __int8 **)(v339 + 152);
                    }
                    if (v368 != v370) {
                      goto LABEL_779;
                    }
                    if ((*(unsigned char *)(v364 + 175) & 0x80) != 0)
                    {
                      if (memcmp(*v366, v371, *(void *)(v365 + 160))) {
                        goto LABEL_779;
                      }
LABEL_789:
                      uint64_t v9 = v461;
                      if (*(float *)(v461 + 344 * v363 + 88) <= *(float *)(v339 + 88)) {
                        goto LABEL_765;
                      }
                      goto LABEL_790;
                    }
                    if (!*(unsigned char *)(v364 + 175)) {
                      goto LABEL_789;
                    }
                    uint64_t v372 = v371;
                    v373 = v366;
                    uint64_t v374 = *(unsigned __int8 *)(v364 + 175);
                    while (*(unsigned __int8 *)v373 == *v372)
                    {
                      v373 = (const void **)((char *)v373 + 1);
                      ++v372;
                      if (!--v374) {
                        goto LABEL_789;
                      }
                    }
LABEL_779:
                    if (v367 >= 0) {
                      int64x2_t v376 = v366;
                    }
                    else {
                      int64x2_t v376 = *v366;
                    }
                    if (v368 >= v370) {
                      size_t v377 = v370;
                    }
                    else {
                      size_t v377 = v368;
                    }
                    int v378 = memcmp(v371, v376, v377);
                    BOOL v379 = v370 < v368;
                    if (v378) {
                      BOOL v379 = v378 < 0;
                    }
                    uint64_t v9 = v461;
                    if (v379)
                    {
LABEL_790:
                      MEMORY[0x1CB7863F0](v492, v339);
                      float v493 = *(float *)(v339 + 88);
                      LOBYTE(v494) = 0;
                      unsigned __int8 v511 = 0;
                      if (*(unsigned char *)(v339 + 312))
                      {
                        uint64_t v494 = *(void *)(v339 + 96);
                        long long v380 = *(_OWORD *)(v339 + 104);
                        uint64_t v496 = *(void *)(v339 + 120);
                        long long v495 = v380;
                        *(void *)(v339 + 112) = 0;
                        *(void *)(v339 + 120) = 0;
                        *(void *)(v339 + 104) = 0;
                        long long v381 = *(_OWORD *)(v339 + 128);
                        uint64_t v498 = *(void *)(v339 + 144);
                        long long v497 = v381;
                        *(void *)(v339 + 136) = 0;
                        *(void *)(v339 + 144) = 0;
                        *(void *)(v339 + 128) = 0;
                        long long v382 = *(_OWORD *)(v339 + 152);
                        uint64_t v500 = *(void *)(v339 + 168);
                        long long __s1 = v382;
                        *(void *)(v339 + 160) = 0;
                        *(void *)(v339 + 168) = 0;
                        *(void *)(v339 + 152) = 0;
                        long long v383 = *(_OWORD *)(v339 + 176);
                        *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(v339 + 188);
                        v501[0] = v383;
                        uint64_t v503 = 0;
                        long long v502 = 0uLL;
                        long long v502 = *(_OWORD *)(v339 + 208);
                        uint64_t v503 = *(void *)(v339 + 224);
                        *(void *)(v339 + 208) = 0;
                        *(void *)(v339 + 216) = 0;
                        *(void *)(v339 + 224) = 0;
                        long long v384 = *(_OWORD *)(v339 + 232);
                        uint64_t v505 = *(void *)(v339 + 248);
                        long long v504 = v384;
                        *(void *)(v339 + 240) = 0;
                        *(void *)(v339 + 248) = 0;
                        *(void *)(v339 + 232) = 0;
                        int v506 = *(_DWORD *)(v339 + 256);
                        long long v385 = *(_OWORD *)(v339 + 264);
                        uint64_t v508 = *(void *)(v339 + 280);
                        long long __p = v385;
                        *(void *)(v339 + 272) = 0;
                        *(void *)(v339 + 280) = 0;
                        *(void *)(v339 + 264) = 0;
                        long long v509 = 0uLL;
                        uint64_t v510 = 0;
                        long long v509 = *(_OWORD *)(v339 + 288);
                        uint64_t v510 = *(void *)(v339 + 304);
                        *(void *)(v339 + 288) = 0;
                        *(void *)(v339 + 296) = 0;
                        *(void *)(v339 + 304) = 0;
                        unsigned __int8 v511 = 1;
                      }
                      long long v512 = *(_OWORD *)(v339 + 320);
                      uint64_t v513 = *(void *)(v339 + 336);
                      *unint64_t v358 = 0;
                      *(void *)(v339 + 328) = 0;
                      *(void *)(v339 + 336) = 0;
                      while (1)
                      {
                        do
                        {
                          unint64_t v386 = v364;
                          sirinluinternal::MatchingSpan::operator=();
                          *(_DWORD *)(v339 + 88) = *(_DWORD *)(v364 + 88);
                          uint64_t v387 = v364 + 96;
                          std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v339 + 96, v364 + 96);
                          float v388 = *(void **)(v339 + 320);
                          if (v388)
                          {
                            *(void *)(v339 + 328) = v388;
                            operator delete(v388);
                            *(void *)(v339 + 320) = 0;
                            *(void *)(v339 + 328) = 0;
                            *(void *)(v339 + 336) = 0;
                          }
                          *(_OWORD *)(v339 + 320) = *(_OWORD *)(v364 + 320);
                          *(void *)(v339 + 336) = *(void *)(v364 + 336);
                          *(void *)(v364 + 320) = 0;
                          *(void *)(v364 + 328) = 0;
                          *(void *)(v364 + 336) = 0;
                          if (!v363 || (unint64_t v363 = (v363 - 1) >> 1, v364 = v461 + 344 * v363, !*(unsigned char *)(v364 + 312)))
                          {
LABEL_826:
                            sirinluinternal::MatchingSpan::operator=();
                            *(float *)(v386 + 88) = v493;
                            std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v387, (uint64_t)&v494);
                            v402 = *(void **)(v386 + 320);
                            if (v402)
                            {
                              *(void *)(v386 + 328) = v402;
                              operator delete(v402);
                            }
                            *(_OWORD *)(v386 + 320) = v512;
                            *(void *)(v386 + 336) = v513;
                            long long v512 = 0uLL;
                            uint64_t v513 = 0;
                            uint64_t v9 = v461;
                            if (v511)
                            {
                              v491 = (void **)&v509;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v491);
                              if (SHIBYTE(v508) < 0) {
                                operator delete((void *)__p);
                              }
                              if (SHIBYTE(v505) < 0) {
                                operator delete((void *)v504);
                              }
                              v491 = (void **)&v502;
                              std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v491);
                              if (SHIBYTE(v500) < 0) {
                                operator delete((void *)__s1);
                              }
                              if (SHIBYTE(v498) < 0) {
                                operator delete((void *)v497);
                              }
                              if (SHIBYTE(v496) < 0) {
                                operator delete((void *)v495);
                              }
                            }
                            MEMORY[0x1CB786420](v492);
                            if (v489[0])
                            {
                              v489[1] = v489[0];
                              operator delete(v489[0]);
                            }
                            goto LABEL_765;
                          }
                          uint64_t v339 = v386;
                        }
                        while (!v511);
                        unint64_t v389 = v461 + 344 * v363;
                        uint64_t v390 = (const void **)(v389 + 152);
                        char v391 = *(unsigned char *)(v364 + 175);
                        if (v391 >= 0) {
                          size_t v392 = *(unsigned __int8 *)(v364 + 175);
                        }
                        else {
                          size_t v392 = *(void *)(v389 + 160);
                        }
                        if (v500 >= 0) {
                          size_t v393 = HIBYTE(v500);
                        }
                        else {
                          size_t v393 = *((void *)&__s1 + 1);
                        }
                        if (v500 >= 0) {
                          v394 = &__s1;
                        }
                        else {
                          v394 = (long long *)__s1;
                        }
                        if (v392 != v393) {
                          goto LABEL_815;
                        }
                        if ((*(unsigned char *)(v364 + 175) & 0x80) != 0)
                        {
                          if (!memcmp(*v390, v394, *(void *)(v389 + 160))) {
                            goto LABEL_825;
                          }
LABEL_815:
                          if (v391 >= 0) {
                            v398 = v390;
                          }
                          else {
                            v398 = *v390;
                          }
                          if (v392 >= v393) {
                            size_t v399 = v393;
                          }
                          else {
                            size_t v399 = v392;
                          }
                          int v400 = memcmp(v394, v398, v399);
                          BOOL v401 = v393 < v392;
                          if (v400) {
                            BOOL v401 = v400 < 0;
                          }
                          uint64_t v339 = v386;
                          if (!v401) {
                            goto LABEL_826;
                          }
                        }
                        else
                        {
                          if (*(unsigned char *)(v364 + 175))
                          {
                            int v395 = (unsigned __int8 *)v394;
                            v396 = v390;
                            uint64_t v397 = *(unsigned __int8 *)(v364 + 175);
                            while (*(unsigned __int8 *)v396 == *v395)
                            {
                              v396 = (const void **)((char *)v396 + 1);
                              ++v395;
                              if (!--v397) {
                                goto LABEL_825;
                              }
                            }
                            goto LABEL_815;
                          }
LABEL_825:
                          uint64_t v339 = v386;
                          if (*(float *)(v461 + 344 * v363 + 88) <= v493) {
                            goto LABEL_826;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_765:
              if (v488)
              {
                v492[0] = (void **)&v486;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v492);
                if (SHIBYTE(v485) < 0) {
                  operator delete((void *)v484);
                }
                if (SHIBYTE(v482) < 0) {
                  operator delete((void *)v481);
                }
                v492[0] = (void **)&v479;
                std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v492);
                if (SHIBYTE(v477) < 0) {
                  operator delete((void *)v476);
                }
                if (SHIBYTE(v475) < 0) {
                  operator delete((void *)v474);
                }
                if (SHIBYTE(v473) < 0) {
                  operator delete((void *)v472);
                }
              }
              MEMORY[0x1CB786420](v469);
              int64_t v327 = v468 - 1;
              if (v468 <= 2) {
                return;
              }
              goto LABEL_699;
            }
            break;
          }
LABEL_736:
          int64_t v337 = v466;
          int64_t v327 = v468;
          if (*(float *)(v335 + 344 * v338 + 88) > *(float *)(v339 + 432)) {
            goto LABEL_731;
          }
          goto LABEL_732;
        }
        break;
      }
LABEL_697:
      uint64_t v9 = v461;
      if (*(float *)(v461 + 344 * v247 + 88) > *(float *)(v248 + 432)) {
        goto LABEL_581;
      }
      goto LABEL_582;
    }
    if ((unint64_t)v10 >= 0xAC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v8 + 344 * (v11 >> 1), v454);
      uint64_t v12 = 344 * (v11 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8 + 344, v12 + v8 - 344, v447);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8 + 688, v8 + 344 + v12, v445);
      uint64_t v9 = v8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v12 + v8 - 344, v8 + v12, v8 + 344 + v12);
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v8, v8 + v12);
    }
    else
    {
      v13.n128_f32[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8 + 344 * (v11 >> 1), v8, v454);
    }
    --a3;
    if (a4) {
      goto LABEL_38;
    }
    if (!*(unsigned char *)(v9 - 32)) {
      goto LABEL_228;
    }
    if (!*(unsigned char *)(v9 + 312)) {
      goto LABEL_38;
    }
    int v14 = (const void **)(v9 - 192);
    char v15 = *(unsigned char *)(v9 - 169);
    if (v15 >= 0) {
      size_t v16 = *(unsigned __int8 *)(v9 - 169);
    }
    else {
      size_t v16 = *(void *)(v9 - 184);
    }
    int v17 = *(char *)(v9 + 175);
    if (v17 >= 0) {
      size_t v18 = *(unsigned __int8 *)(v9 + 175);
    }
    else {
      size_t v18 = *(void *)(v9 + 160);
    }
    if (v17 >= 0) {
      unsigned int v19 = (unsigned __int8 *)(v9 + 152);
    }
    else {
      unsigned int v19 = *(unsigned __int8 **)(v9 + 152);
    }
    if (v16 != v18) {
      goto LABEL_29;
    }
    if ((*(unsigned char *)(v9 - 169) & 0x80) != 0)
    {
      if (memcmp(*v14, v19, *(void *)(v9 - 184))) {
        goto LABEL_29;
      }
      goto LABEL_227;
    }
    if (*(unsigned char *)(v9 - 169))
    {
      long long v20 = v19;
      long long v21 = (unsigned __int8 *)(v9 - 192);
      uint64_t v22 = *(unsigned __int8 *)(v9 - 169);
      while (*v21 == *v20)
      {
        ++v21;
        ++v20;
        if (!--v22) {
          goto LABEL_227;
        }
      }
LABEL_29:
      if (v15 >= 0) {
        long long v23 = (const void *)(v9 - 192);
      }
      else {
        long long v23 = *v14;
      }
      if (v16 >= v18) {
        size_t v24 = v18;
      }
      else {
        size_t v24 = v16;
      }
      int v25 = memcmp(v19, v23, v24);
      BOOL v26 = v18 < v16;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (v26) {
        goto LABEL_38;
      }
LABEL_228:
      MEMORY[0x1CB7863F0](v492, v9, v13);
      float v105 = *(float *)(v9 + 88);
      float v493 = v105;
      LOBYTE(v494) = 0;
      unsigned __int8 v511 = 0;
      int v106 = *(unsigned __int8 *)(v9 + 312);
      if (*(unsigned char *)(v9 + 312))
      {
        uint64_t v494 = *(void *)(v9 + 96);
        uint64_t v107 = *(void *)(v9 + 120);
        long long v495 = *(_OWORD *)(v9 + 104);
        uint64_t v496 = v107;
        *(void *)(v9 + 112) = 0;
        *(void *)(v9 + 120) = 0;
        *(void *)(v9 + 104) = 0;
        uint64_t v108 = *(void *)(v9 + 144);
        long long v497 = *(_OWORD *)(v9 + 128);
        uint64_t v498 = v108;
        *(void *)(v9 + 136) = 0;
        *(void *)(v9 + 144) = 0;
        *(void *)(v9 + 128) = 0;
        long long v109 = *(_OWORD *)(v9 + 152);
        uint64_t v500 = *(void *)(v9 + 168);
        long long __s1 = v109;
        *(void *)(v9 + 152) = 0;
        *(void *)(v9 + 160) = 0;
        *(void *)(v9 + 168) = 0;
        long long v110 = *(_OWORD *)(v9 + 176);
        *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(v9 + 188);
        v501[0] = v110;
        uint64_t v503 = 0;
        long long v502 = 0uLL;
        long long v502 = *(_OWORD *)(v9 + 208);
        uint64_t v503 = *(void *)(v9 + 224);
        *(void *)(v9 + 208) = 0;
        *(void *)(v9 + 216) = 0;
        *(void *)(v9 + 224) = 0;
        long long v111 = *(_OWORD *)(v9 + 232);
        uint64_t v505 = *(void *)(v9 + 248);
        long long v504 = v111;
        *(void *)(v9 + 232) = 0;
        *(void *)(v9 + 240) = 0;
        *(void *)(v9 + 248) = 0;
        int v506 = *(_DWORD *)(v9 + 256);
        long long v112 = *(_OWORD *)(v9 + 264);
        uint64_t v508 = *(void *)(v9 + 280);
        long long __p = v112;
        *(void *)(v9 + 264) = 0;
        *(void *)(v9 + 272) = 0;
        *(void *)(v9 + 280) = 0;
        long long v509 = 0uLL;
        uint64_t v510 = 0;
        long long v509 = *(_OWORD *)(v9 + 288);
        uint64_t v510 = *(void *)(v9 + 304);
        *(void *)(v9 + 288) = 0;
        *(void *)(v9 + 296) = 0;
        *(void *)(v9 + 304) = 0;
        unsigned __int8 v511 = 1;
      }
      long long v512 = *(_OWORD *)(v9 + 320);
      uint64_t v513 = *(void *)(v9 + 336);
      *(void *)(v9 + 320) = 0;
      *(void *)(v9 + 328) = 0;
      *(void *)(v9 + 336) = 0;
      if (!v106)
      {
LABEL_291:
        unint64_t v8 = v9 + 344;
        if (v9 + 344 >= a2) {
          goto LABEL_326;
        }
        unint64_t v141 = v9;
        size_t v142 = HIBYTE(v500);
        size_t v143 = *((void *)&__s1 + 1);
        unint64_t v144 = (const void *)__s1;
        if (v500 >= 0) {
          size_t v145 = HIBYTE(v500);
        }
        else {
          size_t v145 = *((void *)&__s1 + 1);
        }
        if (v500 >= 0) {
          uint64_t v146 = &__s1;
        }
        else {
          uint64_t v146 = (long long *)__s1;
        }
        while (1)
        {
          unint64_t v147 = v141;
          unint64_t v141 = v8;
          if (!v106) {
            goto LABEL_322;
          }
          if (!*(unsigned char *)(v147 + 656)) {
            goto LABEL_332;
          }
          char v148 = *(unsigned char *)(v147 + 519);
          if (v148 >= 0) {
            size_t v149 = *(unsigned __int8 *)(v147 + 519);
          }
          else {
            size_t v149 = *(void *)(v147 + 504);
          }
          if (v148 >= 0) {
            long long v150 = (unsigned __int8 *)(v147 + 496);
          }
          else {
            long long v150 = *(unsigned __int8 **)(v147 + 496);
          }
          if (v145 == v149)
          {
            if ((v142 & 0x80) != 0)
            {
              if (!memcmp(v144, v150, v143))
              {
LABEL_321:
                if (v105 > *(float *)(v147 + 432)) {
                  goto LABEL_325;
                }
                goto LABEL_322;
              }
            }
            else
            {
              if (!v142) {
                goto LABEL_321;
              }
              uint64_t v151 = v150;
              uint64_t v152 = &__s1;
              size_t v153 = v142;
              while (*(unsigned __int8 *)v152 == *v151)
              {
                uint64_t v152 = (long long *)((char *)v152 + 1);
                ++v151;
                if (!--v153) {
                  goto LABEL_321;
                }
              }
            }
          }
          if (v145 >= v149) {
            size_t v154 = v149;
          }
          else {
            size_t v154 = v145;
          }
          int v155 = memcmp(v150, v146, v154);
          BOOL v156 = v149 < v145;
          if (v155) {
            BOOL v156 = v155 < 0;
          }
          if (v156)
          {
LABEL_325:
            unint64_t v8 = v141;
            goto LABEL_326;
          }
LABEL_322:
          unint64_t v8 = v141 + 344;
          if (v141 + 344 >= v459) {
            goto LABEL_326;
          }
        }
      }
      if (*(unsigned char *)(a2 - 32))
      {
        char v113 = HIBYTE(v500);
        if (v500 >= 0) {
          size_t v114 = HIBYTE(v500);
        }
        else {
          size_t v114 = *((void *)&__s1 + 1);
        }
        char v115 = *(unsigned char *)(a2 - 169);
        if (v115 >= 0) {
          size_t v116 = *(unsigned __int8 *)(a2 - 169);
        }
        else {
          size_t v116 = *(void *)(a2 - 184);
        }
        if (v115 >= 0) {
          unsigned int v117 = v443;
        }
        else {
          unsigned int v117 = *(const void ***)(a2 - 192);
        }
        if (v114 != v116) {
          goto LABEL_249;
        }
        if (v500 < 0)
        {
          if (memcmp((const void *)__s1, v117, *((size_t *)&__s1 + 1))) {
            goto LABEL_249;
          }
        }
        else if (HIBYTE(v500))
        {
          unsigned int v118 = v117;
          uint64_t v119 = &__s1;
          uint64_t v120 = HIBYTE(v500);
          while (*(unsigned __int8 *)v119 == *(unsigned __int8 *)v118)
          {
            uint64_t v119 = (long long *)((char *)v119 + 1);
            unsigned int v118 = (const void **)((char *)v118 + 1);
            if (!--v120) {
              goto LABEL_290;
            }
          }
LABEL_249:
          if (v113 >= 0) {
            uint64_t v121 = &__s1;
          }
          else {
            uint64_t v121 = (long long *)__s1;
          }
          if (v114 >= v116) {
            size_t v122 = v116;
          }
          else {
            size_t v122 = v114;
          }
          int v123 = memcmp(v117, v121, v122);
          BOOL v124 = v116 < v114;
          if (v123) {
            BOOL v124 = v123 < 0;
          }
          if (!v124) {
            goto LABEL_291;
          }
          goto LABEL_258;
        }
LABEL_290:
        if (v105 <= *(float *)(a2 - 256)) {
          goto LABEL_291;
        }
      }
LABEL_258:
      unint64_t v8 = v9 + 344;
      if (!*(unsigned char *)(v9 + 656)) {
        goto LABEL_326;
      }
      uint64_t v125 = v9;
      uint64_t v126 = HIBYTE(v500);
      size_t v127 = *((void *)&__s1 + 1);
      uint64_t v128 = (const void *)__s1;
      if (v500 >= 0) {
        size_t v129 = HIBYTE(v500);
      }
      else {
        size_t v129 = *((void *)&__s1 + 1);
      }
      if (v500 >= 0) {
        uint64_t v130 = &__s1;
      }
      else {
        uint64_t v130 = (long long *)__s1;
      }
      do
      {
        unint64_t v131 = v8;
        char v132 = *(unsigned char *)(v125 + 519);
        if (v132 >= 0) {
          size_t v133 = *(unsigned __int8 *)(v125 + 519);
        }
        else {
          size_t v133 = *(void *)(v125 + 504);
        }
        if (v132 >= 0) {
          unsigned int v134 = (unsigned __int8 *)(v125 + 496);
        }
        else {
          unsigned int v134 = *(unsigned __int8 **)(v125 + 496);
        }
        if (v129 == v133)
        {
          if ((v126 & 0x80) != 0)
          {
            if (!memcmp(v128, v134, v127))
            {
LABEL_286:
              if (v105 > *(float *)(v125 + 432)) {
                goto LABEL_289;
              }
              goto LABEL_287;
            }
          }
          else
          {
            if (!v126) {
              goto LABEL_286;
            }
            unsigned int v135 = v134;
            BOOL v136 = &__s1;
            uint64_t v137 = v126;
            while (*(unsigned __int8 *)v136 == *v135)
            {
              BOOL v136 = (long long *)((char *)v136 + 1);
              ++v135;
              if (!--v137) {
                goto LABEL_286;
              }
            }
          }
        }
        if (v129 >= v133) {
          size_t v138 = v133;
        }
        else {
          size_t v138 = v129;
        }
        int v139 = memcmp(v134, v130, v138);
        BOOL v140 = v133 < v129;
        if (v139) {
          BOOL v140 = v139 < 0;
        }
        if (v140)
        {
LABEL_289:
          unint64_t v8 = v131;
          break;
        }
LABEL_287:
        unint64_t v8 = v131 + 344;
        uint64_t v125 = v131;
      }
      while (*(unsigned char *)(v131 + 656));
LABEL_326:
      a2 = v459;
      if (v8 < v459) {
        unint64_t v157 = v454;
      }
      else {
        unint64_t v157 = v459;
      }
      if (v8 < v459 && v106)
      {
        size_t v142 = HIBYTE(v500);
        size_t v143 = *((void *)&__s1 + 1);
LABEL_332:
        if ((v142 & 0x80u) == 0) {
          size_t v158 = v142;
        }
        else {
          size_t v158 = v143;
        }
        BOOL v159 = (const void *)__s1;
        if ((v142 & 0x80u) == 0) {
          unsigned int v160 = &__s1;
        }
        else {
          unsigned int v160 = (long long *)__s1;
        }
        unint64_t v161 = v454;
        unint64_t v162 = v459;
        while (2)
        {
          unint64_t v157 = v161;
          if (!*(unsigned char *)(v162 - 32)) {
            goto LABEL_362;
          }
          int v163 = *(char *)(v162 - 169);
          if (v163 >= 0) {
            size_t v164 = *(unsigned __int8 *)(v162 - 169);
          }
          else {
            size_t v164 = *(void *)(v162 - 184);
          }
          if (v163 >= 0) {
            BOOL v165 = (unsigned __int8 *)(v162 - 192);
          }
          else {
            BOOL v165 = *(unsigned __int8 **)(v162 - 192);
          }
          if (v158 == v164)
          {
            if ((v142 & 0x80) == 0)
            {
              if (v142)
              {
                BOOL v166 = v165;
                uint64_t v167 = &__s1;
                size_t v168 = v142;
                while (*(unsigned __int8 *)v167 == *v166)
                {
                  uint64_t v167 = (long long *)((char *)v167 + 1);
                  ++v166;
                  if (!--v168) {
                    goto LABEL_361;
                  }
                }
                break;
              }
LABEL_361:
              if (v105 <= *(float *)(v162 - 256)) {
                goto LABEL_363;
              }
LABEL_362:
              unint64_t v161 = v157 - 344;
              unint64_t v162 = v157;
              continue;
            }
            if (!memcmp(v159, v165, v143)) {
              goto LABEL_361;
            }
          }
          break;
        }
        if (v158 >= v164) {
          size_t v169 = v164;
        }
        else {
          size_t v169 = v158;
        }
        int v170 = memcmp(v165, v160, v169);
        BOOL v171 = v164 < v158;
        if (v170) {
          BOOL v171 = v170 < 0;
        }
        if (!v171)
        {
LABEL_363:
          a2 = v459;
          goto LABEL_419;
        }
        goto LABEL_362;
      }
LABEL_419:
      if (v8 < v157)
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v8, v157);
        int v172 = v511;
        uint64_t v173 = HIBYTE(v500);
        long long v174 = __s1;
        if (v500 >= 0) {
          size_t v175 = HIBYTE(v500);
        }
        else {
          size_t v175 = *((void *)&__s1 + 1);
        }
        if (v500 >= 0) {
          long long v176 = &__s1;
        }
        else {
          long long v176 = (long long *)__s1;
        }
        float v177 = v493;
        while (1)
        {
          do
          {
            unint64_t v178 = v8;
            v8 += 344;
          }
          while (!v172);
          if (!*(unsigned char *)(v178 + 656)) {
            break;
          }
          char v179 = *(unsigned char *)(v178 + 519);
          if (v179 >= 0) {
            size_t v180 = *(unsigned __int8 *)(v178 + 519);
          }
          else {
            size_t v180 = *(void *)(v178 + 504);
          }
          if (v179 >= 0) {
            long long v181 = (unsigned __int8 *)(v178 + 496);
          }
          else {
            long long v181 = *(unsigned __int8 **)(v178 + 496);
          }
          if (v175 != v180) {
            goto LABEL_387;
          }
          if ((v173 & 0x80) != 0)
          {
            if (!memcmp((const void *)v174, v181, *((size_t *)&v174 + 1))) {
              goto LABEL_394;
            }
LABEL_387:
            if (v175 >= v180) {
              size_t v185 = v180;
            }
            else {
              size_t v185 = v175;
            }
            int v186 = memcmp(v181, v176, v185);
            BOOL v187 = v180 < v175;
            if (v186) {
              BOOL v187 = v186 < 0;
            }
            if (v187) {
              break;
            }
          }
          else
          {
            if (v173)
            {
              unint64_t v182 = v181;
              uint64_t v183 = &__s1;
              uint64_t v184 = v173;
              while (*(unsigned __int8 *)v183 == *v182)
              {
                uint64_t v183 = (long long *)((char *)v183 + 1);
                ++v182;
                if (!--v184) {
                  goto LABEL_394;
                }
              }
              goto LABEL_387;
            }
LABEL_394:
            if (v177 > *(float *)(v178 + 432)) {
              break;
            }
          }
        }
        a2 = v459;
        while (1)
        {
          do
          {
            unint64_t v188 = v157;
            v157 -= 344;
          }
          while (!*(unsigned char *)(v188 - 32));
          int v189 = *(char *)(v188 - 169);
          if (v189 >= 0) {
            size_t v190 = *(unsigned __int8 *)(v188 - 169);
          }
          else {
            size_t v190 = *(void *)(v188 - 184);
          }
          if (v189 >= 0) {
            unint64_t v191 = (unsigned __int8 *)(v188 - 192);
          }
          else {
            unint64_t v191 = *(unsigned __int8 **)(v188 - 192);
          }
          if (v175 != v190) {
            goto LABEL_411;
          }
          if ((v173 & 0x80) != 0)
          {
            if (!memcmp((const void *)v174, v191, *((size_t *)&v174 + 1))) {
              goto LABEL_418;
            }
LABEL_411:
            if (v175 >= v190) {
              size_t v195 = v190;
            }
            else {
              size_t v195 = v175;
            }
            int v196 = memcmp(v191, v176, v195);
            BOOL v197 = v190 < v175;
            if (v196) {
              BOOL v197 = v196 < 0;
            }
            if (!v197) {
              goto LABEL_419;
            }
          }
          else
          {
            if (v173)
            {
              uint64_t v192 = v191;
              unsigned int v193 = &__s1;
              uint64_t v194 = v173;
              while (*(unsigned __int8 *)v193 == *v192)
              {
                unsigned int v193 = (long long *)((char *)v193 + 1);
                ++v192;
                if (!--v194) {
                  goto LABEL_418;
                }
              }
              goto LABEL_411;
            }
LABEL_418:
            if (v177 <= *(float *)(v188 - 256)) {
              goto LABEL_419;
            }
          }
        }
      }
      if (v8 - 344 != v461)
      {
        sirinluinternal::MatchingSpan::operator=();
        *(_DWORD *)(v461 + 88) = *(_DWORD *)(v8 - 256);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v461 + 96, v8 - 248);
        uint64_t v198 = *(void **)(v461 + 320);
        if (v198)
        {
          *(void *)(v461 + 328) = v198;
          operator delete(v198);
          *(void *)(v461 + 320) = 0;
          *(void *)(v461 + 328) = 0;
          *(void *)(v461 + 336) = 0;
        }
        long long v199 = (void *)(v8 - 24);
        *(_OWORD *)(v461 + 320) = *(_OWORD *)(v8 - 24);
        *(void *)(v461 + 336) = *(void *)(v8 - 8);
        *long long v199 = 0;
        v199[1] = 0;
        v199[2] = 0;
      }
      sirinluinternal::MatchingSpan::operator=();
      *(float *)(v8 - 256) = v493;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v8 - 248, (uint64_t)&v494);
      long long v200 = *(void **)(v8 - 24);
      if (v200)
      {
        *(void *)(v8 - 16) = v200;
        operator delete(v200);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      *(_OWORD *)(v8 - 24) = v512;
      *(void *)(v8 - 8) = v513;
      long long v512 = 0uLL;
      uint64_t v513 = 0;
      if (v511)
      {
        v469[0] = (void **)&v509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v469);
        if (SHIBYTE(v508) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v505) < 0) {
          operator delete((void *)v504);
        }
        v469[0] = (void **)&v502;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v469);
        if (SHIBYTE(v500) < 0) {
          operator delete((void *)__s1);
        }
        if (SHIBYTE(v498) < 0) {
          operator delete((void *)v497);
        }
        if (SHIBYTE(v496) < 0) {
          operator delete((void *)v495);
        }
      }
      MEMORY[0x1CB786420](v492);
      a4 = 0;
    }
    else
    {
LABEL_227:
      v13.n128_u32[0] = *(_DWORD *)(v9 - 256);
      if (v13.n128_f32[0] <= *(float *)(v9 + 88)) {
        goto LABEL_228;
      }
LABEL_38:
      MEMORY[0x1CB7863F0](v492, v9, v13);
      float v27 = *(float *)(v9 + 88);
      float v493 = v27;
      LOBYTE(v494) = 0;
      unsigned __int8 v511 = 0;
      uint64_t v28 = v9;
      int v29 = *(unsigned __int8 *)(v9 + 312);
      if (v29)
      {
        uint64_t v494 = *(void *)(v28 + 96);
        uint64_t v30 = *(void *)(v28 + 120);
        long long v495 = *(_OWORD *)(v28 + 104);
        uint64_t v496 = v30;
        *(void *)(v28 + 112) = 0;
        *(void *)(v28 + 120) = 0;
        *(void *)(v28 + 104) = 0;
        uint64_t v31 = *(void *)(v28 + 144);
        long long v497 = *(_OWORD *)(v28 + 128);
        uint64_t v498 = v31;
        *(void *)(v28 + 136) = 0;
        *(void *)(v28 + 144) = 0;
        *(void *)(v28 + 128) = 0;
        long long v32 = *(_OWORD *)(v28 + 152);
        uint64_t v500 = *(void *)(v28 + 168);
        long long __s1 = v32;
        *(void *)(v28 + 152) = 0;
        *(void *)(v28 + 160) = 0;
        *(void *)(v28 + 168) = 0;
        long long v33 = *(_OWORD *)(v28 + 176);
        *(_OWORD *)((char *)v501 + 12) = *(_OWORD *)(v28 + 188);
        v501[0] = v33;
        uint64_t v503 = 0;
        long long v502 = 0uLL;
        long long v502 = *(_OWORD *)(v28 + 208);
        uint64_t v503 = *(void *)(v28 + 224);
        *(void *)(v28 + 208) = 0;
        *(void *)(v28 + 216) = 0;
        *(void *)(v28 + 224) = 0;
        long long v34 = *(_OWORD *)(v28 + 232);
        uint64_t v505 = *(void *)(v28 + 248);
        long long v504 = v34;
        *(void *)(v28 + 232) = 0;
        *(void *)(v28 + 240) = 0;
        *(void *)(v28 + 248) = 0;
        int v506 = *(_DWORD *)(v28 + 256);
        long long v35 = *(_OWORD *)(v28 + 264);
        uint64_t v508 = *(void *)(v28 + 280);
        long long __p = v35;
        *(void *)(v28 + 264) = 0;
        *(void *)(v28 + 272) = 0;
        *(void *)(v28 + 280) = 0;
        long long v509 = 0uLL;
        uint64_t v510 = 0;
        long long v509 = *(_OWORD *)(v28 + 288);
        uint64_t v510 = *(void *)(v28 + 304);
        *(void *)(v28 + 288) = 0;
        *(void *)(v28 + 296) = 0;
        *(void *)(v28 + 304) = 0;
        unsigned __int8 v511 = 1;
      }
      long long v512 = *(_OWORD *)(v28 + 320);
      uint64_t v513 = *(void *)(v28 + 336);
      *(void *)(v28 + 320) = 0;
      *(void *)(v28 + 328) = 0;
      *(void *)(v28 + 336) = 0;
      unint64_t v36 = v28 + 344;
      if (!*(unsigned char *)(v28 + 656)) {
        goto LABEL_99;
      }
      if (v500 >= 0) {
        size_t v37 = HIBYTE(v500);
      }
      else {
        size_t v37 = *((void *)&__s1 + 1);
      }
      if (v500 >= 0) {
        float v38 = &__s1;
      }
      else {
        float v38 = (long long *)__s1;
      }
      while (1)
      {
        unint64_t v39 = v36;
        if (!v29) {
          goto LABEL_70;
        }
        long long v40 = (const void **)(v28 + 496);
        uint64_t v41 = *(unsigned __int8 *)(v28 + 519);
        if ((v41 & 0x80u) == 0) {
          size_t v42 = *(unsigned __int8 *)(v28 + 519);
        }
        else {
          size_t v42 = *(void *)(v28 + 504);
        }
        if (v42 != v37) {
          goto LABEL_59;
        }
        if ((v41 & 0x80) != 0)
        {
          if (memcmp(*v40, v38, *(void *)(v28 + 504))) {
            goto LABEL_59;
          }
          goto LABEL_69;
        }
        if (*(unsigned char *)(v28 + 519)) {
          break;
        }
LABEL_69:
        if (*(float *)(v28 + 432) <= v27) {
          goto LABEL_72;
        }
LABEL_70:
        unint64_t v36 = v39 + 344;
        v28 += 344;
        uint64_t v48 = v39;
        if (!*(unsigned char *)(v39 + 656)) {
          goto LABEL_73;
        }
      }
      uint64_t v43 = 0;
      while (*(unsigned __int8 *)(v28 + v43 + 496) == *((unsigned __int8 *)v38 + v43))
      {
        if (v41 == ++v43) {
          goto LABEL_69;
        }
      }
LABEL_59:
      if ((v41 & 0x80u) == 0) {
        long long v44 = (const void *)(v28 + 496);
      }
      else {
        long long v44 = *v40;
      }
      if (v42 >= v37) {
        size_t v45 = v37;
      }
      else {
        size_t v45 = v42;
      }
      int v46 = memcmp(v38, v44, v45);
      BOOL v47 = v37 < v42;
      if (v46) {
        BOOL v47 = v46 < 0;
      }
      if (v47) {
        goto LABEL_70;
      }
LABEL_72:
      uint64_t v48 = v28;
      unint64_t v36 = v39;
LABEL_73:
      unint64_t v49 = a2;
      if (v48 != v461)
      {
        while (1)
        {
          do
          {
LABEL_74:
            unint64_t v50 = v49;
            v49 -= 344;
          }
          while (!*(unsigned char *)(v50 - 32));
          if (!v29) {
            goto LABEL_139;
          }
          unint64_t v51 = v36;
          unsigned int v52 = (const void **)(v50 - 192);
          uint64_t v53 = *(unsigned __int8 *)(v50 - 169);
          if ((v53 & 0x80u) == 0) {
            size_t v54 = *(unsigned __int8 *)(v50 - 169);
          }
          else {
            size_t v54 = *(void *)(v50 - 184);
          }
          if (v54 == v37)
          {
            if ((v53 & 0x80) != 0)
            {
              if (!memcmp(*v52, v38, *(void *)(v50 - 184)))
              {
LABEL_97:
                unint64_t v36 = v51;
                if (*(float *)(v50 - 256) > v27) {
                  goto LABEL_139;
                }
                goto LABEL_74;
              }
            }
            else
            {
              if (!*(unsigned char *)(v50 - 169)) {
                goto LABEL_97;
              }
              uint64_t v55 = 0;
              while (*(unsigned __int8 *)(v50 + v55 - 192) == *((unsigned __int8 *)v38 + v55))
              {
                if (v53 == ++v55) {
                  goto LABEL_97;
                }
              }
            }
          }
          if ((v53 & 0x80u) == 0) {
            char v56 = (const void *)(v50 - 192);
          }
          else {
            char v56 = *v52;
          }
          if (v54 >= v37) {
            size_t v57 = v37;
          }
          else {
            size_t v57 = v54;
          }
          int v58 = memcmp(v38, v56, v57);
          BOOL v59 = v37 < v54;
          if (v58) {
            BOOL v59 = v58 < 0;
          }
          unint64_t v36 = v51;
          if (v59) {
            goto LABEL_139;
          }
        }
      }
LABEL_99:
      if (v36 >= a2)
      {
        unint64_t v49 = a2;
        goto LABEL_139;
      }
      if (v500 >= 0) {
        size_t v60 = HIBYTE(v500);
      }
      else {
        size_t v60 = *((void *)&__s1 + 1);
      }
      if (v500 >= 0) {
        BOOL v61 = &__s1;
      }
      else {
        BOOL v61 = (long long *)__s1;
      }
      while (2)
      {
        while (1)
        {
          unint64_t v49 = a2 - 344;
          if (*(unsigned char *)(a2 - 32)) {
            break;
          }
          a2 -= 344;
          if (v36 >= v49) {
            goto LABEL_139;
          }
        }
        if (!v29) {
          goto LABEL_139;
        }
        unint64_t v62 = a2 - 344;
        unint64_t v63 = v36;
        BOOL v64 = (const void **)(a2 - 192);
        uint64_t v65 = *(unsigned __int8 *)(a2 - 169);
        if ((v65 & 0x80u) == 0) {
          size_t v66 = *(unsigned __int8 *)(a2 - 169);
        }
        else {
          size_t v66 = *(void *)(a2 - 184);
        }
        if (v66 == v60)
        {
          if ((v65 & 0x80) != 0)
          {
            if (memcmp(*v64, v61, *(void *)(a2 - 184))) {
              goto LABEL_122;
            }
          }
          else if (*(unsigned char *)(a2 - 169))
          {
            uint64_t v67 = 0;
            while (*(unsigned __int8 *)(a2 + v67 - 192) == *((unsigned __int8 *)v61 + v67))
            {
              if (v65 == ++v67) {
                goto LABEL_133;
              }
            }
            goto LABEL_122;
          }
LABEL_133:
          unint64_t v36 = v63;
          BOOL v72 = *(float *)(a2 - 256) > v27 || v63 >= v62;
        }
        else
        {
LABEL_122:
          if ((v65 & 0x80u) == 0) {
            BOOL v68 = (const void *)(a2 - 192);
          }
          else {
            BOOL v68 = *v64;
          }
          if (v66 >= v60) {
            size_t v69 = v60;
          }
          else {
            size_t v69 = v66;
          }
          int v70 = memcmp(v61, v68, v69);
          BOOL v71 = v60 >= v66;
          if (v70) {
            BOOL v71 = v70 >= 0;
          }
          unint64_t v36 = v63;
          BOOL v72 = !v71 || v63 >= v62;
        }
        a2 -= 344;
        if (!v72) {
          continue;
        }
        break;
      }
      unint64_t v49 = v62;
LABEL_139:
      unint64_t v8 = v36;
      unint64_t v457 = v49;
      unint64_t v458 = v36;
      if (v36 >= v49) {
        goto LABEL_206;
      }
      unint64_t v73 = v49;
      unint64_t v8 = v36;
      while (2)
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v8, v73);
        unint64_t v74 = v8 + 344;
        int v75 = v511;
        size_t v76 = HIBYTE(v500);
        float v77 = v493;
        long long v463 = __s1;
        if (*(unsigned char *)(v8 + 656))
        {
          if (v500 >= 0) {
            size_t v78 = HIBYTE(v500);
          }
          else {
            size_t v78 = *((void *)&__s1 + 1);
          }
          if (v500 >= 0) {
            unsigned int v79 = &__s1;
          }
          else {
            unsigned int v79 = (long long *)__s1;
          }
          unint64_t v80 = v8;
          while (1)
          {
            if (v75)
            {
              unsigned int v81 = (const void **)(v80 + 496);
              uint64_t v82 = *(unsigned __int8 *)(v80 + 519);
              if ((v82 & 0x80u) == 0) {
                size_t v83 = *(unsigned __int8 *)(v80 + 519);
              }
              else {
                size_t v83 = *(void *)(v80 + 504);
              }
              if (v83 == v78)
              {
                if ((v82 & 0x80) != 0)
                {
                  if (!memcmp(*v81, v79, *(void *)(v80 + 504)))
                  {
LABEL_171:
                    if (*(float *)(v80 + 432) <= v77) {
                      break;
                    }
                    goto LABEL_172;
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v80 + 519)) {
                    goto LABEL_171;
                  }
                  uint64_t v84 = 0;
                  while (*(unsigned __int8 *)(v80 + v84 + 496) == *((unsigned __int8 *)v79 + v84))
                  {
                    if (v82 == ++v84) {
                      goto LABEL_171;
                    }
                  }
                }
              }
              if ((v82 & 0x80u) == 0) {
                uint64_t v85 = (const void *)(v80 + 496);
              }
              else {
                uint64_t v85 = *v81;
              }
              if (v83 >= v78) {
                size_t v86 = v78;
              }
              else {
                size_t v86 = v83;
              }
              int v87 = memcmp(v79, v85, v86);
              BOOL v88 = v78 < v83;
              if (v87) {
                BOOL v88 = v87 < 0;
              }
              if (!v88) {
                break;
              }
            }
LABEL_172:
            unint64_t v8 = v74 + 344;
            int v89 = *(unsigned __int8 *)(v74 + 656);
            v80 += 344;
            v74 += 344;
            if (!v89) {
              goto LABEL_175;
            }
          }
        }
        unint64_t v8 = v74;
LABEL_175:
        if ((v76 & 0x80u) == 0) {
          size_t v90 = v76;
        }
        else {
          size_t v90 = *((void *)&v463 + 1);
        }
        if ((v76 & 0x80u) == 0) {
          uint64_t v91 = &__s1;
        }
        else {
          uint64_t v91 = (long long *)v463;
        }
        do
        {
          do
          {
LABEL_181:
            unint64_t v92 = v73;
            v73 -= 344;
          }
          while (!*(unsigned char *)(v92 - 32));
          if (!v75) {
            break;
          }
          long long v93 = (const void **)(v92 - 192);
          uint64_t v94 = *(unsigned __int8 *)(v92 - 169);
          if ((v94 & 0x80u) == 0) {
            size_t v95 = *(unsigned __int8 *)(v92 - 169);
          }
          else {
            size_t v95 = *(void *)(v92 - 184);
          }
          if (v95 == v90)
          {
            if ((v94 & 0x80) != 0)
            {
              if (!memcmp(*v93, v91, *(void *)(v92 - 184)))
              {
LABEL_204:
                if (*(float *)(v92 - 256) > v77) {
                  break;
                }
                goto LABEL_181;
              }
            }
            else
            {
              if (!*(unsigned char *)(v92 - 169)) {
                goto LABEL_204;
              }
              uint64_t v96 = 0;
              while (*(unsigned __int8 *)(v92 + v96 - 192) == *((unsigned __int8 *)v91 + v96))
              {
                if (v94 == ++v96) {
                  goto LABEL_204;
                }
              }
            }
          }
          if ((v94 & 0x80u) == 0) {
            unsigned int v97 = (const void *)(v92 - 192);
          }
          else {
            unsigned int v97 = *v93;
          }
          if (v95 >= v90) {
            size_t v98 = v90;
          }
          else {
            size_t v98 = v95;
          }
          int v99 = memcmp(v91, v97, v98);
          BOOL v100 = v90 < v95;
          if (v99) {
            BOOL v100 = v99 < 0;
          }
        }
        while (!v100);
        if (v8 < v73) {
          continue;
        }
        break;
      }
LABEL_206:
      a1 = v461;
      if (v8 - 344 != v461)
      {
        sirinluinternal::MatchingSpan::operator=();
        *(_DWORD *)(v461 + 88) = *(_DWORD *)(v8 - 256);
        std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v461 + 96, v8 - 248);
        uint64_t v101 = *(void **)(v461 + 320);
        if (v101)
        {
          *(void *)(v461 + 328) = v101;
          operator delete(v101);
          *(void *)(v461 + 320) = 0;
          *(void *)(v461 + 328) = 0;
          *(void *)(v461 + 336) = 0;
        }
        uint64_t v102 = (void *)(v8 - 24);
        *(_OWORD *)(v461 + 320) = *(_OWORD *)(v8 - 24);
        *(void *)(v461 + 336) = *(void *)(v8 - 8);
        void *v102 = 0;
        v102[1] = 0;
        v102[2] = 0;
      }
      sirinluinternal::MatchingSpan::operator=();
      *(float *)(v8 - 256) = v493;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v8 - 248, (uint64_t)&v494);
      float32x4_t v103 = *(void **)(v8 - 24);
      if (v103)
      {
        *(void *)(v8 - 16) = v103;
        operator delete(v103);
        *(void *)(v8 - 24) = 0;
        *(void *)(v8 - 16) = 0;
        *(void *)(v8 - 8) = 0;
      }
      *(_OWORD *)(v8 - 24) = v512;
      *(void *)(v8 - 8) = v513;
      long long v512 = 0uLL;
      uint64_t v513 = 0;
      a2 = v459;
      if (v511)
      {
        v469[0] = (void **)&v509;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v469);
        if (SHIBYTE(v508) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v505) < 0) {
          operator delete((void *)v504);
        }
        v469[0] = (void **)&v502;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v469);
        if (SHIBYTE(v500) < 0) {
          operator delete((void *)__s1);
        }
        if (SHIBYTE(v498) < 0) {
          operator delete((void *)v497);
        }
        if (SHIBYTE(v496) < 0) {
          operator delete((void *)v495);
        }
      }
      MEMORY[0x1CB786420](v492);
      if (v458 < v457)
      {
LABEL_226:
        std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v461, v8 - 344, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v104 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v461, v8 - 344);
        if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v459))
        {
          a2 = v8 - 344;
          if (v104) {
            return;
          }
          goto LABEL_1;
        }
        if (!v104) {
          goto LABEL_226;
        }
      }
    }
  }
  switch(v11)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (!*(unsigned char *)(a2 - 32)) {
        return;
      }
      if (!*(unsigned char *)(v8 + 312)) {
        goto LABEL_934;
      }
      char v201 = *(unsigned char *)(a2 - 169);
      if (v201 >= 0) {
        size_t v202 = *(unsigned __int8 *)(a2 - 169);
      }
      else {
        size_t v202 = *(void *)(a2 - 184);
      }
      int v203 = *(char *)(v8 + 175);
      if (v203 >= 0) {
        size_t v204 = *(unsigned __int8 *)(v8 + 175);
      }
      else {
        size_t v204 = *(void *)(v8 + 160);
      }
      if (v203 >= 0) {
        BOOL v205 = (unsigned __int8 *)(v9 + 152);
      }
      else {
        BOOL v205 = *(unsigned __int8 **)(v9 + 152);
      }
      if (v202 != v204) {
        goto LABEL_925;
      }
      if ((*(unsigned char *)(a2 - 169) & 0x80) != 0)
      {
        if (memcmp(*v443, v205, *(void *)(a2 - 184))) {
          goto LABEL_925;
        }
      }
      else if (*(unsigned char *)(a2 - 169))
      {
        unsigned int v206 = v205;
        uint64_t v207 = v443;
        uint64_t v208 = *(unsigned __int8 *)(a2 - 169);
        while (*(unsigned __int8 *)v207 == *v206)
        {
          uint64_t v207 = (const void **)((char *)v207 + 1);
          ++v206;
          if (!--v208) {
            goto LABEL_936;
          }
        }
LABEL_925:
        if (v201 >= 0) {
          v436 = v443;
        }
        else {
          v436 = *v443;
        }
        if (v202 >= v204) {
          size_t v437 = v204;
        }
        else {
          size_t v437 = v202;
        }
        int v438 = memcmp(v205, v436, v437);
        BOOL v439 = v204 < v202;
        if (v438) {
          BOOL v439 = v438 < 0;
        }
        if (v439) {
          goto LABEL_934;
        }
        return;
      }
LABEL_936:
      if (*(float *)(a2 - 256) > *(float *)(v9 + 88))
      {
LABEL_934:
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v9, v454);
        return;
      }
      break;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v8 + 344, v454);
      return;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(v8, v8 + 344, v8 + 688, v454);
      return;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(v8, v8 + 344, v8 + 688, v8 + 1032, v454);
      return;
    default:
      JUMPOUT(0);
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a2 + 312))
  {
    if (!*(unsigned char *)(a3 + 312)) {
      return result;
    }
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 312))
  {
    float v27 = (unsigned char *)(a3 + 312);
    if (!*(unsigned char *)(a3 + 312)) {
      goto LABEL_94;
    }
    size_t v7 = *(unsigned __int8 *)(a2 + 175);
    size_t v9 = *(void *)(a2 + 160);
    LOBYTE(v8) = *(unsigned char *)(a2 + 175);
    goto LABEL_51;
  }
  unsigned int v6 = (const void **)(a2 + 152);
  size_t v7 = *(unsigned __int8 *)(a2 + 175);
  int v8 = (char)v7;
  size_t v9 = *(void *)(a2 + 160);
  if ((v7 & 0x80u) == 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 175);
  }
  else {
    size_t v10 = *(void *)(a2 + 160);
  }
  int v11 = *(char *)(a1 + 175);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 175);
  }
  else {
    size_t v12 = *(void *)(a1 + 160);
  }
  if (v11 >= 0) {
    __n128 v13 = (unsigned __int8 *)(a1 + 152);
  }
  else {
    __n128 v13 = *(unsigned __int8 **)(a1 + 152);
  }
  if (v10 == v12)
  {
    if ((char)v7 < 0)
    {
      if (memcmp(*v6, v13, *(void *)(a2 + 160))) {
        goto LABEL_41;
      }
    }
    else if ((_BYTE)v7)
    {
      int v14 = v13;
      char v15 = (unsigned __int8 *)(a2 + 152);
      uint64_t v16 = *(unsigned __int8 *)(a2 + 175);
      while (*v15 == *v14)
      {
        ++v15;
        ++v14;
        if (!--v16) {
          goto LABEL_67;
        }
      }
      goto LABEL_41;
    }
LABEL_67:
    float result = *(float *)(a2 + 88);
    if (result > *(float *)(a1 + 88)) {
      goto LABEL_50;
    }
LABEL_68:
    if (!*(unsigned char *)(a3 + 312)) {
      return result;
    }
    uint64_t v41 = (const void **)(a3 + 152);
    char v42 = *(unsigned char *)(a3 + 175);
    if (v42 >= 0) {
      size_t v43 = *(unsigned __int8 *)(a3 + 175);
    }
    else {
      size_t v43 = *(void *)(a3 + 160);
    }
    if (v8 >= 0) {
      long long v44 = (unsigned __int8 *)(a2 + 152);
    }
    else {
      long long v44 = (unsigned __int8 *)*v6;
    }
    if (v43 == v10)
    {
      if ((*(unsigned char *)(a3 + 175) & 0x80) != 0)
      {
        if (memcmp(*v41, v44, *(void *)(a3 + 160))) {
          goto LABEL_126;
        }
      }
      else if (*(unsigned char *)(a3 + 175))
      {
        size_t v45 = v44;
        int v46 = (unsigned __int8 *)(a3 + 152);
        uint64_t v47 = *(unsigned __int8 *)(a3 + 175);
        while (*v46 == *v45)
        {
          ++v46;
          ++v45;
          if (!--v47) {
            goto LABEL_136;
          }
        }
        goto LABEL_126;
      }
LABEL_136:
      float result = *(float *)(a3 + 88);
      if (result <= *(float *)(a2 + 88)) {
        return result;
      }
      goto LABEL_20;
    }
LABEL_126:
    if (v42 >= 0) {
      uint64_t v67 = (const void *)(a3 + 152);
    }
    else {
      uint64_t v67 = *v41;
    }
    if (v43 >= v10) {
      size_t v68 = v10;
    }
    else {
      size_t v68 = v43;
    }
    int v69 = memcmp(v44, v67, v68);
    BOOL v70 = v10 < v43;
    if (v69) {
      BOOL v70 = v69 < 0;
    }
    if (!v70) {
      return result;
    }
LABEL_20:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
    if (!*(unsigned char *)(a2 + 312)) {
      return result;
    }
    if (!*(unsigned char *)(a1 + 312)) {
      goto LABEL_124;
    }
    size_t v18 = (const void **)(a2 + 152);
    char v19 = *(unsigned char *)(a2 + 175);
    if (v19 >= 0) {
      size_t v20 = *(unsigned __int8 *)(a2 + 175);
    }
    else {
      size_t v20 = *(void *)(a2 + 160);
    }
    int v21 = *(char *)(a1 + 175);
    if (v21 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a1 + 175);
    }
    else {
      size_t v22 = *(void *)(a1 + 160);
    }
    if (v21 >= 0) {
      long long v23 = (unsigned __int8 *)(a1 + 152);
    }
    else {
      long long v23 = *(unsigned __int8 **)(a1 + 152);
    }
    if (v20 == v22)
    {
      if ((*(unsigned char *)(a2 + 175) & 0x80) != 0)
      {
        if (memcmp(*v18, v23, *(void *)(a2 + 160))) {
          goto LABEL_113;
        }
      }
      else if (*(unsigned char *)(a2 + 175))
      {
        size_t v24 = v23;
        int v25 = (unsigned __int8 *)(a2 + 152);
        uint64_t v26 = *(unsigned __int8 *)(a2 + 175);
        while (*v25 == *v24)
        {
          ++v25;
          ++v24;
          if (!--v26) {
            goto LABEL_123;
          }
        }
        goto LABEL_113;
      }
LABEL_123:
      float result = *(float *)(a2 + 88);
      if (result <= *(float *)(a1 + 88)) {
        return result;
      }
      goto LABEL_124;
    }
LABEL_113:
    if (v19 >= 0) {
      unint64_t v62 = (const void *)(a2 + 152);
    }
    else {
      unint64_t v62 = *v18;
    }
    if (v20 >= v22) {
      size_t v63 = v22;
    }
    else {
      size_t v63 = v20;
    }
    int v64 = memcmp(v23, v62, v63);
    BOOL v65 = v22 < v20;
    if (v64) {
      BOOL v65 = v64 < 0;
    }
    if (!v65) {
      return result;
    }
LABEL_124:
    uint64_t v52 = a1;
    uint64_t v66 = a2;
LABEL_150:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(v52, v66);
    return result;
  }
LABEL_41:
  if ((v7 & 0x80u) == 0) {
    uint64_t v28 = (const void *)(a2 + 152);
  }
  else {
    uint64_t v28 = *v6;
  }
  if (v10 >= v12) {
    size_t v29 = v12;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v13, v28, v29);
  BOOL v31 = v12 < v10;
  if (v30) {
    BOOL v31 = v30 < 0;
  }
  if (!v31) {
    goto LABEL_68;
  }
LABEL_50:
  float v27 = (unsigned char *)(a3 + 312);
  if (!*(unsigned char *)(a3 + 312)) {
    goto LABEL_94;
  }
LABEL_51:
  long long v32 = (const void **)(a3 + 152);
  char v33 = *(unsigned char *)(a3 + 175);
  if (v33 >= 0) {
    size_t v34 = *(unsigned __int8 *)(a3 + 175);
  }
  else {
    size_t v34 = *(void *)(a3 + 160);
  }
  BOOL v35 = (v8 & 0x80u) != 0;
  if ((v8 & 0x80u) == 0) {
    size_t v36 = v7;
  }
  else {
    size_t v36 = v9;
  }
  if (v35) {
    size_t v37 = *(unsigned __int8 **)(a2 + 152);
  }
  else {
    size_t v37 = (unsigned __int8 *)(a2 + 152);
  }
  if (v34 != v36) {
    goto LABEL_83;
  }
  if ((*(unsigned char *)(a3 + 175) & 0x80) != 0)
  {
    if (memcmp(*v32, v37, *(void *)(a3 + 160))) {
      goto LABEL_83;
    }
  }
  else if (*(unsigned char *)(a3 + 175))
  {
    float v38 = v37;
    unint64_t v39 = (unsigned __int8 *)(a3 + 152);
    uint64_t v40 = *(unsigned __int8 *)(a3 + 175);
    while (*v39 == *v38)
    {
      ++v39;
      ++v38;
      if (!--v40) {
        goto LABEL_93;
      }
    }
LABEL_83:
    if (v33 >= 0) {
      uint64_t v48 = (const void *)(a3 + 152);
    }
    else {
      uint64_t v48 = *v32;
    }
    if (v34 >= v36) {
      size_t v49 = v36;
    }
    else {
      size_t v49 = v34;
    }
    int v50 = memcmp(v37, v48, v49);
    BOOL v51 = v36 < v34;
    if (v50) {
      BOOL v51 = v50 < 0;
    }
    if (v51) {
      goto LABEL_92;
    }
    goto LABEL_94;
  }
LABEL_93:
  if (*(float *)(a3 + 88) > *(float *)(a2 + 88))
  {
LABEL_92:
    uint64_t v52 = a1;
LABEL_149:
    uint64_t v66 = a3;
    goto LABEL_150;
  }
LABEL_94:
  std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
  if (!*v27) {
    return result;
  }
  if (!*(unsigned char *)(a2 + 312)) {
    goto LABEL_148;
  }
  uint64_t v53 = (const void **)(a3 + 152);
  char v54 = *(unsigned char *)(a3 + 175);
  if (v54 >= 0) {
    size_t v55 = *(unsigned __int8 *)(a3 + 175);
  }
  else {
    size_t v55 = *(void *)(a3 + 160);
  }
  int v56 = *(char *)(a2 + 175);
  if (v56 >= 0) {
    size_t v57 = *(unsigned __int8 *)(a2 + 175);
  }
  else {
    size_t v57 = *(void *)(a2 + 160);
  }
  if (v56 >= 0) {
    int v58 = (unsigned __int8 *)(a2 + 152);
  }
  else {
    int v58 = *(unsigned __int8 **)(a2 + 152);
  }
  if (v55 != v57) {
    goto LABEL_139;
  }
  if ((*(unsigned char *)(a3 + 175) & 0x80) != 0)
  {
    if (memcmp(*v53, v58, *(void *)(a3 + 160))) {
      goto LABEL_139;
    }
LABEL_153:
    float result = *(float *)(a3 + 88);
    if (result <= *(float *)(a2 + 88)) {
      return result;
    }
    goto LABEL_148;
  }
  if (!*(unsigned char *)(a3 + 175)) {
    goto LABEL_153;
  }
  BOOL v59 = v58;
  size_t v60 = (unsigned __int8 *)(a3 + 152);
  uint64_t v61 = *(unsigned __int8 *)(a3 + 175);
  while (*v60 == *v59)
  {
    ++v60;
    ++v59;
    if (!--v61) {
      goto LABEL_153;
    }
  }
LABEL_139:
  if (v54 >= 0) {
    BOOL v71 = (const void *)(a3 + 152);
  }
  else {
    BOOL v71 = *v53;
  }
  if (v55 >= v57) {
    size_t v72 = v57;
  }
  else {
    size_t v72 = v55;
  }
  int v73 = memcmp(v58, v71, v72);
  BOOL v74 = v57 < v55;
  if (v73) {
    BOOL v74 = v73 < 0;
  }
  if (v74)
  {
LABEL_148:
    uint64_t v52 = a2;
    goto LABEL_149;
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3);
  if (!*(unsigned char *)(a4 + 312)) {
    return result;
  }
  if (!*(unsigned char *)(a3 + 312))
  {
LABEL_31:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
    if (!*(unsigned char *)(a3 + 312)) {
      return result;
    }
    if (!*(unsigned char *)(a2 + 312)) {
      goto LABEL_61;
    }
    size_t v22 = (const void **)(a3 + 152);
    char v23 = *(unsigned char *)(a3 + 175);
    if (v23 >= 0) {
      size_t v24 = *(unsigned __int8 *)(a3 + 175);
    }
    else {
      size_t v24 = *(void *)(a3 + 160);
    }
    int v25 = *(char *)(a2 + 175);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(a2 + 175);
    }
    else {
      size_t v26 = *(void *)(a2 + 160);
    }
    if (v25 >= 0) {
      float v27 = (unsigned __int8 *)(a2 + 152);
    }
    else {
      float v27 = *(unsigned __int8 **)(a2 + 152);
    }
    if (v24 != v26) {
      goto LABEL_50;
    }
    if ((*(unsigned char *)(a3 + 175) & 0x80) != 0)
    {
      if (memcmp(*v22, v27, *(void *)(a3 + 160))) {
        goto LABEL_50;
      }
    }
    else if (*(unsigned char *)(a3 + 175))
    {
      uint64_t v28 = v27;
      size_t v29 = (unsigned __int8 *)(a3 + 152);
      uint64_t v30 = *(unsigned __int8 *)(a3 + 175);
      while (*v29 == *v28)
      {
        ++v29;
        ++v28;
        if (!--v30) {
          goto LABEL_60;
        }
      }
LABEL_50:
      if (v23 >= 0) {
        BOOL v31 = (const void *)(a3 + 152);
      }
      else {
        BOOL v31 = *v22;
      }
      if (v24 >= v26) {
        size_t v32 = v26;
      }
      else {
        size_t v32 = v24;
      }
      int v33 = memcmp(v27, v31, v32);
      BOOL v34 = v26 < v24;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      if (!v34) {
        return result;
      }
LABEL_61:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
      if (!*(unsigned char *)(a2 + 312)) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 312)) {
        goto LABEL_89;
      }
      BOOL v35 = (const void **)(a2 + 152);
      char v36 = *(unsigned char *)(a2 + 175);
      if (v36 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a2 + 175);
      }
      else {
        size_t v37 = *(void *)(a2 + 160);
      }
      int v38 = *(char *)(a1 + 175);
      if (v38 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a1 + 175);
      }
      else {
        size_t v39 = *(void *)(a1 + 160);
      }
      if (v38 >= 0) {
        uint64_t v40 = (unsigned __int8 *)(a1 + 152);
      }
      else {
        uint64_t v40 = *(unsigned __int8 **)(a1 + 152);
      }
      if (v37 == v39)
      {
        if ((*(unsigned char *)(a2 + 175) & 0x80) != 0)
        {
          if (memcmp(*v35, v40, *(void *)(a2 + 160))) {
            goto LABEL_80;
          }
        }
        else if (*(unsigned char *)(a2 + 175))
        {
          uint64_t v41 = v40;
          char v42 = (unsigned __int8 *)(a2 + 152);
          uint64_t v43 = *(unsigned __int8 *)(a2 + 175);
          while (*v42 == *v41)
          {
            ++v42;
            ++v41;
            if (!--v43) {
              goto LABEL_92;
            }
          }
          goto LABEL_80;
        }
LABEL_92:
        float result = *(float *)(a2 + 88);
        if (result <= *(float *)(a1 + 88)) {
          return result;
        }
        goto LABEL_89;
      }
LABEL_80:
      if (v36 >= 0) {
        long long v44 = (const void *)(a2 + 152);
      }
      else {
        long long v44 = *v35;
      }
      if (v37 >= v39) {
        size_t v45 = v39;
      }
      else {
        size_t v45 = v37;
      }
      int v46 = memcmp(v40, v44, v45);
      BOOL v47 = v39 < v37;
      if (v46) {
        BOOL v47 = v46 < 0;
      }
      if (!v47) {
        return result;
      }
LABEL_89:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
      return result;
    }
LABEL_60:
    float result = *(float *)(a3 + 88);
    if (result <= *(float *)(a2 + 88)) {
      return result;
    }
    goto LABEL_61;
  }
  size_t v9 = (const void **)(a4 + 152);
  char v10 = *(unsigned char *)(a4 + 175);
  if (v10 >= 0) {
    size_t v11 = *(unsigned __int8 *)(a4 + 175);
  }
  else {
    size_t v11 = *(void *)(a4 + 160);
  }
  int v12 = *(char *)(a3 + 175);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 175);
  }
  else {
    size_t v13 = *(void *)(a3 + 160);
  }
  if (v12 >= 0) {
    int v14 = (unsigned __int8 *)(a3 + 152);
  }
  else {
    int v14 = *(unsigned __int8 **)(a3 + 152);
  }
  if (v11 != v13) {
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a4 + 175) & 0x80) != 0)
  {
    if (memcmp(*v9, v14, *(void *)(a4 + 160))) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a4 + 175))
  {
LABEL_30:
    float result = *(float *)(a4 + 88);
    if (result <= *(float *)(a3 + 88)) {
      return result;
    }
    goto LABEL_31;
  }
  char v15 = v14;
  uint64_t v16 = (unsigned __int8 *)(a4 + 152);
  uint64_t v17 = *(unsigned __int8 *)(a4 + 175);
  while (*v16 == *v15)
  {
    ++v16;
    ++v15;
    if (!--v17) {
      goto LABEL_30;
    }
  }
LABEL_20:
  if (v10 >= 0) {
    size_t v18 = (const void *)(a4 + 152);
  }
  else {
    size_t v18 = *v9;
  }
  if (v11 >= v13) {
    size_t v19 = v13;
  }
  else {
    size_t v19 = v11;
  }
  int v20 = memcmp(v14, v18, v19);
  BOOL v21 = v13 < v11;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  if (v21) {
    goto LABEL_31;
  }
  return result;
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a2, a3, a4);
  if (!*(unsigned char *)(a5 + 312)) {
    return result;
  }
  if (!*(unsigned char *)(a4 + 312))
  {
LABEL_31:
    std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a4, a5);
    if (!*(unsigned char *)(a4 + 312)) {
      return result;
    }
    if (!*(unsigned char *)(a3 + 312)) {
      goto LABEL_61;
    }
    size_t v24 = (const void **)(a4 + 152);
    char v25 = *(unsigned char *)(a4 + 175);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(a4 + 175);
    }
    else {
      size_t v26 = *(void *)(a4 + 160);
    }
    int v27 = *(char *)(a3 + 175);
    if (v27 >= 0) {
      size_t v28 = *(unsigned __int8 *)(a3 + 175);
    }
    else {
      size_t v28 = *(void *)(a3 + 160);
    }
    if (v27 >= 0) {
      size_t v29 = (unsigned __int8 *)(a3 + 152);
    }
    else {
      size_t v29 = *(unsigned __int8 **)(a3 + 152);
    }
    if (v26 != v28) {
      goto LABEL_50;
    }
    if ((*(unsigned char *)(a4 + 175) & 0x80) != 0)
    {
      if (memcmp(*v24, v29, *(void *)(a4 + 160))) {
        goto LABEL_50;
      }
    }
    else if (*(unsigned char *)(a4 + 175))
    {
      uint64_t v30 = v29;
      BOOL v31 = (unsigned __int8 *)(a4 + 152);
      uint64_t v32 = *(unsigned __int8 *)(a4 + 175);
      while (*v31 == *v30)
      {
        ++v31;
        ++v30;
        if (!--v32) {
          goto LABEL_60;
        }
      }
LABEL_50:
      if (v25 >= 0) {
        int v33 = (const void *)(a4 + 152);
      }
      else {
        int v33 = *v24;
      }
      if (v26 >= v28) {
        size_t v34 = v28;
      }
      else {
        size_t v34 = v26;
      }
      int v35 = memcmp(v29, v33, v34);
      BOOL v36 = v28 < v26;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
      if (!v36) {
        return result;
      }
LABEL_61:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a3, a4);
      if (!*(unsigned char *)(a3 + 312)) {
        return result;
      }
      if (!*(unsigned char *)(a2 + 312)) {
        goto LABEL_91;
      }
      size_t v37 = (const void **)(a3 + 152);
      char v38 = *(unsigned char *)(a3 + 175);
      if (v38 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a3 + 175);
      }
      else {
        size_t v39 = *(void *)(a3 + 160);
      }
      int v40 = *(char *)(a2 + 175);
      if (v40 >= 0) {
        size_t v41 = *(unsigned __int8 *)(a2 + 175);
      }
      else {
        size_t v41 = *(void *)(a2 + 160);
      }
      if (v40 >= 0) {
        char v42 = (unsigned __int8 *)(a2 + 152);
      }
      else {
        char v42 = *(unsigned __int8 **)(a2 + 152);
      }
      if (v39 != v41) {
        goto LABEL_80;
      }
      if ((*(unsigned char *)(a3 + 175) & 0x80) != 0)
      {
        if (memcmp(*v37, v42, *(void *)(a3 + 160))) {
          goto LABEL_80;
        }
      }
      else if (*(unsigned char *)(a3 + 175))
      {
        uint64_t v43 = v42;
        long long v44 = (unsigned __int8 *)(a3 + 152);
        uint64_t v45 = *(unsigned __int8 *)(a3 + 175);
        while (*v44 == *v43)
        {
          ++v44;
          ++v43;
          if (!--v45) {
            goto LABEL_90;
          }
        }
LABEL_80:
        if (v38 >= 0) {
          int v46 = (const void *)(a3 + 152);
        }
        else {
          int v46 = *v37;
        }
        if (v39 >= v41) {
          size_t v47 = v41;
        }
        else {
          size_t v47 = v39;
        }
        int v48 = memcmp(v42, v46, v47);
        BOOL v49 = v41 < v39;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          return result;
        }
LABEL_91:
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a2, a3);
        if (!*(unsigned char *)(a2 + 312)) {
          return result;
        }
        if (!*(unsigned char *)(a1 + 312)) {
          goto LABEL_119;
        }
        int v50 = (const void **)(a2 + 152);
        char v51 = *(unsigned char *)(a2 + 175);
        if (v51 >= 0) {
          size_t v52 = *(unsigned __int8 *)(a2 + 175);
        }
        else {
          size_t v52 = *(void *)(a2 + 160);
        }
        int v53 = *(char *)(a1 + 175);
        if (v53 >= 0) {
          size_t v54 = *(unsigned __int8 *)(a1 + 175);
        }
        else {
          size_t v54 = *(void *)(a1 + 160);
        }
        if (v53 >= 0) {
          size_t v55 = (unsigned __int8 *)(a1 + 152);
        }
        else {
          size_t v55 = *(unsigned __int8 **)(a1 + 152);
        }
        if (v52 == v54)
        {
          if ((*(unsigned char *)(a2 + 175) & 0x80) != 0)
          {
            if (memcmp(*v50, v55, *(void *)(a2 + 160))) {
              goto LABEL_110;
            }
          }
          else if (*(unsigned char *)(a2 + 175))
          {
            int v56 = v55;
            size_t v57 = (unsigned __int8 *)(a2 + 152);
            uint64_t v58 = *(unsigned __int8 *)(a2 + 175);
            while (*v57 == *v56)
            {
              ++v57;
              ++v56;
              if (!--v58) {
                goto LABEL_122;
              }
            }
            goto LABEL_110;
          }
LABEL_122:
          float result = *(float *)(a2 + 88);
          if (result <= *(float *)(a1 + 88)) {
            return result;
          }
          goto LABEL_119;
        }
LABEL_110:
        if (v51 >= 0) {
          BOOL v59 = (const void *)(a2 + 152);
        }
        else {
          BOOL v59 = *v50;
        }
        if (v52 >= v54) {
          size_t v60 = v54;
        }
        else {
          size_t v60 = v52;
        }
        int v61 = memcmp(v55, v59, v60);
        BOOL v62 = v54 < v52;
        if (v61) {
          BOOL v62 = v61 < 0;
        }
        if (!v62) {
          return result;
        }
LABEL_119:
        std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, a2);
        return result;
      }
LABEL_90:
      float result = *(float *)(a3 + 88);
      if (result <= *(float *)(a2 + 88)) {
        return result;
      }
      goto LABEL_91;
    }
LABEL_60:
    float result = *(float *)(a4 + 88);
    if (result <= *(float *)(a3 + 88)) {
      return result;
    }
    goto LABEL_61;
  }
  size_t v11 = (const void **)(a5 + 152);
  char v12 = *(unsigned char *)(a5 + 175);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a5 + 175);
  }
  else {
    size_t v13 = *(void *)(a5 + 160);
  }
  int v14 = *(char *)(a4 + 175);
  if (v14 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a4 + 175);
  }
  else {
    size_t v15 = *(void *)(a4 + 160);
  }
  if (v14 >= 0) {
    uint64_t v16 = (unsigned __int8 *)(a4 + 152);
  }
  else {
    uint64_t v16 = *(unsigned __int8 **)(a4 + 152);
  }
  if (v13 != v15) {
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a5 + 175) & 0x80) != 0)
  {
    if (memcmp(*v11, v16, *(void *)(a5 + 160))) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a5 + 175))
  {
LABEL_30:
    float result = *(float *)(a5 + 88);
    if (result <= *(float *)(a4 + 88)) {
      return result;
    }
    goto LABEL_31;
  }
  uint64_t v17 = v16;
  size_t v18 = (unsigned __int8 *)(a5 + 152);
  uint64_t v19 = *(unsigned __int8 *)(a5 + 175);
  while (*v18 == *v17)
  {
    ++v18;
    ++v17;
    if (!--v19) {
      goto LABEL_30;
    }
  }
LABEL_20:
  if (v12 >= 0) {
    int v20 = (const void *)(a5 + 152);
  }
  else {
    int v20 = *v11;
  }
  if (v13 >= v15) {
    size_t v21 = v15;
  }
  else {
    size_t v21 = v13;
  }
  int v22 = memcmp(v16, v20, v21);
  BOOL v23 = v15 < v13;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (v23) {
    goto LABEL_31;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (a2 - a1) >> 3;
  uint64_t v4 = a2;
  BOOL result = 1;
  switch(0x82FA0BE82FA0BE83 * v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (!*(unsigned char *)(a2 - 32)) {
        return result;
      }
      if (!*(unsigned char *)(a1 + 312)) {
        goto LABEL_120;
      }
      unsigned int v6 = (const void **)(a2 - 192);
      char v7 = *(unsigned char *)(a2 - 169);
      if (v7 >= 0) {
        size_t v8 = *(unsigned __int8 *)(a2 - 169);
      }
      else {
        size_t v8 = *(void *)(a2 - 184);
      }
      int v9 = *(char *)(a1 + 175);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(a1 + 175);
      }
      else {
        size_t v10 = *(void *)(a1 + 160);
      }
      if (v9 >= 0) {
        size_t v11 = (unsigned __int8 *)(a1 + 152);
      }
      else {
        size_t v11 = *(unsigned __int8 **)(a1 + 152);
      }
      if (v8 != v10) {
        goto LABEL_111;
      }
      if ((*(unsigned char *)(a2 - 169) & 0x80) != 0)
      {
        if (memcmp(*v6, v11, *(void *)(a2 - 184))) {
          goto LABEL_111;
        }
      }
      else if (*(unsigned char *)(a2 - 169))
      {
        char v12 = v11;
        size_t v13 = (unsigned __int8 *)(a2 - 192);
        uint64_t v14 = *(unsigned __int8 *)(a2 - 169);
        while (*v13 == *v12)
        {
          ++v13;
          ++v12;
          if (!--v14) {
            goto LABEL_123;
          }
        }
LABEL_111:
        if (v7 >= 0) {
          size_t v55 = v6;
        }
        else {
          size_t v55 = *v6;
        }
        if (v8 >= v10) {
          size_t v56 = v10;
        }
        else {
          size_t v56 = v8;
        }
        int v57 = memcmp(v11, v55, v56);
        BOOL v58 = v10 < v8;
        if (v57) {
          BOOL v58 = v57 < 0;
        }
        uint64_t v4 = a2;
        if (!v58) {
          return 1;
        }
        goto LABEL_120;
      }
LABEL_123:
      uint64_t v4 = a2;
      if (*(float *)(a2 - 256) <= *(float *)(a1 + 88)) {
        return 1;
      }
LABEL_120:
      std::swap[abi:ne180100]<marrs::mrr::mr::MRMatchingResult>(a1, v4 - 344);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a2 - 344);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688, a2 - 344);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,0>(a1, a1 + 344, a1 + 688, a1 + 1032, a2 - 344);
      return 1;
    default:
      uint64_t v15 = a1 + 688;
      v16.n128_f32[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByEntityIdAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*>(a1, a1 + 344, a1 + 688);
      uint64_t v17 = a2;
      uint64_t v18 = a1 + 1032;
      BOOL result = 1;
      if (a1 + 1032 == a2) {
        return result;
      }
      int v59 = 0;
      break;
  }
  do
  {
    if (!*(unsigned char *)(v18 + 312)) {
      goto LABEL_105;
    }
    if (*(unsigned char *)(v15 + 312))
    {
      uint64_t v19 = (const void **)(v18 + 152);
      char v20 = *(unsigned char *)(v18 + 175);
      if (v20 >= 0) {
        size_t v21 = *(unsigned __int8 *)(v18 + 175);
      }
      else {
        size_t v21 = *(void *)(v18 + 160);
      }
      int v22 = *(char *)(v15 + 175);
      if (v22 >= 0) {
        size_t v23 = *(unsigned __int8 *)(v15 + 175);
      }
      else {
        size_t v23 = *(void *)(v15 + 160);
      }
      if (v22 >= 0) {
        size_t v24 = (unsigned __int8 *)(v15 + 152);
      }
      else {
        size_t v24 = *(unsigned __int8 **)(v15 + 152);
      }
      if (v21 != v23) {
        goto LABEL_41;
      }
      if ((*(unsigned char *)(v18 + 175) & 0x80) != 0)
      {
        if (memcmp(*v19, v24, *(void *)(v18 + 160))) {
          goto LABEL_41;
        }
      }
      else if (*(unsigned char *)(v18 + 175))
      {
        char v25 = v24;
        size_t v26 = (unsigned __int8 *)(v18 + 152);
        uint64_t v27 = *(unsigned __int8 *)(v18 + 175);
        while (*v26 == *v25)
        {
          ++v26;
          ++v25;
          if (!--v27) {
            goto LABEL_103;
          }
        }
LABEL_41:
        if (v20 >= 0) {
          size_t v28 = (const void *)(v18 + 152);
        }
        else {
          size_t v28 = *v19;
        }
        if (v21 >= v23) {
          size_t v29 = v23;
        }
        else {
          size_t v29 = v21;
        }
        int v30 = memcmp(v24, v28, v29);
        BOOL v31 = v23 < v21;
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        if (!v31)
        {
LABEL_104:
          uint64_t v17 = a2;
          goto LABEL_105;
        }
        goto LABEL_50;
      }
LABEL_103:
      v16.n128_u32[0] = *(_DWORD *)(v18 + 88);
      if (v16.n128_f32[0] <= *(float *)(v15 + 88)) {
        goto LABEL_104;
      }
    }
LABEL_50:
    MEMORY[0x1CB7863F0](v61, v18, v16);
    float v62 = *(float *)(v18 + 88);
    LOBYTE(v63) = 0;
    char v80 = 0;
    if (*(unsigned char *)(v18 + 312))
    {
      uint64_t v63 = *(void *)(v18 + 96);
      long long v64 = *(_OWORD *)(v18 + 104);
      uint64_t v65 = *(void *)(v18 + 120);
      *(void *)(v18 + 104) = 0;
      *(void *)(v18 + 112) = 0;
      long long v66 = *(_OWORD *)(v18 + 128);
      uint64_t v67 = *(void *)(v18 + 144);
      *(void *)(v18 + 120) = 0;
      *(void *)(v18 + 128) = 0;
      *(void *)(v18 + 136) = 0;
      *(void *)(v18 + 144) = 0;
      long long v32 = *(_OWORD *)(v18 + 152);
      uint64_t v69 = *(void *)(v18 + 168);
      long long __s1 = v32;
      *(void *)(v18 + 152) = 0;
      *(void *)(v18 + 160) = 0;
      *(void *)(v18 + 168) = 0;
      long long v33 = *(_OWORD *)(v18 + 176);
      *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)(v18 + 188);
      v70[0] = v33;
      long long v71 = *(_OWORD *)(v18 + 208);
      uint64_t v72 = *(void *)(v18 + 224);
      *(void *)(v18 + 208) = 0;
      *(void *)(v18 + 216) = 0;
      long long v34 = *(_OWORD *)(v18 + 232);
      uint64_t v74 = *(void *)(v18 + 248);
      long long v73 = v34;
      *(void *)(v18 + 224) = 0;
      *(void *)(v18 + 232) = 0;
      *(void *)(v18 + 240) = 0;
      *(void *)(v18 + 248) = 0;
      int v75 = *(_DWORD *)(v18 + 256);
      long long v35 = *(_OWORD *)(v18 + 264);
      uint64_t v77 = *(void *)(v18 + 280);
      long long __p = v35;
      *(void *)(v18 + 264) = 0;
      *(void *)(v18 + 272) = 0;
      long long v78 = *(_OWORD *)(v18 + 288);
      uint64_t v79 = *(void *)(v18 + 304);
      *(void *)(v18 + 280) = 0;
      *(void *)(v18 + 288) = 0;
      *(void *)(v18 + 296) = 0;
      *(void *)(v18 + 304) = 0;
      char v80 = 1;
    }
    long long v81 = *(_OWORD *)(v18 + 320);
    uint64_t v82 = *(void *)(v18 + 336);
    *(void *)(v18 + 328) = 0;
    *(void *)(v18 + 336) = 0;
    *(void *)(v18 + 320) = 0;
    BOOL v36 = (float *)v18;
    while (1)
    {
      size_t v37 = (float *)v15;
      sirinluinternal::MatchingSpan::operator=();
      v36[22] = *(float *)(v15 + 88);
      uint64_t v38 = v15 + 96;
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>((uint64_t)(v36 + 24), v15 + 96);
      size_t v39 = (void *)*((void *)v36 + 40);
      if (v39)
      {
        *((void *)v36 + 41) = v39;
        operator delete(v39);
        *((void *)v36 + 42) = 0;
      }
      int v40 = (void *)(v15 + 320);
      *((_OWORD *)v36 + 20) = *(_OWORD *)(v15 + 320);
      *((void *)v36 + 42) = *(void *)(v15 + 336);
      *(void *)(v15 + 320) = 0;
      *(void *)(v15 + 328) = 0;
      *(void *)(v15 + 336) = 0;
      if (v15 == a1) {
        break;
      }
      if (!v80) {
        goto LABEL_86;
      }
      v15 -= 344;
      BOOL v36 = v37;
      if (*((unsigned char *)v37 - 32))
      {
        char v41 = HIBYTE(v69);
        if (v69 >= 0) {
          size_t v42 = HIBYTE(v69);
        }
        else {
          size_t v42 = *((void *)&__s1 + 1);
        }
        int v43 = *((char *)v37 - 169);
        if (v43 >= 0) {
          size_t v44 = *((unsigned __int8 *)v37 - 169);
        }
        else {
          size_t v44 = *((void *)v37 - 23);
        }
        if (v43 >= 0) {
          uint64_t v45 = v37 - 48;
        }
        else {
          uint64_t v45 = (float *)*((void *)v37 - 24);
        }
        if (v42 != v44) {
          goto LABEL_75;
        }
        if (v69 < 0)
        {
          if (!memcmp((const void *)__s1, v45, *((size_t *)&__s1 + 1))) {
            goto LABEL_85;
          }
LABEL_75:
          if (v41 >= 0) {
            p_s1 = &__s1;
          }
          else {
            p_s1 = (long long *)__s1;
          }
          if (v42 >= v44) {
            size_t v50 = v44;
          }
          else {
            size_t v50 = v42;
          }
          int v51 = memcmp(v45, p_s1, v50);
          BOOL v52 = v44 < v42;
          if (v51) {
            BOOL v52 = v51 < 0;
          }
          BOOL v36 = v37;
          if (!v52)
          {
LABEL_86:
            int v53 = v37;
            goto LABEL_88;
          }
        }
        else
        {
          if (HIBYTE(v69))
          {
            int v46 = v45;
            size_t v47 = &__s1;
            uint64_t v48 = HIBYTE(v69);
            while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v46)
            {
              size_t v47 = (long long *)((char *)v47 + 1);
              int v46 = (float *)((char *)v46 + 1);
              if (!--v48) {
                goto LABEL_85;
              }
            }
            goto LABEL_75;
          }
LABEL_85:
          BOOL v36 = v37;
          if (v62 <= *(v37 - 64)) {
            goto LABEL_86;
          }
        }
      }
    }
    int v53 = (float *)a1;
LABEL_88:
    sirinluinternal::MatchingSpan::operator=();
    v53[22] = v62;
    std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<marrs::mrr::mr::MRREntity,false>>(v38, (uint64_t)&v63);
    size_t v54 = (void *)*((void *)v37 + 40);
    if (v54)
    {
      *((void *)v53 + 41) = v54;
      operator delete(v54);
      *int v40 = 0;
      *((void *)v37 + 41) = 0;
      *((void *)v37 + 42) = 0;
    }
    *int v40 = v81;
    *((void *)v53 + 41) = *((void *)&v81 + 1);
    *((void *)v53 + 42) = v82;
    long long v81 = 0uLL;
    uint64_t v82 = 0;
    if (v80)
    {
      v83[0] = (void **)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v83);
      if (SHIBYTE(v77) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v74) < 0) {
        operator delete((void *)v73);
      }
      v83[0] = (void **)&v71;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v83);
      if (SHIBYTE(v69) < 0) {
        operator delete((void *)__s1);
      }
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if (SHIBYTE(v65) < 0) {
        operator delete((void *)v64);
      }
    }
    MEMORY[0x1CB786420](v61);
    ++v59;
    uint64_t v17 = a2;
    if (v59 == 8) {
      return v18 + 344 == a2;
    }
LABEL_105:
    uint64_t v15 = v18;
    v18 += 344;
  }
  while (v18 != v17);
  return 1;
}

void marrs::mrr::mr::MRMatchingResult::toMatchingSpan(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  size_t v8 = *(sirinluinternal::InternalSpanData **)(MEMORY[0x1CB786400]() + 40);
  if (!v8)
  {
    sirinluinternal::MatchingSpan::makeInternalSpanData((sirinluinternal::MatchingSpan *)a1);
    size_t v8 = *(sirinluinternal::InternalSpanData **)(a1 + 40);
  }
  MentionResolverSpanData = (char *)sirinluinternal::InternalSpanData::makeMentionResolverSpanData(v8);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 16);
  double v11 = *(float *)(a2 + 88);
  *(unsigned char *)(v10 + 24) |= 2u;
  *(double *)(v10 + 16) = v11;
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 16);
  double v13 = *(float *)(a2 + 88);
  *(unsigned char *)(v12 + 24) |= 1u;
  *(double *)(v12 + 8) = v13;
  if (*(unsigned char *)(a2 + 312) && (uint64_t v14 = *(void *)(a2 + 16), *(void *)(a2 + 8) != v14) && *(_DWORD *)(v14 - 4) == 6)
  {
    if (*(void *)(*(void *)(*a3 + 8 * *(int *)(a2 + 200)) + 40)) {
      operator new();
    }
    int v15 = *(_DWORD *)(a2 + 96);
  }
  else
  {
    int v15 = 30;
  }
  uint64_t v17 = *(_DWORD **)(a2 + 320);
  __n128 v16 = *(_DWORD **)(a2 + 328);
  if (v17 != v16)
  {
    while (*v17 != 3)
    {
      if (++v17 == v16)
      {
        uint64_t v17 = *(_DWORD **)(a2 + 328);
        break;
      }
    }
  }
  if (v17 != v16)
  {
    uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1CB7863C0](&__p, *(void *)(a1 + 64));
    uint64_t v19 = siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
    int USONodeIndex = marrs::mrr::mr::findUSONodeIndex((uint64_t *)v78, v79, -1, *(_DWORD *)(v19 + 36));
    if (USONodeIndex == -1)
    {
      int v22 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1C9555000, v22, OS_LOG_TYPE_DEBUG, "Could not find entity node in csm's uso graph to extract span label", buf, 2u);
      }
    }
    else
    {
      unsigned int v21 = USONodeIndex;
      marrs::mrr::mr::getEntityDescendants((uint64_t *)buf, (uint64_t)&__p, USONodeIndex);
      if (v21 >= (unint64_t)((v82 - v81) >> 3)) {
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      }
      int v15 = marrs::mrr::mr::mapNodeIdToMRREntityType((siri::ontology::oname::graph::ontology_init *)*(unsigned int *)(*(void *)(v81 + 8 * v21) + 72), (siri::ontology::oname::graph::ontology_init *)&__p, (unint64_t *)buf);
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)buf);
    }
    MentionResolverSpanData = (char *)MEMORY[0x1CB7863D0](&__p);
  }
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23)
  {
    if (*(char *)(v23 + 23) < 0)
    {
      if (*(void *)(v23 + 8)) {
        goto LABEL_38;
      }
    }
    else if (*(unsigned char *)(v23 + 23))
    {
      goto LABEL_38;
    }
  }
  uint64_t v24 = qword_1EBC844B0;
  if (!qword_1EBC844B0) {
    goto LABEL_35;
  }
  char v25 = &qword_1EBC844B0;
  do
  {
    int v26 = *(_DWORD *)(v24 + 32);
    BOOL v27 = v26 < v15;
    if (v26 >= v15) {
      size_t v28 = (uint64_t *)v24;
    }
    else {
      size_t v28 = (uint64_t *)(v24 + 8);
    }
    if (!v27) {
      char v25 = (uint64_t *)v24;
    }
    uint64_t v24 = *v28;
  }
  while (*v28);
  if (v25 != &qword_1EBC844B0 && v15 >= *((_DWORD *)v25 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v25[5]);
    sirinluinternal::MatchingSpan::label(a1, &__p);
  }
  else
  {
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(&__p, "undefined");
    sirinluinternal::MatchingSpan::label(a1, &__p);
  }
  if (v77 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
LABEL_38:
  uint64_t v29 = *(void *)(a1 + 64);
  if (v29 && *(void *)(v29 + 8) == *(void *)(v29 + 16))
  {
    unint64_t v30 = *(unsigned int *)(a1 + 76);
    uint64_t v31 = *(void *)(*(void *)a4 + 24);
    unint64_t v32 = (*(void *)(*(void *)a4 + 32) - v31) >> 3;
    if (v32 > v30)
    {
      unint64_t v33 = (*(_DWORD *)(a1 + 72) - 1);
      if (v32 > v33)
      {
        int v34 = *(_DWORD *)(*(void *)(v31 + 8 * v30) + 72);
        int v35 = *(_DWORD *)(*(void *)(v31 + 8 * v33) + 76);
        sirinluexternal::UtteranceSpan::UtteranceSpan((sirinluexternal::UtteranceSpan *)buf);
        v75 |= 9u;
        HIDWORD(v74) = v34;
        *(_DWORD *)&uint8_t buf[8] = v35;
        sirinluexternal::UtteranceAlignment::UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&__p);
        LOBYTE(v79) = v79 | 2;
        HIDWORD(v78) = 0;
        operator new();
      }
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
    std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
  }
  size_t v37 = *(char **)(a1 + 16);
  unint64_t v36 = *(void *)(a1 + 24);
  if ((unint64_t)v37 >= v36)
  {
    MentionResolverSpanData = *(char **)(a1 + 8);
    uint64_t v39 = (v37 - MentionResolverSpanData) >> 2;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v41 = v36 - (void)MentionResolverSpanData;
    if (v41 >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    BOOL v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v43 = v40;
    }
    if (v43)
    {
      unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v43);
      MentionResolverSpanData = *(char **)(a1 + 8);
      size_t v37 = *(char **)(a1 + 16);
    }
    else
    {
      uint64_t v44 = 0;
    }
    uint64_t v45 = (_DWORD *)(v43 + 4 * v39);
    unint64_t v46 = v43 + 4 * v44;
    _DWORD *v45 = 7;
    uint64_t v38 = v45 + 1;
    while (v37 != MentionResolverSpanData)
    {
      int v47 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *--uint64_t v45 = v47;
    }
    *(void *)(a1 + 8) = v45;
    *(void *)(a1 + 16) = v38;
    *(void *)(a1 + 24) = v46;
    if (MentionResolverSpanData) {
      operator delete(MentionResolverSpanData);
    }
  }
  else
  {
    *(_DWORD *)size_t v37 = 7;
    uint64_t v38 = v37 + 4;
  }
  *(void *)(a1 + 16) = v38;
  uint64_t v48 = *(void *)(a1 + 64);
  if (v48)
  {
    unint64_t v49 = *(unsigned int *)(a1 + 76);
    uint64_t v50 = *(void *)(*(void *)a4 + 24);
    unint64_t v51 = (*(void *)(*(void *)a4 + 32) - v50) >> 3;
    if (v51 <= v49) {
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v52 = (*(_DWORD *)(a1 + 72) - 1);
    if (v51 <= v52) {
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = *(_DWORD *)(*(void *)(v50 + 8 * v49) + 72);
    int v54 = *(_DWORD *)(*(void *)(v50 + 8 * v52) + 76);
    size_t v55 = *(sirinluexternal::UsoEntitySpan ***)(v48 + 104);
    if (v55 == *(sirinluexternal::UsoEntitySpan ***)(v48 + 112))
    {
      int v59 = (siri::ontology::oname::graph::ontology_init *)sirinluexternal::UsoEntitySpan::UsoEntitySpan((sirinluexternal::UsoEntitySpan *)&__p);
      uint64_t v60 = *(void *)(a1 + 64);
      uint64_t v61 = siri::ontology::oname::graph::ontology_init::Argument_entity(v59);
      int v62 = marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(v60 + 32), *(uint64_t **)(v60 + 40), -1, *(_DWORD *)(v61 + 36));
      v85 |= 1u;
      int v84 = v62;
      sirinluexternal::UsoEntitySpan::makeOriginAppId((sirinluexternal::UsoEntitySpan *)&__p);
      uint64_t v63 = v80;
      std::string::basic_string[abi:ne180100]<0>(buf, "MarrsReferenceResolution");
      siricommon::StringValue::makeValue(v63);
      uint64_t v64 = *(void *)(v63 + 8);
      if (*(char *)(v64 + 23) < 0) {
        operator delete(*(void **)v64);
      }
      long long v65 = *(_OWORD *)buf;
      *(void *)(v64 + 16) = v74;
      *(_OWORD *)uint64_t v64 = v65;
      sirinluexternal::UsoEntitySpan::makeStartIndex((sirinluexternal::UsoEntitySpan *)&__p);
      uint64_t v66 = v83;
      *(unsigned char *)(v83 + 12) |= 1u;
      *(_DWORD *)(v66 + 8) = v53;
      sirinluexternal::UsoEntitySpan::makeEndIndex((sirinluexternal::UsoEntitySpan *)&__p);
      uint64_t v67 = v78;
      *((unsigned char *)v78 + 12) |= 1u;
      *((_DWORD *)v67 + 2) = v54;
      operator new();
    }
    size_t v56 = *v55;
    if (!*((void *)*v55 + 13) && !*((void *)v56 + 4))
    {
      sirinluexternal::UsoEntitySpan::makeStartIndex(*v55);
      uint64_t v57 = *((void *)v56 + 13);
      *(unsigned char *)(v57 + 12) |= 1u;
      *(_DWORD *)(v57 + 8) = v53;
      MentionResolverSpanData = (char *)sirinluexternal::UsoEntitySpan::makeEndIndex(v56);
      uint64_t v58 = *((void *)v56 + 4);
      *(unsigned char *)(v58 + 12) |= 1u;
      *(_DWORD *)(v58 + 8) = v54;
    }
  }
  size_t v68 = *(_DWORD **)(a2 + 320);
  if ((*v68 | 2) == 2 && v68 != *(_DWORD **)(a2 + 328))
  {
    uint64_t v69 = *(void *)(a1 + 64);
    if (v69)
    {
      uint64_t v70 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)MentionResolverSpanData);
      unsigned __int32 v71 = marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(v69 + 32), *(uint64_t **)(v69 + 40), -1, *(_DWORD *)(v70 + 36));
      uint64_t v72 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        __p.n128_u32[0] = 67109120;
        __p.n128_u32[1] = v71;
        _os_log_impl(&dword_1C9555000, v72, OS_LOG_TYPE_DEBUG, "** found node index: %u", (uint8_t *)&__p, 8u);
      }
      sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&__p);
      sirinluexternal::UsoEntityIdentifier::makeNamespaceA((sirinluexternal::UsoEntityIdentifier *)&__p);
      operator new();
    }
  }
}

void sub_1C95A6DCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t buf,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void sub_1C95A6E3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int buf,uint64_t a28)
{
}

void sub_1C95A6FC4()
{
}

void sub_1C95A70B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v30)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C95A7204);
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1C95A7158(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    unsigned int v21 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      a21 = 0;
      _os_log_impl(&dword_1C9555000, v21, OS_LOG_TYPE_DEBUG, "Mention token indices out of bounds in token chain, skipping UsoEntitySpan index update", (uint8_t *)&a21, 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C95A6968);
  }
  JUMPOUT(0x1C95A7204);
}

void sub_1C95A71C0()
{
}

void sub_1C95A71CC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C95A720CLL);
}

void sub_1C95A71E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x1C95A71F0);
}

void sub_1C95A7200(_Unwind_Exception *a1)
{
  MEMORY[0x1CB786420](v1);
  _Unwind_Resume(a1);
}

uint64_t siricommon::StringValue::makeValue(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

__n128 sirinluinternal::MatchingSpan::label(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    operator new();
  }
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB786E50);
}

__n128 sirinluexternal::UsoEntityIdentifier::value(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    operator new();
  }
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 sirinluexternal::UsoEntityIdentifier::backingAppBundleId(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    operator new();
  }
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void PB::PtrVector<sirinluexternal::UsoEntityIdentifier>::emplace_back<sirinluexternal::UsoEntityIdentifier&>()
{
}

void sub_1C95A75FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

os_log_t ___ZN5marrs2qr13orchestration14SignpostsUtils20createCcqrAerContextEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.siri.marrs.QueryRewrite.CCQRAer", "CCQRAerProfiler");
  marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext = (uint64_t)result;
  return result;
}

os_log_t ___ZN5marrs2qr13orchestration14SignpostsUtils15createRdContextEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.siri.marrs.QueryRewrite.RepetitionDetector", "RdProfiler");
  marrs::qr::orchestration::SignpostsUtils::createRdContext(void)::rdLogContext = (uint64_t)result;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  int v15 = (void *)(a1 + 16);
  __n128 v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)__n128 v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = (std::string *)(v16 + 16);
  uint64_t v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v26 = operator new(8 * *(void *)&prime);
          BOOL v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            int v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *uint64_t v29 = *v35;
                  *int v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  int v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                int v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *size_t v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    size_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1C95A7B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      double v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          double v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  double v13 = (char *)operator new(0x30uLL);
  *(void *)double v13 = 0;
  *((void *)v13 + 1) = v8;
  int v15 = (std::string *)(v13 + 16);
  __n128 v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *((void *)v13 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((_DWORD *)v13 + 10) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  char v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)double v13 = *v25;
LABEL_41:
    *char v25 = v13;
    goto LABEL_42;
  }
  *(void *)double v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v26 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1C95A7D88(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  double v13 = (char *)operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)double v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 14) = 1065353216;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v20 = operator new(8 * *(void *)&prime);
  unint64_t v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  size_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          void *v23 = *v29;
          *uint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        size_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint8x8_t v31 = *(void **)(*(void *)a1 + 8 * v6);
  uint64_t i = (uint64_t *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *uint8x8_t v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v6) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint8x8_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1C95A81C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,float>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,float>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void marrs::mrr::mr::GazeBasedFilter::~GazeBasedFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1CB786E50);
}

void marrs::mrr::mr::GazeBasedFilter::filterEntities(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  marrs::mrr::mr::enumerateAllIndices(&v24, *a1, a1[1]);
  marrs::mrr::mr::pickTopSalientEntity((char **)&__p, a1, (unint64_t *)v24, v25);
  uint64_t v20 = a2;
  unint64_t v4 = (uint64_t *)__p;
  int8x8_t v5 = v23;
  if (__p == v23)
  {
    unint64_t v6 = 0;
    long long v21 = 0u;
  }
  else
  {
    unint64_t v6 = 0;
    uint8x8_t v7 = 0;
    long long v21 = 0u;
    do
    {
      uint64_t v8 = *v4;
      if (*(_DWORD *)(*a1 + 216 * *v4 + 4) == 4)
      {
        if ((unint64_t)v7 >= v6)
        {
          uint8x8_t v10 = (void *)v21;
          uint64_t v11 = (uint64_t)((uint64_t)v7 - v21) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v6 - v21) >> 2 > v12) {
            unint64_t v12 = (uint64_t)(v6 - v21) >> 2;
          }
          if (v6 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13)
          {
            unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
            uint8x8_t v7 = (void *)*((void *)&v21 + 1);
          }
          else
          {
            uint64_t v14 = 0;
          }
          float v15 = (void *)(v13 + 8 * v11);
          void *v15 = v8;
          unint64_t v9 = v15 + 1;
          while (v7 != (void *)v21)
          {
            uint64_t v16 = *--v7;
            *--float v15 = v16;
          }
          unint64_t v6 = v13 + 8 * v14;
          *(void *)&long long v21 = v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *uint8x8_t v7 = v8;
          unint64_t v9 = v7 + 1;
        }
        *(void *)&long long v17 = v21;
        *((void *)&v17 + 1) = v9;
        long long v21 = v17;
        uint8x8_t v7 = v9;
      }
      ++v4;
    }
    while (v4 != v5);
  }
  unint64_t v18 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v27 = ((char *)v23 - (unsigned char *)__p) >> 3;
    _os_log_impl(&dword_1C9555000, v18, OS_LOG_TYPE_INFO, "[GazeBasedFilter] selected %lu most salient entities", buf, 0xCu);
  }
  float v19 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v27 = (uint64_t)(*((void *)&v21 + 1) - v21) >> 3;
    _os_log_impl(&dword_1C9555000, v19, OS_LOG_TYPE_INFO, "[GazeBasedFilter] selected %lu most salient visual entities", buf, 0xCu);
  }
  *(_OWORD *)uint64_t v20 = v21;
  *(void *)(v20 + 16) = v6;
  *(unsigned char *)(v20 + 24) = 1;
  if (__p) {
    operator delete(__p);
  }
  if (v24)
  {
    uint8x8_t v25 = (unint64_t *)v24;
    operator delete(v24);
  }
}

void sub_1C95A8658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if ((void)a11) {
    operator delete((void *)a11);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

id QRLoggerForCategory(int a1)
{
  if (QRLoggerForCategory::onceToken != -1) {
    dispatch_once(&QRLoggerForCategory::onceToken, &__block_literal_global_478);
  }
  uint64_t v2 = (void *)QRLoggerForCategory::logObjects[a1];
  return v2;
}

uint64_t __QRLoggerForCategory_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.siri.marrs.QueryRewrite", "QueryRewrite");
  uint64_t v1 = (void *)QRLoggerForCategory::logObjects[0];
  QRLoggerForCategory::logObjects[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.siri.marrs.QueryRewrite", "RD");
  unint64_t v3 = (void *)qword_1EA587BB0;
  qword_1EA587BB0 = (uint64_t)v2;

  qword_1EA587BB8 = (uint64_t)os_log_create("com.apple.siri.marrs.QueryRewrite", "CCQR");
  return MEMORY[0x1F41817F8]();
}

uint64_t CcqrOrchestrator::validate(CcqrOrchestrator *this, const QRRequest *a2)
{
  uint64_t v11 = &unk_1F23C7B40;
  uint64_t v12 = 0;
  if (!marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 0))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Received empty ASR utterance / tokens in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(exception, (uint64_t)&v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 165);
  }
  uint64_t v11 = &unk_1F23C7BA0;
  uint64_t v12 = 0;
  unint64_t v3 = (marrs::qr::orchestration::AsrConfidenceChecker *)marrs::qr::orchestration::PreviousNLUtteranceChecker::verify((marrs::qr::orchestration::PreviousNLUtteranceChecker *)&v11, a2);
  if ((v3 & 1) == 0)
  {
    uint8x8_t v7 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Received empty inputs in QRRequest.prevQRUtterances");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v7, (uint64_t)&v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 168);
  }
  unint64_t var1 = a2->var1.var1;
  if (a2->var1.var0 != var1 && var1[-1].var2.var1 != var1[-1].var2.var2.var0)
  {
    unint64_t v9 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Received non-empty SiriResponse for current turn in QRRequest.interactions");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v9, (uint64_t)&v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 172);
  }
  uint64_t v11 = &unk_1F23C7B70;
  uint64_t v12 = 0;
  if ((marrs::qr::orchestration::AsrConfidenceChecker::verify(v3, a2) & 1) == 0)
  {
    uint64_t v8 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid ASR confidence score in turn inputs");
    std::string::basic_string[abi:ne180100]<0>(v10, "QueryRewrite");
    IOContentError::IOContentError(v8, (uint64_t)&v11, (uint64_t)v10, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/orchestration/CcqrOrchestrator.cpp", 175);
  }
  return 1;
}

void sub_1C95A8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v21) {
    __cxa_free_exception(v20);
  }
  _Unwind_Resume(exception_object);
}

void CcqrOrchestrator::~CcqrOrchestrator(CcqrOrchestrator *this)
{
  CcqrOrchestrator::~CcqrOrchestrator(this);
  JUMPOUT(0x1CB786E50);
}

{
  void **v2;

  *(void *)this = &unk_1F23C7A08;
  std::unique_ptr<JointCCQRModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)this + 34, 0);
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  os_log_t v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 80);
  os_log_t v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

marrs::inference_engine::EspressoModule *std::unique_ptr<JointCCQRModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1, marrs::inference_engine::EspressoModule *a2)
{
  os_log_t result = *a1;
  *a1 = a2;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

void CcqrOrchestrator::predict(CcqrOrchestrator *this@<X0>, const QRRequest *a2@<X1>, uint64_t a3@<X8>)
{
  v352[11] = *MEMORY[0x1E4F143B8];
  (*(void (**)(CcqrOrchestrator *))(*(void *)this + 24))(this);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v276 = a3;
  *(_DWORD *)(a3 + 56) = 4;
  BOOL v281 = a2;
  p_unint64_t var1 = &a2->var1;
  var0 = a2->var1.var0;
  unint64_t var1 = p_var1->var1;
  uint64_t v8 = QRLoggerForCategory(2);
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (((char *)var1 - (char *)var0) >> 4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v9;
    _os_log_debug_impl(&dword_1C9555000, v8, OS_LOG_TYPE_DEBUG, "%s Number of input turns: %zu", buf, 0x16u);
  }
  if (v9 <= 1)
  {
    uint8x8_t v10 = QRLoggerForCategory(2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "predict";
      _os_log_debug_impl(&dword_1C9555000, v10, OS_LOG_TYPE_DEBUG, "%s Rule-based classifier returned", buf, 0xCu);
    }
    *(_DWORD *)(v276 + 56) = 3;
    return;
  }
  uint64_t v11 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v9;
    _os_log_debug_impl(&dword_1C9555000, v11, OS_LOG_TYPE_DEBUG, "%s Processing request with %zu turns", buf, 0x16u);
  }
  uint64_t v12 = QRLoggerForCategory(2);
  os_signpost_id_t v13 = os_signpost_id_generate(v12);
  unint64_t v14 = v13 - 1;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v13, "PreProcessDuration", "CCQR PreProcessing duration", buf, 2u);
  }
  log = v12;
  unint64_t v271 = v9;
  uint64_t v313 = 0;
  uint64_t v314 = 0;
  uint64_t v315 = 0;
  std::string::size_type v310 = 0;
  uint64_t v311 = 0;
  uint64_t v312 = 0;
  uint64_t v307 = 0;
  uint64_t v308 = 0;
  uint64_t v309 = 0;
  uint64_t v304 = 0;
  uint64_t v305 = 0;
  uint64_t v306 = 0;
  std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::__optional_destruct_base[abi:ne180100]<marrs::qr::processing::Vocab&>((uint64_t)&v296, (uint64_t)this + 80);
  unint64_t v15 = *((int *)this + 39);
  int v286 = *((unsigned __int8 *)this + 152);
  uint64_t v17 = *((void *)this + 21);
  unint64_t v16 = *((void *)this + 22);
  memset(&v291, 0, sizeof(v291));
  long long v337 = 0uLL;
  uint64_t v338 = 0;
  memset(&v336, 0, sizeof(v336));
  unint64_t v18 = v281->var1.var0;
  uint64_t v19 = (char *)v281->var1.var1 - (char *)v18;
  if (v19)
  {
    unint64_t v272 = v13 - 1;
    uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * (v19 >> 4);
    unint64_t v21 = v15 + (int)v15 * (unint64_t)*((unsigned __int8 *)this + 155) + 1;
    if (v21 <= v16) {
      unint64_t v22 = v16 / v21 - 1;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v288 = v22;
    marrs::qr::processing::filterTokens((uint64_t)v324, (unint64_t *)(*((void *)v18 + 14 * v20 - 14) + 40), v22);
    std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v291, v291.__r_.__value_.__l.__size_, (std::string *)v324[0], (uint64_t)v324[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v324[1] - (char *)v324[0]) >> 5));
    std::string::basic_string[abi:ne180100]<0>(&v320, "[EOS]");
    std::string::basic_string[abi:ne180100]<0>(v318, "[EOS]");
    uint64_t v274 = v17;
    os_signpost_id_t spid = v13;
    std::string::basic_string[abi:ne180100]<0>(&v341, "[EOS]");
    long long v316 = 0uLL;
    uint64_t v317 = 0;
    v339[0] = &v316;
    LOBYTE(v339[1]) = 0;
    *(void *)&long long v316 = operator new(0x18uLL);
    *((void *)&v316 + 1) = v316;
    uint64_t v317 = v316 + 24;
    *((void *)&v316 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v317, &v341, (long long *)buf, (std::string *)v316);
    marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, &v320, (long long *)v318, (long long **)&v316, 0, 0);
    std::string::size_type size = v291.__r_.__value_.__l.__size_;
    if (v291.__r_.__value_.__l.__size_ >= v291.__r_.__value_.__r.__words[2])
    {
      v291.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v291, (long long *)buf);
      if (SHIBYTE(v351) < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      long long v24 = *(_OWORD *)buf;
      *(void *)(v291.__r_.__value_.__l.__size_ + 16) = *(void *)&buf[16];
      *(_OWORD *)std::string::size_type size = v24;
      *(void *)&uint8_t buf[8] = 0;
      *(void *)std::string buf = 0;
      uint64_t v25 = *(void *)&buf[40];
      *(_OWORD *)(size + 24) = *(_OWORD *)&buf[24];
      *(void *)(size + 40) = v25;
      *(void *)(size + 48) = 0;
      memset(&buf[16], 0, 32);
      *(void *)(size + 56) = 0;
      *(void *)(size + 64) = 0;
      *(_OWORD *)(size + 48) = *(_OWORD *)&buf[48];
      *(void *)(size + 64) = v344;
      *(_OWORD *)&buf[48] = 0uLL;
      long long v26 = v345;
      *(_OWORD *)(size + 88) = v346;
      *(_OWORD *)(size + 72) = v26;
      long long v27 = v347;
      *(void *)(size + 120) = v348;
      *(_OWORD *)(size + 104) = v27;
      size_t v348 = 0;
      char v344 = 0;
      long long v347 = 0uLL;
      *(unsigned char *)(size + 128) = (_BYTE)v349;
      long long v28 = __p;
      *(void *)(size + 152) = v351;
      *(_OWORD *)(size + 136) = v28;
      uint64_t v351 = 0;
      long long __p = 0uLL;
      v291.__r_.__value_.__l.__size_ = size + 160;
    }
    if (SHIBYTE(v348) < 0) {
      operator delete((void *)v347);
    }
    v339[0] = &buf[48];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v339);
    if ((buf[47] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v339[0] = &v316;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v339);
    if (SHIBYTE(v342) < 0) {
      operator delete((void *)v341);
    }
    if (v319 < 0) {
      operator delete(v318[0]);
    }
    if (SHIBYTE(v321) < 0) {
      operator delete((void *)v320);
    }
    if (v20 - 1 <= v15) {
      unint64_t v30 = v15;
    }
    else {
      unint64_t v30 = v20 - 1;
    }
    if (v20 - 2 != v30 + ~v15)
    {
      uint64_t v31 = 112 * v20;
      unint64_t v32 = ~v30 + v20 + v15;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v320, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(v318, "[SOQ]");
        std::string::basic_string[abi:ne180100]<0>(&v341, "[SOQ]");
        long long v316 = 0uLL;
        uint64_t v317 = 0;
        v339[0] = &v316;
        LOBYTE(v339[1]) = 0;
        *(void *)&long long v316 = operator new(0x18uLL);
        *((void *)&v316 + 1) = v316;
        uint64_t v317 = v316 + 24;
        *((void *)&v316 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v317, &v341, (long long *)buf, (std::string *)v316);
        marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, &v320, (long long *)v318, (long long **)&v316, 0, 0);
        std::string::size_type v33 = v291.__r_.__value_.__l.__size_;
        if (v291.__r_.__value_.__l.__size_ >= v291.__r_.__value_.__r.__words[2])
        {
          v291.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v291, (long long *)buf);
          if (SHIBYTE(v351) < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v34 = *(_OWORD *)buf;
          *(void *)(v291.__r_.__value_.__l.__size_ + 16) = *(void *)&buf[16];
          *(_OWORD *)std::string::size_type v33 = v34;
          memset(buf, 0, 24);
          uint64_t v35 = *(void *)&buf[40];
          *(_OWORD *)(v33 + 24) = *(_OWORD *)&buf[24];
          *(void *)(v33 + 40) = v35;
          *(void *)(v33 + 48) = 0;
          memset(&buf[24], 0, 24);
          *(void *)(v33 + 56) = 0;
          *(void *)(v33 + 64) = 0;
          *(_OWORD *)(v33 + 48) = *(_OWORD *)&buf[48];
          *(void *)(v33 + 64) = v344;
          *(_OWORD *)&buf[48] = 0uLL;
          char v344 = 0;
          long long v36 = v345;
          *(_OWORD *)(v33 + 88) = v346;
          *(_OWORD *)(v33 + 72) = v36;
          long long v37 = v347;
          *(void *)(v33 + 120) = v348;
          *(_OWORD *)(v33 + 104) = v37;
          size_t v348 = 0;
          long long v347 = 0uLL;
          *(unsigned char *)(v33 + 128) = (_BYTE)v349;
          long long v38 = __p;
          *(void *)(v33 + 152) = v351;
          *(_OWORD *)(v33 + 136) = v38;
          uint64_t v351 = 0;
          long long __p = 0uLL;
          v291.__r_.__value_.__l.__size_ = v33 + 160;
        }
        if (SHIBYTE(v348) < 0) {
          operator delete((void *)v347);
        }
        v339[0] = &buf[48];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v339);
        if ((buf[47] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[24]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        v339[0] = &v316;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v339);
        if (SHIBYTE(v342) < 0) {
          operator delete((void *)v341);
        }
        if (v319 < 0) {
          operator delete(v318[0]);
        }
        if (SHIBYTE(v321) < 0) {
          operator delete((void *)v320);
        }
        uint64_t v39 = v281->var1.var0;
        long long v320 = 0uLL;
        unint64_t v321 = 0;
        unint64_t v40 = (char *)v39 + v31;
        if (v286)
        {
          uint64_t v41 = *(void *)((char *)&v39[-1] + v31 - 80);
          uint64_t v42 = *((void *)v40 - 24);
        }
        else
        {
          uint64_t v41 = *(void *)((char *)&v39[-1] + v31 - 104);
          uint64_t v42 = *((void *)v40 - 27);
        }
        if (v41 != v42 && &v320 != (long long *)(v41 + 40)) {
          std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&v320, *(std::string **)(v41 + 40), *(std::string **)(v41 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v41 + 48) - *(void *)(v41 + 40)) >> 5));
        }
        marrs::qr::processing::filterTokens((uint64_t)buf, (unint64_t *)&v320, v288);
        std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(v324);
        *(_OWORD *)int v324 = *(_OWORD *)buf;
        uint64_t v325 = *(void *)&buf[16];
        memset(buf, 0, 24);
        v318[0] = buf;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v318);
        std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v291, v291.__r_.__value_.__l.__size_, (std::string *)v324[0], (uint64_t)v324[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v324[1] - (char *)v324[0]) >> 5));
        if (*((unsigned char *)this + 155))
        {
          std::string::basic_string[abi:ne180100]<0>(v318, "[SOR]");
          std::string::basic_string[abi:ne180100]<0>(&v316, "[SOR]");
          std::string::basic_string[abi:ne180100]<0>(v339, "[SOR]");
          long long v341 = 0uLL;
          uint64_t v342 = 0;
          long long v322 = (void **)&v341;
          char v323 = 0;
          *(void *)&long long v341 = operator new(0x18uLL);
          *((void *)&v341 + 1) = v341;
          uint64_t v342 = v341 + 24;
          *((void *)&v341 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v342, (long long *)v339, &v341, (std::string *)v341);
          marrs::qr::orchestration::QRToken::QRToken((std::string *)buf, (long long *)v318, &v316, (long long **)&v341, 0, 0);
          std::string::size_type v43 = v291.__r_.__value_.__l.__size_;
          if (v291.__r_.__value_.__l.__size_ >= v291.__r_.__value_.__r.__words[2])
          {
            v291.__r_.__value_.__l.__size_ = std::vector<marrs::qr::orchestration::QRToken>::__emplace_back_slow_path<marrs::qr::orchestration::QRToken>((uint64_t *)&v291, (long long *)buf);
            if (SHIBYTE(v351) < 0) {
              operator delete((void *)__p);
            }
          }
          else
          {
            long long v44 = *(_OWORD *)buf;
            *(void *)(v291.__r_.__value_.__l.__size_ + 16) = *(void *)&buf[16];
            *(_OWORD *)std::string::size_type v43 = v44;
            memset(buf, 0, 24);
            uint64_t v45 = *(void *)&buf[40];
            *(_OWORD *)(v43 + 24) = *(_OWORD *)&buf[24];
            *(void *)(v43 + 40) = v45;
            *(void *)(v43 + 48) = 0;
            memset(&buf[24], 0, 24);
            *(void *)(v43 + 56) = 0;
            *(void *)(v43 + 64) = 0;
            *(_OWORD *)(v43 + 48) = *(_OWORD *)&buf[48];
            *(void *)(v43 + 64) = v344;
            *(_OWORD *)&buf[48] = 0uLL;
            char v344 = 0;
            long long v46 = v345;
            *(_OWORD *)(v43 + 88) = v346;
            *(_OWORD *)(v43 + 72) = v46;
            long long v47 = v347;
            *(void *)(v43 + 120) = v348;
            *(_OWORD *)(v43 + 104) = v47;
            size_t v348 = 0;
            long long v347 = 0uLL;
            *(unsigned char *)(v43 + 128) = (_BYTE)v349;
            long long v48 = __p;
            *(void *)(v43 + 152) = v351;
            *(_OWORD *)(v43 + 136) = v48;
            uint64_t v351 = 0;
            long long __p = 0uLL;
            v291.__r_.__value_.__l.__size_ = v43 + 160;
          }
          if (SHIBYTE(v348) < 0) {
            operator delete((void *)v347);
          }
          long long v322 = (void **)&buf[48];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v322);
          if ((buf[47] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          long long v322 = (void **)&v341;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v322);
          if (v340 < 0) {
            operator delete(v339[0]);
          }
          if (SHIBYTE(v317) < 0) {
            operator delete((void *)v316);
          }
          if (v319 < 0) {
            operator delete(v318[0]);
          }
          marrs::qr::processing::filterTokens((uint64_t)buf, (unint64_t *)((char *)&v281->var1.var0[-1] + v31 - 56), v288);
          std::vector<marrs::qr::orchestration::QRToken>::__vdeallocate(v324);
          *(_OWORD *)int v324 = *(_OWORD *)buf;
          uint64_t v325 = *(void *)&buf[16];
          memset(buf, 0, 24);
          v318[0] = buf;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v318);
          std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(&v291, v291.__r_.__value_.__l.__size_, (std::string *)v324[0], (uint64_t)v324[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v324[1] - (char *)v324[0]) >> 5));
        }
        *(void *)std::string buf = &v320;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v31 -= 112;
        --v32;
      }
      while (v32);
    }
    marrs::qr::processing::getFlattenedNormalizedValuesIndices(buf, (uint64_t *)&v291, (void *)this + 1);
    *(void *)&long long v320 = &v337;
    *((void *)&v320 + 1) = &v336;
    std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>((uint64_t)&v320, (uint64_t)buf);
    *(void *)&long long v320 = &buf[24];
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v320);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    long long v320 = 0uLL;
    unint64_t v321 = 0;
    std::string::size_type v279 = v291.__r_.__value_.__l.__size_;
    if (v291.__r_.__value_.__r.__words[0] != v291.__r_.__value_.__l.__size_)
    {
      unint64_t v49 = 0;
      std::string::size_type v50 = v291.__r_.__value_.__r.__words[0];
      do
      {
        std::string::size_type v282 = v50;
        uint64_t v52 = *(void *)(v50 + 48);
        uint64_t v51 = *(void *)(v50 + 56);
        uint64_t v287 = v51;
        while (v52 != v51)
        {
          uint64_t v53 = *(unsigned __int8 *)(v52 + 23);
          if ((v53 & 0x80u) == 0) {
            int v54 = (char *)v52;
          }
          else {
            int v54 = *(char **)v52;
          }
          unint64_t v55 = 0;
          if ((v53 & 0x80u) != 0) {
            uint64_t v53 = *(void *)(v52 + 8);
          }
          if (v53)
          {
            size_t v56 = &v54[v53];
            long long v289 = 0u;
            do
            {
              char v57 = *v54;
              buf[23] = 1;
              buf[0] = v57;
              buf[1] = 0;
              if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(&v296, buf))
              {
                buf[23] = 1;
                buf[0] = v57;
                buf[1] = 0;
                uint64_t v58 = marrs::qr::processing::Vocab::toIndex(&v296, buf);
                uint64_t v59 = v58;
                uint64_t v60 = *((void *)&v289 + 1);
                if (*((void *)&v289 + 1) >= v55)
                {
                  uint64_t v64 = (void *)v289;
                  uint64_t v65 = (uint64_t)(*((void *)&v289 + 1) - v289) >> 3;
                  unint64_t v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v55 - v289) >> 2 > v66) {
                    unint64_t v66 = (uint64_t)(v55 - v289) >> 2;
                  }
                  if (v55 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v67 = v66;
                  }
                  if (v67) {
                    unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
                  }
                  else {
                    uint64_t v68 = 0;
                  }
                  uint64_t v74 = (uint64_t *)(v67 + 8 * v65);
                  *uint64_t v74 = v59;
                  uint64_t v61 = (uint64_t)(v74 + 1);
                  while (v60 != (void)v289)
                  {
                    uint64_t v75 = *(void *)(v60 - 8);
                    v60 -= 8;
                    *--uint64_t v74 = v75;
                  }
                  unint64_t v55 = v67 + 8 * v68;
                  *(void *)&long long v289 = v74;
                  if (v64) {
                    operator delete(v64);
                  }
                }
                else
                {
                  **((void **)&v289 + 1) = v58;
                  uint64_t v61 = *((void *)&v289 + 1) + 8;
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                *(void *)&long long v76 = v289;
                *((void *)&v76 + 1) = v61;
              }
              else
              {
                uint64_t v62 = *((void *)&v289 + 1);
                if (*((void *)&v289 + 1) >= v55)
                {
                  uint64_t v69 = (void *)v289;
                  uint64_t v70 = (uint64_t)(*((void *)&v289 + 1) - v289) >> 3;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v55 - v289) >> 2 > v71) {
                    unint64_t v71 = (uint64_t)(v55 - v289) >> 2;
                  }
                  if (v55 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v72 = v71;
                  }
                  if (v72) {
                    unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v72);
                  }
                  else {
                    uint64_t v73 = 0;
                  }
                  char v77 = (void *)(v72 + 8 * v70);
                  *char v77 = 0;
                  uint64_t v63 = (uint64_t)(v77 + 1);
                  while (v62 != (void)v289)
                  {
                    uint64_t v78 = *(void *)(v62 - 8);
                    v62 -= 8;
                    *--char v77 = v78;
                  }
                  unint64_t v55 = v72 + 8 * v73;
                  *(void *)&long long v289 = v77;
                  if (v69) {
                    operator delete(v69);
                  }
                }
                else
                {
                  **((void **)&v289 + 1) = 0;
                  uint64_t v63 = *((void *)&v289 + 1) + 8;
                }
                *(void *)&long long v76 = v289;
                *((void *)&v76 + 1) = v63;
              }
              long long v289 = v76;
              ++v54;
            }
            while (v54 != v56);
            unint64_t v49 = (char **)*((void *)&v320 + 1);
          }
          else
          {
            long long v289 = 0u;
          }
          if ((unint64_t)v49 >= v321)
          {
            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v49 - v320) >> 3);
            unint64_t v80 = v79 + 1;
            if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v321 - v320) >> 3) > v80) {
              unint64_t v80 = 0x5555555555555556 * ((uint64_t)(v321 - v320) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v321 - v320) >> 3) >= 0x555555555555555) {
              unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v81 = v80;
            }
            *(void *)&buf[32] = &v321;
            uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v81);
            uint64_t v83 = &v82[24 * v79];
            *(void *)std::string buf = v82;
            *(void *)&uint8_t buf[8] = v83;
            *(void *)&uint8_t buf[24] = &v82[24 * v84];
            *(_OWORD *)uint64_t v83 = v289;
            *((void *)v83 + 2) = v55;
            *(void *)&uint8_t buf[16] = v83 + 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v320, buf);
            unint64_t v49 = (char **)*((void *)&v320 + 1);
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(_OWORD *)unint64_t v49 = v289;
            v49[2] = (char *)v55;
            v49 += 3;
          }
          *((void *)&v320 + 1) = v49;
          v52 += 24;
          uint64_t v51 = v287;
        }
        std::string::size_type v50 = v282 + 160;
      }
      while (v282 + 160 != v279);
      char v85 = (char **)v320;
      if ((char **)v320 != v49)
      {
        unint64_t v86 = 0;
        int v87 = (uint64_t *)v320;
        do
        {
          uint64_t v89 = *v87;
          uint64_t v88 = v87[1];
          v87 += 3;
          unint64_t v90 = (v88 - v89) >> 3;
          if (v86 <= v90) {
            unint64_t v86 = v90;
          }
        }
        while (v87 != (uint64_t *)v49);
        uint64_t v91 = 8 * v86;
        do
        {
          long long v93 = *v85;
          unint64_t v92 = v85[1];
          unint64_t v94 = (v92 - *v85) >> 3;
          if (v86 <= v94)
          {
            if (v86 < v94) {
              v85[1] = &v93[8 * v86];
            }
          }
          else
          {
            size_t v95 = v85[2];
            if (v86 - v94 <= (v95 - v92) >> 3)
            {
              uint64_t v107 = &v92[8 * (v86 - v94)];
              unint64_t v108 = v91 - 8 * v94;
              do
              {
                *(void *)unint64_t v92 = v274;
                v92 += 8;
                v108 -= 8;
              }
              while (v108);
              v85[1] = v107;
            }
            else
            {
              if (v86 >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v96 = v95 - v93;
              unint64_t v97 = (v95 - v93) >> 2;
              if (v97 <= v86) {
                unint64_t v97 = v86;
              }
              if (v96 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v97;
              }
              int v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v98);
              uint64_t v101 = &v99[8 * v94];
              unint64_t v102 = v91 - 8 * v94;
              float32x4_t v103 = v101;
              do
              {
                *(void *)float32x4_t v103 = v274;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
              BOOL v104 = *v85;
              for (uint64_t i = v85[1]; i != v104; i -= 8)
              {
                uint64_t v106 = *((void *)i - 1);
                *((void *)v101 - 1) = v106;
                v101 -= 8;
              }
              *char v85 = v101;
              v85[1] = &v99[8 * v86];
              v85[2] = &v99[8 * v100];
              if (v104) {
                operator delete(v104);
              }
            }
          }
          v85 += 3;
        }
        while (v85 != v49);
      }
    }
    v326[0] = 0;
    v326[1] = 0;
    __sz[0] = 0;
    std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(v326, (uint64_t)v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 5));
    long long v328 = 0uLL;
    __sz[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__sz[1], (const void *)v337, *((uint64_t *)&v337 + 1), (uint64_t)(*((void *)&v337 + 1) - v337) >> 3);
    os_signpost_id_t v13 = spid;
    unint64_t v14 = v272;
    v329[1] = 0;
    v329[0] = 0;
    v330[0] = 0;
    std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v329, (uint64_t)v336.__begin_, (uint64_t)v336.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v336.__end_ - (char *)v336.__begin_) >> 3));
    memset(v331, 0, sizeof(v331));
    v330[1] = 0;
    std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v330[1], v320, *((uint64_t *)&v320 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v320 + 1) - v320) >> 3));
    *(void *)std::string buf = &v320;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)std::string buf = v324;
    std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    uint64_t v29 = this;
  }
  else
  {
    *(_OWORD *)uint64_t v330 = 0u;
    *(_OWORD *)long long v331 = 0u;
    long long v328 = 0u;
    *(_OWORD *)uint64_t v329 = 0u;
    *(_OWORD *)unint64_t v326 = 0u;
    *(_OWORD *)__sz = 0u;
    uint64_t v29 = this;
  }
  *(void *)std::string buf = &v336;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((void)v337)
  {
    *((void *)&v337 + 1) = v337;
    operator delete((void *)v337);
  }
  *(void *)std::string buf = &v291;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::vector<marrs::qr::orchestration::QRToken>::__assign_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&v313, (std::string *)v326[0], (std::string *)v326[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v326[1] - (char *)v326[0]) >> 5));
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v310, (char *)__sz[1], v328, (uint64_t)(v328 - __sz[1]) >> 3);
  std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v307, (uint64_t)v329[0], (uint64_t)v329[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 3));
  std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v304, (uint64_t)v330[1], *(uint64_t *)v331, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v331 - (unint64_t)v330[1]) >> 3));
  *(void *)std::string buf = &v330[1];
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = v329;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__sz[1])
  {
    *(void *)&long long v328 = __sz[1];
    operator delete((void *)__sz[1]);
  }
  *(void *)std::string buf = v326;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__optional_destruct_base<marrs::qr::processing::Vocab,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v296);
  long long v109 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 0xCCCCCCCCCCCCCCCDLL * ((v314 - v313) >> 5);
    *(_WORD *)&buf[22] = 2048;
    *(void *)&uint8_t buf[24] = (v311 - (uint64_t)v310) >> 3;
    _os_log_debug_impl(&dword_1C9555000, v109, OS_LOG_TYPE_DEBUG, "%s Finished preprocessing. inputToken size: %lu, tokenIndices size: %lu", buf, 0x20u);
  }
  if (v14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, v13, "PreProcessDuration", " enableTelemetry=YES ", buf, 2u);
  }
  os_signpost_id_t v110 = os_signpost_id_generate(log);
  unint64_t v275 = v110 - 1;
  if (v110 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_BEGIN, v110, "ForwardDuration", "CCQR Inference duration", buf, 2u);
  }
  os_signpost_id_t spida = v110;
  uint64_t v296 = 0;
  uint64_t v297 = 0;
  uint64_t v298 = 0;
  unint64_t v111 = (v311 - (uint64_t)v310) >> 3;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v296, v310, v311, v111);
  unint64_t v299 = 0;
  char v300 = 0;
  uint64_t v301 = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v299, v304, v305, 0xAAAAAAAAAAAAAAABLL * ((v305 - v304) >> 3));
  unint64_t v302 = *((void *)v29 + 27);
  int32x2_t v303 = vrev64_s32(*(int32x2_t *)((char *)v29 + 224));
  long long v112 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v245 = *((void *)v29 + 27);
    double v246 = *((float *)v29 + 57);
    double v247 = *((float *)v29 + 56);
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v111;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&uint8_t buf[24] = 0xAAAAAAAAAAAAAAABLL * ((v305 - v304) >> 3);
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v245;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v246;
    *(_WORD *)&buf[52] = 2048;
    *(double *)&buf[54] = v247;
    _os_log_debug_impl(&dword_1C9555000, v112, OS_LOG_TYPE_DEBUG, "%s Model inference input metadata: tokenIndices size: %lu, charIndices size: %lu, numDecoderSteps: %zu, aerDecisionThreshold: %.2f, cbrDecisionThreshold: %.2f", buf, 0x3Eu);
  }
  uint64_t v113 = *((void *)v29 + 34);
  *(_OWORD *)std::string buf = xmmword_1E6599A30;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1E6599A40;
  *(void *)&buf[32] = "cbr_threshold";
  int v114 = -1431655765 * ((unint64_t)(v300 - v299) >> 3);
  if (!v114)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v326, "Expect column size to be greater than zero for paddedTokenCharIndices");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)v326, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_joint_ccqr_module.cpp", 73);
    void *exception = &unk_1F23C7E90;
  }
  uint64_t v116 = *(void *)v299;
  uint64_t v115 = *((void *)v299 + 1);
  unsigned int v117 = operator new(0x14uLL);
  *unsigned int v117 = v114;
  v117[1] = (unint64_t)(v115 - v116) >> 3;
  *((void *)v117 + 1) = 0x100000001;
  v117[4] = 1;
  unsigned int v118 = operator new(0x14uLL);
  *unsigned int v118 = -1;
  v118[1] = v114;
  *((void *)v118 + 1) = -1;
  v118[4] = -1;
  uint64_t v119 = operator new(0x14uLL);
  v119[4] = 1;
  *(_OWORD *)uint64_t v119 = xmmword_1C95E0FA0;
  uint64_t v120 = operator new(0x14uLL);
  void *v120 = -1;
  v120[1] = -1;
  *((_DWORD *)v120 + 4) = -1;
  uint64_t v121 = operator new(0x14uLL);
  void *v121 = -1;
  v121[1] = -1;
  *((_DWORD *)v121 + 4) = -1;
  size_t v122 = operator new(0x14uLL);
  v122[4] = 1;
  *(_OWORD *)size_t v122 = xmmword_1C95E0FB4;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    char v267 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v326, "Failed to reshape input blobs as input shape doesn't match shape of network input");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(v267, (uint64_t)v326, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_joint_ccqr_module.cpp", 87);
    *char v267 = &unk_1F23C7E90;
  }
  operator delete(v122);
  operator delete(v121);
  operator delete(v120);
  operator delete(v119);
  operator delete(v118);
  operator delete(v117);
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(v113 + 8));
  BOOL v124 = (unint64_t *)v296;
  int v123 = v297;
  memset(buf, 0, 24);
  uint64_t v125 = operator new(8uLL);
  *(void *)std::string buf = v125;
  unint64_t v126 = v123 - v124;
  *uint64_t v125 = v126;
  *(void *)&uint8_t buf[16] = v125 + 1;
  *(void *)&uint8_t buf[8] = v125 + 1;
  memset(&buf[24], 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&buf[24], v124, v123, v126);
  uint64_t v277 = v113;
  uint64_t v128 = (unint64_t **)v299;
  os_signpost_id_t v127 = (os_signpost_id_t)v300;
  if (v300 == v299)
  {
    size_t v268 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(v326, "Expect non-empty matrix, received matrix with first dimension as 0");
    std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
    InferenceError::InferenceError(v268, (uint64_t)v326, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 28);
  }
  size_t v129 = 0;
  unint64_t v130 = 0;
  unint64_t v131 = 0;
  unint64_t v278 = 0xAAAAAAAAAAAAAAABLL * ((v300 - v299) >> 3);
  uint64_t v132 = *((void *)v299 + 1) - *(void *)v299;
  uint64_t v133 = v132 >> 3;
  uint64_t v283 = v132 >> 1;
  os_signpost_id_t v284 = (os_signpost_id_t)v300;
  uint64_t v290 = v132;
  do
  {
    unsigned int v135 = *v128;
    unsigned int v134 = v128[1];
    if (v133 != v134 - *v128)
    {
      int v262 = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(v326, "Expect matrix with same size in every row, received different sizes");
      std::string::basic_string[abi:ne180100]<0>(&v337, "QueryRewrite");
      InferenceError::InferenceError(v262, (uint64_t)v326, (uint64_t)&v337, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 35);
    }
    if (v132 >= 1)
    {
      uint64_t v136 = (uint64_t)(v130 - (void)v129) >> 2;
      uint64_t v137 = (char *)v129 + ((v130 - (void)v129) & 0xFFFFFFFFFFFFFFFCLL);
      if (v133 <= (uint64_t)&v131[-v130] >> 2)
      {
        uint64_t v143 = (uint64_t)(v130 - (void)v137) >> 2;
        if (v143 >= v133)
        {
          unint64_t v144 = &v135[v133];
          uint64_t v146 = (float *)v130;
        }
        else
        {
          unint64_t v144 = &v135[v143];
          if (v144 == v134)
          {
            uint64_t v146 = (float *)v130;
          }
          else
          {
            size_t v145 = &v135[v143];
            uint64_t v146 = (float *)v130;
            do
            {
              unint64_t v147 = *v145++;
              *v146++ = (float)v147;
            }
            while (v145 != v134);
          }
          if ((uint64_t)(v130 - (void)v137) < 1)
          {
            unint64_t v130 = (unint64_t)v146;
            goto LABEL_229;
          }
        }
        int v155 = &v146[-v133];
        BOOL v156 = v146;
        while ((unint64_t)v155 < v130)
        {
          int v157 = *(_DWORD *)v155++;
          *(_DWORD *)v156++ = v157;
        }
        size_t v158 = (float *)&v137[4 * v133];
        if (v146 != v158)
        {
          memmove(&v146[-(v146 - v158)], (char *)v129 + ((v130 - (void)v129) & 0xFFFFFFFFFFFFFFFCLL), (char *)v146 - (char *)v158);
          uint64_t v132 = v290;
        }
        if (v144 != v135)
        {
          uint64_t v159 = (uint64_t)(v130 - (void)v129) >> 2;
          do
          {
            unint64_t v160 = *v135++;
            v129[v159++] = (float)v160;
          }
          while (v135 != v144);
        }
        unint64_t v130 = (unint64_t)v156;
      }
      else
      {
        unint64_t v138 = v136 + v133;
        if ((unint64_t)(v136 + v133) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((v131 - (char *)v129) >> 1 > v138) {
          unint64_t v138 = (v131 - (char *)v129) >> 1;
        }
        if ((unint64_t)(v131 - (char *)v129) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          BOOL v140 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v139);
          uint64_t v142 = v141;
        }
        else
        {
          BOOL v140 = 0;
          uint64_t v142 = 0;
        }
        char v148 = &v140[v136];
        size_t v149 = &v148[v133];
        uint64_t v150 = v283;
        uint64_t v151 = v148;
        do
        {
          unint64_t v152 = *v135++;
          *v151++ = (float)v152;
          v150 -= 4;
        }
        while (v150);
        if ((float *)v130 != v129)
        {
          uint64_t v153 = (uint64_t)(v130 - (void)v129) >> 2;
          do
          {
            v140[v153 - 1] = v129[v153 - 1];
            --v153;
          }
          while (v153 * 4);
          char v148 = v140;
        }
        size_t v154 = v130 - (void)v137;
        if (v154) {
          memmove(v149, v137, v154);
        }
        unint64_t v131 = (char *)&v140[v142];
        unint64_t v130 = (unint64_t)v149 + v154;
        if (v129) {
          operator delete(v129);
        }
        size_t v129 = v148;
        os_signpost_id_t v127 = v284;
        uint64_t v132 = v290;
      }
    }
LABEL_229:
    v128 += 3;
  }
  while (v128 != (unint64_t **)v127);
  *(_OWORD *)&buf[48] = 0uLL;
  char v344 = 0;
  unint64_t v161 = operator new(0x10uLL);
  std::string::size_type j = this;
  *unint64_t v161 = v278;
  v161[1] = v133;
  *(void *)&buf[48] = v161;
  *(void *)&buf[56] = v161 + 2;
  char v344 = v161 + 2;
  long long v345 = 0uLL;
  *(void *)&long long v346 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v345, v129, v130, (uint64_t)(v130 - (void)v129) >> 2);
  int v163 = log;
  if (v129) {
    operator delete(v129);
  }
  unint64_t v164 = v302;
  *((void *)&v346 + 1) = 0;
  long long v347 = 0uLL;
  BOOL v165 = operator new(8uLL);
  void *v165 = 1;
  *((void *)&v346 + 1) = v165;
  *(void *)&long long v347 = v165 + 1;
  *((void *)&v347 + 1) = v165 + 1;
  size_t v348 = 0;
  *(void *)&long long __p = 0;
  float32x2_t v349 = 0;
  BOOL v166 = (float *)operator new(4uLL);
  size_t v348 = v166;
  float *v166 = (float)v164;
  *(void *)&long long __p = v166 + 1;
  float32x2_t v349 = v166 + 1;
  marrs::TensorConvertor<float>::convert((void *)&__p + 1, *(float *)v303.i32);
  marrs::TensorConvertor<float>::convert(v352, *(float *)&v303.i32[1]);
  std::string::basic_string[abi:ne180100]<0>(v326, "token_indices");
  marrs::inference_engine::EspressoModule::setInput(v277, (uint64_t)v326, (uint64_t)buf);
  if (SHIBYTE(__sz[0]) < 0) {
    operator delete(v326[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v326, "padded_tokens_char_indices");
  marrs::inference_engine::EspressoModule::setInput(v277, (uint64_t)v326, (uint64_t)&buf[48]);
  if (SHIBYTE(__sz[0]) < 0) {
    operator delete(v326[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v326, "max_length");
  marrs::inference_engine::EspressoModule::setInput(v277, (uint64_t)v326, (uint64_t)&v346 + 8);
  if (SHIBYTE(__sz[0]) < 0) {
    operator delete(v326[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v326, "aer_threshold");
  marrs::inference_engine::EspressoModule::setInput(v277, (uint64_t)v326, (uint64_t)&__p + 8);
  if (SHIBYTE(__sz[0]) < 0) {
    operator delete(v326[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v326, "cbr_threshold");
  marrs::inference_engine::EspressoModule::setInput(v277, (uint64_t)v326, (uint64_t)v352);
  if (SHIBYTE(__sz[0]) < 0) {
    operator delete(v326[0]);
  }
  marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v277 + 8));
  std::string::basic_string[abi:ne180100]<0>(&v337, "copy_indices");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v326, v277);
  std::string::basic_string[abi:ne180100]<0>(&v336, "gate_prob");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v329, v277);
  std::string::basic_string[abi:ne180100]<0>(v324, "gate_prediction");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v332, v277);
  if (SHIBYTE(v325) < 0) {
    operator delete(v324[0]);
  }
  if (SHIBYTE(v336.__end_cap_.__value_) < 0) {
    operator delete(v336.__begin_);
  }
  if (SHIBYTE(v338) < 0) {
    operator delete((void *)v337);
  }
  if (v326[1] == v326[0]
    || (v167 = (float *)v328, v168 = (float *)__sz[1], unint64_t v169 = (uint64_t)(v328 - __sz[1]) >> 2, v169 != *(void *)v326[0]))
  {
    BOOL v263 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v337, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v336, "QueryRewrite");
    InferenceError::InferenceError(v263, (uint64_t)&v337, (uint64_t)&v336, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 52);
  }
  memset(&v291, 0, sizeof(v291));
  if ((void)v328 != __sz[1])
  {
    if ((unint64_t)v328 - __sz[1] >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int v170 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v169);
    v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
    v291.__r_.__value_.__r.__words[2] = (std::string::size_type)&v170[v171];
    do
    {
      float v172 = *v168++;
      *v170++ = (unint64_t)v172;
    }
    while (v168 != v167);
    v291.__r_.__value_.__l.__size_ = (std::string::size_type)v170;
  }
  if (v329[1] == v329[0]
    || (uint64_t v173 = v330[1],
        size_t v174 = *(void *)v331 - (unint64_t)v330[1],
        uint64_t v175 = (uint64_t)(*(void *)v331 - (unint64_t)v330[1]) >> 2,
        v175 != *(void *)v329[0]))
  {
    uint64_t v264 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v337, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v336, "QueryRewrite");
    InferenceError::InferenceError(v264, (uint64_t)&v337, (uint64_t)&v336, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 52);
  }
  uint64_t v292 = 0;
  uint64_t v293 = 0;
  uint64_t v294 = 0;
  if (*(void **)v331 != v330[1])
  {
    if ((v174 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    long long v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(*(void *)v331
                                                                                         - (unint64_t)v330[1]) >> 2);
    uint64_t v292 = v176;
    uint64_t v293 = v176;
    uint64_t v294 = &v176[4 * v177];
    memmove(v176, v173, v174);
    uint64_t v293 = &v176[4 * v175];
  }
  if (v333 == v332 || v335 - (unsigned char *)v334 != 4)
  {
    long long v265 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v337, "Expect non-empty tensor, received empty tensor");
    std::string::basic_string[abi:ne180100]<0>(&v336, "QueryRewrite");
    InferenceError::InferenceError(v265, (uint64_t)&v337, (uint64_t)&v336, "/Library/Caches/com.apple.xbs/Sources/Marrs/Common/tensorUtilities.cpp", 44);
  }
  unint64_t v295 = (unint64_t)*(float *)v334;
  uint64_t v335 = v334;
  operator delete(v334);
  if (v332)
  {
    long long v333 = v332;
    operator delete(v332);
  }
  if (v330[1])
  {
    *(void **)long long v331 = v330[1];
    operator delete(v330[1]);
  }
  if (v329[0])
  {
    v329[1] = v329[0];
    operator delete(v329[0]);
  }
  if (__sz[1])
  {
    *(void *)&long long v328 = __sz[1];
    operator delete((void *)__sz[1]);
  }
  if (v326[0])
  {
    v326[1] = v326[0];
    operator delete(v326[0]);
  }
  JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor((JointCCQRModuleInputTensor *)buf);
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(v277 + 8));
  std::string::size_type v178 = v291.__r_.__value_.__r.__words[0];
  if (v291.__r_.__value_.__l.__size_ != v291.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v179 = v291.__r_.__value_.__l.__size_ - (v291.__r_.__value_.__r.__words[0] + 8);
    if (v291.__r_.__value_.__l.__size_ != v291.__r_.__value_.__r.__words[0] + 8) {
      memmove(v291.__r_.__value_.__l.__data_, (const void *)(v291.__r_.__value_.__r.__words[0] + 8), v291.__r_.__value_.__l.__size_ - (v291.__r_.__value_.__r.__words[0] + 8));
    }
    v291.__r_.__value_.__l.__size_ = v178 + v179;
  }
  size_t v180 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
  {
    double v248 = *(float *)v292;
    double v249 = *((float *)v292 + 1);
    double v250 = *((float *)v292 + 2);
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = (uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 3;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&uint8_t buf[24] = v248;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v249;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v250;
    *(_WORD *)&buf[52] = 2048;
    *(void *)&buf[54] = v295;
    _os_log_debug_impl(&dword_1C9555000, v180, OS_LOG_TYPE_DEBUG, "%s Model inference output metadata: copyIndices size: %lu, gateProb: [%.2f, %.2f, %.2f], gatePrediction: %zu", buf, 0x3Eu);
  }
  if (v275 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, spida, "ForwardDuration", " enableTelemetry=YES ", buf, 2u);
  }
  os_signpost_id_t v285 = os_signpost_id_generate(log);
  if (v285 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_BEGIN, v285, "PostProcessDuration", "CCQR PostProcessing duration", buf, 2u);
  }
  memset(&v336, 0, sizeof(v336));
  std::string::size_type v181 = v291.__r_.__value_.__r.__words[0];
  if (v291.__r_.__value_.__l.__size_ != v291.__r_.__value_.__r.__words[0])
  {
    std::vector<std::string>::pointer end = 0;
    unint64_t v183 = 0;
    unint64_t v184 = (uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 3;
    while (2)
    {
      unint64_t v185 = v183 + 1;
      unint64_t v186 = *(void *)(v181 + 8 * v183);
      unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((v308 - v307) >> 3);
      if (v186 < v187)
      {
        if (v185 < v184)
        {
          unint64_t v188 = v183;
          while (1)
          {
            unint64_t v189 = *(void *)(v181 + 8 * v188 + 8);
            if (v189 >= v187 || *(void *)(v181 + 8 * v188) != v189 - 1) {
              break;
            }
            if (**(void **)(v307 + 24 * v189) != **(void **)(v307 + 24 * v186))
            {
              unint64_t v185 = v188 + 1;
              break;
            }
            ++v185;
            if (v184 - 1 == ++v188)
            {
              unint64_t v185 = v184;
              break;
            }
          }
        }
        uint64_t v190 = **(void **)(v307 + 24 * v186);
        uint64_t v191 = v313;
        uint64_t v192 = v313 + 160 * v190;
        unsigned int v193 = (void *)(v192 + 48);
        if (v185 - v183 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v192 + 56) - *(void *)(v192 + 48)) >> 3))
        {
          if (v185 > v183)
          {
            do
            {
              uint64_t v195 = *v193
                   + 24
                   * *(void *)(*(void *)(v307 + 24 * *(void *)(v291.__r_.__value_.__r.__words[0] + 8 * v183))
                               + 8);
              if (end >= v336.__end_cap_.__value_)
              {
                BOOL v197 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v336, (long long *)v195);
              }
              else
              {
                if (*(char *)(v195 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v195, *(void *)(v195 + 8));
                }
                else
                {
                  long long v196 = *(_OWORD *)v195;
                  end->__r_.__value_.__r.__words[2] = *(void *)(v195 + 16);
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v196;
                }
                BOOL v197 = end + 1;
              }
              v336.__end_ = v197;
              if (v197 >= v336.__end_cap_.__value_)
              {
                unint64_t v198 = 0xAAAAAAAAAAAAAAABLL * (((char *)v197 - (char *)v336.__begin_) >> 3);
                unint64_t v199 = v198 + 1;
                if (v198 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v336.__end_cap_.__value_ - (char *)v336.__begin_) >> 3) > v199) {
                  unint64_t v199 = 0x5555555555555556 * (((char *)v336.__end_cap_.__value_ - (char *)v336.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v336.__end_cap_.__value_ - (char *)v336.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v200 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v200 = v199;
                }
                *(void *)&buf[32] = &v336.__end_cap_;
                if (v200) {
                  unint64_t v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v200);
                }
                else {
                  uint64_t v201 = 0;
                }
                *(void *)std::string buf = v200;
                *(void *)&uint8_t buf[8] = v200 + 24 * v198;
                *(void *)&uint8_t buf[16] = *(void *)&buf[8];
                *(void *)&uint8_t buf[24] = v200 + 24 * v201;
                std::string::basic_string[abi:ne180100]<0>(*(void **)&buf[8], " ");
                *(void *)&buf[16] += 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v336, (std::__split_buffer<std::string> *)buf);
                std::vector<std::string>::pointer end = v336.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)buf);
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v197, " ");
                std::vector<std::string>::pointer end = v197 + 1;
              }
              v336.__end_ = end;
              ++v183;
            }
            while (v185 != v183);
          }
          goto LABEL_337;
        }
        if ((char *)std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>((const void **)(v313 + 160 * v190))
           - (char *)&marrs::qr::processing::Vocab::reservedTokens == 112)
        {
          if (end >= v336.__end_cap_.__value_)
          {
            std::vector<std::string>::pointer end = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v336, (long long *)v192);
          }
          else
          {
            if (*(char *)(v192 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v192, *(void *)(v192 + 8));
            }
            else
            {
              long long v194 = *(_OWORD *)v192;
              end->__r_.__value_.__r.__words[2] = *(void *)(v192 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v194;
            }
            ++end;
          }
          v336.__end_ = end;
          uint64_t v202 = v191 + 160 * v190;
          uint64_t v203 = v202 + 136;
          int v204 = *(char *)(v202 + 159);
          uint64_t v205 = *(unsigned __int8 *)(v202 + 159);
          if (v204 < 0)
          {
            if (!*(void *)(v203 + 8)) {
              goto LABEL_337;
            }
          }
          else if (!v205)
          {
            goto LABEL_337;
          }
          if (end >= v336.__end_cap_.__value_)
          {
            std::vector<std::string>::pointer end = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v336, (long long *)v203);
          }
          else
          {
            if ((v205 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v203, *(void *)(v203 + 8));
            }
            else
            {
              long long v206 = *(_OWORD *)v203;
              end->__r_.__value_.__r.__words[2] = *(void *)(v203 + 16);
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v206;
            }
            ++end;
          }
          v336.__end_ = end;
        }
      }
LABEL_337:
      std::string::size_type v181 = v291.__r_.__value_.__r.__words[0];
      unint64_t v184 = (uint64_t)(v291.__r_.__value_.__l.__size_ - v291.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v183 = v185;
      if (v185 >= v184)
      {
        int v163 = log;
        for (std::string::size_type j = this; v336.__begin_ != end; v336.__end_ = end)
        {
          if (std::string::compare(end - 1, " ")) {
            break;
          }
          std::vector<std::string>::pointer end = v336.__end_ - 1;
          if (SHIBYTE(v336.__end_[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(end->__r_.__value_.__l.__data_);
          }
        }
        break;
      }
      continue;
    }
  }
  uint64_t v207 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "predict";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * (((char *)v336.__end_ - (char *)v336.__begin_) >> 3);
    _os_log_debug_impl(&dword_1C9555000, v207, OS_LOG_TYPE_DEBUG, "%s Postprocessing output metadata: outputTokens size: %lu", buf, 0x16u);
  }
  uint64_t v208 = v295;
  std::vector<std::string>::pointer begin = v336.__begin_;
  unint64_t v210 = v336.__end_;
  if (v295 == 2)
  {
    if (v336.__end_ == v336.__begin_)
    {
      uint64_t v208 = 2;
      unint64_t v210 = v336.__begin_;
    }
    else
    {
      uint64_t v211 = v281->var1.var0;
      if (*(double *)(*((void *)v211 + 14 * v271 - 14) + 88) >= *((float *)j + 59)
        && *(double *)(*((void *)&v211[-1] + 14 * v271 - 13) + 88) <= *((float *)j + 60))
      {
        uint64_t v208 = 2;
      }
      else
      {
        uint64_t v212 = QRLoggerForCategory(2);
        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "predict";
          _os_log_debug_impl(&dword_1C9555000, v212, OS_LOG_TYPE_DEBUG, "%s Remove CbR rewrite due to ASR confidence gating. Rewrite type is still kept.", buf, 0xCu);
        }
        unint64_t v210 = v336.__begin_;
        std::vector<std::string>::pointer v213 = v336.__end_;
        std::vector<std::string>::pointer begin = v336.__begin_;
        if (v336.__end_ != v336.__begin_)
        {
          do
          {
            if (SHIBYTE(v213[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v213[-1].__r_.__value_.__l.__data_);
            }
            --v213;
          }
          while (v213 != v210);
          std::vector<std::string>::pointer begin = v336.__begin_;
        }
        v336.__end_ = v210;
        uint64_t v208 = v295;
      }
    }
  }
  if (v208 != 2 && begin == v210) {
    int v215 = 5;
  }
  else {
    int v215 = 0;
  }
  *(_DWORD *)(v276 + 56) = v215;
  double v216 = *((float *)v292 + v208);
  *(Uuid *)unint64_t v326 = v281->var1.var1[-1].var0.var1->var0;
  *(void *)&long long v328 = 0;
  __sz[1] = 0;
  __sz[0] = 0;
  *((double *)&v328 + 1) = v216;
  LODWORD(v329[0]) = v208;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  std::vector<std::string>::pointer v217 = v336.__begin_;
  if (v336.__end_ != v336.__begin_)
  {
    uint64_t v218 = 0;
    unint64_t v219 = 0;
    int v220 = &buf[16];
    do
    {
      BOOL v221 = &v217[v218];
      int v222 = SHIBYTE(v221->__r_.__value_.__r.__words[2]);
      if (v222 >= 0) {
        uint64_t v223 = (uint64_t)v221;
      }
      else {
        uint64_t v223 = v221->__r_.__value_.__r.__words[0];
      }
      if (v222 >= 0) {
        uint64_t v224 = HIBYTE(v221->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v224 = v221->__r_.__value_.__l.__size_;
      }
      int v220 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, v223, v224);
      ++v219;
      std::vector<std::string>::pointer v217 = v336.__begin_;
      ++v218;
    }
    while (v219 < 0xAAAAAAAAAAAAAAABLL * (((char *)v336.__end_ - (char *)v336.__begin_) >> 3));
  }
  std::stringbuf::str();
  if (SBYTE7(v328) < 0) {
    operator delete((void *)__sz[0]);
  }
  *(_OWORD *)__sz = v337;
  *(void *)&long long v328 = v338;
  *(void *)std::string buf = *MEMORY[0x1E4FBA408];
  uint64_t v225 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&uint8_t buf[16] = v225;
  *(void *)&uint8_t buf[24] = MEMORY[0x1E4FBA470] + 16;
  if (SBYTE7(v347) < 0) {
    operator delete((void *)v346);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](&v349);
  unint64_t v226 = *(void *)(v276 + 16);
  unint64_t v227 = *(void *)(v276 + 8);
  if (v227 >= v226)
  {
    uint64_t v230 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v227 - *(void *)v276) >> 3);
    if ((unint64_t)(v230 + 1) > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v231 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v226 - *(void *)v276) >> 3);
    uint64_t v232 = 2 * v231;
    if (2 * v231 <= v230 + 1) {
      uint64_t v232 = v230 + 1;
    }
    if (v231 >= 0x249249249249249) {
      unint64_t v233 = 0x492492492492492;
    }
    else {
      unint64_t v233 = v232;
    }
    *(void *)&buf[32] = v276 + 16;
    if (v233)
    {
      size_t v235 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(v233);
    }
    else
    {
      size_t v235 = 0;
      uint64_t v234 = 0;
    }
    uint64_t v239 = &v235[56 * v230];
    *(void *)std::string buf = v235;
    *(void *)&uint8_t buf[8] = v239;
    *(void *)&uint8_t buf[16] = v239;
    *(void *)&uint8_t buf[24] = &v235[56 * v234];
    *(_OWORD *)uint64_t v239 = *(_OWORD *)v326;
    long long v240 = (std::string *)(v239 + 16);
    if (SBYTE7(v328) < 0)
    {
      std::string::__init_copy_ctor_external(v240, (const std::string::value_type *)__sz[0], __sz[1]);
      uint64_t v239 = *(char **)&buf[16];
    }
    else
    {
      long long v241 = *(_OWORD *)__sz;
      *((void *)v239 + 4) = v328;
      *(_OWORD *)&v240->__r_.__value_.__l.__data_ = v241;
    }
    int v242 = &v235[56 * v230];
    uint64_t v243 = *((void *)&v328 + 1);
    *((_DWORD *)v242 + 12) = v329[0];
    *((void *)v242 + 5) = v243;
    *(void *)&uint8_t buf[16] = v239 + 56;
    uint64_t v238 = v276;
    std::vector<marrs::qr::orchestration::QRHypothesis>::__swap_out_circular_buffer((uint64_t *)v276, buf);
    unint64_t v237 = *(void *)(v276 + 8);
    std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *(_OWORD *)unint64_t v227 = *(_OWORD *)v326;
    uint64_t v228 = (std::string *)(v227 + 16);
    if (SBYTE7(v328) < 0)
    {
      std::string::__init_copy_ctor_external(v228, (const std::string::value_type *)__sz[0], __sz[1]);
    }
    else
    {
      long long v229 = *(_OWORD *)__sz;
      *(void *)(v227 + 32) = v328;
      *(_OWORD *)&v228->__r_.__value_.__l.__data_ = v229;
    }
    uint64_t v236 = *((void *)&v328 + 1);
    *(_DWORD *)(v227 + 48) = v329[0];
    *(void *)(v227 + 40) = v236;
    unint64_t v237 = v227 + 56;
    uint64_t v238 = v276;
    *(void *)(v276 + 8) = v237;
  }
  *(void *)(v238 + 8) = v237;
  uint64_t v244 = QRLoggerForCategory(2);
  if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v251 = *(unsigned int *)(v276 + 56);
    if (v251 > 5) {
      size_t v252 = "UNKNOWN_TYPE";
    }
    else {
      size_t v252 = off_1E6599BE8[v251];
    }
    std::string::basic_string[abi:ne180100]<0>(&v337, v252);
    if (LODWORD(v329[0]) > 2) {
      size_t v253 = "UNKNOWN_TYPE";
    }
    else {
      size_t v253 = off_1E6599BD0[LODWORD(v329[0])];
    }
    int v254 = SHIBYTE(v338);
    size_t v255 = (long long *)v337;
    int v256 = SBYTE7(v328);
    std::string::size_type v257 = __sz[0];
    uint64_t v258 = *((void *)&v328 + 1);
    std::string::basic_string[abi:ne180100]<0>(v324, v253);
    if (v256 >= 0) {
      uint64_t v259 = __sz;
    }
    else {
      uint64_t v259 = (std::string::size_type *)v257;
    }
    long long v260 = &v337;
    if (v254 < 0) {
      long long v260 = v255;
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "predict";
    if (v325 >= 0) {
      size_t v261 = v324;
    }
    else {
      size_t v261 = (void **)v324[0];
    }
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v260;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v259;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v258;
    *(_WORD *)&buf[42] = 2080;
    *(void *)&buf[44] = v261;
    _os_log_debug_impl(&dword_1C9555000, v244, OS_LOG_TYPE_DEBUG, "%s Constructing QRResponse. ccqrInferenceStatus: %s, utterance: %s, confidence: %.2f, rewriteType: %s", buf, 0x34u);
    if (SHIBYTE(v325) < 0) {
      operator delete(v324[0]);
    }
    if (SHIBYTE(v338) < 0) {
      operator delete((void *)v337);
    }
  }
  if (v285 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v163))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v163, OS_SIGNPOST_INTERVAL_END, v285, "PostProcessDuration", " enableTelemetry=YES ", buf, 2u);
  }
  if (SBYTE7(v328) < 0) {
    operator delete((void *)__sz[0]);
  }
  *(void *)std::string buf = &v336;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v292)
  {
    uint64_t v293 = (char *)v292;
    operator delete(v292);
  }
  if (v291.__r_.__value_.__r.__words[0])
  {
    v291.__r_.__value_.__l.__size_ = v291.__r_.__value_.__r.__words[0];
    operator delete(v291.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = &v299;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v296)
  {
    uint64_t v297 = (unint64_t *)v296;
    operator delete(v296);
  }
  *(void *)std::string buf = &v304;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v307;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v310) {
    operator delete(v310);
  }
  *(void *)std::string buf = &v313;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C95AB7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, marrs::inference_engine::InferenceTensor *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<marrs::qr::orchestration::QRHypothesis>::~__split_buffer((uint64_t)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  a71 = &STACK[0x280];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a27);
  JointCCQRModuleInput::~JointCCQRModuleInput((JointCCQRModuleInput *)&a34);
  a71 = &a44;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = &a47;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  if (a50) {
    operator delete(a50);
  }
  a71 = &a53;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = a16;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<marrs::qr::orchestration::QRToken>,std::vector<unsigned long>,std::vector<std::vector<unsigned long>>,std::vector<std::vector<unsigned long>>>::~tuple(uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 72);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = (void **)(a1 + 48);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  os_log_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)a1;
  std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void *std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](result, a4);
    os_log_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*,std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C95AC0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void JointCCQRModuleInput::~JointCCQRModuleInput(JointCCQRModuleInput *this)
{
  unint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  os_log_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  int8x8_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C95AC400(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1CB786D60](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1CB786BB0](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      uint64_t v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1CB786BC0](v23);
  return a1;
}

void sub_1C95AC6C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB786BC0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C95AC698);
}

void sub_1C95AC730(_Unwind_Exception *a1)
{
}

void RepetitionDetectionUtil::getIndices(char **a1, void *a2, _DWORD *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    int8x8_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = 0;
    int v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      int v13 = *a3;
      if (!*a3)
      {
        BOOL v14 = v5;
        uint64_t v15 = a3;
        int v16 = v12 + 1;
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v18 = (v10 - v8) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v9 - (void)v8;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v21);
          }
          else {
            uint64_t v22 = 0;
          }
          size_t v23 = (char *)(v21 + 4 * v18);
          *(_DWORD *)size_t v23 = v16;
          uint64_t v17 = v23 + 4;
          a3 = v15;
          while (v10 != v8)
          {
            int v24 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          unint64_t v7 = v21 + 4 * v22;
          *a1 = v23;
          a1[1] = v17;
          a1[2] = (char *)v7;
          int8x8_t v5 = v14;
          if (v8) {
            operator delete(v8);
          }
          int v8 = v23;
          unint64_t v9 = v7;
        }
        else
        {
          *(_DWORD *)uint64_t v10 = v16;
          uint64_t v17 = v10 + 4;
          a3 = v15;
          int8x8_t v5 = v14;
        }
        uint64_t v6 = a1;
        a1[1] = v17;
        uint64_t v3 = *v5;
        uint64_t v10 = v17;
        int v13 = *a3;
      }
      v12 += (*(void *)(v3 + 24 * v11 + 8) - *(void *)(v3 + 24 * v11)) >> 2;
      if (v13 == 1)
      {
        if ((unint64_t)v10 >= v7)
        {
          uint64_t v26 = (v10 - v8) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v7 - (void)v8) >> 1 > v27) {
            unint64_t v27 = (uint64_t)(v7 - (void)v8) >> 1;
          }
          if (v7 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v30 = (char *)(v28 + 4 * v26);
          *(_DWORD *)unint64_t v30 = v12;
          size_t v25 = v30 + 4;
          while (v10 != v8)
          {
            int v31 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          unint64_t v7 = v28 + 4 * v29;
          *uint64_t v6 = v30;
          v6[1] = v25;
          v6[2] = (char *)v7;
          if (v8) {
            operator delete(v8);
          }
          int v8 = v30;
        }
        else
        {
          *(_DWORD *)uint64_t v10 = v12;
          size_t v25 = v10 + 4;
        }
        v6[1] = v25;
        uint64_t v3 = *v5;
        unint64_t v9 = v7;
        uint64_t v10 = v25;
      }
      ++v11;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v5[1] - v3) >> 3));
  }
  unint64_t v32 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v35 = "getIndices";
    _os_log_debug_impl(&dword_1C9555000, v32, OS_LOG_TYPE_DEBUG, "%s Indices fetching complete", buf, 0xCu);
  }
}

void sub_1C95ACA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v7 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        uint64_t v6 = v7;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void RepetitionDetectionUtil::constructUtterance(std::string *this, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v3 + v5;
      int v8 = *(char *)(v7 + 23);
      if (v8 >= 0) {
        unint64_t v9 = (const std::string::value_type *)v7;
      }
      else {
        unint64_t v9 = *(const std::string::value_type **)v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        std::string::size_type v10 = *(void *)(v7 + 8);
      }
      std::string::append(this, v9, v10);
      uint64_t v3 = *a2;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      if (v6 < v11 - 1)
      {
        std::string::append(this, " ");
        uint64_t v3 = *a2;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      }
      ++v6;
      v5 += 24;
    }
    while (v6 < v11);
  }
  int v12 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 136315138;
    BOOL v14 = "constructUtterance";
    _os_log_debug_impl(&dword_1C9555000, v12, OS_LOG_TYPE_DEBUG, "%s Utterance construction completed", (uint8_t *)&v13, 0xCu);
  }
}

void sub_1C95ACC3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C95AD688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1C95AD7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95ADA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95ADB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95ADDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C95AE04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1C95AEE4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18, uint64_t a19, uint64_t a20,__int16 buf)
{
  uint64_t v24 = a20;
  a20 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  MEMORY[0x1CB786520](&buf);
  uint64_t v25 = *(void *)(v22 - 88);
  *(void *)(v22 - 88) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  __cxa_begin_catch(a1);
  uint64_t v26 = MRRLoggerForCategory(1);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    std::string buf = 0;
    _os_log_impl(&dword_1C9555000, v26, OS_LOG_TYPE_ERROR, "Exception encountered when running detectMentionsInUtteranceImpl", (uint8_t *)&buf, 2u);
  }

  std::current_exception();
  +[PredictorUtils handlePredictException:&a18];
  std::exception_ptr::~exception_ptr(&a18);
  __cxa_end_catch();
  JUMPOUT(0x1C95AECD0);
}

void sub_1C95AF068(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
}

void sub_1C95B0694(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, marrs::inference_engine::EspressoModule **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t buf,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*(void **)(a16 + 144));
    if (*(char *)(a16 + 127) < 0) {
      operator delete(*a11);
    }
    if (*(char *)(a16 + 87) < 0) {
      operator delete(*(void **)(a16 + 64));
    }
    if (*(char *)(a16 + 63) < 0) {
      operator delete(*a12);
    }
    std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100](a15);
    *(void *)a16 = a9;
    if (*(char *)(a16 + 31) < 0) {
      operator delete(*a10);
    }
    if (a41 < 0) {
      operator delete(__p);
    }
    MEMORY[0x1CB786E50](a16, 0x10B3C409358F699);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::exception_ptr(&a32, &a64);
    +[PredictorUtils handleInitException:&a32];
    std::exception_ptr::~exception_ptr(&a32);
    std::exception_ptr::~exception_ptr(&a64);
    __cxa_end_catch();
    JUMPOUT(0x1C95B040CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C95B0F78(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C95B0FA4);
  }
  JUMPOUT(0x1C95B0F50);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1C95B0FEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C95B14DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Block_object_dispose((const void *)(v15 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C95B1630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95B1948(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v6 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C95B1A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95B1E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C95B1F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95B2244(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v5 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C95B2368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95B26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1C95B2A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C95B2DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  _Block_object_dispose(&a18, 8);

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1C95B30E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C95B438C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95B5574(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, marrs::mrr::mr::MRFilterInterface *a10, marrs::mrr::mr::MRFilterInterface *a11, uint64_t a12, marrs::mrr::mr::OrdinalFilter *a13, uint64_t a14, marrs::mrr::mr::ModelBasedMR *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id obj,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::exception_ptr a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,long long buf,uint64_t a59,uint64_t a60,void **a61,uint64_t a62,int a63)
{
  if (a2)
  {
    if (a47 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    unint64_t v67 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
    {
      std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&a61, (uint64_t)&a39, (std::__fs::filesystem::path *)&marrs::mrr::mr::keywordFilename);
      if (a66 >= 0) {
        uint64_t v68 = (void **)&a61;
      }
      else {
        uint64_t v68 = a61;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v68;
      _os_log_impl(&dword_1C9555000, v67, OS_LOG_TYPE_DEBUG, "[UtteranceKeywordFilter] Error parsing keyword asset at %s, This filter will be skipped.", (uint8_t *)&buf, 0xCu);
      if (a66 < 0) {
        operator delete(a61);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1C95B512CLL);
  }
  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::reserve(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __requested_capacity)
{
  if (__requested_capacity >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 0xA) {
      return;
    }
    std::basic_string<char16_t>::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 <= __requested_capacity) {
      std::basic_string<char16_t>::size_type v5 = __requested_capacity;
    }
    else {
      std::basic_string<char16_t>::size_type v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if ((v5 | 3) != 0xB)
    {
      uint64_t v11 = (v5 | 3) + 1;
      goto LABEL_24;
    }
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
LABEL_20:
    uint64_t v11 = v6 + 1;
    if (v6 < 0xB)
    {
      int v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      int v13 = 1;
      uint64_t v14 = this;
      if ((v3 & 0x80) != 0) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
LABEL_24:
    uint64_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v11);
    uint64_t v11 = v15;
    LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v3 & 0x80000000) != 0)
    {
      LOBYTE(v13) = 0;
      int v12 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
LABEL_28:
      std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
      int v17 = 1;
LABEL_29:
      BOOL v18 = __CFADD__(size, 1);
      std::basic_string<char16_t>::size_type v19 = size + 1;
      if (v18)
      {
        if (v17) {
          goto LABEL_35;
        }
      }
      else
      {
        memmove(v14, v12, 2 * v19);
        if (v17)
        {
LABEL_35:
          operator delete(v12);
          if ((v13 & 1) == 0) {
            goto LABEL_36;
          }
          goto LABEL_33;
        }
      }
      if ((v13 & 1) == 0)
      {
LABEL_36:
        this->__r_.__value_.__l.__size_ = v4;
        this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
        this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v14;
        return;
      }
LABEL_33:
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
      return;
    }
    int v13 = 0;
    int v12 = this;
LABEL_26:
    std::basic_string<char16_t>::size_type size = v3;
    int v17 = v13;
    goto LABEL_29;
  }
  unint64_t v7 = this->__r_.__value_.__r.__words[2];
  std::basic_string<char16_t>::size_type v8 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v8 < __requested_capacity)
  {
    std::basic_string<char16_t>::size_type v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity) {
      std::basic_string<char16_t>::size_type v9 = __requested_capacity;
    }
    else {
      std::basic_string<char16_t>::size_type v9 = this->__r_.__value_.__l.__size_;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB) {
      uint64_t v10 = v9 | 3;
    }
    unint64_t v6 = v9 >= 0xB ? v10 : 10;
    if (v6 != v8)
    {
      unint64_t v3 = HIBYTE(v7);
      goto LABEL_20;
    }
  }
}

void sub_1C95B5C98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  int v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    std::basic_string<char16_t>::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v9 = HIBYTE(v10);
  }
  else
  {
    std::basic_string<char16_t>::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    unint64_t v8 = 10;
    LOBYTE(v9) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if (v8 - size < __n)
  {
    if (0x7FFFFFFFFFFFFFF6 - v8 < __n - v8 + size) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = this;
    if ((v9 & 0x80) != 0) {
      uint64_t v11 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    }
    if (v8 > 0x3FFFFFFFFFFFFFF2)
    {
      uint64_t v14 = 0x7FFFFFFFFFFFFFF7;
    }
    else
    {
      unint64_t v12 = size + __n;
      if (size + __n <= 2 * v8) {
        unint64_t v12 = 2 * v8;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v12 | 3) != 0xB) {
        uint64_t v13 = v12 | 3;
      }
      if (v12 >= 0xB) {
        uint64_t v14 = v13 + 1;
      }
      else {
        uint64_t v14 = 11;
      }
    }
    int v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
    std::basic_string<char16_t>::size_type v18 = (std::basic_string<char16_t>::size_type)v17;
    uint64_t v20 = v19;
    if (size) {
      memmove(v17, v11, 2 * size);
    }
    memmove((void *)(v18 + 2 * size), __s, 2 * __n);
    if (v8 != 10) {
      operator delete(v11);
    }
    this->__r_.__value_.__r.__words[0] = v18;
    this->__r_.__value_.__l.__size_ = size + __n;
    this->__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    unint64_t v21 = (std::basic_string<char16_t> *)(v18 + 2 * (size + __n));
LABEL_29:
    v21->__r_.__value_.__s.__data_[0] = 0;
    return this;
  }
  if (__n)
  {
    uint64_t v15 = this;
    if (v6 < 0) {
      uint64_t v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    }
    memmove((char *)v15 + 2 * size, __s, 2 * __n);
    std::basic_string<char16_t>::size_type v16 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
    unint64_t v21 = (std::basic_string<char16_t> *)((char *)v15 + 2 * v16);
    goto LABEL_29;
  }
  return this;
}

void ICUStringOperations::toU16String(std::basic_string<char16_t> *a1, uint64_t *a2)
{
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    std::basic_string<char16_t>::size_type v4 = a2;
  }
  else {
    std::basic_string<char16_t>::size_type v4 = (uint64_t *)*a2;
  }
  if (v3 >= 0) {
    std::basic_string<char16_t>::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::basic_string<char16_t>::size_type v5 = a2[1];
  }
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  std::basic_string<char16_t>::reserve(a1, v5);
  LODWORD(v6) = 0;
  __int16 v20 = 0;
  *(_DWORD *)std::string __s = 0;
  while ((int)v6 < (int)v5)
  {
    int v7 = v6;
    uint64_t v8 = (int)v6 + 1;
    int v9 = *((char *)v4 + (int)v6);
    unsigned int v10 = *((unsigned __int8 *)v4 + (int)v6);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    if (v8 == v5) {
      goto LABEL_12;
    }
    if (v10 < 0xE0)
    {
      if (v10 < 0xC2) {
        goto LABEL_29;
      }
      unsigned int v15 = v10 & 0x1F;
    }
    else
    {
      if (v10 > 0xEF)
      {
        if (v10 > 0xF4
          || (unsigned int v18 = v10 - 240,
              unint64_t v13 = *((unsigned __int8 *)v4 + v8),
              ((byte_1C95E1667[v13 >> 4] >> v18) & 1) == 0))
        {
LABEL_29:
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v8;
          goto LABEL_30;
        }
        uint64_t v6 = (int)v6 + 2;
        if (v7 + 2 == v5)
        {
LABEL_12:
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          LODWORD(v6) = v5;
          goto LABEL_30;
        }
        unsigned int v14 = *((unsigned __int8 *)v4 + v6) ^ 0x80;
        if (v14 > 0x3F)
        {
          unsigned int v12 = -1;
          LOWORD(v10) = -1;
          goto LABEL_30;
        }
        LODWORD(v13) = v13 & 0x3F | (v18 << 6);
        LODWORD(v8) = v6;
      }
      else
      {
        unint64_t v13 = v9 & 0xF;
        if (((a00000000000000[v13] >> (*((unsigned char *)v4 + v8) >> 5)) & 1) == 0) {
          goto LABEL_29;
        }
        unsigned int v14 = *((unsigned char *)v4 + v8) & 0x3F;
      }
      LODWORD(v8) = v8 + 1;
      if (v8 == v5) {
        goto LABEL_12;
      }
      unsigned int v15 = v14 | (v13 << 6);
    }
    unsigned int v16 = *((unsigned __int8 *)v4 + (int)v8) ^ 0x80;
    if (v16 >= 0x40) {
      goto LABEL_29;
    }
    unsigned int v10 = v16 | (v15 << 6);
    LODWORD(v8) = v8 + 1;
    int v17 = (unsigned __int16)(v15 >> 10);
    LODWORD(v6) = v8;
    unsigned int v12 = v10;
    if (!v17)
    {
LABEL_10:
      __s[0] = v10;
      LODWORD(v6) = v8;
      std::basic_string<char16_t>::size_type v11 = 1;
      goto LABEL_31;
    }
LABEL_30:
    __s[0] = (v12 >> 10) - 10304;
    __s[1] = v10 & 0x3FF | 0xDC00;
    std::basic_string<char16_t>::size_type v11 = 2;
LABEL_31:
    std::basic_string<char16_t>::append(a1, __s, v11);
  }
}

void sub_1C95B6020(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ICUStringOperations::toString(std::string *this, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)a2;
  int v3 = this;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    LODWORD(v5) = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::basic_string<char16_t>::size_type v5 = a2[1];
  }
  if ((int)v5 >= 23)
  {
    std::string::reserve(this, (int)v5);
    int v6 = *((char *)v2 + 23);
    char v16 = 0;
    *(_DWORD *)std::string __s = 0;
    if (v6 < 0) {
      uint64_t v2 = (uint64_t *)*v2;
    }
LABEL_11:
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = v7 + 1;
      unsigned int v9 = *((unsigned __int16 *)v2 + v7);
      if ((v9 & 0xFC00) == 0xD800 && v8 != v5) {
        break;
      }
      if (v9 > 0x7F)
      {
        if (v9 <= 0x7FF)
        {
          __s[0] = (v9 >> 6) | 0xC0;
          uint64_t v14 = 1;
LABEL_25:
          std::string::size_type v11 = v14 + 1;
          __s[v14] = v9 & 0x3F | 0x80;
          int v7 = v8;
          goto LABEL_26;
        }
LABEL_23:
        __s[0] = (v9 >> 12) | 0xE0;
        uint64_t v13 = 1;
LABEL_24:
        uint64_t v14 = v13 + 1;
        *(unsigned char *)((unint64_t)__s | v13) = (v9 >> 6) & 0x3F | 0x80;
        goto LABEL_25;
      }
      __s[0] = *((_WORD *)v2 + v7++);
      std::string::size_type v11 = 1;
LABEL_26:
      this = std::string::append(v3, __s, v11);
      if (v7 >= (int)v5) {
        return this;
      }
    }
    int v12 = *((unsigned __int16 *)v2 + v8);
    if ((v12 & 0xFC00) != 0xDC00) {
      goto LABEL_23;
    }
    LODWORD(v8) = v7 + 2;
    unsigned int v9 = v12 + (v9 << 10) - 56613888;
    __s[0] = (v9 >> 18) | 0xF0;
    __s[1] = (v9 >> 12) & 0x3F | 0x80;
    uint64_t v13 = 2;
    goto LABEL_24;
  }
  char v16 = 0;
  *(_DWORD *)std::string __s = 0;
  if (v4 < 0) {
    uint64_t v2 = *a2;
  }
  if ((int)v5 >= 1) {
    goto LABEL_11;
  }
  return this;
}

void sub_1C95B61DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void marrs::mrr::md::getMatchingSpanForBoundary()
{
}

void sub_1C95B6660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v52 - 105) < 0) {
    operator delete(*(void **)(v52 - 128));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v51 & 1) == 0)
    {
LABEL_14:
      if (a24 < 0) {
        operator delete(a19);
      }
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v50);
  goto LABEL_14;
}

void marrs::inference_engine::EspressoModule::~EspressoModule(marrs::inference_engine::EspressoModule *this)
{
}

uint64_t marrs::inference_engine::EspressoModule::EspressoModule(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 16) {
    int v4 = 65552;
  }
  else {
    int v4 = 65568;
  }
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t context = espresso_create_context();
  *(void *)a1 = context;
  if (!context)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CB7869E0](exception, "Could not deserialise espresso context.");
    goto LABEL_10;
  }
  plauint64_t n = espresso_create_plan();
  *(void *)(a1 + 8) = plan;
  if (!plan)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CB7869E0](exception, "Could not create espresso plan.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v7 = espresso_plan_add_network();
  if (v7)
  {
    int v10 = v7;
    std::string::size_type v11 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v12 = std::string::append(&v19, " with error code");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v18, v10);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v18;
    }
    else {
      uint64_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    char v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v16->__r_.__value_.__r.__words[2];
    long long v21 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB7869F0](v11, &v21);
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1C95B6980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v26 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v27);
  goto LABEL_12;
}

uint64_t marrs::inference_engine::EspressoModule::buildPlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result = espresso_plan_build();
  if (result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CB7869E0](exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C95B6A84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t marrs::inference_engine::EspressoModule::executePlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    int v2 = result;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v6, v2);
    int v4 = std::string::insert(&v6, 0, "Failed to execute espresso plan with error code");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
    long long v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB7869F0](exception, &v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C95B6B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t marrs::inference_engine::EspressoModule::cleanPlan(marrs::inference_engine::EspressoModule *this)
{
  uint64_t result = espresso_plan_build_clean();
  if (result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CB7869E0](exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C95B6C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t marrs::inference_engine::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *(void *)(a3 + 24);
  espresso_buffer_pack_tensor_shape();
  int v19 = *(_DWORD *)(a1 + 32);
  uint64_t result = espresso_network_bind_buffer();
  if (result)
  {
    int v5 = result;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, v5);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v9 = &v13;
    }
    else {
      unsigned int v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::size_type v11 = std::string::append(&v15, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB7869F0](exception, &v16);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1C95B6D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v33 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v33)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v34);
  goto LABEL_12;
}

void marrs::inference_engine::EspressoModule::getOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v22 = *(_DWORD *)(a2 + 32);
  int v3 = espresso_network_bind_buffer();
  if (v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v18, v3);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v14 = &v18;
    }
    else {
      std::string v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::append(&v20, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v16->__r_.__value_.__r.__words[2];
    long long v23 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB7869F0](exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v19.__r_.__value_.__r.__words[0] = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  memset(&v20, 0, sizeof(v20));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, &v23, (uint64_t)&v23 + 8 * v19.__r_.__value_.__r.__words[0], v19.__r_.__value_.__r.__words[0]);
  int v4 = v21;
  int v5 = (uint64_t *)v20.__r_.__value_.__r.__words[0];
  *(void *)a1 = v20.__r_.__value_.__r.__words[0];
  std::string::size_type v6 = v20.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v20.__r_.__value_.__r.__words[1];
  if ((uint64_t *)v6 == v5)
  {
    unint64_t v8 = 1;
  }
  else
  {
    unint64_t v7 = (uint64_t)(v6 - (void)v5) >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v8 = 1;
    do
    {
      uint64_t v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  memset(&v20, 0, sizeof(v20));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v20, v4, (uint64_t)v4 + 4 * v8, v8);
  int v10 = (void *)v20.__r_.__value_.__r.__words[0];
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_, (uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 2);
  free(v21);
  if (v10) {
    operator delete(v10);
  }
}

void sub_1C95B702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v26);
  goto LABEL_12;
}

void marrs::mrr::mr::UtteranceKeywordFilter::~UtteranceKeywordFilter(marrs::mrr::mr::UtteranceKeywordFilter *this)
{
  *(void *)this = &unk_1F23C7DF0;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
  JUMPOUT(0x1CB786E50);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F23C7DF0;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void **)this + 21));
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface((void **)this);
}

void marrs::mrr::mr::UtteranceKeywordFilter::filterEntities(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (a1[22])
  {
    v83[0] = 0;
    v83[1] = 0;
    uint64_t v81 = 0;
    uint64_t v82 = v83;
    unint64_t v79 = &v80;
    unint64_t v80 = 0;
    std::string::size_type v6 = *(void **)(a3 + 24);
    unint64_t v7 = *(void **)(a3 + 32);
    while (v6 != v7)
    {
      MEMORY[0x1CB786490](&v85, *v6);
      if (!v87) {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v82, v86, (uint64_t)v86);
      }
      MEMORY[0x1CB7864A0](&v85);
      ++v6;
    }
    uint64_t v74 = a4;
    unint64_t v8 = (void *)a1[20];
    uint64_t v9 = a1 + 21;
    if (v8 != a1 + 21)
    {
      uint64_t v75 = a1 + 21;
LABEL_9:
      memset(&v84, 0, sizeof(v84));
      std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>((std::vector<std::string> **)&v85, v82, v83, (void *)v8[7], v8 + 8, &v84);
      std::vector<std::string>::pointer begin = v84.__begin_;
      std::vector<std::string>::pointer end = v84.__end_;
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      if (end == begin) {
        goto LABEL_105;
      }
      if (*((char *)v8 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)v8[4], v8[5]);
      }
      else {
        std::string v85 = *(std::string *)(v8 + 4);
      }
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      if (v13 == *a2) {
        goto LABEL_103;
      }
      std::string v14 = 0;
      std::string v15 = 0;
      unint64_t v77 = 0;
      long long v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = qword_1EBC84480;
        if (!qword_1EBC84480) {
          goto LABEL_50;
        }
        int v19 = *(_DWORD *)(v12 + 216 * v17);
        std::string v20 = &qword_1EBC84480;
        do
        {
          int v21 = *(_DWORD *)(v18 + 32);
          BOOL v22 = v21 < v19;
          if (v21 >= v19) {
            long long v23 = (uint64_t *)v18;
          }
          else {
            long long v23 = (uint64_t *)(v18 + 8);
          }
          if (!v22) {
            std::string v20 = (uint64_t *)v18;
          }
          uint64_t v18 = *v23;
        }
        while (*v23);
        if (v20 == &qword_1EBC84480 || v19 < *((_DWORD *)v20 + 8)) {
          goto LABEL_50;
        }
        std::string::size_type v24 = (const char *)v20[5];
        size_t v25 = strlen(v24);
        size_t v26 = v25;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v25 == v85.__r_.__value_.__l.__size_)
          {
            if (v25 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            int v27 = (std::string *)v85.__r_.__value_.__r.__words[0];
            goto LABEL_31;
          }
        }
        else if (v25 == HIBYTE(v85.__r_.__value_.__r.__words[2]))
        {
          int v27 = &v85;
LABEL_31:
          if (!memcmp(v27, v24, v26))
          {
            if ((unint64_t)v16 >= v77)
            {
              uint64_t v28 = (v16 - v14) >> 3;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v77 - (void)v14) >> 2 > v29) {
                unint64_t v29 = (uint64_t)(v77 - (void)v14) >> 2;
              }
              if (v77 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30)
              {
                unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
                long long v16 = v15;
              }
              else
              {
                uint64_t v31 = 0;
              }
              unint64_t v32 = (char *)(v30 + 8 * v28);
              *(void *)unint64_t v32 = v17;
              std::string v15 = v32 + 8;
              while (v16 != v14)
              {
                uint64_t v33 = *((void *)v16 - 1);
                v16 -= 8;
                *((void *)v32 - 1) = v33;
                v32 -= 8;
              }
              unint64_t v77 = v30 + 8 * v31;
              if (v14) {
                operator delete(v14);
              }
              std::string v14 = v32;
            }
            else
            {
              *(void *)long long v16 = v17;
              std::string v15 = v16 + 8;
            }
            uint64_t v12 = *a2;
            uint64_t v13 = a2[1];
            long long v16 = v15;
          }
        }
LABEL_50:
        if (++v17 >= 0x84BDA12F684BDA13 * ((v13 - v12) >> 3))
        {
          if (v14 != v15)
          {
            long long v34 = &v80;
            for (uint64_t i = v14; i != v15; i += 8)
            {
              if (&v80 == v34 || (unint64_t v36 = *(void *)i, v37 = v34[4], *(void *)i < (unint64_t)v37))
              {
                long long v38 = *v34;
                uint64_t v39 = v34;
                if (v79 == v34) {
                  goto LABEL_61;
                }
                unint64_t v40 = *v34;
                uint64_t v41 = v34;
                if (v38)
                {
                  do
                  {
                    uint64_t v39 = (uint64_t **)v40;
                    unint64_t v40 = (uint64_t *)v40[1];
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    uint64_t v39 = (uint64_t **)v41[2];
                    BOOL v42 = *v39 == (uint64_t *)v41;
                    uint64_t v41 = v39;
                  }
                  while (v42);
                }
                unint64_t v43 = *(void *)i;
                if ((unint64_t)v39[4] < *(void *)i)
                {
LABEL_61:
                  if (v38) {
                    long long v44 = v39 + 1;
                  }
                  else {
                    long long v44 = v34;
                  }
                  if (v38) {
                    long long v34 = v39;
                  }
                }
                else
                {
                  long long v48 = v80;
                  long long v44 = &v80;
                  long long v34 = &v80;
                  if (!v80) {
                    goto LABEL_92;
                  }
                  long long v44 = &v80;
                  while (1)
                  {
                    while (1)
                    {
                      long long v34 = (uint64_t **)v48;
                      unint64_t v49 = v48[4];
                      if (v43 >= v49) {
                        break;
                      }
                      long long v48 = *v34;
                      long long v44 = v34;
                      if (!*v34) {
                        goto LABEL_92;
                      }
                    }
                    if (v49 >= v43) {
                      break;
                    }
                    long long v44 = v34 + 1;
                    long long v48 = v34[1];
                    if (!v48) {
                      goto LABEL_92;
                    }
                  }
                }
              }
              else
              {
                if ((unint64_t)v37 >= v36)
                {
                  uint64_t v45 = (uint64_t *)v34;
                  goto LABEL_95;
                }
                long long v44 = v34 + 1;
                long long v46 = v34[1];
                if (v46)
                {
                  do
                  {
                    long long v44 = (uint64_t **)v46;
                    long long v46 = (uint64_t *)*v46;
                    long long v34 = v44;
                    long long v47 = v44;
                  }
                  while (v46);
                }
                else
                {
                  long long v47 = v34;
                  do
                  {
                    std::string::size_type v50 = (uint64_t *)v47;
                    long long v47 = (uint64_t **)v47[2];
                  }
                  while (*v47 != v50);
                }
                if (v47 != &v80 && v36 >= (unint64_t)v47[4])
                {
                  int v51 = v80;
                  long long v44 = &v80;
                  long long v34 = &v80;
                  if (!v80)
                  {
LABEL_92:
                    uint64_t v45 = (uint64_t *)operator new(0x28uLL);
                    v45[4] = *(void *)i;
                    uint64_t *v45 = 0;
                    v45[1] = 0;
                    v45[2] = (uint64_t)v34;
                    *long long v44 = v45;
                    uint64_t v53 = v45;
                    if (*v79)
                    {
                      unint64_t v79 = (uint64_t **)*v79;
                      uint64_t v53 = *v44;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, v53);
                    ++v81;
                    goto LABEL_95;
                  }
                  long long v44 = &v80;
                  while (1)
                  {
                    while (1)
                    {
                      long long v34 = (uint64_t **)v51;
                      unint64_t v52 = v51[4];
                      if (v36 >= v52) {
                        break;
                      }
                      int v51 = *v34;
                      long long v44 = v34;
                      if (!*v34) {
                        goto LABEL_92;
                      }
                    }
                    if (v52 >= v36) {
                      break;
                    }
                    long long v44 = v34 + 1;
                    int v51 = v34[1];
                    if (!v51) {
                      goto LABEL_92;
                    }
                  }
                }
              }
              uint64_t v45 = *v44;
              if (!*v44) {
                goto LABEL_92;
              }
LABEL_95:
              int v54 = (uint64_t *)v45[1];
              if (v54)
              {
                do
                {
                  long long v34 = (uint64_t **)v54;
                  int v54 = (uint64_t *)*v54;
                }
                while (v54);
              }
              else
              {
                do
                {
                  long long v34 = (uint64_t **)v45[2];
                  BOOL v42 = *v34 == v45;
                  uint64_t v45 = (uint64_t *)v34;
                }
                while (!v42);
              }
            }
          }
          uint64_t v9 = v75;
          if (v14) {
            operator delete(v14);
          }
LABEL_103:
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
LABEL_105:
          unint64_t v55 = (void *)v8[1];
          if (v55)
          {
            do
            {
              size_t v56 = v55;
              unint64_t v55 = (void *)*v55;
            }
            while (v55);
          }
          else
          {
            do
            {
              size_t v56 = (void *)v8[2];
              BOOL v42 = *v56 == (void)v8;
              unint64_t v8 = v56;
            }
            while (!v42);
          }
          unint64_t v8 = v56;
          if (v56 == v9) {
            break;
          }
          goto LABEL_9;
        }
      }
    }
    char v57 = (uint64_t *)v79;
    if (v79 == &v80)
    {
      unint64_t v66 = 0;
      long long v64 = 0uLL;
    }
    else
    {
      unint64_t v58 = 0;
      uint64_t v59 = v79;
      do
      {
        unint64_t v60 = v58;
        uint64_t v61 = v59[1];
        if (v61)
        {
          do
          {
            uint64_t v62 = (uint64_t **)v61;
            uint64_t v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            uint64_t v62 = (uint64_t **)v59[2];
            BOOL v42 = *v62 == (uint64_t *)v59;
            uint64_t v59 = v62;
          }
          while (!v42);
        }
        ++v58;
        uint64_t v59 = v62;
      }
      while (v62 != &v80);
      if (v60 >= 0x1FFFFFFFFFFFFFFFLL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v63 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v58);
      *(void *)&long long v64 = v63;
      unint64_t v66 = &v63[v65];
      do
      {
        *uint64_t v63 = v57[4];
        unint64_t v67 = (uint64_t *)v57[1];
        if (v67)
        {
          do
          {
            uint64_t v68 = (uint64_t **)v67;
            unint64_t v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            uint64_t v68 = (uint64_t **)v57[2];
            BOOL v42 = *v68 == v57;
            char v57 = (uint64_t *)v68;
          }
          while (!v42);
        }
        ++v63;
        char v57 = (uint64_t *)v68;
      }
      while (v68 != &v80);
      *((void *)&v64 + 1) = v63;
    }
    uint64_t v70 = (void *)v64;
    long long v78 = v64;
    uint64_t v71 = *((void *)&v64 + 1);
    if ((void)v64 == *((void *)&v64 + 1))
    {
      uint64_t v73 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        LOWORD(v85.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C9555000, v73, OS_LOG_TYPE_INFO, "[Utterance Keyword Filter] failed to match any keywords, returning null", (uint8_t *)&v85, 2u);
      }
      *uint64_t v74 = 0;
      v74[24] = 0;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      unint64_t v72 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        LODWORD(v85.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (v71 - (uint64_t)v70) >> 3;
        _os_log_impl(&dword_1C9555000, v72, OS_LOG_TYPE_INFO, "[Utterance Keyword Filter] matched %lu entities", (uint8_t *)&v85, 0xCu);
      }
      *(_OWORD *)uint64_t v74 = v78;
      *((void *)v74 + 2) = v66;
      v74[24] = 1;
    }
    std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(v80);
    std::__tree<std::string>::destroy(v83[0]);
  }
  else
  {
    uint64_t v69 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v85.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C9555000, v69, OS_LOG_TYPE_ERROR, "[Utterance Keyword Filter] Failed to load asset. The utteranceKeywordMap is empty, skipping", (uint8_t *)&v85, 2u);
    }
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C95B7930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v30) {
    operator delete(v30);
  }
  std::__tree<std::__value_type<marrs::mrr::mr::EntityType,float>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,float>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,float>>>::destroy(a16);
  std::__tree<std::string>::destroy(a19);
  _Unwind_Resume(a1);
}

uint64_t *marrs::qr::processing::filterTokensForAER(uint64_t *result, marrs::qr::orchestration::QRToken *a2, marrs::qr::orchestration::QRToken *a3, int a4, int a5)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2 != a3)
  {
    unint64_t v8 = a2;
    uint64_t v9 = result;
    int v10 = 0;
    std::string::size_type v11 = result + 2;
    do
    {
      if (*((unsigned char *)v8 + 72) || (*((unsigned char *)v8 + 73) ? (int v12 = a5) : (int v12 = a4), v12 == 1))
      {
        if ((unint64_t)v10 >= *v11)
        {
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - *v9) >> 5);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x199999999999999) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((*v11 - *v9) >> 5) > v14) {
            unint64_t v14 = 0x999999999999999ALL * ((*v11 - *v9) >> 5);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((*v11 - *v9) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
            unint64_t v15 = 0x199999999999999;
          }
          else {
            unint64_t v15 = v14;
          }
          int v21 = v11;
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          unint64_t v17 = v15;
          uint64_t v18 = (std::string *)(v15 + 160 * v13);
          int v19 = v18;
          unint64_t v20 = v15 + 160 * v16;
          marrs::qr::orchestration::QRToken::QRToken(v18, v8);
          int v19 = (std::string *)((char *)v19 + 160);
          std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer(v9, &v17);
          int v10 = (std::string *)v9[1];
          uint64_t result = (uint64_t *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v17);
        }
        else
        {
          uint64_t result = (uint64_t *)marrs::qr::orchestration::QRToken::QRToken(v10, v8);
          int v10 = (std::string *)((char *)v10 + 160);
          v9[1] = (uint64_t)v10;
        }
        v9[1] = (uint64_t)v10;
      }
      unint64_t v8 = (marrs::qr::orchestration::QRToken *)((char *)v8 + 160);
    }
    while (v8 != a3);
  }
  return result;
}

void sub_1C95B7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void marrs::qr::processing::getFlattenedNormalizedValuesIndices(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  unint64_t v41 = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 == *a2)
  {
    int v5 = 0;
    std::string::size_type v6 = 0;
  }
  else
  {
    int v5 = 0;
    std::string::size_type v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = v4 + 160 * v8;
      uint64_t v12 = *(void *)(v9 + 48);
      std::string::size_type v11 = (uint64_t *)(v9 + 48);
      uint64_t v10 = v12;
      if (v11[1] != v12)
      {
        unint64_t v38 = v8;
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = marrs::qr::processing::Vocab::toIndex(a3, (unsigned __int8 *)(v10 + 24 * v13));
          uint64_t v15 = v14;
          if ((unint64_t)v6 >= v7)
          {
            uint64_t v16 = v6 - v5;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v7 - (void)v5) >> 2 > v17) {
              unint64_t v17 = (uint64_t)(v7 - (void)v5) >> 2;
            }
            if (v7 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
            }
            else {
              uint64_t v19 = 0;
            }
            unint64_t v20 = (uint64_t *)(v18 + 8 * v16);
            *unint64_t v20 = v15;
            int v21 = v20 + 1;
            while (v6 != v5)
            {
              uint64_t v22 = *--v6;
              *--unint64_t v20 = v22;
            }
            unint64_t v7 = v18 + 8 * v19;
            if (v5) {
              operator delete(v5);
            }
            int v5 = v20;
            std::string::size_type v6 = v21;
          }
          else
          {
            *v6++ = v14;
          }
          long long v23 = operator new(0x10uLL);
          std::string::size_type v24 = v23 + 2;
          void *v23 = v38;
          v23[1] = v13;
          *(void *)&long long v25 = v23;
          *((void *)&v25 + 1) = v23 + 2;
          size_t v26 = v40;
          if ((unint64_t)v40 >= v41)
          {
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - v39) >> 3);
            unint64_t v29 = v28 + 1;
            if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            long long v36 = v25;
            if (0x5555555555555556 * ((uint64_t)(v41 - v39) >> 3) > v29) {
              unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v41 - v39) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v39) >> 3) >= 0x555555555555555) {
              unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v30 = v29;
            }
            void v42[4] = (void **)&v41;
            uint64_t v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v30);
            unint64_t v32 = &v31[3 * v28];
            v42[0] = v31;
            v42[1] = v32;
            v42[3] = &v31[3 * v33];
            *(_OWORD *)unint64_t v32 = v36;
            v32[2] = v24;
            v42[2] = v32 + 3;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v39, v42);
            int v27 = v40;
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v42);
          }
          else
          {
            *unint64_t v40 = v25;
            *((void *)v26 + 2) = v24;
            int v27 = (_OWORD *)((char *)v26 + 24);
          }
          unint64_t v40 = v27;
          uint64_t v10 = *v11;
          ++v13;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3));
        uint64_t v4 = *a2;
        uint64_t v3 = a2[1];
        unint64_t v8 = v38;
      }
      ++v8;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, v5, (uint64_t)v6, v6 - v5);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<unsigned long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(a1 + 3, v39, (uint64_t)v40, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - v39) >> 3));
  v42[0] = (void **)&v39;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v42);
  if (v5) {
    operator delete(v5);
  }
}

void sub_1C95B7E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  std::string::size_type v24 = *v21;
  if (*v21)
  {
    *(void *)(a10 + 8) = v24;
    operator delete(v24);
  }
  a21 = (void **)&a18;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (v22) {
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    std::string::size_type v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C95B7F4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<std::vector<float>>>::__vallocate[abi:ne180100](a1, a2);
    std::string::size_type v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *std::string::size_type v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1C95B8004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::string *std::vector<marrs::qr::orchestration::QRToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::qr::orchestration::QRToken*>,std::__wrap_iter<marrs::qr::orchestration::QRToken*>>(std::string *result, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    std::string::size_type v6 = a3;
    uint64_t v7 = (uint64_t *)result;
    std::string::size_type v8 = result->__r_.__value_.__r.__words[0];
    uint64_t v9 = (int64_t)(a2 - result->__r_.__value_.__r.__words[0]) / 160;
    uint64_t v10 = result->__r_.__value_.__r.__words[0] + 160 * v9;
    uint64_t v12 = (uint64_t)&result->__r_.__value_.__r.__words[2];
    std::string::size_type v11 = result->__r_.__value_.__r.__words[2];
    unint64_t size = result->__r_.__value_.__l.__size_;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - size) >> 5)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v10) >> 5)) >= a5)
      {
        unint64_t v18 = (std::string *)((char *)a3 + 160 * a5);
        std::string::size_type v19 = result->__r_.__value_.__l.__size_;
      }
      else
      {
        unint64_t v18 = (std::string *)((char *)a3 + 32 * ((uint64_t)(size - v10) >> 5));
        uint64_t result = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>((uint64_t)&result->__r_.__value_.__r.__words[2], (uint64_t)v18, a4, size);
        std::string::size_type v19 = (std::string::size_type)result;
        v7[1] = (uint64_t)result;
        if ((uint64_t)(size - v10) < 1) {
          return result;
        }
      }
      uint64_t v20 = v10 + 160 * a5;
      unint64_t v21 = v19 - 160 * a5;
      uint64_t v22 = v19;
      if (v21 < size)
      {
        uint64_t v22 = v19;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(void *)(v22 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = v23;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
          *(void *)unint64_t v21 = 0;
          long long v24 = *(_OWORD *)(v21 + 24);
          *(void *)(v22 + 40) = *(void *)(v21 + 40);
          *(_OWORD *)(v22 + 24) = v24;
          *(void *)(v21 + 32) = 0;
          *(void *)(v21 + 40) = 0;
          *(void *)(v21 + 24) = 0;
          *(void *)(v22 + 48) = 0;
          *(void *)(v22 + 56) = 0;
          *(void *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 48) = *(_OWORD *)(v21 + 48);
          *(void *)(v22 + 64) = *(void *)(v21 + 64);
          *(void *)(v21 + 48) = 0;
          *(void *)(v21 + 56) = 0;
          *(void *)(v21 + 64) = 0;
          long long v25 = *(_OWORD *)(v21 + 72);
          *(_OWORD *)(v22 + 88) = *(_OWORD *)(v21 + 88);
          *(_OWORD *)(v22 + 72) = v25;
          long long v26 = *(_OWORD *)(v21 + 104);
          *(void *)(v22 + 120) = *(void *)(v21 + 120);
          *(_OWORD *)(v22 + 104) = v26;
          *(void *)(v21 + 112) = 0;
          *(void *)(v21 + 120) = 0;
          *(void *)(v21 + 104) = 0;
          *(unsigned char *)(v22 + 128) = *(unsigned char *)(v21 + 128);
          long long v27 = *(_OWORD *)(v21 + 136);
          *(void *)(v22 + 152) = *(void *)(v21 + 152);
          *(_OWORD *)(v22 + 136) = v27;
          *(void *)(v21 + 144) = 0;
          *(void *)(v21 + 152) = 0;
          *(void *)(v21 + 136) = 0;
          v22 += 160;
          v21 += 160;
        }
        while (v21 < size);
      }
      v7[1] = v22;
      if (v19 != v20)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 5);
        uint64_t v30 = -160 * v29;
        std::string::size_type v31 = v8 + 160 * v29 + 160 * v9;
        do
        {
          std::string::size_type v32 = v19 + v28;
          uint64_t v33 = (void **)(v19 + v28 - 160);
          if (*(char *)(v19 + v28 - 137) < 0) {
            operator delete(*v33);
          }
          uint64_t v34 = v31 + v28;
          uint64_t v35 = (long long *)(v31 + v28 - 160);
          long long v36 = *v35;
          *(void *)(v19 + v28 - 144) = *(void *)(v31 + v28 - 144);
          *(_OWORD *)uint64_t v33 = v36;
          *(unsigned char *)(v31 + v28 - 137) = 0;
          *(unsigned char *)uint64_t v35 = 0;
          uint64_t v37 = v32 - 136;
          if (*(char *)(v32 - 113) < 0) {
            operator delete(*(void **)v37);
          }
          uint64_t v38 = v31 + v28;
          long long v39 = *(_OWORD *)(v34 - 136);
          *(void *)(v37 + 16) = *(void *)(v34 - 120);
          *(_OWORD *)uint64_t v37 = v39;
          *(unsigned char *)(v31 + v28 - 113) = 0;
          *(unsigned char *)(v34 - 136) = 0;
          std::string::size_type v40 = v19 + v28;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + v28 - 112));
          *(_OWORD *)(v40 - 112) = *(_OWORD *)(v31 + v28 - 112);
          *(void *)(v40 - 96) = *(void *)(v31 + v28 - 96);
          *(void *)(v38 - 104) = 0;
          *(void *)(v38 - 96) = 0;
          *(void *)(v38 - 112) = 0;
          long long v41 = *(_OWORD *)(v31 + v28 - 88);
          *(_OWORD *)(v40 - 72) = *(_OWORD *)(v31 + v28 - 72);
          *(_OWORD *)(v40 - 88) = v41;
          BOOL v42 = (void **)(v19 + v28 - 56);
          if (*(char *)(v19 + v28 - 33) < 0) {
            operator delete(*v42);
          }
          long long v43 = *(_OWORD *)(v38 - 56);
          *(void *)(v40 - 40) = *(void *)(v38 - 40);
          *(_OWORD *)BOOL v42 = v43;
          *(unsigned char *)(v38 - 33) = 0;
          *(unsigned char *)(v38 - 56) = 0;
          *(unsigned char *)(v40 - 32) = *(unsigned char *)(v38 - 32);
          long long v44 = (void **)(v40 - 24);
          if (*(char *)(v40 - 1) < 0) {
            operator delete(*v44);
          }
          uint64_t v45 = v31 + v28;
          long long v46 = *(_OWORD *)(v31 + v28 - 24);
          *(void *)(v40 - 8) = *(void *)(v31 + v28 - 8);
          *(_OWORD *)long long v44 = v46;
          *(unsigned char *)(v45 - 1) = 0;
          *(unsigned char *)(v45 - 24) = 0;
          v28 -= 160;
        }
        while (v30 != v28);
      }
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *,marrs::qr::orchestration::QRToken *>(v6, v18, (std::string *)v10);
    }
    else
    {
      unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(size - v8) >> 5);
      if (v14 > 0x199999999999999) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v8) >> 5);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0xCCCCCCCCCCCCCCLL) {
        unint64_t v16 = 0x199999999999999;
      }
      else {
        unint64_t v16 = v14;
      }
      uint64_t v64 = v12;
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      long long v47 = (std::string *)(v16 + 160 * v9);
      unint64_t v60 = v16;
      uint64_t v61 = (uint64_t)v47;
      uint64_t v62 = (uint64_t)v47;
      unint64_t v63 = v16 + 160 * v17;
      uint64_t v48 = 5 * a5;
      unint64_t v49 = (char *)v47 + 160 * a5;
      uint64_t v50 = 32 * v48;
      do
      {
        marrs::qr::orchestration::QRToken::QRToken(v47, (const marrs::qr::orchestration::QRToken *)v6);
        long long v47 = (std::string *)((char *)v47 + 160);
        std::string::size_type v6 = (std::string *)((char *)v6 + 160);
        v50 -= 160;
      }
      while (v50);
      uint64_t v51 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>,std::reverse_iterator<marrs::qr::orchestration::QRToken*>>(v12, v10, v10, *v7, *v7, v61, v61);
      uint64_t v52 = v7[1];
      if (v10 != v52)
      {
        do
        {
          long long v53 = *(_OWORD *)v10;
          *((void *)v49 + 2) = *(void *)(v10 + 16);
          *(_OWORD *)unint64_t v49 = v53;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)uint64_t v10 = 0;
          long long v54 = *(_OWORD *)(v10 + 24);
          *((void *)v49 + 5) = *(void *)(v10 + 40);
          *(_OWORD *)(v49 + 24) = v54;
          *(void *)(v10 + 32) = 0;
          *(void *)(v10 + 40) = 0;
          *(void *)(v10 + 24) = 0;
          *((void *)v49 + 6) = 0;
          *((void *)v49 + 7) = 0;
          *((void *)v49 + 8) = 0;
          *((_OWORD *)v49 + 3) = *(_OWORD *)(v10 + 48);
          *((void *)v49 + 8) = *(void *)(v10 + 64);
          *(void *)(v10 + 48) = 0;
          *(void *)(v10 + 56) = 0;
          *(void *)(v10 + 64) = 0;
          long long v55 = *(_OWORD *)(v10 + 72);
          *(_OWORD *)(v49 + 88) = *(_OWORD *)(v10 + 88);
          *(_OWORD *)(v49 + 72) = v55;
          long long v56 = *(_OWORD *)(v10 + 104);
          *((void *)v49 + 15) = *(void *)(v10 + 120);
          *(_OWORD *)(v49 + 104) = v56;
          *(void *)(v10 + 112) = 0;
          *(void *)(v10 + 120) = 0;
          *(void *)(v10 + 104) = 0;
          v49[128] = *(unsigned char *)(v10 + 128);
          long long v57 = *(_OWORD *)(v10 + 136);
          *((void *)v49 + 19) = *(void *)(v10 + 152);
          *(_OWORD *)(v49 + 136) = v57;
          *(void *)(v10 + 144) = 0;
          *(void *)(v10 + 152) = 0;
          *(void *)(v10 + 136) = 0;
          v49 += 160;
          v10 += 160;
        }
        while (v10 != v52);
        uint64_t v10 = v7[1];
      }
      uint64_t v58 = *v7;
      *uint64_t v7 = v51;
      v7[1] = (uint64_t)v49;
      uint64_t v59 = v7[2];
      v7[2] = v63;
      uint64_t v62 = v10;
      unint64_t v63 = v59;
      unint64_t v60 = v58;
      uint64_t v61 = v58;
      return (std::string *)std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v60);
    }
  }
  return result;
}

void sub_1C95B8504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<unsigned long> &,std::vector<std::vector<unsigned long>> &>,std::tuple<std::vector<unsigned long>,std::vector<std::vector<unsigned long>>>,0ul,1ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a1;
  if (v4 != (char *)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v5 = *(uint64_t **)(a1 + 8);
  if (v5 != (uint64_t *)(a2 + 24))
  {
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:ne180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v5, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
}

char **std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(const void **a1)
{
  uint64_t v1 = 0;
  char v2 = *((unsigned char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  if (v2 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *a1;
  }
  int v5 = &_swift_FORCE_LOAD___swiftFoundation___Marrs;
  while ((&marrs::qr::processing::Vocab::reservedTokens)[v1 + 1] != (char *)v3
       || memcmp((&marrs::qr::processing::Vocab::reservedTokens)[v1], v4, v3))
  {
    v1 += 2;
    if (v1 == 14) {
      return (char **)v5;
    }
  }
  return &(&marrs::qr::processing::Vocab::reservedTokens)[v1];
}

void marrs::qr::processing::filterTokens(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  while (v7 < v6 && !*(unsigned char *)(v7 + 72))
    v7 += 160;
  if (v7 < v6)
  {
    uint64_t v8 = 0;
    do
    {
      if (v8 - 0x5555555555555555 * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3) > a3) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      for (unint64_t i = v7 + 160; i < a2[1] && !*(unsigned char *)(i + 72); i += 160)
      {
        int v10 = *(char *)(i + 23);
        if (v10 >= 0) {
          std::string::size_type v11 = (const std::string::value_type *)i;
        }
        else {
          std::string::size_type v11 = *(const std::string::value_type **)i;
        }
        if (v10 >= 0) {
          std::string::size_type v12 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v12 = *(void *)(i + 8);
        }
        std::string::append(&__p, v11, v12);
      }
      unint64_t v14 = *(void *)(a1 + 8);
      unint64_t v13 = *(void *)(a1 + 16);
      if (v14 >= v13)
      {
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *(void *)a1) >> 5);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0x199999999999999) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *(void *)a1) >> 5);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        std::string::size_type v19 = (char *)(v18 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v17);
        uint64_t v30 = a1 + 16;
        if (v19) {
          std::string::size_type v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRToken>>((unint64_t)v19);
        }
        else {
          uint64_t v20 = 0;
        }
        long long v26 = v19;
        long long v27 = (std::string *)&v19[160 * v16];
        uint64_t v28 = v27;
        unint64_t v29 = &v19[160 * v20];
        marrs::qr::orchestration::QRToken::QRToken(v27, (const marrs::qr::orchestration::QRToken *)v7);
        uint64_t v28 = (std::string *)((char *)v28 + 160);
        std::vector<marrs::qr::orchestration::QRToken>::__swap_out_circular_buffer((uint64_t *)a1, &v26);
        unint64_t v15 = *(void *)(a1 + 8);
        std::__split_buffer<marrs::qr::orchestration::QRToken>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        marrs::qr::orchestration::QRToken::QRToken(*(std::string **)(a1 + 8), (const marrs::qr::orchestration::QRToken *)v7);
        unint64_t v15 = v14 + 160;
        *(void *)(a1 + 8) = v15;
      }
      *(void *)(a1 + 8) = v15;
      std::string::operator=((std::string *)(v15 - 24), &__p);
      unint64_t v23 = v7 + 48;
      uint64_t v22 = *(void *)(v7 + 48);
      uint64_t v21 = *(void *)(v23 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 -= 0x5555555555555555 * ((v21 - v22) >> 3);
      unint64_t v7 = i;
    }
    while (i < a2[1]);
    uint64_t v24 = *(void *)(a1 + 8);
    if (*(void *)a1 != v24) {
      MEMORY[0x1CB786A80](v24 - 24, " ");
    }
  }
}

void sub_1C95B886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(void **this)
{
  marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(this);
  JUMPOUT(0x1CB786E50);
}

{
  *this = &unk_1F23C7D90;
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 113);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 93);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 73);
  this[50] = &unk_1F23C7DF0;
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(this[71]);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 50);
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this + 30);
  marrs::mrr::mr::OrdinalFilter::~OrdinalFilter((marrs::mrr::mr::OrdinalFilter *)(this + 4));
  *this = &unk_1F23C7D30;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void marrs::mrr::mr::RuleBasedMR::resolveMentionsInUtterance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a3;
  unint64_t v7 = a5;
  v122[3] = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v8 = *(uint64_t **)(a3 + 96);
  for (unint64_t i = *(uint64_t **)(a3 + 104); v8 != i; ++v8)
  {
    marrs::mrr::mr::SpanTypeFilter::filterEntities(a2, *v8, (uint64_t)__p);
    std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>(&v101, (uint64_t)__p);
    if ((_BYTE)v111 && *(void *)__p) {
      operator delete(*(void **)__p);
    }
  }
  int v10 = operator new(4uLL);
  v100[0] = v10;
  _DWORD *v10 = 1;
  v100[1] = v10 + 1;
  v100[2] = v10 + 1;
  std::string::size_type v11 = *(uint64_t **)(v5 + 40);
  long long v78 = *(uint64_t **)(v5 + 48);
  if (v11 != v78)
  {
    std::vector<std::string> v84 = v7 + 2;
    uint64_t v77 = v5;
    unint64_t v80 = a2;
    do
    {
      uint64_t v85 = *v11;
      if (*(void *)(*v11 + 32))
      {
        std::string::size_type v12 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          unint64_t v13 = *(uint64_t ***)(v85 + 32);
          if (*((char *)v13 + 23) < 0) {
            unint64_t v13 = (uint64_t **)*v13;
          }
          uint64_t v14 = a1 + 8;
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v14 = *(void *)(a1 + 8);
          }
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = v13;
          *(_WORD *)&__p[12] = 2080;
          *(void *)&__p[14] = v14;
          _os_log_impl(&dword_1C9555000, v12, OS_LOG_TYPE_INFO, "[RulebasedMR] Mention Result '%s' to be resolved, std::basic_regex<char>::value_type locale = %s", __p, 0x16u);
        }
        long long v98 = 0uLL;
        v99[0] = 0;
        uint64_t v15 = v101;
        if (v102 - v101 >= 1)
        {
          unint64_t v16 = v11;
          unint64_t v17 = (v102 - v101) >> 5;
          long long v112 = v99;
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(v17);
          *(void *)std::string __p = v18;
          *(void *)&__p[8] = v18;
          *(void *)&__p[16] = v18;
          unint64_t v111 = &v18[32 * v19];
          uint64_t v20 = &v18[32 * v17];
          uint64_t v21 = 32 * v17;
          uint64_t v5 = v77;
          std::string::size_type v11 = v16;
          do
          {
            std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)v18, v15);
            v18 += 32;
            v15 += 32;
            v21 -= 32;
          }
          while (v21);
          *(void *)&__p[16] = v20;
          *(void *)&__p[8] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>((uint64_t)v99, 0, 0, v98, v98, *(uint64_t *)&__p[8], *(uint64_t *)&__p[8]);
          uint64_t v22 = *((void *)&v98 + 1);
          unint64_t v23 = *(char **)&__p[16];
          v96[0] = *(void **)&__p[16];
          v94[0] = *(void **)&__p[16];
          uint64_t v106 = v99;
          *(void *)&long long v107 = v94;
          *((void *)&v107 + 1) = v96;
          if (*((void *)&v98 + 1))
          {
            uint64_t v24 = 0;
            do
            {
              long long v25 = &v23[v24];
              *long long v25 = 0;
              v25[24] = 0;
              if (*(unsigned char *)(v24 + 24))
              {
                *(_OWORD *)long long v25 = *(_OWORD *)v24;
                *((void *)v25 + 2) = *(void *)(v24 + 16);
                *(void *)(v24 + 8) = 0;
                *(void *)(v24 + 16) = 0;
                *(void *)uint64_t v24 = 0;
                v25[24] = 1;
              }
              v24 += 32;
            }
            while (v24 != v22);
            v23 += v24;
            v96[0] = v23;
          }
          LOBYTE(v108) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::vector<unsigned long>>>,std::optional<std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v106);
          long long v27 = v98;
          *(void *)&long long v98 = *(void *)&__p[8];
          *((void *)&v98 + 1) = v23;
          *(_OWORD *)&__p[8] = v27;
          uint64_t v28 = (char *)v99[0];
          v99[0] = v111;
          unint64_t v111 = v28;
          *(void *)std::string __p = v27;
          std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)__p);
        }
        LOBYTE(v96[0]) = 0;
        char v97 = 0;
        if ((*(unsigned char *)(v5 + 176) & 2) != 0 && *(int *)(v5 + 160) >= 1)
        {
          marrs::mrr::mr::OrdinalFilter::filterEntities(a1 + 32, (uint64_t)a2, v85, __p);
          std::__optional_storage_base<std::vector<unsigned long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long>,false>>((uint64_t)v96, (__n128 *)__p);
          if ((_BYTE)v111 && *(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          if (v97)
          {
            *(_DWORD *)std::string __p = 2;
            std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType const*,marrs::mrr::mr::MRResultType const*>(v100, __p, &__p[4]);
          }
          std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v96);
        }
        else
        {
          unint64_t v29 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v30 = *(void *)(v5 + 160);
            *(_DWORD *)std::string __p = 134217984;
            *(void *)&__p[4] = v30;
            _os_log_impl(&dword_1C9555000, v29, OS_LOG_TYPE_DEBUG, "[Ordinal MR] Request(turnIndex='%llu') is not a follow-up turn, skipping ordinal filter", __p, 0xCu);
          }
        }
        marrs::mrr::mr::SpanTypeFilter::filterEntities(a2, v85, (uint64_t)v94);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v94);
        marrs::mrr::mr::UtteranceKeywordFilter::filterEntities((void *)(a1 + 400), a2, *(void *)(v5 + 152), v92);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v92);
        marrs::mrr::mr::MentionKeywordFilter::filterEntities(v90);
        std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>((uint64_t *)&v98, (uint64_t)v90);
        v88[0] = 0;
        v88[1] = 0;
        uint64_t v89 = 0;
        uint64_t v31 = *((void *)&v98 + 1);
        uint64_t v32 = v98;
        unint64_t v79 = v11;
        if ((void)v98 == *((void *)&v98 + 1)) {
          goto LABEL_44;
        }
        int v33 = 1;
        do
        {
          std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, v32);
          BOOL v34 = (_BYTE)v111 == 0;
          if ((_BYTE)v111 && *(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          v33 &= v34;
          v32 += 32;
        }
        while (v32 != v31);
        if (v33)
        {
LABEL_44:
          uint64_t v35 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string __p = 0;
            _os_log_impl(&dword_1C9555000, v35, OS_LOG_TYPE_INFO, "[RulebasedMR] - None of filters fired, attempting to output most salient visual entity", __p, 2u);
          }
          marrs::mrr::mr::GazeBasedFilter::filterEntities(a2, (uint64_t)__p);
          if ((_BYTE)v111)
          {
            long long v36 = *(void **)__p;
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v88, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
            if (v36) {
              operator delete(v36);
            }
          }
          uint64_t v38 = v88[0];
          uint64_t v37 = v88[1];
        }
        else
        {
          marrs::mrr::mr::enumerateAllIndices(&v86, *a2, a2[1]);
          uint64_t v39 = *((void *)&v98 + 1);
          uint64_t v82 = *((void *)&v98 + 1);
          for (uint64_t j = v98; j != v39; j += 32)
          {
            std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100]((uint64_t)__p, j);
            uint64_t v106 = 0;
            long long v107 = 0uLL;
            if ((_BYTE)v111)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v106, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
            }
            else
            {
              marrs::mrr::mr::enumerateAllIndices(&v104, *a2, a2[1]);
              uint64_t v106 = v104;
              long long v107 = v105;
            }
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            long long v41 = 0;
            BOOL v42 = (char *)v86;
            long long v43 = v87;
            if (v86 == v87)
            {
              long long v46 = 0;
            }
            else
            {
              long long v44 = (unint64_t *)v106;
              uint64_t v45 = (unint64_t *)v107;
              long long v46 = 0;
              if (v106 != (void *)v107)
              {
                long long v41 = 0;
                long long v46 = 0;
                unint64_t v47 = 0;
                do
                {
                  unint64_t v48 = *(void *)v42;
                  if (*(void *)v42 >= *v44)
                  {
                    if (*v44 >= v48)
                    {
                      if ((unint64_t)v46 >= v47)
                      {
                        uint64_t v50 = (v46 - v41) >> 3;
                        unint64_t v51 = v50 + 1;
                        if ((unint64_t)(v50 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        if ((uint64_t)(v47 - (void)v41) >> 2 > v51) {
                          unint64_t v51 = (uint64_t)(v47 - (void)v41) >> 2;
                        }
                        if (v47 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v52 = v51;
                        }
                        if (v52)
                        {
                          unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
                          unint64_t v48 = *(void *)v42;
                        }
                        else
                        {
                          uint64_t v53 = 0;
                        }
                        long long v54 = (char *)(v52 + 8 * v50);
                        *(void *)long long v54 = v48;
                        unint64_t v49 = v54 + 8;
                        while (v46 != v41)
                        {
                          uint64_t v55 = *((void *)v46 - 1);
                          v46 -= 8;
                          *((void *)v54 - 1) = v55;
                          v54 -= 8;
                        }
                        unint64_t v47 = v52 + 8 * v53;
                        if (v41) {
                          operator delete(v41);
                        }
                        long long v41 = v54;
                      }
                      else
                      {
                        *(void *)long long v46 = v48;
                        unint64_t v49 = v46 + 8;
                      }
                      v42 += 8;
                      long long v46 = v49;
                    }
                    ++v44;
                  }
                  else
                  {
                    v42 += 8;
                  }
                }
                while (v42 != v43 && v44 != v45);
              }
            }
            unint64_t v7 = a5;
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v86, v41, (uint64_t)v46, (v46 - v41) >> 3);
            a2 = v80;
            if (v41) {
              operator delete(v41);
            }
            if (v106) {
              operator delete(v106);
            }
            if ((_BYTE)v111 && *(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            uint64_t v39 = v82;
          }
          long long v56 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string __p = 134217984;
            *(void *)&__p[4] = (v87 - (unsigned char *)v86) >> 3;
            _os_log_impl(&dword_1C9555000, v56, OS_LOG_TYPE_INFO, "[RulebasedMR] - intersection of all filters  - %lu", __p, 0xCu);
          }
          marrs::mrr::mr::pickTopSalientEntity((char **)__p, a2, (unint64_t *)v86, (unint64_t *)v87);
          if (v88[0]) {
            operator delete(v88[0]);
          }
          long long v83 = *(_OWORD *)__p;
          *(_OWORD *)uint64_t v88 = *(_OWORD *)__p;
          uint64_t v89 = *(void *)&__p[16];
          long long v57 = MRRLoggerForCategory(2);
          uint64_t v37 = (void *)*((void *)&v83 + 1);
          uint64_t v38 = (void *)v83;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string __p = 134217984;
            *(void *)&__p[4] = (uint64_t)(*((void *)&v83 + 1) - v83) >> 3;
            _os_log_impl(&dword_1C9555000, v57, OS_LOG_TYPE_INFO, "[RulebasedMR] - most salient entity count  - %lu", __p, 0xCu);
          }
          if (v86)
          {
            char v87 = (char *)v86;
            operator delete(v86);
          }
        }
        if (v38 != v37)
        {
          do
          {
            if (0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) <= *v38) {
              std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
            }
            marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)__p, (const marrs::mrr::mr::MRREntity *)(*a2 + 216 * *v38));
            unint64_t v59 = v7[1];
            unint64_t v58 = v7[2];
            if (v59 >= v58)
            {
              unint64_t v61 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v59 - *v7) >> 3);
              unint64_t v62 = v61 + 1;
              if (v61 + 1 > 0xBE82FA0BE82FA0) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v63 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v58 - *v7) >> 3);
              if (2 * v63 > v62) {
                unint64_t v62 = 2 * v63;
              }
              if (v63 >= 0x5F417D05F417D0) {
                unint64_t v64 = 0xBE82FA0BE82FA0;
              }
              else {
                unint64_t v64 = v62;
              }
              long long v109 = v84;
              if (v64) {
                unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v64);
              }
              else {
                uint64_t v65 = 0;
              }
              uint64_t v106 = (void *)v64;
              *(void *)&long long v107 = v64 + 344 * v61;
              *((void *)&v107 + 1) = v107;
              unint64_t v108 = v64 + 344 * v65;
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(v107, v85, (marrs::mrr::mr::MRREntity *)__p, (uint64_t)v100, v116);
              *((void *)&v107 + 1) += 344;
              std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(v7, &v106);
              uint64_t v60 = v7[1];
              std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v106);
            }
            else
            {
              std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(v7[1], v85, (marrs::mrr::mr::MRREntity *)__p, (uint64_t)v100, v116);
              uint64_t v60 = v59 + 344;
              v7[1] = v59 + 344;
            }
            v7[1] = v60;
            uint64_t v106 = v122;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            if (v121 < 0) {
              operator delete(v120);
            }
            if (v119 < 0) {
              operator delete(v118);
            }
            uint64_t v106 = &v117;
            std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
            if (v115 < 0) {
              operator delete(v114);
            }
            if (v113 < 0) {
              operator delete(v112);
            }
            if (SHIBYTE(v111) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            ++v38;
          }
          while (v38 != v37);
          uint64_t v37 = v88[0];
        }
        uint64_t v5 = v77;
        std::string::size_type v11 = v79;
        if (v37)
        {
          v88[1] = v37;
          operator delete(v37);
        }
        if (v91 && v90[0]) {
          operator delete(v90[0]);
        }
        if (v93 && v92[0]) {
          operator delete(v92[0]);
        }
        if (v95 && v94[0]) {
          operator delete(v94[0]);
        }
        if (v97 && v96[0]) {
          operator delete(v96[0]);
        }
        *(void *)std::string __p = &v98;
        std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      else
      {
        long long v26 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string __p = 0;
          _os_log_impl(&dword_1C9555000, v26, OS_LOG_TYPE_INFO, "[RulebasedMR] missing mention", __p, 2u);
        }
      }
      ++v11;
    }
    while (v11 != v78);
  }
  unint64_t v66 = *a4;
  unint64_t v67 = a4[1];
  if (*a4 != v67)
  {
    do
    {
      uint64_t v68 = *v66;
      LODWORD(v106) = 1;
      uint64_t v69 = operator new(4uLL);
      _DWORD *v69 = 3;
      *(void *)&__p[16] = v69 + 1;
      *(void *)std::string __p = v69;
      *(void *)&__p[8] = v69 + 1;
      unint64_t v70 = v7[1];
      if (v70 >= v7[2])
      {
        uint64_t v71 = std::vector<marrs::mrr::mr::MRMatchingResult>::__emplace_back_slow_path<sirinluinternal::MatchingSpan const&,int,std::vector<marrs::mrr::mr::MRResultType>>(v7, v68, (int *)&v106, (uint64_t)__p);
      }
      else
      {
        marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v7[1], 1.0, v68, (uint64_t)__p);
        uint64_t v71 = v70 + 344;
        v7[1] = v70 + 344;
      }
      v7[1] = v71;
      operator delete(v69);
      ++v66;
    }
    while (v66 != v67);
  }
  unint64_t v72 = v7[1];
  unint64_t v73 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * ((uint64_t)(v72 - *v7) >> 3));
  if (v72 == *v7) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = v73;
  }
  std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(*v7, v72, v74, 1);
  if (v100[0]) {
    operator delete(v100[0]);
  }
  *(void *)std::string __p = &v101;
  std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C95B95D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  a53 = &a64;
  std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::optional<std::vector<unsigned long>>>::emplace_back<std::optional<std::vector<unsigned long>>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v20 = v5;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MDMentionOverride>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v17 = v12;
    *(void *)&long long v18 = v12 + 32 * v9;
    *((void *)&v18 + 1) = v18;
    unint64_t v19 = v12 + 32 * v13;
    std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](v18, a2);
    uint64_t v8 = v18 + 32;
    uint64_t v14 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>(v5, a1[1], a1[1], *a1, *a1, v18, v18);
    long long v15 = *(_OWORD *)a1;
    *a1 = v14;
    a1[1] = v8;
    long long v18 = v15;
    uint64_t v16 = a1[2];
    a1[2] = v19;
    unint64_t v19 = v16;
    unint64_t v17 = v15;
    uint64_t result = std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    uint64_t result = std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](a1[1], a2);
    uint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1C95B992C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::vector<unsigned long>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned long>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      unint64_t v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::vector<std::optional<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
        {
          unint64_t v6 = (void *)*((void *)v4 - 4);
          if (v6)
          {
            *((void *)v4 - 3) = v6;
            operator delete(v6);
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,sirinluinternal::MatchingSpan const&,double &,marrs::mrr::mr::MRREntity &,std::vector<marrs::mrr::mr::MRResultType> &>(uint64_t a1, uint64_t a2, marrs::mrr::mr::MRREntity *a3, uint64_t a4, double a5)
{
  float v8 = a5;
  marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v9, a3);
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(a1, v8, a2, (const marrs::mrr::mr::MRREntity *)&v9, a4);
  uint64_t v22 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  uint64_t v22 = (void **)&v16;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
}

void sub_1C95B9B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<marrs::mrr::mr::MRMatchingResult>::__emplace_back_slow_path<sirinluinternal::MatchingSpan const&,int,std::vector<marrs::mrr::mr::MRResultType>>(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4)
{
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = a1 + 2;
  if (0x5F417D05F417D06 * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x5F417D05F417D06 * ((a1[2] - *a1) >> 3);
  }
  if (0x82FA0BE82FA0BE83 * ((a1[2] - *a1) >> 3) >= 0x5F417D05F417D0) {
    unint64_t v11 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v11 = v5;
  }
  unint64_t v19 = v10;
  if (v11) {
    unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v15 = v11;
  uint64_t v16 = v11 + 344 * v4;
  uint64_t v17 = v16;
  unint64_t v18 = v11 + 344 * v12;
  marrs::mrr::mr::MRMatchingResult::MRMatchingResult(v16, (float)*a3, a2, a4);
  uint64_t v17 = v16 + 344;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, &v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1C95B9CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::vector<unsigned long>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1C95B9D20(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    size_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::optional<std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  size_t v3 = *(void ***)(a1 + 8);
  char v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((unsigned char *)v2 - 8))
      {
        unint64_t v5 = *v4;
        if (*v4)
        {
          *(v2 - 3) = v5;
          operator delete(v5);
          unint64_t v4 = *(void ***)(a1 + 16);
        }
      }
      char v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::optional<std::vector<unsigned long>>>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>,std::reverse_iterator<std::optional<std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      *(unsigned char *)(a7 + v8 - 32) = 0;
      uint64_t v10 = a3 + v8;
      *(unsigned char *)(a7 + v8 - 8) = 0;
      if (*(unsigned char *)(a3 + v8 - 8))
      {
        unint64_t v11 = (void *)(v10 - 32);
        *(void *)(a7 + v8 - 32) = 0;
        *(void *)(a7 + v8 - 24) = 0;
        *(void *)(a7 + v8 - 16) = 0;
        *(_OWORD *)(v9 - 32) = *(_OWORD *)(v10 - 32);
        *(void *)(v9 - 16) = *(void *)(v10 - 16);
        *unint64_t v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        *(unsigned char *)(v9 - 8) = 1;
      }
      v8 -= 32;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::vector<unsigned long>>>,std::optional<std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(unsigned char *)(v3 - 8))
      {
        unint64_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
      }
      v3 -= 32;
    }
  }
  return a1;
}

float *marrs::TensorConvertor<float>::convert(void *a1, float a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = operator new(8uLL);
  void *v4 = 1;
  *a1 = v4;
  a1[1] = v4 + 1;
  a1[2] = v4 + 1;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  unint64_t v5 = (float *)operator new(4uLL);
  a1[3] = v5;
  float *v5 = a2;
  uint64_t result = v5 + 1;
  a1[4] = result;
  a1[5] = result;
  return result;
}

void sub_1C95B9EFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer marrs::qr::processing::Vocab::addWord(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::pointer result = (std::vector<std::string>::pointer)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)a1, (unsigned __int8 *)a2);
  if (result) {
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_44;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v15 = (std::string *)(v13 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v16 = *(void *)(a1 + 24);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v13 + 4) = *(void *)(a2 + 16);
    uint64_t v16 = v6;
  }
  *((void *)v13 + 5) = 0;
  float v17 = (float)(unint64_t)(v16 + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v2);
  if (v24)
  {
    *(void *)uint64_t v13 = *v24;
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v13;
    *(void *)(v23 + 8 * v2) = a1 + 16;
    if (!*(void *)v13) {
      goto LABEL_43;
    }
    unint64_t v25 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
  }
  *uint64_t v24 = v13;
LABEL_43:
  ++*(void *)(a1 + 24);
LABEL_44:
  *((void *)v13 + 5) = v6;
  long long v26 = (std::vector<std::string> *)(a1 + 40);
  long long v27 = *(std::string **)(a1 + 48);
  if ((unint64_t)v27 >= *(void *)(a1 + 56))
  {
    std::vector<std::string>::pointer result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v26, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v26, (long long *)a2);
    std::vector<std::string>::pointer result = v27 + 1;
  }
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

void sub_1C95BA18C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

marrs::qr::processing::Vocab *marrs::qr::processing::Vocab::Vocab(marrs::qr::processing::Vocab *this, char a2, unsigned int a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 5) = 0;
  uint64_t v6 = (std::vector<std::string> *)((char *)this + 40);
  *((_DWORD *)this + 8) = 1065353216;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)a3);
  std::vector<std::string>::reserve(v6, a3);
  if ((a2 & 1) == 0)
  {
    for (unint64_t i = &marrs::qr::processing::Vocab::reservedTokens;
          i != (char **)&_swift_FORCE_LOAD___swiftFoundation___Marrs;
          i += 2)
    {
      size_t v8 = (size_t)i[1];
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = *i;
      if (v8 >= 0x17)
      {
        uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v11 = v8 | 7;
        }
        uint64_t v12 = v11 + 1;
        uint8x8_t v10 = (void **)operator new(v11 + 1);
        __dst[1] = (void *)v8;
        unint64_t v15 = v12 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v15) = i[1];
        uint8x8_t v10 = __dst;
        if (!v8) {
          goto LABEL_11;
        }
      }
      memmove(v10, v9, v8);
LABEL_11:
      *((unsigned char *)v10 + v8) = 0;
      marrs::qr::processing::Vocab::addWord((uint64_t)this, (uint64_t)__dst);
      if (SHIBYTE(v15) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  *((unsigned char *)this + 64) = 0;
  return this;
}

void sub_1C95BA2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

uint64_t marrs::qr::processing::Vocab::toIndex(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, a2);
  if (v3) {
    return *((void *)v3 + 5);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "[OOV]");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  unint64_t v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "[OOV]");
  size_t v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v4 = *((void *)v8 + 5);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1C95BA3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL marrs::qr::orchestration::MultiTurnChecker::verify(marrs::qr::orchestration::MultiTurnChecker *this, const QRRequest *a2)
{
  return (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)a2->var1.var1 - (char *)a2->var1.var0) >> 4)) > 1;
}

BOOL marrs::qr::orchestration::AsrUtteranceChecker::verify(marrs::qr::orchestration::AsrUtteranceChecker *this, const QRRequest *a2)
{
  return marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 1);
}

BOOL marrs::qr::orchestration::NlUtteranceChecker::verify(marrs::qr::orchestration::NlUtteranceChecker *this, const QRRequest *a2)
{
  return marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper((uint64_t *)a2->var1.var0, (uint64_t *)a2->var1.var1, 0);
}

uint64_t marrs::qr::orchestration::AsrConfidenceChecker::verify(marrs::qr::orchestration::AsrConfidenceChecker *this, const QRRequest *a2)
{
  var0 = a2->var1.var0;
  for (unint64_t i = a2->var1.var1; var0 != i; var0 = (QRInteraction *)((char *)var0 + 112))
  {
    for (uint64_t j = var0->var0.var0; j != var0->var0.var1; uint64_t j = (QRUtterance *)((char *)j + 96))
    {
      for (unint64_t k = j[1].var0.var0; k != j[1].var0.var1; k += 160)
      {
        uint64_t result = 0;
        double v7 = *(double *)(k + 96);
        if (v7 < 0.0 || v7 > 1000.0) {
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t marrs::qr::orchestration::PreviousNLUtteranceChecker::verify(marrs::qr::orchestration::PreviousNLUtteranceChecker *this, const QRRequest *a2)
{
  var0 = a2->var1.var0;
  unint64_t var1 = a2->var1.var1;
  if (var0 != var1)
  {
    while (2)
    {
      uint64_t v4 = var0->var1.var0;
      unint64_t v5 = var0->var1.var1;
      while (v4 != v5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(&v8, v4->var1.var0.var1.var0[0], v4->var1.var0.var1.var0[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4->var1.var0.var1.var0[1] - v4->var1.var0.var1.var0[0]) >> 5));
        if (v8 == v9)
        {
          uint64_t v11 = (void **)&v8;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v11);
          return 0;
        }
        if (*((char *)&v4->var1.var0.var0.var0.var1 + 23) < 0) {
          unint64_t v6 = v4->var1.var0.var0.var0.var1.var1;
        }
        else {
          unint64_t v6 = *((unsigned __int8 *)&v4->var1.var0.var0.var0.var1 + 23);
        }
        uint64_t v11 = (void **)&v8;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v11);
        if (!v6) {
          return 0;
        }
        uint64_t v4 = (QRUtterance *)((char *)v4 + 96);
      }
      var0 = (QRInteraction *)((char *)var0 + 112);
      if (var0 != var1) {
        continue;
      }
      break;
    }
  }
  return 1;
}

BOOL marrs::qr::orchestration::CurrentSiriResponseChecker::verify(marrs::qr::orchestration::CurrentSiriResponseChecker *this, const QRRequest *a2)
{
  unint64_t var1 = a2->var1.var1;
  return a2->var1.var0 == var1 || var1[-1].var2.var1 == var1[-1].var2.var2.var0;
}

void RepetitionPredictorResult::RepetitionPredictorResult(RepetitionPredictorResult *this, const RepetitionPredictorResult *a2)
{
  *((void *)this + 2) = 0;
  uint64_t v4 = (void **)((char *)this + 16);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = 0;
  unint64_t v5 = (std::string *)((char *)this + 48);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)this = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 2);
  if (*((void *)a2 + 3) != v6)
  {
    double v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *((void *)this + 4);
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v11 = (char *)*v4;
        uint64_t v12 = (v7 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
          uint64_t v11 = (char *)*((void *)this + 2);
          double v7 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v16 = 0;
        }
        float v17 = (_DWORD *)(v15 + 4 * v12);
        *float v17 = *(_DWORD *)(v6 + 4 * v8);
        uint64_t v10 = (char *)(v17 + 1);
        while (v7 != v11)
        {
          int v18 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--float v17 = v18;
        }
        *((void *)this + 2) = v17;
        *((void *)this + 3) = v10;
        *((void *)this + 4) = v15 + 4 * v16;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)double v7 = *(_DWORD *)(v6 + 4 * v8);
        uint64_t v10 = v7 + 4;
      }
      *((void *)this + 3) = v10;
      ++v8;
      uint64_t v6 = *((void *)a2 + 2);
      double v7 = v10;
    }
    while (v8 < (*((void *)a2 + 3) - v6) >> 2);
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  std::string::operator=(v5, (const std::string *)a2 + 2);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
}

void sub_1C95BA730(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void RepetitionPredictorResult::AugmentationToWords(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  std::vector<std::string>::__clear[abi:ne180100](a4);
  unint64_t v9 = *(_DWORD **)(a1 + 16);
  unint64_t v8 = *(_DWORD **)(a1 + 24);
  if (v9 != v8)
  {
    unsigned int v10 = -1431655765 * ((a2[1] - *a2) >> 3);
    do
    {
      unsigned int v11 = *v9 - 1;
      if (v11 >= v10) {
        uint64_t v12 = (long long *)(*a3 + 24 * (v11 - v10));
      }
      else {
        uint64_t v12 = (long long *)(*a2 + 24 * v11);
      }
      unint64_t v13 = (std::string *)a4[1];
      if ((unint64_t)v13 >= a4[2])
      {
        std::vector<std::string>::pointer v14 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((std::vector<std::string> *)a4, v12);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v12);
        std::vector<std::string>::pointer v14 = v13 + 1;
      }
      a4[1] = (uint64_t)v14;
      ++v9;
    }
    while (v9 != v8);
  }
}

void RepetitionPredictorResult::get_model_output_string(RepetitionPredictorResult *this, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  std::to_string(&v40, *(float *)a2);
  uint64_t v4 = std::string::insert(&v40, 0, "No:");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v41, ", ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unint64_t v8 = std::string::append(&v42, "Partial:");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, *(float *)(a2 + 4));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v10 = &v39;
  }
  else {
    unsigned int v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::string::append(&v43, (const std::string::value_type *)v10, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::pointer v14 = std::string::append(&v44, ", ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v47, "Full:");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, *(float *)(a2 + 8));
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v38;
  }
  else {
    int v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v38.__r_.__value_.__l.__size_;
  }
  unint64_t v20 = std::string::append(&v45, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  size_t v22 = std::string::append(&v46, ", ");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  *((void *)this + 2) = *((void *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)this = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  int v24 = *((char *)this + 23);
  if (v24 >= 0) {
    size_t v25 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v25 = *((void *)this + 1);
  }
  long long v26 = &v46;
  std::string::basic_string[abi:ne180100]((uint64_t)&v46, v25 + 16);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v26 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if (v24 >= 0) {
      long long v27 = this;
    }
    else {
      long long v27 = *(RepetitionPredictorResult **)this;
    }
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "AugmentationIdx:");
  if (v24 < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = v46;
  uint64_t v28 = *(void *)(a2 + 16);
  if (*(void *)(a2 + 24) != v28)
  {
    unint64_t v29 = 0;
    do
    {
      std::to_string(&v45, *(_DWORD *)(v28 + 4 * v29));
      int v30 = *((char *)this + 23);
      if (v30 >= 0) {
        uint64_t v31 = (const std::string::value_type *)this;
      }
      else {
        uint64_t v31 = *(const std::string::value_type **)this;
      }
      if (v30 >= 0) {
        std::string::size_type v32 = *((unsigned __int8 *)this + 23);
      }
      else {
        std::string::size_type v32 = *((void *)this + 1);
      }
      int v33 = std::string::insert(&v45, 0, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append(&v46, " ");
      std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
      v47.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
      char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 23) < 0) {
        operator delete(*(void **)this);
      }
      *(void *)this = v36;
      *((void *)this + 1) = v47.__r_.__value_.__r.__words[0];
      *(void *)((char *)this + 15) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
      *((unsigned char *)this + 23) = v37;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      ++v29;
      uint64_t v28 = *(void *)(a2 + 16);
    }
    while (v29 < (*(void *)(a2 + 24) - v28) >> 2);
  }
}

void sub_1C95BAC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v55 < 0) {
    operator delete(*v54);
  }
  _Unwind_Resume(exception_object);
}

void PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>()
{
}

void sub_1C95BAE8C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *marrs::qr::orchestration::InputCheckerUtil::getUtteranceTokens(void *result, void *a2, int a3)
{
  if (a3 == 1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t v4 = a2[8];
    uint64_t v3 = a2[9];
    return std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(result, v4, v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  if (!a3)
  {
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t v4 = a2[5];
    uint64_t v3 = a2[6];
    return std::vector<marrs::qr::orchestration::QRToken>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRToken*,marrs::qr::orchestration::QRToken*>(result, v4, v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 5));
  }
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

BOOL marrs::qr::orchestration::InputCheckerUtil::utteranceCheckerHelper(uint64_t *a1, uint64_t *a2, int a3)
{
  if (a1 == a2) {
    return 0;
  }
  long long v5 = a1;
  while (2)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    BOOL v8 = *v5 != v7;
    if (*v5 != v7)
    {
      do
      {
        marrs::qr::orchestration::InputCheckerUtil::getUtteranceTokens(v11, (void *)v6, a3);
        if (v11[0] == v11[1])
        {
          uint64_t v12 = (void **)v11;
          std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v12);
          return 0;
        }
        if (*(char *)(v6 + 39) < 0) {
          uint64_t v9 = *(void *)(v6 + 24);
        }
        else {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 39);
        }
        uint64_t v12 = (void **)v11;
        std::vector<marrs::qr::orchestration::QRToken>::__destroy_vector::operator()[abi:ne180100](&v12);
        if (!v9) {
          return 0;
        }
        v6 += 96;
      }
      while (v6 != v7);
      v5 += 14;
      if (v5 != a2) {
        continue;
      }
    }
    break;
  }
  return v8;
}

void *std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      std::vector<float>::__throw_length_error[abi:ne180100]();
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v12];
    size_t v13 = a3 - v6;
    if (v13) {
      uint64_t result = memmove(result, v6, v13);
    }
    std::vector<std::string>::pointer v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  std::vector<std::string>::pointer v14 = (void **)(result + 1);
  long long v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    int v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v15 - v9);
    uint64_t v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    int v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  std::string *v14 = &v9[v13];
  return result;
}

void *std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
}

void sub_1C95BB180(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType(marrs::qr::inference_engine::LSTMDecoderInputType *this)
{
  unint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

marrs::qr::inference_engine::LSTMDecoderInputType *marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType(marrs::qr::inference_engine::LSTMDecoderInputType *this, const marrs::qr::inference_engine::LSTMDecoderInputType *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 12, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 15, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 2);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 18, *((const void **)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 3);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 21, *((const void **)a2 + 21), *((void *)a2 + 22), (uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 2);
  return this;
}

void sub_1C95BB3B4(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *((void *)v1 + 19) = v6;
    operator delete(v6);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v3);
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v2);
  marrs::inference_engine::InferenceTensor::~InferenceTensor(v1);
  _Unwind_Resume(a1);
}

void sub_1C95BB430()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C95BB428);
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::forward_decoder(void *a1, std::chrono::steady_clock::time_point *a2, void *a3, uint64_t **a4)
{
  long long v5 = a2;
  v191[5] = *MEMORY[0x1E4F143B8];
  a2[32].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = (char *)a4[12];
  if ((char *)a4[13] - v7 != 24)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::to_string(&v177, a4[13] - a4[12]);
    BOOL v104 = std::string::insert(&v177, 0, "encodingsShape rank mismatch, should be 3, found");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    uint64_t v123 = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string buf = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v187, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)v187, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_decoder_module.cpp", 58);
  }
  *(void *)&v187[0] = "encoder_outputs";
  LODWORD(v173) = *((void *)v7 + 2);
  LODWORD(v167) = *(void *)v7;
  LODWORD(v160) = -1;
  LODWORD(v154) = -1;
  LODWORD(v166[0]) = -1;
  int v153 = 2;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    uint64_t v106 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to reshape the decoder.");
    std::string::basic_string[abi:ne180100]<0>(&v177, "QueryRewrite");
    InferenceError::InferenceError(v106, (uint64_t)buf, (uint64_t)&v177, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_decoder_module.cpp", 70);
  }
  v5[33].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[32].__d_.__rep_) / 1000;
  v5[34].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(v5[2].__d_.__rep_ + 8));
  v5[35].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[34].__d_.__rep_) / 1000;
  v5[50].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5[51].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[50].__d_.__rep_) / 1000;
  v5[52].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v5[53].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[52].__d_.__rep_) / 1000;
  v5[54].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v8 = a4[12];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[2];
  unint64_t v11 = operator new(0x10uLL);
  *unint64_t v11 = v9;
  v11[1] = v10;
  memset(buf, 0, sizeof(buf));
  uint64_t v123 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v11, (uint64_t)(v11 + 2), 2uLL);
  BOOL v124 = 0;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v124, a4[15], (uint64_t)a4[16], ((char *)a4[16] - (char *)a4[15]) >> 2);
  uint64_t v12 = **a4;
  uint64_t v13 = (*a4)[2];
  std::vector<std::string>::pointer v14 = operator new(0x10uLL);
  void *v14 = v12;
  v14[1] = v13;
  memset(&v177, 0, sizeof(v177));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v177, v14, (uint64_t)(v14 + 2), 2uLL);
  uint64_t v179 = 0;
  std::string::size_type v178 = 0;
  uint64_t v180 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v178, a4[3], (uint64_t)a4[4], ((char *)a4[4] - (char *)a4[3]) >> 2);
  memset(v187, 0, 24);
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v187, v14, (uint64_t)(v14 + 2), 2uLL);
  memset((char *)&v187[1] + 8, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v187[1] + 1, a4[9], (uint64_t)a4[10], ((char *)a4[10] - (char *)a4[9]) >> 2);
  v5[55].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[54].__d_.__rep_) / 1000;
  unint64_t v15 = v11[1];
  unint64_t v16 = operator new(0x10uLL);
  size_t v174 = v16 + 2;
  *unint64_t v16 = 1;
  v16[1] = v15;
  *(void *)&long long v173 = v16;
  *((void *)&v173 + 1) = v16 + 2;
  LODWORD(v167) = 0;
  std::vector<float>::vector(&__p, v15, &v167);
  memset(v141, 0, sizeof(v141));
  long long v17 = (void *)v177.__r_.__value_.__r.__words[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v141, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_, (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 3);
  memset(v142, 0, sizeof(v142));
  int v18 = v178;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v142, v178, v179, (v179 - (uint64_t)v178) >> 2);
  memset(v143, 0, sizeof(v143));
  std::string::size_type v19 = *(void **)&v187[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *(const void **)&v187[0], *((uint64_t *)&v187[0] + 1), (uint64_t)(*((void *)&v187[0] + 1) - *(void *)&v187[0]) >> 3);
  memset(v144, 0, sizeof(v144));
  unint64_t v20 = (void *)*((void *)&v187[1] + 1);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v144, *((const void **)&v187[1] + 1), *(uint64_t *)&v187[2], (uint64_t)(*(void *)&v187[2] - *((void *)&v187[1] + 1)) >> 2);
  uint64_t v146 = 0;
  size_t v145 = 0;
  uint64_t v147 = 0;
  long long v21 = *(void **)buf;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v145, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
  long long v109 = a1;
  uint64_t v149 = 0;
  char v148 = 0;
  uint64_t v150 = 0;
  size_t v22 = v124;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v148, v124, (uint64_t)v125, (v125 - (unsigned char *)v124) >> 2);
  memset(v151, 0, sizeof(v151));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v151, (const void *)v173, *((uint64_t *)&v173 + 1), (uint64_t)(*((void *)&v173 + 1) - v173) >> 3);
  memset(v152, 0, sizeof(v152));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v152, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((void)v173)
  {
    *((void *)&v173 + 1) = v173;
    operator delete((void *)v173);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v18) {
    operator delete(v18);
  }
  if (v17) {
    operator delete(v17);
  }
  operator delete(v14);
  if (v22) {
    operator delete(v22);
  }
  if (v21) {
    operator delete(v21);
  }
  operator delete(v11);
  v5[42].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1) {
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_5);
  }
  long long v23 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  os_signpost_id_t v24 = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v24, "RunDecoderDuration", "CCQRAer Run decoder duration", buf, 2u);
  }
  unint64_t v110 = v24 - 1;
  os_signpost_id_t v107 = v24;
  log = v23;
  if (v5[58].__d_.__rep_)
  {
    size_t v25 = 0;
    long long v26 = 0;
    unint64_t v114 = 0;
    long long v27 = 0;
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 1;
    unint64_t v111 = v5;
    while (1)
    {
      uint64_t v113 = v30;
      unint64_t v118 = v29;
      char v119 = v25;
      v5[44].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = (std::chrono::steady_clock::now().__d_.__rep_ - v5[44].__d_.__rep_) / 1000;
      v5[45].__d_.__rep_ = v31;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (char *)v5[37].__d_.__rep_;
      unint64_t v32 = v5[38].__d_.__rep_;
      if ((unint64_t)rep >= v32)
      {
        uint64_t v35 = (char *)v5[36].__d_.__rep_;
        uint64_t v36 = (rep - v35) >> 3;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 2 > v37) {
          unint64_t v37 = v38 >> 2;
        }
        BOOL v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v39) {
          unint64_t v40 = v37;
        }
        if (v40)
        {
          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
          uint64_t v35 = (char *)v5[36].__d_.__rep_;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (char *)v5[37].__d_.__rep_;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = v5[45].__d_.__rep_;
        }
        else
        {
          uint64_t v41 = 0;
        }
        std::string v42 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)(v40 + 8 * v36);
        *std::string v42 = v31;
        long long v34 = v42 + 1;
        while (rep != v35)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = *((void *)rep - 1);
          rep -= 8;
          *--std::string v42 = v43;
        }
        v5[36].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v42;
        v5[37].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v34;
        v5[38].__d_.__rep_ = v40 + 8 * v41;
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v31;
        long long v34 = rep + 8;
      }
      v5[37].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v34;
      v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v45 = v5[2].__d_.__rep_;
      marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177, (const marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
      std::string::basic_string[abi:ne180100]<0>(&v173, "h_0");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)&v177);
      if (SHIBYTE(v174) < 0) {
        operator delete((void *)v173);
      }
      std::string::basic_string[abi:ne180100]<0>(&v173, "c_0");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v181);
      if (SHIBYTE(v174) < 0) {
        operator delete((void *)v173);
      }
      std::string::basic_string[abi:ne180100]<0>(&v173, "embedded_inputs");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v185);
      if (SHIBYTE(v174) < 0) {
        operator delete((void *)v173);
      }
      std::string::basic_string[abi:ne180100]<0>(&v173, "encoder_outputs");
      marrs::inference_engine::EspressoModule::setInput(v45, (uint64_t)&v173, (uint64_t)v183);
      if (SHIBYTE(v174) < 0) {
        operator delete((void *)v173);
      }
      marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v45 + 8));
      memset(v191, 0, 32);
      long long v190 = 0u;
      long long v188 = 0u;
      memset(v189, 0, sizeof(v189));
      memset(v187, 0, sizeof(v187));
      std::string::basic_string[abi:ne180100]<0>(&v167, "h");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0) {
        operator delete(v167);
      }
      long long v188 = v173;
      *(_OWORD *)&v189[1] = __p;
      v189[0] = v174;
      v189[3] = v176;
      std::string::basic_string[abi:ne180100]<0>(&v167, "c");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0) {
        operator delete(v167);
      }
      long long v190 = v173;
      *(_OWORD *)&v191[1] = __p;
      v191[0] = v174;
      v191[3] = v176;
      std::string::basic_string[abi:ne180100]<0>(&v167, "logits");
      marrs::inference_engine::EspressoModule::getOutput((uint64_t)&v173, v45);
      if (SHIBYTE(v169) < 0) {
        operator delete(v167);
      }
      v187[0] = v173;
      *(_OWORD *)((char *)&v187[1] + 8) = __p;
      *(void *)&v187[1] = v174;
      *((void *)&v187[2] + 1) = v176;
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = (std::chrono::steady_clock::now().__d_.__rep_ - v44.__d_.__rep_) / 1000;
      v5[47].__d_.__rep_ = v46;
      uint64_t v48 = (char *)v5[40].__d_.__rep_;
      unint64_t v47 = v5[41].__d_.__rep_;
      if ((unint64_t)v48 >= v47)
      {
        uint64_t v50 = (char *)v5[39].__d_.__rep_;
        uint64_t v51 = (v48 - v50) >> 3;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v53 = v47 - (void)v50;
        if (v53 >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        BOOL v39 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v39) {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v54);
          uint64_t v50 = (char *)v5[39].__d_.__rep_;
          uint64_t v48 = (char *)v5[40].__d_.__rep_;
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = v5[47].__d_.__rep_;
        }
        else
        {
          uint64_t v55 = 0;
        }
        long long v56 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)(v54 + 8 * v51);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v56 = v46;
        unint64_t v49 = v56 + 1;
        while (v48 != v50)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v57 = *((void *)v48 - 1);
          v48 -= 8;
          *--long long v56 = v57;
        }
        v5[39].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v56;
        v5[40].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v49;
        v5[41].__d_.__rep_ = v54 + 8 * v55;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v48 = v46;
        unint64_t v49 = v48 + 8;
      }
      v5[40].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v49;
      long long v173 = 0uLL;
      size_t v174 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v173, (const void *)v188, *((uint64_t *)&v188 + 1), (uint64_t)(*((void *)&v188 + 1) - v188) >> 3);
      long long __p = 0uLL;
      uint64_t v176 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)v189[1], v189[2], (uint64_t)(v189[2] - v189[1]) >> 2);
      uint64_t v168 = 0;
      uint64_t v167 = 0;
      uint64_t v169 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v167, (const void *)v190, *((uint64_t *)&v190 + 1), (uint64_t)(*((void *)&v190 + 1) - v190) >> 3);
      int v170 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v170, (const void *)v191[1], v191[2], (uint64_t)(v191[2] - v191[1]) >> 2);
      uint64_t v58 = *((void *)&v187[1] + 1);
      if (*((void *)&v187[1] + 1) == *(void *)&v187[2])
      {
        uint64_t v60 = *((void *)&v187[1] + 1);
      }
      else
      {
        uint64_t v59 = *((void *)&v187[1] + 1) + 4;
        uint64_t v60 = *((void *)&v187[1] + 1);
        if (*((void *)&v187[1] + 1) + 4 != *(void *)&v187[2])
        {
          float v61 = **((float **)&v187[1] + 1);
          uint64_t v60 = *((void *)&v187[1] + 1);
          unint64_t v62 = (float *)(*((void *)&v187[1] + 1) + 4);
          do
          {
            float v63 = *v62++;
            float v64 = v63;
            if (v61 < v63)
            {
              float v61 = v64;
              uint64_t v60 = v59;
            }
            uint64_t v59 = (uint64_t)v62;
          }
          while (v62 != *(float **)&v187[2]);
        }
      }
      memset(v166, 0, sizeof(v166));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v166, v145, v146, (v146 - (uint64_t)v145) >> 3);
      uint64_t v161 = 0;
      unint64_t v160 = 0;
      uint64_t v162 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v160, v145, v146, (v146 - (uint64_t)v145) >> 3);
      int v163 = 0;
      uint64_t v164 = 0;
      uint64_t v165 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v163, v148, v149, (v149 - (uint64_t)v148) >> 2);
      uint64_t v65 = (unint64_t *)v166[0];
      uint64_t v66 = *(void *)(v166[0] + 8);
      unint64_t v67 = operator new(0x10uLL);
      uint64_t v68 = (v60 - v58) >> 2;
      BOOL v156 = v67 + 2;
      *unint64_t v67 = 1;
      v67[1] = v66;
      size_t v154 = v67;
      uint64_t v117 = (uint64_t)(v67 + 2);
      int v155 = v67 + 2;
      uint64_t v120 = v67;
      char v121 = v163;
      unint64_t v69 = v65[1];
      size_t v158 = 0;
      uint64_t v159 = 0;
      int v157 = 0;
      if (v69)
      {
        if (v69 >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v69);
        uint64_t v71 = v70;
        uint64_t v73 = v72;
        unint64_t v74 = v69 * v68;
        uint64_t v75 = &v121[4 * v69 * v68];
        unint64_t v76 = v69 + v69 * v68;
        int v157 = v70;
        uint64_t v159 = &v70[4 * v73];
        size_t v77 = 4 * v76 - 4 * v69 * v68;
        if (v76 != v74) {
          memmove(v70, v75, v77);
        }
        uint64_t v78 = (uint64_t)&v71[v77];
        size_t v158 = &v71[v77];
      }
      else
      {
        uint64_t v78 = 0;
        uint64_t v71 = 0;
      }
      memset(&v177, 0, sizeof(v177));
      unint64_t v79 = (void *)v173;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v177, (const void *)v173, *((uint64_t *)&v173 + 1), (uint64_t)(*((void *)&v173 + 1) - v173) >> 3);
      char v115 = v65;
      double v116 = v79;
      std::string::size_type v178 = 0;
      uint64_t v179 = 0;
      uint64_t v180 = 0;
      unint64_t v80 = (void *)__p;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v178, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
      uint64_t v81 = v68;
      memset(v181, 0, sizeof(v181));
      uint64_t v82 = v167;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v181, v167, v168, (v168 - (uint64_t)v167) >> 3);
      memset(v182, 0, sizeof(v182));
      long long v83 = v170;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v182, v170, v171, (v171 - (uint64_t)v170) >> 2);
      memset(v183, 0, sizeof(v183));
      std::vector<std::string> v84 = v160;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v183, v160, v161, (v161 - (uint64_t)v160) >> 3);
      memset(v184, 0, sizeof(v184));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v184, v121, v164, (v164 - (uint64_t)v121) >> 2);
      memset(v185, 0, sizeof(v185));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v185, v120, v117, 2uLL);
      memset(v186, 0, sizeof(v186));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v186, v71, v78, (v78 - (uint64_t)v71) >> 2);
      *(void *)std::string buf = v81;
      uint64_t v123 = 0;
      BOOL v124 = 0;
      *(void *)&uint8_t buf[8] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[8], *((const void **)&v187[1] + 1), *(uint64_t *)&v187[2], (uint64_t)(*(void *)&v187[2] - *((void *)&v187[1] + 1)) >> 2);
      marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125, (const marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v177);
      if (v71)
      {
        size_t v158 = v71;
        operator delete(v71);
      }
      operator delete(v120);
      if (v121) {
        operator delete(v121);
      }
      unint64_t v29 = v118;
      if (v84) {
        operator delete(v84);
      }
      operator delete(v115);
      if (v83) {
        operator delete(v83);
      }
      long long v5 = v111;
      if (v82) {
        operator delete(v82);
      }
      if (v80) {
        operator delete(v80);
      }
      size_t v25 = v119;
      if (v116) {
        operator delete(v116);
      }
      if (v191[1])
      {
        v191[2] = v191[1];
        operator delete((void *)v191[1]);
      }
      if ((void)v190)
      {
        *((void *)&v190 + 1) = v190;
        operator delete((void *)v190);
      }
      if (v189[1])
      {
        v189[2] = v189[1];
        operator delete((void *)v189[1]);
      }
      if ((void)v188)
      {
        *((void *)&v188 + 1) = v188;
        operator delete((void *)v188);
      }
      if (*((void *)&v187[1] + 1))
      {
        *(void *)&v187[2] = *((void *)&v187[1] + 1);
        operator delete(*((void **)&v187[1] + 1));
      }
      if (*(void *)&v187[0])
      {
        *((void *)&v187[0] + 1) = *(void *)&v187[0];
        operator delete(*(void **)&v187[0]);
      }
      memset(&v177, 0, sizeof(v177));
      uint64_t v85 = *(void *)buf;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v177, *(const void **)&buf[8], v123, (v123 - *(void *)&buf[8]) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v141, v125, v126, (v126 - (uint64_t)v125) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v142, v127, v128, (v128 - (uint64_t)v127) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v143, v129, v130, (v130 - (uint64_t)v129) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v144, v131, v132, (v132 - (uint64_t)v131) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v145, v133, v134, (v134 - (uint64_t)v133) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v148, v135, v136, (v136 - (uint64_t)v135) >> 2);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v151, v137, v138, (v138 - (uint64_t)v137) >> 3);
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v152, v139, v140, (v140 - (uint64_t)v139) >> 2);
      if (*(float *)(*a3 + 4 * v85) == (float)SLODWORD(v111[59].__d_.__rep_)) {
        break;
      }
      if ((unint64_t)v26 >= v114)
      {
        uint64_t v86 = (v26 - v119) >> 3;
        unint64_t v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v114 - (void)v119) >> 2 > v87) {
          unint64_t v87 = (uint64_t)(v114 - (void)v119) >> 2;
        }
        if (v114 - (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v87;
        }
        if (v88) {
          unint64_t v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v88);
        }
        else {
          uint64_t v89 = 0;
        }
        unint64_t v90 = (char *)(v88 + 8 * v86);
        *(void *)unint64_t v90 = v85;
        char v91 = v90 + 8;
        while (v26 != v119)
        {
          uint64_t v92 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v90 - 1) = v92;
          v90 -= 8;
        }
        unint64_t v114 = v88 + 8 * v89;
        if (v119) {
          operator delete(v119);
        }
        size_t v25 = v90;
        long long v26 = v91;
      }
      else
      {
        *(void *)long long v26 = v85;
        v26 += 8;
      }
      std::string::size_type size = v177.__r_.__value_.__l.__size_;
      char v93 = (_DWORD *)v177.__r_.__value_.__r.__words[0];
      if (v177.__r_.__value_.__r.__words[0] != v177.__r_.__value_.__l.__size_)
      {
        do
        {
          if ((unint64_t)v28 >= v29)
          {
            uint64_t v95 = (v28 - v27) >> 2;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v29 - (void)v27) >> 1 > v96) {
              unint64_t v96 = (uint64_t)(v29 - (void)v27) >> 1;
            }
            if (v29 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v96;
            }
            if (v97) {
              unint64_t v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v97);
            }
            else {
              uint64_t v98 = 0;
            }
            int v99 = (char *)(v97 + 4 * v95);
            *(_DWORD *)int v99 = *v93;
            uint64_t v100 = v99 + 4;
            while (v28 != v27)
            {
              int v101 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v99 - 1) = v101;
              v99 -= 4;
            }
            unint64_t v102 = v97 + 4 * v98;
            if (v27) {
              operator delete(v27);
            }
            long long v27 = v99;
            uint64_t v28 = v100;
            unint64_t v29 = v102;
          }
          else
          {
            *(_DWORD *)uint64_t v28 = *v93;
            v28 += 4;
          }
          ++v93;
        }
        while (v93 != (_DWORD *)size);
        char v93 = (_DWORD *)v177.__r_.__value_.__r.__words[0];
      }
      if (v93) {
        operator delete(v93);
      }
      marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125);
      if (*(void *)&buf[8])
      {
        uint64_t v123 = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
      uint64_t v30 = v113 + 1;
      if ((unint64_t)(v113 + 1) > v111[58].__d_.__rep_) {
        goto LABEL_159;
      }
    }
    if (v177.__r_.__value_.__r.__words[0]) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&v125);
    if (*(void *)&buf[8])
    {
      uint64_t v123 = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
  }
  else
  {
    size_t v25 = 0;
    long long v26 = 0;
    long long v27 = 0;
    uint64_t v28 = 0;
  }
LABEL_159:
  if (v110 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(log))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, v107, "RunDecoderDuration", " enableTelemetry=YES ", buf, 2u);
  }
  v5[43].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[42].__d_.__rep_) / 1000;
  v5[48].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(v5[2].__d_.__rep_ + 8));
  v5[49].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - v5[48].__d_.__rep_) / 1000;
  v109[1] = 0;
  v109[2] = 0;
  *long long v109 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v109, v27, (uint64_t)v28, (v28 - v27) >> 2);
  v109[3] = 0;
  v109[4] = 0;
  v109[5] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v109 + 3, v25, (uint64_t)v26, (v26 - v25) >> 3);
  marrs::qr::inference_engine::LSTMDecoderInputType::LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(v109 + 6), (const marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
  if (v27) {
    operator delete(v27);
  }
  if (v25) {
    operator delete(v25);
  }
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)v141);
}

void sub_1C95BC714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(char *)(v54 - 233) < 0) {
    operator delete(*(void **)(v54 - 256));
  }
  if (a52 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0)
  {
    operator delete((void *)STACK[0x3B0]);
    if ((v53 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v53)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v52);
  goto LABEL_10;
}

void sub_1C95BC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v17 = *v13;
  if (*v13)
  {
    *(void *)(a13 + 32) = v17;
    operator delete(v17);
  }
  int v18 = *(void **)a13;
  if (*(void *)a13)
  {
    *(void *)(a13 + 8) = v18;
    operator delete(v18);
  }
  if (v14) {
    operator delete(v14);
  }
  if (v15) {
    operator delete(v15);
  }
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_1C95BC804()
{
  if (v0) {
    operator delete(v0);
  }
  if (v1) {
    operator delete(v1);
  }
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)&STACK[0x210]);
  JUMPOUT(0x1C95BD164);
}

void sub_1C95BD128(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::exception_ptr a46)
{
}

void *std::tuple<unsigned long,std::vector<float>,marrs::qr::inference_engine::LSTMDecoderInputType>::~tuple(void *a1)
{
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(a1 + 4));
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::logMetrics(marrs::qr::inference_engine::EspressoQueryRewriteModel *this, int a2)
{
  uint64_t v264 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v262, "[ ");
  uint64_t v4 = (uint64_t *)*((void *)this + 36);
  long long v5 = (uint64_t *)*((void *)this + 37);
  for (float i = 0.0; v4 != v5; ++v4)
  {
    double v7 = (double)*v4 / 1000.0;
    std::to_string(&v260, v7);
    uint64_t v8 = std::string::append(&v260, " ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v261;
    }
    else {
      uint64_t v10 = (std::string *)v261.__r_.__value_.__r.__words[0];
    }
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v261.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v261.__r_.__value_.__l.__size_;
    }
    std::string::append(&v262, (const std::string::value_type *)v10, size);
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v261.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v260.__r_.__value_.__l.__data_);
    }
    float i = v7 + i;
  }
  std::string::append(&v262, "]");
  float v12 = (float)a2;
  if (a2 >= 1)
  {
    std::to_string(&v263, i / v12);
    uint64_t v13 = std::string::insert(&v263, 0, " Avg: ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    unint64_t v15 = std::string::append(&v260, " ms");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v17 = &v261;
    }
    else {
      long long v17 = (std::string *)v261.__r_.__value_.__r.__words[0];
    }
    if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v261.__r_.__value_.__l.__size_;
    }
    std::string::append(&v262, (const std::string::value_type *)v17, v18);
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v261.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v260.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v261, "[ ");
  std::string::size_type v19 = (uint64_t *)*((void *)this + 39);
  unint64_t v20 = (uint64_t *)*((void *)this + 40);
  for (float j = 0.0; v19 != v20; ++v19)
  {
    double v22 = (double)*v19 / 1000.0;
    std::to_string(&v263, v22);
    long long v23 = std::string::append(&v263, " ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v25 = &v260;
    }
    else {
      size_t v25 = (std::string *)v260.__r_.__value_.__r.__words[0];
    }
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v260.__r_.__value_.__l.__size_;
    }
    std::string::append(&v261, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v260.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    float j = v22 + j;
  }
  std::string::append(&v261, "]");
  if (a2 >= 1)
  {
    std::to_string(&v259, j / v12);
    long long v27 = std::string::insert(&v259, 0, " Avg: ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v263.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    unint64_t v29 = std::string::append(&v263, " ms");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = &v260;
    }
    else {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = (std::string *)v260.__r_.__value_.__r.__words[0];
    }
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v260.__r_.__value_.__l.__size_;
    }
    std::string::append(&v261, (const std::string::value_type *)v31, v32);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v260.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v259.__r_.__value_.__l.__data_);
    }
  }
  os_log_create("com.apple.siri", "QR");
  std::to_string(&v203, (double)*((uint64_t *)this + 5) / 1000.0);
  int v33 = std::string::insert(&v203, 0, "\nQueryRewrite:\n      Initialize Embedder Input: ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v204.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v204, " ms\n");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v205.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  unint64_t v37 = std::string::append(&v205, "      Embedder Inference\n");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v206.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  BOOL v39 = std::string::append(&v206, "          Preprocessing-Reshape: ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v207.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v202, (double)*((uint64_t *)this + 7) / 1000.0);
  if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v41 = &v202;
  }
  else {
    uint64_t v41 = (std::string *)v202.__r_.__value_.__r.__words[0];
  }
  if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v202.__r_.__value_.__l.__size_;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = std::string::append(&v207, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  uint64_t v45 = std::string::append(&v208, " ms\n");
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v209.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  unint64_t v47 = std::string::append(&v209, "          Preprocessing-BuildPlan: ");
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v210.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v201, (double)*((uint64_t *)this + 9) / 1000.0);
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v49 = &v201;
  }
  else {
    unint64_t v49 = (std::string *)v201.__r_.__value_.__r.__words[0];
  }
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v50 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v50 = v201.__r_.__value_.__l.__size_;
  }
  uint64_t v51 = std::string::append(&v210, (const std::string::value_type *)v49, v50);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v211.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  int v53 = std::string::append(&v211, " ms\n");
  long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  uint64_t v55 = std::string::append(&v212, "          Forward Call: ");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v200, (double)*((uint64_t *)this + 11) / 1000.0);
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v57 = &v200;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v57 = (std::string *)v200.__r_.__value_.__r.__words[0];
  }
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v58 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v58 = v200.__r_.__value_.__l.__size_;
  }
  uint64_t v59 = std::string::append(&v213, (const std::string::value_type *)v57, v58);
  long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v214.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  float v61 = std::string::append(&v214, " ms\n");
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v215.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  float v63 = std::string::append(&v215, "          Postprocessing: ");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v216.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v199, (double)*((uint64_t *)this + 13) / 1000.0);
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v65 = &v199;
  }
  else {
    uint64_t v65 = (std::string *)v199.__r_.__value_.__r.__words[0];
  }
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v66 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v66 = v199.__r_.__value_.__l.__size_;
  }
  unint64_t v67 = std::string::append(&v216, (const std::string::value_type *)v65, v66);
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v217.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  unint64_t v69 = std::string::append(&v217, " ms\n");
  long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v218.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  uint64_t v71 = std::string::append(&v218, "      Encoder Inference\n");
  long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  uint64_t v73 = std::string::append(&v219, "          Preprocessing-Reshape: ");
  long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v198, (double)*((uint64_t *)this + 25) / 1000.0);
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v75 = &v198;
  }
  else {
    uint64_t v75 = (std::string *)v198.__r_.__value_.__r.__words[0];
  }
  if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v76 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v76 = v198.__r_.__value_.__l.__size_;
  }
  size_t v77 = std::string::append(&v220, (const std::string::value_type *)v75, v76);
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  unint64_t v79 = std::string::append(&v221, " ms\n");
  long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  uint64_t v81 = std::string::append(&v222, "          Preprocessing-BuildPlan: ");
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v197, (double)*((uint64_t *)this + 27) / 1000.0);
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v83 = &v197;
  }
  else {
    long long v83 = (std::string *)v197.__r_.__value_.__r.__words[0];
  }
  if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v84 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v84 = v197.__r_.__value_.__l.__size_;
  }
  uint64_t v85 = std::string::append(&v223, (const std::string::value_type *)v83, v84);
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  unint64_t v87 = std::string::append(&v224, " ms\n");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  uint64_t v89 = std::string::append(&v225, "          Forward Call: ");
  long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v196, (double)*((uint64_t *)this + 29) / 1000.0);
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v91 = &v196;
  }
  else {
    char v91 = (std::string *)v196.__r_.__value_.__r.__words[0];
  }
  if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v92 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v92 = v196.__r_.__value_.__l.__size_;
  }
  char v93 = std::string::append(&v226, (const std::string::value_type *)v91, v92);
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  uint64_t v95 = std::string::append(&v227, " ms\n");
  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  unint64_t v97 = std::string::append(&v228, "          Postprocessing: ");
  long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v195, (double)*((uint64_t *)this + 31) / 1000.0);
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v99 = &v195;
  }
  else {
    int v99 = (std::string *)v195.__r_.__value_.__r.__words[0];
  }
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v100 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v100 = v195.__r_.__value_.__l.__size_;
  }
  int v101 = std::string::append(&v229, (const std::string::value_type *)v99, v100);
  long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  uint64_t v103 = std::string::append(&v230, " ms\n");
  long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  long long v105 = std::string::append(&v231, "      Decoder Preprocessing-Reshape: ");
  long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v194, (double)*((uint64_t *)this + 33) / 1000.0);
  if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    os_signpost_id_t v107 = &v194;
  }
  else {
    os_signpost_id_t v107 = (std::string *)v194.__r_.__value_.__r.__words[0];
  }
  if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v108 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v108 = v194.__r_.__value_.__l.__size_;
  }
  long long v109 = std::string::append(&v232, (const std::string::value_type *)v107, v108);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  unint64_t v111 = std::string::append(&v233, " ms\n");
  long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v112;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  uint64_t v113 = std::string::append(&v234, "      Decoder Preprocessing-BuildPlan: ");
  long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v193, (double)*((uint64_t *)this + 35) / 1000.0);
  if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v115 = &v193;
  }
  else {
    char v115 = (std::string *)v193.__r_.__value_.__r.__words[0];
  }
  if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v116 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v116 = v193.__r_.__value_.__l.__size_;
  }
  uint64_t v117 = std::string::append(&v235, (const std::string::value_type *)v115, v116);
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  char v119 = std::string::append(&v236, " ms\n");
  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  char v121 = std::string::append(&v237, "      Embedder Preprocessing-Reshape: ");
  long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v122;
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v192, (double)*((uint64_t *)this + 51) / 1000.0);
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v123 = &v192;
  }
  else {
    uint64_t v123 = (std::string *)v192.__r_.__value_.__r.__words[0];
  }
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v124 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v124 = v192.__r_.__value_.__l.__size_;
  }
  uint64_t v125 = std::string::append(&v238, (const std::string::value_type *)v123, v124);
  long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v126;
  v125->__r_.__value_.__l.__size_ = 0;
  v125->__r_.__value_.__r.__words[2] = 0;
  v125->__r_.__value_.__r.__words[0] = 0;
  os_signpost_id_t v127 = std::string::append(&v239, " ms\n");
  long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  size_t v129 = std::string::append(&v240, "      Embedder Preprocessing-BuildPlan: ");
  long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v130;
  v129->__r_.__value_.__l.__size_ = 0;
  v129->__r_.__value_.__r.__words[2] = 0;
  v129->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v191, (double)*((uint64_t *)this + 53) / 1000.0);
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v131 = &v191;
  }
  else {
    unint64_t v131 = (std::string *)v191.__r_.__value_.__r.__words[0];
  }
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v132 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v132 = v191.__r_.__value_.__l.__size_;
  }
  uint64_t v133 = std::string::append(&v241, (const std::string::value_type *)v131, v132);
  long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
  v242.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v134;
  v133->__r_.__value_.__l.__size_ = 0;
  v133->__r_.__value_.__r.__words[2] = 0;
  v133->__r_.__value_.__r.__words[0] = 0;
  unsigned int v135 = std::string::append(&v242, " ms\n");
  long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v243.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  uint64_t v137 = std::string::append(&v243, "      Reshape outputs: ");
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v244.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v190, (double)*((uint64_t *)this + 55) / 1000.0);
  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v139 = &v190;
  }
  else {
    unint64_t v139 = (std::string *)v190.__r_.__value_.__r.__words[0];
  }
  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v140 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v140 = v190.__r_.__value_.__l.__size_;
  }
  uint64_t v141 = std::string::append(&v244, (const std::string::value_type *)v139, v140);
  long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  v245.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v142;
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  uint64_t v143 = std::string::append(&v245, " ms\n");
  long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  v246.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  size_t v145 = std::string::append(&v246, "      Decoder Inference Multi-Steps: ");
  long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v247.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v189, (double)*((uint64_t *)this + 43) / 1000.0);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v147 = &v189;
  }
  else {
    uint64_t v147 = (std::string *)v189.__r_.__value_.__r.__words[0];
  }
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v148 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v148 = v189.__r_.__value_.__l.__size_;
  }
  uint64_t v149 = std::string::append(&v247, (const std::string::value_type *)v147, v148);
  long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v150;
  v149->__r_.__value_.__l.__size_ = 0;
  v149->__r_.__value_.__r.__words[2] = 0;
  v149->__r_.__value_.__r.__words[0] = 0;
  uint64_t v151 = std::string::append(&v248, " ms\n");
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  int v153 = std::string::append(&v249, "          Embedder Forward Calls: ");
  long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v155 = &v262;
  }
  else {
    int v155 = (std::string *)v262.__r_.__value_.__r.__words[0];
  }
  if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v156 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v156 = v262.__r_.__value_.__l.__size_;
  }
  int v157 = std::string::append(&v250, (const std::string::value_type *)v155, v156);
  long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  uint64_t v159 = std::string::append(&v251, "\n");
  long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v160;
  v159->__r_.__value_.__l.__size_ = 0;
  v159->__r_.__value_.__r.__words[2] = 0;
  v159->__r_.__value_.__r.__words[0] = 0;
  uint64_t v161 = std::string::append(&v252, "          Decoder Forward Calls: ");
  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v163 = &v261;
  }
  else {
    int v163 = (std::string *)v261.__r_.__value_.__r.__words[0];
  }
  if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v164 = HIBYTE(v261.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v164 = v261.__r_.__value_.__l.__size_;
  }
  uint64_t v165 = std::string::append(&v253, (const std::string::value_type *)v163, v164);
  long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v254.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  uint64_t v167 = std::string::append(&v254, "\n");
  long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  v255.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v168;
  v167->__r_.__value_.__l.__size_ = 0;
  v167->__r_.__value_.__r.__words[2] = 0;
  v167->__r_.__value_.__r.__words[0] = 0;
  uint64_t v169 = std::string::append(&v255, "      Number of decoder steps: ");
  long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v188, a2);
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v171 = &v188;
  }
  else {
    uint64_t v171 = (std::string *)v188.__r_.__value_.__r.__words[0];
  }
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v172 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v172 = v188.__r_.__value_.__l.__size_;
  }
  long long v173 = std::string::append(&v256, (const std::string::value_type *)v171, v172);
  long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v174;
  v173->__r_.__value_.__l.__size_ = 0;
  v173->__r_.__value_.__r.__words[2] = 0;
  v173->__r_.__value_.__r.__words[0] = 0;
  uint64_t v175 = std::string::append(&v257, "\n");
  long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  std::string v177 = std::string::append(&v258, "      Decoder Postprocessing: ");
  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v187, (double)*((uint64_t *)this + 49) / 1000.0);
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v179 = &v187;
  }
  else {
    uint64_t v179 = (std::string *)v187.__r_.__value_.__r.__words[0];
  }
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v180 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v180 = v187.__r_.__value_.__l.__size_;
  }
  std::string::size_type v181 = std::string::append(&v259, (const std::string::value_type *)v179, v180);
  long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  unint64_t v183 = std::string::append(&v263, " ms\n");
  long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0;
  v183->__r_.__value_.__r.__words[2] = 0;
  v183->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v263.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v259.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v255.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v254.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v246.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v244.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v243.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v194.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v227.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v226.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v198.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v215.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v211.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v210.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v207.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v206.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  unint64_t v185 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v186 = &v260;
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v186 = (std::string *)v260.__r_.__value_.__r.__words[0];
    }
    LODWORD(v263.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v263.__r_.__value_.__r.__words + 4) = (std::string::size_type)"logMetrics";
    WORD2(v263.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v263.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v186;
    _os_log_debug_impl(&dword_1C9555000, v185, OS_LOG_TYPE_DEBUG, "%s %s", (uint8_t *)&v263, 0x16u);
  }
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v260.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
}

void sub_1C95BE690(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  _Unwind_Resume(a1);
}

void marrs::qr::inference_engine::EspressoQueryRewriteModel::forward(marrs::qr::inference_engine::EspressoQueryRewriteModel *this, std::chrono::steady_clock::time_point *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  if (marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once != -1) {
    dispatch_once(&marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::once, &__block_literal_global_5);
  }
  long long v9 = marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext;
  uint64_t v163 = 0;
  long long v162 = 0;
  uint64_t v164 = 0;
  os_signpost_id_t spid = os_signpost_id_generate((os_log_t)marrs::qr::orchestration::SignpostsUtils::createCcqrAerContext(void)::ccqrAerLogContext);
  unint64_t v131 = spid - 1;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v9, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunTokenEmbedding", "CCQRAer Run token embedding", buf, 2u);
  }
  a2[4].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v11 = *(const void **)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  float v12 = operator new(0x10uLL);
  *float v12 = 1;
  v12[1] = (v10 - (uint64_t)v11) >> 2;
  v168[1] = 0;
  v168[0] = 0;
  uint64_t v169 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v12, (uint64_t)(v12 + 2), 2uLL);
  long long __src = 0uLL;
  uint64_t v171 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  long long v130 = v9;
  os_signpost_id_t v127 = this;
  v184[1] = 0;
  v184[0] = 0;
  uint64_t v185 = 0;
  uint64_t v13 = v168[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
  int v128 = a4;
  uint64_t v187 = 0;
  unint64_t v186 = 0;
  uint64_t v188 = 0;
  long long v14 = (void *)__src;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
  a2[5].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[4].__d_.__rep_) / 1000;
  a2[6].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v176 = "inputs";
  LODWORD(v174[0]) = v12[1];
  LODWORD(v156[0]) = -1;
  LODWORD(v182[0]) = -1;
  LODWORD(v154[0]) = -1;
  v172.i32[0] = -1;
  LODWORD(v190) = 2;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to change input blob shapes in EmbeddingModule reshape");
    std::string::basic_string[abi:ne180100]<0>(__p, "QueryRewrite");
    InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_embedding_module.cpp", 68);
  }
  a2[7].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[6].__d_.__rep_) / 1000;
  a2[8].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2->__d_.__rep_ + 8));
  a2[9].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[8].__d_.__rep_) / 1000;
  a2[10].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t rep = a2->__d_.__rep_;
  memset(buf, 0, 24);
  long long v16 = v184[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
  long long v126 = (uint8_t *)&a2[4];
  long long v192 = 0uLL;
  *(void *)&uint8_t buf[24] = 0;
  long long v17 = v186;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v186, v187, (v187 - (uint64_t)v186) >> 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "inputs");
  marrs::inference_engine::EspressoModule::setInput(rep, (uint64_t)__p, (uint64_t)buf);
  if (SHIBYTE(v137[0]) < 0) {
    operator delete(__p[0]);
  }
  marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(rep + 8));
  memset(v161, 0, sizeof(v161));
  *(_OWORD *)long long v160 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v176, "embedded_input");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)__p, rep);
  if (SHIBYTE(v178) < 0) {
    operator delete(v176);
  }
  *(_OWORD *)long long v160 = *(_OWORD *)__p;
  *(_OWORD *)&v161[1] = *(_OWORD *)&v137[1];
  v161[0] = (void *)v137[0];
  v161[3] = (void *)v137[3];
  if (*(void *)&buf[24]) {
    operator delete(*(void **)&buf[24]);
  }
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  a2[11].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[10].__d_.__rep_) / 1000;
  a2[12].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2->__d_.__rep_ + 8));
  a2[13].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[12].__d_.__rep_) / 1000;
  if (v17) {
    operator delete(v17);
  }
  if (v16) {
    operator delete(v16);
  }
  if (v14) {
    operator delete(v14);
  }
  if (v13) {
    operator delete(v13);
  }
  operator delete(v12);
  v156[0] = 0;
  v156[1] = 0;
  uint64_t v157 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v156, v160[0], (uint64_t)v160[1], ((char *)v160[1] - (char *)v160[0]) >> 3);
  std::string::size_type v18 = v130;
  long long v158 = 0uLL;
  uint64_t v159 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v158, v161[1], (uint64_t)v161[2], ((char *)v161[2] - (char *)v161[1]) >> 2);
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (os_signpost_enabled(v130))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v130, OS_SIGNPOST_INTERVAL_END, spid, "RunTokenEmbedding", " enableTelemetry=YES ", buf, 2u);
    }
    if (os_signpost_enabled(v130))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v130, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunANEEmbedding", "CCQRAer Run token embedding", buf, 2u);
    }
  }
  v154[0] = 0;
  v154[1] = 0;
  unint64_t v155 = 0;
  if (a5 && a2[3].__d_.__rep_)
  {
    a2[14].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    unint64_t v173 = 0;
    int64x2_t v172 = 0uLL;
    uint64_t v19 = *(void *)(a3 + 24);
    std::string::size_type v132 = (const marrs::qr::inference_engine::EspressoQueryRewriteModelInputType *)a2;
    if (*(void *)(a3 + 32) != v19)
    {
      uint64_t v20 = 0;
      do
      {
        long long v21 = (uint64_t **)(v19 + 24 * v20);
        double v22 = v21[1];
        uint64_t v134 = v20;
        long long v23 = *v21;
        uint64_t v24 = 0;
        if (v22 == *v21)
        {
          std::string::size_type v26 = 0;
          unint64_t v40 = 0;
        }
        else
        {
          unint64_t v25 = 0;
          std::string::size_type v26 = 0;
          long long v27 = 0;
          unint64_t v28 = 0;
          do
          {
            unint64_t v29 = &v23[3 * v28];
            uint64_t v30 = *v29;
            if (v29[1] != *v29)
            {
              unint64_t v31 = 0;
              do
              {
                if ((unint64_t)v27 >= v25)
                {
                  uint64_t v32 = (v27 - v26) >> 2;
                  unint64_t v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v25 - (void)v26) >> 1 > v33) {
                    unint64_t v33 = (uint64_t)(v25 - (void)v26) >> 1;
                  }
                  if (v25 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v34 = v33;
                  }
                  if (v34)
                  {
                    unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34);
                    long long v27 = (char *)v24;
                  }
                  else
                  {
                    uint64_t v35 = 0;
                  }
                  long long v36 = (char *)(v34 + 4 * v32);
                  *(_DWORD *)long long v36 = *(_DWORD *)(v30 + 4 * v31);
                  uint64_t v24 = (uint64_t)(v36 + 4);
                  while (v27 != v26)
                  {
                    int v37 = *((_DWORD *)v27 - 1);
                    v27 -= 4;
                    *((_DWORD *)v36 - 1) = v37;
                    v36 -= 4;
                  }
                  unint64_t v25 = v34 + 4 * v35;
                  if (v26) {
                    operator delete(v26);
                  }
                  std::string::size_type v26 = v36;
                }
                else
                {
                  *(_DWORD *)long long v27 = *(_DWORD *)(v30 + 4 * v31);
                  uint64_t v24 = (uint64_t)(v27 + 4);
                }
                ++v31;
                long long v23 = *v21;
                long long v38 = &(*v21)[3 * v28];
                uint64_t v30 = *v38;
                BOOL v39 = v31 >= (v38[1] - *v38) >> 2;
                long long v27 = (char *)v24;
              }
              while (!v39);
              double v22 = v21[1];
              long long v27 = (char *)v24;
            }
            ++v28;
            unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v22 - v23);
          }
          while (v28 < v40);
          double v22 = v23;
          a2 = (std::chrono::steady_clock::time_point *)v132;
        }
        uint64_t v42 = *v22;
        uint64_t v41 = v22[1];
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = operator new(0x18uLL);
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 1;
        v43[1] = v40;
        v43[2] = (v41 - v42) >> 2;
        uint64_t v169 = 0;
        v168[0] = 0;
        v168[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v43, (uint64_t)(v43 + 3), 3uLL);
        long long __src = 0uLL;
        uint64_t v171 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__src, v26, v24, (v24 - (uint64_t)v26) >> 2);
        operator delete(v43);
        if (v26) {
          operator delete(v26);
        }
        v184[1] = 0;
        v184[0] = 0;
        uint64_t v185 = 0;
        long long v44 = v168[0];
        int64_t v45 = (char *)v168[1] - (char *)v168[0];
        unint64_t v46 = ((char *)v168[1] - (char *)v168[0]) >> 3;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], v46);
        unint64_t v186 = 0;
        uint64_t v187 = 0;
        uint64_t v188 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
        uint64_t v177 = 0;
        long long v176 = 0;
        uint64_t v178 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v176, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
        uint64_t v179 = 0;
        uint64_t v180 = 0;
        uint64_t v181 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v179, v186, v187, (v187 - (uint64_t)v186) >> 2);
        a2[15].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[14].__d_.__rep_) / 1000;
        a2[16].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (v45 != 24)
        {
          long long v118 = __cxa_allocate_exception(0x30uLL);
          std::to_string((std::string *)__p, v46);
          char v119 = std::string::insert((std::string *)__p, 0, "ANE Embedding Module shape rank mismatch, should be 3, found");
          long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v119->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v174, "QueryRewrite");
          InferenceError::InferenceError(v118, (uint64_t)buf, (uint64_t)v174, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_ane_module.cpp", 41);
        }
        v174[0] = "ane_in";
        uint64_t v47 = v44[1];
        LODWORD(v182[0]) = v44[2];
        LODWORD(v190) = v47;
        LODWORD(v189) = *v44;
        int v167 = 1;
        int v166 = 1;
        int v165 = 3;
        if (espresso_network_change_input_blob_shapes_seq_rank())
        {
          uint64_t v117 = __cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(buf, "Failed to do reshape in ANE Embedding Module.");
          std::string::basic_string[abi:ne180100]<0>(__p, "QueryRewrite");
          InferenceError::InferenceError(v117, (uint64_t)buf, (uint64_t)__p, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_ane_module.cpp", 60);
        }
        a2[17].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[16].__d_.__rep_) / 1000;
        a2[18].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2[3].__d_.__rep_ + 8));
        a2[19].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[18].__d_.__rep_) / 1000;
        a2[20].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        uint64_t v48 = a2[3].__d_.__rep_;
        memset(buf, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v176, v177, (v177 - (uint64_t)v176) >> 3);
        *(void *)&uint8_t buf[24] = 0;
        long long v192 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v179, v180, (v180 - (uint64_t)v179) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, "ane_in");
        marrs::inference_engine::EspressoModule::setInput(v48, (uint64_t)__p, (uint64_t)buf);
        if (SHIBYTE(v137[0]) < 0) {
          operator delete(__p[0]);
        }
        marrs::inference_engine::EspressoModule::executePlan(*(marrs::inference_engine::EspressoModule **)(v48 + 8));
        memset(v175, 0, sizeof(v175));
        *(_OWORD *)long long v174 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v182, "ane_out");
        marrs::inference_engine::EspressoModule::getOutput((uint64_t)__p, v48);
        if (v183 < 0) {
          operator delete(v182[0]);
        }
        *(_OWORD *)long long v174 = *(_OWORD *)__p;
        *(_OWORD *)&v175[1] = *(_OWORD *)&v137[1];
        v175[0] = (void *)v137[0];
        v175[3] = (void *)v137[3];
        if (*(void *)&buf[24]) {
          operator delete(*(void **)&buf[24]);
        }
        if (*(void *)buf) {
          operator delete(*(void **)buf);
        }
        a2[21].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[20].__d_.__rep_) / 1000;
        a2[22].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2[3].__d_.__rep_ + 8));
        a2[23].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[22].__d_.__rep_) / 1000;
        uint64_t v49 = v172.i64[1];
        if (v172.i64[1] >= v173)
        {
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v172.i64[1] - v172.i64[0]) >> 4);
          unint64_t v52 = v51 + 1;
          if (v51 + 1 > 0x555555555555555) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v173 - v172.i64[0]) >> 4) > v52) {
            unint64_t v52 = 0x5555555555555556 * ((uint64_t)(v173 - v172.i64[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - v172.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v53 = 0x555555555555555;
          }
          else {
            unint64_t v53 = v52;
          }
          *(void *)&long long v192 = &v173;
          if (v53) {
            unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v53);
          }
          else {
            uint64_t v54 = 0;
          }
          *(void *)std::string buf = v53;
          *(void *)&uint8_t buf[8] = v53 + 48 * v51;
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          *(void *)&uint8_t buf[24] = v53 + 48 * v54;
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>(*(void **)&buf[8], (uint64_t)v174);
          uint64_t v55 = *(void *)&buf[8];
          uint64_t v50 = *(void *)&buf[16] + 48;
          *(void *)&buf[16] += 48;
          uint64_t v56 = v172.i64[1];
          uint64_t v57 = v172.i64[0];
          if (v172.i64[1] == v172.i64[0])
          {
            int64x2_t v61 = vdupq_n_s64(v172.u64[1]);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              uint64_t v59 = v55 + v58;
              uint64_t v60 = v56 + v58;
              *(void *)(v59 - 48) = 0;
              *(void *)(v59 - 40) = 0;
              *(void *)(v59 - 32) = 0;
              *(_OWORD *)(v59 - 48) = *(_OWORD *)(v56 + v58 - 48);
              *(void *)(v59 - 32) = *(void *)(v56 + v58 - 32);
              *(void *)(v60 - 48) = 0;
              *(void *)(v60 - 40) = 0;
              *(void *)(v60 - 32) = 0;
              *(void *)(v59 - 24) = 0;
              *(void *)(v59 - 16) = 0;
              *(void *)(v59 - 8) = 0;
              *(_OWORD *)(v59 - 24) = *(_OWORD *)(v56 + v58 - 24);
              *(void *)(v59 - 8) = *(void *)(v56 + v58 - 8);
              *(void *)(v60 - 24) = 0;
              *(void *)(v60 - 16) = 0;
              *(void *)(v60 - 8) = 0;
              v58 -= 48;
            }
            while (v56 + v58 != v57);
            v55 += v58;
            int64x2_t v61 = v172;
            uint64_t v50 = *(void *)&buf[16];
          }
          v172.i64[0] = v55;
          v172.i64[1] = v50;
          *(int64x2_t *)&uint8_t buf[8] = v61;
          unint64_t v62 = v173;
          unint64_t v173 = *(void *)&buf[24];
          *(void *)&uint8_t buf[24] = v62;
          *(void *)std::string buf = v61.i64[0];
          std::__split_buffer<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::construct[abi:ne180100]<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType,marrs::qr::inference_engine::ANEEmbeddingModuleOutputType const&>((void *)v172.i64[1], (uint64_t)v174);
          uint64_t v50 = v49 + 48;
        }
        v172.i64[1] = v50;
        if (v175[1])
        {
          v175[2] = v175[1];
          operator delete(v175[1]);
        }
        if (v174[0])
        {
          v174[1] = v174[0];
          operator delete(v174[0]);
        }
        if (v179) {
          operator delete(v179);
        }
        if (v176) {
          operator delete(v176);
        }
        if (v186) {
          operator delete(v186);
        }
        if (v184[0]) {
          operator delete(v184[0]);
        }
        if ((void)__src) {
          operator delete((void *)__src);
        }
        if (v168[0]) {
          operator delete(v168[0]);
        }
        uint64_t v20 = v134 + 1;
        uint64_t v19 = *(void *)(a3 + 24);
      }
      while (v134 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 32) - v19) >> 3));
    }
    float v63 = (char *)v154[0];
    if (v154[0])
    {
      long long v64 = (char *)v154[1];
      uint64_t v65 = v154[0];
      if (v154[1] != v154[0])
      {
        do
        {
          v64 -= 48;
          std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100]((uint64_t)v64);
        }
        while (v64 != v63);
        uint64_t v65 = v154[0];
      }
      v154[1] = v63;
      operator delete(v65);
    }
    *(int64x2_t *)long long v154 = v172;
    unint64_t v155 = v173;
    unint64_t v173 = 0;
    int64x2_t v172 = 0uLL;
    *(void *)std::string buf = &v172;
    std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    unint64_t v67 = *(const void **)a3;
    uint64_t v66 = *(void *)(a3 + 8);
    long long v152 = 0;
    uint64_t v153 = 0;
    uint64_t v151 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v151, v161[1], (uint64_t)v161[2], ((char *)v161[2] - (char *)v161[1]) >> 2);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68 = a2[56].__d_.__rep_;
    uint64_t v149 = 0;
    long long v150 = 0;
    std::string::size_type v148 = 0;
    unint64_t v69 = (char *)v154[0];
    long long v70 = (char *)v154[1];
    __p[0] = &v148;
    LOBYTE(__p[1]) = 0;
    if (v154[1] != v154[0])
    {
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v154[1] - (char *)v154[0]) >> 4);
      if (v71 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      long long v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::VerbalPatternEntry>>(v71);
      uint64_t v73 = 0;
      std::string::size_type v148 = v72;
      uint64_t v149 = v72;
      long long v150 = &v72[48 * v74];
      do
      {
        uint64_t v75 = &v72[v73];
        std::string::size_type v76 = &v69[v73];
        *(void *)uint64_t v75 = 0;
        *((void *)v75 + 1) = 0;
        *((void *)v75 + 2) = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v72[v73], *(const void **)&v69[v73], *(void *)&v69[v73 + 8], (uint64_t)(*(void *)&v69[v73 + 8] - *(void *)&v69[v73]) >> 3);
        *((void *)v75 + 3) = 0;
        *((void *)v75 + 4) = 0;
        *((void *)v75 + 5) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v72[v73 + 24], *((const void **)v76 + 3), *((void *)v76 + 4), (uint64_t)(*((void *)v76 + 4) - *((void *)v76 + 3)) >> 2);
        v73 += 48;
      }
      while (v76 + 48 != v70);
      uint64_t v149 = &v72[v73];
    }
    uint64_t v77 = (v66 - (uint64_t)v67) >> 2;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v78 = a2[57].__d_.__rep_;
    uint64_t v79 = v78 + v68;
    LODWORD(v174[0]) = 0;
    std::vector<float>::vector(__p, (v78 + v68) * v77, v174);
    long long v80 = (char *)__p[0];
    uint64_t v81 = __p[1];
    if (__p[1] == __p[0])
    {
      long long v80 = (char *)__p[1];
    }
    else
    {
      uint64_t v135 = v77;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      unint64_t v84 = 0;
      uint64_t v85 = 4 * v68;
      uint64_t v86 = 24;
      do
      {
        if (v68)
        {
          memmove(&v80[v82], (char *)v151 + v83, 4 * v68);
          long long v80 = (char *)__p[0];
        }
        if (v78)
        {
          memmove(&v80[v85 + v82], *(const void **)&v148[v86], 4 * v78);
          long long v80 = (char *)__p[0];
        }
        v84 += v68 + v78;
        uint64_t v81 = __p[1];
        v83 += v85;
        v86 += 48;
        v82 += 4 * (v68 + v78);
      }
      while (v84 < ((char *)__p[1] - (char *)v80) >> 2);
      a2 = (std::chrono::steady_clock::time_point *)v132;
      uint64_t v77 = v135;
      uint64_t v79 = v78 + v68;
    }
    unint64_t v87 = (int64x2_t *)operator new(0x20uLL);
    *unint64_t v87 = vdupq_n_s64(1uLL);
    v87[1].i64[0] = v77;
    v87[1].i64[1] = v79;
    *(void *)&long long v88 = v87;
    *((void *)&v88 + 1) = v87 + 2;
    *(_OWORD *)std::string buf = v88;
    *(void *)&uint8_t buf[16] = v87 + 2;
    *(void *)&uint8_t buf[24] = 0;
    long long v192 = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v80, (uint64_t)v81, (v81 - v80) >> 2);
    std::string::size_type v18 = v130;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v148;
    std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v151)
    {
      long long v152 = v151;
      operator delete(v151);
    }
    __p[0] = 0;
    __p[1] = 0;
    v137[0] = 0;
    uint64_t v89 = *(void **)buf;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    memset(&v137[1], 0, 24);
    long long v90 = *(void **)&buf[24];
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v137[1], *(const void **)&buf[24], v192, (uint64_t)(v192 - *(void *)&buf[24]) >> 2);
    if (v156[0]) {
      operator delete(v156[0]);
    }
    *(_OWORD *)std::string::size_type v156 = *(_OWORD *)__p;
    uint64_t v157 = v137[0];
    __p[1] = 0;
    v137[0] = 0;
    __p[0] = 0;
    if ((void)v158) {
      operator delete((void *)v158);
    }
    long long v158 = *(_OWORD *)&v137[1];
    uint64_t v159 = v137[3];
    if (v90) {
      operator delete(v90);
    }
    if (v89) {
      operator delete(v89);
    }
  }
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v18, OS_SIGNPOST_INTERVAL_END, spid, "RunANEEmbedding", " enableTelemetry=YES ", buf, 2u);
    }
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v18, OS_SIGNPOST_INTERVAL_BEGIN, spid, "RunEncoderDuration", "CCQRAer Run token embedding", buf, 2u);
    }
  }
  a2[24].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::string::size_type v92 = v156[0];
  char v91 = v156[1];
  if ((void *)((char *)v156[1] - (char *)v156[0]) != (void *)32)
  {
    long long v122 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "reshape";
      _os_log_error_impl(&dword_1C9555000, v122, OS_LOG_TYPE_ERROR, "%s [ERR]: encodingsShape size is not 4", buf, 0xCu);
    }
    uint64_t v123 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "encodingsShape size is not 4");
    std::string::basic_string[abi:ne180100]<0>(v168, "QueryRewrite");
    InferenceError::InferenceError(v123, (uint64_t)buf, (uint64_t)v168, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_encoder_module.cpp", 67);
  }
  *(_OWORD *)long long v184 = xmmword_1E6599A80;
  LODWORD(v176) = *((_DWORD *)v156[0] + 6);
  HIDWORD(v176) = v176;
  LODWORD(v174[0]) = *((_DWORD *)v156[0] + 4);
  HIDWORD(v174[0]) = 1;
  LODWORD(v182[0]) = 1;
  HIDWORD(v182[0]) = v174[0];
  v172.i64[0] = 0x100000001;
  uint64_t v190 = -1;
  uint64_t v189 = 0x300000002;
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    std::string::size_type v124 = QRLoggerForCategory(0);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "reshape";
      _os_log_error_impl(&dword_1C9555000, v124, OS_LOG_TYPE_ERROR, "%s [ERR]: Failed to change input blob shapes in LSTMEncoderModule reshape", buf, 0xCu);
    }
    uint64_t v125 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Failed to change input blob shapes in LSTMEncoderModule reshape");
    std::string::basic_string[abi:ne180100]<0>(v168, "QueryRewrite");
    InferenceError::InferenceError(v125, (uint64_t)buf, (uint64_t)v168, "/Library/Caches/com.apple.xbs/Sources/Marrs/Marrs/query_rewrite/inference_engine/espresso_lstm_encoder_module.cpp", 83);
  }
  a2[25].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[24].__d_.__rep_) / 1000;
  a2[26].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::buildPlan(*(marrs::inference_engine::EspressoModule **)(a2[1].__d_.__rep_ + 8));
  v184[1] = 0;
  v184[0] = 0;
  uint64_t v185 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v92, (uint64_t)v91, 4uLL);
  uint64_t v187 = 0;
  unint64_t v186 = 0;
  uint64_t v188 = 0;
  char v93 = (void *)v158;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)v158, *((uint64_t *)&v158 + 1), (uint64_t)(*((void *)&v158 + 1) - v158) >> 2);
  a2[27].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[26].__d_.__rep_) / 1000;
  a2[28].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v94 = (marrs::inference_engine::EspressoModule **)a2[1].__d_.__rep_;
  memset(buf, 0, 24);
  uint64_t v95 = v184[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v184[0], (uint64_t)v184[1], ((char *)v184[1] - (char *)v184[0]) >> 3);
  long long v192 = 0uLL;
  *(void *)&uint8_t buf[24] = 0;
  long long v96 = v186;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&buf[24], v186, v187, (v187 - (uint64_t)v186) >> 2);
  marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings((marrs::qr::inference_engine::LSTMEncoderModule *)v94, (marrs::inference_engine::InferenceTensor *)buf);
  marrs::inference_engine::EspressoModule::executePlan(v94[1]);
  *(_OWORD *)long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  *(_OWORD *)size_t v145 = 0u;
  *(_OWORD *)long long v142 = 0u;
  *(_OWORD *)uint64_t v143 = 0u;
  memset(v141, 0, sizeof(v141));
  *(_OWORD *)std::string::size_type v140 = 0u;
  *(_OWORD *)long long v138 = 0u;
  memset(v139, 0, sizeof(v139));
  memset(v137, 0, sizeof(v137));
  *(_OWORD *)long long __p = 0u;
  marrs::qr::inference_engine::LSTMEncoderModule::setUtteranceTokensEmbeddings((marrs::qr::inference_engine::LSTMEncoderModule *)v94, (marrs::inference_engine::InferenceTensor *)buf);
  std::string::basic_string[abi:ne180100]<0>(&v176, "h_n");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0) {
    operator delete(v176);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v168;
  v137[0] = v169;
  uint64_t v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  unint64_t v97 = (void *)v137[1];
  if (v137[1])
  {
    v137[2] = v137[1];
    operator delete((void *)v137[1]);
    unint64_t v97 = v168[0];
  }
  *(_OWORD *)&v137[1] = __src;
  v137[3] = v171;
  uint64_t v171 = 0;
  long long __src = 0uLL;
  if (v97)
  {
    v168[1] = v97;
    operator delete(v97);
  }
  std::string::basic_string[abi:ne180100]<0>(&v176, "encoded_outputs");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0) {
    operator delete(v176);
  }
  if (v140[0])
  {
    v140[1] = v140[0];
    operator delete(v140[0]);
  }
  *(_OWORD *)std::string::size_type v140 = *(_OWORD *)v168;
  v141[0] = v169;
  uint64_t v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  long long v98 = v141[1];
  if (v141[1])
  {
    v141[2] = v141[1];
    operator delete(v141[1]);
    long long v98 = v168[0];
  }
  *(_OWORD *)&v141[1] = __src;
  void v141[3] = v171;
  uint64_t v171 = 0;
  long long __src = 0uLL;
  if (v98)
  {
    v168[1] = v98;
    operator delete(v98);
  }
  std::string::basic_string[abi:ne180100]<0>(&v176, "c_n");
  marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
  if (SHIBYTE(v178) < 0) {
    operator delete(v176);
  }
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  *(_OWORD *)long long v138 = *(_OWORD *)v168;
  v139[0] = v169;
  uint64_t v169 = 0;
  v168[1] = 0;
  v168[0] = 0;
  int v99 = v139[1];
  if (v139[1])
  {
    v139[2] = v139[1];
    operator delete(v139[1]);
    int v99 = v168[0];
  }
  *(_OWORD *)&v139[1] = __src;
  v139[3] = v171;
  uint64_t v171 = 0;
  long long __src = 0uLL;
  if (v99)
  {
    v168[1] = v99;
    operator delete(v99);
  }
  if (v128)
  {
    std::string::basic_string[abi:ne180100]<0>(&v176, "gate_prob");
    marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
    if (SHIBYTE(v178) < 0) {
      operator delete(v176);
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v142, (char *)v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v143[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
    if ((void)__src)
    {
      *((void *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    if (v168[0])
    {
      v168[1] = v168[0];
      operator delete(v168[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v176, "gate_prediction");
    marrs::inference_engine::EspressoModule::getOutput((uint64_t)v168, (uint64_t)v94);
    if (SHIBYTE(v178) < 0) {
      operator delete(v176);
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v145, (char *)v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v146[1], (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
    if ((void)__src)
    {
      *((void *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    if (v168[0])
    {
      v168[1] = v168[0];
      operator delete(v168[0]);
    }
  }
  else
  {
    std::string::size_type v100 = operator new(8uLL);
    *std::string::size_type v100 = 1;
    int v101 = operator new(4uLL);
    *int v101 = 1065353216;
    if (v142[0])
    {
      v142[1] = v142[0];
      operator delete(v142[0]);
    }
    v142[0] = v100;
    v142[1] = v100 + 1;
    v143[0] = v100 + 1;
    if (v143[1])
    {
      *(void **)&long long v144 = v143[1];
      operator delete(v143[1]);
    }
    v143[1] = v101;
    *(void *)&long long v144 = v101 + 1;
    *((void *)&v144 + 1) = v101 + 1;
    long long v102 = operator new(8uLL);
    void *v102 = 1;
    uint64_t v103 = operator new(4uLL);
    *uint64_t v103 = 1065353216;
    if (v145[0])
    {
      v145[1] = v145[0];
      operator delete(v145[0]);
    }
    v145[0] = v102;
    v145[1] = v102 + 1;
    v146[0] = v102 + 1;
    if (v146[1])
    {
      *(void **)&long long v147 = v146[1];
      operator delete(v146[1]);
    }
    v146[1] = v103;
    *(void *)&long long v147 = v103 + 1;
    *((void *)&v147 + 1) = v103 + 1;
  }
  if (*(void *)&buf[24]) {
    operator delete(*(void **)&buf[24]);
  }
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  a2[29].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[28].__d_.__rep_) / 1000;
  a2[30].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  marrs::inference_engine::EspressoModule::cleanPlan(*(marrs::inference_engine::EspressoModule **)(a2[1].__d_.__rep_ + 8));
  a2[31].__d_.__rep_ = (std::chrono::steady_clock::now().__d_.__rep_ - a2[30].__d_.__rep_) / 1000;
  if (v96) {
    operator delete(v96);
  }
  if (v95) {
    operator delete(v95);
  }
  int v104 = (int)*(float *)v146[1];
  int v105 = *(_DWORD *)v143[1];
  if (v131 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v130))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9555000, v130, OS_SIGNPOST_INTERVAL_END, spid, "RunEncoderDuration", " enableTelemetry=YES ", buf, 2u);
  }
  if (v104)
  {
    marrs::qr::inference_engine::EspressoQueryRewriteModel::forward_decoder(buf, a2, (void *)a3, (uint64_t **)__p);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v162, *(char **)&buf[24], v192, (uint64_t)(v192 - *(void *)&buf[24]) >> 3);
    marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)v193);
    if (*(void *)&buf[24])
    {
      *(void *)&long long v192 = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  v168[1] = 0;
  v168[0] = 0;
  uint64_t v169 = 0;
  long long v106 = v162;
  unint64_t v107 = v163 - (void)v162;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v168, v162, v163, (v163 - (uint64_t)v162) >> 3);
  marrs::qr::inference_engine::EspressoQueryRewriteModel::logMetrics((marrs::qr::inference_engine::EspressoQueryRewriteModel *)a2, v107 >> 3);
  a2[37].__d_.__rep_ = a2[36].__d_.__rep_;
  a2[40].__d_.__rep_ = a2[39].__d_.__rep_;
  long long v202 = 0u;
  long long v201 = 0u;
  long long v200 = 0u;
  long long v199 = 0u;
  long long v198 = 0u;
  long long v197 = 0u;
  long long v196 = 0u;
  long long v195 = 0u;
  *(_OWORD *)std::string v194 = 0u;
  long long v192 = 0u;
  memset(v193, 0, sizeof(v193));
  memset(buf, 0, sizeof(buf));
  *((_OWORD *)v126 + 14) = 0u;
  *((_OWORD *)v126 + 15) = 0u;
  *((_OWORD *)v126 + 12) = 0u;
  *((_OWORD *)v126 + 13) = 0u;
  *((_OWORD *)v126 + 10) = 0u;
  *((_OWORD *)v126 + 11) = 0u;
  *((_OWORD *)v126 + 8) = 0u;
  *((_OWORD *)v126 + 9) = 0u;
  *((_OWORD *)v126 + 6) = 0u;
  *((_OWORD *)v126 + 7) = 0u;
  *((_OWORD *)v126 + 4) = 0u;
  *((_OWORD *)v126 + 5) = 0u;
  *((_OWORD *)v126 + 2) = 0u;
  *((_OWORD *)v126 + 3) = 0u;
  *(_OWORD *)long long v126 = 0u;
  *((_OWORD *)v126 + 1) = 0u;
  if (v126 != buf)
  {
    std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(&a2[36].__d_.__rep_, 0, 0, 0);
    std::vector<std::chrono::duration<long long,std::ratio<1l,1000000l>>>::__assign_with_size[abi:ne180100]<std::chrono::duration<long long,std::ratio<1l,1000000l>>*,std::chrono::duration<long long,std::ratio<1l,1000000l>>*>(&a2[39].__d_.__rep_, (char *)v194[1], (char *)v195, (uint64_t)(v195 - (unint64_t)v194[1]) >> 3);
  }
  long long v108 = v201;
  *(_OWORD *)&a2[50].__d_.__rep_ = v200;
  *(_OWORD *)&a2[52].__d_.__rep_ = v108;
  *(_OWORD *)&a2[54].__d_.__rep_ = v202;
  long long v109 = v197;
  *(_OWORD *)&a2[42].__d_.__rep_ = v196;
  *(_OWORD *)&a2[44].__d_.__rep_ = v109;
  long long v110 = v199;
  *(_OWORD *)&a2[46].__d_.__rep_ = v198;
  *(_OWORD *)&a2[48].__d_.__rep_ = v110;
  marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType::~EspressoQueryRewriteTimingMetricsType((marrs::qr::inference_engine::EspressoQueryRewriteTimingMetricsType *)buf);
  v184[1] = 0;
  v184[0] = 0;
  uint64_t v185 = 0;
  unint64_t v111 = v168[0];
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v184, v168[0], (uint64_t)v168[1], ((char *)v168[1] - (char *)v168[0]) >> 3);
  LODWORD(v186) = v105;
  *((void *)v127 + 1) = 0;
  *((void *)v127 + 2) = 0;
  *(void *)os_signpost_id_t v127 = 0;
  long long v176 = v127;
  LOBYTE(v177) = 0;
  long long v112 = operator new(0x20uLL);
  *(void *)os_signpost_id_t v127 = v112;
  *((void *)v127 + 1) = v112;
  *((void *)v127 + 2) = v112 + 4;
  v174[0] = v112;
  v182[0] = v112;
  *(void *)std::string buf = (char *)v127 + 16;
  *(void *)&uint8_t buf[8] = v182;
  *(void *)&uint8_t buf[16] = v174;
  uint8_t buf[24] = 0;
  v112[1] = 0;
  v112[2] = 0;
  uint64_t v113 = v184[0];
  long long v114 = v184[1];
  unint64_t v115 = ((char *)v184[1] - (char *)v184[0]) >> 3;
  *long long v112 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v112, v113, (uint64_t)v114, v115);
  *((_DWORD *)v112 + 6) = v186;
  v174[0] = (char *)v174[0] + 32;
  std::string::size_type v116 = v174[0];
  uint8_t buf[24] = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>,marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
  *((void *)v127 + 1) = v116;
  if (v184[0])
  {
    v184[1] = v184[0];
    operator delete(v184[0]);
  }
  if (v111) {
    operator delete(v111);
  }
  JointCCQRModuleInputTensor::~JointCCQRModuleInputTensor((JointCCQRModuleInputTensor *)__p);
  *(void *)std::string buf = v154;
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v93) {
    operator delete(v93);
  }
  operator delete(v92);
  if (v161[1])
  {
    v161[2] = v161[1];
    operator delete(v161[1]);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v106) {
    operator delete(v106);
  }
}

void sub_1C95C0B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v68 & 1) == 0)
    {
LABEL_8:
      STACK[0x260] = (unint64_t)&a63;
      std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a67);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x200]);
      if (STACK[0x238]) {
        operator delete((void *)STACK[0x238]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v68)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

void sub_1C95C0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x387]) < 0)
  {
    operator delete((void *)STACK[0x370]);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
      marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
      operator delete(v34);
      if (STACK[0x238]) {
        operator delete((void *)STACK[0x238]);
      }
      JUMPOUT(0x1C95C1D18);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_1C95C19A8()
{
  STACK[0x260] = (unint64_t)&STACK[0x290];
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  JUMPOUT(0x1C95C1BE0);
}

void sub_1C95C19BC()
{
  STACK[0x298] = v0;
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2B0]);
  JUMPOUT(0x1C95C1B9CLL);
}

void sub_1C95C19CC()
{
}

void sub_1C95C1A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x260] = (unint64_t)&a63;
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100](&STACK[0x260]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&a67);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x200]);
  if (STACK[0x238]) {
    operator delete((void *)STACK[0x238]);
  }
  JUMPOUT(0x1C95C1D18);
}

void sub_1C95C1A28()
{
  unint64_t v0 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v0;
    operator delete(v0);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2E8]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x330]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x260]);
  JUMPOUT(0x1C95C1BD0);
}

void sub_1C95C1A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x370]);
  JUMPOUT(0x1C95C1B9CLL);
}

void sub_1C95C1A60()
{
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x2B0]);
  marrs::inference_engine::InferenceTensor::~InferenceTensor((marrs::inference_engine::InferenceTensor *)&STACK[0x370]);
  JUMPOUT(0x1C95C1B9CLL);
}

void sub_1C95C1A94()
{
  operator delete(v0);
  JUMPOUT(0x1C95C1BC4);
}

void sub_1C95C1AC4()
{
}

void sub_1C95C1AD0()
{
  if (STACK[0x330]) {
    operator delete((void *)STACK[0x330]);
  }
  JUMPOUT(0x1C95C1BACLL);
}

void sub_1C95C1AE8()
{
}

void sub_1C95C1AF4()
{
  if (STACK[0x2E8]) {
    operator delete((void *)STACK[0x2E8]);
  }
  JUMPOUT(0x1C95C1BA4);
}

void sub_1C95C1B10()
{
  unint64_t v2 = *v1;
  if (*v1)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  while (v1 != v0)
  {
    v1 -= 6;
    std::allocator<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::destroy[abi:ne180100]((uint64_t)v1);
  }
  JUMPOUT(0x1C95C1B50);
}

void sub_1C95C1B6C()
{
}

void sub_1C95C1B80()
{
}

void sub_1C95C1B8C()
{
}

void sub_1C95C1BBC()
{
  if (v0) {
    operator delete(v0);
  }
  STACK[0x260] = (unint64_t)&STACK[0x290];
  std::vector<marrs::qr::inference_engine::ANEEmbeddingModuleOutputType>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  JUMPOUT(0x1C95C1BE0);
}

void sub_1C95C1C7C()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x277]) < 0)
  {
    operator delete((void *)STACK[0x260]);
    if ((v1 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v1)
  {
LABEL_8:
    MEMORY[0x1CB786A10](&STACK[0x2E8]);
    __cxa_end_catch();
    JUMPOUT(0x1C95C1CE0);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1C95C1D10(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1C95C1D18);
  }
  __clang_call_terminate(a1);
}

uint64_t std::tuple<std::vector<float>,std::vector<unsigned long>,marrs::qr::inference_engine::LSTMDecoderInputType>::~tuple(uint64_t a1)
{
  marrs::qr::inference_engine::LSTMDecoderInputType::~LSTMDecoderInputType((marrs::qr::inference_engine::LSTMDecoderInputType *)(a1 + 48));
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType>,marrs::qr::inference_engine::EspressoQueryRewriteModelOutputType*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        v4 -= 32;
        long long v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 24) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,5ul>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a1);
}

uint64_t marrs::mrr::mr::logFeatureVectorArray<5ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"feature ", 8);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)));
  double v7 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*a1 != v9)
  {
    int v10 = 0;
    unint64_t v11 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
      float v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") - ", 4);
      for (uint64_t i = 0; i != 20; i += 4)
      {
        long long v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)));
      unint64_t v15 = std::locale::use_facet((const std::locale *)__p, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      ++v10;
      v8 += 20;
    }
    while (v8 != v9);
  }
  long long v16 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    long long v17 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v25 = v17;
    _os_log_impl(&dword_1C9555000, v16, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB786D60](&v23);
}

void sub_1C95C21B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C95C2368(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1CB786D60](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB786D60](a1 + 112);
  return a1;
}

void marrs::mrr::mr::fetchNeighboringEntities(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v65 = 0uLL;
  unint64_t v66 = 0;
  uint64_t v6 = *a4;
  uint64_t v5 = a4[1];
  if (v5 == *a4)
  {
    uint64_t v9 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    float v11 = *(float *)(a2 + 80) + (float)(*(float *)(a2 + 88) * 0.5);
    float v12 = *(float *)(a2 + 84) + (float)(*(float *)(a2 + 92) * 0.5);
    do
    {
      if (v10 != a3)
      {
        uint64_t v13 = (float *)(v6 + 216 * v10);
        double v14 = (float)((float)(v13[20] + (float)(v13[22] * 0.5)) - v11);
        double v15 = (float)((float)(v13[21] + (float)(v13[23] * 0.5)) - v12);
        float v16 = v14 * v14 + v15 * v15;
        if ((unint64_t)v9 >= v66)
        {
          uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v9 - v65) >> 5);
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) > 0x124924924924924) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v66 - v65) >> 5) > v18) {
            unint64_t v18 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v66 - v65) >> 5);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66 - v65) >> 5)) >= 0x92492492492492) {
            unint64_t v19 = 0x124924924924924;
          }
          else {
            unint64_t v19 = v18;
          }
          long long v70 = &v66;
          if (v19)
          {
            if (v19 > 0x124924924924924) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v20 = (void **)operator new(224 * v19);
          }
          else
          {
            char v20 = 0;
          }
          unint64_t v67 = v20;
          v68.i64[0] = (uint64_t)&v20[28 * v17];
          v68.i64[1] = v68.i64[0];
          unint64_t v69 = &v20[28 * v19];
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], (const marrs::mrr::mr::MRREntity *)v13);
          *(float *)&v20[28 * v17 + 27] = v16;
          uint64_t v21 = v68.i64[0];
          uint64_t v9 = (float *)(v68.i64[1] + 224);
          v68.i64[1] += 224;
          long long v22 = v65;
          if (*((void *)&v65 + 1) == (void)v65)
          {
            int64x2_t v32 = vdupq_n_s64(*((unint64_t *)&v65 + 1));
          }
          else
          {
            uint64_t v23 = 0;
            do
            {
              uint64_t v24 = v21 + v23;
              uint64_t v25 = *((void *)&v22 + 1) + v23;
              *(void *)(v24 - 224) = *(void *)(*((void *)&v22 + 1) + v23 - 224);
              long long v26 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 216);
              *(void *)(v24 - 200) = *(void *)(*((void *)&v22 + 1) + v23 - 200);
              *(_OWORD *)(v24 - 216) = v26;
              *(void *)(v25 - 208) = 0;
              *(void *)(v25 - 200) = 0;
              *(void *)(v25 - 216) = 0;
              long long v27 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 192);
              *(void *)(v24 - 176) = *(void *)(*((void *)&v22 + 1) + v23 - 176);
              *(_OWORD *)(v24 - 192) = v27;
              *(void *)(v25 - 184) = 0;
              *(void *)(v25 - 176) = 0;
              *(void *)(v25 - 192) = 0;
              long long v28 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 168);
              *(void *)(v24 - 152) = *(void *)(*((void *)&v22 + 1) + v23 - 152);
              *(_OWORD *)(v24 - 168) = v28;
              *(void *)(v25 - 160) = 0;
              *(void *)(v25 - 152) = 0;
              *(void *)(v25 - 168) = 0;
              long long v29 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 144);
              *(_OWORD *)(v24 - 132) = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 132);
              *(_OWORD *)(v24 - 144) = v29;
              *(void *)(v24 - 104) = 0;
              *(void *)(v24 - 96) = 0;
              *(void *)(v24 - 112) = 0;
              *(_OWORD *)(v24 - 112) = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 112);
              *(void *)(v24 - 96) = *(void *)(*((void *)&v22 + 1) + v23 - 96);
              *(void *)(v25 - 112) = 0;
              *(void *)(v25 - 104) = 0;
              *(void *)(v25 - 96) = 0;
              long long v30 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 88);
              *(void *)(v24 - 72) = *(void *)(*((void *)&v22 + 1) + v23 - 72);
              *(_OWORD *)(v24 - 88) = v30;
              *(void *)(v25 - 80) = 0;
              *(void *)(v25 - 72) = 0;
              *(void *)(v25 - 88) = 0;
              *(_DWORD *)(v24 - 64) = *(_DWORD *)(*((void *)&v22 + 1) + v23 - 64);
              long long v31 = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 56);
              *(void *)(v24 - 40) = *(void *)(*((void *)&v22 + 1) + v23 - 40);
              *(_OWORD *)(v24 - 56) = v31;
              *(void *)(v25 - 48) = 0;
              *(void *)(v25 - 40) = 0;
              *(void *)(v25 - 56) = 0;
              *(void *)(v24 - 32) = 0;
              *(void *)(v24 - 24) = 0;
              *(void *)(v24 - 16) = 0;
              *(_OWORD *)(v24 - 32) = *(_OWORD *)(*((void *)&v22 + 1) + v23 - 32);
              *(void *)(v24 - 16) = *(void *)(*((void *)&v22 + 1) + v23 - 16);
              *(void *)(v25 - 32) = 0;
              *(void *)(v25 - 24) = 0;
              *(void *)(v25 - 16) = 0;
              *(_DWORD *)(v24 - 8) = *(_DWORD *)(*((void *)&v22 + 1) + v23 - 8);
              v23 -= 224;
            }
            while (*((void *)&v22 + 1) + v23 != (void)v22);
            v21 += v23;
            int64x2_t v32 = (int64x2_t)v65;
            uint64_t v9 = (float *)v68.i64[1];
          }
          *(void *)&long long v65 = v21;
          *((void *)&v65 + 1) = v9;
          int64x2_t v68 = v32;
          int v33 = (void **)v66;
          unint64_t v66 = (unint64_t)v69;
          unint64_t v69 = v33;
          unint64_t v67 = (void **)v32.i64[0];
          std::__split_buffer<marrs::mrr::mr::EntityWithDistance>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v9, (const marrs::mrr::mr::MRREntity *)(v6 + 216 * v10));
          v9[54] = v16;
          v9 += 56;
        }
        *((void *)&v65 + 1) = v9;
        uint64_t v6 = *a4;
        uint64_t v5 = a4[1];
      }
      ++v10;
    }
    while (v10 < 0x84BDA12F684BDA13 * ((v5 - v6) >> 3));
    uint64_t v34 = v65;
  }
  unint64_t v35 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - v34) >> 5));
  if (v9 == (float *)v34) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(v34, (unint64_t)v9, v36, 1);
  long long v63 = 0uLL;
  long long v64 = 0;
  long long v61 = 0uLL;
  unint64_t v62 = 0;
  long long v38 = (const marrs::mrr::mr::MRREntity *)*((void *)&v65 + 1);
  int v37 = (const marrs::mrr::mr::MRREntity *)v65;
  if ((void)v65 == *((void *)&v65 + 1))
  {
    uint64_t v59 = 0;
    uint64_t v58 = 0;
  }
  else
  {
    do
    {
      if (*(_DWORD *)v37 == *(_DWORD *)a2)
      {
        uint64_t v39 = *((void *)&v63 + 1);
        if (*((void *)&v63 + 1) >= (unint64_t)v64)
        {
          unint64_t v42 = 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)&v63 + 1) - v63) >> 3);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0x12F684BDA12F684) {
            goto LABEL_69;
          }
          if (0x97B425ED097B426 * ((uint64_t)((uint64_t)v64 - v63) >> 3) > v43) {
            unint64_t v43 = 0x97B425ED097B426 * ((uint64_t)((uint64_t)v64 - v63) >> 3);
          }
          if (0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v64 - v63) >> 3) >= 0x97B425ED097B42) {
            unint64_t v44 = 0x12F684BDA12F684;
          }
          else {
            unint64_t v44 = v43;
          }
          long long v70 = (unint64_t *)&v64;
          if (v44) {
            unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          unint64_t v67 = (void **)v44;
          v68.i64[0] = v44 + 216 * v42;
          v68.i64[1] = v68.i64[0];
          unint64_t v69 = (void **)(v44 + 216 * v45);
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], v37);
          uint64_t v49 = v68.i64[0];
          uint64_t v40 = v68.i64[1] + 216;
          v68.i64[1] += 216;
          uint64_t v50 = *((void *)&v63 + 1);
          uint64_t v51 = v63;
          if (*((void *)&v63 + 1) == (void)v63)
          {
            int64x2_t v52 = vdupq_n_s64(*((unint64_t *)&v63 + 1));
          }
          else
          {
            do
            {
              v49 -= 216;
              v50 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v49, v50);
            }
            while (v50 != v51);
            int64x2_t v52 = (int64x2_t)v63;
            uint64_t v40 = v68.i64[1];
          }
          *(void *)&long long v63 = v49;
          *((void *)&v63 + 1) = v40;
          int64x2_t v68 = v52;
          uint64_t v56 = v64;
          long long v64 = v69;
          unint64_t v69 = v56;
          unint64_t v67 = (void **)v52.i64[0];
          std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity(*((marrs::mrr::mr::MRREntity **)&v63 + 1), v37);
          uint64_t v40 = v39 + 216;
        }
        *((void *)&v63 + 1) = v40;
      }
      else
      {
        if (*((void *)&v61 + 1) >= (unint64_t)v62)
        {
          unint64_t v46 = 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3) + 1;
          if (v46 > 0x12F684BDA12F684) {
LABEL_69:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x97B425ED097B426 * ((uint64_t)((uint64_t)v62 - v61) >> 3) > v46) {
            unint64_t v46 = 0x97B425ED097B426 * ((uint64_t)((uint64_t)v62 - v61) >> 3);
          }
          if (0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v62 - v61) >> 3) >= 0x97B425ED097B42) {
            unint64_t v47 = 0x12F684BDA12F684;
          }
          else {
            unint64_t v47 = v46;
          }
          long long v70 = (unint64_t *)&v62;
          if (v47) {
            unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v47);
          }
          else {
            uint64_t v48 = 0;
          }
          unint64_t v67 = (void **)v47;
          v68.i64[0] = v47 + 8 * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3);
          v68.i64[1] = v68.i64[0];
          unint64_t v69 = (void **)(v47 + 216 * v48);
          marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)v68.i64[0], v37);
          uint64_t v53 = v68.i64[0];
          uint64_t v41 = v68.i64[1] + 216;
          v68.i64[1] += 216;
          uint64_t v54 = *((void *)&v61 + 1);
          if (*((void *)&v61 + 1) == (void)v61)
          {
            int64x2_t v55 = vdupq_n_s64(*((unint64_t *)&v61 + 1));
          }
          else
          {
            do
            {
              v53 -= 216;
              v54 -= 216;
              std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v53, v54);
            }
            while (v54 != (void)v61);
            int64x2_t v55 = (int64x2_t)v61;
            uint64_t v41 = v68.i64[1];
          }
          *(void *)&long long v61 = v53;
          *((void *)&v61 + 1) = v41;
          int64x2_t v68 = v55;
          uint64_t v57 = v62;
          unint64_t v62 = v69;
          unint64_t v69 = v57;
          unint64_t v67 = (void **)v55.i64[0];
          std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)&v67);
        }
        else
        {
          marrs::mrr::mr::MRREntity::MRREntity(*((marrs::mrr::mr::MRREntity **)&v61 + 1), v37);
          uint64_t v41 = *((void *)&v61 + 1) + 216;
        }
        *((void *)&v61 + 1) = v41;
      }
      int v37 = (const marrs::mrr::mr::MRREntity *)((char *)v37 + 224);
    }
    while (v37 != v38);
    uint64_t v59 = *((void *)&v61 + 1);
    uint64_t v58 = v61;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(a1, v58, v59, 0x84BDA12F684BDA13 * ((v59 - v58) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(a1 + 3, v63, *((uint64_t *)&v63 + 1), 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)&v63 + 1) - v63) >> 3));
  unint64_t v67 = (void **)&v61;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v67);
  unint64_t v67 = (void **)&v63;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v67);
  unint64_t v67 = (void **)&v65;
  std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100](&v67);
}

void sub_1C95C2B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  float v11 = va_arg(va2, void **);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  va_copy(va4, va3);
  char v20 = va_arg(va4, void **);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va4);
  va_copy((va_list)v20, va);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  va_copy((va_list)v6, va1);
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v11, va2);
  std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v120 = a2 - 224;
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v9;
        uint64_t v10 = a2 - v9;
        uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v9) >> 5);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0:
            case 1:
              return;
            case 2:
              if (*(float *)(a2 - 8) < *(float *)(a1 + 216))
              {
                std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v120);
              }
              break;
            case 3:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, v120);
              break;
            case 4:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, v120);
              break;
            case 5:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a1 + 672, v120);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v10 <= 5375)
        {
          if (a4)
          {
            if (a1 != a2)
            {
              int64x2_t v52 = (void ***)(a1 + 224);
              if (a1 + 224 != a2)
              {
                uint64_t v53 = 0;
                uint64_t v54 = a1;
                do
                {
                  int64x2_t v55 = v52;
                  float v56 = *(float *)(v54 + 440);
                  if (v56 < *(float *)(v54 + 216))
                  {
                    uint64_t v57 = *v52;
                    long long v143 = *(_OWORD *)(v54 + 232);
                    uint64_t v144 = *(void *)(v54 + 248);
                    *(void *)(v54 + 232) = 0;
                    *(void *)(v54 + 240) = 0;
                    long long v145 = *(_OWORD *)(v54 + 256);
                    uint64_t v146 = *(void *)(v54 + 272);
                    *(void *)(v54 + 248) = 0;
                    *(void *)(v54 + 256) = 0;
                    *(void *)(v54 + 264) = 0;
                    *(void *)(v54 + 272) = 0;
                    long long v58 = *(_OWORD *)(v54 + 280);
                    uint64_t v148 = *(void *)(v54 + 296);
                    long long v147 = v58;
                    *(void *)(v54 + 280) = 0;
                    *(void *)(v54 + 288) = 0;
                    *(void *)(v54 + 296) = 0;
                    long long v59 = *(_OWORD *)(v54 + 304);
                    *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(v54 + 316);
                    v149[0] = v59;
                    long long v150 = *(_OWORD *)(v54 + 336);
                    uint64_t v60 = *(void *)(v54 + 352);
                    long long v142 = v57;
                    uint64_t v151 = v60;
                    *(void *)(v54 + 336) = 0;
                    *(void *)(v54 + 344) = 0;
                    *(void *)(v54 + 352) = 0;
                    long long v61 = *(_OWORD *)(v54 + 360);
                    uint64_t v153 = *(void *)(v54 + 376);
                    long long v152 = v61;
                    *(void *)(v54 + 360) = 0;
                    *(void *)(v54 + 368) = 0;
                    *(void *)(v54 + 376) = 0;
                    int v154 = *(_DWORD *)(v54 + 384);
                    long long v62 = *(_OWORD *)(v54 + 392);
                    uint64_t v156 = *(void *)(v54 + 408);
                    long long __p = v62;
                    *(void *)(v54 + 392) = 0;
                    *(void *)(v54 + 400) = 0;
                    *(void *)(v54 + 408) = 0;
                    long long v157 = *(_OWORD *)(v54 + 416);
                    uint64_t v158 = *(void *)(v54 + 432);
                    *(void *)(v54 + 416) = 0;
                    *(void *)(v54 + 424) = 0;
                    *(void *)(v54 + 432) = 0;
                    uint64_t v63 = v53;
                    float v159 = v56;
                    while (1)
                    {
                      uint64_t v64 = a1 + v63;
                      marrs::mrr::mr::MRREntity::operator=(a1 + v63 + 224, a1 + v63);
                      *(_DWORD *)(a1 + v63 + 440) = *(_DWORD *)(a1 + v63 + 216);
                      if (!v63) {
                        break;
                      }
                      v63 -= 224;
                      if (v159 >= *(float *)(v64 - 8))
                      {
                        uint64_t v65 = a1 + v63 + 224;
                        goto LABEL_98;
                      }
                    }
                    uint64_t v65 = a1;
LABEL_98:
                    uint64_t v66 = marrs::mrr::mr::MRREntity::operator=(v65, (uint64_t)&v142);
                    *(float *)(v66 + 216) = v159;
                    uint64_t v123 = (void **)&v157;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v123);
                    if (SHIBYTE(v156) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v153) < 0) {
                      operator delete((void *)v152);
                    }
                    uint64_t v123 = (void **)&v150;
                    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v123);
                    if (SHIBYTE(v148) < 0) {
                      operator delete((void *)v147);
                    }
                    if (SHIBYTE(v146) < 0) {
                      operator delete((void *)v145);
                    }
                    if (SHIBYTE(v144) < 0) {
                      operator delete((void *)v143);
                    }
                  }
                  int64x2_t v52 = v55 + 28;
                  v53 += 224;
                  uint64_t v54 = (uint64_t)v55;
                }
                while (v55 + 28 != (void ***)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            long long v109 = (void ***)(a1 + 224);
            if (a1 + 224 != a2)
            {
              do
              {
                long long v110 = v109;
                float v111 = *(float *)(a1 + 440);
                if (v111 < *(float *)(a1 + 216))
                {
                  long long v112 = *v109;
                  long long v143 = *(_OWORD *)(a1 + 232);
                  uint64_t v144 = *(void *)(a1 + 248);
                  *(void *)(a1 + 232) = 0;
                  *(void *)(a1 + 240) = 0;
                  long long v145 = *(_OWORD *)(a1 + 256);
                  uint64_t v146 = *(void *)(a1 + 272);
                  *(void *)(a1 + 248) = 0;
                  *(void *)(a1 + 256) = 0;
                  *(void *)(a1 + 264) = 0;
                  *(void *)(a1 + 272) = 0;
                  long long v113 = *(_OWORD *)(a1 + 280);
                  uint64_t v148 = *(void *)(a1 + 296);
                  long long v147 = v113;
                  *(void *)(a1 + 280) = 0;
                  *(void *)(a1 + 288) = 0;
                  *(void *)(a1 + 296) = 0;
                  long long v114 = *(_OWORD *)(a1 + 304);
                  *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(a1 + 316);
                  v149[0] = v114;
                  long long v150 = *(_OWORD *)(a1 + 336);
                  uint64_t v115 = *(void *)(a1 + 352);
                  long long v142 = v112;
                  uint64_t v151 = v115;
                  *(void *)(a1 + 336) = 0;
                  *(void *)(a1 + 344) = 0;
                  *(void *)(a1 + 352) = 0;
                  long long v116 = *(_OWORD *)(a1 + 360);
                  uint64_t v153 = *(void *)(a1 + 376);
                  long long v152 = v116;
                  *(void *)(a1 + 360) = 0;
                  *(void *)(a1 + 368) = 0;
                  *(void *)(a1 + 376) = 0;
                  int v154 = *(_DWORD *)(a1 + 384);
                  long long v117 = *(_OWORD *)(a1 + 392);
                  uint64_t v156 = *(void *)(a1 + 408);
                  long long __p = v117;
                  *(void *)(a1 + 392) = 0;
                  *(void *)(a1 + 400) = 0;
                  *(void *)(a1 + 408) = 0;
                  long long v157 = *(_OWORD *)(a1 + 416);
                  uint64_t v158 = *(void *)(a1 + 432);
                  *(void *)(a1 + 416) = 0;
                  *(void *)(a1 + 424) = 0;
                  *(void *)(a1 + 432) = 0;
                  float v159 = v111;
                  do
                  {
                    uint64_t v118 = a1;
                    marrs::mrr::mr::MRREntity::operator=(a1 + 224, a1);
                    *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 216);
                    a1 -= 224;
                  }
                  while (v159 < *(float *)(v118 - 8));
                  marrs::mrr::mr::MRREntity::operator=(v118, (uint64_t)&v142);
                  *(float *)(v118 + 216) = v159;
                  uint64_t v123 = (void **)&v157;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v123);
                  if (SHIBYTE(v156) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v153) < 0) {
                    operator delete((void *)v152);
                  }
                  uint64_t v123 = (void **)&v150;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v123);
                  if (SHIBYTE(v148) < 0) {
                    operator delete((void *)v147);
                  }
                  if (SHIBYTE(v146) < 0) {
                    operator delete((void *)v145);
                  }
                  if (SHIBYTE(v144) < 0) {
                    operator delete((void *)v143);
                  }
                }
                long long v109 = v110 + 28;
                a1 = (uint64_t)v110;
              }
              while (v110 + 28 != (void ***)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v67 = (unint64_t)(v11 - 2) >> 1;
            int64_t v68 = v67;
            do
            {
              int64_t v69 = v68;
              if (v67 >= v68)
              {
                uint64_t v70 = (2 * v68) | 1;
                uint64_t v71 = a1 + 224 * v70;
                if (2 * v69 + 2 < v11 && *(float *)(a1 + 224 * v70 + 216) < *(float *)(v71 + 440))
                {
                  v71 += 224;
                  uint64_t v70 = 2 * v69 + 2;
                }
                float v72 = *(float *)(a1 + 224 * v69 + 216);
                if (*(float *)(v71 + 216) >= v72)
                {
                  uint64_t v73 = a1 + 224 * v69;
                  long long v142 = *(void ***)v73;
                  long long v74 = *(_OWORD *)(v73 + 8);
                  uint64_t v144 = *(void *)(v73 + 24);
                  long long v143 = v74;
                  *(void *)(v73 + 16) = 0;
                  *(void *)(v73 + 24) = 0;
                  *(void *)(v73 + 8) = 0;
                  long long v75 = *(_OWORD *)(v73 + 32);
                  uint64_t v146 = *(void *)(v73 + 48);
                  long long v145 = v75;
                  *(void *)(v73 + 40) = 0;
                  *(void *)(v73 + 48) = 0;
                  *(void *)(v73 + 32) = 0;
                  long long v76 = *(_OWORD *)(v73 + 56);
                  uint64_t v148 = *(void *)(v73 + 72);
                  long long v147 = v76;
                  *(void *)(v73 + 64) = 0;
                  *(void *)(v73 + 72) = 0;
                  *(void *)(v73 + 56) = 0;
                  long long v77 = *(_OWORD *)(v73 + 80);
                  *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(v73 + 92);
                  v149[0] = v77;
                  long long v150 = *(_OWORD *)(v73 + 112);
                  uint64_t v151 = *(void *)(v73 + 128);
                  *(void *)(v73 + 112) = 0;
                  *(void *)(v73 + 120) = 0;
                  *(void *)(v73 + 128) = 0;
                  long long v78 = *(_OWORD *)(v73 + 136);
                  uint64_t v153 = *(void *)(v73 + 152);
                  long long v152 = v78;
                  *(void *)(v73 + 144) = 0;
                  *(void *)(v73 + 152) = 0;
                  *(void *)(v73 + 136) = 0;
                  int v154 = *(_DWORD *)(v73 + 160);
                  long long v79 = *(_OWORD *)(v73 + 168);
                  uint64_t v156 = *(void *)(v73 + 184);
                  long long __p = v79;
                  *(void *)(v73 + 176) = 0;
                  *(void *)(v73 + 184) = 0;
                  *(void *)(v73 + 168) = 0;
                  long long v157 = *(_OWORD *)(v73 + 192);
                  uint64_t v158 = *(void *)(v73 + 208);
                  *(void *)(v73 + 192) = 0;
                  *(void *)(v73 + 200) = 0;
                  *(void *)(v73 + 208) = 0;
                  float v159 = v72;
                  do
                  {
                    uint64_t v80 = v71;
                    *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v73, v71) + 216) = *(_DWORD *)(v71 + 216);
                    if (v67 < v70) {
                      break;
                    }
                    uint64_t v81 = (2 * v70) | 1;
                    uint64_t v71 = a1 + 224 * v81;
                    if (2 * v70 + 2 < v11 && *(float *)(a1 + 224 * v81 + 216) < *(float *)(v71 + 440))
                    {
                      v71 += 224;
                      uint64_t v81 = 2 * v70 + 2;
                    }
                    uint64_t v73 = v80;
                    uint64_t v70 = v81;
                  }
                  while (*(float *)(v71 + 216) >= v159);
                  marrs::mrr::mr::MRREntity::operator=(v80, (uint64_t)&v142);
                  *(float *)(v80 + 216) = v159;
                  uint64_t v123 = (void **)&v157;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v123);
                  if (SHIBYTE(v156) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v153) < 0) {
                    operator delete((void *)v152);
                  }
                  uint64_t v123 = (void **)&v150;
                  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v123);
                  if (SHIBYTE(v148) < 0) {
                    operator delete((void *)v147);
                  }
                  if (SHIBYTE(v146) < 0) {
                    operator delete((void *)v145);
                  }
                  if (SHIBYTE(v144) < 0) {
                    operator delete((void *)v143);
                  }
                }
              }
              int64_t v68 = v69 - 1;
            }
            while (v69);
            uint64_t v82 = (((unint64_t)v10 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
            char v121 = (long long *)(a1 + 8);
            char v119 = (long long *)(a1 + 32);
            uint64_t v83 = (long long *)(a1 + 56);
            unint64_t v84 = (long long *)(a1 + 136);
            uint64_t v85 = (long long *)(a1 + 168);
            do
            {
              if (v82 >= 2)
              {
                uint64_t v86 = 0;
                uint64_t v123 = *(void ***)a1;
                uint64_t v87 = *(void *)(a1 + 24);
                long long v124 = *v121;
                uint64_t v125 = v87;
                *(void *)(a1 + 16) = 0;
                *(void *)(a1 + 24) = 0;
                *(void *)char v121 = 0;
                long long v88 = *v119;
                uint64_t v127 = *(void *)(a1 + 48);
                long long v126 = v88;
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 48) = 0;
                *(void *)char v119 = 0;
                long long v89 = *v83;
                uint64_t v129 = *(void *)(a1 + 72);
                long long v128 = v89;
                *(void *)uint64_t v83 = 0;
                *(void *)(a1 + 64) = 0;
                *(void *)(a1 + 72) = 0;
                long long v90 = *(_OWORD *)(a1 + 80);
                *(_OWORD *)((char *)v130 + 12) = *(_OWORD *)(a1 + 92);
                v130[0] = v90;
                long long v131 = *(_OWORD *)(a1 + 112);
                uint64_t v132 = *(void *)(a1 + 128);
                *(void *)(a1 + 112) = 0;
                *(void *)(a1 + 120) = 0;
                *(void *)(a1 + 128) = 0;
                long long v91 = *v84;
                uint64_t v134 = *(void *)(a1 + 152);
                long long v133 = v91;
                *(void *)unint64_t v84 = 0;
                *(void *)(a1 + 144) = 0;
                *(void *)(a1 + 152) = 0;
                int v135 = *(_DWORD *)(a1 + 160);
                long long v92 = *v85;
                uint64_t v137 = *(void *)(a1 + 184);
                long long v136 = v92;
                *(void *)uint64_t v85 = 0;
                *(void *)(a1 + 176) = 0;
                *(void *)(a1 + 184) = 0;
                long long v138 = *(_OWORD *)(a1 + 192);
                uint64_t v139 = *(void *)(a1 + 208);
                *(void *)(a1 + 192) = 0;
                *(void *)(a1 + 200) = 0;
                *(void *)(a1 + 208) = 0;
                uint64_t v93 = a1;
                int v140 = *(_DWORD *)(a1 + 216);
                do
                {
                  uint64_t v94 = v93;
                  uint64_t v95 = v86 + 1;
                  v93 += 224 * (v86 + 1);
                  uint64_t v96 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  uint64_t v97 = v96 + 2;
                  if (v97 < v82 && *(float *)(v94 + 224 * v95 + 216) < *(float *)(v93 + 440))
                  {
                    v93 += 224;
                    uint64_t v86 = v97;
                  }
                  *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v94, v93) + 216) = *(_DWORD *)(v93 + 216);
                }
                while (v86 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                if (v93 == a2 - 224)
                {
                  marrs::mrr::mr::MRREntity::operator=(v93, (uint64_t)&v123);
                  *(_DWORD *)(v93 + 216) = v140;
                }
                else
                {
                  marrs::mrr::mr::MRREntity::operator=(v93, a2 - 224);
                  *(_DWORD *)(v93 + 216) = *(_DWORD *)(a2 - 8);
                  marrs::mrr::mr::MRREntity::operator=(a2 - 224, (uint64_t)&v123);
                  *(_DWORD *)(a2 - 8) = v140;
                  uint64_t v98 = v93 - a1 + 224;
                  if (v98 >= 225)
                  {
                    unint64_t v99 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (v98 >> 5) - 2) >> 1;
                    float v100 = *(float *)(v93 + 216);
                    if (*(float *)(a1 + 224 * v99 + 216) < v100)
                    {
                      long long v142 = *(void ***)v93;
                      long long v101 = *(_OWORD *)(v93 + 8);
                      uint64_t v144 = *(void *)(v93 + 24);
                      long long v143 = v101;
                      *(void *)(v93 + 16) = 0;
                      *(void *)(v93 + 24) = 0;
                      *(void *)(v93 + 8) = 0;
                      long long v102 = *(_OWORD *)(v93 + 32);
                      uint64_t v146 = *(void *)(v93 + 48);
                      long long v145 = v102;
                      *(void *)(v93 + 40) = 0;
                      *(void *)(v93 + 48) = 0;
                      *(void *)(v93 + 32) = 0;
                      long long v103 = *(_OWORD *)(v93 + 56);
                      uint64_t v148 = *(void *)(v93 + 72);
                      long long v147 = v103;
                      *(void *)(v93 + 64) = 0;
                      *(void *)(v93 + 72) = 0;
                      *(void *)(v93 + 56) = 0;
                      long long v104 = *(_OWORD *)(v93 + 80);
                      *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(v93 + 92);
                      v149[0] = v104;
                      long long v150 = *(_OWORD *)(v93 + 112);
                      uint64_t v151 = *(void *)(v93 + 128);
                      *(void *)(v93 + 112) = 0;
                      *(void *)(v93 + 120) = 0;
                      *(void *)(v93 + 128) = 0;
                      long long v105 = *(_OWORD *)(v93 + 136);
                      uint64_t v153 = *(void *)(v93 + 152);
                      long long v152 = v105;
                      *(void *)(v93 + 144) = 0;
                      *(void *)(v93 + 152) = 0;
                      *(void *)(v93 + 136) = 0;
                      int v154 = *(_DWORD *)(v93 + 160);
                      long long v106 = *(_OWORD *)(v93 + 168);
                      uint64_t v156 = *(void *)(v93 + 184);
                      long long __p = v106;
                      *(void *)(v93 + 176) = 0;
                      *(void *)(v93 + 184) = 0;
                      *(void *)(v93 + 168) = 0;
                      long long v157 = *(_OWORD *)(v93 + 192);
                      uint64_t v158 = *(void *)(v93 + 208);
                      *(void *)(v93 + 192) = 0;
                      *(void *)(v93 + 200) = 0;
                      *(void *)(v93 + 208) = 0;
                      float v159 = v100;
                      do
                      {
                        uint64_t v107 = v93;
                        uint64_t v93 = a1 + 224 * v99;
                        *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(v107, v93) + 216) = *(_DWORD *)(v93 + 216);
                        if (!v99) {
                          break;
                        }
                        unint64_t v99 = (v99 - 1) >> 1;
                      }
                      while (*(float *)(a1 + 224 * v99 + 216) < v100);
                      marrs::mrr::mr::MRREntity::operator=(v93, (uint64_t)&v142);
                      *(float *)(v93 + 216) = v159;
                      uint64_t v141 = (void **)&v157;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v141);
                      if (SHIBYTE(v156) < 0) {
                        operator delete((void *)__p);
                      }
                      if (SHIBYTE(v153) < 0) {
                        operator delete((void *)v152);
                      }
                      uint64_t v141 = (void **)&v150;
                      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v141);
                      if (SHIBYTE(v148) < 0) {
                        operator delete((void *)v147);
                      }
                      if (SHIBYTE(v146) < 0) {
                        operator delete((void *)v145);
                      }
                      if (SHIBYTE(v144) < 0) {
                        operator delete((void *)v143);
                      }
                    }
                  }
                }
                long long v142 = (void **)&v138;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v142);
                if (SHIBYTE(v137) < 0) {
                  operator delete((void *)v136);
                }
                if (SHIBYTE(v134) < 0) {
                  operator delete((void *)v133);
                }
                long long v142 = (void **)&v131;
                std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v142);
                if (SHIBYTE(v129) < 0) {
                  operator delete((void *)v128);
                }
                if (SHIBYTE(v127) < 0) {
                  operator delete((void *)v126);
                }
                if (SHIBYTE(v125) < 0) {
                  operator delete((void *)v124);
                }
              }
              a2 -= 224;
            }
            while ((unint64_t)v82-- > 2);
          }
          return;
        }
        unint64_t v12 = (unint64_t)v11 >> 1;
        uint64_t v13 = a1 + 224 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 <= 0x7000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v13, a1, v120);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, v13, v120);
          uint64_t v14 = 224 * v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1 + 224, v14 + a1 - 224, a2 - 448);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1 + 448, a1 + 224 + v14, a2 - 672);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v14 + a1 - 224, v13, a1 + 224 + v14);
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v13);
        }
        --a3;
        if (a4) {
          break;
        }
        float v15 = *(float *)(a1 + 216);
        if (*(float *)(a1 - 8) < v15) {
          goto LABEL_12;
        }
        unint64_t v35 = *(void ***)a1;
        uint64_t v36 = *(void *)(a1 + 24);
        long long v143 = *(_OWORD *)(a1 + 8);
        uint64_t v144 = v36;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        long long v37 = *(_OWORD *)(a1 + 32);
        uint64_t v146 = *(void *)(a1 + 48);
        long long v145 = v37;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 32) = 0;
        long long v38 = *(_OWORD *)(a1 + 56);
        uint64_t v148 = *(void *)(a1 + 72);
        long long v147 = v38;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        long long v39 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(a1 + 92);
        v149[0] = v39;
        long long v150 = *(_OWORD *)(a1 + 112);
        uint64_t v40 = *(void *)(a1 + 128);
        long long v142 = v35;
        uint64_t v151 = v40;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        long long v41 = *(_OWORD *)(a1 + 136);
        uint64_t v153 = *(void *)(a1 + 152);
        long long v152 = v41;
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        int v154 = *(_DWORD *)(a1 + 160);
        long long v42 = *(_OWORD *)(a1 + 168);
        uint64_t v156 = *(void *)(a1 + 184);
        long long __p = v42;
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        *(void *)(a1 + 184) = 0;
        long long v157 = *(_OWORD *)(a1 + 192);
        uint64_t v158 = *(void *)(a1 + 208);
        *(void *)(a1 + 192) = 0;
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        float v159 = v15;
        if (v15 >= *(float *)(a2 - 8))
        {
          unint64_t v45 = a1 + 224;
          do
          {
            unint64_t v9 = v45;
            if (v45 >= a2) {
              break;
            }
            float v46 = *(float *)(v45 + 216);
            v45 += 224;
          }
          while (v15 >= v46);
        }
        else
        {
          uint64_t v43 = a1;
          do
          {
            unint64_t v9 = v43 + 224;
            float v44 = *(float *)(v43 + 440);
            v43 += 224;
          }
          while (v15 >= v44);
        }
        unint64_t v47 = a2;
        if (v9 < a2)
        {
          unint64_t v48 = a2;
          do
          {
            unint64_t v47 = v48 - 224;
            float v49 = *(float *)(v48 - 8);
            v48 -= 224;
          }
          while (v15 < v49);
        }
        while (v9 < v47)
        {
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(v9, v47);
          do
          {
            float v50 = *(float *)(v9 + 440);
            v9 += 224;
          }
          while (v15 >= v50);
          do
          {
            float v51 = *(float *)(v47 - 8);
            v47 -= 224;
          }
          while (v15 < v51);
        }
        if (v9 - 224 != a1)
        {
          marrs::mrr::mr::MRREntity::operator=(a1, v9 - 224);
          *(_DWORD *)(a1 + 216) = *(_DWORD *)(v9 - 8);
        }
        marrs::mrr::mr::MRREntity::operator=(v9 - 224, (uint64_t)&v142);
        *(float *)(v9 - 8) = v159;
        uint64_t v123 = (void **)&v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v123);
        if (SHIBYTE(v156) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v153) < 0) {
          operator delete((void *)v152);
        }
        uint64_t v123 = (void **)&v150;
        std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v123);
        if (SHIBYTE(v148) < 0) {
          operator delete((void *)v147);
        }
        if (SHIBYTE(v146) < 0) {
          operator delete((void *)v145);
        }
        if (SHIBYTE(v144) < 0) {
          operator delete((void *)v143);
        }
LABEL_44:
        a4 = 0;
      }
      float v15 = *(float *)(a1 + 216);
LABEL_12:
      uint64_t v16 = *(void ***)a1;
      uint64_t v17 = *(void *)(a1 + 24);
      long long v143 = *(_OWORD *)(a1 + 8);
      uint64_t v144 = v17;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      long long v18 = *(_OWORD *)(a1 + 32);
      uint64_t v146 = *(void *)(a1 + 48);
      long long v145 = v18;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 32) = 0;
      long long v19 = *(_OWORD *)(a1 + 56);
      uint64_t v148 = *(void *)(a1 + 72);
      long long v147 = v19;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      long long v20 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(a1 + 92);
      v149[0] = v20;
      long long v150 = *(_OWORD *)(a1 + 112);
      uint64_t v21 = *(void *)(a1 + 128);
      long long v142 = v16;
      uint64_t v151 = v21;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      long long v22 = *(_OWORD *)(a1 + 136);
      uint64_t v153 = *(void *)(a1 + 152);
      long long v152 = v22;
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      int v154 = *(_DWORD *)(a1 + 160);
      long long v23 = *(_OWORD *)(a1 + 168);
      uint64_t v156 = *(void *)(a1 + 184);
      long long __p = v23;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      long long v157 = *(_OWORD *)(a1 + 192);
      uint64_t v158 = *(void *)(a1 + 208);
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      unint64_t v24 = a1;
      float v159 = v15;
      do
      {
        unint64_t v25 = v24;
        v24 += 224;
      }
      while (*(float *)(v25 + 440) < v15);
      unint64_t v26 = a2;
      if (v25 == a1)
      {
        unint64_t v29 = a2;
        while (v24 < v29)
        {
          unint64_t v27 = v29 - 224;
          float v30 = *(float *)(v29 - 8);
          v29 -= 224;
          if (v30 < v15) {
            goto LABEL_22;
          }
        }
        unint64_t v27 = v29;
      }
      else
      {
        do
        {
          unint64_t v27 = v26 - 224;
          float v28 = *(float *)(v26 - 8);
          v26 -= 224;
        }
        while (v28 >= v15);
      }
LABEL_22:
      unint64_t v9 = v24;
      if (v24 < v27)
      {
        unint64_t v31 = v27;
        do
        {
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(v9, v31);
          do
          {
            float v32 = *(float *)(v9 + 440);
            v9 += 224;
          }
          while (v32 < v15);
          do
          {
            float v33 = *(float *)(v31 - 8);
            v31 -= 224;
          }
          while (v33 >= v15);
        }
        while (v9 < v31);
      }
      if (v9 - 224 != a1)
      {
        marrs::mrr::mr::MRREntity::operator=(a1, v9 - 224);
        *(_DWORD *)(a1 + 216) = *(_DWORD *)(v9 - 8);
      }
      marrs::mrr::mr::MRREntity::operator=(v9 - 224, (uint64_t)&v142);
      *(float *)(v9 - 8) = v159;
      uint64_t v123 = (void **)&v157;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v123);
      if (SHIBYTE(v156) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v153) < 0) {
        operator delete((void *)v152);
      }
      uint64_t v123 = (void **)&v150;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v123);
      if (SHIBYTE(v148) < 0) {
        operator delete((void *)v147);
      }
      if (SHIBYTE(v146) < 0) {
        operator delete((void *)v145);
      }
      if (SHIBYTE(v144) < 0) {
        operator delete((void *)v143);
      }
      if (v24 < v27)
      {
LABEL_43:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *,false>(a1, v9 - 224, a3, a4 & 1);
        goto LABEL_44;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, v9 - 224);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(v9, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_43;
      }
    }
    a2 = v9 - 224;
    if (!v34) {
      continue;
    }
    break;
  }
}

void std::vector<marrs::mrr::mr::EntityWithDistance>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    char v4 = (void **)v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        marrs::mrr::mr::MRREntity::~MRREntity(v4 - 28);
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<marrs::mrr::mr::MRREntity>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRREntity*,marrs::mrr::mr::MRREntity*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x12F684BDA12F685) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(a4);
    double v7 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[27 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&v7[v9 / 8], (const marrs::mrr::mr::MRREntity *)(a2 + v9));
        v9 += 216;
      }
      while (a2 + v9 != a3);
      double v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C95C4034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__split_buffer<marrs::mrr::mr::EntityWithDistance>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    marrs::mrr::mr::MRREntity::~MRREntity((void **)(i - 224));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *(void *)a1;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)unint64_t v12 = *(_OWORD *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v16[12] = *(_OWORD *)(a1 + 92);
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)uint64_t v16 = v3;
  long long v17 = v4;
  uint64_t v5 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  long long v6 = *(_OWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v18 = v5;
  uint64_t v20 = v7;
  long long v19 = v6;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  int v21 = *(_DWORD *)(a1 + 160);
  long long v8 = *(_OWORD *)(a1 + 168);
  uint64_t v23 = *(void *)(a1 + 184);
  long long __p = v8;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  long long v24 = *(_OWORD *)(a1 + 192);
  uint64_t v25 = *(void *)(a1 + 208);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  int v26 = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(marrs::mrr::mr::MRREntity::operator=(a1, a2) + 216) = *(_DWORD *)(a2 + 216);
  marrs::mrr::mr::MRREntity::operator=(a2, (uint64_t)&v9);
  *(_DWORD *)(a2 + 216) = v26;
  unint64_t v27 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  unint64_t v27 = (void **)&v17;
  std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  float v6 = *(float *)(a2 + 216);
  float v7 = *(float *)(a3 + 216);
  if (v6 >= *(float *)(a1 + 216))
  {
    if (v7 >= v6) {
      return;
    }
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
    if (*(float *)(a2 + 216) >= *(float *)(v5 + 216)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
      if (*(float *)(a3 + 216) >= *(float *)(a2 + 216)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }
  std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, v8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a2, a3);
  if (*(float *)(a4 + 216) < *(float *)(a3 + 216))
  {
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a3, a4);
    if (*(float *)(a3 + 216) < *(float *)(a2 + 216))
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
      if (*(float *)(a2 + 216) < *(float *)(a1 + 216))
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a2, a3, a4);
  if (*(float *)(a5 + 216) < *(float *)(a4 + 216))
  {
    std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a4, a5);
    if (*(float *)(a4 + 216) < *(float *)(a3 + 216))
    {
      std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a3, a4);
      if (*(float *)(a3 + 216) < *(float *)(a2 + 216))
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a2, a3);
        if (*(float *)(a2 + 216) < *(float *)(a1 + 216))
        {
          std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 216))
      {
        std::swap[abi:ne180100]<marrs::mrr::mr::EntityWithDistance>(a1, a2 - 224);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a2 - 224);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448, a1 + 672, a2 - 224);
      return 1;
    default:
      uint64_t v6 = a1 + 448;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,marrs::mrr::mr::EntityWithDistance *>(a1, a1 + 224, a1 + 448);
      uint64_t v7 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)(v7 + 216);
    if (v10 < *(float *)(v6 + 216))
    {
      uint64_t v18 = *(void *)v7;
      long long v19 = *(_OWORD *)(v7 + 8);
      uint64_t v20 = *(void *)(v7 + 24);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      long long v21 = *(_OWORD *)(v7 + 32);
      uint64_t v22 = *(void *)(v7 + 48);
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      long long v23 = *(_OWORD *)(v7 + 56);
      uint64_t v24 = *(void *)(v7 + 72);
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 64) = 0;
      *(void *)(v7 + 72) = 0;
      long long v11 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(v7 + 92);
      v25[0] = v11;
      long long v26 = *(_OWORD *)(v7 + 112);
      uint64_t v27 = *(void *)(v7 + 128);
      *(void *)(v7 + 112) = 0;
      *(void *)(v7 + 120) = 0;
      long long v12 = *(_OWORD *)(v7 + 136);
      uint64_t v29 = *(void *)(v7 + 152);
      long long v28 = v12;
      *(void *)(v7 + 128) = 0;
      *(void *)(v7 + 136) = 0;
      *(void *)(v7 + 144) = 0;
      *(void *)(v7 + 152) = 0;
      int v30 = *(_DWORD *)(v7 + 160);
      long long v13 = *(_OWORD *)(v7 + 168);
      uint64_t v32 = *(void *)(v7 + 184);
      long long __p = v13;
      *(void *)(v7 + 168) = 0;
      *(void *)(v7 + 176) = 0;
      long long v33 = *(_OWORD *)(v7 + 192);
      uint64_t v34 = *(void *)(v7 + 208);
      *(void *)(v7 + 184) = 0;
      *(void *)(v7 + 192) = 0;
      *(void *)(v7 + 200) = 0;
      *(void *)(v7 + 208) = 0;
      uint64_t v14 = v8;
      float v35 = v10;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        marrs::mrr::mr::MRREntity::operator=(a1 + v14 + 672, a1 + v14 + 448);
        *(_DWORD *)(a1 + v14 + 888) = *(_DWORD *)(a1 + v14 + 664);
        if (v14 == -448) {
          break;
        }
        v14 -= 224;
        if (v35 >= *(float *)(v15 + 440))
        {
          uint64_t v16 = a1 + v14 + 672;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      uint64_t v17 = marrs::mrr::mr::MRREntity::operator=(v16, (uint64_t)&v18);
      *(float *)(v17 + 216) = v35;
      v36[0] = (void **)&v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)v28);
      }
      v36[0] = (void **)&v26;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](v36);
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete((void *)v21);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete((void *)v19);
      }
      if (++v9 == 8) {
        return v7 + 224 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 224;
    v7 += 224;
    if (v7 == a2) {
      return 1;
    }
  }
}

void *std::vector<std::array<float,25ul>>::vector(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x28F5C28F5C28F5DLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = (char *)v6 + 100 * v7;
    uint64_t v8 = 100 * a2;
    int v9 = (char *)v6 + 100 * a2;
    do
    {
      long long v10 = *a3;
      long long v11 = a3[2];
      v6[1] = a3[1];
      v6[2] = v11;
      *uint64_t v6 = v10;
      long long v12 = a3[3];
      long long v13 = a3[4];
      long long v14 = a3[5];
      *((_DWORD *)v6 + 24) = *((_DWORD *)a3 + 24);
      v6[4] = v13;
      v6[5] = v14;
      void v6[3] = v12;
      uint64_t v6 = (_OWORD *)((char *)v6 + 100);
      v8 -= 100;
    }
    while (v8);
    a1[1] = v9;
  }
  return a1;
}

void sub_1C95C4884(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marrs::mrr::mr::logFeatureVectorArray<25ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"feature ", 8);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)));
  uint64_t v7 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*a1 != v9)
  {
    int v10 = 0;
    long long v11 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
      long long v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") - ", 4);
      for (uint64_t i = 0; i != 100; i += 4)
      {
        long long v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)));
      uint64_t v15 = std::locale::use_facet((const std::locale *)__p, v11);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      ++v10;
      v8 += 100;
    }
    while (v8 != v9);
  }
  uint64_t v16 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v17 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v25 = v17;
    _os_log_impl(&dword_1C9555000, v16, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB786D60](&v23);
}

void sub_1C95C4C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<float,25ul>>>(unint64_t a1)
{
  if (a1 >= 0x28F5C28F5C28F5DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(100 * a1);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::__wrap_iter<marrs::mrr::mr::MRREntity *>,std::back_insert_iterator<std::vector<marrs::mrr::mr::MRREntity>>,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (unint64_t *)(a3 + 2);
    unint64_t v7 = a3[1];
    do
    {
      if (v7 >= *v6)
      {
        unint64_t v8 = 0x84BDA12F684BDA13 * ((uint64_t)(v7 - *a3) >> 3);
        unint64_t v9 = v8 + 1;
        if (v8 + 1 > 0x12F684BDA12F684) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x97B425ED097B426 * ((uint64_t)(*v6 - *a3) >> 3) > v9) {
          unint64_t v9 = 0x97B425ED097B426 * ((uint64_t)(*v6 - *a3) >> 3);
        }
        if (0x84BDA12F684BDA13 * ((uint64_t)(*v6 - *a3) >> 3) >= 0x97B425ED097B42) {
          unint64_t v10 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v10 = v9;
        }
        v13[4] = v6;
        if (v10) {
          unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRREntity>>(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = v10 + 216 * v8;
        v13[0] = v10;
        v13[1] = v12;
        v13[3] = v10 + 216 * v11;
        std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v12, v5);
        void v13[2] = v12 + 216;
        std::vector<marrs::mrr::mr::MRREntity>::__swap_out_circular_buffer(a3, v13);
        unint64_t v7 = a3[1];
        std::__split_buffer<marrs::mrr::mr::MRREntity>::~__split_buffer((uint64_t)v13);
      }
      else
      {
        std::allocator<marrs::mrr::mr::MRREntity>::construct[abi:ne180100]<marrs::mrr::mr::MRREntity,marrs::mrr::mr::MRREntity>(v7, v5);
        v7 += 216;
      }
      a3[1] = v7;
      v5 += 216;
    }
    while (v5 != a2);
  }
}

void **std::pair<std::vector<marrs::mrr::mr::MRREntity>,std::vector<marrs::mrr::mr::MRREntity>>::~pair(void **a1)
{
  long long v3 = a1 + 3;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = a1;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1C95C4EA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (void *)(v7 + 24 * v2);
  v12[0] = v7;
  v12[1] = v9;
  long long v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *unint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v13 += 3;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v12);
  return v10;
}

void sub_1C95C4FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void marrs::mrr::mr::computeStringMatchFeatures(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7)
  {
    MEMORY[0x1CB786D10](&v78);
    std::locale::locale(&v82, &v78);
    BOOL v14 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a3, (uint64_t *)a2, &v82);
    std::locale::~locale(&v82);
    std::locale::~locale(&v78);
    if (v14) {
      *(_DWORD *)a1 = 1065353216;
    }
    MEMORY[0x1CB786D10](&v78);
    std::locale::locale(&v82, &v78);
    BOOL v15 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a2, (uint64_t *)a3, &v82);
    std::locale::~locale(&v82);
    std::locale::~locale(&v78);
    if (v15) {
      *(_DWORD *)(a1 + 4) = 1065353216;
    }
    uint64_t v16 = a4 + 1;
    uint64_t v17 = (void *)*a4;
    if ((void *)*a4 != a4 + 1)
    {
      long long v74 = a4;
      long long v75 = a5;
      uint64_t v18 = (void *)(a7 + 8);
      do
      {
        uint64_t v19 = *v18;
        if (!*v18) {
          goto LABEL_26;
        }
        char v20 = *((char *)v17 + 55) >= 0 ? (const char *)(v17 + 4) : (const char *)v17[4];
        long long v21 = v18;
        do
        {
          if (*(char *)(v19 + 55) >= 0) {
            char v22 = (const char *)(v19 + 32);
          }
          else {
            char v22 = *(const char **)(v19 + 32);
          }
          int v23 = strcasecmp(v22, v20);
          uint64_t v24 = (uint64_t *)(v19 + 8);
          if (v23 >= 0)
          {
            uint64_t v24 = (uint64_t *)v19;
            long long v21 = (void *)v19;
          }
          uint64_t v19 = *v24;
        }
        while (*v24);
        if (v18 == v21
          || ((uint64_t v27 = (const char *)v21[4], v26 = (const char *)(v21 + 4), v25 = v27, v26[23] >= 0)
            ? (long long v28 = v26)
            : (long long v28 = v25),
              strcasecmp(v20, v28) < 0))
        {
LABEL_26:
          MEMORY[0x1CB786D10](&v78);
          std::locale::locale(&v82, &v78);
          BOOL v29 = boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>((uint64_t *)a2, v17 + 4, &v82);
          std::locale::~locale(&v82);
          std::locale::~locale(&v78);
          if (v29) {
            *(float *)(a1 + 8) = *(float *)(a1 + 8) + 1.0;
          }
        }
        int v30 = (void *)v17[1];
        if (v30)
        {
          do
          {
            unint64_t v31 = v30;
            int v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            unint64_t v31 = (void *)v17[2];
            BOOL v32 = *v31 == (void)v17;
            uint64_t v17 = v31;
          }
          while (!v32);
        }
        uint64_t v17 = v31;
      }
      while (v31 != v16);
      a4 = v74;
      a5 = v75;
      uint64_t v17 = (void *)*v74;
    }
    if (v17 != v16)
    {
      float v33 = *(float *)(a1 + 12);
      uint64_t v34 = MEMORY[0x1E4F14390];
      do
      {
        if (*((char *)v17 + 55) < 0)
        {
          float v35 = (char *)v17[4];
          for (uint64_t i = v17[5]; i; --i)
          {
LABEL_39:
            if ((*v35 & 0x80000000) == 0)
            {
              uint64_t v37 = *v35;
              if ((*(_DWORD *)(v34 + 4 * v37 + 60) & 0x400) != 0
                && std::string::find((const std::string *)a2, v37, 0) != -1)
              {
                float v33 = v33 + 1.0;
                *(float *)(a1 + 12) = v33;
              }
            }
            ++v35;
          }
        }
        else
        {
          float v35 = (char *)(v17 + 4);
          uint64_t i = *((unsigned __int8 *)v17 + 55);
          if (*((unsigned char *)v17 + 55)) {
            goto LABEL_39;
          }
        }
        long long v38 = (void *)v17[1];
        if (v38)
        {
          do
          {
            long long v39 = v38;
            long long v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            long long v39 = (void *)v17[2];
            BOOL v32 = *v39 == (void)v17;
            uint64_t v17 = v39;
          }
          while (!v32);
        }
        uint64_t v17 = v39;
      }
      while (v39 != v16);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v81 = *(std::string *)a3;
    }
    getDigitsInString(&v82, (unsigned __int8 *)&v81);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v77 = *(std::string *)a2;
    }
    getDigitsInString(&v78, (unsigned __int8 *)&v77);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    int64_t v40 = v84;
    if ((v84 & 0x80u) != 0) {
      int64_t v40 = v83;
    }
    if (!v40) {
      goto LABEL_146;
    }
    uint64_t v41 = v80;
    if ((v80 & 0x80u) != 0) {
      uint64_t v41 = v79;
    }
    if (!v41) {
      goto LABEL_146;
    }
    if (tokenIntersection(a4, a6))
    {
      unint64_t v42 = v80;
      if ((v80 & 0x80u) != 0) {
        unint64_t v42 = v79;
      }
      unint64_t v43 = v84;
      if ((v84 & 0x80u) != 0) {
        unint64_t v43 = v83;
      }
      if (v42 >= v43)
      {
        MEMORY[0x1CB786D10](&v85);
        std::locale::locale(&v86, &v85);
        if ((v80 & 0x80u) == 0) {
          std::basic_regex<char>::value_type locale = (char *)&v78;
        }
        else {
          std::basic_regex<char>::value_type locale = (char *)v78.__locale_;
        }
        if ((v80 & 0x80u) == 0) {
          uint64_t v45 = v80;
        }
        else {
          uint64_t v45 = v79;
        }
        if ((v84 & 0x80u) == 0) {
          float v46 = (char *)&v82;
        }
        else {
          float v46 = (char *)v82.__locale_;
        }
        if ((v84 & 0x80u) == 0) {
          int64_t v47 = v84;
        }
        else {
          int64_t v47 = v83;
        }
        std::locale::locale(&v87, &v86);
        unint64_t v48 = locale - 1;
        while (v45 && v47)
        {
          if (!boost::algorithm::is_iequal::operator()<char,char>(&v87, v48[v45--], &v46[--v47]))
          {
            BOOL v50 = 0;
            goto LABEL_100;
          }
        }
        BOOL v50 = &v46[v47] == v46;
LABEL_100:
        std::locale::~locale(&v87);
        std::locale::~locale(&v86);
        int64x2_t v55 = &v85;
        goto LABEL_142;
      }
    }
    else
    {
      unint64_t v51 = tokenIntersection(a4, a5);
      int64_t v52 = v80;
      if (!v51)
      {
        if ((v80 & 0x80u) == 0) {
          float v56 = (char *)&v78;
        }
        else {
          float v56 = (char *)v78.__locale_;
        }
        if ((v80 & 0x80u) != 0) {
          int64_t v52 = v79;
        }
        if ((v84 & 0x80u) == 0) {
          uint64_t v57 = (char *)&v82;
        }
        else {
          uint64_t v57 = (char *)v82.__locale_;
        }
        if ((v84 & 0x80u) == 0) {
          int64_t v58 = v84;
        }
        else {
          int64_t v58 = v83;
        }
        if (v58)
        {
          if (v52 >= v58)
          {
            long long v59 = &v56[v52];
            int v60 = *v57;
            long long v61 = v56;
            while (1)
            {
              uint64_t v62 = v52 - v58;
              if (v62 == -1) {
                break;
              }
              uint64_t v63 = (char *)memchr(v61, v60, v62 + 1);
              if (!v63) {
                break;
              }
              uint64_t v64 = v63;
              if (!memcmp(v63, v57, v58))
              {
                if (v64 == v59 || v64 - v56 == -1) {
                  goto LABEL_146;
                }
                goto LABEL_153;
              }
              long long v61 = v64 + 1;
              int64_t v52 = v59 - (v64 + 1);
              if (v52 < v58) {
                goto LABEL_146;
              }
            }
          }
        }
        else
        {
LABEL_153:
          *(_DWORD *)(a1 + 16) = 1065353216;
        }
        goto LABEL_146;
      }
      if ((v80 & 0x80u) != 0) {
        int64_t v52 = v79;
      }
      unint64_t v53 = v84;
      if ((v84 & 0x80u) != 0) {
        unint64_t v53 = v83;
      }
      if (v52 >= v53)
      {
        MEMORY[0x1CB786D10](&v86);
        std::locale::locale(&v87, &v86);
        if ((v80 & 0x80u) == 0) {
          uint64_t v65 = (char *)&v78;
        }
        else {
          uint64_t v65 = (char *)v78.__locale_;
        }
        uint64_t v66 = v80;
        if ((v80 & 0x80u) != 0) {
          uint64_t v66 = v79;
        }
        if ((v84 & 0x80u) == 0) {
          int64_t v67 = (char *)&v82;
        }
        else {
          int64_t v67 = (char *)v82.__locale_;
        }
        if ((v84 & 0x80u) == 0) {
          int64_t v68 = v84;
        }
        else {
          int64_t v68 = v83;
        }
        if (v66 && v68)
        {
          int64_t v69 = v68 - 1;
          uint64_t v70 = v66 - 1;
          uint64_t v71 = v67;
          while (boost::algorithm::is_iequal::operator()<char,char>(&v87, *v65, v71))
          {
            ++v71;
            if (v70)
            {
              ++v65;
              uint64_t v72 = v69--;
              --v70;
              if (v72) {
                continue;
              }
            }
            goto LABEL_139;
          }
          BOOL v50 = 0;
        }
        else
        {
          uint64_t v71 = v67;
LABEL_139:
          BOOL v50 = v71 == &v67[v68];
        }
        std::locale::~locale(&v87);
        int64x2_t v55 = &v86;
LABEL_142:
        std::locale::~locale(v55);
        uint64_t v54 = (int *)(a1 + 16);
        if (v50)
        {
          int v73 = 1065353216;
LABEL_145:
          *uint64_t v54 = v73;
LABEL_146:
          if ((char)v80 < 0) {
            operator delete(v78.__locale_);
          }
          if ((char)v84 < 0) {
            operator delete(v82.__locale_);
          }
          return;
        }
LABEL_144:
        int v73 = -1082130432;
        goto LABEL_145;
      }
    }
    uint64_t v54 = (int *)(a1 + 16);
    goto LABEL_144;
  }
}

void sub_1C95C5694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::locale a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  std::locale::~locale((std::locale *)(v37 - 112));
  std::locale::~locale((std::locale *)(v37 - 120));
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31.__locale_);
  }
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::contains<std::string,std::string,boost::algorithm::is_iequal>(uint64_t *a1, uint64_t *a2, std::locale *a3)
{
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a2[1];
  }
  if (!v3) {
    return 1;
  }
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  uint64_t v6 = (uint64_t *)((char *)v5 + v3);
  int v7 = *((char *)a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = (uint64_t *)*a1;
  }
  if (v7 >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v9 = a1[1];
  }
  std::locale::locale(&v18, a3);
  std::locale::locale(&v22, &v18);
  uint64_t v19 = v5;
  char v20 = v6;
  std::locale::locale(&v21, &v22);
  std::locale::~locale(&v22);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)((char *)v8 + v9);
    uint64_t v11 = v20;
    while (1)
    {
      uint64_t v12 = (char *)v19;
      if (v19 == v11)
      {
LABEL_24:
        uint64_t v8 = v10;
        goto LABEL_28;
      }
      uint64_t v13 = 0;
      BOOL v14 = v19;
      BOOL v15 = v8;
      while (&v12[v13] != (char *)v20)
      {
        if (!boost::algorithm::is_iequal::operator()<char,char>(&v21, *((unsigned char *)v8 + v13), &v12[v13])) {
          goto LABEL_22;
        }
        BOOL v15 = (uint64_t *)((char *)v15 + 1);
        BOOL v14 = (uint64_t *)((char *)v14 + 1);
        if (v9 == ++v13)
        {
          BOOL v14 = (uint64_t *)&v12[v13];
          BOOL v15 = v10;
          goto LABEL_22;
        }
      }
      BOOL v15 = (uint64_t *)((char *)v8 + v13);
      BOOL v14 = (uint64_t *)&v12[v13];
LABEL_22:
      uint64_t v11 = v20;
      if (v14 == v20) {
        break;
      }
      uint64_t v8 = (uint64_t *)((char *)v8 + 1);
      --v9;
      if (v8 == v10) {
        goto LABEL_24;
      }
    }
    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v10 = v8;
  }
LABEL_28:
  BOOL v16 = v8 != v10;
  std::locale::~locale(&v21);
  std::locale::~locale(&v18);
  return v16;
}

void sub_1C95C58BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void *marrs::mrr::mr::getMentionStringSet(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  result[1] = 0;
  result[2] = 0;
  *BOOL result = result + 1;
  unint64_t v3 = *(unsigned int *)(a2 + 76);
  if (v3 < *(_DWORD *)(a2 + 72))
  {
    uint64_t v6 = (uint64_t)result;
    do
    {
      uint64_t v7 = *(void *)(a3 + 24);
      if (v3 >= (*(void *)(a3 + 32) - v7) >> 3) {
        std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
      }
      MEMORY[0x1CB786490](v8, *(void *)(v7 + 8 * v3));
      if (!v10) {
        std::__tree<std::string,marrs::mrr::mr::CaseInsensitiveCompare,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, v9, v9);
      }
      BOOL result = (void *)MEMORY[0x1CB7864A0](v8);
      ++v3;
    }
    while (v3 < *(unsigned int *)(a2 + 72));
  }
  return result;
}

void sub_1C95C59B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  MEMORY[0x1CB7864A0](&buf);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    BOOL v16 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "Mention token indices out of bounds in token chain";
      _os_log_impl(&dword_1C9555000, v16, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&buf, 0xCu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Mention token indices out of bounds in token chain");
    std::string::basic_string[abi:ne180100]<0>(&a10, "MultimodalReferenceResolution");
    IOContentError::IOContentError(exception, (uint64_t)&buf, (uint64_t)&a10, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/ModelBasedMR/Processing/ModelBasedMRProcessing.cpp", 465);
  }
  std::__tree<std::string>::destroy(*v13);
  _Unwind_Resume(a1);
}

void sub_1C95C5AA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v22)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C95C5B0CLL);
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C95C5B1C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1C95C5B14);
}

void std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>(unint64_t a1, uint64_t *a2, float32x2_t **a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v179 = (float32x2_t *)(a2 - 10);
    uint64_t v180 = (float32x2_t *)(a2 - 5);
    uint64_t v178 = (float32x2_t *)(a2 - 15);
    uint64_t v11 = (uint64_t *)a1;
    uint64_t v194 = (uint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - v11);
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                float32x2_t v77 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                float64x2_t v78 = vcvtq_f64_f32(vsub_f32(v77, vadd_f32((float32x2_t)*(a2 - 2), vmul_f32((float32x2_t)*(a2 - 1), (float32x2_t)0x3F0000003F000000))));
                *(float *)v78.f64 = vaddvq_f64(vmulq_f64(v78, v78));
                float64x2_t v79 = vcvtq_f64_f32(vsub_f32(v77, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
                *(float *)v79.f64 = vaddvq_f64(vmulq_f64(v79, v79));
                if (*(float *)v78.f64 < *(float *)v79.f64)
                {
                  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, (uint64_t)v180);
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, v180, a3);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), v180, a3);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a1 + 120), v180, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 959)
          {
            unsigned __int8 v80 = (uint64_t *)(a1 + 40);
            BOOL v82 = (uint64_t *)a1 == a2 || v80 == a2;
            if (a5)
            {
              if (!v82)
              {
                uint64_t v83 = 0;
                unint64_t v84 = a1;
                do
                {
                  std::locale v85 = v80;
                  float32x2_t v86 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                  float64x2_t v87 = vcvtq_f64_f32(vsub_f32(v86, vadd_f32(*(float32x2_t *)(v84 + 64), vmul_f32(*(float32x2_t *)(v84 + 72), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v87.f64 = vaddvq_f64(vmulq_f64(v87, v87));
                  float64x2_t v88 = vcvtq_f64_f32(vsub_f32(v86, vadd_f32(*(float32x2_t *)(v84 + 24), vmul_f32(*(float32x2_t *)(v84 + 32), (float32x2_t)0x3F0000003F000000))));
                  *(float *)v88.f64 = vaddvq_f64(vmulq_f64(v88, v88));
                  if (*(float *)v87.f64 < *(float *)v88.f64)
                  {
                    uint64_t v89 = *v80;
                    *(void *)long long v201 = *(void *)(v84 + 48);
                    *(void *)&v201[7] = *(void *)(v84 + 55);
                    char v90 = *(unsigned char *)(v84 + 63);
                    v80[1] = 0;
                    v80[2] = 0;
                    *unsigned __int8 v80 = 0;
                    float32x2_t v187 = *(float32x2_t *)(v84 + 64);
                    float32x2_t v191 = *(float32x2_t *)(v84 + 72);
                    float32x2_t v91 = vadd_f32(v187, vmul_f32(v191, (float32x2_t)0x3F0000003F000000));
                    uint64_t v92 = v83;
                    while (1)
                    {
                      uint64_t v93 = a1 + v92;
                      uint64_t v94 = (void **)(a1 + v92 + 40);
                      if (*(char *)(a1 + v92 + 63) < 0) {
                        operator delete(*v94);
                      }
                      *(_OWORD *)uint64_t v94 = *(_OWORD *)v93;
                      *(void *)(a1 + v92 + 56) = *(void *)(v93 + 16);
                      *(unsigned char *)(v93 + 23) = 0;
                      *(unsigned char *)uint64_t v93 = 0;
                      *(_OWORD *)(v93 + 64) = *(_OWORD *)(v93 + 24);
                      if (!v92) {
                        break;
                      }
                      float32x2_t v95 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                      float64x2_t v96 = vcvtq_f64_f32(vsub_f32(v95, v91));
                      *(float *)v96.f64 = vaddvq_f64(vmulq_f64(v96, v96));
                      uint64_t v97 = a1 + v92;
                      float64x2_t v98 = vcvtq_f64_f32(vsub_f32(v95, vadd_f32(*(float32x2_t *)(a1 + v92 - 16), vmul_f32(*(float32x2_t *)(a1 + v92 - 8), (float32x2_t)0x3F0000003F000000))));
                      *(float *)v98.f64 = vaddvq_f64(vmulq_f64(v98, v98));
                      v92 -= 40;
                      if (*(float *)v98.f64 <= *(float *)v96.f64)
                      {
                        uint64_t v99 = a1 + v92 + 40;
                        float v100 = (_DWORD *)(v97 + 24);
                        goto LABEL_93;
                      }
                    }
                    float v100 = (_DWORD *)(a1 + 24);
                    uint64_t v99 = a1;
LABEL_93:
                    if (*(char *)(v99 + 23) < 0) {
                      operator delete(*(void **)v99);
                    }
                    *(void *)uint64_t v99 = v89;
                    *(void *)(v99 + 8) = *(void *)v201;
                    *(void *)(v99 + 15) = *(void *)&v201[7];
                    *(unsigned char *)(v99 + 23) = v90;
                    *float v100 = v187.i32[0];
                    *(int8x8_t *)(v99 + 28) = vext_s8((int8x8_t)v187, (int8x8_t)v191, 4uLL);
                    *(_DWORD *)(v99 + 36) = v191.i32[1];
                    a2 = (uint64_t *)v194;
                  }
                  unsigned __int8 v80 = v85 + 5;
                  v83 += 40;
                  unint64_t v84 = (unint64_t)v85;
                }
                while (v85 + 5 != a2);
              }
            }
            else if (!v82)
            {
              unint64_t v161 = a1 - 16;
              do
              {
                long long v162 = v80;
                float32x2_t v163 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                float64x2_t v164 = vcvtq_f64_f32(vsub_f32(v163, vadd_f32(*(float32x2_t *)(a1 + 64), vmul_f32(*(float32x2_t *)(a1 + 72), (float32x2_t)0x3F0000003F000000))));
                *(float *)v164.f64 = vaddvq_f64(vmulq_f64(v164, v164));
                float64x2_t v165 = vcvtq_f64_f32(vsub_f32(v163, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
                *(float *)v165.f64 = vaddvq_f64(vmulq_f64(v165, v165));
                if (*(float *)v164.f64 < *(float *)v165.f64)
                {
                  uint64_t v166 = *v80;
                  *(void *)std::string v204 = *(void *)(a1 + 48);
                  *(void *)&v204[7] = *(void *)(a1 + 55);
                  char v167 = *(unsigned char *)(a1 + 63);
                  v80[1] = 0;
                  v80[2] = 0;
                  *unsigned __int8 v80 = 0;
                  float32x2_t v189 = *(float32x2_t *)(a1 + 72);
                  float32x2_t v193 = *(float32x2_t *)(a1 + 64);
                  float32x2_t v168 = vadd_f32(v193, vmul_f32(v189, (float32x2_t)0x3F0000003F000000));
                  unint64_t v169 = v161;
                  do
                  {
                    long long v170 = (void **)(v169 + 56);
                    if (*(char *)(v169 + 79) < 0) {
                      operator delete(*v170);
                    }
                    *(_OWORD *)long long v170 = *(_OWORD *)(v169 + 16);
                    *(void *)(v169 + 72) = *(void *)(v169 + 32);
                    *(unsigned char *)(v169 + 16) = 0;
                    unint64_t v171 = v169 + 16;
                    *(unsigned char *)(v169 + 39) = 0;
                    *(_OWORD *)(v169 + 80) = *(_OWORD *)(v169 + 40);
                    float32x2_t v172 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                    float64x2_t v173 = vcvtq_f64_f32(vsub_f32(v172, v168));
                    *(float *)v173.f64 = vaddvq_f64(vmulq_f64(v173, v173));
                    float32x2_t v174 = *(float32x2_t *)v169;
                    float32x2_t v175 = *(float32x2_t *)(v169 + 8);
                    v169 -= 40;
                    float64x2_t v176 = vcvtq_f64_f32(vsub_f32(v172, vadd_f32(v174, vmul_f32(v175, (float32x2_t)0x3F0000003F000000))));
                    *(float *)v176.f64 = vaddvq_f64(vmulq_f64(v176, v176));
                  }
                  while (*(float *)v176.f64 > *(float *)v173.f64);
                  if (*(char *)(v171 + 23) < 0) {
                    operator delete(*(void **)v171);
                  }
                  *(void *)(v169 + 56) = v166;
                  *(void *)(v171 + 15) = *(void *)&v204[7];
                  *(void *)(v171 + 8) = *(void *)v204;
                  *(unsigned char *)(v169 + 79) = v167;
                  *(float32x2_t *)&long long v177 = v193;
                  *((float32x2_t *)&v177 + 1) = v189;
                  *(_OWORD *)(v169 + 80) = v177;
                  a2 = (uint64_t *)v194;
                }
                unsigned __int8 v80 = v162 + 5;
                v161 += 40;
                a1 = (unint64_t)v162;
              }
              while (v162 + 5 != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((uint64_t *)a1 != a2)
            {
              int64_t v101 = (unint64_t)(v13 - 2) >> 1;
              int64_t v102 = v101;
              do
              {
                int64_t v103 = v102;
                if (v101 >= v102)
                {
                  uint64_t v104 = (2 * v102) | 1;
                  long long v105 = (float32x2_t *)(a1 + 40 * v104);
                  long long v106 = *a3;
                  float32x2_t v107 = **a3;
                  if (2 * v103 + 2 < v13)
                  {
                    float32x2_t v110 = vadd_f32(v107, vmul_f32(v106[1], (float32x2_t)0x3F0000003F000000));
                    float64x2_t v108 = vcvtq_f64_f32(vsub_f32(v110, vadd_f32(*(float32x2_t *)(a1 + 40 * v104 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v104 + 32), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v108.f64 = vaddvq_f64(vmulq_f64(v108, v108));
                    float64x2_t v109 = vcvtq_f64_f32(vsub_f32(v110, vadd_f32(v105[8], vmul_f32(v105[9], (float32x2_t)0x3F0000003F000000))));
                    *(float *)v109.f64 = vaddvq_f64(vmulq_f64(v109, v109));
                    if (*(float *)v108.f64 < *(float *)v109.f64)
                    {
                      v105 += 5;
                      uint64_t v104 = 2 * v103 + 2;
                    }
                  }
                  else
                  {
                    float32x2_t v110 = vadd_f32(v107, vmul_f32(v106[1], (float32x2_t)0x3F0000003F000000));
                  }
                  float64x2_t v111 = vcvtq_f64_f32(vsub_f32(v110, vadd_f32(v105[3], vmul_f32(v105[4], (float32x2_t)0x3F0000003F000000))));
                  long long v112 = (float32x2_t *)(a1 + 40 * v103);
                  float32x2_t v114 = v112[4];
                  long long v113 = v112 + 4;
                  *(float *)v111.f64 = vaddvq_f64(vmulq_f64(v111, v111));
                  float64x2_t v115 = vcvtq_f64_f32(vsub_f32(v110, vadd_f32(v113[-1], vmul_f32(v114, (float32x2_t)0x3F0000003F000000))));
                  *(float *)v115.f64 = vaddvq_f64(vmulq_f64(v115, v115));
                  if (*(float *)v111.f64 >= *(float *)v115.f64)
                  {
                    long long v116 = (float32x2_t *)(a1 + 40 * v103);
                    float32x2_t v192 = *v116;
                    *(float32x2_t *)&v202[7] = *(float32x2_t *)((char *)v116 + 15);
                    *(float32x2_t *)long long v202 = v116[1];
                    __int8 v188 = v116[2].i8[7];
                    *long long v116 = 0;
                    v116[1] = 0;
                    v116[2] = 0;
                    float32x2_t v181 = *v113;
                    float32x2_t v184 = v113[-1];
                    float32x2_t v117 = vadd_f32(v184, vmul_f32(*v113, (float32x2_t)0x3F0000003F000000));
                    do
                    {
                      uint64_t v118 = v116;
                      long long v116 = v105;
                      if (v118[2].i8[7] < 0) {
                        operator delete(*(void **)v118);
                      }
                      long long v119 = *(_OWORD *)v116->f32;
                      v118[2] = v116[2];
                      *(_OWORD *)v118->f32 = v119;
                      v116[2].i8[7] = 0;
                      v116->i8[0] = 0;
                      *(_OWORD *)v118[3].f32 = *(_OWORD *)v116[3].f32;
                      if (v101 < v104) {
                        break;
                      }
                      uint64_t v120 = (2 * v104) | 1;
                      long long v105 = (float32x2_t *)(a1 + 40 * v120);
                      char v121 = *a3;
                      float32x2_t v122 = **a3;
                      if (2 * v104 + 2 < v13)
                      {
                        float32x2_t v125 = vadd_f32(v122, vmul_f32(v121[1], (float32x2_t)0x3F0000003F000000));
                        float64x2_t v123 = vcvtq_f64_f32(vsub_f32(v125, vadd_f32(*(float32x2_t *)(a1 + 40 * v120 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v120 + 32), (float32x2_t)0x3F0000003F000000))));
                        *(float *)v123.f64 = vaddvq_f64(vmulq_f64(v123, v123));
                        float64x2_t v124 = vcvtq_f64_f32(vsub_f32(v125, vadd_f32(v105[8], vmul_f32(v105[9], (float32x2_t)0x3F0000003F000000))));
                        *(float *)v124.f64 = vaddvq_f64(vmulq_f64(v124, v124));
                        if (*(float *)v123.f64 < *(float *)v124.f64)
                        {
                          v105 += 5;
                          uint64_t v120 = 2 * v104 + 2;
                        }
                      }
                      else
                      {
                        float32x2_t v125 = vadd_f32(v122, vmul_f32(v121[1], (float32x2_t)0x3F0000003F000000));
                      }
                      float64x2_t v126 = vcvtq_f64_f32(vsub_f32(v125, vadd_f32(v105[3], vmul_f32(v105[4], (float32x2_t)0x3F0000003F000000))));
                      *(float *)v126.f64 = vaddvq_f64(vmulq_f64(v126, v126));
                      float64x2_t v127 = vcvtq_f64_f32(vsub_f32(v125, v117));
                      *(float *)v127.f64 = vaddvq_f64(vmulq_f64(v127, v127));
                      uint64_t v104 = v120;
                    }
                    while (*(float *)v126.f64 >= *(float *)v127.f64);
                    if (v116[2].i8[7] < 0) {
                      operator delete(*(void **)v116);
                    }
                    *long long v116 = v192;
                    v116[1] = *(float32x2_t *)v202;
                    *(float32x2_t *)((char *)v116 + 15) = *(float32x2_t *)&v202[7];
                    v116[2].i8[7] = v188;
                    *(float32x2_t *)&long long v128 = v184;
                    *((float32x2_t *)&v128 + 1) = v181;
                    *(_OWORD *)v116[3].f32 = v128;
                  }
                }
                int64_t v102 = v103 - 1;
              }
              while (v103);
              int64_t v129 = v12 / 0x28uLL;
              long long v130 = (void **)v194;
              do
              {
                long long v131 = v130;
                uint64_t v132 = 0;
                uint64_t v133 = *(void *)a1;
                *(void *)long long v197 = *(void *)(a1 + 8);
                *(void *)&v197[7] = *(void *)(a1 + 15);
                char v195 = *(unsigned char *)(a1 + 23);
                *(void *)a1 = 0;
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                unint64_t v134 = a1;
                long long v203 = *(_OWORD *)(a1 + 24);
                do
                {
                  uint64_t v135 = v132 + 1;
                  unint64_t v136 = v134 + 40 * (v132 + 1);
                  uint64_t v137 = 2 * v132;
                  uint64_t v132 = (2 * v132) | 1;
                  int64_t v138 = v137 + 2;
                  if (v138 < v129)
                  {
                    float32x2_t v139 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                    float64x2_t v140 = vcvtq_f64_f32(vsub_f32(v139, vadd_f32(*(float32x2_t *)(v134 + 40 * v135 + 24), vmul_f32(*(float32x2_t *)(v134 + 40 * v135 + 32), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v140.f64 = vaddvq_f64(vmulq_f64(v140, v140));
                    float64x2_t v141 = vcvtq_f64_f32(vsub_f32(v139, vadd_f32(*(float32x2_t *)(v136 + 64), vmul_f32(*(float32x2_t *)(v136 + 72), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v141.f64 = vaddvq_f64(vmulq_f64(v141, v141));
                    if (*(float *)v140.f64 < *(float *)v141.f64)
                    {
                      v136 += 40;
                      uint64_t v132 = v138;
                    }
                  }
                  if (*(char *)(v134 + 23) < 0) {
                    operator delete(*(void **)v134);
                  }
                  long long v142 = *(_OWORD *)v136;
                  *(void *)(v134 + 16) = *(void *)(v136 + 16);
                  *(_OWORD *)unint64_t v134 = v142;
                  *(unsigned char *)(v136 + 23) = 0;
                  *(unsigned char *)unint64_t v136 = 0;
                  *(_OWORD *)(v134 + 24) = *(_OWORD *)(v136 + 24);
                  unint64_t v134 = v136;
                }
                while (v132 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                long long v143 = (_OWORD *)(v136 + 24);
                long long v130 = v131 - 5;
                int v144 = *(char *)(v136 + 23);
                if ((void **)v136 == v131 - 5)
                {
                  if (v144 < 0) {
                    operator delete(*(void **)v136);
                  }
                  *(void *)unint64_t v136 = v133;
                  *(void *)(v136 + 8) = *(void *)v197;
                  *(void *)(v136 + 15) = *(void *)&v197[7];
                  *(unsigned char *)(v136 + 23) = v195;
                  *long long v143 = v203;
                }
                else
                {
                  if (v144 < 0) {
                    operator delete(*(void **)v136);
                  }
                  long long v145 = *(_OWORD *)v130;
                  *(void *)(v136 + 16) = *(v131 - 3);
                  *(_OWORD *)unint64_t v136 = v145;
                  *((unsigned char *)v131 - 17) = 0;
                  *((unsigned char *)v131 - 40) = 0;
                  *long long v143 = *((_OWORD *)v131 - 1);
                  if (*((char *)v131 - 17) < 0) {
                    operator delete(*v130);
                  }
                  *(v131 - 5) = (void *)v133;
                  *(void **)((char *)v131 - 25) = *(void **)&v197[7];
                  *(v131 - 4) = *(void **)v197;
                  *((unsigned char *)v131 - 17) = v195;
                  *((_OWORD *)v131 - 1) = v203;
                  uint64_t v146 = v136 + 40 - a1;
                  if (v146 >= 41)
                  {
                    unint64_t v147 = (v146 / 0x28uLL - 2) >> 1;
                    float32x2_t v148 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                    float64x2_t v149 = vcvtq_f64_f32(vsub_f32(v148, vadd_f32(*(float32x2_t *)(a1 + 40 * v147 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v147 + 32), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v149.f64 = vaddvq_f64(vmulq_f64(v149, v149));
                    float64x2_t v150 = vcvtq_f64_f32(vsub_f32(v148, vadd_f32(*(float32x2_t *)(v136 + 24), vmul_f32(*(float32x2_t *)(v136 + 32), (float32x2_t)0x3F0000003F000000))));
                    *(float *)v150.f64 = vaddvq_f64(vmulq_f64(v150, v150));
                    if (*(float *)v149.f64 < *(float *)v150.f64)
                    {
                      long long v196 = v131 - 5;
                      uint64_t v151 = *(void **)v136;
                      *(void *)std::string v206 = *(void *)(v136 + 8);
                      *(void *)&v206[7] = *(void *)(v136 + 15);
                      char v152 = *(unsigned char *)(v136 + 23);
                      *(void *)(v136 + 8) = 0;
                      *(void *)(v136 + 16) = 0;
                      *(void *)unint64_t v136 = 0;
                      float32x2_t v182 = *(float32x2_t *)(v136 + 32);
                      float32x2_t v185 = *(float32x2_t *)(v136 + 24);
                      float32x2_t v153 = vadd_f32(v185, vmul_f32(v182, (float32x2_t)0x3F0000003F000000));
                      do
                      {
                        if (*(char *)(v136 + 23) < 0) {
                          operator delete(*(void **)v136);
                        }
                        unint64_t v154 = a1 + 40 * v147;
                        long long v155 = *(_OWORD *)v154;
                        *(void *)(v136 + 16) = *(void *)(v154 + 16);
                        *(_OWORD *)unint64_t v136 = v155;
                        *(unsigned char *)(v154 + 23) = 0;
                        *(unsigned char *)unint64_t v154 = 0;
                        *(_OWORD *)(v136 + 24) = *(_OWORD *)(v154 + 24);
                        if (!v147) {
                          break;
                        }
                        unint64_t v147 = (v147 - 1) >> 1;
                        float32x2_t v156 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
                        float64x2_t v157 = vcvtq_f64_f32(vsub_f32(v156, vadd_f32(*(float32x2_t *)(a1 + 40 * v147 + 24), vmul_f32(*(float32x2_t *)(a1 + 40 * v147 + 32), (float32x2_t)0x3F0000003F000000))));
                        *(float *)v157.f64 = vaddvq_f64(vmulq_f64(v157, v157));
                        float64x2_t v158 = vcvtq_f64_f32(vsub_f32(v156, v153));
                        *(float *)v158.f64 = vaddvq_f64(vmulq_f64(v158, v158));
                        unint64_t v136 = v154;
                      }
                      while (*(float *)v157.f64 < *(float *)v158.f64);
                      if (*(char *)(v154 + 23) < 0) {
                        operator delete(*(void **)v154);
                      }
                      *(void *)unint64_t v154 = v151;
                      *(void *)(v154 + 15) = *(void *)&v206[7];
                      *(void *)(v154 + 8) = *(void *)v206;
                      *(unsigned char *)(v154 + 23) = v152;
                      *(float32x2_t *)&long long v159 = v185;
                      *((float32x2_t *)&v159 + 1) = v182;
                      *(_OWORD *)(v154 + 24) = v159;
                      long long v130 = v196;
                    }
                  }
                }
              }
              while (v129-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = a1 + 40 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)v15, a1, v180, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, v15, v180, a3);
            uint64_t v16 = 5 * v14;
            unint64_t v17 = a1 + 8 * v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(a1 + 40), v17 - 40, v179, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(a1 + 80), a1 + 40 + 8 * v16, v178, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)(v17 - 40), v15, (float32x2_t *)(a1 + 40 + 8 * v16), a3);
            uint64_t v18 = *(void *)a1;
            *(void *)&long long v205 = *(void *)(a1 + 8);
            *(void *)((char *)&v205 + 7) = *(void *)(a1 + 15);
            char v19 = *(unsigned char *)(a1 + 23);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            long long v198 = *(_OWORD *)(a1 + 24);
            long long v20 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = *(void *)(v15 + 16);
            *(_OWORD *)a1 = v20;
            *(unsigned char *)(v15 + 23) = 0;
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v17 + 24);
            *(void *)uint64_t v15 = v18;
            *(void *)(v15 + 8) = v205;
            *(void *)(v15 + 15) = *(void *)((char *)&v205 + 7);
            *(unsigned char *)(v15 + 23) = v19;
            *(_OWORD *)(v17 + 24) = v198;
          }
          --a4;
          if (a5) {
            break;
          }
          float32x2_t v22 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
          float64x2_t v23 = vcvtq_f64_f32(vsub_f32(v22, vadd_f32(*(float32x2_t *)(a1 - 16), vmul_f32(*(float32x2_t *)(a1 - 8), (float32x2_t)0x3F0000003F000000))));
          *(float *)v23.f64 = vaddvq_f64(vmulq_f64(v23, v23));
          float32x2_t v186 = *(float32x2_t *)(a1 + 32);
          float32x2_t v190 = *(float32x2_t *)(a1 + 24);
          float32x2_t v21 = vadd_f32(v190, vmul_f32(v186, (float32x2_t)0x3F0000003F000000));
          float64x2_t v24 = vcvtq_f64_f32(vsub_f32(v22, v21));
          *(float *)v24.f64 = vaddvq_f64(vmulq_f64(v24, v24));
          if (*(float *)v23.f64 < *(float *)v24.f64) {
            goto LABEL_12;
          }
          uint64_t v52 = *(void *)a1;
          *(void *)long long v200 = *(void *)(a1 + 8);
          *(void *)&v200[7] = *(void *)(a1 + 15);
          char v53 = *(unsigned char *)(a1 + 23);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          float32x2_t v54 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
          float64x2_t v55 = vcvtq_f64_f32(vsub_f32(v54, v21));
          float v56 = vaddvq_f64(vmulq_f64(v55, v55));
          float64x2_t v57 = vcvtq_f64_f32(vsub_f32(v54, vadd_f32((float32x2_t)*(a2 - 2), vmul_f32((float32x2_t)*(a2 - 1), (float32x2_t)0x3F0000003F000000))));
          *(float *)v57.f64 = vaddvq_f64(vmulq_f64(v57, v57));
          if (*(float *)v57.f64 <= v56)
          {
            int v60 = (float32x2_t *)(a1 + 40);
            do
            {
              uint64_t v11 = (uint64_t *)v60;
              if (v60 >= (float32x2_t *)a2) {
                break;
              }
              float64x2_t v61 = vcvtq_f64_f32(vsub_f32(v54, vadd_f32(v60[3], vmul_f32(v60[4], (float32x2_t)0x3F0000003F000000))));
              *(float *)v61.f64 = vaddvq_f64(vmulq_f64(v61, v61));
              v60 += 5;
            }
            while (*(float *)v61.f64 <= v56);
          }
          else
          {
            int64_t v58 = (float32x2_t *)a1;
            do
            {
              uint64_t v11 = (uint64_t *)&v58[5];
              float64x2_t v59 = vcvtq_f64_f32(vsub_f32(v54, vadd_f32(v58[8], vmul_f32(v58[9], (float32x2_t)0x3F0000003F000000))));
              *(float *)v59.f64 = vaddvq_f64(vmulq_f64(v59, v59));
              v58 += 5;
            }
            while (*(float *)v59.f64 <= v56);
          }
          unint64_t v62 = (unint64_t)a2;
          if (v11 < a2)
          {
            uint64_t v63 = a2;
            do
            {
              unint64_t v62 = (unint64_t)(v63 - 5);
              float64x2_t v64 = vcvtq_f64_f32(vsub_f32(v54, vadd_f32((float32x2_t)*(v63 - 2), vmul_f32((float32x2_t)*(v63 - 1), (float32x2_t)0x3F0000003F000000))));
              *(float *)v64.f64 = vaddvq_f64(vmulq_f64(v64, v64));
              v63 -= 5;
            }
            while (*(float *)v64.f64 > v56);
          }
          while ((unint64_t)v11 < v62)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(v11, v62);
            float32x2_t v65 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
            float64x2_t v66 = vcvtq_f64_f32(vsub_f32(v65, v21));
            float v67 = vaddvq_f64(vmulq_f64(v66, v66));
            do
            {
              float32x2_t v68 = (float32x2_t)v11[8];
              float32x2_t v69 = (float32x2_t)v11[9];
              v11 += 5;
              float64x2_t v70 = vcvtq_f64_f32(vsub_f32(v65, vadd_f32(v68, vmul_f32(v69, (float32x2_t)0x3F0000003F000000))));
              *(float *)v70.f64 = vaddvq_f64(vmulq_f64(v70, v70));
            }
            while (*(float *)v70.f64 <= v67);
            do
            {
              float32x2_t v71 = *(float32x2_t *)(v62 - 16);
              float32x2_t v72 = *(float32x2_t *)(v62 - 8);
              v62 -= 40;
              float64x2_t v73 = vcvtq_f64_f32(vsub_f32(v65, vadd_f32(v71, vmul_f32(v72, (float32x2_t)0x3F0000003F000000))));
              *(float *)v73.f64 = vaddvq_f64(vmulq_f64(v73, v73));
            }
            while (*(float *)v73.f64 > v67);
          }
          long long v74 = (void **)(v11 - 5);
          BOOL v5 = (unint64_t)(v11 - 5) >= a1;
          BOOL v6 = v11 - 5 == (uint64_t *)a1;
          if (v11 - 5 != (uint64_t *)a1)
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v75 = *(_OWORD *)v74;
            *(void *)(a1 + 16) = *(v11 - 3);
            *(_OWORD *)a1 = v75;
            *((unsigned char *)v11 - 17) = 0;
            *((unsigned char *)v11 - 40) = 0;
            *(_OWORD *)(a1 + 24) = *((_OWORD *)v11 - 1);
          }
          if (*((char *)v11 - 17) < 0) {
            operator delete(*v74);
          }
          a5 = 0;
          *(v11 - 5) = v52;
          *(uint64_t *)((char *)v11 - 25) = *(void *)&v200[7];
          *(v11 - 4) = *(void *)v200;
          *((unsigned char *)v11 - 17) = v53;
          *(float32x2_t *)&long long v76 = v190;
          *((float32x2_t *)&v76 + 1) = v186;
          *((_OWORD *)v11 - 1) = v76;
        }
        float32x2_t v186 = *(float32x2_t *)(a1 + 32);
        float32x2_t v190 = *(float32x2_t *)(a1 + 24);
        float32x2_t v21 = vadd_f32(v190, vmul_f32(v186, (float32x2_t)0x3F0000003F000000));
LABEL_12:
        uint64_t v25 = *(void *)a1;
        *(void *)long long v199 = *(void *)(a1 + 8);
        *(void *)&v199[7] = *(void *)(a1 + 15);
        char v26 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        float32x2_t v27 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
        float64x2_t v28 = vcvtq_f64_f32(vsub_f32(v27, v21));
        float v29 = vaddvq_f64(vmulq_f64(v28, v28));
        int v30 = (float32x2_t *)a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 5;
          float64x2_t v32 = vcvtq_f64_f32(vsub_f32(v27, vadd_f32(v31[8], vmul_f32(v31[9], (float32x2_t)0x3F0000003F000000))));
          *(float *)v32.f64 = vaddvq_f64(vmulq_f64(v32, v32));
        }
        while (*(float *)v32.f64 < v29);
        uint64_t v33 = v194;
        if (v31 == (float32x2_t *)a1)
        {
          unint64_t v36 = v194;
          while ((unint64_t)v30 < v36)
          {
            unint64_t v34 = v36 - 40;
            float64x2_t v37 = vcvtq_f64_f32(vsub_f32(v27, vadd_f32(*(float32x2_t *)(v36 - 16), vmul_f32(*(float32x2_t *)(v36 - 8), (float32x2_t)0x3F0000003F000000))));
            *(float *)v37.f64 = vaddvq_f64(vmulq_f64(v37, v37));
            v36 -= 40;
            if (*(float *)v37.f64 < v29) {
              goto LABEL_22;
            }
          }
          unint64_t v34 = v36;
        }
        else
        {
          do
          {
            unint64_t v34 = v33 - 40;
            float64x2_t v35 = vcvtq_f64_f32(vsub_f32(v27, vadd_f32(*(float32x2_t *)(v33 - 16), vmul_f32(*(float32x2_t *)(v33 - 8), (float32x2_t)0x3F0000003F000000))));
            *(float *)v35.f64 = vaddvq_f64(vmulq_f64(v35, v35));
            v33 -= 40;
          }
          while (*(float *)v35.f64 >= v29);
        }
LABEL_22:
        uint64_t v11 = (uint64_t *)v30;
        if ((unint64_t)v30 < v34)
        {
          unint64_t v38 = v34;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(v11, v38);
            float32x2_t v39 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
            float64x2_t v40 = vcvtq_f64_f32(vsub_f32(v39, v21));
            float v41 = vaddvq_f64(vmulq_f64(v40, v40));
            do
            {
              float32x2_t v42 = (float32x2_t)v11[8];
              float32x2_t v43 = (float32x2_t)v11[9];
              v11 += 5;
              float64x2_t v44 = vcvtq_f64_f32(vsub_f32(v39, vadd_f32(v42, vmul_f32(v43, (float32x2_t)0x3F0000003F000000))));
              *(float *)v44.f64 = vaddvq_f64(vmulq_f64(v44, v44));
            }
            while (*(float *)v44.f64 < v41);
            do
            {
              float32x2_t v45 = *(float32x2_t *)(v38 - 16);
              float32x2_t v46 = *(float32x2_t *)(v38 - 8);
              v38 -= 40;
              float64x2_t v47 = vcvtq_f64_f32(vsub_f32(v39, vadd_f32(v45, vmul_f32(v46, (float32x2_t)0x3F0000003F000000))));
              *(float *)v47.f64 = vaddvq_f64(vmulq_f64(v47, v47));
            }
            while (*(float *)v47.f64 >= v41);
          }
          while ((unint64_t)v11 < v38);
        }
        unint64_t v48 = (void **)(v11 - 5);
        if (v11 - 5 != (uint64_t *)a1)
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v49 = *(_OWORD *)v48;
          *(void *)(a1 + 16) = *(v11 - 3);
          *(_OWORD *)a1 = v49;
          *((unsigned char *)v11 - 17) = 0;
          *((unsigned char *)v11 - 40) = 0;
          *(_OWORD *)(a1 + 24) = *((_OWORD *)v11 - 1);
        }
        if (*((char *)v11 - 17) < 0) {
          operator delete(*v48);
        }
        *(v11 - 5) = v25;
        *(uint64_t *)((char *)v11 - 25) = *(void *)&v199[7];
        *(v11 - 4) = *(void *)v199;
        *((unsigned char *)v11 - 17) = v26;
        *(float32x2_t *)&long long v50 = v190;
        *((float32x2_t *)&v50 + 1) = v186;
        *((_OWORD *)v11 - 1) = v50;
        a2 = (uint64_t *)v194;
        if ((unint64_t)v30 >= v34) {
          break;
        }
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,false>(a1, v11 - 5, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, (uint64_t)(v11 - 5), a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((uint64_t)v11, v194, a3))
      {
        break;
      }
      if (!v51) {
        goto LABEL_37;
      }
    }
    a2 = v11 - 5;
    if (!v51) {
      continue;
    }
    break;
  }
}

uint64_t std::__split_buffer<std::vector<marrs::mrr::mr::SurroundingText>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    BOOL v6 = v4;
    std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v9 = a1[1];
  *(void *)&v9[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  __n128 v8 = *(__n128 *)(a1 + 3);
  uint64_t v5 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  BOOL v6 = (__n128 *)(a2 + 24);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = *(void *)v9;
  *(void *)(a2 + 15) = *(void *)&v9[7];
  *(unsigned char *)(a2 + 23) = v4;
  __n128 result = v8;
  *BOOL v6 = v8;
  return result;
}

double std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t **a4)
{
  uint64_t v7 = a1;
  float32x2_t v8 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
  float64x2_t v9 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
  double result = vaddvq_f64(vmulq_f64(v9, v9));
  *(float *)&double result = result;
  float64x2_t v11 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v11.f64 = vaddvq_f64(vmulq_f64(v11, v11));
  float64x2_t v12 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
  float v13 = vaddvq_f64(vmulq_f64(v12, v12));
  if (*(float *)&result >= *(float *)v11.f64)
  {
    if (v13 >= *(float *)&result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
    float32x2_t v18 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
    float64x2_t v19 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
    *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
    float64x2_t v20 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(v7[3], vmul_f32(v7[4], (float32x2_t)0x3F0000003F000000))));
    double result = vaddvq_f64(vmulq_f64(v20, v20));
    *(float *)&double result = result;
    if (*(float *)v19.f64 >= *(float *)&result) {
      return result;
    }
    a1 = v7;
    uint64_t v17 = a2;
  }
  else
  {
    if (v13 >= *(float *)&result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
      float32x2_t v14 = vadd_f32(**a4, vmul_f32((*a4)[1], (float32x2_t)0x3F0000003F000000));
      float64x2_t v15 = vcvtq_f64_f32(vsub_f32(v14, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v15.f64 = vaddvq_f64(vmulq_f64(v15, v15));
      float64x2_t v16 = vcvtq_f64_f32(vsub_f32(v14, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      double result = vaddvq_f64(vmulq_f64(v16, v16));
      *(float *)&double result = result;
      if (*(float *)v15.f64 >= *(float *)&result) {
        return result;
      }
      a1 = (float32x2_t *)a2;
    }
    uint64_t v17 = (uint64_t)a3;
  }
  *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, v17).n128_u64[0];
  return result;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, a2, a3, a5);
  float32x2_t v10 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
  float64x2_t v11 = vcvtq_f64_f32(vsub_f32(v10, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v11.f64 = vaddvq_f64(vmulq_f64(v11, v11));
  float64x2_t v12 = vcvtq_f64_f32(vsub_f32(v10, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v12.f64 = vaddvq_f64(vmulq_f64(v12, v12));
  if (*(float *)v11.f64 < *(float *)v12.f64)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a3, (uint64_t)a4);
    float32x2_t v13 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
    float64x2_t v14 = vcvtq_f64_f32(vsub_f32(v13, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v14.f64 = vaddvq_f64(vmulq_f64(v14, v14));
    float64x2_t v15 = vcvtq_f64_f32(vsub_f32(v13, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
    *(float *)v15.f64 = vaddvq_f64(vmulq_f64(v15, v15));
    if (*(float *)v14.f64 < *(float *)v15.f64)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
      float32x2_t v16 = vadd_f32(**a5, vmul_f32((*a5)[1], (float32x2_t)0x3F0000003F000000));
      float64x2_t v17 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v17.f64 = vaddvq_f64(vmulq_f64(v17, v17));
      float64x2_t v18 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v18.f64 = vaddvq_f64(vmulq_f64(v18, v18));
      if (*(float *)v17.f64 < *(float *)v18.f64)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(a1, a2, a3, a4, a6);
  float32x2_t v12 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
  float64x2_t v13 = vcvtq_f64_f32(vsub_f32(v12, vadd_f32(a5[3], vmul_f32(a5[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v13.f64 = vaddvq_f64(vmulq_f64(v13, v13));
  float64x2_t v14 = vcvtq_f64_f32(vsub_f32(v12, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
  *(float *)v14.f64 = vaddvq_f64(vmulq_f64(v14, v14));
  if (*(float *)v13.f64 < *(float *)v14.f64)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a4, (uint64_t)a5);
    float32x2_t v15 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
    float64x2_t v16 = vcvtq_f64_f32(vsub_f32(v15, vadd_f32(a4[3], vmul_f32(a4[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v16.f64 = vaddvq_f64(vmulq_f64(v16, v16));
    float64x2_t v17 = vcvtq_f64_f32(vsub_f32(v15, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v17.f64 = vaddvq_f64(vmulq_f64(v17, v17));
    if (*(float *)v16.f64 < *(float *)v17.f64)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a3, (uint64_t)a4);
      float32x2_t v18 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
      float64x2_t v19 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(a3[3], vmul_f32(a3[4], (float32x2_t)0x3F0000003F000000))));
      *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
      float64x2_t v20 = vcvtq_f64_f32(vsub_f32(v18, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v20.f64 = vaddvq_f64(vmulq_f64(v20, v20));
      if (*(float *)v19.f64 < *(float *)v20.f64)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a2, (uint64_t)a3);
        float32x2_t v21 = vadd_f32(**a6, vmul_f32((*a6)[1], (float32x2_t)0x3F0000003F000000));
        float64x2_t v22 = vcvtq_f64_f32(vsub_f32(v21, vadd_f32(*(float32x2_t *)(a2 + 24), vmul_f32(*(float32x2_t *)(a2 + 32), (float32x2_t)0x3F0000003F000000))));
        *(float *)v22.f64 = vaddvq_f64(vmulq_f64(v22, v22));
        float64x2_t v23 = vcvtq_f64_f32(vsub_f32(v21, vadd_f32(a1[3], vmul_f32(a1[4], (float32x2_t)0x3F0000003F000000))));
        *(float *)v23.f64 = vaddvq_f64(vmulq_f64(v23, v23));
        if (*(float *)v22.f64 < *(float *)v23.f64)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>(uint64_t a1, uint64_t a2, float32x2_t **a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float32x2_t v8 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
      float64x2_t v9 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a2 - 16), vmul_f32(*(float32x2_t *)(a2 - 8), (float32x2_t)0x3F0000003F000000))));
      *(float *)v9.f64 = vaddvq_f64(vmulq_f64(v9, v9));
      float64x2_t v10 = vcvtq_f64_f32(vsub_f32(v8, vadd_f32(*(float32x2_t *)(a1 + 24), vmul_f32(*(float32x2_t *)(a1 + 32), (float32x2_t)0x3F0000003F000000))));
      *(float *)v10.f64 = vaddvq_f64(vmulq_f64(v10, v10));
      if (*(float *)v9.f64 < *(float *)v10.f64)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<marrs::mrr::mr::SurroundingText *&,marrs::mrr::mr::SurroundingText *&>((uint64_t *)a1, a2 - 40);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *,0>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), (float32x2_t *)(a1 + 120), (float32x2_t *)(a2 - 40), a3);
      return 1;
    default:
      float64x2_t v11 = (float32x2_t *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,marrs::mrr::mr::getSortedSurroundingTexts(std::vector<marrs::mrr::mr::MRREntity> const&)::$_0 &,marrs::mrr::mr::SurroundingText *>((float32x2_t *)a1, a1 + 40, (float32x2_t *)(a1 + 80), a3);
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float32x2_t v16 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
    v12.f64[0] = *(float64_t *)(v13 + 32);
    float32x2_t v31 = *(float32x2_t *)(v13 + 24);
    float64x2_t v32 = v12;
    float32x2_t v17 = vadd_f32(v31, vmul_f32(*(float32x2_t *)&v12.f64[0], (float32x2_t)0x3F0000003F000000));
    float64x2_t v18 = vcvtq_f64_f32(vsub_f32(v16, v17));
    float64x2_t v12 = vmulq_f64(v18, v18);
    *(float *)v12.f64 = vaddvq_f64(v12);
    float64x2_t v19 = vcvtq_f64_f32(vsub_f32(v16, vadd_f32(v11[3], vmul_f32(v11[4], (float32x2_t)0x3F0000003F000000))));
    *(float *)v19.f64 = vaddvq_f64(vmulq_f64(v19, v19));
    if (*(float *)v12.f64 < *(float *)v19.f64)
    {
      float32x2_t v30 = *(float32x2_t *)v13;
      *(void *)uint64_t v33 = *(void *)(v13 + 8);
      *(void *)&v33[7] = *(void *)(v13 + 15);
      char v20 = *(unsigned char *)(v13 + 23);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v21 = v14;
      while (1)
      {
        uint64_t v22 = a1 + v21;
        float64x2_t v23 = (void **)(a1 + v21 + 120);
        if (*(char *)(a1 + v21 + 143) < 0) {
          operator delete(*v23);
        }
        *(_OWORD *)float64x2_t v23 = *(_OWORD *)(v22 + 80);
        *(void *)(a1 + v21 + 136) = *(void *)(v22 + 96);
        *(unsigned char *)(v22 + 103) = 0;
        *(unsigned char *)(v22 + 80) = 0;
        *(_OWORD *)(v22 + 144) = *(_OWORD *)(v22 + 104);
        if (v21 == -80) {
          break;
        }
        float32x2_t v24 = vadd_f32(**a3, vmul_f32((*a3)[1], (float32x2_t)0x3F0000003F000000));
        float64x2_t v25 = vcvtq_f64_f32(vsub_f32(v24, v17));
        *(float *)v25.f64 = vaddvq_f64(vmulq_f64(v25, v25));
        uint64_t v26 = a1 + v21;
        float64x2_t v27 = vcvtq_f64_f32(vsub_f32(v24, vadd_f32(*(float32x2_t *)(a1 + v21 + 64), vmul_f32(*(float32x2_t *)(a1 + v21 + 72), (float32x2_t)0x3F0000003F000000))));
        *(float *)v27.f64 = vaddvq_f64(vmulq_f64(v27, v27));
        v21 -= 40;
        if (*(float *)v27.f64 <= *(float *)v25.f64)
        {
          uint64_t v28 = a1 + v21 + 120;
          float v29 = (_DWORD *)(v26 + 104);
          goto LABEL_14;
        }
      }
      float v29 = (_DWORD *)(a1 + 24);
      uint64_t v28 = a1;
LABEL_14:
      if (*(char *)(v28 + 23) < 0) {
        operator delete(*(void **)v28);
      }
      *(float32x2_t *)uint64_t v28 = v30;
      *(void *)(v28 + 8) = *(void *)v33;
      *(void *)(v28 + 15) = *(void *)&v33[7];
      *(unsigned char *)(v28 + 23) = v20;
      v12.f64[1] = v32.f64[1];
      *float v29 = v31.i32[0];
      *(int8x8_t *)(v28 + 28) = vext_s8((int8x8_t)v31, *(int8x8_t *)&v32.f64[0], 4uLL);
      *(_DWORD *)(v28 + 36) = HIDWORD(v32.f64[0]);
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    float64x2_t v11 = (float32x2_t *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_1C95C7CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<marrs::qr::orchestration::QRHypothesis>::__init_with_size[abi:ne180100]<marrs::qr::orchestration::QRHypothesis*,marrs::qr::orchestration::QRHypothesis*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::qr::orchestration::QRHypothesis>>(a4);
    float32x2_t v8 = v7;
    *uint64_t v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[56 * v9];
    float64x2_t v19 = v7;
    char v20 = v7;
    v17[0] = v6 + 2;
    v17[1] = &v19;
    v17[2] = &v20;
    char v18 = 0;
    if (a2 != a3)
    {
      float64x2_t v10 = a2 + 1;
      float64x2_t v11 = v7;
      do
      {
        *(_OWORD *)float64x2_t v11 = *(v10 - 1);
        float64x2_t v12 = (std::string *)(v11 + 16);
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
          uint64_t v14 = v20;
        }
        else
        {
          long long v13 = *v10;
          *((void *)v11 + 4) = *((void *)v10 + 2);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          uint64_t v14 = v11;
        }
        int v15 = v10 - 1;
        uint64_t v16 = *((void *)v10 + 3);
        *((_DWORD *)v11 + 12) = *((_DWORD *)v10 + 8);
        *((void *)v11 + 5) = v16;
        float64x2_t v11 = v14 + 56;
        char v20 = v14 + 56;
        float64x2_t v10 = (long long *)((char *)v10 + 56);
      }
      while ((long long *)((char *)v15 + 56) != a3);
      float32x2_t v8 = v14 + 56;
    }
    char v18 = 1;
    BOOL result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<marrs::qr::orchestration::QRHypothesis>,marrs::qr::orchestration::QRHypothesis*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
    v6[1] = v8;
  }
  return result;
}

void sub_1C95C8054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C95CA940(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, os_signpost_id_t spid, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,NSObject *log,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception_ptr a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61)
{
  if (a2)
  {
    STACK[0x340] = a28;
    a59 = a19;
    a61 = a30;
    MEMORY[0x1CB786B50](v62);
    std::iostream::~basic_iostream();
    MEMORY[0x1CB786D60](v61);
    __cxa_begin_catch(a1);
    if (a14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
    {
      LOWORD(STACK[0x4F0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, log, OS_SIGNPOST_INTERVAL_END, spid, "AssetLoad", " enableTelemetry=YES ", (uint8_t *)&STACK[0x4F0], 2u);
    }
    std::current_exception();
    v64.__ptr_ = &a55;
    std::rethrow_exception(v64);
    sub_1C95CB484(v65, v66, v67, v68, v69, v70, v71, v72, a9, spid, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      log,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32.__ptr_,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53);
  }
  _Unwind_Resume(a1);
}

void sub_1C95CB488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::exception_ptr a55)
{
  if (a2)
  {
    std::exception_ptr::~exception_ptr(&a55);
    __cxa_end_catch();
    JUMPOUT(0x1C95CB49CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1C95CB554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception_ptr a32)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::SpanTypeFilter::~SpanTypeFilter(void **this)
{
  marrs::mrr::mr::MRFilterInterface::~MRFilterInterface(this);
  JUMPOUT(0x1CB786E50);
}

void marrs::mrr::mr::SpanTypeFilter::filterEntities(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    float32x2_t v17 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C9555000, v17, OS_LOG_TYPE_INFO, "Empty MRR Entities in the input", (uint8_t *)&buf, 2u);
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    char v18 = 0;
    goto LABEL_195;
  }
  memset(&v94, 0, sizeof(v94));
  if (!*(void *)(a2 + 64)) {
    goto LABEL_106;
  }
  MEMORY[0x1CB786400](v90, a2);
  uint64_t v6 = MRRLoggerForCategory(2);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v7)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C9555000, v6, OS_LOG_TYPE_INFO, "Extract entity type from span", (uint8_t *)&buf, 2u);
  }
  float32x2_t v8 = v91;
  marrs::mrr::mr::getUsoGraphProtoReader((marrs::mrr::mr *)v7);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((uint64_t *)&v95, (siri::ontology::UsoGraphProtoReader *)&marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, v8);
  uint64_t v9 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    siri::ontology::UsoGraph::prettyPrint((uint64_t *)&buf, v95);
    float64x2_t v10 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v112) = 136315138;
    *(void *)((char *)&v112 + 4) = v10;
    _os_log_impl(&dword_1C9555000, v9, OS_LOG_TYPE_DEBUG, "Develop: %s", (uint8_t *)&v112, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  siri::ontology::UsoGraph::getSuccessors();
  float64x2_t v11 = (void *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0] != buf.__r_.__value_.__l.__size_)
  {
    float64x2_t v12 = *(const void **)buf.__r_.__value_.__l.__data_;
    int v13 = (*(uint64_t (**)(void))(**(void **)buf.__r_.__value_.__l.__data_ + 16))(*(void *)buf.__r_.__value_.__l.__data_);
    if (v13 == 1)
    {
      siri::ontology::UsoGraph::getSuccessors();
      if (buf.__r_.__value_.__r.__words[0] != buf.__r_.__value_.__l.__size_)
      {
        if (*((void *)&v112 + 1) == (void)v112) {
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        }
        float64x2_t v19 = *(const void **)v112;
        if ((*(unsigned int (**)(void))(**(void **)v112 + 16))(*(void *)v112) == 2)
        {
          if (!v20) {
            __cxa_bad_cast();
          }
          int v15 = v20;
          if ((void)v112)
          {
            *((void *)&v112 + 1) = v112;
            operator delete((void *)v112);
          }
          goto LABEL_16;
        }
      }
      if ((void)v112)
      {
        *((void *)&v112 + 1) = v112;
        operator delete((void *)v112);
      }
    }
    else if (v13 == 2)
    {
      if (!v14) {
        __cxa_bad_cast();
      }
      int v15 = v14;
LABEL_16:
      uint64_t v16 = 1;
      goto LABEL_31;
    }
    uint64_t v16 = 0;
    int v15 = 0;
LABEL_31:
    float64x2_t v11 = (void *)buf.__r_.__value_.__r.__words[0];
    if (!buf.__r_.__value_.__r.__words[0]) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v16 = 0;
  int v15 = 0;
  if (buf.__r_.__value_.__r.__words[0])
  {
LABEL_32:
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    operator delete(v11);
  }
LABEL_33:
  if (!v16)
  {
    int v30 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v93 = 0;
    goto LABEL_87;
  }
  siri::ontology::oname::graph::ontology_init::common_AppEntityType((siri::ontology::oname::graph::ontology_init *)v11);
  if (siri::ontology::operator!=())
  {
    uint64_t v21 = v15[3];
    if (*(char *)(v21 + 31) >= 0) {
      size_t v22 = *(unsigned __int8 *)(v21 + 31);
    }
    else {
      size_t v22 = *(void *)(v21 + 16);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&buf, v22 + 49);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (v22)
    {
      uint64_t v26 = *(char **)(v21 + 8);
      float64x2_t v25 = (char *)(v21 + 8);
      float32x2_t v24 = v26;
      if (v25[23] >= 0) {
        float64x2_t v27 = v25;
      }
      else {
        float64x2_t v27 = v24;
      }
      memmove(p_buf, v27, v22);
    }
    strcpy((char *)p_buf + v22, ": Unsupported entityType for reference resolution");
    uint64_t v28 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      float v29 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v112) = 136315138;
      *(void *)((char *)&v112 + 4) = v29;
      _os_log_impl(&dword_1C9555000, v28, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v112, 0xCu);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v93 = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    int v30 = 0;
    goto LABEL_87;
  }
  siri::ontology::UsoGraph::getSuccessors();
  if ((void)v112 == *((void *)&v112 + 1)
    || (float32x2_t v31 = *(const void **)v112,
        (*(unsigned int (**)(void))(**(void **)v112 + 16))(*(void *)v112) != 3))
  {
LABEL_84:
    int v30 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v93 = 0;
    goto LABEL_85;
  }
  if (!v32) {
    __cxa_bad_cast();
  }
  siri::ontology::UsoEntityNode::getIdentifiers((uint64_t *)&v96, v32);
  unint64_t v34 = v96;
  uint64_t v33 = v97;
  if (v96 == v97)
  {
LABEL_82:
    if (v34)
    {
      uint64_t v97 = v34;
      operator delete(v34);
    }
    goto LABEL_84;
  }
  while (1)
  {
    uint64_t v35 = *v34;
    buf.__r_.__value_.__s.__data_[0] = 0;
    char v99 = 0;
    int v36 = *(unsigned __int8 *)(v35 + 72);
    if (!*(unsigned char *)(v35 + 72)) {
      goto LABEL_80;
    }
    if (*(char *)(v35 + 71) < 0) {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v35 + 48), *(void *)(v35 + 56));
    }
    else {
      std::string buf = *(std::string *)(v35 + 48);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 15)
      {
        BOOL v41 = 0;
        if (!v36) {
          break;
        }
        goto LABEL_76;
      }
      float64x2_t v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 15) {
        goto LABEL_80;
      }
      float64x2_t v37 = &buf;
    }
    std::string::size_type v38 = v37->__r_.__value_.__r.__words[0];
    uint64_t v39 = *(std::string::size_type *)((char *)v37->__r_.__value_.__r.__words + 7);
    BOOL v40 = v38 == 0x69746E655F707061 && v39 == 0x657079745F797469;
    BOOL v41 = v40;
    if (!v36) {
      break;
    }
LABEL_76:
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      break;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v41) {
      goto LABEL_198;
    }
LABEL_80:
    if (++v34 == v33)
    {
      unint64_t v34 = v96;
      goto LABEL_82;
    }
  }
  if (!v41) {
    goto LABEL_80;
  }
LABEL_198:
  if (*(char *)(v35 + 23) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v35, *(void *)(v35 + 8));
  }
  else {
    std::string buf = *(std::string *)v35;
  }
  std::string __p = buf;
  char v93 = 1;
  if (v96)
  {
    uint64_t v97 = v96;
    operator delete(v96);
  }
  int v30 = 1;
LABEL_85:
  if ((void)v112)
  {
    *((void *)&v112 + 1) = v112;
    operator delete((void *)v112);
  }
LABEL_87:
  float32x2_t v42 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (!v30) {
      p_p = (std::string *)"entityType not generated from USO Graph";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1C9555000, v42, OS_LOG_TYPE_INFO, "entityType from USOGraph - %s", (uint8_t *)&buf, 0xCu);
  }
  float64x2_t v44 = v95;
  float32x2_t v95 = 0;
  if (v44)
  {
    uint64_t v45 = MEMORY[0x1CB786850]();
    MEMORY[0x1CB786E50](v45, 0x10A0C403D23BABBLL);
  }
  MEMORY[0x1CB786420](v90);
  if (v93)
  {
    std::vector<std::string>::pointer end = v94.__end_;
    if (v94.__end_ >= v94.__end_cap_.__value_)
    {
      unint64_t v48 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(&v94, (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v94.__end_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v94.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v47;
      }
      unint64_t v48 = end + 1;
    }
    v94.__end_ = v48;
    if (v93)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
LABEL_106:
  if (v5 == v4)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    long long v49 = 0;
    unint64_t v68 = 0;
    long long v81 = 0uLL;
  }
  else
  {
    long long v49 = 0;
    long long v50 = 0;
    unint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v86 = a3;
    do
    {
      marrs::mrr::mr::MRREntity::MRREntity((marrs::mrr::mr::MRREntity *)&buf, (const marrs::mrr::mr::MRREntity *)(v4 + 216 * v52));
      std::vector<std::string>::pointer begin = v94.__begin_;
      std::vector<std::string>::pointer v54 = v94.__end_;
      while (begin != v54)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = *begin;
        }
        uint64_t v55 = v110;
        if ((v110 & 0x80u) == 0) {
          size_t v56 = v110;
        }
        else {
          size_t v56 = __n;
        }
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v58 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (v56 == size)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float64x2_t v59 = &__p;
          }
          else {
            float64x2_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((v110 & 0x80) != 0)
          {
            if (!memcmp(__s1, v59, __n))
            {
LABEL_132:
              if ((unint64_t)v50 >= v51)
              {
                uint64_t v61 = v50 - v49;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v51 - (void)v49) >> 2 > v62) {
                  unint64_t v62 = (uint64_t)(v51 - (void)v49) >> 2;
                }
                if (v51 - (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v63 = v62;
                }
                if (v63) {
                  unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
                }
                else {
                  uint64_t v64 = 0;
                }
                uint64_t v65 = (unint64_t *)(v63 + 8 * v61);
                unint64_t *v65 = v52;
                uint64_t v66 = v65 + 1;
                while (v50 != v49)
                {
                  unint64_t v67 = *--v50;
                  *--uint64_t v65 = v67;
                }
                unint64_t v51 = v63 + 8 * v64;
                if (v49) {
                  operator delete(v49);
                }
                long long v49 = v65;
                long long v50 = v66;
              }
              else
              {
                *v50++ = v52;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              break;
            }
          }
          else
          {
            if (!v110) {
              goto LABEL_132;
            }
            p_s1 = &__s1;
            while (*(unsigned __int8 *)p_s1 == v59->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (void **)((char *)p_s1 + 1);
              float64x2_t v59 = (std::string *)((char *)v59 + 1);
              if (!--v55) {
                goto LABEL_132;
              }
            }
          }
        }
        if (v58 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++begin;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if ((char)v110 < 0) {
        operator delete(__s1);
      }
      if (v107 < 0) {
        operator delete(v106);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      std::vector<marrs::mrr::mr::SurroundingText>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v104 < 0) {
        operator delete(v103);
      }
      if (v102 < 0) {
        operator delete(v101);
      }
      if (v100 < 0) {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
      }
      ++v52;
      uint64_t v4 = *a1;
    }
    while (v52 < 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3));
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (v49 == v50)
    {
      unint64_t v68 = 0;
      long long v81 = 0uLL;
      a3 = v86;
    }
    else
    {
      unint64_t v68 = 0;
      long long v87 = 0u;
      uint64_t v69 = v49;
      do
      {
        unint64_t v70 = *v69;
        if (0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3) <= *v69) {
          std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
        }
        if (*(_DWORD *)(*a1 + 216 * v70) == 5)
        {
          uint64_t v71 = *((void *)&v87 + 1);
          if (*((void *)&v87 + 1) >= v68)
          {
            float64x2_t v73 = (void *)v87;
            uint64_t v74 = (uint64_t)(*((void *)&v87 + 1) - v87) >> 3;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v68 - v87) >> 2 > v75) {
              unint64_t v75 = (uint64_t)(v68 - v87) >> 2;
            }
            if (v68 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v75;
            }
            if (v76) {
              unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v76);
            }
            else {
              uint64_t v77 = 0;
            }
            float64x2_t v78 = (unint64_t *)(v76 + 8 * v74);
            unint64_t *v78 = v70;
            uint64_t v72 = (uint64_t)(v78 + 1);
            while (v71 != (void)v87)
            {
              unint64_t v79 = *(void *)(v71 - 8);
              v71 -= 8;
              *--float64x2_t v78 = v79;
            }
            unint64_t v68 = v76 + 8 * v77;
            *(void *)&long long v87 = v78;
            if (v73) {
              operator delete(v73);
            }
          }
          else
          {
            **((void **)&v87 + 1) = v70;
            uint64_t v72 = *((void *)&v87 + 1) + 8;
          }
          *(void *)&long long v80 = v87;
          *((void *)&v80 + 1) = v72;
          long long v87 = v80;
        }
        ++v69;
      }
      while (v69 != v50);
      a3 = v86;
      long long v81 = v87;
    }
  }
  uint64_t v82 = v81;
  long long v88 = v81;
  uint64_t v83 = *((void *)&v81 + 1);
  if ((void)v81 == *((void *)&v81 + 1))
  {
    char v85 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    unint64_t v84 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (v83 - v82) >> 3;
      _os_log_impl(&dword_1C9555000, v84, OS_LOG_TYPE_INFO, "[RulebasedMR] - span type filter matched  - %lu", (uint8_t *)&buf, 0xCu);
    }
    *(_OWORD *)a3 = v88;
    *(void *)(a3 + 16) = v68;
    char v85 = 1;
    *(void *)&long long v88 = 0;
  }
  *(unsigned char *)(a3 + 24) = v85;
  if (v49) {
    operator delete(v49);
  }
  char v18 = (void *)v88;
LABEL_195:
  if (v18) {
    operator delete(v18);
  }
}

void sub_1C95CC220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(void *)(v45 - 120) = v47;
    operator delete(v47);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a35);
  MEMORY[0x1CB786420](&a13);
  a24 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void RuleBasedRepetitionPredictor::Predict(uint64_t *a1, uint64_t *a2, char **a3, uint64_t *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v451 = *MEMORY[0x1E4F143B8];
  *(void *)(a7 + 24) = *(void *)(a7 + 16);
  uint64_t v8 = a1[1] - *a1;
  if (v8)
  {
    uint64_t v10 = a2[1];
    uint64_t v11 = v10 - *a2;
    if (v10 != *a2 && v8 == a3[1] - *a3 && v11 == a4[1] - *a4)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      long long buf = 0uLL;
      uint64_t v448 = 0;
      std::vector<BOOL>::__vallocate[abi:ne180100](&buf, v14);
      unint64_t v15 = *((void *)&buf + 1);
      unint64_t v16 = *((void *)&buf + 1) + v14;
      *((void *)&buf + 1) += v14;
      long long v416 = a4;
      unint64_t v419 = a3;
      uint64_t v400 = a7;
      v402 = a2;
      if (v15)
      {
        unint64_t v17 = v16 - 1;
        if (((v16 - 1) ^ (v15 - 1)) <= 0x3F)
        {
          char v18 = (char *)buf;
LABEL_16:
          size_t v22 = &v18[8 * (v15 >> 6)];
          if ((v15 & 0x3F) != 0)
          {
            if (64 - (v15 & 0x3F) >= v14) {
              unint64_t v23 = v14;
            }
            else {
              unint64_t v23 = 64 - (v15 & 0x3F);
            }
            *(void *)v22 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v15 & 0x3Fu) - v23)) & (-1 << v15));
            v22 += 8;
            unint64_t v24 = v14 - v23;
          }
          else
          {
            unint64_t v24 = v14;
          }
          unint64_t v25 = v24 >> 6;
          if (v24 >= 0x40) {
            bzero(v22, 8 * v25);
          }
          if ((v24 & 0x3F) != 0) {
            *(void *)&v22[8 * v25] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
          }
          unint64_t v26 = v11 / 24;
          long long v427 = 0;
          long long v428 = 0;
          long long v429 = 0;
          v440 = (uint64_t **)&v427;
          LOBYTE(v441) = 0;
          if ((unint64_t)(v11 + 23) >= 0x2F)
          {
            if (v26 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = 24 * v26;
            uint64_t v28 = (char *)operator new(24 * v26);
            long long v427 = v28;
            long long v428 = v28;
            float v29 = &v28[24 * v26];
            long long v429 = v29;
            do
            {
              std::vector<BOOL>::vector(v28, (uint64_t)&buf);
              v28 += 24;
              v27 -= 24;
            }
            while (v27);
            long long v428 = v29;
          }
          if (v18) {
            operator delete(v18);
          }
          uint64_t v30 = 0;
          if (v14 <= 1) {
            uint64_t v31 = 1;
          }
          else {
            uint64_t v31 = v14;
          }
          if (v26 <= 1) {
            uint64_t v32 = 1;
          }
          else {
            uint64_t v32 = v26;
          }
          uint64_t v404 = v32;
          unint64_t v406 = v14;
          do
          {
            unint64_t v33 = 0;
            uint64_t v34 = *a1;
            uint64_t v408 = v30;
            uint64_t v35 = 3 * v30;
            uint64_t v36 = *v402 + 8 * v35;
            float64x2_t v37 = &v427[8 * v35];
            unint64_t v38 = v406;
            do
            {
              if (v38 >= v26)
              {
                if (!v26) {
                  goto LABEL_61;
                }
                BOOL v39 = 0;
                for (uint64_t i = 0; i != v26; v39 = ++i >= v26)
                {
                  BOOL v41 = (unsigned __int8 *)(v34 + 24 * v33 + 24 * i);
                  float32x2_t v42 = (unsigned __int8 **)(v36 + 24 * i);
                  uint64_t v43 = v41[23];
                  if ((v43 & 0x80u) == 0) {
                    float64x2_t v44 = (unsigned __int8 *)v41[23];
                  }
                  else {
                    float64x2_t v44 = (unsigned __int8 *)*((void *)v41 + 1);
                  }
                  uint64_t v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
                  int v46 = (char)v45;
                  if ((char)v45 < 0) {
                    uint64_t v45 = v42[1];
                  }
                  if (v44 != v45) {
                    break;
                  }
                  if (v46 >= 0) {
                    long long v47 = (unsigned __int8 *)(v36 + 24 * i);
                  }
                  else {
                    long long v47 = *v42;
                  }
                  if ((v43 & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v41, v47, *((void *)v41 + 1))) {
                      break;
                    }
                  }
                  else if (v41[23])
                  {
                    while (*v41 == *v47)
                    {
                      ++v41;
                      ++v47;
                      if (!--v43) {
                        goto LABEL_59;
                      }
                    }
                    break;
                  }
LABEL_59:
                  ;
                }
                if (v39) {
LABEL_61:
                }
                  *(void *)(*(void *)v37 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
              }
              ++v33;
              --v38;
            }
            while (v33 != v31);
            uint64_t v30 = v408 + 1;
            --v26;
          }
          while (v408 + 1 != v404);
          unint64_t v48 = QRLoggerForCategory(0);
          long long v50 = v416;
          long long v49 = v419;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = "computeMatches";
            _os_log_debug_impl(&dword_1C9555000, v48, OS_LOG_TYPE_DEBUG, "%s Token Matching completed", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v424 = 0;
          uint64_t v425 = 0;
          uint64_t v426 = 0;
          uint64_t v421 = 0;
          uint64_t v422 = 0;
          uint64_t v423 = 0;
          uint64_t v52 = *v416;
          uint64_t v51 = v416[1];
          if (v428 - v427 != v51 - *v416)
          {
            v396 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_error_impl(&dword_1C9555000, v396, OS_LOG_TYPE_ERROR, "%s [ERR]: Number of rows in matches does NOT match with number of words in turn 2", (uint8_t *)&buf, 0xCu);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(&buf, "Mismatch between size of matches and words in turn2");
            std::string::basic_string[abi:ne180100]<0>(&v440, "QueryRewrite");
            InferenceError::InferenceError(exception, (uint64_t)&buf, (uint64_t)&v440, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/inc/AlignmentTools.hpp", 325);
          }
          uint64_t v425 = 0;
          uint64_t v422 = 0;
          char v53 = v419[1];
          int64_t v54 = v53 - *v419;
          if (v53 == *v419 || v51 == v52)
          {
            unint64_t v169 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_debug_impl(&dword_1C9555000, v169, OS_LOG_TYPE_DEBUG, "%s No words in turn1 and/or turn2", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_273;
          }
          unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 3);
          if (*((void *)v427 + 1) != v55)
          {
            v398 = QRLoggerForCategory(0);
            if (os_log_type_enabled(v398, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = "alignmentMatrix";
              _os_log_error_impl(&dword_1C9555000, v398, OS_LOG_TYPE_ERROR, "%s [ERR]: Number of columns in matches does NOT match with number of words in turn 1", (uint8_t *)&buf, 0xCu);
            }
            size_t v399 = __cxa_allocate_exception(0x30uLL);
            std::string::basic_string[abi:ne180100]<0>(&buf, "Mismatch between size of matches and words in turn2");
            std::string::basic_string[abi:ne180100]<0>(&v440, "QueryRewrite");
            InferenceError::InferenceError(v399, (uint64_t)&buf, (uint64_t)&v440, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Tools/inc/AlignmentTools.hpp", 337);
          }
          v440 = 0;
          uint64_t v441 = 0;
          uint64_t v442 = 0;
          size_t v437 = 0;
          int v438 = 0;
          BOOL v439 = 0;
          BOOL v434 = 0;
          v435 = 0;
          v436 = 0;
          long long v445 = 0uLL;
          uint64_t v446 = 0;
          memset(&v444, 0, sizeof(v444));
          memset(&v433, 0, sizeof(v433));
          std::string __p = 0;
          uint64_t v431 = 0;
          uint64_t v432 = 0;
          if (v55 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          size_t v56 = (char *)operator new(v54);
          unint64_t v57 = (v54 - 24) / 0x18uLL;
          bzero(v56, 24 * v57 + 24);
          v440 = (uint64_t **)v56;
          uint64_t v441 = &v56[24 * v57 + 24];
          uint64_t v442 = &v56[8 * (v54 >> 3)];
          int v58 = (char *)operator new(v54);
          bzero(v58, 24 * v57 + 24);
          size_t v437 = v58;
          int v438 = &v58[24 * v57 + 24];
          BOOL v439 = &v58[8 * (v54 >> 3)];
          float64x2_t v59 = (char *)operator new(v54);
          size_t v60 = 24 * v57 + 24;
          bzero(v59, v60);
          uint64_t v61 = 0;
          BOOL v434 = v59;
          v435 = &v59[v60];
          v436 = &v59[8 * (v54 >> 3)];
          while (1)
          {
            unint64_t v62 = (char *)&v440[3 * v61];
            uint64_t v63 = v50[1] - *v50;
            uint64_t v64 = (char **)(v62 + 8);
            uint64_t v65 = (char *)*((void *)v62 + 1);
            unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (v63 >> 3);
            uint64_t v67 = *(void *)v62;
            uint64_t v68 = (uint64_t)&v65[-*(void *)v62];
            unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (v68 >> 3);
            if (v66 <= v69)
            {
              if (v66 < v69)
              {
                long long v80 = (char *)(v67 + 8 * (v63 >> 3));
                while (v65 != v80)
                {
                  v65 -= 24;
                  *(void *)&long long buf = v65;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *uint64_t v64 = v80;
              }
            }
            else
            {
              unint64_t v70 = (char *)&v440[3 * v61];
              uint64_t v73 = *((void *)v70 + 2);
              uint64_t v71 = v70 + 16;
              uint64_t v72 = v73;
              if (0xAAAAAAAAAAAAAAABLL * ((v73 - (uint64_t)v65) >> 3) >= v66 - v69)
              {
                bzero(v65, 24 * ((v63 - v68 - 24) / 0x18uLL) + 24);
                *uint64_t v64 = &v65[24 * ((v63 - v68 - 24) / 0x18uLL) + 24];
              }
              else
              {
                if (v66 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v450 = v71;
                unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v67) >> 3);
                if (2 * v74 > v66) {
                  unint64_t v66 = 2 * v74;
                }
                if (v74 >= 0x555555555555555) {
                  unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v75 = v66;
                }
                unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v75);
                uint64_t v77 = &v76[8 * (v68 >> 3)];
                *(void *)&long long buf = v76;
                *((void *)&buf + 1) = v77;
                unint64_t v449 = &v76[24 * v78];
                size_t v79 = 24 * ((v63 - v68 - 24) / 0x18uLL) + 24;
                bzero(v77, v79);
                uint64_t v448 = &v77[v79];
                std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v62, &buf);
                std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&buf);
              }
            }
            long long v81 = (char *)v437 + 24 * v61;
            long long v50 = v416;
            uint64_t v82 = v416[1] - *v416;
            uint64_t v83 = (char **)(v81 + 1);
            unint64_t v84 = (char *)v81[1];
            unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (v82 >> 3);
            uint64_t v86 = (char *)*v81;
            uint64_t v87 = (uint64_t)&v84[-*v81];
            unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * (v87 >> 3);
            if (v85 <= v88)
            {
              if (v85 < v88)
              {
                char v104 = &v86[8 * (v82 >> 3)];
                while (v84 != v104)
                {
                  v84 -= 24;
                  *(void *)&long long buf = v84;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *uint64_t v83 = v104;
              }
            }
            else
            {
              uint64_t v89 = (char *)v437 + 24 * v61;
              uint64_t v92 = *((void *)v89 + 2);
              float32x2_t v91 = (char **)(v89 + 16);
              uint64_t v90 = v92;
              if (0xAAAAAAAAAAAAAAABLL * ((v92 - (uint64_t)v84) >> 3) >= v85 - v88)
              {
                size_t v105 = 24 * ((v82 - v87 - 24) / 0x18uLL) + 24;
                bzero(v84, v105);
                *uint64_t v83 = &v84[v105];
                goto LABEL_112;
              }
              if (v85 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (uint64_t)v86) >> 3);
              if (2 * v93 > v85) {
                unint64_t v85 = 2 * v93;
              }
              if (v93 >= 0x555555555555555) {
                unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v94 = v85;
              }
              if (v94 > 0xAAAAAAAAAAAAAAALL) {
LABEL_461:
              }
                std::__throw_bad_array_new_length[abi:ne180100]();
              float32x2_t v95 = (char *)operator new(24 * v94);
              float64x2_t v96 = &v95[8 * (v87 >> 3)];
              uint64_t v97 = &v95[24 * v94];
              size_t v98 = 24 * ((v82 - v87 - 24) / 0x18uLL) + 24;
              bzero(v96, v98);
              char v99 = &v96[v98];
              char v100 = *v83;
              int64_t v101 = (char *)*v81;
              if (*v83 == (char *)*v81)
              {
                *long long v81 = v96;
                *uint64_t v83 = v99;
                *float32x2_t v91 = v97;
LABEL_110:
                long long v50 = v416;
                if (!v100) {
                  goto LABEL_112;
                }
LABEL_111:
                operator delete(v100);
                goto LABEL_112;
              }
              do
              {
                *((void *)v96 - 3) = 0;
                *((void *)v96 - 2) = 0;
                v96 -= 24;
                *((void *)v96 + 2) = 0;
                long long v102 = *(_OWORD *)(v100 - 24);
                v100 -= 24;
                *(_OWORD *)float64x2_t v96 = v102;
                *((void *)v96 + 2) = *((void *)v100 + 2);
                *(void *)char v100 = 0;
                *((void *)v100 + 1) = 0;
                *((void *)v100 + 2) = 0;
              }
              while (v100 != v101);
              int64_t v103 = (char *)*v81;
              char v100 = *v83;
              *long long v81 = v96;
              *uint64_t v83 = v99;
              *float32x2_t v91 = v97;
              if (v100 == v103) {
                goto LABEL_110;
              }
              long long v50 = v416;
              do
              {
                v100 -= 24;
                *(void *)&long long buf = v100;
                std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              }
              while (v100 != v103);
              char v100 = v103;
              if (v103) {
                goto LABEL_111;
              }
            }
LABEL_112:
            long long v106 = (char *)v434 + 24 * v61;
            uint64_t v107 = v50[1] - *v50;
            float64x2_t v108 = (char **)(v106 + 1);
            float64x2_t v109 = (char *)v106[1];
            unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * (v107 >> 3);
            uint64_t v111 = (char *)*v106;
            uint64_t v112 = (uint64_t)&v109[-*v106];
            unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * (v112 >> 3);
            if (v110 <= v113)
            {
              if (v110 < v113)
              {
                int64_t v129 = &v111[8 * (v107 >> 3)];
                while (v109 != v129)
                {
                  v109 -= 24;
                  *(void *)&long long buf = v109;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                }
                *float64x2_t v108 = v129;
              }
              goto LABEL_137;
            }
            float32x2_t v114 = (char *)v434 + 24 * v61;
            uint64_t v117 = *((void *)v114 + 2);
            long long v116 = (char **)(v114 + 16);
            uint64_t v115 = v117;
            if (0xAAAAAAAAAAAAAAABLL * ((v117 - (uint64_t)v109) >> 3) >= v110 - v113)
            {
              size_t v130 = 24 * ((v107 - v112 - 24) / 0x18uLL) + 24;
              bzero(v109, v130);
              *float64x2_t v108 = &v109[v130];
            }
            else
            {
              if (v110 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((v115 - (uint64_t)v111) >> 3);
              if (2 * v118 > v110) {
                unint64_t v110 = 2 * v118;
              }
              if (v118 >= 0x555555555555555) {
                unint64_t v119 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v119 = v110;
              }
              if (v119 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_461;
              }
              uint64_t v120 = (char *)operator new(24 * v119);
              char v121 = &v120[8 * (v112 >> 3)];
              float32x2_t v122 = &v120[24 * v119];
              size_t v123 = 24 * ((v107 - v112 - 24) / 0x18uLL) + 24;
              bzero(v121, v123);
              float64x2_t v124 = &v121[v123];
              float32x2_t v125 = *v108;
              float64x2_t v126 = (char *)*v106;
              if (*v108 == (char *)*v106)
              {
                *long long v106 = v121;
                *float64x2_t v108 = v124;
                *long long v116 = v122;
              }
              else
              {
                do
                {
                  *((void *)v121 - 3) = 0;
                  *((void *)v121 - 2) = 0;
                  v121 -= 24;
                  *((void *)v121 + 2) = 0;
                  long long v127 = *(_OWORD *)(v125 - 24);
                  v125 -= 24;
                  *(_OWORD *)char v121 = v127;
                  *((void *)v121 + 2) = *((void *)v125 + 2);
                  *(void *)float32x2_t v125 = 0;
                  *((void *)v125 + 1) = 0;
                  *((void *)v125 + 2) = 0;
                }
                while (v125 != v126);
                long long v128 = (char *)*v106;
                float32x2_t v125 = *v108;
                *long long v106 = v121;
                *float64x2_t v108 = v124;
                *long long v116 = v122;
                if (v125 != v128)
                {
                  long long v50 = v416;
                  do
                  {
                    v125 -= 24;
                    *(void *)&long long buf = v125;
                    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  }
                  while (v125 != v128);
                  float32x2_t v125 = v128;
                  if (!v128) {
                    goto LABEL_137;
                  }
LABEL_136:
                  operator delete(v125);
                  goto LABEL_137;
                }
              }
              long long v50 = v416;
              if (v125) {
                goto LABEL_136;
              }
            }
LABEL_137:
            if (++v61 >= 0xAAAAAAAAAAAAAAABLL * ((v419[1] - *v419) >> 3))
            {
              computeAlignmentMatrix<unsigned int>(*v419, *v50, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, 0.0, 0.0, 0, 0, *v440, *(uint64_t **)v437, *(uint64_t **)v434);
              long long v131 = v419;
              uint64_t v132 = *v419;
              if (v419[1] - *v419 != 24)
              {
                unint64_t v133 = 0;
                LODWORD(v134) = 0;
                uint64_t v135 = v445;
                do
                {
                  unint64_t v136 = (uint64_t *)&v132[24 * v133];
                  uint64_t v138 = *v136;
                  uint64_t v137 = v136[1];
                  *((void *)&v445 + 1) = v135;
                  std::vector<float>::resize(&v444.__r_.__value_.__l.__data_, -1 - 0x5555555555555555 * ((v440[3 * v133][1] - *v440[3 * v133]) >> 3));
                  float32x2_t v139 = v440[3 * v133];
                  uint64_t v140 = *v139;
                  uint64_t v141 = -1 - 0x5555555555555555 * ((v139[1] - *v139) >> 3);
                  if (v141)
                  {
                    long long v142 = (_DWORD *)v444.__r_.__value_.__r.__words[0];
                    long long v143 = (uint64_t *)(v140 + 32);
                    do
                    {
                      uint64_t v144 = *v143;
                      v143 += 3;
                      *v142++ = *(_DWORD *)(v144 - 4);
                      --v141;
                    }
                    while (v141);
                  }
                  v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                  std::vector<float>::resize((char **)&__p, -1- 0x5555555555555555* ((uint64_t)(*(void *)(*((void *)v434 + 3 * v133) + 8) - **((void **)v434 + 3 * v133)) >> 3));
                  long long v145 = (char *)v434;
                  uint64_t v146 = **((void **)v434 + 3 * v133);
                  uint64_t v147 = -1 - 0x5555555555555555 * ((*(void *)(*((void *)v434 + 3 * v133) + 8) - v146) >> 3);
                  if (v147)
                  {
                    float32x2_t v148 = (float *)__p;
                    float64x2_t v149 = (uint64_t *)(v146 + 32);
                    do
                    {
                      uint64_t v150 = *v149;
                      v149 += 3;
                      *v148++ = (float)*(unsigned int *)(v150 - 4);
                      --v147;
                    }
                    while (v147);
                  }
                  uint64_t v134 = v134 + ((unint64_t)(v137 - v138) >> 2);
                  uint64_t v151 = 24 * v133;
                  float v152 = *(float *)(*(void *)(*v440[3 * v133++] + 8) - 4);
                  computeAlignmentMatrix<unsigned int>(&(*v419)[v151 + 24], *v50, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, v152, (float)*(unsigned int *)(*(void *)(v146 + 8) - 4), v134 << 32, ((*(void *)(*(void *)v427 + ((v133 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v133) & 1) == 0, v440[(unint64_t)v151 / 8 + 3], *(uint64_t **)((char *)v437 + v151 + 24), *(uint64_t **)&v145[v151 + 24]);
                  removeFirstColumn<float>(v440[3 * v133]);
                  removeFirstColumn<std::pair<unsigned int,unsigned int>>(**((void **)v437 + 3 * v133), *(void *)(*((void *)v437 + 3 * v133) + 8));
                  removeFirstColumn<float>(*((uint64_t **)v434 + 3 * v133));
                  uint64_t v132 = *v419;
                }
                while (v133 < -1 - 0x5555555555555555 * ((v419[1] - *v419) >> 3));
              }
              LODWORD(v153) = 0;
              unint64_t v154 = 0;
              std::string::size_type v155 = v444.__r_.__value_.__r.__words[0];
              float32x2_t v156 = __p;
              while (1)
              {
                uint64_t v157 = *v50;
                uint64_t v158 = v50[1];
                if (v154 >= -1 - 0x5555555555555555 * ((v158 - *v50) >> 3)) {
                  break;
                }
                long long v159 = (uint64_t *)(v157 + 24 * v154);
                uint64_t v161 = *v159;
                uint64_t v160 = v159[1];
                std::vector<float>::resize((char **)&v445, ((uint64_t)(*(void *)((*v440)[3 * v154 + 1] - 16) - *(void *)((*v440)[3 * v154 + 1] - 24)) >> 2)- 1);
                uint64_t v162 = (*v440)[3 * v154 + 1];
                uint64_t v164 = *(void *)(v162 - 24);
                uint64_t v163 = *(void *)(v162 - 16);
                if (v163 != v164 + 4) {
                  memmove((void *)v445, (const void *)(v164 + 4), v163 - (v164 + 4));
                }
                v444.__r_.__value_.__l.__size_ = v155;
                v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                float64x2_t v165 = v434;
                uint64_t v166 = *(void *)(*(void *)v434 + 24 * v154 + 8);
                char v167 = *(unsigned int **)(v166 - 16);
                float32x2_t v168 = (unsigned int *)(*(void *)(v166 - 24) + 4);
                *(void *)&long long buf = &v433;
                if (v168 != v167)
                {
                  do
                  {
                    float v443 = (float)*v168;
                    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&buf, &v443);
                    ++v168;
                  }
                  while (v168 != v167);
                  float64x2_t v165 = v434;
                }
                unint64_t v153 = v153 + ((unint64_t)(v160 - v161) >> 2);
                uint64_t v431 = v156;
                long long v50 = v416;
                long long v131 = v419;
                computeAlignmentMatrix<unsigned int>(*v419, *v416 + 24 * v154 + 24, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, **(float **)((*v440)[3 * v154 + 1] - 24), (float)**(unsigned int **)(*(void *)(*v165 + 24 * v154 + 8) - 24), v153, 0, &(*v440)[3 * v154 + 3], (uint64_t *)(*(void *)v437 + 24 * v154 + 24), (uint64_t *)(*v165 + 24 * v154 + 24));
                ++v154;
                removeFirstRow<float>(&(*v440)[3 * v154]);
                removeFirstRow<float>((uint64_t *)(*(void *)v437 + 24 * v154));
                removeFirstRow<float>((uint64_t *)(*(void *)v434 + 24 * v154));
              }
              long long v170 = *v131;
              if (v131[1] - *v131 != 24)
              {
                uint64_t v171 = 0;
                int v172 = 0;
                do
                {
                  LODWORD(v173) = 0;
                  unint64_t v174 = 0;
                  unint64_t v175 = v171 + 1;
                  uint64_t v401 = v172 + ((*(void *)&v170[24 * v171 + 8] - *(void *)&v170[24 * v171]) >> 2);
                  while (v174 < -1 - 0x5555555555555555 * ((v158 - v157) >> 3))
                  {
                    float64x2_t v176 = (uint64_t *)(v157 + 24 * v174);
                    uint64_t v178 = *v176;
                    uint64_t v177 = v176[1];
                    std::vector<float>::resize((char **)&v445, (uint64_t)(*(void *)(v440[3 * v175][3 * v174 + 1] - 16)- *(void *)(v440[3 * v175][3 * v174 + 1] - 24)) >> 2);
                    uint64_t v179 = (char *)v440;
                    uint64_t v180 = v440[3 * v175][3 * v174 + 1];
                    float32x2_t v181 = *(unsigned char **)(v180 - 24);
                    float32x2_t v182 = *(unsigned char **)(v180 - 16);
                    if (v182 != v181)
                    {
                      memmove((void *)v445, v181, v182 - v181);
                      uint64_t v179 = (char *)v440;
                    }
                    unint64_t v183 = v174 + 1;
                    std::vector<float>::resize(&v444.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*(void *)&v179[24 * v171] + 24 * (v174 + 1) + 8)- *(void *)(*(void *)&v179[24 * v171] + 24 * (v174 + 1))) >> 3));
                    float32x2_t v184 = &v440[3 * v171][3 * v174 + 3];
                    uint64_t v185 = *v184;
                    uint64_t v186 = v184[1] - *v184;
                    if (v186)
                    {
                      unint64_t v187 = v186 / 24;
                      __int8 v188 = (_DWORD *)v444.__r_.__value_.__r.__words[0];
                      if (v187 <= 1) {
                        unint64_t v187 = 1;
                      }
                      float32x2_t v189 = (uint64_t *)(v185 + 8);
                      do
                      {
                        uint64_t v190 = *v189;
                        v189 += 3;
                        *v188++ = *(_DWORD *)(v190 - 4);
                        --v187;
                      }
                      while (v187);
                    }
                    std::vector<float>::resize(&v433.__r_.__value_.__l.__data_, (uint64_t)(*(void *)(*(void *)(*((void *)v434 + 3 * v175) + 24 * v174 + 8) - 16)- *(void *)(*(void *)(*((void *)v434 + 3 * v175) + 24 * v174 + 8) - 24)) >> 2);
                    float32x2_t v191 = v434;
                    uint64_t v192 = *(void *)(*((void *)v434 + 3 * v175) + 24 * v174 + 8);
                    float32x2_t v193 = *(unsigned int **)(v192 - 24);
                    uint64_t v194 = *(unsigned int **)(v192 - 16);
                    if (v193 != v194)
                    {
                      char v195 = (float *)v433.__r_.__value_.__r.__words[0];
                      do
                      {
                        unsigned int v196 = *v193++;
                        *v195++ = (float)v196;
                      }
                      while (v193 != v194);
                    }
                    std::vector<float>::resize((char **)&__p, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v191[3 * v171] + 24 * v183 + 8) - *(void *)(v191[3 * v171] + 24 * v183)) >> 3));
                    long long v197 = v434;
                    uint64_t v198 = *((void *)v434 + 3 * v171);
                    long long v199 = (uint64_t *)(v198 + 24 * v183);
                    uint64_t v200 = *v199;
                    uint64_t v201 = v199[1] - *v199;
                    if (v201)
                    {
                      unint64_t v202 = v201 / 24;
                      long long v203 = (float *)__p;
                      if (v202 <= 1) {
                        unint64_t v202 = 1;
                      }
                      std::string v204 = (uint64_t *)(v200 + 8);
                      do
                      {
                        uint64_t v205 = *v204;
                        v204 += 3;
                        *v203++ = (float)*(unsigned int *)(v205 - 4);
                        --v202;
                      }
                      while (v202);
                    }
                    uint64_t v173 = v173 + ((unint64_t)(v177 - v178) >> 2);
                    computeAlignmentMatrix<unsigned int>(&(*v419)[24 * v175], *v416 + 24 * v183, a6, a5, (uint64_t *)&v445, (int **)&v444, (uint64_t)&v433, (uint64_t)&__p, *(float *)(*(void *)(v440[3 * v171][3 * v174 + 1] - 16) - 4), (float)*(unsigned int *)(*(void *)(*(void *)(v198 + 24 * v174 + 8) - 16) - 4), (v401 << 32) | v173, (*(void *)(*(void *)&v427[24 * v183] + 8 * ((unint64_t)(v171 + 1) >> 6)) & (1 << (v171 + 1))) == 0, &v440[3 * v175][3 * v183], (uint64_t *)(*((void *)v437 + 3 * v175) + 24 * v183), (uint64_t *)(v197[3 * v175] + 24 * v183));
                    removeFirstColumn<float>(&v440[3 * v175][3 * v183]);
                    std::string v206 = (uint64_t *)(*((void *)v437 + 3 * v175) + 24 * v183);
                    removeFirstColumn<std::pair<unsigned int,unsigned int>>(*v206, v206[1]);
                    removeFirstColumn<float>((uint64_t *)(*((void *)v434 + 3 * v175) + 24 * v183));
                    removeFirstRow<float>(&v440[3 * v175][3 * v183]);
                    removeFirstRow<float>((uint64_t *)(*((void *)v437 + 3 * v175) + 24 * v183));
                    removeFirstRow<float>((uint64_t *)(*((void *)v434 + 3 * v175) + 24 * v183));
                    uint64_t v157 = *v416;
                    uint64_t v158 = v416[1];
                    ++v174;
                  }
                  long long v170 = *v419;
                  ++v171;
                  int v172 = v401;
                }
                while (v175 < -1 - 0x5555555555555555 * ((v419[1] - *v419) >> 3));
              }
              std::string v207 = v441;
              if (v441 == (char *)v440)
              {
                std::string v208 = 0;
                unsigned int v212 = 0;
              }
              else
              {
                std::string v208 = 0;
                std::string v209 = 0;
                unint64_t v210 = 0;
                unint64_t v211 = 0;
                unsigned int v212 = 0;
                do
                {
                  if ((unint64_t)v209 >= v210)
                  {
                    uint64_t v214 = (v209 - v208) >> 2;
                    unint64_t v215 = v214 + 1;
                    if ((unint64_t)(v214 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    if ((uint64_t)(v210 - (void)v208) >> 1 > v215) {
                      unint64_t v215 = (uint64_t)(v210 - (void)v208) >> 1;
                    }
                    if (v210 - (unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v216 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v216 = v215;
                    }
                    if (v216) {
                      unint64_t v216 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v216);
                    }
                    else {
                      uint64_t v217 = 0;
                    }
                    std::string v218 = (char *)(v216 + 4 * v214);
                    *(_DWORD *)std::string v218 = v212;
                    std::string v213 = v218 + 4;
                    while (v209 != v208)
                    {
                      int v219 = *((_DWORD *)v209 - 1);
                      v209 -= 4;
                      *((_DWORD *)v218 - 1) = v219;
                      v218 -= 4;
                    }
                    unint64_t v210 = v216 + 4 * v217;
                    if (v208) {
                      operator delete(v208);
                    }
                    std::string v208 = v218;
                  }
                  else
                  {
                    *(_DWORD *)std::string v209 = v212;
                    std::string v213 = v209 + 4;
                  }
                  std::string v207 = (char *)v440;
                  v212 += (*(void *)(**(void **)&v207[24 * v211] + 8) - ***(void ***)&v207[24 * v211]) >> 2;
                  ++v211;
                  std::string v209 = v213;
                }
                while (v211 < 0xAAAAAAAAAAAAAAABLL * ((v441 - (char *)v440) >> 3));
              }
              if (*((void *)v207 + 1) == *(void *)v207)
              {
                std::string v220 = 0;
                unsigned int v224 = 0;
              }
              else
              {
                std::string v220 = 0;
                std::string v221 = 0;
                unint64_t v222 = 0;
                unint64_t v223 = 0;
                unsigned int v224 = 0;
                do
                {
                  if ((unint64_t)v221 >= v222)
                  {
                    uint64_t v226 = (v221 - v220) >> 2;
                    unint64_t v227 = v226 + 1;
                    if ((unint64_t)(v226 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    if ((uint64_t)(v222 - (void)v220) >> 1 > v227) {
                      unint64_t v227 = (uint64_t)(v222 - (void)v220) >> 1;
                    }
                    if (v222 - (unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v228 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v228 = v227;
                    }
                    if (v228) {
                      unint64_t v228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v228);
                    }
                    else {
                      uint64_t v229 = 0;
                    }
                    std::string v230 = (char *)(v228 + 4 * v226);
                    *(_DWORD *)std::string v230 = v224;
                    std::string v225 = v230 + 4;
                    while (v221 != v220)
                    {
                      int v231 = *((_DWORD *)v221 - 1);
                      v221 -= 4;
                      *((_DWORD *)v230 - 1) = v231;
                      v230 -= 4;
                    }
                    unint64_t v222 = v228 + 4 * v229;
                    if (v220) {
                      operator delete(v220);
                    }
                    std::string v220 = v230;
                  }
                  else
                  {
                    *(_DWORD *)std::string v221 = v224;
                    std::string v225 = v221 + 4;
                  }
                  std::string v232 = (char *)v440;
                  v224 -= 1431655765
                        * ((*(void *)(*(void *)v232 + 24 * v223 + 8) - *(void *)(*(void *)v232 + 24 * v223)) >> 3);
                  ++v223;
                  std::string v221 = v225;
                }
                while (v223 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v232 + 1) - *(void *)v232) >> 3));
              }
              uint64_t v233 = v224;
              std::vector<std::vector<float>>::resize(&v424, v224);
              std::vector<std::vector<std::pair<unsigned int,unsigned int>>>::resize((uint64_t)&v421, v224);
              long long v49 = v419;
              if (v224)
              {
                uint64_t v234 = 0;
                unint64_t v235 = v212;
                unint64_t v405 = v212;
                while (1)
                {
                  std::vector<float>::resize((char **)(v424 + 24 * v234), v235);
                  std::string v236 = (void *)(v421 + 24 * v234);
                  std::string v238 = (void **)(v236 + 1);
                  std::string v237 = (char *)v236[1];
                  std::string v239 = (char *)*v236;
                  unint64_t v240 = (uint64_t)&v237[-*v236] >> 3;
                  if (v235 > v240) {
                    break;
                  }
                  if (v235 < v240)
                  {
                    std::string v257 = &v239[8 * v235];
LABEL_238:
                    *std::string v238 = v257;
                  }
LABEL_242:
                  ++v234;
                  long long v49 = v419;
                  if (v234 == v233) {
                    goto LABEL_243;
                  }
                }
                uint64_t v241 = v421 + 24 * v234;
                uint64_t v244 = *(void *)(v241 + 16);
                std::string v243 = (void *)(v241 + 16);
                uint64_t v242 = v244;
                if (v235 - v240 > (v244 - (uint64_t)v237) >> 3)
                {
                  uint64_t v411 = v243;
                  unint64_t v414 = v235 - v240;
                  uint64_t v245 = v242 - (void)v239;
                  uint64_t v246 = v245 >> 2;
                  if (v245 >> 2 <= v235) {
                    uint64_t v246 = v235;
                  }
                  if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v247 = v246;
                  }
                  std::string v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v247);
                  uint64_t v409 = v249;
                  std::string v250 = (char *)*v238;
                  std::string v251 = (char *)*v236;
                  int v407 = v248;
                  std::string v252 = &v248[8 * v240];
                  bzero(v252, 8 * v414);
                  std::string v253 = v252;
                  if (v250 == v251)
                  {
                    std::string v254 = v411;
                    unint64_t v256 = v414;
                  }
                  else
                  {
                    std::string v254 = v411;
                    do
                    {
                      uint64_t v255 = *((void *)v250 - 1);
                      v250 -= 8;
                      *((void *)v253 - 1) = v255;
                      v253 -= 8;
                    }
                    while (v250 != v251);
                    std::string v251 = (char *)*v236;
                    unint64_t v256 = v414;
                  }
                  *std::string v236 = v253;
                  *std::string v238 = &v252[8 * v256];
                  *std::string v254 = &v407[8 * v409];
                  unint64_t v235 = v405;
                  if (v251) {
                    operator delete(v251);
                  }
                  goto LABEL_242;
                }
                bzero(v237, 8 * (v235 - v240));
                std::string v257 = &v237[8 * (v235 - v240)];
                goto LABEL_238;
              }
LABEL_243:
              std::string v258 = (char *)v440;
              long long v50 = v416;
              if (v441 != (char *)v440)
              {
                uint64_t v259 = 0;
                unint64_t v260 = (v441 - (char *)v440) / 24;
                if (v260 <= 1) {
                  unint64_t v260 = 1;
                }
                do
                {
                  uint64_t v261 = *(void *)&v258[24 * v259];
                  uint64_t v262 = *(void *)&v258[24 * v259 + 8];
                  uint64_t v263 = v262 - v261;
                  if (v262 != v261)
                  {
                    uint64_t v264 = 0;
                    unint64_t v265 = v263 / 24;
                    if (v265 <= 1) {
                      unint64_t v265 = 1;
                    }
                    do
                    {
                      uint64_t v266 = *(void *)(v261 + 24 * v264);
                      uint64_t v267 = *(void *)(v261 + 24 * v264 + 8);
                      uint64_t v268 = v267 - v266;
                      if (v267 != v266)
                      {
                        uint64_t v269 = 0;
                        unint64_t v270 = v268 / 24;
                        uint64_t v271 = v424;
                        unint64_t v272 = (char *)v437 + 24 * v259;
                        uint64_t v273 = v421;
                        if (v270 <= 1) {
                          unint64_t v270 = 1;
                        }
                        do
                        {
                          uint64_t v274 = *(void *)(v266 + 24 * v269);
                          uint64_t v275 = *(void *)(v266 + 24 * v269 + 8);
                          uint64_t v276 = v275 - v274;
                          if (v275 != v274)
                          {
                            uint64_t v277 = 0;
                            unint64_t v278 = v276 >> 2;
                            uint64_t v279 = *(void *)(*(void *)(*v272 + 24 * v264) + 24 * v269);
                            if (v278 <= 1) {
                              uint64_t v280 = 1;
                            }
                            else {
                              uint64_t v280 = v278;
                            }
                            do
                            {
                              uint64_t v281 = 3 * (v269 + *(unsigned int *)&v220[4 * v264]);
                              uint64_t v282 = v277 + *(unsigned int *)&v208[4 * v259];
                              *(_DWORD *)(*(void *)(v271 + 24 * (v269 + *(unsigned int *)&v220[4 * v264])) + 4 * v282) = *(_DWORD *)(v274 + 4 * v277);
                              *(void *)(*(void *)(v273 + 8 * v281) + 8 * v282) = *(void *)(v279 + 8 * v277++);
                            }
                            while (v280 != v277);
                          }
                          ++v269;
                        }
                        while (v269 != v270);
                      }
                      ++v264;
                    }
                    while (v264 != v265);
                  }
                  ++v259;
                }
                while (v259 != v260);
              }
              if (v220) {
                operator delete(v220);
              }
              if (v208) {
                operator delete(v208);
              }
              if (__p) {
                operator delete(__p);
              }
              if (v433.__r_.__value_.__r.__words[0])
              {
                v433.__r_.__value_.__l.__size_ = v433.__r_.__value_.__r.__words[0];
                operator delete(v433.__r_.__value_.__l.__data_);
              }
              if (v444.__r_.__value_.__r.__words[0]) {
                operator delete(v444.__r_.__value_.__l.__data_);
              }
              if ((void)v445) {
                operator delete((void *)v445);
              }
              *(void *)&long long buf = &v434;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              *(void *)&long long buf = &v437;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              *(void *)&long long buf = &v440;
              std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_273:
              LODWORD(v440) = 0;
              RepetitionDetectionUtil::getIndices((char **)&buf, v49, &v440);
              LODWORD(v437) = 1;
              RepetitionDetectionUtil::getIndices((char **)&v440, v49, &v437);
              LODWORD(v434) = 0;
              RepetitionDetectionUtil::getIndices((char **)&v437, v50, &v434);
              LODWORD(v445) = 1;
              RepetitionDetectionUtil::getIndices((char **)&v434, v50, &v445);
              uint64_t v283 = (char *)v440;
              if (v441 == (char *)v440)
              {
                os_signpost_id_t v284 = 0;
                int v286 = 0;
                uint64_t v336 = v400;
LABEL_425:
                *(void *)uint64_t v336 = 1065353216;
                *(_DWORD *)(v336 + 8) = 0;
LABEL_426:
                long long v385 = QRLoggerForCategory(0);
                if (os_log_type_enabled(v385, OS_LOG_TYPE_DEBUG)
                  && ((RepetitionPredictorResult::get_model_output_string((RepetitionPredictorResult *)&v445, v336),
                       v446 >= 0)
                    ? (unint64_t v386 = &v445)
                    : (unint64_t v386 = (long long *)v445),
                      LODWORD(v444.__r_.__value_.__l.__data_) = 136315394,
                      *(std::string::size_type *)((char *)v444.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Predict",
                      WORD2(v444.__r_.__value_.__r.__words[1]) = 2080,
                      *(std::string::size_type *)((char *)&v444.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v386,
                      _os_log_debug_impl(&dword_1C9555000, v385, OS_LOG_TYPE_DEBUG, "%s RuleBasedRepetitionPredictor Result: %s", (uint8_t *)&v444, 0x16u), SHIBYTE(v446) < 0))
                {
                  operator delete((void *)v445);
                  if (!v284) {
                    goto LABEL_436;
                  }
                }
                else
                {
LABEL_434:
                  if (!v284) {
                    goto LABEL_436;
                  }
                }
              }
              else
              {
                os_signpost_id_t v284 = 0;
                os_signpost_id_t v285 = 0;
                int v286 = 0;
                unint64_t v287 = 0;
                unint64_t v288 = 0;
                unsigned int v412 = *((_DWORD *)v435 - 1);
                v415 = 0;
                while (1)
                {
                  unsigned int v289 = *(_DWORD *)&v283[4 * v287];
                  long long v417 = v288;
                  uint64_t v420 = v289;
                  if (v284 >= v285)
                  {
                    unint64_t v291 = (v285 - v284) >> 2;
                    if (v291 <= 1) {
                      unint64_t v291 = 1;
                    }
                    if ((unint64_t)(v285 - v284) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v292 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v292 = v291;
                    }
                    uint64_t v293 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v292);
                    os_signpost_id_t v285 = &v293[8 * v294];
                    *(_DWORD *)uint64_t v293 = v289;
                    *((_DWORD *)v293 + 1) = v412;
                    uint64_t v290 = v293 + 8;
                    if (v284) {
                      operator delete(v284);
                    }
                    os_signpost_id_t v284 = v293;
                  }
                  else
                  {
                    *(_DWORD *)os_signpost_id_t v284 = v289;
                    *((_DWORD *)v284 + 1) = v412;
                    uint64_t v290 = v284 + 8;
                  }
                  uint64_t v296 = *((unsigned int *)v290 - 2);
                  uint64_t v297 = *((unsigned int *)v290 - 1);
                  unint64_t v295 = v290 - 8;
                  if (v296 | v297)
                  {
                    do
                    {
                      unint64_t v298 = *(void *)(*(void *)(v421 + 24 * v297) + 8 * v296);
                      unint64_t v299 = HIDWORD(v298);
                      if (v290 >= v285)
                      {
                        uint64_t v300 = (v290 - v284) >> 3;
                        unint64_t v301 = v300 + 1;
                        if ((unint64_t)(v300 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        if ((v285 - v284) >> 2 > v301) {
                          unint64_t v301 = (v285 - v284) >> 2;
                        }
                        if ((unint64_t)(v285 - v284) >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v302 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v302 = v301;
                        }
                        if (v302) {
                          unint64_t v302 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v302);
                        }
                        else {
                          uint64_t v303 = 0;
                        }
                        uint64_t v304 = (char *)(v302 + 8 * v300);
                        *(void *)uint64_t v304 = v299 | (v298 << 32);
                        uint64_t v305 = v304 + 8;
                        while (v290 != v284)
                        {
                          uint64_t v306 = *((void *)v290 - 1);
                          v290 -= 8;
                          *((void *)v304 - 1) = v306;
                          v304 -= 8;
                        }
                        os_signpost_id_t v285 = (char *)(v302 + 8 * v303);
                        if (v284) {
                          operator delete(v284);
                        }
                        os_signpost_id_t v284 = v304;
                        uint64_t v290 = v305;
                      }
                      else
                      {
                        *(void *)uint64_t v290 = v299 | (v298 << 32);
                        v290 += 8;
                      }
                      uint64_t v296 = *((unsigned int *)v290 - 2);
                      uint64_t v297 = *((unsigned int *)v290 - 1);
                    }
                    while (v296 | v297);
                    unint64_t v295 = v290 - 8;
                  }
                  if (v284 != v290 && v295 > v284)
                  {
                    uint64_t v307 = v290;
                    uint64_t v308 = v284;
                    do
                    {
                      uint64_t v309 = v295;
                      int v310 = *(_DWORD *)v308;
                      *(_DWORD *)uint64_t v308 = *(_DWORD *)v295;
                      *(_DWORD *)unint64_t v295 = v310;
                      v295 -= 8;
                      int v311 = *((_DWORD *)v308 + 1);
                      *((_DWORD *)v308 + 1) = *((_DWORD *)v307 - 1);
                      *((_DWORD *)v307 - 1) = v311;
                      v308 += 8;
                      uint64_t v307 = v309;
                    }
                    while (v308 < v295);
                  }
                  if ((unint64_t)(v290 - v284) <= 8) {
                    break;
                  }
                  unsigned int v312 = *((_DWORD *)v284 + 3);
                  if (*((_DWORD *)v284 + 2) <= 1u) {
                    __int32 v313 = 1;
                  }
                  else {
                    __int32 v313 = *((_DWORD *)v284 + 2);
                  }
                  float v314 = *(float *)(*(void *)(v424 + 24 * v412) + 4 * v420);
                  long long v315 = buf;
                  size_t v316 = (uint64_t)(*((void *)&buf + 1) - buf) >> 2;
                  uint64_t v317 = wmemchr((__int32 *)buf, v313, v316);
                  if (v317) {
                    uint64_t v318 = v317;
                  }
                  else {
                    uint64_t v318 = (__int32 *)*((void *)&v315 + 1);
                  }
                  unint64_t v319 = (unint64_t)v318 - v315;
                  if (v316 <= (uint64_t)((uint64_t)v318 - v315) >> 2)
                  {
                    int v395 = __cxa_allocate_exception(0x30uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v445, "Could not find start from path in turn_1_starts");
                    std::string::basic_string[abi:ne180100]<0>(&v444, "QueryRewrite");
                    InferenceError::InferenceError(v395, (uint64_t)&v445, (uint64_t)&v444, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RuleBasedRepetitionPredictor.cpp", 98);
                  }
                  if (v312 <= 1) {
                    __int32 v320 = 1;
                  }
                  else {
                    __int32 v320 = v312;
                  }
                  unint64_t v321 = v437;
                  long long v322 = (__int32 *)v438;
                  size_t v323 = (v438 - (unsigned char *)v437) >> 2;
                  int v324 = wmemchr((__int32 *)v437, v320, v323);
                  if (v324) {
                    uint64_t v325 = v324;
                  }
                  else {
                    uint64_t v325 = v322;
                  }
                  uint64_t v326 = (char *)v325 - v321;
                  if (v323 <= v326 >> 2)
                  {
                    v394 = __cxa_allocate_exception(0x30uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v445, "Could not find start from path in turn_2_starts");
                    std::string::basic_string[abi:ne180100]<0>(&v444, "QueryRewrite");
                    InferenceError::InferenceError(v394, (uint64_t)&v445, (uint64_t)&v444, "/Library/Caches/com.apple.xbs/Sources/Marrs/QueryRewrite.subproj/QueryRewrite/Common/Predictor/src/RuleBasedRepetitionPredictor.cpp", 106);
                  }
                  float v327 = v314 / (float)(v420 - v313 + 1);
                  uint64_t v328 = ((v435 - (unsigned char *)v434) >> 2) - 1;
                  if (v286 >= (float *)v415)
                  {
                    unint64_t v329 = 0xCCCCCCCCCCCCCCCDLL * (v286 - v417) + 1;
                    if (v329 > 0xCCCCCCCCCCCCCCCLL) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x999999999999999ALL * ((v415 - (char *)v417) >> 2) > v329) {
                      unint64_t v329 = 0x999999999999999ALL * ((v415 - (char *)v417) >> 2);
                    }
                    if (0xCCCCCCCCCCCCCCCDLL * ((v415 - (char *)v417) >> 2) >= 0x666666666666666) {
                      unint64_t v330 = 0xCCCCCCCCCCCCCCCLL;
                    }
                    else {
                      unint64_t v330 = v329;
                    }
                    if (v330 > 0xCCCCCCCCCCCCCCCLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    long long v331 = (char *)operator new(20 * v330);
                    long long v332 = &v331[4 * (v286 - v417)];
                    *(_DWORD *)long long v332 = v319 >> 2;
                    *((_DWORD *)v332 + 1) = v287;
                    *((_DWORD *)v332 + 2) = (unint64_t)v326 >> 2;
                    *((_DWORD *)v332 + 3) = v328;
                    *((float *)v332 + 4) = v327;
                    if (v286 == v417)
                    {
                      uint64_t v335 = &v331[4 * (v286 - v417)];
                    }
                    else
                    {
                      long long v333 = &v331[4 * (v286 - v417)];
                      do
                      {
                        long long v334 = *(_OWORD *)(v286 - 5);
                        uint64_t v335 = v333 - 20;
                        *((float *)v333 - 1) = *(v286 - 1);
                        *(_OWORD *)(v333 - 20) = v334;
                        v286 -= 5;
                        v333 -= 20;
                      }
                      while (v286 != v417);
                    }
                    v415 = &v331[20 * v330];
                    int v286 = (float *)(v332 + 20);
                    if (v417) {
                      operator delete(v417);
                    }
                    unint64_t v288 = (float *)v335;
                  }
                  else
                  {
                    *(_DWORD *)int v286 = v319 >> 2;
                    *((_DWORD *)v286 + 1) = v287;
                    *((_DWORD *)v286 + 2) = (unint64_t)v326 >> 2;
                    *((_DWORD *)v286 + 3) = v328;
                    v286[4] = v327;
                    v286 += 5;
                    unint64_t v288 = v417;
                  }
                  ++v287;
                  uint64_t v283 = (char *)v440;
                  if (v287 >= (v441 - (char *)v440) >> 2)
                  {
                    uint64_t v336 = v400;
                    if (v286 == v288) {
                      goto LABEL_425;
                    }
                    long long v337 = v288 + 5;
                    uint64_t v338 = v288;
                    if (v288 + 5 != v286)
                    {
                      uint64_t v338 = v288;
                      do
                      {
                        if (v337[4] < v338[4]) {
                          uint64_t v338 = v337;
                        }
                        v337 += 5;
                      }
                      while (v337 != v286);
                    }
                    float v339 = 1.0 / (v338[4] + 1.0);
                    *(float *)uint64_t v400 = 1.0 - v339;
                    uint64_t v418 = v288;
                    if (*(_DWORD *)v338)
                    {
                      unint64_t v340 = 0;
                      long long v341 = *(char **)(v400 + 24);
                      do
                      {
                        ++v340;
                        unint64_t v342 = *(void *)(v400 + 32);
                        if ((unint64_t)v341 >= v342)
                        {
                          char v344 = *(char **)(v400 + 16);
                          uint64_t v345 = (v341 - v344) >> 2;
                          unint64_t v346 = v345 + 1;
                          if ((unint64_t)(v345 + 1) >> 62) {
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v347 = v342 - (void)v344;
                          if (v347 >> 1 > v346) {
                            unint64_t v346 = v347 >> 1;
                          }
                          if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v348 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v348 = v346;
                          }
                          if (v348)
                          {
                            unint64_t v348 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v348);
                            char v344 = *(char **)(v400 + 16);
                            long long v341 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            uint64_t v349 = 0;
                          }
                          float32x4_t v350 = (_DWORD *)(v348 + 4 * v345);
                          *float32x4_t v350 = v340;
                          uint64_t v343 = (char *)(v350 + 1);
                          while (v341 != v344)
                          {
                            int v351 = *((_DWORD *)v341 - 1);
                            v341 -= 4;
                            *--float32x4_t v350 = v351;
                          }
                          *(void *)(v400 + 16) = v350;
                          *(void *)(v400 + 24) = v343;
                          *(void *)(v400 + 32) = v348 + 4 * v349;
                          if (v344) {
                            operator delete(v344);
                          }
                        }
                        else
                        {
                          *(_DWORD *)long long v341 = v340;
                          uint64_t v343 = v341 + 4;
                        }
                        *(void *)(v400 + 24) = v343;
                        long long v341 = v343;
                      }
                      while (v340 < *(unsigned int *)v338);
                    }
                    unint64_t v352 = *((unsigned int *)v338 + 2);
                    if (v352 < *((_DWORD *)v338 + 3) + 1)
                    {
                      float32x4_t v353 = *(char **)(v400 + 24);
                      do
                      {
                        uint64_t v354 = ++v352 - 0x5555555555555555 * ((a1[1] - *a1) >> 3);
                        unint64_t v355 = *(void *)(v400 + 32);
                        if ((unint64_t)v353 >= v355)
                        {
                          uint64_t v357 = *(char **)(v400 + 16);
                          uint64_t v358 = (v353 - v357) >> 2;
                          unint64_t v359 = v358 + 1;
                          if ((unint64_t)(v358 + 1) >> 62) {
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v360 = v355 - (void)v357;
                          if (v360 >> 1 > v359) {
                            unint64_t v359 = v360 >> 1;
                          }
                          if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v361 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v361 = v359;
                          }
                          if (v361)
                          {
                            unint64_t v361 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v361);
                            uint64_t v357 = *(char **)(v400 + 16);
                            float32x4_t v353 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            uint64_t v362 = 0;
                          }
                          unint64_t v363 = (_DWORD *)(v361 + 4 * v358);
                          *unint64_t v363 = v354;
                          BOOL v356 = (char *)(v363 + 1);
                          while (v353 != v357)
                          {
                            int v364 = *((_DWORD *)v353 - 1);
                            v353 -= 4;
                            *--unint64_t v363 = v364;
                          }
                          *(void *)(v400 + 16) = v363;
                          *(void *)(v400 + 24) = v356;
                          *(void *)(v400 + 32) = v361 + 4 * v362;
                          if (v357) {
                            operator delete(v357);
                          }
                        }
                        else
                        {
                          *(_DWORD *)float32x4_t v353 = v354;
                          BOOL v356 = v353 + 4;
                        }
                        *(void *)(v400 + 24) = v356;
                        float32x4_t v353 = v356;
                      }
                      while (v352 < (*((_DWORD *)v338 + 3) + 1));
                    }
                    unint64_t v365 = (*((_DWORD *)v338 + 1) + 1);
                    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v365)
                    {
                      long long v366 = *(char **)(v400 + 24);
                      do
                      {
                        ++v365;
                        unint64_t v367 = *(void *)(v400 + 32);
                        if ((unint64_t)v366 >= v367)
                        {
                          int v369 = *(char **)(v400 + 16);
                          uint64_t v370 = (v366 - v369) >> 2;
                          unint64_t v371 = v370 + 1;
                          if ((unint64_t)(v370 + 1) >> 62) {
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v372 = v367 - (void)v369;
                          if (v372 >> 1 > v371) {
                            unint64_t v371 = v372 >> 1;
                          }
                          if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v373 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v373 = v371;
                          }
                          if (v373)
                          {
                            unint64_t v373 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v373);
                            int v369 = *(char **)(v400 + 16);
                            long long v366 = *(char **)(v400 + 24);
                          }
                          else
                          {
                            uint64_t v374 = 0;
                          }
                          uint64_t v375 = (_DWORD *)(v373 + 4 * v370);
                          *uint64_t v375 = v365;
                          size_t v368 = (char *)(v375 + 1);
                          while (v366 != v369)
                          {
                            int v376 = *((_DWORD *)v366 - 1);
                            v366 -= 4;
                            *--uint64_t v375 = v376;
                          }
                          *(void *)(v400 + 16) = v375;
                          *(void *)(v400 + 24) = v368;
                          *(void *)(v400 + 32) = v373 + 4 * v374;
                          if (v369) {
                            operator delete(v369);
                          }
                        }
                        else
                        {
                          *(_DWORD *)long long v366 = v365;
                          size_t v368 = v366 + 4;
                        }
                        *(void *)(v400 + 24) = v368;
                        long long v366 = v368;
                      }
                      while (v365 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
                    }
                    long long v445 = 0uLL;
                    uint64_t v446 = 0;
                    RepetitionPredictorResult::AugmentationToWords(v400, a1, v402, (uint64_t *)&v445);
                    RepetitionDetectionUtil::constructUtterance(&v444, v402);
                    RepetitionDetectionUtil::constructUtterance(&v433, (uint64_t *)&v445);
                    int64_t v377 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    char v378 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      BOOL v379 = &v444;
                    }
                    else {
                      BOOL v379 = (std::string *)v444.__r_.__value_.__r.__words[0];
                    }
                    int v380 = SHIBYTE(v433.__r_.__value_.__r.__words[2]);
                    long long v381 = (void *)v433.__r_.__value_.__r.__words[0];
                    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      long long v382 = &v433;
                    }
                    else {
                      long long v382 = (std::string *)v433.__r_.__value_.__r.__words[0];
                    }
                    if ((v433.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int64_t size = HIBYTE(v433.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      int64_t size = v433.__r_.__value_.__l.__size_;
                    }
                    float v384 = 0.0;
                    if (size)
                    {
                      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        int64_t v377 = v444.__r_.__value_.__l.__size_;
                      }
                      if (v377 >= size)
                      {
                        float v388 = (char *)v379 + v377;
                        int v389 = v382->__r_.__value_.__s.__data_[0];
                        uint64_t v390 = v379;
                        do
                        {
                          int64_t v391 = v377 - size;
                          if (v391 == -1) {
                            break;
                          }
                          size_t v392 = (char *)memchr(v390, v389, v391 + 1);
                          if (!v392) {
                            break;
                          }
                          size_t v393 = v392;
                          if (!memcmp(v392, v382, size))
                          {
                            if (v393 != v388 && v393 - (char *)v379 != -1) {
                              goto LABEL_419;
                            }
                            break;
                          }
                          uint64_t v390 = (std::string *)(v393 + 1);
                          int64_t v377 = v388 - (v393 + 1);
                        }
                        while (v377 >= size);
                      }
                      float v384 = v339;
                      float v339 = 0.0;
                    }
LABEL_419:
                    uint64_t v336 = v400;
                    *(float *)(v400 + 4) = v384;
                    *(float *)(v400 + 8) = v339;
                    if (v380 < 0)
                    {
                      operator delete(v381);
                      char v378 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
                    }
                    if (v378 < 0) {
                      operator delete(v444.__r_.__value_.__l.__data_);
                    }
                    v444.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v444);
                    int v286 = v418;
                    goto LABEL_426;
                  }
                }
                uint64_t v387 = QRLoggerForCategory(0);
                int v286 = v417;
                if (!os_log_type_enabled(v387, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_434;
                }
                LODWORD(v445) = 136315138;
                *(void *)((char *)&v445 + 4) = "Predict";
                _os_log_debug_impl(&dword_1C9555000, v387, OS_LOG_TYPE_DEBUG, "%s Path size less than two.", (uint8_t *)&v445, 0xCu);
                if (!v284)
                {
LABEL_436:
                  if (v286) {
                    operator delete(v286);
                  }
                  if (v434) {
                    operator delete(v434);
                  }
                  if (v437) {
                    operator delete(v437);
                  }
                  if (v440) {
                    operator delete(v440);
                  }
                  if ((void)buf) {
                    operator delete((void *)buf);
                  }
                  *(void *)&long long buf = &v421;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  *(void *)&long long buf = &v424;
                  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  *(void *)&long long buf = &v427;
                  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                  return;
                }
              }
              operator delete(v284);
              goto LABEL_436;
            }
          }
        }
      }
      else
      {
        unint64_t v17 = v16 - 1;
      }
      char v18 = (char *)buf;
      unint64_t v20 = v17 >> 6;
      if (v16 >= 0x41) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = 0;
      }
      *(void *)(buf + 8 * v21) = 0;
      goto LABEL_16;
    }
  }
  *(void *)a7 = 1065353216;
  *(_DWORD *)(a7 + 8) = 0;
  float64x2_t v19 = QRLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "Predict";
    _os_log_error_impl(&dword_1C9555000, v19, OS_LOG_TYPE_ERROR, "%s [ERR]: Invalid inputs/Pronounciation Mismatch", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1C95CE874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44)
{
  if (*(char *)(v46 - 233) < 0) {
    operator delete(*(void **)(v46 - 256));
  }
  if (*(char *)(v46 - 137) < 0)
  {
    operator delete(*(void **)(v46 - 160));
    if ((v45 & 1) == 0)
    {
LABEL_8:
      *(void *)(v46 - 256) = &a26;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      *(void *)(v46 - 256) = &a29;
      std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      *(void *)(v46 - 256) = &a32;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
  goto LABEL_8;
}

void std::vector<float>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float64x2_t v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  BOOL v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    float64x2_t v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  float64x2_t v12 = *a1;
  int v13 = a1[1];
  unint64_t v14 = &v11[4 * v5];
  unint64_t v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  unint64_t v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t *removeFirstColumn<float>(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v1 = result[1];
  if (v1 != *result)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2 + v4;
      uint64_t v8 = *(void *)(v2 + v4);
      uint64_t v7 = *(void *)(v2 + v4 + 8);
      uint64_t v9 = v7 - (v8 + 4);
      if (v7 != v8 + 4)
      {
        BOOL result = (uint64_t *)memmove(*(void **)(v2 + v4), (const void *)(v8 + 4), v7 - (v8 + 4));
        uint64_t v2 = *v3;
        uint64_t v1 = v3[1];
      }
      *(void *)(v6 + 8) = v8 + v9;
      ++v5;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3));
  }
  return result;
}

uint64_t removeFirstColumn<std::pair<unsigned int,unsigned int>>(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v2 = 0;
    unint64_t v3 = (a2 - result) / 24;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    do
    {
      uint64_t v4 = (void *)(result + 24 * v2);
      unint64_t v5 = (_DWORD *)*v4;
      uint64_t v6 = (_DWORD *)(*v4 + 8);
      uint64_t v9 = (_DWORD *)v4[1];
      uint64_t v7 = v4 + 1;
      uint64_t v8 = v9;
      while (v6 != v8)
      {
        unint64_t v5 = v6;
        int v10 = v6[1];
        *(v6 - 2) = *v6;
        *(v6 - 1) = v10;
        v6 += 2;
      }
      *uint64_t v7 = v5;
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void removeFirstRow<float>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1 + 24;
  if (v4 != v3)
  {
    do
    {
      unint64_t v5 = *(void **)v2;
      if (*(void *)v2)
      {
        *(void *)(v2 + 8) = v5;
        operator delete(v5);
        *(void *)(v2 + 16) = 0;
      }
      uint64_t v6 = v2 + 24;
      *(_OWORD *)uint64_t v2 = *(_OWORD *)(v2 + 24);
      *(void *)(v2 + 16) = *(void *)(v2 + 40);
      *(void *)(v2 + 32) = 0;
      *(void *)(v2 + 40) = 0;
      *(void *)(v2 + 24) = 0;
      uint64_t v7 = v2 + 48;
      v2 += 24;
    }
    while (v7 != v3);
    uint64_t v4 = a1[1];
    uint64_t v2 = v6;
  }
  if (v4 != v2)
  {
    uint64_t v8 = v4;
    do
    {
      int v10 = *(void **)(v8 - 24);
      v8 -= 24;
      uint64_t v9 = v10;
      if (v10)
      {
        *(void *)(v4 - 16) = v9;
        operator delete(v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v2);
  }
  a1[1] = v2;
}

void std::vector<std::vector<std::vector<std::vector<unsigned int>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void marrs::mrr::md::MRRVisualAndScreenMentionDetector::~MRRVisualAndScreenMentionDetector(marrs::mrr::md::MRRVisualAndScreenMentionDetector *this)
{
  marrs::mrr::md::MRRVisualAndScreenMentionDetector::~MRRVisualAndScreenMentionDetector(this);
  JUMPOUT(0x1CB786E50);
}

{
  *(void *)this = &unk_1F23C7C40;
  std::__tree<std::__value_type<std::string,std::vector<MDMentionOverride>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<MDMentionOverride>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<MDMentionOverride>>>>::destroy(*((void **)this + 18));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100]((marrs::inference_engine::EspressoModule **)this + 4);
  *(void *)this = &unk_1F23C7C90;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

marrs::inference_engine::EspressoModule *std::unique_ptr<marrs::mrr::md::inference_engine::MentionDetectorModule>::reset[abi:ne180100](marrs::inference_engine::EspressoModule **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    marrs::inference_engine::EspressoModule::~EspressoModule(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

void marrs::mrr::md::MRRVisualAndScreenMentionDetector::detectMentionsInUtterance(marrs::mrr::md::MRRVisualAndScreenMentionDetector *this@<X0>, const sirinluinternalmention_detector::MentionDetectorRequest *a2@<X1>, sirinluinternalmention_detector::MentionDetectorResponse *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MRRLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"MDRequest", 9);
    std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
    uint64_t v7 = std::locale::use_facet(v45, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(v45);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"utterance - ", 12);
    uint64_t v8 = *((void *)a2 + 8);
    int v9 = *(char *)(v8 + 23);
    if (v9 >= 0) {
      uint64_t v10 = *((void *)a2 + 8);
    }
    else {
      uint64_t v10 = *(void *)v8;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v8 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v10, v11);
    std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
    float64x2_t v12 = std::locale::use_facet(v45, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(v45);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"maxCandidates - ", 16);
    int v13 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    unint64_t v14 = std::locale::use_facet(v45, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(v45);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    *(void *)long long buf = *MEMORY[0x1E4FBA418];
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *(void *)&uint8_t buf[8] = MEMORY[0x1E4FBA470] + 16;
    if (v42 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CB786D60](&v43);
    std::basic_regex<char>::value_type locale = v45;
    if (v46 < 0) {
      std::basic_regex<char>::value_type locale = v45[0].__locale_;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = locale;
    _os_log_impl(&dword_1C9555000, v6, OS_LOG_TYPE_INFO, "MD Request - %s", buf, 0xCu);
    if (v46 < 0) {
      operator delete(v45[0].__locale_);
    }
  }
  if (*((void *)a2 + 5))
  {
    uint64_t v16 = *((void *)a2 + 2);
    if (v16)
    {
      if (*((void *)a2 + 7))
      {
        if (*((void *)a2 + 8))
        {
          if (*(void *)(v16 + 40) == *((void *)this + 16))
          {
            unint64_t v17 = MRRLoggerForCategory(3);
            os_signpost_id_t v18 = os_signpost_id_generate(v17);
            float64x2_t v19 = MRRLoggerForCategory(3);
            if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v20 = v19;
              if (os_signpost_enabled(v19))
              {
                *(_WORD *)long long buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1C9555000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v18, "MDPreProcessing", "", buf, 2u);
              }
            }
            unint64_t v21 = MRRLoggerForCategory(0);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1C9555000, v21, OS_LOG_TYPE_INFO, "BEGIN \"MDPreProcessing\"", buf, 2u);
            }
            sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)buf);
            float64x2_t v37 = this;
            size_t v22 = (void *)*((void *)this + 18);
            if (v22)
            {
              unint64_t v23 = (void *)*((void *)a2 + 8);
              do
              {
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v23, v22 + 4))
                {
                  if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22 + 4, v23))
                  {
                    uint64_t v24 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v37 + 136, v45, v23);
                    if (v24)
                    {
                      if (*(void *)(v24 + 56) != *(void *)(v24 + 64)) {
                        marrs::mrr::md::getMatchingSpanForBoundary();
                      }
                      unint64_t v25 = MRRLoggerForCategory(2);
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                      {
                        marrs::mrr::MRRCPPPrintUtils::getMdResponseString((marrs::mrr::MRRCPPPrintUtils *)v45, (const sirinluinternalmention_detector::MentionDetectorResponse *)buf);
                        if (v46 >= 0) {
                          unint64_t v26 = v45;
                        }
                        else {
                          unint64_t v26 = v45[0].__locale_;
                        }
                        *(_DWORD *)float64x2_t v44 = 136315138;
                        *(void *)&v44[4] = v26;
                        _os_log_impl(&dword_1C9555000, v25, OS_LOG_TYPE_INFO, "MD Response due to override - %s", v44, 0xCu);
                        if (v46 < 0) {
                          operator delete(v45[0].__locale_);
                        }
                      }
                      operator new();
                    }
                    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                  }
                  ++v22;
                }
                size_t v22 = (void *)*v22;
              }
              while (v22);
            }
            char v38 = 0;
            char v39 = 0;
            MEMORY[0x1CB786520](buf);
            sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(a3);
            operator new();
          }
          uint64_t v35 = MRRLoggerForCategory(1);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "OwlEmbeddingMismatch";
            _os_log_impl(&dword_1C9555000, v35, OS_LOG_TYPE_ERROR, "InferenceError - %s", buf, 0xCu);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
          std::string::basic_string[abi:ne180100]<0>(buf, "OwlEmbeddingMismatch");
          std::string::basic_string[abi:ne180100]<0>(v45, "MultimodalReferenceResolution");
          InferenceError::InferenceError(exception, (uint64_t)buf, (uint64_t)v45, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 59);
        }
        unint64_t v33 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "Invalid Mention Detector input: no utterance in request";
          _os_log_impl(&dword_1C9555000, v33, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
        }
        uint64_t v34 = __cxa_allocate_exception(0x30uLL);
        std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no utterance in request");
        std::string::basic_string[abi:ne180100]<0>(v45, "MultimodalReferenceResolution");
        IOContentError::IOContentError(v34, (uint64_t)buf, (uint64_t)v45, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 56);
      }
      uint64_t v31 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "Invalid Mention Detector input: no tokenChain in request";
        _os_log_impl(&dword_1C9555000, v31, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
      }
      uint64_t v32 = __cxa_allocate_exception(0x30uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no tokenChain in request");
      std::string::basic_string[abi:ne180100]<0>(v45, "MultimodalReferenceResolution");
      IOContentError::IOContentError(v32, (uint64_t)buf, (uint64_t)v45, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 53);
    }
    float v29 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "Invalid Mention Detector input: no embeddingTensor in request";
      _os_log_impl(&dword_1C9555000, v29, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
    }
    uint64_t v30 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: no embeddingTensor in request");
    std::string::basic_string[abi:ne180100]<0>(v45, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v30, (uint64_t)buf, (uint64_t)v45, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 50);
  }
  uint64_t v27 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "Invalid Mention Detector input: requestId not set";
    _os_log_impl(&dword_1C9555000, v27, OS_LOG_TYPE_ERROR, "IOContentError - %s", buf, 0xCu);
  }
  uint64_t v28 = __cxa_allocate_exception(0x30uLL);
  std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Mention Detector input: requestId not set");
  std::string::basic_string[abi:ne180100]<0>(v45, "MultimodalReferenceResolution");
  IOContentError::IOContentError(v28, (uint64_t)buf, (uint64_t)v45, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionDetector/VisualAndScreenMentionDetector/MRRVisualAndScreenMentionDetector.cpp", 47);
}

void sub_1C95D0DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (*(char *)(v64 - 185) < 0)
  {
    operator delete(*(void **)(v64 - 208));
    if ((v63 & 1) == 0)
    {
LABEL_8:
      if (a62 < 0) {
        operator delete(a57);
      }
      if (a20) {
        operator delete(a20);
      }
      a57 = &a33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
      MEMORY[0x1CB786520](a16);
      if (a41) {
        MEMORY[0x1CB786520](&a36);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v62);
  goto LABEL_8;
}

void marrs::mrr::md::inference_engine::EspressoMentionDetectorModelInputType::~EspressoMentionDetectorModelInputType(marrs::mrr::md::inference_engine::EspressoMentionDetectorModelInputType *this)
{
  MEMORY[0x1CB786480]((char *)this + 24);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void marrs::mrr::mr::MROrchestrator::~MROrchestrator(void **this)
{
  marrs::mrr::mr::MROrchestrator::~MROrchestrator(this);
  JUMPOUT(0x1CB786E50);
}

{
  *this = &unk_1F23C7CB8;
  if (*((char *)this + 1391) < 0) {
    operator delete(this[171]);
  }
  marrs::mrr::mr::RuleBasedMR::~RuleBasedMR(this + 38);
  marrs::mrr::mr::ModelBasedMR::~ModelBasedMR((marrs::mrr::mr::ModelBasedMR *)(this + 1));
}

void marrs::mrr::mr::MROrchestrator::resolveMentionsInUtterance(const sirinluinternalmention_resolver::MentionResolverRequest *a1@<X1>, sirinluinternalmention_resolver::MentionResolverResponse *a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(a2);
  if (!*((void *)a1 + 17))
  {
    BOOL v40 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v49.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Invalid Mention Resolver input: requestId not set";
      _os_log_impl(&dword_1C9555000, v40, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&v49, 0xCu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v49, "Invalid Mention Resolver input: requestId not set");
    std::string::basic_string[abi:ne180100]<0>(&v46, "MultimodalReferenceResolution");
    IOContentError::IOContentError(exception, (uint64_t)&v49, (uint64_t)&v46, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/MROrchestrator.cpp", 404);
  }
  float64x2_t v44 = a1;
  if (!*((void *)a1 + 8))
  {
    char v42 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v49.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Invalid Mention Resolver input: no embeddingTensor in request";
      _os_log_impl(&dword_1C9555000, v42, OS_LOG_TYPE_ERROR, "IOContentError - %s", (uint8_t *)&v49, 0xCu);
    }
    uint64_t v43 = __cxa_allocate_exception(0x30uLL);
    std::string::basic_string[abi:ne180100]<0>(&v49, "Invalid Mention Resolver input: no embeddingTensor in request");
    std::string::basic_string[abi:ne180100]<0>(&v46, "MultimodalReferenceResolution");
    IOContentError::IOContentError(v43, (uint64_t)&v49, (uint64_t)&v46, "/Library/Caches/com.apple.xbs/Sources/Marrs/MultimodalReferenceResolution.subproj/MultimodalReferenceResolution/MentionResolver/MROrchestrator.cpp", 408);
  }
  memset(v45, 0, sizeof(v45));
  std::string::basic_string[abi:ne180100]<0>(v55, "app_entity");
  v53[0] = 0;
  *(void *)&v52[8] = 0;
  *(void *)uint64_t v52 = &v52[8];
  uint64_t v4 = *((void *)a1 + 12);
  for (uint64_t i = *((void *)a1 + 13); v4 != i; v4 += 8)
  {
    uint64_t v6 = *(void *)(*(void *)v4 + 64);
    if (v6)
    {
      memset(&v46, 0, sizeof(v46));
      uint64_t v7 = *(void **)(v6 + 56);
      uint64_t v8 = *(void **)(v6 + 64);
      while (v7 != v8)
      {
        MEMORY[0x1CB786380](&v49, *v7);
        if (v49.__r_.__value_.__r.__words[2])
        {
          int v9 = *(unsigned __int8 **)(v49.__r_.__value_.__r.__words[2] + 8);
          if (v9)
          {
            uint64_t v10 = v9[23];
            if ((v10 & 0x80u) == 0) {
              uint64_t v11 = v9[23];
            }
            else {
              uint64_t v11 = *((void *)v9 + 1);
            }
            uint64_t v12 = HIBYTE(v56);
            if (v56 < 0) {
              uint64_t v12 = *(void *)&v55[8];
            }
            if (v11 == v12)
            {
              if (v56 >= 0) {
                int v13 = v55;
              }
              else {
                int v13 = *(uint8_t **)v55;
              }
              if ((v10 & 0x80) != 0)
              {
                int v15 = memcmp(*(const void **)v9, v13, *((void *)v9 + 1));
                unint64_t v14 = __str;
                if (v15) {
                  BOOL v16 = 1;
                }
                else {
                  BOOL v16 = __str == 0;
                }
                if (!v16)
                {
LABEL_30:
                  std::string::operator=(&v46, v14);
                  MEMORY[0x1CB7863A0](&v49);
                  break;
                }
              }
              else if (v9[23])
              {
                while (*v9 == *v13)
                {
                  ++v9;
                  ++v13;
                  if (!--v10) {
                    goto LABEL_22;
                  }
                }
              }
              else
              {
LABEL_22:
                unint64_t v14 = __str;
                if (__str) {
                  goto LABEL_30;
                }
              }
            }
          }
        }
        MEMORY[0x1CB7863A0](&v49);
        ++v7;
      }
      std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v52, &v46, (uint64_t)&v46);
      sirinluinternal::MatchingSpan::operator=();
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(*(void **)v55);
  }
  *(void *)&v55[8] = 0;
  uint64_t v56 = 0;
  *(void *)unint64_t v55 = &v55[8];
  uint64_t v17 = *((void *)a1 + 9);
  uint64_t v18 = *((void *)a1 + 10);
  while (v17 != v18)
  {
    uint64_t v19 = *(void *)(*(void *)v17 + 48);
    if (v19)
    {
      unint64_t v20 = *(void **)(v19 + 8);
      if (v20)
      {
        std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v55, v20, *(void *)(v19 + 8));
        sirinluexternal::EntityCandidate::operator=();
      }
    }
    v17 += 8;
  }
  uint64_t v48 = 0;
  __sz[1] = 0;
  __sz[0] = (std::string::size_type)&__sz[1];
  unint64_t v21 = *(uint8_t **)v52;
  *(void *)unint64_t v57 = __sz;
  *(void *)&v57[8] = &__sz[1];
  if (*(uint8_t **)v52 != &v52[8])
  {
    do
    {
      if ((char)v21[55] < 0) {
        std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)v21 + 4), *((void *)v21 + 5));
      }
      else {
        std::string v49 = *(std::string *)(v21 + 32);
      }
      MEMORY[0x1CB786400](&v50, v21 + 56);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v46, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = v49;
      }
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t *)v57, &v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      MEMORY[0x1CB786420](&v50);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      size_t v22 = (uint8_t *)*((void *)v21 + 1);
      if (v22)
      {
        do
        {
          unint64_t v23 = v22;
          size_t v22 = *(uint8_t **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          unint64_t v23 = (uint8_t *)*((void *)v21 + 2);
          BOOL v16 = *(void *)v23 == (void)v21;
          unint64_t v21 = v23;
        }
        while (!v16);
      }
      unint64_t v21 = v23;
    }
    while (v23 != &v52[8]);
  }
  *(void *)&v57[8] = 0;
  uint64_t v58 = 0;
  *(void *)unint64_t v57 = &v57[8];
  uint64_t v24 = *(uint8_t **)v55;
  *(void *)long long buf = v57;
  *(void *)&uint8_t buf[8] = &v57[8];
  if (*(uint8_t **)v55 == &v55[8])
  {
    uint64_t v27 = &v57[8];
  }
  else
  {
    do
    {
      if ((char)v24[55] < 0) {
        std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)v24 + 4), *((void *)v24 + 5));
      }
      else {
        std::string v49 = *(std::string *)(v24 + 32);
      }
      MEMORY[0x1CB786300](&v50, v24 + 56);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v46, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = v49;
      }
      std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t *)buf, &v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      MEMORY[0x1CB786320](&v50);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      unint64_t v25 = (uint8_t *)*((void *)v24 + 1);
      if (v25)
      {
        do
        {
          unint64_t v26 = v25;
          unint64_t v25 = *(uint8_t **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          unint64_t v26 = (uint8_t *)*((void *)v24 + 2);
          BOOL v16 = *(void *)v26 == (void)v24;
          uint64_t v24 = v26;
        }
        while (!v16);
      }
      uint64_t v24 = v26;
    }
    while (v26 != &v55[8]);
    uint64_t v27 = *(uint8_t **)v57;
  }
  memset(&v46, 0, sizeof(v46));
  std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::back_insert_iterator<std::vector<std::string>>>((std::vector<std::string> **)&v49, (void *)__sz[0], &__sz[1], v27, &v57[8], (std::vector<std::string> *)&v46);
  std::string::size_type size = v46.__r_.__value_.__l.__size_;
  for (uint64_t j = v46.__r_.__value_.__r.__words[0]; j != size; j += 24)
  {
    if (std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v52, (void *)j, j)[13])
    {
      uint64_t v30 = std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v52, (void *)j, j)[13];
      int v31 = *((char *)v30 + 23);
      if (v31 < 0)
      {
        if (v30[1] == 9)
        {
          uint64_t v30 = (uint64_t *)*v30;
LABEL_85:
          uint64_t v32 = *v30;
          int v33 = *((unsigned __int8 *)v30 + 8);
          if (v32 == 0x7469746E45707061 && v33 == 121)
          {
            uint64_t v35 = std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v52, (void *)j, j);
            MEMORY[0x1CB786400](&v49, v35 + 7);
            if (std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v55, (void *)j, j)[12])
            {
              std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v55, (void *)j, j);
              operator new();
            }
            uint64_t v36 = MRRLoggerForCategory(2);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              float64x2_t v37 = __str;
              if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
                float64x2_t v37 = (std::string *)__str->__r_.__value_.__r.__words[0];
              }
              uint64_t v38 = j;
              if (*(char *)(j + 23) < 0) {
                uint64_t v38 = *(void *)j;
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v37;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v38;
              _os_log_impl(&dword_1C9555000, v36, OS_LOG_TYPE_INFO, "found span \"%s\" in matching spans that matches with salient entity %s", buf, 0x16u);
            }
            PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>();
          }
        }
      }
      else if (v31 == 9)
      {
        goto LABEL_85;
      }
    }
  }
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  std::__tree<std::string>::destroy(*(char **)&v57[8]);
  std::__tree<std::string>::destroy((char *)__sz[1]);
  std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(*(void **)&v55[8]);
  std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(*(void **)&v52[8]);
  if (*((void *)v44 + 2) != *((void *)v44 + 3)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)v44 + 5) != *((void *)v44 + 6)) {
    operator new();
  }
  char v39 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    LOWORD(v49.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C9555000, v39, OS_LOG_TYPE_INFO, "No mentions or contextual spans in request returning empty", (uint8_t *)&v49, 2u);
  }
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
  std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
}

void sub_1C95D5D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (LOBYTE(STACK[0x3F8])) {
    marrs::mrr::mr::MRREntity::~MRREntity((void **)&STACK[0x320]);
  }
  if (LOBYTE(STACK[0x288])) {
    marrs::mrr::mr::MRREntity::~MRREntity(&__p);
  }
  std::string __p = &a57;
  std::vector<marrs::mrr::mr::MRREntity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)(v63 - 160) = &a60;
  std::vector<std::unique_ptr<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 160));
  MEMORY[0x1CB786560](a18);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::MROrchestrator::doCoreAnalytics()
{
  unint64_t v0 = MRRLoggerForCategory(3);
  os_signpost_id_t v1 = os_signpost_id_generate(v0);
  uint64_t v2 = MRRLoggerForCategory(3);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v3 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "MRDoCoreAnalytics", "", buf, 2u);
    }
  }
  uint64_t v4 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C9555000, v4, OS_LOG_TYPE_INFO, "BEGIN \"MRDoCoreAnalytics\"", buf, 2u);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "com.apple.siri.marrs");
  unint64_t v5 = std::string::append(&v10, ".MentionDetectorMentionResolver.MentionResolver.Resolve");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long buf = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  analytics_send_event_lazy();
  if (SHIBYTE(v12) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = MRRLoggerForCategory(3);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9555000, v8, OS_SIGNPOST_INTERVAL_END, v1, "MRDoCoreAnalytics", " enableTelemetry=YES ", buf, 2u);
    }
  }
  int v9 = MRRLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1C9555000, v9, OS_LOG_TYPE_INFO, "END \"MRDoCoreAnalytics\"", buf, 2u);
  }
}

void sub_1C95D6800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void marrs::mrr::mr::MROrchestrator::processMRResultsToFinalResponse(uint64_t *a1, uint64_t a2, void *a3)
{
  v118[19] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v6 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1C9555000, v5, OS_LOG_TYPE_DEBUG, "Number of matching results before postResolveFilter - %ld", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v104 = 0u;
  float v105 = 1.0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 == v8)
  {
    uint64_t v100 = 0;
    int64_t v101 = 0;
    unint64_t v102 = 0;
    goto LABEL_130;
  }
  do
  {
    if (*(unsigned char *)(v7 + 312) && *(_DWORD *)(v7 + 96) == 14)
    {
      unint64_t v9 = sirinluinternal::MatchingSpan::hash_value((sirinluinternal::MatchingSpan *)v7);
      unint64_t v10 = v9;
      unint64_t v11 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v12.i16[0] = vaddlv_u8(v12);
        unint64_t v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v3 = v9;
          if ((void *)v9 >= __p[1]) {
            unint64_t v3 = v9 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v3 = ((unint64_t)__p[1] - 1) & v9;
        }
        unint64_t v14 = (void *)*((void *)__p[0] + v3);
        if (v14)
        {
          int v15 = (void *)*v14;
          if (*v14)
          {
            do
            {
              unint64_t v16 = v15[1];
              if (v16 == v10)
              {
                if (sirinluinternal::MatchingSpan::operator==()) {
                  goto LABEL_78;
                }
              }
              else
              {
                if (v13 > 1)
                {
                  if ((void *)v16 >= __p[1]) {
                    v16 %= (unint64_t)__p[1];
                  }
                }
                else
                {
                  v16 &= (unint64_t)__p[1] - 1;
                }
                if (v16 != v3) {
                  break;
                }
              }
              int v15 = (void *)*v15;
            }
            while (v15);
          }
        }
      }
      uint64_t v17 = operator new(0x68uLL);
      *(void *)&long long buf = v17;
      *((void *)&buf + 1) = &v104;
      *uint64_t v17 = 0;
      v17[1] = v10;
      MEMORY[0x1CB786400](v17 + 2, v7);
      LOBYTE(v112) = 1;
      float v18 = (float)(unint64_t)(*((void *)&v104 + 1) + 1);
      if (v11 && (float)(v105 * (float)v11) >= v18)
      {
LABEL_68:
        uint64_t v34 = (void *)*((void *)__p[0] + v3);
        uint64_t v35 = buf;
        if (v34)
        {
          *(void *)long long buf = *v34;
        }
        else
        {
          *(void *)long long buf = v104;
          *(void *)&long long v104 = v35;
          *((void *)__p[0] + v3) = &v104;
          if (!*(void *)v35)
          {
LABEL_77:
            *(void *)&long long buf = 0;
            ++*((void *)&v104 + 1);
            std::unique_ptr<std::__hash_node<sirinluinternal::MatchingSpan,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<sirinluinternal::MatchingSpan,void *>>>>::reset[abi:ne180100]((uint64_t)&buf);
            goto LABEL_78;
          }
          unint64_t v36 = *(void *)(*(void *)v35 + 8);
          if ((v11 & (v11 - 1)) != 0)
          {
            if (v36 >= v11) {
              v36 %= v11;
            }
          }
          else
          {
            v36 &= v11 - 1;
          }
          uint64_t v34 = (char *)__p[0] + 8 * v36;
        }
        *uint64_t v34 = v35;
        goto LABEL_77;
      }
      BOOL v19 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3) {
        BOOL v19 = 1;
      }
      unint64_t v20 = v19 | (2 * v11);
      unint64_t v21 = vcvtps_u32_f32(v18 / v105);
      if (v20 <= v21) {
        int8x8_t prime = (int8x8_t)v21;
      }
      else {
        int8x8_t prime = (int8x8_t)v20;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v11 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_34;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v29 = vcvtps_u32_f32((float)*((unint64_t *)&v104 + 1) / v105);
        if (__p[1] < (void *)3
          || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          unint64_t v29 = std::__next_prime(v29);
        }
        else
        {
          uint64_t v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2) {
            unint64_t v29 = v31;
          }
        }
        if (*(void *)&prime <= v29) {
          int8x8_t prime = (int8x8_t)v29;
        }
        if ((void *)*(void *)&prime >= __p[1])
        {
          unint64_t v11 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_34:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v23 = operator new(8 * *(void *)&prime);
            uint64_t v24 = __p[0];
            __p[0] = v23;
            if (v24) {
              operator delete(v24);
            }
            uint64_t v25 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v25++) = 0;
            while (*(void *)&prime != v25);
            unint64_t v26 = (void **)v104;
            if ((void)v104)
            {
              unint64_t v27 = *(void *)(v104 + 8);
              uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                if (v27 >= *(void *)&prime) {
                  v27 %= *(void *)&prime;
                }
              }
              else
              {
                v27 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v27) = &v104;
              for (i = *v26; i; unint64_t v27 = v33)
              {
                unint64_t v33 = i[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*((void *)__p[0] + v33))
                  {
                    *((void *)__p[0] + v33) = v26;
                    goto LABEL_59;
                  }
                  uint8_t *v26 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v33);
                  **((void **)__p[0] + v33) = i;
                  uint64_t i = v26;
                }
                unint64_t v33 = v27;
LABEL_59:
                unint64_t v26 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v11 = (unint64_t)prime;
            goto LABEL_63;
          }
          float64x2_t v37 = __p[0];
          __p[0] = 0;
          if (v37) {
            operator delete(v37);
          }
          unint64_t v11 = 0;
          __p[1] = 0;
        }
      }
LABEL_63:
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11) {
          unint64_t v3 = v10 % v11;
        }
        else {
          unint64_t v3 = v10;
        }
      }
      else
      {
        unint64_t v3 = (v11 - 1) & v10;
      }
      goto LABEL_68;
    }
LABEL_78:
    v7 += 344;
  }
  while (v7 != v8);
  uint64_t v38 = *a1;
  uint64_t v39 = a1[1];
  int64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v100 = 0;
  if (v39 != v38)
  {
    unint64_t v40 = 0x82FA0BE82FA0BE83 * ((v39 - v38) >> 3);
    if (v40 > 0xBE82FA0BE82FA0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    float32x2_t v114 = &v102;
    *(void *)&long long buf = std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v40);
    *((void *)&buf + 1) = buf;
    uint64_t v112 = buf;
    unint64_t v113 = buf + 344 * v41;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(&v100, &buf);
    std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&buf);
    uint64_t v38 = *a1;
    uint64_t v39 = a1[1];
  }
  if (v38 == v39) {
    goto LABEL_130;
  }
  while (2)
  {
    unint64_t v42 = sirinluinternal::MatchingSpan::hash_value((sirinluinternal::MatchingSpan *)v38);
    unint64_t v43 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_114;
    }
    unint64_t v44 = v42;
    uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v45.i16[0] = vaddlv_u8(v45);
    unint64_t v46 = v45.u32[0];
    if (v45.u32[0] > 1uLL)
    {
      unint64_t v47 = v42;
      if ((void *)v42 >= __p[1]) {
        unint64_t v47 = v42 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v47 = ((unint64_t)__p[1] - 1) & v42;
    }
    uint64_t v48 = (void *)*((void *)__p[0] + v47);
    if (!v48) {
      goto LABEL_114;
    }
    std::string v49 = (void *)*v48;
    if (!*v48) {
      goto LABEL_114;
    }
    while (2)
    {
      unint64_t v50 = v49[1];
      if (v44 != v50)
      {
        if (v46 > 1)
        {
          if (v50 >= v43) {
            v50 %= v43;
          }
        }
        else
        {
          v50 &= v43 - 1;
        }
        if (v50 != v47) {
          goto LABEL_114;
        }
        goto LABEL_108;
      }
      if ((sirinluinternal::MatchingSpan::operator==() & 1) == 0)
      {
LABEL_108:
        std::string v49 = (void *)*v49;
        if (!v49) {
          goto LABEL_114;
        }
        continue;
      }
      break;
    }
    if (!*(unsigned char *)(v38 + 312)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (*(_DWORD *)(v38 + 96) == 7)
    {
      uint64_t v51 = MRRLoggerForCategory(2);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1C9555000, v51, OS_LOG_TYPE_DEBUG, "ignoring media artist since common person is already present for the same span", (uint8_t *)&buf, 2u);
      }
      goto LABEL_127;
    }
LABEL_114:
    uint64_t v52 = v101;
    if ((unint64_t)v101 >= v102)
    {
      unint64_t v54 = 0x82FA0BE82FA0BE83 * (((uint64_t)v101 - v100) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0xBE82FA0BE82FA0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5F417D05F417D06 * ((uint64_t)(v102 - v100) >> 3) > v55) {
        unint64_t v55 = 0x5F417D05F417D06 * ((uint64_t)(v102 - v100) >> 3);
      }
      if (0x82FA0BE82FA0BE83 * ((uint64_t)(v102 - v100) >> 3) >= 0x5F417D05F417D0) {
        unint64_t v56 = 0xBE82FA0BE82FA0;
      }
      else {
        unint64_t v56 = v55;
      }
      float32x2_t v114 = &v102;
      if (v56) {
        unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      *(void *)&long long buf = v56;
      *((void *)&buf + 1) = v56 + 344 * v54;
      uint64_t v112 = *((void *)&buf + 1);
      unint64_t v113 = v56 + 344 * v57;
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(*((void **)&buf + 1), v38);
      v112 += 344;
      std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(&v100, &buf);
      char v53 = v101;
      std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v101, v38);
      char v53 = v52 + 43;
    }
    int64_t v101 = v53;
LABEL_127:
    v38 += 344;
    if (v38 != v39) {
      continue;
    }
    break;
  }
LABEL_130:
  uint64_t v58 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = 0x82FA0BE82FA0BE83 * (((uint64_t)v101 - v100) >> 3);
    _os_log_impl(&dword_1C9555000, v58, OS_LOG_TYPE_DEBUG, "Number of matching results after postResolveFilter - %ld", (uint8_t *)&buf, 0xCu);
  }
  std::__hash_table<sirinluinternal::MatchingSpan,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,std::allocator<sirinluinternal::MatchingSpan>>::~__hash_table((uint64_t)__p);
  unint64_t v59 = 126 - 2 * __clz(0x82FA0BE82FA0BE83 * (((uint64_t)v101 - v100) >> 3));
  if (v101 == (void *)v100) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = v59;
  }
  std::__introsort<std::_ClassicAlgPolicy,marrs::mrr::mr::MRMatchingResult::sortByMentionAndScore(std::vector<marrs::mrr::mr::MRMatchingResult> &)::$_0 &,marrs::mrr::mr::MRMatchingResult*,false>(v100, (unint64_t)v101, v60, 1);
  if ((void *)v100 != v101)
  {
    uint64_t v61 = *(uint64_t **)(a2 + 168);
    marrs::mrr::mr::MRMatchingResult::toMatchingSpan((uint64_t)&buf, v100, (void *)(a2 + 72), a2 + 152);
    uint64_t v62 = v100;
    if (v101 == (void *)v100) {
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(unsigned char *)(v100 + 312))
    {
      uint64_t v63 = v115;
      int v64 = *(_DWORD *)(v100 + 96);
      if (v64 == 10) {
        goto LABEL_146;
      }
      if (v64 == 14)
      {
        uint64_t v65 = (void *)(v100 + 128);
        int v66 = *(char *)(v100 + 151);
        if (v66 < 0)
        {
          if (*(void *)(v100 + 136) == 8)
          {
            uint64_t v65 = (void *)*v65;
            goto LABEL_145;
          }
LABEL_146:
          uint64_t v67 = MRRLoggerForCategory(2);
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
          {
            marrs::mrr::mr::MRREntity::getDebugDescription((marrs::mrr::mr::MRREntity *)__p, (int *)(v62 + 96));
            uint64_t v68 = (SBYTE7(v104) & 0x80u) == 0 ? __p : (void **)__p[0];
            LODWORD(v110.__r_.__value_.__l.__data_) = 136315138;
            *(std::basic_string<char16_t>::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = (std::basic_string<char16_t>::size_type)v68;
            _os_log_impl(&dword_1C9555000, v67, OS_LOG_TYPE_DEBUG, "rewriting with mrrEntity - %s", (uint8_t *)&v110, 0xCu);
            if (SBYTE7(v104) < 0) {
              operator delete(__p[0]);
            }
          }
          unint64_t v69 = *(uint64_t **)(v63 + 8);
          if (v69 != *(uint64_t **)(v63 + 16))
          {
            uint64_t v70 = *v69;
            uint64_t v71 = *(uint64_t **)(*v69 + 8);
            if (v71 != *(uint64_t **)(v70 + 16))
            {
              if (!*(unsigned char *)(v62 + 312)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              if (*(char *)(v62 + 127) < 0)
              {
                if (!*(void *)(v62 + 112)) {
                  goto LABEL_167;
                }
              }
              else if (!*(unsigned char *)(v62 + 127))
              {
                goto LABEL_167;
              }
              uint64_t v72 = *v71;
              std::basic_string<char16_t>::size_type v73 = *(unsigned int *)(v72 + 20);
              std::basic_string<char16_t>::size_type v74 = *(unsigned int *)(v72 + 8);
              ICUStringOperations::toU16String((std::basic_string<char16_t> *)__p, v61);
              if (!*(unsigned char *)(v62 + 312)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              ICUStringOperations::toU16String(&v110, (uint64_t *)(v62 + 104));
              unint64_t v76 = (void *)BYTE7(v104);
              char v77 = BYTE7(v104);
              if (SBYTE7(v104) < 0) {
                unint64_t v76 = __p[1];
              }
              if ((unint64_t)v76 >= v74)
              {
                std::basic_string<char16_t>::basic_string(&v107, (const std::basic_string<char16_t> *)__p, 0, v73, v75);
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  float32x2_t v91 = &v110;
                }
                else {
                  float32x2_t v91 = (std::basic_string<char16_t> *)v110.__r_.__value_.__r.__words[0];
                }
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::basic_string<char16_t>::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::basic_string<char16_t>::size_type size = v110.__r_.__value_.__l.__size_;
                }
                std::basic_string<char16_t>::append(&v107, (const std::basic_string<char16_t>::value_type *)v91, size);
                std::basic_string<char16_t> v108 = v107;
                memset(&v107, 0, sizeof(v107));
                std::basic_string<char16_t>::basic_string(&v106, (const std::basic_string<char16_t> *)__p, v74, 0xFFFFFFFFFFFFFFFFLL, v93);
                if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v94 = &v106;
                }
                else {
                  unint64_t v94 = (std::basic_string<char16_t> *)v106.__r_.__value_.__r.__words[0];
                }
                if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::basic_string<char16_t>::size_type v95 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::basic_string<char16_t>::size_type v95 = v106.__r_.__value_.__l.__size_;
                }
                std::basic_string<char16_t>::append(&v108, (const std::basic_string<char16_t>::value_type *)v94, v95);
                std::basic_string<char16_t> v109 = v108;
                memset(&v108, 0, sizeof(v108));
                if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v106.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v108.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                ICUStringOperations::toString((std::string *)&v108, (uint64_t **)&v109);
                uint64_t v96 = a3[5];
                if (!v96) {
                  operator new();
                }
                if (*(char *)(v96 + 23) < 0) {
                  operator delete(*(void **)v96);
                }
                long long v97 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
                *(void *)(v96 + 16) = *((void *)&v108.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v96 = v97;
                if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v109.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
                if ((SBYTE7(v104) & 0x80000000) == 0) {
                  goto LABEL_167;
                }
              }
              else
              {
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v110.__r_.__value_.__l.__data_);
                  char v77 = BYTE7(v104);
                }
                if ((v77 & 0x80) == 0) {
                  goto LABEL_167;
                }
              }
              operator delete(__p[0]);
            }
          }
        }
        else
        {
          if (v66 != 8) {
            goto LABEL_146;
          }
LABEL_145:
          if (*v65 != 0x73746361746E6F43) {
            goto LABEL_146;
          }
        }
      }
    }
LABEL_167:
    MEMORY[0x1CB786420](&buf);
    if (v101 != (void *)v100)
    {
      marrs::mrr::mr::MRMatchingResult::toMatchingSpan((uint64_t)&buf, v100, (void *)(a2 + 72), a2 + 152);
      PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan&>();
    }
  }
  uint64_t v78 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"MR Response", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(void *)(buf - 24)));
    size_t v79 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Mentions in MR Response", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(void *)(buf - 24)));
    long long v80 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    long long v81 = (const sirinluinternal::MatchingSpan **)a3[1];
    for (uint64_t j = (const sirinluinternal::MatchingSpan **)a3[2]; v81 != j; ++v81)
    {
      marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)__p, *v81);
      if ((SBYTE7(v104) & 0x80u) == 0) {
        uint64_t v83 = __p;
      }
      else {
        uint64_t v83 = (void **)__p[0];
      }
      if ((SBYTE7(v104) & 0x80u) == 0) {
        uint64_t v84 = BYTE7(v104);
      }
      else {
        uint64_t v84 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)v83, v84);
      if (SBYTE7(v104) < 0) {
        operator delete(__p[0]);
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)"Rewritten utterance - ", 22);
    unint64_t v85 = (long long *)a3[5];
    if (v85)
    {
      if (*((char *)v85 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v85, *((void *)v85 + 1));
      }
      else
      {
        long long v86 = *v85;
        *(void *)&long long v104 = *((void *)v85 + 2);
        *(_OWORD *)std::string __p = v86;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    }
    if ((SBYTE7(v104) & 0x80u) == 0) {
      uint64_t v87 = __p;
    }
    else {
      uint64_t v87 = (void **)__p[0];
    }
    if ((SBYTE7(v104) & 0x80u) == 0) {
      uint64_t v88 = BYTE7(v104);
    }
    else {
      uint64_t v88 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)v87, v88);
    std::ios_base::getloc((const std::ios_base *)((char *)&buf + *(void *)(buf - 24)));
    uint64_t v89 = std::locale::use_facet((const std::locale *)&v110, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
    std::locale::~locale((std::locale *)&v110);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v104) < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    *(void *)&long long buf = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&buf + *(void *)(buf - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&buf + 1) = MEMORY[0x1E4FBA470] + 16;
    if (v117 < 0) {
      operator delete(v116);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CB786D60](v118);
    uint64_t v90 = __p;
    if (SBYTE7(v104) < 0) {
      uint64_t v90 = (void **)__p[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v90;
    _os_log_impl(&dword_1C9555000, v78, OS_LOG_TYPE_DEBUG, "Develop: MR Model Response - %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v104) < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)&long long buf = &v100;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1C95D7864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::locale a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a55 < 0) {
    operator delete(a50.__locale_);
  }
  if (a20 < 0) {
    operator delete(a15.__locale_);
  }
  MEMORY[0x1CB786420](&a57);
  a43 = &a12;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__emplace_back_slow_path<std::vector<marrs::mrr::mr::MRMatchingResult>&>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  uint64_t v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  BOOL v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__init_with_size[abi:ne180100]<marrs::mrr::mr::MRMatchingResult*,marrs::mrr::mr::MRMatchingResult*>((uint64_t)v8, *a2, a2[1], 0x82FA0BE82FA0BE83 * ((a2[1] - *a2) >> 3));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  uint8x8_t v12 = (void *)*a1;
  unint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *unint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  int v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  BOOL v19 = v15;
  uint64_t v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1C95D7B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<marrs::mrr::mr::MRMatchingResult>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  os_signpost_id_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash,marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator,std::allocator<marrs::mrr::mr::MRMatchingResult>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

unint64_t marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDHash::operator()(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    os_signpost_id_t v1 = (char *)(a1 + 152);
    if (*(char *)(a1 + 175) >= 0)
    {
      uint64_t v2 = *(unsigned __int8 *)(a1 + 175);
    }
    else
    {
      os_signpost_id_t v1 = *(char **)(a1 + 152);
      uint64_t v2 = *(void *)(a1 + 160);
    }
    if (v2)
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *v1++;
        unint64_t v3 = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3);
        --v2;
      }
      while (v2);
      unint64_t v5 = 0xC6A4A7935BD1E995 * v3;
    }
    else
    {
      unint64_t v5 = 0;
    }
    unint64_t v6 = 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 96)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 96)) >> 47))) ^ (0x35A98F4D286A90B9 * (v5 ^ (v5 >> 47)) + 3864292196u));
  }
  else
  {
    unint64_t v6 = 0x8FCD151130102815;
  }
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 76)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 76)) >> 47))) ^ v6)) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 72)) ^ ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 72)) >> 47))));
}

BOOL marrs::mrr::mr::MRMatchingResult::MentionAndEntityIDComparator::operator()(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
    return 0;
  }
  BOOL v2 = *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72) || *(unsigned char *)(a1 + 312) == 0;
  if (v2 || *(unsigned char *)(a2 + 312) == 0) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 175);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 175);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 160);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 175);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 160);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 152);
  unint64_t v11 = *(unsigned __int8 **)(a2 + 152);
  uint64_t v9 = (unsigned __int8 *)(a2 + 152);
  uint64_t v10 = v11;
  if (v7 < 0) {
    uint64_t v9 = v10;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v8, v9, *(void *)(a1 + 160)) == 0;
  }
  BOOL result = 1;
  if (v4)
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<marrs::mrr::mr::MRMatchingResult,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  os_signpost_id_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::destroy[abi:ne180100]((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<std::vector<marrs::mrr::mr::MRMatchingResult>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::__emplace_unique_key_args<sirinluinternal::MatchingSpan,std::piecewise_construct_t const&,std::tuple<sirinluinternal::MatchingSpan const&>,std::tuple<>>(uint64_t a1, sirinluinternal::MatchingSpan *this, void *a3)
{
  unint64_t v6 = sirinluinternal::MatchingSpan::hash_value(this);
  unint64_t v7 = v6;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (sirinluinternal::MatchingSpan::operator==()) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int64x2_t v14 = (void *)(a1 + 16);
  int v15 = (char *)operator new(0x98uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = v7;
  MEMORY[0x1CB786400](v15 + 16, *a3);
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  char v38 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v22 = operator new(8 * *(void *)&prime);
          unint64_t v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v14;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *uint64_t v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                uint64_t v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (void *)v37[0];
  if (v33)
  {
    *(void *)v37[0] = *v33;
LABEL_72:
    *unint64_t v33 = i;
    goto LABEL_73;
  }
  *(void *)v37[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8) {
        v34 %= v8;
      }
    }
    else
    {
      v34 &= v8 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  v37[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return i;
}

void sub_1C95D8324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::__unordered_map_hasher<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,true>,std::__unordered_map_equal<sirinluinternal::MatchingSpan,std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,std::equal_to<sirinluinternal::MatchingSpan>,std::hash<sirinluinternal::MatchingSpan>,true>,std::allocator<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>>>::~__hash_table(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      BOOL v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<marrs::mrr::mr::MRMatchingResult>::__insert_with_size[abi:ne180100]<std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>,std::__wrap_iter<marrs::mrr::mr::MRMatchingResult const*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  unint64_t v7 = a2;
  uint8x8_t v9 = a1 + 2;
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[1];
  if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v10 - v11) >> 3)) >= a5)
  {
    uint64_t v19 = v11 - (void)a2;
    if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)(v11 - (void)a2) >> 3)) >= a5)
    {
      uint64_t v21 = a3 + 344 * a5;
    }
    else
    {
      uint64_t v21 = a3 + 8 * ((uint64_t)(v11 - (void)a2) >> 3);
      if (v21 == a4)
      {
        uint64_t v23 = a1[1];
      }
      else
      {
        uint64_t v22 = 0;
        do
        {
          std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>((void *)(v11 + v22), v21 + v22);
          v22 += 344;
        }
        while (v21 + v22 != a4);
        uint64_t v23 = v11 + v22;
      }
      a1[1] = v23;
      if (v19 < 1) {
        return;
      }
    }
    std::vector<marrs::mrr::mr::MRMatchingResult>::__move_range((uint64_t)a1, (uint64_t)v7, v11, (uint64_t)v7 + 344 * a5);
    for (; v6 != v21; unint64_t v7 = (__n128 *)((char *)v7 + 344))
    {
      sirinluinternal::MatchingSpan::operator=();
      v7[5].n128_u32[2] = *(_DWORD *)(v6 + 88);
      std::__optional_storage_base<marrs::mrr::mr::MRREntity,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<marrs::mrr::mr::MRREntity,false> const&>((marrs::mrr::mr::MRREntity *)&v7[6], (marrs::mrr::mr::MRREntity *)(v6 + 96));
      if (v7 != (__n128 *)v6) {
        std::vector<marrs::mrr::mr::MRResultType>::__assign_with_size[abi:ne180100]<marrs::mrr::mr::MRResultType*,marrs::mrr::mr::MRResultType*>((char *)&v7[20], *(char **)(v6 + 320), *(void *)(v6 + 328), (uint64_t)(*(void *)(v6 + 328) - *(void *)(v6 + 320)) >> 2);
      }
      v6 += 344;
    }
  }
  else
  {
    uint64_t v12 = *a1;
    unint64_t v13 = a5 - 0x7D05F417D05F417DLL * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 > 0xBE82FA0BE82FA0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x82FA0BE82FA0BE83 * (((uint64_t)a2 - v12) >> 3);
    unint64_t v15 = 0x82FA0BE82FA0BE83 * ((v10 - v12) >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= v13) {
      uint64_t v16 = v13;
    }
    if (v15 >= 0x5F417D05F417D0) {
      unint64_t v17 = 0xBE82FA0BE82FA0;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v30 = v9;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<marrs::mrr::mr::MRMatchingResult>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v24 = (void *)(v17 + 344 * v14);
    v27[0] = v17;
    v27[1] = v24;
    unint64_t v28 = v24;
    unint64_t v29 = v17 + 344 * v18;
    uint64_t v25 = 344 * a5;
    unint64_t v26 = &v24[43 * a5];
    do
    {
      std::allocator<marrs::mrr::mr::MRMatchingResult>::construct[abi:ne180100]<marrs::mrr::mr::MRMatchingResult,marrs::mrr::mr::MRMatchingResult const&>(v24, v6);
      v24 += 43;
      v6 += 344;
      v25 -= 344;
    }
    while (v25);
    unint64_t v28 = v26;
    std::vector<marrs::mrr::mr::MRMatchingResult>::__swap_out_circular_buffer(a1, v27, v7);
    std::__split_buffer<marrs::mrr::mr::MRMatchingResult>::~__split_buffer((uint64_t)v27);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>(uint64_t a1)
{
  os_signpost_id_t v1 = (void **)(a1 + 88);
  BOOL v2 = (void **)(a1 + 112);
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v2);
  BOOL v2 = v1;
  std::vector<marrs::mrr::mr::MRMatchingResult>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1CB786420);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<sirinluinternal::MatchingSpan,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  os_signpost_id_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<sirinluinternal::MatchingSpan const,std::pair<std::vector<marrs::mrr::mr::MRMatchingResult>,std::vector<marrs::mrr::mr::MRMatchingResult>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n, std::allocator<char16_t> *__a)
{
  uint64_t v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_string<char16_t>::size_type size = __str->__r_.__value_.__l.__size_;
    if (size < __pos) {
      goto LABEL_18;
    }
    uint64_t v6 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::basic_string<char16_t>::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos) {
LABEL_18:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_string<char16_t>::size_type v9 = size - __pos;
  if (v9 >= __n) {
    std::basic_string<char16_t>::size_type v10 = __n;
  }
  else {
    std::basic_string<char16_t>::size_type v10 = v9;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0xB)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v10 | 3) != 0xB) {
      uint64_t v12 = v10 | 3;
    }
    unint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v11;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v10;
    unint64_t v11 = this;
    if (!v10) {
      goto LABEL_17;
    }
  }
  memmove(v11, (char *)v6 + 2 * __pos, 2 * v10);
LABEL_17:
  *((_WORD *)v11 + v10) = 0;
  return this;
}

uint64_t marrs::mrr::mr::MRREntity::getDebugDescription(marrs::mrr::mr::MRREntity *this, int *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"MRREntity:\n", 11);
  uint64_t v3 = qword_1EBC84480;
  if (!qword_1EBC84480) {
    goto LABEL_11;
  }
  int v4 = *a2;
  uint64_t v5 = &qword_1EBC84480;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < v4;
    if (v6 >= v4) {
      unint64_t v8 = (uint64_t *)v3;
    }
    else {
      unint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = (uint64_t *)v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != &qword_1EBC84480 && v4 >= *((_DWORD *)v5 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  entityType - ", 15);
    uint64_t v57 = (const char *)v5[5];
    size_t v58 = strlen(v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v57, v58);
    std::basic_string<char16_t>::size_type v9 = "\n";
    uint64_t v10 = 1;
  }
  else
  {
LABEL_11:
    std::basic_string<char16_t>::size_type v9 = "  entityType - Unknown key in EntityTypeStr \n";
    uint64_t v10 = 45;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  entityValue - ", 16);
  int v11 = *((char *)a2 + 31);
  if (v11 >= 0) {
    uint64_t v12 = (uint64_t)(a2 + 2);
  }
  else {
    uint64_t v12 = *((void *)a2 + 1);
  }
  if (v11 >= 0) {
    uint64_t v13 = *((unsigned __int8 *)a2 + 31);
  }
  else {
    uint64_t v13 = *((void *)a2 + 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  entityId - ", 13);
  int v14 = *((char *)a2 + 79);
  if (v14 >= 0) {
    uint64_t v15 = (uint64_t)(a2 + 14);
  }
  else {
    uint64_t v15 = *((void *)a2 + 7);
  }
  if (v14 >= 0) {
    uint64_t v16 = *((unsigned __int8 *)a2 + 79);
  }
  else {
    uint64_t v16 = *((void *)a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  appBundleId - ", 16);
  int v17 = *((char *)a2 + 55);
  if (v17 >= 0) {
    uint64_t v18 = (uint64_t)(a2 + 8);
  }
  else {
    uint64_t v18 = *((void *)a2 + 4);
  }
  if (v17 >= 0) {
    uint64_t v19 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    uint64_t v19 = *((void *)a2 + 5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  ", 2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"BoundingBox: [x:", 16);
  unint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", y:", 4);
  uint64_t v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", width:", 8);
  uint64_t v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", height:", 9);
  uint64_t v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
  std::stringbuf::str();
  v70.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
  std::string::size_type v62 = v70.__r_.__value_.__r.__words[0];
  std::string::size_type v61 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(void *)(v70.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v61;
  v70.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
  if (v72 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB786D60](v73);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &v65;
  }
  else {
    uint64_t v24 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v65.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v24, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  saliencyScore - ", 18);
  unint64_t v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  Index from entities in request - ", 35);
  uint8x8_t v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  uint64_t v28 = qword_1EBC84498;
  if (!qword_1EBC84498) {
    goto LABEL_50;
  }
  int v29 = a2[1];
  uint64_t v30 = &qword_1EBC84498;
  do
  {
    int v31 = *(_DWORD *)(v28 + 32);
    BOOL v32 = v31 < v29;
    if (v31 >= v29) {
      unint64_t v33 = (uint64_t *)v28;
    }
    else {
      unint64_t v33 = (uint64_t *)(v28 + 8);
    }
    if (!v32) {
      uint64_t v30 = (uint64_t *)v28;
    }
    uint64_t v28 = *v33;
  }
  while (*v33);
  if (v30 != &qword_1EBC84498 && v29 >= *((_DWORD *)v30 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  Source of entity - ", 21);
    unint64_t v59 = (const char *)v30[5];
    size_t v60 = strlen(v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v59, v60);
    unint64_t v34 = "\n";
    uint64_t v35 = 1;
  }
  else
  {
LABEL_50:
    unint64_t v34 = "  Source of entity - Unknown key in EntitySourceStrMap \n";
    uint64_t v35 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v34, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  Surroundingtexts to the entity - ", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  unint64_t v36 = (long long *)*((void *)a2 + 14);
  for (uint64_t i = (long long *)*((void *)a2 + 15); v36 != i; v36 = (long long *)((char *)v36 + 40))
  {
    if (*((char *)v36 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v36, *((void *)v36 + 1));
    }
    else
    {
      long long v38 = *v36;
      v65.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v38;
    }
    long long v66 = *(long long *)((char *)v36 + 24);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"SurroundingText: [text: ", 24);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v39 = &v65;
    }
    else {
      uint64_t v39 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v65.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)v39, v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"; BoundingBox: [x:", 18);
    uint64_t v41 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", y:", 4);
    unint64_t v42 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", width:", 8);
    unint64_t v43 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", height:", 9);
    unint64_t v44 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] ]", 3);
    std::stringbuf::str();
    v70.__r_.__value_.__r.__words[0] = v62;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(void *)(v62 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v61;
    v70.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
    if (v72 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CB786D60](v73);
    if ((v64 & 0x80u) == 0) {
      uint8x8_t v45 = v63;
    }
    else {
      uint8x8_t v45 = (void **)v63[0];
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v46 = v64;
    }
    else {
      uint64_t v46 = (uint64_t)v63[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
    if ((char)v64 < 0) {
      operator delete(v63[0]);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"  Protocols to the entity - ", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  unint64_t v47 = (long long *)*((void *)a2 + 24);
  for (j = (long long *)*((void *)a2 + 25); v47 != j; unint64_t v47 = (long long *)((char *)v47 + 24))
  {
    if (*((char *)v47 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v47, *((void *)v47 + 1));
    }
    else
    {
      long long v49 = *v47;
      v70.__r_.__value_.__r.__words[2] = *((void *)v47 + 2);
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v49;
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v50 = &v70;
    }
    else {
      unint64_t v50 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = v70.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v50, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"groupId - ", 10);
  int v52 = *((char *)a2 + 159);
  if (v52 >= 0) {
    uint64_t v53 = (uint64_t)(a2 + 34);
  }
  else {
    uint64_t v53 = *((void *)a2 + 17);
  }
  if (v52 >= 0) {
    uint64_t v54 = *((unsigned __int8 *)a2 + 159);
  }
  else {
    uint64_t v54 = *((void *)a2 + 18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v53, v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"seqNum - ", 9);
  unint64_t v55 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
  std::stringbuf::str();
  v67[0] = v62;
  *(void *)((char *)v67 + *(void *)(v62 - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = v61;
  v67[1] = MEMORY[0x1E4FBA470] + 16;
  if (v68 < 0) {
    operator delete((void *)v67[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB786D60](&v69);
}

void sub_1C95D90B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<sirinluinternal::MatchingSpan,std::hash<sirinluinternal::MatchingSpan>,std::equal_to<sirinluinternal::MatchingSpan>,std::allocator<sirinluinternal::MatchingSpan>>::~__hash_table(uint64_t a1)
{
  BOOL v2 = *(void (****)(void))(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      (*v2[2])();
      operator delete(v2);
      BOOL v2 = (void (***)(void))v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<sirinluinternal::MatchingSpan,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<sirinluinternal::MatchingSpan,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  os_signpost_id_t v1 = *(void (****)(void))a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v1[2])();
    }
    operator delete(v1);
  }
}

xpc_object_t ___ZNK5marrs3mrr2mr14MROrchestrator15doCoreAnalyticsENS1_12MRResultTypeE_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3 > 3) {
      int v4 = "NO_MR_TRIGGERED";
    }
    else {
      int v4 = off_1E6599C18[v3];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v4);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v2, "MrResolverType", (const char *)v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

void sub_1C95D92E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<marrs::mrr::mr::EntityType,double>,std::__map_value_compare<marrs::mrr::mr::EntityType,std::__value_type<marrs::mrr::mr::EntityType,double>,std::less<marrs::mrr::mr::EntityType>,true>,std::allocator<std::__value_type<marrs::mrr::mr::EntityType,double>>>::__emplace_unique_key_args<marrs::mrr::mr::EntityType,std::piecewise_construct_t const&,std::tuple<marrs::mrr::mr::EntityType const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    std::basic_string<char16_t>::size_type v9 = (uint64_t *)v7;
    BOOL v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *BOOL v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *int v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  BOOL v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        int v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, a2)) {
        return v7;
      }
      int v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v11 = operator new(0x88uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    sirinluexternal::EntityCandidate::EntityCandidate((sirinluexternal::EntityCandidate *)(v11 + 7));
    char v17 = 1;
    *int v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    uint64_t *v8 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    int v14 = v11;
    if (v13)
    {
      *a1 = v13;
      int v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1C95D9504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = *a1 + 8;
  if ((uint64_t *)v6 != v5
    && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
  {
    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v5 + 4, a2))
    {
      uint64_t v22 = v5;
      uint64_t v23 = v5;
      uint64_t v12 = &v22;
      if (v5) {
        goto LABEL_34;
      }
LABEL_30:
      uint64_t v5 = v23;
      goto LABEL_31;
    }
    uint64_t v10 = v5[1];
    if (v10)
    {
      int v11 = (uint64_t *)v5[1];
      do
      {
        uint64_t v12 = (uint64_t **)v11;
        int v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      uint64_t v15 = (uint64_t **)v5;
      do
      {
        uint64_t v12 = (uint64_t **)v15[2];
        BOOL v14 = *v12 == (uint64_t *)v15;
        uint64_t v15 = v12;
      }
      while (!v14);
    }
    if (v12 == (uint64_t **)v6
      || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v12 + 4))
    {
      if (v10)
      {
        uint64_t v23 = (uint64_t *)v12;
      }
      else
      {
        uint64_t v23 = v5;
        uint64_t v12 = (uint64_t **)(v5 + 1);
      }
LABEL_29:
      uint64_t v5 = *v12;
      if (*v12) {
        goto LABEL_34;
      }
      goto LABEL_30;
    }
LABEL_28:
    uint64_t v12 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v4, &v23, a2);
    goto LABEL_29;
  }
  uint64_t v7 = *v5;
  int v8 = v5;
  if (*(uint64_t **)v4 != v5)
  {
    if (v7)
    {
      std::basic_string<char16_t>::size_type v9 = (uint64_t *)*v5;
      do
      {
        int v8 = v9;
        std::basic_string<char16_t>::size_type v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = v5;
      do
      {
        int v8 = (uint64_t *)v13[2];
        BOOL v14 = *v8 == (void)v13;
        uint64_t v13 = v8;
      }
      while (v14);
    }
    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8 + 4, a2)) {
      goto LABEL_28;
    }
  }
  if (v7)
  {
    uint64_t v23 = v8;
    uint64_t v12 = (uint64_t **)(v8 + 1);
    goto LABEL_29;
  }
  uint64_t v23 = v5;
  uint64_t v12 = (uint64_t **)v5;
LABEL_31:
  uint64_t v16 = v5;
  uint64_t v5 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v5 + 2) = *(_OWORD *)a2;
  v5[6] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t *v5 = 0;
  v5[1] = 0;
  v5[2] = (uint64_t)v16;
  *uint64_t v12 = v5;
  uint64_t v17 = **(void **)v4;
  uint64_t v18 = v5;
  if (v17)
  {
    *(void *)uint64_t v4 = v17;
    uint64_t v18 = *v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), v18);
  ++*(void *)(v4 + 16);
LABEL_34:
  a1[1] = (uint64_t)v5;
  uint64_t v19 = (uint64_t *)v5[1];
  if (v19)
  {
    do
    {
      unint64_t v20 = v19;
      uint64_t v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  else
  {
    do
    {
      unint64_t v20 = (uint64_t *)v5[2];
      BOOL v14 = *v20 == (void)v5;
      uint64_t v5 = v20;
    }
    while (!v14);
  }
  a1[1] = (uint64_t)v20;
  return a1;
}

uint64_t std::pair<std::string const,sirinluinternal::MatchingSpan>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string const,sirinluexternal::EntityCandidate>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluexternal::EntityCandidate>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluexternal::EntityCandidate>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::__map_value_compare<std::string,std::__value_type<std::string,sirinluinternal::MatchingSpan>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sirinluinternal::MatchingSpan>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        int v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, a2)) {
        return v7;
      }
      int v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    int v11 = operator new(0x90uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(v11 + 7));
    char v17 = 1;
    *int v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    uint64_t *v8 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    BOOL v14 = v11;
    if (v13)
    {
      *a1 = v13;
      BOOL v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1C95D9984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluinternal::MatchingSpan>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  os_signpost_id_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluinternal::MatchingSpan>,0>(uint64_t a1)
{
  MEMORY[0x1CB786420](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    xpc_object_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>(uint64_t a1)
{
  MEMORY[0x1CB786320](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    xpc_object_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,sirinluexternal::EntityCandidate>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  os_signpost_id_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,sirinluexternal::EntityCandidate>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_1C95D9B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95D9CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95D9D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95D9EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95D9FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DA16C(_Unwind_Exception *a1)
{
  *(void *)(v5 - 56) = v4;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 56));

  _Unwind_Resume(a1);
}

void sub_1C95DA388(_Unwind_Exception *a1)
{
  *(void *)(v3 - 64) = v2;
  std::vector<marrs::qr::orchestration::QRHypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 64));

  _Unwind_Resume(a1);
}

void sub_1C95DA45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DA490()
{
}

void sub_1C95DA538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DA56C()
{
}

void sub_1C95DA678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1C95DA968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DAB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DABD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DAC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DADD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DAFC8(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C95DB150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DB308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DB4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DB684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DB838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DBA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C95DBC3C(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

id MRRLoggerForCategory(int a1)
{
  if (MRRLoggerForCategory::onceToken != -1) {
    dispatch_once(&MRRLoggerForCategory::onceToken, &__block_literal_global_1345);
  }
  uint64_t v2 = (void *)MRRLoggerForCategory::logObjects[a1];
  return v2;
}

uint64_t __MRRLoggerForCategory_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.siri.marrs.mrr", "General");
  os_signpost_id_t v1 = (void *)MRRLoggerForCategory::logObjects[0];
  MRRLoggerForCategory::logObjects[0] = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.siri.marrs.mrr", "MD");
  uint64_t v3 = (void *)qword_1EA587BD0;
  qword_1EA587BD0 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.siri.marrs.mrr", "MR");
  uint64_t v5 = (void *)qword_1EA587BD8;
  qword_1EA587BD8 = (uint64_t)v4;

  qword_1EA587BE0 = (uint64_t)os_log_create("com.apple.siri.marrs.mrr", "SIGNPOSTS");
  return MEMORY[0x1F41817F8]();
}

uint64_t std::map<std::string,marrs::mrr::mr::EntityType>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<marrs::mrr::mr::EntitySource,char const*>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<marrs::mrr::mr::EntityType,char const*>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void marrs::mrr::mr::getUsoGraphProtoReader(marrs::mrr::mr *this)
{
  {
    if (v1)
    {
      SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v1);
      uint64_t v4 = *SharedUsoVocabManager;
      uint64_t v3 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
      if (v3)
      {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        marrs::mrr::mr::getUsoGraphProtoReader(void)::inst = v4;
        *(void *)algn_1EA587F38 = v3;
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      else
      {
        marrs::mrr::mr::getUsoGraphProtoReader(void)::inst = v4;
        *(void *)algn_1EA587F38 = 0;
      }
      __cxa_atexit((void (*)(void *))siri::ontology::UsoGraphProtoReader::~UsoGraphProtoReader, &marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, &dword_1C9555000);
    }
  }
}

void sub_1C95DBEF4(_Unwind_Exception *a1)
{
}

void siri::ontology::UsoGraphProtoReader::~UsoGraphProtoReader(siri::ontology::UsoGraphProtoReader *this)
{
  os_signpost_id_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 marrs::mrr::mr::getRectangleFromRRBoundingBox(uint64_t a1)
{
  float32x2_t v1 = vcvt_f32_f64(*(float64x2_t *)(a1 + 8));
  float32x2_t v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 24));
  int32x2_t v3 = vceqz_f32(v2);
  result.n128_u64[0] = (unint64_t)v2;
  result.n128_u64[1] = __PAIR64__(v1.u32[0], v1.u32[1]);
  if (vand_s8((int8x8_t)v3, (int8x8_t)vdup_lane_s32(v3, 1)).u8[0])
  {
    int32x2_t v5 = vceqz_f32(v1);
    if (vand_s8((int8x8_t)vdup_lane_s32(v5, 1), (int8x8_t)v5).u8[0])
    {
      uint64_t v6 = MRRLoggerForCategory(2);
      BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      __n128 result = (__n128)xmmword_1C95E0EB0;
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1C9555000, v6, OS_LOG_TYPE_ERROR, "Received a bounding box with all zeroes, setting it to default values of 0.1, 0.1, 1, 1", buf, 2u);
        return (__n128)xmmword_1C95E0EB0;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<marrs::mrr::mr::SurroundingText>::~__split_buffer(uint64_t a1)
{
  int32x2_t v3 = *(void ***)(a1 + 8);
  float32x2_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      float32x2_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1CB786850]();
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

uint64_t std::set<int>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t marrs::mrr::mr::mapMediaNodeToMRREntityType(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = siri::ontology::oname::graph::ontology_init::Argument_playbackState((siri::ontology::oname::graph::ontology_init *)a1);
  int USONodeIndex = (siri::ontology::oname::graph::ontology_init *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(v4 + 36));
  if (USONodeIndex)
  {
    int v6 = *((_DWORD *)USONodeIndex + 5);
    uint64_t v7 = siri::ontology::oname::graph::ontology_init::Argument_definedValue(USONodeIndex);
    int USONodeIndex = (siri::ontology::oname::graph::ontology_init *)marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v6, *(_DWORD *)(v7 + 36));
    if (USONodeIndex != -1)
    {
      uint64_t v8 = *(void *)(a1 + 80);
      if (USONodeIndex >= (unint64_t)((*(void *)(a1 + 88) - v8) >> 3)) {
        goto LABEL_26;
      }
      uint64_t v9 = *(void *)(v8 + 8 * USONodeIndex);
      int USONodeIndex = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PlaybackState_Paused(USONodeIndex);
      if (*((_DWORD *)USONodeIndex + 9) == *(_DWORD *)(v9 + 72))
      {
        uint64_t v10 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          LOWORD(v26[0]) = 0;
          int v11 = "Media entity is paused skipping";
          uint64_t v12 = v10;
          os_log_type_t v13 = OS_LOG_TYPE_INFO;
LABEL_14:
          uint32_t v23 = 2;
LABEL_15:
          _os_log_impl(&dword_1C9555000, v12, v13, v11, (uint8_t *)v26, v23);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
    }
  }
  uint64_t v14 = siri::ontology::oname::graph::ontology_init::Argument_mediaItemType(USONodeIndex);
  uint64_t v15 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(v14 + 36));
  if (v15)
  {
    int v16 = *((_DWORD *)v15 + 5);
    uint64_t v17 = siri::ontology::oname::graph::ontology_init::Argument_definedValue((siri::ontology::oname::graph::ontology_init *)v15);
    uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)marrs::mrr::mr::findUSONodeIndex(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v16, *(_DWORD *)(v17 + 36));
    if (v18 != -1)
    {
      uint64_t v19 = *(void *)(a1 + 80);
      if (v18 < (unint64_t)((*(void *)(a1 + 88) - v19) >> 3))
      {
        int v20 = *(_DWORD *)(*(void *)(v19 + 8 * v18) + 72);
        uint64_t v21 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Song(v18);
        if (*((_DWORD *)v21 + 9) == v20) {
          return 8;
        }
        uint64_t v24 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Artist(v21);
        if (*((_DWORD *)v24 + 9) == v20) {
          return 7;
        }
        uint64_t v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItemType_Album(v24);
        if (*((_DWORD *)v25 + 9) == v20) {
          return 9;
        }
        if (*(_DWORD *)(siri::ontology::oname::graph::ontology_init::common_MediaItemType_Video(v25) + 36) == v20) {
          return 10;
        }
        uint64_t v10 = MRRLoggerForCategory(2);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v26[0] = 67109120;
          v26[1] = v20;
          int v11 = "%d mediaItemTypeNodeId not supported";
          uint64_t v12 = v10;
          os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
          uint32_t v23 = 8;
          goto LABEL_15;
        }
        goto LABEL_16;
      }
LABEL_26:
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
  }
  uint64_t v10 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v26[0]) = 0;
    int v11 = "unable to parse media entity";
    uint64_t v12 = v10;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    goto LABEL_14;
  }
LABEL_16:

  return 30;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  int32x2_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t marrs::mrr::mr::findUSONodeIndex(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  if (a2 == a1)
  {
LABEL_8:
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else
  {
    unint64_t v4 = a2 - a1;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (1)
    {
      uint64_t v5 = *a1;
      if (*(_DWORD *)(*(void *)(*a1 + 8) + 20) == a4 && (a3 == -1 || *(_DWORD *)(v5 + 16) == a3)) {
        break;
      }
      ++a1;
      if (!--v4) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = *(unsigned int *)(v5 + 20);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table((uint64_t)v8);
  return v6;
}

uint64_t marrs::mrr::mr::mapUserEntityHomeToMRREntityType(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2)
{
  uint64_t v4 = siri::ontology::oname::graph::ontology_init::Argument_names(a1);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(v4 + 36));
  if (!v5)
  {
    uint64_t v41 = MRRLoggerForCategory(2);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1C9555000, v41, OS_LOG_TYPE_DEBUG, "HomeAutomation entity parsing could not find names node descendant. Returning undefined MRR EntityType", buf, 2u);
    }

    return 30;
  }
  uint64_t v6 = (uint64_t *)*((void *)a1 + 7);
  unint64_t v7 = (uint64_t *)*((void *)a1 + 8);
  if (v6 == v7) {
    return 30;
  }
  int v8 = *((_DWORD *)v5 + 5);
  if (byte_1EBC842F7 >= 0) {
    uint64_t v9 = byte_1EBC842F7;
  }
  else {
    uint64_t v9 = unk_1EBC842E8;
  }
  if (byte_1EBC842F7 >= 0) {
    uint64_t v10 = &marrs::mrr::mr::homeKitEntityTypeString;
  }
  else {
    uint64_t v10 = (uint64_t *)marrs::mrr::mr::homeKitEntityTypeString;
  }
  int v11 = &marrs::mrr::mr::homeAutomationAccessoryNameString;
  if (byte_1EBC8433F >= 0) {
    uint64_t v12 = byte_1EBC8433F;
  }
  else {
    uint64_t v12 = unk_1EBC84330;
  }
  if (byte_1EBC8433F < 0) {
    int v11 = (uint64_t *)marrs::mrr::mr::homeAutomationAccessoryNameString;
  }
  __s2 = v11;
  os_log_type_t v13 = &marrs::mrr::mr::homeAutomationServiceNameString;
  uint64_t v14 = byte_1EBC84327;
  if (byte_1EBC84327 < 0) {
    uint64_t v14 = unk_1EBC84318;
  }
  uint64_t v47 = v14;
  if (byte_1EBC84327 < 0) {
    os_log_type_t v13 = (uint64_t *)marrs::mrr::mr::homeAutomationServiceNameString;
  }
  unint64_t v44 = v13;
  if (byte_1EBC8430F >= 0) {
    uint64_t v15 = byte_1EBC8430F;
  }
  else {
    uint64_t v15 = unk_1EBC84300;
  }
  if (byte_1EBC8430F >= 0) {
    int v16 = &marrs::mrr::mr::homeAutomationRoomString;
  }
  else {
    int v16 = (uint64_t *)marrs::mrr::mr::homeAutomationRoomString;
  }
  while (1)
  {
    uint64_t v17 = *v6;
    if (*(_DWORD *)(*v6 + 48) != v8) {
      goto LABEL_70;
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (!v18) {
      goto LABEL_70;
    }
    uint64_t v19 = *(unsigned __int8 **)(v18 + 8);
    if (!v19) {
      goto LABEL_70;
    }
    uint64_t v20 = v19[23];
    uint64_t v21 = (v20 & 0x80u) == 0 ? v19[23] : *((void *)v19 + 1);
    if (v21 != v9) {
      goto LABEL_70;
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v19, v10, *((void *)v19 + 1))) {
        goto LABEL_70;
      }
    }
    else if (v19[23])
    {
      uint64_t v22 = v10;
      while (*v19 == *(unsigned __int8 *)v22)
      {
        ++v19;
        uint64_t v22 = (uint64_t *)((char *)v22 + 1);
        if (!--v20) {
          goto LABEL_38;
        }
      }
      goto LABEL_70;
    }
LABEL_38:
    uint32_t v23 = *(unsigned __int8 **)(v17 + 32);
    if (!v23) {
      goto LABEL_70;
    }
    uint64_t v45 = v15;
    uint64_t v24 = v23[23];
    size_t v25 = *((void *)v23 + 1);
    if ((v24 & 0x80u) == 0) {
      uint64_t v26 = v23[23];
    }
    else {
      uint64_t v26 = *((void *)v23 + 1);
    }
    if (v26 != v12) {
      goto LABEL_49;
    }
    if ((v24 & 0x80) == 0)
    {
      if (!v23[23]) {
        return 20;
      }
      uint64_t v27 = __s2;
      uint64_t v28 = v23;
      uint64_t v29 = v23[23];
      while (*v28 == *(unsigned __int8 *)v27)
      {
        ++v28;
        uint64_t v27 = (uint64_t *)((char *)v27 + 1);
        if (!--v29) {
          return 20;
        }
      }
LABEL_49:
      unint64_t v42 = v10;
      unint64_t v43 = v16;
      uint64_t v30 = v12;
      if (v26 != v47) {
        goto LABEL_61;
      }
      if ((v24 & 0x80) == 0)
      {
        if (!v23[23]) {
          return 20;
        }
        int v31 = v44;
        BOOL v32 = v23;
        uint64_t v33 = v23[23];
        while (*v32 == *(unsigned __int8 *)v31)
        {
          ++v32;
          int v31 = (uint64_t *)((char *)v31 + 1);
          uint64_t result = 20;
          if (!--v33) {
            return result;
          }
        }
        goto LABEL_61;
      }
      uint64_t v35 = *(const void **)v23;
LABEL_60:
      size_t v37 = v25;
      int v38 = memcmp(v35, v44, v25);
      size_t v25 = v37;
      if (!v38) {
        return 20;
      }
      goto LABEL_61;
    }
    unint64_t v42 = v10;
    unint64_t v43 = v16;
    uint64_t v30 = v12;
    uint64_t v35 = *(const void **)v23;
    size_t v36 = *((void *)v23 + 1);
    if (!memcmp(*(const void **)v23, __s2, v25)) {
      return 20;
    }
    size_t v25 = v36;
    if (v36 == v47) {
      goto LABEL_60;
    }
LABEL_61:
    BOOL v39 = v26 == v45;
    uint64_t v15 = v45;
    uint64_t v12 = v30;
    uint64_t v10 = v42;
    int v16 = v43;
    if (!v39) {
      goto LABEL_70;
    }
    if ((v24 & 0x80) != 0) {
      break;
    }
    if (!v24) {
      return 21;
    }
    for (uint64_t i = v43; *v23 == *(unsigned __int8 *)i; uint64_t i = (uint64_t *)((char *)i + 1))
    {
      ++v23;
      if (!--v24) {
        return 21;
      }
    }
LABEL_70:
    if (++v6 == v7) {
      return 30;
    }
  }
  if (memcmp(*(const void **)v23, v43, v25)) {
    goto LABEL_70;
  }
  return 21;
}

uint64_t marrs::mrr::mr::mapCommonPersonToEligibleType(unint64_t *a1)
{
  uint64_t v2 = siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress((siri::ontology::oname::graph::ontology_init *)a1);
  if (std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a1, a1[1], *(_DWORD *)(v2 + 36)))
  {
    return 30;
  }
  else
  {
    return 14;
  }
}

std::string *marrs::mrr::mr::getStringNodeValueNluGraph(std::string *this, const sirinluexternal::UsoGraph *a2, int a3, int a4, int a5)
{
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(this, "");
  if (a3 != -1
    || (uint64_t result = (std::string *)marrs::mrr::mr::findUSONodeIndex(*((uint64_t **)a2 + 4), *((uint64_t **)a2 + 5), a4, a5),
        a3 = (int)result,
        result != -1))
  {
    uint64_t v11 = *((void *)a2 + 10);
    if (a3 >= (unint64_t)((*((void *)a2 + 11) - v11) >> 3)) {
      std::vector<marrs::mrr::mr::MRREntity>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v12 = *(void *)(v11 + 8 * a3);
    int v13 = *(_DWORD *)(v12 + 72);
    uint64_t result = (std::string *)siri::ontology::oname::graph::ontology_init::primitive_String((siri::ontology::oname::graph::ontology_init *)result);
    if (v13 == HIDWORD(result[1].__r_.__value_.__r.__words[1]))
    {
      uint64_t v14 = *(void *)(v12 + 48);
      if (v14)
      {
        uint64_t v15 = *(const std::string **)(v14 + 8);
        if (v15) {
          return std::string::operator=(this, v15);
        }
      }
    }
  }
  return result;
}

void sub_1C95DC8A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marrs::mrr::mr::mapSearchObjectNodeToMRREntityType(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2)
{
  uint64_t v4 = siri::ontology::oname::graph::ontology_init::Argument_type(a1);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(v4 + 36));
  if (!v5) {
    return 25;
  }
  int v6 = *((_DWORD *)v5 + 5);
  uint64_t v7 = siri::ontology::oname::graph::ontology_init::Argument_name((siri::ontology::oname::graph::ontology_init *)v5);
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a1, -1, v6, *(_DWORD *)(v7 + 36));
  uint64_t v8 = qword_1EBC844C8;
  if (!qword_1EBC844C8) {
    goto LABEL_9;
  }
  uint64_t v9 = &qword_1EBC844C8;
  do
  {
    BOOL v10 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((void *)(v8 + 32), &__p);
    uint64_t v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      uint64_t v11 = (uint64_t *)v8;
      uint64_t v9 = (uint64_t *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v9 == &qword_1EBC844C8
    || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&__p, v9 + 4))
  {
LABEL_9:
    uint64_t v12 = 25;
  }
  else
  {
    uint64_t v12 = *((unsigned int *)v9 + 14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v12;
}

uint64_t marrs::mrr::mr::mapNodeIdToMRREntityType(siri::ontology::oname::graph::ontology_init *a1, siri::ontology::oname::graph::ontology_init *a2, unint64_t *a3)
{
  int v5 = (int)a1;
  int v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_EmailAddress(a1);
  if (*((_DWORD *)v6 + 9) == v5) {
    return 0;
  }
  uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PhoneNumber(v6);
  if (*((_DWORD *)v8 + 9) == v5) {
    return 1;
  }
  uint64_t v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_PostalAddress(v8);
  if (*((_DWORD *)v9 + 9) == v5) {
    return 2;
  }
  BOOL v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Uri(v9);
  if (*((_DWORD *)v10 + 9) == v5) {
    return 3;
  }
  uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_LocalisedString(v10);
  if (*((_DWORD *)v11 + 9) == v5) {
    return 4;
  }
  uint64_t v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_AppEntity(v11);
  if (*((_DWORD *)v12 + 9) == v5) {
    return 5;
  }
  int v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Photo(v12);
  if (*((_DWORD *)v13 + 9) == v5) {
    return 6;
  }
  uint64_t v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_SearchObject(v13);
  if (*((_DWORD *)v14 + 9) == v5)
  {
    return marrs::mrr::mr::mapSearchObjectNodeToMRREntityType(a2, (uint64_t)a3);
  }
  else
  {
    uint64_t v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_MediaItem(v14);
    if (*((_DWORD *)v15 + 9) == v5)
    {
      return marrs::mrr::mr::mapMediaNodeToMRREntityType((uint64_t)a2, (uint64_t)a3);
    }
    else
    {
      int v16 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_UserEntity(v15);
      if (*((_DWORD *)v16 + 9) == v5)
      {
        return marrs::mrr::mr::mapUserEntityHomeToMRREntityType(a2, (uint64_t)a3);
      }
      else
      {
        uint64_t v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Setting(v16);
        if (*((_DWORD *)v17 + 9) == v5)
        {
          return 22;
        }
        else
        {
          uint64_t v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Group(v17);
          if (*((_DWORD *)v18 + 9) == v5)
          {
            return 11;
          }
          else
          {
            uint64_t v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_LocalBusiness(v18);
            if (*((_DWORD *)v19 + 9) == v5)
            {
              return 12;
            }
            else
            {
              uint64_t v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Notification(v19);
              if (*((_DWORD *)v20 + 9) == v5)
              {
                return 13;
              }
              else
              {
                uint64_t v21 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Person(v20);
                if (*((_DWORD *)v21 + 9) == v5)
                {
                  return marrs::mrr::mr::mapCommonPersonToEligibleType(a3);
                }
                else
                {
                  uint64_t v22 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Announcement(v21);
                  if (*((_DWORD *)v22 + 9) == v5)
                  {
                    return 15;
                  }
                  else
                  {
                    uint32_t v23 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_DateTime(v22);
                    if (*((_DWORD *)v23 + 9) == v5)
                    {
                      return 16;
                    }
                    else
                    {
                      uint64_t v24 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Alarm(v23);
                      if (*((_DWORD *)v24 + 9) == v5)
                      {
                        return 17;
                      }
                      else
                      {
                        size_t v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_Timer(v24);
                        if (*((_DWORD *)v25 + 9) == v5)
                        {
                          return 18;
                        }
                        else
                        {
                          uint64_t v26 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_App(v25);
                          if (*((_DWORD *)v26 + 9) == v5)
                          {
                            return 23;
                          }
                          else if (*(_DWORD *)(siri::ontology::oname::graph::ontology_init::common_Window(v26) + 36) == v5)
                          {
                            return 24;
                          }
                          else
                          {
                            return 30;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void marrs::mrr::mr::getEntityDescendants(uint64_t *a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3 != -1)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4 != v5)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      BOOL v39 = a1 + 2;
      while (1)
      {
        uint64_t v11 = *(void *)(v5 + 8 * v10);
        if (*(_DWORD *)(v11 + 16) == a3) {
          break;
        }
LABEL_78:
        if (++v10 >= (unint64_t)((v4 - v5) >> 3)) {
          return;
        }
      }
      int v12 = *(_DWORD *)(v11 + 20);
      int v13 = *(_DWORD *)(*(void *)(v11 + 8) + 20);
      if (v8)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v3 = v13;
          if (v8 <= v13) {
            unint64_t v3 = v13 % v8;
          }
        }
        else
        {
          unint64_t v3 = (v8 - 1) & v13;
        }
        uint64_t v15 = *(void ***)(*a1 + 8 * v3);
        if (v15)
        {
          int v16 = *v15;
          if (*v15)
          {
            do
            {
              unint64_t v17 = v16[1];
              if (v17 == v13)
              {
                if (*((_DWORD *)v16 + 4) == v13) {
                  goto LABEL_77;
                }
              }
              else
              {
                if (v14.u32[0] > 1uLL)
                {
                  if (v17 >= v8) {
                    v17 %= v8;
                  }
                }
                else
                {
                  v17 &= v8 - 1;
                }
                if (v17 != v3) {
                  break;
                }
              }
              int v16 = (void *)*v16;
            }
            while (v16);
          }
        }
      }
      int v16 = operator new(0x18uLL);
      *int v16 = 0;
      v16[1] = v13;
      *((_DWORD *)v16 + 4) = v13;
      *((_DWORD *)v16 + 5) = 0;
      float v18 = (float)(unint64_t)(v9 + 1);
      float v19 = *((float *)a1 + 8);
      if (v8 && (float)(v19 * (float)v8) >= v18)
      {
LABEL_67:
        uint64_t v35 = *a1;
        size_t v36 = *(void **)(*a1 + 8 * v3);
        if (v36)
        {
          *int v16 = *v36;
        }
        else
        {
          *int v16 = *v39;
          *BOOL v39 = v16;
          *(void *)(v35 + 8 * v3) = v39;
          if (!*v16) {
            goto LABEL_76;
          }
          unint64_t v37 = *(void *)(*v16 + 8);
          if ((v8 & (v8 - 1)) != 0)
          {
            if (v37 >= v8) {
              v37 %= v8;
            }
          }
          else
          {
            v37 &= v8 - 1;
          }
          size_t v36 = (void *)(*a1 + 8 * v37);
        }
        *size_t v36 = v16;
LABEL_76:
        uint64_t v9 = a1[3] + 1;
        a1[3] = v9;
        uint64_t v5 = *(void *)(a2 + 32);
        uint64_t v4 = *(void *)(a2 + 40);
LABEL_77:
        *((_DWORD *)v16 + 5) = v12;
        goto LABEL_78;
      }
      BOOL v20 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v20 = 1;
      }
      unint64_t v21 = v20 | (2 * v8);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        int8x8_t prime = (int8x8_t)v22;
      }
      else {
        int8x8_t prime = (int8x8_t)v21;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v8 = a1[1];
      }
      if (*(void *)&prime > v8) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v8)
      {
        unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v8 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
        {
          unint64_t v30 = std::__next_prime(v30);
        }
        else
        {
          uint64_t v32 = 1 << -(char)__clz(v30 - 1);
          if (v30 >= 2) {
            unint64_t v30 = v32;
          }
        }
        if (*(void *)&prime <= v30) {
          int8x8_t prime = (int8x8_t)v30;
        }
        if (*(void *)&prime >= v8)
        {
          unint64_t v8 = a1[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v24 = operator new(8 * *(void *)&prime);
            size_t v25 = (void *)*a1;
            *a1 = (uint64_t)v24;
            if (v25) {
              operator delete(v25);
            }
            uint64_t v26 = 0;
            a1[1] = (uint64_t)prime;
            do
              *(void *)(*a1 + 8 * v26++) = 0;
            while (*(void *)&prime != v26);
            uint64_t v27 = (void *)*v39;
            if (*v39)
            {
              unint64_t v28 = v27[1];
              uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
              v29.i16[0] = vaddlv_u8(v29);
              if (v29.u32[0] > 1uLL)
              {
                if (v28 >= *(void *)&prime) {
                  v28 %= *(void *)&prime;
                }
              }
              else
              {
                v28 &= *(void *)&prime - 1;
              }
              *(void *)(*a1 + 8 * v28) = v39;
              uint64_t v33 = (void *)*v27;
              if (*v27)
              {
                do
                {
                  unint64_t v34 = v33[1];
                  if (v29.u32[0] > 1uLL)
                  {
                    if (v34 >= *(void *)&prime) {
                      v34 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v34 &= *(void *)&prime - 1;
                  }
                  if (v34 != v28)
                  {
                    if (!*(void *)(*a1 + 8 * v34))
                    {
                      *(void *)(*a1 + 8 * v34) = v27;
                      goto LABEL_58;
                    }
                    *uint64_t v27 = *v33;
                    *uint64_t v33 = **(void **)(*a1 + 8 * v34);
                    **(void **)(*a1 + 8 * v34) = v33;
                    uint64_t v33 = v27;
                  }
                  unint64_t v34 = v28;
LABEL_58:
                  uint64_t v27 = v33;
                  uint64_t v33 = (void *)*v33;
                  unint64_t v28 = v34;
                }
                while (v33);
              }
            }
            unint64_t v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          int v38 = (void *)*a1;
          *a1 = 0;
          if (v38) {
            operator delete(v38);
          }
          unint64_t v8 = 0;
          a1[1] = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v13) {
          unint64_t v3 = v13 % v8;
        }
        else {
          unint64_t v3 = v13;
        }
      }
      else
      {
        unint64_t v3 = (v8 - 1) & v13;
      }
      goto LABEL_67;
    }
  }
}

void sub_1C95DD0A8(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void marrs::mrr::mr::getPostalAddressEntityValueNluGraph(std::string *a1, const sirinluexternal::UsoGraph *a2, uint64_t *a3)
{
  int v6 = MRRLoggerForCategory(2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C9555000, v6, OS_LOG_TYPE_INFO, "Calling postal address optimized parser", (uint8_t *)&buf, 2u);
  }

  if (!a3[3])
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  uint64_t v8 = siri::ontology::oname::graph::ontology_init::Argument_value(v7);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v8 + 36));
  if (v9)
  {
    marrs::mrr::mr::getStringNodeValueNluGraph(a1, a2, *((_DWORD *)v9 + 5), -1, -1);
    return;
  }
  memset(&buf, 0, sizeof(buf));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)std::string::basic_string[abi:ne180100]<0>(a1, "");
  uint64_t v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::Argument_name(v10);
  int v12 = *((_DWORD *)v11 + 9);
  uint64_t v13 = siri::ontology::oname::graph::ontology_init::Argument_city(v11);
  uint8x8_t v14 = (int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v13 + 36));
  uint64_t v15 = siri::ontology::oname::graph::ontology_init::Argument_province((siri::ontology::oname::graph::ontology_init *)v14);
  int v16 = (int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v15 + 36));
  uint64_t v17 = siri::ontology::oname::graph::ontology_init::Argument_street((siri::ontology::oname::graph::ontology_init *)v16);
  float v18 = (int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v17 + 36));
  uint64_t v19 = siri::ontology::oname::graph::ontology_init::Argument_country((siri::ontology::oname::graph::ontology_init *)v18);
  uint64_t v53 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v19 + 36));
  uint64_t v20 = siri::ontology::oname::graph::ontology_init::Argument_postalCode((siri::ontology::oname::graph::ontology_init *)v53);
  unint64_t v21 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::find<int>(*a3, a3[1], *(_DWORD *)(v20 + 36));
  if (!v18)
  {
    int v22 = 0;
    goto LABEL_32;
  }
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a2, -1, v18[5], v12);
  std::string v56 = __p;
  int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v56.__r_.__value_.__l.__size_;
    if (!v56.__r_.__value_.__l.__size_) {
      goto LABEL_32;
    }
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_32;
    }
    std::string::size_type size = v56.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v24 = size;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if (v22 >= 0) {
      uint64_t v26 = &v56;
    }
    else {
      uint64_t v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v26, v24);
  }
  strcpy((char *)p_p + v24, ", ");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v27 = &__p;
  }
  else {
    uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_32:
  if (!v14)
  {
    int v29 = 0;
    goto LABEL_57;
  }
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a2, -1, v14[5], v12);
  std::string buf = __p;
  int v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
    if (!buf.__r_.__value_.__l.__size_) {
      goto LABEL_57;
    }
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_57;
    }
    std::string::size_type v30 = buf.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v31 = v30;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v31 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v32 = &__p;
  }
  else {
    uint64_t v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    if (v29 >= 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    memmove(v32, p_buf, v31);
  }
  *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 32;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v34 = &__p;
  }
  else {
    unint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v34, v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_57:
  if (!v16)
  {
    int v36 = 0;
    goto LABEL_82;
  }
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a2, -1, v16[5], v12);
  std::string v57 = __p;
  int v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v37 = v57.__r_.__value_.__l.__size_;
    if (!v57.__r_.__value_.__l.__size_) {
      goto LABEL_82;
    }
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_82;
    }
    std::string::size_type v37 = v57.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v38 = v37;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v38 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v39 = &__p;
  }
  else {
    BOOL v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v38)
  {
    if (v36 >= 0) {
      std::string::size_type v40 = &v57;
    }
    else {
      std::string::size_type v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    memmove(v39, v40, v38);
  }
  *(_WORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 32;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v41 = &__p;
  }
  else {
    uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v41, v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_82:
  if (!v21)
  {
    int v43 = 0;
LABEL_102:
    long long v49 = v53;
    goto LABEL_103;
  }
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a2, *((_DWORD *)v21 + 5), -1, -1);
  std::string v58 = __p;
  int v43 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v44 = __p.__r_.__value_.__l.__size_;
  }
  if (!v44) {
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v45 = &__p;
  }
  else {
    uint64_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v43 >= 0) {
    uint64_t v46 = &v58;
  }
  else {
    uint64_t v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  memmove(v45, v46, v44);
  *(_WORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 32;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v47 = &__p;
  }
  else {
    uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v47, v48);
  long long v49 = v53;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_103:
  if (!v49) {
    goto LABEL_116;
  }
  marrs::mrr::mr::getStringNodeValueNluGraph(&__p, a2, -1, *((_DWORD *)v49 + 5), v12);
  std::string v55 = __p;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v50 = v55.__r_.__value_.__l.__size_;
    if (!v55.__r_.__value_.__l.__size_)
    {
LABEL_115:
      operator delete(v55.__r_.__value_.__l.__data_);
      goto LABEL_116;
    }
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_116;
    }
    std::string::size_type v50 = v55.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v51 = &v55;
  }
  else {
    std::string::size_type v51 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v50;
  }
  std::string::append(a1, (const std::string::value_type *)v51, v52);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_115;
  }
LABEL_116:
  if (v22 < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((v36 & 0x80000000) == 0)
    {
LABEL_118:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_123;
    }
  }
  else if ((v36 & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_119:
    if ((v29 & 0x80000000) == 0) {
      return;
    }
LABEL_124:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
LABEL_123:
  operator delete(v58.__r_.__value_.__l.__data_);
  if (v29 < 0) {
    goto LABEL_124;
  }
}

void sub_1C95DD66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (*(char *)(v31 + 23) < 0) {
    operator delete(*(void **)v31);
  }
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
LABEL_5:
    if (v33 < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  operator delete(a23);
  if (v33 < 0)
  {
LABEL_6:
    operator delete(a27);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  if ((v32 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(a31);
  if ((v34 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(*(void **)(v36 - 112));
  goto LABEL_9;
}

void sub_1C95DD7A8()
{
}

void sub_1C95DD8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1CB786E50);
  }
  return result;
}

void sub_1C95DDA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

void sub_1C95DDB50(_Unwind_Exception *a1)
{
  void *v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);

  _Unwind_Resume(a1);
}

void sub_1C95DDC3C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);

  _Unwind_Resume(a1);
}

void sub_1C95DDCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString(marrs::mrr::MRRCPPPrintUtils *this, const sirinluinternal::MatchingSpan *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Matching Span:", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
  uint64_t v3 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  input - ", 10);
  uint64_t v4 = (long long *)*((void *)a2 + 4);
  if (v4)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      __p.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "NULL");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
  uint64_t v8 = std::locale::use_facet(&v34, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  label - ", 10);
  uint64_t v9 = (long long *)*((void *)a2 + 6);
  if (v9)
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "NULL");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v11, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
  uint64_t v13 = std::locale::use_facet(&v34, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  semanticValue - ", 18);
  uint8x8_t v14 = (long long *)*((void *)a2 + 7);
  if (v14)
  {
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v15 = *v14;
      __p.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "NULL");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &__p;
  }
  else {
    int v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v16, v17);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
  float v18 = std::locale::use_facet(&v34, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  start, end token indexes - ", 29);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
  uint64_t v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  unint64_t v21 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v22 = *((void *)a2 + 5);
  if (v22 && *(void *)(v22 + 16))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  mentionResolver model score - ", 32);
    uint32_t v23 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    size_t v24 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  USOGraph -", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)));
  size_t v25 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v26 = (const sirinluexternal::UsoGraph *)*((void *)a2 + 8);
  if (v26) {
    marrs::mrr::MRRCPPPrintUtils::getUsoGraphDotString((marrs::mrr::MRRCPPPrintUtils *)&__p, v26);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&__p, "NULL\n");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v27 = &__p;
  }
  else {
    uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v27, v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v31 + *(void *)(v31[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v31[1] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB786D60](&v33);
}

void sub_1C95DE42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

siri::ontology::UsoGraph *marrs::mrr::MRRCPPPrintUtils::getUsoGraphDotString(marrs::mrr::MRRCPPPrintUtils *this, const sirinluexternal::UsoGraph *a2)
{
  marrs::mrr::mr::getUsoGraphProtoReader(this);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((uint64_t *)&v5, (siri::ontology::UsoGraphProtoReader *)&marrs::mrr::mr::getUsoGraphProtoReader(void)::inst, a2);
  siri::ontology::UsoGraph::prettyPrint(v5);
  uint64_t result = v5;
  long long v5 = 0;
  if (result)
  {
    uint64_t v4 = MEMORY[0x1CB786850]();
    return (siri::ontology::UsoGraph *)MEMORY[0x1CB786E50](v4, 0x10A0C403D23BABBLL);
  }
  return result;
}

void sub_1C95DE51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t marrs::mrr::MRRCPPPrintUtils::getMdResponseString(marrs::mrr::MRRCPPPrintUtils *this, const sirinluinternalmention_detector::MentionDetectorResponse *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"MD Response", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[0] - 24)));
  uint64_t v3 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" Mentions in MD Response", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  long long v5 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v7 = (const sirinluinternal::MatchingSpan **)*((void *)a2 + 1);
  for (uint64_t i = (const sirinluinternal::MatchingSpan **)*((void *)a2 + 2); v7 != i; ++v7)
  {
    marrs::mrr::MRRCPPPrintUtils::getMatchingSpanString((marrs::mrr::MRRCPPPrintUtils *)__p, *v7);
    if ((v12 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v9 = v12;
    }
    else {
      uint64_t v9 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v8, v9);
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 2std::__tree<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<marrs::mrr::mr::VerbalPatternEntry>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CB786D60](&v15);
}

void sub_1C95DE7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_1C95DE82C()
{
  return MEMORY[0x1F40E3358]();
}

uint64_t sub_1C95DE83C()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_1C95DE84C()
{
  return MEMORY[0x1F40E3380]();
}

uint64_t sub_1C95DE85C()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1C95DE86C()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t sub_1C95DE87C()
{
  return MEMORY[0x1F40E4D58]();
}

uint64_t sub_1C95DE88C()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1C95DE89C()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1C95DE8AC()
{
  return MEMORY[0x1F41554C0]();
}

uint64_t sub_1C95DE8BC()
{
  return MEMORY[0x1F41554D8]();
}

uint64_t sub_1C95DE8CC()
{
  return MEMORY[0x1F4155CE0]();
}

uint64_t sub_1C95DE8DC()
{
  return MEMORY[0x1F4155E10]();
}

uint64_t sub_1C95DE8EC()
{
  return MEMORY[0x1F4155E18]();
}

uint64_t sub_1C95DE8FC()
{
  return MEMORY[0x1F4155E20]();
}

uint64_t sub_1C95DE90C()
{
  return MEMORY[0x1F4155E38]();
}

uint64_t sub_1C95DE91C()
{
  return MEMORY[0x1F4155E58]();
}

uint64_t sub_1C95DE92C()
{
  return MEMORY[0x1F4155E60]();
}

uint64_t sub_1C95DE93C()
{
  return MEMORY[0x1F4155E68]();
}

uint64_t sub_1C95DE94C()
{
  return MEMORY[0x1F4155E80]();
}

uint64_t sub_1C95DE95C()
{
  return MEMORY[0x1F4155E88]();
}

uint64_t sub_1C95DE96C()
{
  return MEMORY[0x1F4155E90]();
}

uint64_t sub_1C95DE97C()
{
  return MEMORY[0x1F4155E98]();
}

uint64_t sub_1C95DE98C()
{
  return MEMORY[0x1F4155EA0]();
}

uint64_t sub_1C95DE99C()
{
  return MEMORY[0x1F4155ED8]();
}

uint64_t sub_1C95DE9AC()
{
  return MEMORY[0x1F4156108]();
}

uint64_t sub_1C95DE9BC()
{
  return MEMORY[0x1F4156230]();
}

uint64_t sub_1C95DE9CC()
{
  return MEMORY[0x1F4156240]();
}

uint64_t sub_1C95DE9DC()
{
  return MEMORY[0x1F4156310]();
}

uint64_t sub_1C95DE9EC()
{
  return MEMORY[0x1F4156328]();
}

uint64_t sub_1C95DE9FC()
{
  return MEMORY[0x1F4156370]();
}

uint64_t sub_1C95DEA0C()
{
  return MEMORY[0x1F4156380]();
}

uint64_t sub_1C95DEA1C()
{
  return MEMORY[0x1F4156B40]();
}

uint64_t sub_1C95DEA2C()
{
  return MEMORY[0x1F4156B48]();
}

uint64_t sub_1C95DEA3C()
{
  return MEMORY[0x1F4156B50]();
}

uint64_t sub_1C95DEA4C()
{
  return MEMORY[0x1F4157340]();
}

uint64_t sub_1C95DEA5C()
{
  return MEMORY[0x1F4157348]();
}

uint64_t sub_1C95DEA6C()
{
  return MEMORY[0x1F4157350]();
}

uint64_t sub_1C95DEA7C()
{
  return MEMORY[0x1F4157358]();
}

uint64_t sub_1C95DEA8C()
{
  return MEMORY[0x1F4157360]();
}

uint64_t sub_1C95DEA9C()
{
  return MEMORY[0x1F4157368]();
}

uint64_t sub_1C95DEAAC()
{
  return MEMORY[0x1F4157398]();
}

uint64_t sub_1C95DEABC()
{
  return MEMORY[0x1F41573B8]();
}

uint64_t sub_1C95DEACC()
{
  return MEMORY[0x1F41573D0]();
}

uint64_t sub_1C95DEADC()
{
  return MEMORY[0x1F41573D8]();
}

uint64_t sub_1C95DEAEC()
{
  return MEMORY[0x1F41573E0]();
}

uint64_t sub_1C95DEAFC()
{
  return MEMORY[0x1F41573F0]();
}

uint64_t sub_1C95DEB0C()
{
  return MEMORY[0x1F41573F8]();
}

uint64_t sub_1C95DEB1C()
{
  return MEMORY[0x1F4157400]();
}

uint64_t sub_1C95DEB2C()
{
  return MEMORY[0x1F4157410]();
}

uint64_t sub_1C95DEB3C()
{
  return MEMORY[0x1F4157428]();
}

uint64_t sub_1C95DEB4C()
{
  return MEMORY[0x1F4157438]();
}

uint64_t sub_1C95DEB5C()
{
  return MEMORY[0x1F4157448]();
}

uint64_t sub_1C95DEB6C()
{
  return MEMORY[0x1F4157468]();
}

uint64_t sub_1C95DEB7C()
{
  return MEMORY[0x1F4157470]();
}

uint64_t sub_1C95DEB8C()
{
  return MEMORY[0x1F4157478]();
}

uint64_t sub_1C95DEB9C()
{
  return MEMORY[0x1F4157488]();
}

uint64_t sub_1C95DEBAC()
{
  return MEMORY[0x1F4157490]();
}

uint64_t sub_1C95DEBBC()
{
  return MEMORY[0x1F41574B0]();
}

uint64_t sub_1C95DEBCC()
{
  return MEMORY[0x1F41574B8]();
}

uint64_t sub_1C95DEBDC()
{
  return MEMORY[0x1F41574C0]();
}

uint64_t sub_1C95DEBEC()
{
  return MEMORY[0x1F41574C8]();
}

uint64_t sub_1C95DEBFC()
{
  return MEMORY[0x1F41574D0]();
}

uint64_t sub_1C95DEC0C()
{
  return MEMORY[0x1F41574D8]();
}

uint64_t sub_1C95DEC1C()
{
  return MEMORY[0x1F4188568]();
}

uint64_t sub_1C95DEC2C()
{
  return MEMORY[0x1F4188570]();
}

uint64_t sub_1C95DEC3C()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_1C95DEC4C()
{
  return MEMORY[0x1F4188590]();
}

uint64_t sub_1C95DEC5C()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t sub_1C95DEC6C()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t sub_1C95DEC7C()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t sub_1C95DEC8C()
{
  return MEMORY[0x1F4188650]();
}

uint64_t sub_1C95DEC9C()
{
  return MEMORY[0x1F4188658]();
}

uint64_t sub_1C95DECAC()
{
  return MEMORY[0x1F4188660]();
}

uint64_t sub_1C95DECBC()
{
  return MEMORY[0x1F4188668]();
}

uint64_t sub_1C95DECCC()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1C95DECDC()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1C95DECEC()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1C95DECFC()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1C95DED0C()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1C95DED1C()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1C95DED2C()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1C95DED3C()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1C95DED4C()
{
  return MEMORY[0x1F41839D0]();
}

uint64_t sub_1C95DED5C()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1C95DED6C()
{
  return MEMORY[0x1F4183B20]();
}

uint64_t sub_1C95DED7C()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1C95DED8C()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1C95DED9C()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1C95DEDAC()
{
  return MEMORY[0x1F40E6360]();
}

uint64_t sub_1C95DEDBC()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1C95DEDCC()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1C95DEDDC()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1C95DEDEC()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1C95DEDFC()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1C95DEE0C()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1C95DEE1C()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_1C95DEE2C()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1C95DEE3C()
{
  return MEMORY[0x1F4188708]();
}

uint64_t sub_1C95DEE4C()
{
  return MEMORY[0x1F4188710]();
}

uint64_t sub_1C95DEE5C()
{
  return MEMORY[0x1F40E6840]();
}

uint64_t sub_1C95DEE6C()
{
  return MEMORY[0x1F4188720]();
}

uint64_t sub_1C95DEE8C()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1C95DEE9C()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1C95DEEAC()
{
  return MEMORY[0x1F40E6C08]();
}

uint64_t sub_1C95DEEBC()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1C95DEECC()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t sub_1C95DEEDC()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_1C95DEEEC()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_1C95DEEFC()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1C95DEF0C()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1C95DEF1C()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1C95DEF2C()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1C95DEF3C()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1C95DEF4C()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1C95DEF5C()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1C95DEF6C()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1C95DEF7C()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1C95DEF8C()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1C95DEF9C()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1C95DEFAC()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1C95DEFBC()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1C95DEFCC()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1C95DEFDC()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1C95DEFEC()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1C95DEFFC()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1C95DF00C()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t AFDeviceSupportsSAE()
{
  return MEMORY[0x1F410ACB8]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t sirinluexternal::SpanProperty::makeValueString(sirinluexternal::SpanProperty *this)
{
  return MEMORY[0x1F41554F8](this);
}

uint64_t sirinluexternal::SpanProperty::SpanProperty(sirinluexternal::SpanProperty *this, const sirinluexternal::SpanProperty *a2)
{
  return MEMORY[0x1F4155500](this, a2);
}

uint64_t sirinluexternal::SpanProperty::SpanProperty(sirinluexternal::SpanProperty *this)
{
  return MEMORY[0x1F4155508](this);
}

void sirinluexternal::SpanProperty::~SpanProperty(sirinluexternal::SpanProperty *this)
{
}

uint64_t sirinluexternal::UsoEntitySpan::makeEndIndex(sirinluexternal::UsoEntitySpan *this)
{
  return MEMORY[0x1F4155588](this);
}

uint64_t sirinluexternal::UsoEntitySpan::makeStartIndex(sirinluexternal::UsoEntitySpan *this)
{
  return MEMORY[0x1F4155590](this);
}

uint64_t sirinluexternal::UsoEntitySpan::makeOriginAppId(sirinluexternal::UsoEntitySpan *this)
{
  return MEMORY[0x1F4155598](this);
}

uint64_t sirinluexternal::UsoEntitySpan::UsoEntitySpan(sirinluexternal::UsoEntitySpan *this, const sirinluexternal::UsoEntitySpan *a2)
{
  return MEMORY[0x1F41555A0](this, a2);
}

uint64_t sirinluexternal::UsoEntitySpan::UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
  return MEMORY[0x1F41555A8](this);
}

void sirinluexternal::UsoEntitySpan::~UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan()
{
  return MEMORY[0x1F41555B8]();
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(sirinluexternal::UtteranceSpan *this)
{
  return MEMORY[0x1F41555C0](this);
}

void sirinluexternal::UtteranceSpan::~UtteranceSpan(sirinluexternal::UtteranceSpan *this)
{
}

uint64_t sirinluexternal::EntityCandidate::EntityCandidate()
{
  return MEMORY[0x1F41555D8]();
}

uint64_t sirinluexternal::EntityCandidate::EntityCandidate(sirinluexternal::EntityCandidate *this)
{
  return MEMORY[0x1F41555E0](this);
}

void sirinluexternal::EntityCandidate::~EntityCandidate(sirinluexternal::EntityCandidate *this)
{
}

uint64_t sirinluexternal::EntityCandidate::operator=()
{
  return MEMORY[0x1F41555F0]();
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment()
{
  return MEMORY[0x1F4155648]();
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(sirinluexternal::UtteranceAlignment *this)
{
  return MEMORY[0x1F4155650](this);
}

void sirinluexternal::UtteranceAlignment::~UtteranceAlignment(sirinluexternal::UtteranceAlignment *this)
{
}

uint64_t sirinluexternal::UsoEntityIdentifier::makeNamespaceA(sirinluexternal::UsoEntityIdentifier *this)
{
  return MEMORY[0x1F4155668](this);
}

uint64_t sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this, const sirinluexternal::UsoEntityIdentifier *a2)
{
  return MEMORY[0x1F4155670](this, a2);
}

uint64_t sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
  return MEMORY[0x1F4155678](this);
}

void sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
}

uint64_t sirinluexternal::UUID::UUID(sirinluexternal::UUID *this, const UUID *a2)
{
  return MEMORY[0x1F41556A8](this, a2);
}

uint64_t sirinluexternal::UsoGraph::UsoGraph()
{
  return MEMORY[0x1F41556B8]();
}

void sirinluexternal::UsoGraph::~UsoGraph(sirinluexternal::UsoGraph *this)
{
}

uint64_t sirinluinternal::MatchingSpan::makeInternalSpanData(sirinluinternal::MatchingSpan *this)
{
  return MEMORY[0x1F4155728](this);
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan()
{
  return MEMORY[0x1F4155730]();
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this, const sirinluinternal::MatchingSpan *a2)
{
  return MEMORY[0x1F4155738](this, a2);
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  return MEMORY[0x1F4155740](this);
}

void sirinluinternal::MatchingSpan::~MatchingSpan(sirinluinternal::MatchingSpan *this)
{
}

uint64_t sirinluinternal::MatchingSpan::operator=()
{
  return MEMORY[0x1F4155750]();
}

{
  return MEMORY[0x1F4155758]();
}

uint64_t sirinluinternal::InternalSpanData::makeMentionDetectorSpanData(sirinluinternal::InternalSpanData *this)
{
  return MEMORY[0x1F4155778](this);
}

uint64_t sirinluinternal::InternalSpanData::makeMentionResolverSpanData(sirinluinternal::InternalSpanData *this)
{
  return MEMORY[0x1F4155780](this);
}

uint64_t sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor()
{
  return MEMORY[0x1F41557B0]();
}

void sirinluinternal::NLv4EmbeddingTensor::~NLv4EmbeddingTensor(sirinluinternal::NLv4EmbeddingTensor *this)
{
}

uint64_t sirinluinternal::Token::Token()
{
  return MEMORY[0x1F41557C8]();
}

void sirinluinternal::Token::~Token(sirinluinternal::Token *this)
{
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41474F0](this, a2);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1F4147578](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  return MEMORY[0x1F4155848](this);
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse()
{
  return MEMORY[0x1F4155850]();
}

{
  return MEMORY[0x1F4155858]();
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  return MEMORY[0x1F4155860](this);
}

void sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  return MEMORY[0x1F4155870](this);
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse()
{
  return MEMORY[0x1F4155878]();
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  return MEMORY[0x1F4155880](this);
}

void sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
}

uint64_t siri::ontology::UsoGraphProtoReader::fromProtobuf(siri::ontology::UsoGraphProtoReader *this, const sirinluexternal::UsoGraph *a2)
{
  return MEMORY[0x1F41559A8](this, a2);
}

uint64_t siri::ontology::getSharedUsoVocabManager(siri::ontology *this)
{
  return MEMORY[0x1F4157738](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_App(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157740](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Uri(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157748](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Alarm(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157778](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Group(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157780](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Photo(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157788](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Timer(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157790](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_city(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157798](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_name(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577B0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_type(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577C8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Person(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577E8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Window(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41577F0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_names(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157800](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_value(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157810](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Setting(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157820](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_entity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157828](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_street(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157840](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTime(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157848](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_address(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157868](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_country(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157870](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157880](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItem(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157890](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::primitive_String(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578A0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_province(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578B0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41578C0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneNumber(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157910](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_postalCode(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157928](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Announcement(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157938](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157948](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Notification(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157958](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SearchObject(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157960](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_stringValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157990](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntityType(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157998](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_LocalBusiness(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579B0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PostalAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579C0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_definedValue(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F41579E8](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_mediaItemType(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A18](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_playbackState(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A20](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_LocalisedString(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157A28](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType_Song(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B28](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType_Album(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B60](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType_Video(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157B68](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType_Artist(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BD0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PlaybackState_Paused(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157BF0](this);
}

uint64_t siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress(siri::ontology::oname::graph::ontology_init *this)
{
  return MEMORY[0x1F4157D08](this);
}

void siri::ontology::UsoGraph::~UsoGraph(siri::ontology::UsoGraph *this)
{
}

uint64_t siri::ontology::operator!=()
{
  return MEMORY[0x1F4157DA0]();
}

uint64_t morphun::util::StringUtils::convert()
{
  return MEMORY[0x1F4180EC8]();
}

{
  return MEMORY[0x1F4180ED0]();
}

uint64_t morphun::util::StringUtils::lowercase()
{
  return MEMORY[0x1F4180ED8]();
}

uint64_t morphun::util::ULocale::ULocale()
{
  return MEMORY[0x1F4180F20]();
}

{
  return MEMORY[0x1F4180F38]();
}

void morphun::util::ULocale::~ULocale(morphun::util::ULocale *this)
{
}

uint64_t sirinluinternal::MatchingSpan::hash_value(sirinluinternal::MatchingSpan *this)
{
  return MEMORY[0x1F41559C8](this);
}

uint64_t sirinluinternal::MatchingSpan::operator==()
{
  return MEMORY[0x1F41559D0]();
}

uint64_t siri::ontology::UsoEntityNode::getIdentifiers(siri::ontology::UsoEntityNode *this)
{
  return MEMORY[0x1F4157DB0](this);
}

uint64_t siri::ontology::UsoGraph::prettyPrint(siri::ontology::UsoGraph *this)
{
  return MEMORY[0x1F4157E10](this);
}

uint64_t siri::ontology::UsoGraph::getSuccessors()
{
  return MEMORY[0x1F4157E18]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x1F417E4A0](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E678](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x1F417E938]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1F417EBC8](a1, __ec);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  MEMORY[0x1F417EBD8](__str, __idx);
  return result;
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1F417EC68]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1F417EE68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

{
  MEMORY[0x1F417EEF0](this);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x1F417EF08]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1F417EF70](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1F41138D8]();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1F4118628]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1F4118638]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1F4118648]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1F4118668]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1F4118678]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1F41186E0]();
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank()
{
  return MEMORY[0x1F4118748]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1F41187D8]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1F41187F0]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1F41187F8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1F4118818]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1F4118828]();
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}